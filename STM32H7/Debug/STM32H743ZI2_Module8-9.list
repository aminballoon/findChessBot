
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f8c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f3c  08015230  08015230  00025230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801716c  0801716c  0002716c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08017174  08017174  00027174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0801717c  0801717c  0002717c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000410  24000000  08017184  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001350  24000410  08017594  00030410  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001760  08017594  00031760  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030410  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c513  00000000  00000000  0003043e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000049d0  00000000  00000000  0005c951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017e0  00000000  00000000  00061328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001618  00000000  00000000  00062b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e55a  00000000  00000000  00064120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024f89  00000000  00000000  000a267a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016dd99  00000000  00000000  000c7603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023539c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000075ec  00000000  00000000  002353ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000410 	.word	0x24000410
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015214 	.word	0x08015214

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000414 	.word	0x24000414
 80002dc:	08015214 	.word	0x08015214

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	4613      	mov	r3, r2
 80006a0:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	68ba      	ldr	r2, [r7, #8]
 80006a6:	601a      	str	r2, [r3, #0]
	this->address = _address;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	79fa      	ldrb	r2, [r7, #7]
 80006ac:	729a      	strb	r2, [r3, #10]
}
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	4618      	mov	r0, r3
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]

}
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f103 010a 	add.w	r1, r3, #10
 80006e4:	2364      	movs	r3, #100	; 0x64
 80006e6:	2201      	movs	r2, #1
 80006e8:	f00e fc2a 	bl	800ef40 <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6818      	ldr	r0, [r3, #0]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f103 010c 	add.w	r1, r3, #12
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	2202      	movs	r2, #2
 80006fa:	f00e fcb7 	bl	800f06c <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	899b      	ldrh	r3, [r3, #12]
 8000702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000706:	2b00      	cmp	r3, #0
 8000708:	bf14      	ite	ne
 800070a:	2301      	movne	r3, #1
 800070c:	2300      	moveq	r3, #0
 800070e:	b2db      	uxtb	r3, r3
 8000710:	461a      	mov	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	899b      	ldrh	r3, [r3, #12]
 800071a:	b21b      	sxth	r3, r3
 800071c:	b29b      	uxth	r3, r3
 800071e:	0bdb      	lsrs	r3, r3, #15
 8000720:	b2db      	uxtb	r3, r3
 8000722:	461a      	mov	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	765a      	strb	r2, [r3, #25]
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	899b      	ldrh	r3, [r3, #12]
 800073c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000740:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	899b      	ldrh	r3, [r3, #12]
 8000752:	085b      	lsrs	r3, r3, #1
 8000754:	b29b      	uxth	r3, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 800075e:	2300      	movs	r3, #0
 8000760:	737b      	strb	r3, [r7, #13]
 8000762:	7b7b      	ldrb	r3, [r7, #13]
 8000764:	2b05      	cmp	r3, #5
 8000766:	d821      	bhi.n	80007ac <_ZN5AMT2117AMT21_Check_ValueEv+0x7c>
		this->uart_buf = this->uart_buf >> 2;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	899b      	ldrh	r3, [r3, #12]
 800076c:	089b      	lsrs	r3, r3, #2
 800076e:	b29a      	uxth	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	899b      	ldrh	r3, [r3, #12]
 8000778:	b25b      	sxtb	r3, r3
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	b25a      	sxtb	r2, r3
 8000780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000784:	4053      	eors	r3, r2
 8000786:	b25b      	sxtb	r3, r3
 8000788:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	899b      	ldrh	r3, [r3, #12]
 800078e:	085b      	lsrs	r3, r3, #1
 8000790:	b29b      	uxth	r3, r3
 8000792:	b25b      	sxtb	r3, r3
 8000794:	f003 0301 	and.w	r3, r3, #1
 8000798:	b25a      	sxtb	r2, r3
 800079a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800079e:	4053      	eors	r3, r2
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007a4:	7b7b      	ldrb	r3, [r7, #13]
 80007a6:	3301      	adds	r3, #1
 80007a8:	737b      	strb	r3, [r7, #13]
 80007aa:	e7da      	b.n	8000762 <_ZN5AMT2117AMT21_Check_ValueEv+0x32>
	}
	k0_check = !k0_check;
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	bf0c      	ite	eq
 80007b2:	2301      	moveq	r3, #1
 80007b4:	2300      	movne	r3, #0
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	bf0c      	ite	eq
 80007c0:	2301      	moveq	r3, #1
 80007c2:	2300      	movne	r3, #0
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	7e1b      	ldrb	r3, [r3, #24]
 80007cc:	7bfa      	ldrb	r2, [r7, #15]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d10a      	bne.n	80007e8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb8>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	7e5b      	ldrb	r3, [r3, #25]
 80007d6:	7bba      	ldrb	r2, [r7, #14]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d105      	bne.n	80007e8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb8>
		this->raw_value = raw_value_temp;
 80007dc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007e4:	2300      	movs	r3, #0
 80007e6:	e003      	b.n	80007f0 <_ZN5AMT2117AMT21_Check_ValueEv+0xc0>
	} else {
		this->raw_value = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
	}
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue() {
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800080a:	135b      	asrs	r3, r3, #13
 800080c:	b21b      	sxth	r3, r3
 800080e:	b29b      	uxth	r3, r3
			+ (this->raw_value & 0x3FFF)) * -1;
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	b29b      	uxth	r3, r3
 8000816:	461a      	mov	r2, r3
 8000818:	0392      	lsls	r2, r2, #14
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	b29a      	uxth	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000824:	b29b      	uxth	r3, r3
 8000826:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800082a:	b29b      	uxth	r3, r3
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	b29b      	uxth	r3, r3
 8000830:	b21b      	sxth	r3, r3
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <_ZN5AMT216unwarpEv>:
void AMT21::unwarp() {
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	int32_t dPulse = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
	if (this->raw_value - this->prev_raw_value > 8191) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000852:	461a      	mov	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000860:	db0b      	blt.n	800087a <_ZN5AMT216unwarpEv+0x3a>
		dPulse = -(16383 - (this->raw_value - this->prev_raw_value));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000868:	461a      	mov	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000870:	1ad2      	subs	r2, r2, r3
 8000872:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <_ZN5AMT216unwarpEv+0xa0>)
 8000874:	4413      	add	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	e020      	b.n	80008bc <_ZN5AMT216unwarpEv+0x7c>
	} else if (this->raw_value - this->prev_raw_value < -8191) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000880:	461a      	mov	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800088e:	dc0c      	bgt.n	80008aa <_ZN5AMT216unwarpEv+0x6a>
		dPulse = 16383 - (this->prev_raw_value - this->raw_value);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000896:	461a      	mov	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800089e:	1ad2      	subs	r2, r2, r3
 80008a0:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80008a4:	1a9b      	subs	r3, r3, r2
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	e008      	b.n	80008bc <_ZN5AMT216unwarpEv+0x7c>
	} else {
		dPulse = this->prev_raw_value - this->raw_value;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80008b0:	461a      	mov	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	60fb      	str	r3, [r7, #12]
	}
	this->prev_raw_value = this->raw_value;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	821a      	strh	r2, [r3, #16]
	this->unwarp_value = this->unwarp_value + dPulse;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	695a      	ldr	r2, [r3, #20]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	441a      	add	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	615a      	str	r2, [r3, #20]
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	ffffc001 	.word	0xffffc001

080008e4 <_ZN5AMT2113setUnwarpZeroEv>:
void AMT21::setUnwarpZero(){
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	this->unwarp_value = 0;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <_ZN5AMT2114getUnwarpValueEv>:
int32_t AMT21::getUnwarpValue() {
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
	return this->unwarp_value;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	695b      	ldr	r3, [r3, #20]
}
 800090a:	4618      	mov	r0, r3
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <_ZN10AS5047UABIC1EP17TIM_HandleTypeDefmm>:
 *  Created on: Apr 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AS5047UABI.h"

AS5047UABI::AS5047UABI(TIM_HandleTypeDef *_enc_htim, uint32_t _ENC_TIM_CHANNEL1, uint32_t _ENC_TIM_CHANNEL2){
 8000916:	b480      	push	{r7}
 8000918:	b085      	sub	sp, #20
 800091a:	af00      	add	r7, sp, #0
 800091c:	60f8      	str	r0, [r7, #12]
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2200      	movs	r2, #0
 8000928:	731a      	strb	r2, [r3, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2204      	movs	r2, #4
 800092e:	735a      	strb	r2, [r3, #13]
	this->enc_htim = _enc_htim;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	601a      	str	r2, [r3, #0]
	this->ENC_TIM_CHANNEL1 = _ENC_TIM_CHANNEL1;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	605a      	str	r2, [r3, #4]
	this->ENC_TIM_CHANNEL2 = _ENC_TIM_CHANNEL2;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	609a      	str	r2, [r3, #8]
}
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	4618      	mov	r0, r3
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <_ZN10AS5047UABID1Ev>:
AS5047UABI::~AS5047UABI(){
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

}
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4618      	mov	r0, r3
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <_ZN10AS5047UABI17EncoderReadEnableEv>:
void AS5047UABI::EncoderReadEnable(){
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(this->enc_htim, this->ENC_TIM_CHANNEL1);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	4619      	mov	r1, r3
 8000978:	4610      	mov	r0, r2
 800097a:	f00d f951 	bl	800dc20 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(this->enc_htim, this->ENC_TIM_CHANNEL2);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	4619      	mov	r1, r3
 8000988:	4610      	mov	r0, r2
 800098a:	f00d f949 	bl	800dc20 <HAL_TIM_Encoder_Start>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <_ZN10AS5047UABI7setZeroEv>:
void AS5047UABI::EncoderReadDisable(){
	HAL_TIM_Encoder_Stop(this->enc_htim, this->ENC_TIM_CHANNEL1);
	HAL_TIM_Encoder_Stop(this->enc_htim, this->ENC_TIM_CHANNEL2);
}
void AS5047UABI::setZero(){
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
	this->enc_htim->Instance->CNT = 0;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <_ZN10AS5047UABI11getDegAngleEv>:
uint16_t AS5047UABI::getRawCounter(){
	return this->enc_htim->Instance->CNT;
}
float AS5047UABI::getDegAngle(){
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	return ((float)this->enc_htim->Instance->CNT / 2047.0f) * 360.0f;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c4:	ee07 3a90 	vmov	s15, r3
 80009c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009cc:	eddf 6a07 	vldr	s13, [pc, #28]	; 80009ec <_ZN10AS5047UABI11getDegAngleEv+0x38>
 80009d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009d4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80009f0 <_ZN10AS5047UABI11getDegAngleEv+0x3c>
 80009d8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80009dc:	eeb0 0a67 	vmov.f32	s0, s15
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	44ffe000 	.word	0x44ffe000
 80009f0:	43b40000 	.word	0x43b40000

080009f4 <_ZN10AS5047UABI12getMRadAngleEv>:
float AS5047UABI::getRadAngle(){
	return ((float)this->enc_htim->Instance->CNT / 2047.0f) * 6.28f;
}
float AS5047UABI::getMRadAngle(){
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	return ((float)this->enc_htim->Instance->CNT / 2047.0f) * 6280.0f;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a04:	ee07 3a90 	vmov	s15, r3
 8000a08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a0c:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000a2c <_ZN10AS5047UABI12getMRadAngleEv+0x38>
 8000a10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a14:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000a30 <_ZN10AS5047UABI12getMRadAngleEv+0x3c>
 8000a18:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	44ffe000 	.word	0x44ffe000
 8000a30:	45c44000 	.word	0x45c44000

08000a34 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a3e:	edc7 0a00 	vstr	s1, [r7]
 8000a42:	edd7 0a00 	vldr	s1, [r7]
 8000a46:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a4a:	f010 ff15 	bl	8011878 <atan2f>
 8000a4e:	eef0 7a40 	vmov.f32	s15, s0
 8000a52:	eeb0 0a67 	vmov.f32	s0, s15
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a66:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a6a:	f010 ff07 	bl	801187c <sqrtf>
 8000a6e:	eef0 7a40 	vmov.f32	s15, s0
 8000a72:	eeb0 0a67 	vmov.f32	s0, s15
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <_ZN10RobotJointC1Ev>:
 *      Author: SakuranohanaTH
 */

#include "RobotJoint.h"

RobotJoint::RobotJoint() {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a32      	ldr	r2, [pc, #200]	; (8000b50 <_ZN10RobotJointC1Ev+0xd4>)
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	edd3 7a00 	vldr	s15, [r3]
 8000a90:	2002      	movs	r0, #2
 8000a92:	eeb0 0a67 	vmov.f32	s0, s15
 8000a96:	f000 fecb 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000a9a:	eeb0 7b40 	vmov.f64	d7, d0
 8000a9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	edc3 7a01 	vstr	s15, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	edd3 7a00 	vldr	s15, [r3]
 8000aae:	2003      	movs	r0, #3
 8000ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab4:	f000 febc 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000ab8:	eeb0 7b40 	vmov.f64	d7, d0
 8000abc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	edc3 7a02 	vstr	s15, [r3, #8]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	edd3 7a00 	vldr	s15, [r3]
 8000acc:	2004      	movs	r0, #4
 8000ace:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad2:	f000 fead 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000ad6:	eeb0 7b40 	vmov.f64	d7, d0
 8000ada:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	edc3 7a03 	vstr	s15, [r3, #12]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f04f 0200 	mov.w	r2, #0
 8000aea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f04f 0200 	mov.w	r2, #0
 8000af4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000afe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f04f 0200 	mov.w	r2, #0
 8000b08:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000b12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f04f 0200 	mov.w	r2, #0
 8000b1c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f04f 0200 	mov.w	r2, #0
 8000b26:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f04f 0200 	mov.w	r2, #0
 8000b30:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <_ZN10RobotJointC1Ev+0xd8>)
 8000b38:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <_ZN10RobotJointC1Ev+0xd4>)
 8000b40:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

}
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	3a83126f 	.word	0x3a83126f
 8000b54:	3dcccccd 	.word	0x3dcccccd

08000b58 <_ZN10RobotJointD1Ev>:
RobotJoint::~RobotJoint() {
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

}
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <_ZN10RobotJoint9UpdateIVKEffffffff>:
void RobotJoint::UpdateIVK(float _q1, float _q2, float _q3, float _q4, float Vx,
		float Vy, float Vz, float Wz) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b090      	sub	sp, #64	; 0x40
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6278      	str	r0, [r7, #36]	; 0x24
 8000b78:	ed87 0a08 	vstr	s0, [r7, #32]
 8000b7c:	edc7 0a07 	vstr	s1, [r7, #28]
 8000b80:	ed87 1a06 	vstr	s2, [r7, #24]
 8000b84:	edc7 1a05 	vstr	s3, [r7, #20]
 8000b88:	ed87 2a04 	vstr	s4, [r7, #16]
 8000b8c:	edc7 2a03 	vstr	s5, [r7, #12]
 8000b90:	ed87 3a02 	vstr	s6, [r7, #8]
 8000b94:	edc7 3a01 	vstr	s7, [r7, #4]
	float S13 = sin((_q1 + _q3)/1000.0);
 8000b98:	ed97 7a08 	vldr	s14, [r7, #32]
 8000b9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ba4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ba8:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 8000da8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000bac:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000bb0:	eeb0 0b46 	vmov.f64	d0, d6
 8000bb4:	f010 fe14 	bl	80117e0 <sin>
 8000bb8:	eeb0 7b40 	vmov.f64	d7, d0
 8000bbc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bc0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float C13 = cos((_q1 + _q3)/1000.0);
 8000bc4:	ed97 7a08 	vldr	s14, [r7, #32]
 8000bc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bd4:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8000da8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000bd8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000bdc:	eeb0 0b46 	vmov.f64	d0, d6
 8000be0:	f010 fdb2 	bl	8011748 <cos>
 8000be4:	eeb0 7b40 	vmov.f64	d7, d0
 8000be8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bec:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float S3 = sin(_q3/1000.0);
 8000bf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bf4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bf8:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8000da8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000bfc:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000c00:	eeb0 0b46 	vmov.f64	d0, d6
 8000c04:	f010 fdec 	bl	80117e0 <sin>
 8000c08:	eeb0 7b40 	vmov.f64	d7, d0
 8000c0c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c10:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S1 = sin(_q1/1000.0);
 8000c14:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c1c:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8000da8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000c20:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000c24:	eeb0 0b46 	vmov.f64	d0, d6
 8000c28:	f010 fdda 	bl	80117e0 <sin>
 8000c2c:	eeb0 7b40 	vmov.f64	d7, d0
 8000c30:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c34:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float C1 = cos(_q1/1000.0);
 8000c38:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c40:	ed9f 5b59 	vldr	d5, [pc, #356]	; 8000da8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000c44:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000c48:	eeb0 0b46 	vmov.f64	d0, d6
 8000c4c:	f010 fd7c 	bl	8011748 <cos>
 8000c50:	eeb0 7b40 	vmov.f64	d7, d0
 8000c54:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c58:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float L3S3 = this->L3 * S3;
 8000c5c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000c60:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8000db0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000c64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c68:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	this->w_q1 = ((Vx * C13 + Vy * S13) / (S3 * this->L12)) * 1000.0;
 8000c6c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c70:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000c74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c78:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c7c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c84:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000c88:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000c8c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000db4 <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000c90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c98:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000db8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	this->w_q2 = Vz * 1000.0;
 8000ca6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000caa:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000db8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000cae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000cb8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000cbc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000db0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000cc0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cc4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000cc8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8000dbc <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000ccc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000cd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cd4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000cd8:	eddf 6a39 	vldr	s13, [pc, #228]	; 8000dc0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000cdc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ce0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ce4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cec:	eef1 6a67 	vneg.f32	s13, s15
			/ (L3S3 * this->L12)
 8000cf0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000cf4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000db4 <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000cf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000d00:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000d04:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000db0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000d08:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000d0c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000d10:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 8000dbc <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000d14:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000d18:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000d1c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000d20:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8000dc0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000d24:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000d28:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000d2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d30:	ee26 6aa7 	vmul.f32	s12, s13, s15
					/ (L3S3 * this->L12)) * 1000.0;
 8000d34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d38:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000db4 <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000d3c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000d40:	eec6 7a26 	vdiv.f32	s15, s12, s13
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000d44:	ee77 7a67 	vsub.f32	s15, s14, s15
					/ (L3S3 * this->L12)) * 1000.0;
 8000d48:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000db8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d52:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	this->w_q4 = ((Vx * C1 + Vy * S1 + this->L3 * Wz * S3) / (L3S3)) * 1000.0;
 8000d56:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d5a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d62:	edd7 6a03 	vldr	s13, [r7, #12]
 8000d66:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d72:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d76:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000db0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000d7a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000d7e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000d82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d86:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000d8a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000d8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d92:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000db8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
}
 8000da0:	bf00      	nop
 8000da2:	3740      	adds	r7, #64	; 0x40
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	00000000 	.word	0x00000000
 8000dac:	408f4000 	.word	0x408f4000
 8000db0:	439d8000 	.word	0x439d8000
 8000db4:	43bfa000 	.word	0x43bfa000
 8000db8:	447a0000 	.word	0x447a0000
 8000dbc:	41540000 	.word	0x41540000
 8000dc0:	43b90000 	.word	0x43b90000

08000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>:
void RobotJoint::UpdateQuinticCoff(float T, float Start_pos, float Final_pos,
		float Start_velocity, float Final_velocity, float Start_acceleration,
		float Final_acceleration) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	b091      	sub	sp, #68	; 0x44
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	61f8      	str	r0, [r7, #28]
 8000dcc:	ed87 0a06 	vstr	s0, [r7, #24]
 8000dd0:	edc7 0a05 	vstr	s1, [r7, #20]
 8000dd4:	ed87 1a04 	vstr	s2, [r7, #16]
 8000dd8:	edc7 1a03 	vstr	s3, [r7, #12]
 8000ddc:	ed87 2a02 	vstr	s4, [r7, #8]
 8000de0:	edc7 2a01 	vstr	s5, [r7, #4]
 8000de4:	ed87 3a00 	vstr	s6, [r7]
	this->C0 = Start_pos;
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	this->C1 = Start_velocity;
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	this->C2 = Start_acceleration / 2.0;
 8000df8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000dfc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000e00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

	const float A = Final_pos
			- (Start_pos + (Start_velocity * T)
 8000e0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e16:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e1a:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ (Start_acceleration * T * T / 2));
 8000e1e:	edd7 6a01 	vldr	s13, [r7, #4]
 8000e22:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e26:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e2e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e32:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000e36:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float A = Final_pos
 8000e3e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e46:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	const float B = Final_velocity
			- (Start_velocity + (Start_acceleration * T));
 8000e4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e4e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e56:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float B = Final_velocity
 8000e5e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e66:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	const float C = Final_acceleration - Start_acceleration;
 8000e6a:	ed97 7a00 	vldr	s14, [r7]
 8000e6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e76:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	const float T2 = T * T;
 8000e7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e7e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e82:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	const float T3 = T * T * T;
 8000e86:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e8e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e96:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	const float T4 = T * T * T * T;
 8000e9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e9e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ea2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eaa:	ed97 7a06 	vldr	s14, [r7, #24]
 8000eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	const float T5 = T * T * T * T * T;
 8000eb6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000eba:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ebe:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ec2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ec6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ece:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	this->C3 = (10.0 * A / T3) - (4.0 * B / T2) + (C / (2.0 * T));
 8000eda:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000ede:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ee2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000ee6:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000eea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000eee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ef2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000ef6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000efa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000efe:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000f02:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000f06:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000f0a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000f0e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f12:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000f16:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f1a:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000f1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f26:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000f2a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f2e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	this->C4 = (-15.0 * A / T4) + (7.0 * B / T3) - (C / T2);
 8000f3c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000f40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f44:	eeba 6b0e 	vmov.f64	d6, #174	; 0xc1700000 -15.0
 8000f48:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000f4c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000f50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f54:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000f58:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000f5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f60:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8000f64:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000f68:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000f6c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000f70:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f74:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000f78:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8000f7c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000f80:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8000f84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f88:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f8c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	this->C5 = (6.0 * A / T5) - (3.0 * B / T4) + (C / (2.0 * T3));
 8000f96:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000f9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f9e:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8000fa2:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000fa6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000faa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fae:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000fb2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000fb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fba:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000fbe:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000fc2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000fc6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000fca:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000fce:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000fd2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000fd6:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000fda:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000fde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fe2:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000fe6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000fea:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	this->T = T;
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

}
 8001000:	bf00      	nop
 8001002:	3744      	adds	r7, #68	; 0x44
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <_ZN10RobotJoint13KalmanFillterEf>:
void RobotJoint::KalmanFillter(float theta_k) {
 800100c:	b580      	push	{r7, lr}
 800100e:	ed2d 8b08 	vpush	{d8-d11}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	ed87 0a00 	vstr	s0, [r7]
	float X1 = this->X11;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = this->X21;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800102a:	623b      	str	r3, [r7, #32]
	float P11 = this->p11;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001032:	61fb      	str	r3, [r7, #28]
	float P12 = this->p12;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800103a:	61bb      	str	r3, [r7, #24]
	float P21 = this->p21;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001042:	617b      	str	r3, [r7, #20]
	float P22 = this->p22;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800104a:	613b      	str	r3, [r7, #16]
	float Q = this->Q;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001052:	60fb      	str	r3, [r7, #12]
	float R = this->R;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800105a:	60bb      	str	r3, [r7, #8]

	this->X11 = X1 + (X2 * this->dt)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	ed93 7a00 	vldr	s14, [r3]
 8001062:	edd7 7a08 	vldr	s15, [r7, #32]
 8001066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800106a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800106e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001072:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- ((X1 - theta_k + X2 * this->dt)
 8001076:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800107a:	edd7 7a00 	vldr	s15, [r7]
 800107e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	edd3 6a00 	vldr	s13, [r3]
 8001088:	edd7 7a08 	vldr	s15, [r7, #32]
 800108c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001094:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	ed93 7a00 	vldr	s14, [r3]
 800109e:	edd7 7a05 	vldr	s15, [r7, #20]
 80010a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80010aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ae:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80010b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80010b6:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	edd3 7a00 	vldr	s15, [r3]
 80010c0:	2004      	movs	r0, #4
 80010c2:	eeb0 0a67 	vmov.f32	s0, s15
 80010c6:	f000 fbb3 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80010ca:	eeb0 7b40 	vmov.f64	d7, d0
 80010ce:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80010d2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80010d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010da:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	ed93 7a00 	vldr	s14, [r3]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	edd3 5a00 	vldr	s11, [r3]
 80010ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80010ee:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80010f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80010f6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80010fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001102:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001106:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800110a:	ed97 7a07 	vldr	s14, [r7, #28]
 800110e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001112:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	edd3 6a00 	vldr	s13, [r3]
 800111c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001128:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800112c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001130:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	edd3 7a00 	vldr	s15, [r3]
 800113a:	2004      	movs	r0, #4
 800113c:	eeb0 0a67 	vmov.f32	s0, s15
 8001140:	f000 fb76 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001144:	eeb0 7b40 	vmov.f64	d7, d0
 8001148:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800114c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001150:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001154:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	ed93 7a00 	vldr	s14, [r3]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	edd3 5a00 	vldr	s11, [r3]
 8001164:	edd7 7a04 	vldr	s15, [r7, #16]
 8001168:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800116c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001170:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001178:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800117c:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001180:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- ((X1 - theta_k + X2 * this->dt)
 8001184:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001188:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X11 = X1 + (X2 * this->dt)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	this->X21 = X2
 8001192:	edd7 7a08 	vldr	s15, [r7, #32]
 8001196:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	2003      	movs	r0, #3
 80011aa:	eeb0 0a67 	vmov.f32	s0, s15
 80011ae:	f000 fb3f 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011b2:	eeb0 7b40 	vmov.f64	d7, d0
 80011b6:	ee29 7b07 	vmul.f64	d7, d9, d7
 80011ba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80011be:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	ed93 7a00 	vldr	s14, [r3]
 80011c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80011cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011d4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80011d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80011dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011e0:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (X1 - theta_k + X2 * this->dt))
 80011e4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011e8:	edd7 7a00 	vldr	s15, [r7]
 80011ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edd3 5a00 	vldr	s11, [r3]
 80011f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80011fa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80011fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001202:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001206:	ee26 9b07 	vmul.f64	d9, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800120a:	ed97 7a07 	vldr	s14, [r7, #28]
 800120e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001212:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	edd3 6a00 	vldr	s13, [r3]
 800121c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001220:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001228:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800122c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001230:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	edd3 7a00 	vldr	s15, [r3]
 800123a:	2004      	movs	r0, #4
 800123c:	eeb0 0a67 	vmov.f32	s0, s15
 8001240:	f000 faf6 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001244:	eeb0 7b40 	vmov.f64	d7, d0
 8001248:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800124c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001250:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001254:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	ed93 7a00 	vldr	s14, [r3]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	edd3 5a00 	vldr	s11, [r3]
 8001264:	edd7 7a04 	vldr	s15, [r7, #16]
 8001268:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800126c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001270:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001278:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800127c:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001280:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001284:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001288:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X21 = X2
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	ed93 7a00 	vldr	s14, [r3]
 8001298:	edd7 7a05 	vldr	s15, [r7, #20]
 800129c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80012a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80012ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	edd3 7a00 	vldr	s15, [r3]
 80012ba:	2004      	movs	r0, #4
 80012bc:	eeb0 0a67 	vmov.f32	s0, s15
 80012c0:	f000 fab6 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80012c4:	eeb0 7b40 	vmov.f64	d7, d0
 80012c8:	ee29 6b07 	vmul.f64	d6, d9, d7
 80012cc:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80012d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012d4:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 7a00 	vldr	s14, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 5a00 	vldr	s11, [r3]
 80012e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80012ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80012f0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80012f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012fc:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001300:	ed97 7a07 	vldr	s14, [r7, #28]
 8001304:	edd7 7a02 	vldr	s15, [r7, #8]
 8001308:	ee37 7a27 	vadd.f32	s14, s14, s15
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	edd3 6a00 	vldr	s13, [r3]
 8001312:	edd7 7a05 	vldr	s15, [r7, #20]
 8001316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001322:	edd7 7a03 	vldr	s15, [r7, #12]
 8001326:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	edd3 7a00 	vldr	s15, [r3]
 8001330:	2004      	movs	r0, #4
 8001332:	eeb0 0a67 	vmov.f32	s0, s15
 8001336:	f000 fa7b 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800133a:	eeb0 7b40 	vmov.f64	d7, d0
 800133e:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001342:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001346:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800134a:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	ed93 7a00 	vldr	s14, [r3]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	edd3 5a00 	vldr	s11, [r3]
 800135a:	edd7 7a04 	vldr	s15, [r7, #16]
 800135e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001362:	edd7 7a06 	vldr	s15, [r7, #24]
 8001366:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800136a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800136e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001372:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001376:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 800137a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800137e:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001382:	eeb1 8b47 	vneg.f64	d8, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	ed93 7a00 	vldr	s14, [r3]
 800138c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001390:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001394:	edd7 7a07 	vldr	s15, [r7, #28]
 8001398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80013a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80013a4:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	2004      	movs	r0, #4
 80013b0:	eeb0 0a67 	vmov.f32	s0, s15
 80013b4:	f000 fa3c 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80013b8:	eeb0 7b40 	vmov.f64	d7, d0
 80013bc:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80013c0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80013c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013c8:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	ed93 7a00 	vldr	s14, [r3]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	edd3 5a00 	vldr	s11, [r3]
 80013d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80013dc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80013e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80013e4:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80013e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013f0:	ee36 7b07 	vadd.f64	d7, d6, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013f4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80013f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	ed93 7a00 	vldr	s14, [r3]
 8001408:	edd7 7a05 	vldr	s15, [r7, #20]
 800140c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001410:	edd7 7a07 	vldr	s15, [r7, #28]
 8001414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001418:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800141c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001420:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	edd3 7a00 	vldr	s15, [r3]
 800142a:	2004      	movs	r0, #4
 800142c:	eeb0 0a67 	vmov.f32	s0, s15
 8001430:	f000 f9fe 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001434:	eeb0 7b40 	vmov.f64	d7, d0
 8001438:	ee29 6b07 	vmul.f64	d6, d9, d7
 800143c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001440:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001444:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	ed93 7a00 	vldr	s14, [r3]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	edd3 5a00 	vldr	s11, [r3]
 8001454:	edd7 7a04 	vldr	s15, [r7, #16]
 8001458:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800145c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001460:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001468:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800146c:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001470:	ed97 7a07 	vldr	s14, [r7, #28]
 8001474:	edd7 7a02 	vldr	s15, [r7, #8]
 8001478:	ee37 7a27 	vadd.f32	s14, s14, s15
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	edd3 6a00 	vldr	s13, [r3]
 8001482:	edd7 7a05 	vldr	s15, [r7, #20]
 8001486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800148a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001492:	edd7 7a03 	vldr	s15, [r7, #12]
 8001496:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	2004      	movs	r0, #4
 80014a2:	eeb0 0a67 	vmov.f32	s0, s15
 80014a6:	f000 f9c3 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014aa:	eeb0 7b40 	vmov.f64	d7, d0
 80014ae:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80014b2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80014b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014ba:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	ed93 7a00 	vldr	s14, [r3]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	edd3 5a00 	vldr	s11, [r3]
 80014ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80014ce:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80014d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80014d6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80014da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014e2:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80014e6:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80014ea:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80014ee:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80014f2:	eeb1 8b47 	vneg.f64	d8, d7
			* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12);
 80014f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014fa:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	2003      	movs	r0, #3
 8001506:	eeb0 0a67 	vmov.f32	s0, s15
 800150a:	f000 f991 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800150e:	eeb0 7b40 	vmov.f64	d7, d0
 8001512:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001516:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800151a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	ed93 7a00 	vldr	s14, [r3]
 8001524:	edd7 7a04 	vldr	s15, [r7, #16]
 8001528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001530:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001534:	edd7 7a06 	vldr	s15, [r7, #24]
 8001538:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800153c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001540:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001544:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	ed93 7a00 	vldr	s14, [r3]
 8001554:	edd7 7a04 	vldr	s15, [r7, #16]
 8001558:	ee27 7a27 	vmul.f32	s14, s14, s15
 800155c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001564:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001568:	edd7 7a03 	vldr	s15, [r7, #12]
 800156c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	edd3 7a00 	vldr	s15, [r3]
 8001576:	2003      	movs	r0, #3
 8001578:	eeb0 0a67 	vmov.f32	s0, s15
 800157c:	f000 f958 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001580:	eeb0 7b40 	vmov.f64	d7, d0
 8001584:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001588:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800158c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001590:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001594:	edd7 7a03 	vldr	s15, [r7, #12]
 8001598:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	2003      	movs	r0, #3
 80015a4:	eeb0 0a67 	vmov.f32	s0, s15
 80015a8:	f000 f942 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015ac:	eeb0 7b40 	vmov.f64	d7, d0
 80015b0:	ee29 7b07 	vmul.f64	d7, d9, d7
 80015b4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80015b8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	ed93 7a00 	vldr	s14, [r3]
 80015c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80015c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015ce:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80015d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015da:	ee36 9b07 	vadd.f64	d9, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	ed93 7a00 	vldr	s14, [r3]
 80015e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80015e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80015f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f4:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80015f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015fc:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	2004      	movs	r0, #4
 8001608:	eeb0 0a67 	vmov.f32	s0, s15
 800160c:	f000 f910 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001610:	eeb0 7b40 	vmov.f64	d7, d0
 8001614:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001618:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800161c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001620:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	ed93 7a00 	vldr	s14, [r3]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	edd3 5a00 	vldr	s11, [r3]
 8001630:	edd7 7a04 	vldr	s15, [r7, #16]
 8001634:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001638:	edd7 7a06 	vldr	s15, [r7, #24]
 800163c:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001644:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001648:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800164c:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001650:	ed97 7a07 	vldr	s14, [r7, #28]
 8001654:	edd7 7a02 	vldr	s15, [r7, #8]
 8001658:	ee37 7a27 	vadd.f32	s14, s14, s15
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	edd3 6a00 	vldr	s13, [r3]
 8001662:	edd7 7a05 	vldr	s15, [r7, #20]
 8001666:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800166a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001672:	edd7 7a03 	vldr	s15, [r7, #12]
 8001676:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	edd3 7a00 	vldr	s15, [r3]
 8001680:	2004      	movs	r0, #4
 8001682:	eeb0 0a67 	vmov.f32	s0, s15
 8001686:	f000 f8d3 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800168a:	eeb0 7b40 	vmov.f64	d7, d0
 800168e:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001692:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001696:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800169a:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	ed93 7a00 	vldr	s14, [r3]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	edd3 5a00 	vldr	s11, [r3]
 80016aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80016ae:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80016b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80016b6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80016ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016c2:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80016c6:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 80016ca:	ee38 7b47 	vsub.f64	d7, d8, d7
 80016ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	this->p22 = P22 + Q * pow(this->dt, 2)
 80016d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80016dc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80016e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80016e4:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	edd3 7a00 	vldr	s15, [r3]
 80016ee:	2002      	movs	r0, #2
 80016f0:	eeb0 0a67 	vmov.f32	s0, s15
 80016f4:	f000 f89c 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80016f8:	eeb0 7b40 	vmov.f64	d7, d0
 80016fc:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001700:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 8001704:	edd7 7a03 	vldr	s15, [r7, #12]
 8001708:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	edd3 7a00 	vldr	s15, [r3]
 8001712:	2003      	movs	r0, #3
 8001714:	eeb0 0a67 	vmov.f32	s0, s15
 8001718:	f000 f88a 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800171c:	eeb0 7b40 	vmov.f64	d7, d0
 8001720:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001724:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001728:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	ed93 7a00 	vldr	s14, [r3]
 8001732:	edd7 7a04 	vldr	s15, [r7, #16]
 8001736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800173e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001742:	edd7 7a06 	vldr	s15, [r7, #24]
 8001746:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800174a:	ee36 9b07 	vadd.f64	d9, d6, d7
					* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21))
 800174e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001752:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	2003      	movs	r0, #3
 800175e:	eeb0 0a67 	vmov.f32	s0, s15
 8001762:	f000 f865 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001766:	eeb0 7b40 	vmov.f64	d7, d0
 800176a:	ee2a 7b07 	vmul.f64	d7, d10, d7
 800176e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001772:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	ed93 7a00 	vldr	s14, [r3]
 800177c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001784:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001788:	ee36 6b07 	vadd.f64	d6, d6, d7
 800178c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001790:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001794:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001798:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800179c:	ed97 7a07 	vldr	s14, [r7, #28]
 80017a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80017a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	edd3 6a00 	vldr	s13, [r3]
 80017ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80017b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ba:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80017be:	edd7 7a03 	vldr	s15, [r7, #12]
 80017c2:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	2004      	movs	r0, #4
 80017ce:	eeb0 0a67 	vmov.f32	s0, s15
 80017d2:	f000 f82d 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80017d6:	eeb0 7b40 	vmov.f64	d7, d0
 80017da:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80017de:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80017e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017e6:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	ed93 7a00 	vldr	s14, [r3]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	edd3 5a00 	vldr	s11, [r3]
 80017f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80017fa:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80017fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001802:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800180e:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001812:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 8001816:	ee38 7b47 	vsub.f64	d7, d8, d7
 800181a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p22 = P22 + Q * pow(this->dt, 2)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

}
 8001824:	bf00      	nop
 8001826:	3728      	adds	r7, #40	; 0x28
 8001828:	46bd      	mov	sp, r7
 800182a:	ecbd 8b08 	vpop	{d8-d11}
 800182e:	bd80      	pop	{r7, pc}

08001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	ed87 0a01 	vstr	s0, [r7, #4]
 800183a:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 800183c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001840:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	ee06 3a90 	vmov	s13, r3
 800184a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800184e:	eeb0 1b46 	vmov.f64	d1, d6
 8001852:	eeb0 0b47 	vmov.f64	d0, d7
 8001856:	f00f fd23 	bl	80112a0 <pow>
 800185a:	eeb0 7b40 	vmov.f64	d7, d0
    }
 800185e:	eeb0 0b47 	vmov.f64	d0, d7
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001872:	edd7 7a01 	vldr	s15, [r7, #4]
 8001876:	fefb 7a67 	vrintm.f32	s15, s15
 800187a:	eeb0 0a67 	vmov.f32	s0, s15
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001892:	edd7 7a01 	vldr	s15, [r7, #4]
 8001896:	fef8 7a67 	vrinta.f32	s15, s15
 800189a:	eeb0 0a67 	vmov.f32	s0, s15
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>:
 *
 *  Created on: Jan 30, 2022
 *      Author: SakuranohanaTH
 */
#include "ServoMotor.h"
ServoMotor::ServoMotor(TIM_HandleTypeDef *_servo_htim,
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
		uint32_t _SERVO_TIM_CHANNEL) {
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	22b4      	movs	r2, #180	; 0xb4
 80018ca:	615a      	str	r2, [r3, #20]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	761a      	strb	r2, [r3, #24]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	765a      	strb	r2, [r3, #25]
	this->servo_htim = _servo_htim;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	601a      	str	r2, [r3, #0]
	this->SERVO_TIM_CHANNEL = _SERVO_TIM_CHANNEL;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	605a      	str	r2, [r3, #4]
	 * 2ms/20ms = 0.1 = 10%
	 *
	 * CRR = 0.1 * (19999 + 1) = 2000
	 *
	 */
	this->servo_htim->Instance->PSC = _PSC_SERVO_MOTOR - 1U;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	22ef      	movs	r2, #239	; 0xef
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
	this->servo_htim->Instance->ARR = _ARR_SERVO_MOTOR - 1U;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80018f8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <_ZN10ServoMotorD1Ev>:
ServoMotor::~ServoMotor() {
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
}
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_ZN10ServoMotor11ServoEnableEv>:
void ServoMotor::ServoEnable() {
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Enable PWM for Servo Motor
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4619      	mov	r1, r3
 8001930:	4610      	mov	r0, r2
 8001932:	f00b ffc1 	bl	800d8b8 <HAL_TIM_PWM_Start>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <_ZN10ServoMotor17ServoRotateDegreeEl>:
void ServoMotor::ServoDisable() {
	HAL_TIM_PWM_Stop(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Disable PWM for Servo Motor
}
void ServoMotor::ServoRotateDegree(int32_t _sdegrotate) {
 8001940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001942:	b085      	sub	sp, #20
 8001944:	af02      	add	r7, sp, #8
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
	if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_1) {
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d13f      	bne.n	80019d2 <_ZN10ServoMotor17ServoRotateDegreeEl+0x92>
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691c      	ldr	r4, [r3, #16]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695d      	ldr	r5, [r3, #20]
				_sdegrotate, this->minsdeg, this->maxsdeg, // Mapping degree value to CRR value
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	3301      	adds	r3, #1
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800196c:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001974:	eeb0 0a67 	vmov.f32	s0, s15
 8001978:	f7ff ff86 	bl	8001888 <_ZSt5roundf>
 800197c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001984:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	3301      	adds	r3, #1
 8001992:	ee07 3a90 	vmov	s15, r3
 8001996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800199a:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 800199e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019a2:	eeb0 0a67 	vmov.f32	s0, s15
 80019a6:	f7ff ff5f 	bl	8001868 <_ZSt5floorf>
 80019aa:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 80019ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b2:	ee17 3a90 	vmov	r3, s15
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	9600      	str	r6, [sp, #0]
 80019ba:	462b      	mov	r3, r5
 80019bc:	4622      	mov	r2, r4
 80019be:	6839      	ldr	r1, [r7, #0]
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f9cf 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 80019c6:	4602      	mov	r2, r0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR3 = 0;
		this->servo_htim->Instance->CCR4 = 0;
		this->servo_htim->Instance->CCR5 = 0;
		this->servo_htim->Instance->CCR6 = 0;
	}
}
 80019d0:	e176      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_2) {
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d13f      	bne.n	8001a5a <_ZN10ServoMotor17ServoRotateDegreeEl+0x11a>
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691c      	ldr	r4, [r3, #16]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	3301      	adds	r3, #1
 80019ec:	ee07 3a90 	vmov	s15, r3
 80019f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80019f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001a00:	f7ff ff42 	bl	8001888 <_ZSt5roundf>
 8001a04:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8001a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a0c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	3301      	adds	r3, #1
 8001a1a:	ee07 3a90 	vmov	s15, r3
 8001a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a22:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001a26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2e:	f7ff ff1b 	bl	8001868 <_ZSt5floorf>
 8001a32:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8001a36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a3a:	ee17 3a90 	vmov	r3, s15
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	9600      	str	r6, [sp, #0]
 8001a42:	462b      	mov	r3, r5
 8001a44:	4622      	mov	r2, r4
 8001a46:	6839      	ldr	r1, [r7, #0]
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f98b 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001a58:	e132      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d13f      	bne.n	8001ae2 <_ZN10ServoMotor17ServoRotateDegreeEl+0x1a2>
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691c      	ldr	r4, [r3, #16]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	3301      	adds	r3, #1
 8001a74:	ee07 3a90 	vmov	s15, r3
 8001a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a7c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a84:	eeb0 0a67 	vmov.f32	s0, s15
 8001a88:	f7ff fefe 	bl	8001888 <_ZSt5roundf>
 8001a8c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a94:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	ee07 3a90 	vmov	s15, r3
 8001aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aaa:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001aae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab6:	f7ff fed7 	bl	8001868 <_ZSt5floorf>
 8001aba:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ac2:	ee17 3a90 	vmov	r3, s15
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	9600      	str	r6, [sp, #0]
 8001aca:	462b      	mov	r3, r5
 8001acc:	4622      	mov	r2, r4
 8001ace:	6839      	ldr	r1, [r7, #0]
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f947 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ae0:	e0ee      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b0c      	cmp	r3, #12
 8001ae8:	d13f      	bne.n	8001b6a <_ZN10ServoMotor17ServoRotateDegreeEl+0x22a>
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691c      	ldr	r4, [r3, #16]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	3301      	adds	r3, #1
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b04:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b10:	f7ff feba 	bl	8001888 <_ZSt5roundf>
 8001b14:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001b18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b1c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	3301      	adds	r3, #1
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b32:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001b36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3e:	f7ff fe93 	bl	8001868 <_ZSt5floorf>
 8001b42:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001b46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b4a:	ee17 3a90 	vmov	r3, s15
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	9600      	str	r6, [sp, #0]
 8001b52:	462b      	mov	r3, r5
 8001b54:	4622      	mov	r2, r4
 8001b56:	6839      	ldr	r1, [r7, #0]
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f903 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b68:	e0aa      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b10      	cmp	r3, #16
 8001b70:	d144      	bne.n	8001bfc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2bc>
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691c      	ldr	r4, [r3, #16]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	3301      	adds	r3, #1
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b8c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001b90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b94:	eeb0 0a67 	vmov.f32	s0, s15
 8001b98:	f7ff fe76 	bl	8001888 <_ZSt5roundf>
 8001b9c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ba4:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	ee07 3a90 	vmov	s15, r3
 8001bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bba:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc6:	f7ff fe4f 	bl	8001868 <_ZSt5floorf>
 8001bca:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001bce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bd2:	ee17 3a90 	vmov	r3, s15
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	9600      	str	r6, [sp, #0]
 8001bda:	462b      	mov	r3, r5
 8001bdc:	4622      	mov	r2, r4
 8001bde:	6839      	ldr	r1, [r7, #0]
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f8bf 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 8001be6:	4602      	mov	r2, r0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001bf0:	e066      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
 8001bf2:	bf00      	nop
 8001bf4:	3d4ccccd 	.word	0x3d4ccccd
 8001bf8:	3e19999a 	.word	0x3e19999a
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b14      	cmp	r3, #20
 8001c02:	d13f      	bne.n	8001c84 <_ZN10ServoMotor17ServoRotateDegreeEl+0x344>
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691c      	ldr	r4, [r3, #16]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	3301      	adds	r3, #1
 8001c16:	ee07 3a90 	vmov	s15, r3
 8001c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c1e:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001c22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c26:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2a:	f7ff fe2d 	bl	8001888 <_ZSt5roundf>
 8001c2e:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001c32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c36:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	3301      	adds	r3, #1
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c4c:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c54:	eeb0 0a67 	vmov.f32	s0, s15
 8001c58:	f7ff fe06 	bl	8001868 <_ZSt5floorf>
 8001c5c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001c60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c64:	ee17 3a90 	vmov	r3, s15
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	9600      	str	r6, [sp, #0]
 8001c6c:	462b      	mov	r3, r5
 8001c6e:	4622      	mov	r2, r4
 8001c70:	6839      	ldr	r1, [r7, #0]
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f876 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c82:	e01d      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
		this->servo_htim->Instance->CCR1 = 0;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR2 = 0;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2200      	movs	r2, #0
 8001c96:	639a      	str	r2, [r3, #56]	; 0x38
		this->servo_htim->Instance->CCR3 = 0;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	63da      	str	r2, [r3, #60]	; 0x3c
		this->servo_htim->Instance->CCR4 = 0;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40
		this->servo_htim->Instance->CCR5 = 0;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	659a      	str	r2, [r3, #88]	; 0x58
		this->servo_htim->Instance->CCR6 = 0;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cc8 <_ZN10ServoMotor20setDegreeGripperOpenEl>:
void ServoMotor::setDegreeGripperOpen(int32_t _sdegopen) {
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
	this->sdegopen = _sdegopen;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	609a      	str	r2, [r3, #8]
	this->isSetDegreeGripperOpen = true;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	761a      	strb	r2, [r3, #24]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <_ZN10ServoMotor21setDegreeGripperCloseEl>:
void ServoMotor::setDegreeGripperClose(int32_t _sdegclose) {
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]
	this->sdegclose = _sdegclose;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	60da      	str	r2, [r3, #12]
	this->isSetDegreeGripperClose = true;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	765a      	strb	r2, [r3, #25]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <_ZN10ServoMotor12GripperCloseEv>:
void ServoMotor::GripperClose() {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperClose)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	7e5b      	ldrb	r3, [r3, #25]
 8001d18:	f083 0301 	eor.w	r3, r3, #1
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d106      	bne.n	8001d30 <_ZN10ServoMotor12GripperCloseEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegclose);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	4619      	mov	r1, r3
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff fe09 	bl	8001940 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001d2e:	e000      	b.n	8001d32 <_ZN10ServoMotor12GripperCloseEv+0x26>
		return;
 8001d30:	bf00      	nop
}
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_ZN10ServoMotor11GripperOpenEv>:
void ServoMotor::GripperOpen() {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperOpen)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7e1b      	ldrb	r3, [r3, #24]
 8001d44:	f083 0301 	eor.w	r3, r3, #1
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d106      	bne.n	8001d5c <_ZN10ServoMotor11GripperOpenEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegopen);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	4619      	mov	r1, r3
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff fdf3 	bl	8001940 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001d5a:	e000      	b.n	8001d5e <_ZN10ServoMotor11GripperOpenEv+0x26>
		return;
 8001d5c:	bf00      	nop
}
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <_ZN10ServoMotor10GripperMapElllll>:
int32_t ServoMotor::GripperMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	69f9      	ldr	r1, [r7, #28]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	1a8a      	subs	r2, r1, r2
 8001d7e:	fb03 f202 	mul.w	r2, r3, r2
 8001d82:	6839      	ldr	r1, [r7, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	1acb      	subs	r3, r1, r3
 8001d88:	fb92 f2f3 	sdiv	r2, r2, r3
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	4413      	add	r3, r2
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001da6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001daa:	eef0 7ae7 	vabs.f32	s15, s15
 8001dae:	eeb0 0a67 	vmov.f32	s0, s15
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4a18      	ldr	r2, [pc, #96]	; (8001e30 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8001dce:	615a      	str	r2, [r3, #20]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4a18      	ldr	r2, [pc, #96]	; (8001e34 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001dd4:	619a      	str	r2, [r3, #24]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ddc:	61da      	str	r2, [r3, #28]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4a15      	ldr	r2, [pc, #84]	; (8001e38 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8001de2:	621a      	str	r2, [r3, #32]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001dea:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	22c7      	movs	r2, #199	; 0xc7
 8001e00:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 1.0f;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e08:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4a09      	ldr	r2, [pc, #36]	; (8001e34 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001e0e:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 8001e10:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001e3c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 f82f 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	60da      	str	r2, [r3, #12]
}
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	41a00000 	.word	0x41a00000
 8001e34:	469c4000 	.word	0x469c4000
 8001e38:	43480000 	.word	0x43480000
 8001e3c:	00000000 	.word	0x00000000

08001e40 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
}
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4619      	mov	r1, r3
 8001e68:	4610      	mov	r0, r2
 8001e6a:	f00b fd25 	bl	800d8b8 <HAL_TIM_PWM_Start>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	ed2d 8b02 	vpush	{d8}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e94:	eeb0 0a67 	vmov.f32	s0, s15
 8001e98:	f7ff ff80 	bl	8001d9c <_ZSt4fabsf>
 8001e9c:	eeb0 7a40 	vmov.f32	s14, s0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ea6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eae:	bf94      	ite	ls
 8001eb0:	2301      	movls	r3, #1
 8001eb2:	2300      	movhi	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	e01b      	b.n	8001efa <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ecc:	f7ff ff66 	bl	8001d9c <_ZSt4fabsf>
 8001ed0:	eeb0 7a40 	vmov.f32	s14, s0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	edd3 7a06 	vldr	s15, [r3, #24]
 8001eda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee2:	bfac      	ite	ge
 8001ee4:	2301      	movge	r3, #1
 8001ee6:	2300      	movlt	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	e001      	b.n	8001efa <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f00:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800219c <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8001f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0c:	f2c0 80db 	blt.w	80020c6 <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6898      	ldr	r0, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f008 fbf9 	bl	800a714 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	ee07 3a90 	vmov	s15, r3
 8001f30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f34:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f3c:	eddf 6a98 	vldr	s13, [pc, #608]	; 80021a0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001f44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f50:	f7ff fc9a 	bl	8001888 <_ZSt5roundf>
 8001f54:	eef0 7a40 	vmov.f32	s15, s0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f62:	ee17 2a90 	vmov	r2, s15
 8001f66:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d113      	bne.n	8001f98 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8001f7a:	085b      	lsrs	r3, r3, #1
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fa5b 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f82:	eeb0 7b40 	vmov.f64	d7, d0
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f90:	ee17 2a90 	vmov	r2, s15
 8001f94:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8001f96:	e1e0      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d113      	bne.n	8001fc8 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8001faa:	085b      	lsrs	r3, r3, #1
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 fa43 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001fb2:	eeb0 7b40 	vmov.f64	d7, d0
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fc0:	ee17 2a90 	vmov	r2, s15
 8001fc4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001fc6:	e1c8      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d113      	bne.n	8001ff8 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8001fda:	085b      	lsrs	r3, r3, #1
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 fa2b 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001fe2:	eeb0 7b40 	vmov.f64	d7, d0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ff0:	ee17 2a90 	vmov	r2, s15
 8001ff4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ff6:	e1b0      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b0c      	cmp	r3, #12
 8001ffe:	d113      	bne.n	8002028 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 800200a:	085b      	lsrs	r3, r3, #1
 800200c:	4618      	mov	r0, r3
 800200e:	f000 fa13 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002012:	eeb0 7b40 	vmov.f64	d7, d0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002020:	ee17 2a90 	vmov	r2, s15
 8002024:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002026:	e198      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b10      	cmp	r3, #16
 800202e:	d113      	bne.n	8002058 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800203a:	085b      	lsrs	r3, r3, #1
 800203c:	4618      	mov	r0, r3
 800203e:	f000 f9fb 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002042:	eeb0 7b40 	vmov.f64	d7, d0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002050:	ee17 2a90 	vmov	r2, s15
 8002054:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002056:	e180      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b14      	cmp	r3, #20
 800205e:	d113      	bne.n	8002088 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 800206a:	085b      	lsrs	r3, r3, #1
 800206c:	4618      	mov	r0, r3
 800206e:	f000 f9e3 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002072:	eeb0 7b40 	vmov.f64	d7, d0
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002080:	ee17 2a90 	vmov	r2, s15
 8002084:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002086:	e168      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2200      	movs	r2, #0
 8002090:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2200      	movs	r2, #0
 800209a:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2200      	movs	r2, #0
 80020a4:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2200      	movs	r2, #0
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2200      	movs	r2, #0
 80020b8:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2200      	movs	r2, #0
 80020c2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80020c4:	e149      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80020cc:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80021a4 <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 80020d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d8:	f200 80e5 	bhi.w	80022a6 <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6898      	ldr	r0, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	2200      	movs	r2, #0
 80020e8:	4619      	mov	r1, r3
 80020ea:	f008 fb13 	bl	800a714 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f6:	3301      	adds	r3, #1
 80020f8:	ee07 3a90 	vmov	s15, r3
 80020fc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002100:	ed97 0a03 	vldr	s0, [r7, #12]
 8002104:	f7ff fe4a 	bl	8001d9c <_ZSt4fabsf>
 8002108:	eef0 7a40 	vmov.f32	s15, s0
 800210c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002110:	eddf 6a23 	vldr	s13, [pc, #140]	; 80021a0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8002114:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8002118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800211c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002120:	eeb0 0a67 	vmov.f32	s0, s15
 8002124:	f7ff fbb0 	bl	8001888 <_ZSt5roundf>
 8002128:	eef0 7a40 	vmov.f32	s15, s0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002136:	ee17 2a90 	vmov	r2, s15
 800213a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d113      	bne.n	800216c <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 800214e:	085b      	lsrs	r3, r3, #1
 8002150:	4618      	mov	r0, r3
 8002152:	f000 f971 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002156:	eeb0 7b40 	vmov.f64	d7, d0
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002164:	ee17 2a90 	vmov	r2, s15
 8002168:	635a      	str	r2, [r3, #52]	; 0x34
}
 800216a:	e0f6      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b04      	cmp	r3, #4
 8002172:	d119      	bne.n	80021a8 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 800217e:	085b      	lsrs	r3, r3, #1
 8002180:	4618      	mov	r0, r3
 8002182:	f000 f959 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002186:	eeb0 7b40 	vmov.f64	d7, d0
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002194:	ee17 2a90 	vmov	r2, s15
 8002198:	639a      	str	r2, [r3, #56]	; 0x38
}
 800219a:	e0de      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 800219c:	3a83126f 	.word	0x3a83126f
 80021a0:	4d64e1c0 	.word	0x4d64e1c0
 80021a4:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d113      	bne.n	80021d8 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 80021ba:	085b      	lsrs	r3, r3, #1
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 f93b 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80021c2:	eeb0 7b40 	vmov.f64	d7, d0
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80021d0:	ee17 2a90 	vmov	r2, s15
 80021d4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80021d6:	e0c0      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b0c      	cmp	r3, #12
 80021de:	d113      	bne.n	8002208 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 80021ea:	085b      	lsrs	r3, r3, #1
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 f923 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80021f2:	eeb0 7b40 	vmov.f64	d7, d0
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002200:	ee17 2a90 	vmov	r2, s15
 8002204:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002206:	e0a8      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b10      	cmp	r3, #16
 800220e:	d113      	bne.n	8002238 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800221a:	085b      	lsrs	r3, r3, #1
 800221c:	4618      	mov	r0, r3
 800221e:	f000 f90b 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002222:	eeb0 7b40 	vmov.f64	d7, d0
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002230:	ee17 2a90 	vmov	r2, s15
 8002234:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002236:	e090      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b14      	cmp	r3, #20
 800223e:	d113      	bne.n	8002268 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 800224a:	085b      	lsrs	r3, r3, #1
 800224c:	4618      	mov	r0, r3
 800224e:	f000 f8f3 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002252:	eeb0 7b40 	vmov.f64	d7, d0
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002260:	ee17 2a90 	vmov	r2, s15
 8002264:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002266:	e078      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2200      	movs	r2, #0
 8002270:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2200      	movs	r2, #0
 800227a:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2200      	movs	r2, #0
 8002284:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2200      	movs	r2, #0
 800228e:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2200      	movs	r2, #0
 8002298:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2200      	movs	r2, #0
 80022a2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80022a4:	e059      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d105      	bne.n	80022ba <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2200      	movs	r2, #0
 80022b6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80022b8:	e04f      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d105      	bne.n	80022ce <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2200      	movs	r2, #0
 80022ca:	639a      	str	r2, [r3, #56]	; 0x38
}
 80022cc:	e045      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d105      	bne.n	80022e2 <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2200      	movs	r2, #0
 80022de:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80022e0:	e03b      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d105      	bne.n	80022f6 <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2200      	movs	r2, #0
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80022f4:	e031      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d105      	bne.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2200      	movs	r2, #0
 8002306:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002308:	e027      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b14      	cmp	r3, #20
 8002310:	d105      	bne.n	800231e <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2200      	movs	r2, #0
 800231a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800231c:	e01d      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2200      	movs	r2, #0
 8002326:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2200      	movs	r2, #0
 8002330:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2200      	movs	r2, #0
 800233a:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2200      	movs	r2, #0
 8002344:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2200      	movs	r2, #0
 800234e:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2200      	movs	r2, #0
 8002358:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	ecbd 8b02 	vpop	{d8}
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop

08002368 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 8002374:	ed97 0a00 	vldr	s0, [r7]
 8002378:	f7ff fd10 	bl	8001d9c <_ZSt4fabsf>
 800237c:	eef0 7a40 	vmov.f32	s15, s0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	ee07 3a90 	vmov	s15, r3
 800239e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80023a2:	eeb0 0b47 	vmov.f64	d0, d7
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ffe5 	bl	800238e <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80023c4:	eeb0 7b40 	vmov.f64	d7, d0
 80023c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	0000      	movs	r0, r0
 80023dc:	0000      	movs	r0, r0
	...

080023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>:
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
						/ (2.0f * PI)));
//	}
}
void Stepper::StepperOpenLoopSpeedM(float _speed_m) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed_m * this->microStep * this->ratio * this->SPR * 1
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	ed93 7a07 	vldr	s14, [r3, #28]
 80023f2:	edd7 7a00 	vldr	s15, [r7]
 80023f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002400:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	edd3 7a08 	vldr	s15, [r3, #32]
 800240a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI * 1000.0f)));
 8002412:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8002430 <_ZN7Stepper21StepperOpenLoopSpeedMEf+0x50>
 8002416:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 800241a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800241e:	eeb0 0a67 	vmov.f32	s0, s15
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff fd28 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	704a95d1 	.word	0x704a95d1
 8002434:	40b88b2f 	.word	0x40b88b2f

08002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800244a:	eeb0 0b47 	vmov.f64	d0, d7
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <MX_CRC_Init+0x54>)
 800245e:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <MX_CRC_Init+0x58>)
 8002460:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <MX_CRC_Init+0x54>)
 8002464:	2201      	movs	r2, #1
 8002466:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <MX_CRC_Init+0x54>)
 800246a:	2201      	movs	r2, #1
 800246c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 800246e:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <MX_CRC_Init+0x54>)
 8002470:	f248 0205 	movw	r2, #32773	; 0x8005
 8002474:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <MX_CRC_Init+0x54>)
 8002478:	2208      	movs	r2, #8
 800247a:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <MX_CRC_Init+0x54>)
 800247e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002482:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <MX_CRC_Init+0x54>)
 8002486:	2220      	movs	r2, #32
 8002488:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <MX_CRC_Init+0x54>)
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <MX_CRC_Init+0x54>)
 8002492:	2201      	movs	r2, #1
 8002494:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002496:	4805      	ldr	r0, [pc, #20]	; (80024ac <MX_CRC_Init+0x54>)
 8002498:	f004 ff52 	bl	8007340 <HAL_CRC_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 80024a2:	f002 fcfb 	bl	8004e9c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	2400042c 	.word	0x2400042c
 80024b0:	58024c00 	.word	0x58024c00

080024b4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <HAL_CRC_MspInit+0x3c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d10e      	bne.n	80024e4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_CRC_MspInit+0x40>)
 80024c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024cc:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <HAL_CRC_MspInit+0x40>)
 80024ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024d6:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <HAL_CRC_MspInit+0x40>)
 80024d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	58024c00 	.word	0x58024c00
 80024f4:	58024400 	.word	0x58024400

080024f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fe:	4b35      	ldr	r3, [pc, #212]	; (80025d4 <MX_DMA_Init+0xdc>)
 8002500:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002504:	4a33      	ldr	r2, [pc, #204]	; (80025d4 <MX_DMA_Init+0xdc>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800250e:	4b31      	ldr	r3, [pc, #196]	; (80025d4 <MX_DMA_Init+0xdc>)
 8002510:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800251c:	4b2d      	ldr	r3, [pc, #180]	; (80025d4 <MX_DMA_Init+0xdc>)
 800251e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002522:	4a2c      	ldr	r2, [pc, #176]	; (80025d4 <MX_DMA_Init+0xdc>)
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800252c:	4b29      	ldr	r3, [pc, #164]	; (80025d4 <MX_DMA_Init+0xdc>)
 800252e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	200b      	movs	r0, #11
 8002540:	f004 febd 	bl	80072be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002544:	200b      	movs	r0, #11
 8002546:	f004 fed4 	bl	80072f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	2100      	movs	r1, #0
 800254e:	200c      	movs	r0, #12
 8002550:	f004 feb5 	bl	80072be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002554:	200c      	movs	r0, #12
 8002556:	f004 fecc 	bl	80072f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800255a:	2200      	movs	r2, #0
 800255c:	2100      	movs	r1, #0
 800255e:	200d      	movs	r0, #13
 8002560:	f004 fead 	bl	80072be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002564:	200d      	movs	r0, #13
 8002566:	f004 fec4 	bl	80072f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2100      	movs	r1, #0
 800256e:	200e      	movs	r0, #14
 8002570:	f004 fea5 	bl	80072be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002574:	200e      	movs	r0, #14
 8002576:	f004 febc 	bl	80072f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	200f      	movs	r0, #15
 8002580:	f004 fe9d 	bl	80072be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002584:	200f      	movs	r0, #15
 8002586:	f004 feb4 	bl	80072f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	2010      	movs	r0, #16
 8002590:	f004 fe95 	bl	80072be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002594:	2010      	movs	r0, #16
 8002596:	f004 feac 	bl	80072f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	2011      	movs	r0, #17
 80025a0:	f004 fe8d 	bl	80072be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80025a4:	2011      	movs	r0, #17
 80025a6:	f004 fea4 	bl	80072f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	202f      	movs	r0, #47	; 0x2f
 80025b0:	f004 fe85 	bl	80072be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80025b4:	202f      	movs	r0, #47	; 0x2f
 80025b6:	f004 fe9c 	bl	80072f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	2038      	movs	r0, #56	; 0x38
 80025c0:	f004 fe7d 	bl	80072be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80025c4:	2038      	movs	r0, #56	; 0x38
 80025c6:	f004 fe94 	bl	80072f2 <HAL_NVIC_EnableIRQ>

}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	58024400 	.word	0x58024400

080025d8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08c      	sub	sp, #48	; 0x30
 80025dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025de:	f107 031c 	add.w	r3, r7, #28
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	60da      	str	r2, [r3, #12]
 80025ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ee:	4b87      	ldr	r3, [pc, #540]	; (800280c <MX_GPIO_Init+0x234>)
 80025f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025f4:	4a85      	ldr	r2, [pc, #532]	; (800280c <MX_GPIO_Init+0x234>)
 80025f6:	f043 0310 	orr.w	r3, r3, #16
 80025fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025fe:	4b83      	ldr	r3, [pc, #524]	; (800280c <MX_GPIO_Init+0x234>)
 8002600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	61bb      	str	r3, [r7, #24]
 800260a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800260c:	4b7f      	ldr	r3, [pc, #508]	; (800280c <MX_GPIO_Init+0x234>)
 800260e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002612:	4a7e      	ldr	r2, [pc, #504]	; (800280c <MX_GPIO_Init+0x234>)
 8002614:	f043 0304 	orr.w	r3, r3, #4
 8002618:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800261c:	4b7b      	ldr	r3, [pc, #492]	; (800280c <MX_GPIO_Init+0x234>)
 800261e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800262a:	4b78      	ldr	r3, [pc, #480]	; (800280c <MX_GPIO_Init+0x234>)
 800262c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002630:	4a76      	ldr	r2, [pc, #472]	; (800280c <MX_GPIO_Init+0x234>)
 8002632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002636:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800263a:	4b74      	ldr	r3, [pc, #464]	; (800280c <MX_GPIO_Init+0x234>)
 800263c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002648:	4b70      	ldr	r3, [pc, #448]	; (800280c <MX_GPIO_Init+0x234>)
 800264a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800264e:	4a6f      	ldr	r2, [pc, #444]	; (800280c <MX_GPIO_Init+0x234>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002658:	4b6c      	ldr	r3, [pc, #432]	; (800280c <MX_GPIO_Init+0x234>)
 800265a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002666:	4b69      	ldr	r3, [pc, #420]	; (800280c <MX_GPIO_Init+0x234>)
 8002668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266c:	4a67      	ldr	r2, [pc, #412]	; (800280c <MX_GPIO_Init+0x234>)
 800266e:	f043 0302 	orr.w	r3, r3, #2
 8002672:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002676:	4b65      	ldr	r3, [pc, #404]	; (800280c <MX_GPIO_Init+0x234>)
 8002678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002684:	4b61      	ldr	r3, [pc, #388]	; (800280c <MX_GPIO_Init+0x234>)
 8002686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800268a:	4a60      	ldr	r2, [pc, #384]	; (800280c <MX_GPIO_Init+0x234>)
 800268c:	f043 0308 	orr.w	r3, r3, #8
 8002690:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002694:	4b5d      	ldr	r3, [pc, #372]	; (800280c <MX_GPIO_Init+0x234>)
 8002696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026a2:	4b5a      	ldr	r3, [pc, #360]	; (800280c <MX_GPIO_Init+0x234>)
 80026a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a8:	4a58      	ldr	r2, [pc, #352]	; (800280c <MX_GPIO_Init+0x234>)
 80026aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026b2:	4b56      	ldr	r3, [pc, #344]	; (800280c <MX_GPIO_Init+0x234>)
 80026b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026bc:	603b      	str	r3, [r7, #0]
 80026be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80026c0:	2200      	movs	r2, #0
 80026c2:	f644 2121 	movw	r1, #18977	; 0x4a21
 80026c6:	4852      	ldr	r0, [pc, #328]	; (8002810 <MX_GPIO_Init+0x238>)
 80026c8:	f008 f824 	bl	800a714 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 80026cc:	2200      	movs	r2, #0
 80026ce:	f24c 0102 	movw	r1, #49154	; 0xc002
 80026d2:	4850      	ldr	r0, [pc, #320]	; (8002814 <MX_GPIO_Init+0x23c>)
 80026d4:	f008 f81e 	bl	800a714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80026d8:	2200      	movs	r2, #0
 80026da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026de:	484e      	ldr	r0, [pc, #312]	; (8002818 <MX_GPIO_Init+0x240>)
 80026e0:	f008 f818 	bl	800a714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80026e4:	2200      	movs	r2, #0
 80026e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026ea:	484c      	ldr	r0, [pc, #304]	; (800281c <MX_GPIO_Init+0x244>)
 80026ec:	f008 f812 	bl	800a714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 80026f0:	2200      	movs	r2, #0
 80026f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026f6:	484a      	ldr	r0, [pc, #296]	; (8002820 <MX_GPIO_Init+0x248>)
 80026f8:	f008 f80c 	bl	800a714 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80026fc:	f644 2321 	movw	r3, #18977	; 0x4a21
 8002700:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002702:	2301      	movs	r3, #1
 8002704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270a:	2300      	movs	r3, #0
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270e:	f107 031c 	add.w	r3, r7, #28
 8002712:	4619      	mov	r1, r3
 8002714:	483e      	ldr	r0, [pc, #248]	; (8002810 <MX_GPIO_Init+0x238>)
 8002716:	f007 fe4d 	bl	800a3b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM_Z_BOTTOM_Pin;
 800271a:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800271e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002720:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800272a:	f107 031c 	add.w	r3, r7, #28
 800272e:	4619      	mov	r1, r3
 8002730:	4838      	ldr	r0, [pc, #224]	; (8002814 <MX_GPIO_Init+0x23c>)
 8002732:	f007 fe3f 	bl	800a3b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8002736:	f24c 0302 	movw	r3, #49154	; 0xc002
 800273a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273c:	2301      	movs	r3, #1
 800273e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002744:	2300      	movs	r3, #0
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002748:	f107 031c 	add.w	r3, r7, #28
 800274c:	4619      	mov	r1, r3
 800274e:	4831      	ldr	r0, [pc, #196]	; (8002814 <MX_GPIO_Init+0x23c>)
 8002750:	f007 fe30 	bl	800a3b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800275a:	2301      	movs	r3, #1
 800275c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002762:	2300      	movs	r3, #0
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002766:	f107 031c 	add.w	r3, r7, #28
 800276a:	4619      	mov	r1, r3
 800276c:	482a      	ldr	r0, [pc, #168]	; (8002818 <MX_GPIO_Init+0x240>)
 800276e:	f007 fe21 	bl	800a3b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8002772:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002778:	2301      	movs	r3, #1
 800277a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002780:	2300      	movs	r3, #0
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	4619      	mov	r1, r3
 800278a:	4824      	ldr	r0, [pc, #144]	; (800281c <MX_GPIO_Init+0x244>)
 800278c:	f007 fe12 	bl	800a3b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8002790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002796:	2301      	movs	r3, #1
 8002798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279e:	2300      	movs	r3, #0
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 80027a2:	f107 031c 	add.w	r3, r7, #28
 80027a6:	4619      	mov	r1, r3
 80027a8:	481d      	ldr	r0, [pc, #116]	; (8002820 <MX_GPIO_Init+0x248>)
 80027aa:	f007 fe03 	bl	800a3b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM_Z_TOP_Pin;
 80027ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM_Z_TOP_GPIO_Port, &GPIO_InitStruct);
 80027be:	f107 031c 	add.w	r3, r7, #28
 80027c2:	4619      	mov	r1, r3
 80027c4:	4817      	ldr	r0, [pc, #92]	; (8002824 <MX_GPIO_Init+0x24c>)
 80027c6:	f007 fdf5 	bl	800a3b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM_LED_Pin|LM_SERVO_Pin;
 80027ca:	23c0      	movs	r3, #192	; 0xc0
 80027cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d8:	f107 031c 	add.w	r3, r7, #28
 80027dc:	4619      	mov	r1, r3
 80027de:	480c      	ldr	r0, [pc, #48]	; (8002810 <MX_GPIO_Init+0x238>)
 80027e0:	f007 fde8 	bl	800a3b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80027e4:	2200      	movs	r2, #0
 80027e6:	2100      	movs	r1, #0
 80027e8:	2017      	movs	r0, #23
 80027ea:	f004 fd68 	bl	80072be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80027ee:	2017      	movs	r0, #23
 80027f0:	f004 fd7f 	bl	80072f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80027f4:	2200      	movs	r2, #0
 80027f6:	2100      	movs	r1, #0
 80027f8:	2028      	movs	r0, #40	; 0x28
 80027fa:	f004 fd60 	bl	80072be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80027fe:	2028      	movs	r0, #40	; 0x28
 8002800:	f004 fd77 	bl	80072f2 <HAL_NVIC_EnableIRQ>

}
 8002804:	bf00      	nop
 8002806:	3730      	adds	r7, #48	; 0x30
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	58024400 	.word	0x58024400
 8002810:	58020400 	.word	0x58020400
 8002814:	58021000 	.word	0x58021000
 8002818:	58020c00 	.word	0x58020c00
 800281c:	58020800 	.word	0x58020800
 8002820:	58020000 	.word	0x58020000
 8002824:	58021800 	.word	0x58021800

08002828 <_Z12Insert_queueii>:
volatile float u_q4 = 0.0;

volatile float Robot_X, Robot_Y, Robot_Z, Robot_Yaw;
volatile float Planning_q1, Planning_q2, Planning_q3, Planning_q4;

bool Insert_queue(int value, int gripper_value) {
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
	if (bot == LIMIT - 1) {
 8002832:	4b18      	ldr	r3, [pc, #96]	; (8002894 <_Z12Insert_queueii+0x6c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b13      	cmp	r3, #19
 8002838:	bf0c      	ite	eq
 800283a:	2301      	moveq	r3, #1
 800283c:	2300      	movne	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <_Z12Insert_queueii+0x20>
		return false;
 8002844:	2300      	movs	r3, #0
 8002846:	e01e      	b.n	8002886 <_Z12Insert_queueii+0x5e>
	} else {
		if (first == -1) {
 8002848:	4b13      	ldr	r3, [pc, #76]	; (8002898 <_Z12Insert_queueii+0x70>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002850:	bf0c      	ite	eq
 8002852:	2301      	moveq	r3, #1
 8002854:	2300      	movne	r3, #0
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <_Z12Insert_queueii+0x3a>
			first = 0;
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <_Z12Insert_queueii+0x70>)
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
		}
		bot++;
 8002862:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <_Z12Insert_queueii+0x6c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	3301      	adds	r3, #1
 8002868:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <_Z12Insert_queueii+0x6c>)
 800286a:	6013      	str	r3, [r2, #0]
		queue[bot] = value;
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <_Z12Insert_queueii+0x6c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	490a      	ldr	r1, [pc, #40]	; (800289c <_Z12Insert_queueii+0x74>)
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Gripper_State[bot] = gripper_value;
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <_Z12Insert_queueii+0x6c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4908      	ldr	r1, [pc, #32]	; (80028a0 <_Z12Insert_queueii+0x78>)
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return true;
 8002884:	2301      	movs	r3, #1
	}
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	2400000c 	.word	0x2400000c
 8002898:	24000008 	.word	0x24000008
 800289c:	24000b48 	.word	0x24000b48
 80028a0:	24000b98 	.word	0x24000b98

080028a4 <_Z10Call_queuev>:

int Call_queue() {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
	int output;
	if (first == -1 || first > bot) {
 80028aa:	4b23      	ldr	r3, [pc, #140]	; (8002938 <_Z10Call_queuev+0x94>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028b2:	d005      	beq.n	80028c0 <_Z10Call_queuev+0x1c>
 80028b4:	4b20      	ldr	r3, [pc, #128]	; (8002938 <_Z10Call_queuev+0x94>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b20      	ldr	r3, [pc, #128]	; (800293c <_Z10Call_queuev+0x98>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	dd01      	ble.n	80028c4 <_Z10Call_queuev+0x20>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <_Z10Call_queuev+0x22>
 80028c4:	2300      	movs	r3, #0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d026      	beq.n	8002918 <_Z10Call_queuev+0x74>
		printf("Don't have stack in queue \n");
 80028ca:	481d      	ldr	r0, [pc, #116]	; (8002940 <_Z10Call_queuev+0x9c>)
 80028cc:	f010 fc70 	bl	80131b0 <puts>
		for (int num = 0; num <= bot + 1; num++) {
 80028d0:	2300      	movs	r3, #0
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <_Z10Call_queuev+0x98>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	bfd4      	ite	le
 80028e0:	2301      	movle	r3, #1
 80028e2:	2300      	movgt	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d008      	beq.n	80028fc <_Z10Call_queuev+0x58>
			queue[num] = 0;
 80028ea:	4a16      	ldr	r2, [pc, #88]	; (8002944 <_Z10Call_queuev+0xa0>)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2100      	movs	r1, #0
 80028f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int num = 0; num <= bot + 1; num++) {
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	3301      	adds	r3, #1
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	e7eb      	b.n	80028d4 <_Z10Call_queuev+0x30>
		}
		first = -1;
 80028fc:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <_Z10Call_queuev+0x94>)
 80028fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002902:	601a      	str	r2, [r3, #0]
		bot = -1;
 8002904:	4b0d      	ldr	r3, [pc, #52]	; (800293c <_Z10Call_queuev+0x98>)
 8002906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800290a:	601a      	str	r2, [r3, #0]
		printf("Clear queue \n");
 800290c:	480e      	ldr	r0, [pc, #56]	; (8002948 <_Z10Call_queuev+0xa4>)
 800290e:	f010 fc4f 	bl	80131b0 <puts>
		output = 255;
 8002912:	23ff      	movs	r3, #255	; 0xff
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	e00a      	b.n	800292e <_Z10Call_queuev+0x8a>
	} else {
		output = queue[first];
 8002918:	4b07      	ldr	r3, [pc, #28]	; (8002938 <_Z10Call_queuev+0x94>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a09      	ldr	r2, [pc, #36]	; (8002944 <_Z10Call_queuev+0xa0>)
 800291e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002922:	607b      	str	r3, [r7, #4]
		first++;
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <_Z10Call_queuev+0x94>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3301      	adds	r3, #1
 800292a:	4a03      	ldr	r2, [pc, #12]	; (8002938 <_Z10Call_queuev+0x94>)
 800292c:	6013      	str	r3, [r2, #0]
	}
	return output;
 800292e:	687b      	ldr	r3, [r7, #4]

}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	24000008 	.word	0x24000008
 800293c:	2400000c 	.word	0x2400000c
 8002940:	08015230 	.word	0x08015230
 8002944:	24000b48 	.word	0x24000b48
 8002948:	0801524c 	.word	0x0801524c

0800294c <_Z6fcb_IKffff>:
	Robot_Yaw = (J_q1 + J_q3 + J_q4) / 1000.0;

}

void fcb_IK(float gripper_linear_x, float gripper_linear_y,
		float gripper_linear_z, float gripper_angular_yaw) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b092      	sub	sp, #72	; 0x48
 8002950:	af00      	add	r7, sp, #0
 8002952:	ed87 0a03 	vstr	s0, [r7, #12]
 8002956:	edc7 0a02 	vstr	s1, [r7, #8]
 800295a:	ed87 1a01 	vstr	s2, [r7, #4]
 800295e:	edc7 1a00 	vstr	s3, [r7]
	float x = gripper_linear_x / 1000.0;
 8002962:	ed97 7a03 	vldr	s14, [r7, #12]
 8002966:	eddf 6a78 	vldr	s13, [pc, #480]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 800296a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800296e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float y = gripper_linear_y / 1000.0;
 8002972:	ed97 7a02 	vldr	s14, [r7, #8]
 8002976:	eddf 6a74 	vldr	s13, [pc, #464]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 800297a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800297e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float z = gripper_linear_z / 1000.0;
 8002982:	ed97 7a01 	vldr	s14, [r7, #4]
 8002986:	eddf 6a70 	vldr	s13, [pc, #448]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 800298a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800298e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float yaw = gripper_angular_yaw / 1000.0;
 8002992:	ed97 7a00 	vldr	s14, [r7]
 8002996:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 800299a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800299e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	static float L12 = 0.38325;
	static float H1 = 0.125;
	static float H3 = 0.065;
	static float H4 = 0.190;

	float C3 = ((x * x) + (y * y) - (L12 * L12) - (L3 * L3)) / (2 * L12 * L3);
 80029a2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80029a6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80029aa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80029ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029b6:	4b65      	ldr	r3, [pc, #404]	; (8002b4c <_Z6fcb_IKffff+0x200>)
 80029b8:	edd3 6a00 	vldr	s13, [r3]
 80029bc:	4b63      	ldr	r3, [pc, #396]	; (8002b4c <_Z6fcb_IKffff+0x200>)
 80029be:	edd3 7a00 	vldr	s15, [r3]
 80029c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029ca:	4b61      	ldr	r3, [pc, #388]	; (8002b50 <_Z6fcb_IKffff+0x204>)
 80029cc:	edd3 6a00 	vldr	s13, [r3]
 80029d0:	4b5f      	ldr	r3, [pc, #380]	; (8002b50 <_Z6fcb_IKffff+0x204>)
 80029d2:	edd3 7a00 	vldr	s15, [r3]
 80029d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029de:	4b5b      	ldr	r3, [pc, #364]	; (8002b4c <_Z6fcb_IKffff+0x200>)
 80029e0:	edd3 7a00 	vldr	s15, [r3]
 80029e4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80029e8:	4b59      	ldr	r3, [pc, #356]	; (8002b50 <_Z6fcb_IKffff+0x204>)
 80029ea:	edd3 7a00 	vldr	s15, [r3]
 80029ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029f6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S3 = -1.0 * sqrt(1 - (C3 * C3));
 80029fa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a0e:	f7fe f825 	bl	8000a5c <_ZSt4sqrtf>
 8002a12:	eef0 7a40 	vmov.f32	s15, s0
 8002a16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a1a:	eeb1 7b47 	vneg.f64	d7, d7
 8002a1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a22:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float q3 = atan2(S3, C3);
 8002a26:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8002a2a:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8002a2e:	f7fe f801 	bl	8000a34 <_ZSt5atan2ff>
 8002a32:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

	float L3S3 = L3 * S3;
 8002a36:	4b46      	ldr	r3, [pc, #280]	; (8002b50 <_Z6fcb_IKffff+0x204>)
 8002a38:	edd3 7a00 	vldr	s15, [r3]
 8002a3c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a44:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float L123C3 = L12 + (L3 * C3);
 8002a48:	4b41      	ldr	r3, [pc, #260]	; (8002b50 <_Z6fcb_IKffff+0x204>)
 8002a4a:	ed93 7a00 	vldr	s14, [r3]
 8002a4e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a56:	4b3d      	ldr	r3, [pc, #244]	; (8002b4c <_Z6fcb_IKffff+0x200>)
 8002a58:	edd3 7a00 	vldr	s15, [r3]
 8002a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a60:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float S1 = (-L3S3 * x) + (L123C3 * y);
 8002a64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a68:	eeb1 7a67 	vneg.f32	s14, s15
 8002a6c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002a70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a74:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002a78:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a84:	edc7 7a08 	vstr	s15, [r7, #32]
	float C1 = (L3S3 * y) + (L123C3 * x);
 8002a88:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002a8c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002a90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a94:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002a98:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002a9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa4:	edc7 7a07 	vstr	s15, [r7, #28]
	float q1 = atan2(S1, C1);
 8002aa8:	edd7 0a07 	vldr	s1, [r7, #28]
 8002aac:	ed97 0a08 	vldr	s0, [r7, #32]
 8002ab0:	f7fd ffc0 	bl	8000a34 <_ZSt5atan2ff>
 8002ab4:	ed87 0a06 	vstr	s0, [r7, #24]
	float q4 = yaw - q1 - q3;
 8002ab8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002abc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ac0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ac4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002acc:	edc7 7a05 	vstr	s15, [r7, #20]
	float q2 = z + H4 - H3 - H1;
 8002ad0:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <_Z6fcb_IKffff+0x208>)
 8002ad2:	ed93 7a00 	vldr	s14, [r3]
 8002ad6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002ada:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ade:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <_Z6fcb_IKffff+0x20c>)
 8002ae0:	edd3 7a00 	vldr	s15, [r3]
 8002ae4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ae8:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <_Z6fcb_IKffff+0x210>)
 8002aea:	edd3 7a00 	vldr	s15, [r3]
 8002aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af2:	edc7 7a04 	vstr	s15, [r7, #16]

	Planning_q1 = q1 * 1000.0;
 8002af6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002afa:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 8002afe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b02:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <_Z6fcb_IKffff+0x214>)
 8002b04:	edc3 7a00 	vstr	s15, [r3]
	Planning_q2 = q2 * 1000.0;
 8002b08:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b0c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 8002b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <_Z6fcb_IKffff+0x218>)
 8002b16:	edc3 7a00 	vstr	s15, [r3]
	Planning_q3 = q3 * 1000.0;
 8002b1a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002b1e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 8002b22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b26:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <_Z6fcb_IKffff+0x21c>)
 8002b28:	edc3 7a00 	vstr	s15, [r3]
	Planning_q4 = q4 * 1000.0;
 8002b2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b30:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 8002b34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <_Z6fcb_IKffff+0x220>)
 8002b3a:	edc3 7a00 	vstr	s15, [r3]

}
 8002b3e:	bf00      	nop
 8002b40:	3748      	adds	r7, #72	; 0x48
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	447a0000 	.word	0x447a0000
 8002b4c:	24000218 	.word	0x24000218
 8002b50:	24000214 	.word	0x24000214
 8002b54:	24000224 	.word	0x24000224
 8002b58:	24000220 	.word	0x24000220
 8002b5c:	2400021c 	.word	0x2400021c
 8002b60:	24000bfc 	.word	0x24000bfc
 8002b64:	24000c00 	.word	0x24000c00
 8002b68:	24000c04 	.word	0x24000c04
 8002b6c:	24000c08 	.word	0x24000c08

08002b70 <_Z20Update_State_Machinev>:
float offset_y = 9.5; //10.79371
float offset_x_new = 0;
float offset_y_new = 0;
int indexy;
float pos_x, pos_y;
void Update_State_Machine() {
 8002b70:	b580      	push	{r7, lr}
 8002b72:	ed2d 8b02 	vpush	{d8}
 8002b76:	af00      	add	r7, sp, #0

	switch (control_state) {
 8002b78:	4b28      	ldr	r3, [pc, #160]	; (8002c1c <_Z20Update_State_Machinev+0xac>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	3b29      	subs	r3, #41	; 0x29
 8002b80:	2b0f      	cmp	r3, #15
 8002b82:	f200 83e0 	bhi.w	8003346 <_Z20Update_State_Machinev+0x7d6>
 8002b86:	a201      	add	r2, pc, #4	; (adr r2, 8002b8c <_Z20Update_State_Machinev+0x1c>)
 8002b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8c:	08002bcd 	.word	0x08002bcd
 8002b90:	08002eed 	.word	0x08002eed
 8002b94:	08002fe5 	.word	0x08002fe5
 8002b98:	08003347 	.word	0x08003347
 8002b9c:	08003347 	.word	0x08003347
 8002ba0:	08003347 	.word	0x08003347
 8002ba4:	08003347 	.word	0x08003347
 8002ba8:	08003347 	.word	0x08003347
 8002bac:	08003347 	.word	0x08003347
 8002bb0:	08003347 	.word	0x08003347
 8002bb4:	08003355 	.word	0x08003355
 8002bb8:	08003041 	.word	0x08003041
 8002bbc:	08003355 	.word	0x08003355
 8002bc0:	0800315d 	.word	0x0800315d
 8002bc4:	08003355 	.word	0x08003355
 8002bc8:	080032a1 	.word	0x080032a1
	case 41: // Update Trajectory
		indexy = Call_queue();
 8002bcc:	f7ff fe6a 	bl	80028a4 <_Z10Call_queuev>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	4a13      	ldr	r2, [pc, #76]	; (8002c20 <_Z20Update_State_Machinev+0xb0>)
 8002bd4:	6013      	str	r3, [r2, #0]
		if (indexy != 255)
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <_Z20Update_State_Machinev+0xb0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2bff      	cmp	r3, #255	; 0xff
 8002bdc:	f000 817d 	beq.w	8002eda <_Z20Update_State_Machinev+0x36a>
		{
			if (indexy == 99)
 8002be0:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <_Z20Update_State_Machinev+0xb0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b63      	cmp	r3, #99	; 0x63
 8002be6:	d10a      	bne.n	8002bfe <_Z20Update_State_Machinev+0x8e>
				{
					Planning_q1 = 1400;
 8002be8:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <_Z20Update_State_Machinev+0xb4>)
 8002bea:	4a0f      	ldr	r2, [pc, #60]	; (8002c28 <_Z20Update_State_Machinev+0xb8>)
 8002bec:	601a      	str	r2, [r3, #0]
					Planning_q3 = -1400;
 8002bee:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <_Z20Update_State_Machinev+0xbc>)
 8002bf0:	4a0f      	ldr	r2, [pc, #60]	; (8002c30 <_Z20Update_State_Machinev+0xc0>)
 8002bf2:	601a      	str	r2, [r3, #0]
					Planning_q4 = 0;
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <_Z20Update_State_Machinev+0xc4>)
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e10e      	b.n	8002e1c <_Z20Update_State_Machinev+0x2ac>
				}
			else if (indexy == 123)
 8002bfe:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <_Z20Update_State_Machinev+0xb0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b7b      	cmp	r3, #123	; 0x7b
 8002c04:	d11c      	bne.n	8002c40 <_Z20Update_State_Machinev+0xd0>
			{
					Planning_q1 = 1100;
 8002c06:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <_Z20Update_State_Machinev+0xb4>)
 8002c08:	4a0b      	ldr	r2, [pc, #44]	; (8002c38 <_Z20Update_State_Machinev+0xc8>)
 8002c0a:	601a      	str	r2, [r3, #0]
					Planning_q3 = -600;
 8002c0c:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <_Z20Update_State_Machinev+0xbc>)
 8002c0e:	4a0b      	ldr	r2, [pc, #44]	; (8002c3c <_Z20Update_State_Machinev+0xcc>)
 8002c10:	601a      	str	r2, [r3, #0]
					Planning_q4 = 0;
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <_Z20Update_State_Machinev+0xc4>)
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	e0ff      	b.n	8002e1c <_Z20Update_State_Machinev+0x2ac>
 8002c1c:	24000bf0 	.word	0x24000bf0
 8002c20:	24000c14 	.word	0x24000c14
 8002c24:	24000bfc 	.word	0x24000bfc
 8002c28:	44af0000 	.word	0x44af0000
 8002c2c:	24000c04 	.word	0x24000c04
 8002c30:	c4af0000 	.word	0xc4af0000
 8002c34:	24000c08 	.word	0x24000c08
 8002c38:	44898000 	.word	0x44898000
 8002c3c:	c4160000 	.word	0xc4160000
			}
			else
				{
					test_value_r = radias[indexy];
 8002c40:	4bcb      	ldr	r3, [pc, #812]	; (8002f70 <_Z20Update_State_Machinev+0x400>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4acb      	ldr	r2, [pc, #812]	; (8002f74 <_Z20Update_State_Machinev+0x404>)
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	edd3 7a00 	vldr	s15, [r3]
 8002c4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c52:	ee17 2a90 	vmov	r2, s15
 8002c56:	4bc8      	ldr	r3, [pc, #800]	; (8002f78 <_Z20Update_State_Machinev+0x408>)
 8002c58:	601a      	str	r2, [r3, #0]
					test_value_theta = theta[indexy];
 8002c5a:	4bc5      	ldr	r3, [pc, #788]	; (8002f70 <_Z20Update_State_Machinev+0x400>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4ac7      	ldr	r2, [pc, #796]	; (8002f7c <_Z20Update_State_Machinev+0x40c>)
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	edd3 7a00 	vldr	s15, [r3]
 8002c68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c6c:	ee17 2a90 	vmov	r2, s15
 8002c70:	4bc3      	ldr	r3, [pc, #780]	; (8002f80 <_Z20Update_State_Machinev+0x410>)
 8002c72:	601a      	str	r2, [r3, #0]
					offset_x_new = ((0.16075* (test_value_r * cos((test_value_theta + angle_chess) / 1000.0))) + 0.02289) / 10.0;
 8002c74:	4bc0      	ldr	r3, [pc, #768]	; (8002f78 <_Z20Update_State_Machinev+0x408>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	ee07 3a90 	vmov	s15, r3
 8002c7c:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002c80:	4bbf      	ldr	r3, [pc, #764]	; (8002f80 <_Z20Update_State_Machinev+0x410>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	ee07 3a90 	vmov	s15, r3
 8002c88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c8c:	4bbd      	ldr	r3, [pc, #756]	; (8002f84 <_Z20Update_State_Machinev+0x414>)
 8002c8e:	edd3 7a00 	vldr	s15, [r3]
 8002c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c9a:	ed9f 5bab 	vldr	d5, [pc, #684]	; 8002f48 <_Z20Update_State_Machinev+0x3d8>
 8002c9e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002ca2:	eeb0 0b46 	vmov.f64	d0, d6
 8002ca6:	f00e fd4f 	bl	8011748 <cos>
 8002caa:	eeb0 7b40 	vmov.f64	d7, d0
 8002cae:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002cb2:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8002f50 <_Z20Update_State_Machinev+0x3e0>
 8002cb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002cba:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8002f58 <_Z20Update_State_Machinev+0x3e8>
 8002cbe:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002cc2:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002cc6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002cca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002cce:	4bae      	ldr	r3, [pc, #696]	; (8002f88 <_Z20Update_State_Machinev+0x418>)
 8002cd0:	edc3 7a00 	vstr	s15, [r3]
					offset_y_new = ((0.29560* (test_value_r * sin((test_value_theta + angle_chess) / 1000.0))) + 1.05911) / 10.0;
 8002cd4:	4ba8      	ldr	r3, [pc, #672]	; (8002f78 <_Z20Update_State_Machinev+0x408>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	ee07 3a90 	vmov	s15, r3
 8002cdc:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002ce0:	4ba7      	ldr	r3, [pc, #668]	; (8002f80 <_Z20Update_State_Machinev+0x410>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	ee07 3a90 	vmov	s15, r3
 8002ce8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cec:	4ba5      	ldr	r3, [pc, #660]	; (8002f84 <_Z20Update_State_Machinev+0x414>)
 8002cee:	edd3 7a00 	vldr	s15, [r3]
 8002cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cfa:	ed9f 5b93 	vldr	d5, [pc, #588]	; 8002f48 <_Z20Update_State_Machinev+0x3d8>
 8002cfe:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002d02:	eeb0 0b46 	vmov.f64	d0, d6
 8002d06:	f00e fd6b 	bl	80117e0 <sin>
 8002d0a:	eeb0 7b40 	vmov.f64	d7, d0
 8002d0e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002d12:	ed9f 6b93 	vldr	d6, [pc, #588]	; 8002f60 <_Z20Update_State_Machinev+0x3f0>
 8002d16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d1a:	ed9f 6b93 	vldr	d6, [pc, #588]	; 8002f68 <_Z20Update_State_Machinev+0x3f8>
 8002d1e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002d22:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002d26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002d2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d2e:	4b97      	ldr	r3, [pc, #604]	; (8002f8c <_Z20Update_State_Machinev+0x41c>)
 8002d30:	edc3 7a00 	vstr	s15, [r3]
					pos_x = (test_value_r * cos((test_value_theta + angle_chess) / 1000.0)) + offset_x + offset_x_new;
 8002d34:	4b90      	ldr	r3, [pc, #576]	; (8002f78 <_Z20Update_State_Machinev+0x408>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	ee07 3a90 	vmov	s15, r3
 8002d3c:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002d40:	4b8f      	ldr	r3, [pc, #572]	; (8002f80 <_Z20Update_State_Machinev+0x410>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	ee07 3a90 	vmov	s15, r3
 8002d48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d4c:	4b8d      	ldr	r3, [pc, #564]	; (8002f84 <_Z20Update_State_Machinev+0x414>)
 8002d4e:	edd3 7a00 	vldr	s15, [r3]
 8002d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d5a:	ed9f 5b7b 	vldr	d5, [pc, #492]	; 8002f48 <_Z20Update_State_Machinev+0x3d8>
 8002d5e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002d62:	eeb0 0b46 	vmov.f64	d0, d6
 8002d66:	f00e fcef 	bl	8011748 <cos>
 8002d6a:	eeb0 7b40 	vmov.f64	d7, d0
 8002d6e:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002d72:	4b87      	ldr	r3, [pc, #540]	; (8002f90 <_Z20Update_State_Machinev+0x420>)
 8002d74:	edd3 7a00 	vldr	s15, [r3]
 8002d78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d7c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002d80:	4b81      	ldr	r3, [pc, #516]	; (8002f88 <_Z20Update_State_Machinev+0x418>)
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d8a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d8e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d92:	4b80      	ldr	r3, [pc, #512]	; (8002f94 <_Z20Update_State_Machinev+0x424>)
 8002d94:	edc3 7a00 	vstr	s15, [r3]
					pos_y = (test_value_r * sin((test_value_theta + angle_chess) / 1000.0)) + offset_y + offset_y_new;
 8002d98:	4b77      	ldr	r3, [pc, #476]	; (8002f78 <_Z20Update_State_Machinev+0x408>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	ee07 3a90 	vmov	s15, r3
 8002da0:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002da4:	4b76      	ldr	r3, [pc, #472]	; (8002f80 <_Z20Update_State_Machinev+0x410>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	ee07 3a90 	vmov	s15, r3
 8002dac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002db0:	4b74      	ldr	r3, [pc, #464]	; (8002f84 <_Z20Update_State_Machinev+0x414>)
 8002db2:	edd3 7a00 	vldr	s15, [r3]
 8002db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dbe:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8002f48 <_Z20Update_State_Machinev+0x3d8>
 8002dc2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002dc6:	eeb0 0b46 	vmov.f64	d0, d6
 8002dca:	f00e fd09 	bl	80117e0 <sin>
 8002dce:	eeb0 7b40 	vmov.f64	d7, d0
 8002dd2:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002dd6:	4b70      	ldr	r3, [pc, #448]	; (8002f98 <_Z20Update_State_Machinev+0x428>)
 8002dd8:	edd3 7a00 	vldr	s15, [r3]
 8002ddc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002de0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002de4:	4b69      	ldr	r3, [pc, #420]	; (8002f8c <_Z20Update_State_Machinev+0x41c>)
 8002de6:	edd3 7a00 	vldr	s15, [r3]
 8002dea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dee:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002df2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002df6:	4b69      	ldr	r3, [pc, #420]	; (8002f9c <_Z20Update_State_Machinev+0x42c>)
 8002df8:	edc3 7a00 	vstr	s15, [r3]
					fcb_IK(pos_x, pos_y, 0, 0);
 8002dfc:	4b65      	ldr	r3, [pc, #404]	; (8002f94 <_Z20Update_State_Machinev+0x424>)
 8002dfe:	edd3 7a00 	vldr	s15, [r3]
 8002e02:	4b66      	ldr	r3, [pc, #408]	; (8002f9c <_Z20Update_State_Machinev+0x42c>)
 8002e04:	ed93 7a00 	vldr	s14, [r3]
 8002e08:	eddf 1a65 	vldr	s3, [pc, #404]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e0c:	ed9f 1a64 	vldr	s2, [pc, #400]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e10:	eef0 0a47 	vmov.f32	s1, s14
 8002e14:	eeb0 0a67 	vmov.f32	s0, s15
 8002e18:	f7ff fd98 	bl	800294c <_Z6fcb_IKffff>
				}
				Max_Time = 7;
 8002e1c:	4b61      	ldr	r3, [pc, #388]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002e1e:	4a62      	ldr	r2, [pc, #392]	; (8002fa8 <_Z20Update_State_Machinev+0x438>)
 8002e20:	601a      	str	r2, [r3, #0]
				fcb_joint1.UpdateQuinticCoff(Max_Time, fcb_joint1.Encoder, Planning_q1, 0.0, 0.0, 0.0, 0.0);
 8002e22:	4b60      	ldr	r3, [pc, #384]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002e24:	edd3 7a00 	vldr	s15, [r3]
 8002e28:	4b60      	ldr	r3, [pc, #384]	; (8002fac <_Z20Update_State_Machinev+0x43c>)
 8002e2a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002e2e:	4b60      	ldr	r3, [pc, #384]	; (8002fb0 <_Z20Update_State_Machinev+0x440>)
 8002e30:	edd3 6a00 	vldr	s13, [r3]
 8002e34:	ed9f 3a5a 	vldr	s6, [pc, #360]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e38:	eddf 2a59 	vldr	s5, [pc, #356]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e3c:	ed9f 2a58 	vldr	s4, [pc, #352]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e40:	eddf 1a57 	vldr	s3, [pc, #348]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e44:	eeb0 1a66 	vmov.f32	s2, s13
 8002e48:	eef0 0a47 	vmov.f32	s1, s14
 8002e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e50:	4856      	ldr	r0, [pc, #344]	; (8002fac <_Z20Update_State_Machinev+0x43c>)
 8002e52:	f7fd ffb7 	bl	8000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint3.UpdateQuinticCoff(Max_Time, fcb_joint3.Encoder, Planning_q3, 0.0, 0.0, 0.0, 0.0);
 8002e56:	4b53      	ldr	r3, [pc, #332]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002e58:	edd3 7a00 	vldr	s15, [r3]
 8002e5c:	4b55      	ldr	r3, [pc, #340]	; (8002fb4 <_Z20Update_State_Machinev+0x444>)
 8002e5e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002e62:	4b55      	ldr	r3, [pc, #340]	; (8002fb8 <_Z20Update_State_Machinev+0x448>)
 8002e64:	edd3 6a00 	vldr	s13, [r3]
 8002e68:	ed9f 3a4d 	vldr	s6, [pc, #308]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e6c:	eddf 2a4c 	vldr	s5, [pc, #304]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e70:	ed9f 2a4b 	vldr	s4, [pc, #300]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e74:	eddf 1a4a 	vldr	s3, [pc, #296]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e78:	eeb0 1a66 	vmov.f32	s2, s13
 8002e7c:	eef0 0a47 	vmov.f32	s1, s14
 8002e80:	eeb0 0a67 	vmov.f32	s0, s15
 8002e84:	484b      	ldr	r0, [pc, #300]	; (8002fb4 <_Z20Update_State_Machinev+0x444>)
 8002e86:	f7fd ff9d 	bl	8000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint4.UpdateQuinticCoff(Max_Time, fcb_joint4.Encoder, Planning_q4, 0.0, 0.0, 0.0, 0.0);
 8002e8a:	4b46      	ldr	r3, [pc, #280]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002e8c:	edd3 7a00 	vldr	s15, [r3]
 8002e90:	4b4a      	ldr	r3, [pc, #296]	; (8002fbc <_Z20Update_State_Machinev+0x44c>)
 8002e92:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002e96:	4b4a      	ldr	r3, [pc, #296]	; (8002fc0 <_Z20Update_State_Machinev+0x450>)
 8002e98:	edd3 6a00 	vldr	s13, [r3]
 8002e9c:	ed9f 3a40 	vldr	s6, [pc, #256]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002ea0:	eddf 2a3f 	vldr	s5, [pc, #252]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002ea4:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002ea8:	eddf 1a3d 	vldr	s3, [pc, #244]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002eac:	eeb0 1a66 	vmov.f32	s2, s13
 8002eb0:	eef0 0a47 	vmov.f32	s1, s14
 8002eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb8:	4840      	ldr	r0, [pc, #256]	; (8002fbc <_Z20Update_State_Machinev+0x44c>)
 8002eba:	f7fd ff83 	bl	8000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				t = 0;
 8002ebe:	4b41      	ldr	r3, [pc, #260]	; (8002fc4 <_Z20Update_State_Machinev+0x454>)
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
				joint13_on = true;
 8002ec6:	4b40      	ldr	r3, [pc, #256]	; (8002fc8 <_Z20Update_State_Machinev+0x458>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim14);
 8002ecc:	483f      	ldr	r0, [pc, #252]	; (8002fcc <_Z20Update_State_Machinev+0x45c>)
 8002ece:	f00a fbeb 	bl	800d6a8 <HAL_TIM_Base_Start_IT>
				control_state = 52;
 8002ed2:	4b3f      	ldr	r3, [pc, #252]	; (8002fd0 <_Z20Update_State_Machinev+0x460>)
 8002ed4:	2234      	movs	r2, #52	; 0x34
 8002ed6:	701a      	strb	r2, [r3, #0]
		}

//		Planning_q1
//		Planning_q3

		break;
 8002ed8:	e23e      	b.n	8003358 <_Z20Update_State_Machinev+0x7e8>
		else if (indexy == 255)
 8002eda:	4b25      	ldr	r3, [pc, #148]	; (8002f70 <_Z20Update_State_Machinev+0x400>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2bff      	cmp	r3, #255	; 0xff
 8002ee0:	f040 823a 	bne.w	8003358 <_Z20Update_State_Machinev+0x7e8>
			control_state = 0;
 8002ee4:	4b3a      	ldr	r3, [pc, #232]	; (8002fd0 <_Z20Update_State_Machinev+0x460>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
		break;
 8002eea:	e235      	b.n	8003358 <_Z20Update_State_Machinev+0x7e8>

	case 42:
		Max_Time = 12;
 8002eec:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002eee:	4a39      	ldr	r2, [pc, #228]	; (8002fd4 <_Z20Update_State_Machinev+0x464>)
 8002ef0:	601a      	str	r2, [r3, #0]
		joint13_on = false;
 8002ef2:	4b35      	ldr	r3, [pc, #212]	; (8002fc8 <_Z20Update_State_Machinev+0x458>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]
		fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder,
 8002ef8:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002efa:	edd3 7a00 	vldr	s15, [r3]
 8002efe:	4b36      	ldr	r3, [pc, #216]	; (8002fd8 <_Z20Update_State_Machinev+0x468>)
 8002f00:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002f04:	4b35      	ldr	r3, [pc, #212]	; (8002fdc <_Z20Update_State_Machinev+0x46c>)
 8002f06:	edd3 6a00 	vldr	s13, [r3]
 8002f0a:	ed9f 3a25 	vldr	s6, [pc, #148]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002f0e:	eddf 2a24 	vldr	s5, [pc, #144]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002f12:	ed9f 2a23 	vldr	s4, [pc, #140]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002f16:	eddf 1a22 	vldr	s3, [pc, #136]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002f1a:	eeb0 1a66 	vmov.f32	s2, s13
 8002f1e:	eef0 0a47 	vmov.f32	s1, s14
 8002f22:	eeb0 0a67 	vmov.f32	s0, s15
 8002f26:	482c      	ldr	r0, [pc, #176]	; (8002fd8 <_Z20Update_State_Machinev+0x468>)
 8002f28:	f7fd ff4c 	bl	8000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				Setpoint_J2_Down, 0.0, 0.0, 0.0, 0.0);
		t = 0;
 8002f2c:	4b25      	ldr	r3, [pc, #148]	; (8002fc4 <_Z20Update_State_Machinev+0x454>)
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 8002f34:	4825      	ldr	r0, [pc, #148]	; (8002fcc <_Z20Update_State_Machinev+0x45c>)
 8002f36:	f00a fbb7 	bl	800d6a8 <HAL_TIM_Base_Start_IT>
		control_state = 54;
 8002f3a:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <_Z20Update_State_Machinev+0x460>)
 8002f3c:	2236      	movs	r2, #54	; 0x36
 8002f3e:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002f40:	4b27      	ldr	r3, [pc, #156]	; (8002fe0 <_Z20Update_State_Machinev+0x470>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	701a      	strb	r2, [r3, #0]
		break;
 8002f46:	e208      	b.n	800335a <_Z20Update_State_Machinev+0x7ea>
 8002f48:	00000000 	.word	0x00000000
 8002f4c:	408f4000 	.word	0x408f4000
 8002f50:	bc6a7efa 	.word	0xbc6a7efa
 8002f54:	3fc49374 	.word	0x3fc49374
 8002f58:	e59f2baa 	.word	0xe59f2baa
 8002f5c:	3f977079 	.word	0x3f977079
 8002f60:	432ca57a 	.word	0x432ca57a
 8002f64:	3fd2eb1c 	.word	0x3fd2eb1c
 8002f68:	53cddd6e 	.word	0x53cddd6e
 8002f6c:	3ff0f21d 	.word	0x3ff0f21d
 8002f70:	24000c14 	.word	0x24000c14
 8002f74:	24000110 	.word	0x24000110
 8002f78:	24000be8 	.word	0x24000be8
 8002f7c:	24000010 	.word	0x24000010
 8002f80:	24000bec 	.word	0x24000bec
 8002f84:	24000ae8 	.word	0x24000ae8
 8002f88:	24000c0c 	.word	0x24000c0c
 8002f8c:	24000c10 	.word	0x24000c10
 8002f90:	24000228 	.word	0x24000228
 8002f94:	24000c18 	.word	0x24000c18
 8002f98:	2400022c 	.word	0x2400022c
 8002f9c:	24000c1c 	.word	0x24000c1c
 8002fa0:	00000000 	.word	0x00000000
 8002fa4:	24000af4 	.word	0x24000af4
 8002fa8:	40e00000 	.word	0x40e00000
 8002fac:	24000560 	.word	0x24000560
 8002fb0:	24000bfc 	.word	0x24000bfc
 8002fb4:	24000728 	.word	0x24000728
 8002fb8:	24000c04 	.word	0x24000c04
 8002fbc:	2400080c 	.word	0x2400080c
 8002fc0:	24000c08 	.word	0x24000c08
 8002fc4:	24000bf8 	.word	0x24000bf8
 8002fc8:	24000b46 	.word	0x24000b46
 8002fcc:	24001094 	.word	0x24001094
 8002fd0:	24000bf0 	.word	0x24000bf0
 8002fd4:	41400000 	.word	0x41400000
 8002fd8:	24000644 	.word	0x24000644
 8002fdc:	24000004 	.word	0x24000004
 8002fe0:	24000af0 	.word	0x24000af0

	case 43:
		Max_Time = 12;
 8002fe4:	4b9a      	ldr	r3, [pc, #616]	; (8003250 <_Z20Update_State_Machinev+0x6e0>)
 8002fe6:	4a9b      	ldr	r2, [pc, #620]	; (8003254 <_Z20Update_State_Machinev+0x6e4>)
 8002fe8:	601a      	str	r2, [r3, #0]
		joint13_on = false;
 8002fea:	4b9b      	ldr	r3, [pc, #620]	; (8003258 <_Z20Update_State_Machinev+0x6e8>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	701a      	strb	r2, [r3, #0]
		fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder,
 8002ff0:	4b97      	ldr	r3, [pc, #604]	; (8003250 <_Z20Update_State_Machinev+0x6e0>)
 8002ff2:	edd3 7a00 	vldr	s15, [r3]
 8002ff6:	4b99      	ldr	r3, [pc, #612]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8002ff8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002ffc:	4b98      	ldr	r3, [pc, #608]	; (8003260 <_Z20Update_State_Machinev+0x6f0>)
 8002ffe:	edd3 6a00 	vldr	s13, [r3]
 8003002:	ed9f 3a98 	vldr	s6, [pc, #608]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 8003006:	eddf 2a97 	vldr	s5, [pc, #604]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 800300a:	ed9f 2a96 	vldr	s4, [pc, #600]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 800300e:	eddf 1a95 	vldr	s3, [pc, #596]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 8003012:	eeb0 1a66 	vmov.f32	s2, s13
 8003016:	eef0 0a47 	vmov.f32	s1, s14
 800301a:	eeb0 0a67 	vmov.f32	s0, s15
 800301e:	488f      	ldr	r0, [pc, #572]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8003020:	f7fd fed0 	bl	8000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				Setpoint_J2_Up, 0.0, 0.0, 0.0, 0.0);
		t = 0;
 8003024:	4b90      	ldr	r3, [pc, #576]	; (8003268 <_Z20Update_State_Machinev+0x6f8>)
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 800302c:	488f      	ldr	r0, [pc, #572]	; (800326c <_Z20Update_State_Machinev+0x6fc>)
 800302e:	f00a fb3b 	bl	800d6a8 <HAL_TIM_Base_Start_IT>
		control_state = 56;
 8003032:	4b8f      	ldr	r3, [pc, #572]	; (8003270 <_Z20Update_State_Machinev+0x700>)
 8003034:	2238      	movs	r2, #56	; 0x38
 8003036:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8003038:	4b8e      	ldr	r3, [pc, #568]	; (8003274 <_Z20Update_State_Machinev+0x704>)
 800303a:	2201      	movs	r2, #1
 800303c:	701a      	strb	r2, [r3, #0]
		break;
 800303e:	e18c      	b.n	800335a <_Z20Update_State_Machinev+0x7ea>

//		State_FIN = true;
		break;

	case 52:
		HAL_TIM_Base_Stop_IT(&htim14);
 8003040:	488a      	ldr	r0, [pc, #552]	; (800326c <_Z20Update_State_Machinev+0x6fc>)
 8003042:	f00a fba9 	bl	800d798 <HAL_TIM_Base_Stop_IT>
		fcb_joint1.Goal_Velocity = 0;
 8003046:	4b8c      	ldr	r3, [pc, #560]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Velocity = 0;
 800304e:	4b8b      	ldr	r3, [pc, #556]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Velocity = 0;
 8003056:	4b8a      	ldr	r3, [pc, #552]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint1.Output_Joint_W = 0;
 800305e:	4b86      	ldr	r3, [pc, #536]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 8003068:	4b85      	ldr	r3, [pc, #532]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 8003072:	4b82      	ldr	r3, [pc, #520]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 800307c:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 8003080:	4880      	ldr	r0, [pc, #512]	; (8003284 <_Z20Update_State_Machinev+0x714>)
 8003082:	f7ff f9ad 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 8003086:	ed9f 0a77 	vldr	s0, [pc, #476]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 800308a:	487f      	ldr	r0, [pc, #508]	; (8003288 <_Z20Update_State_Machinev+0x718>)
 800308c:	f7ff f9a8 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 8003090:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 8003094:	487d      	ldr	r0, [pc, #500]	; (800328c <_Z20Update_State_Machinev+0x71c>)
 8003096:	f7ff f9a3 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint1.C0 = fcb_joint1.Encoder;
 800309a:	4b77      	ldr	r3, [pc, #476]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	4a76      	ldr	r2, [pc, #472]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 80030a0:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint4.C0 = fcb_joint4.Encoder;
 80030a4:	4b75      	ldr	r3, [pc, #468]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	4a74      	ldr	r2, [pc, #464]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 80030aa:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint3.C0 = fcb_joint3.Encoder;
 80030ae:	4b74      	ldr	r3, [pc, #464]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	4a73      	ldr	r2, [pc, #460]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 80030b4:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
//		fcb_joint1.C0 = fcb_joint1.Goal_Position;
//		fcb_joint4.C0 = fcb_joint4.Goal_Position;
//		fcb_joint3.C0 = fcb_joint3.Goal_Position;

		fcb_joint1.C1 = 0;
 80030b8:	4b6f      	ldr	r3, [pc, #444]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint3.C1 = 0;
 80030c2:	4b6f      	ldr	r3, [pc, #444]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint1.C2 = 0;
 80030cc:	4b6a      	ldr	r3, [pc, #424]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint3.C2 = 0;
 80030d6:	4b6a      	ldr	r3, [pc, #424]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint1.C3 = 0;
 80030e0:	4b65      	ldr	r3, [pc, #404]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint3.C3 = 0;
 80030ea:	4b65      	ldr	r3, [pc, #404]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint1.C4 = 0;
 80030f4:	4b60      	ldr	r3, [pc, #384]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint3.C4 = 0;
 80030fe:	4b60      	ldr	r3, [pc, #384]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint1.C5 = 0;
 8003108:	4b5b      	ldr	r3, [pc, #364]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint3.C5 = 0;
 8003112:	4b5b      	ldr	r3, [pc, #364]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint4.C1 = 0;
 800311c:	4b57      	ldr	r3, [pc, #348]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint4.C2 = 0;
 8003126:	4b55      	ldr	r3, [pc, #340]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint4.C3 = 0;
 8003130:	4b52      	ldr	r3, [pc, #328]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint4.C4 = 0;
 800313a:	4b50      	ldr	r3, [pc, #320]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint4.C5 = 0;
 8003144:	4b4d      	ldr	r3, [pc, #308]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

		control_state = 42;
 800314e:	4b48      	ldr	r3, [pc, #288]	; (8003270 <_Z20Update_State_Machinev+0x700>)
 8003150:	222a      	movs	r2, #42	; 0x2a
 8003152:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8003154:	4b47      	ldr	r3, [pc, #284]	; (8003274 <_Z20Update_State_Machinev+0x704>)
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]
		break;
 800315a:	e0fe      	b.n	800335a <_Z20Update_State_Machinev+0x7ea>

//		State_FIN = true;
		break;

	case 54:
		HAL_TIM_Base_Stop_IT(&htim14);
 800315c:	4843      	ldr	r0, [pc, #268]	; (800326c <_Z20Update_State_Machinev+0x6fc>)
 800315e:	f00a fb1b 	bl	800d798 <HAL_TIM_Base_Stop_IT>
		fcb_joint2.Goal_Velocity = 0;
 8003162:	4b3e      	ldr	r3, [pc, #248]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 800316a:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 800316e:	4848      	ldr	r0, [pc, #288]	; (8003290 <_Z20Update_State_Machinev+0x720>)
 8003170:	f7ff f936 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 8003174:	4b39      	ldr	r3, [pc, #228]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8003176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003178:	4a38      	ldr	r2, [pc, #224]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 800317a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.Output_Joint_W = 0;
 800317e:	4b3e      	ldr	r3, [pc, #248]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 8003188:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 8003192:	4b3a      	ldr	r3, [pc, #232]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 800319c:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 80031a0:	4838      	ldr	r0, [pc, #224]	; (8003284 <_Z20Update_State_Machinev+0x714>)
 80031a2:	f7ff f91d 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 80031a6:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 80031aa:	4837      	ldr	r0, [pc, #220]	; (8003288 <_Z20Update_State_Machinev+0x718>)
 80031ac:	f7ff f918 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 80031b0:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 80031b4:	4835      	ldr	r0, [pc, #212]	; (800328c <_Z20Update_State_Machinev+0x71c>)
 80031b6:	f7ff f913 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		if (Gripper_State[first - 1] == 1) {
 80031ba:	4b36      	ldr	r3, [pc, #216]	; (8003294 <_Z20Update_State_Machinev+0x724>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3b01      	subs	r3, #1
 80031c0:	4a35      	ldr	r2, [pc, #212]	; (8003298 <_Z20Update_State_Machinev+0x728>)
 80031c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	bf0c      	ite	eq
 80031ca:	2301      	moveq	r3, #1
 80031cc:	2300      	movne	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <_Z20Update_State_Machinev+0x66c>
			gripper.GripperClose();
 80031d4:	4831      	ldr	r0, [pc, #196]	; (800329c <_Z20Update_State_Machinev+0x72c>)
 80031d6:	f7fe fd99 	bl	8001d0c <_ZN10ServoMotor12GripperCloseEv>
 80031da:	e00f      	b.n	80031fc <_Z20Update_State_Machinev+0x68c>
		} else if (Gripper_State[first - 1] == 2) {
 80031dc:	4b2d      	ldr	r3, [pc, #180]	; (8003294 <_Z20Update_State_Machinev+0x724>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	4a2d      	ldr	r2, [pc, #180]	; (8003298 <_Z20Update_State_Machinev+0x728>)
 80031e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <_Z20Update_State_Machinev+0x68c>
			gripper.GripperOpen();
 80031f6:	4829      	ldr	r0, [pc, #164]	; (800329c <_Z20Update_State_Machinev+0x72c>)
 80031f8:	f7fe fd9e 	bl	8001d38 <_ZN10ServoMotor11GripperOpenEv>
		}
//		for (int i =0 ;i <1000000;i++) {}
		fcb_joint2.C0 = 0;
 80031fc:	4b17      	ldr	r3, [pc, #92]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		fcb_joint2.C1 = 0;
 8003206:	4b15      	ldr	r3, [pc, #84]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 8003210:	4b12      	ldr	r3, [pc, #72]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 800321a:	4b10      	ldr	r3, [pc, #64]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 8003224:	4b0d      	ldr	r3, [pc, #52]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 800322e:	4b0b      	ldr	r3, [pc, #44]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 8003238:	4b08      	ldr	r3, [pc, #32]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 43;
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <_Z20Update_State_Machinev+0x700>)
 8003242:	222b      	movs	r2, #43	; 0x2b
 8003244:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8003246:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <_Z20Update_State_Machinev+0x704>)
 8003248:	2201      	movs	r2, #1
 800324a:	701a      	strb	r2, [r3, #0]
		break;
 800324c:	e085      	b.n	800335a <_Z20Update_State_Machinev+0x7ea>
 800324e:	bf00      	nop
 8003250:	24000af4 	.word	0x24000af4
 8003254:	41400000 	.word	0x41400000
 8003258:	24000b46 	.word	0x24000b46
 800325c:	24000644 	.word	0x24000644
 8003260:	24000000 	.word	0x24000000
 8003264:	00000000 	.word	0x00000000
 8003268:	24000bf8 	.word	0x24000bf8
 800326c:	24001094 	.word	0x24001094
 8003270:	24000bf0 	.word	0x24000bf0
 8003274:	24000af0 	.word	0x24000af0
 8003278:	24000560 	.word	0x24000560
 800327c:	2400080c 	.word	0x2400080c
 8003280:	24000728 	.word	0x24000728
 8003284:	240004c0 	.word	0x240004c0
 8003288:	24000538 	.word	0x24000538
 800328c:	24000510 	.word	0x24000510
 8003290:	240004e8 	.word	0x240004e8
 8003294:	24000008 	.word	0x24000008
 8003298:	24000b98 	.word	0x24000b98
 800329c:	24000ab8 	.word	0x24000ab8
	case 55:

		break;

	case 56:
		fcb_joint2.Goal_Velocity = 0;
 80032a0:	4b30      	ldr	r3, [pc, #192]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 80032a8:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8003368 <_Z20Update_State_Machinev+0x7f8>
 80032ac:	482f      	ldr	r0, [pc, #188]	; (800336c <_Z20Update_State_Machinev+0x7fc>)
 80032ae:	f7ff f897 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 80032b2:	4b2c      	ldr	r3, [pc, #176]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	4a2b      	ldr	r2, [pc, #172]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 80032b8:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.Output_Joint_W = 0;
 80032bc:	4b2c      	ldr	r3, [pc, #176]	; (8003370 <_Z20Update_State_Machinev+0x800>)
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 80032c6:	4b2b      	ldr	r3, [pc, #172]	; (8003374 <_Z20Update_State_Machinev+0x804>)
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 80032d0:	4b29      	ldr	r3, [pc, #164]	; (8003378 <_Z20Update_State_Machinev+0x808>)
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 80032da:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8003368 <_Z20Update_State_Machinev+0x7f8>
 80032de:	4827      	ldr	r0, [pc, #156]	; (800337c <_Z20Update_State_Machinev+0x80c>)
 80032e0:	f7ff f87e 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 80032e4:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8003368 <_Z20Update_State_Machinev+0x7f8>
 80032e8:	4825      	ldr	r0, [pc, #148]	; (8003380 <_Z20Update_State_Machinev+0x810>)
 80032ea:	f7ff f879 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 80032ee:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8003368 <_Z20Update_State_Machinev+0x7f8>
 80032f2:	4824      	ldr	r0, [pc, #144]	; (8003384 <_Z20Update_State_Machinev+0x814>)
 80032f4:	f7ff f874 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		HAL_TIM_Base_Stop_IT(&htim14);
 80032f8:	4823      	ldr	r0, [pc, #140]	; (8003388 <_Z20Update_State_Machinev+0x818>)
 80032fa:	f00a fa4d 	bl	800d798 <HAL_TIM_Base_Stop_IT>
		fcb_joint2.C1 = 0;
 80032fe:	4b19      	ldr	r3, [pc, #100]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 8003308:	4b16      	ldr	r3, [pc, #88]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 8003312:	4b14      	ldr	r3, [pc, #80]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 800331c:	4b11      	ldr	r3, [pc, #68]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 8003326:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 41;
 8003338:	4b14      	ldr	r3, [pc, #80]	; (800338c <_Z20Update_State_Machinev+0x81c>)
 800333a:	2229      	movs	r2, #41	; 0x29
 800333c:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 800333e:	4b14      	ldr	r3, [pc, #80]	; (8003390 <_Z20Update_State_Machinev+0x820>)
 8003340:	2201      	movs	r2, #1
 8003342:	701a      	strb	r2, [r3, #0]
		break;
 8003344:	e009      	b.n	800335a <_Z20Update_State_Machinev+0x7ea>

	default:
		control_state = 0;
 8003346:	4b11      	ldr	r3, [pc, #68]	; (800338c <_Z20Update_State_Machinev+0x81c>)
 8003348:	2200      	movs	r2, #0
 800334a:	701a      	strb	r2, [r3, #0]
		State_FIN = false;
 800334c:	4b10      	ldr	r3, [pc, #64]	; (8003390 <_Z20Update_State_Machinev+0x820>)
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
		break;
 8003352:	e002      	b.n	800335a <_Z20Update_State_Machinev+0x7ea>
		break;
 8003354:	bf00      	nop
 8003356:	e000      	b.n	800335a <_Z20Update_State_Machinev+0x7ea>
		break;
 8003358:	bf00      	nop
	}
}
 800335a:	bf00      	nop
 800335c:	46bd      	mov	sp, r7
 800335e:	ecbd 8b02 	vpop	{d8}
 8003362:	bd80      	pop	{r7, pc}
 8003364:	24000644 	.word	0x24000644
 8003368:	00000000 	.word	0x00000000
 800336c:	240004e8 	.word	0x240004e8
 8003370:	24000560 	.word	0x24000560
 8003374:	24000728 	.word	0x24000728
 8003378:	2400080c 	.word	0x2400080c
 800337c:	240004c0 	.word	0x240004c0
 8003380:	24000538 	.word	0x24000538
 8003384:	24000510 	.word	0x24000510
 8003388:	24001094 	.word	0x24001094
 800338c:	24000bf0 	.word	0x24000bf0
 8003390:	24000af0 	.word	0x24000af0

08003394 <HAL_UARTEx_RxEventCallback>:
float box_q4[30];
float idx, idy;

#endif

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8003394:	b5b0      	push	{r4, r5, r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a8f      	ldr	r2, [pc, #572]	; (80035e0 <HAL_UARTEx_RxEventCallback+0x24c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	f040 8188 	bne.w	80036ba <HAL_UARTEx_RxEventCallback+0x326>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 80033aa:	4a8e      	ldr	r2, [pc, #568]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80033ac:	4b8e      	ldr	r3, [pc, #568]	; (80035e8 <HAL_UARTEx_RxEventCallback+0x254>)
 80033ae:	4614      	mov	r4, r2
 80033b0:	461d      	mov	r5, r3
 80033b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033b6:	682b      	ldr	r3, [r5, #0]
 80033b8:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 80033ba:	2214      	movs	r2, #20
 80033bc:	2100      	movs	r1, #0
 80033be:	488a      	ldr	r0, [pc, #552]	; (80035e8 <HAL_UARTEx_RxEventCallback+0x254>)
 80033c0:	f00f fa3e 	bl	8012840 <memset>
		if (Size - 2 > 0 && Size <= Rx_BUFFER_SIZE) {// Check if there's some data.
 80033c4:	887b      	ldrh	r3, [r7, #2]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	f240 8166 	bls.w	8003698 <HAL_UARTEx_RxEventCallback+0x304>
 80033cc:	887b      	ldrh	r3, [r7, #2]
 80033ce:	2b14      	cmp	r3, #20
 80033d0:	f200 8162 	bhi.w	8003698 <HAL_UARTEx_RxEventCallback+0x304>
			cmdDataSize = Size - 2;	// Calculate data length.
 80033d4:	887b      	ldrh	r3, [r7, #2]
 80033d6:	3b02      	subs	r3, #2
 80033d8:	b29a      	uxth	r2, r3
 80033da:	4b84      	ldr	r3, [pc, #528]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 80033dc:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) Old_Rx_Buffer,
 80033de:	4b83      	ldr	r3, [pc, #524]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	497f      	ldr	r1, [pc, #508]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80033e8:	4881      	ldr	r0, [pc, #516]	; (80035f0 <HAL_UARTEx_RxEventCallback+0x25c>)
 80033ea:	f004 f80d 	bl	8007408 <HAL_CRC_Calculate>
 80033ee:	4603      	mov	r3, r0
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	4b80      	ldr	r3, [pc, #512]	; (80035f4 <HAL_UARTEx_RxEventCallback+0x260>)
 80033f4:	801a      	strh	r2, [r3, #0]
					cmdDataSize); // Calculate data only by STM32 Hardware CRC.
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 80033f6:	4b7d      	ldr	r3, [pc, #500]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	4b79      	ldr	r3, [pc, #484]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003400:	5c9b      	ldrb	r3, [r3, r2]
 8003402:	021b      	lsls	r3, r3, #8
					| Old_Rx_Buffer[cmdDataSize + 1]; // Read Expected CRC from Protocol.
 8003404:	b21a      	sxth	r2, r3
 8003406:	4b79      	ldr	r3, [pc, #484]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	b29b      	uxth	r3, r3
 800340c:	3301      	adds	r3, #1
 800340e:	4975      	ldr	r1, [pc, #468]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003410:	5ccb      	ldrb	r3, [r1, r3]
 8003412:	b21b      	sxth	r3, r3
 8003414:	4313      	orrs	r3, r2
 8003416:	b21b      	sxth	r3, r3
 8003418:	b29a      	uxth	r2, r3
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 800341a:	4b77      	ldr	r3, [pc, #476]	; (80035f8 <HAL_UARTEx_RxEventCallback+0x264>)
 800341c:	801a      	strh	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 800341e:	4b75      	ldr	r3, [pc, #468]	; (80035f4 <HAL_UARTEx_RxEventCallback+0x260>)
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	b29a      	uxth	r2, r3
 8003424:	4b74      	ldr	r3, [pc, #464]	; (80035f8 <HAL_UARTEx_RxEventCallback+0x264>)
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	b29b      	uxth	r3, r3
 800342a:	429a      	cmp	r2, r3
 800342c:	bf0c      	ite	eq
 800342e:	2301      	moveq	r3, #1
 8003430:	2300      	movne	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8151 	beq.w	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800343a:	2201      	movs	r2, #1
 800343c:	2102      	movs	r1, #2
 800343e:	486f      	ldr	r0, [pc, #444]	; (80035fc <HAL_UARTEx_RxEventCallback+0x268>)
 8003440:	f007 f968 	bl	800a714 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003444:	2200      	movs	r2, #0
 8003446:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800344a:	486d      	ldr	r0, [pc, #436]	; (8003600 <HAL_UARTEx_RxEventCallback+0x26c>)
 800344c:	f007 f962 	bl	800a714 <HAL_GPIO_WritePin>
//				}
//				else if (Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3) {// Linear Jog Yaw
////					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
//					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
//				}
				if (Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5) // Joint Jog 4q
 8003450:	4b64      	ldr	r3, [pc, #400]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b61      	cmp	r3, #97	; 0x61
 8003456:	d106      	bne.n	8003466 <HAL_UARTEx_RxEventCallback+0xd2>
 8003458:	4b64      	ldr	r3, [pc, #400]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b05      	cmp	r3, #5
 8003460:	d101      	bne.n	8003466 <HAL_UARTEx_RxEventCallback+0xd2>
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <HAL_UARTEx_RxEventCallback+0xd4>
 8003466:	2300      	movs	r3, #0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d014      	beq.n	8003496 <HAL_UARTEx_RxEventCallback+0x102>
						{
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 800346c:	4b5d      	ldr	r3, [pc, #372]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 800346e:	785b      	ldrb	r3, [r3, #1]
 8003470:	b25a      	sxtb	r2, r3
 8003472:	4b64      	ldr	r3, [pc, #400]	; (8003604 <HAL_UARTEx_RxEventCallback+0x270>)
 8003474:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 8003476:	4b5b      	ldr	r3, [pc, #364]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003478:	789b      	ldrb	r3, [r3, #2]
 800347a:	b25a      	sxtb	r2, r3
 800347c:	4b62      	ldr	r3, [pc, #392]	; (8003608 <HAL_UARTEx_RxEventCallback+0x274>)
 800347e:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 8003480:	4b58      	ldr	r3, [pc, #352]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003482:	78db      	ldrb	r3, [r3, #3]
 8003484:	b25a      	sxtb	r2, r3
 8003486:	4b61      	ldr	r3, [pc, #388]	; (800360c <HAL_UARTEx_RxEventCallback+0x278>)
 8003488:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 800348a:	4b56      	ldr	r3, [pc, #344]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 800348c:	791b      	ldrb	r3, [r3, #4]
 800348e:	b25a      	sxtb	r2, r3
 8003490:	4b5f      	ldr	r3, [pc, #380]	; (8003610 <HAL_UARTEx_RxEventCallback+0x27c>)
 8003492:	701a      	strb	r2, [r3, #0]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4];
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6];
					pyaw = Old_Rx_Buffer[7];
				}

			}
 8003494:	e122      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5) // Linear Jog X,Y,Z,Yaw
 8003496:	4b53      	ldr	r3, [pc, #332]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b71      	cmp	r3, #113	; 0x71
 800349c:	d106      	bne.n	80034ac <HAL_UARTEx_RxEventCallback+0x118>
 800349e:	4b53      	ldr	r3, [pc, #332]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b05      	cmp	r3, #5
 80034a6:	d101      	bne.n	80034ac <HAL_UARTEx_RxEventCallback+0x118>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <HAL_UARTEx_RxEventCallback+0x11a>
 80034ac:	2300      	movs	r3, #0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d014      	beq.n	80034dc <HAL_UARTEx_RxEventCallback+0x148>
					dx = Old_Rx_Buffer[1];
 80034b2:	4b4c      	ldr	r3, [pc, #304]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80034b4:	785b      	ldrb	r3, [r3, #1]
 80034b6:	b25a      	sxtb	r2, r3
 80034b8:	4b56      	ldr	r3, [pc, #344]	; (8003614 <HAL_UARTEx_RxEventCallback+0x280>)
 80034ba:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 80034bc:	4b49      	ldr	r3, [pc, #292]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80034be:	789b      	ldrb	r3, [r3, #2]
 80034c0:	b25a      	sxtb	r2, r3
 80034c2:	4b55      	ldr	r3, [pc, #340]	; (8003618 <HAL_UARTEx_RxEventCallback+0x284>)
 80034c4:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 80034c6:	4b47      	ldr	r3, [pc, #284]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80034c8:	78db      	ldrb	r3, [r3, #3]
 80034ca:	b25a      	sxtb	r2, r3
 80034cc:	4b53      	ldr	r3, [pc, #332]	; (800361c <HAL_UARTEx_RxEventCallback+0x288>)
 80034ce:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 80034d0:	4b44      	ldr	r3, [pc, #272]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80034d2:	791b      	ldrb	r3, [r3, #4]
 80034d4:	b25a      	sxtb	r2, r3
 80034d6:	4b52      	ldr	r3, [pc, #328]	; (8003620 <HAL_UARTEx_RxEventCallback+0x28c>)
 80034d8:	701a      	strb	r2, [r3, #0]
			}
 80034da:	e0ff      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x85 && cmdDataSize == 2) {
 80034dc:	4b41      	ldr	r3, [pc, #260]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b85      	cmp	r3, #133	; 0x85
 80034e2:	d106      	bne.n	80034f2 <HAL_UARTEx_RxEventCallback+0x15e>
 80034e4:	4b41      	ldr	r3, [pc, #260]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d101      	bne.n	80034f2 <HAL_UARTEx_RxEventCallback+0x15e>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_UARTEx_RxEventCallback+0x160>
 80034f2:	2300      	movs	r3, #0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_UARTEx_RxEventCallback+0x16c>
					control_state = 51;
 80034f8:	4b4a      	ldr	r3, [pc, #296]	; (8003624 <HAL_UARTEx_RxEventCallback+0x290>)
 80034fa:	2233      	movs	r2, #51	; 0x33
 80034fc:	701a      	strb	r2, [r3, #0]
			}
 80034fe:	e0ed      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x86 && cmdDataSize == 3) //
 8003500:	4b38      	ldr	r3, [pc, #224]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b86      	cmp	r3, #134	; 0x86
 8003506:	d106      	bne.n	8003516 <HAL_UARTEx_RxEventCallback+0x182>
 8003508:	4b38      	ldr	r3, [pc, #224]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b03      	cmp	r3, #3
 8003510:	d101      	bne.n	8003516 <HAL_UARTEx_RxEventCallback+0x182>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <HAL_UARTEx_RxEventCallback+0x184>
 8003516:	2300      	movs	r3, #0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <HAL_UARTEx_RxEventCallback+0x19e>
					int value_input = Old_Rx_Buffer[1];
 800351c:	4b31      	ldr	r3, [pc, #196]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 800351e:	785b      	ldrb	r3, [r3, #1]
 8003520:	613b      	str	r3, [r7, #16]
					int value_gripper = Old_Rx_Buffer[2];
 8003522:	4b30      	ldr	r3, [pc, #192]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003524:	789b      	ldrb	r3, [r3, #2]
 8003526:	60fb      	str	r3, [r7, #12]
					Insert_queue(value_input, value_gripper);
 8003528:	68f9      	ldr	r1, [r7, #12]
 800352a:	6938      	ldr	r0, [r7, #16]
 800352c:	f7ff f97c 	bl	8002828 <_Z12Insert_queueii>
			}
 8003530:	e0d4      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x87 && cmdDataSize == 2) {
 8003532:	4b2c      	ldr	r3, [pc, #176]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b87      	cmp	r3, #135	; 0x87
 8003538:	d106      	bne.n	8003548 <HAL_UARTEx_RxEventCallback+0x1b4>
 800353a:	4b2c      	ldr	r3, [pc, #176]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d101      	bne.n	8003548 <HAL_UARTEx_RxEventCallback+0x1b4>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <HAL_UARTEx_RxEventCallback+0x1b6>
 8003548:	2300      	movs	r3, #0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_UARTEx_RxEventCallback+0x1cc>
					char state_input = Old_Rx_Buffer[1];
 800354e:	4b25      	ldr	r3, [pc, #148]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003550:	785b      	ldrb	r3, [r3, #1]
 8003552:	75fb      	strb	r3, [r7, #23]
					control_state = state_input;
 8003554:	4a33      	ldr	r2, [pc, #204]	; (8003624 <HAL_UARTEx_RxEventCallback+0x290>)
 8003556:	7dfb      	ldrb	r3, [r7, #23]
 8003558:	7013      	strb	r3, [r2, #0]
					Update_State_Machine();
 800355a:	f7ff fb09 	bl	8002b70 <_Z20Update_State_Machinev>
			}
 800355e:	e0bd      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x89 && cmdDataSize == 2) {
 8003560:	4b20      	ldr	r3, [pc, #128]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b89      	cmp	r3, #137	; 0x89
 8003566:	d106      	bne.n	8003576 <HAL_UARTEx_RxEventCallback+0x1e2>
 8003568:	4b20      	ldr	r3, [pc, #128]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d101      	bne.n	8003576 <HAL_UARTEx_RxEventCallback+0x1e2>
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <HAL_UARTEx_RxEventCallback+0x1e4>
 8003576:	2300      	movs	r3, #0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_UARTEx_RxEventCallback+0x1ee>
					Update_State_Machine();
 800357c:	f7ff faf8 	bl	8002b70 <_Z20Update_State_Machinev>
			}
 8003580:	e0ac      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x81 && cmdDataSize == 2) // Servo
 8003582:	4b18      	ldr	r3, [pc, #96]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b81      	cmp	r3, #129	; 0x81
 8003588:	d106      	bne.n	8003598 <HAL_UARTEx_RxEventCallback+0x204>
 800358a:	4b18      	ldr	r3, [pc, #96]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d101      	bne.n	8003598 <HAL_UARTEx_RxEventCallback+0x204>
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <HAL_UARTEx_RxEventCallback+0x206>
 8003598:	2300      	movs	r3, #0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d015      	beq.n	80035ca <HAL_UARTEx_RxEventCallback+0x236>
					gripperstate = Old_Rx_Buffer[1];
 800359e:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80035a0:	785b      	ldrb	r3, [r3, #1]
 80035a2:	461a      	mov	r2, r3
 80035a4:	4b20      	ldr	r3, [pc, #128]	; (8003628 <HAL_UARTEx_RxEventCallback+0x294>)
 80035a6:	601a      	str	r2, [r3, #0]
					if (gripperstate == 0) {
 80035a8:	4b1f      	ldr	r3, [pc, #124]	; (8003628 <HAL_UARTEx_RxEventCallback+0x294>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	bf0c      	ite	eq
 80035b0:	2301      	moveq	r3, #1
 80035b2:	2300      	movne	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_UARTEx_RxEventCallback+0x22e>
						gripper.GripperOpen();
 80035ba:	481c      	ldr	r0, [pc, #112]	; (800362c <HAL_UARTEx_RxEventCallback+0x298>)
 80035bc:	f7fe fbbc 	bl	8001d38 <_ZN10ServoMotor11GripperOpenEv>
			}
 80035c0:	e08c      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
						gripper.GripperClose();
 80035c2:	481a      	ldr	r0, [pc, #104]	; (800362c <HAL_UARTEx_RxEventCallback+0x298>)
 80035c4:	f7fe fba2 	bl	8001d0c <_ZN10ServoMotor12GripperCloseEv>
			}
 80035c8:	e088      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x91 && cmdDataSize == 8) {
 80035ca:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b91      	cmp	r3, #145	; 0x91
 80035d0:	d12e      	bne.n	8003630 <HAL_UARTEx_RxEventCallback+0x29c>
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d129      	bne.n	8003630 <HAL_UARTEx_RxEventCallback+0x29c>
 80035dc:	2301      	movs	r3, #1
 80035de:	e028      	b.n	8003632 <HAL_UARTEx_RxEventCallback+0x29e>
 80035e0:	24001374 	.word	0x24001374
 80035e4:	24000b18 	.word	0x24000b18
 80035e8:	24000b2c 	.word	0x24000b2c
 80035ec:	24000b40 	.word	0x24000b40
 80035f0:	2400042c 	.word	0x2400042c
 80035f4:	24000b10 	.word	0x24000b10
 80035f8:	24000b12 	.word	0x24000b12
 80035fc:	58021000 	.word	0x58021000
 8003600:	58020400 	.word	0x58020400
 8003604:	24000af8 	.word	0x24000af8
 8003608:	24000af9 	.word	0x24000af9
 800360c:	24000afa 	.word	0x24000afa
 8003610:	24000afb 	.word	0x24000afb
 8003614:	24000afc 	.word	0x24000afc
 8003618:	24000afd 	.word	0x24000afd
 800361c:	24000afe 	.word	0x24000afe
 8003620:	24000aff 	.word	0x24000aff
 8003624:	24000bf0 	.word	0x24000bf0
 8003628:	24000b14 	.word	0x24000b14
 800362c:	24000ab8 	.word	0x24000ab8
 8003630:	2300      	movs	r3, #0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d052      	beq.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
					px = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8003636:	4b5f      	ldr	r3, [pc, #380]	; (80037b4 <HAL_UARTEx_RxEventCallback+0x420>)
 8003638:	785b      	ldrb	r3, [r3, #1]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	4a5d      	ldr	r2, [pc, #372]	; (80037b4 <HAL_UARTEx_RxEventCallback+0x420>)
 800363e:	7892      	ldrb	r2, [r2, #2]
 8003640:	4313      	orrs	r3, r2
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800364a:	4b5b      	ldr	r3, [pc, #364]	; (80037b8 <HAL_UARTEx_RxEventCallback+0x424>)
 800364c:	edc3 7a00 	vstr	s15, [r3]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4];
 8003650:	4b58      	ldr	r3, [pc, #352]	; (80037b4 <HAL_UARTEx_RxEventCallback+0x420>)
 8003652:	78db      	ldrb	r3, [r3, #3]
 8003654:	021b      	lsls	r3, r3, #8
 8003656:	4a57      	ldr	r2, [pc, #348]	; (80037b4 <HAL_UARTEx_RxEventCallback+0x420>)
 8003658:	7912      	ldrb	r2, [r2, #4]
 800365a:	4313      	orrs	r3, r2
 800365c:	ee07 3a90 	vmov	s15, r3
 8003660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003664:	4b55      	ldr	r3, [pc, #340]	; (80037bc <HAL_UARTEx_RxEventCallback+0x428>)
 8003666:	edc3 7a00 	vstr	s15, [r3]
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6];
 800366a:	4b52      	ldr	r3, [pc, #328]	; (80037b4 <HAL_UARTEx_RxEventCallback+0x420>)
 800366c:	795b      	ldrb	r3, [r3, #5]
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	4a50      	ldr	r2, [pc, #320]	; (80037b4 <HAL_UARTEx_RxEventCallback+0x420>)
 8003672:	7992      	ldrb	r2, [r2, #6]
 8003674:	4313      	orrs	r3, r2
 8003676:	ee07 3a90 	vmov	s15, r3
 800367a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800367e:	4b50      	ldr	r3, [pc, #320]	; (80037c0 <HAL_UARTEx_RxEventCallback+0x42c>)
 8003680:	edc3 7a00 	vstr	s15, [r3]
					pyaw = Old_Rx_Buffer[7];
 8003684:	4b4b      	ldr	r3, [pc, #300]	; (80037b4 <HAL_UARTEx_RxEventCallback+0x420>)
 8003686:	79db      	ldrb	r3, [r3, #7]
 8003688:	ee07 3a90 	vmov	s15, r3
 800368c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003690:	4b4c      	ldr	r3, [pc, #304]	; (80037c4 <HAL_UARTEx_RxEventCallback+0x430>)
 8003692:	edc3 7a00 	vstr	s15, [r3]
			}
 8003696:	e021      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003698:	2200      	movs	r2, #0
 800369a:	2102      	movs	r1, #2
 800369c:	484a      	ldr	r0, [pc, #296]	; (80037c8 <HAL_UARTEx_RxEventCallback+0x434>)
 800369e:	f007 f839 	bl	800a714 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80036a2:	2201      	movs	r2, #1
 80036a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80036a8:	4848      	ldr	r0, [pc, #288]	; (80037cc <HAL_UARTEx_RxEventCallback+0x438>)
 80036aa:	f007 f833 	bl	800a714 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "CRC16 error\n", 12);
 80036ae:	220c      	movs	r2, #12
 80036b0:	4947      	ldr	r1, [pc, #284]	; (80037d0 <HAL_UARTEx_RxEventCallback+0x43c>)
 80036b2:	4848      	ldr	r0, [pc, #288]	; (80037d4 <HAL_UARTEx_RxEventCallback+0x440>)
 80036b4:	f00b fdae 	bl	800f214 <HAL_UART_Transmit_DMA>
 80036b8:	e011      	b.n	80036de <HAL_UARTEx_RxEventCallback+0x34a>
		}
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80036ba:	2200      	movs	r2, #0
 80036bc:	2102      	movs	r1, #2
 80036be:	4842      	ldr	r0, [pc, #264]	; (80037c8 <HAL_UARTEx_RxEventCallback+0x434>)
 80036c0:	f007 f828 	bl	800a714 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80036c4:	2201      	movs	r2, #1
 80036c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80036ca:	4840      	ldr	r0, [pc, #256]	; (80037cc <HAL_UARTEx_RxEventCallback+0x438>)
 80036cc:	f007 f822 	bl	800a714 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "Protocol match error\n", 21);
 80036d0:	2215      	movs	r2, #21
 80036d2:	4941      	ldr	r1, [pc, #260]	; (80037d8 <HAL_UARTEx_RxEventCallback+0x444>)
 80036d4:	483f      	ldr	r0, [pc, #252]	; (80037d4 <HAL_UARTEx_RxEventCallback+0x440>)
 80036d6:	f00b fd9d 	bl	800f214 <HAL_UART_Transmit_DMA>
 80036da:	e000      	b.n	80036de <HAL_UARTEx_RxEventCallback+0x34a>
			}
 80036dc:	bf00      	nop
	}
	/* start the DMA again */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 80036de:	2214      	movs	r2, #20
 80036e0:	493e      	ldr	r1, [pc, #248]	; (80037dc <HAL_UARTEx_RxEventCallback+0x448>)
 80036e2:	483c      	ldr	r0, [pc, #240]	; (80037d4 <HAL_UARTEx_RxEventCallback+0x440>)
 80036e4:	f00d fcfb 	bl	80110de <HAL_UARTEx_ReceiveToIdle_DMA>
	Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80036e8:	4b3d      	ldr	r3, [pc, #244]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a3d      	ldr	r2, [pc, #244]	; (80037e4 <HAL_UARTEx_RxEventCallback+0x450>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d04a      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 80036f2:	4b3b      	ldr	r3, [pc, #236]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a3c      	ldr	r2, [pc, #240]	; (80037e8 <HAL_UARTEx_RxEventCallback+0x454>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d045      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 80036fc:	4b38      	ldr	r3, [pc, #224]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a3a      	ldr	r2, [pc, #232]	; (80037ec <HAL_UARTEx_RxEventCallback+0x458>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d040      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003706:	4b36      	ldr	r3, [pc, #216]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a39      	ldr	r2, [pc, #228]	; (80037f0 <HAL_UARTEx_RxEventCallback+0x45c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d03b      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003710:	4b33      	ldr	r3, [pc, #204]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a37      	ldr	r2, [pc, #220]	; (80037f4 <HAL_UARTEx_RxEventCallback+0x460>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d036      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 800371a:	4b31      	ldr	r3, [pc, #196]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a36      	ldr	r2, [pc, #216]	; (80037f8 <HAL_UARTEx_RxEventCallback+0x464>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d031      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003724:	4b2e      	ldr	r3, [pc, #184]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a34      	ldr	r2, [pc, #208]	; (80037fc <HAL_UARTEx_RxEventCallback+0x468>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d02c      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 800372e:	4b2c      	ldr	r3, [pc, #176]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a33      	ldr	r2, [pc, #204]	; (8003800 <HAL_UARTEx_RxEventCallback+0x46c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d027      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003738:	4b29      	ldr	r3, [pc, #164]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a31      	ldr	r2, [pc, #196]	; (8003804 <HAL_UARTEx_RxEventCallback+0x470>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d022      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003742:	4b27      	ldr	r3, [pc, #156]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a30      	ldr	r2, [pc, #192]	; (8003808 <HAL_UARTEx_RxEventCallback+0x474>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d01d      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 800374c:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a2e      	ldr	r2, [pc, #184]	; (800380c <HAL_UARTEx_RxEventCallback+0x478>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d018      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003756:	4b22      	ldr	r3, [pc, #136]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a2d      	ldr	r2, [pc, #180]	; (8003810 <HAL_UARTEx_RxEventCallback+0x47c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003760:	4b1f      	ldr	r3, [pc, #124]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a2b      	ldr	r2, [pc, #172]	; (8003814 <HAL_UARTEx_RxEventCallback+0x480>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00e      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 800376a:	4b1d      	ldr	r3, [pc, #116]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a2a      	ldr	r2, [pc, #168]	; (8003818 <HAL_UARTEx_RxEventCallback+0x484>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d009      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003774:	4b1a      	ldr	r3, [pc, #104]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a28      	ldr	r2, [pc, #160]	; (800381c <HAL_UARTEx_RxEventCallback+0x488>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 800377e:	4b18      	ldr	r3, [pc, #96]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a27      	ldr	r2, [pc, #156]	; (8003820 <HAL_UARTEx_RxEventCallback+0x48c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d108      	bne.n	800379a <HAL_UARTEx_RxEventCallback+0x406>
 8003788:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	4b14      	ldr	r3, [pc, #80]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0208 	bic.w	r2, r2, #8
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	e008      	b.n	80037ac <HAL_UARTEx_RxEventCallback+0x418>
 800379a:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0204 	bic.w	r2, r2, #4
 80037a8:	601a      	str	r2, [r3, #0]
}
 80037aa:	bf00      	nop
 80037ac:	bf00      	nop
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bdb0      	pop	{r4, r5, r7, pc}
 80037b4:	24000b18 	.word	0x24000b18
 80037b8:	24000b00 	.word	0x24000b00
 80037bc:	24000b04 	.word	0x24000b04
 80037c0:	24000b08 	.word	0x24000b08
 80037c4:	24000b0c 	.word	0x24000b0c
 80037c8:	58021000 	.word	0x58021000
 80037cc:	58020400 	.word	0x58020400
 80037d0:	0801525c 	.word	0x0801525c
 80037d4:	24001374 	.word	0x24001374
 80037d8:	0801526c 	.word	0x0801526c
 80037dc:	24000b2c 	.word	0x24000b2c
 80037e0:	2400165c 	.word	0x2400165c
 80037e4:	40020010 	.word	0x40020010
 80037e8:	40020028 	.word	0x40020028
 80037ec:	40020040 	.word	0x40020040
 80037f0:	40020058 	.word	0x40020058
 80037f4:	40020070 	.word	0x40020070
 80037f8:	40020088 	.word	0x40020088
 80037fc:	400200a0 	.word	0x400200a0
 8003800:	400200b8 	.word	0x400200b8
 8003804:	40020410 	.word	0x40020410
 8003808:	40020428 	.word	0x40020428
 800380c:	40020440 	.word	0x40020440
 8003810:	40020458 	.word	0x40020458
 8003814:	40020470 	.word	0x40020470
 8003818:	40020488 	.word	0x40020488
 800381c:	400204a0 	.word	0x400204a0
 8003820:	400204b8 	.word	0x400204b8
 8003824:	00000000 	.word	0x00000000

08003828 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]

	if (htim == &htim7) {	//

	}

	if (htim == &htim5) {	//
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4ac5      	ldr	r2, [pc, #788]	; (8003b48 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8003834:	4293      	cmp	r3, r2
 8003836:	f040 80cc 	bne.w	80039d2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
		encoderJ1.AMT21_Read();
 800383a:	48c4      	ldr	r0, [pc, #784]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800383c:	f7fc ff49 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8003840:	48c2      	ldr	r0, [pc, #776]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8003842:	f7fc ff75 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003846:	4603      	mov	r3, r0
 8003848:	461a      	mov	r2, r3
 800384a:	4bc1      	ldr	r3, [pc, #772]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800384c:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 800384e:	4bc0      	ldr	r3, [pc, #768]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d110      	bne.n	8003878 <HAL_TIM_PeriodElapsedCallback+0x50>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609;
 8003856:	48bd      	ldr	r0, [pc, #756]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8003858:	f7fc ffd0 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 800385c:	4603      	mov	r3, r0
 800385e:	ee07 3a90 	vmov	s15, r3
 8003862:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003866:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 8003b38 <HAL_TIM_PeriodElapsedCallback+0x310>
 800386a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800386e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003872:	4bb8      	ldr	r3, [pc, #736]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003874:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ2.AMT21_Read();
 8003878:	48b7      	ldr	r0, [pc, #732]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800387a:	f7fc ff2a 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 800387e:	48b6      	ldr	r0, [pc, #728]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003880:	f7fc ff56 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003884:	4603      	mov	r3, r0
 8003886:	461a      	mov	r2, r3
 8003888:	4bb4      	ldr	r3, [pc, #720]	; (8003b5c <HAL_TIM_PeriodElapsedCallback+0x334>)
 800388a:	701a      	strb	r2, [r3, #0]
		if (HALENCJ2OK == HAL_OK) {
 800388c:	4bb3      	ldr	r3, [pc, #716]	; (8003b5c <HAL_TIM_PeriodElapsedCallback+0x334>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d112      	bne.n	80038ba <HAL_TIM_PeriodElapsedCallback+0x92>
			encoderJ2.unwarp();
 8003894:	48b0      	ldr	r0, [pc, #704]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003896:	f7fc ffd3 	bl	8000840 <_ZN5AMT216unwarpEv>
			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609;
 800389a:	48af      	ldr	r0, [pc, #700]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800389c:	f7fd f82f 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 80038a0:	ee07 0a90 	vmov	s15, r0
 80038a4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80038a8:	ed9f 5ba3 	vldr	d5, [pc, #652]	; 8003b38 <HAL_TIM_PeriodElapsedCallback+0x310>
 80038ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80038b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038b4:	4baa      	ldr	r3, [pc, #680]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80038b6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ3.AMT21_Read();
 80038ba:	48aa      	ldr	r0, [pc, #680]	; (8003b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80038bc:	f7fc ff09 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 80038c0:	48a8      	ldr	r0, [pc, #672]	; (8003b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80038c2:	f7fc ff35 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80038c6:	4603      	mov	r3, r0
 80038c8:	461a      	mov	r2, r3
 80038ca:	4ba7      	ldr	r3, [pc, #668]	; (8003b68 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80038cc:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 80038ce:	4ba6      	ldr	r3, [pc, #664]	; (8003b68 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d110      	bne.n	80038f8 <HAL_TIM_PeriodElapsedCallback+0xd0>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609;
 80038d6:	48a3      	ldr	r0, [pc, #652]	; (8003b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80038d8:	f7fc ff90 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 80038dc:	4603      	mov	r3, r0
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80038e6:	ed9f 5b94 	vldr	d5, [pc, #592]	; 8003b38 <HAL_TIM_PeriodElapsedCallback+0x310>
 80038ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80038ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038f2:	4b9e      	ldr	r3, [pc, #632]	; (8003b6c <HAL_TIM_PeriodElapsedCallback+0x344>)
 80038f4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 80038f8:	489d      	ldr	r0, [pc, #628]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80038fa:	f7fc feea 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 80038fe:	489c      	ldr	r0, [pc, #624]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003900:	f7fc ff16 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003904:	4603      	mov	r3, r0
 8003906:	461a      	mov	r2, r3
 8003908:	4b9a      	ldr	r3, [pc, #616]	; (8003b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800390a:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 800390c:	4b99      	ldr	r3, [pc, #612]	; (8003b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d110      	bne.n	8003936 <HAL_TIM_PeriodElapsedCallback+0x10e>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / -2.609;
 8003914:	4896      	ldr	r0, [pc, #600]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003916:	f7fc ff71 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 800391a:	4603      	mov	r3, r0
 800391c:	ee07 3a90 	vmov	s15, r3
 8003920:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003924:	ed9f 5b86 	vldr	d5, [pc, #536]	; 8003b40 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003928:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800392c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003930:	4b91      	ldr	r3, [pc, #580]	; (8003b78 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003932:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}
		angle_chess = chessABIEncoder.getMRadAngle();
 8003936:	4891      	ldr	r0, [pc, #580]	; (8003b7c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003938:	f7fd f85c 	bl	80009f4 <_ZN10AS5047UABI12getMRadAngleEv>
 800393c:	eef0 7a40 	vmov.f32	s15, s0
 8003940:	4b8f      	ldr	r3, [pc, #572]	; (8003b80 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003942:	edc3 7a00 	vstr	s15, [r3]
		angle_chess_deg = chessABIEncoder.getDegAngle();
 8003946:	488d      	ldr	r0, [pc, #564]	; (8003b7c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003948:	f7fd f834 	bl	80009b4 <_ZN10AS5047UABI11getDegAngleEv>
 800394c:	eef0 7a40 	vmov.f32	s15, s0
 8003950:	4b8c      	ldr	r3, [pc, #560]	; (8003b84 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003952:	edc3 7a00 	vstr	s15, [r3]
//			stepperJ1.StepperSetFrequency(dq1);
//			stepperJ2.StepperSetFrequency(dq2*10.0);
//			stepperJ3.StepperSetFrequency(dq3);
//			stepperJ4.StepperSetFrequency(dq4);

		fcb_X.UpdateIVK(fcb_joint1.Encoder, 0.0, fcb_joint3.Encoder, 0.0, dx,
 8003956:	4b7f      	ldr	r3, [pc, #508]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003958:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800395c:	4b83      	ldr	r3, [pc, #524]	; (8003b6c <HAL_TIM_PeriodElapsedCallback+0x344>)
 800395e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8003962:	4b89      	ldr	r3, [pc, #548]	; (8003b88 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	b25b      	sxtb	r3, r3
 8003968:	ee06 3a90 	vmov	s13, r3
 800396c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003970:	4b86      	ldr	r3, [pc, #536]	; (8003b8c <HAL_TIM_PeriodElapsedCallback+0x364>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	b25b      	sxtb	r3, r3
 8003976:	ee06 3a10 	vmov	s12, r3
 800397a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800397e:	4b84      	ldr	r3, [pc, #528]	; (8003b90 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	b25b      	sxtb	r3, r3
 8003984:	ee05 3a90 	vmov	s11, r3
 8003988:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800398c:	eddf 3a81 	vldr	s7, [pc, #516]	; 8003b94 <HAL_TIM_PeriodElapsedCallback+0x36c>
 8003990:	eeb0 3a65 	vmov.f32	s6, s11
 8003994:	eef0 2a46 	vmov.f32	s5, s12
 8003998:	eeb0 2a66 	vmov.f32	s4, s13
 800399c:	eddf 1a7d 	vldr	s3, [pc, #500]	; 8003b94 <HAL_TIM_PeriodElapsedCallback+0x36c>
 80039a0:	eeb0 1a47 	vmov.f32	s2, s14
 80039a4:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8003b94 <HAL_TIM_PeriodElapsedCallback+0x36c>
 80039a8:	eeb0 0a67 	vmov.f32	s0, s15
 80039ac:	487a      	ldr	r0, [pc, #488]	; (8003b98 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80039ae:	f7fd f8df 	bl	8000b70 <_ZN10RobotJoint9UpdateIVKEffffffff>
				dy, dz, 0.0);

		stepperJ1.StepperOpenLoopSpeedM(fcb_X.w_q1);
 80039b2:	4b79      	ldr	r3, [pc, #484]	; (8003b98 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80039b4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80039b8:	eeb0 0a67 	vmov.f32	s0, s15
 80039bc:	4877      	ldr	r0, [pc, #476]	; (8003b9c <HAL_TIM_PeriodElapsedCallback+0x374>)
 80039be:	f7fe fd0f 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//			stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
		stepperJ3.StepperOpenLoopSpeedM(fcb_X.w_q3);
 80039c2:	4b75      	ldr	r3, [pc, #468]	; (8003b98 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80039c4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80039c8:	eeb0 0a67 	vmov.f32	s0, s15
 80039cc:	4874      	ldr	r0, [pc, #464]	; (8003ba0 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80039ce:	f7fe fd07 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//					stepperJ3.StepperOpenLoopSpeed(u_q3/num);
//					stepperJ4.StepperOpenLoopSpeed(u_q4/num);

	}

	if (htim == &htim16) {
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a73      	ldr	r2, [pc, #460]	; (8003ba4 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	f040 8114 	bne.w	8003c04 <HAL_TIM_PeriodElapsedCallback+0x3dc>
		encoderJ1.AMT21_Read();
 80039dc:	485b      	ldr	r0, [pc, #364]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 80039de:	f7fc fe78 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 80039e2:	485a      	ldr	r0, [pc, #360]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 80039e4:	f7fc fea4 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80039e8:	4603      	mov	r3, r0
 80039ea:	461a      	mov	r2, r3
 80039ec:	4b58      	ldr	r3, [pc, #352]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80039ee:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 80039f0:	4b57      	ldr	r3, [pc, #348]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d110      	bne.n	8003a1a <HAL_TIM_PeriodElapsedCallback+0x1f2>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609;
 80039f8:	4854      	ldr	r0, [pc, #336]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 80039fa:	f7fc feff 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 80039fe:	4603      	mov	r3, r0
 8003a00:	ee07 3a90 	vmov	s15, r3
 8003a04:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a08:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 8003b38 <HAL_TIM_PeriodElapsedCallback+0x310>
 8003a0c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a14:	4b4f      	ldr	r3, [pc, #316]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003a16:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ2.AMT21_Read();
 8003a1a:	484f      	ldr	r0, [pc, #316]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003a1c:	f7fc fe59 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8003a20:	484d      	ldr	r0, [pc, #308]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003a22:	f7fc fe85 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003a26:	4603      	mov	r3, r0
 8003a28:	461a      	mov	r2, r3
 8003a2a:	4b4c      	ldr	r3, [pc, #304]	; (8003b5c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003a2c:	701a      	strb	r2, [r3, #0]
		if (HALENCJ2OK == HAL_OK) {
 8003a2e:	4b4b      	ldr	r3, [pc, #300]	; (8003b5c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d112      	bne.n	8003a5c <HAL_TIM_PeriodElapsedCallback+0x234>
			encoderJ2.unwarp();
 8003a36:	4848      	ldr	r0, [pc, #288]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003a38:	f7fc ff02 	bl	8000840 <_ZN5AMT216unwarpEv>
			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609;
 8003a3c:	4846      	ldr	r0, [pc, #280]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003a3e:	f7fc ff5e 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 8003a42:	ee07 0a90 	vmov	s15, r0
 8003a46:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a4a:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8003b38 <HAL_TIM_PeriodElapsedCallback+0x310>
 8003a4e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a52:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a56:	4b42      	ldr	r3, [pc, #264]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003a58:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ3.AMT21_Read();
 8003a5c:	4841      	ldr	r0, [pc, #260]	; (8003b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003a5e:	f7fc fe38 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8003a62:	4840      	ldr	r0, [pc, #256]	; (8003b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003a64:	f7fc fe64 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	4b3e      	ldr	r3, [pc, #248]	; (8003b68 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003a6e:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8003a70:	4b3d      	ldr	r3, [pc, #244]	; (8003b68 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d110      	bne.n	8003a9a <HAL_TIM_PeriodElapsedCallback+0x272>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609;
 8003a78:	483a      	ldr	r0, [pc, #232]	; (8003b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003a7a:	f7fc febf 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	ee07 3a90 	vmov	s15, r3
 8003a84:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a88:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8003b38 <HAL_TIM_PeriodElapsedCallback+0x310>
 8003a8c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a90:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a94:	4b35      	ldr	r3, [pc, #212]	; (8003b6c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003a96:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 8003a9a:	4835      	ldr	r0, [pc, #212]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003a9c:	f7fc fe19 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8003aa0:	4833      	ldr	r0, [pc, #204]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003aa2:	f7fc fe45 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4b32      	ldr	r3, [pc, #200]	; (8003b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003aac:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 8003aae:	4b31      	ldr	r3, [pc, #196]	; (8003b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d110      	bne.n	8003ad8 <HAL_TIM_PeriodElapsedCallback+0x2b0>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / -2.609;
 8003ab6:	482e      	ldr	r0, [pc, #184]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003ab8:	f7fc fea0 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8003abc:	4603      	mov	r3, r0
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003ac6:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 8003b40 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003aca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003ace:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003ad2:	4b29      	ldr	r3, [pc, #164]	; (8003b78 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003ad4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}
		angle_chess = chessABIEncoder.getMRadAngle();
 8003ad8:	4828      	ldr	r0, [pc, #160]	; (8003b7c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003ada:	f7fc ff8b 	bl	80009f4 <_ZN10AS5047UABI12getMRadAngleEv>
 8003ade:	eef0 7a40 	vmov.f32	s15, s0
 8003ae2:	4b27      	ldr	r3, [pc, #156]	; (8003b80 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003ae4:	edc3 7a00 	vstr	s15, [r3]
		angle_chess_deg = chessABIEncoder.getDegAngle();
 8003ae8:	4824      	ldr	r0, [pc, #144]	; (8003b7c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003aea:	f7fc ff63 	bl	80009b4 <_ZN10AS5047UABI11getDegAngleEv>
 8003aee:	eef0 7a40 	vmov.f32	s15, s0
 8003af2:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003af4:	edc3 7a00 	vstr	s15, [r3]
//		current_angle = chessSPIEncoder.getRawRotation();
//		current_angle_map = chessSPIEncoder.read2angle(current_angle);
//		angle = current_angle_map - zero_position_map;
//		angle = chessSPIEncoder.normalize(angle);

		fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
 8003af8:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003afa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003afe:	eeb0 0a67 	vmov.f32	s0, s15
 8003b02:	4814      	ldr	r0, [pc, #80]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003b04:	f7fd fa82 	bl	800100c <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint1.kalman_pos = fcb_joint1.X11;
 8003b08:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003b0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b0e:	4a11      	ldr	r2, [pc, #68]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003b10:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint1.kalman_velo = fcb_joint1.X21;
 8003b14:	4b0f      	ldr	r3, [pc, #60]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003b16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b1a:	4a0e      	ldr	r2, [pc, #56]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003b1c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint2.KalmanFillter(fcb_joint2.Encoder);
 8003b20:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003b22:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003b26:	eeb0 0a67 	vmov.f32	s0, s15
 8003b2a:	480d      	ldr	r0, [pc, #52]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003b2c:	f7fd fa6e 	bl	800100c <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint2.kalman_pos = fcb_joint2.X11;
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003b32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b36:	e037      	b.n	8003ba8 <HAL_TIM_PeriodElapsedCallback+0x380>
 8003b38:	645a1cac 	.word	0x645a1cac
 8003b3c:	4004df3b 	.word	0x4004df3b
 8003b40:	645a1cac 	.word	0x645a1cac
 8003b44:	c004df3b 	.word	0xc004df3b
 8003b48:	24000ecc 	.word	0x24000ecc
 8003b4c:	24000450 	.word	0x24000450
 8003b50:	24000ad4 	.word	0x24000ad4
 8003b54:	24000560 	.word	0x24000560
 8003b58:	2400046c 	.word	0x2400046c
 8003b5c:	24000ad5 	.word	0x24000ad5
 8003b60:	24000644 	.word	0x24000644
 8003b64:	24000488 	.word	0x24000488
 8003b68:	24000ad6 	.word	0x24000ad6
 8003b6c:	24000728 	.word	0x24000728
 8003b70:	240004a4 	.word	0x240004a4
 8003b74:	24000ad7 	.word	0x24000ad7
 8003b78:	2400080c 	.word	0x2400080c
 8003b7c:	24000ad8 	.word	0x24000ad8
 8003b80:	24000ae8 	.word	0x24000ae8
 8003b84:	24000aec 	.word	0x24000aec
 8003b88:	24000afc 	.word	0x24000afc
 8003b8c:	24000afd 	.word	0x24000afd
 8003b90:	24000afe 	.word	0x24000afe
 8003b94:	00000000 	.word	0x00000000
 8003b98:	240009d4 	.word	0x240009d4
 8003b9c:	240004c0 	.word	0x240004c0
 8003ba0:	24000510 	.word	0x24000510
 8003ba4:	2400112c 	.word	0x2400112c
 8003ba8:	4ad9      	ldr	r2, [pc, #868]	; (8003f10 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003baa:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint2.kalman_velo = fcb_joint2.X21;
 8003bae:	4bd8      	ldr	r3, [pc, #864]	; (8003f10 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003bb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bb4:	4ad6      	ldr	r2, [pc, #856]	; (8003f10 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003bb6:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
 8003bba:	4bd6      	ldr	r3, [pc, #856]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003bbc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc4:	48d3      	ldr	r0, [pc, #844]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003bc6:	f7fd fa21 	bl	800100c <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint3.kalman_pos = fcb_joint3.X11;
 8003bca:	4bd2      	ldr	r3, [pc, #840]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003bcc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bd0:	4ad0      	ldr	r2, [pc, #832]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003bd2:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint3.kalman_velo = fcb_joint3.X21;
 8003bd6:	4bcf      	ldr	r3, [pc, #828]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003bd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bdc:	4acd      	ldr	r2, [pc, #820]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003bde:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		if (State_FIN) {
 8003be2:	4bcd      	ldr	r3, [pc, #820]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00b      	beq.n	8003c04 <HAL_TIM_PeriodElapsedCallback+0x3dc>
			Balloon++;
 8003bec:	4bcb      	ldr	r3, [pc, #812]	; (8003f1c <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	4aca      	ldr	r2, [pc, #808]	; (8003f1c <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8003bf4:	6013      	str	r3, [r2, #0]
			Update_State_Machine();
 8003bf6:	f7fe ffbb 	bl	8002b70 <_Z20Update_State_Machinev>
			Update_State_Machine();
 8003bfa:	f7fe ffb9 	bl	8002b70 <_Z20Update_State_Machinev>
			State_FIN = false;
 8003bfe:	4bc6      	ldr	r3, [pc, #792]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	701a      	strb	r2, [r3, #0]
		}

	}

	if (htim == &htim14) {
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4ac6      	ldr	r2, [pc, #792]	; (8003f20 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	f040 8523 	bne.w	8004654 <HAL_TIM_PeriodElapsedCallback+0xe2c>
//			fcb_joint4.Encoder = encoderJ4.getAngPos180() / -2.609 ;
//		}
		// #############################################################################

		// ######################## Setpoint ##########################################
		float t2 = t * t;
 8003c0e:	4bc5      	ldr	r3, [pc, #788]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003c10:	ed93 7a00 	vldr	s14, [r3]
 8003c14:	4bc3      	ldr	r3, [pc, #780]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003c16:	edd3 7a00 	vldr	s15, [r3]
 8003c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c1e:	edc7 7a07 	vstr	s15, [r7, #28]
		float t3 = t * t * t;
 8003c22:	4bc0      	ldr	r3, [pc, #768]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003c24:	ed93 7a00 	vldr	s14, [r3]
 8003c28:	4bbe      	ldr	r3, [pc, #760]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003c2a:	edd3 7a00 	vldr	s15, [r3]
 8003c2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c32:	4bbc      	ldr	r3, [pc, #752]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003c34:	edd3 7a00 	vldr	s15, [r3]
 8003c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3c:	edc7 7a06 	vstr	s15, [r7, #24]
		float t4 = t * t * t * t;
 8003c40:	4bb8      	ldr	r3, [pc, #736]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003c42:	ed93 7a00 	vldr	s14, [r3]
 8003c46:	4bb7      	ldr	r3, [pc, #732]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003c48:	edd3 7a00 	vldr	s15, [r3]
 8003c4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c50:	4bb4      	ldr	r3, [pc, #720]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003c52:	edd3 7a00 	vldr	s15, [r3]
 8003c56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c5a:	4bb2      	ldr	r3, [pc, #712]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003c5c:	edd3 7a00 	vldr	s15, [r3]
 8003c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c64:	edc7 7a05 	vstr	s15, [r7, #20]
		float t5 = t * t * t * t * t;
 8003c68:	4bae      	ldr	r3, [pc, #696]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003c6a:	ed93 7a00 	vldr	s14, [r3]
 8003c6e:	4bad      	ldr	r3, [pc, #692]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003c70:	edd3 7a00 	vldr	s15, [r3]
 8003c74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c78:	4baa      	ldr	r3, [pc, #680]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003c7a:	edd3 7a00 	vldr	s15, [r3]
 8003c7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c82:	4ba8      	ldr	r3, [pc, #672]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003c84:	edd3 7a00 	vldr	s15, [r3]
 8003c88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c8c:	4ba5      	ldr	r3, [pc, #660]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003c8e:	edd3 7a00 	vldr	s15, [r3]
 8003c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c96:	edc7 7a04 	vstr	s15, [r7, #16]
////	fcb_joint1.Goal_Position = fcb_X.q1;
//		fcb_joint3.Goal_Velocity = fcb_X.w_q3;
//		fcb_joint4.Goal_Velocity = fcb_X.w_q4;
////	fcb_joint3.Goal_Position = fcb_X.q3;

		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0 * fcb_joint1.C2 * t)
 8003c9a:	4ba3      	ldr	r3, [pc, #652]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c9c:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003ca0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003ca4:	4ba0      	ldr	r3, [pc, #640]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003ca6:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003caa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cae:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003cb2:	4b9c      	ldr	r3, [pc, #624]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003cb4:	edd3 7a00 	vldr	s15, [r3]
 8003cb8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cbc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003cc0:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint1.C3 * t2) + (4.0 * fcb_joint1.C4 * t3)
 8003cc4:	4b98      	ldr	r3, [pc, #608]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003cc6:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003cca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cce:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003cd2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003cd6:	edd7 7a07 	vldr	s15, [r7, #28]
 8003cda:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cde:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ce2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003ce6:	4b90      	ldr	r3, [pc, #576]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003ce8:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003cec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cf0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003cf4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003cf8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003cfc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d00:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003d04:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint1.C5 * t4);
 8003d08:	4b87      	ldr	r3, [pc, #540]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003d0a:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003d0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d12:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003d16:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003d1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d22:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003d26:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003d2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0 * fcb_joint1.C2 * t)
 8003d2e:	4b7e      	ldr	r3, [pc, #504]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003d30:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1 * t)
 8003d34:	4b7c      	ldr	r3, [pc, #496]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003d36:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003d3a:	4b7b      	ldr	r3, [pc, #492]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003d3c:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003d40:	4b78      	ldr	r3, [pc, #480]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003d42:	edd3 7a00 	vldr	s15, [r3]
 8003d46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d4a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.C2 * t2) + (fcb_joint1.C3 * t3)
 8003d4e:	4b76      	ldr	r3, [pc, #472]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003d50:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003d54:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d60:	4b71      	ldr	r3, [pc, #452]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003d62:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003d66:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.C4 * t4) + (fcb_joint1.C5 * t5));
 8003d72:	4b6d      	ldr	r3, [pc, #436]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003d74:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003d78:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d84:	4b68      	ldr	r3, [pc, #416]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003d86:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003d8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d92:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1 * t)
 8003d96:	4b64      	ldr	r3, [pc, #400]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003d98:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint2.Goal_Velocity = fcb_joint2.C1 + (2.0 * fcb_joint2.C2 * t)
 8003d9c:	4b5c      	ldr	r3, [pc, #368]	; (8003f10 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003d9e:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003da2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003da6:	4b5a      	ldr	r3, [pc, #360]	; (8003f10 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003da8:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003dac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003db0:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003db4:	4b5b      	ldr	r3, [pc, #364]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003db6:	edd3 7a00 	vldr	s15, [r3]
 8003dba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dbe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003dc2:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint2.C3 * t2) + (4.0 * fcb_joint2.C4 * t3)
 8003dc6:	4b52      	ldr	r3, [pc, #328]	; (8003f10 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003dc8:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003dcc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dd0:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003dd4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003dd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ddc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003de0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003de4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003de8:	4b49      	ldr	r3, [pc, #292]	; (8003f10 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003dea:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003dee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003df2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003df6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003dfa:	edd7 7a06 	vldr	s15, [r7, #24]
 8003dfe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e02:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003e06:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint2.C5 * t4);
 8003e0a:	4b41      	ldr	r3, [pc, #260]	; (8003f10 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003e0c:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003e10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e14:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003e18:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003e1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e24:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003e28:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e2c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint2.Goal_Velocity = fcb_joint2.C1 + (2.0 * fcb_joint2.C2 * t)
 8003e30:	4b37      	ldr	r3, [pc, #220]	; (8003f10 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003e32:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint2.Goal_Position = (fcb_joint2.C0 + (fcb_joint2.C1 * t)
 8003e36:	4b36      	ldr	r3, [pc, #216]	; (8003f10 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003e38:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003e3c:	4b34      	ldr	r3, [pc, #208]	; (8003f10 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003e3e:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003e42:	4b38      	ldr	r3, [pc, #224]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003e44:	edd3 7a00 	vldr	s15, [r3]
 8003e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e4c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.C2 * t2) + (fcb_joint2.C3 * t3)
 8003e50:	4b2f      	ldr	r3, [pc, #188]	; (8003f10 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003e52:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003e56:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e62:	4b2b      	ldr	r3, [pc, #172]	; (8003f10 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003e64:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003e68:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e70:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.C4 * t4) + (fcb_joint2.C5 * t5));
 8003e74:	4b26      	ldr	r3, [pc, #152]	; (8003f10 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003e76:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003e7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e86:	4b22      	ldr	r3, [pc, #136]	; (8003f10 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003e88:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003e8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e94:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint2.Goal_Position = (fcb_joint2.C0 + (fcb_joint2.C1 * t)
 8003e98:	4b1d      	ldr	r3, [pc, #116]	; (8003f10 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003e9a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0 * fcb_joint3.C2 * t)
 8003e9e:	4b1d      	ldr	r3, [pc, #116]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003ea0:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003ea4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003ea8:	4b1a      	ldr	r3, [pc, #104]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003eaa:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003eae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003eb2:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003eb6:	4b1b      	ldr	r3, [pc, #108]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003eb8:	edd3 7a00 	vldr	s15, [r3]
 8003ebc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ec0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ec4:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint3.C3 * t2) + (4.0 * fcb_joint3.C4 * t3)
 8003ec8:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003eca:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003ece:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ed2:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003ed6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003eda:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ede:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ee2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ee6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003eea:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003eec:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003ef0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ef4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003ef8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003efc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f04:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003f08:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003f0c:	e00e      	b.n	8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>
 8003f0e:	bf00      	nop
 8003f10:	24000644 	.word	0x24000644
 8003f14:	24000728 	.word	0x24000728
 8003f18:	24000af0 	.word	0x24000af0
 8003f1c:	24000bf4 	.word	0x24000bf4
 8003f20:	24001094 	.word	0x24001094
 8003f24:	24000bf8 	.word	0x24000bf8
 8003f28:	24000560 	.word	0x24000560
				+ (5.0 * fcb_joint3.C5 * t4);
 8003f2c:	4bca      	ldr	r3, [pc, #808]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8003f2e:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003f32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f36:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003f3a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003f3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f46:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003f4a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003f4e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0 * fcb_joint3.C2 * t)
 8003f52:	4bc1      	ldr	r3, [pc, #772]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8003f54:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1 * t)
 8003f58:	4bbf      	ldr	r3, [pc, #764]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8003f5a:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003f5e:	4bbe      	ldr	r3, [pc, #760]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8003f60:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003f64:	4bbd      	ldr	r3, [pc, #756]	; (800425c <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003f66:	edd3 7a00 	vldr	s15, [r3]
 8003f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f6e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.C2 * t2) + (fcb_joint3.C3 * t3)
 8003f72:	4bb9      	ldr	r3, [pc, #740]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8003f74:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003f78:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f84:	4bb4      	ldr	r3, [pc, #720]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8003f86:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003f8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f92:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.C4 * t4) + (fcb_joint3.C5 * t5));
 8003f96:	4bb0      	ldr	r3, [pc, #704]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8003f98:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003f9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003fa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fa4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fa8:	4bab      	ldr	r3, [pc, #684]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8003faa:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003fae:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1 * t)
 8003fba:	4ba7      	ldr	r3, [pc, #668]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8003fbc:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint4.Goal_Velocity = fcb_joint4.C1 + (2.0 * fcb_joint4.C2 * t)
 8003fc0:	4ba7      	ldr	r3, [pc, #668]	; (8004260 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8003fc2:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003fc6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003fca:	4ba5      	ldr	r3, [pc, #660]	; (8004260 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8003fcc:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003fd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fd4:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003fd8:	4ba0      	ldr	r3, [pc, #640]	; (800425c <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003fda:	edd3 7a00 	vldr	s15, [r3]
 8003fde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fe2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003fe6:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint4.C3 * t2) + (4.0 * fcb_joint4.C4 * t3)
 8003fea:	4b9d      	ldr	r3, [pc, #628]	; (8004260 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8003fec:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003ff0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ff4:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003ff8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003ffc:	edd7 7a07 	vldr	s15, [r7, #28]
 8004000:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004004:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004008:	ee36 6b07 	vadd.f64	d6, d6, d7
 800400c:	4b94      	ldr	r3, [pc, #592]	; (8004260 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 800400e:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8004012:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004016:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800401a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800401e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004022:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004026:	ee25 7b07 	vmul.f64	d7, d5, d7
 800402a:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint4.C5 * t4);
 800402e:	4b8c      	ldr	r3, [pc, #560]	; (8004260 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8004030:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8004034:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004038:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 800403c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004040:	edd7 7a05 	vldr	s15, [r7, #20]
 8004044:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004048:	ee25 7b07 	vmul.f64	d7, d5, d7
 800404c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004050:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint4.Goal_Velocity = fcb_joint4.C1 + (2.0 * fcb_joint4.C2 * t)
 8004054:	4b82      	ldr	r3, [pc, #520]	; (8004260 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8004056:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Position = (fcb_joint4.C0 + (fcb_joint4.C1 * t)
 800405a:	4b81      	ldr	r3, [pc, #516]	; (8004260 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 800405c:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8004060:	4b7f      	ldr	r3, [pc, #508]	; (8004260 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8004062:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8004066:	4b7d      	ldr	r3, [pc, #500]	; (800425c <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8004068:	edd3 7a00 	vldr	s15, [r3]
 800406c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004070:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint4.C2 * t2) + (fcb_joint4.C3 * t3)
 8004074:	4b7a      	ldr	r3, [pc, #488]	; (8004260 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8004076:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 800407a:	edd7 7a07 	vldr	s15, [r7, #28]
 800407e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004082:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004086:	4b76      	ldr	r3, [pc, #472]	; (8004260 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8004088:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 800408c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004090:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004094:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint4.C4 * t4) + (fcb_joint4.C5 * t5));
 8004098:	4b71      	ldr	r3, [pc, #452]	; (8004260 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 800409a:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 800409e:	edd7 7a05 	vldr	s15, [r7, #20]
 80040a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040aa:	4b6d      	ldr	r3, [pc, #436]	; (8004260 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 80040ac:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 80040b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80040b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040b8:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint4.Goal_Position = (fcb_joint4.C0 + (fcb_joint4.C1 * t)
 80040bc:	4b68      	ldr	r3, [pc, #416]	; (8004260 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 80040be:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		//		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
		//		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
		//		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
		//		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;

		fcb_joint1.Kp_p = 0.4;
 80040c2:	4b68      	ldr	r3, [pc, #416]	; (8004264 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 80040c4:	4a68      	ldr	r2, [pc, #416]	; (8004268 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 80040c6:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint1.Ki_p = 0.0;
 80040c8:	4b66      	ldr	r3, [pc, #408]	; (8004264 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint1.Kd_p = 0.0;
 80040d0:	4b64      	ldr	r3, [pc, #400]	; (8004264 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint2.Kp_p = 0.03;
 80040d8:	4b64      	ldr	r3, [pc, #400]	; (800426c <HAL_TIM_PeriodElapsedCallback+0xa44>)
 80040da:	4a65      	ldr	r2, [pc, #404]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 80040dc:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint2.Ki_p = 0.0;
 80040de:	4b63      	ldr	r3, [pc, #396]	; (800426c <HAL_TIM_PeriodElapsedCallback+0xa44>)
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint2.Kd_p = 0.0;
 80040e6:	4b61      	ldr	r3, [pc, #388]	; (800426c <HAL_TIM_PeriodElapsedCallback+0xa44>)
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint3.Kp_p = 0.15;
 80040ee:	4b5a      	ldr	r3, [pc, #360]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 80040f0:	4a60      	ldr	r2, [pc, #384]	; (8004274 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 80040f2:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint3.Ki_p = 0.0;
 80040f4:	4b58      	ldr	r3, [pc, #352]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint3.Kd_p = 0.0;
 80040fc:	4b56      	ldr	r3, [pc, #344]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	669a      	str	r2, [r3, #104]	; 0x68
//		fcb_joint1.Kd_p = 0.0;
//		fcb_joint3.Kp_p = 0.0;
//		fcb_joint3.Ki_p = 0.0;
//		fcb_joint3.Kd_p = 0.0;

		fcb_joint1.Kp_v = 0.0; // 3.2
 8004104:	4b57      	ldr	r3, [pc, #348]	; (8004264 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint1.Ki_v = 0.0;
 800410c:	4b55      	ldr	r3, [pc, #340]	; (8004264 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint1.Kd_v = 0.0;
 8004114:	4b53      	ldr	r3, [pc, #332]	; (8004264 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint2.Kp_v = 0.0; // 3.2
 800411c:	4b53      	ldr	r3, [pc, #332]	; (800426c <HAL_TIM_PeriodElapsedCallback+0xa44>)
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint2.Ki_v = 0.0;
 8004124:	4b51      	ldr	r3, [pc, #324]	; (800426c <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint2.Kd_v = 0.0;
 800412c:	4b4f      	ldr	r3, [pc, #316]	; (800426c <HAL_TIM_PeriodElapsedCallback+0xa44>)
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint3.Kp_v = 0.0; // 3.2
 8004134:	4b48      	ldr	r3, [pc, #288]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint3.Ki_v = 0.0;
 800413c:	4b46      	ldr	r3, [pc, #280]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint3.Kd_v = 0.0;
 8004144:	4b44      	ldr	r3, [pc, #272]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.kalman_pos;
 800414c:	4b45      	ldr	r3, [pc, #276]	; (8004264 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 800414e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8004152:	4b44      	ldr	r3, [pc, #272]	; (8004264 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8004154:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8004158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800415c:	4b41      	ldr	r3, [pc, #260]	; (8004264 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 800415e:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.kalman_pos;
 8004162:	4b3d      	ldr	r3, [pc, #244]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8004164:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8004168:	4b3b      	ldr	r3, [pc, #236]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 800416a:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800416e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004172:	4b39      	ldr	r3, [pc, #228]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8004174:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint1.Error_v = fcb_joint1.Goal_Velocity - fcb_joint1.kalman_velo;
 8004178:	4b3a      	ldr	r3, [pc, #232]	; (8004264 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 800417a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800417e:	4b39      	ldr	r3, [pc, #228]	; (8004264 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8004180:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8004184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004188:	4b36      	ldr	r3, [pc, #216]	; (8004264 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 800418a:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		fcb_joint3.Error_v = fcb_joint3.Goal_Velocity - fcb_joint3.kalman_velo;
 800418e:	4b32      	ldr	r3, [pc, #200]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8004190:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8004194:	4b30      	ldr	r3, [pc, #192]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8004196:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800419a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800419e:	4b2e      	ldr	r3, [pc, #184]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 80041a0:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

		fcb_joint2.Error_p = fcb_joint2.Goal_Position - fcb_joint2.kalman_pos;
 80041a4:	4b31      	ldr	r3, [pc, #196]	; (800426c <HAL_TIM_PeriodElapsedCallback+0xa44>)
 80041a6:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80041aa:	4b30      	ldr	r3, [pc, #192]	; (800426c <HAL_TIM_PeriodElapsedCallback+0xa44>)
 80041ac:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 80041b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041b4:	4b2d      	ldr	r3, [pc, #180]	; (800426c <HAL_TIM_PeriodElapsedCallback+0xa44>)
 80041b6:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint2.Error_v = fcb_joint2.Goal_Velocity - fcb_joint2.kalman_velo;
 80041ba:	4b2c      	ldr	r3, [pc, #176]	; (800426c <HAL_TIM_PeriodElapsedCallback+0xa44>)
 80041bc:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80041c0:	4b2a      	ldr	r3, [pc, #168]	; (800426c <HAL_TIM_PeriodElapsedCallback+0xa44>)
 80041c2:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 80041c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041ca:	4b28      	ldr	r3, [pc, #160]	; (800426c <HAL_TIM_PeriodElapsedCallback+0xa44>)
 80041cc:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 80041d0:	4b24      	ldr	r3, [pc, #144]	; (8004264 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 80041d2:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80041d6:	4b23      	ldr	r3, [pc, #140]	; (8004264 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 80041d8:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80041dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041e0:	4b20      	ldr	r3, [pc, #128]	; (8004264 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 80041e2:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 80041e6:	4b1c      	ldr	r3, [pc, #112]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 80041e8:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80041ec:	4b1a      	ldr	r3, [pc, #104]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 80041ee:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80041f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041f6:	4b18      	ldr	r3, [pc, #96]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 80041f8:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint1.Sum_Error_v += fcb_joint1.Error_v;
 80041fc:	4b19      	ldr	r3, [pc, #100]	; (8004264 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 80041fe:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8004202:	4b18      	ldr	r3, [pc, #96]	; (8004264 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8004204:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8004208:	ee77 7a27 	vadd.f32	s15, s14, s15
 800420c:	4b15      	ldr	r3, [pc, #84]	; (8004264 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 800420e:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		fcb_joint3.Sum_Error_v += fcb_joint3.Error_v;
 8004212:	4b11      	ldr	r3, [pc, #68]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8004214:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8004218:	4b0f      	ldr	r3, [pc, #60]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 800421a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800421e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004222:	4b0d      	ldr	r3, [pc, #52]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8004224:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		fcb_joint2.Sum_Error_p += fcb_joint2.Error_p;
 8004228:	4b10      	ldr	r3, [pc, #64]	; (800426c <HAL_TIM_PeriodElapsedCallback+0xa44>)
 800422a:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800422e:	4b0f      	ldr	r3, [pc, #60]	; (800426c <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8004230:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8004234:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004238:	4b0c      	ldr	r3, [pc, #48]	; (800426c <HAL_TIM_PeriodElapsedCallback+0xa44>)
 800423a:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint2.Sum_Error_v += fcb_joint2.Error_v;
 800423e:	4b0b      	ldr	r3, [pc, #44]	; (800426c <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8004240:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8004244:	4b09      	ldr	r3, [pc, #36]	; (800426c <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8004246:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800424a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800424e:	4b07      	ldr	r3, [pc, #28]	; (800426c <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8004250:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
 8004254:	e010      	b.n	8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>
 8004256:	bf00      	nop
 8004258:	24000728 	.word	0x24000728
 800425c:	24000bf8 	.word	0x24000bf8
 8004260:	2400080c 	.word	0x2400080c
 8004264:	24000560 	.word	0x24000560
 8004268:	3ecccccd 	.word	0x3ecccccd
 800426c:	24000644 	.word	0x24000644
 8004270:	3cf5c28f 	.word	0x3cf5c28f
 8004274:	3e19999a 	.word	0x3e19999a

		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity
 8004278:	4b83      	ldr	r3, [pc, #524]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800427a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint1.Kp_p * fcb_joint1.Error_p)
 800427e:	4b82      	ldr	r3, [pc, #520]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 8004280:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8004284:	4b80      	ldr	r3, [pc, #512]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 8004286:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800428a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800428e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p)
 8004292:	4b7d      	ldr	r3, [pc, #500]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 8004294:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8004298:	4b7b      	ldr	r3, [pc, #492]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800429a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800429e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042a2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p))
 80042a6:	4b78      	ldr	r3, [pc, #480]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80042a8:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80042ac:	4b76      	ldr	r3, [pc, #472]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80042ae:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 80042b2:	4b75      	ldr	r3, [pc, #468]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80042b4:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80042b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80042bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042c0:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Kp_v * fcb_joint1.Error_v)
 80042c4:	4b70      	ldr	r3, [pc, #448]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80042c6:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 80042ca:	4b6f      	ldr	r3, [pc, #444]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80042cc:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80042d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042d4:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v)
 80042d8:	4b6b      	ldr	r3, [pc, #428]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80042da:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 80042de:	4b6a      	ldr	r3, [pc, #424]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80042e0:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80042e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042e8:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Kd_v * (fcb_joint1.Error_v - fcb_joint1.Old_v));
 80042ec:	4b66      	ldr	r3, [pc, #408]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80042ee:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 80042f2:	4b65      	ldr	r3, [pc, #404]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80042f4:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 80042f8:	4b63      	ldr	r3, [pc, #396]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80042fa:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80042fe:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004302:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004306:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity
 800430a:	4b5f      	ldr	r3, [pc, #380]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800430c:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		fcb_joint2.Output_Joint_W = (fcb_joint2.Goal_Velocity)
 8004310:	4b5e      	ldr	r3, [pc, #376]	; (800448c <HAL_TIM_PeriodElapsedCallback+0xc64>)
 8004312:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint2.Kp_p * fcb_joint2.Error_p)
 8004316:	4b5d      	ldr	r3, [pc, #372]	; (800448c <HAL_TIM_PeriodElapsedCallback+0xc64>)
 8004318:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 800431c:	4b5b      	ldr	r3, [pc, #364]	; (800448c <HAL_TIM_PeriodElapsedCallback+0xc64>)
 800431e:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8004322:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004326:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Ki_p * fcb_joint2.Sum_Error_p)
 800432a:	4b58      	ldr	r3, [pc, #352]	; (800448c <HAL_TIM_PeriodElapsedCallback+0xc64>)
 800432c:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8004330:	4b56      	ldr	r3, [pc, #344]	; (800448c <HAL_TIM_PeriodElapsedCallback+0xc64>)
 8004332:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8004336:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800433a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Kd_p * (fcb_joint2.Error_p - fcb_joint2.Old_p))
 800433e:	4b53      	ldr	r3, [pc, #332]	; (800448c <HAL_TIM_PeriodElapsedCallback+0xc64>)
 8004340:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8004344:	4b51      	ldr	r3, [pc, #324]	; (800448c <HAL_TIM_PeriodElapsedCallback+0xc64>)
 8004346:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 800434a:	4b50      	ldr	r3, [pc, #320]	; (800448c <HAL_TIM_PeriodElapsedCallback+0xc64>)
 800434c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8004350:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004358:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Kp_v * fcb_joint2.Error_v)
 800435c:	4b4b      	ldr	r3, [pc, #300]	; (800448c <HAL_TIM_PeriodElapsedCallback+0xc64>)
 800435e:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8004362:	4b4a      	ldr	r3, [pc, #296]	; (800448c <HAL_TIM_PeriodElapsedCallback+0xc64>)
 8004364:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800436c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Ki_v * fcb_joint2.Sum_Error_v)
 8004370:	4b46      	ldr	r3, [pc, #280]	; (800448c <HAL_TIM_PeriodElapsedCallback+0xc64>)
 8004372:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8004376:	4b45      	ldr	r3, [pc, #276]	; (800448c <HAL_TIM_PeriodElapsedCallback+0xc64>)
 8004378:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800437c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004380:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Kd_v * (fcb_joint2.Error_v - fcb_joint2.Old_v));
 8004384:	4b41      	ldr	r3, [pc, #260]	; (800448c <HAL_TIM_PeriodElapsedCallback+0xc64>)
 8004386:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 800438a:	4b40      	ldr	r3, [pc, #256]	; (800448c <HAL_TIM_PeriodElapsedCallback+0xc64>)
 800438c:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8004390:	4b3e      	ldr	r3, [pc, #248]	; (800448c <HAL_TIM_PeriodElapsedCallback+0xc64>)
 8004392:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004396:	ee76 7a67 	vsub.f32	s15, s12, s15
 800439a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800439e:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint2.Output_Joint_W = (fcb_joint2.Goal_Velocity)
 80043a2:	4b3a      	ldr	r3, [pc, #232]	; (800448c <HAL_TIM_PeriodElapsedCallback+0xc64>)
 80043a4:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity)
 80043a8:	4b39      	ldr	r3, [pc, #228]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 80043aa:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint3.Kp_p * fcb_joint3.Error_p)
 80043ae:	4b38      	ldr	r3, [pc, #224]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 80043b0:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 80043b4:	4b36      	ldr	r3, [pc, #216]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 80043b6:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80043ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043be:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p)
 80043c2:	4b33      	ldr	r3, [pc, #204]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 80043c4:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 80043c8:	4b31      	ldr	r3, [pc, #196]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 80043ca:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80043ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043d2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p))
 80043d6:	4b2e      	ldr	r3, [pc, #184]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 80043d8:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80043dc:	4b2c      	ldr	r3, [pc, #176]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 80043de:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 80043e2:	4b2b      	ldr	r3, [pc, #172]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 80043e4:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80043e8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80043ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043f0:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Kp_v * fcb_joint3.Error_v)
 80043f4:	4b26      	ldr	r3, [pc, #152]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 80043f6:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 80043fa:	4b25      	ldr	r3, [pc, #148]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 80043fc:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004400:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004404:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v)
 8004408:	4b21      	ldr	r3, [pc, #132]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800440a:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 800440e:	4b20      	ldr	r3, [pc, #128]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 8004410:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8004414:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004418:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Kd_v * (fcb_joint3.Error_v - fcb_joint3.Old_v));
 800441c:	4b1c      	ldr	r3, [pc, #112]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800441e:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8004422:	4b1b      	ldr	r3, [pc, #108]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 8004424:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8004428:	4b19      	ldr	r3, [pc, #100]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800442a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800442e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004432:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004436:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity)
 800443a:	4b15      	ldr	r3, [pc, #84]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800443c:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		if (joint13_on) {
 8004440:	4b14      	ldr	r3, [pc, #80]	; (8004494 <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d032      	beq.n	80044b0 <HAL_TIM_PeriodElapsedCallback+0xc88>
			stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Output_Joint_W);
 800444a:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800444c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8004450:	eeb0 0a67 	vmov.f32	s0, s15
 8004454:	4810      	ldr	r0, [pc, #64]	; (8004498 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 8004456:	f7fd ffc3 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ2.StepperOpenLoopSpeedM(0.0);
 800445a:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80044ac <HAL_TIM_PeriodElapsedCallback+0xc84>
 800445e:	480f      	ldr	r0, [pc, #60]	; (800449c <HAL_TIM_PeriodElapsedCallback+0xc74>)
 8004460:	f7fd ffbe 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ3.StepperOpenLoopSpeedM(fcb_joint3.Output_Joint_W);
 8004464:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 8004466:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800446a:	eeb0 0a67 	vmov.f32	s0, s15
 800446e:	480c      	ldr	r0, [pc, #48]	; (80044a0 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 8004470:	f7fd ffb6 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ4.StepperOpenLoopSpeedM(fcb_joint4.Goal_Velocity);
 8004474:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 8004476:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800447a:	eeb0 0a67 	vmov.f32	s0, s15
 800447e:	480a      	ldr	r0, [pc, #40]	; (80044a8 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8004480:	f7fd ffae 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
 8004484:	e02b      	b.n	80044de <HAL_TIM_PeriodElapsedCallback+0xcb6>
 8004486:	bf00      	nop
 8004488:	24000560 	.word	0x24000560
 800448c:	24000644 	.word	0x24000644
 8004490:	24000728 	.word	0x24000728
 8004494:	24000b46 	.word	0x24000b46
 8004498:	240004c0 	.word	0x240004c0
 800449c:	240004e8 	.word	0x240004e8
 80044a0:	24000510 	.word	0x24000510
 80044a4:	2400080c 	.word	0x2400080c
 80044a8:	24000538 	.word	0x24000538
 80044ac:	00000000 	.word	0x00000000
		} else {
			stepperJ1.StepperOpenLoopSpeedM(0.0);
 80044b0:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 80044ac <HAL_TIM_PeriodElapsedCallback+0xc84>
 80044b4:	48b3      	ldr	r0, [pc, #716]	; (8004784 <HAL_TIM_PeriodElapsedCallback+0xf5c>)
 80044b6:	f7fd ff93 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ3.StepperOpenLoopSpeedM(0.0);
 80044ba:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8004788 <HAL_TIM_PeriodElapsedCallback+0xf60>
 80044be:	48b3      	ldr	r0, [pc, #716]	; (800478c <HAL_TIM_PeriodElapsedCallback+0xf64>)
 80044c0:	f7fd ff8e 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
 80044c4:	4bb2      	ldr	r3, [pc, #712]	; (8004790 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 80044c6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80044ca:	eeb0 0a67 	vmov.f32	s0, s15
 80044ce:	48b1      	ldr	r0, [pc, #708]	; (8004794 <HAL_TIM_PeriodElapsedCallback+0xf6c>)
 80044d0:	f7fd ff86 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ4.StepperOpenLoopSpeedM(0.0);
 80044d4:	ed9f 0aac 	vldr	s0, [pc, #688]	; 8004788 <HAL_TIM_PeriodElapsedCallback+0xf60>
 80044d8:	48af      	ldr	r0, [pc, #700]	; (8004798 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 80044da:	f7fd ff81 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//		stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Goal_Velocity);
//		stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
//		stepperJ3.StepperOpenLoopSpeedM(0);


		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 80044de:	4baf      	ldr	r3, [pc, #700]	; (800479c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 80044e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044e2:	4aae      	ldr	r2, [pc, #696]	; (800479c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 80044e4:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint2.Old_Error_p = fcb_joint2.Error_p;
 80044e6:	4baa      	ldr	r3, [pc, #680]	; (8004790 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 80044e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ea:	4aa9      	ldr	r2, [pc, #676]	; (8004790 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 80044ec:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 80044ee:	4bac      	ldr	r3, [pc, #688]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 80044f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044f2:	4aab      	ldr	r2, [pc, #684]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 80044f4:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint1.Old_Error_v = fcb_joint1.Error_v;
 80044f6:	4ba9      	ldr	r3, [pc, #676]	; (800479c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 80044f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044fc:	4aa7      	ldr	r2, [pc, #668]	; (800479c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 80044fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint2.Old_Error_v = fcb_joint2.Error_v;
 8004502:	4ba3      	ldr	r3, [pc, #652]	; (8004790 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 8004504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004508:	4aa1      	ldr	r2, [pc, #644]	; (8004790 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800450a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint3.Old_Error_v = fcb_joint3.Error_v;
 800450e:	4ba4      	ldr	r3, [pc, #656]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 8004510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004514:	4aa2      	ldr	r2, [pc, #648]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 8004516:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

		fcb_joint1.Old_p = fcb_joint1.kalman_pos;
 800451a:	4ba0      	ldr	r3, [pc, #640]	; (800479c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 800451c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004520:	4a9e      	ldr	r2, [pc, #632]	; (800479c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8004522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint3.Old_p = fcb_joint3.kalman_pos;
 8004526:	4b9e      	ldr	r3, [pc, #632]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 8004528:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800452c:	4a9c      	ldr	r2, [pc, #624]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 800452e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint2.Old_p = fcb_joint2.kalman_pos;
 8004532:	4b97      	ldr	r3, [pc, #604]	; (8004790 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 8004534:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004538:	4a95      	ldr	r2, [pc, #596]	; (8004790 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800453a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint2.Old_v = fcb_joint2.kalman_velo;
 800453e:	4b94      	ldr	r3, [pc, #592]	; (8004790 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 8004540:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004544:	4a92      	ldr	r2, [pc, #584]	; (8004790 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 8004546:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint1.Old_v = fcb_joint1.kalman_velo;
 800454a:	4b94      	ldr	r3, [pc, #592]	; (800479c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 800454c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004550:	4a92      	ldr	r2, [pc, #584]	; (800479c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8004552:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint3.Old_v = fcb_joint1.kalman_velo;
 8004556:	4b91      	ldr	r3, [pc, #580]	; (800479c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8004558:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800455c:	4a90      	ldr	r2, [pc, #576]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 800455e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

		t = t + sample_time_500;
 8004562:	4b90      	ldr	r3, [pc, #576]	; (80047a4 <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 8004564:	ed93 7a00 	vldr	s14, [r3]
 8004568:	4b8f      	ldr	r3, [pc, #572]	; (80047a8 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 800456a:	edd3 7a00 	vldr	s15, [r3]
 800456e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004572:	4b8c      	ldr	r3, [pc, #560]	; (80047a4 <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 8004574:	edc3 7a00 	vstr	s15, [r3]
		if (t >= Max_Time) {
 8004578:	4b8a      	ldr	r3, [pc, #552]	; (80047a4 <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 800457a:	ed93 7a00 	vldr	s14, [r3]
 800457e:	4b8b      	ldr	r3, [pc, #556]	; (80047ac <HAL_TIM_PeriodElapsedCallback+0xf84>)
 8004580:	edd3 7a00 	vldr	s15, [r3]
 8004584:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458c:	bfac      	ite	ge
 800458e:	2301      	movge	r3, #1
 8004590:	2300      	movlt	r3, #0
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d05d      	beq.n	8004654 <HAL_TIM_PeriodElapsedCallback+0xe2c>
			t = (int) 0;
 8004598:	4b82      	ldr	r3, [pc, #520]	; (80047a4 <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
			fcb_joint1.Sum_Error_p = 0;
 80045a0:	4b7e      	ldr	r3, [pc, #504]	; (800479c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 80045a2:	f04f 0200 	mov.w	r2, #0
 80045a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint2.Sum_Error_p = 0;
 80045aa:	4b79      	ldr	r3, [pc, #484]	; (8004790 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint3.Sum_Error_p = 0;
 80045b4:	4b7a      	ldr	r3, [pc, #488]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

			fcb_joint1.Sum_Error_v = 0;
 80045be:	4b77      	ldr	r3, [pc, #476]	; (800479c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint2.Sum_Error_v = 0;
 80045c8:	4b71      	ldr	r3, [pc, #452]	; (8004790 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint3.Sum_Error_v = 0;
 80045d2:	4b73      	ldr	r3, [pc, #460]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

			fcb_joint1.Old_Error_p = 0;
 80045dc:	4b6f      	ldr	r3, [pc, #444]	; (800479c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint2.Old_Error_p = 0;
 80045e4:	4b6a      	ldr	r3, [pc, #424]	; (8004790 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint3.Old_Error_p = 0;
 80045ec:	4b6c      	ldr	r3, [pc, #432]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	67da      	str	r2, [r3, #124]	; 0x7c

			fcb_joint1.Old_Error_v = 0;
 80045f4:	4b69      	ldr	r3, [pc, #420]	; (800479c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint2.Old_Error_v = 0;
 80045fe:	4b64      	ldr	r3, [pc, #400]	; (8004790 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint3.Old_Error_v = 0;
 8004608:	4b65      	ldr	r3, [pc, #404]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

			fcb_joint1.Old_p = 0;
 8004612:	4b62      	ldr	r3, [pc, #392]	; (800479c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint2.Old_p = 0;
 800461c:	4b5c      	ldr	r3, [pc, #368]	; (8004790 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint3.Old_p = 0;
 8004626:	4b5e      	ldr	r3, [pc, #376]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

			fcb_joint1.Old_v = 0;
 8004630:	4b5a      	ldr	r3, [pc, #360]	; (800479c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_joint2.Old_v = 0;
 800463a:	4b55      	ldr	r3, [pc, #340]	; (8004790 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_joint3.Old_v = 0;
 8004644:	4b56      	ldr	r3, [pc, #344]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			State_FIN = true;
 800464e:	4b58      	ldr	r3, [pc, #352]	; (80047b0 <HAL_TIM_PeriodElapsedCallback+0xf88>)
 8004650:	2201      	movs	r2, #1
 8004652:	701a      	strb	r2, [r3, #0]
		}

	}
	if (htim == &htim17) {
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a57      	ldr	r2, [pc, #348]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	f040 808f 	bne.w	800477c <HAL_TIM_PeriodElapsedCallback+0xf54>
//				(uint8_t) (((int32_t) fcb_joint2.Encoder >> 16) & 0xFF),
//				(uint8_t) (((int32_t) fcb_joint2.Encoder >> 8) & 0xFF),
//				(uint8_t) (((int32_t) fcb_joint2.Encoder) & 0xFF), };
		uint8_t encoder_state[8] =
				{
				(uint8_t) (((int16_t) (fcb_joint3.Encoder/10.0) >> 8) & 0xFF),
 800465e:	4b50      	ldr	r3, [pc, #320]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 8004660:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004664:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004668:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800466c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004670:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004674:	ee17 3a90 	vmov	r3, s15
 8004678:	b21b      	sxth	r3, r3
 800467a:	121b      	asrs	r3, r3, #8
 800467c:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint4.Encoder/10.0) >> 8) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint4.Encoder/10.0)) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint1.Encoder/10.0) >> 8) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint1.Encoder/10.0)) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0) >> 8) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 800467e:	b2db      	uxtb	r3, r3
 8004680:	723b      	strb	r3, [r7, #8]
				(uint8_t) (((int16_t) (fcb_joint3.Encoder/10.0)) & 0xFF),
 8004682:	4b47      	ldr	r3, [pc, #284]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 8004684:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004688:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800468c:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8004690:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004694:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004698:	ee17 3a90 	vmov	r3, s15
 800469c:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	727b      	strb	r3, [r7, #9]
				(uint8_t) (((int16_t) (fcb_joint4.Encoder/10.0) >> 8) & 0xFF),
 80046a2:	4b45      	ldr	r3, [pc, #276]	; (80047b8 <HAL_TIM_PeriodElapsedCallback+0xf90>)
 80046a4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80046a8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80046ac:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80046b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80046b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80046b8:	ee17 3a90 	vmov	r3, s15
 80046bc:	b21b      	sxth	r3, r3
 80046be:	121b      	asrs	r3, r3, #8
 80046c0:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	72bb      	strb	r3, [r7, #10]
				(uint8_t) (((int16_t) (fcb_joint4.Encoder/10.0)) & 0xFF),
 80046c6:	4b3c      	ldr	r3, [pc, #240]	; (80047b8 <HAL_TIM_PeriodElapsedCallback+0xf90>)
 80046c8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80046cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80046d0:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80046d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80046d8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80046dc:	ee17 3a90 	vmov	r3, s15
 80046e0:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	72fb      	strb	r3, [r7, #11]
				(uint8_t) (((int16_t) (fcb_joint1.Encoder/10.0) >> 8) & 0xFF),
 80046e6:	4b2d      	ldr	r3, [pc, #180]	; (800479c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 80046e8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80046ec:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80046f0:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80046f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80046f8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80046fc:	ee17 3a90 	vmov	r3, s15
 8004700:	b21b      	sxth	r3, r3
 8004702:	121b      	asrs	r3, r3, #8
 8004704:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 8004706:	b2db      	uxtb	r3, r3
 8004708:	733b      	strb	r3, [r7, #12]
				(uint8_t) (((int16_t) (fcb_joint1.Encoder/10.0)) & 0xFF),
 800470a:	4b24      	ldr	r3, [pc, #144]	; (800479c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 800470c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004710:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004714:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8004718:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800471c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004720:	ee17 3a90 	vmov	r3, s15
 8004724:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 8004726:	b2db      	uxtb	r3, r3
 8004728:	737b      	strb	r3, [r7, #13]
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0) >> 8) & 0xFF),
 800472a:	4b19      	ldr	r3, [pc, #100]	; (8004790 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800472c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004730:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004734:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8004738:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800473c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004740:	ee17 3a90 	vmov	r3, s15
 8004744:	b21b      	sxth	r3, r3
 8004746:	121b      	asrs	r3, r3, #8
 8004748:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 800474a:	b2db      	uxtb	r3, r3
 800474c:	73bb      	strb	r3, [r7, #14]
 800474e:	4b10      	ldr	r3, [pc, #64]	; (8004790 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 8004750:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004754:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004758:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800475c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004760:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004764:	ee17 3a90 	vmov	r3, s15
 8004768:	b21b      	sxth	r3, r3
 800476a:	b2db      	uxtb	r3, r3
 800476c:	73fb      	strb	r3, [r7, #15]

		HAL_UART_Transmit_DMA(&huart2, (uint8_t*) &encoder_state, 8);
 800476e:	f107 0308 	add.w	r3, r7, #8
 8004772:	2208      	movs	r2, #8
 8004774:	4619      	mov	r1, r3
 8004776:	4811      	ldr	r0, [pc, #68]	; (80047bc <HAL_TIM_PeriodElapsedCallback+0xf94>)
 8004778:	f00a fd4c 	bl	800f214 <HAL_UART_Transmit_DMA>
	}
}
 800477c:	bf00      	nop
 800477e:	3720      	adds	r7, #32
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	240004c0 	.word	0x240004c0
 8004788:	00000000 	.word	0x00000000
 800478c:	24000510 	.word	0x24000510
 8004790:	24000644 	.word	0x24000644
 8004794:	240004e8 	.word	0x240004e8
 8004798:	24000538 	.word	0x24000538
 800479c:	24000560 	.word	0x24000560
 80047a0:	24000728 	.word	0x24000728
 80047a4:	24000bf8 	.word	0x24000bf8
 80047a8:	24000210 	.word	0x24000210
 80047ac:	24000af4 	.word	0x24000af4
 80047b0:	24000af0 	.word	0x24000af0
 80047b4:	24001178 	.word	0x24001178
 80047b8:	2400080c 	.word	0x2400080c
 80047bc:	240012e4 	.word	0x240012e4

080047c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80047c4:	f002 fbde 	bl	8006f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80047c8:	f000 fab0 	bl	8004d2c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80047cc:	f7fd ff04 	bl	80025d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80047d0:	f7fd fe92 	bl	80024f8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80047d4:	f002 f870 	bl	80068b8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80047d8:	f001 f8d8 	bl	800598c <MX_TIM2_Init>
  MX_UART4_Init();
 80047dc:	f001 ff7e 	bl	80066dc <MX_UART4_Init>
  MX_TIM4_Init();
 80047e0:	f001 f9c4 	bl	8005b6c <MX_TIM4_Init>
  MX_SPI3_Init();
 80047e4:	f000 fc54 	bl	8005090 <MX_SPI3_Init>
  MX_TIM1_Init();
 80047e8:	f001 f822 	bl	8005830 <MX_TIM1_Init>
  MX_TIM3_Init();
 80047ec:	f001 f946 	bl	8005a7c <MX_TIM3_Init>
  MX_TIM5_Init();
 80047f0:	f001 fa34 	bl	8005c5c <MX_TIM5_Init>
  MX_TIM15_Init();
 80047f4:	f001 fbc8 	bl	8005f88 <MX_TIM15_Init>
  MX_CRC_Init();
 80047f8:	f7fd fe2e 	bl	8002458 <MX_CRC_Init>
  MX_UART7_Init();
 80047fc:	f001 ffc2 	bl	8006784 <MX_UART7_Init>
  MX_TIM6_Init();
 8004800:	f001 fa7a 	bl	8005cf8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8004804:	f001 faae 	bl	8005d64 <MX_TIM7_Init>
  MX_TIM12_Init();
 8004808:	f001 fb3c 	bl	8005e84 <MX_TIM12_Init>
  MX_TIM13_Init();
 800480c:	f001 fb74 	bl	8005ef8 <MX_TIM13_Init>
  MX_TIM14_Init();
 8004810:	f001 fb96 	bl	8005f40 <MX_TIM14_Init>
  MX_TIM16_Init();
 8004814:	f001 fc5c 	bl	80060d0 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8004818:	f002 f802 	bl	8006820 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 800481c:	f001 fc7e 	bl	800611c <MX_TIM17_Init>
  MX_TIM8_Init();
 8004820:	f001 fad6 	bl	8005dd0 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 8004824:	2214      	movs	r2, #20
 8004826:	496a      	ldr	r1, [pc, #424]	; (80049d0 <main+0x210>)
 8004828:	486a      	ldr	r0, [pc, #424]	; (80049d4 <main+0x214>)
 800482a:	f00c fc58 	bl	80110de <HAL_UARTEx_ReceiveToIdle_DMA>
			Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800482e:	4b6a      	ldr	r3, [pc, #424]	; (80049d8 <main+0x218>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a6a      	ldr	r2, [pc, #424]	; (80049dc <main+0x21c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d04a      	beq.n	80048ce <main+0x10e>
 8004838:	4b67      	ldr	r3, [pc, #412]	; (80049d8 <main+0x218>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a68      	ldr	r2, [pc, #416]	; (80049e0 <main+0x220>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d045      	beq.n	80048ce <main+0x10e>
 8004842:	4b65      	ldr	r3, [pc, #404]	; (80049d8 <main+0x218>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a67      	ldr	r2, [pc, #412]	; (80049e4 <main+0x224>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d040      	beq.n	80048ce <main+0x10e>
 800484c:	4b62      	ldr	r3, [pc, #392]	; (80049d8 <main+0x218>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a65      	ldr	r2, [pc, #404]	; (80049e8 <main+0x228>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d03b      	beq.n	80048ce <main+0x10e>
 8004856:	4b60      	ldr	r3, [pc, #384]	; (80049d8 <main+0x218>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a64      	ldr	r2, [pc, #400]	; (80049ec <main+0x22c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d036      	beq.n	80048ce <main+0x10e>
 8004860:	4b5d      	ldr	r3, [pc, #372]	; (80049d8 <main+0x218>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a62      	ldr	r2, [pc, #392]	; (80049f0 <main+0x230>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d031      	beq.n	80048ce <main+0x10e>
 800486a:	4b5b      	ldr	r3, [pc, #364]	; (80049d8 <main+0x218>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a61      	ldr	r2, [pc, #388]	; (80049f4 <main+0x234>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d02c      	beq.n	80048ce <main+0x10e>
 8004874:	4b58      	ldr	r3, [pc, #352]	; (80049d8 <main+0x218>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a5f      	ldr	r2, [pc, #380]	; (80049f8 <main+0x238>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d027      	beq.n	80048ce <main+0x10e>
 800487e:	4b56      	ldr	r3, [pc, #344]	; (80049d8 <main+0x218>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a5e      	ldr	r2, [pc, #376]	; (80049fc <main+0x23c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d022      	beq.n	80048ce <main+0x10e>
 8004888:	4b53      	ldr	r3, [pc, #332]	; (80049d8 <main+0x218>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a5c      	ldr	r2, [pc, #368]	; (8004a00 <main+0x240>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d01d      	beq.n	80048ce <main+0x10e>
 8004892:	4b51      	ldr	r3, [pc, #324]	; (80049d8 <main+0x218>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a5b      	ldr	r2, [pc, #364]	; (8004a04 <main+0x244>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d018      	beq.n	80048ce <main+0x10e>
 800489c:	4b4e      	ldr	r3, [pc, #312]	; (80049d8 <main+0x218>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a59      	ldr	r2, [pc, #356]	; (8004a08 <main+0x248>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <main+0x10e>
 80048a6:	4b4c      	ldr	r3, [pc, #304]	; (80049d8 <main+0x218>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a58      	ldr	r2, [pc, #352]	; (8004a0c <main+0x24c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00e      	beq.n	80048ce <main+0x10e>
 80048b0:	4b49      	ldr	r3, [pc, #292]	; (80049d8 <main+0x218>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a56      	ldr	r2, [pc, #344]	; (8004a10 <main+0x250>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d009      	beq.n	80048ce <main+0x10e>
 80048ba:	4b47      	ldr	r3, [pc, #284]	; (80049d8 <main+0x218>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a55      	ldr	r2, [pc, #340]	; (8004a14 <main+0x254>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <main+0x10e>
 80048c4:	4b44      	ldr	r3, [pc, #272]	; (80049d8 <main+0x218>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a53      	ldr	r2, [pc, #332]	; (8004a18 <main+0x258>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d108      	bne.n	80048e0 <main+0x120>
 80048ce:	4b42      	ldr	r3, [pc, #264]	; (80049d8 <main+0x218>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	4b40      	ldr	r3, [pc, #256]	; (80049d8 <main+0x218>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0208 	bic.w	r2, r2, #8
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	e007      	b.n	80048f0 <main+0x130>
 80048e0:	4b3d      	ldr	r3, [pc, #244]	; (80049d8 <main+0x218>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	4b3c      	ldr	r3, [pc, #240]	; (80049d8 <main+0x218>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0204 	bic.w	r2, r2, #4
 80048ee:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80048f0:	2201      	movs	r2, #1
 80048f2:	2101      	movs	r1, #1
 80048f4:	4849      	ldr	r0, [pc, #292]	; (8004a1c <main+0x25c>)
 80048f6:	f005 ff0d 	bl	800a714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80048fa:	2201      	movs	r2, #1
 80048fc:	2102      	movs	r1, #2
 80048fe:	4848      	ldr	r0, [pc, #288]	; (8004a20 <main+0x260>)
 8004900:	f005 ff08 	bl	800a714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8004904:	2200      	movs	r2, #0
 8004906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800490a:	4844      	ldr	r0, [pc, #272]	; (8004a1c <main+0x25c>)
 800490c:	f005 ff02 	bl	800a714 <HAL_GPIO_WritePin>

#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 8004910:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8004a44 <main+0x284>
 8004914:	4843      	ldr	r0, [pc, #268]	; (8004a24 <main+0x264>)
 8004916:	f7fd faaf 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(8);
 800491a:	2108      	movs	r1, #8
 800491c:	4841      	ldr	r0, [pc, #260]	; (8004a24 <main+0x264>)
 800491e:	f7fd fd47 	bl	80023b0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(42);
 8004922:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8004a28 <main+0x268>
 8004926:	483f      	ldr	r0, [pc, #252]	; (8004a24 <main+0x264>)
 8004928:	f7fd fd1e 	bl	8002368 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 800492c:	483d      	ldr	r0, [pc, #244]	; (8004a24 <main+0x264>)
 800492e:	f7fd fa92 	bl	8001e56 <_ZN7Stepper13StepperEnableEv>

	stepperJ2.StepperSetFrequency(0.0f);
 8004932:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8004a44 <main+0x284>
 8004936:	483d      	ldr	r0, [pc, #244]	; (8004a2c <main+0x26c>)
 8004938:	f7fd fa9e 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ2.StepperSetMicrostep(16);
 800493c:	2110      	movs	r1, #16
 800493e:	483b      	ldr	r0, [pc, #236]	; (8004a2c <main+0x26c>)
 8004940:	f7fd fd36 	bl	80023b0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ2.StepperSetRatio(3);
 8004944:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004948:	4838      	ldr	r0, [pc, #224]	; (8004a2c <main+0x26c>)
 800494a:	f7fd fd0d 	bl	8002368 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ2.StepperEnable();
 800494e:	4837      	ldr	r0, [pc, #220]	; (8004a2c <main+0x26c>)
 8004950:	f7fd fa81 	bl	8001e56 <_ZN7Stepper13StepperEnableEv>

	stepperJ3.StepperSetFrequency(0.0f);
 8004954:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8004a44 <main+0x284>
 8004958:	4835      	ldr	r0, [pc, #212]	; (8004a30 <main+0x270>)
 800495a:	f7fd fa8d 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(16);
 800495e:	2110      	movs	r1, #16
 8004960:	4833      	ldr	r0, [pc, #204]	; (8004a30 <main+0x270>)
 8004962:	f7fd fd25 	bl	80023b0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 8004966:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 800496a:	4831      	ldr	r0, [pc, #196]	; (8004a30 <main+0x270>)
 800496c:	f7fd fcfc 	bl	8002368 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 8004970:	482f      	ldr	r0, [pc, #188]	; (8004a30 <main+0x270>)
 8004972:	f7fd fa70 	bl	8001e56 <_ZN7Stepper13StepperEnableEv>

	stepperJ4.StepperSetFrequency(0.0f);
 8004976:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8004a44 <main+0x284>
 800497a:	482e      	ldr	r0, [pc, #184]	; (8004a34 <main+0x274>)
 800497c:	f7fd fa7c 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ4.StepperSetMicrostep(16);
 8004980:	2110      	movs	r1, #16
 8004982:	482c      	ldr	r0, [pc, #176]	; (8004a34 <main+0x274>)
 8004984:	f7fd fd14 	bl	80023b0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ4.StepperSetRatio(3);
 8004988:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800498c:	4829      	ldr	r0, [pc, #164]	; (8004a34 <main+0x274>)
 800498e:	f7fd fceb 	bl	8002368 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ4.StepperEnable();
 8004992:	4828      	ldr	r0, [pc, #160]	; (8004a34 <main+0x274>)
 8004994:	f7fd fa5f 	bl	8001e56 <_ZN7Stepper13StepperEnableEv>

//	gripper.setDegreeGripperClose(80);
	gripper.setDegreeGripperClose(145);
 8004998:	2191      	movs	r1, #145	; 0x91
 800499a:	4827      	ldr	r0, [pc, #156]	; (8004a38 <main+0x278>)
 800499c:	f7fd f9a5 	bl	8001cea <_ZN10ServoMotor21setDegreeGripperCloseEl>
//	gripper.setDegreeGripperClose(40);
	gripper.setDegreeGripperOpen(57);
 80049a0:	2139      	movs	r1, #57	; 0x39
 80049a2:	4825      	ldr	r0, [pc, #148]	; (8004a38 <main+0x278>)
 80049a4:	f7fd f990 	bl	8001cc8 <_ZN10ServoMotor20setDegreeGripperOpenEl>
	gripper.ServoEnable();
 80049a8:	4823      	ldr	r0, [pc, #140]	; (8004a38 <main+0x278>)
 80049aa:	f7fc ffb8 	bl	800191e <_ZN10ServoMotor11ServoEnableEv>
	gripper.GripperClose();
 80049ae:	4822      	ldr	r0, [pc, #136]	; (8004a38 <main+0x278>)
 80049b0:	f7fd f9ac 	bl	8001d0c <_ZN10ServoMotor12GripperCloseEv>
	while (!Limit_sw_Z_Top) {
 80049b4:	4b21      	ldr	r3, [pc, #132]	; (8004a3c <main+0x27c>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	f083 0301 	eor.w	r3, r3, #1
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d041      	beq.n	8004a48 <main+0x288>
		stepperJ2.StepperSetFrequency(1200.0f);
 80049c4:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8004a40 <main+0x280>
 80049c8:	4818      	ldr	r0, [pc, #96]	; (8004a2c <main+0x26c>)
 80049ca:	f7fd fa55 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	while (!Limit_sw_Z_Top) {
 80049ce:	e7f1      	b.n	80049b4 <main+0x1f4>
 80049d0:	24000b2c 	.word	0x24000b2c
 80049d4:	24001374 	.word	0x24001374
 80049d8:	2400165c 	.word	0x2400165c
 80049dc:	40020010 	.word	0x40020010
 80049e0:	40020028 	.word	0x40020028
 80049e4:	40020040 	.word	0x40020040
 80049e8:	40020058 	.word	0x40020058
 80049ec:	40020070 	.word	0x40020070
 80049f0:	40020088 	.word	0x40020088
 80049f4:	400200a0 	.word	0x400200a0
 80049f8:	400200b8 	.word	0x400200b8
 80049fc:	40020410 	.word	0x40020410
 8004a00:	40020428 	.word	0x40020428
 8004a04:	40020440 	.word	0x40020440
 8004a08:	40020458 	.word	0x40020458
 8004a0c:	40020470 	.word	0x40020470
 8004a10:	40020488 	.word	0x40020488
 8004a14:	400204a0 	.word	0x400204a0
 8004a18:	400204b8 	.word	0x400204b8
 8004a1c:	58020400 	.word	0x58020400
 8004a20:	58021000 	.word	0x58021000
 8004a24:	240004c0 	.word	0x240004c0
 8004a28:	42280000 	.word	0x42280000
 8004a2c:	240004e8 	.word	0x240004e8
 8004a30:	24000510 	.word	0x24000510
 8004a34:	24000538 	.word	0x24000538
 8004a38:	24000ab8 	.word	0x24000ab8
 8004a3c:	24000b43 	.word	0x24000b43
 8004a40:	44960000 	.word	0x44960000
 8004a44:	00000000 	.word	0x00000000
	}
	stepperJ2.StepperSetFrequency(0.0f);
 8004a48:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 8004a44 <main+0x284>
 8004a4c:	489c      	ldr	r0, [pc, #624]	; (8004cc0 <main+0x500>)
 8004a4e:	f7fd fa13 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(200);
 8004a52:	20c8      	movs	r0, #200	; 0xc8
 8004a54:	f002 fb28 	bl	80070a8 <HAL_Delay>
	stepperJ2.StepperSetFrequency(-800.0f);
 8004a58:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8004cc4 <main+0x504>
 8004a5c:	4898      	ldr	r0, [pc, #608]	; (8004cc0 <main+0x500>)
 8004a5e:	f7fd fa0b 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(2000);
 8004a62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004a66:	f002 fb1f 	bl	80070a8 <HAL_Delay>
	stepperJ2.StepperSetFrequency(0.0f);
 8004a6a:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8004cc8 <main+0x508>
 8004a6e:	4894      	ldr	r0, [pc, #592]	; (8004cc0 <main+0x500>)
 8004a70:	f7fd fa02 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(1000);
 8004a74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a78:	f002 fb16 	bl	80070a8 <HAL_Delay>
	gripper.GripperOpen();
 8004a7c:	4893      	ldr	r0, [pc, #588]	; (8004ccc <main+0x50c>)
 8004a7e:	f7fd f95b 	bl	8001d38 <_ZN10ServoMotor11GripperOpenEv>
	Limit_sw_Z_Top = false;
 8004a82:	4b93      	ldr	r3, [pc, #588]	; (8004cd0 <main+0x510>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]

	encoderJ1.AMT21_Read();
 8004a88:	4892      	ldr	r0, [pc, #584]	; (8004cd4 <main+0x514>)
 8004a8a:	f7fb fe22 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8004a8e:	4891      	ldr	r0, [pc, #580]	; (8004cd4 <main+0x514>)
 8004a90:	f7fb fe4e 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004a94:	4603      	mov	r3, r0
 8004a96:	461a      	mov	r2, r3
 8004a98:	4b8f      	ldr	r3, [pc, #572]	; (8004cd8 <main+0x518>)
 8004a9a:	701a      	strb	r2, [r3, #0]
	if (HALENCJ1OK == HAL_OK) {
 8004a9c:	4b8e      	ldr	r3, [pc, #568]	; (8004cd8 <main+0x518>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d110      	bne.n	8004ac6 <main+0x306>
		fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609;
 8004aa4:	488b      	ldr	r0, [pc, #556]	; (8004cd4 <main+0x514>)
 8004aa6:	f7fb fea9 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	ee07 3a90 	vmov	s15, r3
 8004ab0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004ab4:	ed9f 5b7e 	vldr	d5, [pc, #504]	; 8004cb0 <main+0x4f0>
 8004ab8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004abc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004ac0:	4b86      	ldr	r3, [pc, #536]	; (8004cdc <main+0x51c>)
 8004ac2:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ2.AMT21_Read();
 8004ac6:	4886      	ldr	r0, [pc, #536]	; (8004ce0 <main+0x520>)
 8004ac8:	f7fb fe03 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8004acc:	4884      	ldr	r0, [pc, #528]	; (8004ce0 <main+0x520>)
 8004ace:	f7fb fe2f 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	4b83      	ldr	r3, [pc, #524]	; (8004ce4 <main+0x524>)
 8004ad8:	701a      	strb	r2, [r3, #0]
	if (HALENCJ2OK == HAL_OK) {
 8004ada:	4b82      	ldr	r3, [pc, #520]	; (8004ce4 <main+0x524>)
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d115      	bne.n	8004b0e <main+0x34e>
		encoderJ2.unwarp();
 8004ae2:	487f      	ldr	r0, [pc, #508]	; (8004ce0 <main+0x520>)
 8004ae4:	f7fb feac 	bl	8000840 <_ZN5AMT216unwarpEv>
		encoderJ2.setUnwarpZero();
 8004ae8:	487d      	ldr	r0, [pc, #500]	; (8004ce0 <main+0x520>)
 8004aea:	f7fb fefb 	bl	80008e4 <_ZN5AMT2113setUnwarpZeroEv>
		fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609;
 8004aee:	487c      	ldr	r0, [pc, #496]	; (8004ce0 <main+0x520>)
 8004af0:	f7fb ff05 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 8004af4:	ee07 0a90 	vmov	s15, r0
 8004af8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004afc:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8004cb0 <main+0x4f0>
 8004b00:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004b04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004b08:	4b77      	ldr	r3, [pc, #476]	; (8004ce8 <main+0x528>)
 8004b0a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ3.AMT21_Read();
 8004b0e:	4877      	ldr	r0, [pc, #476]	; (8004cec <main+0x52c>)
 8004b10:	f7fb fddf 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8004b14:	4875      	ldr	r0, [pc, #468]	; (8004cec <main+0x52c>)
 8004b16:	f7fb fe0b 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	4b74      	ldr	r3, [pc, #464]	; (8004cf0 <main+0x530>)
 8004b20:	701a      	strb	r2, [r3, #0]
	if (HALENCJ3OK == HAL_OK) {
 8004b22:	4b73      	ldr	r3, [pc, #460]	; (8004cf0 <main+0x530>)
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d110      	bne.n	8004b4c <main+0x38c>
		fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609;
 8004b2a:	4870      	ldr	r0, [pc, #448]	; (8004cec <main+0x52c>)
 8004b2c:	f7fb fe66 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8004b30:	4603      	mov	r3, r0
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004b3a:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8004cb0 <main+0x4f0>
 8004b3e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004b42:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004b46:	4b6b      	ldr	r3, [pc, #428]	; (8004cf4 <main+0x534>)
 8004b48:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ4.AMT21_Read();
 8004b4c:	486a      	ldr	r0, [pc, #424]	; (8004cf8 <main+0x538>)
 8004b4e:	f7fb fdc0 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8004b52:	4869      	ldr	r0, [pc, #420]	; (8004cf8 <main+0x538>)
 8004b54:	f7fb fdec 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	4b67      	ldr	r3, [pc, #412]	; (8004cfc <main+0x53c>)
 8004b5e:	701a      	strb	r2, [r3, #0]
	if (HALENCJ4OK == HAL_OK) {
 8004b60:	4b66      	ldr	r3, [pc, #408]	; (8004cfc <main+0x53c>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d110      	bne.n	8004b8a <main+0x3ca>
		fcb_joint4.Encoder = encoderJ4.getAngPos180() / -2.609;
 8004b68:	4863      	ldr	r0, [pc, #396]	; (8004cf8 <main+0x538>)
 8004b6a:	f7fb fe47 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	ee07 3a90 	vmov	s15, r3
 8004b74:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004b78:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8004cb8 <main+0x4f8>
 8004b7c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004b80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004b84:	4b5e      	ldr	r3, [pc, #376]	; (8004d00 <main+0x540>)
 8004b86:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

//	angle_chess = chessSPIEncoder.readAngle();
//	  zero_position = chessSPIEncoder.getRawRotation();
//	  zero_position_map = chessSPIEncoder.read2angle(zero_position);

	fcb_joint1.p11 = 3.60381982 / 100000000.0;
 8004b8a:	4b54      	ldr	r3, [pc, #336]	; (8004cdc <main+0x51c>)
 8004b8c:	4a5d      	ldr	r2, [pc, #372]	; (8004d04 <main+0x544>)
 8004b8e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	fcb_joint1.p12 = 1.08884194 / 10000000.0;
 8004b92:	4b52      	ldr	r3, [pc, #328]	; (8004cdc <main+0x51c>)
 8004b94:	4a5c      	ldr	r2, [pc, #368]	; (8004d08 <main+0x548>)
 8004b96:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	fcb_joint1.p21 = 1.0888423 / 10000000.0;
 8004b9a:	4b50      	ldr	r3, [pc, #320]	; (8004cdc <main+0x51c>)
 8004b9c:	4a5b      	ldr	r2, [pc, #364]	; (8004d0c <main+0x54c>)
 8004b9e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	fcb_joint1.p22 = 6.59951866 / 10000000.0;
 8004ba2:	4b4e      	ldr	r3, [pc, #312]	; (8004cdc <main+0x51c>)
 8004ba4:	4a5a      	ldr	r2, [pc, #360]	; (8004d10 <main+0x550>)
 8004ba6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	fcb_joint3.p11 = 3.60381982 / 100000000.0;
 8004baa:	4b52      	ldr	r3, [pc, #328]	; (8004cf4 <main+0x534>)
 8004bac:	4a55      	ldr	r2, [pc, #340]	; (8004d04 <main+0x544>)
 8004bae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	fcb_joint3.p12 = 1.08884194 / 10000000.0;
 8004bb2:	4b50      	ldr	r3, [pc, #320]	; (8004cf4 <main+0x534>)
 8004bb4:	4a54      	ldr	r2, [pc, #336]	; (8004d08 <main+0x548>)
 8004bb6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	fcb_joint3.p21 = 1.0888423 / 10000000.0;
 8004bba:	4b4e      	ldr	r3, [pc, #312]	; (8004cf4 <main+0x534>)
 8004bbc:	4a53      	ldr	r2, [pc, #332]	; (8004d0c <main+0x54c>)
 8004bbe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	fcb_joint3.p22 = 6.59951866 / 10000000.0;
 8004bc2:	4b4c      	ldr	r3, [pc, #304]	; (8004cf4 <main+0x534>)
 8004bc4:	4a52      	ldr	r2, [pc, #328]	; (8004d10 <main+0x550>)
 8004bc6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	fcb_joint1.Q = 0.001;
 8004bca:	4b44      	ldr	r3, [pc, #272]	; (8004cdc <main+0x51c>)
 8004bcc:	4a51      	ldr	r2, [pc, #324]	; (8004d14 <main+0x554>)
 8004bce:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint1.R = 0.000001;
 8004bd2:	4b42      	ldr	r3, [pc, #264]	; (8004cdc <main+0x51c>)
 8004bd4:	4a50      	ldr	r2, [pc, #320]	; (8004d18 <main+0x558>)
 8004bd6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	fcb_joint2.Q = 0.001;
 8004bda:	4b43      	ldr	r3, [pc, #268]	; (8004ce8 <main+0x528>)
 8004bdc:	4a4d      	ldr	r2, [pc, #308]	; (8004d14 <main+0x554>)
 8004bde:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint2.R = 0.00003;
 8004be2:	4b41      	ldr	r3, [pc, #260]	; (8004ce8 <main+0x528>)
 8004be4:	4a4d      	ldr	r2, [pc, #308]	; (8004d1c <main+0x55c>)
 8004be6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	fcb_joint3.Q = 0.001;
 8004bea:	4b42      	ldr	r3, [pc, #264]	; (8004cf4 <main+0x534>)
 8004bec:	4a49      	ldr	r2, [pc, #292]	; (8004d14 <main+0x554>)
 8004bee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint3.R = 0.000001;
 8004bf2:	4b40      	ldr	r3, [pc, #256]	; (8004cf4 <main+0x534>)
 8004bf4:	4a48      	ldr	r2, [pc, #288]	; (8004d18 <main+0x558>)
 8004bf6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

//	fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
	fcb_joint1.X11 = fcb_joint1.Encoder;
 8004bfa:	4b38      	ldr	r3, [pc, #224]	; (8004cdc <main+0x51c>)
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	4a37      	ldr	r2, [pc, #220]	; (8004cdc <main+0x51c>)
 8004c00:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint1.X21 = 0.0;
 8004c04:	4b35      	ldr	r3, [pc, #212]	; (8004cdc <main+0x51c>)
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint1.kalman_pos = fcb_joint1.X11;
 8004c0e:	4b33      	ldr	r3, [pc, #204]	; (8004cdc <main+0x51c>)
 8004c10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c14:	4a31      	ldr	r2, [pc, #196]	; (8004cdc <main+0x51c>)
 8004c16:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint1.kalman_velo = 0.0;
 8004c1a:	4b30      	ldr	r3, [pc, #192]	; (8004cdc <main+0x51c>)
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint1.Goal_Position = fcb_joint1.Encoder;
 8004c24:	4b2d      	ldr	r3, [pc, #180]	; (8004cdc <main+0x51c>)
 8004c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c28:	4a2c      	ldr	r2, [pc, #176]	; (8004cdc <main+0x51c>)
 8004c2a:	6493      	str	r3, [r2, #72]	; 0x48

//	fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
	fcb_joint2.X11 = fcb_joint2.Encoder;
 8004c2c:	4b2e      	ldr	r3, [pc, #184]	; (8004ce8 <main+0x528>)
 8004c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c30:	4a2d      	ldr	r2, [pc, #180]	; (8004ce8 <main+0x528>)
 8004c32:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint2.X21 = 0.0;
 8004c36:	4b2c      	ldr	r3, [pc, #176]	; (8004ce8 <main+0x528>)
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint2.kalman_pos = fcb_joint2.X11;
 8004c40:	4b29      	ldr	r3, [pc, #164]	; (8004ce8 <main+0x528>)
 8004c42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c46:	4a28      	ldr	r2, [pc, #160]	; (8004ce8 <main+0x528>)
 8004c48:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint2.kalman_velo = 0.0;
 8004c4c:	4b26      	ldr	r3, [pc, #152]	; (8004ce8 <main+0x528>)
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint2.Goal_Position = fcb_joint2.Encoder;
 8004c56:	4b24      	ldr	r3, [pc, #144]	; (8004ce8 <main+0x528>)
 8004c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5a:	4a23      	ldr	r2, [pc, #140]	; (8004ce8 <main+0x528>)
 8004c5c:	6493      	str	r3, [r2, #72]	; 0x48

//	fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
	fcb_joint3.X11 = fcb_joint3.Encoder;
 8004c5e:	4b25      	ldr	r3, [pc, #148]	; (8004cf4 <main+0x534>)
 8004c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c62:	4a24      	ldr	r2, [pc, #144]	; (8004cf4 <main+0x534>)
 8004c64:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint3.X21 = 0.0;
 8004c68:	4b22      	ldr	r3, [pc, #136]	; (8004cf4 <main+0x534>)
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint3.kalman_pos = fcb_joint3.X11;
 8004c72:	4b20      	ldr	r3, [pc, #128]	; (8004cf4 <main+0x534>)
 8004c74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c78:	4a1e      	ldr	r2, [pc, #120]	; (8004cf4 <main+0x534>)
 8004c7a:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint3.kalman_velo = 0.0;
 8004c7e:	4b1d      	ldr	r3, [pc, #116]	; (8004cf4 <main+0x534>)
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint3.Goal_Position = fcb_joint3.Encoder;
 8004c88:	4b1a      	ldr	r3, [pc, #104]	; (8004cf4 <main+0x534>)
 8004c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8c:	4a19      	ldr	r2, [pc, #100]	; (8004cf4 <main+0x534>)
 8004c8e:	6493      	str	r3, [r2, #72]	; 0x48
//		HAL_TIM_Base_Start_IT(&htim6); // Set home 	200 Hz
//		HAL_TIM_Base_Start_IT(&htim7); // Control 	1000 Hz
//		HAL_TIM_Base_Start_IT(&htim12); // 			2000 Hz
//		HAL_TIM_Base_Start_IT(&htim14); // 			500Hz

	chessABIEncoder.setZero();
 8004c90:	4823      	ldr	r0, [pc, #140]	; (8004d20 <main+0x560>)
 8004c92:	f7fb fe80 	bl	8000996 <_ZN10AS5047UABI7setZeroEv>
	chessABIEncoder.EncoderReadEnable();
 8004c96:	4822      	ldr	r0, [pc, #136]	; (8004d20 <main+0x560>)
 8004c98:	f7fb fe65 	bl	8000966 <_ZN10AS5047UABI17EncoderReadEnableEv>
	chessABIEncoder.setZero();
 8004c9c:	4820      	ldr	r0, [pc, #128]	; (8004d20 <main+0x560>)
 8004c9e:	f7fb fe7a 	bl	8000996 <_ZN10AS5047UABI7setZeroEv>
	HAL_TIM_Base_Start_IT(&htim16); // 			1000Hz
 8004ca2:	4820      	ldr	r0, [pc, #128]	; (8004d24 <main+0x564>)
 8004ca4:	f008 fd00 	bl	800d6a8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim17);	// Joint State 50Hz
 8004ca8:	481f      	ldr	r0, [pc, #124]	; (8004d28 <main+0x568>)
 8004caa:	f008 fcfd 	bl	800d6a8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8004cae:	e7fe      	b.n	8004cae <main+0x4ee>
 8004cb0:	645a1cac 	.word	0x645a1cac
 8004cb4:	4004df3b 	.word	0x4004df3b
 8004cb8:	645a1cac 	.word	0x645a1cac
 8004cbc:	c004df3b 	.word	0xc004df3b
 8004cc0:	240004e8 	.word	0x240004e8
 8004cc4:	c4480000 	.word	0xc4480000
 8004cc8:	00000000 	.word	0x00000000
 8004ccc:	24000ab8 	.word	0x24000ab8
 8004cd0:	24000b43 	.word	0x24000b43
 8004cd4:	24000450 	.word	0x24000450
 8004cd8:	24000ad4 	.word	0x24000ad4
 8004cdc:	24000560 	.word	0x24000560
 8004ce0:	2400046c 	.word	0x2400046c
 8004ce4:	24000ad5 	.word	0x24000ad5
 8004ce8:	24000644 	.word	0x24000644
 8004cec:	24000488 	.word	0x24000488
 8004cf0:	24000ad6 	.word	0x24000ad6
 8004cf4:	24000728 	.word	0x24000728
 8004cf8:	240004a4 	.word	0x240004a4
 8004cfc:	24000ad7 	.word	0x24000ad7
 8004d00:	2400080c 	.word	0x2400080c
 8004d04:	331ac86b 	.word	0x331ac86b
 8004d08:	33e9d3b8 	.word	0x33e9d3b8
 8004d0c:	33e9d3bd 	.word	0x33e9d3bd
 8004d10:	3531278c 	.word	0x3531278c
 8004d14:	3a83126f 	.word	0x3a83126f
 8004d18:	358637bd 	.word	0x358637bd
 8004d1c:	37fba882 	.word	0x37fba882
 8004d20:	24000ad8 	.word	0x24000ad8
 8004d24:	2400112c 	.word	0x2400112c
 8004d28:	24001178 	.word	0x24001178

08004d2c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b09c      	sub	sp, #112	; 0x70
 8004d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d36:	224c      	movs	r2, #76	; 0x4c
 8004d38:	2100      	movs	r1, #0
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f00d fd80 	bl	8012840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d40:	1d3b      	adds	r3, r7, #4
 8004d42:	2220      	movs	r2, #32
 8004d44:	2100      	movs	r1, #0
 8004d46:	4618      	mov	r0, r3
 8004d48:	f00d fd7a 	bl	8012840 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004d4c:	2002      	movs	r0, #2
 8004d4e:	f005 fd15 	bl	800a77c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004d52:	2300      	movs	r3, #0
 8004d54:	603b      	str	r3, [r7, #0]
 8004d56:	4b38      	ldr	r3, [pc, #224]	; (8004e38 <_Z18SystemClock_Configv+0x10c>)
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	4a37      	ldr	r2, [pc, #220]	; (8004e38 <_Z18SystemClock_Configv+0x10c>)
 8004d5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d60:	6193      	str	r3, [r2, #24]
 8004d62:	4b35      	ldr	r3, [pc, #212]	; (8004e38 <_Z18SystemClock_Configv+0x10c>)
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	4b33      	ldr	r3, [pc, #204]	; (8004e3c <_Z18SystemClock_Configv+0x110>)
 8004d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d70:	4a32      	ldr	r2, [pc, #200]	; (8004e3c <_Z18SystemClock_Configv+0x110>)
 8004d72:	f043 0301 	orr.w	r3, r3, #1
 8004d76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d78:	4b30      	ldr	r3, [pc, #192]	; (8004e3c <_Z18SystemClock_Configv+0x110>)
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	603b      	str	r3, [r7, #0]
 8004d82:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004d84:	4b2c      	ldr	r3, [pc, #176]	; (8004e38 <_Z18SystemClock_Configv+0x10c>)
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d90:	bf14      	ite	ne
 8004d92:	2301      	movne	r3, #1
 8004d94:	2300      	moveq	r3, #0
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d000      	beq.n	8004d9e <_Z18SystemClock_Configv+0x72>
 8004d9c:	e7f2      	b.n	8004d84 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004d9e:	2302      	movs	r3, #2
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8004da2:	2301      	movs	r3, #1
 8004da4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004da6:	2340      	movs	r3, #64	; 0x40
 8004da8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004daa:	2302      	movs	r3, #2
 8004dac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004dae:	2300      	movs	r3, #0
 8004db0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004db2:	2304      	movs	r3, #4
 8004db4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004db6:	233c      	movs	r3, #60	; 0x3c
 8004db8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004dba:	2302      	movs	r3, #2
 8004dbc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 96;
 8004dbe:	2360      	movs	r3, #96	; 0x60
 8004dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004dc6:	230c      	movs	r3, #12
 8004dc8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f005 fd0a 	bl	800a7f0 <HAL_RCC_OscConfig>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	bf14      	ite	ne
 8004de2:	2301      	movne	r3, #1
 8004de4:	2300      	moveq	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8004dec:	f000 f856 	bl	8004e9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004df0:	233f      	movs	r3, #63	; 0x3f
 8004df2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004df4:	2303      	movs	r3, #3
 8004df6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004dfc:	2308      	movs	r3, #8
 8004dfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004e00:	2340      	movs	r3, #64	; 0x40
 8004e02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004e04:	2340      	movs	r3, #64	; 0x40
 8004e06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e0c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004e0e:	2340      	movs	r3, #64	; 0x40
 8004e10:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004e12:	1d3b      	adds	r3, r7, #4
 8004e14:	2104      	movs	r1, #4
 8004e16:	4618      	mov	r0, r3
 8004e18:	f006 f918 	bl	800b04c <HAL_RCC_ClockConfig>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	bf14      	ite	ne
 8004e22:	2301      	movne	r3, #1
 8004e24:	2300      	moveq	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8004e2c:	f000 f836 	bl	8004e9c <Error_Handler>
  }
}
 8004e30:	bf00      	nop
 8004e32:	3770      	adds	r7, #112	; 0x70
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	58024800 	.word	0x58024800
 8004e3c:	58000400 	.word	0x58000400

08004e40 <HAL_GPIO_EXTI_Callback>:

/*void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 //
 //}
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	4603      	mov	r3, r0
 8004e48:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LM_Z_BOTTOM_Pin) {	// Limit Switch Bottom Z-axis
 8004e4a:	88fb      	ldrh	r3, [r7, #6]
 8004e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e50:	d102      	bne.n	8004e58 <HAL_GPIO_EXTI_Callback+0x18>
		Limit_sw_Z_Bot = true;
 8004e52:	4b0e      	ldr	r3, [pc, #56]	; (8004e8c <HAL_GPIO_EXTI_Callback+0x4c>)
 8004e54:	2201      	movs	r2, #1
 8004e56:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_Z_TOP_Pin) {	// Limit Switch Top Z-axis
 8004e58:	88fb      	ldrh	r3, [r7, #6]
 8004e5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e5e:	d102      	bne.n	8004e66 <HAL_GPIO_EXTI_Callback+0x26>
		Limit_sw_Z_Top = true;
 8004e60:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <HAL_GPIO_EXTI_Callback+0x50>)
 8004e62:	2201      	movs	r2, #1
 8004e64:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_SERVO_Pin) {	// Limit Switch Servo
 8004e66:	88fb      	ldrh	r3, [r7, #6]
 8004e68:	2b80      	cmp	r3, #128	; 0x80
 8004e6a:	d102      	bne.n	8004e72 <HAL_GPIO_EXTI_Callback+0x32>
		Limit_sw_Gripper = true;
 8004e6c:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <HAL_GPIO_EXTI_Callback+0x54>)
 8004e6e:	2201      	movs	r2, #1
 8004e70:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_LED_Pin) {	// Limit Switch LED on Cabinet
 8004e72:	88fb      	ldrh	r3, [r7, #6]
 8004e74:	2b40      	cmp	r3, #64	; 0x40
 8004e76:	d102      	bne.n	8004e7e <HAL_GPIO_EXTI_Callback+0x3e>
		Limit_sw_Emergancy = true;
 8004e78:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <HAL_GPIO_EXTI_Callback+0x58>)
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	701a      	strb	r2, [r3, #0]
	}

}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	24000b42 	.word	0x24000b42
 8004e90:	24000b43 	.word	0x24000b43
 8004e94:	24000b44 	.word	0x24000b44
 8004e98:	24000b45 	.word	0x24000b45

08004e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	4808      	ldr	r0, [pc, #32]	; (8004ec8 <Error_Handler+0x2c>)
 8004ea6:	f005 fc35 	bl	800a714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2102      	movs	r1, #2
 8004eae:	4807      	ldr	r0, [pc, #28]	; (8004ecc <Error_Handler+0x30>)
 8004eb0:	f005 fc30 	bl	800a714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004eba:	4803      	ldr	r0, [pc, #12]	; (8004ec8 <Error_Handler+0x2c>)
 8004ebc:	f005 fc2a 	bl	800a714 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ec0:	b672      	cpsid	i
}
 8004ec2:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004ec4:	e7fe      	b.n	8004ec4 <Error_Handler+0x28>
 8004ec6:	bf00      	nop
 8004ec8:	58020400 	.word	0x58020400
 8004ecc:	58021000 	.word	0x58021000

08004ed0 <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d158      	bne.n	8004f92 <_Z41__static_initialization_and_destruction_0ii+0xc2>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d153      	bne.n	8004f92 <_Z41__static_initialization_and_destruction_0ii+0xc2>
AMT21 encoderJ1(&huart4, 0xD4);
 8004eea:	22d4      	movs	r2, #212	; 0xd4
 8004eec:	4947      	ldr	r1, [pc, #284]	; (800500c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004eee:	4848      	ldr	r0, [pc, #288]	; (8005010 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004ef0:	f7fb fbd0 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ2(&huart4, 0xB4);
 8004ef4:	22b4      	movs	r2, #180	; 0xb4
 8004ef6:	4945      	ldr	r1, [pc, #276]	; (800500c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004ef8:	4846      	ldr	r0, [pc, #280]	; (8005014 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004efa:	f7fb fbcb 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 8004efe:	22c4      	movs	r2, #196	; 0xc4
 8004f00:	4942      	ldr	r1, [pc, #264]	; (800500c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004f02:	4845      	ldr	r0, [pc, #276]	; (8005018 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004f04:	f7fb fbc6 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ4(&huart4, 0xA4);
 8004f08:	22a4      	movs	r2, #164	; 0xa4
 8004f0a:	4940      	ldr	r1, [pc, #256]	; (800500c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004f0c:	4843      	ldr	r0, [pc, #268]	; (800501c <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004f0e:	f7fb fbc1 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8004f12:	2320      	movs	r3, #32
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	4b42      	ldr	r3, [pc, #264]	; (8005020 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	4942      	ldr	r1, [pc, #264]	; (8005024 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8004f1c:	4842      	ldr	r0, [pc, #264]	; (8005028 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004f1e:	f7fc ff4d 	bl	8001dbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8004f22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	4b40      	ldr	r3, [pc, #256]	; (800502c <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004f2a:	2204      	movs	r2, #4
 8004f2c:	4940      	ldr	r1, [pc, #256]	; (8005030 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8004f2e:	4841      	ldr	r0, [pc, #260]	; (8005034 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004f30:	f7fc ff44 	bl	8001dbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8004f34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	4b3c      	ldr	r3, [pc, #240]	; (800502c <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004f3c:	2204      	movs	r2, #4
 8004f3e:	493e      	ldr	r1, [pc, #248]	; (8005038 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004f40:	483e      	ldr	r0, [pc, #248]	; (800503c <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004f42:	f7fc ff3b 	bl	8001dbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8004f46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	4b34      	ldr	r3, [pc, #208]	; (8005020 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004f4e:	2208      	movs	r2, #8
 8004f50:	493b      	ldr	r1, [pc, #236]	; (8005040 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004f52:	483c      	ldr	r0, [pc, #240]	; (8005044 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004f54:	f7fc ff32 	bl	8001dbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
RobotJoint fcb_joint1;
 8004f58:	483b      	ldr	r0, [pc, #236]	; (8005048 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004f5a:	f7fb fd8f 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint2;
 8004f5e:	483b      	ldr	r0, [pc, #236]	; (800504c <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004f60:	f7fb fd8c 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint3;
 8004f64:	483a      	ldr	r0, [pc, #232]	; (8005050 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004f66:	f7fb fd89 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint4;
 8004f6a:	483a      	ldr	r0, [pc, #232]	; (8005054 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8004f6c:	f7fb fd86 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_Y;
 8004f70:	4839      	ldr	r0, [pc, #228]	; (8005058 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004f72:	f7fb fd83 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_X;
 8004f76:	4839      	ldr	r0, [pc, #228]	; (800505c <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004f78:	f7fb fd80 	bl	8000a7c <_ZN10RobotJointC1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8004f7c:	2208      	movs	r2, #8
 8004f7e:	4938      	ldr	r1, [pc, #224]	; (8005060 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8004f80:	4838      	ldr	r0, [pc, #224]	; (8005064 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004f82:	f7fc fc91 	bl	80018a8 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>
AS5047UABI chessABIEncoder(&htim8, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8004f86:	2304      	movs	r3, #4
 8004f88:	2200      	movs	r2, #0
 8004f8a:	4937      	ldr	r1, [pc, #220]	; (8005068 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8004f8c:	4837      	ldr	r0, [pc, #220]	; (800506c <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004f8e:	f7fb fcc2 	bl	8000916 <_ZN10AS5047UABIC1EP17TIM_HandleTypeDefmm>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d134      	bne.n	8005002 <_Z41__static_initialization_and_destruction_0ii+0x132>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d12f      	bne.n	8005002 <_Z41__static_initialization_and_destruction_0ii+0x132>
 8004fa2:	4832      	ldr	r0, [pc, #200]	; (800506c <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004fa4:	f7fb fcd4 	bl	8000950 <_ZN10AS5047UABID1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8004fa8:	482e      	ldr	r0, [pc, #184]	; (8005064 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004faa:	f7fc fcad 	bl	8001908 <_ZN10ServoMotorD1Ev>
RobotJoint fcb_X;
 8004fae:	482b      	ldr	r0, [pc, #172]	; (800505c <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004fb0:	f7fb fdd2 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_Y;
 8004fb4:	4828      	ldr	r0, [pc, #160]	; (8005058 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004fb6:	f7fb fdcf 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint4;
 8004fba:	4826      	ldr	r0, [pc, #152]	; (8005054 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8004fbc:	f7fb fdcc 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint3;
 8004fc0:	4823      	ldr	r0, [pc, #140]	; (8005050 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004fc2:	f7fb fdc9 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint2;
 8004fc6:	4821      	ldr	r0, [pc, #132]	; (800504c <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004fc8:	f7fb fdc6 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint1;
 8004fcc:	481e      	ldr	r0, [pc, #120]	; (8005048 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004fce:	f7fb fdc3 	bl	8000b58 <_ZN10RobotJointD1Ev>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8004fd2:	481c      	ldr	r0, [pc, #112]	; (8005044 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004fd4:	f7fc ff34 	bl	8001e40 <_ZN7StepperD1Ev>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8004fd8:	4818      	ldr	r0, [pc, #96]	; (800503c <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004fda:	f7fc ff31 	bl	8001e40 <_ZN7StepperD1Ev>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8004fde:	4815      	ldr	r0, [pc, #84]	; (8005034 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004fe0:	f7fc ff2e 	bl	8001e40 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8004fe4:	4810      	ldr	r0, [pc, #64]	; (8005028 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004fe6:	f7fc ff2b 	bl	8001e40 <_ZN7StepperD1Ev>
AMT21 encoderJ4(&huart4, 0xA4);
 8004fea:	480c      	ldr	r0, [pc, #48]	; (800501c <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004fec:	f7fb fb66 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 8004ff0:	4809      	ldr	r0, [pc, #36]	; (8005018 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004ff2:	f7fb fb63 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ2(&huart4, 0xB4);
 8004ff6:	4807      	ldr	r0, [pc, #28]	; (8005014 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004ff8:	f7fb fb60 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8004ffc:	4804      	ldr	r0, [pc, #16]	; (8005010 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004ffe:	f7fb fb5d 	bl	80006bc <_ZN5AMT21D1Ev>
}
 8005002:	bf00      	nop
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	240011c4 	.word	0x240011c4
 8005010:	24000450 	.word	0x24000450
 8005014:	2400046c 	.word	0x2400046c
 8005018:	24000488 	.word	0x24000488
 800501c:	240004a4 	.word	0x240004a4
 8005020:	58020400 	.word	0x58020400
 8005024:	24000e34 	.word	0x24000e34
 8005028:	240004c0 	.word	0x240004c0
 800502c:	58021000 	.word	0x58021000
 8005030:	24000d9c 	.word	0x24000d9c
 8005034:	240004e8 	.word	0x240004e8
 8005038:	240010e0 	.word	0x240010e0
 800503c:	24000510 	.word	0x24000510
 8005040:	24000de8 	.word	0x24000de8
 8005044:	24000538 	.word	0x24000538
 8005048:	24000560 	.word	0x24000560
 800504c:	24000644 	.word	0x24000644
 8005050:	24000728 	.word	0x24000728
 8005054:	2400080c 	.word	0x2400080c
 8005058:	240008f0 	.word	0x240008f0
 800505c:	240009d4 	.word	0x240009d4
 8005060:	24000e80 	.word	0x24000e80
 8005064:	24000ab8 	.word	0x24000ab8
 8005068:	24000fb0 	.word	0x24000fb0
 800506c:	24000ad8 	.word	0x24000ad8

08005070 <_GLOBAL__sub_I_TIM_MS>:
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
 8005074:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005078:	2001      	movs	r0, #1
 800507a:	f7ff ff29 	bl	8004ed0 <_Z41__static_initialization_and_destruction_0ii>
 800507e:	bd80      	pop	{r7, pc}

08005080 <_GLOBAL__sub_D_TIM_MS>:
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
 8005084:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005088:	2000      	movs	r0, #0
 800508a:	f7ff ff21 	bl	8004ed0 <_Z41__static_initialization_and_destruction_0ii>
 800508e:	bd80      	pop	{r7, pc}

08005090 <MX_SPI3_Init>:
DMA_HandleTypeDef hdma_spi3_tx;
DMA_HandleTypeDef hdma_spi3_rx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005094:	4b28      	ldr	r3, [pc, #160]	; (8005138 <MX_SPI3_Init+0xa8>)
 8005096:	4a29      	ldr	r2, [pc, #164]	; (800513c <MX_SPI3_Init+0xac>)
 8005098:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800509a:	4b27      	ldr	r3, [pc, #156]	; (8005138 <MX_SPI3_Init+0xa8>)
 800509c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80050a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80050a2:	4b25      	ldr	r3, [pc, #148]	; (8005138 <MX_SPI3_Init+0xa8>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80050a8:	4b23      	ldr	r3, [pc, #140]	; (8005138 <MX_SPI3_Init+0xa8>)
 80050aa:	2207      	movs	r2, #7
 80050ac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80050ae:	4b22      	ldr	r3, [pc, #136]	; (8005138 <MX_SPI3_Init+0xa8>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80050b4:	4b20      	ldr	r3, [pc, #128]	; (8005138 <MX_SPI3_Init+0xa8>)
 80050b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050ba:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80050bc:	4b1e      	ldr	r3, [pc, #120]	; (8005138 <MX_SPI3_Init+0xa8>)
 80050be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80050c2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80050c4:	4b1c      	ldr	r3, [pc, #112]	; (8005138 <MX_SPI3_Init+0xa8>)
 80050c6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80050ca:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80050cc:	4b1a      	ldr	r3, [pc, #104]	; (8005138 <MX_SPI3_Init+0xa8>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80050d2:	4b19      	ldr	r3, [pc, #100]	; (8005138 <MX_SPI3_Init+0xa8>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050d8:	4b17      	ldr	r3, [pc, #92]	; (8005138 <MX_SPI3_Init+0xa8>)
 80050da:	2200      	movs	r2, #0
 80050dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80050de:	4b16      	ldr	r3, [pc, #88]	; (8005138 <MX_SPI3_Init+0xa8>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80050e4:	4b14      	ldr	r3, [pc, #80]	; (8005138 <MX_SPI3_Init+0xa8>)
 80050e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80050ea:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80050ec:	4b12      	ldr	r3, [pc, #72]	; (8005138 <MX_SPI3_Init+0xa8>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80050f2:	4b11      	ldr	r3, [pc, #68]	; (8005138 <MX_SPI3_Init+0xa8>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80050f8:	4b0f      	ldr	r3, [pc, #60]	; (8005138 <MX_SPI3_Init+0xa8>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80050fe:	4b0e      	ldr	r3, [pc, #56]	; (8005138 <MX_SPI3_Init+0xa8>)
 8005100:	2200      	movs	r2, #0
 8005102:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8005104:	4b0c      	ldr	r3, [pc, #48]	; (8005138 <MX_SPI3_Init+0xa8>)
 8005106:	2200      	movs	r2, #0
 8005108:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800510a:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <MX_SPI3_Init+0xa8>)
 800510c:	2200      	movs	r2, #0
 800510e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8005110:	4b09      	ldr	r3, [pc, #36]	; (8005138 <MX_SPI3_Init+0xa8>)
 8005112:	2200      	movs	r2, #0
 8005114:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8005116:	4b08      	ldr	r3, [pc, #32]	; (8005138 <MX_SPI3_Init+0xa8>)
 8005118:	2200      	movs	r2, #0
 800511a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800511c:	4b06      	ldr	r3, [pc, #24]	; (8005138 <MX_SPI3_Init+0xa8>)
 800511e:	2200      	movs	r2, #0
 8005120:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005122:	4805      	ldr	r0, [pc, #20]	; (8005138 <MX_SPI3_Init+0xa8>)
 8005124:	f007 fe86 	bl	800ce34 <HAL_SPI_Init>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 800512e:	f7ff feb5 	bl	8004e9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005132:	bf00      	nop
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	24000c20 	.word	0x24000c20
 800513c:	40003c00 	.word	0x40003c00

08005140 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b0b8      	sub	sp, #224	; 0xe0
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005148:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	605a      	str	r2, [r3, #4]
 8005152:	609a      	str	r2, [r3, #8]
 8005154:	60da      	str	r2, [r3, #12]
 8005156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005158:	f107 0310 	add.w	r3, r7, #16
 800515c:	22bc      	movs	r2, #188	; 0xbc
 800515e:	2100      	movs	r1, #0
 8005160:	4618      	mov	r0, r3
 8005162:	f00d fb6d 	bl	8012840 <memset>
  if(spiHandle->Instance==SPI3)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a56      	ldr	r2, [pc, #344]	; (80052c4 <HAL_SPI_MspInit+0x184>)
 800516c:	4293      	cmp	r3, r2
 800516e:	f040 80a5 	bne.w	80052bc <HAL_SPI_MspInit+0x17c>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8005172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005176:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8005178:	2300      	movs	r3, #0
 800517a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800517c:	f107 0310 	add.w	r3, r7, #16
 8005180:	4618      	mov	r0, r3
 8005182:	f006 faef 	bl	800b764 <HAL_RCCEx_PeriphCLKConfig>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 800518c:	f7ff fe86 	bl	8004e9c <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005190:	4b4d      	ldr	r3, [pc, #308]	; (80052c8 <HAL_SPI_MspInit+0x188>)
 8005192:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005196:	4a4c      	ldr	r2, [pc, #304]	; (80052c8 <HAL_SPI_MspInit+0x188>)
 8005198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800519c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051a0:	4b49      	ldr	r3, [pc, #292]	; (80052c8 <HAL_SPI_MspInit+0x188>)
 80051a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051ae:	4b46      	ldr	r3, [pc, #280]	; (80052c8 <HAL_SPI_MspInit+0x188>)
 80051b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051b4:	4a44      	ldr	r2, [pc, #272]	; (80052c8 <HAL_SPI_MspInit+0x188>)
 80051b6:	f043 0304 	orr.w	r3, r3, #4
 80051ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80051be:	4b42      	ldr	r3, [pc, #264]	; (80052c8 <HAL_SPI_MspInit+0x188>)
 80051c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	60bb      	str	r3, [r7, #8]
 80051ca:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80051cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80051d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d4:	2302      	movs	r3, #2
 80051d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051da:	2300      	movs	r3, #0
 80051dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051e0:	2300      	movs	r3, #0
 80051e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80051e6:	2306      	movs	r3, #6
 80051e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80051f0:	4619      	mov	r1, r3
 80051f2:	4836      	ldr	r0, [pc, #216]	; (80052cc <HAL_SPI_MspInit+0x18c>)
 80051f4:	f005 f8de 	bl	800a3b4 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 80051f8:	4b35      	ldr	r3, [pc, #212]	; (80052d0 <HAL_SPI_MspInit+0x190>)
 80051fa:	4a36      	ldr	r2, [pc, #216]	; (80052d4 <HAL_SPI_MspInit+0x194>)
 80051fc:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 80051fe:	4b34      	ldr	r3, [pc, #208]	; (80052d0 <HAL_SPI_MspInit+0x190>)
 8005200:	223e      	movs	r2, #62	; 0x3e
 8005202:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005204:	4b32      	ldr	r3, [pc, #200]	; (80052d0 <HAL_SPI_MspInit+0x190>)
 8005206:	2240      	movs	r2, #64	; 0x40
 8005208:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800520a:	4b31      	ldr	r3, [pc, #196]	; (80052d0 <HAL_SPI_MspInit+0x190>)
 800520c:	2200      	movs	r2, #0
 800520e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005210:	4b2f      	ldr	r3, [pc, #188]	; (80052d0 <HAL_SPI_MspInit+0x190>)
 8005212:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005216:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005218:	4b2d      	ldr	r3, [pc, #180]	; (80052d0 <HAL_SPI_MspInit+0x190>)
 800521a:	2200      	movs	r2, #0
 800521c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800521e:	4b2c      	ldr	r3, [pc, #176]	; (80052d0 <HAL_SPI_MspInit+0x190>)
 8005220:	2200      	movs	r2, #0
 8005222:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8005224:	4b2a      	ldr	r3, [pc, #168]	; (80052d0 <HAL_SPI_MspInit+0x190>)
 8005226:	2200      	movs	r2, #0
 8005228:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800522a:	4b29      	ldr	r3, [pc, #164]	; (80052d0 <HAL_SPI_MspInit+0x190>)
 800522c:	2200      	movs	r2, #0
 800522e:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005230:	4b27      	ldr	r3, [pc, #156]	; (80052d0 <HAL_SPI_MspInit+0x190>)
 8005232:	2200      	movs	r2, #0
 8005234:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8005236:	4826      	ldr	r0, [pc, #152]	; (80052d0 <HAL_SPI_MspInit+0x190>)
 8005238:	f002 fa80 	bl	800773c <HAL_DMA_Init>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8005242:	f7ff fe2b 	bl	8004e9c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a21      	ldr	r2, [pc, #132]	; (80052d0 <HAL_SPI_MspInit+0x190>)
 800524a:	679a      	str	r2, [r3, #120]	; 0x78
 800524c:	4a20      	ldr	r2, [pc, #128]	; (80052d0 <HAL_SPI_MspInit+0x190>)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA2_Stream0;
 8005252:	4b21      	ldr	r3, [pc, #132]	; (80052d8 <HAL_SPI_MspInit+0x198>)
 8005254:	4a21      	ldr	r2, [pc, #132]	; (80052dc <HAL_SPI_MspInit+0x19c>)
 8005256:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8005258:	4b1f      	ldr	r3, [pc, #124]	; (80052d8 <HAL_SPI_MspInit+0x198>)
 800525a:	223d      	movs	r2, #61	; 0x3d
 800525c:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800525e:	4b1e      	ldr	r3, [pc, #120]	; (80052d8 <HAL_SPI_MspInit+0x198>)
 8005260:	2200      	movs	r2, #0
 8005262:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005264:	4b1c      	ldr	r3, [pc, #112]	; (80052d8 <HAL_SPI_MspInit+0x198>)
 8005266:	2200      	movs	r2, #0
 8005268:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800526a:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <HAL_SPI_MspInit+0x198>)
 800526c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005270:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005272:	4b19      	ldr	r3, [pc, #100]	; (80052d8 <HAL_SPI_MspInit+0x198>)
 8005274:	2200      	movs	r2, #0
 8005276:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005278:	4b17      	ldr	r3, [pc, #92]	; (80052d8 <HAL_SPI_MspInit+0x198>)
 800527a:	2200      	movs	r2, #0
 800527c:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 800527e:	4b16      	ldr	r3, [pc, #88]	; (80052d8 <HAL_SPI_MspInit+0x198>)
 8005280:	2200      	movs	r2, #0
 8005282:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005284:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <HAL_SPI_MspInit+0x198>)
 8005286:	2200      	movs	r2, #0
 8005288:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800528a:	4b13      	ldr	r3, [pc, #76]	; (80052d8 <HAL_SPI_MspInit+0x198>)
 800528c:	2200      	movs	r2, #0
 800528e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8005290:	4811      	ldr	r0, [pc, #68]	; (80052d8 <HAL_SPI_MspInit+0x198>)
 8005292:	f002 fa53 	bl	800773c <HAL_DMA_Init>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <HAL_SPI_MspInit+0x160>
    {
      Error_Handler();
 800529c:	f7ff fdfe 	bl	8004e9c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a0d      	ldr	r2, [pc, #52]	; (80052d8 <HAL_SPI_MspInit+0x198>)
 80052a4:	67da      	str	r2, [r3, #124]	; 0x7c
 80052a6:	4a0c      	ldr	r2, [pc, #48]	; (80052d8 <HAL_SPI_MspInit+0x198>)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80052ac:	2200      	movs	r2, #0
 80052ae:	2100      	movs	r1, #0
 80052b0:	2033      	movs	r0, #51	; 0x33
 80052b2:	f002 f804 	bl	80072be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80052b6:	2033      	movs	r0, #51	; 0x33
 80052b8:	f002 f81b 	bl	80072f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80052bc:	bf00      	nop
 80052be:	37e0      	adds	r7, #224	; 0xe0
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	40003c00 	.word	0x40003c00
 80052c8:	58024400 	.word	0x58024400
 80052cc:	58020800 	.word	0x58020800
 80052d0:	24000ca8 	.word	0x24000ca8
 80052d4:	400200b8 	.word	0x400200b8
 80052d8:	24000d20 	.word	0x24000d20
 80052dc:	40020410 	.word	0x40020410

080052e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052e6:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <HAL_MspInit+0x30>)
 80052e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052ec:	4a08      	ldr	r2, [pc, #32]	; (8005310 <HAL_MspInit+0x30>)
 80052ee:	f043 0302 	orr.w	r3, r3, #2
 80052f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80052f6:	4b06      	ldr	r3, [pc, #24]	; (8005310 <HAL_MspInit+0x30>)
 80052f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	607b      	str	r3, [r7, #4]
 8005302:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	58024400 	.word	0x58024400

08005314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005318:	e7fe      	b.n	8005318 <NMI_Handler+0x4>

0800531a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800531a:	b480      	push	{r7}
 800531c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800531e:	e7fe      	b.n	800531e <HardFault_Handler+0x4>

08005320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005324:	e7fe      	b.n	8005324 <MemManage_Handler+0x4>

08005326 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005326:	b480      	push	{r7}
 8005328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800532a:	e7fe      	b.n	800532a <BusFault_Handler+0x4>

0800532c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005330:	e7fe      	b.n	8005330 <UsageFault_Handler+0x4>

08005332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005332:	b480      	push	{r7}
 8005334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005336:	bf00      	nop
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005344:	bf00      	nop
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800534e:	b480      	push	{r7}
 8005350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005352:	bf00      	nop
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005360:	f001 fe82 	bl	8007068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8005364:	f001 ffdf 	bl	8007326 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8005368:	bf00      	nop
 800536a:	bd80      	pop	{r7, pc}

0800536c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8005370:	4802      	ldr	r0, [pc, #8]	; (800537c <DMA1_Stream0_IRQHandler+0x10>)
 8005372:	f003 fd0d 	bl	8008d90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005376:	bf00      	nop
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	240014f4 	.word	0x240014f4

08005380 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005384:	4802      	ldr	r0, [pc, #8]	; (8005390 <DMA1_Stream1_IRQHandler+0x10>)
 8005386:	f003 fd03 	bl	8008d90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800538a:	bf00      	nop
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	2400165c 	.word	0x2400165c

08005394 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005398:	4802      	ldr	r0, [pc, #8]	; (80053a4 <DMA1_Stream2_IRQHandler+0x10>)
 800539a:	f003 fcf9 	bl	8008d90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800539e:	bf00      	nop
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	240016d4 	.word	0x240016d4

080053a8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80053ac:	4802      	ldr	r0, [pc, #8]	; (80053b8 <DMA1_Stream3_IRQHandler+0x10>)
 80053ae:	f003 fcef 	bl	8008d90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80053b2:	bf00      	nop
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	24001404 	.word	0x24001404

080053bc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80053c0:	4802      	ldr	r0, [pc, #8]	; (80053cc <DMA1_Stream4_IRQHandler+0x10>)
 80053c2:	f003 fce5 	bl	8008d90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80053c6:	bf00      	nop
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	2400147c 	.word	0x2400147c

080053d0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80053d4:	4802      	ldr	r0, [pc, #8]	; (80053e0 <DMA1_Stream5_IRQHandler+0x10>)
 80053d6:	f003 fcdb 	bl	8008d90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80053da:	bf00      	nop
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	2400156c 	.word	0x2400156c

080053e4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80053e8:	4802      	ldr	r0, [pc, #8]	; (80053f4 <DMA1_Stream6_IRQHandler+0x10>)
 80053ea:	f003 fcd1 	bl	8008d90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80053ee:	bf00      	nop
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	240015e4 	.word	0x240015e4

080053f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 80053fc:	2040      	movs	r0, #64	; 0x40
 80053fe:	f005 f9a2 	bl	800a746 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_SERVO_Pin);
 8005402:	2080      	movs	r0, #128	; 0x80
 8005404:	f005 f99f 	bl	800a746 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005408:	bf00      	nop
 800540a:	bd80      	pop	{r7, pc}

0800540c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005410:	4802      	ldr	r0, [pc, #8]	; (800541c <USART2_IRQHandler+0x10>)
 8005412:	f009 ff91 	bl	800f338 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005416:	bf00      	nop
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	240012e4 	.word	0x240012e4

08005420 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005424:	4802      	ldr	r0, [pc, #8]	; (8005430 <USART3_IRQHandler+0x10>)
 8005426:	f009 ff87 	bl	800f338 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800542a:	bf00      	nop
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	24001374 	.word	0x24001374

08005434 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8005438:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800543c:	f005 f983 	bl	800a746 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8005440:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005444:	f005 f97f 	bl	800a746 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_Z_BOTTOM_Pin);
 8005448:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800544c:	f005 f97b 	bl	800a746 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8005450:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005454:	f005 f977 	bl	800a746 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005458:	bf00      	nop
 800545a:	bd80      	pop	{r7, pc}

0800545c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005460:	4803      	ldr	r0, [pc, #12]	; (8005470 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8005462:	f008 fc6b 	bl	800dd3c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8005466:	4803      	ldr	r0, [pc, #12]	; (8005474 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8005468:	f008 fc68 	bl	800dd3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800546c:	bf00      	nop
 800546e:	bd80      	pop	{r7, pc}
 8005470:	24000fb0 	.word	0x24000fb0
 8005474:	24000ffc 	.word	0x24000ffc

08005478 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800547c:	4803      	ldr	r0, [pc, #12]	; (800548c <TIM8_UP_TIM13_IRQHandler+0x14>)
 800547e:	f008 fc5d 	bl	800dd3c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8005482:	4803      	ldr	r0, [pc, #12]	; (8005490 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8005484:	f008 fc5a 	bl	800dd3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005488:	bf00      	nop
 800548a:	bd80      	pop	{r7, pc}
 800548c:	24000fb0 	.word	0x24000fb0
 8005490:	24001048 	.word	0x24001048

08005494 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005498:	4803      	ldr	r0, [pc, #12]	; (80054a8 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 800549a:	f008 fc4f 	bl	800dd3c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800549e:	4803      	ldr	r0, [pc, #12]	; (80054ac <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 80054a0:	f008 fc4c 	bl	800dd3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80054a4:	bf00      	nop
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	24000fb0 	.word	0x24000fb0
 80054ac:	24001094 	.word	0x24001094

080054b0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80054b4:	4802      	ldr	r0, [pc, #8]	; (80054c0 <TIM8_CC_IRQHandler+0x10>)
 80054b6:	f008 fc41 	bl	800dd3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80054ba:	bf00      	nop
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	24000fb0 	.word	0x24000fb0

080054c4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80054c8:	4802      	ldr	r0, [pc, #8]	; (80054d4 <DMA1_Stream7_IRQHandler+0x10>)
 80054ca:	f003 fc61 	bl	8008d90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80054ce:	bf00      	nop
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	24000ca8 	.word	0x24000ca8

080054d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80054dc:	4802      	ldr	r0, [pc, #8]	; (80054e8 <TIM5_IRQHandler+0x10>)
 80054de:	f008 fc2d 	bl	800dd3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80054e2:	bf00      	nop
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	24000ecc 	.word	0x24000ecc

080054ec <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80054f0:	4802      	ldr	r0, [pc, #8]	; (80054fc <SPI3_IRQHandler+0x10>)
 80054f2:	f007 fda5 	bl	800d040 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80054f6:	bf00      	nop
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	24000c20 	.word	0x24000c20

08005500 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005504:	4802      	ldr	r0, [pc, #8]	; (8005510 <UART4_IRQHandler+0x10>)
 8005506:	f009 ff17 	bl	800f338 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800550a:	bf00      	nop
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	240011c4 	.word	0x240011c4

08005514 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005518:	4802      	ldr	r0, [pc, #8]	; (8005524 <TIM6_DAC_IRQHandler+0x10>)
 800551a:	f008 fc0f 	bl	800dd3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800551e:	bf00      	nop
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	24000f18 	.word	0x24000f18

08005528 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800552c:	4802      	ldr	r0, [pc, #8]	; (8005538 <TIM7_IRQHandler+0x10>)
 800552e:	f008 fc05 	bl	800dd3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005532:	bf00      	nop
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	24000f64 	.word	0x24000f64

0800553c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8005540:	4802      	ldr	r0, [pc, #8]	; (800554c <DMA2_Stream0_IRQHandler+0x10>)
 8005542:	f003 fc25 	bl	8008d90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005546:	bf00      	nop
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	24000d20 	.word	0x24000d20

08005550 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8005554:	4802      	ldr	r0, [pc, #8]	; (8005560 <UART7_IRQHandler+0x10>)
 8005556:	f009 feef 	bl	800f338 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800555a:	bf00      	nop
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	24001254 	.word	0x24001254

08005564 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005568:	4802      	ldr	r0, [pc, #8]	; (8005574 <TIM16_IRQHandler+0x10>)
 800556a:	f008 fbe7 	bl	800dd3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800556e:	bf00      	nop
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	2400112c 	.word	0x2400112c

08005578 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800557c:	4802      	ldr	r0, [pc, #8]	; (8005588 <TIM17_IRQHandler+0x10>)
 800557e:	f008 fbdd 	bl	800dd3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8005582:	bf00      	nop
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	24001178 	.word	0x24001178

0800558c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
	return 1;
 8005590:	2301      	movs	r3, #1
}
 8005592:	4618      	mov	r0, r3
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <_kill>:

int _kill(int pid, int sig)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80055a6:	f00d f921 	bl	80127ec <__errno>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2216      	movs	r2, #22
 80055ae:	601a      	str	r2, [r3, #0]
	return -1;
 80055b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <_exit>:

void _exit (int status)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80055c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff ffe7 	bl	800559c <_kill>
	while (1) {}		/* Make sure we hang here */
 80055ce:	e7fe      	b.n	80055ce <_exit+0x12>

080055d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	e00a      	b.n	80055f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80055e2:	f3af 8000 	nop.w
 80055e6:	4601      	mov	r1, r0
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	60ba      	str	r2, [r7, #8]
 80055ee:	b2ca      	uxtb	r2, r1
 80055f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	3301      	adds	r3, #1
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	dbf0      	blt.n	80055e2 <_read+0x12>
	}

return len;
 8005600:	687b      	ldr	r3, [r7, #4]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b086      	sub	sp, #24
 800560e:	af00      	add	r7, sp, #0
 8005610:	60f8      	str	r0, [r7, #12]
 8005612:	60b9      	str	r1, [r7, #8]
 8005614:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	e009      	b.n	8005630 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	60ba      	str	r2, [r7, #8]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	4618      	mov	r0, r3
 8005626:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	3301      	adds	r3, #1
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	429a      	cmp	r2, r3
 8005636:	dbf1      	blt.n	800561c <_write+0x12>
	}
	return len;
 8005638:	687b      	ldr	r3, [r7, #4]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <_close>:

int _close(int file)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
	return -1;
 800564a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800564e:	4618      	mov	r0, r3
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
 8005662:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800566a:	605a      	str	r2, [r3, #4]
	return 0;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <_isatty>:

int _isatty(int file)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
	return 1;
 8005682:	2301      	movs	r3, #1
}
 8005684:	4618      	mov	r0, r3
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
	return 0;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
	...

080056ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80056b4:	4a14      	ldr	r2, [pc, #80]	; (8005708 <_sbrk+0x5c>)
 80056b6:	4b15      	ldr	r3, [pc, #84]	; (800570c <_sbrk+0x60>)
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80056c0:	4b13      	ldr	r3, [pc, #76]	; (8005710 <_sbrk+0x64>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d102      	bne.n	80056ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80056c8:	4b11      	ldr	r3, [pc, #68]	; (8005710 <_sbrk+0x64>)
 80056ca:	4a12      	ldr	r2, [pc, #72]	; (8005714 <_sbrk+0x68>)
 80056cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056ce:	4b10      	ldr	r3, [pc, #64]	; (8005710 <_sbrk+0x64>)
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4413      	add	r3, r2
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d207      	bcs.n	80056ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056dc:	f00d f886 	bl	80127ec <__errno>
 80056e0:	4603      	mov	r3, r0
 80056e2:	220c      	movs	r2, #12
 80056e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056ea:	e009      	b.n	8005700 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80056ec:	4b08      	ldr	r3, [pc, #32]	; (8005710 <_sbrk+0x64>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056f2:	4b07      	ldr	r3, [pc, #28]	; (8005710 <_sbrk+0x64>)
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4413      	add	r3, r2
 80056fa:	4a05      	ldr	r2, [pc, #20]	; (8005710 <_sbrk+0x64>)
 80056fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80056fe:	68fb      	ldr	r3, [r7, #12]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	24001d60 	.word	0x24001d60
 800570c:	00000400 	.word	0x00000400
 8005710:	24000d98 	.word	0x24000d98
 8005714:	24001760 	.word	0x24001760

08005718 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800571c:	4b39      	ldr	r3, [pc, #228]	; (8005804 <SystemInit+0xec>)
 800571e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005722:	4a38      	ldr	r2, [pc, #224]	; (8005804 <SystemInit+0xec>)
 8005724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800572c:	4b36      	ldr	r3, [pc, #216]	; (8005808 <SystemInit+0xf0>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 030f 	and.w	r3, r3, #15
 8005734:	2b06      	cmp	r3, #6
 8005736:	d807      	bhi.n	8005748 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005738:	4b33      	ldr	r3, [pc, #204]	; (8005808 <SystemInit+0xf0>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f023 030f 	bic.w	r3, r3, #15
 8005740:	4a31      	ldr	r2, [pc, #196]	; (8005808 <SystemInit+0xf0>)
 8005742:	f043 0307 	orr.w	r3, r3, #7
 8005746:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005748:	4b30      	ldr	r3, [pc, #192]	; (800580c <SystemInit+0xf4>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a2f      	ldr	r2, [pc, #188]	; (800580c <SystemInit+0xf4>)
 800574e:	f043 0301 	orr.w	r3, r3, #1
 8005752:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005754:	4b2d      	ldr	r3, [pc, #180]	; (800580c <SystemInit+0xf4>)
 8005756:	2200      	movs	r2, #0
 8005758:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800575a:	4b2c      	ldr	r3, [pc, #176]	; (800580c <SystemInit+0xf4>)
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	492b      	ldr	r1, [pc, #172]	; (800580c <SystemInit+0xf4>)
 8005760:	4b2b      	ldr	r3, [pc, #172]	; (8005810 <SystemInit+0xf8>)
 8005762:	4013      	ands	r3, r2
 8005764:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005766:	4b28      	ldr	r3, [pc, #160]	; (8005808 <SystemInit+0xf0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	2b00      	cmp	r3, #0
 8005770:	d007      	beq.n	8005782 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005772:	4b25      	ldr	r3, [pc, #148]	; (8005808 <SystemInit+0xf0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f023 030f 	bic.w	r3, r3, #15
 800577a:	4a23      	ldr	r2, [pc, #140]	; (8005808 <SystemInit+0xf0>)
 800577c:	f043 0307 	orr.w	r3, r3, #7
 8005780:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005782:	4b22      	ldr	r3, [pc, #136]	; (800580c <SystemInit+0xf4>)
 8005784:	2200      	movs	r2, #0
 8005786:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005788:	4b20      	ldr	r3, [pc, #128]	; (800580c <SystemInit+0xf4>)
 800578a:	2200      	movs	r2, #0
 800578c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800578e:	4b1f      	ldr	r3, [pc, #124]	; (800580c <SystemInit+0xf4>)
 8005790:	2200      	movs	r2, #0
 8005792:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005794:	4b1d      	ldr	r3, [pc, #116]	; (800580c <SystemInit+0xf4>)
 8005796:	4a1f      	ldr	r2, [pc, #124]	; (8005814 <SystemInit+0xfc>)
 8005798:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800579a:	4b1c      	ldr	r3, [pc, #112]	; (800580c <SystemInit+0xf4>)
 800579c:	4a1e      	ldr	r2, [pc, #120]	; (8005818 <SystemInit+0x100>)
 800579e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80057a0:	4b1a      	ldr	r3, [pc, #104]	; (800580c <SystemInit+0xf4>)
 80057a2:	4a1e      	ldr	r2, [pc, #120]	; (800581c <SystemInit+0x104>)
 80057a4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80057a6:	4b19      	ldr	r3, [pc, #100]	; (800580c <SystemInit+0xf4>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80057ac:	4b17      	ldr	r3, [pc, #92]	; (800580c <SystemInit+0xf4>)
 80057ae:	4a1b      	ldr	r2, [pc, #108]	; (800581c <SystemInit+0x104>)
 80057b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80057b2:	4b16      	ldr	r3, [pc, #88]	; (800580c <SystemInit+0xf4>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80057b8:	4b14      	ldr	r3, [pc, #80]	; (800580c <SystemInit+0xf4>)
 80057ba:	4a18      	ldr	r2, [pc, #96]	; (800581c <SystemInit+0x104>)
 80057bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80057be:	4b13      	ldr	r3, [pc, #76]	; (800580c <SystemInit+0xf4>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80057c4:	4b11      	ldr	r3, [pc, #68]	; (800580c <SystemInit+0xf4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a10      	ldr	r2, [pc, #64]	; (800580c <SystemInit+0xf4>)
 80057ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80057d0:	4b0e      	ldr	r3, [pc, #56]	; (800580c <SystemInit+0xf4>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80057d6:	4b12      	ldr	r3, [pc, #72]	; (8005820 <SystemInit+0x108>)
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	4b12      	ldr	r3, [pc, #72]	; (8005824 <SystemInit+0x10c>)
 80057dc:	4013      	ands	r3, r2
 80057de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057e2:	d202      	bcs.n	80057ea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80057e4:	4b10      	ldr	r3, [pc, #64]	; (8005828 <SystemInit+0x110>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80057ea:	4b10      	ldr	r3, [pc, #64]	; (800582c <SystemInit+0x114>)
 80057ec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80057f0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80057f2:	4b04      	ldr	r3, [pc, #16]	; (8005804 <SystemInit+0xec>)
 80057f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80057f8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80057fa:	bf00      	nop
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	e000ed00 	.word	0xe000ed00
 8005808:	52002000 	.word	0x52002000
 800580c:	58024400 	.word	0x58024400
 8005810:	eaf6ed7f 	.word	0xeaf6ed7f
 8005814:	02020200 	.word	0x02020200
 8005818:	01ff0000 	.word	0x01ff0000
 800581c:	01010280 	.word	0x01010280
 8005820:	5c001000 	.word	0x5c001000
 8005824:	ffff0000 	.word	0xffff0000
 8005828:	51008108 	.word	0x51008108
 800582c:	52004000 	.word	0x52004000

08005830 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b09a      	sub	sp, #104	; 0x68
 8005834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005836:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800583a:	2200      	movs	r2, #0
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	605a      	str	r2, [r3, #4]
 8005840:	609a      	str	r2, [r3, #8]
 8005842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005844:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005848:	2200      	movs	r2, #0
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	605a      	str	r2, [r3, #4]
 800584e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005850:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	605a      	str	r2, [r3, #4]
 800585a:	609a      	str	r2, [r3, #8]
 800585c:	60da      	str	r2, [r3, #12]
 800585e:	611a      	str	r2, [r3, #16]
 8005860:	615a      	str	r2, [r3, #20]
 8005862:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005864:	1d3b      	adds	r3, r7, #4
 8005866:	222c      	movs	r2, #44	; 0x2c
 8005868:	2100      	movs	r1, #0
 800586a:	4618      	mov	r0, r3
 800586c:	f00c ffe8 	bl	8012840 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005870:	4b44      	ldr	r3, [pc, #272]	; (8005984 <MX_TIM1_Init+0x154>)
 8005872:	4a45      	ldr	r2, [pc, #276]	; (8005988 <MX_TIM1_Init+0x158>)
 8005874:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8005876:	4b43      	ldr	r3, [pc, #268]	; (8005984 <MX_TIM1_Init+0x154>)
 8005878:	22c7      	movs	r2, #199	; 0xc7
 800587a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800587c:	4b41      	ldr	r3, [pc, #260]	; (8005984 <MX_TIM1_Init+0x154>)
 800587e:	2200      	movs	r2, #0
 8005880:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8005882:	4b40      	ldr	r3, [pc, #256]	; (8005984 <MX_TIM1_Init+0x154>)
 8005884:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005888:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800588a:	4b3e      	ldr	r3, [pc, #248]	; (8005984 <MX_TIM1_Init+0x154>)
 800588c:	2200      	movs	r2, #0
 800588e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005890:	4b3c      	ldr	r3, [pc, #240]	; (8005984 <MX_TIM1_Init+0x154>)
 8005892:	2200      	movs	r2, #0
 8005894:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005896:	4b3b      	ldr	r3, [pc, #236]	; (8005984 <MX_TIM1_Init+0x154>)
 8005898:	2280      	movs	r2, #128	; 0x80
 800589a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800589c:	4839      	ldr	r0, [pc, #228]	; (8005984 <MX_TIM1_Init+0x154>)
 800589e:	f007 feac 	bl	800d5fa <HAL_TIM_Base_Init>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80058a8:	f7ff faf8 	bl	8004e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80058ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058b0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80058b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80058b6:	4619      	mov	r1, r3
 80058b8:	4832      	ldr	r0, [pc, #200]	; (8005984 <MX_TIM1_Init+0x154>)
 80058ba:	f008 fc73 	bl	800e1a4 <HAL_TIM_ConfigClockSource>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80058c4:	f7ff faea 	bl	8004e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80058c8:	482e      	ldr	r0, [pc, #184]	; (8005984 <MX_TIM1_Init+0x154>)
 80058ca:	f007 ff94 	bl	800d7f6 <HAL_TIM_PWM_Init>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80058d4:	f7ff fae2 	bl	8004e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058d8:	2300      	movs	r3, #0
 80058da:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80058dc:	2300      	movs	r3, #0
 80058de:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058e0:	2300      	movs	r3, #0
 80058e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80058e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80058e8:	4619      	mov	r1, r3
 80058ea:	4826      	ldr	r0, [pc, #152]	; (8005984 <MX_TIM1_Init+0x154>)
 80058ec:	f009 f9ae 	bl	800ec4c <HAL_TIMEx_MasterConfigSynchronization>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80058f6:	f7ff fad1 	bl	8004e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80058fa:	2360      	movs	r3, #96	; 0x60
 80058fc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 80058fe:	f240 1339 	movw	r3, #313	; 0x139
 8005902:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005904:	2300      	movs	r3, #0
 8005906:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005908:	2300      	movs	r3, #0
 800590a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800590c:	2300      	movs	r3, #0
 800590e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005910:	2300      	movs	r3, #0
 8005912:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005914:	2300      	movs	r3, #0
 8005916:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005918:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800591c:	2204      	movs	r2, #4
 800591e:	4619      	mov	r1, r3
 8005920:	4818      	ldr	r0, [pc, #96]	; (8005984 <MX_TIM1_Init+0x154>)
 8005922:	f008 fb2b 	bl	800df7c <HAL_TIM_PWM_ConfigChannel>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800592c:	f7ff fab6 	bl	8004e9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005930:	2300      	movs	r3, #0
 8005932:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005934:	2300      	movs	r3, #0
 8005936:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005938:	2300      	movs	r3, #0
 800593a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800593c:	2300      	movs	r3, #0
 800593e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005940:	2300      	movs	r3, #0
 8005942:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005948:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800594a:	2300      	movs	r3, #0
 800594c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800594e:	2300      	movs	r3, #0
 8005950:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005956:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005958:	2300      	movs	r3, #0
 800595a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800595c:	2300      	movs	r3, #0
 800595e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005960:	1d3b      	adds	r3, r7, #4
 8005962:	4619      	mov	r1, r3
 8005964:	4807      	ldr	r0, [pc, #28]	; (8005984 <MX_TIM1_Init+0x154>)
 8005966:	f009 f9ff 	bl	800ed68 <HAL_TIMEx_ConfigBreakDeadTime>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8005970:	f7ff fa94 	bl	8004e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005974:	4803      	ldr	r0, [pc, #12]	; (8005984 <MX_TIM1_Init+0x154>)
 8005976:	f000 fdd5 	bl	8006524 <HAL_TIM_MspPostInit>

}
 800597a:	bf00      	nop
 800597c:	3768      	adds	r7, #104	; 0x68
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	24000d9c 	.word	0x24000d9c
 8005988:	40010000 	.word	0x40010000

0800598c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08e      	sub	sp, #56	; 0x38
 8005990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005992:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005996:	2200      	movs	r2, #0
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	605a      	str	r2, [r3, #4]
 800599c:	609a      	str	r2, [r3, #8]
 800599e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059a0:	f107 031c 	add.w	r3, r7, #28
 80059a4:	2200      	movs	r2, #0
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	605a      	str	r2, [r3, #4]
 80059aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80059ac:	463b      	mov	r3, r7
 80059ae:	2200      	movs	r2, #0
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	605a      	str	r2, [r3, #4]
 80059b4:	609a      	str	r2, [r3, #8]
 80059b6:	60da      	str	r2, [r3, #12]
 80059b8:	611a      	str	r2, [r3, #16]
 80059ba:	615a      	str	r2, [r3, #20]
 80059bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80059be:	4b2e      	ldr	r3, [pc, #184]	; (8005a78 <MX_TIM2_Init+0xec>)
 80059c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80059c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 80059c6:	4b2c      	ldr	r3, [pc, #176]	; (8005a78 <MX_TIM2_Init+0xec>)
 80059c8:	22c7      	movs	r2, #199	; 0xc7
 80059ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059cc:	4b2a      	ldr	r3, [pc, #168]	; (8005a78 <MX_TIM2_Init+0xec>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 80059d2:	4b29      	ldr	r3, [pc, #164]	; (8005a78 <MX_TIM2_Init+0xec>)
 80059d4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80059d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059da:	4b27      	ldr	r3, [pc, #156]	; (8005a78 <MX_TIM2_Init+0xec>)
 80059dc:	2200      	movs	r2, #0
 80059de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80059e0:	4b25      	ldr	r3, [pc, #148]	; (8005a78 <MX_TIM2_Init+0xec>)
 80059e2:	2280      	movs	r2, #128	; 0x80
 80059e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80059e6:	4824      	ldr	r0, [pc, #144]	; (8005a78 <MX_TIM2_Init+0xec>)
 80059e8:	f007 fe07 	bl	800d5fa <HAL_TIM_Base_Init>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80059f2:	f7ff fa53 	bl	8004e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80059f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80059fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a00:	4619      	mov	r1, r3
 8005a02:	481d      	ldr	r0, [pc, #116]	; (8005a78 <MX_TIM2_Init+0xec>)
 8005a04:	f008 fbce 	bl	800e1a4 <HAL_TIM_ConfigClockSource>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8005a0e:	f7ff fa45 	bl	8004e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005a12:	4819      	ldr	r0, [pc, #100]	; (8005a78 <MX_TIM2_Init+0xec>)
 8005a14:	f007 feef 	bl	800d7f6 <HAL_TIM_PWM_Init>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8005a1e:	f7ff fa3d 	bl	8004e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a22:	2300      	movs	r3, #0
 8005a24:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a26:	2300      	movs	r3, #0
 8005a28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005a2a:	f107 031c 	add.w	r3, r7, #28
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4811      	ldr	r0, [pc, #68]	; (8005a78 <MX_TIM2_Init+0xec>)
 8005a32:	f009 f90b 	bl	800ec4c <HAL_TIMEx_MasterConfigSynchronization>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005a3c:	f7ff fa2e 	bl	8004e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a40:	2360      	movs	r3, #96	; 0x60
 8005a42:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8005a44:	f240 1339 	movw	r3, #313	; 0x139
 8005a48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005a52:	463b      	mov	r3, r7
 8005a54:	2208      	movs	r2, #8
 8005a56:	4619      	mov	r1, r3
 8005a58:	4807      	ldr	r0, [pc, #28]	; (8005a78 <MX_TIM2_Init+0xec>)
 8005a5a:	f008 fa8f 	bl	800df7c <HAL_TIM_PWM_ConfigChannel>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8005a64:	f7ff fa1a 	bl	8004e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005a68:	4803      	ldr	r0, [pc, #12]	; (8005a78 <MX_TIM2_Init+0xec>)
 8005a6a:	f000 fd5b 	bl	8006524 <HAL_TIM_MspPostInit>

}
 8005a6e:	bf00      	nop
 8005a70:	3738      	adds	r7, #56	; 0x38
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	24000de8 	.word	0x24000de8

08005a7c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08e      	sub	sp, #56	; 0x38
 8005a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	605a      	str	r2, [r3, #4]
 8005a8c:	609a      	str	r2, [r3, #8]
 8005a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a90:	f107 031c 	add.w	r3, r7, #28
 8005a94:	2200      	movs	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	605a      	str	r2, [r3, #4]
 8005a9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a9c:	463b      	mov	r3, r7
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	605a      	str	r2, [r3, #4]
 8005aa4:	609a      	str	r2, [r3, #8]
 8005aa6:	60da      	str	r2, [r3, #12]
 8005aa8:	611a      	str	r2, [r3, #16]
 8005aaa:	615a      	str	r2, [r3, #20]
 8005aac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005aae:	4b2d      	ldr	r3, [pc, #180]	; (8005b64 <MX_TIM3_Init+0xe8>)
 8005ab0:	4a2d      	ldr	r2, [pc, #180]	; (8005b68 <MX_TIM3_Init+0xec>)
 8005ab2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8005ab4:	4b2b      	ldr	r3, [pc, #172]	; (8005b64 <MX_TIM3_Init+0xe8>)
 8005ab6:	22c7      	movs	r2, #199	; 0xc7
 8005ab8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005aba:	4b2a      	ldr	r3, [pc, #168]	; (8005b64 <MX_TIM3_Init+0xe8>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 8005ac0:	4b28      	ldr	r3, [pc, #160]	; (8005b64 <MX_TIM3_Init+0xe8>)
 8005ac2:	f640 125f 	movw	r2, #2399	; 0x95f
 8005ac6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ac8:	4b26      	ldr	r3, [pc, #152]	; (8005b64 <MX_TIM3_Init+0xe8>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005ace:	4b25      	ldr	r3, [pc, #148]	; (8005b64 <MX_TIM3_Init+0xe8>)
 8005ad0:	2280      	movs	r2, #128	; 0x80
 8005ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005ad4:	4823      	ldr	r0, [pc, #140]	; (8005b64 <MX_TIM3_Init+0xe8>)
 8005ad6:	f007 fd90 	bl	800d5fa <HAL_TIM_Base_Init>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8005ae0:	f7ff f9dc 	bl	8004e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005aea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005aee:	4619      	mov	r1, r3
 8005af0:	481c      	ldr	r0, [pc, #112]	; (8005b64 <MX_TIM3_Init+0xe8>)
 8005af2:	f008 fb57 	bl	800e1a4 <HAL_TIM_ConfigClockSource>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005afc:	f7ff f9ce 	bl	8004e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005b00:	4818      	ldr	r0, [pc, #96]	; (8005b64 <MX_TIM3_Init+0xe8>)
 8005b02:	f007 fe78 	bl	800d7f6 <HAL_TIM_PWM_Init>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005b0c:	f7ff f9c6 	bl	8004e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b10:	2300      	movs	r3, #0
 8005b12:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b14:	2300      	movs	r3, #0
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005b18:	f107 031c 	add.w	r3, r7, #28
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4811      	ldr	r0, [pc, #68]	; (8005b64 <MX_TIM3_Init+0xe8>)
 8005b20:	f009 f894 	bl	800ec4c <HAL_TIMEx_MasterConfigSynchronization>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005b2a:	f7ff f9b7 	bl	8004e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b2e:	2360      	movs	r3, #96	; 0x60
 8005b30:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005b3e:	463b      	mov	r3, r7
 8005b40:	2200      	movs	r2, #0
 8005b42:	4619      	mov	r1, r3
 8005b44:	4807      	ldr	r0, [pc, #28]	; (8005b64 <MX_TIM3_Init+0xe8>)
 8005b46:	f008 fa19 	bl	800df7c <HAL_TIM_PWM_ConfigChannel>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8005b50:	f7ff f9a4 	bl	8004e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005b54:	4803      	ldr	r0, [pc, #12]	; (8005b64 <MX_TIM3_Init+0xe8>)
 8005b56:	f000 fce5 	bl	8006524 <HAL_TIM_MspPostInit>

}
 8005b5a:	bf00      	nop
 8005b5c:	3738      	adds	r7, #56	; 0x38
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	24000e34 	.word	0x24000e34
 8005b68:	40000400 	.word	0x40000400

08005b6c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08e      	sub	sp, #56	; 0x38
 8005b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b76:	2200      	movs	r2, #0
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	605a      	str	r2, [r3, #4]
 8005b7c:	609a      	str	r2, [r3, #8]
 8005b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b80:	f107 031c 	add.w	r3, r7, #28
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	605a      	str	r2, [r3, #4]
 8005b8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b8c:	463b      	mov	r3, r7
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	605a      	str	r2, [r3, #4]
 8005b94:	609a      	str	r2, [r3, #8]
 8005b96:	60da      	str	r2, [r3, #12]
 8005b98:	611a      	str	r2, [r3, #16]
 8005b9a:	615a      	str	r2, [r3, #20]
 8005b9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005b9e:	4b2d      	ldr	r3, [pc, #180]	; (8005c54 <MX_TIM4_Init+0xe8>)
 8005ba0:	4a2d      	ldr	r2, [pc, #180]	; (8005c58 <MX_TIM4_Init+0xec>)
 8005ba2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8005ba4:	4b2b      	ldr	r3, [pc, #172]	; (8005c54 <MX_TIM4_Init+0xe8>)
 8005ba6:	22ef      	movs	r2, #239	; 0xef
 8005ba8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005baa:	4b2a      	ldr	r3, [pc, #168]	; (8005c54 <MX_TIM4_Init+0xe8>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8005bb0:	4b28      	ldr	r3, [pc, #160]	; (8005c54 <MX_TIM4_Init+0xe8>)
 8005bb2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005bb6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bb8:	4b26      	ldr	r3, [pc, #152]	; (8005c54 <MX_TIM4_Init+0xe8>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005bbe:	4b25      	ldr	r3, [pc, #148]	; (8005c54 <MX_TIM4_Init+0xe8>)
 8005bc0:	2280      	movs	r2, #128	; 0x80
 8005bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005bc4:	4823      	ldr	r0, [pc, #140]	; (8005c54 <MX_TIM4_Init+0xe8>)
 8005bc6:	f007 fd18 	bl	800d5fa <HAL_TIM_Base_Init>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8005bd0:	f7ff f964 	bl	8004e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005bda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bde:	4619      	mov	r1, r3
 8005be0:	481c      	ldr	r0, [pc, #112]	; (8005c54 <MX_TIM4_Init+0xe8>)
 8005be2:	f008 fadf 	bl	800e1a4 <HAL_TIM_ConfigClockSource>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8005bec:	f7ff f956 	bl	8004e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005bf0:	4818      	ldr	r0, [pc, #96]	; (8005c54 <MX_TIM4_Init+0xe8>)
 8005bf2:	f007 fe00 	bl	800d7f6 <HAL_TIM_PWM_Init>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8005bfc:	f7ff f94e 	bl	8004e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c00:	2300      	movs	r3, #0
 8005c02:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c04:	2300      	movs	r3, #0
 8005c06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005c08:	f107 031c 	add.w	r3, r7, #28
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4811      	ldr	r0, [pc, #68]	; (8005c54 <MX_TIM4_Init+0xe8>)
 8005c10:	f009 f81c 	bl	800ec4c <HAL_TIMEx_MasterConfigSynchronization>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005c1a:	f7ff f93f 	bl	8004e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005c1e:	2360      	movs	r3, #96	; 0x60
 8005c20:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005c22:	2300      	movs	r3, #0
 8005c24:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005c2e:	463b      	mov	r3, r7
 8005c30:	2208      	movs	r2, #8
 8005c32:	4619      	mov	r1, r3
 8005c34:	4807      	ldr	r0, [pc, #28]	; (8005c54 <MX_TIM4_Init+0xe8>)
 8005c36:	f008 f9a1 	bl	800df7c <HAL_TIM_PWM_ConfigChannel>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8005c40:	f7ff f92c 	bl	8004e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005c44:	4803      	ldr	r0, [pc, #12]	; (8005c54 <MX_TIM4_Init+0xe8>)
 8005c46:	f000 fc6d 	bl	8006524 <HAL_TIM_MspPostInit>

}
 8005c4a:	bf00      	nop
 8005c4c:	3738      	adds	r7, #56	; 0x38
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	24000e80 	.word	0x24000e80
 8005c58:	40000800 	.word	0x40000800

08005c5c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c62:	f107 0310 	add.w	r3, r7, #16
 8005c66:	2200      	movs	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	605a      	str	r2, [r3, #4]
 8005c6c:	609a      	str	r2, [r3, #8]
 8005c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c70:	1d3b      	adds	r3, r7, #4
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	605a      	str	r2, [r3, #4]
 8005c78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005c7a:	4b1d      	ldr	r3, [pc, #116]	; (8005cf0 <MX_TIM5_Init+0x94>)
 8005c7c:	4a1d      	ldr	r2, [pc, #116]	; (8005cf4 <MX_TIM5_Init+0x98>)
 8005c7e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 8005c80:	4b1b      	ldr	r3, [pc, #108]	; (8005cf0 <MX_TIM5_Init+0x94>)
 8005c82:	22c7      	movs	r2, #199	; 0xc7
 8005c84:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c86:	4b1a      	ldr	r3, [pc, #104]	; (8005cf0 <MX_TIM5_Init+0x94>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8005c8c:	4b18      	ldr	r3, [pc, #96]	; (8005cf0 <MX_TIM5_Init+0x94>)
 8005c8e:	f642 62df 	movw	r2, #11999	; 0x2edf
 8005c92:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c94:	4b16      	ldr	r3, [pc, #88]	; (8005cf0 <MX_TIM5_Init+0x94>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c9a:	4b15      	ldr	r3, [pc, #84]	; (8005cf0 <MX_TIM5_Init+0x94>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005ca0:	4813      	ldr	r0, [pc, #76]	; (8005cf0 <MX_TIM5_Init+0x94>)
 8005ca2:	f007 fcaa 	bl	800d5fa <HAL_TIM_Base_Init>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005cac:	f7ff f8f6 	bl	8004e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005cb6:	f107 0310 	add.w	r3, r7, #16
 8005cba:	4619      	mov	r1, r3
 8005cbc:	480c      	ldr	r0, [pc, #48]	; (8005cf0 <MX_TIM5_Init+0x94>)
 8005cbe:	f008 fa71 	bl	800e1a4 <HAL_TIM_ConfigClockSource>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005cc8:	f7ff f8e8 	bl	8004e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005cd4:	1d3b      	adds	r3, r7, #4
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	4805      	ldr	r0, [pc, #20]	; (8005cf0 <MX_TIM5_Init+0x94>)
 8005cda:	f008 ffb7 	bl	800ec4c <HAL_TIMEx_MasterConfigSynchronization>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005ce4:	f7ff f8da 	bl	8004e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005ce8:	bf00      	nop
 8005cea:	3720      	adds	r7, #32
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	24000ecc 	.word	0x24000ecc
 8005cf4:	40000c00 	.word	0x40000c00

08005cf8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cfe:	1d3b      	adds	r3, r7, #4
 8005d00:	2200      	movs	r2, #0
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	605a      	str	r2, [r3, #4]
 8005d06:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005d08:	4b14      	ldr	r3, [pc, #80]	; (8005d5c <MX_TIM6_Init+0x64>)
 8005d0a:	4a15      	ldr	r2, [pc, #84]	; (8005d60 <MX_TIM6_Init+0x68>)
 8005d0c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 8005d0e:	4b13      	ldr	r3, [pc, #76]	; (8005d5c <MX_TIM6_Init+0x64>)
 8005d10:	22c7      	movs	r2, #199	; 0xc7
 8005d12:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d14:	4b11      	ldr	r3, [pc, #68]	; (8005d5c <MX_TIM6_Init+0x64>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 8005d1a:	4b10      	ldr	r3, [pc, #64]	; (8005d5c <MX_TIM6_Init+0x64>)
 8005d1c:	f241 726f 	movw	r2, #5999	; 0x176f
 8005d20:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005d22:	4b0e      	ldr	r3, [pc, #56]	; (8005d5c <MX_TIM6_Init+0x64>)
 8005d24:	2280      	movs	r2, #128	; 0x80
 8005d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005d28:	480c      	ldr	r0, [pc, #48]	; (8005d5c <MX_TIM6_Init+0x64>)
 8005d2a:	f007 fc66 	bl	800d5fa <HAL_TIM_Base_Init>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8005d34:	f7ff f8b2 	bl	8004e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005d40:	1d3b      	adds	r3, r7, #4
 8005d42:	4619      	mov	r1, r3
 8005d44:	4805      	ldr	r0, [pc, #20]	; (8005d5c <MX_TIM6_Init+0x64>)
 8005d46:	f008 ff81 	bl	800ec4c <HAL_TIMEx_MasterConfigSynchronization>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8005d50:	f7ff f8a4 	bl	8004e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005d54:	bf00      	nop
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	24000f18 	.word	0x24000f18
 8005d60:	40001000 	.word	0x40001000

08005d64 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d6a:	1d3b      	adds	r3, r7, #4
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	605a      	str	r2, [r3, #4]
 8005d72:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005d74:	4b14      	ldr	r3, [pc, #80]	; (8005dc8 <MX_TIM7_Init+0x64>)
 8005d76:	4a15      	ldr	r2, [pc, #84]	; (8005dcc <MX_TIM7_Init+0x68>)
 8005d78:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8005d7a:	4b13      	ldr	r3, [pc, #76]	; (8005dc8 <MX_TIM7_Init+0x64>)
 8005d7c:	22c7      	movs	r2, #199	; 0xc7
 8005d7e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d80:	4b11      	ldr	r3, [pc, #68]	; (8005dc8 <MX_TIM7_Init+0x64>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8005d86:	4b10      	ldr	r3, [pc, #64]	; (8005dc8 <MX_TIM7_Init+0x64>)
 8005d88:	f240 42af 	movw	r2, #1199	; 0x4af
 8005d8c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005d8e:	4b0e      	ldr	r3, [pc, #56]	; (8005dc8 <MX_TIM7_Init+0x64>)
 8005d90:	2280      	movs	r2, #128	; 0x80
 8005d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005d94:	480c      	ldr	r0, [pc, #48]	; (8005dc8 <MX_TIM7_Init+0x64>)
 8005d96:	f007 fc30 	bl	800d5fa <HAL_TIM_Base_Init>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005da0:	f7ff f87c 	bl	8004e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005da4:	2300      	movs	r3, #0
 8005da6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005da8:	2300      	movs	r3, #0
 8005daa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005dac:	1d3b      	adds	r3, r7, #4
 8005dae:	4619      	mov	r1, r3
 8005db0:	4805      	ldr	r0, [pc, #20]	; (8005dc8 <MX_TIM7_Init+0x64>)
 8005db2:	f008 ff4b 	bl	800ec4c <HAL_TIMEx_MasterConfigSynchronization>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005dbc:	f7ff f86e 	bl	8004e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005dc0:	bf00      	nop
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	24000f64 	.word	0x24000f64
 8005dcc:	40001400 	.word	0x40001400

08005dd0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08c      	sub	sp, #48	; 0x30
 8005dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005dd6:	f107 030c 	add.w	r3, r7, #12
 8005dda:	2224      	movs	r2, #36	; 0x24
 8005ddc:	2100      	movs	r1, #0
 8005dde:	4618      	mov	r0, r3
 8005de0:	f00c fd2e 	bl	8012840 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005de4:	463b      	mov	r3, r7
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	605a      	str	r2, [r3, #4]
 8005dec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005dee:	4b23      	ldr	r3, [pc, #140]	; (8005e7c <MX_TIM8_Init+0xac>)
 8005df0:	4a23      	ldr	r2, [pc, #140]	; (8005e80 <MX_TIM8_Init+0xb0>)
 8005df2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005df4:	4b21      	ldr	r3, [pc, #132]	; (8005e7c <MX_TIM8_Init+0xac>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dfa:	4b20      	ldr	r3, [pc, #128]	; (8005e7c <MX_TIM8_Init+0xac>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2048-1;
 8005e00:	4b1e      	ldr	r3, [pc, #120]	; (8005e7c <MX_TIM8_Init+0xac>)
 8005e02:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005e06:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e08:	4b1c      	ldr	r3, [pc, #112]	; (8005e7c <MX_TIM8_Init+0xac>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005e0e:	4b1b      	ldr	r3, [pc, #108]	; (8005e7c <MX_TIM8_Init+0xac>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005e14:	4b19      	ldr	r3, [pc, #100]	; (8005e7c <MX_TIM8_Init+0xac>)
 8005e16:	2280      	movs	r2, #128	; 0x80
 8005e18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005e22:	2301      	movs	r3, #1
 8005e24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005e26:	2300      	movs	r3, #0
 8005e28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8005e2a:	230f      	movs	r3, #15
 8005e2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005e32:	2301      	movs	r3, #1
 8005e34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005e36:	2300      	movs	r3, #0
 8005e38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8005e3a:	230f      	movs	r3, #15
 8005e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8005e3e:	f107 030c 	add.w	r3, r7, #12
 8005e42:	4619      	mov	r1, r3
 8005e44:	480d      	ldr	r0, [pc, #52]	; (8005e7c <MX_TIM8_Init+0xac>)
 8005e46:	f007 fe45 	bl	800dad4 <HAL_TIM_Encoder_Init>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8005e50:	f7ff f824 	bl	8004e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e54:	2300      	movs	r3, #0
 8005e56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005e60:	463b      	mov	r3, r7
 8005e62:	4619      	mov	r1, r3
 8005e64:	4805      	ldr	r0, [pc, #20]	; (8005e7c <MX_TIM8_Init+0xac>)
 8005e66:	f008 fef1 	bl	800ec4c <HAL_TIMEx_MasterConfigSynchronization>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8005e70:	f7ff f814 	bl	8004e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005e74:	bf00      	nop
 8005e76:	3730      	adds	r7, #48	; 0x30
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	24000fb0 	.word	0x24000fb0
 8005e80:	40010400 	.word	0x40010400

08005e84 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e8a:	463b      	mov	r3, r7
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	605a      	str	r2, [r3, #4]
 8005e92:	609a      	str	r2, [r3, #8]
 8005e94:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8005e96:	4b16      	ldr	r3, [pc, #88]	; (8005ef0 <MX_TIM12_Init+0x6c>)
 8005e98:	4a16      	ldr	r2, [pc, #88]	; (8005ef4 <MX_TIM12_Init+0x70>)
 8005e9a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8005e9c:	4b14      	ldr	r3, [pc, #80]	; (8005ef0 <MX_TIM12_Init+0x6c>)
 8005e9e:	22c7      	movs	r2, #199	; 0xc7
 8005ea0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ea2:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <MX_TIM12_Init+0x6c>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8005ea8:	4b11      	ldr	r3, [pc, #68]	; (8005ef0 <MX_TIM12_Init+0x6c>)
 8005eaa:	f240 2257 	movw	r2, #599	; 0x257
 8005eae:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005eb0:	4b0f      	ldr	r3, [pc, #60]	; (8005ef0 <MX_TIM12_Init+0x6c>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005eb6:	4b0e      	ldr	r3, [pc, #56]	; (8005ef0 <MX_TIM12_Init+0x6c>)
 8005eb8:	2280      	movs	r2, #128	; 0x80
 8005eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8005ebc:	480c      	ldr	r0, [pc, #48]	; (8005ef0 <MX_TIM12_Init+0x6c>)
 8005ebe:	f007 fb9c 	bl	800d5fa <HAL_TIM_Base_Init>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8005ec8:	f7fe ffe8 	bl	8004e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ed0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8005ed2:	463b      	mov	r3, r7
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4806      	ldr	r0, [pc, #24]	; (8005ef0 <MX_TIM12_Init+0x6c>)
 8005ed8:	f008 f964 	bl	800e1a4 <HAL_TIM_ConfigClockSource>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8005ee2:	f7fe ffdb 	bl	8004e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8005ee6:	bf00      	nop
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	24000ffc 	.word	0x24000ffc
 8005ef4:	40001800 	.word	0x40001800

08005ef8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005efc:	4b0e      	ldr	r3, [pc, #56]	; (8005f38 <MX_TIM13_Init+0x40>)
 8005efe:	4a0f      	ldr	r2, [pc, #60]	; (8005f3c <MX_TIM13_Init+0x44>)
 8005f00:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 8005f02:	4b0d      	ldr	r3, [pc, #52]	; (8005f38 <MX_TIM13_Init+0x40>)
 8005f04:	22c7      	movs	r2, #199	; 0xc7
 8005f06:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f08:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <MX_TIM13_Init+0x40>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8005f0e:	4b0a      	ldr	r3, [pc, #40]	; (8005f38 <MX_TIM13_Init+0x40>)
 8005f10:	f240 2257 	movw	r2, #599	; 0x257
 8005f14:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f16:	4b08      	ldr	r3, [pc, #32]	; (8005f38 <MX_TIM13_Init+0x40>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005f1c:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <MX_TIM13_Init+0x40>)
 8005f1e:	2280      	movs	r2, #128	; 0x80
 8005f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005f22:	4805      	ldr	r0, [pc, #20]	; (8005f38 <MX_TIM13_Init+0x40>)
 8005f24:	f007 fb69 	bl	800d5fa <HAL_TIM_Base_Init>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8005f2e:	f7fe ffb5 	bl	8004e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8005f32:	bf00      	nop
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	24001048 	.word	0x24001048
 8005f3c:	40001c00 	.word	0x40001c00

08005f40 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8005f44:	4b0e      	ldr	r3, [pc, #56]	; (8005f80 <MX_TIM14_Init+0x40>)
 8005f46:	4a0f      	ldr	r2, [pc, #60]	; (8005f84 <MX_TIM14_Init+0x44>)
 8005f48:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8005f4a:	4b0d      	ldr	r3, [pc, #52]	; (8005f80 <MX_TIM14_Init+0x40>)
 8005f4c:	22c7      	movs	r2, #199	; 0xc7
 8005f4e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f50:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <MX_TIM14_Init+0x40>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 8005f56:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <MX_TIM14_Init+0x40>)
 8005f58:	f640 125f 	movw	r2, #2399	; 0x95f
 8005f5c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f5e:	4b08      	ldr	r3, [pc, #32]	; (8005f80 <MX_TIM14_Init+0x40>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005f64:	4b06      	ldr	r3, [pc, #24]	; (8005f80 <MX_TIM14_Init+0x40>)
 8005f66:	2280      	movs	r2, #128	; 0x80
 8005f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005f6a:	4805      	ldr	r0, [pc, #20]	; (8005f80 <MX_TIM14_Init+0x40>)
 8005f6c:	f007 fb45 	bl	800d5fa <HAL_TIM_Base_Init>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8005f76:	f7fe ff91 	bl	8004e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8005f7a:	bf00      	nop
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	24001094 	.word	0x24001094
 8005f84:	40002000 	.word	0x40002000

08005f88 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b09a      	sub	sp, #104	; 0x68
 8005f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005f92:	2200      	movs	r2, #0
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	605a      	str	r2, [r3, #4]
 8005f98:	609a      	str	r2, [r3, #8]
 8005f9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	601a      	str	r2, [r3, #0]
 8005fa4:	605a      	str	r2, [r3, #4]
 8005fa6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005fa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	605a      	str	r2, [r3, #4]
 8005fb2:	609a      	str	r2, [r3, #8]
 8005fb4:	60da      	str	r2, [r3, #12]
 8005fb6:	611a      	str	r2, [r3, #16]
 8005fb8:	615a      	str	r2, [r3, #20]
 8005fba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005fbc:	1d3b      	adds	r3, r7, #4
 8005fbe:	222c      	movs	r2, #44	; 0x2c
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f00c fc3c 	bl	8012840 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005fc8:	4b3f      	ldr	r3, [pc, #252]	; (80060c8 <MX_TIM15_Init+0x140>)
 8005fca:	4a40      	ldr	r2, [pc, #256]	; (80060cc <MX_TIM15_Init+0x144>)
 8005fcc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8005fce:	4b3e      	ldr	r3, [pc, #248]	; (80060c8 <MX_TIM15_Init+0x140>)
 8005fd0:	22ef      	movs	r2, #239	; 0xef
 8005fd2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fd4:	4b3c      	ldr	r3, [pc, #240]	; (80060c8 <MX_TIM15_Init+0x140>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8005fda:	4b3b      	ldr	r3, [pc, #236]	; (80060c8 <MX_TIM15_Init+0x140>)
 8005fdc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005fe0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fe2:	4b39      	ldr	r3, [pc, #228]	; (80060c8 <MX_TIM15_Init+0x140>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005fe8:	4b37      	ldr	r3, [pc, #220]	; (80060c8 <MX_TIM15_Init+0x140>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005fee:	4b36      	ldr	r3, [pc, #216]	; (80060c8 <MX_TIM15_Init+0x140>)
 8005ff0:	2280      	movs	r2, #128	; 0x80
 8005ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005ff4:	4834      	ldr	r0, [pc, #208]	; (80060c8 <MX_TIM15_Init+0x140>)
 8005ff6:	f007 fb00 	bl	800d5fa <HAL_TIM_Base_Init>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8006000:	f7fe ff4c 	bl	8004e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006008:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800600a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800600e:	4619      	mov	r1, r3
 8006010:	482d      	ldr	r0, [pc, #180]	; (80060c8 <MX_TIM15_Init+0x140>)
 8006012:	f008 f8c7 	bl	800e1a4 <HAL_TIM_ConfigClockSource>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800601c:	f7fe ff3e 	bl	8004e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8006020:	4829      	ldr	r0, [pc, #164]	; (80060c8 <MX_TIM15_Init+0x140>)
 8006022:	f007 fbe8 	bl	800d7f6 <HAL_TIM_PWM_Init>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800602c:	f7fe ff36 	bl	8004e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006030:	2300      	movs	r3, #0
 8006032:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006034:	2300      	movs	r3, #0
 8006036:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8006038:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800603c:	4619      	mov	r1, r3
 800603e:	4822      	ldr	r0, [pc, #136]	; (80060c8 <MX_TIM15_Init+0x140>)
 8006040:	f008 fe04 	bl	800ec4c <HAL_TIMEx_MasterConfigSynchronization>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800604a:	f7fe ff27 	bl	8004e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800604e:	2360      	movs	r3, #96	; 0x60
 8006050:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8006052:	f240 1339 	movw	r3, #313	; 0x139
 8006056:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006058:	2300      	movs	r3, #0
 800605a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800605c:	2300      	movs	r3, #0
 800605e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006060:	2300      	movs	r3, #0
 8006062:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006064:	2300      	movs	r3, #0
 8006066:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006068:	2300      	movs	r3, #0
 800606a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800606c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006070:	2204      	movs	r2, #4
 8006072:	4619      	mov	r1, r3
 8006074:	4814      	ldr	r0, [pc, #80]	; (80060c8 <MX_TIM15_Init+0x140>)
 8006076:	f007 ff81 	bl	800df7c <HAL_TIM_PWM_ConfigChannel>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8006080:	f7fe ff0c 	bl	8004e9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006084:	2300      	movs	r3, #0
 8006086:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006088:	2300      	movs	r3, #0
 800608a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800608c:	2300      	movs	r3, #0
 800608e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006094:	2300      	movs	r3, #0
 8006096:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006098:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800609c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800609e:	2300      	movs	r3, #0
 80060a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80060a2:	2300      	movs	r3, #0
 80060a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80060a6:	1d3b      	adds	r3, r7, #4
 80060a8:	4619      	mov	r1, r3
 80060aa:	4807      	ldr	r0, [pc, #28]	; (80060c8 <MX_TIM15_Init+0x140>)
 80060ac:	f008 fe5c 	bl	800ed68 <HAL_TIMEx_ConfigBreakDeadTime>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 80060b6:	f7fe fef1 	bl	8004e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80060ba:	4803      	ldr	r0, [pc, #12]	; (80060c8 <MX_TIM15_Init+0x140>)
 80060bc:	f000 fa32 	bl	8006524 <HAL_TIM_MspPostInit>

}
 80060c0:	bf00      	nop
 80060c2:	3768      	adds	r7, #104	; 0x68
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	240010e0 	.word	0x240010e0
 80060cc:	40014000 	.word	0x40014000

080060d0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80060d4:	4b0f      	ldr	r3, [pc, #60]	; (8006114 <MX_TIM16_Init+0x44>)
 80060d6:	4a10      	ldr	r2, [pc, #64]	; (8006118 <MX_TIM16_Init+0x48>)
 80060d8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 240-1;
 80060da:	4b0e      	ldr	r3, [pc, #56]	; (8006114 <MX_TIM16_Init+0x44>)
 80060dc:	22ef      	movs	r2, #239	; 0xef
 80060de:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060e0:	4b0c      	ldr	r3, [pc, #48]	; (8006114 <MX_TIM16_Init+0x44>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 80060e6:	4b0b      	ldr	r3, [pc, #44]	; (8006114 <MX_TIM16_Init+0x44>)
 80060e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80060ec:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060ee:	4b09      	ldr	r3, [pc, #36]	; (8006114 <MX_TIM16_Init+0x44>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80060f4:	4b07      	ldr	r3, [pc, #28]	; (8006114 <MX_TIM16_Init+0x44>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80060fa:	4b06      	ldr	r3, [pc, #24]	; (8006114 <MX_TIM16_Init+0x44>)
 80060fc:	2280      	movs	r2, #128	; 0x80
 80060fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006100:	4804      	ldr	r0, [pc, #16]	; (8006114 <MX_TIM16_Init+0x44>)
 8006102:	f007 fa7a 	bl	800d5fa <HAL_TIM_Base_Init>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d001      	beq.n	8006110 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800610c:	f7fe fec6 	bl	8004e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8006110:	bf00      	nop
 8006112:	bd80      	pop	{r7, pc}
 8006114:	2400112c 	.word	0x2400112c
 8006118:	40014400 	.word	0x40014400

0800611c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8006120:	4b10      	ldr	r3, [pc, #64]	; (8006164 <MX_TIM17_Init+0x48>)
 8006122:	4a11      	ldr	r2, [pc, #68]	; (8006168 <MX_TIM17_Init+0x4c>)
 8006124:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2400-1;
 8006126:	4b0f      	ldr	r3, [pc, #60]	; (8006164 <MX_TIM17_Init+0x48>)
 8006128:	f640 125f 	movw	r2, #2399	; 0x95f
 800612c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800612e:	4b0d      	ldr	r3, [pc, #52]	; (8006164 <MX_TIM17_Init+0x48>)
 8006130:	2200      	movs	r2, #0
 8006132:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2000-1;
 8006134:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <MX_TIM17_Init+0x48>)
 8006136:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800613a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800613c:	4b09      	ldr	r3, [pc, #36]	; (8006164 <MX_TIM17_Init+0x48>)
 800613e:	2200      	movs	r2, #0
 8006140:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8006142:	4b08      	ldr	r3, [pc, #32]	; (8006164 <MX_TIM17_Init+0x48>)
 8006144:	2200      	movs	r2, #0
 8006146:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006148:	4b06      	ldr	r3, [pc, #24]	; (8006164 <MX_TIM17_Init+0x48>)
 800614a:	2280      	movs	r2, #128	; 0x80
 800614c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800614e:	4805      	ldr	r0, [pc, #20]	; (8006164 <MX_TIM17_Init+0x48>)
 8006150:	f007 fa53 	bl	800d5fa <HAL_TIM_Base_Init>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 800615a:	f7fe fe9f 	bl	8004e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800615e:	bf00      	nop
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	24001178 	.word	0x24001178
 8006168:	40014800 	.word	0x40014800

0800616c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b090      	sub	sp, #64	; 0x40
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4aa8      	ldr	r2, [pc, #672]	; (800641c <HAL_TIM_Base_MspInit+0x2b0>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d10f      	bne.n	800619e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800617e:	4ba8      	ldr	r3, [pc, #672]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 8006180:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006184:	4aa6      	ldr	r2, [pc, #664]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 8006186:	f043 0301 	orr.w	r3, r3, #1
 800618a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800618e:	4ba4      	ldr	r3, [pc, #656]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 8006190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800619a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800619c:	e13a      	b.n	8006414 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM2)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a6:	d10f      	bne.n	80061c8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80061a8:	4b9d      	ldr	r3, [pc, #628]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 80061aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061ae:	4a9c      	ldr	r2, [pc, #624]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 80061b0:	f043 0301 	orr.w	r3, r3, #1
 80061b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80061b8:	4b99      	ldr	r3, [pc, #612]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 80061ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80061c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80061c6:	e125      	b.n	8006414 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM3)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a95      	ldr	r2, [pc, #596]	; (8006424 <HAL_TIM_Base_MspInit+0x2b8>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d10f      	bne.n	80061f2 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80061d2:	4b93      	ldr	r3, [pc, #588]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 80061d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061d8:	4a91      	ldr	r2, [pc, #580]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 80061da:	f043 0302 	orr.w	r3, r3, #2
 80061de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80061e2:	4b8f      	ldr	r3, [pc, #572]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 80061e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	637b      	str	r3, [r7, #52]	; 0x34
 80061ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80061f0:	e110      	b.n	8006414 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM4)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a8c      	ldr	r2, [pc, #560]	; (8006428 <HAL_TIM_Base_MspInit+0x2bc>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d10f      	bne.n	800621c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80061fc:	4b88      	ldr	r3, [pc, #544]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 80061fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006202:	4a87      	ldr	r2, [pc, #540]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 8006204:	f043 0304 	orr.w	r3, r3, #4
 8006208:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800620c:	4b84      	ldr	r3, [pc, #528]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 800620e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006212:	f003 0304 	and.w	r3, r3, #4
 8006216:	633b      	str	r3, [r7, #48]	; 0x30
 8006218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800621a:	e0fb      	b.n	8006414 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM5)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a82      	ldr	r2, [pc, #520]	; (800642c <HAL_TIM_Base_MspInit+0x2c0>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d117      	bne.n	8006256 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006226:	4b7e      	ldr	r3, [pc, #504]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 8006228:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800622c:	4a7c      	ldr	r2, [pc, #496]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 800622e:	f043 0308 	orr.w	r3, r3, #8
 8006232:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006236:	4b7a      	ldr	r3, [pc, #488]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 8006238:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800623c:	f003 0308 	and.w	r3, r3, #8
 8006240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8006244:	2200      	movs	r2, #0
 8006246:	2100      	movs	r1, #0
 8006248:	2032      	movs	r0, #50	; 0x32
 800624a:	f001 f838 	bl	80072be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800624e:	2032      	movs	r0, #50	; 0x32
 8006250:	f001 f84f 	bl	80072f2 <HAL_NVIC_EnableIRQ>
}
 8006254:	e0de      	b.n	8006414 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM6)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a75      	ldr	r2, [pc, #468]	; (8006430 <HAL_TIM_Base_MspInit+0x2c4>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d117      	bne.n	8006290 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006260:	4b6f      	ldr	r3, [pc, #444]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 8006262:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006266:	4a6e      	ldr	r2, [pc, #440]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 8006268:	f043 0310 	orr.w	r3, r3, #16
 800626c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006270:	4b6b      	ldr	r3, [pc, #428]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 8006272:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006276:	f003 0310 	and.w	r3, r3, #16
 800627a:	62bb      	str	r3, [r7, #40]	; 0x28
 800627c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800627e:	2200      	movs	r2, #0
 8006280:	2100      	movs	r1, #0
 8006282:	2036      	movs	r0, #54	; 0x36
 8006284:	f001 f81b 	bl	80072be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006288:	2036      	movs	r0, #54	; 0x36
 800628a:	f001 f832 	bl	80072f2 <HAL_NVIC_EnableIRQ>
}
 800628e:	e0c1      	b.n	8006414 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM7)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a67      	ldr	r2, [pc, #412]	; (8006434 <HAL_TIM_Base_MspInit+0x2c8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d117      	bne.n	80062ca <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800629a:	4b61      	ldr	r3, [pc, #388]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 800629c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062a0:	4a5f      	ldr	r2, [pc, #380]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 80062a2:	f043 0320 	orr.w	r3, r3, #32
 80062a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80062aa:	4b5d      	ldr	r3, [pc, #372]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 80062ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	627b      	str	r3, [r7, #36]	; 0x24
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80062b8:	2200      	movs	r2, #0
 80062ba:	2100      	movs	r1, #0
 80062bc:	2037      	movs	r0, #55	; 0x37
 80062be:	f000 fffe 	bl	80072be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80062c2:	2037      	movs	r0, #55	; 0x37
 80062c4:	f001 f815 	bl	80072f2 <HAL_NVIC_EnableIRQ>
}
 80062c8:	e0a4      	b.n	8006414 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM12)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a5a      	ldr	r2, [pc, #360]	; (8006438 <HAL_TIM_Base_MspInit+0x2cc>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d117      	bne.n	8006304 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80062d4:	4b52      	ldr	r3, [pc, #328]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 80062d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062da:	4a51      	ldr	r2, [pc, #324]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 80062dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80062e4:	4b4e      	ldr	r3, [pc, #312]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 80062e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ee:	623b      	str	r3, [r7, #32]
 80062f0:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80062f2:	2200      	movs	r2, #0
 80062f4:	2100      	movs	r1, #0
 80062f6:	202b      	movs	r0, #43	; 0x2b
 80062f8:	f000 ffe1 	bl	80072be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80062fc:	202b      	movs	r0, #43	; 0x2b
 80062fe:	f000 fff8 	bl	80072f2 <HAL_NVIC_EnableIRQ>
}
 8006302:	e087      	b.n	8006414 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM13)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a4c      	ldr	r2, [pc, #304]	; (800643c <HAL_TIM_Base_MspInit+0x2d0>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d117      	bne.n	800633e <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800630e:	4b44      	ldr	r3, [pc, #272]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 8006310:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006314:	4a42      	ldr	r2, [pc, #264]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 8006316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800631a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800631e:	4b40      	ldr	r3, [pc, #256]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 8006320:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006328:	61fb      	str	r3, [r7, #28]
 800632a:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800632c:	2200      	movs	r2, #0
 800632e:	2100      	movs	r1, #0
 8006330:	202c      	movs	r0, #44	; 0x2c
 8006332:	f000 ffc4 	bl	80072be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006336:	202c      	movs	r0, #44	; 0x2c
 8006338:	f000 ffdb 	bl	80072f2 <HAL_NVIC_EnableIRQ>
}
 800633c:	e06a      	b.n	8006414 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM14)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a3f      	ldr	r2, [pc, #252]	; (8006440 <HAL_TIM_Base_MspInit+0x2d4>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d117      	bne.n	8006378 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006348:	4b35      	ldr	r3, [pc, #212]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 800634a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800634e:	4a34      	ldr	r2, [pc, #208]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 8006350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006354:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006358:	4b31      	ldr	r3, [pc, #196]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 800635a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800635e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006362:	61bb      	str	r3, [r7, #24]
 8006364:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8006366:	2200      	movs	r2, #0
 8006368:	2100      	movs	r1, #0
 800636a:	202d      	movs	r0, #45	; 0x2d
 800636c:	f000 ffa7 	bl	80072be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8006370:	202d      	movs	r0, #45	; 0x2d
 8006372:	f000 ffbe 	bl	80072f2 <HAL_NVIC_EnableIRQ>
}
 8006376:	e04d      	b.n	8006414 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM15)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a31      	ldr	r2, [pc, #196]	; (8006444 <HAL_TIM_Base_MspInit+0x2d8>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d10f      	bne.n	80063a2 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006382:	4b27      	ldr	r3, [pc, #156]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 8006384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006388:	4a25      	ldr	r2, [pc, #148]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 800638a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800638e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006392:	4b23      	ldr	r3, [pc, #140]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 8006394:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	697b      	ldr	r3, [r7, #20]
}
 80063a0:	e038      	b.n	8006414 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM16)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a28      	ldr	r2, [pc, #160]	; (8006448 <HAL_TIM_Base_MspInit+0x2dc>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d117      	bne.n	80063dc <HAL_TIM_Base_MspInit+0x270>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80063ac:	4b1c      	ldr	r3, [pc, #112]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 80063ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063b2:	4a1b      	ldr	r2, [pc, #108]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 80063b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80063bc:	4b18      	ldr	r3, [pc, #96]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 80063be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c6:	613b      	str	r3, [r7, #16]
 80063c8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80063ca:	2200      	movs	r2, #0
 80063cc:	2100      	movs	r1, #0
 80063ce:	2075      	movs	r0, #117	; 0x75
 80063d0:	f000 ff75 	bl	80072be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80063d4:	2075      	movs	r0, #117	; 0x75
 80063d6:	f000 ff8c 	bl	80072f2 <HAL_NVIC_EnableIRQ>
}
 80063da:	e01b      	b.n	8006414 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM17)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a1a      	ldr	r2, [pc, #104]	; (800644c <HAL_TIM_Base_MspInit+0x2e0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d116      	bne.n	8006414 <HAL_TIM_Base_MspInit+0x2a8>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80063e6:	4b0e      	ldr	r3, [pc, #56]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 80063e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063ec:	4a0c      	ldr	r2, [pc, #48]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 80063ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80063f6:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <HAL_TIM_Base_MspInit+0x2b4>)
 80063f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8006404:	2200      	movs	r2, #0
 8006406:	2100      	movs	r1, #0
 8006408:	2076      	movs	r0, #118	; 0x76
 800640a:	f000 ff58 	bl	80072be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800640e:	2076      	movs	r0, #118	; 0x76
 8006410:	f000 ff6f 	bl	80072f2 <HAL_NVIC_EnableIRQ>
}
 8006414:	bf00      	nop
 8006416:	3740      	adds	r7, #64	; 0x40
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	40010000 	.word	0x40010000
 8006420:	58024400 	.word	0x58024400
 8006424:	40000400 	.word	0x40000400
 8006428:	40000800 	.word	0x40000800
 800642c:	40000c00 	.word	0x40000c00
 8006430:	40001000 	.word	0x40001000
 8006434:	40001400 	.word	0x40001400
 8006438:	40001800 	.word	0x40001800
 800643c:	40001c00 	.word	0x40001c00
 8006440:	40002000 	.word	0x40002000
 8006444:	40014000 	.word	0x40014000
 8006448:	40014400 	.word	0x40014400
 800644c:	40014800 	.word	0x40014800

08006450 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08a      	sub	sp, #40	; 0x28
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006458:	f107 0314 	add.w	r3, r7, #20
 800645c:	2200      	movs	r2, #0
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	605a      	str	r2, [r3, #4]
 8006462:	609a      	str	r2, [r3, #8]
 8006464:	60da      	str	r2, [r3, #12]
 8006466:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a2a      	ldr	r2, [pc, #168]	; (8006518 <HAL_TIM_Encoder_MspInit+0xc8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d14d      	bne.n	800650e <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006472:	4b2a      	ldr	r3, [pc, #168]	; (800651c <HAL_TIM_Encoder_MspInit+0xcc>)
 8006474:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006478:	4a28      	ldr	r2, [pc, #160]	; (800651c <HAL_TIM_Encoder_MspInit+0xcc>)
 800647a:	f043 0302 	orr.w	r3, r3, #2
 800647e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006482:	4b26      	ldr	r3, [pc, #152]	; (800651c <HAL_TIM_Encoder_MspInit+0xcc>)
 8006484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	613b      	str	r3, [r7, #16]
 800648e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006490:	4b22      	ldr	r3, [pc, #136]	; (800651c <HAL_TIM_Encoder_MspInit+0xcc>)
 8006492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006496:	4a21      	ldr	r2, [pc, #132]	; (800651c <HAL_TIM_Encoder_MspInit+0xcc>)
 8006498:	f043 0304 	orr.w	r3, r3, #4
 800649c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80064a0:	4b1e      	ldr	r3, [pc, #120]	; (800651c <HAL_TIM_Encoder_MspInit+0xcc>)
 80064a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064a6:	f003 0304 	and.w	r3, r3, #4
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80064ae:	23c0      	movs	r3, #192	; 0xc0
 80064b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064b2:	2302      	movs	r3, #2
 80064b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b6:	2300      	movs	r3, #0
 80064b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064ba:	2300      	movs	r3, #0
 80064bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80064be:	2303      	movs	r3, #3
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064c2:	f107 0314 	add.w	r3, r7, #20
 80064c6:	4619      	mov	r1, r3
 80064c8:	4815      	ldr	r0, [pc, #84]	; (8006520 <HAL_TIM_Encoder_MspInit+0xd0>)
 80064ca:	f003 ff73 	bl	800a3b4 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80064ce:	2200      	movs	r2, #0
 80064d0:	2100      	movs	r1, #0
 80064d2:	202b      	movs	r0, #43	; 0x2b
 80064d4:	f000 fef3 	bl	80072be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80064d8:	202b      	movs	r0, #43	; 0x2b
 80064da:	f000 ff0a 	bl	80072f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80064de:	2200      	movs	r2, #0
 80064e0:	2100      	movs	r1, #0
 80064e2:	202c      	movs	r0, #44	; 0x2c
 80064e4:	f000 feeb 	bl	80072be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80064e8:	202c      	movs	r0, #44	; 0x2c
 80064ea:	f000 ff02 	bl	80072f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80064ee:	2200      	movs	r2, #0
 80064f0:	2100      	movs	r1, #0
 80064f2:	202d      	movs	r0, #45	; 0x2d
 80064f4:	f000 fee3 	bl	80072be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80064f8:	202d      	movs	r0, #45	; 0x2d
 80064fa:	f000 fefa 	bl	80072f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80064fe:	2200      	movs	r2, #0
 8006500:	2100      	movs	r1, #0
 8006502:	202e      	movs	r0, #46	; 0x2e
 8006504:	f000 fedb 	bl	80072be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8006508:	202e      	movs	r0, #46	; 0x2e
 800650a:	f000 fef2 	bl	80072f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800650e:	bf00      	nop
 8006510:	3728      	adds	r7, #40	; 0x28
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	40010400 	.word	0x40010400
 800651c:	58024400 	.word	0x58024400
 8006520:	58020800 	.word	0x58020800

08006524 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b08c      	sub	sp, #48	; 0x30
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800652c:	f107 031c 	add.w	r3, r7, #28
 8006530:	2200      	movs	r2, #0
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	605a      	str	r2, [r3, #4]
 8006536:	609a      	str	r2, [r3, #8]
 8006538:	60da      	str	r2, [r3, #12]
 800653a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a5e      	ldr	r2, [pc, #376]	; (80066bc <HAL_TIM_MspPostInit+0x198>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d120      	bne.n	8006588 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006546:	4b5e      	ldr	r3, [pc, #376]	; (80066c0 <HAL_TIM_MspPostInit+0x19c>)
 8006548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800654c:	4a5c      	ldr	r2, [pc, #368]	; (80066c0 <HAL_TIM_MspPostInit+0x19c>)
 800654e:	f043 0310 	orr.w	r3, r3, #16
 8006552:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006556:	4b5a      	ldr	r3, [pc, #360]	; (80066c0 <HAL_TIM_MspPostInit+0x19c>)
 8006558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	61bb      	str	r3, [r7, #24]
 8006562:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8006564:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800656a:	2302      	movs	r3, #2
 800656c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800656e:	2300      	movs	r3, #0
 8006570:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006572:	2300      	movs	r3, #0
 8006574:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006576:	2301      	movs	r3, #1
 8006578:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 800657a:	f107 031c 	add.w	r3, r7, #28
 800657e:	4619      	mov	r1, r3
 8006580:	4850      	ldr	r0, [pc, #320]	; (80066c4 <HAL_TIM_MspPostInit+0x1a0>)
 8006582:	f003 ff17 	bl	800a3b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8006586:	e094      	b.n	80066b2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006590:	d120      	bne.n	80065d4 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006592:	4b4b      	ldr	r3, [pc, #300]	; (80066c0 <HAL_TIM_MspPostInit+0x19c>)
 8006594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006598:	4a49      	ldr	r2, [pc, #292]	; (80066c0 <HAL_TIM_MspPostInit+0x19c>)
 800659a:	f043 0302 	orr.w	r3, r3, #2
 800659e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80065a2:	4b47      	ldr	r3, [pc, #284]	; (80066c0 <HAL_TIM_MspPostInit+0x19c>)
 80065a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	617b      	str	r3, [r7, #20]
 80065ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 80065b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065b6:	2302      	movs	r3, #2
 80065b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065be:	2300      	movs	r3, #0
 80065c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80065c2:	2301      	movs	r3, #1
 80065c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 80065c6:	f107 031c 	add.w	r3, r7, #28
 80065ca:	4619      	mov	r1, r3
 80065cc:	483e      	ldr	r0, [pc, #248]	; (80066c8 <HAL_TIM_MspPostInit+0x1a4>)
 80065ce:	f003 fef1 	bl	800a3b4 <HAL_GPIO_Init>
}
 80065d2:	e06e      	b.n	80066b2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a3c      	ldr	r2, [pc, #240]	; (80066cc <HAL_TIM_MspPostInit+0x1a8>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d11f      	bne.n	800661e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065de:	4b38      	ldr	r3, [pc, #224]	; (80066c0 <HAL_TIM_MspPostInit+0x19c>)
 80065e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065e4:	4a36      	ldr	r2, [pc, #216]	; (80066c0 <HAL_TIM_MspPostInit+0x19c>)
 80065e6:	f043 0301 	orr.w	r3, r3, #1
 80065ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80065ee:	4b34      	ldr	r3, [pc, #208]	; (80066c0 <HAL_TIM_MspPostInit+0x19c>)
 80065f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	613b      	str	r3, [r7, #16]
 80065fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 80065fc:	2340      	movs	r3, #64	; 0x40
 80065fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006600:	2302      	movs	r3, #2
 8006602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006604:	2300      	movs	r3, #0
 8006606:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006608:	2300      	movs	r3, #0
 800660a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800660c:	2302      	movs	r3, #2
 800660e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8006610:	f107 031c 	add.w	r3, r7, #28
 8006614:	4619      	mov	r1, r3
 8006616:	482e      	ldr	r0, [pc, #184]	; (80066d0 <HAL_TIM_MspPostInit+0x1ac>)
 8006618:	f003 fecc 	bl	800a3b4 <HAL_GPIO_Init>
}
 800661c:	e049      	b.n	80066b2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a2c      	ldr	r2, [pc, #176]	; (80066d4 <HAL_TIM_MspPostInit+0x1b0>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d120      	bne.n	800666a <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006628:	4b25      	ldr	r3, [pc, #148]	; (80066c0 <HAL_TIM_MspPostInit+0x19c>)
 800662a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800662e:	4a24      	ldr	r2, [pc, #144]	; (80066c0 <HAL_TIM_MspPostInit+0x19c>)
 8006630:	f043 0302 	orr.w	r3, r3, #2
 8006634:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006638:	4b21      	ldr	r3, [pc, #132]	; (80066c0 <HAL_TIM_MspPostInit+0x19c>)
 800663a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8006646:	f44f 7380 	mov.w	r3, #256	; 0x100
 800664a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800664c:	2302      	movs	r3, #2
 800664e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006650:	2300      	movs	r3, #0
 8006652:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006654:	2300      	movs	r3, #0
 8006656:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006658:	2302      	movs	r3, #2
 800665a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 800665c:	f107 031c 	add.w	r3, r7, #28
 8006660:	4619      	mov	r1, r3
 8006662:	4819      	ldr	r0, [pc, #100]	; (80066c8 <HAL_TIM_MspPostInit+0x1a4>)
 8006664:	f003 fea6 	bl	800a3b4 <HAL_GPIO_Init>
}
 8006668:	e023      	b.n	80066b2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a1a      	ldr	r2, [pc, #104]	; (80066d8 <HAL_TIM_MspPostInit+0x1b4>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d11e      	bne.n	80066b2 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006674:	4b12      	ldr	r3, [pc, #72]	; (80066c0 <HAL_TIM_MspPostInit+0x19c>)
 8006676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800667a:	4a11      	ldr	r2, [pc, #68]	; (80066c0 <HAL_TIM_MspPostInit+0x19c>)
 800667c:	f043 0310 	orr.w	r3, r3, #16
 8006680:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006684:	4b0e      	ldr	r3, [pc, #56]	; (80066c0 <HAL_TIM_MspPostInit+0x19c>)
 8006686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800668a:	f003 0310 	and.w	r3, r3, #16
 800668e:	60bb      	str	r3, [r7, #8]
 8006690:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8006692:	2340      	movs	r3, #64	; 0x40
 8006694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006696:	2302      	movs	r3, #2
 8006698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800669a:	2300      	movs	r3, #0
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800669e:	2300      	movs	r3, #0
 80066a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80066a2:	2304      	movs	r3, #4
 80066a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 80066a6:	f107 031c 	add.w	r3, r7, #28
 80066aa:	4619      	mov	r1, r3
 80066ac:	4805      	ldr	r0, [pc, #20]	; (80066c4 <HAL_TIM_MspPostInit+0x1a0>)
 80066ae:	f003 fe81 	bl	800a3b4 <HAL_GPIO_Init>
}
 80066b2:	bf00      	nop
 80066b4:	3730      	adds	r7, #48	; 0x30
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	40010000 	.word	0x40010000
 80066c0:	58024400 	.word	0x58024400
 80066c4:	58021000 	.word	0x58021000
 80066c8:	58020400 	.word	0x58020400
 80066cc:	40000400 	.word	0x40000400
 80066d0:	58020000 	.word	0x58020000
 80066d4:	40000800 	.word	0x40000800
 80066d8:	40014000 	.word	0x40014000

080066dc <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80066e0:	4b25      	ldr	r3, [pc, #148]	; (8006778 <MX_UART4_Init+0x9c>)
 80066e2:	4a26      	ldr	r2, [pc, #152]	; (800677c <MX_UART4_Init+0xa0>)
 80066e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 80066e6:	4b24      	ldr	r3, [pc, #144]	; (8006778 <MX_UART4_Init+0x9c>)
 80066e8:	4a25      	ldr	r2, [pc, #148]	; (8006780 <MX_UART4_Init+0xa4>)
 80066ea:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80066ec:	4b22      	ldr	r3, [pc, #136]	; (8006778 <MX_UART4_Init+0x9c>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80066f2:	4b21      	ldr	r3, [pc, #132]	; (8006778 <MX_UART4_Init+0x9c>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80066f8:	4b1f      	ldr	r3, [pc, #124]	; (8006778 <MX_UART4_Init+0x9c>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80066fe:	4b1e      	ldr	r3, [pc, #120]	; (8006778 <MX_UART4_Init+0x9c>)
 8006700:	220c      	movs	r2, #12
 8006702:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006704:	4b1c      	ldr	r3, [pc, #112]	; (8006778 <MX_UART4_Init+0x9c>)
 8006706:	2200      	movs	r2, #0
 8006708:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800670a:	4b1b      	ldr	r3, [pc, #108]	; (8006778 <MX_UART4_Init+0x9c>)
 800670c:	2200      	movs	r2, #0
 800670e:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006710:	4b19      	ldr	r3, [pc, #100]	; (8006778 <MX_UART4_Init+0x9c>)
 8006712:	2200      	movs	r2, #0
 8006714:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006716:	4b18      	ldr	r3, [pc, #96]	; (8006778 <MX_UART4_Init+0x9c>)
 8006718:	2200      	movs	r2, #0
 800671a:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800671c:	4b16      	ldr	r3, [pc, #88]	; (8006778 <MX_UART4_Init+0x9c>)
 800671e:	2208      	movs	r2, #8
 8006720:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8006722:	4b15      	ldr	r3, [pc, #84]	; (8006778 <MX_UART4_Init+0x9c>)
 8006724:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006728:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800672a:	4813      	ldr	r0, [pc, #76]	; (8006778 <MX_UART4_Init+0x9c>)
 800672c:	f008 fbb8 	bl	800eea0 <HAL_UART_Init>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 8006736:	f7fe fbb1 	bl	8004e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800673a:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800673e:	480e      	ldr	r0, [pc, #56]	; (8006778 <MX_UART4_Init+0x9c>)
 8006740:	f00a fc51 	bl	8010fe6 <HAL_UARTEx_SetTxFifoThreshold>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <MX_UART4_Init+0x72>
  {
    Error_Handler();
 800674a:	f7fe fba7 	bl	8004e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800674e:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8006752:	4809      	ldr	r0, [pc, #36]	; (8006778 <MX_UART4_Init+0x9c>)
 8006754:	f00a fc85 	bl	8011062 <HAL_UARTEx_SetRxFifoThreshold>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <MX_UART4_Init+0x86>
  {
    Error_Handler();
 800675e:	f7fe fb9d 	bl	8004e9c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8006762:	4805      	ldr	r0, [pc, #20]	; (8006778 <MX_UART4_Init+0x9c>)
 8006764:	f00a fbcb 	bl	8010efe <HAL_UARTEx_EnableFifoMode>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <MX_UART4_Init+0x96>
  {
    Error_Handler();
 800676e:	f7fe fb95 	bl	8004e9c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8006772:	bf00      	nop
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	240011c4 	.word	0x240011c4
 800677c:	40004c00 	.word	0x40004c00
 8006780:	001e8480 	.word	0x001e8480

08006784 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8006788:	4b23      	ldr	r3, [pc, #140]	; (8006818 <MX_UART7_Init+0x94>)
 800678a:	4a24      	ldr	r2, [pc, #144]	; (800681c <MX_UART7_Init+0x98>)
 800678c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800678e:	4b22      	ldr	r3, [pc, #136]	; (8006818 <MX_UART7_Init+0x94>)
 8006790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006794:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8006796:	4b20      	ldr	r3, [pc, #128]	; (8006818 <MX_UART7_Init+0x94>)
 8006798:	2200      	movs	r2, #0
 800679a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800679c:	4b1e      	ldr	r3, [pc, #120]	; (8006818 <MX_UART7_Init+0x94>)
 800679e:	2200      	movs	r2, #0
 80067a0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80067a2:	4b1d      	ldr	r3, [pc, #116]	; (8006818 <MX_UART7_Init+0x94>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80067a8:	4b1b      	ldr	r3, [pc, #108]	; (8006818 <MX_UART7_Init+0x94>)
 80067aa:	220c      	movs	r2, #12
 80067ac:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067ae:	4b1a      	ldr	r3, [pc, #104]	; (8006818 <MX_UART7_Init+0x94>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80067b4:	4b18      	ldr	r3, [pc, #96]	; (8006818 <MX_UART7_Init+0x94>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80067ba:	4b17      	ldr	r3, [pc, #92]	; (8006818 <MX_UART7_Init+0x94>)
 80067bc:	2200      	movs	r2, #0
 80067be:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80067c0:	4b15      	ldr	r3, [pc, #84]	; (8006818 <MX_UART7_Init+0x94>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80067c6:	4b14      	ldr	r3, [pc, #80]	; (8006818 <MX_UART7_Init+0x94>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80067cc:	4812      	ldr	r0, [pc, #72]	; (8006818 <MX_UART7_Init+0x94>)
 80067ce:	f008 fb67 	bl	800eea0 <HAL_UART_Init>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80067d8:	f7fe fb60 	bl	8004e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 80067dc:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80067e0:	480d      	ldr	r0, [pc, #52]	; (8006818 <MX_UART7_Init+0x94>)
 80067e2:	f00a fc00 	bl	8010fe6 <HAL_UARTEx_SetTxFifoThreshold>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 80067ec:	f7fe fb56 	bl	8004e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80067f0:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 80067f4:	4808      	ldr	r0, [pc, #32]	; (8006818 <MX_UART7_Init+0x94>)
 80067f6:	f00a fc34 	bl	8011062 <HAL_UARTEx_SetRxFifoThreshold>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 8006800:	f7fe fb4c 	bl	8004e9c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8006804:	4804      	ldr	r0, [pc, #16]	; (8006818 <MX_UART7_Init+0x94>)
 8006806:	f00a fb7a 	bl	8010efe <HAL_UARTEx_EnableFifoMode>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d001      	beq.n	8006814 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 8006810:	f7fe fb44 	bl	8004e9c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8006814:	bf00      	nop
 8006816:	bd80      	pop	{r7, pc}
 8006818:	24001254 	.word	0x24001254
 800681c:	40007800 	.word	0x40007800

08006820 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006824:	4b22      	ldr	r3, [pc, #136]	; (80068b0 <MX_USART2_UART_Init+0x90>)
 8006826:	4a23      	ldr	r2, [pc, #140]	; (80068b4 <MX_USART2_UART_Init+0x94>)
 8006828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800682a:	4b21      	ldr	r3, [pc, #132]	; (80068b0 <MX_USART2_UART_Init+0x90>)
 800682c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006832:	4b1f      	ldr	r3, [pc, #124]	; (80068b0 <MX_USART2_UART_Init+0x90>)
 8006834:	2200      	movs	r2, #0
 8006836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006838:	4b1d      	ldr	r3, [pc, #116]	; (80068b0 <MX_USART2_UART_Init+0x90>)
 800683a:	2200      	movs	r2, #0
 800683c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800683e:	4b1c      	ldr	r3, [pc, #112]	; (80068b0 <MX_USART2_UART_Init+0x90>)
 8006840:	2200      	movs	r2, #0
 8006842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006844:	4b1a      	ldr	r3, [pc, #104]	; (80068b0 <MX_USART2_UART_Init+0x90>)
 8006846:	220c      	movs	r2, #12
 8006848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800684a:	4b19      	ldr	r3, [pc, #100]	; (80068b0 <MX_USART2_UART_Init+0x90>)
 800684c:	2200      	movs	r2, #0
 800684e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006850:	4b17      	ldr	r3, [pc, #92]	; (80068b0 <MX_USART2_UART_Init+0x90>)
 8006852:	2200      	movs	r2, #0
 8006854:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006856:	4b16      	ldr	r3, [pc, #88]	; (80068b0 <MX_USART2_UART_Init+0x90>)
 8006858:	2200      	movs	r2, #0
 800685a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800685c:	4b14      	ldr	r3, [pc, #80]	; (80068b0 <MX_USART2_UART_Init+0x90>)
 800685e:	2200      	movs	r2, #0
 8006860:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006862:	4b13      	ldr	r3, [pc, #76]	; (80068b0 <MX_USART2_UART_Init+0x90>)
 8006864:	2200      	movs	r2, #0
 8006866:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006868:	4811      	ldr	r0, [pc, #68]	; (80068b0 <MX_USART2_UART_Init+0x90>)
 800686a:	f008 fb19 	bl	800eea0 <HAL_UART_Init>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006874:	f7fe fb12 	bl	8004e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006878:	2100      	movs	r1, #0
 800687a:	480d      	ldr	r0, [pc, #52]	; (80068b0 <MX_USART2_UART_Init+0x90>)
 800687c:	f00a fbb3 	bl	8010fe6 <HAL_UARTEx_SetTxFifoThreshold>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8006886:	f7fe fb09 	bl	8004e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800688a:	2100      	movs	r1, #0
 800688c:	4808      	ldr	r0, [pc, #32]	; (80068b0 <MX_USART2_UART_Init+0x90>)
 800688e:	f00a fbe8 	bl	8011062 <HAL_UARTEx_SetRxFifoThreshold>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006898:	f7fe fb00 	bl	8004e9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800689c:	4804      	ldr	r0, [pc, #16]	; (80068b0 <MX_USART2_UART_Init+0x90>)
 800689e:	f00a fb69 	bl	8010f74 <HAL_UARTEx_DisableFifoMode>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80068a8:	f7fe faf8 	bl	8004e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80068ac:	bf00      	nop
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	240012e4 	.word	0x240012e4
 80068b4:	40004400 	.word	0x40004400

080068b8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80068bc:	4b22      	ldr	r3, [pc, #136]	; (8006948 <MX_USART3_UART_Init+0x90>)
 80068be:	4a23      	ldr	r2, [pc, #140]	; (800694c <MX_USART3_UART_Init+0x94>)
 80068c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80068c2:	4b21      	ldr	r3, [pc, #132]	; (8006948 <MX_USART3_UART_Init+0x90>)
 80068c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80068c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80068ca:	4b1f      	ldr	r3, [pc, #124]	; (8006948 <MX_USART3_UART_Init+0x90>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80068d0:	4b1d      	ldr	r3, [pc, #116]	; (8006948 <MX_USART3_UART_Init+0x90>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80068d6:	4b1c      	ldr	r3, [pc, #112]	; (8006948 <MX_USART3_UART_Init+0x90>)
 80068d8:	2200      	movs	r2, #0
 80068da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80068dc:	4b1a      	ldr	r3, [pc, #104]	; (8006948 <MX_USART3_UART_Init+0x90>)
 80068de:	220c      	movs	r2, #12
 80068e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068e2:	4b19      	ldr	r3, [pc, #100]	; (8006948 <MX_USART3_UART_Init+0x90>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80068e8:	4b17      	ldr	r3, [pc, #92]	; (8006948 <MX_USART3_UART_Init+0x90>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80068ee:	4b16      	ldr	r3, [pc, #88]	; (8006948 <MX_USART3_UART_Init+0x90>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80068f4:	4b14      	ldr	r3, [pc, #80]	; (8006948 <MX_USART3_UART_Init+0x90>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80068fa:	4b13      	ldr	r3, [pc, #76]	; (8006948 <MX_USART3_UART_Init+0x90>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006900:	4811      	ldr	r0, [pc, #68]	; (8006948 <MX_USART3_UART_Init+0x90>)
 8006902:	f008 facd 	bl	800eea0 <HAL_UART_Init>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800690c:	f7fe fac6 	bl	8004e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006910:	2100      	movs	r1, #0
 8006912:	480d      	ldr	r0, [pc, #52]	; (8006948 <MX_USART3_UART_Init+0x90>)
 8006914:	f00a fb67 	bl	8010fe6 <HAL_UARTEx_SetTxFifoThreshold>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800691e:	f7fe fabd 	bl	8004e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006922:	2100      	movs	r1, #0
 8006924:	4808      	ldr	r0, [pc, #32]	; (8006948 <MX_USART3_UART_Init+0x90>)
 8006926:	f00a fb9c 	bl	8011062 <HAL_UARTEx_SetRxFifoThreshold>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8006930:	f7fe fab4 	bl	8004e9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006934:	4804      	ldr	r0, [pc, #16]	; (8006948 <MX_USART3_UART_Init+0x90>)
 8006936:	f00a fb1d 	bl	8010f74 <HAL_UARTEx_DisableFifoMode>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8006940:	f7fe faac 	bl	8004e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006944:	bf00      	nop
 8006946:	bd80      	pop	{r7, pc}
 8006948:	24001374 	.word	0x24001374
 800694c:	40004800 	.word	0x40004800

08006950 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b0be      	sub	sp, #248	; 0xf8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006958:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800695c:	2200      	movs	r2, #0
 800695e:	601a      	str	r2, [r3, #0]
 8006960:	605a      	str	r2, [r3, #4]
 8006962:	609a      	str	r2, [r3, #8]
 8006964:	60da      	str	r2, [r3, #12]
 8006966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006968:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800696c:	22bc      	movs	r2, #188	; 0xbc
 800696e:	2100      	movs	r1, #0
 8006970:	4618      	mov	r0, r3
 8006972:	f00b ff65 	bl	8012840 <memset>
  if(uartHandle->Instance==UART4)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4aa1      	ldr	r2, [pc, #644]	; (8006c00 <HAL_UART_MspInit+0x2b0>)
 800697c:	4293      	cmp	r3, r2
 800697e:	f040 80b7 	bne.w	8006af0 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006982:	2302      	movs	r3, #2
 8006984:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006986:	2300      	movs	r3, #0
 8006988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800698c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006990:	4618      	mov	r0, r3
 8006992:	f004 fee7 	bl	800b764 <HAL_RCCEx_PeriphCLKConfig>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800699c:	f7fe fa7e 	bl	8004e9c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80069a0:	4b98      	ldr	r3, [pc, #608]	; (8006c04 <HAL_UART_MspInit+0x2b4>)
 80069a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069a6:	4a97      	ldr	r2, [pc, #604]	; (8006c04 <HAL_UART_MspInit+0x2b4>)
 80069a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80069b0:	4b94      	ldr	r3, [pc, #592]	; (8006c04 <HAL_UART_MspInit+0x2b4>)
 80069b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
 80069bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80069be:	4b91      	ldr	r3, [pc, #580]	; (8006c04 <HAL_UART_MspInit+0x2b4>)
 80069c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069c4:	4a8f      	ldr	r2, [pc, #572]	; (8006c04 <HAL_UART_MspInit+0x2b4>)
 80069c6:	f043 0308 	orr.w	r3, r3, #8
 80069ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80069ce:	4b8d      	ldr	r3, [pc, #564]	; (8006c04 <HAL_UART_MspInit+0x2b4>)
 80069d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069d4:	f003 0308 	and.w	r3, r3, #8
 80069d8:	623b      	str	r3, [r7, #32]
 80069da:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80069dc:	2303      	movs	r3, #3
 80069de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069e2:	2302      	movs	r3, #2
 80069e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e8:	2300      	movs	r3, #0
 80069ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069ee:	2300      	movs	r3, #0
 80069f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80069f4:	2308      	movs	r3, #8
 80069f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069fa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80069fe:	4619      	mov	r1, r3
 8006a00:	4881      	ldr	r0, [pc, #516]	; (8006c08 <HAL_UART_MspInit+0x2b8>)
 8006a02:	f003 fcd7 	bl	800a3b4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8006a06:	4b81      	ldr	r3, [pc, #516]	; (8006c0c <HAL_UART_MspInit+0x2bc>)
 8006a08:	4a81      	ldr	r2, [pc, #516]	; (8006c10 <HAL_UART_MspInit+0x2c0>)
 8006a0a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8006a0c:	4b7f      	ldr	r3, [pc, #508]	; (8006c0c <HAL_UART_MspInit+0x2bc>)
 8006a0e:	223f      	movs	r2, #63	; 0x3f
 8006a10:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a12:	4b7e      	ldr	r3, [pc, #504]	; (8006c0c <HAL_UART_MspInit+0x2bc>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a18:	4b7c      	ldr	r3, [pc, #496]	; (8006c0c <HAL_UART_MspInit+0x2bc>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006a1e:	4b7b      	ldr	r3, [pc, #492]	; (8006c0c <HAL_UART_MspInit+0x2bc>)
 8006a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a24:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a26:	4b79      	ldr	r3, [pc, #484]	; (8006c0c <HAL_UART_MspInit+0x2bc>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a2c:	4b77      	ldr	r3, [pc, #476]	; (8006c0c <HAL_UART_MspInit+0x2bc>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8006a32:	4b76      	ldr	r3, [pc, #472]	; (8006c0c <HAL_UART_MspInit+0x2bc>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006a38:	4b74      	ldr	r3, [pc, #464]	; (8006c0c <HAL_UART_MspInit+0x2bc>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006a3e:	4b73      	ldr	r3, [pc, #460]	; (8006c0c <HAL_UART_MspInit+0x2bc>)
 8006a40:	2204      	movs	r2, #4
 8006a42:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006a44:	4b71      	ldr	r3, [pc, #452]	; (8006c0c <HAL_UART_MspInit+0x2bc>)
 8006a46:	2203      	movs	r2, #3
 8006a48:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006a4a:	4b70      	ldr	r3, [pc, #448]	; (8006c0c <HAL_UART_MspInit+0x2bc>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006a50:	4b6e      	ldr	r3, [pc, #440]	; (8006c0c <HAL_UART_MspInit+0x2bc>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8006a56:	486d      	ldr	r0, [pc, #436]	; (8006c0c <HAL_UART_MspInit+0x2bc>)
 8006a58:	f000 fe70 	bl	800773c <HAL_DMA_Init>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d001      	beq.n	8006a66 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8006a62:	f7fe fa1b 	bl	8004e9c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a68      	ldr	r2, [pc, #416]	; (8006c0c <HAL_UART_MspInit+0x2bc>)
 8006a6a:	67da      	str	r2, [r3, #124]	; 0x7c
 8006a6c:	4a67      	ldr	r2, [pc, #412]	; (8006c0c <HAL_UART_MspInit+0x2bc>)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8006a72:	4b68      	ldr	r3, [pc, #416]	; (8006c14 <HAL_UART_MspInit+0x2c4>)
 8006a74:	4a68      	ldr	r2, [pc, #416]	; (8006c18 <HAL_UART_MspInit+0x2c8>)
 8006a76:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8006a78:	4b66      	ldr	r3, [pc, #408]	; (8006c14 <HAL_UART_MspInit+0x2c4>)
 8006a7a:	2240      	movs	r2, #64	; 0x40
 8006a7c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a7e:	4b65      	ldr	r3, [pc, #404]	; (8006c14 <HAL_UART_MspInit+0x2c4>)
 8006a80:	2240      	movs	r2, #64	; 0x40
 8006a82:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a84:	4b63      	ldr	r3, [pc, #396]	; (8006c14 <HAL_UART_MspInit+0x2c4>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006a8a:	4b62      	ldr	r3, [pc, #392]	; (8006c14 <HAL_UART_MspInit+0x2c4>)
 8006a8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a90:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a92:	4b60      	ldr	r3, [pc, #384]	; (8006c14 <HAL_UART_MspInit+0x2c4>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a98:	4b5e      	ldr	r3, [pc, #376]	; (8006c14 <HAL_UART_MspInit+0x2c4>)
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8006a9e:	4b5d      	ldr	r3, [pc, #372]	; (8006c14 <HAL_UART_MspInit+0x2c4>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006aa4:	4b5b      	ldr	r3, [pc, #364]	; (8006c14 <HAL_UART_MspInit+0x2c4>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006aaa:	4b5a      	ldr	r3, [pc, #360]	; (8006c14 <HAL_UART_MspInit+0x2c4>)
 8006aac:	2204      	movs	r2, #4
 8006aae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006ab0:	4b58      	ldr	r3, [pc, #352]	; (8006c14 <HAL_UART_MspInit+0x2c4>)
 8006ab2:	2203      	movs	r2, #3
 8006ab4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006ab6:	4b57      	ldr	r3, [pc, #348]	; (8006c14 <HAL_UART_MspInit+0x2c4>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006abc:	4b55      	ldr	r3, [pc, #340]	; (8006c14 <HAL_UART_MspInit+0x2c4>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8006ac2:	4854      	ldr	r0, [pc, #336]	; (8006c14 <HAL_UART_MspInit+0x2c4>)
 8006ac4:	f000 fe3a 	bl	800773c <HAL_DMA_Init>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 8006ace:	f7fe f9e5 	bl	8004e9c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a4f      	ldr	r2, [pc, #316]	; (8006c14 <HAL_UART_MspInit+0x2c4>)
 8006ad6:	679a      	str	r2, [r3, #120]	; 0x78
 8006ad8:	4a4e      	ldr	r2, [pc, #312]	; (8006c14 <HAL_UART_MspInit+0x2c4>)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8006ade:	2200      	movs	r2, #0
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	2034      	movs	r0, #52	; 0x34
 8006ae4:	f000 fbeb 	bl	80072be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006ae8:	2034      	movs	r0, #52	; 0x34
 8006aea:	f000 fc02 	bl	80072f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006aee:	e20d      	b.n	8006f0c <HAL_UART_MspInit+0x5bc>
  else if(uartHandle->Instance==UART7)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a49      	ldr	r2, [pc, #292]	; (8006c1c <HAL_UART_MspInit+0x2cc>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	f040 8098 	bne.w	8006c2c <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8006afc:	2302      	movs	r3, #2
 8006afe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006b00:	2300      	movs	r3, #0
 8006b02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006b06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f004 fe2a 	bl	800b764 <HAL_RCCEx_PeriphCLKConfig>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8006b16:	f7fe f9c1 	bl	8004e9c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8006b1a:	4b3a      	ldr	r3, [pc, #232]	; (8006c04 <HAL_UART_MspInit+0x2b4>)
 8006b1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b20:	4a38      	ldr	r2, [pc, #224]	; (8006c04 <HAL_UART_MspInit+0x2b4>)
 8006b22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006b2a:	4b36      	ldr	r3, [pc, #216]	; (8006c04 <HAL_UART_MspInit+0x2b4>)
 8006b2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b34:	61fb      	str	r3, [r7, #28]
 8006b36:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b38:	4b32      	ldr	r3, [pc, #200]	; (8006c04 <HAL_UART_MspInit+0x2b4>)
 8006b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b3e:	4a31      	ldr	r2, [pc, #196]	; (8006c04 <HAL_UART_MspInit+0x2b4>)
 8006b40:	f043 0310 	orr.w	r3, r3, #16
 8006b44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b48:	4b2e      	ldr	r3, [pc, #184]	; (8006c04 <HAL_UART_MspInit+0x2b4>)
 8006b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b4e:	f003 0310 	and.w	r3, r3, #16
 8006b52:	61bb      	str	r3, [r7, #24]
 8006b54:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006b56:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b5e:	2302      	movs	r3, #2
 8006b60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b64:	2300      	movs	r3, #0
 8006b66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8006b70:	2307      	movs	r3, #7
 8006b72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b76:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	4828      	ldr	r0, [pc, #160]	; (8006c20 <HAL_UART_MspInit+0x2d0>)
 8006b7e:	f003 fc19 	bl	800a3b4 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 8006b82:	4b28      	ldr	r3, [pc, #160]	; (8006c24 <HAL_UART_MspInit+0x2d4>)
 8006b84:	4a28      	ldr	r2, [pc, #160]	; (8006c28 <HAL_UART_MspInit+0x2d8>)
 8006b86:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8006b88:	4b26      	ldr	r3, [pc, #152]	; (8006c24 <HAL_UART_MspInit+0x2d4>)
 8006b8a:	2250      	movs	r2, #80	; 0x50
 8006b8c:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b8e:	4b25      	ldr	r3, [pc, #148]	; (8006c24 <HAL_UART_MspInit+0x2d4>)
 8006b90:	2240      	movs	r2, #64	; 0x40
 8006b92:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b94:	4b23      	ldr	r3, [pc, #140]	; (8006c24 <HAL_UART_MspInit+0x2d4>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006b9a:	4b22      	ldr	r3, [pc, #136]	; (8006c24 <HAL_UART_MspInit+0x2d4>)
 8006b9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ba0:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006ba2:	4b20      	ldr	r3, [pc, #128]	; (8006c24 <HAL_UART_MspInit+0x2d4>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006ba8:	4b1e      	ldr	r3, [pc, #120]	; (8006c24 <HAL_UART_MspInit+0x2d4>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8006bae:	4b1d      	ldr	r3, [pc, #116]	; (8006c24 <HAL_UART_MspInit+0x2d4>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006bb4:	4b1b      	ldr	r3, [pc, #108]	; (8006c24 <HAL_UART_MspInit+0x2d4>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006bba:	4b1a      	ldr	r3, [pc, #104]	; (8006c24 <HAL_UART_MspInit+0x2d4>)
 8006bbc:	2204      	movs	r2, #4
 8006bbe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006bc0:	4b18      	ldr	r3, [pc, #96]	; (8006c24 <HAL_UART_MspInit+0x2d4>)
 8006bc2:	2203      	movs	r2, #3
 8006bc4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006bc6:	4b17      	ldr	r3, [pc, #92]	; (8006c24 <HAL_UART_MspInit+0x2d4>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006bcc:	4b15      	ldr	r3, [pc, #84]	; (8006c24 <HAL_UART_MspInit+0x2d4>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8006bd2:	4814      	ldr	r0, [pc, #80]	; (8006c24 <HAL_UART_MspInit+0x2d4>)
 8006bd4:	f000 fdb2 	bl	800773c <HAL_DMA_Init>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <HAL_UART_MspInit+0x292>
      Error_Handler();
 8006bde:	f7fe f95d 	bl	8004e9c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a0f      	ldr	r2, [pc, #60]	; (8006c24 <HAL_UART_MspInit+0x2d4>)
 8006be6:	679a      	str	r2, [r3, #120]	; 0x78
 8006be8:	4a0e      	ldr	r2, [pc, #56]	; (8006c24 <HAL_UART_MspInit+0x2d4>)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8006bee:	2200      	movs	r2, #0
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	2052      	movs	r0, #82	; 0x52
 8006bf4:	f000 fb63 	bl	80072be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8006bf8:	2052      	movs	r0, #82	; 0x52
 8006bfa:	f000 fb7a 	bl	80072f2 <HAL_NVIC_EnableIRQ>
}
 8006bfe:	e185      	b.n	8006f0c <HAL_UART_MspInit+0x5bc>
 8006c00:	40004c00 	.word	0x40004c00
 8006c04:	58024400 	.word	0x58024400
 8006c08:	58020c00 	.word	0x58020c00
 8006c0c:	24001404 	.word	0x24001404
 8006c10:	40020058 	.word	0x40020058
 8006c14:	2400147c 	.word	0x2400147c
 8006c18:	40020070 	.word	0x40020070
 8006c1c:	40007800 	.word	0x40007800
 8006c20:	58021000 	.word	0x58021000
 8006c24:	240014f4 	.word	0x240014f4
 8006c28:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART2)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a54      	ldr	r2, [pc, #336]	; (8006d84 <HAL_UART_MspInit+0x434>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	f040 80b4 	bne.w	8006da0 <HAL_UART_MspInit+0x450>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006c38:	2302      	movs	r3, #2
 8006c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c46:	4618      	mov	r0, r3
 8006c48:	f004 fd8c 	bl	800b764 <HAL_RCCEx_PeriphCLKConfig>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <HAL_UART_MspInit+0x306>
      Error_Handler();
 8006c52:	f7fe f923 	bl	8004e9c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006c56:	4b4c      	ldr	r3, [pc, #304]	; (8006d88 <HAL_UART_MspInit+0x438>)
 8006c58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c5c:	4a4a      	ldr	r2, [pc, #296]	; (8006d88 <HAL_UART_MspInit+0x438>)
 8006c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006c66:	4b48      	ldr	r3, [pc, #288]	; (8006d88 <HAL_UART_MspInit+0x438>)
 8006c68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c70:	617b      	str	r3, [r7, #20]
 8006c72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c74:	4b44      	ldr	r3, [pc, #272]	; (8006d88 <HAL_UART_MspInit+0x438>)
 8006c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c7a:	4a43      	ldr	r2, [pc, #268]	; (8006d88 <HAL_UART_MspInit+0x438>)
 8006c7c:	f043 0308 	orr.w	r3, r3, #8
 8006c80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c84:	4b40      	ldr	r3, [pc, #256]	; (8006d88 <HAL_UART_MspInit+0x438>)
 8006c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c8a:	f003 0308 	and.w	r3, r3, #8
 8006c8e:	613b      	str	r3, [r7, #16]
 8006c90:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006c92:	2360      	movs	r3, #96	; 0x60
 8006c94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c98:	2302      	movs	r3, #2
 8006c9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006caa:	2307      	movs	r3, #7
 8006cac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006cb0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	4835      	ldr	r0, [pc, #212]	; (8006d8c <HAL_UART_MspInit+0x43c>)
 8006cb8:	f003 fb7c 	bl	800a3b4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006cbc:	4b34      	ldr	r3, [pc, #208]	; (8006d90 <HAL_UART_MspInit+0x440>)
 8006cbe:	4a35      	ldr	r2, [pc, #212]	; (8006d94 <HAL_UART_MspInit+0x444>)
 8006cc0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8006cc2:	4b33      	ldr	r3, [pc, #204]	; (8006d90 <HAL_UART_MspInit+0x440>)
 8006cc4:	222b      	movs	r2, #43	; 0x2b
 8006cc6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006cc8:	4b31      	ldr	r3, [pc, #196]	; (8006d90 <HAL_UART_MspInit+0x440>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cce:	4b30      	ldr	r3, [pc, #192]	; (8006d90 <HAL_UART_MspInit+0x440>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006cd4:	4b2e      	ldr	r3, [pc, #184]	; (8006d90 <HAL_UART_MspInit+0x440>)
 8006cd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cda:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006cdc:	4b2c      	ldr	r3, [pc, #176]	; (8006d90 <HAL_UART_MspInit+0x440>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006ce2:	4b2b      	ldr	r3, [pc, #172]	; (8006d90 <HAL_UART_MspInit+0x440>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006ce8:	4b29      	ldr	r3, [pc, #164]	; (8006d90 <HAL_UART_MspInit+0x440>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006cee:	4b28      	ldr	r3, [pc, #160]	; (8006d90 <HAL_UART_MspInit+0x440>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006cf4:	4b26      	ldr	r3, [pc, #152]	; (8006d90 <HAL_UART_MspInit+0x440>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006cfa:	4825      	ldr	r0, [pc, #148]	; (8006d90 <HAL_UART_MspInit+0x440>)
 8006cfc:	f000 fd1e 	bl	800773c <HAL_DMA_Init>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 8006d06:	f7fe f8c9 	bl	8004e9c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a20      	ldr	r2, [pc, #128]	; (8006d90 <HAL_UART_MspInit+0x440>)
 8006d0e:	67da      	str	r2, [r3, #124]	; 0x7c
 8006d10:	4a1f      	ldr	r2, [pc, #124]	; (8006d90 <HAL_UART_MspInit+0x440>)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006d16:	4b20      	ldr	r3, [pc, #128]	; (8006d98 <HAL_UART_MspInit+0x448>)
 8006d18:	4a20      	ldr	r2, [pc, #128]	; (8006d9c <HAL_UART_MspInit+0x44c>)
 8006d1a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8006d1c:	4b1e      	ldr	r3, [pc, #120]	; (8006d98 <HAL_UART_MspInit+0x448>)
 8006d1e:	222c      	movs	r2, #44	; 0x2c
 8006d20:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d22:	4b1d      	ldr	r3, [pc, #116]	; (8006d98 <HAL_UART_MspInit+0x448>)
 8006d24:	2240      	movs	r2, #64	; 0x40
 8006d26:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d28:	4b1b      	ldr	r3, [pc, #108]	; (8006d98 <HAL_UART_MspInit+0x448>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d2e:	4b1a      	ldr	r3, [pc, #104]	; (8006d98 <HAL_UART_MspInit+0x448>)
 8006d30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d34:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d36:	4b18      	ldr	r3, [pc, #96]	; (8006d98 <HAL_UART_MspInit+0x448>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d3c:	4b16      	ldr	r3, [pc, #88]	; (8006d98 <HAL_UART_MspInit+0x448>)
 8006d3e:	2200      	movs	r2, #0
 8006d40:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006d42:	4b15      	ldr	r3, [pc, #84]	; (8006d98 <HAL_UART_MspInit+0x448>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006d48:	4b13      	ldr	r3, [pc, #76]	; (8006d98 <HAL_UART_MspInit+0x448>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d4e:	4b12      	ldr	r3, [pc, #72]	; (8006d98 <HAL_UART_MspInit+0x448>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006d54:	4810      	ldr	r0, [pc, #64]	; (8006d98 <HAL_UART_MspInit+0x448>)
 8006d56:	f000 fcf1 	bl	800773c <HAL_DMA_Init>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d001      	beq.n	8006d64 <HAL_UART_MspInit+0x414>
      Error_Handler();
 8006d60:	f7fe f89c 	bl	8004e9c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a0c      	ldr	r2, [pc, #48]	; (8006d98 <HAL_UART_MspInit+0x448>)
 8006d68:	679a      	str	r2, [r3, #120]	; 0x78
 8006d6a:	4a0b      	ldr	r2, [pc, #44]	; (8006d98 <HAL_UART_MspInit+0x448>)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006d70:	2200      	movs	r2, #0
 8006d72:	2100      	movs	r1, #0
 8006d74:	2026      	movs	r0, #38	; 0x26
 8006d76:	f000 faa2 	bl	80072be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006d7a:	2026      	movs	r0, #38	; 0x26
 8006d7c:	f000 fab9 	bl	80072f2 <HAL_NVIC_EnableIRQ>
}
 8006d80:	e0c4      	b.n	8006f0c <HAL_UART_MspInit+0x5bc>
 8006d82:	bf00      	nop
 8006d84:	40004400 	.word	0x40004400
 8006d88:	58024400 	.word	0x58024400
 8006d8c:	58020c00 	.word	0x58020c00
 8006d90:	2400156c 	.word	0x2400156c
 8006d94:	40020088 	.word	0x40020088
 8006d98:	240015e4 	.word	0x240015e4
 8006d9c:	400200a0 	.word	0x400200a0
  else if(uartHandle->Instance==USART3)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a5b      	ldr	r2, [pc, #364]	; (8006f14 <HAL_UART_MspInit+0x5c4>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	f040 80b0 	bne.w	8006f0c <HAL_UART_MspInit+0x5bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006dac:	2302      	movs	r3, #2
 8006dae:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006db0:	2300      	movs	r3, #0
 8006db2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f004 fcd2 	bl	800b764 <HAL_RCCEx_PeriphCLKConfig>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <HAL_UART_MspInit+0x47a>
      Error_Handler();
 8006dc6:	f7fe f869 	bl	8004e9c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006dca:	4b53      	ldr	r3, [pc, #332]	; (8006f18 <HAL_UART_MspInit+0x5c8>)
 8006dcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006dd0:	4a51      	ldr	r2, [pc, #324]	; (8006f18 <HAL_UART_MspInit+0x5c8>)
 8006dd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006dd6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006dda:	4b4f      	ldr	r3, [pc, #316]	; (8006f18 <HAL_UART_MspInit+0x5c8>)
 8006ddc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006de0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006de8:	4b4b      	ldr	r3, [pc, #300]	; (8006f18 <HAL_UART_MspInit+0x5c8>)
 8006dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dee:	4a4a      	ldr	r2, [pc, #296]	; (8006f18 <HAL_UART_MspInit+0x5c8>)
 8006df0:	f043 0308 	orr.w	r3, r3, #8
 8006df4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006df8:	4b47      	ldr	r3, [pc, #284]	; (8006f18 <HAL_UART_MspInit+0x5c8>)
 8006dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dfe:	f003 0308 	and.w	r3, r3, #8
 8006e02:	60bb      	str	r3, [r7, #8]
 8006e04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006e06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e0e:	2302      	movs	r3, #2
 8006e10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e14:	2300      	movs	r3, #0
 8006e16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006e20:	2307      	movs	r3, #7
 8006e22:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e26:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	483b      	ldr	r0, [pc, #236]	; (8006f1c <HAL_UART_MspInit+0x5cc>)
 8006e2e:	f003 fac1 	bl	800a3b4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006e32:	4b3b      	ldr	r3, [pc, #236]	; (8006f20 <HAL_UART_MspInit+0x5d0>)
 8006e34:	4a3b      	ldr	r2, [pc, #236]	; (8006f24 <HAL_UART_MspInit+0x5d4>)
 8006e36:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8006e38:	4b39      	ldr	r3, [pc, #228]	; (8006f20 <HAL_UART_MspInit+0x5d0>)
 8006e3a:	222d      	movs	r2, #45	; 0x2d
 8006e3c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e3e:	4b38      	ldr	r3, [pc, #224]	; (8006f20 <HAL_UART_MspInit+0x5d0>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e44:	4b36      	ldr	r3, [pc, #216]	; (8006f20 <HAL_UART_MspInit+0x5d0>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006e4a:	4b35      	ldr	r3, [pc, #212]	; (8006f20 <HAL_UART_MspInit+0x5d0>)
 8006e4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e50:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006e52:	4b33      	ldr	r3, [pc, #204]	; (8006f20 <HAL_UART_MspInit+0x5d0>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006e58:	4b31      	ldr	r3, [pc, #196]	; (8006f20 <HAL_UART_MspInit+0x5d0>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8006e5e:	4b30      	ldr	r3, [pc, #192]	; (8006f20 <HAL_UART_MspInit+0x5d0>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006e64:	4b2e      	ldr	r3, [pc, #184]	; (8006f20 <HAL_UART_MspInit+0x5d0>)
 8006e66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006e6a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006e6c:	4b2c      	ldr	r3, [pc, #176]	; (8006f20 <HAL_UART_MspInit+0x5d0>)
 8006e6e:	2200      	movs	r2, #0
 8006e70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006e72:	482b      	ldr	r0, [pc, #172]	; (8006f20 <HAL_UART_MspInit+0x5d0>)
 8006e74:	f000 fc62 	bl	800773c <HAL_DMA_Init>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <HAL_UART_MspInit+0x532>
      Error_Handler();
 8006e7e:	f7fe f80d 	bl	8004e9c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a26      	ldr	r2, [pc, #152]	; (8006f20 <HAL_UART_MspInit+0x5d0>)
 8006e86:	67da      	str	r2, [r3, #124]	; 0x7c
 8006e88:	4a25      	ldr	r2, [pc, #148]	; (8006f20 <HAL_UART_MspInit+0x5d0>)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8006e8e:	4b26      	ldr	r3, [pc, #152]	; (8006f28 <HAL_UART_MspInit+0x5d8>)
 8006e90:	4a26      	ldr	r2, [pc, #152]	; (8006f2c <HAL_UART_MspInit+0x5dc>)
 8006e92:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8006e94:	4b24      	ldr	r3, [pc, #144]	; (8006f28 <HAL_UART_MspInit+0x5d8>)
 8006e96:	222e      	movs	r2, #46	; 0x2e
 8006e98:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e9a:	4b23      	ldr	r3, [pc, #140]	; (8006f28 <HAL_UART_MspInit+0x5d8>)
 8006e9c:	2240      	movs	r2, #64	; 0x40
 8006e9e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ea0:	4b21      	ldr	r3, [pc, #132]	; (8006f28 <HAL_UART_MspInit+0x5d8>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006ea6:	4b20      	ldr	r3, [pc, #128]	; (8006f28 <HAL_UART_MspInit+0x5d8>)
 8006ea8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006eac:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006eae:	4b1e      	ldr	r3, [pc, #120]	; (8006f28 <HAL_UART_MspInit+0x5d8>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006eb4:	4b1c      	ldr	r3, [pc, #112]	; (8006f28 <HAL_UART_MspInit+0x5d8>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006eba:	4b1b      	ldr	r3, [pc, #108]	; (8006f28 <HAL_UART_MspInit+0x5d8>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006ec0:	4b19      	ldr	r3, [pc, #100]	; (8006f28 <HAL_UART_MspInit+0x5d8>)
 8006ec2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006ec6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006ec8:	4b17      	ldr	r3, [pc, #92]	; (8006f28 <HAL_UART_MspInit+0x5d8>)
 8006eca:	2204      	movs	r2, #4
 8006ecc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006ece:	4b16      	ldr	r3, [pc, #88]	; (8006f28 <HAL_UART_MspInit+0x5d8>)
 8006ed0:	2203      	movs	r2, #3
 8006ed2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006ed4:	4b14      	ldr	r3, [pc, #80]	; (8006f28 <HAL_UART_MspInit+0x5d8>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006eda:	4b13      	ldr	r3, [pc, #76]	; (8006f28 <HAL_UART_MspInit+0x5d8>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006ee0:	4811      	ldr	r0, [pc, #68]	; (8006f28 <HAL_UART_MspInit+0x5d8>)
 8006ee2:	f000 fc2b 	bl	800773c <HAL_DMA_Init>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <HAL_UART_MspInit+0x5a0>
      Error_Handler();
 8006eec:	f7fd ffd6 	bl	8004e9c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a0d      	ldr	r2, [pc, #52]	; (8006f28 <HAL_UART_MspInit+0x5d8>)
 8006ef4:	679a      	str	r2, [r3, #120]	; 0x78
 8006ef6:	4a0c      	ldr	r2, [pc, #48]	; (8006f28 <HAL_UART_MspInit+0x5d8>)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006efc:	2200      	movs	r2, #0
 8006efe:	2100      	movs	r1, #0
 8006f00:	2027      	movs	r0, #39	; 0x27
 8006f02:	f000 f9dc 	bl	80072be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006f06:	2027      	movs	r0, #39	; 0x27
 8006f08:	f000 f9f3 	bl	80072f2 <HAL_NVIC_EnableIRQ>
}
 8006f0c:	bf00      	nop
 8006f0e:	37f8      	adds	r7, #248	; 0xf8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	40004800 	.word	0x40004800
 8006f18:	58024400 	.word	0x58024400
 8006f1c:	58020c00 	.word	0x58020c00
 8006f20:	2400165c 	.word	0x2400165c
 8006f24:	40020028 	.word	0x40020028
 8006f28:	240016d4 	.word	0x240016d4
 8006f2c:	40020040 	.word	0x40020040

08006f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 8006f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006f68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006f34:	f7fe fbf0 	bl	8005718 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006f38:	480c      	ldr	r0, [pc, #48]	; (8006f6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006f3a:	490d      	ldr	r1, [pc, #52]	; (8006f70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006f3c:	4a0d      	ldr	r2, [pc, #52]	; (8006f74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006f40:	e002      	b.n	8006f48 <LoopCopyDataInit>

08006f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006f46:	3304      	adds	r3, #4

08006f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006f4c:	d3f9      	bcc.n	8006f42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006f4e:	4a0a      	ldr	r2, [pc, #40]	; (8006f78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006f50:	4c0a      	ldr	r4, [pc, #40]	; (8006f7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8006f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006f54:	e001      	b.n	8006f5a <LoopFillZerobss>

08006f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006f58:	3204      	adds	r2, #4

08006f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006f5c:	d3fb      	bcc.n	8006f56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006f5e:	f00b fc4b 	bl	80127f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006f62:	f7fd fc2d 	bl	80047c0 <main>
  bx  lr
 8006f66:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8006f68:	24001d60 	.word	0x24001d60
  ldr r0, =_sdata
 8006f6c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006f70:	24000410 	.word	0x24000410
  ldr r2, =_sidata
 8006f74:	08017184 	.word	0x08017184
  ldr r2, =_sbss
 8006f78:	24000410 	.word	0x24000410
  ldr r4, =_ebss
 8006f7c:	24001760 	.word	0x24001760

08006f80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006f80:	e7fe      	b.n	8006f80 <ADC3_IRQHandler>
	...

08006f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f8a:	2003      	movs	r0, #3
 8006f8c:	f000 f98c 	bl	80072a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f90:	f004 fa12 	bl	800b3b8 <HAL_RCC_GetSysClockFreq>
 8006f94:	4602      	mov	r2, r0
 8006f96:	4b15      	ldr	r3, [pc, #84]	; (8006fec <HAL_Init+0x68>)
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	0a1b      	lsrs	r3, r3, #8
 8006f9c:	f003 030f 	and.w	r3, r3, #15
 8006fa0:	4913      	ldr	r1, [pc, #76]	; (8006ff0 <HAL_Init+0x6c>)
 8006fa2:	5ccb      	ldrb	r3, [r1, r3]
 8006fa4:	f003 031f 	and.w	r3, r3, #31
 8006fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fae:	4b0f      	ldr	r3, [pc, #60]	; (8006fec <HAL_Init+0x68>)
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	f003 030f 	and.w	r3, r3, #15
 8006fb6:	4a0e      	ldr	r2, [pc, #56]	; (8006ff0 <HAL_Init+0x6c>)
 8006fb8:	5cd3      	ldrb	r3, [r2, r3]
 8006fba:	f003 031f 	and.w	r3, r3, #31
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc4:	4a0b      	ldr	r2, [pc, #44]	; (8006ff4 <HAL_Init+0x70>)
 8006fc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006fc8:	4a0b      	ldr	r2, [pc, #44]	; (8006ff8 <HAL_Init+0x74>)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006fce:	2000      	movs	r0, #0
 8006fd0:	f000 f814 	bl	8006ffc <HAL_InitTick>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e002      	b.n	8006fe4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006fde:	f7fe f97f 	bl	80052e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	58024400 	.word	0x58024400
 8006ff0:	08015284 	.word	0x08015284
 8006ff4:	24000234 	.word	0x24000234
 8006ff8:	24000230 	.word	0x24000230

08006ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007004:	4b15      	ldr	r3, [pc, #84]	; (800705c <HAL_InitTick+0x60>)
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d101      	bne.n	8007010 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e021      	b.n	8007054 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007010:	4b13      	ldr	r3, [pc, #76]	; (8007060 <HAL_InitTick+0x64>)
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	4b11      	ldr	r3, [pc, #68]	; (800705c <HAL_InitTick+0x60>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	4619      	mov	r1, r3
 800701a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800701e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007022:	fbb2 f3f3 	udiv	r3, r2, r3
 8007026:	4618      	mov	r0, r3
 8007028:	f000 f971 	bl	800730e <HAL_SYSTICK_Config>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e00e      	b.n	8007054 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b0f      	cmp	r3, #15
 800703a:	d80a      	bhi.n	8007052 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800703c:	2200      	movs	r2, #0
 800703e:	6879      	ldr	r1, [r7, #4]
 8007040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007044:	f000 f93b 	bl	80072be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007048:	4a06      	ldr	r2, [pc, #24]	; (8007064 <HAL_InitTick+0x68>)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	e000      	b.n	8007054 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
}
 8007054:	4618      	mov	r0, r3
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	2400023c 	.word	0x2400023c
 8007060:	24000230 	.word	0x24000230
 8007064:	24000238 	.word	0x24000238

08007068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007068:	b480      	push	{r7}
 800706a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800706c:	4b06      	ldr	r3, [pc, #24]	; (8007088 <HAL_IncTick+0x20>)
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	461a      	mov	r2, r3
 8007072:	4b06      	ldr	r3, [pc, #24]	; (800708c <HAL_IncTick+0x24>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4413      	add	r3, r2
 8007078:	4a04      	ldr	r2, [pc, #16]	; (800708c <HAL_IncTick+0x24>)
 800707a:	6013      	str	r3, [r2, #0]
}
 800707c:	bf00      	nop
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	2400023c 	.word	0x2400023c
 800708c:	2400174c 	.word	0x2400174c

08007090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007090:	b480      	push	{r7}
 8007092:	af00      	add	r7, sp, #0
  return uwTick;
 8007094:	4b03      	ldr	r3, [pc, #12]	; (80070a4 <HAL_GetTick+0x14>)
 8007096:	681b      	ldr	r3, [r3, #0]
}
 8007098:	4618      	mov	r0, r3
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	2400174c 	.word	0x2400174c

080070a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80070b0:	f7ff ffee 	bl	8007090 <HAL_GetTick>
 80070b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070c0:	d005      	beq.n	80070ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80070c2:	4b0a      	ldr	r3, [pc, #40]	; (80070ec <HAL_Delay+0x44>)
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	461a      	mov	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4413      	add	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80070ce:	bf00      	nop
 80070d0:	f7ff ffde 	bl	8007090 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d8f7      	bhi.n	80070d0 <HAL_Delay+0x28>
  {
  }
}
 80070e0:	bf00      	nop
 80070e2:	bf00      	nop
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	2400023c 	.word	0x2400023c

080070f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80070f0:	b480      	push	{r7}
 80070f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80070f4:	4b03      	ldr	r3, [pc, #12]	; (8007104 <HAL_GetREVID+0x14>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	0c1b      	lsrs	r3, r3, #16
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	5c001000 	.word	0x5c001000

08007108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f003 0307 	and.w	r3, r3, #7
 8007116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007118:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <__NVIC_SetPriorityGrouping+0x40>)
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007124:	4013      	ands	r3, r2
 8007126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007130:	4b06      	ldr	r3, [pc, #24]	; (800714c <__NVIC_SetPriorityGrouping+0x44>)
 8007132:	4313      	orrs	r3, r2
 8007134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007136:	4a04      	ldr	r2, [pc, #16]	; (8007148 <__NVIC_SetPriorityGrouping+0x40>)
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	60d3      	str	r3, [r2, #12]
}
 800713c:	bf00      	nop
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	e000ed00 	.word	0xe000ed00
 800714c:	05fa0000 	.word	0x05fa0000

08007150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007150:	b480      	push	{r7}
 8007152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007154:	4b04      	ldr	r3, [pc, #16]	; (8007168 <__NVIC_GetPriorityGrouping+0x18>)
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	0a1b      	lsrs	r3, r3, #8
 800715a:	f003 0307 	and.w	r3, r3, #7
}
 800715e:	4618      	mov	r0, r3
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	e000ed00 	.word	0xe000ed00

0800716c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	4603      	mov	r3, r0
 8007174:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800717a:	2b00      	cmp	r3, #0
 800717c:	db0b      	blt.n	8007196 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800717e:	88fb      	ldrh	r3, [r7, #6]
 8007180:	f003 021f 	and.w	r2, r3, #31
 8007184:	4907      	ldr	r1, [pc, #28]	; (80071a4 <__NVIC_EnableIRQ+0x38>)
 8007186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800718a:	095b      	lsrs	r3, r3, #5
 800718c:	2001      	movs	r0, #1
 800718e:	fa00 f202 	lsl.w	r2, r0, r2
 8007192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007196:	bf00      	nop
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	e000e100 	.word	0xe000e100

080071a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	4603      	mov	r3, r0
 80071b0:	6039      	str	r1, [r7, #0]
 80071b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80071b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	db0a      	blt.n	80071d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	b2da      	uxtb	r2, r3
 80071c0:	490c      	ldr	r1, [pc, #48]	; (80071f4 <__NVIC_SetPriority+0x4c>)
 80071c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071c6:	0112      	lsls	r2, r2, #4
 80071c8:	b2d2      	uxtb	r2, r2
 80071ca:	440b      	add	r3, r1
 80071cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80071d0:	e00a      	b.n	80071e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	4908      	ldr	r1, [pc, #32]	; (80071f8 <__NVIC_SetPriority+0x50>)
 80071d8:	88fb      	ldrh	r3, [r7, #6]
 80071da:	f003 030f 	and.w	r3, r3, #15
 80071de:	3b04      	subs	r3, #4
 80071e0:	0112      	lsls	r2, r2, #4
 80071e2:	b2d2      	uxtb	r2, r2
 80071e4:	440b      	add	r3, r1
 80071e6:	761a      	strb	r2, [r3, #24]
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr
 80071f4:	e000e100 	.word	0xe000e100
 80071f8:	e000ed00 	.word	0xe000ed00

080071fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b089      	sub	sp, #36	; 0x24
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f003 0307 	and.w	r3, r3, #7
 800720e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	f1c3 0307 	rsb	r3, r3, #7
 8007216:	2b04      	cmp	r3, #4
 8007218:	bf28      	it	cs
 800721a:	2304      	movcs	r3, #4
 800721c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	3304      	adds	r3, #4
 8007222:	2b06      	cmp	r3, #6
 8007224:	d902      	bls.n	800722c <NVIC_EncodePriority+0x30>
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	3b03      	subs	r3, #3
 800722a:	e000      	b.n	800722e <NVIC_EncodePriority+0x32>
 800722c:	2300      	movs	r3, #0
 800722e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	fa02 f303 	lsl.w	r3, r2, r3
 800723a:	43da      	mvns	r2, r3
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	401a      	ands	r2, r3
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007244:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	fa01 f303 	lsl.w	r3, r1, r3
 800724e:	43d9      	mvns	r1, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007254:	4313      	orrs	r3, r2
         );
}
 8007256:	4618      	mov	r0, r3
 8007258:	3724      	adds	r7, #36	; 0x24
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
	...

08007264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3b01      	subs	r3, #1
 8007270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007274:	d301      	bcc.n	800727a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007276:	2301      	movs	r3, #1
 8007278:	e00f      	b.n	800729a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800727a:	4a0a      	ldr	r2, [pc, #40]	; (80072a4 <SysTick_Config+0x40>)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3b01      	subs	r3, #1
 8007280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007282:	210f      	movs	r1, #15
 8007284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007288:	f7ff ff8e 	bl	80071a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800728c:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <SysTick_Config+0x40>)
 800728e:	2200      	movs	r2, #0
 8007290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007292:	4b04      	ldr	r3, [pc, #16]	; (80072a4 <SysTick_Config+0x40>)
 8007294:	2207      	movs	r2, #7
 8007296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	e000e010 	.word	0xe000e010

080072a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7ff ff29 	bl	8007108 <__NVIC_SetPriorityGrouping>
}
 80072b6:	bf00      	nop
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b086      	sub	sp, #24
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	4603      	mov	r3, r0
 80072c6:	60b9      	str	r1, [r7, #8]
 80072c8:	607a      	str	r2, [r7, #4]
 80072ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80072cc:	f7ff ff40 	bl	8007150 <__NVIC_GetPriorityGrouping>
 80072d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	68b9      	ldr	r1, [r7, #8]
 80072d6:	6978      	ldr	r0, [r7, #20]
 80072d8:	f7ff ff90 	bl	80071fc <NVIC_EncodePriority>
 80072dc:	4602      	mov	r2, r0
 80072de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80072e2:	4611      	mov	r1, r2
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7ff ff5f 	bl	80071a8 <__NVIC_SetPriority>
}
 80072ea:	bf00      	nop
 80072ec:	3718      	adds	r7, #24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b082      	sub	sp, #8
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	4603      	mov	r3, r0
 80072fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80072fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007300:	4618      	mov	r0, r3
 8007302:	f7ff ff33 	bl	800716c <__NVIC_EnableIRQ>
}
 8007306:	bf00      	nop
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff ffa4 	bl	8007264 <SysTick_Config>
 800731c:	4603      	mov	r3, r0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800732a:	f000 f802 	bl	8007332 <HAL_SYSTICK_Callback>
}
 800732e:	bf00      	nop
 8007330:	bd80      	pop	{r7, pc}

08007332 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8007332:	b480      	push	{r7}
 8007334:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8007336:	bf00      	nop
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e054      	b.n	80073fc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	7f5b      	ldrb	r3, [r3, #29]
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b00      	cmp	r3, #0
 800735a:	d105      	bne.n	8007368 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7fb f8a6 	bl	80024b4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2202      	movs	r2, #2
 800736c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	791b      	ldrb	r3, [r3, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10c      	bne.n	8007390 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a22      	ldr	r2, [pc, #136]	; (8007404 <HAL_CRC_Init+0xc4>)
 800737c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689a      	ldr	r2, [r3, #8]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 0218 	bic.w	r2, r2, #24
 800738c:	609a      	str	r2, [r3, #8]
 800738e:	e00c      	b.n	80073aa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6899      	ldr	r1, [r3, #8]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	461a      	mov	r2, r3
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f948 	bl	8007630 <HAL_CRCEx_Polynomial_Set>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e028      	b.n	80073fc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	795b      	ldrb	r3, [r3, #5]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d105      	bne.n	80073be <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073ba:	611a      	str	r2, [r3, #16]
 80073bc:	e004      	b.n	80073c8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	6912      	ldr	r2, [r2, #16]
 80073c6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	695a      	ldr	r2, [r3, #20]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	699a      	ldr	r2, [r3, #24]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	04c11db7 	.word	0x04c11db7

08007408 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b086      	sub	sp, #24
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8007414:	2300      	movs	r3, #0
 8007416:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2202      	movs	r2, #2
 800741c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689a      	ldr	r2, [r3, #8]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f042 0201 	orr.w	r2, r2, #1
 800742c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	2b03      	cmp	r3, #3
 8007434:	d006      	beq.n	8007444 <HAL_CRC_Calculate+0x3c>
 8007436:	2b03      	cmp	r3, #3
 8007438:	d829      	bhi.n	800748e <HAL_CRC_Calculate+0x86>
 800743a:	2b01      	cmp	r3, #1
 800743c:	d019      	beq.n	8007472 <HAL_CRC_Calculate+0x6a>
 800743e:	2b02      	cmp	r3, #2
 8007440:	d01e      	beq.n	8007480 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8007442:	e024      	b.n	800748e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8007444:	2300      	movs	r3, #0
 8007446:	617b      	str	r3, [r7, #20]
 8007448:	e00a      	b.n	8007460 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	441a      	add	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6812      	ldr	r2, [r2, #0]
 8007458:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	3301      	adds	r3, #1
 800745e:	617b      	str	r3, [r7, #20]
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	429a      	cmp	r2, r3
 8007466:	d3f0      	bcc.n	800744a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	613b      	str	r3, [r7, #16]
      break;
 8007470:	e00e      	b.n	8007490 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	68b9      	ldr	r1, [r7, #8]
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f000 f812 	bl	80074a0 <CRC_Handle_8>
 800747c:	6138      	str	r0, [r7, #16]
      break;
 800747e:	e007      	b.n	8007490 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	68b9      	ldr	r1, [r7, #8]
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 f899 	bl	80075bc <CRC_Handle_16>
 800748a:	6138      	str	r0, [r7, #16]
      break;
 800748c:	e000      	b.n	8007490 <HAL_CRC_Calculate+0x88>
      break;
 800748e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2201      	movs	r2, #1
 8007494:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8007496:	693b      	ldr	r3, [r7, #16]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3718      	adds	r7, #24
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b089      	sub	sp, #36	; 0x24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80074ac:	2300      	movs	r3, #0
 80074ae:	61fb      	str	r3, [r7, #28]
 80074b0:	e023      	b.n	80074fa <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	4413      	add	r3, r2
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	3301      	adds	r3, #1
 80074c4:	68b9      	ldr	r1, [r7, #8]
 80074c6:	440b      	add	r3, r1
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80074cc:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	3302      	adds	r3, #2
 80074d4:	68b9      	ldr	r1, [r7, #8]
 80074d6:	440b      	add	r3, r1
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80074dc:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	3303      	adds	r3, #3
 80074e4:	68b9      	ldr	r1, [r7, #8]
 80074e6:	440b      	add	r3, r1
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80074f0:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80074f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	3301      	adds	r3, #1
 80074f8:	61fb      	str	r3, [r7, #28]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	089b      	lsrs	r3, r3, #2
 80074fe:	69fa      	ldr	r2, [r7, #28]
 8007500:	429a      	cmp	r2, r3
 8007502:	d3d6      	bcc.n	80074b2 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f003 0303 	and.w	r3, r3, #3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d04d      	beq.n	80075aa <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f003 0303 	and.w	r3, r3, #3
 8007514:	2b01      	cmp	r3, #1
 8007516:	d107      	bne.n	8007528 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	4413      	add	r3, r2
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	6812      	ldr	r2, [r2, #0]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f003 0303 	and.w	r3, r3, #3
 800752e:	2b02      	cmp	r3, #2
 8007530:	d116      	bne.n	8007560 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	4413      	add	r3, r2
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	021b      	lsls	r3, r3, #8
 800753e:	b21a      	sxth	r2, r3
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	3301      	adds	r3, #1
 8007546:	68b9      	ldr	r1, [r7, #8]
 8007548:	440b      	add	r3, r1
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	b21b      	sxth	r3, r3
 800754e:	4313      	orrs	r3, r2
 8007550:	b21b      	sxth	r3, r3
 8007552:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	8b7a      	ldrh	r2, [r7, #26]
 800755e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f003 0303 	and.w	r3, r3, #3
 8007566:	2b03      	cmp	r3, #3
 8007568:	d11f      	bne.n	80075aa <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	4413      	add	r3, r2
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	021b      	lsls	r3, r3, #8
 8007576:	b21a      	sxth	r2, r3
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	3301      	adds	r3, #1
 800757e:	68b9      	ldr	r1, [r7, #8]
 8007580:	440b      	add	r3, r1
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	b21b      	sxth	r3, r3
 8007586:	4313      	orrs	r3, r2
 8007588:	b21b      	sxth	r3, r3
 800758a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	8b7a      	ldrh	r2, [r7, #26]
 8007596:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	3302      	adds	r3, #2
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	4413      	add	r3, r2
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	6812      	ldr	r2, [r2, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3724      	adds	r7, #36	; 0x24
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80075bc:	b480      	push	{r7}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80075c8:	2300      	movs	r3, #0
 80075ca:	617b      	str	r3, [r7, #20]
 80075cc:	e013      	b.n	80075f6 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	4413      	add	r3, r2
 80075d6:	881b      	ldrh	r3, [r3, #0]
 80075d8:	041a      	lsls	r2, r3, #16
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	3302      	adds	r3, #2
 80075e0:	68b9      	ldr	r1, [r7, #8]
 80075e2:	440b      	add	r3, r1
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	4619      	mov	r1, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	430a      	orrs	r2, r1
 80075ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	3301      	adds	r3, #1
 80075f4:	617b      	str	r3, [r7, #20]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	085b      	lsrs	r3, r3, #1
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d3e6      	bcc.n	80075ce <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	d009      	beq.n	800761e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	4413      	add	r3, r2
 8007618:	881a      	ldrh	r2, [r3, #0]
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
}
 8007624:	4618      	mov	r0, r3
 8007626:	371c      	adds	r7, #28
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007630:	b480      	push	{r7}
 8007632:	b087      	sub	sp, #28
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800763c:	2300      	movs	r3, #0
 800763e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007640:	231f      	movs	r3, #31
 8007642:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007644:	bf00      	nop
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	1e5a      	subs	r2, r3, #1
 800764a:	613a      	str	r2, [r7, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d009      	beq.n	8007664 <HAL_CRCEx_Polynomial_Set+0x34>
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	f003 031f 	and.w	r3, r3, #31
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	fa22 f303 	lsr.w	r3, r2, r3
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	2b00      	cmp	r3, #0
 8007662:	d0f0      	beq.n	8007646 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b18      	cmp	r3, #24
 8007668:	d846      	bhi.n	80076f8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800766a:	a201      	add	r2, pc, #4	; (adr r2, 8007670 <HAL_CRCEx_Polynomial_Set+0x40>)
 800766c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007670:	080076ff 	.word	0x080076ff
 8007674:	080076f9 	.word	0x080076f9
 8007678:	080076f9 	.word	0x080076f9
 800767c:	080076f9 	.word	0x080076f9
 8007680:	080076f9 	.word	0x080076f9
 8007684:	080076f9 	.word	0x080076f9
 8007688:	080076f9 	.word	0x080076f9
 800768c:	080076f9 	.word	0x080076f9
 8007690:	080076ed 	.word	0x080076ed
 8007694:	080076f9 	.word	0x080076f9
 8007698:	080076f9 	.word	0x080076f9
 800769c:	080076f9 	.word	0x080076f9
 80076a0:	080076f9 	.word	0x080076f9
 80076a4:	080076f9 	.word	0x080076f9
 80076a8:	080076f9 	.word	0x080076f9
 80076ac:	080076f9 	.word	0x080076f9
 80076b0:	080076e1 	.word	0x080076e1
 80076b4:	080076f9 	.word	0x080076f9
 80076b8:	080076f9 	.word	0x080076f9
 80076bc:	080076f9 	.word	0x080076f9
 80076c0:	080076f9 	.word	0x080076f9
 80076c4:	080076f9 	.word	0x080076f9
 80076c8:	080076f9 	.word	0x080076f9
 80076cc:	080076f9 	.word	0x080076f9
 80076d0:	080076d5 	.word	0x080076d5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	2b06      	cmp	r3, #6
 80076d8:	d913      	bls.n	8007702 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80076de:	e010      	b.n	8007702 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	2b07      	cmp	r3, #7
 80076e4:	d90f      	bls.n	8007706 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80076ea:	e00c      	b.n	8007706 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	2b0f      	cmp	r3, #15
 80076f0:	d90b      	bls.n	800770a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80076f6:	e008      	b.n	800770a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	75fb      	strb	r3, [r7, #23]
      break;
 80076fc:	e006      	b.n	800770c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80076fe:	bf00      	nop
 8007700:	e004      	b.n	800770c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007702:	bf00      	nop
 8007704:	e002      	b.n	800770c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007706:	bf00      	nop
 8007708:	e000      	b.n	800770c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800770a:	bf00      	nop
  }
  if (status == HAL_OK)
 800770c:	7dfb      	ldrb	r3, [r7, #23]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10d      	bne.n	800772e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	f023 0118 	bic.w	r1, r3, #24
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	430a      	orrs	r2, r1
 800772c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800772e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007730:	4618      	mov	r0, r3
 8007732:	371c      	adds	r7, #28
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b086      	sub	sp, #24
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007744:	f7ff fca4 	bl	8007090 <HAL_GetTick>
 8007748:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e316      	b.n	8007d82 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a66      	ldr	r2, [pc, #408]	; (80078f4 <HAL_DMA_Init+0x1b8>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d04a      	beq.n	80077f4 <HAL_DMA_Init+0xb8>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a65      	ldr	r2, [pc, #404]	; (80078f8 <HAL_DMA_Init+0x1bc>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d045      	beq.n	80077f4 <HAL_DMA_Init+0xb8>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a63      	ldr	r2, [pc, #396]	; (80078fc <HAL_DMA_Init+0x1c0>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d040      	beq.n	80077f4 <HAL_DMA_Init+0xb8>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a62      	ldr	r2, [pc, #392]	; (8007900 <HAL_DMA_Init+0x1c4>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d03b      	beq.n	80077f4 <HAL_DMA_Init+0xb8>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a60      	ldr	r2, [pc, #384]	; (8007904 <HAL_DMA_Init+0x1c8>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d036      	beq.n	80077f4 <HAL_DMA_Init+0xb8>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a5f      	ldr	r2, [pc, #380]	; (8007908 <HAL_DMA_Init+0x1cc>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d031      	beq.n	80077f4 <HAL_DMA_Init+0xb8>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a5d      	ldr	r2, [pc, #372]	; (800790c <HAL_DMA_Init+0x1d0>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d02c      	beq.n	80077f4 <HAL_DMA_Init+0xb8>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a5c      	ldr	r2, [pc, #368]	; (8007910 <HAL_DMA_Init+0x1d4>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d027      	beq.n	80077f4 <HAL_DMA_Init+0xb8>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a5a      	ldr	r2, [pc, #360]	; (8007914 <HAL_DMA_Init+0x1d8>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d022      	beq.n	80077f4 <HAL_DMA_Init+0xb8>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a59      	ldr	r2, [pc, #356]	; (8007918 <HAL_DMA_Init+0x1dc>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d01d      	beq.n	80077f4 <HAL_DMA_Init+0xb8>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a57      	ldr	r2, [pc, #348]	; (800791c <HAL_DMA_Init+0x1e0>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d018      	beq.n	80077f4 <HAL_DMA_Init+0xb8>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a56      	ldr	r2, [pc, #344]	; (8007920 <HAL_DMA_Init+0x1e4>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d013      	beq.n	80077f4 <HAL_DMA_Init+0xb8>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a54      	ldr	r2, [pc, #336]	; (8007924 <HAL_DMA_Init+0x1e8>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d00e      	beq.n	80077f4 <HAL_DMA_Init+0xb8>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a53      	ldr	r2, [pc, #332]	; (8007928 <HAL_DMA_Init+0x1ec>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d009      	beq.n	80077f4 <HAL_DMA_Init+0xb8>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a51      	ldr	r2, [pc, #324]	; (800792c <HAL_DMA_Init+0x1f0>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d004      	beq.n	80077f4 <HAL_DMA_Init+0xb8>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a50      	ldr	r2, [pc, #320]	; (8007930 <HAL_DMA_Init+0x1f4>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d101      	bne.n	80077f8 <HAL_DMA_Init+0xbc>
 80077f4:	2301      	movs	r3, #1
 80077f6:	e000      	b.n	80077fa <HAL_DMA_Init+0xbe>
 80077f8:	2300      	movs	r3, #0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 813b 	beq.w	8007a76 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2202      	movs	r2, #2
 8007804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a37      	ldr	r2, [pc, #220]	; (80078f4 <HAL_DMA_Init+0x1b8>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d04a      	beq.n	80078b0 <HAL_DMA_Init+0x174>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a36      	ldr	r2, [pc, #216]	; (80078f8 <HAL_DMA_Init+0x1bc>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d045      	beq.n	80078b0 <HAL_DMA_Init+0x174>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a34      	ldr	r2, [pc, #208]	; (80078fc <HAL_DMA_Init+0x1c0>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d040      	beq.n	80078b0 <HAL_DMA_Init+0x174>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a33      	ldr	r2, [pc, #204]	; (8007900 <HAL_DMA_Init+0x1c4>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d03b      	beq.n	80078b0 <HAL_DMA_Init+0x174>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a31      	ldr	r2, [pc, #196]	; (8007904 <HAL_DMA_Init+0x1c8>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d036      	beq.n	80078b0 <HAL_DMA_Init+0x174>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a30      	ldr	r2, [pc, #192]	; (8007908 <HAL_DMA_Init+0x1cc>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d031      	beq.n	80078b0 <HAL_DMA_Init+0x174>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a2e      	ldr	r2, [pc, #184]	; (800790c <HAL_DMA_Init+0x1d0>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d02c      	beq.n	80078b0 <HAL_DMA_Init+0x174>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a2d      	ldr	r2, [pc, #180]	; (8007910 <HAL_DMA_Init+0x1d4>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d027      	beq.n	80078b0 <HAL_DMA_Init+0x174>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a2b      	ldr	r2, [pc, #172]	; (8007914 <HAL_DMA_Init+0x1d8>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d022      	beq.n	80078b0 <HAL_DMA_Init+0x174>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a2a      	ldr	r2, [pc, #168]	; (8007918 <HAL_DMA_Init+0x1dc>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d01d      	beq.n	80078b0 <HAL_DMA_Init+0x174>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a28      	ldr	r2, [pc, #160]	; (800791c <HAL_DMA_Init+0x1e0>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d018      	beq.n	80078b0 <HAL_DMA_Init+0x174>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a27      	ldr	r2, [pc, #156]	; (8007920 <HAL_DMA_Init+0x1e4>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d013      	beq.n	80078b0 <HAL_DMA_Init+0x174>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a25      	ldr	r2, [pc, #148]	; (8007924 <HAL_DMA_Init+0x1e8>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d00e      	beq.n	80078b0 <HAL_DMA_Init+0x174>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a24      	ldr	r2, [pc, #144]	; (8007928 <HAL_DMA_Init+0x1ec>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d009      	beq.n	80078b0 <HAL_DMA_Init+0x174>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a22      	ldr	r2, [pc, #136]	; (800792c <HAL_DMA_Init+0x1f0>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d004      	beq.n	80078b0 <HAL_DMA_Init+0x174>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a21      	ldr	r2, [pc, #132]	; (8007930 <HAL_DMA_Init+0x1f4>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d108      	bne.n	80078c2 <HAL_DMA_Init+0x186>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 0201 	bic.w	r2, r2, #1
 80078be:	601a      	str	r2, [r3, #0]
 80078c0:	e007      	b.n	80078d2 <HAL_DMA_Init+0x196>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f022 0201 	bic.w	r2, r2, #1
 80078d0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80078d2:	e02f      	b.n	8007934 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80078d4:	f7ff fbdc 	bl	8007090 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	2b05      	cmp	r3, #5
 80078e0:	d928      	bls.n	8007934 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2220      	movs	r2, #32
 80078e6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2203      	movs	r2, #3
 80078ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e246      	b.n	8007d82 <HAL_DMA_Init+0x646>
 80078f4:	40020010 	.word	0x40020010
 80078f8:	40020028 	.word	0x40020028
 80078fc:	40020040 	.word	0x40020040
 8007900:	40020058 	.word	0x40020058
 8007904:	40020070 	.word	0x40020070
 8007908:	40020088 	.word	0x40020088
 800790c:	400200a0 	.word	0x400200a0
 8007910:	400200b8 	.word	0x400200b8
 8007914:	40020410 	.word	0x40020410
 8007918:	40020428 	.word	0x40020428
 800791c:	40020440 	.word	0x40020440
 8007920:	40020458 	.word	0x40020458
 8007924:	40020470 	.word	0x40020470
 8007928:	40020488 	.word	0x40020488
 800792c:	400204a0 	.word	0x400204a0
 8007930:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0301 	and.w	r3, r3, #1
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1c8      	bne.n	80078d4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	4b83      	ldr	r3, [pc, #524]	; (8007b5c <HAL_DMA_Init+0x420>)
 800794e:	4013      	ands	r3, r2
 8007950:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800795a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007966:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007972:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	4313      	orrs	r3, r2
 800797e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	2b04      	cmp	r3, #4
 8007986:	d107      	bne.n	8007998 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007990:	4313      	orrs	r3, r2
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	4313      	orrs	r3, r2
 8007996:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007998:	4b71      	ldr	r3, [pc, #452]	; (8007b60 <HAL_DMA_Init+0x424>)
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	4b71      	ldr	r3, [pc, #452]	; (8007b64 <HAL_DMA_Init+0x428>)
 800799e:	4013      	ands	r3, r2
 80079a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079a4:	d328      	bcc.n	80079f8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	2b28      	cmp	r3, #40	; 0x28
 80079ac:	d903      	bls.n	80079b6 <HAL_DMA_Init+0x27a>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	2b2e      	cmp	r3, #46	; 0x2e
 80079b4:	d917      	bls.n	80079e6 <HAL_DMA_Init+0x2aa>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	2b3e      	cmp	r3, #62	; 0x3e
 80079bc:	d903      	bls.n	80079c6 <HAL_DMA_Init+0x28a>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	2b42      	cmp	r3, #66	; 0x42
 80079c4:	d90f      	bls.n	80079e6 <HAL_DMA_Init+0x2aa>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	2b46      	cmp	r3, #70	; 0x46
 80079cc:	d903      	bls.n	80079d6 <HAL_DMA_Init+0x29a>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	2b48      	cmp	r3, #72	; 0x48
 80079d4:	d907      	bls.n	80079e6 <HAL_DMA_Init+0x2aa>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	2b4e      	cmp	r3, #78	; 0x4e
 80079dc:	d905      	bls.n	80079ea <HAL_DMA_Init+0x2ae>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	2b52      	cmp	r3, #82	; 0x52
 80079e4:	d801      	bhi.n	80079ea <HAL_DMA_Init+0x2ae>
 80079e6:	2301      	movs	r3, #1
 80079e8:	e000      	b.n	80079ec <HAL_DMA_Init+0x2b0>
 80079ea:	2300      	movs	r3, #0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d003      	beq.n	80079f8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079f6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f023 0307 	bic.w	r3, r3, #7
 8007a0e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1e:	2b04      	cmp	r3, #4
 8007a20:	d117      	bne.n	8007a52 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00e      	beq.n	8007a52 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f002 fb33 	bl	800a0a0 <DMA_CheckFifoParam>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d008      	beq.n	8007a52 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2240      	movs	r2, #64	; 0x40
 8007a44:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e197      	b.n	8007d82 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f002 fa6e 	bl	8009f3c <DMA_CalcBaseAndBitshift>
 8007a60:	4603      	mov	r3, r0
 8007a62:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a68:	f003 031f 	and.w	r3, r3, #31
 8007a6c:	223f      	movs	r2, #63	; 0x3f
 8007a6e:	409a      	lsls	r2, r3
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	609a      	str	r2, [r3, #8]
 8007a74:	e0cd      	b.n	8007c12 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a3b      	ldr	r2, [pc, #236]	; (8007b68 <HAL_DMA_Init+0x42c>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d022      	beq.n	8007ac6 <HAL_DMA_Init+0x38a>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a39      	ldr	r2, [pc, #228]	; (8007b6c <HAL_DMA_Init+0x430>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d01d      	beq.n	8007ac6 <HAL_DMA_Init+0x38a>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a38      	ldr	r2, [pc, #224]	; (8007b70 <HAL_DMA_Init+0x434>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d018      	beq.n	8007ac6 <HAL_DMA_Init+0x38a>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a36      	ldr	r2, [pc, #216]	; (8007b74 <HAL_DMA_Init+0x438>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d013      	beq.n	8007ac6 <HAL_DMA_Init+0x38a>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a35      	ldr	r2, [pc, #212]	; (8007b78 <HAL_DMA_Init+0x43c>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d00e      	beq.n	8007ac6 <HAL_DMA_Init+0x38a>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a33      	ldr	r2, [pc, #204]	; (8007b7c <HAL_DMA_Init+0x440>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d009      	beq.n	8007ac6 <HAL_DMA_Init+0x38a>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a32      	ldr	r2, [pc, #200]	; (8007b80 <HAL_DMA_Init+0x444>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d004      	beq.n	8007ac6 <HAL_DMA_Init+0x38a>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a30      	ldr	r2, [pc, #192]	; (8007b84 <HAL_DMA_Init+0x448>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d101      	bne.n	8007aca <HAL_DMA_Init+0x38e>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e000      	b.n	8007acc <HAL_DMA_Init+0x390>
 8007aca:	2300      	movs	r3, #0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 8097 	beq.w	8007c00 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a24      	ldr	r2, [pc, #144]	; (8007b68 <HAL_DMA_Init+0x42c>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d021      	beq.n	8007b20 <HAL_DMA_Init+0x3e4>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a22      	ldr	r2, [pc, #136]	; (8007b6c <HAL_DMA_Init+0x430>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d01c      	beq.n	8007b20 <HAL_DMA_Init+0x3e4>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a21      	ldr	r2, [pc, #132]	; (8007b70 <HAL_DMA_Init+0x434>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d017      	beq.n	8007b20 <HAL_DMA_Init+0x3e4>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a1f      	ldr	r2, [pc, #124]	; (8007b74 <HAL_DMA_Init+0x438>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d012      	beq.n	8007b20 <HAL_DMA_Init+0x3e4>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a1e      	ldr	r2, [pc, #120]	; (8007b78 <HAL_DMA_Init+0x43c>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d00d      	beq.n	8007b20 <HAL_DMA_Init+0x3e4>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a1c      	ldr	r2, [pc, #112]	; (8007b7c <HAL_DMA_Init+0x440>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d008      	beq.n	8007b20 <HAL_DMA_Init+0x3e4>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a1b      	ldr	r2, [pc, #108]	; (8007b80 <HAL_DMA_Init+0x444>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d003      	beq.n	8007b20 <HAL_DMA_Init+0x3e4>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a19      	ldr	r2, [pc, #100]	; (8007b84 <HAL_DMA_Init+0x448>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2202      	movs	r2, #2
 8007b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	4b12      	ldr	r3, [pc, #72]	; (8007b88 <HAL_DMA_Init+0x44c>)
 8007b3e:	4013      	ands	r3, r2
 8007b40:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	2b40      	cmp	r3, #64	; 0x40
 8007b48:	d020      	beq.n	8007b8c <HAL_DMA_Init+0x450>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	2b80      	cmp	r3, #128	; 0x80
 8007b50:	d102      	bne.n	8007b58 <HAL_DMA_Init+0x41c>
 8007b52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007b56:	e01a      	b.n	8007b8e <HAL_DMA_Init+0x452>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	e018      	b.n	8007b8e <HAL_DMA_Init+0x452>
 8007b5c:	fe10803f 	.word	0xfe10803f
 8007b60:	5c001000 	.word	0x5c001000
 8007b64:	ffff0000 	.word	0xffff0000
 8007b68:	58025408 	.word	0x58025408
 8007b6c:	5802541c 	.word	0x5802541c
 8007b70:	58025430 	.word	0x58025430
 8007b74:	58025444 	.word	0x58025444
 8007b78:	58025458 	.word	0x58025458
 8007b7c:	5802546c 	.word	0x5802546c
 8007b80:	58025480 	.word	0x58025480
 8007b84:	58025494 	.word	0x58025494
 8007b88:	fffe000f 	.word	0xfffe000f
 8007b8c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	68d2      	ldr	r2, [r2, #12]
 8007b92:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007b94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007b9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007ba4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007bac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007bb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007bbc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	4b6e      	ldr	r3, [pc, #440]	; (8007d8c <HAL_DMA_Init+0x650>)
 8007bd4:	4413      	add	r3, r2
 8007bd6:	4a6e      	ldr	r2, [pc, #440]	; (8007d90 <HAL_DMA_Init+0x654>)
 8007bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bdc:	091b      	lsrs	r3, r3, #4
 8007bde:	009a      	lsls	r2, r3, #2
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f002 f9a9 	bl	8009f3c <DMA_CalcBaseAndBitshift>
 8007bea:	4603      	mov	r3, r0
 8007bec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bf2:	f003 031f 	and.w	r3, r3, #31
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	409a      	lsls	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	605a      	str	r2, [r3, #4]
 8007bfe:	e008      	b.n	8007c12 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2240      	movs	r2, #64	; 0x40
 8007c04:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2203      	movs	r2, #3
 8007c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e0b7      	b.n	8007d82 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a5f      	ldr	r2, [pc, #380]	; (8007d94 <HAL_DMA_Init+0x658>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d072      	beq.n	8007d02 <HAL_DMA_Init+0x5c6>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a5d      	ldr	r2, [pc, #372]	; (8007d98 <HAL_DMA_Init+0x65c>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d06d      	beq.n	8007d02 <HAL_DMA_Init+0x5c6>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a5c      	ldr	r2, [pc, #368]	; (8007d9c <HAL_DMA_Init+0x660>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d068      	beq.n	8007d02 <HAL_DMA_Init+0x5c6>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a5a      	ldr	r2, [pc, #360]	; (8007da0 <HAL_DMA_Init+0x664>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d063      	beq.n	8007d02 <HAL_DMA_Init+0x5c6>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a59      	ldr	r2, [pc, #356]	; (8007da4 <HAL_DMA_Init+0x668>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d05e      	beq.n	8007d02 <HAL_DMA_Init+0x5c6>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a57      	ldr	r2, [pc, #348]	; (8007da8 <HAL_DMA_Init+0x66c>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d059      	beq.n	8007d02 <HAL_DMA_Init+0x5c6>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a56      	ldr	r2, [pc, #344]	; (8007dac <HAL_DMA_Init+0x670>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d054      	beq.n	8007d02 <HAL_DMA_Init+0x5c6>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a54      	ldr	r2, [pc, #336]	; (8007db0 <HAL_DMA_Init+0x674>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d04f      	beq.n	8007d02 <HAL_DMA_Init+0x5c6>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a53      	ldr	r2, [pc, #332]	; (8007db4 <HAL_DMA_Init+0x678>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d04a      	beq.n	8007d02 <HAL_DMA_Init+0x5c6>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a51      	ldr	r2, [pc, #324]	; (8007db8 <HAL_DMA_Init+0x67c>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d045      	beq.n	8007d02 <HAL_DMA_Init+0x5c6>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a50      	ldr	r2, [pc, #320]	; (8007dbc <HAL_DMA_Init+0x680>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d040      	beq.n	8007d02 <HAL_DMA_Init+0x5c6>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a4e      	ldr	r2, [pc, #312]	; (8007dc0 <HAL_DMA_Init+0x684>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d03b      	beq.n	8007d02 <HAL_DMA_Init+0x5c6>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a4d      	ldr	r2, [pc, #308]	; (8007dc4 <HAL_DMA_Init+0x688>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d036      	beq.n	8007d02 <HAL_DMA_Init+0x5c6>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a4b      	ldr	r2, [pc, #300]	; (8007dc8 <HAL_DMA_Init+0x68c>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d031      	beq.n	8007d02 <HAL_DMA_Init+0x5c6>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a4a      	ldr	r2, [pc, #296]	; (8007dcc <HAL_DMA_Init+0x690>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d02c      	beq.n	8007d02 <HAL_DMA_Init+0x5c6>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a48      	ldr	r2, [pc, #288]	; (8007dd0 <HAL_DMA_Init+0x694>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d027      	beq.n	8007d02 <HAL_DMA_Init+0x5c6>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a47      	ldr	r2, [pc, #284]	; (8007dd4 <HAL_DMA_Init+0x698>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d022      	beq.n	8007d02 <HAL_DMA_Init+0x5c6>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a45      	ldr	r2, [pc, #276]	; (8007dd8 <HAL_DMA_Init+0x69c>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d01d      	beq.n	8007d02 <HAL_DMA_Init+0x5c6>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a44      	ldr	r2, [pc, #272]	; (8007ddc <HAL_DMA_Init+0x6a0>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d018      	beq.n	8007d02 <HAL_DMA_Init+0x5c6>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a42      	ldr	r2, [pc, #264]	; (8007de0 <HAL_DMA_Init+0x6a4>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d013      	beq.n	8007d02 <HAL_DMA_Init+0x5c6>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a41      	ldr	r2, [pc, #260]	; (8007de4 <HAL_DMA_Init+0x6a8>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d00e      	beq.n	8007d02 <HAL_DMA_Init+0x5c6>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a3f      	ldr	r2, [pc, #252]	; (8007de8 <HAL_DMA_Init+0x6ac>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d009      	beq.n	8007d02 <HAL_DMA_Init+0x5c6>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a3e      	ldr	r2, [pc, #248]	; (8007dec <HAL_DMA_Init+0x6b0>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d004      	beq.n	8007d02 <HAL_DMA_Init+0x5c6>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a3c      	ldr	r2, [pc, #240]	; (8007df0 <HAL_DMA_Init+0x6b4>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d101      	bne.n	8007d06 <HAL_DMA_Init+0x5ca>
 8007d02:	2301      	movs	r3, #1
 8007d04:	e000      	b.n	8007d08 <HAL_DMA_Init+0x5cc>
 8007d06:	2300      	movs	r3, #0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d032      	beq.n	8007d72 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f002 fa43 	bl	800a198 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	2b80      	cmp	r3, #128	; 0x80
 8007d18:	d102      	bne.n	8007d20 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d28:	b2d2      	uxtb	r2, r2
 8007d2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007d34:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d010      	beq.n	8007d60 <HAL_DMA_Init+0x624>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	2b08      	cmp	r3, #8
 8007d44:	d80c      	bhi.n	8007d60 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f002 fac0 	bl	800a2cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d50:	2200      	movs	r2, #0
 8007d52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007d5c:	605a      	str	r2, [r3, #4]
 8007d5e:	e008      	b.n	8007d72 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3718      	adds	r7, #24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	a7fdabf8 	.word	0xa7fdabf8
 8007d90:	cccccccd 	.word	0xcccccccd
 8007d94:	40020010 	.word	0x40020010
 8007d98:	40020028 	.word	0x40020028
 8007d9c:	40020040 	.word	0x40020040
 8007da0:	40020058 	.word	0x40020058
 8007da4:	40020070 	.word	0x40020070
 8007da8:	40020088 	.word	0x40020088
 8007dac:	400200a0 	.word	0x400200a0
 8007db0:	400200b8 	.word	0x400200b8
 8007db4:	40020410 	.word	0x40020410
 8007db8:	40020428 	.word	0x40020428
 8007dbc:	40020440 	.word	0x40020440
 8007dc0:	40020458 	.word	0x40020458
 8007dc4:	40020470 	.word	0x40020470
 8007dc8:	40020488 	.word	0x40020488
 8007dcc:	400204a0 	.word	0x400204a0
 8007dd0:	400204b8 	.word	0x400204b8
 8007dd4:	58025408 	.word	0x58025408
 8007dd8:	5802541c 	.word	0x5802541c
 8007ddc:	58025430 	.word	0x58025430
 8007de0:	58025444 	.word	0x58025444
 8007de4:	58025458 	.word	0x58025458
 8007de8:	5802546c 	.word	0x5802546c
 8007dec:	58025480 	.word	0x58025480
 8007df0:	58025494 	.word	0x58025494

08007df4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d101      	bne.n	8007e10 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e226      	b.n	800825e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d101      	bne.n	8007e1e <HAL_DMA_Start_IT+0x2a>
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	e21f      	b.n	800825e <HAL_DMA_Start_IT+0x46a>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	f040 820a 	bne.w	8008248 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a68      	ldr	r2, [pc, #416]	; (8007fe8 <HAL_DMA_Start_IT+0x1f4>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d04a      	beq.n	8007ee2 <HAL_DMA_Start_IT+0xee>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a66      	ldr	r2, [pc, #408]	; (8007fec <HAL_DMA_Start_IT+0x1f8>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d045      	beq.n	8007ee2 <HAL_DMA_Start_IT+0xee>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a65      	ldr	r2, [pc, #404]	; (8007ff0 <HAL_DMA_Start_IT+0x1fc>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d040      	beq.n	8007ee2 <HAL_DMA_Start_IT+0xee>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a63      	ldr	r2, [pc, #396]	; (8007ff4 <HAL_DMA_Start_IT+0x200>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d03b      	beq.n	8007ee2 <HAL_DMA_Start_IT+0xee>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a62      	ldr	r2, [pc, #392]	; (8007ff8 <HAL_DMA_Start_IT+0x204>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d036      	beq.n	8007ee2 <HAL_DMA_Start_IT+0xee>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a60      	ldr	r2, [pc, #384]	; (8007ffc <HAL_DMA_Start_IT+0x208>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d031      	beq.n	8007ee2 <HAL_DMA_Start_IT+0xee>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a5f      	ldr	r2, [pc, #380]	; (8008000 <HAL_DMA_Start_IT+0x20c>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d02c      	beq.n	8007ee2 <HAL_DMA_Start_IT+0xee>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a5d      	ldr	r2, [pc, #372]	; (8008004 <HAL_DMA_Start_IT+0x210>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d027      	beq.n	8007ee2 <HAL_DMA_Start_IT+0xee>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a5c      	ldr	r2, [pc, #368]	; (8008008 <HAL_DMA_Start_IT+0x214>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d022      	beq.n	8007ee2 <HAL_DMA_Start_IT+0xee>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a5a      	ldr	r2, [pc, #360]	; (800800c <HAL_DMA_Start_IT+0x218>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d01d      	beq.n	8007ee2 <HAL_DMA_Start_IT+0xee>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a59      	ldr	r2, [pc, #356]	; (8008010 <HAL_DMA_Start_IT+0x21c>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d018      	beq.n	8007ee2 <HAL_DMA_Start_IT+0xee>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a57      	ldr	r2, [pc, #348]	; (8008014 <HAL_DMA_Start_IT+0x220>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d013      	beq.n	8007ee2 <HAL_DMA_Start_IT+0xee>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a56      	ldr	r2, [pc, #344]	; (8008018 <HAL_DMA_Start_IT+0x224>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d00e      	beq.n	8007ee2 <HAL_DMA_Start_IT+0xee>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a54      	ldr	r2, [pc, #336]	; (800801c <HAL_DMA_Start_IT+0x228>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d009      	beq.n	8007ee2 <HAL_DMA_Start_IT+0xee>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a53      	ldr	r2, [pc, #332]	; (8008020 <HAL_DMA_Start_IT+0x22c>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d004      	beq.n	8007ee2 <HAL_DMA_Start_IT+0xee>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a51      	ldr	r2, [pc, #324]	; (8008024 <HAL_DMA_Start_IT+0x230>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d108      	bne.n	8007ef4 <HAL_DMA_Start_IT+0x100>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f022 0201 	bic.w	r2, r2, #1
 8007ef0:	601a      	str	r2, [r3, #0]
 8007ef2:	e007      	b.n	8007f04 <HAL_DMA_Start_IT+0x110>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f022 0201 	bic.w	r2, r2, #1
 8007f02:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	68b9      	ldr	r1, [r7, #8]
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f001 fe6a 	bl	8009be4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a34      	ldr	r2, [pc, #208]	; (8007fe8 <HAL_DMA_Start_IT+0x1f4>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d04a      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x1bc>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a33      	ldr	r2, [pc, #204]	; (8007fec <HAL_DMA_Start_IT+0x1f8>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d045      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x1bc>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a31      	ldr	r2, [pc, #196]	; (8007ff0 <HAL_DMA_Start_IT+0x1fc>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d040      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x1bc>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a30      	ldr	r2, [pc, #192]	; (8007ff4 <HAL_DMA_Start_IT+0x200>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d03b      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x1bc>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a2e      	ldr	r2, [pc, #184]	; (8007ff8 <HAL_DMA_Start_IT+0x204>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d036      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x1bc>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a2d      	ldr	r2, [pc, #180]	; (8007ffc <HAL_DMA_Start_IT+0x208>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d031      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x1bc>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a2b      	ldr	r2, [pc, #172]	; (8008000 <HAL_DMA_Start_IT+0x20c>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d02c      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x1bc>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a2a      	ldr	r2, [pc, #168]	; (8008004 <HAL_DMA_Start_IT+0x210>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d027      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x1bc>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a28      	ldr	r2, [pc, #160]	; (8008008 <HAL_DMA_Start_IT+0x214>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d022      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x1bc>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a27      	ldr	r2, [pc, #156]	; (800800c <HAL_DMA_Start_IT+0x218>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d01d      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x1bc>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a25      	ldr	r2, [pc, #148]	; (8008010 <HAL_DMA_Start_IT+0x21c>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d018      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x1bc>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a24      	ldr	r2, [pc, #144]	; (8008014 <HAL_DMA_Start_IT+0x220>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d013      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x1bc>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a22      	ldr	r2, [pc, #136]	; (8008018 <HAL_DMA_Start_IT+0x224>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d00e      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x1bc>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a21      	ldr	r2, [pc, #132]	; (800801c <HAL_DMA_Start_IT+0x228>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d009      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x1bc>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a1f      	ldr	r2, [pc, #124]	; (8008020 <HAL_DMA_Start_IT+0x22c>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d004      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x1bc>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a1e      	ldr	r2, [pc, #120]	; (8008024 <HAL_DMA_Start_IT+0x230>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d101      	bne.n	8007fb4 <HAL_DMA_Start_IT+0x1c0>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e000      	b.n	8007fb6 <HAL_DMA_Start_IT+0x1c2>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d036      	beq.n	8008028 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f023 021e 	bic.w	r2, r3, #30
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f042 0216 	orr.w	r2, r2, #22
 8007fcc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d03e      	beq.n	8008054 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f042 0208 	orr.w	r2, r2, #8
 8007fe4:	601a      	str	r2, [r3, #0]
 8007fe6:	e035      	b.n	8008054 <HAL_DMA_Start_IT+0x260>
 8007fe8:	40020010 	.word	0x40020010
 8007fec:	40020028 	.word	0x40020028
 8007ff0:	40020040 	.word	0x40020040
 8007ff4:	40020058 	.word	0x40020058
 8007ff8:	40020070 	.word	0x40020070
 8007ffc:	40020088 	.word	0x40020088
 8008000:	400200a0 	.word	0x400200a0
 8008004:	400200b8 	.word	0x400200b8
 8008008:	40020410 	.word	0x40020410
 800800c:	40020428 	.word	0x40020428
 8008010:	40020440 	.word	0x40020440
 8008014:	40020458 	.word	0x40020458
 8008018:	40020470 	.word	0x40020470
 800801c:	40020488 	.word	0x40020488
 8008020:	400204a0 	.word	0x400204a0
 8008024:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f023 020e 	bic.w	r2, r3, #14
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f042 020a 	orr.w	r2, r2, #10
 800803a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008040:	2b00      	cmp	r3, #0
 8008042:	d007      	beq.n	8008054 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f042 0204 	orr.w	r2, r2, #4
 8008052:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a83      	ldr	r2, [pc, #524]	; (8008268 <HAL_DMA_Start_IT+0x474>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d072      	beq.n	8008144 <HAL_DMA_Start_IT+0x350>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a82      	ldr	r2, [pc, #520]	; (800826c <HAL_DMA_Start_IT+0x478>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d06d      	beq.n	8008144 <HAL_DMA_Start_IT+0x350>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a80      	ldr	r2, [pc, #512]	; (8008270 <HAL_DMA_Start_IT+0x47c>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d068      	beq.n	8008144 <HAL_DMA_Start_IT+0x350>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a7f      	ldr	r2, [pc, #508]	; (8008274 <HAL_DMA_Start_IT+0x480>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d063      	beq.n	8008144 <HAL_DMA_Start_IT+0x350>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a7d      	ldr	r2, [pc, #500]	; (8008278 <HAL_DMA_Start_IT+0x484>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d05e      	beq.n	8008144 <HAL_DMA_Start_IT+0x350>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a7c      	ldr	r2, [pc, #496]	; (800827c <HAL_DMA_Start_IT+0x488>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d059      	beq.n	8008144 <HAL_DMA_Start_IT+0x350>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a7a      	ldr	r2, [pc, #488]	; (8008280 <HAL_DMA_Start_IT+0x48c>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d054      	beq.n	8008144 <HAL_DMA_Start_IT+0x350>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a79      	ldr	r2, [pc, #484]	; (8008284 <HAL_DMA_Start_IT+0x490>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d04f      	beq.n	8008144 <HAL_DMA_Start_IT+0x350>
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a77      	ldr	r2, [pc, #476]	; (8008288 <HAL_DMA_Start_IT+0x494>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d04a      	beq.n	8008144 <HAL_DMA_Start_IT+0x350>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a76      	ldr	r2, [pc, #472]	; (800828c <HAL_DMA_Start_IT+0x498>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d045      	beq.n	8008144 <HAL_DMA_Start_IT+0x350>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a74      	ldr	r2, [pc, #464]	; (8008290 <HAL_DMA_Start_IT+0x49c>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d040      	beq.n	8008144 <HAL_DMA_Start_IT+0x350>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a73      	ldr	r2, [pc, #460]	; (8008294 <HAL_DMA_Start_IT+0x4a0>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d03b      	beq.n	8008144 <HAL_DMA_Start_IT+0x350>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a71      	ldr	r2, [pc, #452]	; (8008298 <HAL_DMA_Start_IT+0x4a4>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d036      	beq.n	8008144 <HAL_DMA_Start_IT+0x350>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a70      	ldr	r2, [pc, #448]	; (800829c <HAL_DMA_Start_IT+0x4a8>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d031      	beq.n	8008144 <HAL_DMA_Start_IT+0x350>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a6e      	ldr	r2, [pc, #440]	; (80082a0 <HAL_DMA_Start_IT+0x4ac>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d02c      	beq.n	8008144 <HAL_DMA_Start_IT+0x350>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a6d      	ldr	r2, [pc, #436]	; (80082a4 <HAL_DMA_Start_IT+0x4b0>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d027      	beq.n	8008144 <HAL_DMA_Start_IT+0x350>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a6b      	ldr	r2, [pc, #428]	; (80082a8 <HAL_DMA_Start_IT+0x4b4>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d022      	beq.n	8008144 <HAL_DMA_Start_IT+0x350>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a6a      	ldr	r2, [pc, #424]	; (80082ac <HAL_DMA_Start_IT+0x4b8>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d01d      	beq.n	8008144 <HAL_DMA_Start_IT+0x350>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a68      	ldr	r2, [pc, #416]	; (80082b0 <HAL_DMA_Start_IT+0x4bc>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d018      	beq.n	8008144 <HAL_DMA_Start_IT+0x350>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a67      	ldr	r2, [pc, #412]	; (80082b4 <HAL_DMA_Start_IT+0x4c0>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d013      	beq.n	8008144 <HAL_DMA_Start_IT+0x350>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a65      	ldr	r2, [pc, #404]	; (80082b8 <HAL_DMA_Start_IT+0x4c4>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d00e      	beq.n	8008144 <HAL_DMA_Start_IT+0x350>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a64      	ldr	r2, [pc, #400]	; (80082bc <HAL_DMA_Start_IT+0x4c8>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d009      	beq.n	8008144 <HAL_DMA_Start_IT+0x350>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a62      	ldr	r2, [pc, #392]	; (80082c0 <HAL_DMA_Start_IT+0x4cc>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d004      	beq.n	8008144 <HAL_DMA_Start_IT+0x350>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a61      	ldr	r2, [pc, #388]	; (80082c4 <HAL_DMA_Start_IT+0x4d0>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d101      	bne.n	8008148 <HAL_DMA_Start_IT+0x354>
 8008144:	2301      	movs	r3, #1
 8008146:	e000      	b.n	800814a <HAL_DMA_Start_IT+0x356>
 8008148:	2300      	movs	r3, #0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d01a      	beq.n	8008184 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d007      	beq.n	800816c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800816a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008170:	2b00      	cmp	r3, #0
 8008172:	d007      	beq.n	8008184 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800817e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008182:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a37      	ldr	r2, [pc, #220]	; (8008268 <HAL_DMA_Start_IT+0x474>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d04a      	beq.n	8008224 <HAL_DMA_Start_IT+0x430>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a36      	ldr	r2, [pc, #216]	; (800826c <HAL_DMA_Start_IT+0x478>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d045      	beq.n	8008224 <HAL_DMA_Start_IT+0x430>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a34      	ldr	r2, [pc, #208]	; (8008270 <HAL_DMA_Start_IT+0x47c>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d040      	beq.n	8008224 <HAL_DMA_Start_IT+0x430>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a33      	ldr	r2, [pc, #204]	; (8008274 <HAL_DMA_Start_IT+0x480>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d03b      	beq.n	8008224 <HAL_DMA_Start_IT+0x430>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a31      	ldr	r2, [pc, #196]	; (8008278 <HAL_DMA_Start_IT+0x484>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d036      	beq.n	8008224 <HAL_DMA_Start_IT+0x430>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a30      	ldr	r2, [pc, #192]	; (800827c <HAL_DMA_Start_IT+0x488>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d031      	beq.n	8008224 <HAL_DMA_Start_IT+0x430>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a2e      	ldr	r2, [pc, #184]	; (8008280 <HAL_DMA_Start_IT+0x48c>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d02c      	beq.n	8008224 <HAL_DMA_Start_IT+0x430>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a2d      	ldr	r2, [pc, #180]	; (8008284 <HAL_DMA_Start_IT+0x490>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d027      	beq.n	8008224 <HAL_DMA_Start_IT+0x430>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a2b      	ldr	r2, [pc, #172]	; (8008288 <HAL_DMA_Start_IT+0x494>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d022      	beq.n	8008224 <HAL_DMA_Start_IT+0x430>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a2a      	ldr	r2, [pc, #168]	; (800828c <HAL_DMA_Start_IT+0x498>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d01d      	beq.n	8008224 <HAL_DMA_Start_IT+0x430>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a28      	ldr	r2, [pc, #160]	; (8008290 <HAL_DMA_Start_IT+0x49c>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d018      	beq.n	8008224 <HAL_DMA_Start_IT+0x430>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a27      	ldr	r2, [pc, #156]	; (8008294 <HAL_DMA_Start_IT+0x4a0>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d013      	beq.n	8008224 <HAL_DMA_Start_IT+0x430>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a25      	ldr	r2, [pc, #148]	; (8008298 <HAL_DMA_Start_IT+0x4a4>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d00e      	beq.n	8008224 <HAL_DMA_Start_IT+0x430>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a24      	ldr	r2, [pc, #144]	; (800829c <HAL_DMA_Start_IT+0x4a8>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d009      	beq.n	8008224 <HAL_DMA_Start_IT+0x430>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a22      	ldr	r2, [pc, #136]	; (80082a0 <HAL_DMA_Start_IT+0x4ac>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d004      	beq.n	8008224 <HAL_DMA_Start_IT+0x430>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a21      	ldr	r2, [pc, #132]	; (80082a4 <HAL_DMA_Start_IT+0x4b0>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d108      	bne.n	8008236 <HAL_DMA_Start_IT+0x442>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f042 0201 	orr.w	r2, r2, #1
 8008232:	601a      	str	r2, [r3, #0]
 8008234:	e012      	b.n	800825c <HAL_DMA_Start_IT+0x468>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f042 0201 	orr.w	r2, r2, #1
 8008244:	601a      	str	r2, [r3, #0]
 8008246:	e009      	b.n	800825c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800824e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800825c:	7dfb      	ldrb	r3, [r7, #23]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	40020010 	.word	0x40020010
 800826c:	40020028 	.word	0x40020028
 8008270:	40020040 	.word	0x40020040
 8008274:	40020058 	.word	0x40020058
 8008278:	40020070 	.word	0x40020070
 800827c:	40020088 	.word	0x40020088
 8008280:	400200a0 	.word	0x400200a0
 8008284:	400200b8 	.word	0x400200b8
 8008288:	40020410 	.word	0x40020410
 800828c:	40020428 	.word	0x40020428
 8008290:	40020440 	.word	0x40020440
 8008294:	40020458 	.word	0x40020458
 8008298:	40020470 	.word	0x40020470
 800829c:	40020488 	.word	0x40020488
 80082a0:	400204a0 	.word	0x400204a0
 80082a4:	400204b8 	.word	0x400204b8
 80082a8:	58025408 	.word	0x58025408
 80082ac:	5802541c 	.word	0x5802541c
 80082b0:	58025430 	.word	0x58025430
 80082b4:	58025444 	.word	0x58025444
 80082b8:	58025458 	.word	0x58025458
 80082bc:	5802546c 	.word	0x5802546c
 80082c0:	58025480 	.word	0x58025480
 80082c4:	58025494 	.word	0x58025494

080082c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80082d0:	f7fe fede 	bl	8007090 <HAL_GetTick>
 80082d4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d101      	bne.n	80082e0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e2dc      	b.n	800889a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d008      	beq.n	80082fe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2280      	movs	r2, #128	; 0x80
 80082f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e2cd      	b.n	800889a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a76      	ldr	r2, [pc, #472]	; (80084dc <HAL_DMA_Abort+0x214>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d04a      	beq.n	800839e <HAL_DMA_Abort+0xd6>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a74      	ldr	r2, [pc, #464]	; (80084e0 <HAL_DMA_Abort+0x218>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d045      	beq.n	800839e <HAL_DMA_Abort+0xd6>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a73      	ldr	r2, [pc, #460]	; (80084e4 <HAL_DMA_Abort+0x21c>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d040      	beq.n	800839e <HAL_DMA_Abort+0xd6>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a71      	ldr	r2, [pc, #452]	; (80084e8 <HAL_DMA_Abort+0x220>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d03b      	beq.n	800839e <HAL_DMA_Abort+0xd6>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a70      	ldr	r2, [pc, #448]	; (80084ec <HAL_DMA_Abort+0x224>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d036      	beq.n	800839e <HAL_DMA_Abort+0xd6>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a6e      	ldr	r2, [pc, #440]	; (80084f0 <HAL_DMA_Abort+0x228>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d031      	beq.n	800839e <HAL_DMA_Abort+0xd6>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a6d      	ldr	r2, [pc, #436]	; (80084f4 <HAL_DMA_Abort+0x22c>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d02c      	beq.n	800839e <HAL_DMA_Abort+0xd6>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a6b      	ldr	r2, [pc, #428]	; (80084f8 <HAL_DMA_Abort+0x230>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d027      	beq.n	800839e <HAL_DMA_Abort+0xd6>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a6a      	ldr	r2, [pc, #424]	; (80084fc <HAL_DMA_Abort+0x234>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d022      	beq.n	800839e <HAL_DMA_Abort+0xd6>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a68      	ldr	r2, [pc, #416]	; (8008500 <HAL_DMA_Abort+0x238>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d01d      	beq.n	800839e <HAL_DMA_Abort+0xd6>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a67      	ldr	r2, [pc, #412]	; (8008504 <HAL_DMA_Abort+0x23c>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d018      	beq.n	800839e <HAL_DMA_Abort+0xd6>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a65      	ldr	r2, [pc, #404]	; (8008508 <HAL_DMA_Abort+0x240>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d013      	beq.n	800839e <HAL_DMA_Abort+0xd6>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a64      	ldr	r2, [pc, #400]	; (800850c <HAL_DMA_Abort+0x244>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d00e      	beq.n	800839e <HAL_DMA_Abort+0xd6>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a62      	ldr	r2, [pc, #392]	; (8008510 <HAL_DMA_Abort+0x248>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d009      	beq.n	800839e <HAL_DMA_Abort+0xd6>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a61      	ldr	r2, [pc, #388]	; (8008514 <HAL_DMA_Abort+0x24c>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d004      	beq.n	800839e <HAL_DMA_Abort+0xd6>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a5f      	ldr	r2, [pc, #380]	; (8008518 <HAL_DMA_Abort+0x250>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d101      	bne.n	80083a2 <HAL_DMA_Abort+0xda>
 800839e:	2301      	movs	r3, #1
 80083a0:	e000      	b.n	80083a4 <HAL_DMA_Abort+0xdc>
 80083a2:	2300      	movs	r3, #0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d013      	beq.n	80083d0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f022 021e 	bic.w	r2, r2, #30
 80083b6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	695a      	ldr	r2, [r3, #20]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083c6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	617b      	str	r3, [r7, #20]
 80083ce:	e00a      	b.n	80083e6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f022 020e 	bic.w	r2, r2, #14
 80083de:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a3c      	ldr	r2, [pc, #240]	; (80084dc <HAL_DMA_Abort+0x214>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d072      	beq.n	80084d6 <HAL_DMA_Abort+0x20e>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a3a      	ldr	r2, [pc, #232]	; (80084e0 <HAL_DMA_Abort+0x218>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d06d      	beq.n	80084d6 <HAL_DMA_Abort+0x20e>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a39      	ldr	r2, [pc, #228]	; (80084e4 <HAL_DMA_Abort+0x21c>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d068      	beq.n	80084d6 <HAL_DMA_Abort+0x20e>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a37      	ldr	r2, [pc, #220]	; (80084e8 <HAL_DMA_Abort+0x220>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d063      	beq.n	80084d6 <HAL_DMA_Abort+0x20e>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a36      	ldr	r2, [pc, #216]	; (80084ec <HAL_DMA_Abort+0x224>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d05e      	beq.n	80084d6 <HAL_DMA_Abort+0x20e>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a34      	ldr	r2, [pc, #208]	; (80084f0 <HAL_DMA_Abort+0x228>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d059      	beq.n	80084d6 <HAL_DMA_Abort+0x20e>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a33      	ldr	r2, [pc, #204]	; (80084f4 <HAL_DMA_Abort+0x22c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d054      	beq.n	80084d6 <HAL_DMA_Abort+0x20e>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a31      	ldr	r2, [pc, #196]	; (80084f8 <HAL_DMA_Abort+0x230>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d04f      	beq.n	80084d6 <HAL_DMA_Abort+0x20e>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a30      	ldr	r2, [pc, #192]	; (80084fc <HAL_DMA_Abort+0x234>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d04a      	beq.n	80084d6 <HAL_DMA_Abort+0x20e>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a2e      	ldr	r2, [pc, #184]	; (8008500 <HAL_DMA_Abort+0x238>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d045      	beq.n	80084d6 <HAL_DMA_Abort+0x20e>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a2d      	ldr	r2, [pc, #180]	; (8008504 <HAL_DMA_Abort+0x23c>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d040      	beq.n	80084d6 <HAL_DMA_Abort+0x20e>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a2b      	ldr	r2, [pc, #172]	; (8008508 <HAL_DMA_Abort+0x240>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d03b      	beq.n	80084d6 <HAL_DMA_Abort+0x20e>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a2a      	ldr	r2, [pc, #168]	; (800850c <HAL_DMA_Abort+0x244>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d036      	beq.n	80084d6 <HAL_DMA_Abort+0x20e>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a28      	ldr	r2, [pc, #160]	; (8008510 <HAL_DMA_Abort+0x248>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d031      	beq.n	80084d6 <HAL_DMA_Abort+0x20e>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a27      	ldr	r2, [pc, #156]	; (8008514 <HAL_DMA_Abort+0x24c>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d02c      	beq.n	80084d6 <HAL_DMA_Abort+0x20e>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a25      	ldr	r2, [pc, #148]	; (8008518 <HAL_DMA_Abort+0x250>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d027      	beq.n	80084d6 <HAL_DMA_Abort+0x20e>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a24      	ldr	r2, [pc, #144]	; (800851c <HAL_DMA_Abort+0x254>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d022      	beq.n	80084d6 <HAL_DMA_Abort+0x20e>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a22      	ldr	r2, [pc, #136]	; (8008520 <HAL_DMA_Abort+0x258>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d01d      	beq.n	80084d6 <HAL_DMA_Abort+0x20e>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a21      	ldr	r2, [pc, #132]	; (8008524 <HAL_DMA_Abort+0x25c>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d018      	beq.n	80084d6 <HAL_DMA_Abort+0x20e>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a1f      	ldr	r2, [pc, #124]	; (8008528 <HAL_DMA_Abort+0x260>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d013      	beq.n	80084d6 <HAL_DMA_Abort+0x20e>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a1e      	ldr	r2, [pc, #120]	; (800852c <HAL_DMA_Abort+0x264>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d00e      	beq.n	80084d6 <HAL_DMA_Abort+0x20e>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a1c      	ldr	r2, [pc, #112]	; (8008530 <HAL_DMA_Abort+0x268>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d009      	beq.n	80084d6 <HAL_DMA_Abort+0x20e>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a1b      	ldr	r2, [pc, #108]	; (8008534 <HAL_DMA_Abort+0x26c>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d004      	beq.n	80084d6 <HAL_DMA_Abort+0x20e>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a19      	ldr	r2, [pc, #100]	; (8008538 <HAL_DMA_Abort+0x270>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d132      	bne.n	800853c <HAL_DMA_Abort+0x274>
 80084d6:	2301      	movs	r3, #1
 80084d8:	e031      	b.n	800853e <HAL_DMA_Abort+0x276>
 80084da:	bf00      	nop
 80084dc:	40020010 	.word	0x40020010
 80084e0:	40020028 	.word	0x40020028
 80084e4:	40020040 	.word	0x40020040
 80084e8:	40020058 	.word	0x40020058
 80084ec:	40020070 	.word	0x40020070
 80084f0:	40020088 	.word	0x40020088
 80084f4:	400200a0 	.word	0x400200a0
 80084f8:	400200b8 	.word	0x400200b8
 80084fc:	40020410 	.word	0x40020410
 8008500:	40020428 	.word	0x40020428
 8008504:	40020440 	.word	0x40020440
 8008508:	40020458 	.word	0x40020458
 800850c:	40020470 	.word	0x40020470
 8008510:	40020488 	.word	0x40020488
 8008514:	400204a0 	.word	0x400204a0
 8008518:	400204b8 	.word	0x400204b8
 800851c:	58025408 	.word	0x58025408
 8008520:	5802541c 	.word	0x5802541c
 8008524:	58025430 	.word	0x58025430
 8008528:	58025444 	.word	0x58025444
 800852c:	58025458 	.word	0x58025458
 8008530:	5802546c 	.word	0x5802546c
 8008534:	58025480 	.word	0x58025480
 8008538:	58025494 	.word	0x58025494
 800853c:	2300      	movs	r3, #0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d007      	beq.n	8008552 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800854c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008550:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a6d      	ldr	r2, [pc, #436]	; (800870c <HAL_DMA_Abort+0x444>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d04a      	beq.n	80085f2 <HAL_DMA_Abort+0x32a>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a6b      	ldr	r2, [pc, #428]	; (8008710 <HAL_DMA_Abort+0x448>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d045      	beq.n	80085f2 <HAL_DMA_Abort+0x32a>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a6a      	ldr	r2, [pc, #424]	; (8008714 <HAL_DMA_Abort+0x44c>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d040      	beq.n	80085f2 <HAL_DMA_Abort+0x32a>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a68      	ldr	r2, [pc, #416]	; (8008718 <HAL_DMA_Abort+0x450>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d03b      	beq.n	80085f2 <HAL_DMA_Abort+0x32a>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a67      	ldr	r2, [pc, #412]	; (800871c <HAL_DMA_Abort+0x454>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d036      	beq.n	80085f2 <HAL_DMA_Abort+0x32a>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a65      	ldr	r2, [pc, #404]	; (8008720 <HAL_DMA_Abort+0x458>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d031      	beq.n	80085f2 <HAL_DMA_Abort+0x32a>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a64      	ldr	r2, [pc, #400]	; (8008724 <HAL_DMA_Abort+0x45c>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d02c      	beq.n	80085f2 <HAL_DMA_Abort+0x32a>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a62      	ldr	r2, [pc, #392]	; (8008728 <HAL_DMA_Abort+0x460>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d027      	beq.n	80085f2 <HAL_DMA_Abort+0x32a>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a61      	ldr	r2, [pc, #388]	; (800872c <HAL_DMA_Abort+0x464>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d022      	beq.n	80085f2 <HAL_DMA_Abort+0x32a>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a5f      	ldr	r2, [pc, #380]	; (8008730 <HAL_DMA_Abort+0x468>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d01d      	beq.n	80085f2 <HAL_DMA_Abort+0x32a>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a5e      	ldr	r2, [pc, #376]	; (8008734 <HAL_DMA_Abort+0x46c>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d018      	beq.n	80085f2 <HAL_DMA_Abort+0x32a>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a5c      	ldr	r2, [pc, #368]	; (8008738 <HAL_DMA_Abort+0x470>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d013      	beq.n	80085f2 <HAL_DMA_Abort+0x32a>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a5b      	ldr	r2, [pc, #364]	; (800873c <HAL_DMA_Abort+0x474>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d00e      	beq.n	80085f2 <HAL_DMA_Abort+0x32a>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a59      	ldr	r2, [pc, #356]	; (8008740 <HAL_DMA_Abort+0x478>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d009      	beq.n	80085f2 <HAL_DMA_Abort+0x32a>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a58      	ldr	r2, [pc, #352]	; (8008744 <HAL_DMA_Abort+0x47c>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d004      	beq.n	80085f2 <HAL_DMA_Abort+0x32a>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a56      	ldr	r2, [pc, #344]	; (8008748 <HAL_DMA_Abort+0x480>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d108      	bne.n	8008604 <HAL_DMA_Abort+0x33c>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f022 0201 	bic.w	r2, r2, #1
 8008600:	601a      	str	r2, [r3, #0]
 8008602:	e007      	b.n	8008614 <HAL_DMA_Abort+0x34c>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f022 0201 	bic.w	r2, r2, #1
 8008612:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008614:	e013      	b.n	800863e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008616:	f7fe fd3b 	bl	8007090 <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	2b05      	cmp	r3, #5
 8008622:	d90c      	bls.n	800863e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2220      	movs	r2, #32
 8008628:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2203      	movs	r2, #3
 800862e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e12d      	b.n	800889a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 0301 	and.w	r3, r3, #1
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1e5      	bne.n	8008616 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a2f      	ldr	r2, [pc, #188]	; (800870c <HAL_DMA_Abort+0x444>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d04a      	beq.n	80086ea <HAL_DMA_Abort+0x422>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a2d      	ldr	r2, [pc, #180]	; (8008710 <HAL_DMA_Abort+0x448>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d045      	beq.n	80086ea <HAL_DMA_Abort+0x422>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a2c      	ldr	r2, [pc, #176]	; (8008714 <HAL_DMA_Abort+0x44c>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d040      	beq.n	80086ea <HAL_DMA_Abort+0x422>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a2a      	ldr	r2, [pc, #168]	; (8008718 <HAL_DMA_Abort+0x450>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d03b      	beq.n	80086ea <HAL_DMA_Abort+0x422>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a29      	ldr	r2, [pc, #164]	; (800871c <HAL_DMA_Abort+0x454>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d036      	beq.n	80086ea <HAL_DMA_Abort+0x422>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a27      	ldr	r2, [pc, #156]	; (8008720 <HAL_DMA_Abort+0x458>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d031      	beq.n	80086ea <HAL_DMA_Abort+0x422>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a26      	ldr	r2, [pc, #152]	; (8008724 <HAL_DMA_Abort+0x45c>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d02c      	beq.n	80086ea <HAL_DMA_Abort+0x422>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a24      	ldr	r2, [pc, #144]	; (8008728 <HAL_DMA_Abort+0x460>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d027      	beq.n	80086ea <HAL_DMA_Abort+0x422>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a23      	ldr	r2, [pc, #140]	; (800872c <HAL_DMA_Abort+0x464>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d022      	beq.n	80086ea <HAL_DMA_Abort+0x422>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a21      	ldr	r2, [pc, #132]	; (8008730 <HAL_DMA_Abort+0x468>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d01d      	beq.n	80086ea <HAL_DMA_Abort+0x422>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a20      	ldr	r2, [pc, #128]	; (8008734 <HAL_DMA_Abort+0x46c>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d018      	beq.n	80086ea <HAL_DMA_Abort+0x422>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a1e      	ldr	r2, [pc, #120]	; (8008738 <HAL_DMA_Abort+0x470>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d013      	beq.n	80086ea <HAL_DMA_Abort+0x422>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a1d      	ldr	r2, [pc, #116]	; (800873c <HAL_DMA_Abort+0x474>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d00e      	beq.n	80086ea <HAL_DMA_Abort+0x422>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a1b      	ldr	r2, [pc, #108]	; (8008740 <HAL_DMA_Abort+0x478>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d009      	beq.n	80086ea <HAL_DMA_Abort+0x422>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a1a      	ldr	r2, [pc, #104]	; (8008744 <HAL_DMA_Abort+0x47c>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d004      	beq.n	80086ea <HAL_DMA_Abort+0x422>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a18      	ldr	r2, [pc, #96]	; (8008748 <HAL_DMA_Abort+0x480>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d101      	bne.n	80086ee <HAL_DMA_Abort+0x426>
 80086ea:	2301      	movs	r3, #1
 80086ec:	e000      	b.n	80086f0 <HAL_DMA_Abort+0x428>
 80086ee:	2300      	movs	r3, #0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d02b      	beq.n	800874c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086fe:	f003 031f 	and.w	r3, r3, #31
 8008702:	223f      	movs	r2, #63	; 0x3f
 8008704:	409a      	lsls	r2, r3
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	609a      	str	r2, [r3, #8]
 800870a:	e02a      	b.n	8008762 <HAL_DMA_Abort+0x49a>
 800870c:	40020010 	.word	0x40020010
 8008710:	40020028 	.word	0x40020028
 8008714:	40020040 	.word	0x40020040
 8008718:	40020058 	.word	0x40020058
 800871c:	40020070 	.word	0x40020070
 8008720:	40020088 	.word	0x40020088
 8008724:	400200a0 	.word	0x400200a0
 8008728:	400200b8 	.word	0x400200b8
 800872c:	40020410 	.word	0x40020410
 8008730:	40020428 	.word	0x40020428
 8008734:	40020440 	.word	0x40020440
 8008738:	40020458 	.word	0x40020458
 800873c:	40020470 	.word	0x40020470
 8008740:	40020488 	.word	0x40020488
 8008744:	400204a0 	.word	0x400204a0
 8008748:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008750:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008756:	f003 031f 	and.w	r3, r3, #31
 800875a:	2201      	movs	r2, #1
 800875c:	409a      	lsls	r2, r3
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a4f      	ldr	r2, [pc, #316]	; (80088a4 <HAL_DMA_Abort+0x5dc>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d072      	beq.n	8008852 <HAL_DMA_Abort+0x58a>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a4d      	ldr	r2, [pc, #308]	; (80088a8 <HAL_DMA_Abort+0x5e0>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d06d      	beq.n	8008852 <HAL_DMA_Abort+0x58a>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a4c      	ldr	r2, [pc, #304]	; (80088ac <HAL_DMA_Abort+0x5e4>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d068      	beq.n	8008852 <HAL_DMA_Abort+0x58a>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a4a      	ldr	r2, [pc, #296]	; (80088b0 <HAL_DMA_Abort+0x5e8>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d063      	beq.n	8008852 <HAL_DMA_Abort+0x58a>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a49      	ldr	r2, [pc, #292]	; (80088b4 <HAL_DMA_Abort+0x5ec>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d05e      	beq.n	8008852 <HAL_DMA_Abort+0x58a>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a47      	ldr	r2, [pc, #284]	; (80088b8 <HAL_DMA_Abort+0x5f0>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d059      	beq.n	8008852 <HAL_DMA_Abort+0x58a>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a46      	ldr	r2, [pc, #280]	; (80088bc <HAL_DMA_Abort+0x5f4>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d054      	beq.n	8008852 <HAL_DMA_Abort+0x58a>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a44      	ldr	r2, [pc, #272]	; (80088c0 <HAL_DMA_Abort+0x5f8>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d04f      	beq.n	8008852 <HAL_DMA_Abort+0x58a>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a43      	ldr	r2, [pc, #268]	; (80088c4 <HAL_DMA_Abort+0x5fc>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d04a      	beq.n	8008852 <HAL_DMA_Abort+0x58a>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a41      	ldr	r2, [pc, #260]	; (80088c8 <HAL_DMA_Abort+0x600>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d045      	beq.n	8008852 <HAL_DMA_Abort+0x58a>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a40      	ldr	r2, [pc, #256]	; (80088cc <HAL_DMA_Abort+0x604>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d040      	beq.n	8008852 <HAL_DMA_Abort+0x58a>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a3e      	ldr	r2, [pc, #248]	; (80088d0 <HAL_DMA_Abort+0x608>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d03b      	beq.n	8008852 <HAL_DMA_Abort+0x58a>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a3d      	ldr	r2, [pc, #244]	; (80088d4 <HAL_DMA_Abort+0x60c>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d036      	beq.n	8008852 <HAL_DMA_Abort+0x58a>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a3b      	ldr	r2, [pc, #236]	; (80088d8 <HAL_DMA_Abort+0x610>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d031      	beq.n	8008852 <HAL_DMA_Abort+0x58a>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a3a      	ldr	r2, [pc, #232]	; (80088dc <HAL_DMA_Abort+0x614>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d02c      	beq.n	8008852 <HAL_DMA_Abort+0x58a>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a38      	ldr	r2, [pc, #224]	; (80088e0 <HAL_DMA_Abort+0x618>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d027      	beq.n	8008852 <HAL_DMA_Abort+0x58a>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a37      	ldr	r2, [pc, #220]	; (80088e4 <HAL_DMA_Abort+0x61c>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d022      	beq.n	8008852 <HAL_DMA_Abort+0x58a>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a35      	ldr	r2, [pc, #212]	; (80088e8 <HAL_DMA_Abort+0x620>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d01d      	beq.n	8008852 <HAL_DMA_Abort+0x58a>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a34      	ldr	r2, [pc, #208]	; (80088ec <HAL_DMA_Abort+0x624>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d018      	beq.n	8008852 <HAL_DMA_Abort+0x58a>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a32      	ldr	r2, [pc, #200]	; (80088f0 <HAL_DMA_Abort+0x628>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d013      	beq.n	8008852 <HAL_DMA_Abort+0x58a>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a31      	ldr	r2, [pc, #196]	; (80088f4 <HAL_DMA_Abort+0x62c>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d00e      	beq.n	8008852 <HAL_DMA_Abort+0x58a>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a2f      	ldr	r2, [pc, #188]	; (80088f8 <HAL_DMA_Abort+0x630>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d009      	beq.n	8008852 <HAL_DMA_Abort+0x58a>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a2e      	ldr	r2, [pc, #184]	; (80088fc <HAL_DMA_Abort+0x634>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d004      	beq.n	8008852 <HAL_DMA_Abort+0x58a>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a2c      	ldr	r2, [pc, #176]	; (8008900 <HAL_DMA_Abort+0x638>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d101      	bne.n	8008856 <HAL_DMA_Abort+0x58e>
 8008852:	2301      	movs	r3, #1
 8008854:	e000      	b.n	8008858 <HAL_DMA_Abort+0x590>
 8008856:	2300      	movs	r3, #0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d015      	beq.n	8008888 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008864:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00c      	beq.n	8008888 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008878:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800887c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008886:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3718      	adds	r7, #24
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	40020010 	.word	0x40020010
 80088a8:	40020028 	.word	0x40020028
 80088ac:	40020040 	.word	0x40020040
 80088b0:	40020058 	.word	0x40020058
 80088b4:	40020070 	.word	0x40020070
 80088b8:	40020088 	.word	0x40020088
 80088bc:	400200a0 	.word	0x400200a0
 80088c0:	400200b8 	.word	0x400200b8
 80088c4:	40020410 	.word	0x40020410
 80088c8:	40020428 	.word	0x40020428
 80088cc:	40020440 	.word	0x40020440
 80088d0:	40020458 	.word	0x40020458
 80088d4:	40020470 	.word	0x40020470
 80088d8:	40020488 	.word	0x40020488
 80088dc:	400204a0 	.word	0x400204a0
 80088e0:	400204b8 	.word	0x400204b8
 80088e4:	58025408 	.word	0x58025408
 80088e8:	5802541c 	.word	0x5802541c
 80088ec:	58025430 	.word	0x58025430
 80088f0:	58025444 	.word	0x58025444
 80088f4:	58025458 	.word	0x58025458
 80088f8:	5802546c 	.word	0x5802546c
 80088fc:	58025480 	.word	0x58025480
 8008900:	58025494 	.word	0x58025494

08008904 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d101      	bne.n	8008916 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e237      	b.n	8008d86 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b02      	cmp	r3, #2
 8008920:	d004      	beq.n	800892c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2280      	movs	r2, #128	; 0x80
 8008926:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e22c      	b.n	8008d86 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a5c      	ldr	r2, [pc, #368]	; (8008aa4 <HAL_DMA_Abort_IT+0x1a0>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d04a      	beq.n	80089cc <HAL_DMA_Abort_IT+0xc8>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a5b      	ldr	r2, [pc, #364]	; (8008aa8 <HAL_DMA_Abort_IT+0x1a4>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d045      	beq.n	80089cc <HAL_DMA_Abort_IT+0xc8>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a59      	ldr	r2, [pc, #356]	; (8008aac <HAL_DMA_Abort_IT+0x1a8>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d040      	beq.n	80089cc <HAL_DMA_Abort_IT+0xc8>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a58      	ldr	r2, [pc, #352]	; (8008ab0 <HAL_DMA_Abort_IT+0x1ac>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d03b      	beq.n	80089cc <HAL_DMA_Abort_IT+0xc8>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a56      	ldr	r2, [pc, #344]	; (8008ab4 <HAL_DMA_Abort_IT+0x1b0>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d036      	beq.n	80089cc <HAL_DMA_Abort_IT+0xc8>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a55      	ldr	r2, [pc, #340]	; (8008ab8 <HAL_DMA_Abort_IT+0x1b4>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d031      	beq.n	80089cc <HAL_DMA_Abort_IT+0xc8>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a53      	ldr	r2, [pc, #332]	; (8008abc <HAL_DMA_Abort_IT+0x1b8>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d02c      	beq.n	80089cc <HAL_DMA_Abort_IT+0xc8>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a52      	ldr	r2, [pc, #328]	; (8008ac0 <HAL_DMA_Abort_IT+0x1bc>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d027      	beq.n	80089cc <HAL_DMA_Abort_IT+0xc8>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a50      	ldr	r2, [pc, #320]	; (8008ac4 <HAL_DMA_Abort_IT+0x1c0>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d022      	beq.n	80089cc <HAL_DMA_Abort_IT+0xc8>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a4f      	ldr	r2, [pc, #316]	; (8008ac8 <HAL_DMA_Abort_IT+0x1c4>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d01d      	beq.n	80089cc <HAL_DMA_Abort_IT+0xc8>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a4d      	ldr	r2, [pc, #308]	; (8008acc <HAL_DMA_Abort_IT+0x1c8>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d018      	beq.n	80089cc <HAL_DMA_Abort_IT+0xc8>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a4c      	ldr	r2, [pc, #304]	; (8008ad0 <HAL_DMA_Abort_IT+0x1cc>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d013      	beq.n	80089cc <HAL_DMA_Abort_IT+0xc8>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a4a      	ldr	r2, [pc, #296]	; (8008ad4 <HAL_DMA_Abort_IT+0x1d0>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d00e      	beq.n	80089cc <HAL_DMA_Abort_IT+0xc8>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a49      	ldr	r2, [pc, #292]	; (8008ad8 <HAL_DMA_Abort_IT+0x1d4>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d009      	beq.n	80089cc <HAL_DMA_Abort_IT+0xc8>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a47      	ldr	r2, [pc, #284]	; (8008adc <HAL_DMA_Abort_IT+0x1d8>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d004      	beq.n	80089cc <HAL_DMA_Abort_IT+0xc8>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a46      	ldr	r2, [pc, #280]	; (8008ae0 <HAL_DMA_Abort_IT+0x1dc>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d101      	bne.n	80089d0 <HAL_DMA_Abort_IT+0xcc>
 80089cc:	2301      	movs	r3, #1
 80089ce:	e000      	b.n	80089d2 <HAL_DMA_Abort_IT+0xce>
 80089d0:	2300      	movs	r3, #0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f000 8086 	beq.w	8008ae4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2204      	movs	r2, #4
 80089dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a2f      	ldr	r2, [pc, #188]	; (8008aa4 <HAL_DMA_Abort_IT+0x1a0>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d04a      	beq.n	8008a80 <HAL_DMA_Abort_IT+0x17c>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a2e      	ldr	r2, [pc, #184]	; (8008aa8 <HAL_DMA_Abort_IT+0x1a4>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d045      	beq.n	8008a80 <HAL_DMA_Abort_IT+0x17c>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a2c      	ldr	r2, [pc, #176]	; (8008aac <HAL_DMA_Abort_IT+0x1a8>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d040      	beq.n	8008a80 <HAL_DMA_Abort_IT+0x17c>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a2b      	ldr	r2, [pc, #172]	; (8008ab0 <HAL_DMA_Abort_IT+0x1ac>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d03b      	beq.n	8008a80 <HAL_DMA_Abort_IT+0x17c>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a29      	ldr	r2, [pc, #164]	; (8008ab4 <HAL_DMA_Abort_IT+0x1b0>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d036      	beq.n	8008a80 <HAL_DMA_Abort_IT+0x17c>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a28      	ldr	r2, [pc, #160]	; (8008ab8 <HAL_DMA_Abort_IT+0x1b4>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d031      	beq.n	8008a80 <HAL_DMA_Abort_IT+0x17c>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a26      	ldr	r2, [pc, #152]	; (8008abc <HAL_DMA_Abort_IT+0x1b8>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d02c      	beq.n	8008a80 <HAL_DMA_Abort_IT+0x17c>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a25      	ldr	r2, [pc, #148]	; (8008ac0 <HAL_DMA_Abort_IT+0x1bc>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d027      	beq.n	8008a80 <HAL_DMA_Abort_IT+0x17c>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a23      	ldr	r2, [pc, #140]	; (8008ac4 <HAL_DMA_Abort_IT+0x1c0>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d022      	beq.n	8008a80 <HAL_DMA_Abort_IT+0x17c>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a22      	ldr	r2, [pc, #136]	; (8008ac8 <HAL_DMA_Abort_IT+0x1c4>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d01d      	beq.n	8008a80 <HAL_DMA_Abort_IT+0x17c>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a20      	ldr	r2, [pc, #128]	; (8008acc <HAL_DMA_Abort_IT+0x1c8>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d018      	beq.n	8008a80 <HAL_DMA_Abort_IT+0x17c>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a1f      	ldr	r2, [pc, #124]	; (8008ad0 <HAL_DMA_Abort_IT+0x1cc>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d013      	beq.n	8008a80 <HAL_DMA_Abort_IT+0x17c>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a1d      	ldr	r2, [pc, #116]	; (8008ad4 <HAL_DMA_Abort_IT+0x1d0>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d00e      	beq.n	8008a80 <HAL_DMA_Abort_IT+0x17c>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a1c      	ldr	r2, [pc, #112]	; (8008ad8 <HAL_DMA_Abort_IT+0x1d4>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d009      	beq.n	8008a80 <HAL_DMA_Abort_IT+0x17c>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a1a      	ldr	r2, [pc, #104]	; (8008adc <HAL_DMA_Abort_IT+0x1d8>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d004      	beq.n	8008a80 <HAL_DMA_Abort_IT+0x17c>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a19      	ldr	r2, [pc, #100]	; (8008ae0 <HAL_DMA_Abort_IT+0x1dc>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d108      	bne.n	8008a92 <HAL_DMA_Abort_IT+0x18e>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 0201 	bic.w	r2, r2, #1
 8008a8e:	601a      	str	r2, [r3, #0]
 8008a90:	e178      	b.n	8008d84 <HAL_DMA_Abort_IT+0x480>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f022 0201 	bic.w	r2, r2, #1
 8008aa0:	601a      	str	r2, [r3, #0]
 8008aa2:	e16f      	b.n	8008d84 <HAL_DMA_Abort_IT+0x480>
 8008aa4:	40020010 	.word	0x40020010
 8008aa8:	40020028 	.word	0x40020028
 8008aac:	40020040 	.word	0x40020040
 8008ab0:	40020058 	.word	0x40020058
 8008ab4:	40020070 	.word	0x40020070
 8008ab8:	40020088 	.word	0x40020088
 8008abc:	400200a0 	.word	0x400200a0
 8008ac0:	400200b8 	.word	0x400200b8
 8008ac4:	40020410 	.word	0x40020410
 8008ac8:	40020428 	.word	0x40020428
 8008acc:	40020440 	.word	0x40020440
 8008ad0:	40020458 	.word	0x40020458
 8008ad4:	40020470 	.word	0x40020470
 8008ad8:	40020488 	.word	0x40020488
 8008adc:	400204a0 	.word	0x400204a0
 8008ae0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f022 020e 	bic.w	r2, r2, #14
 8008af2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a6c      	ldr	r2, [pc, #432]	; (8008cac <HAL_DMA_Abort_IT+0x3a8>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d04a      	beq.n	8008b94 <HAL_DMA_Abort_IT+0x290>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a6b      	ldr	r2, [pc, #428]	; (8008cb0 <HAL_DMA_Abort_IT+0x3ac>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d045      	beq.n	8008b94 <HAL_DMA_Abort_IT+0x290>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a69      	ldr	r2, [pc, #420]	; (8008cb4 <HAL_DMA_Abort_IT+0x3b0>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d040      	beq.n	8008b94 <HAL_DMA_Abort_IT+0x290>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a68      	ldr	r2, [pc, #416]	; (8008cb8 <HAL_DMA_Abort_IT+0x3b4>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d03b      	beq.n	8008b94 <HAL_DMA_Abort_IT+0x290>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a66      	ldr	r2, [pc, #408]	; (8008cbc <HAL_DMA_Abort_IT+0x3b8>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d036      	beq.n	8008b94 <HAL_DMA_Abort_IT+0x290>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a65      	ldr	r2, [pc, #404]	; (8008cc0 <HAL_DMA_Abort_IT+0x3bc>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d031      	beq.n	8008b94 <HAL_DMA_Abort_IT+0x290>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a63      	ldr	r2, [pc, #396]	; (8008cc4 <HAL_DMA_Abort_IT+0x3c0>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d02c      	beq.n	8008b94 <HAL_DMA_Abort_IT+0x290>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a62      	ldr	r2, [pc, #392]	; (8008cc8 <HAL_DMA_Abort_IT+0x3c4>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d027      	beq.n	8008b94 <HAL_DMA_Abort_IT+0x290>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a60      	ldr	r2, [pc, #384]	; (8008ccc <HAL_DMA_Abort_IT+0x3c8>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d022      	beq.n	8008b94 <HAL_DMA_Abort_IT+0x290>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a5f      	ldr	r2, [pc, #380]	; (8008cd0 <HAL_DMA_Abort_IT+0x3cc>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d01d      	beq.n	8008b94 <HAL_DMA_Abort_IT+0x290>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a5d      	ldr	r2, [pc, #372]	; (8008cd4 <HAL_DMA_Abort_IT+0x3d0>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d018      	beq.n	8008b94 <HAL_DMA_Abort_IT+0x290>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a5c      	ldr	r2, [pc, #368]	; (8008cd8 <HAL_DMA_Abort_IT+0x3d4>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d013      	beq.n	8008b94 <HAL_DMA_Abort_IT+0x290>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a5a      	ldr	r2, [pc, #360]	; (8008cdc <HAL_DMA_Abort_IT+0x3d8>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d00e      	beq.n	8008b94 <HAL_DMA_Abort_IT+0x290>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a59      	ldr	r2, [pc, #356]	; (8008ce0 <HAL_DMA_Abort_IT+0x3dc>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d009      	beq.n	8008b94 <HAL_DMA_Abort_IT+0x290>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a57      	ldr	r2, [pc, #348]	; (8008ce4 <HAL_DMA_Abort_IT+0x3e0>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d004      	beq.n	8008b94 <HAL_DMA_Abort_IT+0x290>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a56      	ldr	r2, [pc, #344]	; (8008ce8 <HAL_DMA_Abort_IT+0x3e4>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d108      	bne.n	8008ba6 <HAL_DMA_Abort_IT+0x2a2>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f022 0201 	bic.w	r2, r2, #1
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	e007      	b.n	8008bb6 <HAL_DMA_Abort_IT+0x2b2>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f022 0201 	bic.w	r2, r2, #1
 8008bb4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a3c      	ldr	r2, [pc, #240]	; (8008cac <HAL_DMA_Abort_IT+0x3a8>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d072      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x3a2>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a3a      	ldr	r2, [pc, #232]	; (8008cb0 <HAL_DMA_Abort_IT+0x3ac>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d06d      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x3a2>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a39      	ldr	r2, [pc, #228]	; (8008cb4 <HAL_DMA_Abort_IT+0x3b0>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d068      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x3a2>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a37      	ldr	r2, [pc, #220]	; (8008cb8 <HAL_DMA_Abort_IT+0x3b4>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d063      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x3a2>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a36      	ldr	r2, [pc, #216]	; (8008cbc <HAL_DMA_Abort_IT+0x3b8>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d05e      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x3a2>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a34      	ldr	r2, [pc, #208]	; (8008cc0 <HAL_DMA_Abort_IT+0x3bc>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d059      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x3a2>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a33      	ldr	r2, [pc, #204]	; (8008cc4 <HAL_DMA_Abort_IT+0x3c0>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d054      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x3a2>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a31      	ldr	r2, [pc, #196]	; (8008cc8 <HAL_DMA_Abort_IT+0x3c4>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d04f      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x3a2>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a30      	ldr	r2, [pc, #192]	; (8008ccc <HAL_DMA_Abort_IT+0x3c8>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d04a      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x3a2>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a2e      	ldr	r2, [pc, #184]	; (8008cd0 <HAL_DMA_Abort_IT+0x3cc>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d045      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x3a2>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a2d      	ldr	r2, [pc, #180]	; (8008cd4 <HAL_DMA_Abort_IT+0x3d0>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d040      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x3a2>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a2b      	ldr	r2, [pc, #172]	; (8008cd8 <HAL_DMA_Abort_IT+0x3d4>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d03b      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x3a2>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a2a      	ldr	r2, [pc, #168]	; (8008cdc <HAL_DMA_Abort_IT+0x3d8>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d036      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x3a2>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a28      	ldr	r2, [pc, #160]	; (8008ce0 <HAL_DMA_Abort_IT+0x3dc>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d031      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x3a2>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a27      	ldr	r2, [pc, #156]	; (8008ce4 <HAL_DMA_Abort_IT+0x3e0>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d02c      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x3a2>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a25      	ldr	r2, [pc, #148]	; (8008ce8 <HAL_DMA_Abort_IT+0x3e4>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d027      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x3a2>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a24      	ldr	r2, [pc, #144]	; (8008cec <HAL_DMA_Abort_IT+0x3e8>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d022      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x3a2>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a22      	ldr	r2, [pc, #136]	; (8008cf0 <HAL_DMA_Abort_IT+0x3ec>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d01d      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x3a2>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a21      	ldr	r2, [pc, #132]	; (8008cf4 <HAL_DMA_Abort_IT+0x3f0>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d018      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x3a2>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a1f      	ldr	r2, [pc, #124]	; (8008cf8 <HAL_DMA_Abort_IT+0x3f4>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d013      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x3a2>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a1e      	ldr	r2, [pc, #120]	; (8008cfc <HAL_DMA_Abort_IT+0x3f8>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d00e      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x3a2>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a1c      	ldr	r2, [pc, #112]	; (8008d00 <HAL_DMA_Abort_IT+0x3fc>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d009      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x3a2>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a1b      	ldr	r2, [pc, #108]	; (8008d04 <HAL_DMA_Abort_IT+0x400>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d004      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x3a2>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a19      	ldr	r2, [pc, #100]	; (8008d08 <HAL_DMA_Abort_IT+0x404>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d132      	bne.n	8008d0c <HAL_DMA_Abort_IT+0x408>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e031      	b.n	8008d0e <HAL_DMA_Abort_IT+0x40a>
 8008caa:	bf00      	nop
 8008cac:	40020010 	.word	0x40020010
 8008cb0:	40020028 	.word	0x40020028
 8008cb4:	40020040 	.word	0x40020040
 8008cb8:	40020058 	.word	0x40020058
 8008cbc:	40020070 	.word	0x40020070
 8008cc0:	40020088 	.word	0x40020088
 8008cc4:	400200a0 	.word	0x400200a0
 8008cc8:	400200b8 	.word	0x400200b8
 8008ccc:	40020410 	.word	0x40020410
 8008cd0:	40020428 	.word	0x40020428
 8008cd4:	40020440 	.word	0x40020440
 8008cd8:	40020458 	.word	0x40020458
 8008cdc:	40020470 	.word	0x40020470
 8008ce0:	40020488 	.word	0x40020488
 8008ce4:	400204a0 	.word	0x400204a0
 8008ce8:	400204b8 	.word	0x400204b8
 8008cec:	58025408 	.word	0x58025408
 8008cf0:	5802541c 	.word	0x5802541c
 8008cf4:	58025430 	.word	0x58025430
 8008cf8:	58025444 	.word	0x58025444
 8008cfc:	58025458 	.word	0x58025458
 8008d00:	5802546c 	.word	0x5802546c
 8008d04:	58025480 	.word	0x58025480
 8008d08:	58025494 	.word	0x58025494
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d028      	beq.n	8008d64 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d20:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d26:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d2c:	f003 031f 	and.w	r3, r3, #31
 8008d30:	2201      	movs	r2, #1
 8008d32:	409a      	lsls	r2, r3
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008d40:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00c      	beq.n	8008d64 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d58:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008d62:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d003      	beq.n	8008d84 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop

08008d90 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b08a      	sub	sp, #40	; 0x28
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008d9c:	4b67      	ldr	r3, [pc, #412]	; (8008f3c <HAL_DMA_IRQHandler+0x1ac>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a67      	ldr	r2, [pc, #412]	; (8008f40 <HAL_DMA_IRQHandler+0x1b0>)
 8008da2:	fba2 2303 	umull	r2, r3, r2, r3
 8008da6:	0a9b      	lsrs	r3, r3, #10
 8008da8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dae:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008db4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a5f      	ldr	r2, [pc, #380]	; (8008f44 <HAL_DMA_IRQHandler+0x1b4>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d04a      	beq.n	8008e62 <HAL_DMA_IRQHandler+0xd2>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a5d      	ldr	r2, [pc, #372]	; (8008f48 <HAL_DMA_IRQHandler+0x1b8>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d045      	beq.n	8008e62 <HAL_DMA_IRQHandler+0xd2>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a5c      	ldr	r2, [pc, #368]	; (8008f4c <HAL_DMA_IRQHandler+0x1bc>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d040      	beq.n	8008e62 <HAL_DMA_IRQHandler+0xd2>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a5a      	ldr	r2, [pc, #360]	; (8008f50 <HAL_DMA_IRQHandler+0x1c0>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d03b      	beq.n	8008e62 <HAL_DMA_IRQHandler+0xd2>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a59      	ldr	r2, [pc, #356]	; (8008f54 <HAL_DMA_IRQHandler+0x1c4>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d036      	beq.n	8008e62 <HAL_DMA_IRQHandler+0xd2>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a57      	ldr	r2, [pc, #348]	; (8008f58 <HAL_DMA_IRQHandler+0x1c8>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d031      	beq.n	8008e62 <HAL_DMA_IRQHandler+0xd2>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a56      	ldr	r2, [pc, #344]	; (8008f5c <HAL_DMA_IRQHandler+0x1cc>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d02c      	beq.n	8008e62 <HAL_DMA_IRQHandler+0xd2>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a54      	ldr	r2, [pc, #336]	; (8008f60 <HAL_DMA_IRQHandler+0x1d0>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d027      	beq.n	8008e62 <HAL_DMA_IRQHandler+0xd2>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a53      	ldr	r2, [pc, #332]	; (8008f64 <HAL_DMA_IRQHandler+0x1d4>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d022      	beq.n	8008e62 <HAL_DMA_IRQHandler+0xd2>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a51      	ldr	r2, [pc, #324]	; (8008f68 <HAL_DMA_IRQHandler+0x1d8>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d01d      	beq.n	8008e62 <HAL_DMA_IRQHandler+0xd2>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a50      	ldr	r2, [pc, #320]	; (8008f6c <HAL_DMA_IRQHandler+0x1dc>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d018      	beq.n	8008e62 <HAL_DMA_IRQHandler+0xd2>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a4e      	ldr	r2, [pc, #312]	; (8008f70 <HAL_DMA_IRQHandler+0x1e0>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d013      	beq.n	8008e62 <HAL_DMA_IRQHandler+0xd2>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a4d      	ldr	r2, [pc, #308]	; (8008f74 <HAL_DMA_IRQHandler+0x1e4>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d00e      	beq.n	8008e62 <HAL_DMA_IRQHandler+0xd2>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a4b      	ldr	r2, [pc, #300]	; (8008f78 <HAL_DMA_IRQHandler+0x1e8>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d009      	beq.n	8008e62 <HAL_DMA_IRQHandler+0xd2>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a4a      	ldr	r2, [pc, #296]	; (8008f7c <HAL_DMA_IRQHandler+0x1ec>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d004      	beq.n	8008e62 <HAL_DMA_IRQHandler+0xd2>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a48      	ldr	r2, [pc, #288]	; (8008f80 <HAL_DMA_IRQHandler+0x1f0>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d101      	bne.n	8008e66 <HAL_DMA_IRQHandler+0xd6>
 8008e62:	2301      	movs	r3, #1
 8008e64:	e000      	b.n	8008e68 <HAL_DMA_IRQHandler+0xd8>
 8008e66:	2300      	movs	r3, #0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 842b 	beq.w	80096c4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e72:	f003 031f 	and.w	r3, r3, #31
 8008e76:	2208      	movs	r2, #8
 8008e78:	409a      	lsls	r2, r3
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f000 80a2 	beq.w	8008fc8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a2e      	ldr	r2, [pc, #184]	; (8008f44 <HAL_DMA_IRQHandler+0x1b4>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d04a      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x194>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a2d      	ldr	r2, [pc, #180]	; (8008f48 <HAL_DMA_IRQHandler+0x1b8>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d045      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x194>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a2b      	ldr	r2, [pc, #172]	; (8008f4c <HAL_DMA_IRQHandler+0x1bc>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d040      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x194>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a2a      	ldr	r2, [pc, #168]	; (8008f50 <HAL_DMA_IRQHandler+0x1c0>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d03b      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x194>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a28      	ldr	r2, [pc, #160]	; (8008f54 <HAL_DMA_IRQHandler+0x1c4>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d036      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x194>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a27      	ldr	r2, [pc, #156]	; (8008f58 <HAL_DMA_IRQHandler+0x1c8>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d031      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x194>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a25      	ldr	r2, [pc, #148]	; (8008f5c <HAL_DMA_IRQHandler+0x1cc>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d02c      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x194>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a24      	ldr	r2, [pc, #144]	; (8008f60 <HAL_DMA_IRQHandler+0x1d0>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d027      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x194>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a22      	ldr	r2, [pc, #136]	; (8008f64 <HAL_DMA_IRQHandler+0x1d4>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d022      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x194>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a21      	ldr	r2, [pc, #132]	; (8008f68 <HAL_DMA_IRQHandler+0x1d8>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d01d      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x194>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a1f      	ldr	r2, [pc, #124]	; (8008f6c <HAL_DMA_IRQHandler+0x1dc>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d018      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x194>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a1e      	ldr	r2, [pc, #120]	; (8008f70 <HAL_DMA_IRQHandler+0x1e0>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d013      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x194>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a1c      	ldr	r2, [pc, #112]	; (8008f74 <HAL_DMA_IRQHandler+0x1e4>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d00e      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x194>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a1b      	ldr	r2, [pc, #108]	; (8008f78 <HAL_DMA_IRQHandler+0x1e8>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d009      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x194>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a19      	ldr	r2, [pc, #100]	; (8008f7c <HAL_DMA_IRQHandler+0x1ec>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d004      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x194>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a18      	ldr	r2, [pc, #96]	; (8008f80 <HAL_DMA_IRQHandler+0x1f0>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d12f      	bne.n	8008f84 <HAL_DMA_IRQHandler+0x1f4>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0304 	and.w	r3, r3, #4
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	bf14      	ite	ne
 8008f32:	2301      	movne	r3, #1
 8008f34:	2300      	moveq	r3, #0
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	e02e      	b.n	8008f98 <HAL_DMA_IRQHandler+0x208>
 8008f3a:	bf00      	nop
 8008f3c:	24000230 	.word	0x24000230
 8008f40:	1b4e81b5 	.word	0x1b4e81b5
 8008f44:	40020010 	.word	0x40020010
 8008f48:	40020028 	.word	0x40020028
 8008f4c:	40020040 	.word	0x40020040
 8008f50:	40020058 	.word	0x40020058
 8008f54:	40020070 	.word	0x40020070
 8008f58:	40020088 	.word	0x40020088
 8008f5c:	400200a0 	.word	0x400200a0
 8008f60:	400200b8 	.word	0x400200b8
 8008f64:	40020410 	.word	0x40020410
 8008f68:	40020428 	.word	0x40020428
 8008f6c:	40020440 	.word	0x40020440
 8008f70:	40020458 	.word	0x40020458
 8008f74:	40020470 	.word	0x40020470
 8008f78:	40020488 	.word	0x40020488
 8008f7c:	400204a0 	.word	0x400204a0
 8008f80:	400204b8 	.word	0x400204b8
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 0308 	and.w	r3, r3, #8
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	bf14      	ite	ne
 8008f92:	2301      	movne	r3, #1
 8008f94:	2300      	moveq	r3, #0
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d015      	beq.n	8008fc8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f022 0204 	bic.w	r2, r2, #4
 8008faa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fb0:	f003 031f 	and.w	r3, r3, #31
 8008fb4:	2208      	movs	r2, #8
 8008fb6:	409a      	lsls	r2, r3
 8008fb8:	6a3b      	ldr	r3, [r7, #32]
 8008fba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fc0:	f043 0201 	orr.w	r2, r3, #1
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fcc:	f003 031f 	and.w	r3, r3, #31
 8008fd0:	69ba      	ldr	r2, [r7, #24]
 8008fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8008fd6:	f003 0301 	and.w	r3, r3, #1
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d06e      	beq.n	80090bc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a69      	ldr	r2, [pc, #420]	; (8009188 <HAL_DMA_IRQHandler+0x3f8>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d04a      	beq.n	800907e <HAL_DMA_IRQHandler+0x2ee>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a67      	ldr	r2, [pc, #412]	; (800918c <HAL_DMA_IRQHandler+0x3fc>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d045      	beq.n	800907e <HAL_DMA_IRQHandler+0x2ee>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a66      	ldr	r2, [pc, #408]	; (8009190 <HAL_DMA_IRQHandler+0x400>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d040      	beq.n	800907e <HAL_DMA_IRQHandler+0x2ee>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a64      	ldr	r2, [pc, #400]	; (8009194 <HAL_DMA_IRQHandler+0x404>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d03b      	beq.n	800907e <HAL_DMA_IRQHandler+0x2ee>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a63      	ldr	r2, [pc, #396]	; (8009198 <HAL_DMA_IRQHandler+0x408>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d036      	beq.n	800907e <HAL_DMA_IRQHandler+0x2ee>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a61      	ldr	r2, [pc, #388]	; (800919c <HAL_DMA_IRQHandler+0x40c>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d031      	beq.n	800907e <HAL_DMA_IRQHandler+0x2ee>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a60      	ldr	r2, [pc, #384]	; (80091a0 <HAL_DMA_IRQHandler+0x410>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d02c      	beq.n	800907e <HAL_DMA_IRQHandler+0x2ee>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a5e      	ldr	r2, [pc, #376]	; (80091a4 <HAL_DMA_IRQHandler+0x414>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d027      	beq.n	800907e <HAL_DMA_IRQHandler+0x2ee>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a5d      	ldr	r2, [pc, #372]	; (80091a8 <HAL_DMA_IRQHandler+0x418>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d022      	beq.n	800907e <HAL_DMA_IRQHandler+0x2ee>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a5b      	ldr	r2, [pc, #364]	; (80091ac <HAL_DMA_IRQHandler+0x41c>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d01d      	beq.n	800907e <HAL_DMA_IRQHandler+0x2ee>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a5a      	ldr	r2, [pc, #360]	; (80091b0 <HAL_DMA_IRQHandler+0x420>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d018      	beq.n	800907e <HAL_DMA_IRQHandler+0x2ee>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a58      	ldr	r2, [pc, #352]	; (80091b4 <HAL_DMA_IRQHandler+0x424>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d013      	beq.n	800907e <HAL_DMA_IRQHandler+0x2ee>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a57      	ldr	r2, [pc, #348]	; (80091b8 <HAL_DMA_IRQHandler+0x428>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d00e      	beq.n	800907e <HAL_DMA_IRQHandler+0x2ee>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a55      	ldr	r2, [pc, #340]	; (80091bc <HAL_DMA_IRQHandler+0x42c>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d009      	beq.n	800907e <HAL_DMA_IRQHandler+0x2ee>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a54      	ldr	r2, [pc, #336]	; (80091c0 <HAL_DMA_IRQHandler+0x430>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d004      	beq.n	800907e <HAL_DMA_IRQHandler+0x2ee>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a52      	ldr	r2, [pc, #328]	; (80091c4 <HAL_DMA_IRQHandler+0x434>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d10a      	bne.n	8009094 <HAL_DMA_IRQHandler+0x304>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	695b      	ldr	r3, [r3, #20]
 8009084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009088:	2b00      	cmp	r3, #0
 800908a:	bf14      	ite	ne
 800908c:	2301      	movne	r3, #1
 800908e:	2300      	moveq	r3, #0
 8009090:	b2db      	uxtb	r3, r3
 8009092:	e003      	b.n	800909c <HAL_DMA_IRQHandler+0x30c>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2300      	movs	r3, #0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00d      	beq.n	80090bc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090a4:	f003 031f 	and.w	r3, r3, #31
 80090a8:	2201      	movs	r2, #1
 80090aa:	409a      	lsls	r2, r3
 80090ac:	6a3b      	ldr	r3, [r7, #32]
 80090ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090b4:	f043 0202 	orr.w	r2, r3, #2
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090c0:	f003 031f 	and.w	r3, r3, #31
 80090c4:	2204      	movs	r2, #4
 80090c6:	409a      	lsls	r2, r3
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	4013      	ands	r3, r2
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f000 808f 	beq.w	80091f0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a2c      	ldr	r2, [pc, #176]	; (8009188 <HAL_DMA_IRQHandler+0x3f8>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d04a      	beq.n	8009172 <HAL_DMA_IRQHandler+0x3e2>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a2a      	ldr	r2, [pc, #168]	; (800918c <HAL_DMA_IRQHandler+0x3fc>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d045      	beq.n	8009172 <HAL_DMA_IRQHandler+0x3e2>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a29      	ldr	r2, [pc, #164]	; (8009190 <HAL_DMA_IRQHandler+0x400>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d040      	beq.n	8009172 <HAL_DMA_IRQHandler+0x3e2>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a27      	ldr	r2, [pc, #156]	; (8009194 <HAL_DMA_IRQHandler+0x404>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d03b      	beq.n	8009172 <HAL_DMA_IRQHandler+0x3e2>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a26      	ldr	r2, [pc, #152]	; (8009198 <HAL_DMA_IRQHandler+0x408>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d036      	beq.n	8009172 <HAL_DMA_IRQHandler+0x3e2>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a24      	ldr	r2, [pc, #144]	; (800919c <HAL_DMA_IRQHandler+0x40c>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d031      	beq.n	8009172 <HAL_DMA_IRQHandler+0x3e2>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a23      	ldr	r2, [pc, #140]	; (80091a0 <HAL_DMA_IRQHandler+0x410>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d02c      	beq.n	8009172 <HAL_DMA_IRQHandler+0x3e2>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a21      	ldr	r2, [pc, #132]	; (80091a4 <HAL_DMA_IRQHandler+0x414>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d027      	beq.n	8009172 <HAL_DMA_IRQHandler+0x3e2>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a20      	ldr	r2, [pc, #128]	; (80091a8 <HAL_DMA_IRQHandler+0x418>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d022      	beq.n	8009172 <HAL_DMA_IRQHandler+0x3e2>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a1e      	ldr	r2, [pc, #120]	; (80091ac <HAL_DMA_IRQHandler+0x41c>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d01d      	beq.n	8009172 <HAL_DMA_IRQHandler+0x3e2>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a1d      	ldr	r2, [pc, #116]	; (80091b0 <HAL_DMA_IRQHandler+0x420>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d018      	beq.n	8009172 <HAL_DMA_IRQHandler+0x3e2>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a1b      	ldr	r2, [pc, #108]	; (80091b4 <HAL_DMA_IRQHandler+0x424>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d013      	beq.n	8009172 <HAL_DMA_IRQHandler+0x3e2>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a1a      	ldr	r2, [pc, #104]	; (80091b8 <HAL_DMA_IRQHandler+0x428>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d00e      	beq.n	8009172 <HAL_DMA_IRQHandler+0x3e2>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a18      	ldr	r2, [pc, #96]	; (80091bc <HAL_DMA_IRQHandler+0x42c>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d009      	beq.n	8009172 <HAL_DMA_IRQHandler+0x3e2>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a17      	ldr	r2, [pc, #92]	; (80091c0 <HAL_DMA_IRQHandler+0x430>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d004      	beq.n	8009172 <HAL_DMA_IRQHandler+0x3e2>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a15      	ldr	r2, [pc, #84]	; (80091c4 <HAL_DMA_IRQHandler+0x434>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d12a      	bne.n	80091c8 <HAL_DMA_IRQHandler+0x438>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 0302 	and.w	r3, r3, #2
 800917c:	2b00      	cmp	r3, #0
 800917e:	bf14      	ite	ne
 8009180:	2301      	movne	r3, #1
 8009182:	2300      	moveq	r3, #0
 8009184:	b2db      	uxtb	r3, r3
 8009186:	e023      	b.n	80091d0 <HAL_DMA_IRQHandler+0x440>
 8009188:	40020010 	.word	0x40020010
 800918c:	40020028 	.word	0x40020028
 8009190:	40020040 	.word	0x40020040
 8009194:	40020058 	.word	0x40020058
 8009198:	40020070 	.word	0x40020070
 800919c:	40020088 	.word	0x40020088
 80091a0:	400200a0 	.word	0x400200a0
 80091a4:	400200b8 	.word	0x400200b8
 80091a8:	40020410 	.word	0x40020410
 80091ac:	40020428 	.word	0x40020428
 80091b0:	40020440 	.word	0x40020440
 80091b4:	40020458 	.word	0x40020458
 80091b8:	40020470 	.word	0x40020470
 80091bc:	40020488 	.word	0x40020488
 80091c0:	400204a0 	.word	0x400204a0
 80091c4:	400204b8 	.word	0x400204b8
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2300      	movs	r3, #0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00d      	beq.n	80091f0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091d8:	f003 031f 	and.w	r3, r3, #31
 80091dc:	2204      	movs	r2, #4
 80091de:	409a      	lsls	r2, r3
 80091e0:	6a3b      	ldr	r3, [r7, #32]
 80091e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e8:	f043 0204 	orr.w	r2, r3, #4
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091f4:	f003 031f 	and.w	r3, r3, #31
 80091f8:	2210      	movs	r2, #16
 80091fa:	409a      	lsls	r2, r3
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	4013      	ands	r3, r2
 8009200:	2b00      	cmp	r3, #0
 8009202:	f000 80a6 	beq.w	8009352 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a85      	ldr	r2, [pc, #532]	; (8009420 <HAL_DMA_IRQHandler+0x690>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d04a      	beq.n	80092a6 <HAL_DMA_IRQHandler+0x516>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a83      	ldr	r2, [pc, #524]	; (8009424 <HAL_DMA_IRQHandler+0x694>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d045      	beq.n	80092a6 <HAL_DMA_IRQHandler+0x516>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a82      	ldr	r2, [pc, #520]	; (8009428 <HAL_DMA_IRQHandler+0x698>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d040      	beq.n	80092a6 <HAL_DMA_IRQHandler+0x516>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a80      	ldr	r2, [pc, #512]	; (800942c <HAL_DMA_IRQHandler+0x69c>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d03b      	beq.n	80092a6 <HAL_DMA_IRQHandler+0x516>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a7f      	ldr	r2, [pc, #508]	; (8009430 <HAL_DMA_IRQHandler+0x6a0>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d036      	beq.n	80092a6 <HAL_DMA_IRQHandler+0x516>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a7d      	ldr	r2, [pc, #500]	; (8009434 <HAL_DMA_IRQHandler+0x6a4>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d031      	beq.n	80092a6 <HAL_DMA_IRQHandler+0x516>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a7c      	ldr	r2, [pc, #496]	; (8009438 <HAL_DMA_IRQHandler+0x6a8>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d02c      	beq.n	80092a6 <HAL_DMA_IRQHandler+0x516>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a7a      	ldr	r2, [pc, #488]	; (800943c <HAL_DMA_IRQHandler+0x6ac>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d027      	beq.n	80092a6 <HAL_DMA_IRQHandler+0x516>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a79      	ldr	r2, [pc, #484]	; (8009440 <HAL_DMA_IRQHandler+0x6b0>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d022      	beq.n	80092a6 <HAL_DMA_IRQHandler+0x516>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a77      	ldr	r2, [pc, #476]	; (8009444 <HAL_DMA_IRQHandler+0x6b4>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d01d      	beq.n	80092a6 <HAL_DMA_IRQHandler+0x516>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a76      	ldr	r2, [pc, #472]	; (8009448 <HAL_DMA_IRQHandler+0x6b8>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d018      	beq.n	80092a6 <HAL_DMA_IRQHandler+0x516>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a74      	ldr	r2, [pc, #464]	; (800944c <HAL_DMA_IRQHandler+0x6bc>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d013      	beq.n	80092a6 <HAL_DMA_IRQHandler+0x516>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a73      	ldr	r2, [pc, #460]	; (8009450 <HAL_DMA_IRQHandler+0x6c0>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d00e      	beq.n	80092a6 <HAL_DMA_IRQHandler+0x516>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a71      	ldr	r2, [pc, #452]	; (8009454 <HAL_DMA_IRQHandler+0x6c4>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d009      	beq.n	80092a6 <HAL_DMA_IRQHandler+0x516>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a70      	ldr	r2, [pc, #448]	; (8009458 <HAL_DMA_IRQHandler+0x6c8>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d004      	beq.n	80092a6 <HAL_DMA_IRQHandler+0x516>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a6e      	ldr	r2, [pc, #440]	; (800945c <HAL_DMA_IRQHandler+0x6cc>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d10a      	bne.n	80092bc <HAL_DMA_IRQHandler+0x52c>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 0308 	and.w	r3, r3, #8
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	bf14      	ite	ne
 80092b4:	2301      	movne	r3, #1
 80092b6:	2300      	moveq	r3, #0
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	e009      	b.n	80092d0 <HAL_DMA_IRQHandler+0x540>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f003 0304 	and.w	r3, r3, #4
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	bf14      	ite	ne
 80092ca:	2301      	movne	r3, #1
 80092cc:	2300      	moveq	r3, #0
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d03e      	beq.n	8009352 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092d8:	f003 031f 	and.w	r3, r3, #31
 80092dc:	2210      	movs	r2, #16
 80092de:	409a      	lsls	r2, r3
 80092e0:	6a3b      	ldr	r3, [r7, #32]
 80092e2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d018      	beq.n	8009324 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d108      	bne.n	8009312 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009304:	2b00      	cmp	r3, #0
 8009306:	d024      	beq.n	8009352 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	4798      	blx	r3
 8009310:	e01f      	b.n	8009352 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009316:	2b00      	cmp	r3, #0
 8009318:	d01b      	beq.n	8009352 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	4798      	blx	r3
 8009322:	e016      	b.n	8009352 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800932e:	2b00      	cmp	r3, #0
 8009330:	d107      	bne.n	8009342 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f022 0208 	bic.w	r2, r2, #8
 8009340:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009346:	2b00      	cmp	r3, #0
 8009348:	d003      	beq.n	8009352 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009356:	f003 031f 	and.w	r3, r3, #31
 800935a:	2220      	movs	r2, #32
 800935c:	409a      	lsls	r2, r3
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	4013      	ands	r3, r2
 8009362:	2b00      	cmp	r3, #0
 8009364:	f000 8110 	beq.w	8009588 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a2c      	ldr	r2, [pc, #176]	; (8009420 <HAL_DMA_IRQHandler+0x690>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d04a      	beq.n	8009408 <HAL_DMA_IRQHandler+0x678>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a2b      	ldr	r2, [pc, #172]	; (8009424 <HAL_DMA_IRQHandler+0x694>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d045      	beq.n	8009408 <HAL_DMA_IRQHandler+0x678>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a29      	ldr	r2, [pc, #164]	; (8009428 <HAL_DMA_IRQHandler+0x698>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d040      	beq.n	8009408 <HAL_DMA_IRQHandler+0x678>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a28      	ldr	r2, [pc, #160]	; (800942c <HAL_DMA_IRQHandler+0x69c>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d03b      	beq.n	8009408 <HAL_DMA_IRQHandler+0x678>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a26      	ldr	r2, [pc, #152]	; (8009430 <HAL_DMA_IRQHandler+0x6a0>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d036      	beq.n	8009408 <HAL_DMA_IRQHandler+0x678>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a25      	ldr	r2, [pc, #148]	; (8009434 <HAL_DMA_IRQHandler+0x6a4>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d031      	beq.n	8009408 <HAL_DMA_IRQHandler+0x678>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a23      	ldr	r2, [pc, #140]	; (8009438 <HAL_DMA_IRQHandler+0x6a8>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d02c      	beq.n	8009408 <HAL_DMA_IRQHandler+0x678>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a22      	ldr	r2, [pc, #136]	; (800943c <HAL_DMA_IRQHandler+0x6ac>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d027      	beq.n	8009408 <HAL_DMA_IRQHandler+0x678>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a20      	ldr	r2, [pc, #128]	; (8009440 <HAL_DMA_IRQHandler+0x6b0>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d022      	beq.n	8009408 <HAL_DMA_IRQHandler+0x678>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a1f      	ldr	r2, [pc, #124]	; (8009444 <HAL_DMA_IRQHandler+0x6b4>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d01d      	beq.n	8009408 <HAL_DMA_IRQHandler+0x678>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a1d      	ldr	r2, [pc, #116]	; (8009448 <HAL_DMA_IRQHandler+0x6b8>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d018      	beq.n	8009408 <HAL_DMA_IRQHandler+0x678>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a1c      	ldr	r2, [pc, #112]	; (800944c <HAL_DMA_IRQHandler+0x6bc>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d013      	beq.n	8009408 <HAL_DMA_IRQHandler+0x678>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a1a      	ldr	r2, [pc, #104]	; (8009450 <HAL_DMA_IRQHandler+0x6c0>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d00e      	beq.n	8009408 <HAL_DMA_IRQHandler+0x678>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a19      	ldr	r2, [pc, #100]	; (8009454 <HAL_DMA_IRQHandler+0x6c4>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d009      	beq.n	8009408 <HAL_DMA_IRQHandler+0x678>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a17      	ldr	r2, [pc, #92]	; (8009458 <HAL_DMA_IRQHandler+0x6c8>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d004      	beq.n	8009408 <HAL_DMA_IRQHandler+0x678>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a16      	ldr	r2, [pc, #88]	; (800945c <HAL_DMA_IRQHandler+0x6cc>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d12b      	bne.n	8009460 <HAL_DMA_IRQHandler+0x6d0>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 0310 	and.w	r3, r3, #16
 8009412:	2b00      	cmp	r3, #0
 8009414:	bf14      	ite	ne
 8009416:	2301      	movne	r3, #1
 8009418:	2300      	moveq	r3, #0
 800941a:	b2db      	uxtb	r3, r3
 800941c:	e02a      	b.n	8009474 <HAL_DMA_IRQHandler+0x6e4>
 800941e:	bf00      	nop
 8009420:	40020010 	.word	0x40020010
 8009424:	40020028 	.word	0x40020028
 8009428:	40020040 	.word	0x40020040
 800942c:	40020058 	.word	0x40020058
 8009430:	40020070 	.word	0x40020070
 8009434:	40020088 	.word	0x40020088
 8009438:	400200a0 	.word	0x400200a0
 800943c:	400200b8 	.word	0x400200b8
 8009440:	40020410 	.word	0x40020410
 8009444:	40020428 	.word	0x40020428
 8009448:	40020440 	.word	0x40020440
 800944c:	40020458 	.word	0x40020458
 8009450:	40020470 	.word	0x40020470
 8009454:	40020488 	.word	0x40020488
 8009458:	400204a0 	.word	0x400204a0
 800945c:	400204b8 	.word	0x400204b8
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f003 0302 	and.w	r3, r3, #2
 800946a:	2b00      	cmp	r3, #0
 800946c:	bf14      	ite	ne
 800946e:	2301      	movne	r3, #1
 8009470:	2300      	moveq	r3, #0
 8009472:	b2db      	uxtb	r3, r3
 8009474:	2b00      	cmp	r3, #0
 8009476:	f000 8087 	beq.w	8009588 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800947e:	f003 031f 	and.w	r3, r3, #31
 8009482:	2220      	movs	r2, #32
 8009484:	409a      	lsls	r2, r3
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009490:	b2db      	uxtb	r3, r3
 8009492:	2b04      	cmp	r3, #4
 8009494:	d139      	bne.n	800950a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f022 0216 	bic.w	r2, r2, #22
 80094a4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	695a      	ldr	r2, [r3, #20]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80094b4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d103      	bne.n	80094c6 <HAL_DMA_IRQHandler+0x736>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d007      	beq.n	80094d6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f022 0208 	bic.w	r2, r2, #8
 80094d4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094da:	f003 031f 	and.w	r3, r3, #31
 80094de:	223f      	movs	r2, #63	; 0x3f
 80094e0:	409a      	lsls	r2, r3
 80094e2:	6a3b      	ldr	r3, [r7, #32]
 80094e4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2201      	movs	r2, #1
 80094ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f000 834a 	beq.w	8009b94 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	4798      	blx	r3
          }
          return;
 8009508:	e344      	b.n	8009b94 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d018      	beq.n	800954a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009522:	2b00      	cmp	r3, #0
 8009524:	d108      	bne.n	8009538 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800952a:	2b00      	cmp	r3, #0
 800952c:	d02c      	beq.n	8009588 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	4798      	blx	r3
 8009536:	e027      	b.n	8009588 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800953c:	2b00      	cmp	r3, #0
 800953e:	d023      	beq.n	8009588 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	4798      	blx	r3
 8009548:	e01e      	b.n	8009588 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10f      	bne.n	8009578 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f022 0210 	bic.w	r2, r2, #16
 8009566:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800957c:	2b00      	cmp	r3, #0
 800957e:	d003      	beq.n	8009588 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 8306 	beq.w	8009b9e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	f000 8088 	beq.w	80096b0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2204      	movs	r2, #4
 80095a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a7a      	ldr	r2, [pc, #488]	; (8009798 <HAL_DMA_IRQHandler+0xa08>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d04a      	beq.n	8009648 <HAL_DMA_IRQHandler+0x8b8>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a79      	ldr	r2, [pc, #484]	; (800979c <HAL_DMA_IRQHandler+0xa0c>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d045      	beq.n	8009648 <HAL_DMA_IRQHandler+0x8b8>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a77      	ldr	r2, [pc, #476]	; (80097a0 <HAL_DMA_IRQHandler+0xa10>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d040      	beq.n	8009648 <HAL_DMA_IRQHandler+0x8b8>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a76      	ldr	r2, [pc, #472]	; (80097a4 <HAL_DMA_IRQHandler+0xa14>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d03b      	beq.n	8009648 <HAL_DMA_IRQHandler+0x8b8>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a74      	ldr	r2, [pc, #464]	; (80097a8 <HAL_DMA_IRQHandler+0xa18>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d036      	beq.n	8009648 <HAL_DMA_IRQHandler+0x8b8>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a73      	ldr	r2, [pc, #460]	; (80097ac <HAL_DMA_IRQHandler+0xa1c>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d031      	beq.n	8009648 <HAL_DMA_IRQHandler+0x8b8>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a71      	ldr	r2, [pc, #452]	; (80097b0 <HAL_DMA_IRQHandler+0xa20>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d02c      	beq.n	8009648 <HAL_DMA_IRQHandler+0x8b8>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a70      	ldr	r2, [pc, #448]	; (80097b4 <HAL_DMA_IRQHandler+0xa24>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d027      	beq.n	8009648 <HAL_DMA_IRQHandler+0x8b8>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a6e      	ldr	r2, [pc, #440]	; (80097b8 <HAL_DMA_IRQHandler+0xa28>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d022      	beq.n	8009648 <HAL_DMA_IRQHandler+0x8b8>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a6d      	ldr	r2, [pc, #436]	; (80097bc <HAL_DMA_IRQHandler+0xa2c>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d01d      	beq.n	8009648 <HAL_DMA_IRQHandler+0x8b8>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a6b      	ldr	r2, [pc, #428]	; (80097c0 <HAL_DMA_IRQHandler+0xa30>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d018      	beq.n	8009648 <HAL_DMA_IRQHandler+0x8b8>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a6a      	ldr	r2, [pc, #424]	; (80097c4 <HAL_DMA_IRQHandler+0xa34>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d013      	beq.n	8009648 <HAL_DMA_IRQHandler+0x8b8>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a68      	ldr	r2, [pc, #416]	; (80097c8 <HAL_DMA_IRQHandler+0xa38>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d00e      	beq.n	8009648 <HAL_DMA_IRQHandler+0x8b8>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a67      	ldr	r2, [pc, #412]	; (80097cc <HAL_DMA_IRQHandler+0xa3c>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d009      	beq.n	8009648 <HAL_DMA_IRQHandler+0x8b8>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a65      	ldr	r2, [pc, #404]	; (80097d0 <HAL_DMA_IRQHandler+0xa40>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d004      	beq.n	8009648 <HAL_DMA_IRQHandler+0x8b8>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a64      	ldr	r2, [pc, #400]	; (80097d4 <HAL_DMA_IRQHandler+0xa44>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d108      	bne.n	800965a <HAL_DMA_IRQHandler+0x8ca>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f022 0201 	bic.w	r2, r2, #1
 8009656:	601a      	str	r2, [r3, #0]
 8009658:	e007      	b.n	800966a <HAL_DMA_IRQHandler+0x8da>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f022 0201 	bic.w	r2, r2, #1
 8009668:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	3301      	adds	r3, #1
 800966e:	60fb      	str	r3, [r7, #12]
 8009670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009672:	429a      	cmp	r2, r3
 8009674:	d307      	bcc.n	8009686 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0301 	and.w	r3, r3, #1
 8009680:	2b00      	cmp	r3, #0
 8009682:	d1f2      	bne.n	800966a <HAL_DMA_IRQHandler+0x8da>
 8009684:	e000      	b.n	8009688 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009686:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f003 0301 	and.w	r3, r3, #1
 8009692:	2b00      	cmp	r3, #0
 8009694:	d004      	beq.n	80096a0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2203      	movs	r2, #3
 800969a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800969e:	e003      	b.n	80096a8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f000 8272 	beq.w	8009b9e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	4798      	blx	r3
 80096c2:	e26c      	b.n	8009b9e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a43      	ldr	r2, [pc, #268]	; (80097d8 <HAL_DMA_IRQHandler+0xa48>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d022      	beq.n	8009714 <HAL_DMA_IRQHandler+0x984>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a42      	ldr	r2, [pc, #264]	; (80097dc <HAL_DMA_IRQHandler+0xa4c>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d01d      	beq.n	8009714 <HAL_DMA_IRQHandler+0x984>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a40      	ldr	r2, [pc, #256]	; (80097e0 <HAL_DMA_IRQHandler+0xa50>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d018      	beq.n	8009714 <HAL_DMA_IRQHandler+0x984>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a3f      	ldr	r2, [pc, #252]	; (80097e4 <HAL_DMA_IRQHandler+0xa54>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d013      	beq.n	8009714 <HAL_DMA_IRQHandler+0x984>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a3d      	ldr	r2, [pc, #244]	; (80097e8 <HAL_DMA_IRQHandler+0xa58>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d00e      	beq.n	8009714 <HAL_DMA_IRQHandler+0x984>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a3c      	ldr	r2, [pc, #240]	; (80097ec <HAL_DMA_IRQHandler+0xa5c>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d009      	beq.n	8009714 <HAL_DMA_IRQHandler+0x984>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a3a      	ldr	r2, [pc, #232]	; (80097f0 <HAL_DMA_IRQHandler+0xa60>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d004      	beq.n	8009714 <HAL_DMA_IRQHandler+0x984>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a39      	ldr	r2, [pc, #228]	; (80097f4 <HAL_DMA_IRQHandler+0xa64>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d101      	bne.n	8009718 <HAL_DMA_IRQHandler+0x988>
 8009714:	2301      	movs	r3, #1
 8009716:	e000      	b.n	800971a <HAL_DMA_IRQHandler+0x98a>
 8009718:	2300      	movs	r3, #0
 800971a:	2b00      	cmp	r3, #0
 800971c:	f000 823f 	beq.w	8009b9e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800972c:	f003 031f 	and.w	r3, r3, #31
 8009730:	2204      	movs	r2, #4
 8009732:	409a      	lsls	r2, r3
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	4013      	ands	r3, r2
 8009738:	2b00      	cmp	r3, #0
 800973a:	f000 80cd 	beq.w	80098d8 <HAL_DMA_IRQHandler+0xb48>
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	f003 0304 	and.w	r3, r3, #4
 8009744:	2b00      	cmp	r3, #0
 8009746:	f000 80c7 	beq.w	80098d8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800974e:	f003 031f 	and.w	r3, r3, #31
 8009752:	2204      	movs	r2, #4
 8009754:	409a      	lsls	r2, r3
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d049      	beq.n	80097f8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800976a:	2b00      	cmp	r3, #0
 800976c:	d109      	bne.n	8009782 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009772:	2b00      	cmp	r3, #0
 8009774:	f000 8210 	beq.w	8009b98 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009780:	e20a      	b.n	8009b98 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 8206 	beq.w	8009b98 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009794:	e200      	b.n	8009b98 <HAL_DMA_IRQHandler+0xe08>
 8009796:	bf00      	nop
 8009798:	40020010 	.word	0x40020010
 800979c:	40020028 	.word	0x40020028
 80097a0:	40020040 	.word	0x40020040
 80097a4:	40020058 	.word	0x40020058
 80097a8:	40020070 	.word	0x40020070
 80097ac:	40020088 	.word	0x40020088
 80097b0:	400200a0 	.word	0x400200a0
 80097b4:	400200b8 	.word	0x400200b8
 80097b8:	40020410 	.word	0x40020410
 80097bc:	40020428 	.word	0x40020428
 80097c0:	40020440 	.word	0x40020440
 80097c4:	40020458 	.word	0x40020458
 80097c8:	40020470 	.word	0x40020470
 80097cc:	40020488 	.word	0x40020488
 80097d0:	400204a0 	.word	0x400204a0
 80097d4:	400204b8 	.word	0x400204b8
 80097d8:	58025408 	.word	0x58025408
 80097dc:	5802541c 	.word	0x5802541c
 80097e0:	58025430 	.word	0x58025430
 80097e4:	58025444 	.word	0x58025444
 80097e8:	58025458 	.word	0x58025458
 80097ec:	5802546c 	.word	0x5802546c
 80097f0:	58025480 	.word	0x58025480
 80097f4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	f003 0320 	and.w	r3, r3, #32
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d160      	bne.n	80098c4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a7f      	ldr	r2, [pc, #508]	; (8009a04 <HAL_DMA_IRQHandler+0xc74>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d04a      	beq.n	80098a2 <HAL_DMA_IRQHandler+0xb12>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a7d      	ldr	r2, [pc, #500]	; (8009a08 <HAL_DMA_IRQHandler+0xc78>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d045      	beq.n	80098a2 <HAL_DMA_IRQHandler+0xb12>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a7c      	ldr	r2, [pc, #496]	; (8009a0c <HAL_DMA_IRQHandler+0xc7c>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d040      	beq.n	80098a2 <HAL_DMA_IRQHandler+0xb12>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a7a      	ldr	r2, [pc, #488]	; (8009a10 <HAL_DMA_IRQHandler+0xc80>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d03b      	beq.n	80098a2 <HAL_DMA_IRQHandler+0xb12>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a79      	ldr	r2, [pc, #484]	; (8009a14 <HAL_DMA_IRQHandler+0xc84>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d036      	beq.n	80098a2 <HAL_DMA_IRQHandler+0xb12>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a77      	ldr	r2, [pc, #476]	; (8009a18 <HAL_DMA_IRQHandler+0xc88>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d031      	beq.n	80098a2 <HAL_DMA_IRQHandler+0xb12>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a76      	ldr	r2, [pc, #472]	; (8009a1c <HAL_DMA_IRQHandler+0xc8c>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d02c      	beq.n	80098a2 <HAL_DMA_IRQHandler+0xb12>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a74      	ldr	r2, [pc, #464]	; (8009a20 <HAL_DMA_IRQHandler+0xc90>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d027      	beq.n	80098a2 <HAL_DMA_IRQHandler+0xb12>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a73      	ldr	r2, [pc, #460]	; (8009a24 <HAL_DMA_IRQHandler+0xc94>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d022      	beq.n	80098a2 <HAL_DMA_IRQHandler+0xb12>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a71      	ldr	r2, [pc, #452]	; (8009a28 <HAL_DMA_IRQHandler+0xc98>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d01d      	beq.n	80098a2 <HAL_DMA_IRQHandler+0xb12>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a70      	ldr	r2, [pc, #448]	; (8009a2c <HAL_DMA_IRQHandler+0xc9c>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d018      	beq.n	80098a2 <HAL_DMA_IRQHandler+0xb12>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a6e      	ldr	r2, [pc, #440]	; (8009a30 <HAL_DMA_IRQHandler+0xca0>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d013      	beq.n	80098a2 <HAL_DMA_IRQHandler+0xb12>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a6d      	ldr	r2, [pc, #436]	; (8009a34 <HAL_DMA_IRQHandler+0xca4>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d00e      	beq.n	80098a2 <HAL_DMA_IRQHandler+0xb12>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a6b      	ldr	r2, [pc, #428]	; (8009a38 <HAL_DMA_IRQHandler+0xca8>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d009      	beq.n	80098a2 <HAL_DMA_IRQHandler+0xb12>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a6a      	ldr	r2, [pc, #424]	; (8009a3c <HAL_DMA_IRQHandler+0xcac>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d004      	beq.n	80098a2 <HAL_DMA_IRQHandler+0xb12>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a68      	ldr	r2, [pc, #416]	; (8009a40 <HAL_DMA_IRQHandler+0xcb0>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d108      	bne.n	80098b4 <HAL_DMA_IRQHandler+0xb24>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f022 0208 	bic.w	r2, r2, #8
 80098b0:	601a      	str	r2, [r3, #0]
 80098b2:	e007      	b.n	80098c4 <HAL_DMA_IRQHandler+0xb34>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f022 0204 	bic.w	r2, r2, #4
 80098c2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f000 8165 	beq.w	8009b98 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80098d6:	e15f      	b.n	8009b98 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098dc:	f003 031f 	and.w	r3, r3, #31
 80098e0:	2202      	movs	r2, #2
 80098e2:	409a      	lsls	r2, r3
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	4013      	ands	r3, r2
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f000 80c5 	beq.w	8009a78 <HAL_DMA_IRQHandler+0xce8>
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	f003 0302 	and.w	r3, r3, #2
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f000 80bf 	beq.w	8009a78 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098fe:	f003 031f 	and.w	r3, r3, #31
 8009902:	2202      	movs	r2, #2
 8009904:	409a      	lsls	r2, r3
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d018      	beq.n	8009946 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800991a:	2b00      	cmp	r3, #0
 800991c:	d109      	bne.n	8009932 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009922:	2b00      	cmp	r3, #0
 8009924:	f000 813a 	beq.w	8009b9c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009930:	e134      	b.n	8009b9c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009936:	2b00      	cmp	r3, #0
 8009938:	f000 8130 	beq.w	8009b9c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009944:	e12a      	b.n	8009b9c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	f003 0320 	and.w	r3, r3, #32
 800994c:	2b00      	cmp	r3, #0
 800994e:	f040 8089 	bne.w	8009a64 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a2b      	ldr	r2, [pc, #172]	; (8009a04 <HAL_DMA_IRQHandler+0xc74>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d04a      	beq.n	80099f2 <HAL_DMA_IRQHandler+0xc62>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a29      	ldr	r2, [pc, #164]	; (8009a08 <HAL_DMA_IRQHandler+0xc78>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d045      	beq.n	80099f2 <HAL_DMA_IRQHandler+0xc62>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a28      	ldr	r2, [pc, #160]	; (8009a0c <HAL_DMA_IRQHandler+0xc7c>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d040      	beq.n	80099f2 <HAL_DMA_IRQHandler+0xc62>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a26      	ldr	r2, [pc, #152]	; (8009a10 <HAL_DMA_IRQHandler+0xc80>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d03b      	beq.n	80099f2 <HAL_DMA_IRQHandler+0xc62>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a25      	ldr	r2, [pc, #148]	; (8009a14 <HAL_DMA_IRQHandler+0xc84>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d036      	beq.n	80099f2 <HAL_DMA_IRQHandler+0xc62>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a23      	ldr	r2, [pc, #140]	; (8009a18 <HAL_DMA_IRQHandler+0xc88>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d031      	beq.n	80099f2 <HAL_DMA_IRQHandler+0xc62>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a22      	ldr	r2, [pc, #136]	; (8009a1c <HAL_DMA_IRQHandler+0xc8c>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d02c      	beq.n	80099f2 <HAL_DMA_IRQHandler+0xc62>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a20      	ldr	r2, [pc, #128]	; (8009a20 <HAL_DMA_IRQHandler+0xc90>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d027      	beq.n	80099f2 <HAL_DMA_IRQHandler+0xc62>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a1f      	ldr	r2, [pc, #124]	; (8009a24 <HAL_DMA_IRQHandler+0xc94>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d022      	beq.n	80099f2 <HAL_DMA_IRQHandler+0xc62>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a1d      	ldr	r2, [pc, #116]	; (8009a28 <HAL_DMA_IRQHandler+0xc98>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d01d      	beq.n	80099f2 <HAL_DMA_IRQHandler+0xc62>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a1c      	ldr	r2, [pc, #112]	; (8009a2c <HAL_DMA_IRQHandler+0xc9c>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d018      	beq.n	80099f2 <HAL_DMA_IRQHandler+0xc62>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a1a      	ldr	r2, [pc, #104]	; (8009a30 <HAL_DMA_IRQHandler+0xca0>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d013      	beq.n	80099f2 <HAL_DMA_IRQHandler+0xc62>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a19      	ldr	r2, [pc, #100]	; (8009a34 <HAL_DMA_IRQHandler+0xca4>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d00e      	beq.n	80099f2 <HAL_DMA_IRQHandler+0xc62>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a17      	ldr	r2, [pc, #92]	; (8009a38 <HAL_DMA_IRQHandler+0xca8>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d009      	beq.n	80099f2 <HAL_DMA_IRQHandler+0xc62>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a16      	ldr	r2, [pc, #88]	; (8009a3c <HAL_DMA_IRQHandler+0xcac>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d004      	beq.n	80099f2 <HAL_DMA_IRQHandler+0xc62>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a14      	ldr	r2, [pc, #80]	; (8009a40 <HAL_DMA_IRQHandler+0xcb0>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d128      	bne.n	8009a44 <HAL_DMA_IRQHandler+0xcb4>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f022 0214 	bic.w	r2, r2, #20
 8009a00:	601a      	str	r2, [r3, #0]
 8009a02:	e027      	b.n	8009a54 <HAL_DMA_IRQHandler+0xcc4>
 8009a04:	40020010 	.word	0x40020010
 8009a08:	40020028 	.word	0x40020028
 8009a0c:	40020040 	.word	0x40020040
 8009a10:	40020058 	.word	0x40020058
 8009a14:	40020070 	.word	0x40020070
 8009a18:	40020088 	.word	0x40020088
 8009a1c:	400200a0 	.word	0x400200a0
 8009a20:	400200b8 	.word	0x400200b8
 8009a24:	40020410 	.word	0x40020410
 8009a28:	40020428 	.word	0x40020428
 8009a2c:	40020440 	.word	0x40020440
 8009a30:	40020458 	.word	0x40020458
 8009a34:	40020470 	.word	0x40020470
 8009a38:	40020488 	.word	0x40020488
 8009a3c:	400204a0 	.word	0x400204a0
 8009a40:	400204b8 	.word	0x400204b8
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f022 020a 	bic.w	r2, r2, #10
 8009a52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	f000 8097 	beq.w	8009b9c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009a76:	e091      	b.n	8009b9c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a7c:	f003 031f 	and.w	r3, r3, #31
 8009a80:	2208      	movs	r2, #8
 8009a82:	409a      	lsls	r2, r3
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	4013      	ands	r3, r2
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f000 8088 	beq.w	8009b9e <HAL_DMA_IRQHandler+0xe0e>
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	f003 0308 	and.w	r3, r3, #8
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f000 8082 	beq.w	8009b9e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a41      	ldr	r2, [pc, #260]	; (8009ba4 <HAL_DMA_IRQHandler+0xe14>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d04a      	beq.n	8009b3a <HAL_DMA_IRQHandler+0xdaa>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a3f      	ldr	r2, [pc, #252]	; (8009ba8 <HAL_DMA_IRQHandler+0xe18>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d045      	beq.n	8009b3a <HAL_DMA_IRQHandler+0xdaa>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a3e      	ldr	r2, [pc, #248]	; (8009bac <HAL_DMA_IRQHandler+0xe1c>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d040      	beq.n	8009b3a <HAL_DMA_IRQHandler+0xdaa>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a3c      	ldr	r2, [pc, #240]	; (8009bb0 <HAL_DMA_IRQHandler+0xe20>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d03b      	beq.n	8009b3a <HAL_DMA_IRQHandler+0xdaa>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a3b      	ldr	r2, [pc, #236]	; (8009bb4 <HAL_DMA_IRQHandler+0xe24>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d036      	beq.n	8009b3a <HAL_DMA_IRQHandler+0xdaa>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a39      	ldr	r2, [pc, #228]	; (8009bb8 <HAL_DMA_IRQHandler+0xe28>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d031      	beq.n	8009b3a <HAL_DMA_IRQHandler+0xdaa>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a38      	ldr	r2, [pc, #224]	; (8009bbc <HAL_DMA_IRQHandler+0xe2c>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d02c      	beq.n	8009b3a <HAL_DMA_IRQHandler+0xdaa>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a36      	ldr	r2, [pc, #216]	; (8009bc0 <HAL_DMA_IRQHandler+0xe30>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d027      	beq.n	8009b3a <HAL_DMA_IRQHandler+0xdaa>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a35      	ldr	r2, [pc, #212]	; (8009bc4 <HAL_DMA_IRQHandler+0xe34>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d022      	beq.n	8009b3a <HAL_DMA_IRQHandler+0xdaa>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a33      	ldr	r2, [pc, #204]	; (8009bc8 <HAL_DMA_IRQHandler+0xe38>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d01d      	beq.n	8009b3a <HAL_DMA_IRQHandler+0xdaa>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a32      	ldr	r2, [pc, #200]	; (8009bcc <HAL_DMA_IRQHandler+0xe3c>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d018      	beq.n	8009b3a <HAL_DMA_IRQHandler+0xdaa>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a30      	ldr	r2, [pc, #192]	; (8009bd0 <HAL_DMA_IRQHandler+0xe40>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d013      	beq.n	8009b3a <HAL_DMA_IRQHandler+0xdaa>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a2f      	ldr	r2, [pc, #188]	; (8009bd4 <HAL_DMA_IRQHandler+0xe44>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d00e      	beq.n	8009b3a <HAL_DMA_IRQHandler+0xdaa>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a2d      	ldr	r2, [pc, #180]	; (8009bd8 <HAL_DMA_IRQHandler+0xe48>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d009      	beq.n	8009b3a <HAL_DMA_IRQHandler+0xdaa>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a2c      	ldr	r2, [pc, #176]	; (8009bdc <HAL_DMA_IRQHandler+0xe4c>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d004      	beq.n	8009b3a <HAL_DMA_IRQHandler+0xdaa>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a2a      	ldr	r2, [pc, #168]	; (8009be0 <HAL_DMA_IRQHandler+0xe50>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d108      	bne.n	8009b4c <HAL_DMA_IRQHandler+0xdbc>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f022 021c 	bic.w	r2, r2, #28
 8009b48:	601a      	str	r2, [r3, #0]
 8009b4a:	e007      	b.n	8009b5c <HAL_DMA_IRQHandler+0xdcc>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f022 020e 	bic.w	r2, r2, #14
 8009b5a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b60:	f003 031f 	and.w	r3, r3, #31
 8009b64:	2201      	movs	r2, #1
 8009b66:	409a      	lsls	r2, r3
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2201      	movs	r2, #1
 8009b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d009      	beq.n	8009b9e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	4798      	blx	r3
 8009b92:	e004      	b.n	8009b9e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009b94:	bf00      	nop
 8009b96:	e002      	b.n	8009b9e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009b98:	bf00      	nop
 8009b9a:	e000      	b.n	8009b9e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009b9c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009b9e:	3728      	adds	r7, #40	; 0x28
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	40020010 	.word	0x40020010
 8009ba8:	40020028 	.word	0x40020028
 8009bac:	40020040 	.word	0x40020040
 8009bb0:	40020058 	.word	0x40020058
 8009bb4:	40020070 	.word	0x40020070
 8009bb8:	40020088 	.word	0x40020088
 8009bbc:	400200a0 	.word	0x400200a0
 8009bc0:	400200b8 	.word	0x400200b8
 8009bc4:	40020410 	.word	0x40020410
 8009bc8:	40020428 	.word	0x40020428
 8009bcc:	40020440 	.word	0x40020440
 8009bd0:	40020458 	.word	0x40020458
 8009bd4:	40020470 	.word	0x40020470
 8009bd8:	40020488 	.word	0x40020488
 8009bdc:	400204a0 	.word	0x400204a0
 8009be0:	400204b8 	.word	0x400204b8

08009be4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b087      	sub	sp, #28
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	607a      	str	r2, [r7, #4]
 8009bf0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bf6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bfc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a7f      	ldr	r2, [pc, #508]	; (8009e00 <DMA_SetConfig+0x21c>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d072      	beq.n	8009cee <DMA_SetConfig+0x10a>
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a7d      	ldr	r2, [pc, #500]	; (8009e04 <DMA_SetConfig+0x220>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d06d      	beq.n	8009cee <DMA_SetConfig+0x10a>
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a7c      	ldr	r2, [pc, #496]	; (8009e08 <DMA_SetConfig+0x224>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d068      	beq.n	8009cee <DMA_SetConfig+0x10a>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a7a      	ldr	r2, [pc, #488]	; (8009e0c <DMA_SetConfig+0x228>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d063      	beq.n	8009cee <DMA_SetConfig+0x10a>
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a79      	ldr	r2, [pc, #484]	; (8009e10 <DMA_SetConfig+0x22c>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d05e      	beq.n	8009cee <DMA_SetConfig+0x10a>
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a77      	ldr	r2, [pc, #476]	; (8009e14 <DMA_SetConfig+0x230>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d059      	beq.n	8009cee <DMA_SetConfig+0x10a>
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a76      	ldr	r2, [pc, #472]	; (8009e18 <DMA_SetConfig+0x234>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d054      	beq.n	8009cee <DMA_SetConfig+0x10a>
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a74      	ldr	r2, [pc, #464]	; (8009e1c <DMA_SetConfig+0x238>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d04f      	beq.n	8009cee <DMA_SetConfig+0x10a>
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a73      	ldr	r2, [pc, #460]	; (8009e20 <DMA_SetConfig+0x23c>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d04a      	beq.n	8009cee <DMA_SetConfig+0x10a>
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a71      	ldr	r2, [pc, #452]	; (8009e24 <DMA_SetConfig+0x240>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d045      	beq.n	8009cee <DMA_SetConfig+0x10a>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a70      	ldr	r2, [pc, #448]	; (8009e28 <DMA_SetConfig+0x244>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d040      	beq.n	8009cee <DMA_SetConfig+0x10a>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a6e      	ldr	r2, [pc, #440]	; (8009e2c <DMA_SetConfig+0x248>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d03b      	beq.n	8009cee <DMA_SetConfig+0x10a>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a6d      	ldr	r2, [pc, #436]	; (8009e30 <DMA_SetConfig+0x24c>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d036      	beq.n	8009cee <DMA_SetConfig+0x10a>
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a6b      	ldr	r2, [pc, #428]	; (8009e34 <DMA_SetConfig+0x250>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d031      	beq.n	8009cee <DMA_SetConfig+0x10a>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a6a      	ldr	r2, [pc, #424]	; (8009e38 <DMA_SetConfig+0x254>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d02c      	beq.n	8009cee <DMA_SetConfig+0x10a>
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a68      	ldr	r2, [pc, #416]	; (8009e3c <DMA_SetConfig+0x258>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d027      	beq.n	8009cee <DMA_SetConfig+0x10a>
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a67      	ldr	r2, [pc, #412]	; (8009e40 <DMA_SetConfig+0x25c>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d022      	beq.n	8009cee <DMA_SetConfig+0x10a>
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a65      	ldr	r2, [pc, #404]	; (8009e44 <DMA_SetConfig+0x260>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d01d      	beq.n	8009cee <DMA_SetConfig+0x10a>
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a64      	ldr	r2, [pc, #400]	; (8009e48 <DMA_SetConfig+0x264>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d018      	beq.n	8009cee <DMA_SetConfig+0x10a>
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a62      	ldr	r2, [pc, #392]	; (8009e4c <DMA_SetConfig+0x268>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d013      	beq.n	8009cee <DMA_SetConfig+0x10a>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a61      	ldr	r2, [pc, #388]	; (8009e50 <DMA_SetConfig+0x26c>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d00e      	beq.n	8009cee <DMA_SetConfig+0x10a>
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a5f      	ldr	r2, [pc, #380]	; (8009e54 <DMA_SetConfig+0x270>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d009      	beq.n	8009cee <DMA_SetConfig+0x10a>
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a5e      	ldr	r2, [pc, #376]	; (8009e58 <DMA_SetConfig+0x274>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d004      	beq.n	8009cee <DMA_SetConfig+0x10a>
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a5c      	ldr	r2, [pc, #368]	; (8009e5c <DMA_SetConfig+0x278>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d101      	bne.n	8009cf2 <DMA_SetConfig+0x10e>
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e000      	b.n	8009cf4 <DMA_SetConfig+0x110>
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d00d      	beq.n	8009d14 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009d00:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d004      	beq.n	8009d14 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009d12:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a39      	ldr	r2, [pc, #228]	; (8009e00 <DMA_SetConfig+0x21c>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d04a      	beq.n	8009db4 <DMA_SetConfig+0x1d0>
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a38      	ldr	r2, [pc, #224]	; (8009e04 <DMA_SetConfig+0x220>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d045      	beq.n	8009db4 <DMA_SetConfig+0x1d0>
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a36      	ldr	r2, [pc, #216]	; (8009e08 <DMA_SetConfig+0x224>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d040      	beq.n	8009db4 <DMA_SetConfig+0x1d0>
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a35      	ldr	r2, [pc, #212]	; (8009e0c <DMA_SetConfig+0x228>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d03b      	beq.n	8009db4 <DMA_SetConfig+0x1d0>
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a33      	ldr	r2, [pc, #204]	; (8009e10 <DMA_SetConfig+0x22c>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d036      	beq.n	8009db4 <DMA_SetConfig+0x1d0>
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a32      	ldr	r2, [pc, #200]	; (8009e14 <DMA_SetConfig+0x230>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d031      	beq.n	8009db4 <DMA_SetConfig+0x1d0>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a30      	ldr	r2, [pc, #192]	; (8009e18 <DMA_SetConfig+0x234>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d02c      	beq.n	8009db4 <DMA_SetConfig+0x1d0>
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a2f      	ldr	r2, [pc, #188]	; (8009e1c <DMA_SetConfig+0x238>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d027      	beq.n	8009db4 <DMA_SetConfig+0x1d0>
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a2d      	ldr	r2, [pc, #180]	; (8009e20 <DMA_SetConfig+0x23c>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d022      	beq.n	8009db4 <DMA_SetConfig+0x1d0>
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a2c      	ldr	r2, [pc, #176]	; (8009e24 <DMA_SetConfig+0x240>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d01d      	beq.n	8009db4 <DMA_SetConfig+0x1d0>
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a2a      	ldr	r2, [pc, #168]	; (8009e28 <DMA_SetConfig+0x244>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d018      	beq.n	8009db4 <DMA_SetConfig+0x1d0>
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a29      	ldr	r2, [pc, #164]	; (8009e2c <DMA_SetConfig+0x248>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d013      	beq.n	8009db4 <DMA_SetConfig+0x1d0>
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a27      	ldr	r2, [pc, #156]	; (8009e30 <DMA_SetConfig+0x24c>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d00e      	beq.n	8009db4 <DMA_SetConfig+0x1d0>
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a26      	ldr	r2, [pc, #152]	; (8009e34 <DMA_SetConfig+0x250>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d009      	beq.n	8009db4 <DMA_SetConfig+0x1d0>
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a24      	ldr	r2, [pc, #144]	; (8009e38 <DMA_SetConfig+0x254>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d004      	beq.n	8009db4 <DMA_SetConfig+0x1d0>
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a23      	ldr	r2, [pc, #140]	; (8009e3c <DMA_SetConfig+0x258>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d101      	bne.n	8009db8 <DMA_SetConfig+0x1d4>
 8009db4:	2301      	movs	r3, #1
 8009db6:	e000      	b.n	8009dba <DMA_SetConfig+0x1d6>
 8009db8:	2300      	movs	r3, #0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d059      	beq.n	8009e72 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dc2:	f003 031f 	and.w	r3, r3, #31
 8009dc6:	223f      	movs	r2, #63	; 0x3f
 8009dc8:	409a      	lsls	r2, r3
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009ddc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	683a      	ldr	r2, [r7, #0]
 8009de4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	2b40      	cmp	r3, #64	; 0x40
 8009dec:	d138      	bne.n	8009e60 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68ba      	ldr	r2, [r7, #8]
 8009dfc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009dfe:	e086      	b.n	8009f0e <DMA_SetConfig+0x32a>
 8009e00:	40020010 	.word	0x40020010
 8009e04:	40020028 	.word	0x40020028
 8009e08:	40020040 	.word	0x40020040
 8009e0c:	40020058 	.word	0x40020058
 8009e10:	40020070 	.word	0x40020070
 8009e14:	40020088 	.word	0x40020088
 8009e18:	400200a0 	.word	0x400200a0
 8009e1c:	400200b8 	.word	0x400200b8
 8009e20:	40020410 	.word	0x40020410
 8009e24:	40020428 	.word	0x40020428
 8009e28:	40020440 	.word	0x40020440
 8009e2c:	40020458 	.word	0x40020458
 8009e30:	40020470 	.word	0x40020470
 8009e34:	40020488 	.word	0x40020488
 8009e38:	400204a0 	.word	0x400204a0
 8009e3c:	400204b8 	.word	0x400204b8
 8009e40:	58025408 	.word	0x58025408
 8009e44:	5802541c 	.word	0x5802541c
 8009e48:	58025430 	.word	0x58025430
 8009e4c:	58025444 	.word	0x58025444
 8009e50:	58025458 	.word	0x58025458
 8009e54:	5802546c 	.word	0x5802546c
 8009e58:	58025480 	.word	0x58025480
 8009e5c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68ba      	ldr	r2, [r7, #8]
 8009e66:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	60da      	str	r2, [r3, #12]
}
 8009e70:	e04d      	b.n	8009f0e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a29      	ldr	r2, [pc, #164]	; (8009f1c <DMA_SetConfig+0x338>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d022      	beq.n	8009ec2 <DMA_SetConfig+0x2de>
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a27      	ldr	r2, [pc, #156]	; (8009f20 <DMA_SetConfig+0x33c>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d01d      	beq.n	8009ec2 <DMA_SetConfig+0x2de>
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a26      	ldr	r2, [pc, #152]	; (8009f24 <DMA_SetConfig+0x340>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d018      	beq.n	8009ec2 <DMA_SetConfig+0x2de>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a24      	ldr	r2, [pc, #144]	; (8009f28 <DMA_SetConfig+0x344>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d013      	beq.n	8009ec2 <DMA_SetConfig+0x2de>
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a23      	ldr	r2, [pc, #140]	; (8009f2c <DMA_SetConfig+0x348>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d00e      	beq.n	8009ec2 <DMA_SetConfig+0x2de>
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a21      	ldr	r2, [pc, #132]	; (8009f30 <DMA_SetConfig+0x34c>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d009      	beq.n	8009ec2 <DMA_SetConfig+0x2de>
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a20      	ldr	r2, [pc, #128]	; (8009f34 <DMA_SetConfig+0x350>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d004      	beq.n	8009ec2 <DMA_SetConfig+0x2de>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a1e      	ldr	r2, [pc, #120]	; (8009f38 <DMA_SetConfig+0x354>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d101      	bne.n	8009ec6 <DMA_SetConfig+0x2e2>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e000      	b.n	8009ec8 <DMA_SetConfig+0x2e4>
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d020      	beq.n	8009f0e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ed0:	f003 031f 	and.w	r3, r3, #31
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	409a      	lsls	r2, r3
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	683a      	ldr	r2, [r7, #0]
 8009ee2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	689b      	ldr	r3, [r3, #8]
 8009ee8:	2b40      	cmp	r3, #64	; 0x40
 8009eea:	d108      	bne.n	8009efe <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	60da      	str	r2, [r3, #12]
}
 8009efc:	e007      	b.n	8009f0e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	60da      	str	r2, [r3, #12]
}
 8009f0e:	bf00      	nop
 8009f10:	371c      	adds	r7, #28
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
 8009f1a:	bf00      	nop
 8009f1c:	58025408 	.word	0x58025408
 8009f20:	5802541c 	.word	0x5802541c
 8009f24:	58025430 	.word	0x58025430
 8009f28:	58025444 	.word	0x58025444
 8009f2c:	58025458 	.word	0x58025458
 8009f30:	5802546c 	.word	0x5802546c
 8009f34:	58025480 	.word	0x58025480
 8009f38:	58025494 	.word	0x58025494

08009f3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a42      	ldr	r2, [pc, #264]	; (800a054 <DMA_CalcBaseAndBitshift+0x118>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d04a      	beq.n	8009fe4 <DMA_CalcBaseAndBitshift+0xa8>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a41      	ldr	r2, [pc, #260]	; (800a058 <DMA_CalcBaseAndBitshift+0x11c>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d045      	beq.n	8009fe4 <DMA_CalcBaseAndBitshift+0xa8>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a3f      	ldr	r2, [pc, #252]	; (800a05c <DMA_CalcBaseAndBitshift+0x120>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d040      	beq.n	8009fe4 <DMA_CalcBaseAndBitshift+0xa8>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a3e      	ldr	r2, [pc, #248]	; (800a060 <DMA_CalcBaseAndBitshift+0x124>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d03b      	beq.n	8009fe4 <DMA_CalcBaseAndBitshift+0xa8>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a3c      	ldr	r2, [pc, #240]	; (800a064 <DMA_CalcBaseAndBitshift+0x128>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d036      	beq.n	8009fe4 <DMA_CalcBaseAndBitshift+0xa8>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a3b      	ldr	r2, [pc, #236]	; (800a068 <DMA_CalcBaseAndBitshift+0x12c>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d031      	beq.n	8009fe4 <DMA_CalcBaseAndBitshift+0xa8>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a39      	ldr	r2, [pc, #228]	; (800a06c <DMA_CalcBaseAndBitshift+0x130>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d02c      	beq.n	8009fe4 <DMA_CalcBaseAndBitshift+0xa8>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a38      	ldr	r2, [pc, #224]	; (800a070 <DMA_CalcBaseAndBitshift+0x134>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d027      	beq.n	8009fe4 <DMA_CalcBaseAndBitshift+0xa8>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a36      	ldr	r2, [pc, #216]	; (800a074 <DMA_CalcBaseAndBitshift+0x138>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d022      	beq.n	8009fe4 <DMA_CalcBaseAndBitshift+0xa8>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a35      	ldr	r2, [pc, #212]	; (800a078 <DMA_CalcBaseAndBitshift+0x13c>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d01d      	beq.n	8009fe4 <DMA_CalcBaseAndBitshift+0xa8>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a33      	ldr	r2, [pc, #204]	; (800a07c <DMA_CalcBaseAndBitshift+0x140>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d018      	beq.n	8009fe4 <DMA_CalcBaseAndBitshift+0xa8>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a32      	ldr	r2, [pc, #200]	; (800a080 <DMA_CalcBaseAndBitshift+0x144>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d013      	beq.n	8009fe4 <DMA_CalcBaseAndBitshift+0xa8>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a30      	ldr	r2, [pc, #192]	; (800a084 <DMA_CalcBaseAndBitshift+0x148>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d00e      	beq.n	8009fe4 <DMA_CalcBaseAndBitshift+0xa8>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a2f      	ldr	r2, [pc, #188]	; (800a088 <DMA_CalcBaseAndBitshift+0x14c>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d009      	beq.n	8009fe4 <DMA_CalcBaseAndBitshift+0xa8>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a2d      	ldr	r2, [pc, #180]	; (800a08c <DMA_CalcBaseAndBitshift+0x150>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d004      	beq.n	8009fe4 <DMA_CalcBaseAndBitshift+0xa8>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a2c      	ldr	r2, [pc, #176]	; (800a090 <DMA_CalcBaseAndBitshift+0x154>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d101      	bne.n	8009fe8 <DMA_CalcBaseAndBitshift+0xac>
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e000      	b.n	8009fea <DMA_CalcBaseAndBitshift+0xae>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d024      	beq.n	800a038 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	3b10      	subs	r3, #16
 8009ff6:	4a27      	ldr	r2, [pc, #156]	; (800a094 <DMA_CalcBaseAndBitshift+0x158>)
 8009ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ffc:	091b      	lsrs	r3, r3, #4
 8009ffe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f003 0307 	and.w	r3, r3, #7
 800a006:	4a24      	ldr	r2, [pc, #144]	; (800a098 <DMA_CalcBaseAndBitshift+0x15c>)
 800a008:	5cd3      	ldrb	r3, [r2, r3]
 800a00a:	461a      	mov	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2b03      	cmp	r3, #3
 800a014:	d908      	bls.n	800a028 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	461a      	mov	r2, r3
 800a01c:	4b1f      	ldr	r3, [pc, #124]	; (800a09c <DMA_CalcBaseAndBitshift+0x160>)
 800a01e:	4013      	ands	r3, r2
 800a020:	1d1a      	adds	r2, r3, #4
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	659a      	str	r2, [r3, #88]	; 0x58
 800a026:	e00d      	b.n	800a044 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	461a      	mov	r2, r3
 800a02e:	4b1b      	ldr	r3, [pc, #108]	; (800a09c <DMA_CalcBaseAndBitshift+0x160>)
 800a030:	4013      	ands	r3, r2
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	6593      	str	r3, [r2, #88]	; 0x58
 800a036:	e005      	b.n	800a044 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3714      	adds	r7, #20
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr
 800a054:	40020010 	.word	0x40020010
 800a058:	40020028 	.word	0x40020028
 800a05c:	40020040 	.word	0x40020040
 800a060:	40020058 	.word	0x40020058
 800a064:	40020070 	.word	0x40020070
 800a068:	40020088 	.word	0x40020088
 800a06c:	400200a0 	.word	0x400200a0
 800a070:	400200b8 	.word	0x400200b8
 800a074:	40020410 	.word	0x40020410
 800a078:	40020428 	.word	0x40020428
 800a07c:	40020440 	.word	0x40020440
 800a080:	40020458 	.word	0x40020458
 800a084:	40020470 	.word	0x40020470
 800a088:	40020488 	.word	0x40020488
 800a08c:	400204a0 	.word	0x400204a0
 800a090:	400204b8 	.word	0x400204b8
 800a094:	aaaaaaab 	.word	0xaaaaaaab
 800a098:	08015294 	.word	0x08015294
 800a09c:	fffffc00 	.word	0xfffffc00

0800a0a0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	699b      	ldr	r3, [r3, #24]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d120      	bne.n	800a0f6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b8:	2b03      	cmp	r3, #3
 800a0ba:	d858      	bhi.n	800a16e <DMA_CheckFifoParam+0xce>
 800a0bc:	a201      	add	r2, pc, #4	; (adr r2, 800a0c4 <DMA_CheckFifoParam+0x24>)
 800a0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c2:	bf00      	nop
 800a0c4:	0800a0d5 	.word	0x0800a0d5
 800a0c8:	0800a0e7 	.word	0x0800a0e7
 800a0cc:	0800a0d5 	.word	0x0800a0d5
 800a0d0:	0800a16f 	.word	0x0800a16f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d048      	beq.n	800a172 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a0e4:	e045      	b.n	800a172 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a0ee:	d142      	bne.n	800a176 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a0f4:	e03f      	b.n	800a176 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0fe:	d123      	bne.n	800a148 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a104:	2b03      	cmp	r3, #3
 800a106:	d838      	bhi.n	800a17a <DMA_CheckFifoParam+0xda>
 800a108:	a201      	add	r2, pc, #4	; (adr r2, 800a110 <DMA_CheckFifoParam+0x70>)
 800a10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a10e:	bf00      	nop
 800a110:	0800a121 	.word	0x0800a121
 800a114:	0800a127 	.word	0x0800a127
 800a118:	0800a121 	.word	0x0800a121
 800a11c:	0800a139 	.word	0x0800a139
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	73fb      	strb	r3, [r7, #15]
        break;
 800a124:	e030      	b.n	800a188 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d025      	beq.n	800a17e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a136:	e022      	b.n	800a17e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a140:	d11f      	bne.n	800a182 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a146:	e01c      	b.n	800a182 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14c:	2b02      	cmp	r3, #2
 800a14e:	d902      	bls.n	800a156 <DMA_CheckFifoParam+0xb6>
 800a150:	2b03      	cmp	r3, #3
 800a152:	d003      	beq.n	800a15c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a154:	e018      	b.n	800a188 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	73fb      	strb	r3, [r7, #15]
        break;
 800a15a:	e015      	b.n	800a188 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a160:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a164:	2b00      	cmp	r3, #0
 800a166:	d00e      	beq.n	800a186 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	73fb      	strb	r3, [r7, #15]
    break;
 800a16c:	e00b      	b.n	800a186 <DMA_CheckFifoParam+0xe6>
        break;
 800a16e:	bf00      	nop
 800a170:	e00a      	b.n	800a188 <DMA_CheckFifoParam+0xe8>
        break;
 800a172:	bf00      	nop
 800a174:	e008      	b.n	800a188 <DMA_CheckFifoParam+0xe8>
        break;
 800a176:	bf00      	nop
 800a178:	e006      	b.n	800a188 <DMA_CheckFifoParam+0xe8>
        break;
 800a17a:	bf00      	nop
 800a17c:	e004      	b.n	800a188 <DMA_CheckFifoParam+0xe8>
        break;
 800a17e:	bf00      	nop
 800a180:	e002      	b.n	800a188 <DMA_CheckFifoParam+0xe8>
        break;
 800a182:	bf00      	nop
 800a184:	e000      	b.n	800a188 <DMA_CheckFifoParam+0xe8>
    break;
 800a186:	bf00      	nop
    }
  }

  return status;
 800a188:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3714      	adds	r7, #20
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop

0800a198 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a198:	b480      	push	{r7}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a38      	ldr	r2, [pc, #224]	; (800a28c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d022      	beq.n	800a1f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a36      	ldr	r2, [pc, #216]	; (800a290 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d01d      	beq.n	800a1f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a35      	ldr	r2, [pc, #212]	; (800a294 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d018      	beq.n	800a1f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a33      	ldr	r2, [pc, #204]	; (800a298 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d013      	beq.n	800a1f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a32      	ldr	r2, [pc, #200]	; (800a29c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d00e      	beq.n	800a1f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a30      	ldr	r2, [pc, #192]	; (800a2a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d009      	beq.n	800a1f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a2f      	ldr	r2, [pc, #188]	; (800a2a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d004      	beq.n	800a1f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a2d      	ldr	r2, [pc, #180]	; (800a2a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d101      	bne.n	800a1fa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e000      	b.n	800a1fc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d01a      	beq.n	800a236 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	b2db      	uxtb	r3, r3
 800a206:	3b08      	subs	r3, #8
 800a208:	4a28      	ldr	r2, [pc, #160]	; (800a2ac <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a20a:	fba2 2303 	umull	r2, r3, r2, r3
 800a20e:	091b      	lsrs	r3, r3, #4
 800a210:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	4b26      	ldr	r3, [pc, #152]	; (800a2b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a216:	4413      	add	r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	461a      	mov	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4a24      	ldr	r2, [pc, #144]	; (800a2b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a224:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f003 031f 	and.w	r3, r3, #31
 800a22c:	2201      	movs	r2, #1
 800a22e:	409a      	lsls	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a234:	e024      	b.n	800a280 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	3b10      	subs	r3, #16
 800a23e:	4a1e      	ldr	r2, [pc, #120]	; (800a2b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a240:	fba2 2303 	umull	r2, r3, r2, r3
 800a244:	091b      	lsrs	r3, r3, #4
 800a246:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	4a1c      	ldr	r2, [pc, #112]	; (800a2bc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d806      	bhi.n	800a25e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	4a1b      	ldr	r2, [pc, #108]	; (800a2c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d902      	bls.n	800a25e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	3308      	adds	r3, #8
 800a25c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a25e:	68fa      	ldr	r2, [r7, #12]
 800a260:	4b18      	ldr	r3, [pc, #96]	; (800a2c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a262:	4413      	add	r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	461a      	mov	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a16      	ldr	r2, [pc, #88]	; (800a2c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a270:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f003 031f 	and.w	r3, r3, #31
 800a278:	2201      	movs	r2, #1
 800a27a:	409a      	lsls	r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a280:	bf00      	nop
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr
 800a28c:	58025408 	.word	0x58025408
 800a290:	5802541c 	.word	0x5802541c
 800a294:	58025430 	.word	0x58025430
 800a298:	58025444 	.word	0x58025444
 800a29c:	58025458 	.word	0x58025458
 800a2a0:	5802546c 	.word	0x5802546c
 800a2a4:	58025480 	.word	0x58025480
 800a2a8:	58025494 	.word	0x58025494
 800a2ac:	cccccccd 	.word	0xcccccccd
 800a2b0:	16009600 	.word	0x16009600
 800a2b4:	58025880 	.word	0x58025880
 800a2b8:	aaaaaaab 	.word	0xaaaaaaab
 800a2bc:	400204b8 	.word	0x400204b8
 800a2c0:	4002040f 	.word	0x4002040f
 800a2c4:	10008200 	.word	0x10008200
 800a2c8:	40020880 	.word	0x40020880

0800a2cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d04a      	beq.n	800a378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2b08      	cmp	r3, #8
 800a2e6:	d847      	bhi.n	800a378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a25      	ldr	r2, [pc, #148]	; (800a384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d022      	beq.n	800a338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a24      	ldr	r2, [pc, #144]	; (800a388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d01d      	beq.n	800a338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a22      	ldr	r2, [pc, #136]	; (800a38c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d018      	beq.n	800a338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a21      	ldr	r2, [pc, #132]	; (800a390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d013      	beq.n	800a338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a1f      	ldr	r2, [pc, #124]	; (800a394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d00e      	beq.n	800a338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a1e      	ldr	r2, [pc, #120]	; (800a398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d009      	beq.n	800a338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a1c      	ldr	r2, [pc, #112]	; (800a39c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d004      	beq.n	800a338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a1b      	ldr	r2, [pc, #108]	; (800a3a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d101      	bne.n	800a33c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a338:	2301      	movs	r3, #1
 800a33a:	e000      	b.n	800a33e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a33c:	2300      	movs	r3, #0
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00a      	beq.n	800a358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	4b17      	ldr	r3, [pc, #92]	; (800a3a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a346:	4413      	add	r3, r2
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	461a      	mov	r2, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	4a15      	ldr	r2, [pc, #84]	; (800a3a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a354:	671a      	str	r2, [r3, #112]	; 0x70
 800a356:	e009      	b.n	800a36c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	4b14      	ldr	r3, [pc, #80]	; (800a3ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a35c:	4413      	add	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	461a      	mov	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	4a11      	ldr	r2, [pc, #68]	; (800a3b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a36a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	3b01      	subs	r3, #1
 800a370:	2201      	movs	r2, #1
 800a372:	409a      	lsls	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a378:	bf00      	nop
 800a37a:	3714      	adds	r7, #20
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr
 800a384:	58025408 	.word	0x58025408
 800a388:	5802541c 	.word	0x5802541c
 800a38c:	58025430 	.word	0x58025430
 800a390:	58025444 	.word	0x58025444
 800a394:	58025458 	.word	0x58025458
 800a398:	5802546c 	.word	0x5802546c
 800a39c:	58025480 	.word	0x58025480
 800a3a0:	58025494 	.word	0x58025494
 800a3a4:	1600963f 	.word	0x1600963f
 800a3a8:	58025940 	.word	0x58025940
 800a3ac:	1000823f 	.word	0x1000823f
 800a3b0:	40020940 	.word	0x40020940

0800a3b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b089      	sub	sp, #36	; 0x24
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a3c2:	4b89      	ldr	r3, [pc, #548]	; (800a5e8 <HAL_GPIO_Init+0x234>)
 800a3c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a3c6:	e194      	b.n	800a6f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	2101      	movs	r1, #1
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f000 8186 	beq.w	800a6ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	f003 0303 	and.w	r3, r3, #3
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d005      	beq.n	800a3f8 <HAL_GPIO_Init+0x44>
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	f003 0303 	and.w	r3, r3, #3
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d130      	bne.n	800a45a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	005b      	lsls	r3, r3, #1
 800a402:	2203      	movs	r2, #3
 800a404:	fa02 f303 	lsl.w	r3, r2, r3
 800a408:	43db      	mvns	r3, r3
 800a40a:	69ba      	ldr	r2, [r7, #24]
 800a40c:	4013      	ands	r3, r2
 800a40e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	68da      	ldr	r2, [r3, #12]
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	005b      	lsls	r3, r3, #1
 800a418:	fa02 f303 	lsl.w	r3, r2, r3
 800a41c:	69ba      	ldr	r2, [r7, #24]
 800a41e:	4313      	orrs	r3, r2
 800a420:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	69ba      	ldr	r2, [r7, #24]
 800a426:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a42e:	2201      	movs	r2, #1
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	fa02 f303 	lsl.w	r3, r2, r3
 800a436:	43db      	mvns	r3, r3
 800a438:	69ba      	ldr	r2, [r7, #24]
 800a43a:	4013      	ands	r3, r2
 800a43c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	091b      	lsrs	r3, r3, #4
 800a444:	f003 0201 	and.w	r2, r3, #1
 800a448:	69fb      	ldr	r3, [r7, #28]
 800a44a:	fa02 f303 	lsl.w	r3, r2, r3
 800a44e:	69ba      	ldr	r2, [r7, #24]
 800a450:	4313      	orrs	r3, r2
 800a452:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	69ba      	ldr	r2, [r7, #24]
 800a458:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	f003 0303 	and.w	r3, r3, #3
 800a462:	2b03      	cmp	r3, #3
 800a464:	d017      	beq.n	800a496 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	005b      	lsls	r3, r3, #1
 800a470:	2203      	movs	r2, #3
 800a472:	fa02 f303 	lsl.w	r3, r2, r3
 800a476:	43db      	mvns	r3, r3
 800a478:	69ba      	ldr	r2, [r7, #24]
 800a47a:	4013      	ands	r3, r2
 800a47c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	689a      	ldr	r2, [r3, #8]
 800a482:	69fb      	ldr	r3, [r7, #28]
 800a484:	005b      	lsls	r3, r3, #1
 800a486:	fa02 f303 	lsl.w	r3, r2, r3
 800a48a:	69ba      	ldr	r2, [r7, #24]
 800a48c:	4313      	orrs	r3, r2
 800a48e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	69ba      	ldr	r2, [r7, #24]
 800a494:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	f003 0303 	and.w	r3, r3, #3
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	d123      	bne.n	800a4ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	08da      	lsrs	r2, r3, #3
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	3208      	adds	r2, #8
 800a4aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	f003 0307 	and.w	r3, r3, #7
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	220f      	movs	r2, #15
 800a4ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a4be:	43db      	mvns	r3, r3
 800a4c0:	69ba      	ldr	r2, [r7, #24]
 800a4c2:	4013      	ands	r3, r2
 800a4c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	691a      	ldr	r2, [r3, #16]
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	f003 0307 	and.w	r3, r3, #7
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4d6:	69ba      	ldr	r2, [r7, #24]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	08da      	lsrs	r2, r3, #3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	3208      	adds	r2, #8
 800a4e4:	69b9      	ldr	r1, [r7, #24]
 800a4e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	005b      	lsls	r3, r3, #1
 800a4f4:	2203      	movs	r2, #3
 800a4f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4fa:	43db      	mvns	r3, r3
 800a4fc:	69ba      	ldr	r2, [r7, #24]
 800a4fe:	4013      	ands	r3, r2
 800a500:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	f003 0203 	and.w	r2, r3, #3
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	005b      	lsls	r3, r3, #1
 800a50e:	fa02 f303 	lsl.w	r3, r2, r3
 800a512:	69ba      	ldr	r2, [r7, #24]
 800a514:	4313      	orrs	r3, r2
 800a516:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	69ba      	ldr	r2, [r7, #24]
 800a51c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a526:	2b00      	cmp	r3, #0
 800a528:	f000 80e0 	beq.w	800a6ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a52c:	4b2f      	ldr	r3, [pc, #188]	; (800a5ec <HAL_GPIO_Init+0x238>)
 800a52e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a532:	4a2e      	ldr	r2, [pc, #184]	; (800a5ec <HAL_GPIO_Init+0x238>)
 800a534:	f043 0302 	orr.w	r3, r3, #2
 800a538:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a53c:	4b2b      	ldr	r3, [pc, #172]	; (800a5ec <HAL_GPIO_Init+0x238>)
 800a53e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a542:	f003 0302 	and.w	r3, r3, #2
 800a546:	60fb      	str	r3, [r7, #12]
 800a548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a54a:	4a29      	ldr	r2, [pc, #164]	; (800a5f0 <HAL_GPIO_Init+0x23c>)
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	089b      	lsrs	r3, r3, #2
 800a550:	3302      	adds	r3, #2
 800a552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a556:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	f003 0303 	and.w	r3, r3, #3
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	220f      	movs	r2, #15
 800a562:	fa02 f303 	lsl.w	r3, r2, r3
 800a566:	43db      	mvns	r3, r3
 800a568:	69ba      	ldr	r2, [r7, #24]
 800a56a:	4013      	ands	r3, r2
 800a56c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4a20      	ldr	r2, [pc, #128]	; (800a5f4 <HAL_GPIO_Init+0x240>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d052      	beq.n	800a61c <HAL_GPIO_Init+0x268>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4a1f      	ldr	r2, [pc, #124]	; (800a5f8 <HAL_GPIO_Init+0x244>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d031      	beq.n	800a5e2 <HAL_GPIO_Init+0x22e>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4a1e      	ldr	r2, [pc, #120]	; (800a5fc <HAL_GPIO_Init+0x248>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d02b      	beq.n	800a5de <HAL_GPIO_Init+0x22a>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4a1d      	ldr	r2, [pc, #116]	; (800a600 <HAL_GPIO_Init+0x24c>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d025      	beq.n	800a5da <HAL_GPIO_Init+0x226>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a1c      	ldr	r2, [pc, #112]	; (800a604 <HAL_GPIO_Init+0x250>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d01f      	beq.n	800a5d6 <HAL_GPIO_Init+0x222>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a1b      	ldr	r2, [pc, #108]	; (800a608 <HAL_GPIO_Init+0x254>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d019      	beq.n	800a5d2 <HAL_GPIO_Init+0x21e>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a1a      	ldr	r2, [pc, #104]	; (800a60c <HAL_GPIO_Init+0x258>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d013      	beq.n	800a5ce <HAL_GPIO_Init+0x21a>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a19      	ldr	r2, [pc, #100]	; (800a610 <HAL_GPIO_Init+0x25c>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d00d      	beq.n	800a5ca <HAL_GPIO_Init+0x216>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a18      	ldr	r2, [pc, #96]	; (800a614 <HAL_GPIO_Init+0x260>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d007      	beq.n	800a5c6 <HAL_GPIO_Init+0x212>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4a17      	ldr	r2, [pc, #92]	; (800a618 <HAL_GPIO_Init+0x264>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d101      	bne.n	800a5c2 <HAL_GPIO_Init+0x20e>
 800a5be:	2309      	movs	r3, #9
 800a5c0:	e02d      	b.n	800a61e <HAL_GPIO_Init+0x26a>
 800a5c2:	230a      	movs	r3, #10
 800a5c4:	e02b      	b.n	800a61e <HAL_GPIO_Init+0x26a>
 800a5c6:	2308      	movs	r3, #8
 800a5c8:	e029      	b.n	800a61e <HAL_GPIO_Init+0x26a>
 800a5ca:	2307      	movs	r3, #7
 800a5cc:	e027      	b.n	800a61e <HAL_GPIO_Init+0x26a>
 800a5ce:	2306      	movs	r3, #6
 800a5d0:	e025      	b.n	800a61e <HAL_GPIO_Init+0x26a>
 800a5d2:	2305      	movs	r3, #5
 800a5d4:	e023      	b.n	800a61e <HAL_GPIO_Init+0x26a>
 800a5d6:	2304      	movs	r3, #4
 800a5d8:	e021      	b.n	800a61e <HAL_GPIO_Init+0x26a>
 800a5da:	2303      	movs	r3, #3
 800a5dc:	e01f      	b.n	800a61e <HAL_GPIO_Init+0x26a>
 800a5de:	2302      	movs	r3, #2
 800a5e0:	e01d      	b.n	800a61e <HAL_GPIO_Init+0x26a>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e01b      	b.n	800a61e <HAL_GPIO_Init+0x26a>
 800a5e6:	bf00      	nop
 800a5e8:	58000080 	.word	0x58000080
 800a5ec:	58024400 	.word	0x58024400
 800a5f0:	58000400 	.word	0x58000400
 800a5f4:	58020000 	.word	0x58020000
 800a5f8:	58020400 	.word	0x58020400
 800a5fc:	58020800 	.word	0x58020800
 800a600:	58020c00 	.word	0x58020c00
 800a604:	58021000 	.word	0x58021000
 800a608:	58021400 	.word	0x58021400
 800a60c:	58021800 	.word	0x58021800
 800a610:	58021c00 	.word	0x58021c00
 800a614:	58022000 	.word	0x58022000
 800a618:	58022400 	.word	0x58022400
 800a61c:	2300      	movs	r3, #0
 800a61e:	69fa      	ldr	r2, [r7, #28]
 800a620:	f002 0203 	and.w	r2, r2, #3
 800a624:	0092      	lsls	r2, r2, #2
 800a626:	4093      	lsls	r3, r2
 800a628:	69ba      	ldr	r2, [r7, #24]
 800a62a:	4313      	orrs	r3, r2
 800a62c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a62e:	4938      	ldr	r1, [pc, #224]	; (800a710 <HAL_GPIO_Init+0x35c>)
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	089b      	lsrs	r3, r3, #2
 800a634:	3302      	adds	r3, #2
 800a636:	69ba      	ldr	r2, [r7, #24]
 800a638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a63c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	43db      	mvns	r3, r3
 800a648:	69ba      	ldr	r2, [r7, #24]
 800a64a:	4013      	ands	r3, r2
 800a64c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a656:	2b00      	cmp	r3, #0
 800a658:	d003      	beq.n	800a662 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a65a:	69ba      	ldr	r2, [r7, #24]
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	4313      	orrs	r3, r2
 800a660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a662:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a66a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	43db      	mvns	r3, r3
 800a676:	69ba      	ldr	r2, [r7, #24]
 800a678:	4013      	ands	r3, r2
 800a67a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a684:	2b00      	cmp	r3, #0
 800a686:	d003      	beq.n	800a690 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a688:	69ba      	ldr	r2, [r7, #24]
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	4313      	orrs	r3, r2
 800a68e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a690:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	43db      	mvns	r3, r3
 800a6a2:	69ba      	ldr	r2, [r7, #24]
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d003      	beq.n	800a6bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a6b4:	69ba      	ldr	r2, [r7, #24]
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	69ba      	ldr	r2, [r7, #24]
 800a6c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	43db      	mvns	r3, r3
 800a6cc:	69ba      	ldr	r2, [r7, #24]
 800a6ce:	4013      	ands	r3, r2
 800a6d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d003      	beq.n	800a6e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a6de:	69ba      	ldr	r2, [r7, #24]
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	69ba      	ldr	r2, [r7, #24]
 800a6ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f47f ae63 	bne.w	800a3c8 <HAL_GPIO_Init+0x14>
  }
}
 800a702:	bf00      	nop
 800a704:	bf00      	nop
 800a706:	3724      	adds	r7, #36	; 0x24
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr
 800a710:	58000400 	.word	0x58000400

0800a714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	460b      	mov	r3, r1
 800a71e:	807b      	strh	r3, [r7, #2]
 800a720:	4613      	mov	r3, r2
 800a722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a724:	787b      	ldrb	r3, [r7, #1]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d003      	beq.n	800a732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a72a:	887a      	ldrh	r2, [r7, #2]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a730:	e003      	b.n	800a73a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a732:	887b      	ldrh	r3, [r7, #2]
 800a734:	041a      	lsls	r2, r3, #16
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	619a      	str	r2, [r3, #24]
}
 800a73a:	bf00      	nop
 800a73c:	370c      	adds	r7, #12
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr

0800a746 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b082      	sub	sp, #8
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	4603      	mov	r3, r0
 800a74e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a754:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a758:	88fb      	ldrh	r3, [r7, #6]
 800a75a:	4013      	ands	r3, r2
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d008      	beq.n	800a772 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a764:	88fb      	ldrh	r3, [r7, #6]
 800a766:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a76a:	88fb      	ldrh	r3, [r7, #6]
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7fa fb67 	bl	8004e40 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a772:	bf00      	nop
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
	...

0800a77c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a784:	4b19      	ldr	r3, [pc, #100]	; (800a7ec <HAL_PWREx_ConfigSupply+0x70>)
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	f003 0304 	and.w	r3, r3, #4
 800a78c:	2b04      	cmp	r3, #4
 800a78e:	d00a      	beq.n	800a7a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a790:	4b16      	ldr	r3, [pc, #88]	; (800a7ec <HAL_PWREx_ConfigSupply+0x70>)
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	f003 0307 	and.w	r3, r3, #7
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d001      	beq.n	800a7a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e01f      	b.n	800a7e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	e01d      	b.n	800a7e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a7a6:	4b11      	ldr	r3, [pc, #68]	; (800a7ec <HAL_PWREx_ConfigSupply+0x70>)
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	f023 0207 	bic.w	r2, r3, #7
 800a7ae:	490f      	ldr	r1, [pc, #60]	; (800a7ec <HAL_PWREx_ConfigSupply+0x70>)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a7b6:	f7fc fc6b 	bl	8007090 <HAL_GetTick>
 800a7ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a7bc:	e009      	b.n	800a7d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a7be:	f7fc fc67 	bl	8007090 <HAL_GetTick>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	1ad3      	subs	r3, r2, r3
 800a7c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7cc:	d901      	bls.n	800a7d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e007      	b.n	800a7e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a7d2:	4b06      	ldr	r3, [pc, #24]	; (800a7ec <HAL_PWREx_ConfigSupply+0x70>)
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7de:	d1ee      	bne.n	800a7be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	58024800 	.word	0x58024800

0800a7f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b08c      	sub	sp, #48	; 0x30
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d102      	bne.n	800a804 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	f000 bc1d 	b.w	800b03e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 0301 	and.w	r3, r3, #1
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	f000 8087 	beq.w	800a920 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a812:	4b99      	ldr	r3, [pc, #612]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a81a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a81c:	4b96      	ldr	r3, [pc, #600]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a820:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a824:	2b10      	cmp	r3, #16
 800a826:	d007      	beq.n	800a838 <HAL_RCC_OscConfig+0x48>
 800a828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82a:	2b18      	cmp	r3, #24
 800a82c:	d110      	bne.n	800a850 <HAL_RCC_OscConfig+0x60>
 800a82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a830:	f003 0303 	and.w	r3, r3, #3
 800a834:	2b02      	cmp	r3, #2
 800a836:	d10b      	bne.n	800a850 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a838:	4b8f      	ldr	r3, [pc, #572]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a840:	2b00      	cmp	r3, #0
 800a842:	d06c      	beq.n	800a91e <HAL_RCC_OscConfig+0x12e>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d168      	bne.n	800a91e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e3f6      	b.n	800b03e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a858:	d106      	bne.n	800a868 <HAL_RCC_OscConfig+0x78>
 800a85a:	4b87      	ldr	r3, [pc, #540]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a86      	ldr	r2, [pc, #536]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a864:	6013      	str	r3, [r2, #0]
 800a866:	e02e      	b.n	800a8c6 <HAL_RCC_OscConfig+0xd6>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d10c      	bne.n	800a88a <HAL_RCC_OscConfig+0x9a>
 800a870:	4b81      	ldr	r3, [pc, #516]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a80      	ldr	r2, [pc, #512]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a87a:	6013      	str	r3, [r2, #0]
 800a87c:	4b7e      	ldr	r3, [pc, #504]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a7d      	ldr	r2, [pc, #500]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a886:	6013      	str	r3, [r2, #0]
 800a888:	e01d      	b.n	800a8c6 <HAL_RCC_OscConfig+0xd6>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a892:	d10c      	bne.n	800a8ae <HAL_RCC_OscConfig+0xbe>
 800a894:	4b78      	ldr	r3, [pc, #480]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a77      	ldr	r2, [pc, #476]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a89a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a89e:	6013      	str	r3, [r2, #0]
 800a8a0:	4b75      	ldr	r3, [pc, #468]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a74      	ldr	r2, [pc, #464]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a8a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8aa:	6013      	str	r3, [r2, #0]
 800a8ac:	e00b      	b.n	800a8c6 <HAL_RCC_OscConfig+0xd6>
 800a8ae:	4b72      	ldr	r3, [pc, #456]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a71      	ldr	r2, [pc, #452]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a8b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8b8:	6013      	str	r3, [r2, #0]
 800a8ba:	4b6f      	ldr	r3, [pc, #444]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a6e      	ldr	r2, [pc, #440]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a8c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d013      	beq.n	800a8f6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8ce:	f7fc fbdf 	bl	8007090 <HAL_GetTick>
 800a8d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a8d4:	e008      	b.n	800a8e8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a8d6:	f7fc fbdb 	bl	8007090 <HAL_GetTick>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8de:	1ad3      	subs	r3, r2, r3
 800a8e0:	2b64      	cmp	r3, #100	; 0x64
 800a8e2:	d901      	bls.n	800a8e8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	e3aa      	b.n	800b03e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a8e8:	4b63      	ldr	r3, [pc, #396]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d0f0      	beq.n	800a8d6 <HAL_RCC_OscConfig+0xe6>
 800a8f4:	e014      	b.n	800a920 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8f6:	f7fc fbcb 	bl	8007090 <HAL_GetTick>
 800a8fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a8fc:	e008      	b.n	800a910 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a8fe:	f7fc fbc7 	bl	8007090 <HAL_GetTick>
 800a902:	4602      	mov	r2, r0
 800a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a906:	1ad3      	subs	r3, r2, r3
 800a908:	2b64      	cmp	r3, #100	; 0x64
 800a90a:	d901      	bls.n	800a910 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800a90c:	2303      	movs	r3, #3
 800a90e:	e396      	b.n	800b03e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a910:	4b59      	ldr	r3, [pc, #356]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d1f0      	bne.n	800a8fe <HAL_RCC_OscConfig+0x10e>
 800a91c:	e000      	b.n	800a920 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a91e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f003 0302 	and.w	r3, r3, #2
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f000 80cb 	beq.w	800aac4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a92e:	4b52      	ldr	r3, [pc, #328]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a936:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a938:	4b4f      	ldr	r3, [pc, #316]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a93a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a93c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a93e:	6a3b      	ldr	r3, [r7, #32]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d007      	beq.n	800a954 <HAL_RCC_OscConfig+0x164>
 800a944:	6a3b      	ldr	r3, [r7, #32]
 800a946:	2b18      	cmp	r3, #24
 800a948:	d156      	bne.n	800a9f8 <HAL_RCC_OscConfig+0x208>
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	f003 0303 	and.w	r3, r3, #3
 800a950:	2b00      	cmp	r3, #0
 800a952:	d151      	bne.n	800a9f8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a954:	4b48      	ldr	r3, [pc, #288]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 0304 	and.w	r3, r3, #4
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d005      	beq.n	800a96c <HAL_RCC_OscConfig+0x17c>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d101      	bne.n	800a96c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	e368      	b.n	800b03e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a96c:	4b42      	ldr	r3, [pc, #264]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f023 0219 	bic.w	r2, r3, #25
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	493f      	ldr	r1, [pc, #252]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a97a:	4313      	orrs	r3, r2
 800a97c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a97e:	f7fc fb87 	bl	8007090 <HAL_GetTick>
 800a982:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a984:	e008      	b.n	800a998 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a986:	f7fc fb83 	bl	8007090 <HAL_GetTick>
 800a98a:	4602      	mov	r2, r0
 800a98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98e:	1ad3      	subs	r3, r2, r3
 800a990:	2b02      	cmp	r3, #2
 800a992:	d901      	bls.n	800a998 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800a994:	2303      	movs	r3, #3
 800a996:	e352      	b.n	800b03e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a998:	4b37      	ldr	r3, [pc, #220]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f003 0304 	and.w	r3, r3, #4
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d0f0      	beq.n	800a986 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9a4:	f7fc fba4 	bl	80070f0 <HAL_GetREVID>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	f241 0203 	movw	r2, #4099	; 0x1003
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d817      	bhi.n	800a9e2 <HAL_RCC_OscConfig+0x1f2>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	2b40      	cmp	r3, #64	; 0x40
 800a9b8:	d108      	bne.n	800a9cc <HAL_RCC_OscConfig+0x1dc>
 800a9ba:	4b2f      	ldr	r3, [pc, #188]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a9c2:	4a2d      	ldr	r2, [pc, #180]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a9c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9c8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a9ca:	e07b      	b.n	800aac4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9cc:	4b2a      	ldr	r3, [pc, #168]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	691b      	ldr	r3, [r3, #16]
 800a9d8:	031b      	lsls	r3, r3, #12
 800a9da:	4927      	ldr	r1, [pc, #156]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a9e0:	e070      	b.n	800aac4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9e2:	4b25      	ldr	r3, [pc, #148]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	061b      	lsls	r3, r3, #24
 800a9f0:	4921      	ldr	r1, [pc, #132]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a9f6:	e065      	b.n	800aac4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d048      	beq.n	800aa92 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aa00:	4b1d      	ldr	r3, [pc, #116]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f023 0219 	bic.w	r2, r3, #25
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	491a      	ldr	r1, [pc, #104]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa12:	f7fc fb3d 	bl	8007090 <HAL_GetTick>
 800aa16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa18:	e008      	b.n	800aa2c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aa1a:	f7fc fb39 	bl	8007090 <HAL_GetTick>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa22:	1ad3      	subs	r3, r2, r3
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	d901      	bls.n	800aa2c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800aa28:	2303      	movs	r3, #3
 800aa2a:	e308      	b.n	800b03e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa2c:	4b12      	ldr	r3, [pc, #72]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f003 0304 	and.w	r3, r3, #4
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d0f0      	beq.n	800aa1a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa38:	f7fc fb5a 	bl	80070f0 <HAL_GetREVID>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	f241 0203 	movw	r2, #4099	; 0x1003
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d81a      	bhi.n	800aa7c <HAL_RCC_OscConfig+0x28c>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	691b      	ldr	r3, [r3, #16]
 800aa4a:	2b40      	cmp	r3, #64	; 0x40
 800aa4c:	d108      	bne.n	800aa60 <HAL_RCC_OscConfig+0x270>
 800aa4e:	4b0a      	ldr	r3, [pc, #40]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800aa56:	4a08      	ldr	r2, [pc, #32]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800aa58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa5c:	6053      	str	r3, [r2, #4]
 800aa5e:	e031      	b.n	800aac4 <HAL_RCC_OscConfig+0x2d4>
 800aa60:	4b05      	ldr	r3, [pc, #20]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	031b      	lsls	r3, r3, #12
 800aa6e:	4902      	ldr	r1, [pc, #8]	; (800aa78 <HAL_RCC_OscConfig+0x288>)
 800aa70:	4313      	orrs	r3, r2
 800aa72:	604b      	str	r3, [r1, #4]
 800aa74:	e026      	b.n	800aac4 <HAL_RCC_OscConfig+0x2d4>
 800aa76:	bf00      	nop
 800aa78:	58024400 	.word	0x58024400
 800aa7c:	4b9a      	ldr	r3, [pc, #616]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	061b      	lsls	r3, r3, #24
 800aa8a:	4997      	ldr	r1, [pc, #604]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	604b      	str	r3, [r1, #4]
 800aa90:	e018      	b.n	800aac4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa92:	4b95      	ldr	r3, [pc, #596]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a94      	ldr	r2, [pc, #592]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800aa98:	f023 0301 	bic.w	r3, r3, #1
 800aa9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa9e:	f7fc faf7 	bl	8007090 <HAL_GetTick>
 800aaa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aaa4:	e008      	b.n	800aab8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aaa6:	f7fc faf3 	bl	8007090 <HAL_GetTick>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d901      	bls.n	800aab8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800aab4:	2303      	movs	r3, #3
 800aab6:	e2c2      	b.n	800b03e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aab8:	4b8b      	ldr	r3, [pc, #556]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 0304 	and.w	r3, r3, #4
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d1f0      	bne.n	800aaa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 0310 	and.w	r3, r3, #16
 800aacc:	2b00      	cmp	r3, #0
 800aace:	f000 80a9 	beq.w	800ac24 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aad2:	4b85      	ldr	r3, [pc, #532]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800aad4:	691b      	ldr	r3, [r3, #16]
 800aad6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aada:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aadc:	4b82      	ldr	r3, [pc, #520]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800aade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	2b08      	cmp	r3, #8
 800aae6:	d007      	beq.n	800aaf8 <HAL_RCC_OscConfig+0x308>
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	2b18      	cmp	r3, #24
 800aaec:	d13a      	bne.n	800ab64 <HAL_RCC_OscConfig+0x374>
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	f003 0303 	and.w	r3, r3, #3
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d135      	bne.n	800ab64 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aaf8:	4b7b      	ldr	r3, [pc, #492]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d005      	beq.n	800ab10 <HAL_RCC_OscConfig+0x320>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	69db      	ldr	r3, [r3, #28]
 800ab08:	2b80      	cmp	r3, #128	; 0x80
 800ab0a:	d001      	beq.n	800ab10 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e296      	b.n	800b03e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab10:	f7fc faee 	bl	80070f0 <HAL_GetREVID>
 800ab14:	4603      	mov	r3, r0
 800ab16:	f241 0203 	movw	r2, #4099	; 0x1003
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d817      	bhi.n	800ab4e <HAL_RCC_OscConfig+0x35e>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6a1b      	ldr	r3, [r3, #32]
 800ab22:	2b20      	cmp	r3, #32
 800ab24:	d108      	bne.n	800ab38 <HAL_RCC_OscConfig+0x348>
 800ab26:	4b70      	ldr	r3, [pc, #448]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ab2e:	4a6e      	ldr	r2, [pc, #440]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800ab30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab34:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ab36:	e075      	b.n	800ac24 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab38:	4b6b      	ldr	r3, [pc, #428]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6a1b      	ldr	r3, [r3, #32]
 800ab44:	069b      	lsls	r3, r3, #26
 800ab46:	4968      	ldr	r1, [pc, #416]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ab4c:	e06a      	b.n	800ac24 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab4e:	4b66      	ldr	r3, [pc, #408]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a1b      	ldr	r3, [r3, #32]
 800ab5a:	061b      	lsls	r3, r3, #24
 800ab5c:	4962      	ldr	r1, [pc, #392]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ab62:	e05f      	b.n	800ac24 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	69db      	ldr	r3, [r3, #28]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d042      	beq.n	800abf2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ab6c:	4b5e      	ldr	r3, [pc, #376]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a5d      	ldr	r2, [pc, #372]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800ab72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab78:	f7fc fa8a 	bl	8007090 <HAL_GetTick>
 800ab7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ab7e:	e008      	b.n	800ab92 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800ab80:	f7fc fa86 	bl	8007090 <HAL_GetTick>
 800ab84:	4602      	mov	r2, r0
 800ab86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab88:	1ad3      	subs	r3, r2, r3
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	d901      	bls.n	800ab92 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800ab8e:	2303      	movs	r3, #3
 800ab90:	e255      	b.n	800b03e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ab92:	4b55      	ldr	r3, [pc, #340]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d0f0      	beq.n	800ab80 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab9e:	f7fc faa7 	bl	80070f0 <HAL_GetREVID>
 800aba2:	4603      	mov	r3, r0
 800aba4:	f241 0203 	movw	r2, #4099	; 0x1003
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d817      	bhi.n	800abdc <HAL_RCC_OscConfig+0x3ec>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6a1b      	ldr	r3, [r3, #32]
 800abb0:	2b20      	cmp	r3, #32
 800abb2:	d108      	bne.n	800abc6 <HAL_RCC_OscConfig+0x3d6>
 800abb4:	4b4c      	ldr	r3, [pc, #304]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800abbc:	4a4a      	ldr	r2, [pc, #296]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800abbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abc2:	6053      	str	r3, [r2, #4]
 800abc4:	e02e      	b.n	800ac24 <HAL_RCC_OscConfig+0x434>
 800abc6:	4b48      	ldr	r3, [pc, #288]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a1b      	ldr	r3, [r3, #32]
 800abd2:	069b      	lsls	r3, r3, #26
 800abd4:	4944      	ldr	r1, [pc, #272]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800abd6:	4313      	orrs	r3, r2
 800abd8:	604b      	str	r3, [r1, #4]
 800abda:	e023      	b.n	800ac24 <HAL_RCC_OscConfig+0x434>
 800abdc:	4b42      	ldr	r3, [pc, #264]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6a1b      	ldr	r3, [r3, #32]
 800abe8:	061b      	lsls	r3, r3, #24
 800abea:	493f      	ldr	r1, [pc, #252]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800abec:	4313      	orrs	r3, r2
 800abee:	60cb      	str	r3, [r1, #12]
 800abf0:	e018      	b.n	800ac24 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800abf2:	4b3d      	ldr	r3, [pc, #244]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a3c      	ldr	r2, [pc, #240]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800abf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abfe:	f7fc fa47 	bl	8007090 <HAL_GetTick>
 800ac02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ac04:	e008      	b.n	800ac18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800ac06:	f7fc fa43 	bl	8007090 <HAL_GetTick>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0e:	1ad3      	subs	r3, r2, r3
 800ac10:	2b02      	cmp	r3, #2
 800ac12:	d901      	bls.n	800ac18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ac14:	2303      	movs	r3, #3
 800ac16:	e212      	b.n	800b03e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ac18:	4b33      	ldr	r3, [pc, #204]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d1f0      	bne.n	800ac06 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f003 0308 	and.w	r3, r3, #8
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d036      	beq.n	800ac9e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	695b      	ldr	r3, [r3, #20]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d019      	beq.n	800ac6c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ac38:	4b2b      	ldr	r3, [pc, #172]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800ac3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac3c:	4a2a      	ldr	r2, [pc, #168]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800ac3e:	f043 0301 	orr.w	r3, r3, #1
 800ac42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac44:	f7fc fa24 	bl	8007090 <HAL_GetTick>
 800ac48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ac4a:	e008      	b.n	800ac5e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ac4c:	f7fc fa20 	bl	8007090 <HAL_GetTick>
 800ac50:	4602      	mov	r2, r0
 800ac52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac54:	1ad3      	subs	r3, r2, r3
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	d901      	bls.n	800ac5e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800ac5a:	2303      	movs	r3, #3
 800ac5c:	e1ef      	b.n	800b03e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ac5e:	4b22      	ldr	r3, [pc, #136]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800ac60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac62:	f003 0302 	and.w	r3, r3, #2
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d0f0      	beq.n	800ac4c <HAL_RCC_OscConfig+0x45c>
 800ac6a:	e018      	b.n	800ac9e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ac6c:	4b1e      	ldr	r3, [pc, #120]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800ac6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac70:	4a1d      	ldr	r2, [pc, #116]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800ac72:	f023 0301 	bic.w	r3, r3, #1
 800ac76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac78:	f7fc fa0a 	bl	8007090 <HAL_GetTick>
 800ac7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ac7e:	e008      	b.n	800ac92 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ac80:	f7fc fa06 	bl	8007090 <HAL_GetTick>
 800ac84:	4602      	mov	r2, r0
 800ac86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac88:	1ad3      	subs	r3, r2, r3
 800ac8a:	2b02      	cmp	r3, #2
 800ac8c:	d901      	bls.n	800ac92 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800ac8e:	2303      	movs	r3, #3
 800ac90:	e1d5      	b.n	800b03e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ac92:	4b15      	ldr	r3, [pc, #84]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800ac94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac96:	f003 0302 	and.w	r3, r3, #2
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d1f0      	bne.n	800ac80 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f003 0320 	and.w	r3, r3, #32
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d039      	beq.n	800ad1e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	699b      	ldr	r3, [r3, #24]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d01c      	beq.n	800acec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800acb2:	4b0d      	ldr	r3, [pc, #52]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4a0c      	ldr	r2, [pc, #48]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800acb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800acbc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800acbe:	f7fc f9e7 	bl	8007090 <HAL_GetTick>
 800acc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800acc4:	e008      	b.n	800acd8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800acc6:	f7fc f9e3 	bl	8007090 <HAL_GetTick>
 800acca:	4602      	mov	r2, r0
 800accc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acce:	1ad3      	subs	r3, r2, r3
 800acd0:	2b02      	cmp	r3, #2
 800acd2:	d901      	bls.n	800acd8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800acd4:	2303      	movs	r3, #3
 800acd6:	e1b2      	b.n	800b03e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800acd8:	4b03      	ldr	r3, [pc, #12]	; (800ace8 <HAL_RCC_OscConfig+0x4f8>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d0f0      	beq.n	800acc6 <HAL_RCC_OscConfig+0x4d6>
 800ace4:	e01b      	b.n	800ad1e <HAL_RCC_OscConfig+0x52e>
 800ace6:	bf00      	nop
 800ace8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800acec:	4b9b      	ldr	r3, [pc, #620]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a9a      	ldr	r2, [pc, #616]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800acf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acf6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800acf8:	f7fc f9ca 	bl	8007090 <HAL_GetTick>
 800acfc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800acfe:	e008      	b.n	800ad12 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ad00:	f7fc f9c6 	bl	8007090 <HAL_GetTick>
 800ad04:	4602      	mov	r2, r0
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad08:	1ad3      	subs	r3, r2, r3
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	d901      	bls.n	800ad12 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800ad0e:	2303      	movs	r3, #3
 800ad10:	e195      	b.n	800b03e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ad12:	4b92      	ldr	r3, [pc, #584]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1f0      	bne.n	800ad00 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f003 0304 	and.w	r3, r3, #4
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	f000 8081 	beq.w	800ae2e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ad2c:	4b8c      	ldr	r3, [pc, #560]	; (800af60 <HAL_RCC_OscConfig+0x770>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a8b      	ldr	r2, [pc, #556]	; (800af60 <HAL_RCC_OscConfig+0x770>)
 800ad32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ad38:	f7fc f9aa 	bl	8007090 <HAL_GetTick>
 800ad3c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad3e:	e008      	b.n	800ad52 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ad40:	f7fc f9a6 	bl	8007090 <HAL_GetTick>
 800ad44:	4602      	mov	r2, r0
 800ad46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad48:	1ad3      	subs	r3, r2, r3
 800ad4a:	2b64      	cmp	r3, #100	; 0x64
 800ad4c:	d901      	bls.n	800ad52 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800ad4e:	2303      	movs	r3, #3
 800ad50:	e175      	b.n	800b03e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad52:	4b83      	ldr	r3, [pc, #524]	; (800af60 <HAL_RCC_OscConfig+0x770>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d0f0      	beq.n	800ad40 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d106      	bne.n	800ad74 <HAL_RCC_OscConfig+0x584>
 800ad66:	4b7d      	ldr	r3, [pc, #500]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800ad68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad6a:	4a7c      	ldr	r2, [pc, #496]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800ad6c:	f043 0301 	orr.w	r3, r3, #1
 800ad70:	6713      	str	r3, [r2, #112]	; 0x70
 800ad72:	e02d      	b.n	800add0 <HAL_RCC_OscConfig+0x5e0>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d10c      	bne.n	800ad96 <HAL_RCC_OscConfig+0x5a6>
 800ad7c:	4b77      	ldr	r3, [pc, #476]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800ad7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad80:	4a76      	ldr	r2, [pc, #472]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800ad82:	f023 0301 	bic.w	r3, r3, #1
 800ad86:	6713      	str	r3, [r2, #112]	; 0x70
 800ad88:	4b74      	ldr	r3, [pc, #464]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800ad8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad8c:	4a73      	ldr	r2, [pc, #460]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800ad8e:	f023 0304 	bic.w	r3, r3, #4
 800ad92:	6713      	str	r3, [r2, #112]	; 0x70
 800ad94:	e01c      	b.n	800add0 <HAL_RCC_OscConfig+0x5e0>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	2b05      	cmp	r3, #5
 800ad9c:	d10c      	bne.n	800adb8 <HAL_RCC_OscConfig+0x5c8>
 800ad9e:	4b6f      	ldr	r3, [pc, #444]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800ada0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ada2:	4a6e      	ldr	r2, [pc, #440]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800ada4:	f043 0304 	orr.w	r3, r3, #4
 800ada8:	6713      	str	r3, [r2, #112]	; 0x70
 800adaa:	4b6c      	ldr	r3, [pc, #432]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800adac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adae:	4a6b      	ldr	r2, [pc, #428]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800adb0:	f043 0301 	orr.w	r3, r3, #1
 800adb4:	6713      	str	r3, [r2, #112]	; 0x70
 800adb6:	e00b      	b.n	800add0 <HAL_RCC_OscConfig+0x5e0>
 800adb8:	4b68      	ldr	r3, [pc, #416]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800adba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adbc:	4a67      	ldr	r2, [pc, #412]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800adbe:	f023 0301 	bic.w	r3, r3, #1
 800adc2:	6713      	str	r3, [r2, #112]	; 0x70
 800adc4:	4b65      	ldr	r3, [pc, #404]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800adc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adc8:	4a64      	ldr	r2, [pc, #400]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800adca:	f023 0304 	bic.w	r3, r3, #4
 800adce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d015      	beq.n	800ae04 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800add8:	f7fc f95a 	bl	8007090 <HAL_GetTick>
 800addc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800adde:	e00a      	b.n	800adf6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ade0:	f7fc f956 	bl	8007090 <HAL_GetTick>
 800ade4:	4602      	mov	r2, r0
 800ade6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade8:	1ad3      	subs	r3, r2, r3
 800adea:	f241 3288 	movw	r2, #5000	; 0x1388
 800adee:	4293      	cmp	r3, r2
 800adf0:	d901      	bls.n	800adf6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800adf2:	2303      	movs	r3, #3
 800adf4:	e123      	b.n	800b03e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800adf6:	4b59      	ldr	r3, [pc, #356]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800adf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adfa:	f003 0302 	and.w	r3, r3, #2
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d0ee      	beq.n	800ade0 <HAL_RCC_OscConfig+0x5f0>
 800ae02:	e014      	b.n	800ae2e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae04:	f7fc f944 	bl	8007090 <HAL_GetTick>
 800ae08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ae0a:	e00a      	b.n	800ae22 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ae0c:	f7fc f940 	bl	8007090 <HAL_GetTick>
 800ae10:	4602      	mov	r2, r0
 800ae12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae14:	1ad3      	subs	r3, r2, r3
 800ae16:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d901      	bls.n	800ae22 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800ae1e:	2303      	movs	r3, #3
 800ae20:	e10d      	b.n	800b03e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ae22:	4b4e      	ldr	r3, [pc, #312]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800ae24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae26:	f003 0302 	and.w	r3, r3, #2
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d1ee      	bne.n	800ae0c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	f000 8102 	beq.w	800b03c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ae38:	4b48      	ldr	r3, [pc, #288]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800ae3a:	691b      	ldr	r3, [r3, #16]
 800ae3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ae40:	2b18      	cmp	r3, #24
 800ae42:	f000 80bd 	beq.w	800afc0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4a:	2b02      	cmp	r3, #2
 800ae4c:	f040 809e 	bne.w	800af8c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae50:	4b42      	ldr	r3, [pc, #264]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a41      	ldr	r2, [pc, #260]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800ae56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae5c:	f7fc f918 	bl	8007090 <HAL_GetTick>
 800ae60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae62:	e008      	b.n	800ae76 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae64:	f7fc f914 	bl	8007090 <HAL_GetTick>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6c:	1ad3      	subs	r3, r2, r3
 800ae6e:	2b02      	cmp	r3, #2
 800ae70:	d901      	bls.n	800ae76 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800ae72:	2303      	movs	r3, #3
 800ae74:	e0e3      	b.n	800b03e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae76:	4b39      	ldr	r3, [pc, #228]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d1f0      	bne.n	800ae64 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ae82:	4b36      	ldr	r3, [pc, #216]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800ae84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae86:	4b37      	ldr	r3, [pc, #220]	; (800af64 <HAL_RCC_OscConfig+0x774>)
 800ae88:	4013      	ands	r3, r2
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ae92:	0112      	lsls	r2, r2, #4
 800ae94:	430a      	orrs	r2, r1
 800ae96:	4931      	ldr	r1, [pc, #196]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	628b      	str	r3, [r1, #40]	; 0x28
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aea0:	3b01      	subs	r3, #1
 800aea2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	025b      	lsls	r3, r3, #9
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	431a      	orrs	r2, r3
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	041b      	lsls	r3, r3, #16
 800aeba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aebe:	431a      	orrs	r2, r3
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aec4:	3b01      	subs	r3, #1
 800aec6:	061b      	lsls	r3, r3, #24
 800aec8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aecc:	4923      	ldr	r1, [pc, #140]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800aece:	4313      	orrs	r3, r2
 800aed0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800aed2:	4b22      	ldr	r3, [pc, #136]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800aed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed6:	4a21      	ldr	r2, [pc, #132]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800aed8:	f023 0301 	bic.w	r3, r3, #1
 800aedc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aede:	4b1f      	ldr	r3, [pc, #124]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800aee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aee2:	4b21      	ldr	r3, [pc, #132]	; (800af68 <HAL_RCC_OscConfig+0x778>)
 800aee4:	4013      	ands	r3, r2
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800aeea:	00d2      	lsls	r2, r2, #3
 800aeec:	491b      	ldr	r1, [pc, #108]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800aeee:	4313      	orrs	r3, r2
 800aef0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800aef2:	4b1a      	ldr	r3, [pc, #104]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800aef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef6:	f023 020c 	bic.w	r2, r3, #12
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aefe:	4917      	ldr	r1, [pc, #92]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800af00:	4313      	orrs	r3, r2
 800af02:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800af04:	4b15      	ldr	r3, [pc, #84]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800af06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af08:	f023 0202 	bic.w	r2, r3, #2
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af10:	4912      	ldr	r1, [pc, #72]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800af12:	4313      	orrs	r3, r2
 800af14:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800af16:	4b11      	ldr	r3, [pc, #68]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800af18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af1a:	4a10      	ldr	r2, [pc, #64]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800af1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af22:	4b0e      	ldr	r3, [pc, #56]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800af24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af26:	4a0d      	ldr	r2, [pc, #52]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800af28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800af2e:	4b0b      	ldr	r3, [pc, #44]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800af30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af32:	4a0a      	ldr	r2, [pc, #40]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800af34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800af3a:	4b08      	ldr	r3, [pc, #32]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800af3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3e:	4a07      	ldr	r2, [pc, #28]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800af40:	f043 0301 	orr.w	r3, r3, #1
 800af44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800af46:	4b05      	ldr	r3, [pc, #20]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a04      	ldr	r2, [pc, #16]	; (800af5c <HAL_RCC_OscConfig+0x76c>)
 800af4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af52:	f7fc f89d 	bl	8007090 <HAL_GetTick>
 800af56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800af58:	e011      	b.n	800af7e <HAL_RCC_OscConfig+0x78e>
 800af5a:	bf00      	nop
 800af5c:	58024400 	.word	0x58024400
 800af60:	58024800 	.word	0x58024800
 800af64:	fffffc0c 	.word	0xfffffc0c
 800af68:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800af6c:	f7fc f890 	bl	8007090 <HAL_GetTick>
 800af70:	4602      	mov	r2, r0
 800af72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af74:	1ad3      	subs	r3, r2, r3
 800af76:	2b02      	cmp	r3, #2
 800af78:	d901      	bls.n	800af7e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800af7a:	2303      	movs	r3, #3
 800af7c:	e05f      	b.n	800b03e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800af7e:	4b32      	ldr	r3, [pc, #200]	; (800b048 <HAL_RCC_OscConfig+0x858>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af86:	2b00      	cmp	r3, #0
 800af88:	d0f0      	beq.n	800af6c <HAL_RCC_OscConfig+0x77c>
 800af8a:	e057      	b.n	800b03c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af8c:	4b2e      	ldr	r3, [pc, #184]	; (800b048 <HAL_RCC_OscConfig+0x858>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a2d      	ldr	r2, [pc, #180]	; (800b048 <HAL_RCC_OscConfig+0x858>)
 800af92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800af96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af98:	f7fc f87a 	bl	8007090 <HAL_GetTick>
 800af9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af9e:	e008      	b.n	800afb2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800afa0:	f7fc f876 	bl	8007090 <HAL_GetTick>
 800afa4:	4602      	mov	r2, r0
 800afa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa8:	1ad3      	subs	r3, r2, r3
 800afaa:	2b02      	cmp	r3, #2
 800afac:	d901      	bls.n	800afb2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800afae:	2303      	movs	r3, #3
 800afb0:	e045      	b.n	800b03e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800afb2:	4b25      	ldr	r3, [pc, #148]	; (800b048 <HAL_RCC_OscConfig+0x858>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1f0      	bne.n	800afa0 <HAL_RCC_OscConfig+0x7b0>
 800afbe:	e03d      	b.n	800b03c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800afc0:	4b21      	ldr	r3, [pc, #132]	; (800b048 <HAL_RCC_OscConfig+0x858>)
 800afc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800afc6:	4b20      	ldr	r3, [pc, #128]	; (800b048 <HAL_RCC_OscConfig+0x858>)
 800afc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d031      	beq.n	800b038 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	f003 0203 	and.w	r2, r3, #3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800afde:	429a      	cmp	r2, r3
 800afe0:	d12a      	bne.n	800b038 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	091b      	lsrs	r3, r3, #4
 800afe6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800afee:	429a      	cmp	r2, r3
 800aff0:	d122      	bne.n	800b038 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800affc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800affe:	429a      	cmp	r2, r3
 800b000:	d11a      	bne.n	800b038 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	0a5b      	lsrs	r3, r3, #9
 800b006:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b00e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b010:	429a      	cmp	r2, r3
 800b012:	d111      	bne.n	800b038 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	0c1b      	lsrs	r3, r3, #16
 800b018:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b020:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b022:	429a      	cmp	r2, r3
 800b024:	d108      	bne.n	800b038 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	0e1b      	lsrs	r3, r3, #24
 800b02a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b032:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b034:	429a      	cmp	r2, r3
 800b036:	d001      	beq.n	800b03c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	e000      	b.n	800b03e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3730      	adds	r7, #48	; 0x30
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	58024400 	.word	0x58024400

0800b04c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b086      	sub	sp, #24
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d101      	bne.n	800b060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b05c:	2301      	movs	r3, #1
 800b05e:	e19c      	b.n	800b39a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b060:	4b8a      	ldr	r3, [pc, #552]	; (800b28c <HAL_RCC_ClockConfig+0x240>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f003 030f 	and.w	r3, r3, #15
 800b068:	683a      	ldr	r2, [r7, #0]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d910      	bls.n	800b090 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b06e:	4b87      	ldr	r3, [pc, #540]	; (800b28c <HAL_RCC_ClockConfig+0x240>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f023 020f 	bic.w	r2, r3, #15
 800b076:	4985      	ldr	r1, [pc, #532]	; (800b28c <HAL_RCC_ClockConfig+0x240>)
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b07e:	4b83      	ldr	r3, [pc, #524]	; (800b28c <HAL_RCC_ClockConfig+0x240>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f003 030f 	and.w	r3, r3, #15
 800b086:	683a      	ldr	r2, [r7, #0]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d001      	beq.n	800b090 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b08c:	2301      	movs	r3, #1
 800b08e:	e184      	b.n	800b39a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f003 0304 	and.w	r3, r3, #4
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d010      	beq.n	800b0be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	691a      	ldr	r2, [r3, #16]
 800b0a0:	4b7b      	ldr	r3, [pc, #492]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b0a2:	699b      	ldr	r3, [r3, #24]
 800b0a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d908      	bls.n	800b0be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b0ac:	4b78      	ldr	r3, [pc, #480]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b0ae:	699b      	ldr	r3, [r3, #24]
 800b0b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	691b      	ldr	r3, [r3, #16]
 800b0b8:	4975      	ldr	r1, [pc, #468]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f003 0308 	and.w	r3, r3, #8
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d010      	beq.n	800b0ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	695a      	ldr	r2, [r3, #20]
 800b0ce:	4b70      	ldr	r3, [pc, #448]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b0d0:	69db      	ldr	r3, [r3, #28]
 800b0d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d908      	bls.n	800b0ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b0da:	4b6d      	ldr	r3, [pc, #436]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b0dc:	69db      	ldr	r3, [r3, #28]
 800b0de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	695b      	ldr	r3, [r3, #20]
 800b0e6:	496a      	ldr	r1, [pc, #424]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f003 0310 	and.w	r3, r3, #16
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d010      	beq.n	800b11a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	699a      	ldr	r2, [r3, #24]
 800b0fc:	4b64      	ldr	r3, [pc, #400]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b0fe:	69db      	ldr	r3, [r3, #28]
 800b100:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b104:	429a      	cmp	r2, r3
 800b106:	d908      	bls.n	800b11a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b108:	4b61      	ldr	r3, [pc, #388]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b10a:	69db      	ldr	r3, [r3, #28]
 800b10c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	699b      	ldr	r3, [r3, #24]
 800b114:	495e      	ldr	r1, [pc, #376]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b116:	4313      	orrs	r3, r2
 800b118:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f003 0320 	and.w	r3, r3, #32
 800b122:	2b00      	cmp	r3, #0
 800b124:	d010      	beq.n	800b148 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	69da      	ldr	r2, [r3, #28]
 800b12a:	4b59      	ldr	r3, [pc, #356]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b12c:	6a1b      	ldr	r3, [r3, #32]
 800b12e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b132:	429a      	cmp	r2, r3
 800b134:	d908      	bls.n	800b148 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b136:	4b56      	ldr	r3, [pc, #344]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b138:	6a1b      	ldr	r3, [r3, #32]
 800b13a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	69db      	ldr	r3, [r3, #28]
 800b142:	4953      	ldr	r1, [pc, #332]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b144:	4313      	orrs	r3, r2
 800b146:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f003 0302 	and.w	r3, r3, #2
 800b150:	2b00      	cmp	r3, #0
 800b152:	d010      	beq.n	800b176 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	68da      	ldr	r2, [r3, #12]
 800b158:	4b4d      	ldr	r3, [pc, #308]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b15a:	699b      	ldr	r3, [r3, #24]
 800b15c:	f003 030f 	and.w	r3, r3, #15
 800b160:	429a      	cmp	r2, r3
 800b162:	d908      	bls.n	800b176 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b164:	4b4a      	ldr	r3, [pc, #296]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b166:	699b      	ldr	r3, [r3, #24]
 800b168:	f023 020f 	bic.w	r2, r3, #15
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	4947      	ldr	r1, [pc, #284]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b172:	4313      	orrs	r3, r2
 800b174:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f003 0301 	and.w	r3, r3, #1
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d055      	beq.n	800b22e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b182:	4b43      	ldr	r3, [pc, #268]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b184:	699b      	ldr	r3, [r3, #24]
 800b186:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	689b      	ldr	r3, [r3, #8]
 800b18e:	4940      	ldr	r1, [pc, #256]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b190:	4313      	orrs	r3, r2
 800b192:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	2b02      	cmp	r3, #2
 800b19a:	d107      	bne.n	800b1ac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b19c:	4b3c      	ldr	r3, [pc, #240]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d121      	bne.n	800b1ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	e0f6      	b.n	800b39a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	2b03      	cmp	r3, #3
 800b1b2:	d107      	bne.n	800b1c4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b1b4:	4b36      	ldr	r3, [pc, #216]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d115      	bne.n	800b1ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	e0ea      	b.n	800b39a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d107      	bne.n	800b1dc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b1cc:	4b30      	ldr	r3, [pc, #192]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d109      	bne.n	800b1ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	e0de      	b.n	800b39a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b1dc:	4b2c      	ldr	r3, [pc, #176]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f003 0304 	and.w	r3, r3, #4
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d101      	bne.n	800b1ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e0d6      	b.n	800b39a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b1ec:	4b28      	ldr	r3, [pc, #160]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b1ee:	691b      	ldr	r3, [r3, #16]
 800b1f0:	f023 0207 	bic.w	r2, r3, #7
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	4925      	ldr	r1, [pc, #148]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1fe:	f7fb ff47 	bl	8007090 <HAL_GetTick>
 800b202:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b204:	e00a      	b.n	800b21c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b206:	f7fb ff43 	bl	8007090 <HAL_GetTick>
 800b20a:	4602      	mov	r2, r0
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	1ad3      	subs	r3, r2, r3
 800b210:	f241 3288 	movw	r2, #5000	; 0x1388
 800b214:	4293      	cmp	r3, r2
 800b216:	d901      	bls.n	800b21c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b218:	2303      	movs	r3, #3
 800b21a:	e0be      	b.n	800b39a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b21c:	4b1c      	ldr	r3, [pc, #112]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b21e:	691b      	ldr	r3, [r3, #16]
 800b220:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	00db      	lsls	r3, r3, #3
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d1eb      	bne.n	800b206 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f003 0302 	and.w	r3, r3, #2
 800b236:	2b00      	cmp	r3, #0
 800b238:	d010      	beq.n	800b25c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	68da      	ldr	r2, [r3, #12]
 800b23e:	4b14      	ldr	r3, [pc, #80]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b240:	699b      	ldr	r3, [r3, #24]
 800b242:	f003 030f 	and.w	r3, r3, #15
 800b246:	429a      	cmp	r2, r3
 800b248:	d208      	bcs.n	800b25c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b24a:	4b11      	ldr	r3, [pc, #68]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b24c:	699b      	ldr	r3, [r3, #24]
 800b24e:	f023 020f 	bic.w	r2, r3, #15
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	68db      	ldr	r3, [r3, #12]
 800b256:	490e      	ldr	r1, [pc, #56]	; (800b290 <HAL_RCC_ClockConfig+0x244>)
 800b258:	4313      	orrs	r3, r2
 800b25a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b25c:	4b0b      	ldr	r3, [pc, #44]	; (800b28c <HAL_RCC_ClockConfig+0x240>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 030f 	and.w	r3, r3, #15
 800b264:	683a      	ldr	r2, [r7, #0]
 800b266:	429a      	cmp	r2, r3
 800b268:	d214      	bcs.n	800b294 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b26a:	4b08      	ldr	r3, [pc, #32]	; (800b28c <HAL_RCC_ClockConfig+0x240>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f023 020f 	bic.w	r2, r3, #15
 800b272:	4906      	ldr	r1, [pc, #24]	; (800b28c <HAL_RCC_ClockConfig+0x240>)
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	4313      	orrs	r3, r2
 800b278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b27a:	4b04      	ldr	r3, [pc, #16]	; (800b28c <HAL_RCC_ClockConfig+0x240>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f003 030f 	and.w	r3, r3, #15
 800b282:	683a      	ldr	r2, [r7, #0]
 800b284:	429a      	cmp	r2, r3
 800b286:	d005      	beq.n	800b294 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b288:	2301      	movs	r3, #1
 800b28a:	e086      	b.n	800b39a <HAL_RCC_ClockConfig+0x34e>
 800b28c:	52002000 	.word	0x52002000
 800b290:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f003 0304 	and.w	r3, r3, #4
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d010      	beq.n	800b2c2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	691a      	ldr	r2, [r3, #16]
 800b2a4:	4b3f      	ldr	r3, [pc, #252]	; (800b3a4 <HAL_RCC_ClockConfig+0x358>)
 800b2a6:	699b      	ldr	r3, [r3, #24]
 800b2a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d208      	bcs.n	800b2c2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b2b0:	4b3c      	ldr	r3, [pc, #240]	; (800b3a4 <HAL_RCC_ClockConfig+0x358>)
 800b2b2:	699b      	ldr	r3, [r3, #24]
 800b2b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	691b      	ldr	r3, [r3, #16]
 800b2bc:	4939      	ldr	r1, [pc, #228]	; (800b3a4 <HAL_RCC_ClockConfig+0x358>)
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f003 0308 	and.w	r3, r3, #8
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d010      	beq.n	800b2f0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	695a      	ldr	r2, [r3, #20]
 800b2d2:	4b34      	ldr	r3, [pc, #208]	; (800b3a4 <HAL_RCC_ClockConfig+0x358>)
 800b2d4:	69db      	ldr	r3, [r3, #28]
 800b2d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d208      	bcs.n	800b2f0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b2de:	4b31      	ldr	r3, [pc, #196]	; (800b3a4 <HAL_RCC_ClockConfig+0x358>)
 800b2e0:	69db      	ldr	r3, [r3, #28]
 800b2e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	695b      	ldr	r3, [r3, #20]
 800b2ea:	492e      	ldr	r1, [pc, #184]	; (800b3a4 <HAL_RCC_ClockConfig+0x358>)
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f003 0310 	and.w	r3, r3, #16
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d010      	beq.n	800b31e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	699a      	ldr	r2, [r3, #24]
 800b300:	4b28      	ldr	r3, [pc, #160]	; (800b3a4 <HAL_RCC_ClockConfig+0x358>)
 800b302:	69db      	ldr	r3, [r3, #28]
 800b304:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b308:	429a      	cmp	r2, r3
 800b30a:	d208      	bcs.n	800b31e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b30c:	4b25      	ldr	r3, [pc, #148]	; (800b3a4 <HAL_RCC_ClockConfig+0x358>)
 800b30e:	69db      	ldr	r3, [r3, #28]
 800b310:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	699b      	ldr	r3, [r3, #24]
 800b318:	4922      	ldr	r1, [pc, #136]	; (800b3a4 <HAL_RCC_ClockConfig+0x358>)
 800b31a:	4313      	orrs	r3, r2
 800b31c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f003 0320 	and.w	r3, r3, #32
 800b326:	2b00      	cmp	r3, #0
 800b328:	d010      	beq.n	800b34c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	69da      	ldr	r2, [r3, #28]
 800b32e:	4b1d      	ldr	r3, [pc, #116]	; (800b3a4 <HAL_RCC_ClockConfig+0x358>)
 800b330:	6a1b      	ldr	r3, [r3, #32]
 800b332:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b336:	429a      	cmp	r2, r3
 800b338:	d208      	bcs.n	800b34c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b33a:	4b1a      	ldr	r3, [pc, #104]	; (800b3a4 <HAL_RCC_ClockConfig+0x358>)
 800b33c:	6a1b      	ldr	r3, [r3, #32]
 800b33e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	69db      	ldr	r3, [r3, #28]
 800b346:	4917      	ldr	r1, [pc, #92]	; (800b3a4 <HAL_RCC_ClockConfig+0x358>)
 800b348:	4313      	orrs	r3, r2
 800b34a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b34c:	f000 f834 	bl	800b3b8 <HAL_RCC_GetSysClockFreq>
 800b350:	4602      	mov	r2, r0
 800b352:	4b14      	ldr	r3, [pc, #80]	; (800b3a4 <HAL_RCC_ClockConfig+0x358>)
 800b354:	699b      	ldr	r3, [r3, #24]
 800b356:	0a1b      	lsrs	r3, r3, #8
 800b358:	f003 030f 	and.w	r3, r3, #15
 800b35c:	4912      	ldr	r1, [pc, #72]	; (800b3a8 <HAL_RCC_ClockConfig+0x35c>)
 800b35e:	5ccb      	ldrb	r3, [r1, r3]
 800b360:	f003 031f 	and.w	r3, r3, #31
 800b364:	fa22 f303 	lsr.w	r3, r2, r3
 800b368:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b36a:	4b0e      	ldr	r3, [pc, #56]	; (800b3a4 <HAL_RCC_ClockConfig+0x358>)
 800b36c:	699b      	ldr	r3, [r3, #24]
 800b36e:	f003 030f 	and.w	r3, r3, #15
 800b372:	4a0d      	ldr	r2, [pc, #52]	; (800b3a8 <HAL_RCC_ClockConfig+0x35c>)
 800b374:	5cd3      	ldrb	r3, [r2, r3]
 800b376:	f003 031f 	and.w	r3, r3, #31
 800b37a:	693a      	ldr	r2, [r7, #16]
 800b37c:	fa22 f303 	lsr.w	r3, r2, r3
 800b380:	4a0a      	ldr	r2, [pc, #40]	; (800b3ac <HAL_RCC_ClockConfig+0x360>)
 800b382:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b384:	4a0a      	ldr	r2, [pc, #40]	; (800b3b0 <HAL_RCC_ClockConfig+0x364>)
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800b38a:	4b0a      	ldr	r3, [pc, #40]	; (800b3b4 <HAL_RCC_ClockConfig+0x368>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4618      	mov	r0, r3
 800b390:	f7fb fe34 	bl	8006ffc <HAL_InitTick>
 800b394:	4603      	mov	r3, r0
 800b396:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b398:	7bfb      	ldrb	r3, [r7, #15]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3718      	adds	r7, #24
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	58024400 	.word	0x58024400
 800b3a8:	08015284 	.word	0x08015284
 800b3ac:	24000234 	.word	0x24000234
 800b3b0:	24000230 	.word	0x24000230
 800b3b4:	24000238 	.word	0x24000238

0800b3b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b089      	sub	sp, #36	; 0x24
 800b3bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b3be:	4bb3      	ldr	r3, [pc, #716]	; (800b68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3c0:	691b      	ldr	r3, [r3, #16]
 800b3c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3c6:	2b18      	cmp	r3, #24
 800b3c8:	f200 8155 	bhi.w	800b676 <HAL_RCC_GetSysClockFreq+0x2be>
 800b3cc:	a201      	add	r2, pc, #4	; (adr r2, 800b3d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d2:	bf00      	nop
 800b3d4:	0800b439 	.word	0x0800b439
 800b3d8:	0800b677 	.word	0x0800b677
 800b3dc:	0800b677 	.word	0x0800b677
 800b3e0:	0800b677 	.word	0x0800b677
 800b3e4:	0800b677 	.word	0x0800b677
 800b3e8:	0800b677 	.word	0x0800b677
 800b3ec:	0800b677 	.word	0x0800b677
 800b3f0:	0800b677 	.word	0x0800b677
 800b3f4:	0800b45f 	.word	0x0800b45f
 800b3f8:	0800b677 	.word	0x0800b677
 800b3fc:	0800b677 	.word	0x0800b677
 800b400:	0800b677 	.word	0x0800b677
 800b404:	0800b677 	.word	0x0800b677
 800b408:	0800b677 	.word	0x0800b677
 800b40c:	0800b677 	.word	0x0800b677
 800b410:	0800b677 	.word	0x0800b677
 800b414:	0800b465 	.word	0x0800b465
 800b418:	0800b677 	.word	0x0800b677
 800b41c:	0800b677 	.word	0x0800b677
 800b420:	0800b677 	.word	0x0800b677
 800b424:	0800b677 	.word	0x0800b677
 800b428:	0800b677 	.word	0x0800b677
 800b42c:	0800b677 	.word	0x0800b677
 800b430:	0800b677 	.word	0x0800b677
 800b434:	0800b46b 	.word	0x0800b46b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b438:	4b94      	ldr	r3, [pc, #592]	; (800b68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f003 0320 	and.w	r3, r3, #32
 800b440:	2b00      	cmp	r3, #0
 800b442:	d009      	beq.n	800b458 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b444:	4b91      	ldr	r3, [pc, #580]	; (800b68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	08db      	lsrs	r3, r3, #3
 800b44a:	f003 0303 	and.w	r3, r3, #3
 800b44e:	4a90      	ldr	r2, [pc, #576]	; (800b690 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b450:	fa22 f303 	lsr.w	r3, r2, r3
 800b454:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b456:	e111      	b.n	800b67c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b458:	4b8d      	ldr	r3, [pc, #564]	; (800b690 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b45a:	61bb      	str	r3, [r7, #24]
    break;
 800b45c:	e10e      	b.n	800b67c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800b45e:	4b8d      	ldr	r3, [pc, #564]	; (800b694 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b460:	61bb      	str	r3, [r7, #24]
    break;
 800b462:	e10b      	b.n	800b67c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800b464:	4b8c      	ldr	r3, [pc, #560]	; (800b698 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b466:	61bb      	str	r3, [r7, #24]
    break;
 800b468:	e108      	b.n	800b67c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b46a:	4b88      	ldr	r3, [pc, #544]	; (800b68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b46e:	f003 0303 	and.w	r3, r3, #3
 800b472:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800b474:	4b85      	ldr	r3, [pc, #532]	; (800b68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b478:	091b      	lsrs	r3, r3, #4
 800b47a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b47e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b480:	4b82      	ldr	r3, [pc, #520]	; (800b68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b484:	f003 0301 	and.w	r3, r3, #1
 800b488:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b48a:	4b80      	ldr	r3, [pc, #512]	; (800b68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b48c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b48e:	08db      	lsrs	r3, r3, #3
 800b490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	fb02 f303 	mul.w	r3, r2, r3
 800b49a:	ee07 3a90 	vmov	s15, r3
 800b49e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4a2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f000 80e1 	beq.w	800b670 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	2b02      	cmp	r3, #2
 800b4b2:	f000 8083 	beq.w	800b5bc <HAL_RCC_GetSysClockFreq+0x204>
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	2b02      	cmp	r3, #2
 800b4ba:	f200 80a1 	bhi.w	800b600 <HAL_RCC_GetSysClockFreq+0x248>
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d003      	beq.n	800b4cc <HAL_RCC_GetSysClockFreq+0x114>
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d056      	beq.n	800b578 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b4ca:	e099      	b.n	800b600 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4cc:	4b6f      	ldr	r3, [pc, #444]	; (800b68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f003 0320 	and.w	r3, r3, #32
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d02d      	beq.n	800b534 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b4d8:	4b6c      	ldr	r3, [pc, #432]	; (800b68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	08db      	lsrs	r3, r3, #3
 800b4de:	f003 0303 	and.w	r3, r3, #3
 800b4e2:	4a6b      	ldr	r2, [pc, #428]	; (800b690 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b4e4:	fa22 f303 	lsr.w	r3, r2, r3
 800b4e8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	ee07 3a90 	vmov	s15, r3
 800b4f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	ee07 3a90 	vmov	s15, r3
 800b4fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b502:	4b62      	ldr	r3, [pc, #392]	; (800b68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b50a:	ee07 3a90 	vmov	s15, r3
 800b50e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b512:	ed97 6a02 	vldr	s12, [r7, #8]
 800b516:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b69c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b51a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b51e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b52a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b52e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800b532:	e087      	b.n	800b644 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	ee07 3a90 	vmov	s15, r3
 800b53a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b53e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b6a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b546:	4b51      	ldr	r3, [pc, #324]	; (800b68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b54a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b54e:	ee07 3a90 	vmov	s15, r3
 800b552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b556:	ed97 6a02 	vldr	s12, [r7, #8]
 800b55a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b69c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b55e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b56a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b56e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b576:	e065      	b.n	800b644 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	ee07 3a90 	vmov	s15, r3
 800b57e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b582:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b6a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b58a:	4b40      	ldr	r3, [pc, #256]	; (800b68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b58e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b592:	ee07 3a90 	vmov	s15, r3
 800b596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b59a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b59e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b69c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b5a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5ba:	e043      	b.n	800b644 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	ee07 3a90 	vmov	s15, r3
 800b5c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b6a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b5ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ce:	4b2f      	ldr	r3, [pc, #188]	; (800b68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5d6:	ee07 3a90 	vmov	s15, r3
 800b5da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5de:	ed97 6a02 	vldr	s12, [r7, #8]
 800b5e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b69c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b5e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5fe:	e021      	b.n	800b644 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	ee07 3a90 	vmov	s15, r3
 800b606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b60a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b6a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b60e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b612:	4b1e      	ldr	r3, [pc, #120]	; (800b68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b61a:	ee07 3a90 	vmov	s15, r3
 800b61e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b622:	ed97 6a02 	vldr	s12, [r7, #8]
 800b626:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b69c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b62a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b62e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b63a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b63e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b642:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b644:	4b11      	ldr	r3, [pc, #68]	; (800b68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b648:	0a5b      	lsrs	r3, r3, #9
 800b64a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b64e:	3301      	adds	r3, #1
 800b650:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	ee07 3a90 	vmov	s15, r3
 800b658:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b65c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b668:	ee17 3a90 	vmov	r3, s15
 800b66c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b66e:	e005      	b.n	800b67c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b670:	2300      	movs	r3, #0
 800b672:	61bb      	str	r3, [r7, #24]
    break;
 800b674:	e002      	b.n	800b67c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b676:	4b07      	ldr	r3, [pc, #28]	; (800b694 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b678:	61bb      	str	r3, [r7, #24]
    break;
 800b67a:	bf00      	nop
  }

  return sysclockfreq;
 800b67c:	69bb      	ldr	r3, [r7, #24]
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3724      	adds	r7, #36	; 0x24
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr
 800b68a:	bf00      	nop
 800b68c:	58024400 	.word	0x58024400
 800b690:	03d09000 	.word	0x03d09000
 800b694:	003d0900 	.word	0x003d0900
 800b698:	02dc6c00 	.word	0x02dc6c00
 800b69c:	46000000 	.word	0x46000000
 800b6a0:	4c742400 	.word	0x4c742400
 800b6a4:	4a742400 	.word	0x4a742400
 800b6a8:	4c371b00 	.word	0x4c371b00

0800b6ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b6b2:	f7ff fe81 	bl	800b3b8 <HAL_RCC_GetSysClockFreq>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	4b10      	ldr	r3, [pc, #64]	; (800b6fc <HAL_RCC_GetHCLKFreq+0x50>)
 800b6ba:	699b      	ldr	r3, [r3, #24]
 800b6bc:	0a1b      	lsrs	r3, r3, #8
 800b6be:	f003 030f 	and.w	r3, r3, #15
 800b6c2:	490f      	ldr	r1, [pc, #60]	; (800b700 <HAL_RCC_GetHCLKFreq+0x54>)
 800b6c4:	5ccb      	ldrb	r3, [r1, r3]
 800b6c6:	f003 031f 	and.w	r3, r3, #31
 800b6ca:	fa22 f303 	lsr.w	r3, r2, r3
 800b6ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6d0:	4b0a      	ldr	r3, [pc, #40]	; (800b6fc <HAL_RCC_GetHCLKFreq+0x50>)
 800b6d2:	699b      	ldr	r3, [r3, #24]
 800b6d4:	f003 030f 	and.w	r3, r3, #15
 800b6d8:	4a09      	ldr	r2, [pc, #36]	; (800b700 <HAL_RCC_GetHCLKFreq+0x54>)
 800b6da:	5cd3      	ldrb	r3, [r2, r3]
 800b6dc:	f003 031f 	and.w	r3, r3, #31
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b6e6:	4a07      	ldr	r2, [pc, #28]	; (800b704 <HAL_RCC_GetHCLKFreq+0x58>)
 800b6e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b6ea:	4a07      	ldr	r2, [pc, #28]	; (800b708 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b6f0:	4b04      	ldr	r3, [pc, #16]	; (800b704 <HAL_RCC_GetHCLKFreq+0x58>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	58024400 	.word	0x58024400
 800b700:	08015284 	.word	0x08015284
 800b704:	24000234 	.word	0x24000234
 800b708:	24000230 	.word	0x24000230

0800b70c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b710:	f7ff ffcc 	bl	800b6ac <HAL_RCC_GetHCLKFreq>
 800b714:	4602      	mov	r2, r0
 800b716:	4b06      	ldr	r3, [pc, #24]	; (800b730 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b718:	69db      	ldr	r3, [r3, #28]
 800b71a:	091b      	lsrs	r3, r3, #4
 800b71c:	f003 0307 	and.w	r3, r3, #7
 800b720:	4904      	ldr	r1, [pc, #16]	; (800b734 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b722:	5ccb      	ldrb	r3, [r1, r3]
 800b724:	f003 031f 	and.w	r3, r3, #31
 800b728:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	58024400 	.word	0x58024400
 800b734:	08015284 	.word	0x08015284

0800b738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b73c:	f7ff ffb6 	bl	800b6ac <HAL_RCC_GetHCLKFreq>
 800b740:	4602      	mov	r2, r0
 800b742:	4b06      	ldr	r3, [pc, #24]	; (800b75c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b744:	69db      	ldr	r3, [r3, #28]
 800b746:	0a1b      	lsrs	r3, r3, #8
 800b748:	f003 0307 	and.w	r3, r3, #7
 800b74c:	4904      	ldr	r1, [pc, #16]	; (800b760 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b74e:	5ccb      	ldrb	r3, [r1, r3]
 800b750:	f003 031f 	and.w	r3, r3, #31
 800b754:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b758:	4618      	mov	r0, r3
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	58024400 	.word	0x58024400
 800b760:	08015284 	.word	0x08015284

0800b764 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b086      	sub	sp, #24
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b76c:	2300      	movs	r3, #0
 800b76e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b770:	2300      	movs	r3, #0
 800b772:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d03f      	beq.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b784:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b788:	d02a      	beq.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b78a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b78e:	d824      	bhi.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b790:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b794:	d018      	beq.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b796:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b79a:	d81e      	bhi.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d003      	beq.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b7a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7a4:	d007      	beq.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b7a6:	e018      	b.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7a8:	4ba3      	ldr	r3, [pc, #652]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ac:	4aa2      	ldr	r2, [pc, #648]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b7ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b7b4:	e015      	b.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	3304      	adds	r3, #4
 800b7ba:	2102      	movs	r1, #2
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f001 f9d5 	bl	800cb6c <RCCEx_PLL2_Config>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b7c6:	e00c      	b.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	3324      	adds	r3, #36	; 0x24
 800b7cc:	2102      	movs	r1, #2
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f001 fa7e 	bl	800ccd0 <RCCEx_PLL3_Config>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b7d8:	e003      	b.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	75fb      	strb	r3, [r7, #23]
      break;
 800b7de:	e000      	b.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b7e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7e2:	7dfb      	ldrb	r3, [r7, #23]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d109      	bne.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b7e8:	4b93      	ldr	r3, [pc, #588]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b7ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7f4:	4990      	ldr	r1, [pc, #576]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	650b      	str	r3, [r1, #80]	; 0x50
 800b7fa:	e001      	b.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7fc:	7dfb      	ldrb	r3, [r7, #23]
 800b7fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d03d      	beq.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b810:	2b04      	cmp	r3, #4
 800b812:	d826      	bhi.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b814:	a201      	add	r2, pc, #4	; (adr r2, 800b81c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b81a:	bf00      	nop
 800b81c:	0800b831 	.word	0x0800b831
 800b820:	0800b83f 	.word	0x0800b83f
 800b824:	0800b851 	.word	0x0800b851
 800b828:	0800b869 	.word	0x0800b869
 800b82c:	0800b869 	.word	0x0800b869
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b830:	4b81      	ldr	r3, [pc, #516]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b834:	4a80      	ldr	r2, [pc, #512]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b83a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b83c:	e015      	b.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	3304      	adds	r3, #4
 800b842:	2100      	movs	r1, #0
 800b844:	4618      	mov	r0, r3
 800b846:	f001 f991 	bl	800cb6c <RCCEx_PLL2_Config>
 800b84a:	4603      	mov	r3, r0
 800b84c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b84e:	e00c      	b.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	3324      	adds	r3, #36	; 0x24
 800b854:	2100      	movs	r1, #0
 800b856:	4618      	mov	r0, r3
 800b858:	f001 fa3a 	bl	800ccd0 <RCCEx_PLL3_Config>
 800b85c:	4603      	mov	r3, r0
 800b85e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b860:	e003      	b.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b862:	2301      	movs	r3, #1
 800b864:	75fb      	strb	r3, [r7, #23]
      break;
 800b866:	e000      	b.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b868:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b86a:	7dfb      	ldrb	r3, [r7, #23]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d109      	bne.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b870:	4b71      	ldr	r3, [pc, #452]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b874:	f023 0207 	bic.w	r2, r3, #7
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b87c:	496e      	ldr	r1, [pc, #440]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b87e:	4313      	orrs	r3, r2
 800b880:	650b      	str	r3, [r1, #80]	; 0x50
 800b882:	e001      	b.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b884:	7dfb      	ldrb	r3, [r7, #23]
 800b886:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b890:	2b00      	cmp	r3, #0
 800b892:	d042      	beq.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b89c:	d02b      	beq.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b89e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8a2:	d825      	bhi.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b8a4:	2bc0      	cmp	r3, #192	; 0xc0
 800b8a6:	d028      	beq.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b8a8:	2bc0      	cmp	r3, #192	; 0xc0
 800b8aa:	d821      	bhi.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b8ac:	2b80      	cmp	r3, #128	; 0x80
 800b8ae:	d016      	beq.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800b8b0:	2b80      	cmp	r3, #128	; 0x80
 800b8b2:	d81d      	bhi.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d002      	beq.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800b8b8:	2b40      	cmp	r3, #64	; 0x40
 800b8ba:	d007      	beq.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b8bc:	e018      	b.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8be:	4b5e      	ldr	r3, [pc, #376]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c2:	4a5d      	ldr	r2, [pc, #372]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b8c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b8ca:	e017      	b.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	3304      	adds	r3, #4
 800b8d0:	2100      	movs	r1, #0
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f001 f94a 	bl	800cb6c <RCCEx_PLL2_Config>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b8dc:	e00e      	b.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	3324      	adds	r3, #36	; 0x24
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f001 f9f3 	bl	800ccd0 <RCCEx_PLL3_Config>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b8ee:	e005      	b.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	75fb      	strb	r3, [r7, #23]
      break;
 800b8f4:	e002      	b.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b8f6:	bf00      	nop
 800b8f8:	e000      	b.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b8fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8fc:	7dfb      	ldrb	r3, [r7, #23]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d109      	bne.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b902:	4b4d      	ldr	r3, [pc, #308]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b906:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b90e:	494a      	ldr	r1, [pc, #296]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b910:	4313      	orrs	r3, r2
 800b912:	650b      	str	r3, [r1, #80]	; 0x50
 800b914:	e001      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b916:	7dfb      	ldrb	r3, [r7, #23]
 800b918:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b922:	2b00      	cmp	r3, #0
 800b924:	d049      	beq.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b92c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b930:	d030      	beq.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b932:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b936:	d82a      	bhi.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b938:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b93c:	d02c      	beq.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800b93e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b942:	d824      	bhi.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b948:	d018      	beq.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800b94a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b94e:	d81e      	bhi.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b950:	2b00      	cmp	r3, #0
 800b952:	d003      	beq.n	800b95c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b954:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b958:	d007      	beq.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b95a:	e018      	b.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b95c:	4b36      	ldr	r3, [pc, #216]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b960:	4a35      	ldr	r2, [pc, #212]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b966:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b968:	e017      	b.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	3304      	adds	r3, #4
 800b96e:	2100      	movs	r1, #0
 800b970:	4618      	mov	r0, r3
 800b972:	f001 f8fb 	bl	800cb6c <RCCEx_PLL2_Config>
 800b976:	4603      	mov	r3, r0
 800b978:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b97a:	e00e      	b.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	3324      	adds	r3, #36	; 0x24
 800b980:	2100      	movs	r1, #0
 800b982:	4618      	mov	r0, r3
 800b984:	f001 f9a4 	bl	800ccd0 <RCCEx_PLL3_Config>
 800b988:	4603      	mov	r3, r0
 800b98a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b98c:	e005      	b.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	75fb      	strb	r3, [r7, #23]
      break;
 800b992:	e002      	b.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b994:	bf00      	nop
 800b996:	e000      	b.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b998:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b99a:	7dfb      	ldrb	r3, [r7, #23]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d10a      	bne.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b9a0:	4b25      	ldr	r3, [pc, #148]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b9a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9a4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b9ae:	4922      	ldr	r1, [pc, #136]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	658b      	str	r3, [r1, #88]	; 0x58
 800b9b4:	e001      	b.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9b6:	7dfb      	ldrb	r3, [r7, #23]
 800b9b8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d04b      	beq.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b9cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b9d0:	d030      	beq.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800b9d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b9d6:	d82a      	bhi.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b9d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b9dc:	d02e      	beq.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800b9de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b9e2:	d824      	bhi.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b9e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9e8:	d018      	beq.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800b9ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9ee:	d81e      	bhi.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d003      	beq.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b9f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b9f8:	d007      	beq.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b9fa:	e018      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9fc:	4b0e      	ldr	r3, [pc, #56]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba00:	4a0d      	ldr	r2, [pc, #52]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ba02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ba08:	e019      	b.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	3304      	adds	r3, #4
 800ba0e:	2100      	movs	r1, #0
 800ba10:	4618      	mov	r0, r3
 800ba12:	f001 f8ab 	bl	800cb6c <RCCEx_PLL2_Config>
 800ba16:	4603      	mov	r3, r0
 800ba18:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ba1a:	e010      	b.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	3324      	adds	r3, #36	; 0x24
 800ba20:	2100      	movs	r1, #0
 800ba22:	4618      	mov	r0, r3
 800ba24:	f001 f954 	bl	800ccd0 <RCCEx_PLL3_Config>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ba2c:	e007      	b.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	75fb      	strb	r3, [r7, #23]
      break;
 800ba32:	e004      	b.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800ba34:	bf00      	nop
 800ba36:	e002      	b.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800ba38:	58024400 	.word	0x58024400
      break;
 800ba3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba3e:	7dfb      	ldrb	r3, [r7, #23]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d10a      	bne.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ba44:	4b99      	ldr	r3, [pc, #612]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ba46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba48:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ba52:	4996      	ldr	r1, [pc, #600]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ba54:	4313      	orrs	r3, r2
 800ba56:	658b      	str	r3, [r1, #88]	; 0x58
 800ba58:	e001      	b.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba5a:	7dfb      	ldrb	r3, [r7, #23]
 800ba5c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d032      	beq.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba6e:	2b30      	cmp	r3, #48	; 0x30
 800ba70:	d01c      	beq.n	800baac <HAL_RCCEx_PeriphCLKConfig+0x348>
 800ba72:	2b30      	cmp	r3, #48	; 0x30
 800ba74:	d817      	bhi.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800ba76:	2b20      	cmp	r3, #32
 800ba78:	d00c      	beq.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800ba7a:	2b20      	cmp	r3, #32
 800ba7c:	d813      	bhi.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d016      	beq.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800ba82:	2b10      	cmp	r3, #16
 800ba84:	d10f      	bne.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba86:	4b89      	ldr	r3, [pc, #548]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ba88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba8a:	4a88      	ldr	r2, [pc, #544]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ba8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800ba92:	e00e      	b.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	3304      	adds	r3, #4
 800ba98:	2102      	movs	r1, #2
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f001 f866 	bl	800cb6c <RCCEx_PLL2_Config>
 800baa0:	4603      	mov	r3, r0
 800baa2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800baa4:	e005      	b.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800baa6:	2301      	movs	r3, #1
 800baa8:	75fb      	strb	r3, [r7, #23]
      break;
 800baaa:	e002      	b.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800baac:	bf00      	nop
 800baae:	e000      	b.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800bab0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bab2:	7dfb      	ldrb	r3, [r7, #23]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d109      	bne.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bab8:	4b7c      	ldr	r3, [pc, #496]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800baba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800babc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bac4:	4979      	ldr	r1, [pc, #484]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bac6:	4313      	orrs	r3, r2
 800bac8:	64cb      	str	r3, [r1, #76]	; 0x4c
 800baca:	e001      	b.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bacc:	7dfb      	ldrb	r3, [r7, #23]
 800bace:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d047      	beq.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bae0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bae4:	d030      	beq.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800bae6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800baea:	d82a      	bhi.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800baec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800baf0:	d02c      	beq.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800baf2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800baf6:	d824      	bhi.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800baf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bafc:	d018      	beq.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800bafe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb02:	d81e      	bhi.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d003      	beq.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800bb08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb0c:	d007      	beq.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800bb0e:	e018      	b.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb10:	4b66      	ldr	r3, [pc, #408]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bb12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb14:	4a65      	ldr	r2, [pc, #404]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bb16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bb1c:	e017      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	3304      	adds	r3, #4
 800bb22:	2100      	movs	r1, #0
 800bb24:	4618      	mov	r0, r3
 800bb26:	f001 f821 	bl	800cb6c <RCCEx_PLL2_Config>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bb2e:	e00e      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	3324      	adds	r3, #36	; 0x24
 800bb34:	2100      	movs	r1, #0
 800bb36:	4618      	mov	r0, r3
 800bb38:	f001 f8ca 	bl	800ccd0 <RCCEx_PLL3_Config>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bb40:	e005      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb42:	2301      	movs	r3, #1
 800bb44:	75fb      	strb	r3, [r7, #23]
      break;
 800bb46:	e002      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800bb48:	bf00      	nop
 800bb4a:	e000      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800bb4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb4e:	7dfb      	ldrb	r3, [r7, #23]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d109      	bne.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bb54:	4b55      	ldr	r3, [pc, #340]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bb56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb58:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb60:	4952      	ldr	r1, [pc, #328]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bb62:	4313      	orrs	r3, r2
 800bb64:	650b      	str	r3, [r1, #80]	; 0x50
 800bb66:	e001      	b.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb68:	7dfb      	ldrb	r3, [r7, #23]
 800bb6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d049      	beq.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb80:	d02e      	beq.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800bb82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb86:	d828      	bhi.n	800bbda <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bb88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb8c:	d02a      	beq.n	800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800bb8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb92:	d822      	bhi.n	800bbda <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bb94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bb98:	d026      	beq.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800bb9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bb9e:	d81c      	bhi.n	800bbda <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bba0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bba4:	d010      	beq.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800bba6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bbaa:	d816      	bhi.n	800bbda <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d01d      	beq.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x488>
 800bbb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbb4:	d111      	bne.n	800bbda <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	3304      	adds	r3, #4
 800bbba:	2101      	movs	r1, #1
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f000 ffd5 	bl	800cb6c <RCCEx_PLL2_Config>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bbc6:	e012      	b.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	3324      	adds	r3, #36	; 0x24
 800bbcc:	2101      	movs	r1, #1
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f001 f87e 	bl	800ccd0 <RCCEx_PLL3_Config>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bbd8:	e009      	b.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	75fb      	strb	r3, [r7, #23]
      break;
 800bbde:	e006      	b.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bbe0:	bf00      	nop
 800bbe2:	e004      	b.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bbe4:	bf00      	nop
 800bbe6:	e002      	b.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bbe8:	bf00      	nop
 800bbea:	e000      	b.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bbec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bbee:	7dfb      	ldrb	r3, [r7, #23]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d109      	bne.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bbf4:	4b2d      	ldr	r3, [pc, #180]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bbf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbf8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc00:	492a      	ldr	r1, [pc, #168]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bc02:	4313      	orrs	r3, r2
 800bc04:	650b      	str	r3, [r1, #80]	; 0x50
 800bc06:	e001      	b.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc08:	7dfb      	ldrb	r3, [r7, #23]
 800bc0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d04d      	beq.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bc1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc22:	d02e      	beq.n	800bc82 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800bc24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc28:	d828      	bhi.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bc2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc2e:	d02a      	beq.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800bc30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc34:	d822      	bhi.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bc36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc3a:	d026      	beq.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x526>
 800bc3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc40:	d81c      	bhi.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bc42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc46:	d010      	beq.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bc48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc4c:	d816      	bhi.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d01d      	beq.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800bc52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc56:	d111      	bne.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	3304      	adds	r3, #4
 800bc5c:	2101      	movs	r1, #1
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f000 ff84 	bl	800cb6c <RCCEx_PLL2_Config>
 800bc64:	4603      	mov	r3, r0
 800bc66:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800bc68:	e012      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	3324      	adds	r3, #36	; 0x24
 800bc6e:	2101      	movs	r1, #1
 800bc70:	4618      	mov	r0, r3
 800bc72:	f001 f82d 	bl	800ccd0 <RCCEx_PLL3_Config>
 800bc76:	4603      	mov	r3, r0
 800bc78:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800bc7a:	e009      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	75fb      	strb	r3, [r7, #23]
      break;
 800bc80:	e006      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bc82:	bf00      	nop
 800bc84:	e004      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bc86:	bf00      	nop
 800bc88:	e002      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bc8a:	bf00      	nop
 800bc8c:	e000      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bc8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc90:	7dfb      	ldrb	r3, [r7, #23]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d10c      	bne.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bc96:	4b05      	ldr	r3, [pc, #20]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bc98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc9a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bca4:	4901      	ldr	r1, [pc, #4]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bca6:	4313      	orrs	r3, r2
 800bca8:	658b      	str	r3, [r1, #88]	; 0x58
 800bcaa:	e003      	b.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800bcac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcb0:	7dfb      	ldrb	r3, [r7, #23]
 800bcb2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d02f      	beq.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcc8:	d00e      	beq.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800bcca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcce:	d814      	bhi.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x596>
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d015      	beq.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800bcd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcd8:	d10f      	bne.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcda:	4baf      	ldr	r3, [pc, #700]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bcdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcde:	4aae      	ldr	r2, [pc, #696]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bce4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bce6:	e00c      	b.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	3304      	adds	r3, #4
 800bcec:	2101      	movs	r1, #1
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f000 ff3c 	bl	800cb6c <RCCEx_PLL2_Config>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bcf8:	e003      	b.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	75fb      	strb	r3, [r7, #23]
      break;
 800bcfe:	e000      	b.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800bd00:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd02:	7dfb      	ldrb	r3, [r7, #23]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d109      	bne.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bd08:	4ba3      	ldr	r3, [pc, #652]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd0c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd14:	49a0      	ldr	r1, [pc, #640]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd16:	4313      	orrs	r3, r2
 800bd18:	650b      	str	r3, [r1, #80]	; 0x50
 800bd1a:	e001      	b.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd1c:	7dfb      	ldrb	r3, [r7, #23]
 800bd1e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d032      	beq.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd30:	2b03      	cmp	r3, #3
 800bd32:	d81b      	bhi.n	800bd6c <HAL_RCCEx_PeriphCLKConfig+0x608>
 800bd34:	a201      	add	r2, pc, #4	; (adr r2, 800bd3c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800bd36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd3a:	bf00      	nop
 800bd3c:	0800bd73 	.word	0x0800bd73
 800bd40:	0800bd4d 	.word	0x0800bd4d
 800bd44:	0800bd5b 	.word	0x0800bd5b
 800bd48:	0800bd73 	.word	0x0800bd73
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd4c:	4b92      	ldr	r3, [pc, #584]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd50:	4a91      	ldr	r2, [pc, #580]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bd58:	e00c      	b.n	800bd74 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	3304      	adds	r3, #4
 800bd5e:	2102      	movs	r1, #2
 800bd60:	4618      	mov	r0, r3
 800bd62:	f000 ff03 	bl	800cb6c <RCCEx_PLL2_Config>
 800bd66:	4603      	mov	r3, r0
 800bd68:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bd6a:	e003      	b.n	800bd74 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	75fb      	strb	r3, [r7, #23]
      break;
 800bd70:	e000      	b.n	800bd74 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800bd72:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd74:	7dfb      	ldrb	r3, [r7, #23]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d109      	bne.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bd7a:	4b87      	ldr	r3, [pc, #540]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd7e:	f023 0203 	bic.w	r2, r3, #3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd86:	4984      	ldr	r1, [pc, #528]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bd8c:	e001      	b.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd8e:	7dfb      	ldrb	r3, [r7, #23]
 800bd90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f000 8086 	beq.w	800beac <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bda0:	4b7e      	ldr	r3, [pc, #504]	; (800bf9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	4a7d      	ldr	r2, [pc, #500]	; (800bf9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800bda6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdaa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bdac:	f7fb f970 	bl	8007090 <HAL_GetTick>
 800bdb0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bdb2:	e009      	b.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bdb4:	f7fb f96c 	bl	8007090 <HAL_GetTick>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	2b64      	cmp	r3, #100	; 0x64
 800bdc0:	d902      	bls.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	75fb      	strb	r3, [r7, #23]
        break;
 800bdc6:	e005      	b.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bdc8:	4b74      	ldr	r3, [pc, #464]	; (800bf9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d0ef      	beq.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800bdd4:	7dfb      	ldrb	r3, [r7, #23]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d166      	bne.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bdda:	4b6f      	ldr	r3, [pc, #444]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bddc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bde4:	4053      	eors	r3, r2
 800bde6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d013      	beq.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bdee:	4b6a      	ldr	r3, [pc, #424]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bdf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bdf6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bdf8:	4b67      	ldr	r3, [pc, #412]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bdfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdfc:	4a66      	ldr	r2, [pc, #408]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bdfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be02:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800be04:	4b64      	ldr	r3, [pc, #400]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be08:	4a63      	ldr	r2, [pc, #396]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be0e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800be10:	4a61      	ldr	r2, [pc, #388]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be20:	d115      	bne.n	800be4e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be22:	f7fb f935 	bl	8007090 <HAL_GetTick>
 800be26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800be28:	e00b      	b.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be2a:	f7fb f931 	bl	8007090 <HAL_GetTick>
 800be2e:	4602      	mov	r2, r0
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	1ad3      	subs	r3, r2, r3
 800be34:	f241 3288 	movw	r2, #5000	; 0x1388
 800be38:	4293      	cmp	r3, r2
 800be3a:	d902      	bls.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800be3c:	2303      	movs	r3, #3
 800be3e:	75fb      	strb	r3, [r7, #23]
            break;
 800be40:	e005      	b.n	800be4e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800be42:	4b55      	ldr	r3, [pc, #340]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be46:	f003 0302 	and.w	r3, r3, #2
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d0ed      	beq.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800be4e:	7dfb      	ldrb	r3, [r7, #23]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d126      	bne.n	800bea2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be62:	d10d      	bne.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800be64:	4b4c      	ldr	r3, [pc, #304]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be66:	691b      	ldr	r3, [r3, #16]
 800be68:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be72:	0919      	lsrs	r1, r3, #4
 800be74:	4b4a      	ldr	r3, [pc, #296]	; (800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800be76:	400b      	ands	r3, r1
 800be78:	4947      	ldr	r1, [pc, #284]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be7a:	4313      	orrs	r3, r2
 800be7c:	610b      	str	r3, [r1, #16]
 800be7e:	e005      	b.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0x728>
 800be80:	4b45      	ldr	r3, [pc, #276]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be82:	691b      	ldr	r3, [r3, #16]
 800be84:	4a44      	ldr	r2, [pc, #272]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be86:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800be8a:	6113      	str	r3, [r2, #16]
 800be8c:	4b42      	ldr	r3, [pc, #264]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be9a:	493f      	ldr	r1, [pc, #252]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be9c:	4313      	orrs	r3, r2
 800be9e:	670b      	str	r3, [r1, #112]	; 0x70
 800bea0:	e004      	b.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bea2:	7dfb      	ldrb	r3, [r7, #23]
 800bea4:	75bb      	strb	r3, [r7, #22]
 800bea6:	e001      	b.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bea8:	7dfb      	ldrb	r3, [r7, #23]
 800beaa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f003 0301 	and.w	r3, r3, #1
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	f000 8085 	beq.w	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bebe:	2b28      	cmp	r3, #40	; 0x28
 800bec0:	d866      	bhi.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800bec2:	a201      	add	r2, pc, #4	; (adr r2, 800bec8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800bec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec8:	0800bfa5 	.word	0x0800bfa5
 800becc:	0800bf91 	.word	0x0800bf91
 800bed0:	0800bf91 	.word	0x0800bf91
 800bed4:	0800bf91 	.word	0x0800bf91
 800bed8:	0800bf91 	.word	0x0800bf91
 800bedc:	0800bf91 	.word	0x0800bf91
 800bee0:	0800bf91 	.word	0x0800bf91
 800bee4:	0800bf91 	.word	0x0800bf91
 800bee8:	0800bf6d 	.word	0x0800bf6d
 800beec:	0800bf91 	.word	0x0800bf91
 800bef0:	0800bf91 	.word	0x0800bf91
 800bef4:	0800bf91 	.word	0x0800bf91
 800bef8:	0800bf91 	.word	0x0800bf91
 800befc:	0800bf91 	.word	0x0800bf91
 800bf00:	0800bf91 	.word	0x0800bf91
 800bf04:	0800bf91 	.word	0x0800bf91
 800bf08:	0800bf7f 	.word	0x0800bf7f
 800bf0c:	0800bf91 	.word	0x0800bf91
 800bf10:	0800bf91 	.word	0x0800bf91
 800bf14:	0800bf91 	.word	0x0800bf91
 800bf18:	0800bf91 	.word	0x0800bf91
 800bf1c:	0800bf91 	.word	0x0800bf91
 800bf20:	0800bf91 	.word	0x0800bf91
 800bf24:	0800bf91 	.word	0x0800bf91
 800bf28:	0800bfa5 	.word	0x0800bfa5
 800bf2c:	0800bf91 	.word	0x0800bf91
 800bf30:	0800bf91 	.word	0x0800bf91
 800bf34:	0800bf91 	.word	0x0800bf91
 800bf38:	0800bf91 	.word	0x0800bf91
 800bf3c:	0800bf91 	.word	0x0800bf91
 800bf40:	0800bf91 	.word	0x0800bf91
 800bf44:	0800bf91 	.word	0x0800bf91
 800bf48:	0800bfa5 	.word	0x0800bfa5
 800bf4c:	0800bf91 	.word	0x0800bf91
 800bf50:	0800bf91 	.word	0x0800bf91
 800bf54:	0800bf91 	.word	0x0800bf91
 800bf58:	0800bf91 	.word	0x0800bf91
 800bf5c:	0800bf91 	.word	0x0800bf91
 800bf60:	0800bf91 	.word	0x0800bf91
 800bf64:	0800bf91 	.word	0x0800bf91
 800bf68:	0800bfa5 	.word	0x0800bfa5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	3304      	adds	r3, #4
 800bf70:	2101      	movs	r1, #1
 800bf72:	4618      	mov	r0, r3
 800bf74:	f000 fdfa 	bl	800cb6c <RCCEx_PLL2_Config>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bf7c:	e013      	b.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	3324      	adds	r3, #36	; 0x24
 800bf82:	2101      	movs	r1, #1
 800bf84:	4618      	mov	r0, r3
 800bf86:	f000 fea3 	bl	800ccd0 <RCCEx_PLL3_Config>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bf8e:	e00a      	b.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bf90:	2301      	movs	r3, #1
 800bf92:	75fb      	strb	r3, [r7, #23]
      break;
 800bf94:	e007      	b.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800bf96:	bf00      	nop
 800bf98:	58024400 	.word	0x58024400
 800bf9c:	58024800 	.word	0x58024800
 800bfa0:	00ffffcf 	.word	0x00ffffcf
      break;
 800bfa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bfa6:	7dfb      	ldrb	r3, [r7, #23]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d109      	bne.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bfac:	4b96      	ldr	r3, [pc, #600]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bfae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfb0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfb8:	4993      	ldr	r1, [pc, #588]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	654b      	str	r3, [r1, #84]	; 0x54
 800bfbe:	e001      	b.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfc0:	7dfb      	ldrb	r3, [r7, #23]
 800bfc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f003 0302 	and.w	r3, r3, #2
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d038      	beq.n	800c042 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfd4:	2b05      	cmp	r3, #5
 800bfd6:	d821      	bhi.n	800c01c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800bfd8:	a201      	add	r2, pc, #4	; (adr r2, 800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800bfda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfde:	bf00      	nop
 800bfe0:	0800c023 	.word	0x0800c023
 800bfe4:	0800bff9 	.word	0x0800bff9
 800bfe8:	0800c00b 	.word	0x0800c00b
 800bfec:	0800c023 	.word	0x0800c023
 800bff0:	0800c023 	.word	0x0800c023
 800bff4:	0800c023 	.word	0x0800c023
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	3304      	adds	r3, #4
 800bffc:	2101      	movs	r1, #1
 800bffe:	4618      	mov	r0, r3
 800c000:	f000 fdb4 	bl	800cb6c <RCCEx_PLL2_Config>
 800c004:	4603      	mov	r3, r0
 800c006:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c008:	e00c      	b.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	3324      	adds	r3, #36	; 0x24
 800c00e:	2101      	movs	r1, #1
 800c010:	4618      	mov	r0, r3
 800c012:	f000 fe5d 	bl	800ccd0 <RCCEx_PLL3_Config>
 800c016:	4603      	mov	r3, r0
 800c018:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c01a:	e003      	b.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c01c:	2301      	movs	r3, #1
 800c01e:	75fb      	strb	r3, [r7, #23]
      break;
 800c020:	e000      	b.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800c022:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c024:	7dfb      	ldrb	r3, [r7, #23]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d109      	bne.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c02a:	4b77      	ldr	r3, [pc, #476]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c02c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c02e:	f023 0207 	bic.w	r2, r3, #7
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c036:	4974      	ldr	r1, [pc, #464]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c038:	4313      	orrs	r3, r2
 800c03a:	654b      	str	r3, [r1, #84]	; 0x54
 800c03c:	e001      	b.n	800c042 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c03e:	7dfb      	ldrb	r3, [r7, #23]
 800c040:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f003 0304 	and.w	r3, r3, #4
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d03a      	beq.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c054:	2b05      	cmp	r3, #5
 800c056:	d821      	bhi.n	800c09c <HAL_RCCEx_PeriphCLKConfig+0x938>
 800c058:	a201      	add	r2, pc, #4	; (adr r2, 800c060 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800c05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05e:	bf00      	nop
 800c060:	0800c0a3 	.word	0x0800c0a3
 800c064:	0800c079 	.word	0x0800c079
 800c068:	0800c08b 	.word	0x0800c08b
 800c06c:	0800c0a3 	.word	0x0800c0a3
 800c070:	0800c0a3 	.word	0x0800c0a3
 800c074:	0800c0a3 	.word	0x0800c0a3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	3304      	adds	r3, #4
 800c07c:	2101      	movs	r1, #1
 800c07e:	4618      	mov	r0, r3
 800c080:	f000 fd74 	bl	800cb6c <RCCEx_PLL2_Config>
 800c084:	4603      	mov	r3, r0
 800c086:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c088:	e00c      	b.n	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	3324      	adds	r3, #36	; 0x24
 800c08e:	2101      	movs	r1, #1
 800c090:	4618      	mov	r0, r3
 800c092:	f000 fe1d 	bl	800ccd0 <RCCEx_PLL3_Config>
 800c096:	4603      	mov	r3, r0
 800c098:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c09a:	e003      	b.n	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c09c:	2301      	movs	r3, #1
 800c09e:	75fb      	strb	r3, [r7, #23]
      break;
 800c0a0:	e000      	b.n	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800c0a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c0a4:	7dfb      	ldrb	r3, [r7, #23]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d10a      	bne.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c0aa:	4b57      	ldr	r3, [pc, #348]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c0ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0ae:	f023 0207 	bic.w	r2, r3, #7
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0b8:	4953      	ldr	r1, [pc, #332]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	658b      	str	r3, [r1, #88]	; 0x58
 800c0be:	e001      	b.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0c0:	7dfb      	ldrb	r3, [r7, #23]
 800c0c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f003 0320 	and.w	r3, r3, #32
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d04b      	beq.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c0da:	d02e      	beq.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800c0dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c0e0:	d828      	bhi.n	800c134 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c0e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0e6:	d02a      	beq.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800c0e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0ec:	d822      	bhi.n	800c134 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c0ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c0f2:	d026      	beq.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800c0f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c0f8:	d81c      	bhi.n	800c134 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c0fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0fe:	d010      	beq.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800c100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c104:	d816      	bhi.n	800c134 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c106:	2b00      	cmp	r3, #0
 800c108:	d01d      	beq.n	800c146 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800c10a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c10e:	d111      	bne.n	800c134 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	3304      	adds	r3, #4
 800c114:	2100      	movs	r1, #0
 800c116:	4618      	mov	r0, r3
 800c118:	f000 fd28 	bl	800cb6c <RCCEx_PLL2_Config>
 800c11c:	4603      	mov	r3, r0
 800c11e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c120:	e012      	b.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	3324      	adds	r3, #36	; 0x24
 800c126:	2102      	movs	r1, #2
 800c128:	4618      	mov	r0, r3
 800c12a:	f000 fdd1 	bl	800ccd0 <RCCEx_PLL3_Config>
 800c12e:	4603      	mov	r3, r0
 800c130:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c132:	e009      	b.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c134:	2301      	movs	r3, #1
 800c136:	75fb      	strb	r3, [r7, #23]
      break;
 800c138:	e006      	b.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c13a:	bf00      	nop
 800c13c:	e004      	b.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c13e:	bf00      	nop
 800c140:	e002      	b.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c142:	bf00      	nop
 800c144:	e000      	b.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c146:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c148:	7dfb      	ldrb	r3, [r7, #23]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d10a      	bne.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c14e:	4b2e      	ldr	r3, [pc, #184]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c152:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c15c:	492a      	ldr	r1, [pc, #168]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c15e:	4313      	orrs	r3, r2
 800c160:	654b      	str	r3, [r1, #84]	; 0x54
 800c162:	e001      	b.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c164:	7dfb      	ldrb	r3, [r7, #23]
 800c166:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c170:	2b00      	cmp	r3, #0
 800c172:	d04d      	beq.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c17a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c17e:	d02e      	beq.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800c180:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c184:	d828      	bhi.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c18a:	d02a      	beq.n	800c1e2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800c18c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c190:	d822      	bhi.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c192:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c196:	d026      	beq.n	800c1e6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800c198:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c19c:	d81c      	bhi.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c19e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1a2:	d010      	beq.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800c1a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1a8:	d816      	bhi.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d01d      	beq.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800c1ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1b2:	d111      	bne.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	3304      	adds	r3, #4
 800c1b8:	2100      	movs	r1, #0
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f000 fcd6 	bl	800cb6c <RCCEx_PLL2_Config>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c1c4:	e012      	b.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	3324      	adds	r3, #36	; 0x24
 800c1ca:	2102      	movs	r1, #2
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f000 fd7f 	bl	800ccd0 <RCCEx_PLL3_Config>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c1d6:	e009      	b.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c1d8:	2301      	movs	r3, #1
 800c1da:	75fb      	strb	r3, [r7, #23]
      break;
 800c1dc:	e006      	b.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c1de:	bf00      	nop
 800c1e0:	e004      	b.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c1e2:	bf00      	nop
 800c1e4:	e002      	b.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c1e6:	bf00      	nop
 800c1e8:	e000      	b.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c1ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c1ec:	7dfb      	ldrb	r3, [r7, #23]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10c      	bne.n	800c20c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c1f2:	4b05      	ldr	r3, [pc, #20]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c1f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1f6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c200:	4901      	ldr	r1, [pc, #4]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c202:	4313      	orrs	r3, r2
 800c204:	658b      	str	r3, [r1, #88]	; 0x58
 800c206:	e003      	b.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800c208:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c20c:	7dfb      	ldrb	r3, [r7, #23]
 800c20e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d04b      	beq.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c222:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c226:	d02e      	beq.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800c228:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c22c:	d828      	bhi.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c22e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c232:	d02a      	beq.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800c234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c238:	d822      	bhi.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c23a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c23e:	d026      	beq.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800c240:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c244:	d81c      	bhi.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c246:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c24a:	d010      	beq.n	800c26e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800c24c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c250:	d816      	bhi.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c252:	2b00      	cmp	r3, #0
 800c254:	d01d      	beq.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800c256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c25a:	d111      	bne.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	3304      	adds	r3, #4
 800c260:	2100      	movs	r1, #0
 800c262:	4618      	mov	r0, r3
 800c264:	f000 fc82 	bl	800cb6c <RCCEx_PLL2_Config>
 800c268:	4603      	mov	r3, r0
 800c26a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c26c:	e012      	b.n	800c294 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	3324      	adds	r3, #36	; 0x24
 800c272:	2102      	movs	r1, #2
 800c274:	4618      	mov	r0, r3
 800c276:	f000 fd2b 	bl	800ccd0 <RCCEx_PLL3_Config>
 800c27a:	4603      	mov	r3, r0
 800c27c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c27e:	e009      	b.n	800c294 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c280:	2301      	movs	r3, #1
 800c282:	75fb      	strb	r3, [r7, #23]
      break;
 800c284:	e006      	b.n	800c294 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c286:	bf00      	nop
 800c288:	e004      	b.n	800c294 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c28a:	bf00      	nop
 800c28c:	e002      	b.n	800c294 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c28e:	bf00      	nop
 800c290:	e000      	b.n	800c294 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c292:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c294:	7dfb      	ldrb	r3, [r7, #23]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d10a      	bne.n	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c29a:	4b9d      	ldr	r3, [pc, #628]	; (800c510 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c29c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c29e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c2a8:	4999      	ldr	r1, [pc, #612]	; (800c510 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	658b      	str	r3, [r1, #88]	; 0x58
 800c2ae:	e001      	b.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2b0:	7dfb      	ldrb	r3, [r7, #23]
 800c2b2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f003 0308 	and.w	r3, r3, #8
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d01a      	beq.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2ca:	d10a      	bne.n	800c2e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	3324      	adds	r3, #36	; 0x24
 800c2d0:	2102      	movs	r1, #2
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f000 fcfc 	bl	800ccd0 <RCCEx_PLL3_Config>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d001      	beq.n	800c2e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c2e2:	4b8b      	ldr	r3, [pc, #556]	; (800c510 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c2e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2f0:	4987      	ldr	r1, [pc, #540]	; (800c510 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f003 0310 	and.w	r3, r3, #16
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d01a      	beq.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c30c:	d10a      	bne.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	3324      	adds	r3, #36	; 0x24
 800c312:	2102      	movs	r1, #2
 800c314:	4618      	mov	r0, r3
 800c316:	f000 fcdb 	bl	800ccd0 <RCCEx_PLL3_Config>
 800c31a:	4603      	mov	r3, r0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d001      	beq.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800c320:	2301      	movs	r3, #1
 800c322:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c324:	4b7a      	ldr	r3, [pc, #488]	; (800c510 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c328:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c332:	4977      	ldr	r1, [pc, #476]	; (800c510 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c334:	4313      	orrs	r3, r2
 800c336:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c340:	2b00      	cmp	r3, #0
 800c342:	d034      	beq.n	800c3ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c34a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c34e:	d01d      	beq.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800c350:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c354:	d817      	bhi.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800c356:	2b00      	cmp	r3, #0
 800c358:	d003      	beq.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800c35a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c35e:	d009      	beq.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800c360:	e011      	b.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	3304      	adds	r3, #4
 800c366:	2100      	movs	r1, #0
 800c368:	4618      	mov	r0, r3
 800c36a:	f000 fbff 	bl	800cb6c <RCCEx_PLL2_Config>
 800c36e:	4603      	mov	r3, r0
 800c370:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c372:	e00c      	b.n	800c38e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	3324      	adds	r3, #36	; 0x24
 800c378:	2102      	movs	r1, #2
 800c37a:	4618      	mov	r0, r3
 800c37c:	f000 fca8 	bl	800ccd0 <RCCEx_PLL3_Config>
 800c380:	4603      	mov	r3, r0
 800c382:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c384:	e003      	b.n	800c38e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	75fb      	strb	r3, [r7, #23]
      break;
 800c38a:	e000      	b.n	800c38e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800c38c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c38e:	7dfb      	ldrb	r3, [r7, #23]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d10a      	bne.n	800c3aa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c394:	4b5e      	ldr	r3, [pc, #376]	; (800c510 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c398:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c3a2:	495b      	ldr	r1, [pc, #364]	; (800c510 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	658b      	str	r3, [r1, #88]	; 0x58
 800c3a8:	e001      	b.n	800c3ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3aa:	7dfb      	ldrb	r3, [r7, #23]
 800c3ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d033      	beq.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c3c4:	d01c      	beq.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800c3c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c3ca:	d816      	bhi.n	800c3fa <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800c3cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3d0:	d003      	beq.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800c3d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c3d6:	d007      	beq.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800c3d8:	e00f      	b.n	800c3fa <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3da:	4b4d      	ldr	r3, [pc, #308]	; (800c510 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3de:	4a4c      	ldr	r2, [pc, #304]	; (800c510 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c3e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c3e6:	e00c      	b.n	800c402 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	3324      	adds	r3, #36	; 0x24
 800c3ec:	2101      	movs	r1, #1
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f000 fc6e 	bl	800ccd0 <RCCEx_PLL3_Config>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c3f8:	e003      	b.n	800c402 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	75fb      	strb	r3, [r7, #23]
      break;
 800c3fe:	e000      	b.n	800c402 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800c400:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c402:	7dfb      	ldrb	r3, [r7, #23]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d10a      	bne.n	800c41e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c408:	4b41      	ldr	r3, [pc, #260]	; (800c510 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c40a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c40c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c416:	493e      	ldr	r1, [pc, #248]	; (800c510 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c418:	4313      	orrs	r3, r2
 800c41a:	654b      	str	r3, [r1, #84]	; 0x54
 800c41c:	e001      	b.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c41e:	7dfb      	ldrb	r3, [r7, #23]
 800c420:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d029      	beq.n	800c482 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c432:	2b00      	cmp	r3, #0
 800c434:	d003      	beq.n	800c43e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800c436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c43a:	d007      	beq.n	800c44c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800c43c:	e00f      	b.n	800c45e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c43e:	4b34      	ldr	r3, [pc, #208]	; (800c510 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c442:	4a33      	ldr	r2, [pc, #204]	; (800c510 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c448:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c44a:	e00b      	b.n	800c464 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	3304      	adds	r3, #4
 800c450:	2102      	movs	r1, #2
 800c452:	4618      	mov	r0, r3
 800c454:	f000 fb8a 	bl	800cb6c <RCCEx_PLL2_Config>
 800c458:	4603      	mov	r3, r0
 800c45a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c45c:	e002      	b.n	800c464 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800c45e:	2301      	movs	r3, #1
 800c460:	75fb      	strb	r3, [r7, #23]
      break;
 800c462:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c464:	7dfb      	ldrb	r3, [r7, #23]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d109      	bne.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c46a:	4b29      	ldr	r3, [pc, #164]	; (800c510 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c46c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c46e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c476:	4926      	ldr	r1, [pc, #152]	; (800c510 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c478:	4313      	orrs	r3, r2
 800c47a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c47c:	e001      	b.n	800c482 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c47e:	7dfb      	ldrb	r3, [r7, #23]
 800c480:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d00a      	beq.n	800c4a4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	3324      	adds	r3, #36	; 0x24
 800c492:	2102      	movs	r1, #2
 800c494:	4618      	mov	r0, r3
 800c496:	f000 fc1b 	bl	800ccd0 <RCCEx_PLL3_Config>
 800c49a:	4603      	mov	r3, r0
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d001      	beq.n	800c4a4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d033      	beq.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4b8:	d017      	beq.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800c4ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4be:	d811      	bhi.n	800c4e4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800c4c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4c4:	d013      	beq.n	800c4ee <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800c4c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4ca:	d80b      	bhi.n	800c4e4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d010      	beq.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800c4d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4d4:	d106      	bne.n	800c4e4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4d6:	4b0e      	ldr	r3, [pc, #56]	; (800c510 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4da:	4a0d      	ldr	r2, [pc, #52]	; (800c510 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c4dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800c4e2:	e007      	b.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	75fb      	strb	r3, [r7, #23]
      break;
 800c4e8:	e004      	b.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c4ea:	bf00      	nop
 800c4ec:	e002      	b.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c4ee:	bf00      	nop
 800c4f0:	e000      	b.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c4f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c4f4:	7dfb      	ldrb	r3, [r7, #23]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d10c      	bne.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c4fa:	4b05      	ldr	r3, [pc, #20]	; (800c510 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c506:	4902      	ldr	r1, [pc, #8]	; (800c510 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c508:	4313      	orrs	r3, r2
 800c50a:	654b      	str	r3, [r1, #84]	; 0x54
 800c50c:	e004      	b.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800c50e:	bf00      	nop
 800c510:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c514:	7dfb      	ldrb	r3, [r7, #23]
 800c516:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c520:	2b00      	cmp	r3, #0
 800c522:	d008      	beq.n	800c536 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c524:	4b31      	ldr	r3, [pc, #196]	; (800c5ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c528:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c530:	492e      	ldr	r1, [pc, #184]	; (800c5ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c532:	4313      	orrs	r3, r2
 800c534:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d009      	beq.n	800c556 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c542:	4b2a      	ldr	r3, [pc, #168]	; (800c5ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c544:	691b      	ldr	r3, [r3, #16]
 800c546:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c550:	4926      	ldr	r1, [pc, #152]	; (800c5ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c552:	4313      	orrs	r3, r2
 800c554:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d008      	beq.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c562:	4b22      	ldr	r3, [pc, #136]	; (800c5ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c566:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c56e:	491f      	ldr	r1, [pc, #124]	; (800c5ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c570:	4313      	orrs	r3, r2
 800c572:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d00d      	beq.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c580:	4b1a      	ldr	r3, [pc, #104]	; (800c5ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c582:	691b      	ldr	r3, [r3, #16]
 800c584:	4a19      	ldr	r2, [pc, #100]	; (800c5ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c586:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c58a:	6113      	str	r3, [r2, #16]
 800c58c:	4b17      	ldr	r3, [pc, #92]	; (800c5ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c58e:	691a      	ldr	r2, [r3, #16]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c596:	4915      	ldr	r1, [pc, #84]	; (800c5ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c598:	4313      	orrs	r3, r2
 800c59a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	da08      	bge.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c5a4:	4b11      	ldr	r3, [pc, #68]	; (800c5ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c5a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5b0:	490e      	ldr	r1, [pc, #56]	; (800c5ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c5b2:	4313      	orrs	r3, r2
 800c5b4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d009      	beq.n	800c5d6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c5c2:	4b0a      	ldr	r3, [pc, #40]	; (800c5ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c5c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5d0:	4906      	ldr	r1, [pc, #24]	; (800c5ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c5d6:	7dbb      	ldrb	r3, [r7, #22]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d101      	bne.n	800c5e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	e000      	b.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800c5e0:	2301      	movs	r3, #1
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3718      	adds	r7, #24
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	58024400 	.word	0x58024400

0800c5f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c5f4:	f7ff f85a 	bl	800b6ac <HAL_RCC_GetHCLKFreq>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	4b06      	ldr	r3, [pc, #24]	; (800c614 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c5fc:	6a1b      	ldr	r3, [r3, #32]
 800c5fe:	091b      	lsrs	r3, r3, #4
 800c600:	f003 0307 	and.w	r3, r3, #7
 800c604:	4904      	ldr	r1, [pc, #16]	; (800c618 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c606:	5ccb      	ldrb	r3, [r1, r3]
 800c608:	f003 031f 	and.w	r3, r3, #31
 800c60c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c610:	4618      	mov	r0, r3
 800c612:	bd80      	pop	{r7, pc}
 800c614:	58024400 	.word	0x58024400
 800c618:	08015284 	.word	0x08015284

0800c61c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b089      	sub	sp, #36	; 0x24
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c624:	4ba1      	ldr	r3, [pc, #644]	; (800c8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c628:	f003 0303 	and.w	r3, r3, #3
 800c62c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c62e:	4b9f      	ldr	r3, [pc, #636]	; (800c8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c632:	0b1b      	lsrs	r3, r3, #12
 800c634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c638:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c63a:	4b9c      	ldr	r3, [pc, #624]	; (800c8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c63e:	091b      	lsrs	r3, r3, #4
 800c640:	f003 0301 	and.w	r3, r3, #1
 800c644:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c646:	4b99      	ldr	r3, [pc, #612]	; (800c8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c64a:	08db      	lsrs	r3, r3, #3
 800c64c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c650:	693a      	ldr	r2, [r7, #16]
 800c652:	fb02 f303 	mul.w	r3, r2, r3
 800c656:	ee07 3a90 	vmov	s15, r3
 800c65a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c65e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	2b00      	cmp	r3, #0
 800c666:	f000 8111 	beq.w	800c88c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c66a:	69bb      	ldr	r3, [r7, #24]
 800c66c:	2b02      	cmp	r3, #2
 800c66e:	f000 8083 	beq.w	800c778 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c672:	69bb      	ldr	r3, [r7, #24]
 800c674:	2b02      	cmp	r3, #2
 800c676:	f200 80a1 	bhi.w	800c7bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c67a:	69bb      	ldr	r3, [r7, #24]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d003      	beq.n	800c688 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	2b01      	cmp	r3, #1
 800c684:	d056      	beq.n	800c734 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c686:	e099      	b.n	800c7bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c688:	4b88      	ldr	r3, [pc, #544]	; (800c8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f003 0320 	and.w	r3, r3, #32
 800c690:	2b00      	cmp	r3, #0
 800c692:	d02d      	beq.n	800c6f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c694:	4b85      	ldr	r3, [pc, #532]	; (800c8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	08db      	lsrs	r3, r3, #3
 800c69a:	f003 0303 	and.w	r3, r3, #3
 800c69e:	4a84      	ldr	r2, [pc, #528]	; (800c8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c6a0:	fa22 f303 	lsr.w	r3, r2, r3
 800c6a4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	ee07 3a90 	vmov	s15, r3
 800c6ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	ee07 3a90 	vmov	s15, r3
 800c6b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6be:	4b7b      	ldr	r3, [pc, #492]	; (800c8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6c6:	ee07 3a90 	vmov	s15, r3
 800c6ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c6ee:	e087      	b.n	800c800 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	ee07 3a90 	vmov	s15, r3
 800c6f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c6fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c702:	4b6a      	ldr	r3, [pc, #424]	; (800c8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c70a:	ee07 3a90 	vmov	s15, r3
 800c70e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c712:	ed97 6a03 	vldr	s12, [r7, #12]
 800c716:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c71a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c71e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c72a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c72e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c732:	e065      	b.n	800c800 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	ee07 3a90 	vmov	s15, r3
 800c73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c73e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c8bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c746:	4b59      	ldr	r3, [pc, #356]	; (800c8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c74a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c74e:	ee07 3a90 	vmov	s15, r3
 800c752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c756:	ed97 6a03 	vldr	s12, [r7, #12]
 800c75a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c75e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c76a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c76e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c772:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c776:	e043      	b.n	800c800 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	ee07 3a90 	vmov	s15, r3
 800c77e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c782:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c78a:	4b48      	ldr	r3, [pc, #288]	; (800c8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c78e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c792:	ee07 3a90 	vmov	s15, r3
 800c796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c79a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c79e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c7ba:	e021      	b.n	800c800 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	ee07 3a90 	vmov	s15, r3
 800c7c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c8bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c7ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7ce:	4b37      	ldr	r3, [pc, #220]	; (800c8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7d6:	ee07 3a90 	vmov	s15, r3
 800c7da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7de:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c7fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c800:	4b2a      	ldr	r3, [pc, #168]	; (800c8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c804:	0a5b      	lsrs	r3, r3, #9
 800c806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c80a:	ee07 3a90 	vmov	s15, r3
 800c80e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c812:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c816:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c81a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c81e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c826:	ee17 2a90 	vmov	r2, s15
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c82e:	4b1f      	ldr	r3, [pc, #124]	; (800c8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c832:	0c1b      	lsrs	r3, r3, #16
 800c834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c838:	ee07 3a90 	vmov	s15, r3
 800c83c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c840:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c844:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c848:	edd7 6a07 	vldr	s13, [r7, #28]
 800c84c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c854:	ee17 2a90 	vmov	r2, s15
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c85c:	4b13      	ldr	r3, [pc, #76]	; (800c8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c85e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c860:	0e1b      	lsrs	r3, r3, #24
 800c862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c866:	ee07 3a90 	vmov	s15, r3
 800c86a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c86e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c872:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c876:	edd7 6a07 	vldr	s13, [r7, #28]
 800c87a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c87e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c882:	ee17 2a90 	vmov	r2, s15
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c88a:	e008      	b.n	800c89e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2200      	movs	r2, #0
 800c89c:	609a      	str	r2, [r3, #8]
}
 800c89e:	bf00      	nop
 800c8a0:	3724      	adds	r7, #36	; 0x24
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	58024400 	.word	0x58024400
 800c8b0:	03d09000 	.word	0x03d09000
 800c8b4:	46000000 	.word	0x46000000
 800c8b8:	4c742400 	.word	0x4c742400
 800c8bc:	4a742400 	.word	0x4a742400
 800c8c0:	4c371b00 	.word	0x4c371b00

0800c8c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b089      	sub	sp, #36	; 0x24
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c8cc:	4ba1      	ldr	r3, [pc, #644]	; (800cb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8d0:	f003 0303 	and.w	r3, r3, #3
 800c8d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c8d6:	4b9f      	ldr	r3, [pc, #636]	; (800cb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8da:	0d1b      	lsrs	r3, r3, #20
 800c8dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c8e2:	4b9c      	ldr	r3, [pc, #624]	; (800cb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e6:	0a1b      	lsrs	r3, r3, #8
 800c8e8:	f003 0301 	and.w	r3, r3, #1
 800c8ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c8ee:	4b99      	ldr	r3, [pc, #612]	; (800cb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8f2:	08db      	lsrs	r3, r3, #3
 800c8f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c8f8:	693a      	ldr	r2, [r7, #16]
 800c8fa:	fb02 f303 	mul.w	r3, r2, r3
 800c8fe:	ee07 3a90 	vmov	s15, r3
 800c902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c906:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	f000 8111 	beq.w	800cb34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c912:	69bb      	ldr	r3, [r7, #24]
 800c914:	2b02      	cmp	r3, #2
 800c916:	f000 8083 	beq.w	800ca20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c91a:	69bb      	ldr	r3, [r7, #24]
 800c91c:	2b02      	cmp	r3, #2
 800c91e:	f200 80a1 	bhi.w	800ca64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d003      	beq.n	800c930 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c928:	69bb      	ldr	r3, [r7, #24]
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d056      	beq.n	800c9dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c92e:	e099      	b.n	800ca64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c930:	4b88      	ldr	r3, [pc, #544]	; (800cb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f003 0320 	and.w	r3, r3, #32
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d02d      	beq.n	800c998 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c93c:	4b85      	ldr	r3, [pc, #532]	; (800cb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	08db      	lsrs	r3, r3, #3
 800c942:	f003 0303 	and.w	r3, r3, #3
 800c946:	4a84      	ldr	r2, [pc, #528]	; (800cb58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c948:	fa22 f303 	lsr.w	r3, r2, r3
 800c94c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	ee07 3a90 	vmov	s15, r3
 800c954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	ee07 3a90 	vmov	s15, r3
 800c95e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c966:	4b7b      	ldr	r3, [pc, #492]	; (800cb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c96a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c96e:	ee07 3a90 	vmov	s15, r3
 800c972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c976:	ed97 6a03 	vldr	s12, [r7, #12]
 800c97a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cb5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c97e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c98a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c98e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c992:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c996:	e087      	b.n	800caa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	ee07 3a90 	vmov	s15, r3
 800c99e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cb60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c9a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9aa:	4b6a      	ldr	r3, [pc, #424]	; (800cb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9b2:	ee07 3a90 	vmov	s15, r3
 800c9b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cb5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c9da:	e065      	b.n	800caa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	ee07 3a90 	vmov	s15, r3
 800c9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cb64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c9ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9ee:	4b59      	ldr	r3, [pc, #356]	; (800cb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9f6:	ee07 3a90 	vmov	s15, r3
 800c9fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca02:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cb5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ca1e:	e043      	b.n	800caa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	ee07 3a90 	vmov	s15, r3
 800ca26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cb68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ca2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca32:	4b48      	ldr	r3, [pc, #288]	; (800cb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca3a:	ee07 3a90 	vmov	s15, r3
 800ca3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca42:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca46:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cb5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ca62:	e021      	b.n	800caa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	ee07 3a90 	vmov	s15, r3
 800ca6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cb64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ca72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca76:	4b37      	ldr	r3, [pc, #220]	; (800cb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca7e:	ee07 3a90 	vmov	s15, r3
 800ca82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca86:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cb5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800caa6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800caa8:	4b2a      	ldr	r3, [pc, #168]	; (800cb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caac:	0a5b      	lsrs	r3, r3, #9
 800caae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cab2:	ee07 3a90 	vmov	s15, r3
 800cab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cabe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cac2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800caca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cace:	ee17 2a90 	vmov	r2, s15
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800cad6:	4b1f      	ldr	r3, [pc, #124]	; (800cb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cada:	0c1b      	lsrs	r3, r3, #16
 800cadc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cae0:	ee07 3a90 	vmov	s15, r3
 800cae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cae8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800caec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800caf0:	edd7 6a07 	vldr	s13, [r7, #28]
 800caf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800caf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cafc:	ee17 2a90 	vmov	r2, s15
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800cb04:	4b13      	ldr	r3, [pc, #76]	; (800cb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb08:	0e1b      	lsrs	r3, r3, #24
 800cb0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb0e:	ee07 3a90 	vmov	s15, r3
 800cb12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb2a:	ee17 2a90 	vmov	r2, s15
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cb32:	e008      	b.n	800cb46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2200      	movs	r2, #0
 800cb38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2200      	movs	r2, #0
 800cb44:	609a      	str	r2, [r3, #8]
}
 800cb46:	bf00      	nop
 800cb48:	3724      	adds	r7, #36	; 0x24
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb50:	4770      	bx	lr
 800cb52:	bf00      	nop
 800cb54:	58024400 	.word	0x58024400
 800cb58:	03d09000 	.word	0x03d09000
 800cb5c:	46000000 	.word	0x46000000
 800cb60:	4c742400 	.word	0x4c742400
 800cb64:	4a742400 	.word	0x4a742400
 800cb68:	4c371b00 	.word	0x4c371b00

0800cb6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b084      	sub	sp, #16
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb76:	2300      	movs	r3, #0
 800cb78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cb7a:	4b53      	ldr	r3, [pc, #332]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cb7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb7e:	f003 0303 	and.w	r3, r3, #3
 800cb82:	2b03      	cmp	r3, #3
 800cb84:	d101      	bne.n	800cb8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cb86:	2301      	movs	r3, #1
 800cb88:	e099      	b.n	800ccbe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cb8a:	4b4f      	ldr	r3, [pc, #316]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	4a4e      	ldr	r2, [pc, #312]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cb90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cb94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb96:	f7fa fa7b 	bl	8007090 <HAL_GetTick>
 800cb9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cb9c:	e008      	b.n	800cbb0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cb9e:	f7fa fa77 	bl	8007090 <HAL_GetTick>
 800cba2:	4602      	mov	r2, r0
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	1ad3      	subs	r3, r2, r3
 800cba8:	2b02      	cmp	r3, #2
 800cbaa:	d901      	bls.n	800cbb0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cbac:	2303      	movs	r3, #3
 800cbae:	e086      	b.n	800ccbe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cbb0:	4b45      	ldr	r3, [pc, #276]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d1f0      	bne.n	800cb9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cbbc:	4b42      	ldr	r3, [pc, #264]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cbbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbc0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	031b      	lsls	r3, r3, #12
 800cbca:	493f      	ldr	r1, [pc, #252]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	628b      	str	r3, [r1, #40]	; 0x28
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	689b      	ldr	r3, [r3, #8]
 800cbde:	3b01      	subs	r3, #1
 800cbe0:	025b      	lsls	r3, r3, #9
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	431a      	orrs	r2, r3
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	3b01      	subs	r3, #1
 800cbec:	041b      	lsls	r3, r3, #16
 800cbee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cbf2:	431a      	orrs	r2, r3
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	691b      	ldr	r3, [r3, #16]
 800cbf8:	3b01      	subs	r3, #1
 800cbfa:	061b      	lsls	r3, r3, #24
 800cbfc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cc00:	4931      	ldr	r1, [pc, #196]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cc02:	4313      	orrs	r3, r2
 800cc04:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cc06:	4b30      	ldr	r3, [pc, #192]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	695b      	ldr	r3, [r3, #20]
 800cc12:	492d      	ldr	r1, [pc, #180]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cc14:	4313      	orrs	r3, r2
 800cc16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cc18:	4b2b      	ldr	r3, [pc, #172]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc1c:	f023 0220 	bic.w	r2, r3, #32
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	699b      	ldr	r3, [r3, #24]
 800cc24:	4928      	ldr	r1, [pc, #160]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cc26:	4313      	orrs	r3, r2
 800cc28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cc2a:	4b27      	ldr	r3, [pc, #156]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cc2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc2e:	4a26      	ldr	r2, [pc, #152]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cc30:	f023 0310 	bic.w	r3, r3, #16
 800cc34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cc36:	4b24      	ldr	r3, [pc, #144]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cc38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc3a:	4b24      	ldr	r3, [pc, #144]	; (800cccc <RCCEx_PLL2_Config+0x160>)
 800cc3c:	4013      	ands	r3, r2
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	69d2      	ldr	r2, [r2, #28]
 800cc42:	00d2      	lsls	r2, r2, #3
 800cc44:	4920      	ldr	r1, [pc, #128]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cc46:	4313      	orrs	r3, r2
 800cc48:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cc4a:	4b1f      	ldr	r3, [pc, #124]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cc4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc4e:	4a1e      	ldr	r2, [pc, #120]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cc50:	f043 0310 	orr.w	r3, r3, #16
 800cc54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d106      	bne.n	800cc6a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cc5c:	4b1a      	ldr	r3, [pc, #104]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc60:	4a19      	ldr	r2, [pc, #100]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cc62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc66:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc68:	e00f      	b.n	800cc8a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d106      	bne.n	800cc7e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cc70:	4b15      	ldr	r3, [pc, #84]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cc72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc74:	4a14      	ldr	r2, [pc, #80]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cc76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc7c:	e005      	b.n	800cc8a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cc7e:	4b12      	ldr	r3, [pc, #72]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cc80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc82:	4a11      	ldr	r2, [pc, #68]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cc84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cc88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cc8a:	4b0f      	ldr	r3, [pc, #60]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4a0e      	ldr	r2, [pc, #56]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800cc90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cc94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc96:	f7fa f9fb 	bl	8007090 <HAL_GetTick>
 800cc9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cc9c:	e008      	b.n	800ccb0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cc9e:	f7fa f9f7 	bl	8007090 <HAL_GetTick>
 800cca2:	4602      	mov	r2, r0
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	1ad3      	subs	r3, r2, r3
 800cca8:	2b02      	cmp	r3, #2
 800ccaa:	d901      	bls.n	800ccb0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ccac:	2303      	movs	r3, #3
 800ccae:	e006      	b.n	800ccbe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ccb0:	4b05      	ldr	r3, [pc, #20]	; (800ccc8 <RCCEx_PLL2_Config+0x15c>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d0f0      	beq.n	800cc9e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ccbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3710      	adds	r7, #16
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	58024400 	.word	0x58024400
 800cccc:	ffff0007 	.word	0xffff0007

0800ccd0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ccde:	4b53      	ldr	r3, [pc, #332]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800cce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cce2:	f003 0303 	and.w	r3, r3, #3
 800cce6:	2b03      	cmp	r3, #3
 800cce8:	d101      	bne.n	800ccee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ccea:	2301      	movs	r3, #1
 800ccec:	e099      	b.n	800ce22 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ccee:	4b4f      	ldr	r3, [pc, #316]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	4a4e      	ldr	r2, [pc, #312]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800ccf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ccf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ccfa:	f7fa f9c9 	bl	8007090 <HAL_GetTick>
 800ccfe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cd00:	e008      	b.n	800cd14 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cd02:	f7fa f9c5 	bl	8007090 <HAL_GetTick>
 800cd06:	4602      	mov	r2, r0
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	1ad3      	subs	r3, r2, r3
 800cd0c:	2b02      	cmp	r3, #2
 800cd0e:	d901      	bls.n	800cd14 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cd10:	2303      	movs	r3, #3
 800cd12:	e086      	b.n	800ce22 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cd14:	4b45      	ldr	r3, [pc, #276]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d1f0      	bne.n	800cd02 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cd20:	4b42      	ldr	r3, [pc, #264]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800cd22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd24:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	051b      	lsls	r3, r3, #20
 800cd2e:	493f      	ldr	r1, [pc, #252]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800cd30:	4313      	orrs	r3, r2
 800cd32:	628b      	str	r3, [r1, #40]	; 0x28
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	3b01      	subs	r3, #1
 800cd3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	689b      	ldr	r3, [r3, #8]
 800cd42:	3b01      	subs	r3, #1
 800cd44:	025b      	lsls	r3, r3, #9
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	431a      	orrs	r2, r3
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	68db      	ldr	r3, [r3, #12]
 800cd4e:	3b01      	subs	r3, #1
 800cd50:	041b      	lsls	r3, r3, #16
 800cd52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cd56:	431a      	orrs	r2, r3
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	691b      	ldr	r3, [r3, #16]
 800cd5c:	3b01      	subs	r3, #1
 800cd5e:	061b      	lsls	r3, r3, #24
 800cd60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cd64:	4931      	ldr	r1, [pc, #196]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800cd66:	4313      	orrs	r3, r2
 800cd68:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cd6a:	4b30      	ldr	r3, [pc, #192]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800cd6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	695b      	ldr	r3, [r3, #20]
 800cd76:	492d      	ldr	r1, [pc, #180]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cd7c:	4b2b      	ldr	r3, [pc, #172]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800cd7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd80:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	699b      	ldr	r3, [r3, #24]
 800cd88:	4928      	ldr	r1, [pc, #160]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cd8e:	4b27      	ldr	r3, [pc, #156]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800cd90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd92:	4a26      	ldr	r2, [pc, #152]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800cd94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cd9a:	4b24      	ldr	r3, [pc, #144]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800cd9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd9e:	4b24      	ldr	r3, [pc, #144]	; (800ce30 <RCCEx_PLL3_Config+0x160>)
 800cda0:	4013      	ands	r3, r2
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	69d2      	ldr	r2, [r2, #28]
 800cda6:	00d2      	lsls	r2, r2, #3
 800cda8:	4920      	ldr	r1, [pc, #128]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cdae:	4b1f      	ldr	r3, [pc, #124]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800cdb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdb2:	4a1e      	ldr	r2, [pc, #120]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800cdb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cdb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d106      	bne.n	800cdce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cdc0:	4b1a      	ldr	r3, [pc, #104]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800cdc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc4:	4a19      	ldr	r2, [pc, #100]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800cdc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cdca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cdcc:	e00f      	b.n	800cdee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d106      	bne.n	800cde2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cdd4:	4b15      	ldr	r3, [pc, #84]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800cdd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd8:	4a14      	ldr	r2, [pc, #80]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800cdda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cdde:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cde0:	e005      	b.n	800cdee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cde2:	4b12      	ldr	r3, [pc, #72]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800cde4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde6:	4a11      	ldr	r2, [pc, #68]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800cde8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cdec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cdee:	4b0f      	ldr	r3, [pc, #60]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	4a0e      	ldr	r2, [pc, #56]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800cdf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cdf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdfa:	f7fa f949 	bl	8007090 <HAL_GetTick>
 800cdfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ce00:	e008      	b.n	800ce14 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ce02:	f7fa f945 	bl	8007090 <HAL_GetTick>
 800ce06:	4602      	mov	r2, r0
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	1ad3      	subs	r3, r2, r3
 800ce0c:	2b02      	cmp	r3, #2
 800ce0e:	d901      	bls.n	800ce14 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ce10:	2303      	movs	r3, #3
 800ce12:	e006      	b.n	800ce22 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ce14:	4b05      	ldr	r3, [pc, #20]	; (800ce2c <RCCEx_PLL3_Config+0x15c>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d0f0      	beq.n	800ce02 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ce20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3710      	adds	r7, #16
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	58024400 	.word	0x58024400
 800ce30:	ffff0007 	.word	0xffff0007

0800ce34 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b084      	sub	sp, #16
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d101      	bne.n	800ce46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ce42:	2301      	movs	r3, #1
 800ce44:	e0f1      	b.n	800d02a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4a78      	ldr	r2, [pc, #480]	; (800d034 <HAL_SPI_Init+0x200>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d00f      	beq.n	800ce76 <HAL_SPI_Init+0x42>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4a77      	ldr	r2, [pc, #476]	; (800d038 <HAL_SPI_Init+0x204>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d00a      	beq.n	800ce76 <HAL_SPI_Init+0x42>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	4a75      	ldr	r2, [pc, #468]	; (800d03c <HAL_SPI_Init+0x208>)
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d005      	beq.n	800ce76 <HAL_SPI_Init+0x42>
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	68db      	ldr	r3, [r3, #12]
 800ce6e:	2b0f      	cmp	r3, #15
 800ce70:	d901      	bls.n	800ce76 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ce72:	2301      	movs	r3, #1
 800ce74:	e0d9      	b.n	800d02a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 fba4 	bl	800d5c4 <SPI_GetPacketSize>
 800ce7c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	4a6c      	ldr	r2, [pc, #432]	; (800d034 <HAL_SPI_Init+0x200>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d00c      	beq.n	800cea2 <HAL_SPI_Init+0x6e>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a6a      	ldr	r2, [pc, #424]	; (800d038 <HAL_SPI_Init+0x204>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d007      	beq.n	800cea2 <HAL_SPI_Init+0x6e>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	4a69      	ldr	r2, [pc, #420]	; (800d03c <HAL_SPI_Init+0x208>)
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d002      	beq.n	800cea2 <HAL_SPI_Init+0x6e>
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2b08      	cmp	r3, #8
 800cea0:	d811      	bhi.n	800cec6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cea6:	4a63      	ldr	r2, [pc, #396]	; (800d034 <HAL_SPI_Init+0x200>)
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d009      	beq.n	800cec0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a61      	ldr	r2, [pc, #388]	; (800d038 <HAL_SPI_Init+0x204>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d004      	beq.n	800cec0 <HAL_SPI_Init+0x8c>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a60      	ldr	r2, [pc, #384]	; (800d03c <HAL_SPI_Init+0x208>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d104      	bne.n	800ceca <HAL_SPI_Init+0x96>
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2b10      	cmp	r3, #16
 800cec4:	d901      	bls.n	800ceca <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cec6:	2301      	movs	r3, #1
 800cec8:	e0af      	b.n	800d02a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ced0:	b2db      	uxtb	r3, r3
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d106      	bne.n	800cee4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2200      	movs	r2, #0
 800ceda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f7f8 f92e 	bl	8005140 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2202      	movs	r2, #2
 800cee8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	681a      	ldr	r2, [r3, #0]
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f022 0201 	bic.w	r2, r2, #1
 800cefa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	689b      	ldr	r3, [r3, #8]
 800cf02:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800cf06:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	699b      	ldr	r3, [r3, #24]
 800cf0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cf10:	d119      	bne.n	800cf46 <HAL_SPI_Init+0x112>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cf1a:	d103      	bne.n	800cf24 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d008      	beq.n	800cf36 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d10c      	bne.n	800cf46 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cf30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf34:	d107      	bne.n	800cf46 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cf44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	69da      	ldr	r2, [r3, #28]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf4e:	431a      	orrs	r2, r3
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	431a      	orrs	r2, r3
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf58:	ea42 0103 	orr.w	r1, r2, r3
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	68da      	ldr	r2, [r3, #12]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	430a      	orrs	r2, r1
 800cf66:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf70:	431a      	orrs	r2, r3
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf76:	431a      	orrs	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	699b      	ldr	r3, [r3, #24]
 800cf7c:	431a      	orrs	r2, r3
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	691b      	ldr	r3, [r3, #16]
 800cf82:	431a      	orrs	r2, r3
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	695b      	ldr	r3, [r3, #20]
 800cf88:	431a      	orrs	r2, r3
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6a1b      	ldr	r3, [r3, #32]
 800cf8e:	431a      	orrs	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	431a      	orrs	r2, r3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf9a:	431a      	orrs	r2, r3
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	689b      	ldr	r3, [r3, #8]
 800cfa0:	431a      	orrs	r2, r3
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfa6:	ea42 0103 	orr.w	r1, r2, r3
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	430a      	orrs	r2, r1
 800cfb4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	685b      	ldr	r3, [r3, #4]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d113      	bne.n	800cfe6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cfd0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	689b      	ldr	r3, [r3, #8]
 800cfd8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cfe4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f022 0201 	bic.w	r2, r2, #1
 800cff4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d00a      	beq.n	800d018 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	68db      	ldr	r3, [r3, #12]
 800d008:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	430a      	orrs	r2, r1
 800d016:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2200      	movs	r2, #0
 800d01c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2201      	movs	r2, #1
 800d024:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d028:	2300      	movs	r3, #0
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3710      	adds	r7, #16
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	40013000 	.word	0x40013000
 800d038:	40003800 	.word	0x40003800
 800d03c:	40003c00 	.word	0x40003c00

0800d040 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b08a      	sub	sp, #40	; 0x28
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	691b      	ldr	r3, [r3, #16]
 800d04e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	695b      	ldr	r3, [r3, #20]
 800d056:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800d058:	6a3a      	ldr	r2, [r7, #32]
 800d05a:	69fb      	ldr	r3, [r7, #28]
 800d05c:	4013      	ands	r3, r2
 800d05e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	689b      	ldr	r3, [r3, #8]
 800d066:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800d068:	2300      	movs	r3, #0
 800d06a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d072:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	3330      	adds	r3, #48	; 0x30
 800d07a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d082:	2b00      	cmp	r3, #0
 800d084:	d113      	bne.n	800d0ae <HAL_SPI_IRQHandler+0x6e>
 800d086:	69bb      	ldr	r3, [r7, #24]
 800d088:	f003 0320 	and.w	r3, r3, #32
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d10e      	bne.n	800d0ae <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800d090:	69bb      	ldr	r3, [r7, #24]
 800d092:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d096:	2b00      	cmp	r3, #0
 800d098:	d009      	beq.n	800d0ae <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	4798      	blx	r3
    hspi->RxISR(hspi);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	4798      	blx	r3
    handled = 1UL;
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d0ae:	69bb      	ldr	r3, [r7, #24]
 800d0b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d10f      	bne.n	800d0d8 <HAL_SPI_IRQHandler+0x98>
 800d0b8:	69bb      	ldr	r3, [r7, #24]
 800d0ba:	f003 0301 	and.w	r3, r3, #1
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d00a      	beq.n	800d0d8 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d105      	bne.n	800d0d8 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	4798      	blx	r3
    handled = 1UL;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d0d8:	69bb      	ldr	r3, [r7, #24]
 800d0da:	f003 0320 	and.w	r3, r3, #32
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d10f      	bne.n	800d102 <HAL_SPI_IRQHandler+0xc2>
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	f003 0302 	and.w	r3, r3, #2
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d00a      	beq.n	800d102 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800d0ec:	69bb      	ldr	r3, [r7, #24]
 800d0ee:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d105      	bne.n	800d102 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	4798      	blx	r3
    handled = 1UL;
 800d0fe:	2301      	movs	r3, #1
 800d100:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800d102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d104:	2b00      	cmp	r3, #0
 800d106:	f040 816f 	bne.w	800d3e8 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800d10a:	69bb      	ldr	r3, [r7, #24]
 800d10c:	f003 0308 	and.w	r3, r3, #8
 800d110:	2b00      	cmp	r3, #0
 800d112:	f000 80a0 	beq.w	800d256 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	699a      	ldr	r2, [r3, #24]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f042 0208 	orr.w	r2, r2, #8
 800d124:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	699a      	ldr	r2, [r3, #24]
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f042 0210 	orr.w	r2, r2, #16
 800d134:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	699a      	ldr	r2, [r3, #24]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d144:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	691a      	ldr	r2, [r3, #16]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f022 0208 	bic.w	r2, r2, #8
 800d154:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00f      	beq.n	800d180 <HAL_SPI_IRQHandler+0x140>
 800d160:	7cfb      	ldrb	r3, [r7, #19]
 800d162:	2b04      	cmp	r3, #4
 800d164:	d004      	beq.n	800d170 <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d16a:	69db      	ldr	r3, [r3, #28]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d007      	beq.n	800d180 <HAL_SPI_IRQHandler+0x140>
 800d170:	7cfb      	ldrb	r3, [r7, #19]
 800d172:	2b03      	cmp	r3, #3
 800d174:	d059      	beq.n	800d22a <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d17a:	69db      	ldr	r3, [r3, #28]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d154      	bne.n	800d22a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d13d      	bne.n	800d20a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800d18e:	e036      	b.n	800d1fe <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	68db      	ldr	r3, [r3, #12]
 800d194:	2b0f      	cmp	r3, #15
 800d196:	d90b      	bls.n	800d1b0 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d1a2:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1a8:	1d1a      	adds	r2, r3, #4
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	665a      	str	r2, [r3, #100]	; 0x64
 800d1ae:	e01d      	b.n	800d1ec <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	68db      	ldr	r3, [r3, #12]
 800d1b4:	2b07      	cmp	r3, #7
 800d1b6:	d90b      	bls.n	800d1d0 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1bc:	68fa      	ldr	r2, [r7, #12]
 800d1be:	8812      	ldrh	r2, [r2, #0]
 800d1c0:	b292      	uxth	r2, r2
 800d1c2:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1c8:	1c9a      	adds	r2, r3, #2
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	665a      	str	r2, [r3, #100]	; 0x64
 800d1ce:	e00d      	b.n	800d1ec <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1dc:	7812      	ldrb	r2, [r2, #0]
 800d1de:	b2d2      	uxtb	r2, r2
 800d1e0:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1e6:	1c5a      	adds	r2, r3, #1
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d1f2:	b29b      	uxth	r3, r3
 800d1f4:	3b01      	subs	r3, #1
 800d1f6:	b29a      	uxth	r2, r3
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d204:	b29b      	uxth	r3, r3
 800d206:	2b00      	cmp	r3, #0
 800d208:	d1c2      	bne.n	800d190 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 f93a 	bl	800d484 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2201      	movs	r2, #1
 800d214:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d003      	beq.n	800d22a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 f90a 	bl	800d43c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800d228:	e0e3      	b.n	800d3f2 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800d22a:	7cfb      	ldrb	r3, [r7, #19]
 800d22c:	2b05      	cmp	r3, #5
 800d22e:	d103      	bne.n	800d238 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f000 f8f9 	bl	800d428 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800d236:	e0d9      	b.n	800d3ec <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800d238:	7cfb      	ldrb	r3, [r7, #19]
 800d23a:	2b04      	cmp	r3, #4
 800d23c:	d103      	bne.n	800d246 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 f8e8 	bl	800d414 <HAL_SPI_RxCpltCallback>
    return;
 800d244:	e0d2      	b.n	800d3ec <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800d246:	7cfb      	ldrb	r3, [r7, #19]
 800d248:	2b03      	cmp	r3, #3
 800d24a:	f040 80cf 	bne.w	800d3ec <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f000 f8d6 	bl	800d400 <HAL_SPI_TxCpltCallback>
    return;
 800d254:	e0ca      	b.n	800d3ec <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800d256:	69fb      	ldr	r3, [r7, #28]
 800d258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d00d      	beq.n	800d27c <HAL_SPI_IRQHandler+0x23c>
 800d260:	6a3b      	ldr	r3, [r7, #32]
 800d262:	f003 0308 	and.w	r3, r3, #8
 800d266:	2b00      	cmp	r3, #0
 800d268:	d008      	beq.n	800d27c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	699a      	ldr	r2, [r3, #24]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d278:	619a      	str	r2, [r3, #24]

    return;
 800d27a:	e0ba      	b.n	800d3f2 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800d27c:	69bb      	ldr	r3, [r7, #24]
 800d27e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800d282:	2b00      	cmp	r3, #0
 800d284:	f000 80b5 	beq.w	800d3f2 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800d288:	69bb      	ldr	r3, [r7, #24]
 800d28a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d00f      	beq.n	800d2b2 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d298:	f043 0204 	orr.w	r2, r3, #4
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	699a      	ldr	r2, [r3, #24]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d2b0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800d2b2:	69bb      	ldr	r3, [r7, #24]
 800d2b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d00f      	beq.n	800d2dc <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2c2:	f043 0201 	orr.w	r2, r3, #1
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	699a      	ldr	r2, [r3, #24]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2da:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800d2dc:	69bb      	ldr	r3, [r7, #24]
 800d2de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d00f      	beq.n	800d306 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2ec:	f043 0208 	orr.w	r2, r3, #8
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	699a      	ldr	r2, [r3, #24]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d304:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800d306:	69bb      	ldr	r3, [r7, #24]
 800d308:	f003 0320 	and.w	r3, r3, #32
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d00f      	beq.n	800d330 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d316:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	699a      	ldr	r2, [r3, #24]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f042 0220 	orr.w	r2, r2, #32
 800d32e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d336:	2b00      	cmp	r3, #0
 800d338:	d05a      	beq.n	800d3f0 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	681a      	ldr	r2, [r3, #0]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f022 0201 	bic.w	r2, r2, #1
 800d348:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	6919      	ldr	r1, [r3, #16]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681a      	ldr	r2, [r3, #0]
 800d354:	4b28      	ldr	r3, [pc, #160]	; (800d3f8 <HAL_SPI_IRQHandler+0x3b8>)
 800d356:	400b      	ands	r3, r1
 800d358:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d360:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d364:	d138      	bne.n	800d3d8 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	689a      	ldr	r2, [r3, #8]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d374:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d013      	beq.n	800d3a6 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d382:	4a1e      	ldr	r2, [pc, #120]	; (800d3fc <HAL_SPI_IRQHandler+0x3bc>)
 800d384:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7fb faba 	bl	8008904 <HAL_DMA_Abort_IT>
 800d390:	4603      	mov	r3, r0
 800d392:	2b00      	cmp	r3, #0
 800d394:	d007      	beq.n	800d3a6 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d39c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d020      	beq.n	800d3f0 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3b2:	4a12      	ldr	r2, [pc, #72]	; (800d3fc <HAL_SPI_IRQHandler+0x3bc>)
 800d3b4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7fb faa2 	bl	8008904 <HAL_DMA_Abort_IT>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d014      	beq.n	800d3f0 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d3d6:	e00b      	b.n	800d3f0 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2201      	movs	r2, #1
 800d3dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f000 f82b 	bl	800d43c <HAL_SPI_ErrorCallback>
    return;
 800d3e6:	e003      	b.n	800d3f0 <HAL_SPI_IRQHandler+0x3b0>
    return;
 800d3e8:	bf00      	nop
 800d3ea:	e002      	b.n	800d3f2 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800d3ec:	bf00      	nop
 800d3ee:	e000      	b.n	800d3f2 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800d3f0:	bf00      	nop
  }
}
 800d3f2:	3728      	adds	r7, #40	; 0x28
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	fffffc94 	.word	0xfffffc94
 800d3fc:	0800d451 	.word	0x0800d451

0800d400 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d400:	b480      	push	{r7}
 800d402:	b083      	sub	sp, #12
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d408:	bf00      	nop
 800d40a:	370c      	adds	r7, #12
 800d40c:	46bd      	mov	sp, r7
 800d40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d412:	4770      	bx	lr

0800d414 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d414:	b480      	push	{r7}
 800d416:	b083      	sub	sp, #12
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800d41c:	bf00      	nop
 800d41e:	370c      	adds	r7, #12
 800d420:	46bd      	mov	sp, r7
 800d422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d426:	4770      	bx	lr

0800d428 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d428:	b480      	push	{r7}
 800d42a:	b083      	sub	sp, #12
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800d430:	bf00      	nop
 800d432:	370c      	adds	r7, #12
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b083      	sub	sp, #12
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d444:	bf00      	nop
 800d446:	370c      	adds	r7, #12
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr

0800d450 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b084      	sub	sp, #16
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d45c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2200      	movs	r2, #0
 800d462:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2200      	movs	r2, #0
 800d46a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2201      	movs	r2, #1
 800d472:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d476:	68f8      	ldr	r0, [r7, #12]
 800d478:	f7ff ffe0 	bl	800d43c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d47c:	bf00      	nop
 800d47e:	3710      	adds	r7, #16
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d484:	b480      	push	{r7}
 800d486:	b085      	sub	sp, #20
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	695b      	ldr	r3, [r3, #20]
 800d492:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	699a      	ldr	r2, [r3, #24]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f042 0208 	orr.w	r2, r2, #8
 800d4a2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	699a      	ldr	r2, [r3, #24]
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	f042 0210 	orr.w	r2, r2, #16
 800d4b2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f022 0201 	bic.w	r2, r2, #1
 800d4c2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	6919      	ldr	r1, [r3, #16]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681a      	ldr	r2, [r3, #0]
 800d4ce:	4b3c      	ldr	r3, [pc, #240]	; (800d5c0 <SPI_CloseTransfer+0x13c>)
 800d4d0:	400b      	ands	r3, r1
 800d4d2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	689a      	ldr	r2, [r3, #8]
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d4e2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d4ea:	b2db      	uxtb	r3, r3
 800d4ec:	2b04      	cmp	r3, #4
 800d4ee:	d014      	beq.n	800d51a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	f003 0320 	and.w	r3, r3, #32
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d00f      	beq.n	800d51a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d500:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	699a      	ldr	r2, [r3, #24]
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	f042 0220 	orr.w	r2, r2, #32
 800d518:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d520:	b2db      	uxtb	r3, r3
 800d522:	2b03      	cmp	r3, #3
 800d524:	d014      	beq.n	800d550 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d00f      	beq.n	800d550 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d536:	f043 0204 	orr.w	r2, r3, #4
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	699a      	ldr	r2, [r3, #24]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d54e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d556:	2b00      	cmp	r3, #0
 800d558:	d00f      	beq.n	800d57a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d560:	f043 0201 	orr.w	r2, r3, #1
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	699a      	ldr	r2, [r3, #24]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d578:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d580:	2b00      	cmp	r3, #0
 800d582:	d00f      	beq.n	800d5a4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d58a:	f043 0208 	orr.w	r2, r3, #8
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	699a      	ldr	r2, [r3, #24]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d5a2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d5b4:	bf00      	nop
 800d5b6:	3714      	adds	r7, #20
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr
 800d5c0:	fffffc90 	.word	0xfffffc90

0800d5c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b085      	sub	sp, #20
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5d0:	095b      	lsrs	r3, r3, #5
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	68db      	ldr	r3, [r3, #12]
 800d5da:	3301      	adds	r3, #1
 800d5dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	3307      	adds	r3, #7
 800d5e2:	08db      	lsrs	r3, r3, #3
 800d5e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	68fa      	ldr	r2, [r7, #12]
 800d5ea:	fb02 f303 	mul.w	r3, r2, r3
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3714      	adds	r7, #20
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f8:	4770      	bx	lr

0800d5fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d5fa:	b580      	push	{r7, lr}
 800d5fc:	b082      	sub	sp, #8
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d101      	bne.n	800d60c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d608:	2301      	movs	r3, #1
 800d60a:	e049      	b.n	800d6a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d612:	b2db      	uxtb	r3, r3
 800d614:	2b00      	cmp	r3, #0
 800d616:	d106      	bne.n	800d626 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2200      	movs	r2, #0
 800d61c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f7f8 fda3 	bl	800616c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2202      	movs	r2, #2
 800d62a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681a      	ldr	r2, [r3, #0]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	3304      	adds	r3, #4
 800d636:	4619      	mov	r1, r3
 800d638:	4610      	mov	r0, r2
 800d63a:	f000 fed3 	bl	800e3e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2201      	movs	r2, #1
 800d642:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2201      	movs	r2, #1
 800d64a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2201      	movs	r2, #1
 800d652:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2201      	movs	r2, #1
 800d65a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2201      	movs	r2, #1
 800d662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2201      	movs	r2, #1
 800d66a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2201      	movs	r2, #1
 800d672:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2201      	movs	r2, #1
 800d67a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2201      	movs	r2, #1
 800d682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2201      	movs	r2, #1
 800d68a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2201      	movs	r2, #1
 800d692:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2201      	movs	r2, #1
 800d69a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d69e:	2300      	movs	r3, #0
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3708      	adds	r7, #8
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b085      	sub	sp, #20
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d6b6:	b2db      	uxtb	r3, r3
 800d6b8:	2b01      	cmp	r3, #1
 800d6ba:	d001      	beq.n	800d6c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e054      	b.n	800d76a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2202      	movs	r2, #2
 800d6c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	68da      	ldr	r2, [r3, #12]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f042 0201 	orr.w	r2, r2, #1
 800d6d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a26      	ldr	r2, [pc, #152]	; (800d778 <HAL_TIM_Base_Start_IT+0xd0>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d022      	beq.n	800d728 <HAL_TIM_Base_Start_IT+0x80>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6ea:	d01d      	beq.n	800d728 <HAL_TIM_Base_Start_IT+0x80>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4a22      	ldr	r2, [pc, #136]	; (800d77c <HAL_TIM_Base_Start_IT+0xd4>)
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d018      	beq.n	800d728 <HAL_TIM_Base_Start_IT+0x80>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	4a21      	ldr	r2, [pc, #132]	; (800d780 <HAL_TIM_Base_Start_IT+0xd8>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d013      	beq.n	800d728 <HAL_TIM_Base_Start_IT+0x80>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4a1f      	ldr	r2, [pc, #124]	; (800d784 <HAL_TIM_Base_Start_IT+0xdc>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d00e      	beq.n	800d728 <HAL_TIM_Base_Start_IT+0x80>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	4a1e      	ldr	r2, [pc, #120]	; (800d788 <HAL_TIM_Base_Start_IT+0xe0>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d009      	beq.n	800d728 <HAL_TIM_Base_Start_IT+0x80>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	4a1c      	ldr	r2, [pc, #112]	; (800d78c <HAL_TIM_Base_Start_IT+0xe4>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d004      	beq.n	800d728 <HAL_TIM_Base_Start_IT+0x80>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	4a1b      	ldr	r2, [pc, #108]	; (800d790 <HAL_TIM_Base_Start_IT+0xe8>)
 800d724:	4293      	cmp	r3, r2
 800d726:	d115      	bne.n	800d754 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	689a      	ldr	r2, [r3, #8]
 800d72e:	4b19      	ldr	r3, [pc, #100]	; (800d794 <HAL_TIM_Base_Start_IT+0xec>)
 800d730:	4013      	ands	r3, r2
 800d732:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2b06      	cmp	r3, #6
 800d738:	d015      	beq.n	800d766 <HAL_TIM_Base_Start_IT+0xbe>
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d740:	d011      	beq.n	800d766 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	681a      	ldr	r2, [r3, #0]
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f042 0201 	orr.w	r2, r2, #1
 800d750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d752:	e008      	b.n	800d766 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f042 0201 	orr.w	r2, r2, #1
 800d762:	601a      	str	r2, [r3, #0]
 800d764:	e000      	b.n	800d768 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d766:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d768:	2300      	movs	r3, #0
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3714      	adds	r7, #20
 800d76e:	46bd      	mov	sp, r7
 800d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d774:	4770      	bx	lr
 800d776:	bf00      	nop
 800d778:	40010000 	.word	0x40010000
 800d77c:	40000400 	.word	0x40000400
 800d780:	40000800 	.word	0x40000800
 800d784:	40000c00 	.word	0x40000c00
 800d788:	40010400 	.word	0x40010400
 800d78c:	40001800 	.word	0x40001800
 800d790:	40014000 	.word	0x40014000
 800d794:	00010007 	.word	0x00010007

0800d798 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	68da      	ldr	r2, [r3, #12]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f022 0201 	bic.w	r2, r2, #1
 800d7ae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	6a1a      	ldr	r2, [r3, #32]
 800d7b6:	f241 1311 	movw	r3, #4369	; 0x1111
 800d7ba:	4013      	ands	r3, r2
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d10f      	bne.n	800d7e0 <HAL_TIM_Base_Stop_IT+0x48>
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	6a1a      	ldr	r2, [r3, #32]
 800d7c6:	f240 4344 	movw	r3, #1092	; 0x444
 800d7ca:	4013      	ands	r3, r2
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d107      	bne.n	800d7e0 <HAL_TIM_Base_Stop_IT+0x48>
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f022 0201 	bic.w	r2, r2, #1
 800d7de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d7e8:	2300      	movs	r3, #0
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	370c      	adds	r7, #12
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr

0800d7f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d7f6:	b580      	push	{r7, lr}
 800d7f8:	b082      	sub	sp, #8
 800d7fa:	af00      	add	r7, sp, #0
 800d7fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d101      	bne.n	800d808 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d804:	2301      	movs	r3, #1
 800d806:	e049      	b.n	800d89c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	2b00      	cmp	r3, #0
 800d812:	d106      	bne.n	800d822 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2200      	movs	r2, #0
 800d818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f000 f841 	bl	800d8a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2202      	movs	r2, #2
 800d826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681a      	ldr	r2, [r3, #0]
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	3304      	adds	r3, #4
 800d832:	4619      	mov	r1, r3
 800d834:	4610      	mov	r0, r2
 800d836:	f000 fdd5 	bl	800e3e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2201      	movs	r2, #1
 800d83e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2201      	movs	r2, #1
 800d846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2201      	movs	r2, #1
 800d84e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2201      	movs	r2, #1
 800d856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2201      	movs	r2, #1
 800d85e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2201      	movs	r2, #1
 800d866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2201      	movs	r2, #1
 800d86e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2201      	movs	r2, #1
 800d876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2201      	movs	r2, #1
 800d87e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2201      	movs	r2, #1
 800d886:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2201      	movs	r2, #1
 800d88e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2201      	movs	r2, #1
 800d896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d89a:	2300      	movs	r3, #0
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3708      	adds	r7, #8
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b083      	sub	sp, #12
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d8ac:	bf00      	nop
 800d8ae:	370c      	adds	r7, #12
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr

0800d8b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b084      	sub	sp, #16
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d109      	bne.n	800d8dc <HAL_TIM_PWM_Start+0x24>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d8ce:	b2db      	uxtb	r3, r3
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	bf14      	ite	ne
 800d8d4:	2301      	movne	r3, #1
 800d8d6:	2300      	moveq	r3, #0
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	e03c      	b.n	800d956 <HAL_TIM_PWM_Start+0x9e>
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	2b04      	cmp	r3, #4
 800d8e0:	d109      	bne.n	800d8f6 <HAL_TIM_PWM_Start+0x3e>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d8e8:	b2db      	uxtb	r3, r3
 800d8ea:	2b01      	cmp	r3, #1
 800d8ec:	bf14      	ite	ne
 800d8ee:	2301      	movne	r3, #1
 800d8f0:	2300      	moveq	r3, #0
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	e02f      	b.n	800d956 <HAL_TIM_PWM_Start+0x9e>
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	2b08      	cmp	r3, #8
 800d8fa:	d109      	bne.n	800d910 <HAL_TIM_PWM_Start+0x58>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d902:	b2db      	uxtb	r3, r3
 800d904:	2b01      	cmp	r3, #1
 800d906:	bf14      	ite	ne
 800d908:	2301      	movne	r3, #1
 800d90a:	2300      	moveq	r3, #0
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	e022      	b.n	800d956 <HAL_TIM_PWM_Start+0x9e>
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	2b0c      	cmp	r3, #12
 800d914:	d109      	bne.n	800d92a <HAL_TIM_PWM_Start+0x72>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	2b01      	cmp	r3, #1
 800d920:	bf14      	ite	ne
 800d922:	2301      	movne	r3, #1
 800d924:	2300      	moveq	r3, #0
 800d926:	b2db      	uxtb	r3, r3
 800d928:	e015      	b.n	800d956 <HAL_TIM_PWM_Start+0x9e>
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	2b10      	cmp	r3, #16
 800d92e:	d109      	bne.n	800d944 <HAL_TIM_PWM_Start+0x8c>
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d936:	b2db      	uxtb	r3, r3
 800d938:	2b01      	cmp	r3, #1
 800d93a:	bf14      	ite	ne
 800d93c:	2301      	movne	r3, #1
 800d93e:	2300      	moveq	r3, #0
 800d940:	b2db      	uxtb	r3, r3
 800d942:	e008      	b.n	800d956 <HAL_TIM_PWM_Start+0x9e>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	bf14      	ite	ne
 800d950:	2301      	movne	r3, #1
 800d952:	2300      	moveq	r3, #0
 800d954:	b2db      	uxtb	r3, r3
 800d956:	2b00      	cmp	r3, #0
 800d958:	d001      	beq.n	800d95e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d95a:	2301      	movs	r3, #1
 800d95c:	e0a1      	b.n	800daa2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d104      	bne.n	800d96e <HAL_TIM_PWM_Start+0xb6>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2202      	movs	r2, #2
 800d968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d96c:	e023      	b.n	800d9b6 <HAL_TIM_PWM_Start+0xfe>
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	2b04      	cmp	r3, #4
 800d972:	d104      	bne.n	800d97e <HAL_TIM_PWM_Start+0xc6>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2202      	movs	r2, #2
 800d978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d97c:	e01b      	b.n	800d9b6 <HAL_TIM_PWM_Start+0xfe>
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	2b08      	cmp	r3, #8
 800d982:	d104      	bne.n	800d98e <HAL_TIM_PWM_Start+0xd6>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2202      	movs	r2, #2
 800d988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d98c:	e013      	b.n	800d9b6 <HAL_TIM_PWM_Start+0xfe>
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	2b0c      	cmp	r3, #12
 800d992:	d104      	bne.n	800d99e <HAL_TIM_PWM_Start+0xe6>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2202      	movs	r2, #2
 800d998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d99c:	e00b      	b.n	800d9b6 <HAL_TIM_PWM_Start+0xfe>
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	2b10      	cmp	r3, #16
 800d9a2:	d104      	bne.n	800d9ae <HAL_TIM_PWM_Start+0xf6>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2202      	movs	r2, #2
 800d9a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d9ac:	e003      	b.n	800d9b6 <HAL_TIM_PWM_Start+0xfe>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2202      	movs	r2, #2
 800d9b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	6839      	ldr	r1, [r7, #0]
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f001 f91e 	bl	800ec00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4a38      	ldr	r2, [pc, #224]	; (800daac <HAL_TIM_PWM_Start+0x1f4>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d013      	beq.n	800d9f6 <HAL_TIM_PWM_Start+0x13e>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	4a37      	ldr	r2, [pc, #220]	; (800dab0 <HAL_TIM_PWM_Start+0x1f8>)
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d00e      	beq.n	800d9f6 <HAL_TIM_PWM_Start+0x13e>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	4a35      	ldr	r2, [pc, #212]	; (800dab4 <HAL_TIM_PWM_Start+0x1fc>)
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d009      	beq.n	800d9f6 <HAL_TIM_PWM_Start+0x13e>
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	4a34      	ldr	r2, [pc, #208]	; (800dab8 <HAL_TIM_PWM_Start+0x200>)
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	d004      	beq.n	800d9f6 <HAL_TIM_PWM_Start+0x13e>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4a32      	ldr	r2, [pc, #200]	; (800dabc <HAL_TIM_PWM_Start+0x204>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d101      	bne.n	800d9fa <HAL_TIM_PWM_Start+0x142>
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	e000      	b.n	800d9fc <HAL_TIM_PWM_Start+0x144>
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d007      	beq.n	800da10 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800da0e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a25      	ldr	r2, [pc, #148]	; (800daac <HAL_TIM_PWM_Start+0x1f4>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d022      	beq.n	800da60 <HAL_TIM_PWM_Start+0x1a8>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da22:	d01d      	beq.n	800da60 <HAL_TIM_PWM_Start+0x1a8>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4a25      	ldr	r2, [pc, #148]	; (800dac0 <HAL_TIM_PWM_Start+0x208>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d018      	beq.n	800da60 <HAL_TIM_PWM_Start+0x1a8>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4a24      	ldr	r2, [pc, #144]	; (800dac4 <HAL_TIM_PWM_Start+0x20c>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d013      	beq.n	800da60 <HAL_TIM_PWM_Start+0x1a8>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4a22      	ldr	r2, [pc, #136]	; (800dac8 <HAL_TIM_PWM_Start+0x210>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d00e      	beq.n	800da60 <HAL_TIM_PWM_Start+0x1a8>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4a1a      	ldr	r2, [pc, #104]	; (800dab0 <HAL_TIM_PWM_Start+0x1f8>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d009      	beq.n	800da60 <HAL_TIM_PWM_Start+0x1a8>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4a1e      	ldr	r2, [pc, #120]	; (800dacc <HAL_TIM_PWM_Start+0x214>)
 800da52:	4293      	cmp	r3, r2
 800da54:	d004      	beq.n	800da60 <HAL_TIM_PWM_Start+0x1a8>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4a16      	ldr	r2, [pc, #88]	; (800dab4 <HAL_TIM_PWM_Start+0x1fc>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d115      	bne.n	800da8c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	689a      	ldr	r2, [r3, #8]
 800da66:	4b1a      	ldr	r3, [pc, #104]	; (800dad0 <HAL_TIM_PWM_Start+0x218>)
 800da68:	4013      	ands	r3, r2
 800da6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2b06      	cmp	r3, #6
 800da70:	d015      	beq.n	800da9e <HAL_TIM_PWM_Start+0x1e6>
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da78:	d011      	beq.n	800da9e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	681a      	ldr	r2, [r3, #0]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f042 0201 	orr.w	r2, r2, #1
 800da88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da8a:	e008      	b.n	800da9e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	681a      	ldr	r2, [r3, #0]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f042 0201 	orr.w	r2, r2, #1
 800da9a:	601a      	str	r2, [r3, #0]
 800da9c:	e000      	b.n	800daa0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800daa0:	2300      	movs	r3, #0
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3710      	adds	r7, #16
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
 800daaa:	bf00      	nop
 800daac:	40010000 	.word	0x40010000
 800dab0:	40010400 	.word	0x40010400
 800dab4:	40014000 	.word	0x40014000
 800dab8:	40014400 	.word	0x40014400
 800dabc:	40014800 	.word	0x40014800
 800dac0:	40000400 	.word	0x40000400
 800dac4:	40000800 	.word	0x40000800
 800dac8:	40000c00 	.word	0x40000c00
 800dacc:	40001800 	.word	0x40001800
 800dad0:	00010007 	.word	0x00010007

0800dad4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b086      	sub	sp, #24
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d101      	bne.n	800dae8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800dae4:	2301      	movs	r3, #1
 800dae6:	e08f      	b.n	800dc08 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800daee:	b2db      	uxtb	r3, r3
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d106      	bne.n	800db02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2200      	movs	r2, #0
 800daf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f7f8 fca7 	bl	8006450 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2202      	movs	r2, #2
 800db06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	6899      	ldr	r1, [r3, #8]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681a      	ldr	r2, [r3, #0]
 800db14:	4b3e      	ldr	r3, [pc, #248]	; (800dc10 <HAL_TIM_Encoder_Init+0x13c>)
 800db16:	400b      	ands	r3, r1
 800db18:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	3304      	adds	r3, #4
 800db22:	4619      	mov	r1, r3
 800db24:	4610      	mov	r0, r2
 800db26:	f000 fc5d 	bl	800e3e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	689b      	ldr	r3, [r3, #8]
 800db30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	699b      	ldr	r3, [r3, #24]
 800db38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	6a1b      	ldr	r3, [r3, #32]
 800db40:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	697a      	ldr	r2, [r7, #20]
 800db48:	4313      	orrs	r3, r2
 800db4a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800db4c:	693a      	ldr	r2, [r7, #16]
 800db4e:	4b31      	ldr	r3, [pc, #196]	; (800dc14 <HAL_TIM_Encoder_Init+0x140>)
 800db50:	4013      	ands	r3, r2
 800db52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	689a      	ldr	r2, [r3, #8]
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	699b      	ldr	r3, [r3, #24]
 800db5c:	021b      	lsls	r3, r3, #8
 800db5e:	4313      	orrs	r3, r2
 800db60:	693a      	ldr	r2, [r7, #16]
 800db62:	4313      	orrs	r3, r2
 800db64:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800db66:	693a      	ldr	r2, [r7, #16]
 800db68:	4b2b      	ldr	r3, [pc, #172]	; (800dc18 <HAL_TIM_Encoder_Init+0x144>)
 800db6a:	4013      	ands	r3, r2
 800db6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800db6e:	693a      	ldr	r2, [r7, #16]
 800db70:	4b2a      	ldr	r3, [pc, #168]	; (800dc1c <HAL_TIM_Encoder_Init+0x148>)
 800db72:	4013      	ands	r3, r2
 800db74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	68da      	ldr	r2, [r3, #12]
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	69db      	ldr	r3, [r3, #28]
 800db7e:	021b      	lsls	r3, r3, #8
 800db80:	4313      	orrs	r3, r2
 800db82:	693a      	ldr	r2, [r7, #16]
 800db84:	4313      	orrs	r3, r2
 800db86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	691b      	ldr	r3, [r3, #16]
 800db8c:	011a      	lsls	r2, r3, #4
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	6a1b      	ldr	r3, [r3, #32]
 800db92:	031b      	lsls	r3, r3, #12
 800db94:	4313      	orrs	r3, r2
 800db96:	693a      	ldr	r2, [r7, #16]
 800db98:	4313      	orrs	r3, r2
 800db9a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800dba2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800dbaa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	685a      	ldr	r2, [r3, #4]
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	695b      	ldr	r3, [r3, #20]
 800dbb4:	011b      	lsls	r3, r3, #4
 800dbb6:	4313      	orrs	r3, r2
 800dbb8:	68fa      	ldr	r2, [r7, #12]
 800dbba:	4313      	orrs	r3, r2
 800dbbc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	697a      	ldr	r2, [r7, #20]
 800dbc4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	693a      	ldr	r2, [r7, #16]
 800dbcc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	68fa      	ldr	r2, [r7, #12]
 800dbd4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2201      	movs	r2, #1
 800dbda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2201      	movs	r2, #1
 800dbe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2201      	movs	r2, #1
 800dbea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2201      	movs	r2, #1
 800dc02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dc06:	2300      	movs	r3, #0
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3718      	adds	r7, #24
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	fffebff8 	.word	0xfffebff8
 800dc14:	fffffcfc 	.word	0xfffffcfc
 800dc18:	fffff3f3 	.word	0xfffff3f3
 800dc1c:	ffff0f0f 	.word	0xffff0f0f

0800dc20 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dc30:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800dc38:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc40:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc48:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d110      	bne.n	800dc72 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc50:	7bfb      	ldrb	r3, [r7, #15]
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	d102      	bne.n	800dc5c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800dc56:	7b7b      	ldrb	r3, [r7, #13]
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d001      	beq.n	800dc60 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	e069      	b.n	800dd34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2202      	movs	r2, #2
 800dc64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2202      	movs	r2, #2
 800dc6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc70:	e031      	b.n	800dcd6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	2b04      	cmp	r3, #4
 800dc76:	d110      	bne.n	800dc9a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc78:	7bbb      	ldrb	r3, [r7, #14]
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	d102      	bne.n	800dc84 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800dc7e:	7b3b      	ldrb	r3, [r7, #12]
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d001      	beq.n	800dc88 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800dc84:	2301      	movs	r3, #1
 800dc86:	e055      	b.n	800dd34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2202      	movs	r2, #2
 800dc8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2202      	movs	r2, #2
 800dc94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc98:	e01d      	b.n	800dcd6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc9a:	7bfb      	ldrb	r3, [r7, #15]
 800dc9c:	2b01      	cmp	r3, #1
 800dc9e:	d108      	bne.n	800dcb2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800dca0:	7bbb      	ldrb	r3, [r7, #14]
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	d105      	bne.n	800dcb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dca6:	7b7b      	ldrb	r3, [r7, #13]
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d102      	bne.n	800dcb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800dcac:	7b3b      	ldrb	r3, [r7, #12]
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	d001      	beq.n	800dcb6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	e03e      	b.n	800dd34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2202      	movs	r2, #2
 800dcba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2202      	movs	r2, #2
 800dcc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2202      	movs	r2, #2
 800dcca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2202      	movs	r2, #2
 800dcd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d003      	beq.n	800dce4 <HAL_TIM_Encoder_Start+0xc4>
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	2b04      	cmp	r3, #4
 800dce0:	d008      	beq.n	800dcf4 <HAL_TIM_Encoder_Start+0xd4>
 800dce2:	e00f      	b.n	800dd04 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	2201      	movs	r2, #1
 800dcea:	2100      	movs	r1, #0
 800dcec:	4618      	mov	r0, r3
 800dcee:	f000 ff87 	bl	800ec00 <TIM_CCxChannelCmd>
      break;
 800dcf2:	e016      	b.n	800dd22 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	2104      	movs	r1, #4
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f000 ff7f 	bl	800ec00 <TIM_CCxChannelCmd>
      break;
 800dd02:	e00e      	b.n	800dd22 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	2201      	movs	r2, #1
 800dd0a:	2100      	movs	r1, #0
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f000 ff77 	bl	800ec00 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	2201      	movs	r2, #1
 800dd18:	2104      	movs	r1, #4
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f000 ff70 	bl	800ec00 <TIM_CCxChannelCmd>
      break;
 800dd20:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f042 0201 	orr.w	r2, r2, #1
 800dd30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800dd32:	2300      	movs	r3, #0
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3710      	adds	r7, #16
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	691b      	ldr	r3, [r3, #16]
 800dd4a:	f003 0302 	and.w	r3, r3, #2
 800dd4e:	2b02      	cmp	r3, #2
 800dd50:	d122      	bne.n	800dd98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	68db      	ldr	r3, [r3, #12]
 800dd58:	f003 0302 	and.w	r3, r3, #2
 800dd5c:	2b02      	cmp	r3, #2
 800dd5e:	d11b      	bne.n	800dd98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f06f 0202 	mvn.w	r2, #2
 800dd68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2201      	movs	r2, #1
 800dd6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	699b      	ldr	r3, [r3, #24]
 800dd76:	f003 0303 	and.w	r3, r3, #3
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d003      	beq.n	800dd86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f000 fb12 	bl	800e3a8 <HAL_TIM_IC_CaptureCallback>
 800dd84:	e005      	b.n	800dd92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 fb04 	bl	800e394 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f000 fb15 	bl	800e3bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2200      	movs	r2, #0
 800dd96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	691b      	ldr	r3, [r3, #16]
 800dd9e:	f003 0304 	and.w	r3, r3, #4
 800dda2:	2b04      	cmp	r3, #4
 800dda4:	d122      	bne.n	800ddec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	68db      	ldr	r3, [r3, #12]
 800ddac:	f003 0304 	and.w	r3, r3, #4
 800ddb0:	2b04      	cmp	r3, #4
 800ddb2:	d11b      	bne.n	800ddec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	f06f 0204 	mvn.w	r2, #4
 800ddbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2202      	movs	r2, #2
 800ddc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	699b      	ldr	r3, [r3, #24]
 800ddca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d003      	beq.n	800ddda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f000 fae8 	bl	800e3a8 <HAL_TIM_IC_CaptureCallback>
 800ddd8:	e005      	b.n	800dde6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f000 fada 	bl	800e394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f000 faeb 	bl	800e3bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2200      	movs	r2, #0
 800ddea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	691b      	ldr	r3, [r3, #16]
 800ddf2:	f003 0308 	and.w	r3, r3, #8
 800ddf6:	2b08      	cmp	r3, #8
 800ddf8:	d122      	bne.n	800de40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	68db      	ldr	r3, [r3, #12]
 800de00:	f003 0308 	and.w	r3, r3, #8
 800de04:	2b08      	cmp	r3, #8
 800de06:	d11b      	bne.n	800de40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f06f 0208 	mvn.w	r2, #8
 800de10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2204      	movs	r2, #4
 800de16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	69db      	ldr	r3, [r3, #28]
 800de1e:	f003 0303 	and.w	r3, r3, #3
 800de22:	2b00      	cmp	r3, #0
 800de24:	d003      	beq.n	800de2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f000 fabe 	bl	800e3a8 <HAL_TIM_IC_CaptureCallback>
 800de2c:	e005      	b.n	800de3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f000 fab0 	bl	800e394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f000 fac1 	bl	800e3bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2200      	movs	r2, #0
 800de3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	691b      	ldr	r3, [r3, #16]
 800de46:	f003 0310 	and.w	r3, r3, #16
 800de4a:	2b10      	cmp	r3, #16
 800de4c:	d122      	bne.n	800de94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	68db      	ldr	r3, [r3, #12]
 800de54:	f003 0310 	and.w	r3, r3, #16
 800de58:	2b10      	cmp	r3, #16
 800de5a:	d11b      	bne.n	800de94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f06f 0210 	mvn.w	r2, #16
 800de64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2208      	movs	r2, #8
 800de6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	69db      	ldr	r3, [r3, #28]
 800de72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de76:	2b00      	cmp	r3, #0
 800de78:	d003      	beq.n	800de82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	f000 fa94 	bl	800e3a8 <HAL_TIM_IC_CaptureCallback>
 800de80:	e005      	b.n	800de8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f000 fa86 	bl	800e394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f000 fa97 	bl	800e3bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2200      	movs	r2, #0
 800de92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	691b      	ldr	r3, [r3, #16]
 800de9a:	f003 0301 	and.w	r3, r3, #1
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	d10e      	bne.n	800dec0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	68db      	ldr	r3, [r3, #12]
 800dea8:	f003 0301 	and.w	r3, r3, #1
 800deac:	2b01      	cmp	r3, #1
 800deae:	d107      	bne.n	800dec0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f06f 0201 	mvn.w	r2, #1
 800deb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f7f5 fcb4 	bl	8003828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	691b      	ldr	r3, [r3, #16]
 800dec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800deca:	2b80      	cmp	r3, #128	; 0x80
 800decc:	d10e      	bne.n	800deec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	68db      	ldr	r3, [r3, #12]
 800ded4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ded8:	2b80      	cmp	r3, #128	; 0x80
 800deda:	d107      	bne.n	800deec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f000 ffc6 	bl	800ee78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	691b      	ldr	r3, [r3, #16]
 800def2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800def6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800defa:	d10e      	bne.n	800df1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	68db      	ldr	r3, [r3, #12]
 800df02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df06:	2b80      	cmp	r3, #128	; 0x80
 800df08:	d107      	bne.n	800df1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800df12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f000 ffb9 	bl	800ee8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	691b      	ldr	r3, [r3, #16]
 800df20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df24:	2b40      	cmp	r3, #64	; 0x40
 800df26:	d10e      	bne.n	800df46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	68db      	ldr	r3, [r3, #12]
 800df2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df32:	2b40      	cmp	r3, #64	; 0x40
 800df34:	d107      	bne.n	800df46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800df3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 fa45 	bl	800e3d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	691b      	ldr	r3, [r3, #16]
 800df4c:	f003 0320 	and.w	r3, r3, #32
 800df50:	2b20      	cmp	r3, #32
 800df52:	d10e      	bne.n	800df72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	68db      	ldr	r3, [r3, #12]
 800df5a:	f003 0320 	and.w	r3, r3, #32
 800df5e:	2b20      	cmp	r3, #32
 800df60:	d107      	bne.n	800df72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f06f 0220 	mvn.w	r2, #32
 800df6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f000 ff79 	bl	800ee64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800df72:	bf00      	nop
 800df74:	3708      	adds	r7, #8
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
	...

0800df7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b086      	sub	sp, #24
 800df80:	af00      	add	r7, sp, #0
 800df82:	60f8      	str	r0, [r7, #12]
 800df84:	60b9      	str	r1, [r7, #8]
 800df86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800df88:	2300      	movs	r3, #0
 800df8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df92:	2b01      	cmp	r3, #1
 800df94:	d101      	bne.n	800df9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800df96:	2302      	movs	r3, #2
 800df98:	e0ff      	b.n	800e19a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2201      	movs	r2, #1
 800df9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2b14      	cmp	r3, #20
 800dfa6:	f200 80f0 	bhi.w	800e18a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800dfaa:	a201      	add	r2, pc, #4	; (adr r2, 800dfb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800dfac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfb0:	0800e005 	.word	0x0800e005
 800dfb4:	0800e18b 	.word	0x0800e18b
 800dfb8:	0800e18b 	.word	0x0800e18b
 800dfbc:	0800e18b 	.word	0x0800e18b
 800dfc0:	0800e045 	.word	0x0800e045
 800dfc4:	0800e18b 	.word	0x0800e18b
 800dfc8:	0800e18b 	.word	0x0800e18b
 800dfcc:	0800e18b 	.word	0x0800e18b
 800dfd0:	0800e087 	.word	0x0800e087
 800dfd4:	0800e18b 	.word	0x0800e18b
 800dfd8:	0800e18b 	.word	0x0800e18b
 800dfdc:	0800e18b 	.word	0x0800e18b
 800dfe0:	0800e0c7 	.word	0x0800e0c7
 800dfe4:	0800e18b 	.word	0x0800e18b
 800dfe8:	0800e18b 	.word	0x0800e18b
 800dfec:	0800e18b 	.word	0x0800e18b
 800dff0:	0800e109 	.word	0x0800e109
 800dff4:	0800e18b 	.word	0x0800e18b
 800dff8:	0800e18b 	.word	0x0800e18b
 800dffc:	0800e18b 	.word	0x0800e18b
 800e000:	0800e149 	.word	0x0800e149
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	68b9      	ldr	r1, [r7, #8]
 800e00a:	4618      	mov	r0, r3
 800e00c:	f000 fa84 	bl	800e518 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	699a      	ldr	r2, [r3, #24]
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f042 0208 	orr.w	r2, r2, #8
 800e01e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	699a      	ldr	r2, [r3, #24]
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f022 0204 	bic.w	r2, r2, #4
 800e02e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	6999      	ldr	r1, [r3, #24]
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	691a      	ldr	r2, [r3, #16]
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	430a      	orrs	r2, r1
 800e040:	619a      	str	r2, [r3, #24]
      break;
 800e042:	e0a5      	b.n	800e190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	68b9      	ldr	r1, [r7, #8]
 800e04a:	4618      	mov	r0, r3
 800e04c:	f000 faf4 	bl	800e638 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	699a      	ldr	r2, [r3, #24]
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e05e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	699a      	ldr	r2, [r3, #24]
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e06e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	6999      	ldr	r1, [r3, #24]
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	691b      	ldr	r3, [r3, #16]
 800e07a:	021a      	lsls	r2, r3, #8
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	430a      	orrs	r2, r1
 800e082:	619a      	str	r2, [r3, #24]
      break;
 800e084:	e084      	b.n	800e190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	68b9      	ldr	r1, [r7, #8]
 800e08c:	4618      	mov	r0, r3
 800e08e:	f000 fb5d 	bl	800e74c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	69da      	ldr	r2, [r3, #28]
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f042 0208 	orr.w	r2, r2, #8
 800e0a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	69da      	ldr	r2, [r3, #28]
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f022 0204 	bic.w	r2, r2, #4
 800e0b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	69d9      	ldr	r1, [r3, #28]
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	691a      	ldr	r2, [r3, #16]
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	430a      	orrs	r2, r1
 800e0c2:	61da      	str	r2, [r3, #28]
      break;
 800e0c4:	e064      	b.n	800e190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	68b9      	ldr	r1, [r7, #8]
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f000 fbc5 	bl	800e85c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	69da      	ldr	r2, [r3, #28]
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e0e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	69da      	ldr	r2, [r3, #28]
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e0f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	69d9      	ldr	r1, [r3, #28]
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	691b      	ldr	r3, [r3, #16]
 800e0fc:	021a      	lsls	r2, r3, #8
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	430a      	orrs	r2, r1
 800e104:	61da      	str	r2, [r3, #28]
      break;
 800e106:	e043      	b.n	800e190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	68b9      	ldr	r1, [r7, #8]
 800e10e:	4618      	mov	r0, r3
 800e110:	f000 fc0e 	bl	800e930 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f042 0208 	orr.w	r2, r2, #8
 800e122:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f022 0204 	bic.w	r2, r2, #4
 800e132:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	691a      	ldr	r2, [r3, #16]
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	430a      	orrs	r2, r1
 800e144:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e146:	e023      	b.n	800e190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	68b9      	ldr	r1, [r7, #8]
 800e14e:	4618      	mov	r0, r3
 800e150:	f000 fc52 	bl	800e9f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e162:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e172:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	691b      	ldr	r3, [r3, #16]
 800e17e:	021a      	lsls	r2, r3, #8
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	430a      	orrs	r2, r1
 800e186:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e188:	e002      	b.n	800e190 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e18a:	2301      	movs	r3, #1
 800e18c:	75fb      	strb	r3, [r7, #23]
      break;
 800e18e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2200      	movs	r2, #0
 800e194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e198:	7dfb      	ldrb	r3, [r7, #23]
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3718      	adds	r7, #24
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}
 800e1a2:	bf00      	nop

0800e1a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d101      	bne.n	800e1c0 <HAL_TIM_ConfigClockSource+0x1c>
 800e1bc:	2302      	movs	r3, #2
 800e1be:	e0dc      	b.n	800e37a <HAL_TIM_ConfigClockSource+0x1d6>
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2202      	movs	r2, #2
 800e1cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	689b      	ldr	r3, [r3, #8]
 800e1d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e1d8:	68ba      	ldr	r2, [r7, #8]
 800e1da:	4b6a      	ldr	r3, [pc, #424]	; (800e384 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e1dc:	4013      	ands	r3, r2
 800e1de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e1e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	68ba      	ldr	r2, [r7, #8]
 800e1ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4a64      	ldr	r2, [pc, #400]	; (800e388 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	f000 80a9 	beq.w	800e34e <HAL_TIM_ConfigClockSource+0x1aa>
 800e1fc:	4a62      	ldr	r2, [pc, #392]	; (800e388 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e1fe:	4293      	cmp	r3, r2
 800e200:	f200 80ae 	bhi.w	800e360 <HAL_TIM_ConfigClockSource+0x1bc>
 800e204:	4a61      	ldr	r2, [pc, #388]	; (800e38c <HAL_TIM_ConfigClockSource+0x1e8>)
 800e206:	4293      	cmp	r3, r2
 800e208:	f000 80a1 	beq.w	800e34e <HAL_TIM_ConfigClockSource+0x1aa>
 800e20c:	4a5f      	ldr	r2, [pc, #380]	; (800e38c <HAL_TIM_ConfigClockSource+0x1e8>)
 800e20e:	4293      	cmp	r3, r2
 800e210:	f200 80a6 	bhi.w	800e360 <HAL_TIM_ConfigClockSource+0x1bc>
 800e214:	4a5e      	ldr	r2, [pc, #376]	; (800e390 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e216:	4293      	cmp	r3, r2
 800e218:	f000 8099 	beq.w	800e34e <HAL_TIM_ConfigClockSource+0x1aa>
 800e21c:	4a5c      	ldr	r2, [pc, #368]	; (800e390 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	f200 809e 	bhi.w	800e360 <HAL_TIM_ConfigClockSource+0x1bc>
 800e224:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e228:	f000 8091 	beq.w	800e34e <HAL_TIM_ConfigClockSource+0x1aa>
 800e22c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e230:	f200 8096 	bhi.w	800e360 <HAL_TIM_ConfigClockSource+0x1bc>
 800e234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e238:	f000 8089 	beq.w	800e34e <HAL_TIM_ConfigClockSource+0x1aa>
 800e23c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e240:	f200 808e 	bhi.w	800e360 <HAL_TIM_ConfigClockSource+0x1bc>
 800e244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e248:	d03e      	beq.n	800e2c8 <HAL_TIM_ConfigClockSource+0x124>
 800e24a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e24e:	f200 8087 	bhi.w	800e360 <HAL_TIM_ConfigClockSource+0x1bc>
 800e252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e256:	f000 8086 	beq.w	800e366 <HAL_TIM_ConfigClockSource+0x1c2>
 800e25a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e25e:	d87f      	bhi.n	800e360 <HAL_TIM_ConfigClockSource+0x1bc>
 800e260:	2b70      	cmp	r3, #112	; 0x70
 800e262:	d01a      	beq.n	800e29a <HAL_TIM_ConfigClockSource+0xf6>
 800e264:	2b70      	cmp	r3, #112	; 0x70
 800e266:	d87b      	bhi.n	800e360 <HAL_TIM_ConfigClockSource+0x1bc>
 800e268:	2b60      	cmp	r3, #96	; 0x60
 800e26a:	d050      	beq.n	800e30e <HAL_TIM_ConfigClockSource+0x16a>
 800e26c:	2b60      	cmp	r3, #96	; 0x60
 800e26e:	d877      	bhi.n	800e360 <HAL_TIM_ConfigClockSource+0x1bc>
 800e270:	2b50      	cmp	r3, #80	; 0x50
 800e272:	d03c      	beq.n	800e2ee <HAL_TIM_ConfigClockSource+0x14a>
 800e274:	2b50      	cmp	r3, #80	; 0x50
 800e276:	d873      	bhi.n	800e360 <HAL_TIM_ConfigClockSource+0x1bc>
 800e278:	2b40      	cmp	r3, #64	; 0x40
 800e27a:	d058      	beq.n	800e32e <HAL_TIM_ConfigClockSource+0x18a>
 800e27c:	2b40      	cmp	r3, #64	; 0x40
 800e27e:	d86f      	bhi.n	800e360 <HAL_TIM_ConfigClockSource+0x1bc>
 800e280:	2b30      	cmp	r3, #48	; 0x30
 800e282:	d064      	beq.n	800e34e <HAL_TIM_ConfigClockSource+0x1aa>
 800e284:	2b30      	cmp	r3, #48	; 0x30
 800e286:	d86b      	bhi.n	800e360 <HAL_TIM_ConfigClockSource+0x1bc>
 800e288:	2b20      	cmp	r3, #32
 800e28a:	d060      	beq.n	800e34e <HAL_TIM_ConfigClockSource+0x1aa>
 800e28c:	2b20      	cmp	r3, #32
 800e28e:	d867      	bhi.n	800e360 <HAL_TIM_ConfigClockSource+0x1bc>
 800e290:	2b00      	cmp	r3, #0
 800e292:	d05c      	beq.n	800e34e <HAL_TIM_ConfigClockSource+0x1aa>
 800e294:	2b10      	cmp	r3, #16
 800e296:	d05a      	beq.n	800e34e <HAL_TIM_ConfigClockSource+0x1aa>
 800e298:	e062      	b.n	800e360 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6818      	ldr	r0, [r3, #0]
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	6899      	ldr	r1, [r3, #8]
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	685a      	ldr	r2, [r3, #4]
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	68db      	ldr	r3, [r3, #12]
 800e2aa:	f000 fc89 	bl	800ebc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	689b      	ldr	r3, [r3, #8]
 800e2b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e2bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	68ba      	ldr	r2, [r7, #8]
 800e2c4:	609a      	str	r2, [r3, #8]
      break;
 800e2c6:	e04f      	b.n	800e368 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6818      	ldr	r0, [r3, #0]
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	6899      	ldr	r1, [r3, #8]
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	685a      	ldr	r2, [r3, #4]
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	68db      	ldr	r3, [r3, #12]
 800e2d8:	f000 fc72 	bl	800ebc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	689a      	ldr	r2, [r3, #8]
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e2ea:	609a      	str	r2, [r3, #8]
      break;
 800e2ec:	e03c      	b.n	800e368 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6818      	ldr	r0, [r3, #0]
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	6859      	ldr	r1, [r3, #4]
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	68db      	ldr	r3, [r3, #12]
 800e2fa:	461a      	mov	r2, r3
 800e2fc:	f000 fbe2 	bl	800eac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2150      	movs	r1, #80	; 0x50
 800e306:	4618      	mov	r0, r3
 800e308:	f000 fc3c 	bl	800eb84 <TIM_ITRx_SetConfig>
      break;
 800e30c:	e02c      	b.n	800e368 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6818      	ldr	r0, [r3, #0]
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	6859      	ldr	r1, [r3, #4]
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	68db      	ldr	r3, [r3, #12]
 800e31a:	461a      	mov	r2, r3
 800e31c:	f000 fc01 	bl	800eb22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	2160      	movs	r1, #96	; 0x60
 800e326:	4618      	mov	r0, r3
 800e328:	f000 fc2c 	bl	800eb84 <TIM_ITRx_SetConfig>
      break;
 800e32c:	e01c      	b.n	800e368 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6818      	ldr	r0, [r3, #0]
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	6859      	ldr	r1, [r3, #4]
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	68db      	ldr	r3, [r3, #12]
 800e33a:	461a      	mov	r2, r3
 800e33c:	f000 fbc2 	bl	800eac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	2140      	movs	r1, #64	; 0x40
 800e346:	4618      	mov	r0, r3
 800e348:	f000 fc1c 	bl	800eb84 <TIM_ITRx_SetConfig>
      break;
 800e34c:	e00c      	b.n	800e368 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	4619      	mov	r1, r3
 800e358:	4610      	mov	r0, r2
 800e35a:	f000 fc13 	bl	800eb84 <TIM_ITRx_SetConfig>
      break;
 800e35e:	e003      	b.n	800e368 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e360:	2301      	movs	r3, #1
 800e362:	73fb      	strb	r3, [r7, #15]
      break;
 800e364:	e000      	b.n	800e368 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2201      	movs	r2, #1
 800e36c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2200      	movs	r2, #0
 800e374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e378:	7bfb      	ldrb	r3, [r7, #15]
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3710      	adds	r7, #16
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}
 800e382:	bf00      	nop
 800e384:	ffceff88 	.word	0xffceff88
 800e388:	00100040 	.word	0x00100040
 800e38c:	00100030 	.word	0x00100030
 800e390:	00100020 	.word	0x00100020

0800e394 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e39c:	bf00      	nop
 800e39e:	370c      	adds	r7, #12
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr

0800e3a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b083      	sub	sp, #12
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e3b0:	bf00      	nop
 800e3b2:	370c      	adds	r7, #12
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr

0800e3bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b083      	sub	sp, #12
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e3c4:	bf00      	nop
 800e3c6:	370c      	adds	r7, #12
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr

0800e3d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b083      	sub	sp, #12
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e3d8:	bf00      	nop
 800e3da:	370c      	adds	r7, #12
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr

0800e3e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b085      	sub	sp, #20
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	4a40      	ldr	r2, [pc, #256]	; (800e4f8 <TIM_Base_SetConfig+0x114>)
 800e3f8:	4293      	cmp	r3, r2
 800e3fa:	d013      	beq.n	800e424 <TIM_Base_SetConfig+0x40>
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e402:	d00f      	beq.n	800e424 <TIM_Base_SetConfig+0x40>
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	4a3d      	ldr	r2, [pc, #244]	; (800e4fc <TIM_Base_SetConfig+0x118>)
 800e408:	4293      	cmp	r3, r2
 800e40a:	d00b      	beq.n	800e424 <TIM_Base_SetConfig+0x40>
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	4a3c      	ldr	r2, [pc, #240]	; (800e500 <TIM_Base_SetConfig+0x11c>)
 800e410:	4293      	cmp	r3, r2
 800e412:	d007      	beq.n	800e424 <TIM_Base_SetConfig+0x40>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	4a3b      	ldr	r2, [pc, #236]	; (800e504 <TIM_Base_SetConfig+0x120>)
 800e418:	4293      	cmp	r3, r2
 800e41a:	d003      	beq.n	800e424 <TIM_Base_SetConfig+0x40>
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	4a3a      	ldr	r2, [pc, #232]	; (800e508 <TIM_Base_SetConfig+0x124>)
 800e420:	4293      	cmp	r3, r2
 800e422:	d108      	bne.n	800e436 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e42a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	68fa      	ldr	r2, [r7, #12]
 800e432:	4313      	orrs	r3, r2
 800e434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	4a2f      	ldr	r2, [pc, #188]	; (800e4f8 <TIM_Base_SetConfig+0x114>)
 800e43a:	4293      	cmp	r3, r2
 800e43c:	d01f      	beq.n	800e47e <TIM_Base_SetConfig+0x9a>
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e444:	d01b      	beq.n	800e47e <TIM_Base_SetConfig+0x9a>
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	4a2c      	ldr	r2, [pc, #176]	; (800e4fc <TIM_Base_SetConfig+0x118>)
 800e44a:	4293      	cmp	r3, r2
 800e44c:	d017      	beq.n	800e47e <TIM_Base_SetConfig+0x9a>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	4a2b      	ldr	r2, [pc, #172]	; (800e500 <TIM_Base_SetConfig+0x11c>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d013      	beq.n	800e47e <TIM_Base_SetConfig+0x9a>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	4a2a      	ldr	r2, [pc, #168]	; (800e504 <TIM_Base_SetConfig+0x120>)
 800e45a:	4293      	cmp	r3, r2
 800e45c:	d00f      	beq.n	800e47e <TIM_Base_SetConfig+0x9a>
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	4a29      	ldr	r2, [pc, #164]	; (800e508 <TIM_Base_SetConfig+0x124>)
 800e462:	4293      	cmp	r3, r2
 800e464:	d00b      	beq.n	800e47e <TIM_Base_SetConfig+0x9a>
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	4a28      	ldr	r2, [pc, #160]	; (800e50c <TIM_Base_SetConfig+0x128>)
 800e46a:	4293      	cmp	r3, r2
 800e46c:	d007      	beq.n	800e47e <TIM_Base_SetConfig+0x9a>
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	4a27      	ldr	r2, [pc, #156]	; (800e510 <TIM_Base_SetConfig+0x12c>)
 800e472:	4293      	cmp	r3, r2
 800e474:	d003      	beq.n	800e47e <TIM_Base_SetConfig+0x9a>
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	4a26      	ldr	r2, [pc, #152]	; (800e514 <TIM_Base_SetConfig+0x130>)
 800e47a:	4293      	cmp	r3, r2
 800e47c:	d108      	bne.n	800e490 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	68db      	ldr	r3, [r3, #12]
 800e48a:	68fa      	ldr	r2, [r7, #12]
 800e48c:	4313      	orrs	r3, r2
 800e48e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	695b      	ldr	r3, [r3, #20]
 800e49a:	4313      	orrs	r3, r2
 800e49c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	68fa      	ldr	r2, [r7, #12]
 800e4a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	689a      	ldr	r2, [r3, #8]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	4a10      	ldr	r2, [pc, #64]	; (800e4f8 <TIM_Base_SetConfig+0x114>)
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	d00f      	beq.n	800e4dc <TIM_Base_SetConfig+0xf8>
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	4a12      	ldr	r2, [pc, #72]	; (800e508 <TIM_Base_SetConfig+0x124>)
 800e4c0:	4293      	cmp	r3, r2
 800e4c2:	d00b      	beq.n	800e4dc <TIM_Base_SetConfig+0xf8>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	4a11      	ldr	r2, [pc, #68]	; (800e50c <TIM_Base_SetConfig+0x128>)
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	d007      	beq.n	800e4dc <TIM_Base_SetConfig+0xf8>
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	4a10      	ldr	r2, [pc, #64]	; (800e510 <TIM_Base_SetConfig+0x12c>)
 800e4d0:	4293      	cmp	r3, r2
 800e4d2:	d003      	beq.n	800e4dc <TIM_Base_SetConfig+0xf8>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	4a0f      	ldr	r2, [pc, #60]	; (800e514 <TIM_Base_SetConfig+0x130>)
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	d103      	bne.n	800e4e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	691a      	ldr	r2, [r3, #16]
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	615a      	str	r2, [r3, #20]
}
 800e4ea:	bf00      	nop
 800e4ec:	3714      	adds	r7, #20
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f4:	4770      	bx	lr
 800e4f6:	bf00      	nop
 800e4f8:	40010000 	.word	0x40010000
 800e4fc:	40000400 	.word	0x40000400
 800e500:	40000800 	.word	0x40000800
 800e504:	40000c00 	.word	0x40000c00
 800e508:	40010400 	.word	0x40010400
 800e50c:	40014000 	.word	0x40014000
 800e510:	40014400 	.word	0x40014400
 800e514:	40014800 	.word	0x40014800

0800e518 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e518:	b480      	push	{r7}
 800e51a:	b087      	sub	sp, #28
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6a1b      	ldr	r3, [r3, #32]
 800e526:	f023 0201 	bic.w	r2, r3, #1
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6a1b      	ldr	r3, [r3, #32]
 800e532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	685b      	ldr	r3, [r3, #4]
 800e538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	699b      	ldr	r3, [r3, #24]
 800e53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e540:	68fa      	ldr	r2, [r7, #12]
 800e542:	4b37      	ldr	r3, [pc, #220]	; (800e620 <TIM_OC1_SetConfig+0x108>)
 800e544:	4013      	ands	r3, r2
 800e546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f023 0303 	bic.w	r3, r3, #3
 800e54e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	68fa      	ldr	r2, [r7, #12]
 800e556:	4313      	orrs	r3, r2
 800e558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	f023 0302 	bic.w	r3, r3, #2
 800e560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	689b      	ldr	r3, [r3, #8]
 800e566:	697a      	ldr	r2, [r7, #20]
 800e568:	4313      	orrs	r3, r2
 800e56a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	4a2d      	ldr	r2, [pc, #180]	; (800e624 <TIM_OC1_SetConfig+0x10c>)
 800e570:	4293      	cmp	r3, r2
 800e572:	d00f      	beq.n	800e594 <TIM_OC1_SetConfig+0x7c>
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	4a2c      	ldr	r2, [pc, #176]	; (800e628 <TIM_OC1_SetConfig+0x110>)
 800e578:	4293      	cmp	r3, r2
 800e57a:	d00b      	beq.n	800e594 <TIM_OC1_SetConfig+0x7c>
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	4a2b      	ldr	r2, [pc, #172]	; (800e62c <TIM_OC1_SetConfig+0x114>)
 800e580:	4293      	cmp	r3, r2
 800e582:	d007      	beq.n	800e594 <TIM_OC1_SetConfig+0x7c>
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	4a2a      	ldr	r2, [pc, #168]	; (800e630 <TIM_OC1_SetConfig+0x118>)
 800e588:	4293      	cmp	r3, r2
 800e58a:	d003      	beq.n	800e594 <TIM_OC1_SetConfig+0x7c>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	4a29      	ldr	r2, [pc, #164]	; (800e634 <TIM_OC1_SetConfig+0x11c>)
 800e590:	4293      	cmp	r3, r2
 800e592:	d10c      	bne.n	800e5ae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	f023 0308 	bic.w	r3, r3, #8
 800e59a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	68db      	ldr	r3, [r3, #12]
 800e5a0:	697a      	ldr	r2, [r7, #20]
 800e5a2:	4313      	orrs	r3, r2
 800e5a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	f023 0304 	bic.w	r3, r3, #4
 800e5ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	4a1c      	ldr	r2, [pc, #112]	; (800e624 <TIM_OC1_SetConfig+0x10c>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d00f      	beq.n	800e5d6 <TIM_OC1_SetConfig+0xbe>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	4a1b      	ldr	r2, [pc, #108]	; (800e628 <TIM_OC1_SetConfig+0x110>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d00b      	beq.n	800e5d6 <TIM_OC1_SetConfig+0xbe>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	4a1a      	ldr	r2, [pc, #104]	; (800e62c <TIM_OC1_SetConfig+0x114>)
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d007      	beq.n	800e5d6 <TIM_OC1_SetConfig+0xbe>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	4a19      	ldr	r2, [pc, #100]	; (800e630 <TIM_OC1_SetConfig+0x118>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d003      	beq.n	800e5d6 <TIM_OC1_SetConfig+0xbe>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	4a18      	ldr	r2, [pc, #96]	; (800e634 <TIM_OC1_SetConfig+0x11c>)
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d111      	bne.n	800e5fa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e5dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e5e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	695b      	ldr	r3, [r3, #20]
 800e5ea:	693a      	ldr	r2, [r7, #16]
 800e5ec:	4313      	orrs	r3, r2
 800e5ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	699b      	ldr	r3, [r3, #24]
 800e5f4:	693a      	ldr	r2, [r7, #16]
 800e5f6:	4313      	orrs	r3, r2
 800e5f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	693a      	ldr	r2, [r7, #16]
 800e5fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	68fa      	ldr	r2, [r7, #12]
 800e604:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	685a      	ldr	r2, [r3, #4]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	697a      	ldr	r2, [r7, #20]
 800e612:	621a      	str	r2, [r3, #32]
}
 800e614:	bf00      	nop
 800e616:	371c      	adds	r7, #28
 800e618:	46bd      	mov	sp, r7
 800e61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61e:	4770      	bx	lr
 800e620:	fffeff8f 	.word	0xfffeff8f
 800e624:	40010000 	.word	0x40010000
 800e628:	40010400 	.word	0x40010400
 800e62c:	40014000 	.word	0x40014000
 800e630:	40014400 	.word	0x40014400
 800e634:	40014800 	.word	0x40014800

0800e638 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e638:	b480      	push	{r7}
 800e63a:	b087      	sub	sp, #28
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6a1b      	ldr	r3, [r3, #32]
 800e646:	f023 0210 	bic.w	r2, r3, #16
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6a1b      	ldr	r3, [r3, #32]
 800e652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	699b      	ldr	r3, [r3, #24]
 800e65e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e660:	68fa      	ldr	r2, [r7, #12]
 800e662:	4b34      	ldr	r3, [pc, #208]	; (800e734 <TIM_OC2_SetConfig+0xfc>)
 800e664:	4013      	ands	r3, r2
 800e666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e66e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	021b      	lsls	r3, r3, #8
 800e676:	68fa      	ldr	r2, [r7, #12]
 800e678:	4313      	orrs	r3, r2
 800e67a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	f023 0320 	bic.w	r3, r3, #32
 800e682:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	689b      	ldr	r3, [r3, #8]
 800e688:	011b      	lsls	r3, r3, #4
 800e68a:	697a      	ldr	r2, [r7, #20]
 800e68c:	4313      	orrs	r3, r2
 800e68e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	4a29      	ldr	r2, [pc, #164]	; (800e738 <TIM_OC2_SetConfig+0x100>)
 800e694:	4293      	cmp	r3, r2
 800e696:	d003      	beq.n	800e6a0 <TIM_OC2_SetConfig+0x68>
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	4a28      	ldr	r2, [pc, #160]	; (800e73c <TIM_OC2_SetConfig+0x104>)
 800e69c:	4293      	cmp	r3, r2
 800e69e:	d10d      	bne.n	800e6bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e6a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	68db      	ldr	r3, [r3, #12]
 800e6ac:	011b      	lsls	r3, r3, #4
 800e6ae:	697a      	ldr	r2, [r7, #20]
 800e6b0:	4313      	orrs	r3, r2
 800e6b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	4a1e      	ldr	r2, [pc, #120]	; (800e738 <TIM_OC2_SetConfig+0x100>)
 800e6c0:	4293      	cmp	r3, r2
 800e6c2:	d00f      	beq.n	800e6e4 <TIM_OC2_SetConfig+0xac>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	4a1d      	ldr	r2, [pc, #116]	; (800e73c <TIM_OC2_SetConfig+0x104>)
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d00b      	beq.n	800e6e4 <TIM_OC2_SetConfig+0xac>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	4a1c      	ldr	r2, [pc, #112]	; (800e740 <TIM_OC2_SetConfig+0x108>)
 800e6d0:	4293      	cmp	r3, r2
 800e6d2:	d007      	beq.n	800e6e4 <TIM_OC2_SetConfig+0xac>
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	4a1b      	ldr	r2, [pc, #108]	; (800e744 <TIM_OC2_SetConfig+0x10c>)
 800e6d8:	4293      	cmp	r3, r2
 800e6da:	d003      	beq.n	800e6e4 <TIM_OC2_SetConfig+0xac>
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	4a1a      	ldr	r2, [pc, #104]	; (800e748 <TIM_OC2_SetConfig+0x110>)
 800e6e0:	4293      	cmp	r3, r2
 800e6e2:	d113      	bne.n	800e70c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e6ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e6f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	695b      	ldr	r3, [r3, #20]
 800e6f8:	009b      	lsls	r3, r3, #2
 800e6fa:	693a      	ldr	r2, [r7, #16]
 800e6fc:	4313      	orrs	r3, r2
 800e6fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	699b      	ldr	r3, [r3, #24]
 800e704:	009b      	lsls	r3, r3, #2
 800e706:	693a      	ldr	r2, [r7, #16]
 800e708:	4313      	orrs	r3, r2
 800e70a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	693a      	ldr	r2, [r7, #16]
 800e710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	68fa      	ldr	r2, [r7, #12]
 800e716:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	685a      	ldr	r2, [r3, #4]
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	697a      	ldr	r2, [r7, #20]
 800e724:	621a      	str	r2, [r3, #32]
}
 800e726:	bf00      	nop
 800e728:	371c      	adds	r7, #28
 800e72a:	46bd      	mov	sp, r7
 800e72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e730:	4770      	bx	lr
 800e732:	bf00      	nop
 800e734:	feff8fff 	.word	0xfeff8fff
 800e738:	40010000 	.word	0x40010000
 800e73c:	40010400 	.word	0x40010400
 800e740:	40014000 	.word	0x40014000
 800e744:	40014400 	.word	0x40014400
 800e748:	40014800 	.word	0x40014800

0800e74c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e74c:	b480      	push	{r7}
 800e74e:	b087      	sub	sp, #28
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6a1b      	ldr	r3, [r3, #32]
 800e75a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6a1b      	ldr	r3, [r3, #32]
 800e766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	685b      	ldr	r3, [r3, #4]
 800e76c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	69db      	ldr	r3, [r3, #28]
 800e772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e774:	68fa      	ldr	r2, [r7, #12]
 800e776:	4b33      	ldr	r3, [pc, #204]	; (800e844 <TIM_OC3_SetConfig+0xf8>)
 800e778:	4013      	ands	r3, r2
 800e77a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	f023 0303 	bic.w	r3, r3, #3
 800e782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	68fa      	ldr	r2, [r7, #12]
 800e78a:	4313      	orrs	r3, r2
 800e78c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	689b      	ldr	r3, [r3, #8]
 800e79a:	021b      	lsls	r3, r3, #8
 800e79c:	697a      	ldr	r2, [r7, #20]
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	4a28      	ldr	r2, [pc, #160]	; (800e848 <TIM_OC3_SetConfig+0xfc>)
 800e7a6:	4293      	cmp	r3, r2
 800e7a8:	d003      	beq.n	800e7b2 <TIM_OC3_SetConfig+0x66>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	4a27      	ldr	r2, [pc, #156]	; (800e84c <TIM_OC3_SetConfig+0x100>)
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d10d      	bne.n	800e7ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e7b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	68db      	ldr	r3, [r3, #12]
 800e7be:	021b      	lsls	r3, r3, #8
 800e7c0:	697a      	ldr	r2, [r7, #20]
 800e7c2:	4313      	orrs	r3, r2
 800e7c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e7cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	4a1d      	ldr	r2, [pc, #116]	; (800e848 <TIM_OC3_SetConfig+0xfc>)
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	d00f      	beq.n	800e7f6 <TIM_OC3_SetConfig+0xaa>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	4a1c      	ldr	r2, [pc, #112]	; (800e84c <TIM_OC3_SetConfig+0x100>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d00b      	beq.n	800e7f6 <TIM_OC3_SetConfig+0xaa>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	4a1b      	ldr	r2, [pc, #108]	; (800e850 <TIM_OC3_SetConfig+0x104>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d007      	beq.n	800e7f6 <TIM_OC3_SetConfig+0xaa>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	4a1a      	ldr	r2, [pc, #104]	; (800e854 <TIM_OC3_SetConfig+0x108>)
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	d003      	beq.n	800e7f6 <TIM_OC3_SetConfig+0xaa>
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	4a19      	ldr	r2, [pc, #100]	; (800e858 <TIM_OC3_SetConfig+0x10c>)
 800e7f2:	4293      	cmp	r3, r2
 800e7f4:	d113      	bne.n	800e81e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e7fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e7fe:	693b      	ldr	r3, [r7, #16]
 800e800:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	695b      	ldr	r3, [r3, #20]
 800e80a:	011b      	lsls	r3, r3, #4
 800e80c:	693a      	ldr	r2, [r7, #16]
 800e80e:	4313      	orrs	r3, r2
 800e810:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	699b      	ldr	r3, [r3, #24]
 800e816:	011b      	lsls	r3, r3, #4
 800e818:	693a      	ldr	r2, [r7, #16]
 800e81a:	4313      	orrs	r3, r2
 800e81c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	693a      	ldr	r2, [r7, #16]
 800e822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	68fa      	ldr	r2, [r7, #12]
 800e828:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	685a      	ldr	r2, [r3, #4]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	697a      	ldr	r2, [r7, #20]
 800e836:	621a      	str	r2, [r3, #32]
}
 800e838:	bf00      	nop
 800e83a:	371c      	adds	r7, #28
 800e83c:	46bd      	mov	sp, r7
 800e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e842:	4770      	bx	lr
 800e844:	fffeff8f 	.word	0xfffeff8f
 800e848:	40010000 	.word	0x40010000
 800e84c:	40010400 	.word	0x40010400
 800e850:	40014000 	.word	0x40014000
 800e854:	40014400 	.word	0x40014400
 800e858:	40014800 	.word	0x40014800

0800e85c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b087      	sub	sp, #28
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6a1b      	ldr	r3, [r3, #32]
 800e86a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6a1b      	ldr	r3, [r3, #32]
 800e876:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	69db      	ldr	r3, [r3, #28]
 800e882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e884:	68fa      	ldr	r2, [r7, #12]
 800e886:	4b24      	ldr	r3, [pc, #144]	; (800e918 <TIM_OC4_SetConfig+0xbc>)
 800e888:	4013      	ands	r3, r2
 800e88a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	021b      	lsls	r3, r3, #8
 800e89a:	68fa      	ldr	r2, [r7, #12]
 800e89c:	4313      	orrs	r3, r2
 800e89e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e8a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	689b      	ldr	r3, [r3, #8]
 800e8ac:	031b      	lsls	r3, r3, #12
 800e8ae:	693a      	ldr	r2, [r7, #16]
 800e8b0:	4313      	orrs	r3, r2
 800e8b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	4a19      	ldr	r2, [pc, #100]	; (800e91c <TIM_OC4_SetConfig+0xc0>)
 800e8b8:	4293      	cmp	r3, r2
 800e8ba:	d00f      	beq.n	800e8dc <TIM_OC4_SetConfig+0x80>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	4a18      	ldr	r2, [pc, #96]	; (800e920 <TIM_OC4_SetConfig+0xc4>)
 800e8c0:	4293      	cmp	r3, r2
 800e8c2:	d00b      	beq.n	800e8dc <TIM_OC4_SetConfig+0x80>
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	4a17      	ldr	r2, [pc, #92]	; (800e924 <TIM_OC4_SetConfig+0xc8>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d007      	beq.n	800e8dc <TIM_OC4_SetConfig+0x80>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	4a16      	ldr	r2, [pc, #88]	; (800e928 <TIM_OC4_SetConfig+0xcc>)
 800e8d0:	4293      	cmp	r3, r2
 800e8d2:	d003      	beq.n	800e8dc <TIM_OC4_SetConfig+0x80>
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	4a15      	ldr	r2, [pc, #84]	; (800e92c <TIM_OC4_SetConfig+0xd0>)
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	d109      	bne.n	800e8f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e8e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	695b      	ldr	r3, [r3, #20]
 800e8e8:	019b      	lsls	r3, r3, #6
 800e8ea:	697a      	ldr	r2, [r7, #20]
 800e8ec:	4313      	orrs	r3, r2
 800e8ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	697a      	ldr	r2, [r7, #20]
 800e8f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	68fa      	ldr	r2, [r7, #12]
 800e8fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	685a      	ldr	r2, [r3, #4]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	693a      	ldr	r2, [r7, #16]
 800e908:	621a      	str	r2, [r3, #32]
}
 800e90a:	bf00      	nop
 800e90c:	371c      	adds	r7, #28
 800e90e:	46bd      	mov	sp, r7
 800e910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e914:	4770      	bx	lr
 800e916:	bf00      	nop
 800e918:	feff8fff 	.word	0xfeff8fff
 800e91c:	40010000 	.word	0x40010000
 800e920:	40010400 	.word	0x40010400
 800e924:	40014000 	.word	0x40014000
 800e928:	40014400 	.word	0x40014400
 800e92c:	40014800 	.word	0x40014800

0800e930 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e930:	b480      	push	{r7}
 800e932:	b087      	sub	sp, #28
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6a1b      	ldr	r3, [r3, #32]
 800e93e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6a1b      	ldr	r3, [r3, #32]
 800e94a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e958:	68fa      	ldr	r2, [r7, #12]
 800e95a:	4b21      	ldr	r3, [pc, #132]	; (800e9e0 <TIM_OC5_SetConfig+0xb0>)
 800e95c:	4013      	ands	r3, r2
 800e95e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	68fa      	ldr	r2, [r7, #12]
 800e966:	4313      	orrs	r3, r2
 800e968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e970:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	689b      	ldr	r3, [r3, #8]
 800e976:	041b      	lsls	r3, r3, #16
 800e978:	693a      	ldr	r2, [r7, #16]
 800e97a:	4313      	orrs	r3, r2
 800e97c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	4a18      	ldr	r2, [pc, #96]	; (800e9e4 <TIM_OC5_SetConfig+0xb4>)
 800e982:	4293      	cmp	r3, r2
 800e984:	d00f      	beq.n	800e9a6 <TIM_OC5_SetConfig+0x76>
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	4a17      	ldr	r2, [pc, #92]	; (800e9e8 <TIM_OC5_SetConfig+0xb8>)
 800e98a:	4293      	cmp	r3, r2
 800e98c:	d00b      	beq.n	800e9a6 <TIM_OC5_SetConfig+0x76>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	4a16      	ldr	r2, [pc, #88]	; (800e9ec <TIM_OC5_SetConfig+0xbc>)
 800e992:	4293      	cmp	r3, r2
 800e994:	d007      	beq.n	800e9a6 <TIM_OC5_SetConfig+0x76>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	4a15      	ldr	r2, [pc, #84]	; (800e9f0 <TIM_OC5_SetConfig+0xc0>)
 800e99a:	4293      	cmp	r3, r2
 800e99c:	d003      	beq.n	800e9a6 <TIM_OC5_SetConfig+0x76>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	4a14      	ldr	r2, [pc, #80]	; (800e9f4 <TIM_OC5_SetConfig+0xc4>)
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	d109      	bne.n	800e9ba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e9ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	695b      	ldr	r3, [r3, #20]
 800e9b2:	021b      	lsls	r3, r3, #8
 800e9b4:	697a      	ldr	r2, [r7, #20]
 800e9b6:	4313      	orrs	r3, r2
 800e9b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	697a      	ldr	r2, [r7, #20]
 800e9be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	68fa      	ldr	r2, [r7, #12]
 800e9c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	685a      	ldr	r2, [r3, #4]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	693a      	ldr	r2, [r7, #16]
 800e9d2:	621a      	str	r2, [r3, #32]
}
 800e9d4:	bf00      	nop
 800e9d6:	371c      	adds	r7, #28
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr
 800e9e0:	fffeff8f 	.word	0xfffeff8f
 800e9e4:	40010000 	.word	0x40010000
 800e9e8:	40010400 	.word	0x40010400
 800e9ec:	40014000 	.word	0x40014000
 800e9f0:	40014400 	.word	0x40014400
 800e9f4:	40014800 	.word	0x40014800

0800e9f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	b087      	sub	sp, #28
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6a1b      	ldr	r3, [r3, #32]
 800ea06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6a1b      	ldr	r3, [r3, #32]
 800ea12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	685b      	ldr	r3, [r3, #4]
 800ea18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ea20:	68fa      	ldr	r2, [r7, #12]
 800ea22:	4b22      	ldr	r3, [pc, #136]	; (800eaac <TIM_OC6_SetConfig+0xb4>)
 800ea24:	4013      	ands	r3, r2
 800ea26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	021b      	lsls	r3, r3, #8
 800ea2e:	68fa      	ldr	r2, [r7, #12]
 800ea30:	4313      	orrs	r3, r2
 800ea32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ea3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	689b      	ldr	r3, [r3, #8]
 800ea40:	051b      	lsls	r3, r3, #20
 800ea42:	693a      	ldr	r2, [r7, #16]
 800ea44:	4313      	orrs	r3, r2
 800ea46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	4a19      	ldr	r2, [pc, #100]	; (800eab0 <TIM_OC6_SetConfig+0xb8>)
 800ea4c:	4293      	cmp	r3, r2
 800ea4e:	d00f      	beq.n	800ea70 <TIM_OC6_SetConfig+0x78>
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	4a18      	ldr	r2, [pc, #96]	; (800eab4 <TIM_OC6_SetConfig+0xbc>)
 800ea54:	4293      	cmp	r3, r2
 800ea56:	d00b      	beq.n	800ea70 <TIM_OC6_SetConfig+0x78>
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	4a17      	ldr	r2, [pc, #92]	; (800eab8 <TIM_OC6_SetConfig+0xc0>)
 800ea5c:	4293      	cmp	r3, r2
 800ea5e:	d007      	beq.n	800ea70 <TIM_OC6_SetConfig+0x78>
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	4a16      	ldr	r2, [pc, #88]	; (800eabc <TIM_OC6_SetConfig+0xc4>)
 800ea64:	4293      	cmp	r3, r2
 800ea66:	d003      	beq.n	800ea70 <TIM_OC6_SetConfig+0x78>
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	4a15      	ldr	r2, [pc, #84]	; (800eac0 <TIM_OC6_SetConfig+0xc8>)
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	d109      	bne.n	800ea84 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ea76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	695b      	ldr	r3, [r3, #20]
 800ea7c:	029b      	lsls	r3, r3, #10
 800ea7e:	697a      	ldr	r2, [r7, #20]
 800ea80:	4313      	orrs	r3, r2
 800ea82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	697a      	ldr	r2, [r7, #20]
 800ea88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	68fa      	ldr	r2, [r7, #12]
 800ea8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	685a      	ldr	r2, [r3, #4]
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	693a      	ldr	r2, [r7, #16]
 800ea9c:	621a      	str	r2, [r3, #32]
}
 800ea9e:	bf00      	nop
 800eaa0:	371c      	adds	r7, #28
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr
 800eaaa:	bf00      	nop
 800eaac:	feff8fff 	.word	0xfeff8fff
 800eab0:	40010000 	.word	0x40010000
 800eab4:	40010400 	.word	0x40010400
 800eab8:	40014000 	.word	0x40014000
 800eabc:	40014400 	.word	0x40014400
 800eac0:	40014800 	.word	0x40014800

0800eac4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eac4:	b480      	push	{r7}
 800eac6:	b087      	sub	sp, #28
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	6a1b      	ldr	r3, [r3, #32]
 800ead4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	6a1b      	ldr	r3, [r3, #32]
 800eada:	f023 0201 	bic.w	r2, r3, #1
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	699b      	ldr	r3, [r3, #24]
 800eae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800eaee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	011b      	lsls	r3, r3, #4
 800eaf4:	693a      	ldr	r2, [r7, #16]
 800eaf6:	4313      	orrs	r3, r2
 800eaf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	f023 030a 	bic.w	r3, r3, #10
 800eb00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800eb02:	697a      	ldr	r2, [r7, #20]
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	4313      	orrs	r3, r2
 800eb08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	693a      	ldr	r2, [r7, #16]
 800eb0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	697a      	ldr	r2, [r7, #20]
 800eb14:	621a      	str	r2, [r3, #32]
}
 800eb16:	bf00      	nop
 800eb18:	371c      	adds	r7, #28
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb20:	4770      	bx	lr

0800eb22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eb22:	b480      	push	{r7}
 800eb24:	b087      	sub	sp, #28
 800eb26:	af00      	add	r7, sp, #0
 800eb28:	60f8      	str	r0, [r7, #12]
 800eb2a:	60b9      	str	r1, [r7, #8]
 800eb2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	6a1b      	ldr	r3, [r3, #32]
 800eb32:	f023 0210 	bic.w	r2, r3, #16
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	699b      	ldr	r3, [r3, #24]
 800eb3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	6a1b      	ldr	r3, [r3, #32]
 800eb44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800eb4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	031b      	lsls	r3, r3, #12
 800eb52:	697a      	ldr	r2, [r7, #20]
 800eb54:	4313      	orrs	r3, r2
 800eb56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800eb5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	011b      	lsls	r3, r3, #4
 800eb64:	693a      	ldr	r2, [r7, #16]
 800eb66:	4313      	orrs	r3, r2
 800eb68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	697a      	ldr	r2, [r7, #20]
 800eb6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	693a      	ldr	r2, [r7, #16]
 800eb74:	621a      	str	r2, [r3, #32]
}
 800eb76:	bf00      	nop
 800eb78:	371c      	adds	r7, #28
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr
	...

0800eb84 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b085      	sub	sp, #20
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	689b      	ldr	r3, [r3, #8]
 800eb92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800eb94:	68fa      	ldr	r2, [r7, #12]
 800eb96:	4b09      	ldr	r3, [pc, #36]	; (800ebbc <TIM_ITRx_SetConfig+0x38>)
 800eb98:	4013      	ands	r3, r2
 800eb9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800eb9c:	683a      	ldr	r2, [r7, #0]
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	4313      	orrs	r3, r2
 800eba2:	f043 0307 	orr.w	r3, r3, #7
 800eba6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	68fa      	ldr	r2, [r7, #12]
 800ebac:	609a      	str	r2, [r3, #8]
}
 800ebae:	bf00      	nop
 800ebb0:	3714      	adds	r7, #20
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb8:	4770      	bx	lr
 800ebba:	bf00      	nop
 800ebbc:	ffcfff8f 	.word	0xffcfff8f

0800ebc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	b087      	sub	sp, #28
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	60f8      	str	r0, [r7, #12]
 800ebc8:	60b9      	str	r1, [r7, #8]
 800ebca:	607a      	str	r2, [r7, #4]
 800ebcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	689b      	ldr	r3, [r3, #8]
 800ebd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ebda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	021a      	lsls	r2, r3, #8
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	431a      	orrs	r2, r3
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	4313      	orrs	r3, r2
 800ebe8:	697a      	ldr	r2, [r7, #20]
 800ebea:	4313      	orrs	r3, r2
 800ebec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	697a      	ldr	r2, [r7, #20]
 800ebf2:	609a      	str	r2, [r3, #8]
}
 800ebf4:	bf00      	nop
 800ebf6:	371c      	adds	r7, #28
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfe:	4770      	bx	lr

0800ec00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ec00:	b480      	push	{r7}
 800ec02:	b087      	sub	sp, #28
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	60f8      	str	r0, [r7, #12]
 800ec08:	60b9      	str	r1, [r7, #8]
 800ec0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	f003 031f 	and.w	r3, r3, #31
 800ec12:	2201      	movs	r2, #1
 800ec14:	fa02 f303 	lsl.w	r3, r2, r3
 800ec18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	6a1a      	ldr	r2, [r3, #32]
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	43db      	mvns	r3, r3
 800ec22:	401a      	ands	r2, r3
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	6a1a      	ldr	r2, [r3, #32]
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	f003 031f 	and.w	r3, r3, #31
 800ec32:	6879      	ldr	r1, [r7, #4]
 800ec34:	fa01 f303 	lsl.w	r3, r1, r3
 800ec38:	431a      	orrs	r2, r3
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	621a      	str	r2, [r3, #32]
}
 800ec3e:	bf00      	nop
 800ec40:	371c      	adds	r7, #28
 800ec42:	46bd      	mov	sp, r7
 800ec44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec48:	4770      	bx	lr
	...

0800ec4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b085      	sub	sp, #20
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec5c:	2b01      	cmp	r3, #1
 800ec5e:	d101      	bne.n	800ec64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ec60:	2302      	movs	r3, #2
 800ec62:	e06d      	b.n	800ed40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2201      	movs	r2, #1
 800ec68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2202      	movs	r2, #2
 800ec70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	685b      	ldr	r3, [r3, #4]
 800ec7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	689b      	ldr	r3, [r3, #8]
 800ec82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	4a30      	ldr	r2, [pc, #192]	; (800ed4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d004      	beq.n	800ec98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	4a2f      	ldr	r2, [pc, #188]	; (800ed50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ec94:	4293      	cmp	r3, r2
 800ec96:	d108      	bne.n	800ecaa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ec9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	68fa      	ldr	r2, [r7, #12]
 800eca6:	4313      	orrs	r3, r2
 800eca8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ecb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	68fa      	ldr	r2, [r7, #12]
 800ecb8:	4313      	orrs	r3, r2
 800ecba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	68fa      	ldr	r2, [r7, #12]
 800ecc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	4a20      	ldr	r2, [pc, #128]	; (800ed4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d022      	beq.n	800ed14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecd6:	d01d      	beq.n	800ed14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	4a1d      	ldr	r2, [pc, #116]	; (800ed54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ecde:	4293      	cmp	r3, r2
 800ece0:	d018      	beq.n	800ed14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	4a1c      	ldr	r2, [pc, #112]	; (800ed58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ece8:	4293      	cmp	r3, r2
 800ecea:	d013      	beq.n	800ed14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4a1a      	ldr	r2, [pc, #104]	; (800ed5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d00e      	beq.n	800ed14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	4a15      	ldr	r2, [pc, #84]	; (800ed50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	d009      	beq.n	800ed14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	4a16      	ldr	r2, [pc, #88]	; (800ed60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ed06:	4293      	cmp	r3, r2
 800ed08:	d004      	beq.n	800ed14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	4a15      	ldr	r2, [pc, #84]	; (800ed64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d10c      	bne.n	800ed2e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	689b      	ldr	r3, [r3, #8]
 800ed20:	68ba      	ldr	r2, [r7, #8]
 800ed22:	4313      	orrs	r3, r2
 800ed24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	68ba      	ldr	r2, [r7, #8]
 800ed2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2201      	movs	r2, #1
 800ed32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ed3e:	2300      	movs	r3, #0
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3714      	adds	r7, #20
 800ed44:	46bd      	mov	sp, r7
 800ed46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4a:	4770      	bx	lr
 800ed4c:	40010000 	.word	0x40010000
 800ed50:	40010400 	.word	0x40010400
 800ed54:	40000400 	.word	0x40000400
 800ed58:	40000800 	.word	0x40000800
 800ed5c:	40000c00 	.word	0x40000c00
 800ed60:	40001800 	.word	0x40001800
 800ed64:	40014000 	.word	0x40014000

0800ed68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ed68:	b480      	push	{r7}
 800ed6a:	b085      	sub	sp, #20
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ed72:	2300      	movs	r3, #0
 800ed74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	d101      	bne.n	800ed84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ed80:	2302      	movs	r3, #2
 800ed82:	e065      	b.n	800ee50 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2201      	movs	r2, #1
 800ed88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	68db      	ldr	r3, [r3, #12]
 800ed96:	4313      	orrs	r3, r2
 800ed98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	689b      	ldr	r3, [r3, #8]
 800eda4:	4313      	orrs	r3, r2
 800eda6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	685b      	ldr	r3, [r3, #4]
 800edb2:	4313      	orrs	r3, r2
 800edb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	4313      	orrs	r3, r2
 800edc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	691b      	ldr	r3, [r3, #16]
 800edce:	4313      	orrs	r3, r2
 800edd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	695b      	ldr	r3, [r3, #20]
 800eddc:	4313      	orrs	r3, r2
 800edde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edea:	4313      	orrs	r3, r2
 800edec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	699b      	ldr	r3, [r3, #24]
 800edf8:	041b      	lsls	r3, r3, #16
 800edfa:	4313      	orrs	r3, r2
 800edfc:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	4a16      	ldr	r2, [pc, #88]	; (800ee5c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ee04:	4293      	cmp	r3, r2
 800ee06:	d004      	beq.n	800ee12 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	4a14      	ldr	r2, [pc, #80]	; (800ee60 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d115      	bne.n	800ee3e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee1c:	051b      	lsls	r3, r3, #20
 800ee1e:	4313      	orrs	r3, r2
 800ee20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	69db      	ldr	r3, [r3, #28]
 800ee2c:	4313      	orrs	r3, r2
 800ee2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	6a1b      	ldr	r3, [r3, #32]
 800ee3a:	4313      	orrs	r3, r2
 800ee3c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	68fa      	ldr	r2, [r7, #12]
 800ee44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ee4e:	2300      	movs	r3, #0
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	3714      	adds	r7, #20
 800ee54:	46bd      	mov	sp, r7
 800ee56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5a:	4770      	bx	lr
 800ee5c:	40010000 	.word	0x40010000
 800ee60:	40010400 	.word	0x40010400

0800ee64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ee6c:	bf00      	nop
 800ee6e:	370c      	adds	r7, #12
 800ee70:	46bd      	mov	sp, r7
 800ee72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee76:	4770      	bx	lr

0800ee78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ee78:	b480      	push	{r7}
 800ee7a:	b083      	sub	sp, #12
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ee80:	bf00      	nop
 800ee82:	370c      	adds	r7, #12
 800ee84:	46bd      	mov	sp, r7
 800ee86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8a:	4770      	bx	lr

0800ee8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	b083      	sub	sp, #12
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ee94:	bf00      	nop
 800ee96:	370c      	adds	r7, #12
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9e:	4770      	bx	lr

0800eea0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d101      	bne.n	800eeb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eeae:	2301      	movs	r3, #1
 800eeb0:	e042      	b.n	800ef38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d106      	bne.n	800eeca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2200      	movs	r2, #0
 800eec0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eec4:	6878      	ldr	r0, [r7, #4]
 800eec6:	f7f7 fd43 	bl	8006950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2224      	movs	r2, #36	; 0x24
 800eece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	681a      	ldr	r2, [r3, #0]
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	f022 0201 	bic.w	r2, r2, #1
 800eee0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f000 fdf8 	bl	800fad8 <UART_SetConfig>
 800eee8:	4603      	mov	r3, r0
 800eeea:	2b01      	cmp	r3, #1
 800eeec:	d101      	bne.n	800eef2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800eeee:	2301      	movs	r3, #1
 800eef0:	e022      	b.n	800ef38 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d002      	beq.n	800ef00 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f001 fb54 	bl	80105a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	685a      	ldr	r2, [r3, #4]
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ef0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	689a      	ldr	r2, [r3, #8]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ef1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	681a      	ldr	r2, [r3, #0]
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	f042 0201 	orr.w	r2, r2, #1
 800ef2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f001 fbdb 	bl	80106ec <UART_CheckIdleState>
 800ef36:	4603      	mov	r3, r0
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3708      	adds	r7, #8
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b08a      	sub	sp, #40	; 0x28
 800ef44:	af02      	add	r7, sp, #8
 800ef46:	60f8      	str	r0, [r7, #12]
 800ef48:	60b9      	str	r1, [r7, #8]
 800ef4a:	603b      	str	r3, [r7, #0]
 800ef4c:	4613      	mov	r3, r2
 800ef4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef56:	2b20      	cmp	r3, #32
 800ef58:	f040 8083 	bne.w	800f062 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d002      	beq.n	800ef68 <HAL_UART_Transmit+0x28>
 800ef62:	88fb      	ldrh	r3, [r7, #6]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d101      	bne.n	800ef6c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ef68:	2301      	movs	r3, #1
 800ef6a:	e07b      	b.n	800f064 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef72:	2b01      	cmp	r3, #1
 800ef74:	d101      	bne.n	800ef7a <HAL_UART_Transmit+0x3a>
 800ef76:	2302      	movs	r3, #2
 800ef78:	e074      	b.n	800f064 <HAL_UART_Transmit+0x124>
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2201      	movs	r2, #1
 800ef7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	2200      	movs	r2, #0
 800ef86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	2221      	movs	r2, #33	; 0x21
 800ef8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ef92:	f7f8 f87d 	bl	8007090 <HAL_GetTick>
 800ef96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	88fa      	ldrh	r2, [r7, #6]
 800ef9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	88fa      	ldrh	r2, [r7, #6]
 800efa4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	689b      	ldr	r3, [r3, #8]
 800efac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efb0:	d108      	bne.n	800efc4 <HAL_UART_Transmit+0x84>
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	691b      	ldr	r3, [r3, #16]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d104      	bne.n	800efc4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800efba:	2300      	movs	r3, #0
 800efbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	61bb      	str	r3, [r7, #24]
 800efc2:	e003      	b.n	800efcc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800efc8:	2300      	movs	r3, #0
 800efca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	2200      	movs	r2, #0
 800efd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800efd4:	e02c      	b.n	800f030 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	9300      	str	r3, [sp, #0]
 800efda:	697b      	ldr	r3, [r7, #20]
 800efdc:	2200      	movs	r2, #0
 800efde:	2180      	movs	r1, #128	; 0x80
 800efe0:	68f8      	ldr	r0, [r7, #12]
 800efe2:	f001 fbce 	bl	8010782 <UART_WaitOnFlagUntilTimeout>
 800efe6:	4603      	mov	r3, r0
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d001      	beq.n	800eff0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800efec:	2303      	movs	r3, #3
 800efee:	e039      	b.n	800f064 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800eff0:	69fb      	ldr	r3, [r7, #28]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d10b      	bne.n	800f00e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800eff6:	69bb      	ldr	r3, [r7, #24]
 800eff8:	881b      	ldrh	r3, [r3, #0]
 800effa:	461a      	mov	r2, r3
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f004:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f006:	69bb      	ldr	r3, [r7, #24]
 800f008:	3302      	adds	r3, #2
 800f00a:	61bb      	str	r3, [r7, #24]
 800f00c:	e007      	b.n	800f01e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f00e:	69fb      	ldr	r3, [r7, #28]
 800f010:	781a      	ldrb	r2, [r3, #0]
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f018:	69fb      	ldr	r3, [r7, #28]
 800f01a:	3301      	adds	r3, #1
 800f01c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f024:	b29b      	uxth	r3, r3
 800f026:	3b01      	subs	r3, #1
 800f028:	b29a      	uxth	r2, r3
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f036:	b29b      	uxth	r3, r3
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d1cc      	bne.n	800efd6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	9300      	str	r3, [sp, #0]
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	2200      	movs	r2, #0
 800f044:	2140      	movs	r1, #64	; 0x40
 800f046:	68f8      	ldr	r0, [r7, #12]
 800f048:	f001 fb9b 	bl	8010782 <UART_WaitOnFlagUntilTimeout>
 800f04c:	4603      	mov	r3, r0
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d001      	beq.n	800f056 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800f052:	2303      	movs	r3, #3
 800f054:	e006      	b.n	800f064 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	2220      	movs	r2, #32
 800f05a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800f05e:	2300      	movs	r3, #0
 800f060:	e000      	b.n	800f064 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800f062:	2302      	movs	r3, #2
  }
}
 800f064:	4618      	mov	r0, r3
 800f066:	3720      	adds	r7, #32
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}

0800f06c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b08a      	sub	sp, #40	; 0x28
 800f070:	af02      	add	r7, sp, #8
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	60b9      	str	r1, [r7, #8]
 800f076:	603b      	str	r3, [r7, #0]
 800f078:	4613      	mov	r3, r2
 800f07a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f082:	2b20      	cmp	r3, #32
 800f084:	f040 80c0 	bne.w	800f208 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d002      	beq.n	800f094 <HAL_UART_Receive+0x28>
 800f08e:	88fb      	ldrh	r3, [r7, #6]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d101      	bne.n	800f098 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f094:	2301      	movs	r3, #1
 800f096:	e0b8      	b.n	800f20a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f09e:	2b01      	cmp	r3, #1
 800f0a0:	d101      	bne.n	800f0a6 <HAL_UART_Receive+0x3a>
 800f0a2:	2302      	movs	r3, #2
 800f0a4:	e0b1      	b.n	800f20a <HAL_UART_Receive+0x19e>
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	2201      	movs	r2, #1
 800f0aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	2222      	movs	r2, #34	; 0x22
 800f0ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f0c4:	f7f7 ffe4 	bl	8007090 <HAL_GetTick>
 800f0c8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	88fa      	ldrh	r2, [r7, #6]
 800f0ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	88fa      	ldrh	r2, [r7, #6]
 800f0d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	689b      	ldr	r3, [r3, #8]
 800f0de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0e2:	d10e      	bne.n	800f102 <HAL_UART_Receive+0x96>
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	691b      	ldr	r3, [r3, #16]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d105      	bne.n	800f0f8 <HAL_UART_Receive+0x8c>
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f0f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f0f6:	e02d      	b.n	800f154 <HAL_UART_Receive+0xe8>
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	22ff      	movs	r2, #255	; 0xff
 800f0fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f100:	e028      	b.n	800f154 <HAL_UART_Receive+0xe8>
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	689b      	ldr	r3, [r3, #8]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d10d      	bne.n	800f126 <HAL_UART_Receive+0xba>
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	691b      	ldr	r3, [r3, #16]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d104      	bne.n	800f11c <HAL_UART_Receive+0xb0>
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	22ff      	movs	r2, #255	; 0xff
 800f116:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f11a:	e01b      	b.n	800f154 <HAL_UART_Receive+0xe8>
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	227f      	movs	r2, #127	; 0x7f
 800f120:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f124:	e016      	b.n	800f154 <HAL_UART_Receive+0xe8>
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	689b      	ldr	r3, [r3, #8]
 800f12a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f12e:	d10d      	bne.n	800f14c <HAL_UART_Receive+0xe0>
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	691b      	ldr	r3, [r3, #16]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d104      	bne.n	800f142 <HAL_UART_Receive+0xd6>
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	227f      	movs	r2, #127	; 0x7f
 800f13c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f140:	e008      	b.n	800f154 <HAL_UART_Receive+0xe8>
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	223f      	movs	r2, #63	; 0x3f
 800f146:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f14a:	e003      	b.n	800f154 <HAL_UART_Receive+0xe8>
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	2200      	movs	r2, #0
 800f150:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f15a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	689b      	ldr	r3, [r3, #8]
 800f160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f164:	d108      	bne.n	800f178 <HAL_UART_Receive+0x10c>
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	691b      	ldr	r3, [r3, #16]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d104      	bne.n	800f178 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800f16e:	2300      	movs	r3, #0
 800f170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f172:	68bb      	ldr	r3, [r7, #8]
 800f174:	61bb      	str	r3, [r7, #24]
 800f176:	e003      	b.n	800f180 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f17c:	2300      	movs	r3, #0
 800f17e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2200      	movs	r2, #0
 800f184:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f188:	e032      	b.n	800f1f0 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	9300      	str	r3, [sp, #0]
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	2200      	movs	r2, #0
 800f192:	2120      	movs	r1, #32
 800f194:	68f8      	ldr	r0, [r7, #12]
 800f196:	f001 faf4 	bl	8010782 <UART_WaitOnFlagUntilTimeout>
 800f19a:	4603      	mov	r3, r0
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d001      	beq.n	800f1a4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800f1a0:	2303      	movs	r3, #3
 800f1a2:	e032      	b.n	800f20a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800f1a4:	69fb      	ldr	r3, [r7, #28]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d10c      	bne.n	800f1c4 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1b0:	b29a      	uxth	r2, r3
 800f1b2:	8a7b      	ldrh	r3, [r7, #18]
 800f1b4:	4013      	ands	r3, r2
 800f1b6:	b29a      	uxth	r2, r3
 800f1b8:	69bb      	ldr	r3, [r7, #24]
 800f1ba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f1bc:	69bb      	ldr	r3, [r7, #24]
 800f1be:	3302      	adds	r3, #2
 800f1c0:	61bb      	str	r3, [r7, #24]
 800f1c2:	e00c      	b.n	800f1de <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ca:	b2da      	uxtb	r2, r3
 800f1cc:	8a7b      	ldrh	r3, [r7, #18]
 800f1ce:	b2db      	uxtb	r3, r3
 800f1d0:	4013      	ands	r3, r2
 800f1d2:	b2da      	uxtb	r2, r3
 800f1d4:	69fb      	ldr	r3, [r7, #28]
 800f1d6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f1d8:	69fb      	ldr	r3, [r7, #28]
 800f1da:	3301      	adds	r3, #1
 800f1dc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f1e4:	b29b      	uxth	r3, r3
 800f1e6:	3b01      	subs	r3, #1
 800f1e8:	b29a      	uxth	r2, r3
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f1f6:	b29b      	uxth	r3, r3
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d1c6      	bne.n	800f18a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	2220      	movs	r2, #32
 800f200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800f204:	2300      	movs	r3, #0
 800f206:	e000      	b.n	800f20a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800f208:	2302      	movs	r3, #2
  }
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3720      	adds	r7, #32
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}
	...

0800f214 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b08a      	sub	sp, #40	; 0x28
 800f218:	af00      	add	r7, sp, #0
 800f21a:	60f8      	str	r0, [r7, #12]
 800f21c:	60b9      	str	r1, [r7, #8]
 800f21e:	4613      	mov	r3, r2
 800f220:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f228:	2b20      	cmp	r3, #32
 800f22a:	d17a      	bne.n	800f322 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d002      	beq.n	800f238 <HAL_UART_Transmit_DMA+0x24>
 800f232:	88fb      	ldrh	r3, [r7, #6]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d101      	bne.n	800f23c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800f238:	2301      	movs	r3, #1
 800f23a:	e073      	b.n	800f324 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f242:	2b01      	cmp	r3, #1
 800f244:	d101      	bne.n	800f24a <HAL_UART_Transmit_DMA+0x36>
 800f246:	2302      	movs	r3, #2
 800f248:	e06c      	b.n	800f324 <HAL_UART_Transmit_DMA+0x110>
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	2201      	movs	r2, #1
 800f24e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	68ba      	ldr	r2, [r7, #8]
 800f256:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	88fa      	ldrh	r2, [r7, #6]
 800f25c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	88fa      	ldrh	r2, [r7, #6]
 800f264:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	2200      	movs	r2, #0
 800f26c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2221      	movs	r2, #33	; 0x21
 800f274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d02c      	beq.n	800f2da <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f284:	4a29      	ldr	r2, [pc, #164]	; (800f32c <HAL_UART_Transmit_DMA+0x118>)
 800f286:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f28c:	4a28      	ldr	r2, [pc, #160]	; (800f330 <HAL_UART_Transmit_DMA+0x11c>)
 800f28e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f294:	4a27      	ldr	r2, [pc, #156]	; (800f334 <HAL_UART_Transmit_DMA+0x120>)
 800f296:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f29c:	2200      	movs	r2, #0
 800f29e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	3328      	adds	r3, #40	; 0x28
 800f2b0:	461a      	mov	r2, r3
 800f2b2:	88fb      	ldrh	r3, [r7, #6]
 800f2b4:	f7f8 fd9e 	bl	8007df4 <HAL_DMA_Start_IT>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d00d      	beq.n	800f2da <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	2210      	movs	r2, #16
 800f2c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	2220      	movs	r2, #32
 800f2d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	e024      	b.n	800f324 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	2240      	movs	r2, #64	; 0x40
 800f2e0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	3308      	adds	r3, #8
 800f2f0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	e853 3f00 	ldrex	r3, [r3]
 800f2f8:	613b      	str	r3, [r7, #16]
   return(result);
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f300:	627b      	str	r3, [r7, #36]	; 0x24
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	3308      	adds	r3, #8
 800f308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f30a:	623a      	str	r2, [r7, #32]
 800f30c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f30e:	69f9      	ldr	r1, [r7, #28]
 800f310:	6a3a      	ldr	r2, [r7, #32]
 800f312:	e841 2300 	strex	r3, r2, [r1]
 800f316:	61bb      	str	r3, [r7, #24]
   return(result);
 800f318:	69bb      	ldr	r3, [r7, #24]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d1e5      	bne.n	800f2ea <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800f31e:	2300      	movs	r3, #0
 800f320:	e000      	b.n	800f324 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800f322:	2302      	movs	r3, #2
  }
}
 800f324:	4618      	mov	r0, r3
 800f326:	3728      	adds	r7, #40	; 0x28
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}
 800f32c:	08010bb5 	.word	0x08010bb5
 800f330:	08010c4b 	.word	0x08010c4b
 800f334:	08010dc1 	.word	0x08010dc1

0800f338 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b0ba      	sub	sp, #232	; 0xe8
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	69db      	ldr	r3, [r3, #28]
 800f346:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	689b      	ldr	r3, [r3, #8]
 800f35a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f35e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f362:	f640 030f 	movw	r3, #2063	; 0x80f
 800f366:	4013      	ands	r3, r2
 800f368:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f36c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f370:	2b00      	cmp	r3, #0
 800f372:	d11b      	bne.n	800f3ac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f378:	f003 0320 	and.w	r3, r3, #32
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d015      	beq.n	800f3ac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f384:	f003 0320 	and.w	r3, r3, #32
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d105      	bne.n	800f398 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f38c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f394:	2b00      	cmp	r3, #0
 800f396:	d009      	beq.n	800f3ac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	f000 835a 	beq.w	800fa56 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	4798      	blx	r3
      }
      return;
 800f3aa:	e354      	b.n	800fa56 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f3ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	f000 811f 	beq.w	800f5f4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f3b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f3ba:	4b8b      	ldr	r3, [pc, #556]	; (800f5e8 <HAL_UART_IRQHandler+0x2b0>)
 800f3bc:	4013      	ands	r3, r2
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d106      	bne.n	800f3d0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f3c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f3c6:	4b89      	ldr	r3, [pc, #548]	; (800f5ec <HAL_UART_IRQHandler+0x2b4>)
 800f3c8:	4013      	ands	r3, r2
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	f000 8112 	beq.w	800f5f4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f3d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3d4:	f003 0301 	and.w	r3, r3, #1
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d011      	beq.n	800f400 <HAL_UART_IRQHandler+0xc8>
 800f3dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f3e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d00b      	beq.n	800f400 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	2201      	movs	r2, #1
 800f3ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3f6:	f043 0201 	orr.w	r2, r3, #1
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f404:	f003 0302 	and.w	r3, r3, #2
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d011      	beq.n	800f430 <HAL_UART_IRQHandler+0xf8>
 800f40c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f410:	f003 0301 	and.w	r3, r3, #1
 800f414:	2b00      	cmp	r3, #0
 800f416:	d00b      	beq.n	800f430 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	2202      	movs	r2, #2
 800f41e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f426:	f043 0204 	orr.w	r2, r3, #4
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f434:	f003 0304 	and.w	r3, r3, #4
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d011      	beq.n	800f460 <HAL_UART_IRQHandler+0x128>
 800f43c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f440:	f003 0301 	and.w	r3, r3, #1
 800f444:	2b00      	cmp	r3, #0
 800f446:	d00b      	beq.n	800f460 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	2204      	movs	r2, #4
 800f44e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f456:	f043 0202 	orr.w	r2, r3, #2
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f464:	f003 0308 	and.w	r3, r3, #8
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d017      	beq.n	800f49c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f46c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f470:	f003 0320 	and.w	r3, r3, #32
 800f474:	2b00      	cmp	r3, #0
 800f476:	d105      	bne.n	800f484 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f478:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f47c:	4b5a      	ldr	r3, [pc, #360]	; (800f5e8 <HAL_UART_IRQHandler+0x2b0>)
 800f47e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f480:	2b00      	cmp	r3, #0
 800f482:	d00b      	beq.n	800f49c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	2208      	movs	r2, #8
 800f48a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f492:	f043 0208 	orr.w	r2, r3, #8
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f49c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d012      	beq.n	800f4ce <HAL_UART_IRQHandler+0x196>
 800f4a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f4ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d00c      	beq.n	800f4ce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f4bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4c4:	f043 0220 	orr.w	r2, r3, #32
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	f000 82c0 	beq.w	800fa5a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f4da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4de:	f003 0320 	and.w	r3, r3, #32
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d013      	beq.n	800f50e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f4e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f4ea:	f003 0320 	and.w	r3, r3, #32
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d105      	bne.n	800f4fe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f4f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f4f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d007      	beq.n	800f50e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f502:	2b00      	cmp	r3, #0
 800f504:	d003      	beq.n	800f50e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f514:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	689b      	ldr	r3, [r3, #8]
 800f51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f522:	2b40      	cmp	r3, #64	; 0x40
 800f524:	d005      	beq.n	800f532 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f526:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f52a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d04f      	beq.n	800f5d2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f001 fad8 	bl	8010ae8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	689b      	ldr	r3, [r3, #8]
 800f53e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f542:	2b40      	cmp	r3, #64	; 0x40
 800f544:	d141      	bne.n	800f5ca <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	3308      	adds	r3, #8
 800f54c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f550:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f554:	e853 3f00 	ldrex	r3, [r3]
 800f558:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f55c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	3308      	adds	r3, #8
 800f56e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f572:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f576:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f57a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f57e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f582:	e841 2300 	strex	r3, r2, [r1]
 800f586:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f58a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d1d9      	bne.n	800f546 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f596:	2b00      	cmp	r3, #0
 800f598:	d013      	beq.n	800f5c2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f59e:	4a14      	ldr	r2, [pc, #80]	; (800f5f0 <HAL_UART_IRQHandler+0x2b8>)
 800f5a0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f7f9 f9ac 	bl	8008904 <HAL_DMA_Abort_IT>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d017      	beq.n	800f5e2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5b8:	687a      	ldr	r2, [r7, #4]
 800f5ba:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f5bc:	4610      	mov	r0, r2
 800f5be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5c0:	e00f      	b.n	800f5e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f000 fa7e 	bl	800fac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5c8:	e00b      	b.n	800f5e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f000 fa7a 	bl	800fac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5d0:	e007      	b.n	800f5e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f000 fa76 	bl	800fac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f5e0:	e23b      	b.n	800fa5a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5e2:	bf00      	nop
    return;
 800f5e4:	e239      	b.n	800fa5a <HAL_UART_IRQHandler+0x722>
 800f5e6:	bf00      	nop
 800f5e8:	10000001 	.word	0x10000001
 800f5ec:	04000120 	.word	0x04000120
 800f5f0:	08010e41 	.word	0x08010e41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5f8:	2b01      	cmp	r3, #1
 800f5fa:	f040 81ce 	bne.w	800f99a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f5fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f602:	f003 0310 	and.w	r3, r3, #16
 800f606:	2b00      	cmp	r3, #0
 800f608:	f000 81c7 	beq.w	800f99a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f60c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f610:	f003 0310 	and.w	r3, r3, #16
 800f614:	2b00      	cmp	r3, #0
 800f616:	f000 81c0 	beq.w	800f99a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	2210      	movs	r2, #16
 800f620:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	689b      	ldr	r3, [r3, #8]
 800f628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f62c:	2b40      	cmp	r3, #64	; 0x40
 800f62e:	f040 813b 	bne.w	800f8a8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4a8b      	ldr	r2, [pc, #556]	; (800f868 <HAL_UART_IRQHandler+0x530>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d059      	beq.n	800f6f2 <HAL_UART_IRQHandler+0x3ba>
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	4a89      	ldr	r2, [pc, #548]	; (800f86c <HAL_UART_IRQHandler+0x534>)
 800f646:	4293      	cmp	r3, r2
 800f648:	d053      	beq.n	800f6f2 <HAL_UART_IRQHandler+0x3ba>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	4a87      	ldr	r2, [pc, #540]	; (800f870 <HAL_UART_IRQHandler+0x538>)
 800f652:	4293      	cmp	r3, r2
 800f654:	d04d      	beq.n	800f6f2 <HAL_UART_IRQHandler+0x3ba>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	4a85      	ldr	r2, [pc, #532]	; (800f874 <HAL_UART_IRQHandler+0x53c>)
 800f65e:	4293      	cmp	r3, r2
 800f660:	d047      	beq.n	800f6f2 <HAL_UART_IRQHandler+0x3ba>
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	4a83      	ldr	r2, [pc, #524]	; (800f878 <HAL_UART_IRQHandler+0x540>)
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d041      	beq.n	800f6f2 <HAL_UART_IRQHandler+0x3ba>
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	4a81      	ldr	r2, [pc, #516]	; (800f87c <HAL_UART_IRQHandler+0x544>)
 800f676:	4293      	cmp	r3, r2
 800f678:	d03b      	beq.n	800f6f2 <HAL_UART_IRQHandler+0x3ba>
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	4a7f      	ldr	r2, [pc, #508]	; (800f880 <HAL_UART_IRQHandler+0x548>)
 800f682:	4293      	cmp	r3, r2
 800f684:	d035      	beq.n	800f6f2 <HAL_UART_IRQHandler+0x3ba>
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	4a7d      	ldr	r2, [pc, #500]	; (800f884 <HAL_UART_IRQHandler+0x54c>)
 800f68e:	4293      	cmp	r3, r2
 800f690:	d02f      	beq.n	800f6f2 <HAL_UART_IRQHandler+0x3ba>
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	4a7b      	ldr	r2, [pc, #492]	; (800f888 <HAL_UART_IRQHandler+0x550>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d029      	beq.n	800f6f2 <HAL_UART_IRQHandler+0x3ba>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	4a79      	ldr	r2, [pc, #484]	; (800f88c <HAL_UART_IRQHandler+0x554>)
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	d023      	beq.n	800f6f2 <HAL_UART_IRQHandler+0x3ba>
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	4a77      	ldr	r2, [pc, #476]	; (800f890 <HAL_UART_IRQHandler+0x558>)
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d01d      	beq.n	800f6f2 <HAL_UART_IRQHandler+0x3ba>
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	4a75      	ldr	r2, [pc, #468]	; (800f894 <HAL_UART_IRQHandler+0x55c>)
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d017      	beq.n	800f6f2 <HAL_UART_IRQHandler+0x3ba>
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	4a73      	ldr	r2, [pc, #460]	; (800f898 <HAL_UART_IRQHandler+0x560>)
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d011      	beq.n	800f6f2 <HAL_UART_IRQHandler+0x3ba>
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	4a71      	ldr	r2, [pc, #452]	; (800f89c <HAL_UART_IRQHandler+0x564>)
 800f6d6:	4293      	cmp	r3, r2
 800f6d8:	d00b      	beq.n	800f6f2 <HAL_UART_IRQHandler+0x3ba>
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	4a6f      	ldr	r2, [pc, #444]	; (800f8a0 <HAL_UART_IRQHandler+0x568>)
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	d005      	beq.n	800f6f2 <HAL_UART_IRQHandler+0x3ba>
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	4a6d      	ldr	r2, [pc, #436]	; (800f8a4 <HAL_UART_IRQHandler+0x56c>)
 800f6ee:	4293      	cmp	r3, r2
 800f6f0:	d105      	bne.n	800f6fe <HAL_UART_IRQHandler+0x3c6>
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	685b      	ldr	r3, [r3, #4]
 800f6fa:	b29b      	uxth	r3, r3
 800f6fc:	e004      	b.n	800f708 <HAL_UART_IRQHandler+0x3d0>
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	685b      	ldr	r3, [r3, #4]
 800f706:	b29b      	uxth	r3, r3
 800f708:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f70c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f710:	2b00      	cmp	r3, #0
 800f712:	f000 81a4 	beq.w	800fa5e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f71c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f720:	429a      	cmp	r2, r3
 800f722:	f080 819c 	bcs.w	800fa5e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f72c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f734:	69db      	ldr	r3, [r3, #28]
 800f736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f73a:	f000 8086 	beq.w	800f84a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f746:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f74a:	e853 3f00 	ldrex	r3, [r3]
 800f74e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f752:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f756:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f75a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	461a      	mov	r2, r3
 800f764:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f768:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f76c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f770:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f774:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f778:	e841 2300 	strex	r3, r2, [r1]
 800f77c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f780:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f784:	2b00      	cmp	r3, #0
 800f786:	d1da      	bne.n	800f73e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	3308      	adds	r3, #8
 800f78e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f792:	e853 3f00 	ldrex	r3, [r3]
 800f796:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f798:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f79a:	f023 0301 	bic.w	r3, r3, #1
 800f79e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	3308      	adds	r3, #8
 800f7a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f7ac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f7b0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7b2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f7b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f7b8:	e841 2300 	strex	r3, r2, [r1]
 800f7bc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f7be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d1e1      	bne.n	800f788 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	3308      	adds	r3, #8
 800f7ca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f7ce:	e853 3f00 	ldrex	r3, [r3]
 800f7d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f7d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f7d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f7da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	3308      	adds	r3, #8
 800f7e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f7e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f7ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f7ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f7f0:	e841 2300 	strex	r3, r2, [r1]
 800f7f4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f7f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d1e3      	bne.n	800f7c4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2220      	movs	r2, #32
 800f800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2200      	movs	r2, #0
 800f808:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f812:	e853 3f00 	ldrex	r3, [r3]
 800f816:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f81a:	f023 0310 	bic.w	r3, r3, #16
 800f81e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	461a      	mov	r2, r3
 800f828:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f82c:	65bb      	str	r3, [r7, #88]	; 0x58
 800f82e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f830:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f832:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f834:	e841 2300 	strex	r3, r2, [r1]
 800f838:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f83a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d1e4      	bne.n	800f80a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f844:	4618      	mov	r0, r3
 800f846:	f7f8 fd3f 	bl	80082c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f856:	b29b      	uxth	r3, r3
 800f858:	1ad3      	subs	r3, r2, r3
 800f85a:	b29b      	uxth	r3, r3
 800f85c:	4619      	mov	r1, r3
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f7f3 fd98 	bl	8003394 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f864:	e0fb      	b.n	800fa5e <HAL_UART_IRQHandler+0x726>
 800f866:	bf00      	nop
 800f868:	40020010 	.word	0x40020010
 800f86c:	40020028 	.word	0x40020028
 800f870:	40020040 	.word	0x40020040
 800f874:	40020058 	.word	0x40020058
 800f878:	40020070 	.word	0x40020070
 800f87c:	40020088 	.word	0x40020088
 800f880:	400200a0 	.word	0x400200a0
 800f884:	400200b8 	.word	0x400200b8
 800f888:	40020410 	.word	0x40020410
 800f88c:	40020428 	.word	0x40020428
 800f890:	40020440 	.word	0x40020440
 800f894:	40020458 	.word	0x40020458
 800f898:	40020470 	.word	0x40020470
 800f89c:	40020488 	.word	0x40020488
 800f8a0:	400204a0 	.word	0x400204a0
 800f8a4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8b4:	b29b      	uxth	r3, r3
 800f8b6:	1ad3      	subs	r3, r2, r3
 800f8b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8c2:	b29b      	uxth	r3, r3
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	f000 80cc 	beq.w	800fa62 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800f8ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	f000 80c7 	beq.w	800fa62 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8dc:	e853 3f00 	ldrex	r3, [r3]
 800f8e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f8e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f8e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	461a      	mov	r2, r3
 800f8f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f8f6:	647b      	str	r3, [r7, #68]	; 0x44
 800f8f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f8fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8fe:	e841 2300 	strex	r3, r2, [r1]
 800f902:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f906:	2b00      	cmp	r3, #0
 800f908:	d1e4      	bne.n	800f8d4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	3308      	adds	r3, #8
 800f910:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f914:	e853 3f00 	ldrex	r3, [r3]
 800f918:	623b      	str	r3, [r7, #32]
   return(result);
 800f91a:	6a3a      	ldr	r2, [r7, #32]
 800f91c:	4b54      	ldr	r3, [pc, #336]	; (800fa70 <HAL_UART_IRQHandler+0x738>)
 800f91e:	4013      	ands	r3, r2
 800f920:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	3308      	adds	r3, #8
 800f92a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f92e:	633a      	str	r2, [r7, #48]	; 0x30
 800f930:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f936:	e841 2300 	strex	r3, r2, [r1]
 800f93a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d1e3      	bne.n	800f90a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2220      	movs	r2, #32
 800f946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2200      	movs	r2, #0
 800f94e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2200      	movs	r2, #0
 800f954:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f95c:	693b      	ldr	r3, [r7, #16]
 800f95e:	e853 3f00 	ldrex	r3, [r3]
 800f962:	60fb      	str	r3, [r7, #12]
   return(result);
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	f023 0310 	bic.w	r3, r3, #16
 800f96a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	461a      	mov	r2, r3
 800f974:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f978:	61fb      	str	r3, [r7, #28]
 800f97a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f97c:	69b9      	ldr	r1, [r7, #24]
 800f97e:	69fa      	ldr	r2, [r7, #28]
 800f980:	e841 2300 	strex	r3, r2, [r1]
 800f984:	617b      	str	r3, [r7, #20]
   return(result);
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d1e4      	bne.n	800f956 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f98c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f990:	4619      	mov	r1, r3
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f7f3 fcfe 	bl	8003394 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f998:	e063      	b.n	800fa62 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f99a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f99e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d00e      	beq.n	800f9c4 <HAL_UART_IRQHandler+0x68c>
 800f9a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f9aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d008      	beq.n	800f9c4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f9ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f001 fa80 	bl	8010ec2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f9c2:	e051      	b.n	800fa68 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f9c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d014      	beq.n	800f9fa <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f9d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f9d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d105      	bne.n	800f9e8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f9dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f9e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d008      	beq.n	800f9fa <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d03a      	beq.n	800fa66 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	4798      	blx	r3
    }
    return;
 800f9f8:	e035      	b.n	800fa66 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f9fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d009      	beq.n	800fa1a <HAL_UART_IRQHandler+0x6e2>
 800fa06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d003      	beq.n	800fa1a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f001 fa2a 	bl	8010e6c <UART_EndTransmit_IT>
    return;
 800fa18:	e026      	b.n	800fa68 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fa1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d009      	beq.n	800fa3a <HAL_UART_IRQHandler+0x702>
 800fa26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa2a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d003      	beq.n	800fa3a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f001 fa59 	bl	8010eea <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fa38:	e016      	b.n	800fa68 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fa3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d010      	beq.n	800fa68 <HAL_UART_IRQHandler+0x730>
 800fa46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	da0c      	bge.n	800fa68 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f001 fa41 	bl	8010ed6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fa54:	e008      	b.n	800fa68 <HAL_UART_IRQHandler+0x730>
      return;
 800fa56:	bf00      	nop
 800fa58:	e006      	b.n	800fa68 <HAL_UART_IRQHandler+0x730>
    return;
 800fa5a:	bf00      	nop
 800fa5c:	e004      	b.n	800fa68 <HAL_UART_IRQHandler+0x730>
      return;
 800fa5e:	bf00      	nop
 800fa60:	e002      	b.n	800fa68 <HAL_UART_IRQHandler+0x730>
      return;
 800fa62:	bf00      	nop
 800fa64:	e000      	b.n	800fa68 <HAL_UART_IRQHandler+0x730>
    return;
 800fa66:	bf00      	nop
  }
}
 800fa68:	37e8      	adds	r7, #232	; 0xe8
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	effffffe 	.word	0xeffffffe

0800fa74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fa74:	b480      	push	{r7}
 800fa76:	b083      	sub	sp, #12
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fa7c:	bf00      	nop
 800fa7e:	370c      	adds	r7, #12
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr

0800fa88 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fa88:	b480      	push	{r7}
 800fa8a:	b083      	sub	sp, #12
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800fa90:	bf00      	nop
 800fa92:	370c      	adds	r7, #12
 800fa94:	46bd      	mov	sp, r7
 800fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9a:	4770      	bx	lr

0800fa9c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b083      	sub	sp, #12
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800faa4:	bf00      	nop
 800faa6:	370c      	adds	r7, #12
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr

0800fab0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fab0:	b480      	push	{r7}
 800fab2:	b083      	sub	sp, #12
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800fab8:	bf00      	nop
 800faba:	370c      	adds	r7, #12
 800fabc:	46bd      	mov	sp, r7
 800fabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac2:	4770      	bx	lr

0800fac4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fac4:	b480      	push	{r7}
 800fac6:	b083      	sub	sp, #12
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800facc:	bf00      	nop
 800face:	370c      	adds	r7, #12
 800fad0:	46bd      	mov	sp, r7
 800fad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad6:	4770      	bx	lr

0800fad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fadc:	b092      	sub	sp, #72	; 0x48
 800fade:	af00      	add	r7, sp, #0
 800fae0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fae2:	2300      	movs	r3, #0
 800fae4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	689a      	ldr	r2, [r3, #8]
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	691b      	ldr	r3, [r3, #16]
 800faf0:	431a      	orrs	r2, r3
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	695b      	ldr	r3, [r3, #20]
 800faf6:	431a      	orrs	r2, r3
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	69db      	ldr	r3, [r3, #28]
 800fafc:	4313      	orrs	r3, r2
 800fafe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	681a      	ldr	r2, [r3, #0]
 800fb06:	4bbe      	ldr	r3, [pc, #760]	; (800fe00 <UART_SetConfig+0x328>)
 800fb08:	4013      	ands	r3, r2
 800fb0a:	697a      	ldr	r2, [r7, #20]
 800fb0c:	6812      	ldr	r2, [r2, #0]
 800fb0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb10:	430b      	orrs	r3, r1
 800fb12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fb14:	697b      	ldr	r3, [r7, #20]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	685b      	ldr	r3, [r3, #4]
 800fb1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	68da      	ldr	r2, [r3, #12]
 800fb22:	697b      	ldr	r3, [r7, #20]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	430a      	orrs	r2, r1
 800fb28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fb2a:	697b      	ldr	r3, [r7, #20]
 800fb2c:	699b      	ldr	r3, [r3, #24]
 800fb2e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	4ab3      	ldr	r2, [pc, #716]	; (800fe04 <UART_SetConfig+0x32c>)
 800fb36:	4293      	cmp	r3, r2
 800fb38:	d004      	beq.n	800fb44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	6a1b      	ldr	r3, [r3, #32]
 800fb3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fb40:	4313      	orrs	r3, r2
 800fb42:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	689a      	ldr	r2, [r3, #8]
 800fb4a:	4baf      	ldr	r3, [pc, #700]	; (800fe08 <UART_SetConfig+0x330>)
 800fb4c:	4013      	ands	r3, r2
 800fb4e:	697a      	ldr	r2, [r7, #20]
 800fb50:	6812      	ldr	r2, [r2, #0]
 800fb52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb54:	430b      	orrs	r3, r1
 800fb56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fb58:	697b      	ldr	r3, [r7, #20]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb5e:	f023 010f 	bic.w	r1, r3, #15
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	430a      	orrs	r2, r1
 800fb6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	4aa6      	ldr	r2, [pc, #664]	; (800fe0c <UART_SetConfig+0x334>)
 800fb74:	4293      	cmp	r3, r2
 800fb76:	d177      	bne.n	800fc68 <UART_SetConfig+0x190>
 800fb78:	4ba5      	ldr	r3, [pc, #660]	; (800fe10 <UART_SetConfig+0x338>)
 800fb7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fb80:	2b28      	cmp	r3, #40	; 0x28
 800fb82:	d86d      	bhi.n	800fc60 <UART_SetConfig+0x188>
 800fb84:	a201      	add	r2, pc, #4	; (adr r2, 800fb8c <UART_SetConfig+0xb4>)
 800fb86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb8a:	bf00      	nop
 800fb8c:	0800fc31 	.word	0x0800fc31
 800fb90:	0800fc61 	.word	0x0800fc61
 800fb94:	0800fc61 	.word	0x0800fc61
 800fb98:	0800fc61 	.word	0x0800fc61
 800fb9c:	0800fc61 	.word	0x0800fc61
 800fba0:	0800fc61 	.word	0x0800fc61
 800fba4:	0800fc61 	.word	0x0800fc61
 800fba8:	0800fc61 	.word	0x0800fc61
 800fbac:	0800fc39 	.word	0x0800fc39
 800fbb0:	0800fc61 	.word	0x0800fc61
 800fbb4:	0800fc61 	.word	0x0800fc61
 800fbb8:	0800fc61 	.word	0x0800fc61
 800fbbc:	0800fc61 	.word	0x0800fc61
 800fbc0:	0800fc61 	.word	0x0800fc61
 800fbc4:	0800fc61 	.word	0x0800fc61
 800fbc8:	0800fc61 	.word	0x0800fc61
 800fbcc:	0800fc41 	.word	0x0800fc41
 800fbd0:	0800fc61 	.word	0x0800fc61
 800fbd4:	0800fc61 	.word	0x0800fc61
 800fbd8:	0800fc61 	.word	0x0800fc61
 800fbdc:	0800fc61 	.word	0x0800fc61
 800fbe0:	0800fc61 	.word	0x0800fc61
 800fbe4:	0800fc61 	.word	0x0800fc61
 800fbe8:	0800fc61 	.word	0x0800fc61
 800fbec:	0800fc49 	.word	0x0800fc49
 800fbf0:	0800fc61 	.word	0x0800fc61
 800fbf4:	0800fc61 	.word	0x0800fc61
 800fbf8:	0800fc61 	.word	0x0800fc61
 800fbfc:	0800fc61 	.word	0x0800fc61
 800fc00:	0800fc61 	.word	0x0800fc61
 800fc04:	0800fc61 	.word	0x0800fc61
 800fc08:	0800fc61 	.word	0x0800fc61
 800fc0c:	0800fc51 	.word	0x0800fc51
 800fc10:	0800fc61 	.word	0x0800fc61
 800fc14:	0800fc61 	.word	0x0800fc61
 800fc18:	0800fc61 	.word	0x0800fc61
 800fc1c:	0800fc61 	.word	0x0800fc61
 800fc20:	0800fc61 	.word	0x0800fc61
 800fc24:	0800fc61 	.word	0x0800fc61
 800fc28:	0800fc61 	.word	0x0800fc61
 800fc2c:	0800fc59 	.word	0x0800fc59
 800fc30:	2301      	movs	r3, #1
 800fc32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc36:	e222      	b.n	801007e <UART_SetConfig+0x5a6>
 800fc38:	2304      	movs	r3, #4
 800fc3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc3e:	e21e      	b.n	801007e <UART_SetConfig+0x5a6>
 800fc40:	2308      	movs	r3, #8
 800fc42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc46:	e21a      	b.n	801007e <UART_SetConfig+0x5a6>
 800fc48:	2310      	movs	r3, #16
 800fc4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc4e:	e216      	b.n	801007e <UART_SetConfig+0x5a6>
 800fc50:	2320      	movs	r3, #32
 800fc52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc56:	e212      	b.n	801007e <UART_SetConfig+0x5a6>
 800fc58:	2340      	movs	r3, #64	; 0x40
 800fc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc5e:	e20e      	b.n	801007e <UART_SetConfig+0x5a6>
 800fc60:	2380      	movs	r3, #128	; 0x80
 800fc62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc66:	e20a      	b.n	801007e <UART_SetConfig+0x5a6>
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4a69      	ldr	r2, [pc, #420]	; (800fe14 <UART_SetConfig+0x33c>)
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d130      	bne.n	800fcd4 <UART_SetConfig+0x1fc>
 800fc72:	4b67      	ldr	r3, [pc, #412]	; (800fe10 <UART_SetConfig+0x338>)
 800fc74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc76:	f003 0307 	and.w	r3, r3, #7
 800fc7a:	2b05      	cmp	r3, #5
 800fc7c:	d826      	bhi.n	800fccc <UART_SetConfig+0x1f4>
 800fc7e:	a201      	add	r2, pc, #4	; (adr r2, 800fc84 <UART_SetConfig+0x1ac>)
 800fc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc84:	0800fc9d 	.word	0x0800fc9d
 800fc88:	0800fca5 	.word	0x0800fca5
 800fc8c:	0800fcad 	.word	0x0800fcad
 800fc90:	0800fcb5 	.word	0x0800fcb5
 800fc94:	0800fcbd 	.word	0x0800fcbd
 800fc98:	0800fcc5 	.word	0x0800fcc5
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fca2:	e1ec      	b.n	801007e <UART_SetConfig+0x5a6>
 800fca4:	2304      	movs	r3, #4
 800fca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcaa:	e1e8      	b.n	801007e <UART_SetConfig+0x5a6>
 800fcac:	2308      	movs	r3, #8
 800fcae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcb2:	e1e4      	b.n	801007e <UART_SetConfig+0x5a6>
 800fcb4:	2310      	movs	r3, #16
 800fcb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcba:	e1e0      	b.n	801007e <UART_SetConfig+0x5a6>
 800fcbc:	2320      	movs	r3, #32
 800fcbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcc2:	e1dc      	b.n	801007e <UART_SetConfig+0x5a6>
 800fcc4:	2340      	movs	r3, #64	; 0x40
 800fcc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcca:	e1d8      	b.n	801007e <UART_SetConfig+0x5a6>
 800fccc:	2380      	movs	r3, #128	; 0x80
 800fcce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcd2:	e1d4      	b.n	801007e <UART_SetConfig+0x5a6>
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	4a4f      	ldr	r2, [pc, #316]	; (800fe18 <UART_SetConfig+0x340>)
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	d130      	bne.n	800fd40 <UART_SetConfig+0x268>
 800fcde:	4b4c      	ldr	r3, [pc, #304]	; (800fe10 <UART_SetConfig+0x338>)
 800fce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fce2:	f003 0307 	and.w	r3, r3, #7
 800fce6:	2b05      	cmp	r3, #5
 800fce8:	d826      	bhi.n	800fd38 <UART_SetConfig+0x260>
 800fcea:	a201      	add	r2, pc, #4	; (adr r2, 800fcf0 <UART_SetConfig+0x218>)
 800fcec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcf0:	0800fd09 	.word	0x0800fd09
 800fcf4:	0800fd11 	.word	0x0800fd11
 800fcf8:	0800fd19 	.word	0x0800fd19
 800fcfc:	0800fd21 	.word	0x0800fd21
 800fd00:	0800fd29 	.word	0x0800fd29
 800fd04:	0800fd31 	.word	0x0800fd31
 800fd08:	2300      	movs	r3, #0
 800fd0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd0e:	e1b6      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd10:	2304      	movs	r3, #4
 800fd12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd16:	e1b2      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd18:	2308      	movs	r3, #8
 800fd1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd1e:	e1ae      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd20:	2310      	movs	r3, #16
 800fd22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd26:	e1aa      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd28:	2320      	movs	r3, #32
 800fd2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd2e:	e1a6      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd30:	2340      	movs	r3, #64	; 0x40
 800fd32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd36:	e1a2      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd38:	2380      	movs	r3, #128	; 0x80
 800fd3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd3e:	e19e      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	4a35      	ldr	r2, [pc, #212]	; (800fe1c <UART_SetConfig+0x344>)
 800fd46:	4293      	cmp	r3, r2
 800fd48:	d130      	bne.n	800fdac <UART_SetConfig+0x2d4>
 800fd4a:	4b31      	ldr	r3, [pc, #196]	; (800fe10 <UART_SetConfig+0x338>)
 800fd4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd4e:	f003 0307 	and.w	r3, r3, #7
 800fd52:	2b05      	cmp	r3, #5
 800fd54:	d826      	bhi.n	800fda4 <UART_SetConfig+0x2cc>
 800fd56:	a201      	add	r2, pc, #4	; (adr r2, 800fd5c <UART_SetConfig+0x284>)
 800fd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd5c:	0800fd75 	.word	0x0800fd75
 800fd60:	0800fd7d 	.word	0x0800fd7d
 800fd64:	0800fd85 	.word	0x0800fd85
 800fd68:	0800fd8d 	.word	0x0800fd8d
 800fd6c:	0800fd95 	.word	0x0800fd95
 800fd70:	0800fd9d 	.word	0x0800fd9d
 800fd74:	2300      	movs	r3, #0
 800fd76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd7a:	e180      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd7c:	2304      	movs	r3, #4
 800fd7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd82:	e17c      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd84:	2308      	movs	r3, #8
 800fd86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd8a:	e178      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd8c:	2310      	movs	r3, #16
 800fd8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd92:	e174      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd94:	2320      	movs	r3, #32
 800fd96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd9a:	e170      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd9c:	2340      	movs	r3, #64	; 0x40
 800fd9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fda2:	e16c      	b.n	801007e <UART_SetConfig+0x5a6>
 800fda4:	2380      	movs	r3, #128	; 0x80
 800fda6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdaa:	e168      	b.n	801007e <UART_SetConfig+0x5a6>
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4a1b      	ldr	r2, [pc, #108]	; (800fe20 <UART_SetConfig+0x348>)
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d142      	bne.n	800fe3c <UART_SetConfig+0x364>
 800fdb6:	4b16      	ldr	r3, [pc, #88]	; (800fe10 <UART_SetConfig+0x338>)
 800fdb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdba:	f003 0307 	and.w	r3, r3, #7
 800fdbe:	2b05      	cmp	r3, #5
 800fdc0:	d838      	bhi.n	800fe34 <UART_SetConfig+0x35c>
 800fdc2:	a201      	add	r2, pc, #4	; (adr r2, 800fdc8 <UART_SetConfig+0x2f0>)
 800fdc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdc8:	0800fde1 	.word	0x0800fde1
 800fdcc:	0800fde9 	.word	0x0800fde9
 800fdd0:	0800fdf1 	.word	0x0800fdf1
 800fdd4:	0800fdf9 	.word	0x0800fdf9
 800fdd8:	0800fe25 	.word	0x0800fe25
 800fddc:	0800fe2d 	.word	0x0800fe2d
 800fde0:	2300      	movs	r3, #0
 800fde2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fde6:	e14a      	b.n	801007e <UART_SetConfig+0x5a6>
 800fde8:	2304      	movs	r3, #4
 800fdea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdee:	e146      	b.n	801007e <UART_SetConfig+0x5a6>
 800fdf0:	2308      	movs	r3, #8
 800fdf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdf6:	e142      	b.n	801007e <UART_SetConfig+0x5a6>
 800fdf8:	2310      	movs	r3, #16
 800fdfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdfe:	e13e      	b.n	801007e <UART_SetConfig+0x5a6>
 800fe00:	cfff69f3 	.word	0xcfff69f3
 800fe04:	58000c00 	.word	0x58000c00
 800fe08:	11fff4ff 	.word	0x11fff4ff
 800fe0c:	40011000 	.word	0x40011000
 800fe10:	58024400 	.word	0x58024400
 800fe14:	40004400 	.word	0x40004400
 800fe18:	40004800 	.word	0x40004800
 800fe1c:	40004c00 	.word	0x40004c00
 800fe20:	40005000 	.word	0x40005000
 800fe24:	2320      	movs	r3, #32
 800fe26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe2a:	e128      	b.n	801007e <UART_SetConfig+0x5a6>
 800fe2c:	2340      	movs	r3, #64	; 0x40
 800fe2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe32:	e124      	b.n	801007e <UART_SetConfig+0x5a6>
 800fe34:	2380      	movs	r3, #128	; 0x80
 800fe36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe3a:	e120      	b.n	801007e <UART_SetConfig+0x5a6>
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	4acb      	ldr	r2, [pc, #812]	; (8010170 <UART_SetConfig+0x698>)
 800fe42:	4293      	cmp	r3, r2
 800fe44:	d176      	bne.n	800ff34 <UART_SetConfig+0x45c>
 800fe46:	4bcb      	ldr	r3, [pc, #812]	; (8010174 <UART_SetConfig+0x69c>)
 800fe48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fe4e:	2b28      	cmp	r3, #40	; 0x28
 800fe50:	d86c      	bhi.n	800ff2c <UART_SetConfig+0x454>
 800fe52:	a201      	add	r2, pc, #4	; (adr r2, 800fe58 <UART_SetConfig+0x380>)
 800fe54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe58:	0800fefd 	.word	0x0800fefd
 800fe5c:	0800ff2d 	.word	0x0800ff2d
 800fe60:	0800ff2d 	.word	0x0800ff2d
 800fe64:	0800ff2d 	.word	0x0800ff2d
 800fe68:	0800ff2d 	.word	0x0800ff2d
 800fe6c:	0800ff2d 	.word	0x0800ff2d
 800fe70:	0800ff2d 	.word	0x0800ff2d
 800fe74:	0800ff2d 	.word	0x0800ff2d
 800fe78:	0800ff05 	.word	0x0800ff05
 800fe7c:	0800ff2d 	.word	0x0800ff2d
 800fe80:	0800ff2d 	.word	0x0800ff2d
 800fe84:	0800ff2d 	.word	0x0800ff2d
 800fe88:	0800ff2d 	.word	0x0800ff2d
 800fe8c:	0800ff2d 	.word	0x0800ff2d
 800fe90:	0800ff2d 	.word	0x0800ff2d
 800fe94:	0800ff2d 	.word	0x0800ff2d
 800fe98:	0800ff0d 	.word	0x0800ff0d
 800fe9c:	0800ff2d 	.word	0x0800ff2d
 800fea0:	0800ff2d 	.word	0x0800ff2d
 800fea4:	0800ff2d 	.word	0x0800ff2d
 800fea8:	0800ff2d 	.word	0x0800ff2d
 800feac:	0800ff2d 	.word	0x0800ff2d
 800feb0:	0800ff2d 	.word	0x0800ff2d
 800feb4:	0800ff2d 	.word	0x0800ff2d
 800feb8:	0800ff15 	.word	0x0800ff15
 800febc:	0800ff2d 	.word	0x0800ff2d
 800fec0:	0800ff2d 	.word	0x0800ff2d
 800fec4:	0800ff2d 	.word	0x0800ff2d
 800fec8:	0800ff2d 	.word	0x0800ff2d
 800fecc:	0800ff2d 	.word	0x0800ff2d
 800fed0:	0800ff2d 	.word	0x0800ff2d
 800fed4:	0800ff2d 	.word	0x0800ff2d
 800fed8:	0800ff1d 	.word	0x0800ff1d
 800fedc:	0800ff2d 	.word	0x0800ff2d
 800fee0:	0800ff2d 	.word	0x0800ff2d
 800fee4:	0800ff2d 	.word	0x0800ff2d
 800fee8:	0800ff2d 	.word	0x0800ff2d
 800feec:	0800ff2d 	.word	0x0800ff2d
 800fef0:	0800ff2d 	.word	0x0800ff2d
 800fef4:	0800ff2d 	.word	0x0800ff2d
 800fef8:	0800ff25 	.word	0x0800ff25
 800fefc:	2301      	movs	r3, #1
 800fefe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff02:	e0bc      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff04:	2304      	movs	r3, #4
 800ff06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff0a:	e0b8      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff0c:	2308      	movs	r3, #8
 800ff0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff12:	e0b4      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff14:	2310      	movs	r3, #16
 800ff16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff1a:	e0b0      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff1c:	2320      	movs	r3, #32
 800ff1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff22:	e0ac      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff24:	2340      	movs	r3, #64	; 0x40
 800ff26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff2a:	e0a8      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff2c:	2380      	movs	r3, #128	; 0x80
 800ff2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff32:	e0a4      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	4a8f      	ldr	r2, [pc, #572]	; (8010178 <UART_SetConfig+0x6a0>)
 800ff3a:	4293      	cmp	r3, r2
 800ff3c:	d130      	bne.n	800ffa0 <UART_SetConfig+0x4c8>
 800ff3e:	4b8d      	ldr	r3, [pc, #564]	; (8010174 <UART_SetConfig+0x69c>)
 800ff40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff42:	f003 0307 	and.w	r3, r3, #7
 800ff46:	2b05      	cmp	r3, #5
 800ff48:	d826      	bhi.n	800ff98 <UART_SetConfig+0x4c0>
 800ff4a:	a201      	add	r2, pc, #4	; (adr r2, 800ff50 <UART_SetConfig+0x478>)
 800ff4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff50:	0800ff69 	.word	0x0800ff69
 800ff54:	0800ff71 	.word	0x0800ff71
 800ff58:	0800ff79 	.word	0x0800ff79
 800ff5c:	0800ff81 	.word	0x0800ff81
 800ff60:	0800ff89 	.word	0x0800ff89
 800ff64:	0800ff91 	.word	0x0800ff91
 800ff68:	2300      	movs	r3, #0
 800ff6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff6e:	e086      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff70:	2304      	movs	r3, #4
 800ff72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff76:	e082      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff78:	2308      	movs	r3, #8
 800ff7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff7e:	e07e      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff80:	2310      	movs	r3, #16
 800ff82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff86:	e07a      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff88:	2320      	movs	r3, #32
 800ff8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff8e:	e076      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff90:	2340      	movs	r3, #64	; 0x40
 800ff92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff96:	e072      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff98:	2380      	movs	r3, #128	; 0x80
 800ff9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff9e:	e06e      	b.n	801007e <UART_SetConfig+0x5a6>
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	4a75      	ldr	r2, [pc, #468]	; (801017c <UART_SetConfig+0x6a4>)
 800ffa6:	4293      	cmp	r3, r2
 800ffa8:	d130      	bne.n	801000c <UART_SetConfig+0x534>
 800ffaa:	4b72      	ldr	r3, [pc, #456]	; (8010174 <UART_SetConfig+0x69c>)
 800ffac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffae:	f003 0307 	and.w	r3, r3, #7
 800ffb2:	2b05      	cmp	r3, #5
 800ffb4:	d826      	bhi.n	8010004 <UART_SetConfig+0x52c>
 800ffb6:	a201      	add	r2, pc, #4	; (adr r2, 800ffbc <UART_SetConfig+0x4e4>)
 800ffb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffbc:	0800ffd5 	.word	0x0800ffd5
 800ffc0:	0800ffdd 	.word	0x0800ffdd
 800ffc4:	0800ffe5 	.word	0x0800ffe5
 800ffc8:	0800ffed 	.word	0x0800ffed
 800ffcc:	0800fff5 	.word	0x0800fff5
 800ffd0:	0800fffd 	.word	0x0800fffd
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffda:	e050      	b.n	801007e <UART_SetConfig+0x5a6>
 800ffdc:	2304      	movs	r3, #4
 800ffde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffe2:	e04c      	b.n	801007e <UART_SetConfig+0x5a6>
 800ffe4:	2308      	movs	r3, #8
 800ffe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffea:	e048      	b.n	801007e <UART_SetConfig+0x5a6>
 800ffec:	2310      	movs	r3, #16
 800ffee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fff2:	e044      	b.n	801007e <UART_SetConfig+0x5a6>
 800fff4:	2320      	movs	r3, #32
 800fff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fffa:	e040      	b.n	801007e <UART_SetConfig+0x5a6>
 800fffc:	2340      	movs	r3, #64	; 0x40
 800fffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010002:	e03c      	b.n	801007e <UART_SetConfig+0x5a6>
 8010004:	2380      	movs	r3, #128	; 0x80
 8010006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801000a:	e038      	b.n	801007e <UART_SetConfig+0x5a6>
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	4a5b      	ldr	r2, [pc, #364]	; (8010180 <UART_SetConfig+0x6a8>)
 8010012:	4293      	cmp	r3, r2
 8010014:	d130      	bne.n	8010078 <UART_SetConfig+0x5a0>
 8010016:	4b57      	ldr	r3, [pc, #348]	; (8010174 <UART_SetConfig+0x69c>)
 8010018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801001a:	f003 0307 	and.w	r3, r3, #7
 801001e:	2b05      	cmp	r3, #5
 8010020:	d826      	bhi.n	8010070 <UART_SetConfig+0x598>
 8010022:	a201      	add	r2, pc, #4	; (adr r2, 8010028 <UART_SetConfig+0x550>)
 8010024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010028:	08010041 	.word	0x08010041
 801002c:	08010049 	.word	0x08010049
 8010030:	08010051 	.word	0x08010051
 8010034:	08010059 	.word	0x08010059
 8010038:	08010061 	.word	0x08010061
 801003c:	08010069 	.word	0x08010069
 8010040:	2302      	movs	r3, #2
 8010042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010046:	e01a      	b.n	801007e <UART_SetConfig+0x5a6>
 8010048:	2304      	movs	r3, #4
 801004a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801004e:	e016      	b.n	801007e <UART_SetConfig+0x5a6>
 8010050:	2308      	movs	r3, #8
 8010052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010056:	e012      	b.n	801007e <UART_SetConfig+0x5a6>
 8010058:	2310      	movs	r3, #16
 801005a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801005e:	e00e      	b.n	801007e <UART_SetConfig+0x5a6>
 8010060:	2320      	movs	r3, #32
 8010062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010066:	e00a      	b.n	801007e <UART_SetConfig+0x5a6>
 8010068:	2340      	movs	r3, #64	; 0x40
 801006a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801006e:	e006      	b.n	801007e <UART_SetConfig+0x5a6>
 8010070:	2380      	movs	r3, #128	; 0x80
 8010072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010076:	e002      	b.n	801007e <UART_SetConfig+0x5a6>
 8010078:	2380      	movs	r3, #128	; 0x80
 801007a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	4a3f      	ldr	r2, [pc, #252]	; (8010180 <UART_SetConfig+0x6a8>)
 8010084:	4293      	cmp	r3, r2
 8010086:	f040 80f8 	bne.w	801027a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801008a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801008e:	2b20      	cmp	r3, #32
 8010090:	dc46      	bgt.n	8010120 <UART_SetConfig+0x648>
 8010092:	2b02      	cmp	r3, #2
 8010094:	f2c0 8082 	blt.w	801019c <UART_SetConfig+0x6c4>
 8010098:	3b02      	subs	r3, #2
 801009a:	2b1e      	cmp	r3, #30
 801009c:	d87e      	bhi.n	801019c <UART_SetConfig+0x6c4>
 801009e:	a201      	add	r2, pc, #4	; (adr r2, 80100a4 <UART_SetConfig+0x5cc>)
 80100a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100a4:	08010127 	.word	0x08010127
 80100a8:	0801019d 	.word	0x0801019d
 80100ac:	0801012f 	.word	0x0801012f
 80100b0:	0801019d 	.word	0x0801019d
 80100b4:	0801019d 	.word	0x0801019d
 80100b8:	0801019d 	.word	0x0801019d
 80100bc:	0801013f 	.word	0x0801013f
 80100c0:	0801019d 	.word	0x0801019d
 80100c4:	0801019d 	.word	0x0801019d
 80100c8:	0801019d 	.word	0x0801019d
 80100cc:	0801019d 	.word	0x0801019d
 80100d0:	0801019d 	.word	0x0801019d
 80100d4:	0801019d 	.word	0x0801019d
 80100d8:	0801019d 	.word	0x0801019d
 80100dc:	0801014f 	.word	0x0801014f
 80100e0:	0801019d 	.word	0x0801019d
 80100e4:	0801019d 	.word	0x0801019d
 80100e8:	0801019d 	.word	0x0801019d
 80100ec:	0801019d 	.word	0x0801019d
 80100f0:	0801019d 	.word	0x0801019d
 80100f4:	0801019d 	.word	0x0801019d
 80100f8:	0801019d 	.word	0x0801019d
 80100fc:	0801019d 	.word	0x0801019d
 8010100:	0801019d 	.word	0x0801019d
 8010104:	0801019d 	.word	0x0801019d
 8010108:	0801019d 	.word	0x0801019d
 801010c:	0801019d 	.word	0x0801019d
 8010110:	0801019d 	.word	0x0801019d
 8010114:	0801019d 	.word	0x0801019d
 8010118:	0801019d 	.word	0x0801019d
 801011c:	0801018f 	.word	0x0801018f
 8010120:	2b40      	cmp	r3, #64	; 0x40
 8010122:	d037      	beq.n	8010194 <UART_SetConfig+0x6bc>
 8010124:	e03a      	b.n	801019c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010126:	f7fc fa63 	bl	800c5f0 <HAL_RCCEx_GetD3PCLK1Freq>
 801012a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801012c:	e03c      	b.n	80101a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801012e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010132:	4618      	mov	r0, r3
 8010134:	f7fc fa72 	bl	800c61c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801013a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801013c:	e034      	b.n	80101a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801013e:	f107 0318 	add.w	r3, r7, #24
 8010142:	4618      	mov	r0, r3
 8010144:	f7fc fbbe 	bl	800c8c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010148:	69fb      	ldr	r3, [r7, #28]
 801014a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801014c:	e02c      	b.n	80101a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801014e:	4b09      	ldr	r3, [pc, #36]	; (8010174 <UART_SetConfig+0x69c>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	f003 0320 	and.w	r3, r3, #32
 8010156:	2b00      	cmp	r3, #0
 8010158:	d016      	beq.n	8010188 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801015a:	4b06      	ldr	r3, [pc, #24]	; (8010174 <UART_SetConfig+0x69c>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	08db      	lsrs	r3, r3, #3
 8010160:	f003 0303 	and.w	r3, r3, #3
 8010164:	4a07      	ldr	r2, [pc, #28]	; (8010184 <UART_SetConfig+0x6ac>)
 8010166:	fa22 f303 	lsr.w	r3, r2, r3
 801016a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801016c:	e01c      	b.n	80101a8 <UART_SetConfig+0x6d0>
 801016e:	bf00      	nop
 8010170:	40011400 	.word	0x40011400
 8010174:	58024400 	.word	0x58024400
 8010178:	40007800 	.word	0x40007800
 801017c:	40007c00 	.word	0x40007c00
 8010180:	58000c00 	.word	0x58000c00
 8010184:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010188:	4b9d      	ldr	r3, [pc, #628]	; (8010400 <UART_SetConfig+0x928>)
 801018a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801018c:	e00c      	b.n	80101a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801018e:	4b9d      	ldr	r3, [pc, #628]	; (8010404 <UART_SetConfig+0x92c>)
 8010190:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010192:	e009      	b.n	80101a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010198:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801019a:	e005      	b.n	80101a8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 801019c:	2300      	movs	r3, #0
 801019e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80101a0:	2301      	movs	r3, #1
 80101a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80101a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80101a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	f000 81de 	beq.w	801056c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80101b0:	697b      	ldr	r3, [r7, #20]
 80101b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101b4:	4a94      	ldr	r2, [pc, #592]	; (8010408 <UART_SetConfig+0x930>)
 80101b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101ba:	461a      	mov	r2, r3
 80101bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101be:	fbb3 f3f2 	udiv	r3, r3, r2
 80101c2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	685a      	ldr	r2, [r3, #4]
 80101c8:	4613      	mov	r3, r2
 80101ca:	005b      	lsls	r3, r3, #1
 80101cc:	4413      	add	r3, r2
 80101ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101d0:	429a      	cmp	r2, r3
 80101d2:	d305      	bcc.n	80101e0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	685b      	ldr	r3, [r3, #4]
 80101d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80101da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101dc:	429a      	cmp	r2, r3
 80101de:	d903      	bls.n	80101e8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80101e0:	2301      	movs	r3, #1
 80101e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80101e6:	e1c1      	b.n	801056c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80101e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101ea:	2200      	movs	r2, #0
 80101ec:	60bb      	str	r3, [r7, #8]
 80101ee:	60fa      	str	r2, [r7, #12]
 80101f0:	697b      	ldr	r3, [r7, #20]
 80101f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101f4:	4a84      	ldr	r2, [pc, #528]	; (8010408 <UART_SetConfig+0x930>)
 80101f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101fa:	b29b      	uxth	r3, r3
 80101fc:	2200      	movs	r2, #0
 80101fe:	603b      	str	r3, [r7, #0]
 8010200:	607a      	str	r2, [r7, #4]
 8010202:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010206:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801020a:	f7f0 f8c1 	bl	8000390 <__aeabi_uldivmod>
 801020e:	4602      	mov	r2, r0
 8010210:	460b      	mov	r3, r1
 8010212:	4610      	mov	r0, r2
 8010214:	4619      	mov	r1, r3
 8010216:	f04f 0200 	mov.w	r2, #0
 801021a:	f04f 0300 	mov.w	r3, #0
 801021e:	020b      	lsls	r3, r1, #8
 8010220:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010224:	0202      	lsls	r2, r0, #8
 8010226:	6979      	ldr	r1, [r7, #20]
 8010228:	6849      	ldr	r1, [r1, #4]
 801022a:	0849      	lsrs	r1, r1, #1
 801022c:	2000      	movs	r0, #0
 801022e:	460c      	mov	r4, r1
 8010230:	4605      	mov	r5, r0
 8010232:	eb12 0804 	adds.w	r8, r2, r4
 8010236:	eb43 0905 	adc.w	r9, r3, r5
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	685b      	ldr	r3, [r3, #4]
 801023e:	2200      	movs	r2, #0
 8010240:	469a      	mov	sl, r3
 8010242:	4693      	mov	fp, r2
 8010244:	4652      	mov	r2, sl
 8010246:	465b      	mov	r3, fp
 8010248:	4640      	mov	r0, r8
 801024a:	4649      	mov	r1, r9
 801024c:	f7f0 f8a0 	bl	8000390 <__aeabi_uldivmod>
 8010250:	4602      	mov	r2, r0
 8010252:	460b      	mov	r3, r1
 8010254:	4613      	mov	r3, r2
 8010256:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801025a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801025e:	d308      	bcc.n	8010272 <UART_SetConfig+0x79a>
 8010260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010266:	d204      	bcs.n	8010272 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010268:	697b      	ldr	r3, [r7, #20]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801026e:	60da      	str	r2, [r3, #12]
 8010270:	e17c      	b.n	801056c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8010272:	2301      	movs	r3, #1
 8010274:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010278:	e178      	b.n	801056c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801027a:	697b      	ldr	r3, [r7, #20]
 801027c:	69db      	ldr	r3, [r3, #28]
 801027e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010282:	f040 80c5 	bne.w	8010410 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010286:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801028a:	2b20      	cmp	r3, #32
 801028c:	dc48      	bgt.n	8010320 <UART_SetConfig+0x848>
 801028e:	2b00      	cmp	r3, #0
 8010290:	db7b      	blt.n	801038a <UART_SetConfig+0x8b2>
 8010292:	2b20      	cmp	r3, #32
 8010294:	d879      	bhi.n	801038a <UART_SetConfig+0x8b2>
 8010296:	a201      	add	r2, pc, #4	; (adr r2, 801029c <UART_SetConfig+0x7c4>)
 8010298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801029c:	08010327 	.word	0x08010327
 80102a0:	0801032f 	.word	0x0801032f
 80102a4:	0801038b 	.word	0x0801038b
 80102a8:	0801038b 	.word	0x0801038b
 80102ac:	08010337 	.word	0x08010337
 80102b0:	0801038b 	.word	0x0801038b
 80102b4:	0801038b 	.word	0x0801038b
 80102b8:	0801038b 	.word	0x0801038b
 80102bc:	08010347 	.word	0x08010347
 80102c0:	0801038b 	.word	0x0801038b
 80102c4:	0801038b 	.word	0x0801038b
 80102c8:	0801038b 	.word	0x0801038b
 80102cc:	0801038b 	.word	0x0801038b
 80102d0:	0801038b 	.word	0x0801038b
 80102d4:	0801038b 	.word	0x0801038b
 80102d8:	0801038b 	.word	0x0801038b
 80102dc:	08010357 	.word	0x08010357
 80102e0:	0801038b 	.word	0x0801038b
 80102e4:	0801038b 	.word	0x0801038b
 80102e8:	0801038b 	.word	0x0801038b
 80102ec:	0801038b 	.word	0x0801038b
 80102f0:	0801038b 	.word	0x0801038b
 80102f4:	0801038b 	.word	0x0801038b
 80102f8:	0801038b 	.word	0x0801038b
 80102fc:	0801038b 	.word	0x0801038b
 8010300:	0801038b 	.word	0x0801038b
 8010304:	0801038b 	.word	0x0801038b
 8010308:	0801038b 	.word	0x0801038b
 801030c:	0801038b 	.word	0x0801038b
 8010310:	0801038b 	.word	0x0801038b
 8010314:	0801038b 	.word	0x0801038b
 8010318:	0801038b 	.word	0x0801038b
 801031c:	0801037d 	.word	0x0801037d
 8010320:	2b40      	cmp	r3, #64	; 0x40
 8010322:	d02e      	beq.n	8010382 <UART_SetConfig+0x8aa>
 8010324:	e031      	b.n	801038a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010326:	f7fb f9f1 	bl	800b70c <HAL_RCC_GetPCLK1Freq>
 801032a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801032c:	e033      	b.n	8010396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801032e:	f7fb fa03 	bl	800b738 <HAL_RCC_GetPCLK2Freq>
 8010332:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010334:	e02f      	b.n	8010396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801033a:	4618      	mov	r0, r3
 801033c:	f7fc f96e 	bl	800c61c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010344:	e027      	b.n	8010396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010346:	f107 0318 	add.w	r3, r7, #24
 801034a:	4618      	mov	r0, r3
 801034c:	f7fc faba 	bl	800c8c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010350:	69fb      	ldr	r3, [r7, #28]
 8010352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010354:	e01f      	b.n	8010396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010356:	4b2d      	ldr	r3, [pc, #180]	; (801040c <UART_SetConfig+0x934>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	f003 0320 	and.w	r3, r3, #32
 801035e:	2b00      	cmp	r3, #0
 8010360:	d009      	beq.n	8010376 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010362:	4b2a      	ldr	r3, [pc, #168]	; (801040c <UART_SetConfig+0x934>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	08db      	lsrs	r3, r3, #3
 8010368:	f003 0303 	and.w	r3, r3, #3
 801036c:	4a24      	ldr	r2, [pc, #144]	; (8010400 <UART_SetConfig+0x928>)
 801036e:	fa22 f303 	lsr.w	r3, r2, r3
 8010372:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010374:	e00f      	b.n	8010396 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010376:	4b22      	ldr	r3, [pc, #136]	; (8010400 <UART_SetConfig+0x928>)
 8010378:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801037a:	e00c      	b.n	8010396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801037c:	4b21      	ldr	r3, [pc, #132]	; (8010404 <UART_SetConfig+0x92c>)
 801037e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010380:	e009      	b.n	8010396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010388:	e005      	b.n	8010396 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801038a:	2300      	movs	r3, #0
 801038c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801038e:	2301      	movs	r3, #1
 8010390:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010394:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010398:	2b00      	cmp	r3, #0
 801039a:	f000 80e7 	beq.w	801056c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103a2:	4a19      	ldr	r2, [pc, #100]	; (8010408 <UART_SetConfig+0x930>)
 80103a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80103a8:	461a      	mov	r2, r3
 80103aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80103b0:	005a      	lsls	r2, r3, #1
 80103b2:	697b      	ldr	r3, [r7, #20]
 80103b4:	685b      	ldr	r3, [r3, #4]
 80103b6:	085b      	lsrs	r3, r3, #1
 80103b8:	441a      	add	r2, r3
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	685b      	ldr	r3, [r3, #4]
 80103be:	fbb2 f3f3 	udiv	r3, r2, r3
 80103c2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80103c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103c6:	2b0f      	cmp	r3, #15
 80103c8:	d916      	bls.n	80103f8 <UART_SetConfig+0x920>
 80103ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103d0:	d212      	bcs.n	80103f8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80103d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103d4:	b29b      	uxth	r3, r3
 80103d6:	f023 030f 	bic.w	r3, r3, #15
 80103da:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80103dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103de:	085b      	lsrs	r3, r3, #1
 80103e0:	b29b      	uxth	r3, r3
 80103e2:	f003 0307 	and.w	r3, r3, #7
 80103e6:	b29a      	uxth	r2, r3
 80103e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80103ea:	4313      	orrs	r3, r2
 80103ec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80103f4:	60da      	str	r2, [r3, #12]
 80103f6:	e0b9      	b.n	801056c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80103f8:	2301      	movs	r3, #1
 80103fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80103fe:	e0b5      	b.n	801056c <UART_SetConfig+0xa94>
 8010400:	03d09000 	.word	0x03d09000
 8010404:	003d0900 	.word	0x003d0900
 8010408:	0801529c 	.word	0x0801529c
 801040c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8010410:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010414:	2b20      	cmp	r3, #32
 8010416:	dc49      	bgt.n	80104ac <UART_SetConfig+0x9d4>
 8010418:	2b00      	cmp	r3, #0
 801041a:	db7c      	blt.n	8010516 <UART_SetConfig+0xa3e>
 801041c:	2b20      	cmp	r3, #32
 801041e:	d87a      	bhi.n	8010516 <UART_SetConfig+0xa3e>
 8010420:	a201      	add	r2, pc, #4	; (adr r2, 8010428 <UART_SetConfig+0x950>)
 8010422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010426:	bf00      	nop
 8010428:	080104b3 	.word	0x080104b3
 801042c:	080104bb 	.word	0x080104bb
 8010430:	08010517 	.word	0x08010517
 8010434:	08010517 	.word	0x08010517
 8010438:	080104c3 	.word	0x080104c3
 801043c:	08010517 	.word	0x08010517
 8010440:	08010517 	.word	0x08010517
 8010444:	08010517 	.word	0x08010517
 8010448:	080104d3 	.word	0x080104d3
 801044c:	08010517 	.word	0x08010517
 8010450:	08010517 	.word	0x08010517
 8010454:	08010517 	.word	0x08010517
 8010458:	08010517 	.word	0x08010517
 801045c:	08010517 	.word	0x08010517
 8010460:	08010517 	.word	0x08010517
 8010464:	08010517 	.word	0x08010517
 8010468:	080104e3 	.word	0x080104e3
 801046c:	08010517 	.word	0x08010517
 8010470:	08010517 	.word	0x08010517
 8010474:	08010517 	.word	0x08010517
 8010478:	08010517 	.word	0x08010517
 801047c:	08010517 	.word	0x08010517
 8010480:	08010517 	.word	0x08010517
 8010484:	08010517 	.word	0x08010517
 8010488:	08010517 	.word	0x08010517
 801048c:	08010517 	.word	0x08010517
 8010490:	08010517 	.word	0x08010517
 8010494:	08010517 	.word	0x08010517
 8010498:	08010517 	.word	0x08010517
 801049c:	08010517 	.word	0x08010517
 80104a0:	08010517 	.word	0x08010517
 80104a4:	08010517 	.word	0x08010517
 80104a8:	08010509 	.word	0x08010509
 80104ac:	2b40      	cmp	r3, #64	; 0x40
 80104ae:	d02e      	beq.n	801050e <UART_SetConfig+0xa36>
 80104b0:	e031      	b.n	8010516 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80104b2:	f7fb f92b 	bl	800b70c <HAL_RCC_GetPCLK1Freq>
 80104b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80104b8:	e033      	b.n	8010522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80104ba:	f7fb f93d 	bl	800b738 <HAL_RCC_GetPCLK2Freq>
 80104be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80104c0:	e02f      	b.n	8010522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80104c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7fc f8a8 	bl	800c61c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80104cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104d0:	e027      	b.n	8010522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80104d2:	f107 0318 	add.w	r3, r7, #24
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7fc f9f4 	bl	800c8c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80104dc:	69fb      	ldr	r3, [r7, #28]
 80104de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104e0:	e01f      	b.n	8010522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80104e2:	4b2d      	ldr	r3, [pc, #180]	; (8010598 <UART_SetConfig+0xac0>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	f003 0320 	and.w	r3, r3, #32
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d009      	beq.n	8010502 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80104ee:	4b2a      	ldr	r3, [pc, #168]	; (8010598 <UART_SetConfig+0xac0>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	08db      	lsrs	r3, r3, #3
 80104f4:	f003 0303 	and.w	r3, r3, #3
 80104f8:	4a28      	ldr	r2, [pc, #160]	; (801059c <UART_SetConfig+0xac4>)
 80104fa:	fa22 f303 	lsr.w	r3, r2, r3
 80104fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010500:	e00f      	b.n	8010522 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8010502:	4b26      	ldr	r3, [pc, #152]	; (801059c <UART_SetConfig+0xac4>)
 8010504:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010506:	e00c      	b.n	8010522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010508:	4b25      	ldr	r3, [pc, #148]	; (80105a0 <UART_SetConfig+0xac8>)
 801050a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801050c:	e009      	b.n	8010522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801050e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010514:	e005      	b.n	8010522 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8010516:	2300      	movs	r3, #0
 8010518:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801051a:	2301      	movs	r3, #1
 801051c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010520:	bf00      	nop
    }

    if (pclk != 0U)
 8010522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010524:	2b00      	cmp	r3, #0
 8010526:	d021      	beq.n	801056c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010528:	697b      	ldr	r3, [r7, #20]
 801052a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801052c:	4a1d      	ldr	r2, [pc, #116]	; (80105a4 <UART_SetConfig+0xacc>)
 801052e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010532:	461a      	mov	r2, r3
 8010534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010536:	fbb3 f2f2 	udiv	r2, r3, r2
 801053a:	697b      	ldr	r3, [r7, #20]
 801053c:	685b      	ldr	r3, [r3, #4]
 801053e:	085b      	lsrs	r3, r3, #1
 8010540:	441a      	add	r2, r3
 8010542:	697b      	ldr	r3, [r7, #20]
 8010544:	685b      	ldr	r3, [r3, #4]
 8010546:	fbb2 f3f3 	udiv	r3, r2, r3
 801054a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801054c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801054e:	2b0f      	cmp	r3, #15
 8010550:	d909      	bls.n	8010566 <UART_SetConfig+0xa8e>
 8010552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010558:	d205      	bcs.n	8010566 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801055a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801055c:	b29a      	uxth	r2, r3
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	60da      	str	r2, [r3, #12]
 8010564:	e002      	b.n	801056c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010566:	2301      	movs	r3, #1
 8010568:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801056c:	697b      	ldr	r3, [r7, #20]
 801056e:	2201      	movs	r2, #1
 8010570:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	2201      	movs	r2, #1
 8010578:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	2200      	movs	r2, #0
 8010580:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8010582:	697b      	ldr	r3, [r7, #20]
 8010584:	2200      	movs	r2, #0
 8010586:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8010588:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 801058c:	4618      	mov	r0, r3
 801058e:	3748      	adds	r7, #72	; 0x48
 8010590:	46bd      	mov	sp, r7
 8010592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010596:	bf00      	nop
 8010598:	58024400 	.word	0x58024400
 801059c:	03d09000 	.word	0x03d09000
 80105a0:	003d0900 	.word	0x003d0900
 80105a4:	0801529c 	.word	0x0801529c

080105a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80105a8:	b480      	push	{r7}
 80105aa:	b083      	sub	sp, #12
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105b4:	f003 0301 	and.w	r3, r3, #1
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d00a      	beq.n	80105d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	685b      	ldr	r3, [r3, #4]
 80105c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	430a      	orrs	r2, r1
 80105d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105d6:	f003 0302 	and.w	r3, r3, #2
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d00a      	beq.n	80105f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	685b      	ldr	r3, [r3, #4]
 80105e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	430a      	orrs	r2, r1
 80105f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105f8:	f003 0304 	and.w	r3, r3, #4
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d00a      	beq.n	8010616 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	685b      	ldr	r3, [r3, #4]
 8010606:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	430a      	orrs	r2, r1
 8010614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801061a:	f003 0308 	and.w	r3, r3, #8
 801061e:	2b00      	cmp	r3, #0
 8010620:	d00a      	beq.n	8010638 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	685b      	ldr	r3, [r3, #4]
 8010628:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	430a      	orrs	r2, r1
 8010636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801063c:	f003 0310 	and.w	r3, r3, #16
 8010640:	2b00      	cmp	r3, #0
 8010642:	d00a      	beq.n	801065a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	689b      	ldr	r3, [r3, #8]
 801064a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	430a      	orrs	r2, r1
 8010658:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801065e:	f003 0320 	and.w	r3, r3, #32
 8010662:	2b00      	cmp	r3, #0
 8010664:	d00a      	beq.n	801067c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	689b      	ldr	r3, [r3, #8]
 801066c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	430a      	orrs	r2, r1
 801067a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010684:	2b00      	cmp	r3, #0
 8010686:	d01a      	beq.n	80106be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	685b      	ldr	r3, [r3, #4]
 801068e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	430a      	orrs	r2, r1
 801069c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80106a6:	d10a      	bne.n	80106be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	685b      	ldr	r3, [r3, #4]
 80106ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	430a      	orrs	r2, r1
 80106bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d00a      	beq.n	80106e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	685b      	ldr	r3, [r3, #4]
 80106d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	430a      	orrs	r2, r1
 80106de:	605a      	str	r2, [r3, #4]
  }
}
 80106e0:	bf00      	nop
 80106e2:	370c      	adds	r7, #12
 80106e4:	46bd      	mov	sp, r7
 80106e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ea:	4770      	bx	lr

080106ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b086      	sub	sp, #24
 80106f0:	af02      	add	r7, sp, #8
 80106f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	2200      	movs	r2, #0
 80106f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80106fc:	f7f6 fcc8 	bl	8007090 <HAL_GetTick>
 8010700:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	f003 0308 	and.w	r3, r3, #8
 801070c:	2b08      	cmp	r3, #8
 801070e:	d10e      	bne.n	801072e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010710:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010714:	9300      	str	r3, [sp, #0]
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	2200      	movs	r2, #0
 801071a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	f000 f82f 	bl	8010782 <UART_WaitOnFlagUntilTimeout>
 8010724:	4603      	mov	r3, r0
 8010726:	2b00      	cmp	r3, #0
 8010728:	d001      	beq.n	801072e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801072a:	2303      	movs	r3, #3
 801072c:	e025      	b.n	801077a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	f003 0304 	and.w	r3, r3, #4
 8010738:	2b04      	cmp	r3, #4
 801073a:	d10e      	bne.n	801075a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801073c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010740:	9300      	str	r3, [sp, #0]
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	2200      	movs	r2, #0
 8010746:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f000 f819 	bl	8010782 <UART_WaitOnFlagUntilTimeout>
 8010750:	4603      	mov	r3, r0
 8010752:	2b00      	cmp	r3, #0
 8010754:	d001      	beq.n	801075a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010756:	2303      	movs	r3, #3
 8010758:	e00f      	b.n	801077a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2220      	movs	r2, #32
 801075e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2220      	movs	r2, #32
 8010766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	2200      	movs	r2, #0
 801076e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2200      	movs	r2, #0
 8010774:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010778:	2300      	movs	r3, #0
}
 801077a:	4618      	mov	r0, r3
 801077c:	3710      	adds	r7, #16
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}

08010782 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010782:	b580      	push	{r7, lr}
 8010784:	b09c      	sub	sp, #112	; 0x70
 8010786:	af00      	add	r7, sp, #0
 8010788:	60f8      	str	r0, [r7, #12]
 801078a:	60b9      	str	r1, [r7, #8]
 801078c:	603b      	str	r3, [r7, #0]
 801078e:	4613      	mov	r3, r2
 8010790:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010792:	e0a9      	b.n	80108e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801079a:	f000 80a5 	beq.w	80108e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801079e:	f7f6 fc77 	bl	8007090 <HAL_GetTick>
 80107a2:	4602      	mov	r2, r0
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	1ad3      	subs	r3, r2, r3
 80107a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80107aa:	429a      	cmp	r2, r3
 80107ac:	d302      	bcc.n	80107b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80107ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d140      	bne.n	8010836 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107bc:	e853 3f00 	ldrex	r3, [r3]
 80107c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80107c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80107c8:	667b      	str	r3, [r7, #100]	; 0x64
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	461a      	mov	r2, r3
 80107d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80107d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80107d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80107da:	e841 2300 	strex	r3, r2, [r1]
 80107de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80107e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d1e6      	bne.n	80107b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	3308      	adds	r3, #8
 80107ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107f0:	e853 3f00 	ldrex	r3, [r3]
 80107f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80107f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107f8:	f023 0301 	bic.w	r3, r3, #1
 80107fc:	663b      	str	r3, [r7, #96]	; 0x60
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	3308      	adds	r3, #8
 8010804:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010806:	64ba      	str	r2, [r7, #72]	; 0x48
 8010808:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801080a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801080c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801080e:	e841 2300 	strex	r3, r2, [r1]
 8010812:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010816:	2b00      	cmp	r3, #0
 8010818:	d1e5      	bne.n	80107e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	2220      	movs	r2, #32
 801081e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	2220      	movs	r2, #32
 8010826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	2200      	movs	r2, #0
 801082e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010832:	2303      	movs	r3, #3
 8010834:	e069      	b.n	801090a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	f003 0304 	and.w	r3, r3, #4
 8010840:	2b00      	cmp	r3, #0
 8010842:	d051      	beq.n	80108e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	69db      	ldr	r3, [r3, #28]
 801084a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801084e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010852:	d149      	bne.n	80108e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801085c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010866:	e853 3f00 	ldrex	r3, [r3]
 801086a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801086c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801086e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010872:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	461a      	mov	r2, r3
 801087a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801087c:	637b      	str	r3, [r7, #52]	; 0x34
 801087e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010880:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010884:	e841 2300 	strex	r3, r2, [r1]
 8010888:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801088a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801088c:	2b00      	cmp	r3, #0
 801088e:	d1e6      	bne.n	801085e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	3308      	adds	r3, #8
 8010896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010898:	697b      	ldr	r3, [r7, #20]
 801089a:	e853 3f00 	ldrex	r3, [r3]
 801089e:	613b      	str	r3, [r7, #16]
   return(result);
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	f023 0301 	bic.w	r3, r3, #1
 80108a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	3308      	adds	r3, #8
 80108ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80108b0:	623a      	str	r2, [r7, #32]
 80108b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108b4:	69f9      	ldr	r1, [r7, #28]
 80108b6:	6a3a      	ldr	r2, [r7, #32]
 80108b8:	e841 2300 	strex	r3, r2, [r1]
 80108bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80108be:	69bb      	ldr	r3, [r7, #24]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d1e5      	bne.n	8010890 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	2220      	movs	r2, #32
 80108c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	2220      	movs	r2, #32
 80108d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	2220      	movs	r2, #32
 80108d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	2200      	movs	r2, #0
 80108e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80108e4:	2303      	movs	r3, #3
 80108e6:	e010      	b.n	801090a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	69da      	ldr	r2, [r3, #28]
 80108ee:	68bb      	ldr	r3, [r7, #8]
 80108f0:	4013      	ands	r3, r2
 80108f2:	68ba      	ldr	r2, [r7, #8]
 80108f4:	429a      	cmp	r2, r3
 80108f6:	bf0c      	ite	eq
 80108f8:	2301      	moveq	r3, #1
 80108fa:	2300      	movne	r3, #0
 80108fc:	b2db      	uxtb	r3, r3
 80108fe:	461a      	mov	r2, r3
 8010900:	79fb      	ldrb	r3, [r7, #7]
 8010902:	429a      	cmp	r2, r3
 8010904:	f43f af46 	beq.w	8010794 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010908:	2300      	movs	r3, #0
}
 801090a:	4618      	mov	r0, r3
 801090c:	3770      	adds	r7, #112	; 0x70
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}
	...

08010914 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b096      	sub	sp, #88	; 0x58
 8010918:	af00      	add	r7, sp, #0
 801091a:	60f8      	str	r0, [r7, #12]
 801091c:	60b9      	str	r1, [r7, #8]
 801091e:	4613      	mov	r3, r2
 8010920:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	68ba      	ldr	r2, [r7, #8]
 8010926:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	88fa      	ldrh	r2, [r7, #6]
 801092c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	2200      	movs	r2, #0
 8010934:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	2222      	movs	r2, #34	; 0x22
 801093c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010944:	2b00      	cmp	r3, #0
 8010946:	d02c      	beq.n	80109a2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801094c:	4a42      	ldr	r2, [pc, #264]	; (8010a58 <UART_Start_Receive_DMA+0x144>)
 801094e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010954:	4a41      	ldr	r2, [pc, #260]	; (8010a5c <UART_Start_Receive_DMA+0x148>)
 8010956:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801095c:	4a40      	ldr	r2, [pc, #256]	; (8010a60 <UART_Start_Receive_DMA+0x14c>)
 801095e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010964:	2200      	movs	r2, #0
 8010966:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	3324      	adds	r3, #36	; 0x24
 8010972:	4619      	mov	r1, r3
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010978:	461a      	mov	r2, r3
 801097a:	88fb      	ldrh	r3, [r7, #6]
 801097c:	f7f7 fa3a 	bl	8007df4 <HAL_DMA_Start_IT>
 8010980:	4603      	mov	r3, r0
 8010982:	2b00      	cmp	r3, #0
 8010984:	d00d      	beq.n	80109a2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	2210      	movs	r2, #16
 801098a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	2200      	movs	r2, #0
 8010992:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	2220      	movs	r2, #32
 801099a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 801099e:	2301      	movs	r3, #1
 80109a0:	e055      	b.n	8010a4e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	2200      	movs	r2, #0
 80109a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	691b      	ldr	r3, [r3, #16]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d018      	beq.n	80109e4 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109ba:	e853 3f00 	ldrex	r3, [r3]
 80109be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80109c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80109c6:	657b      	str	r3, [r7, #84]	; 0x54
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	461a      	mov	r2, r3
 80109ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80109d2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80109d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80109d8:	e841 2300 	strex	r3, r2, [r1]
 80109dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80109de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d1e6      	bne.n	80109b2 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	3308      	adds	r3, #8
 80109ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109ee:	e853 3f00 	ldrex	r3, [r3]
 80109f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80109f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109f6:	f043 0301 	orr.w	r3, r3, #1
 80109fa:	653b      	str	r3, [r7, #80]	; 0x50
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	3308      	adds	r3, #8
 8010a02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010a04:	637a      	str	r2, [r7, #52]	; 0x34
 8010a06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010a0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a0c:	e841 2300 	strex	r3, r2, [r1]
 8010a10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d1e5      	bne.n	80109e4 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	3308      	adds	r3, #8
 8010a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	e853 3f00 	ldrex	r3, [r3]
 8010a26:	613b      	str	r3, [r7, #16]
   return(result);
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	3308      	adds	r3, #8
 8010a36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010a38:	623a      	str	r2, [r7, #32]
 8010a3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a3c:	69f9      	ldr	r1, [r7, #28]
 8010a3e:	6a3a      	ldr	r2, [r7, #32]
 8010a40:	e841 2300 	strex	r3, r2, [r1]
 8010a44:	61bb      	str	r3, [r7, #24]
   return(result);
 8010a46:	69bb      	ldr	r3, [r7, #24]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d1e5      	bne.n	8010a18 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8010a4c:	2300      	movs	r3, #0
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	3758      	adds	r7, #88	; 0x58
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}
 8010a56:	bf00      	nop
 8010a58:	08010c67 	.word	0x08010c67
 8010a5c:	08010d89 	.word	0x08010d89
 8010a60:	08010dc1 	.word	0x08010dc1

08010a64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010a64:	b480      	push	{r7}
 8010a66:	b08f      	sub	sp, #60	; 0x3c
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a72:	6a3b      	ldr	r3, [r7, #32]
 8010a74:	e853 3f00 	ldrex	r3, [r3]
 8010a78:	61fb      	str	r3, [r7, #28]
   return(result);
 8010a7a:	69fb      	ldr	r3, [r7, #28]
 8010a7c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010a80:	637b      	str	r3, [r7, #52]	; 0x34
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	461a      	mov	r2, r3
 8010a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a8c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a92:	e841 2300 	strex	r3, r2, [r1]
 8010a96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d1e6      	bne.n	8010a6c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	3308      	adds	r3, #8
 8010aa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	e853 3f00 	ldrex	r3, [r3]
 8010aac:	60bb      	str	r3, [r7, #8]
   return(result);
 8010aae:	68bb      	ldr	r3, [r7, #8]
 8010ab0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	3308      	adds	r3, #8
 8010abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010abe:	61ba      	str	r2, [r7, #24]
 8010ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ac2:	6979      	ldr	r1, [r7, #20]
 8010ac4:	69ba      	ldr	r2, [r7, #24]
 8010ac6:	e841 2300 	strex	r3, r2, [r1]
 8010aca:	613b      	str	r3, [r7, #16]
   return(result);
 8010acc:	693b      	ldr	r3, [r7, #16]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d1e5      	bne.n	8010a9e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	2220      	movs	r2, #32
 8010ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8010ada:	bf00      	nop
 8010adc:	373c      	adds	r7, #60	; 0x3c
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae4:	4770      	bx	lr
	...

08010ae8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b095      	sub	sp, #84	; 0x54
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010af8:	e853 3f00 	ldrex	r3, [r3]
 8010afc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010b04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	461a      	mov	r2, r3
 8010b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b0e:	643b      	str	r3, [r7, #64]	; 0x40
 8010b10:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010b14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010b16:	e841 2300 	strex	r3, r2, [r1]
 8010b1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d1e6      	bne.n	8010af0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	3308      	adds	r3, #8
 8010b28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b2a:	6a3b      	ldr	r3, [r7, #32]
 8010b2c:	e853 3f00 	ldrex	r3, [r3]
 8010b30:	61fb      	str	r3, [r7, #28]
   return(result);
 8010b32:	69fa      	ldr	r2, [r7, #28]
 8010b34:	4b1e      	ldr	r3, [pc, #120]	; (8010bb0 <UART_EndRxTransfer+0xc8>)
 8010b36:	4013      	ands	r3, r2
 8010b38:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	3308      	adds	r3, #8
 8010b40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010b42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010b44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b4a:	e841 2300 	strex	r3, r2, [r1]
 8010b4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d1e5      	bne.n	8010b22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b5a:	2b01      	cmp	r3, #1
 8010b5c:	d118      	bne.n	8010b90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	e853 3f00 	ldrex	r3, [r3]
 8010b6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	f023 0310 	bic.w	r3, r3, #16
 8010b72:	647b      	str	r3, [r7, #68]	; 0x44
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	461a      	mov	r2, r3
 8010b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b7c:	61bb      	str	r3, [r7, #24]
 8010b7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b80:	6979      	ldr	r1, [r7, #20]
 8010b82:	69ba      	ldr	r2, [r7, #24]
 8010b84:	e841 2300 	strex	r3, r2, [r1]
 8010b88:	613b      	str	r3, [r7, #16]
   return(result);
 8010b8a:	693b      	ldr	r3, [r7, #16]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d1e6      	bne.n	8010b5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2220      	movs	r2, #32
 8010b94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010ba4:	bf00      	nop
 8010ba6:	3754      	adds	r7, #84	; 0x54
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bae:	4770      	bx	lr
 8010bb0:	effffffe 	.word	0xeffffffe

08010bb4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b090      	sub	sp, #64	; 0x40
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bc0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	69db      	ldr	r3, [r3, #28]
 8010bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010bca:	d037      	beq.n	8010c3c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8010bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bce:	2200      	movs	r2, #0
 8010bd0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	3308      	adds	r3, #8
 8010bda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bde:	e853 3f00 	ldrex	r3, [r3]
 8010be2:	623b      	str	r3, [r7, #32]
   return(result);
 8010be4:	6a3b      	ldr	r3, [r7, #32]
 8010be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010bea:	63bb      	str	r3, [r7, #56]	; 0x38
 8010bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	3308      	adds	r3, #8
 8010bf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010bf4:	633a      	str	r2, [r7, #48]	; 0x30
 8010bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bfc:	e841 2300 	strex	r3, r2, [r1]
 8010c00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d1e5      	bne.n	8010bd4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c0e:	693b      	ldr	r3, [r7, #16]
 8010c10:	e853 3f00 	ldrex	r3, [r3]
 8010c14:	60fb      	str	r3, [r7, #12]
   return(result);
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8010c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	461a      	mov	r2, r3
 8010c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c26:	61fb      	str	r3, [r7, #28]
 8010c28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c2a:	69b9      	ldr	r1, [r7, #24]
 8010c2c:	69fa      	ldr	r2, [r7, #28]
 8010c2e:	e841 2300 	strex	r3, r2, [r1]
 8010c32:	617b      	str	r3, [r7, #20]
   return(result);
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d1e6      	bne.n	8010c08 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010c3a:	e002      	b.n	8010c42 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8010c3c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c3e:	f7fe ff19 	bl	800fa74 <HAL_UART_TxCpltCallback>
}
 8010c42:	bf00      	nop
 8010c44:	3740      	adds	r7, #64	; 0x40
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}

08010c4a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010c4a:	b580      	push	{r7, lr}
 8010c4c:	b084      	sub	sp, #16
 8010c4e:	af00      	add	r7, sp, #0
 8010c50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c56:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010c58:	68f8      	ldr	r0, [r7, #12]
 8010c5a:	f7fe ff15 	bl	800fa88 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c5e:	bf00      	nop
 8010c60:	3710      	adds	r7, #16
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}

08010c66 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010c66:	b580      	push	{r7, lr}
 8010c68:	b09c      	sub	sp, #112	; 0x70
 8010c6a:	af00      	add	r7, sp, #0
 8010c6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c72:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	69db      	ldr	r3, [r3, #28]
 8010c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c7c:	d071      	beq.n	8010d62 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c80:	2200      	movs	r2, #0
 8010c82:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c8e:	e853 3f00 	ldrex	r3, [r3]
 8010c92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010c94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010c9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8010c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	461a      	mov	r2, r3
 8010ca2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010ca4:	65bb      	str	r3, [r7, #88]	; 0x58
 8010ca6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ca8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010caa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010cac:	e841 2300 	strex	r3, r2, [r1]
 8010cb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d1e6      	bne.n	8010c86 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	3308      	adds	r3, #8
 8010cbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc2:	e853 3f00 	ldrex	r3, [r3]
 8010cc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cca:	f023 0301 	bic.w	r3, r3, #1
 8010cce:	667b      	str	r3, [r7, #100]	; 0x64
 8010cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	3308      	adds	r3, #8
 8010cd6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010cd8:	647a      	str	r2, [r7, #68]	; 0x44
 8010cda:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010cde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ce0:	e841 2300 	strex	r3, r2, [r1]
 8010ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d1e5      	bne.n	8010cb8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	3308      	adds	r3, #8
 8010cf2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf6:	e853 3f00 	ldrex	r3, [r3]
 8010cfa:	623b      	str	r3, [r7, #32]
   return(result);
 8010cfc:	6a3b      	ldr	r3, [r7, #32]
 8010cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d02:	663b      	str	r3, [r7, #96]	; 0x60
 8010d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	3308      	adds	r3, #8
 8010d0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010d0c:	633a      	str	r2, [r7, #48]	; 0x30
 8010d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d14:	e841 2300 	strex	r3, r2, [r1]
 8010d18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d1e5      	bne.n	8010cec <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d22:	2220      	movs	r2, #32
 8010d24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d2c:	2b01      	cmp	r3, #1
 8010d2e:	d118      	bne.n	8010d62 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	e853 3f00 	ldrex	r3, [r3]
 8010d3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	f023 0310 	bic.w	r3, r3, #16
 8010d44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	461a      	mov	r2, r3
 8010d4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d4e:	61fb      	str	r3, [r7, #28]
 8010d50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d52:	69b9      	ldr	r1, [r7, #24]
 8010d54:	69fa      	ldr	r2, [r7, #28]
 8010d56:	e841 2300 	strex	r3, r2, [r1]
 8010d5a:	617b      	str	r3, [r7, #20]
   return(result);
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d1e6      	bne.n	8010d30 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d66:	2b01      	cmp	r3, #1
 8010d68:	d107      	bne.n	8010d7a <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010d70:	4619      	mov	r1, r3
 8010d72:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010d74:	f7f2 fb0e 	bl	8003394 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010d78:	e002      	b.n	8010d80 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 8010d7a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010d7c:	f7fe fe8e 	bl	800fa9c <HAL_UART_RxCpltCallback>
}
 8010d80:	bf00      	nop
 8010d82:	3770      	adds	r7, #112	; 0x70
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}

08010d88 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b084      	sub	sp, #16
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d94:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d9a:	2b01      	cmp	r3, #1
 8010d9c:	d109      	bne.n	8010db2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010da4:	085b      	lsrs	r3, r3, #1
 8010da6:	b29b      	uxth	r3, r3
 8010da8:	4619      	mov	r1, r3
 8010daa:	68f8      	ldr	r0, [r7, #12]
 8010dac:	f7f2 faf2 	bl	8003394 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010db0:	e002      	b.n	8010db8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8010db2:	68f8      	ldr	r0, [r7, #12]
 8010db4:	f7fe fe7c 	bl	800fab0 <HAL_UART_RxHalfCpltCallback>
}
 8010db8:	bf00      	nop
 8010dba:	3710      	adds	r7, #16
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}

08010dc0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b086      	sub	sp, #24
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dcc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010dce:	697b      	ldr	r3, [r7, #20]
 8010dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010dd4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010dd6:	697b      	ldr	r3, [r7, #20]
 8010dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ddc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	689b      	ldr	r3, [r3, #8]
 8010de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010de8:	2b80      	cmp	r3, #128	; 0x80
 8010dea:	d109      	bne.n	8010e00 <UART_DMAError+0x40>
 8010dec:	693b      	ldr	r3, [r7, #16]
 8010dee:	2b21      	cmp	r3, #33	; 0x21
 8010df0:	d106      	bne.n	8010e00 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010df2:	697b      	ldr	r3, [r7, #20]
 8010df4:	2200      	movs	r2, #0
 8010df6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010dfa:	6978      	ldr	r0, [r7, #20]
 8010dfc:	f7ff fe32 	bl	8010a64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010e00:	697b      	ldr	r3, [r7, #20]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	689b      	ldr	r3, [r3, #8]
 8010e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e0a:	2b40      	cmp	r3, #64	; 0x40
 8010e0c:	d109      	bne.n	8010e22 <UART_DMAError+0x62>
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	2b22      	cmp	r3, #34	; 0x22
 8010e12:	d106      	bne.n	8010e22 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010e14:	697b      	ldr	r3, [r7, #20]
 8010e16:	2200      	movs	r2, #0
 8010e18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010e1c:	6978      	ldr	r0, [r7, #20]
 8010e1e:	f7ff fe63 	bl	8010ae8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e28:	f043 0210 	orr.w	r2, r3, #16
 8010e2c:	697b      	ldr	r3, [r7, #20]
 8010e2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010e32:	6978      	ldr	r0, [r7, #20]
 8010e34:	f7fe fe46 	bl	800fac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e38:	bf00      	nop
 8010e3a:	3718      	adds	r7, #24
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}

08010e40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b084      	sub	sp, #16
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	2200      	movs	r2, #0
 8010e52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	2200      	movs	r2, #0
 8010e5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010e5e:	68f8      	ldr	r0, [r7, #12]
 8010e60:	f7fe fe30 	bl	800fac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e64:	bf00      	nop
 8010e66:	3710      	adds	r7, #16
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}

08010e6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b088      	sub	sp, #32
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	e853 3f00 	ldrex	r3, [r3]
 8010e80:	60bb      	str	r3, [r7, #8]
   return(result);
 8010e82:	68bb      	ldr	r3, [r7, #8]
 8010e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e88:	61fb      	str	r3, [r7, #28]
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	461a      	mov	r2, r3
 8010e90:	69fb      	ldr	r3, [r7, #28]
 8010e92:	61bb      	str	r3, [r7, #24]
 8010e94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e96:	6979      	ldr	r1, [r7, #20]
 8010e98:	69ba      	ldr	r2, [r7, #24]
 8010e9a:	e841 2300 	strex	r3, r2, [r1]
 8010e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8010ea0:	693b      	ldr	r3, [r7, #16]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d1e6      	bne.n	8010e74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	2220      	movs	r2, #32
 8010eaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f7fe fddd 	bl	800fa74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010eba:	bf00      	nop
 8010ebc:	3720      	adds	r7, #32
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}

08010ec2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010ec2:	b480      	push	{r7}
 8010ec4:	b083      	sub	sp, #12
 8010ec6:	af00      	add	r7, sp, #0
 8010ec8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010eca:	bf00      	nop
 8010ecc:	370c      	adds	r7, #12
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed4:	4770      	bx	lr

08010ed6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010ed6:	b480      	push	{r7}
 8010ed8:	b083      	sub	sp, #12
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010ede:	bf00      	nop
 8010ee0:	370c      	adds	r7, #12
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee8:	4770      	bx	lr

08010eea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010eea:	b480      	push	{r7}
 8010eec:	b083      	sub	sp, #12
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010ef2:	bf00      	nop
 8010ef4:	370c      	adds	r7, #12
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efc:	4770      	bx	lr

08010efe <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8010efe:	b580      	push	{r7, lr}
 8010f00:	b084      	sub	sp, #16
 8010f02:	af00      	add	r7, sp, #0
 8010f04:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010f0c:	2b01      	cmp	r3, #1
 8010f0e:	d101      	bne.n	8010f14 <HAL_UARTEx_EnableFifoMode+0x16>
 8010f10:	2302      	movs	r3, #2
 8010f12:	e02b      	b.n	8010f6c <HAL_UARTEx_EnableFifoMode+0x6e>
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2201      	movs	r2, #1
 8010f18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	2224      	movs	r2, #36	; 0x24
 8010f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	681a      	ldr	r2, [r3, #0]
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	f022 0201 	bic.w	r2, r2, #1
 8010f3a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010f42:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8010f4a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	68fa      	ldr	r2, [r7, #12]
 8010f52:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	f000 f91f 	bl	8011198 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2220      	movs	r2, #32
 8010f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	2200      	movs	r2, #0
 8010f66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010f6a:	2300      	movs	r3, #0
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3710      	adds	r7, #16
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}

08010f74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010f74:	b480      	push	{r7}
 8010f76:	b085      	sub	sp, #20
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010f82:	2b01      	cmp	r3, #1
 8010f84:	d101      	bne.n	8010f8a <HAL_UARTEx_DisableFifoMode+0x16>
 8010f86:	2302      	movs	r3, #2
 8010f88:	e027      	b.n	8010fda <HAL_UARTEx_DisableFifoMode+0x66>
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	2201      	movs	r2, #1
 8010f8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2224      	movs	r2, #36	; 0x24
 8010f96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	681a      	ldr	r2, [r3, #0]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	f022 0201 	bic.w	r2, r2, #1
 8010fb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010fb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	68fa      	ldr	r2, [r7, #12]
 8010fc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	2220      	movs	r2, #32
 8010fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010fd8:	2300      	movs	r3, #0
}
 8010fda:	4618      	mov	r0, r3
 8010fdc:	3714      	adds	r7, #20
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe4:	4770      	bx	lr

08010fe6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010fe6:	b580      	push	{r7, lr}
 8010fe8:	b084      	sub	sp, #16
 8010fea:	af00      	add	r7, sp, #0
 8010fec:	6078      	str	r0, [r7, #4]
 8010fee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010ff6:	2b01      	cmp	r3, #1
 8010ff8:	d101      	bne.n	8010ffe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010ffa:	2302      	movs	r3, #2
 8010ffc:	e02d      	b.n	801105a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	2201      	movs	r2, #1
 8011002:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	2224      	movs	r2, #36	; 0x24
 801100a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	681a      	ldr	r2, [r3, #0]
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	f022 0201 	bic.w	r2, r2, #1
 8011024:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	689b      	ldr	r3, [r3, #8]
 801102c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	683a      	ldr	r2, [r7, #0]
 8011036:	430a      	orrs	r2, r1
 8011038:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801103a:	6878      	ldr	r0, [r7, #4]
 801103c:	f000 f8ac 	bl	8011198 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	68fa      	ldr	r2, [r7, #12]
 8011046:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2220      	movs	r2, #32
 801104c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2200      	movs	r2, #0
 8011054:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011058:	2300      	movs	r3, #0
}
 801105a:	4618      	mov	r0, r3
 801105c:	3710      	adds	r7, #16
 801105e:	46bd      	mov	sp, r7
 8011060:	bd80      	pop	{r7, pc}

08011062 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011062:	b580      	push	{r7, lr}
 8011064:	b084      	sub	sp, #16
 8011066:	af00      	add	r7, sp, #0
 8011068:	6078      	str	r0, [r7, #4]
 801106a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011072:	2b01      	cmp	r3, #1
 8011074:	d101      	bne.n	801107a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011076:	2302      	movs	r3, #2
 8011078:	e02d      	b.n	80110d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2201      	movs	r2, #1
 801107e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2224      	movs	r2, #36	; 0x24
 8011086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	681a      	ldr	r2, [r3, #0]
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	f022 0201 	bic.w	r2, r2, #1
 80110a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	689b      	ldr	r3, [r3, #8]
 80110a8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	683a      	ldr	r2, [r7, #0]
 80110b2:	430a      	orrs	r2, r1
 80110b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f000 f86e 	bl	8011198 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	68fa      	ldr	r2, [r7, #12]
 80110c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2220      	movs	r2, #32
 80110c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	2200      	movs	r2, #0
 80110d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80110d4:	2300      	movs	r3, #0
}
 80110d6:	4618      	mov	r0, r3
 80110d8:	3710      	adds	r7, #16
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}

080110de <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80110de:	b580      	push	{r7, lr}
 80110e0:	b08c      	sub	sp, #48	; 0x30
 80110e2:	af00      	add	r7, sp, #0
 80110e4:	60f8      	str	r0, [r7, #12]
 80110e6:	60b9      	str	r1, [r7, #8]
 80110e8:	4613      	mov	r3, r2
 80110ea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80110f2:	2b20      	cmp	r3, #32
 80110f4:	d14a      	bne.n	801118c <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d002      	beq.n	8011102 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80110fc:	88fb      	ldrh	r3, [r7, #6]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d101      	bne.n	8011106 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8011102:	2301      	movs	r3, #1
 8011104:	e043      	b.n	801118e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801110c:	2b01      	cmp	r3, #1
 801110e:	d101      	bne.n	8011114 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 8011110:	2302      	movs	r3, #2
 8011112:	e03c      	b.n	801118e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	2201      	movs	r2, #1
 8011118:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	2201      	movs	r2, #1
 8011120:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8011122:	88fb      	ldrh	r3, [r7, #6]
 8011124:	461a      	mov	r2, r3
 8011126:	68b9      	ldr	r1, [r7, #8]
 8011128:	68f8      	ldr	r0, [r7, #12]
 801112a:	f7ff fbf3 	bl	8010914 <UART_Start_Receive_DMA>
 801112e:	4603      	mov	r3, r0
 8011130:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8011134:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011138:	2b00      	cmp	r3, #0
 801113a:	d124      	bne.n	8011186 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011140:	2b01      	cmp	r3, #1
 8011142:	d11d      	bne.n	8011180 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	2210      	movs	r2, #16
 801114a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011152:	69bb      	ldr	r3, [r7, #24]
 8011154:	e853 3f00 	ldrex	r3, [r3]
 8011158:	617b      	str	r3, [r7, #20]
   return(result);
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	f043 0310 	orr.w	r3, r3, #16
 8011160:	62bb      	str	r3, [r7, #40]	; 0x28
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	461a      	mov	r2, r3
 8011168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801116a:	627b      	str	r3, [r7, #36]	; 0x24
 801116c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801116e:	6a39      	ldr	r1, [r7, #32]
 8011170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011172:	e841 2300 	strex	r3, r2, [r1]
 8011176:	61fb      	str	r3, [r7, #28]
   return(result);
 8011178:	69fb      	ldr	r3, [r7, #28]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d1e6      	bne.n	801114c <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 801117e:	e002      	b.n	8011186 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8011180:	2301      	movs	r3, #1
 8011182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8011186:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801118a:	e000      	b.n	801118e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801118c:	2302      	movs	r3, #2
  }
}
 801118e:	4618      	mov	r0, r3
 8011190:	3730      	adds	r7, #48	; 0x30
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}
	...

08011198 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011198:	b480      	push	{r7}
 801119a:	b085      	sub	sp, #20
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d108      	bne.n	80111ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2201      	movs	r2, #1
 80111ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2201      	movs	r2, #1
 80111b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80111b8:	e031      	b.n	801121e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80111ba:	2310      	movs	r3, #16
 80111bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80111be:	2310      	movs	r3, #16
 80111c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	689b      	ldr	r3, [r3, #8]
 80111c8:	0e5b      	lsrs	r3, r3, #25
 80111ca:	b2db      	uxtb	r3, r3
 80111cc:	f003 0307 	and.w	r3, r3, #7
 80111d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	689b      	ldr	r3, [r3, #8]
 80111d8:	0f5b      	lsrs	r3, r3, #29
 80111da:	b2db      	uxtb	r3, r3
 80111dc:	f003 0307 	and.w	r3, r3, #7
 80111e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80111e2:	7bbb      	ldrb	r3, [r7, #14]
 80111e4:	7b3a      	ldrb	r2, [r7, #12]
 80111e6:	4911      	ldr	r1, [pc, #68]	; (801122c <UARTEx_SetNbDataToProcess+0x94>)
 80111e8:	5c8a      	ldrb	r2, [r1, r2]
 80111ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80111ee:	7b3a      	ldrb	r2, [r7, #12]
 80111f0:	490f      	ldr	r1, [pc, #60]	; (8011230 <UARTEx_SetNbDataToProcess+0x98>)
 80111f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80111f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80111f8:	b29a      	uxth	r2, r3
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011200:	7bfb      	ldrb	r3, [r7, #15]
 8011202:	7b7a      	ldrb	r2, [r7, #13]
 8011204:	4909      	ldr	r1, [pc, #36]	; (801122c <UARTEx_SetNbDataToProcess+0x94>)
 8011206:	5c8a      	ldrb	r2, [r1, r2]
 8011208:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801120c:	7b7a      	ldrb	r2, [r7, #13]
 801120e:	4908      	ldr	r1, [pc, #32]	; (8011230 <UARTEx_SetNbDataToProcess+0x98>)
 8011210:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011212:	fb93 f3f2 	sdiv	r3, r3, r2
 8011216:	b29a      	uxth	r2, r3
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801121e:	bf00      	nop
 8011220:	3714      	adds	r7, #20
 8011222:	46bd      	mov	sp, r7
 8011224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011228:	4770      	bx	lr
 801122a:	bf00      	nop
 801122c:	080152b4 	.word	0x080152b4
 8011230:	080152bc 	.word	0x080152bc

08011234 <checkint>:
 8011234:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011238:	f240 33fe 	movw	r3, #1022	; 0x3fe
 801123c:	429a      	cmp	r2, r3
 801123e:	b570      	push	{r4, r5, r6, lr}
 8011240:	dd2a      	ble.n	8011298 <checkint+0x64>
 8011242:	f240 4333 	movw	r3, #1075	; 0x433
 8011246:	429a      	cmp	r2, r3
 8011248:	dc24      	bgt.n	8011294 <checkint+0x60>
 801124a:	1a9b      	subs	r3, r3, r2
 801124c:	f1a3 0620 	sub.w	r6, r3, #32
 8011250:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011254:	fa02 f403 	lsl.w	r4, r2, r3
 8011258:	fa02 f606 	lsl.w	r6, r2, r6
 801125c:	f1c3 0520 	rsb	r5, r3, #32
 8011260:	fa22 f505 	lsr.w	r5, r2, r5
 8011264:	4334      	orrs	r4, r6
 8011266:	432c      	orrs	r4, r5
 8011268:	409a      	lsls	r2, r3
 801126a:	ea20 0202 	bic.w	r2, r0, r2
 801126e:	ea21 0404 	bic.w	r4, r1, r4
 8011272:	4322      	orrs	r2, r4
 8011274:	f1a3 0420 	sub.w	r4, r3, #32
 8011278:	f1c3 0220 	rsb	r2, r3, #32
 801127c:	d10c      	bne.n	8011298 <checkint+0x64>
 801127e:	40d8      	lsrs	r0, r3
 8011280:	fa01 f302 	lsl.w	r3, r1, r2
 8011284:	4318      	orrs	r0, r3
 8011286:	40e1      	lsrs	r1, r4
 8011288:	4308      	orrs	r0, r1
 801128a:	f000 0001 	and.w	r0, r0, #1
 801128e:	f1d0 0002 	rsbs	r0, r0, #2
 8011292:	bd70      	pop	{r4, r5, r6, pc}
 8011294:	2002      	movs	r0, #2
 8011296:	e7fc      	b.n	8011292 <checkint+0x5e>
 8011298:	2000      	movs	r0, #0
 801129a:	e7fa      	b.n	8011292 <checkint+0x5e>
 801129c:	0000      	movs	r0, r0
	...

080112a0 <pow>:
 80112a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112a4:	ee10 4a90 	vmov	r4, s1
 80112a8:	ed2d 8b0a 	vpush	{d8-d12}
 80112ac:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 80112b0:	ee11 7a90 	vmov	r7, s3
 80112b4:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80112b8:	f240 73fd 	movw	r3, #2045	; 0x7fd
 80112bc:	429a      	cmp	r2, r3
 80112be:	ee10 6a10 	vmov	r6, s0
 80112c2:	ee11 0a10 	vmov	r0, s2
 80112c6:	b086      	sub	sp, #24
 80112c8:	46d4      	mov	ip, sl
 80112ca:	ea4f 5517 	mov.w	r5, r7, lsr #20
 80112ce:	d806      	bhi.n	80112de <pow+0x3e>
 80112d0:	f3c5 030a 	ubfx	r3, r5, #0, #11
 80112d4:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 80112d8:	2b7f      	cmp	r3, #127	; 0x7f
 80112da:	f240 8156 	bls.w	801158a <pow+0x2ea>
 80112de:	1802      	adds	r2, r0, r0
 80112e0:	eb47 0107 	adc.w	r1, r7, r7
 80112e4:	f06f 0e01 	mvn.w	lr, #1
 80112e8:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
 80112ec:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
 80112f0:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 80112f4:	45ce      	cmp	lr, r9
 80112f6:	eb73 0808 	sbcs.w	r8, r3, r8
 80112fa:	d23f      	bcs.n	801137c <pow+0xdc>
 80112fc:	ea52 0301 	orrs.w	r3, r2, r1
 8011300:	f04f 0300 	mov.w	r3, #0
 8011304:	d10c      	bne.n	8011320 <pow+0x80>
 8011306:	19b6      	adds	r6, r6, r6
 8011308:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 801130c:	4164      	adcs	r4, r4
 801130e:	42b3      	cmp	r3, r6
 8011310:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011314:	41a3      	sbcs	r3, r4
 8011316:	f0c0 808c 	bcc.w	8011432 <pow+0x192>
 801131a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801131e:	e028      	b.n	8011372 <pow+0xd2>
 8011320:	4da3      	ldr	r5, [pc, #652]	; (80115b0 <pow+0x310>)
 8011322:	42ac      	cmp	r4, r5
 8011324:	bf08      	it	eq
 8011326:	429e      	cmpeq	r6, r3
 8011328:	d107      	bne.n	801133a <pow+0x9a>
 801132a:	1800      	adds	r0, r0, r0
 801132c:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8011330:	417f      	adcs	r7, r7
 8011332:	4283      	cmp	r3, r0
 8011334:	4b9f      	ldr	r3, [pc, #636]	; (80115b4 <pow+0x314>)
 8011336:	41bb      	sbcs	r3, r7
 8011338:	e7ed      	b.n	8011316 <pow+0x76>
 801133a:	19b6      	adds	r6, r6, r6
 801133c:	489e      	ldr	r0, [pc, #632]	; (80115b8 <pow+0x318>)
 801133e:	4164      	adcs	r4, r4
 8011340:	42b3      	cmp	r3, r6
 8011342:	eb70 0504 	sbcs.w	r5, r0, r4
 8011346:	d374      	bcc.n	8011432 <pow+0x192>
 8011348:	4281      	cmp	r1, r0
 801134a:	bf08      	it	eq
 801134c:	429a      	cmpeq	r2, r3
 801134e:	d170      	bne.n	8011432 <pow+0x192>
 8011350:	4a9a      	ldr	r2, [pc, #616]	; (80115bc <pow+0x31c>)
 8011352:	4294      	cmp	r4, r2
 8011354:	bf08      	it	eq
 8011356:	429e      	cmpeq	r6, r3
 8011358:	d0df      	beq.n	801131a <pow+0x7a>
 801135a:	4294      	cmp	r4, r2
 801135c:	ea6f 0707 	mvn.w	r7, r7
 8011360:	bf34      	ite	cc
 8011362:	2400      	movcc	r4, #0
 8011364:	2401      	movcs	r4, #1
 8011366:	0fff      	lsrs	r7, r7, #31
 8011368:	42bc      	cmp	r4, r7
 801136a:	f040 81d9 	bne.w	8011720 <pow+0x480>
 801136e:	ee21 0b01 	vmul.f64	d0, d1, d1
 8011372:	b006      	add	sp, #24
 8011374:	ecbd 8b0a 	vpop	{d8-d12}
 8011378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801137c:	eb16 0806 	adds.w	r8, r6, r6
 8011380:	eb44 0904 	adc.w	r9, r4, r4
 8011384:	f118 31ff 	adds.w	r1, r8, #4294967295	; 0xffffffff
 8011388:	f169 0200 	sbc.w	r2, r9, #0
 801138c:	458e      	cmp	lr, r1
 801138e:	4193      	sbcs	r3, r2
 8011390:	d223      	bcs.n	80113da <pow+0x13a>
 8011392:	ee20 0b00 	vmul.f64	d0, d0, d0
 8011396:	2c00      	cmp	r4, #0
 8011398:	da12      	bge.n	80113c0 <pow+0x120>
 801139a:	4639      	mov	r1, r7
 801139c:	f7ff ff4a 	bl	8011234 <checkint>
 80113a0:	2801      	cmp	r0, #1
 80113a2:	d10d      	bne.n	80113c0 <pow+0x120>
 80113a4:	eeb1 0b40 	vneg.f64	d0, d0
 80113a8:	ea58 0309 	orrs.w	r3, r8, r9
 80113ac:	d10a      	bne.n	80113c4 <pow+0x124>
 80113ae:	2f00      	cmp	r7, #0
 80113b0:	dadf      	bge.n	8011372 <pow+0xd2>
 80113b2:	b006      	add	sp, #24
 80113b4:	ecbd 8b0a 	vpop	{d8-d12}
 80113b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113bc:	f000 bfec 	b.w	8012398 <__math_divzero>
 80113c0:	2000      	movs	r0, #0
 80113c2:	e7f1      	b.n	80113a8 <pow+0x108>
 80113c4:	2f00      	cmp	r7, #0
 80113c6:	dad4      	bge.n	8011372 <pow+0xd2>
 80113c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80113cc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80113d0:	ed8d 7b00 	vstr	d7, [sp]
 80113d4:	ed9d 0b00 	vldr	d0, [sp]
 80113d8:	e7cb      	b.n	8011372 <pow+0xd2>
 80113da:	2c00      	cmp	r4, #0
 80113dc:	da2c      	bge.n	8011438 <pow+0x198>
 80113de:	4639      	mov	r1, r7
 80113e0:	f7ff ff28 	bl	8011234 <checkint>
 80113e4:	b930      	cbnz	r0, 80113f4 <pow+0x154>
 80113e6:	b006      	add	sp, #24
 80113e8:	ecbd 8b0a 	vpop	{d8-d12}
 80113ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113f0:	f000 bfea 	b.w	80123c8 <__math_invalid>
 80113f4:	2801      	cmp	r0, #1
 80113f6:	bf14      	ite	ne
 80113f8:	2000      	movne	r0, #0
 80113fa:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 80113fe:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011402:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8011406:	f3c5 020a 	ubfx	r2, r5, #0, #11
 801140a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 801140e:	2b7f      	cmp	r3, #127	; 0x7f
 8011410:	d92d      	bls.n	801146e <pow+0x1ce>
 8011412:	4b67      	ldr	r3, [pc, #412]	; (80115b0 <pow+0x310>)
 8011414:	2000      	movs	r0, #0
 8011416:	429c      	cmp	r4, r3
 8011418:	bf08      	it	eq
 801141a:	4286      	cmpeq	r6, r0
 801141c:	f43f af7d 	beq.w	801131a <pow+0x7a>
 8011420:	f240 31bd 	movw	r1, #957	; 0x3bd
 8011424:	428a      	cmp	r2, r1
 8011426:	d80c      	bhi.n	8011442 <pow+0x1a2>
 8011428:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801142c:	42b0      	cmp	r0, r6
 801142e:	41a3      	sbcs	r3, r4
 8011430:	d204      	bcs.n	801143c <pow+0x19c>
 8011432:	ee31 0b00 	vadd.f64	d0, d1, d0
 8011436:	e79c      	b.n	8011372 <pow+0xd2>
 8011438:	2000      	movs	r0, #0
 801143a:	e7e4      	b.n	8011406 <pow+0x166>
 801143c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011440:	e797      	b.n	8011372 <pow+0xd2>
 8011442:	2e01      	cmp	r6, #1
 8011444:	eb74 0303 	sbcs.w	r3, r4, r3
 8011448:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801144c:	bf34      	ite	cc
 801144e:	2301      	movcc	r3, #1
 8011450:	2300      	movcs	r3, #0
 8011452:	4295      	cmp	r5, r2
 8011454:	bf8c      	ite	hi
 8011456:	2500      	movhi	r5, #0
 8011458:	2501      	movls	r5, #1
 801145a:	42ab      	cmp	r3, r5
 801145c:	f000 809d 	beq.w	801159a <pow+0x2fa>
 8011460:	b006      	add	sp, #24
 8011462:	ecbd 8b0a 	vpop	{d8-d12}
 8011466:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801146a:	f000 bf8d 	b.w	8012388 <__math_oflow>
 801146e:	f1bc 0f00 	cmp.w	ip, #0
 8011472:	d10b      	bne.n	801148c <pow+0x1ec>
 8011474:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 80115a8 <pow+0x308>
 8011478:	ee20 7b07 	vmul.f64	d7, d0, d7
 801147c:	ec53 2b17 	vmov	r2, r3, d7
 8011480:	ee17 6a10 	vmov	r6, s14
 8011484:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011488:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 801148c:	4b4c      	ldr	r3, [pc, #304]	; (80115c0 <pow+0x320>)
 801148e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011492:	4423      	add	r3, r4
 8011494:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8011498:	1519      	asrs	r1, r3, #20
 801149a:	0d1b      	lsrs	r3, r3, #20
 801149c:	051b      	lsls	r3, r3, #20
 801149e:	eba4 0903 	sub.w	r9, r4, r3
 80114a2:	4b48      	ldr	r3, [pc, #288]	; (80115c4 <pow+0x324>)
 80114a4:	ee04 1a10 	vmov	s8, r1
 80114a8:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 80114ac:	f1b6 0800 	subs.w	r8, r6, #0
 80114b0:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 80114b4:	ec49 8b15 	vmov	d5, r8, r9
 80114b8:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 80114bc:	eea5 6b07 	vfma.f64	d6, d5, d7
 80114c0:	ed93 7b00 	vldr	d7, [r3]
 80114c4:	ed93 5b02 	vldr	d5, [r3, #8]
 80114c8:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 80114cc:	eea4 2b07 	vfma.f64	d2, d4, d7
 80114d0:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 80114d4:	ee36 ab02 	vadd.f64	d10, d6, d2
 80114d8:	ee32 2b4a 	vsub.f64	d2, d2, d10
 80114dc:	eea4 7b05 	vfma.f64	d7, d4, d5
 80114e0:	ed93 5b04 	vldr	d5, [r3, #16]
 80114e4:	ee32 2b06 	vadd.f64	d2, d2, d6
 80114e8:	ee37 7b02 	vadd.f64	d7, d7, d2
 80114ec:	ee26 5b05 	vmul.f64	d5, d6, d5
 80114f0:	ed93 4b08 	vldr	d4, [r3, #32]
 80114f4:	ee26 0b05 	vmul.f64	d0, d6, d5
 80114f8:	eeb0 9b40 	vmov.f64	d9, d0
 80114fc:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8011500:	ed93 5b06 	vldr	d5, [r3, #24]
 8011504:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8011508:	ee26 bb00 	vmul.f64	d11, d6, d0
 801150c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8011510:	eea6 5b04 	vfma.f64	d5, d6, d4
 8011514:	ee3a ab48 	vsub.f64	d10, d10, d8
 8011518:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 801151c:	ee37 9b09 	vadd.f64	d9, d7, d9
 8011520:	ee3a ab00 	vadd.f64	d10, d10, d0
 8011524:	eea6 4b03 	vfma.f64	d4, d6, d3
 8011528:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 801152c:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8011530:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8011534:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8011538:	eea0 4b03 	vfma.f64	d4, d0, d3
 801153c:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011540:	eeab ab05 	vfma.f64	d10, d11, d5
 8011544:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8011548:	ee21 7b06 	vmul.f64	d7, d1, d6
 801154c:	ee17 3a90 	vmov	r3, s15
 8011550:	eeb0 5b47 	vmov.f64	d5, d7
 8011554:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8011558:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 801155c:	18b2      	adds	r2, r6, r2
 801155e:	2a3e      	cmp	r2, #62	; 0x3e
 8011560:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8011564:	ee38 8b46 	vsub.f64	d8, d8, d6
 8011568:	ee38 ab0a 	vadd.f64	d10, d8, d10
 801156c:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8011570:	d92b      	bls.n	80115ca <pow+0x32a>
 8011572:	2a00      	cmp	r2, #0
 8011574:	da0b      	bge.n	801158e <pow+0x2ee>
 8011576:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801157a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801157e:	2800      	cmp	r0, #0
 8011580:	f43f aef7 	beq.w	8011372 <pow+0xd2>
 8011584:	eeb1 0b40 	vneg.f64	d0, d0
 8011588:	e6f3      	b.n	8011372 <pow+0xd2>
 801158a:	2000      	movs	r0, #0
 801158c:	e77e      	b.n	801148c <pow+0x1ec>
 801158e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8011592:	d919      	bls.n	80115c8 <pow+0x328>
 8011594:	2b00      	cmp	r3, #0
 8011596:	f6bf af63 	bge.w	8011460 <pow+0x1c0>
 801159a:	b006      	add	sp, #24
 801159c:	ecbd 8b0a 	vpop	{d8-d12}
 80115a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115a4:	f000 bee8 	b.w	8012378 <__math_uflow>
 80115a8:	00000000 	.word	0x00000000
 80115ac:	43300000 	.word	0x43300000
 80115b0:	3ff00000 	.word	0x3ff00000
 80115b4:	fff00000 	.word	0xfff00000
 80115b8:	ffe00000 	.word	0xffe00000
 80115bc:	7fe00000 	.word	0x7fe00000
 80115c0:	c0196aab 	.word	0xc0196aab
 80115c4:	080152c8 	.word	0x080152c8
 80115c8:	2600      	movs	r6, #0
 80115ca:	495d      	ldr	r1, [pc, #372]	; (8011740 <pow+0x4a0>)
 80115cc:	ed91 4b02 	vldr	d4, [r1, #8]
 80115d0:	ed91 3b00 	vldr	d3, [r1]
 80115d4:	eeb0 6b44 	vmov.f64	d6, d4
 80115d8:	eea7 6b03 	vfma.f64	d6, d7, d3
 80115dc:	ee16 5a10 	vmov	r5, s12
 80115e0:	ee36 6b44 	vsub.f64	d6, d6, d4
 80115e4:	ed91 4b04 	vldr	d4, [r1, #16]
 80115e8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80115ec:	eea6 7b04 	vfma.f64	d7, d6, d4
 80115f0:	eeb0 0b47 	vmov.f64	d0, d7
 80115f4:	ed91 7b06 	vldr	d7, [r1, #24]
 80115f8:	18dc      	adds	r4, r3, r3
 80115fa:	f104 030f 	add.w	r3, r4, #15
 80115fe:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8011602:	eea6 0b07 	vfma.f64	d0, d6, d7
 8011606:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 801160a:	ee35 0b00 	vadd.f64	d0, d5, d0
 801160e:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011612:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8011616:	ed91 5b08 	vldr	d5, [r1, #32]
 801161a:	ee30 7b07 	vadd.f64	d7, d0, d7
 801161e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8011622:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011626:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801162a:	eea6 7b05 	vfma.f64	d7, d6, d5
 801162e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8011632:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8011636:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801163a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801163e:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011642:	1940      	adds	r0, r0, r5
 8011644:	2700      	movs	r7, #0
 8011646:	eb17 020c 	adds.w	r2, r7, ip
 801164a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801164e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011652:	2e00      	cmp	r6, #0
 8011654:	d15f      	bne.n	8011716 <pow+0x476>
 8011656:	42bd      	cmp	r5, r7
 8011658:	db13      	blt.n	8011682 <pow+0x3e2>
 801165a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 801165e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8011662:	4610      	mov	r0, r2
 8011664:	ec41 0b10 	vmov	d0, r0, r1
 8011668:	eea7 0b00 	vfma.f64	d0, d7, d0
 801166c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011728 <pow+0x488>
 8011670:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011674:	b006      	add	sp, #24
 8011676:	ecbd 8b0a 	vpop	{d8-d12}
 801167a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801167e:	f000 bebb 	b.w	80123f8 <__math_check_oflow>
 8011682:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8011686:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801168a:	4610      	mov	r0, r2
 801168c:	ec41 0b15 	vmov	d5, r0, r1
 8011690:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011694:	ee27 6b05 	vmul.f64	d6, d7, d5
 8011698:	ee35 7b06 	vadd.f64	d7, d5, d6
 801169c:	eeb0 3bc7 	vabs.f64	d3, d7
 80116a0:	eeb4 3bc4 	vcmpe.f64	d3, d4
 80116a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116a8:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8011730 <pow+0x490>
 80116ac:	d52a      	bpl.n	8011704 <pow+0x464>
 80116ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80116b2:	ee35 5b47 	vsub.f64	d5, d5, d7
 80116b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ba:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 80116be:	ee35 6b06 	vadd.f64	d6, d5, d6
 80116c2:	bf48      	it	mi
 80116c4:	eeb0 4b43 	vmovmi.f64	d4, d3
 80116c8:	ee37 3b04 	vadd.f64	d3, d7, d4
 80116cc:	ee34 5b43 	vsub.f64	d5, d4, d3
 80116d0:	ee35 7b07 	vadd.f64	d7, d5, d7
 80116d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80116d8:	ee37 7b03 	vadd.f64	d7, d7, d3
 80116dc:	ee37 7b44 	vsub.f64	d7, d7, d4
 80116e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80116e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116e8:	d104      	bne.n	80116f4 <pow+0x454>
 80116ea:	4632      	mov	r2, r6
 80116ec:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80116f0:	ec43 2b17 	vmov	d7, r2, r3
 80116f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80116f8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80116fc:	ee26 6b00 	vmul.f64	d6, d6, d0
 8011700:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011704:	ee27 0b00 	vmul.f64	d0, d7, d0
 8011708:	b006      	add	sp, #24
 801170a:	ecbd 8b0a 	vpop	{d8-d12}
 801170e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011712:	f000 be68 	b.w	80123e6 <__math_check_uflow>
 8011716:	ec43 2b10 	vmov	d0, r2, r3
 801171a:	eea7 0b00 	vfma.f64	d0, d7, d0
 801171e:	e628      	b.n	8011372 <pow+0xd2>
 8011720:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8011738 <pow+0x498>
 8011724:	e625      	b.n	8011372 <pow+0xd2>
 8011726:	bf00      	nop
 8011728:	00000000 	.word	0x00000000
 801172c:	7f000000 	.word	0x7f000000
 8011730:	00000000 	.word	0x00000000
 8011734:	00100000 	.word	0x00100000
	...
 8011740:	080164b0 	.word	0x080164b0
 8011744:	00000000 	.word	0x00000000

08011748 <cos>:
 8011748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801174a:	eeb0 7b40 	vmov.f64	d7, d0
 801174e:	ee17 3a90 	vmov	r3, s15
 8011752:	4a21      	ldr	r2, [pc, #132]	; (80117d8 <cos+0x90>)
 8011754:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011758:	4293      	cmp	r3, r2
 801175a:	dc06      	bgt.n	801176a <cos+0x22>
 801175c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80117d0 <cos+0x88>
 8011760:	b005      	add	sp, #20
 8011762:	f85d eb04 	ldr.w	lr, [sp], #4
 8011766:	f000 ba8f 	b.w	8011c88 <__kernel_cos>
 801176a:	4a1c      	ldr	r2, [pc, #112]	; (80117dc <cos+0x94>)
 801176c:	4293      	cmp	r3, r2
 801176e:	dd04      	ble.n	801177a <cos+0x32>
 8011770:	ee30 0b40 	vsub.f64	d0, d0, d0
 8011774:	b005      	add	sp, #20
 8011776:	f85d fb04 	ldr.w	pc, [sp], #4
 801177a:	4668      	mov	r0, sp
 801177c:	f000 f89c 	bl	80118b8 <__ieee754_rem_pio2>
 8011780:	f000 0003 	and.w	r0, r0, #3
 8011784:	2801      	cmp	r0, #1
 8011786:	d009      	beq.n	801179c <cos+0x54>
 8011788:	2802      	cmp	r0, #2
 801178a:	d010      	beq.n	80117ae <cos+0x66>
 801178c:	b9b0      	cbnz	r0, 80117bc <cos+0x74>
 801178e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011792:	ed9d 0b00 	vldr	d0, [sp]
 8011796:	f000 fa77 	bl	8011c88 <__kernel_cos>
 801179a:	e7eb      	b.n	8011774 <cos+0x2c>
 801179c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80117a0:	ed9d 0b00 	vldr	d0, [sp]
 80117a4:	f000 fd74 	bl	8012290 <__kernel_sin>
 80117a8:	eeb1 0b40 	vneg.f64	d0, d0
 80117ac:	e7e2      	b.n	8011774 <cos+0x2c>
 80117ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80117b2:	ed9d 0b00 	vldr	d0, [sp]
 80117b6:	f000 fa67 	bl	8011c88 <__kernel_cos>
 80117ba:	e7f5      	b.n	80117a8 <cos+0x60>
 80117bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80117c0:	ed9d 0b00 	vldr	d0, [sp]
 80117c4:	2001      	movs	r0, #1
 80117c6:	f000 fd63 	bl	8012290 <__kernel_sin>
 80117ca:	e7d3      	b.n	8011774 <cos+0x2c>
 80117cc:	f3af 8000 	nop.w
	...
 80117d8:	3fe921fb 	.word	0x3fe921fb
 80117dc:	7fefffff 	.word	0x7fefffff

080117e0 <sin>:
 80117e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80117e2:	eeb0 7b40 	vmov.f64	d7, d0
 80117e6:	ee17 3a90 	vmov	r3, s15
 80117ea:	4a21      	ldr	r2, [pc, #132]	; (8011870 <sin+0x90>)
 80117ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80117f0:	4293      	cmp	r3, r2
 80117f2:	dc07      	bgt.n	8011804 <sin+0x24>
 80117f4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8011868 <sin+0x88>
 80117f8:	2000      	movs	r0, #0
 80117fa:	b005      	add	sp, #20
 80117fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011800:	f000 bd46 	b.w	8012290 <__kernel_sin>
 8011804:	4a1b      	ldr	r2, [pc, #108]	; (8011874 <sin+0x94>)
 8011806:	4293      	cmp	r3, r2
 8011808:	dd04      	ble.n	8011814 <sin+0x34>
 801180a:	ee30 0b40 	vsub.f64	d0, d0, d0
 801180e:	b005      	add	sp, #20
 8011810:	f85d fb04 	ldr.w	pc, [sp], #4
 8011814:	4668      	mov	r0, sp
 8011816:	f000 f84f 	bl	80118b8 <__ieee754_rem_pio2>
 801181a:	f000 0003 	and.w	r0, r0, #3
 801181e:	2801      	cmp	r0, #1
 8011820:	d00a      	beq.n	8011838 <sin+0x58>
 8011822:	2802      	cmp	r0, #2
 8011824:	d00f      	beq.n	8011846 <sin+0x66>
 8011826:	b9c0      	cbnz	r0, 801185a <sin+0x7a>
 8011828:	ed9d 1b02 	vldr	d1, [sp, #8]
 801182c:	ed9d 0b00 	vldr	d0, [sp]
 8011830:	2001      	movs	r0, #1
 8011832:	f000 fd2d 	bl	8012290 <__kernel_sin>
 8011836:	e7ea      	b.n	801180e <sin+0x2e>
 8011838:	ed9d 1b02 	vldr	d1, [sp, #8]
 801183c:	ed9d 0b00 	vldr	d0, [sp]
 8011840:	f000 fa22 	bl	8011c88 <__kernel_cos>
 8011844:	e7e3      	b.n	801180e <sin+0x2e>
 8011846:	ed9d 1b02 	vldr	d1, [sp, #8]
 801184a:	ed9d 0b00 	vldr	d0, [sp]
 801184e:	2001      	movs	r0, #1
 8011850:	f000 fd1e 	bl	8012290 <__kernel_sin>
 8011854:	eeb1 0b40 	vneg.f64	d0, d0
 8011858:	e7d9      	b.n	801180e <sin+0x2e>
 801185a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801185e:	ed9d 0b00 	vldr	d0, [sp]
 8011862:	f000 fa11 	bl	8011c88 <__kernel_cos>
 8011866:	e7f5      	b.n	8011854 <sin+0x74>
	...
 8011870:	3fe921fb 	.word	0x3fe921fb
 8011874:	7fefffff 	.word	0x7fefffff

08011878 <atan2f>:
 8011878:	f000 b962 	b.w	8011b40 <__ieee754_atan2f>

0801187c <sqrtf>:
 801187c:	b508      	push	{r3, lr}
 801187e:	ed2d 8b02 	vpush	{d8}
 8011882:	eeb0 8a40 	vmov.f32	s16, s0
 8011886:	f000 f9f9 	bl	8011c7c <__ieee754_sqrtf>
 801188a:	eeb4 8a48 	vcmp.f32	s16, s16
 801188e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011892:	d60c      	bvs.n	80118ae <sqrtf+0x32>
 8011894:	eddf 8a07 	vldr	s17, [pc, #28]	; 80118b4 <sqrtf+0x38>
 8011898:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801189c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118a0:	d505      	bpl.n	80118ae <sqrtf+0x32>
 80118a2:	f000 ffa3 	bl	80127ec <__errno>
 80118a6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80118aa:	2321      	movs	r3, #33	; 0x21
 80118ac:	6003      	str	r3, [r0, #0]
 80118ae:	ecbd 8b02 	vpop	{d8}
 80118b2:	bd08      	pop	{r3, pc}
 80118b4:	00000000 	.word	0x00000000

080118b8 <__ieee754_rem_pio2>:
 80118b8:	b570      	push	{r4, r5, r6, lr}
 80118ba:	eeb0 7b40 	vmov.f64	d7, d0
 80118be:	ee17 5a90 	vmov	r5, s15
 80118c2:	4b99      	ldr	r3, [pc, #612]	; (8011b28 <__ieee754_rem_pio2+0x270>)
 80118c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80118c8:	429e      	cmp	r6, r3
 80118ca:	b088      	sub	sp, #32
 80118cc:	4604      	mov	r4, r0
 80118ce:	dc07      	bgt.n	80118e0 <__ieee754_rem_pio2+0x28>
 80118d0:	2200      	movs	r2, #0
 80118d2:	2300      	movs	r3, #0
 80118d4:	ed84 0b00 	vstr	d0, [r4]
 80118d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80118dc:	2000      	movs	r0, #0
 80118de:	e01b      	b.n	8011918 <__ieee754_rem_pio2+0x60>
 80118e0:	4b92      	ldr	r3, [pc, #584]	; (8011b2c <__ieee754_rem_pio2+0x274>)
 80118e2:	429e      	cmp	r6, r3
 80118e4:	dc3b      	bgt.n	801195e <__ieee754_rem_pio2+0xa6>
 80118e6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80118ea:	2d00      	cmp	r5, #0
 80118ec:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8011ae8 <__ieee754_rem_pio2+0x230>
 80118f0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80118f4:	dd19      	ble.n	801192a <__ieee754_rem_pio2+0x72>
 80118f6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80118fa:	429e      	cmp	r6, r3
 80118fc:	d00e      	beq.n	801191c <__ieee754_rem_pio2+0x64>
 80118fe:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8011af0 <__ieee754_rem_pio2+0x238>
 8011902:	ee37 5b46 	vsub.f64	d5, d7, d6
 8011906:	ee37 7b45 	vsub.f64	d7, d7, d5
 801190a:	ed84 5b00 	vstr	d5, [r4]
 801190e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011912:	ed84 7b02 	vstr	d7, [r4, #8]
 8011916:	2001      	movs	r0, #1
 8011918:	b008      	add	sp, #32
 801191a:	bd70      	pop	{r4, r5, r6, pc}
 801191c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011af8 <__ieee754_rem_pio2+0x240>
 8011920:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011924:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011b00 <__ieee754_rem_pio2+0x248>
 8011928:	e7eb      	b.n	8011902 <__ieee754_rem_pio2+0x4a>
 801192a:	429e      	cmp	r6, r3
 801192c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011930:	d00e      	beq.n	8011950 <__ieee754_rem_pio2+0x98>
 8011932:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8011af0 <__ieee754_rem_pio2+0x238>
 8011936:	ee37 5b06 	vadd.f64	d5, d7, d6
 801193a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801193e:	ed84 5b00 	vstr	d5, [r4]
 8011942:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011946:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801194a:	ed84 7b02 	vstr	d7, [r4, #8]
 801194e:	e7e3      	b.n	8011918 <__ieee754_rem_pio2+0x60>
 8011950:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011af8 <__ieee754_rem_pio2+0x240>
 8011954:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011958:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011b00 <__ieee754_rem_pio2+0x248>
 801195c:	e7eb      	b.n	8011936 <__ieee754_rem_pio2+0x7e>
 801195e:	4b74      	ldr	r3, [pc, #464]	; (8011b30 <__ieee754_rem_pio2+0x278>)
 8011960:	429e      	cmp	r6, r3
 8011962:	dc70      	bgt.n	8011a46 <__ieee754_rem_pio2+0x18e>
 8011964:	f000 fd5c 	bl	8012420 <fabs>
 8011968:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801196c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8011b08 <__ieee754_rem_pio2+0x250>
 8011970:	eea0 7b06 	vfma.f64	d7, d0, d6
 8011974:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011978:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801197c:	ee17 0a90 	vmov	r0, s15
 8011980:	eeb1 4b45 	vneg.f64	d4, d5
 8011984:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011ae8 <__ieee754_rem_pio2+0x230>
 8011988:	eea5 0b47 	vfms.f64	d0, d5, d7
 801198c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011af0 <__ieee754_rem_pio2+0x238>
 8011990:	281f      	cmp	r0, #31
 8011992:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011996:	ee30 6b47 	vsub.f64	d6, d0, d7
 801199a:	dc08      	bgt.n	80119ae <__ieee754_rem_pio2+0xf6>
 801199c:	4b65      	ldr	r3, [pc, #404]	; (8011b34 <__ieee754_rem_pio2+0x27c>)
 801199e:	1e42      	subs	r2, r0, #1
 80119a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119a4:	42b3      	cmp	r3, r6
 80119a6:	d002      	beq.n	80119ae <__ieee754_rem_pio2+0xf6>
 80119a8:	ed84 6b00 	vstr	d6, [r4]
 80119ac:	e026      	b.n	80119fc <__ieee754_rem_pio2+0x144>
 80119ae:	ee16 3a90 	vmov	r3, s13
 80119b2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80119b6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80119ba:	2b10      	cmp	r3, #16
 80119bc:	ea4f 5226 	mov.w	r2, r6, asr #20
 80119c0:	ddf2      	ble.n	80119a8 <__ieee754_rem_pio2+0xf0>
 80119c2:	eeb0 6b40 	vmov.f64	d6, d0
 80119c6:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011af8 <__ieee754_rem_pio2+0x240>
 80119ca:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8011b00 <__ieee754_rem_pio2+0x248>
 80119ce:	eea4 6b07 	vfma.f64	d6, d4, d7
 80119d2:	ee30 0b46 	vsub.f64	d0, d0, d6
 80119d6:	eea4 0b07 	vfma.f64	d0, d4, d7
 80119da:	eeb0 7b40 	vmov.f64	d7, d0
 80119de:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80119e2:	ee36 3b47 	vsub.f64	d3, d6, d7
 80119e6:	ee13 3a90 	vmov	r3, s7
 80119ea:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80119ee:	1ad3      	subs	r3, r2, r3
 80119f0:	2b31      	cmp	r3, #49	; 0x31
 80119f2:	dc17      	bgt.n	8011a24 <__ieee754_rem_pio2+0x16c>
 80119f4:	eeb0 0b46 	vmov.f64	d0, d6
 80119f8:	ed84 3b00 	vstr	d3, [r4]
 80119fc:	ed94 6b00 	vldr	d6, [r4]
 8011a00:	2d00      	cmp	r5, #0
 8011a02:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011a06:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011a0a:	ed84 0b02 	vstr	d0, [r4, #8]
 8011a0e:	da83      	bge.n	8011918 <__ieee754_rem_pio2+0x60>
 8011a10:	eeb1 6b46 	vneg.f64	d6, d6
 8011a14:	eeb1 0b40 	vneg.f64	d0, d0
 8011a18:	ed84 6b00 	vstr	d6, [r4]
 8011a1c:	ed84 0b02 	vstr	d0, [r4, #8]
 8011a20:	4240      	negs	r0, r0
 8011a22:	e779      	b.n	8011918 <__ieee754_rem_pio2+0x60>
 8011a24:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8011b10 <__ieee754_rem_pio2+0x258>
 8011a28:	eeb0 0b46 	vmov.f64	d0, d6
 8011a2c:	eea4 0b03 	vfma.f64	d0, d4, d3
 8011a30:	ee36 7b40 	vsub.f64	d7, d6, d0
 8011a34:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8011b18 <__ieee754_rem_pio2+0x260>
 8011a38:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011a3c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8011a40:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011a44:	e7b0      	b.n	80119a8 <__ieee754_rem_pio2+0xf0>
 8011a46:	4b3c      	ldr	r3, [pc, #240]	; (8011b38 <__ieee754_rem_pio2+0x280>)
 8011a48:	429e      	cmp	r6, r3
 8011a4a:	dd06      	ble.n	8011a5a <__ieee754_rem_pio2+0x1a2>
 8011a4c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011a50:	ed80 7b02 	vstr	d7, [r0, #8]
 8011a54:	ed80 7b00 	vstr	d7, [r0]
 8011a58:	e740      	b.n	80118dc <__ieee754_rem_pio2+0x24>
 8011a5a:	1532      	asrs	r2, r6, #20
 8011a5c:	ee10 0a10 	vmov	r0, s0
 8011a60:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8011a64:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8011a68:	ec41 0b17 	vmov	d7, r0, r1
 8011a6c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011a70:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8011b20 <__ieee754_rem_pio2+0x268>
 8011a74:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011a78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011a7c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011a80:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011a84:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011a88:	a902      	add	r1, sp, #8
 8011a8a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011a8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011a92:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011a96:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011a9a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011a9e:	2603      	movs	r6, #3
 8011aa0:	4608      	mov	r0, r1
 8011aa2:	ed91 7b04 	vldr	d7, [r1, #16]
 8011aa6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aae:	4633      	mov	r3, r6
 8011ab0:	f1a1 0108 	sub.w	r1, r1, #8
 8011ab4:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8011ab8:	d0f3      	beq.n	8011aa2 <__ieee754_rem_pio2+0x1ea>
 8011aba:	4920      	ldr	r1, [pc, #128]	; (8011b3c <__ieee754_rem_pio2+0x284>)
 8011abc:	9101      	str	r1, [sp, #4]
 8011abe:	2102      	movs	r1, #2
 8011ac0:	9100      	str	r1, [sp, #0]
 8011ac2:	4621      	mov	r1, r4
 8011ac4:	f000 f94c 	bl	8011d60 <__kernel_rem_pio2>
 8011ac8:	2d00      	cmp	r5, #0
 8011aca:	f6bf af25 	bge.w	8011918 <__ieee754_rem_pio2+0x60>
 8011ace:	ed94 7b00 	vldr	d7, [r4]
 8011ad2:	eeb1 7b47 	vneg.f64	d7, d7
 8011ad6:	ed84 7b00 	vstr	d7, [r4]
 8011ada:	ed94 7b02 	vldr	d7, [r4, #8]
 8011ade:	eeb1 7b47 	vneg.f64	d7, d7
 8011ae2:	ed84 7b02 	vstr	d7, [r4, #8]
 8011ae6:	e79b      	b.n	8011a20 <__ieee754_rem_pio2+0x168>
 8011ae8:	54400000 	.word	0x54400000
 8011aec:	3ff921fb 	.word	0x3ff921fb
 8011af0:	1a626331 	.word	0x1a626331
 8011af4:	3dd0b461 	.word	0x3dd0b461
 8011af8:	1a600000 	.word	0x1a600000
 8011afc:	3dd0b461 	.word	0x3dd0b461
 8011b00:	2e037073 	.word	0x2e037073
 8011b04:	3ba3198a 	.word	0x3ba3198a
 8011b08:	6dc9c883 	.word	0x6dc9c883
 8011b0c:	3fe45f30 	.word	0x3fe45f30
 8011b10:	2e000000 	.word	0x2e000000
 8011b14:	3ba3198a 	.word	0x3ba3198a
 8011b18:	252049c1 	.word	0x252049c1
 8011b1c:	397b839a 	.word	0x397b839a
 8011b20:	00000000 	.word	0x00000000
 8011b24:	41700000 	.word	0x41700000
 8011b28:	3fe921fb 	.word	0x3fe921fb
 8011b2c:	4002d97b 	.word	0x4002d97b
 8011b30:	413921fb 	.word	0x413921fb
 8011b34:	08016310 	.word	0x08016310
 8011b38:	7fefffff 	.word	0x7fefffff
 8011b3c:	08016390 	.word	0x08016390

08011b40 <__ieee754_atan2f>:
 8011b40:	ee10 2a90 	vmov	r2, s1
 8011b44:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8011b48:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011b4c:	b510      	push	{r4, lr}
 8011b4e:	eef0 7a40 	vmov.f32	s15, s0
 8011b52:	dc06      	bgt.n	8011b62 <__ieee754_atan2f+0x22>
 8011b54:	ee10 0a10 	vmov	r0, s0
 8011b58:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8011b5c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011b60:	dd04      	ble.n	8011b6c <__ieee754_atan2f+0x2c>
 8011b62:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011b66:	eeb0 0a67 	vmov.f32	s0, s15
 8011b6a:	bd10      	pop	{r4, pc}
 8011b6c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8011b70:	d103      	bne.n	8011b7a <__ieee754_atan2f+0x3a>
 8011b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b76:	f000 bd5d 	b.w	8012634 <atanf>
 8011b7a:	1794      	asrs	r4, r2, #30
 8011b7c:	f004 0402 	and.w	r4, r4, #2
 8011b80:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011b84:	b93b      	cbnz	r3, 8011b96 <__ieee754_atan2f+0x56>
 8011b86:	2c02      	cmp	r4, #2
 8011b88:	d05c      	beq.n	8011c44 <__ieee754_atan2f+0x104>
 8011b8a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8011c58 <__ieee754_atan2f+0x118>
 8011b8e:	2c03      	cmp	r4, #3
 8011b90:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8011b94:	e7e7      	b.n	8011b66 <__ieee754_atan2f+0x26>
 8011b96:	b939      	cbnz	r1, 8011ba8 <__ieee754_atan2f+0x68>
 8011b98:	eddf 7a30 	vldr	s15, [pc, #192]	; 8011c5c <__ieee754_atan2f+0x11c>
 8011b9c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8011c60 <__ieee754_atan2f+0x120>
 8011ba0:	2800      	cmp	r0, #0
 8011ba2:	fe67 7a80 	vselge.f32	s15, s15, s0
 8011ba6:	e7de      	b.n	8011b66 <__ieee754_atan2f+0x26>
 8011ba8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011bac:	d110      	bne.n	8011bd0 <__ieee754_atan2f+0x90>
 8011bae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011bb2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011bb6:	d107      	bne.n	8011bc8 <__ieee754_atan2f+0x88>
 8011bb8:	2c02      	cmp	r4, #2
 8011bba:	d846      	bhi.n	8011c4a <__ieee754_atan2f+0x10a>
 8011bbc:	4b29      	ldr	r3, [pc, #164]	; (8011c64 <__ieee754_atan2f+0x124>)
 8011bbe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011bc2:	edd4 7a00 	vldr	s15, [r4]
 8011bc6:	e7ce      	b.n	8011b66 <__ieee754_atan2f+0x26>
 8011bc8:	2c02      	cmp	r4, #2
 8011bca:	d841      	bhi.n	8011c50 <__ieee754_atan2f+0x110>
 8011bcc:	4b26      	ldr	r3, [pc, #152]	; (8011c68 <__ieee754_atan2f+0x128>)
 8011bce:	e7f6      	b.n	8011bbe <__ieee754_atan2f+0x7e>
 8011bd0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011bd4:	d0e0      	beq.n	8011b98 <__ieee754_atan2f+0x58>
 8011bd6:	1a5b      	subs	r3, r3, r1
 8011bd8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8011bdc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8011be0:	da1a      	bge.n	8011c18 <__ieee754_atan2f+0xd8>
 8011be2:	2a00      	cmp	r2, #0
 8011be4:	da01      	bge.n	8011bea <__ieee754_atan2f+0xaa>
 8011be6:	313c      	adds	r1, #60	; 0x3c
 8011be8:	db19      	blt.n	8011c1e <__ieee754_atan2f+0xde>
 8011bea:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8011bee:	f000 fdf5 	bl	80127dc <fabsf>
 8011bf2:	f000 fd1f 	bl	8012634 <atanf>
 8011bf6:	eef0 7a40 	vmov.f32	s15, s0
 8011bfa:	2c01      	cmp	r4, #1
 8011bfc:	d012      	beq.n	8011c24 <__ieee754_atan2f+0xe4>
 8011bfe:	2c02      	cmp	r4, #2
 8011c00:	d017      	beq.n	8011c32 <__ieee754_atan2f+0xf2>
 8011c02:	2c00      	cmp	r4, #0
 8011c04:	d0af      	beq.n	8011b66 <__ieee754_atan2f+0x26>
 8011c06:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8011c6c <__ieee754_atan2f+0x12c>
 8011c0a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011c0e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8011c70 <__ieee754_atan2f+0x130>
 8011c12:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011c16:	e7a6      	b.n	8011b66 <__ieee754_atan2f+0x26>
 8011c18:	eddf 7a10 	vldr	s15, [pc, #64]	; 8011c5c <__ieee754_atan2f+0x11c>
 8011c1c:	e7ed      	b.n	8011bfa <__ieee754_atan2f+0xba>
 8011c1e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8011c74 <__ieee754_atan2f+0x134>
 8011c22:	e7ea      	b.n	8011bfa <__ieee754_atan2f+0xba>
 8011c24:	ee17 3a90 	vmov	r3, s15
 8011c28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011c2c:	ee07 3a90 	vmov	s15, r3
 8011c30:	e799      	b.n	8011b66 <__ieee754_atan2f+0x26>
 8011c32:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8011c6c <__ieee754_atan2f+0x12c>
 8011c36:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011c3a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8011c70 <__ieee754_atan2f+0x130>
 8011c3e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011c42:	e790      	b.n	8011b66 <__ieee754_atan2f+0x26>
 8011c44:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8011c70 <__ieee754_atan2f+0x130>
 8011c48:	e78d      	b.n	8011b66 <__ieee754_atan2f+0x26>
 8011c4a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8011c78 <__ieee754_atan2f+0x138>
 8011c4e:	e78a      	b.n	8011b66 <__ieee754_atan2f+0x26>
 8011c50:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011c74 <__ieee754_atan2f+0x134>
 8011c54:	e787      	b.n	8011b66 <__ieee754_atan2f+0x26>
 8011c56:	bf00      	nop
 8011c58:	c0490fdb 	.word	0xc0490fdb
 8011c5c:	3fc90fdb 	.word	0x3fc90fdb
 8011c60:	bfc90fdb 	.word	0xbfc90fdb
 8011c64:	08016498 	.word	0x08016498
 8011c68:	080164a4 	.word	0x080164a4
 8011c6c:	33bbbd2e 	.word	0x33bbbd2e
 8011c70:	40490fdb 	.word	0x40490fdb
 8011c74:	00000000 	.word	0x00000000
 8011c78:	3f490fdb 	.word	0x3f490fdb

08011c7c <__ieee754_sqrtf>:
 8011c7c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011c80:	4770      	bx	lr
 8011c82:	0000      	movs	r0, r0
 8011c84:	0000      	movs	r0, r0
	...

08011c88 <__kernel_cos>:
 8011c88:	ee10 1a90 	vmov	r1, s1
 8011c8c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011c90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011c94:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8011c98:	da05      	bge.n	8011ca6 <__kernel_cos+0x1e>
 8011c9a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011c9e:	ee17 3a90 	vmov	r3, s15
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d03d      	beq.n	8011d22 <__kernel_cos+0x9a>
 8011ca6:	ee20 3b00 	vmul.f64	d3, d0, d0
 8011caa:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8011d28 <__kernel_cos+0xa0>
 8011cae:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011d30 <__kernel_cos+0xa8>
 8011cb2:	eea3 6b07 	vfma.f64	d6, d3, d7
 8011cb6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011d38 <__kernel_cos+0xb0>
 8011cba:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011cbe:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011d40 <__kernel_cos+0xb8>
 8011cc2:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011cc6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011d48 <__kernel_cos+0xc0>
 8011cca:	4b23      	ldr	r3, [pc, #140]	; (8011d58 <__kernel_cos+0xd0>)
 8011ccc:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011cd0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8011d50 <__kernel_cos+0xc8>
 8011cd4:	4299      	cmp	r1, r3
 8011cd6:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011cda:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011cde:	ee26 5b03 	vmul.f64	d5, d6, d3
 8011ce2:	ee23 7b07 	vmul.f64	d7, d3, d7
 8011ce6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8011cea:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011cee:	dc04      	bgt.n	8011cfa <__kernel_cos+0x72>
 8011cf0:	ee37 6b46 	vsub.f64	d6, d7, d6
 8011cf4:	ee34 0b46 	vsub.f64	d0, d4, d6
 8011cf8:	4770      	bx	lr
 8011cfa:	4b18      	ldr	r3, [pc, #96]	; (8011d5c <__kernel_cos+0xd4>)
 8011cfc:	4299      	cmp	r1, r3
 8011cfe:	dc0d      	bgt.n	8011d1c <__kernel_cos+0x94>
 8011d00:	2200      	movs	r2, #0
 8011d02:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8011d06:	ec43 2b15 	vmov	d5, r2, r3
 8011d0a:	ee34 0b45 	vsub.f64	d0, d4, d5
 8011d0e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011d12:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011d16:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011d1a:	4770      	bx	lr
 8011d1c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8011d20:	e7f3      	b.n	8011d0a <__kernel_cos+0x82>
 8011d22:	eeb0 0b44 	vmov.f64	d0, d4
 8011d26:	4770      	bx	lr
 8011d28:	be8838d4 	.word	0xbe8838d4
 8011d2c:	bda8fae9 	.word	0xbda8fae9
 8011d30:	bdb4b1c4 	.word	0xbdb4b1c4
 8011d34:	3e21ee9e 	.word	0x3e21ee9e
 8011d38:	809c52ad 	.word	0x809c52ad
 8011d3c:	be927e4f 	.word	0xbe927e4f
 8011d40:	19cb1590 	.word	0x19cb1590
 8011d44:	3efa01a0 	.word	0x3efa01a0
 8011d48:	16c15177 	.word	0x16c15177
 8011d4c:	bf56c16c 	.word	0xbf56c16c
 8011d50:	5555554c 	.word	0x5555554c
 8011d54:	3fa55555 	.word	0x3fa55555
 8011d58:	3fd33332 	.word	0x3fd33332
 8011d5c:	3fe90000 	.word	0x3fe90000

08011d60 <__kernel_rem_pio2>:
 8011d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d64:	ed2d 8b06 	vpush	{d8-d10}
 8011d68:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8011d6c:	460f      	mov	r7, r1
 8011d6e:	9002      	str	r0, [sp, #8]
 8011d70:	49c5      	ldr	r1, [pc, #788]	; (8012088 <__kernel_rem_pio2+0x328>)
 8011d72:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8011d74:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8011d78:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8011d7c:	9301      	str	r3, [sp, #4]
 8011d7e:	f112 0f14 	cmn.w	r2, #20
 8011d82:	bfa8      	it	ge
 8011d84:	2018      	movge	r0, #24
 8011d86:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8011d8a:	bfb8      	it	lt
 8011d8c:	2000      	movlt	r0, #0
 8011d8e:	f06f 0417 	mvn.w	r4, #23
 8011d92:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8012070 <__kernel_rem_pio2+0x310>
 8011d96:	bfa4      	itt	ge
 8011d98:	f1a2 0a03 	subge.w	sl, r2, #3
 8011d9c:	fb9a f0f0 	sdivge	r0, sl, r0
 8011da0:	fb00 4404 	mla	r4, r0, r4, r4
 8011da4:	1a46      	subs	r6, r0, r1
 8011da6:	4414      	add	r4, r2
 8011da8:	eb09 0c01 	add.w	ip, r9, r1
 8011dac:	ad1a      	add	r5, sp, #104	; 0x68
 8011dae:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8011db2:	2200      	movs	r2, #0
 8011db4:	4562      	cmp	r2, ip
 8011db6:	dd10      	ble.n	8011dda <__kernel_rem_pio2+0x7a>
 8011db8:	9a01      	ldr	r2, [sp, #4]
 8011dba:	ab1a      	add	r3, sp, #104	; 0x68
 8011dbc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011dc0:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8011dc4:	f04f 0c00 	mov.w	ip, #0
 8011dc8:	45cc      	cmp	ip, r9
 8011dca:	dc26      	bgt.n	8011e1a <__kernel_rem_pio2+0xba>
 8011dcc:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8012070 <__kernel_rem_pio2+0x310>
 8011dd0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011dd4:	4616      	mov	r6, r2
 8011dd6:	2500      	movs	r5, #0
 8011dd8:	e015      	b.n	8011e06 <__kernel_rem_pio2+0xa6>
 8011dda:	42d6      	cmn	r6, r2
 8011ddc:	d409      	bmi.n	8011df2 <__kernel_rem_pio2+0x92>
 8011dde:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8011de2:	ee07 3a90 	vmov	s15, r3
 8011de6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011dea:	eca5 7b02 	vstmia	r5!, {d7}
 8011dee:	3201      	adds	r2, #1
 8011df0:	e7e0      	b.n	8011db4 <__kernel_rem_pio2+0x54>
 8011df2:	eeb0 7b46 	vmov.f64	d7, d6
 8011df6:	e7f8      	b.n	8011dea <__kernel_rem_pio2+0x8a>
 8011df8:	ecb8 5b02 	vldmia	r8!, {d5}
 8011dfc:	ed96 6b00 	vldr	d6, [r6]
 8011e00:	3501      	adds	r5, #1
 8011e02:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011e06:	428d      	cmp	r5, r1
 8011e08:	f1a6 0608 	sub.w	r6, r6, #8
 8011e0c:	ddf4      	ble.n	8011df8 <__kernel_rem_pio2+0x98>
 8011e0e:	ecaa 7b02 	vstmia	sl!, {d7}
 8011e12:	f10c 0c01 	add.w	ip, ip, #1
 8011e16:	3208      	adds	r2, #8
 8011e18:	e7d6      	b.n	8011dc8 <__kernel_rem_pio2+0x68>
 8011e1a:	ab06      	add	r3, sp, #24
 8011e1c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8012078 <__kernel_rem_pio2+0x318>
 8011e20:	ed9f ab97 	vldr	d10, [pc, #604]	; 8012080 <__kernel_rem_pio2+0x320>
 8011e24:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8011e28:	9303      	str	r3, [sp, #12]
 8011e2a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8011e2e:	464d      	mov	r5, r9
 8011e30:	00eb      	lsls	r3, r5, #3
 8011e32:	9304      	str	r3, [sp, #16]
 8011e34:	ab92      	add	r3, sp, #584	; 0x248
 8011e36:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8011e3a:	f10d 0b18 	add.w	fp, sp, #24
 8011e3e:	ab6a      	add	r3, sp, #424	; 0x1a8
 8011e40:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8011e44:	465e      	mov	r6, fp
 8011e46:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8011e4a:	4628      	mov	r0, r5
 8011e4c:	2800      	cmp	r0, #0
 8011e4e:	f1a2 0208 	sub.w	r2, r2, #8
 8011e52:	dc4c      	bgt.n	8011eee <__kernel_rem_pio2+0x18e>
 8011e54:	4620      	mov	r0, r4
 8011e56:	9105      	str	r1, [sp, #20]
 8011e58:	f000 fb62 	bl	8012520 <scalbn>
 8011e5c:	eeb0 8b40 	vmov.f64	d8, d0
 8011e60:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8011e64:	ee28 0b00 	vmul.f64	d0, d8, d0
 8011e68:	f000 fae6 	bl	8012438 <floor>
 8011e6c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8011e70:	eea0 8b47 	vfms.f64	d8, d0, d7
 8011e74:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8011e78:	2c00      	cmp	r4, #0
 8011e7a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8011e7e:	ee17 8a90 	vmov	r8, s15
 8011e82:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011e86:	9905      	ldr	r1, [sp, #20]
 8011e88:	dd43      	ble.n	8011f12 <__kernel_rem_pio2+0x1b2>
 8011e8a:	1e68      	subs	r0, r5, #1
 8011e8c:	ab06      	add	r3, sp, #24
 8011e8e:	f1c4 0c18 	rsb	ip, r4, #24
 8011e92:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8011e96:	fa46 f20c 	asr.w	r2, r6, ip
 8011e9a:	4490      	add	r8, r2
 8011e9c:	fa02 f20c 	lsl.w	r2, r2, ip
 8011ea0:	1ab6      	subs	r6, r6, r2
 8011ea2:	f1c4 0217 	rsb	r2, r4, #23
 8011ea6:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8011eaa:	4116      	asrs	r6, r2
 8011eac:	2e00      	cmp	r6, #0
 8011eae:	dd3f      	ble.n	8011f30 <__kernel_rem_pio2+0x1d0>
 8011eb0:	f04f 0c00 	mov.w	ip, #0
 8011eb4:	f108 0801 	add.w	r8, r8, #1
 8011eb8:	4660      	mov	r0, ip
 8011eba:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8011ebe:	4565      	cmp	r5, ip
 8011ec0:	dc6e      	bgt.n	8011fa0 <__kernel_rem_pio2+0x240>
 8011ec2:	2c00      	cmp	r4, #0
 8011ec4:	dd04      	ble.n	8011ed0 <__kernel_rem_pio2+0x170>
 8011ec6:	2c01      	cmp	r4, #1
 8011ec8:	d07f      	beq.n	8011fca <__kernel_rem_pio2+0x26a>
 8011eca:	2c02      	cmp	r4, #2
 8011ecc:	f000 8087 	beq.w	8011fde <__kernel_rem_pio2+0x27e>
 8011ed0:	2e02      	cmp	r6, #2
 8011ed2:	d12d      	bne.n	8011f30 <__kernel_rem_pio2+0x1d0>
 8011ed4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011ed8:	ee30 8b48 	vsub.f64	d8, d0, d8
 8011edc:	b340      	cbz	r0, 8011f30 <__kernel_rem_pio2+0x1d0>
 8011ede:	4620      	mov	r0, r4
 8011ee0:	9105      	str	r1, [sp, #20]
 8011ee2:	f000 fb1d 	bl	8012520 <scalbn>
 8011ee6:	9905      	ldr	r1, [sp, #20]
 8011ee8:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011eec:	e020      	b.n	8011f30 <__kernel_rem_pio2+0x1d0>
 8011eee:	ee20 7b09 	vmul.f64	d7, d0, d9
 8011ef2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011ef6:	3801      	subs	r0, #1
 8011ef8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8011efc:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8011f00:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011f04:	eca6 0a01 	vstmia	r6!, {s0}
 8011f08:	ed92 0b00 	vldr	d0, [r2]
 8011f0c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011f10:	e79c      	b.n	8011e4c <__kernel_rem_pio2+0xec>
 8011f12:	d105      	bne.n	8011f20 <__kernel_rem_pio2+0x1c0>
 8011f14:	1e6a      	subs	r2, r5, #1
 8011f16:	ab06      	add	r3, sp, #24
 8011f18:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8011f1c:	15f6      	asrs	r6, r6, #23
 8011f1e:	e7c5      	b.n	8011eac <__kernel_rem_pio2+0x14c>
 8011f20:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011f24:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f2c:	da36      	bge.n	8011f9c <__kernel_rem_pio2+0x23c>
 8011f2e:	2600      	movs	r6, #0
 8011f30:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f38:	f040 80aa 	bne.w	8012090 <__kernel_rem_pio2+0x330>
 8011f3c:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8011f40:	4658      	mov	r0, fp
 8011f42:	2200      	movs	r2, #0
 8011f44:	4548      	cmp	r0, r9
 8011f46:	da52      	bge.n	8011fee <__kernel_rem_pio2+0x28e>
 8011f48:	2a00      	cmp	r2, #0
 8011f4a:	f000 8081 	beq.w	8012050 <__kernel_rem_pio2+0x2f0>
 8011f4e:	ab06      	add	r3, sp, #24
 8011f50:	3c18      	subs	r4, #24
 8011f52:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	f000 8087 	beq.w	801206a <__kernel_rem_pio2+0x30a>
 8011f5c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011f60:	4620      	mov	r0, r4
 8011f62:	f000 fadd 	bl	8012520 <scalbn>
 8011f66:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011f6a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8012078 <__kernel_rem_pio2+0x318>
 8011f6e:	a96a      	add	r1, sp, #424	; 0x1a8
 8011f70:	f103 0208 	add.w	r2, r3, #8
 8011f74:	1888      	adds	r0, r1, r2
 8011f76:	4659      	mov	r1, fp
 8011f78:	2900      	cmp	r1, #0
 8011f7a:	f280 80b7 	bge.w	80120ec <__kernel_rem_pio2+0x38c>
 8011f7e:	4659      	mov	r1, fp
 8011f80:	2900      	cmp	r1, #0
 8011f82:	f2c0 80d5 	blt.w	8012130 <__kernel_rem_pio2+0x3d0>
 8011f86:	a86a      	add	r0, sp, #424	; 0x1a8
 8011f88:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8011f8c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8012070 <__kernel_rem_pio2+0x310>
 8011f90:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 801208c <__kernel_rem_pio2+0x32c>
 8011f94:	2400      	movs	r4, #0
 8011f96:	ebab 0001 	sub.w	r0, fp, r1
 8011f9a:	e0be      	b.n	801211a <__kernel_rem_pio2+0x3ba>
 8011f9c:	2602      	movs	r6, #2
 8011f9e:	e787      	b.n	8011eb0 <__kernel_rem_pio2+0x150>
 8011fa0:	f8db 2000 	ldr.w	r2, [fp]
 8011fa4:	b958      	cbnz	r0, 8011fbe <__kernel_rem_pio2+0x25e>
 8011fa6:	b122      	cbz	r2, 8011fb2 <__kernel_rem_pio2+0x252>
 8011fa8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8011fac:	f8cb 2000 	str.w	r2, [fp]
 8011fb0:	2201      	movs	r2, #1
 8011fb2:	f10c 0c01 	add.w	ip, ip, #1
 8011fb6:	f10b 0b04 	add.w	fp, fp, #4
 8011fba:	4610      	mov	r0, r2
 8011fbc:	e77f      	b.n	8011ebe <__kernel_rem_pio2+0x15e>
 8011fbe:	ebae 0202 	sub.w	r2, lr, r2
 8011fc2:	f8cb 2000 	str.w	r2, [fp]
 8011fc6:	4602      	mov	r2, r0
 8011fc8:	e7f3      	b.n	8011fb2 <__kernel_rem_pio2+0x252>
 8011fca:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011fce:	ab06      	add	r3, sp, #24
 8011fd0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011fd4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8011fd8:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8011fdc:	e778      	b.n	8011ed0 <__kernel_rem_pio2+0x170>
 8011fde:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011fe2:	ab06      	add	r3, sp, #24
 8011fe4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011fe8:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8011fec:	e7f4      	b.n	8011fd8 <__kernel_rem_pio2+0x278>
 8011fee:	ab06      	add	r3, sp, #24
 8011ff0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011ff4:	3801      	subs	r0, #1
 8011ff6:	431a      	orrs	r2, r3
 8011ff8:	e7a4      	b.n	8011f44 <__kernel_rem_pio2+0x1e4>
 8011ffa:	f10c 0c01 	add.w	ip, ip, #1
 8011ffe:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8012002:	2800      	cmp	r0, #0
 8012004:	d0f9      	beq.n	8011ffa <__kernel_rem_pio2+0x29a>
 8012006:	9b04      	ldr	r3, [sp, #16]
 8012008:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801200c:	eb0d 0203 	add.w	r2, sp, r3
 8012010:	9b01      	ldr	r3, [sp, #4]
 8012012:	18e8      	adds	r0, r5, r3
 8012014:	ab1a      	add	r3, sp, #104	; 0x68
 8012016:	1c6e      	adds	r6, r5, #1
 8012018:	3a98      	subs	r2, #152	; 0x98
 801201a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801201e:	4465      	add	r5, ip
 8012020:	42b5      	cmp	r5, r6
 8012022:	f6ff af05 	blt.w	8011e30 <__kernel_rem_pio2+0xd0>
 8012026:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 801202a:	f8dd e008 	ldr.w	lr, [sp, #8]
 801202e:	ee07 3a90 	vmov	s15, r3
 8012032:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012036:	f04f 0c00 	mov.w	ip, #0
 801203a:	eca0 7b02 	vstmia	r0!, {d7}
 801203e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8012070 <__kernel_rem_pio2+0x310>
 8012042:	4680      	mov	r8, r0
 8012044:	458c      	cmp	ip, r1
 8012046:	dd07      	ble.n	8012058 <__kernel_rem_pio2+0x2f8>
 8012048:	eca2 7b02 	vstmia	r2!, {d7}
 801204c:	3601      	adds	r6, #1
 801204e:	e7e7      	b.n	8012020 <__kernel_rem_pio2+0x2c0>
 8012050:	9a03      	ldr	r2, [sp, #12]
 8012052:	f04f 0c01 	mov.w	ip, #1
 8012056:	e7d2      	b.n	8011ffe <__kernel_rem_pio2+0x29e>
 8012058:	ecbe 5b02 	vldmia	lr!, {d5}
 801205c:	ed38 6b02 	vldmdb	r8!, {d6}
 8012060:	f10c 0c01 	add.w	ip, ip, #1
 8012064:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012068:	e7ec      	b.n	8012044 <__kernel_rem_pio2+0x2e4>
 801206a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801206e:	e76e      	b.n	8011f4e <__kernel_rem_pio2+0x1ee>
	...
 801207c:	3e700000 	.word	0x3e700000
 8012080:	00000000 	.word	0x00000000
 8012084:	41700000 	.word	0x41700000
 8012088:	08016d60 	.word	0x08016d60
 801208c:	08016d20 	.word	0x08016d20
 8012090:	4260      	negs	r0, r4
 8012092:	eeb0 0b48 	vmov.f64	d0, d8
 8012096:	f000 fa43 	bl	8012520 <scalbn>
 801209a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8012278 <__kernel_rem_pio2+0x518>
 801209e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80120a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120a6:	db18      	blt.n	80120da <__kernel_rem_pio2+0x37a>
 80120a8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8012280 <__kernel_rem_pio2+0x520>
 80120ac:	ee20 7b07 	vmul.f64	d7, d0, d7
 80120b0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80120b4:	aa06      	add	r2, sp, #24
 80120b6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80120ba:	eea5 0b46 	vfms.f64	d0, d5, d6
 80120be:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80120c2:	f105 0b01 	add.w	fp, r5, #1
 80120c6:	ee10 3a10 	vmov	r3, s0
 80120ca:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80120ce:	ee17 3a10 	vmov	r3, s14
 80120d2:	3418      	adds	r4, #24
 80120d4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 80120d8:	e740      	b.n	8011f5c <__kernel_rem_pio2+0x1fc>
 80120da:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80120de:	aa06      	add	r2, sp, #24
 80120e0:	ee10 3a10 	vmov	r3, s0
 80120e4:	46ab      	mov	fp, r5
 80120e6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80120ea:	e737      	b.n	8011f5c <__kernel_rem_pio2+0x1fc>
 80120ec:	ac06      	add	r4, sp, #24
 80120ee:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 80120f2:	9401      	str	r4, [sp, #4]
 80120f4:	ee07 4a90 	vmov	s15, r4
 80120f8:	3901      	subs	r1, #1
 80120fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80120fe:	ee27 7b00 	vmul.f64	d7, d7, d0
 8012102:	ee20 0b06 	vmul.f64	d0, d0, d6
 8012106:	ed20 7b02 	vstmdb	r0!, {d7}
 801210a:	e735      	b.n	8011f78 <__kernel_rem_pio2+0x218>
 801210c:	ecbc 5b02 	vldmia	ip!, {d5}
 8012110:	ecb5 6b02 	vldmia	r5!, {d6}
 8012114:	3401      	adds	r4, #1
 8012116:	eea5 7b06 	vfma.f64	d7, d5, d6
 801211a:	454c      	cmp	r4, r9
 801211c:	dc01      	bgt.n	8012122 <__kernel_rem_pio2+0x3c2>
 801211e:	4284      	cmp	r4, r0
 8012120:	ddf4      	ble.n	801210c <__kernel_rem_pio2+0x3ac>
 8012122:	ac42      	add	r4, sp, #264	; 0x108
 8012124:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8012128:	ed80 7b00 	vstr	d7, [r0]
 801212c:	3901      	subs	r1, #1
 801212e:	e727      	b.n	8011f80 <__kernel_rem_pio2+0x220>
 8012130:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8012132:	2902      	cmp	r1, #2
 8012134:	dc0a      	bgt.n	801214c <__kernel_rem_pio2+0x3ec>
 8012136:	2900      	cmp	r1, #0
 8012138:	dc2c      	bgt.n	8012194 <__kernel_rem_pio2+0x434>
 801213a:	d045      	beq.n	80121c8 <__kernel_rem_pio2+0x468>
 801213c:	f008 0007 	and.w	r0, r8, #7
 8012140:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8012144:	ecbd 8b06 	vpop	{d8-d10}
 8012148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801214c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801214e:	2a03      	cmp	r2, #3
 8012150:	d1f4      	bne.n	801213c <__kernel_rem_pio2+0x3dc>
 8012152:	aa42      	add	r2, sp, #264	; 0x108
 8012154:	4413      	add	r3, r2
 8012156:	461a      	mov	r2, r3
 8012158:	4619      	mov	r1, r3
 801215a:	4658      	mov	r0, fp
 801215c:	2800      	cmp	r0, #0
 801215e:	f1a1 0108 	sub.w	r1, r1, #8
 8012162:	dc54      	bgt.n	801220e <__kernel_rem_pio2+0x4ae>
 8012164:	4659      	mov	r1, fp
 8012166:	2901      	cmp	r1, #1
 8012168:	f1a2 0208 	sub.w	r2, r2, #8
 801216c:	dc5f      	bgt.n	801222e <__kernel_rem_pio2+0x4ce>
 801216e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8012288 <__kernel_rem_pio2+0x528>
 8012172:	3308      	adds	r3, #8
 8012174:	f1bb 0f01 	cmp.w	fp, #1
 8012178:	dc69      	bgt.n	801224e <__kernel_rem_pio2+0x4ee>
 801217a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801217e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8012182:	2e00      	cmp	r6, #0
 8012184:	d16a      	bne.n	801225c <__kernel_rem_pio2+0x4fc>
 8012186:	ed87 5b00 	vstr	d5, [r7]
 801218a:	ed87 6b02 	vstr	d6, [r7, #8]
 801218e:	ed87 7b04 	vstr	d7, [r7, #16]
 8012192:	e7d3      	b.n	801213c <__kernel_rem_pio2+0x3dc>
 8012194:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012288 <__kernel_rem_pio2+0x528>
 8012198:	ab42      	add	r3, sp, #264	; 0x108
 801219a:	441a      	add	r2, r3
 801219c:	465b      	mov	r3, fp
 801219e:	2b00      	cmp	r3, #0
 80121a0:	da26      	bge.n	80121f0 <__kernel_rem_pio2+0x490>
 80121a2:	b35e      	cbz	r6, 80121fc <__kernel_rem_pio2+0x49c>
 80121a4:	eeb1 7b46 	vneg.f64	d7, d6
 80121a8:	ed87 7b00 	vstr	d7, [r7]
 80121ac:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80121b0:	aa44      	add	r2, sp, #272	; 0x110
 80121b2:	2301      	movs	r3, #1
 80121b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80121b8:	459b      	cmp	fp, r3
 80121ba:	da22      	bge.n	8012202 <__kernel_rem_pio2+0x4a2>
 80121bc:	b10e      	cbz	r6, 80121c2 <__kernel_rem_pio2+0x462>
 80121be:	eeb1 7b47 	vneg.f64	d7, d7
 80121c2:	ed87 7b02 	vstr	d7, [r7, #8]
 80121c6:	e7b9      	b.n	801213c <__kernel_rem_pio2+0x3dc>
 80121c8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8012288 <__kernel_rem_pio2+0x528>
 80121cc:	ab42      	add	r3, sp, #264	; 0x108
 80121ce:	441a      	add	r2, r3
 80121d0:	f1bb 0f00 	cmp.w	fp, #0
 80121d4:	da05      	bge.n	80121e2 <__kernel_rem_pio2+0x482>
 80121d6:	b10e      	cbz	r6, 80121dc <__kernel_rem_pio2+0x47c>
 80121d8:	eeb1 7b47 	vneg.f64	d7, d7
 80121dc:	ed87 7b00 	vstr	d7, [r7]
 80121e0:	e7ac      	b.n	801213c <__kernel_rem_pio2+0x3dc>
 80121e2:	ed32 6b02 	vldmdb	r2!, {d6}
 80121e6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80121ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80121ee:	e7ef      	b.n	80121d0 <__kernel_rem_pio2+0x470>
 80121f0:	ed32 7b02 	vldmdb	r2!, {d7}
 80121f4:	3b01      	subs	r3, #1
 80121f6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80121fa:	e7d0      	b.n	801219e <__kernel_rem_pio2+0x43e>
 80121fc:	eeb0 7b46 	vmov.f64	d7, d6
 8012200:	e7d2      	b.n	80121a8 <__kernel_rem_pio2+0x448>
 8012202:	ecb2 6b02 	vldmia	r2!, {d6}
 8012206:	3301      	adds	r3, #1
 8012208:	ee37 7b06 	vadd.f64	d7, d7, d6
 801220c:	e7d4      	b.n	80121b8 <__kernel_rem_pio2+0x458>
 801220e:	ed91 7b00 	vldr	d7, [r1]
 8012212:	ed91 5b02 	vldr	d5, [r1, #8]
 8012216:	3801      	subs	r0, #1
 8012218:	ee37 6b05 	vadd.f64	d6, d7, d5
 801221c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012220:	ed81 6b00 	vstr	d6, [r1]
 8012224:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012228:	ed81 7b02 	vstr	d7, [r1, #8]
 801222c:	e796      	b.n	801215c <__kernel_rem_pio2+0x3fc>
 801222e:	ed92 7b00 	vldr	d7, [r2]
 8012232:	ed92 5b02 	vldr	d5, [r2, #8]
 8012236:	3901      	subs	r1, #1
 8012238:	ee37 6b05 	vadd.f64	d6, d7, d5
 801223c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012240:	ed82 6b00 	vstr	d6, [r2]
 8012244:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012248:	ed82 7b02 	vstr	d7, [r2, #8]
 801224c:	e78b      	b.n	8012166 <__kernel_rem_pio2+0x406>
 801224e:	ed33 6b02 	vldmdb	r3!, {d6}
 8012252:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012256:	ee37 7b06 	vadd.f64	d7, d7, d6
 801225a:	e78b      	b.n	8012174 <__kernel_rem_pio2+0x414>
 801225c:	eeb1 5b45 	vneg.f64	d5, d5
 8012260:	eeb1 6b46 	vneg.f64	d6, d6
 8012264:	ed87 5b00 	vstr	d5, [r7]
 8012268:	eeb1 7b47 	vneg.f64	d7, d7
 801226c:	ed87 6b02 	vstr	d6, [r7, #8]
 8012270:	e78d      	b.n	801218e <__kernel_rem_pio2+0x42e>
 8012272:	bf00      	nop
 8012274:	f3af 8000 	nop.w
 8012278:	00000000 	.word	0x00000000
 801227c:	41700000 	.word	0x41700000
 8012280:	00000000 	.word	0x00000000
 8012284:	3e700000 	.word	0x3e700000
	...

08012290 <__kernel_sin>:
 8012290:	ee10 3a90 	vmov	r3, s1
 8012294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012298:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801229c:	da04      	bge.n	80122a8 <__kernel_sin+0x18>
 801229e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80122a2:	ee17 3a90 	vmov	r3, s15
 80122a6:	b35b      	cbz	r3, 8012300 <__kernel_sin+0x70>
 80122a8:	ee20 6b00 	vmul.f64	d6, d0, d0
 80122ac:	ee20 5b06 	vmul.f64	d5, d0, d6
 80122b0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8012308 <__kernel_sin+0x78>
 80122b4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012310 <__kernel_sin+0x80>
 80122b8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80122bc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012318 <__kernel_sin+0x88>
 80122c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80122c4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012320 <__kernel_sin+0x90>
 80122c8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80122cc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012328 <__kernel_sin+0x98>
 80122d0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80122d4:	b930      	cbnz	r0, 80122e4 <__kernel_sin+0x54>
 80122d6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012330 <__kernel_sin+0xa0>
 80122da:	eea6 4b07 	vfma.f64	d4, d6, d7
 80122de:	eea4 0b05 	vfma.f64	d0, d4, d5
 80122e2:	4770      	bx	lr
 80122e4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80122e8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80122ec:	eea1 7b04 	vfma.f64	d7, d1, d4
 80122f0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80122f4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8012338 <__kernel_sin+0xa8>
 80122f8:	eea5 1b07 	vfma.f64	d1, d5, d7
 80122fc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8012300:	4770      	bx	lr
 8012302:	bf00      	nop
 8012304:	f3af 8000 	nop.w
 8012308:	5acfd57c 	.word	0x5acfd57c
 801230c:	3de5d93a 	.word	0x3de5d93a
 8012310:	8a2b9ceb 	.word	0x8a2b9ceb
 8012314:	be5ae5e6 	.word	0xbe5ae5e6
 8012318:	57b1fe7d 	.word	0x57b1fe7d
 801231c:	3ec71de3 	.word	0x3ec71de3
 8012320:	19c161d5 	.word	0x19c161d5
 8012324:	bf2a01a0 	.word	0xbf2a01a0
 8012328:	1110f8a6 	.word	0x1110f8a6
 801232c:	3f811111 	.word	0x3f811111
 8012330:	55555549 	.word	0x55555549
 8012334:	bfc55555 	.word	0xbfc55555
 8012338:	55555549 	.word	0x55555549
 801233c:	3fc55555 	.word	0x3fc55555

08012340 <with_errno>:
 8012340:	b513      	push	{r0, r1, r4, lr}
 8012342:	4604      	mov	r4, r0
 8012344:	ed8d 0b00 	vstr	d0, [sp]
 8012348:	f000 fa50 	bl	80127ec <__errno>
 801234c:	ed9d 0b00 	vldr	d0, [sp]
 8012350:	6004      	str	r4, [r0, #0]
 8012352:	b002      	add	sp, #8
 8012354:	bd10      	pop	{r4, pc}

08012356 <xflow>:
 8012356:	b082      	sub	sp, #8
 8012358:	b158      	cbz	r0, 8012372 <xflow+0x1c>
 801235a:	eeb1 7b40 	vneg.f64	d7, d0
 801235e:	ed8d 7b00 	vstr	d7, [sp]
 8012362:	ed9d 7b00 	vldr	d7, [sp]
 8012366:	2022      	movs	r0, #34	; 0x22
 8012368:	ee20 0b07 	vmul.f64	d0, d0, d7
 801236c:	b002      	add	sp, #8
 801236e:	f7ff bfe7 	b.w	8012340 <with_errno>
 8012372:	eeb0 7b40 	vmov.f64	d7, d0
 8012376:	e7f2      	b.n	801235e <xflow+0x8>

08012378 <__math_uflow>:
 8012378:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012380 <__math_uflow+0x8>
 801237c:	f7ff bfeb 	b.w	8012356 <xflow>
 8012380:	00000000 	.word	0x00000000
 8012384:	10000000 	.word	0x10000000

08012388 <__math_oflow>:
 8012388:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012390 <__math_oflow+0x8>
 801238c:	f7ff bfe3 	b.w	8012356 <xflow>
 8012390:	00000000 	.word	0x00000000
 8012394:	70000000 	.word	0x70000000

08012398 <__math_divzero>:
 8012398:	b082      	sub	sp, #8
 801239a:	2800      	cmp	r0, #0
 801239c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80123a0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80123a4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80123a8:	ed8d 7b00 	vstr	d7, [sp]
 80123ac:	ed9d 0b00 	vldr	d0, [sp]
 80123b0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80123c0 <__math_divzero+0x28>
 80123b4:	2022      	movs	r0, #34	; 0x22
 80123b6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80123ba:	b002      	add	sp, #8
 80123bc:	f7ff bfc0 	b.w	8012340 <with_errno>
	...

080123c8 <__math_invalid>:
 80123c8:	eeb0 7b40 	vmov.f64	d7, d0
 80123cc:	eeb4 7b47 	vcmp.f64	d7, d7
 80123d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123d4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80123d8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80123dc:	d602      	bvs.n	80123e4 <__math_invalid+0x1c>
 80123de:	2021      	movs	r0, #33	; 0x21
 80123e0:	f7ff bfae 	b.w	8012340 <with_errno>
 80123e4:	4770      	bx	lr

080123e6 <__math_check_uflow>:
 80123e6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80123ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ee:	d102      	bne.n	80123f6 <__math_check_uflow+0x10>
 80123f0:	2022      	movs	r0, #34	; 0x22
 80123f2:	f7ff bfa5 	b.w	8012340 <with_errno>
 80123f6:	4770      	bx	lr

080123f8 <__math_check_oflow>:
 80123f8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8012418 <__math_check_oflow+0x20>
 80123fc:	eeb0 7bc0 	vabs.f64	d7, d0
 8012400:	eeb4 7b46 	vcmp.f64	d7, d6
 8012404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012408:	dd02      	ble.n	8012410 <__math_check_oflow+0x18>
 801240a:	2022      	movs	r0, #34	; 0x22
 801240c:	f7ff bf98 	b.w	8012340 <with_errno>
 8012410:	4770      	bx	lr
 8012412:	bf00      	nop
 8012414:	f3af 8000 	nop.w
 8012418:	ffffffff 	.word	0xffffffff
 801241c:	7fefffff 	.word	0x7fefffff

08012420 <fabs>:
 8012420:	ec51 0b10 	vmov	r0, r1, d0
 8012424:	ee10 2a10 	vmov	r2, s0
 8012428:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801242c:	ec43 2b10 	vmov	d0, r2, r3
 8012430:	4770      	bx	lr
 8012432:	0000      	movs	r0, r0
 8012434:	0000      	movs	r0, r0
	...

08012438 <floor>:
 8012438:	ee10 1a90 	vmov	r1, s1
 801243c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012440:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8012444:	2b13      	cmp	r3, #19
 8012446:	b530      	push	{r4, r5, lr}
 8012448:	ee10 0a10 	vmov	r0, s0
 801244c:	ee10 5a10 	vmov	r5, s0
 8012450:	dc31      	bgt.n	80124b6 <floor+0x7e>
 8012452:	2b00      	cmp	r3, #0
 8012454:	da15      	bge.n	8012482 <floor+0x4a>
 8012456:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8012510 <floor+0xd8>
 801245a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801245e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012466:	dd07      	ble.n	8012478 <floor+0x40>
 8012468:	2900      	cmp	r1, #0
 801246a:	da4e      	bge.n	801250a <floor+0xd2>
 801246c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012470:	4318      	orrs	r0, r3
 8012472:	d001      	beq.n	8012478 <floor+0x40>
 8012474:	4928      	ldr	r1, [pc, #160]	; (8012518 <floor+0xe0>)
 8012476:	2000      	movs	r0, #0
 8012478:	460b      	mov	r3, r1
 801247a:	4602      	mov	r2, r0
 801247c:	ec43 2b10 	vmov	d0, r2, r3
 8012480:	e020      	b.n	80124c4 <floor+0x8c>
 8012482:	4a26      	ldr	r2, [pc, #152]	; (801251c <floor+0xe4>)
 8012484:	411a      	asrs	r2, r3
 8012486:	ea01 0402 	and.w	r4, r1, r2
 801248a:	4304      	orrs	r4, r0
 801248c:	d01a      	beq.n	80124c4 <floor+0x8c>
 801248e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8012510 <floor+0xd8>
 8012492:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012496:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801249a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801249e:	ddeb      	ble.n	8012478 <floor+0x40>
 80124a0:	2900      	cmp	r1, #0
 80124a2:	bfbe      	ittt	lt
 80124a4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80124a8:	fa40 f303 	asrlt.w	r3, r0, r3
 80124ac:	18c9      	addlt	r1, r1, r3
 80124ae:	ea21 0102 	bic.w	r1, r1, r2
 80124b2:	2000      	movs	r0, #0
 80124b4:	e7e0      	b.n	8012478 <floor+0x40>
 80124b6:	2b33      	cmp	r3, #51	; 0x33
 80124b8:	dd05      	ble.n	80124c6 <floor+0x8e>
 80124ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80124be:	d101      	bne.n	80124c4 <floor+0x8c>
 80124c0:	ee30 0b00 	vadd.f64	d0, d0, d0
 80124c4:	bd30      	pop	{r4, r5, pc}
 80124c6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80124ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80124ce:	40e2      	lsrs	r2, r4
 80124d0:	4202      	tst	r2, r0
 80124d2:	d0f7      	beq.n	80124c4 <floor+0x8c>
 80124d4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012510 <floor+0xd8>
 80124d8:	ee30 0b07 	vadd.f64	d0, d0, d7
 80124dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80124e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124e4:	ddc8      	ble.n	8012478 <floor+0x40>
 80124e6:	2900      	cmp	r1, #0
 80124e8:	da02      	bge.n	80124f0 <floor+0xb8>
 80124ea:	2b14      	cmp	r3, #20
 80124ec:	d103      	bne.n	80124f6 <floor+0xbe>
 80124ee:	3101      	adds	r1, #1
 80124f0:	ea20 0002 	bic.w	r0, r0, r2
 80124f4:	e7c0      	b.n	8012478 <floor+0x40>
 80124f6:	2401      	movs	r4, #1
 80124f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80124fc:	fa04 f303 	lsl.w	r3, r4, r3
 8012500:	4418      	add	r0, r3
 8012502:	42a8      	cmp	r0, r5
 8012504:	bf38      	it	cc
 8012506:	1909      	addcc	r1, r1, r4
 8012508:	e7f2      	b.n	80124f0 <floor+0xb8>
 801250a:	2000      	movs	r0, #0
 801250c:	4601      	mov	r1, r0
 801250e:	e7b3      	b.n	8012478 <floor+0x40>
 8012510:	8800759c 	.word	0x8800759c
 8012514:	7e37e43c 	.word	0x7e37e43c
 8012518:	bff00000 	.word	0xbff00000
 801251c:	000fffff 	.word	0x000fffff

08012520 <scalbn>:
 8012520:	ee10 1a90 	vmov	r1, s1
 8012524:	b510      	push	{r4, lr}
 8012526:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801252a:	b98c      	cbnz	r4, 8012550 <scalbn+0x30>
 801252c:	ee10 3a10 	vmov	r3, s0
 8012530:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012534:	430b      	orrs	r3, r1
 8012536:	d011      	beq.n	801255c <scalbn+0x3c>
 8012538:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8012600 <scalbn+0xe0>
 801253c:	4b3c      	ldr	r3, [pc, #240]	; (8012630 <scalbn+0x110>)
 801253e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012542:	4298      	cmp	r0, r3
 8012544:	da0b      	bge.n	801255e <scalbn+0x3e>
 8012546:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8012608 <scalbn+0xe8>
 801254a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801254e:	e005      	b.n	801255c <scalbn+0x3c>
 8012550:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012554:	429c      	cmp	r4, r3
 8012556:	d107      	bne.n	8012568 <scalbn+0x48>
 8012558:	ee30 0b00 	vadd.f64	d0, d0, d0
 801255c:	bd10      	pop	{r4, pc}
 801255e:	ee10 1a90 	vmov	r1, s1
 8012562:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8012566:	3c36      	subs	r4, #54	; 0x36
 8012568:	4404      	add	r4, r0
 801256a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801256e:	429c      	cmp	r4, r3
 8012570:	dd0d      	ble.n	801258e <scalbn+0x6e>
 8012572:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8012610 <scalbn+0xf0>
 8012576:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8012618 <scalbn+0xf8>
 801257a:	eeb0 6b47 	vmov.f64	d6, d7
 801257e:	ee10 3a90 	vmov	r3, s1
 8012582:	2b00      	cmp	r3, #0
 8012584:	fe27 7b05 	vselge.f64	d7, d7, d5
 8012588:	ee27 0b06 	vmul.f64	d0, d7, d6
 801258c:	e7e6      	b.n	801255c <scalbn+0x3c>
 801258e:	2c00      	cmp	r4, #0
 8012590:	dd0a      	ble.n	80125a8 <scalbn+0x88>
 8012592:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8012596:	ec53 2b10 	vmov	r2, r3, d0
 801259a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801259e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80125a2:	ec43 2b10 	vmov	d0, r2, r3
 80125a6:	e7d9      	b.n	801255c <scalbn+0x3c>
 80125a8:	f114 0f35 	cmn.w	r4, #53	; 0x35
 80125ac:	da19      	bge.n	80125e2 <scalbn+0xc2>
 80125ae:	f24c 3350 	movw	r3, #50000	; 0xc350
 80125b2:	4298      	cmp	r0, r3
 80125b4:	ee10 3a90 	vmov	r3, s1
 80125b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80125bc:	dd09      	ble.n	80125d2 <scalbn+0xb2>
 80125be:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8012610 <scalbn+0xf0>
 80125c2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8012618 <scalbn+0xf8>
 80125c6:	eeb0 7b40 	vmov.f64	d7, d0
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	fe00 0b06 	vseleq.f64	d0, d0, d6
 80125d0:	e7bb      	b.n	801254a <scalbn+0x2a>
 80125d2:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8012608 <scalbn+0xe8>
 80125d6:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8012620 <scalbn+0x100>
 80125da:	eeb0 7b40 	vmov.f64	d7, d0
 80125de:	2b00      	cmp	r3, #0
 80125e0:	e7f4      	b.n	80125cc <scalbn+0xac>
 80125e2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80125e6:	ec53 2b10 	vmov	r2, r3, d0
 80125ea:	3436      	adds	r4, #54	; 0x36
 80125ec:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80125f0:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80125f4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8012628 <scalbn+0x108>
 80125f8:	ec43 2b10 	vmov	d0, r2, r3
 80125fc:	e7a5      	b.n	801254a <scalbn+0x2a>
 80125fe:	bf00      	nop
 8012600:	00000000 	.word	0x00000000
 8012604:	43500000 	.word	0x43500000
 8012608:	c2f8f359 	.word	0xc2f8f359
 801260c:	01a56e1f 	.word	0x01a56e1f
 8012610:	8800759c 	.word	0x8800759c
 8012614:	7e37e43c 	.word	0x7e37e43c
 8012618:	8800759c 	.word	0x8800759c
 801261c:	fe37e43c 	.word	0xfe37e43c
 8012620:	c2f8f359 	.word	0xc2f8f359
 8012624:	81a56e1f 	.word	0x81a56e1f
 8012628:	00000000 	.word	0x00000000
 801262c:	3c900000 	.word	0x3c900000
 8012630:	ffff3cb0 	.word	0xffff3cb0

08012634 <atanf>:
 8012634:	b538      	push	{r3, r4, r5, lr}
 8012636:	ee10 5a10 	vmov	r5, s0
 801263a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801263e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8012642:	eef0 7a40 	vmov.f32	s15, s0
 8012646:	db0f      	blt.n	8012668 <atanf+0x34>
 8012648:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801264c:	dd04      	ble.n	8012658 <atanf+0x24>
 801264e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012652:	eeb0 0a67 	vmov.f32	s0, s15
 8012656:	bd38      	pop	{r3, r4, r5, pc}
 8012658:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8012790 <atanf+0x15c>
 801265c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8012794 <atanf+0x160>
 8012660:	2d00      	cmp	r5, #0
 8012662:	fe77 7a80 	vselgt.f32	s15, s15, s0
 8012666:	e7f4      	b.n	8012652 <atanf+0x1e>
 8012668:	4b4b      	ldr	r3, [pc, #300]	; (8012798 <atanf+0x164>)
 801266a:	429c      	cmp	r4, r3
 801266c:	dc10      	bgt.n	8012690 <atanf+0x5c>
 801266e:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8012672:	da0a      	bge.n	801268a <atanf+0x56>
 8012674:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801279c <atanf+0x168>
 8012678:	ee30 7a07 	vadd.f32	s14, s0, s14
 801267c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012680:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012688:	dce3      	bgt.n	8012652 <atanf+0x1e>
 801268a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801268e:	e013      	b.n	80126b8 <atanf+0x84>
 8012690:	f000 f8a4 	bl	80127dc <fabsf>
 8012694:	4b42      	ldr	r3, [pc, #264]	; (80127a0 <atanf+0x16c>)
 8012696:	429c      	cmp	r4, r3
 8012698:	dc4f      	bgt.n	801273a <atanf+0x106>
 801269a:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801269e:	429c      	cmp	r4, r3
 80126a0:	dc41      	bgt.n	8012726 <atanf+0xf2>
 80126a2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80126a6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80126aa:	eea0 7a27 	vfma.f32	s14, s0, s15
 80126ae:	2300      	movs	r3, #0
 80126b0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80126b4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80126b8:	1c5a      	adds	r2, r3, #1
 80126ba:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80126be:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80127a4 <atanf+0x170>
 80126c2:	eddf 5a39 	vldr	s11, [pc, #228]	; 80127a8 <atanf+0x174>
 80126c6:	ed9f 5a39 	vldr	s10, [pc, #228]	; 80127ac <atanf+0x178>
 80126ca:	ee66 6a06 	vmul.f32	s13, s12, s12
 80126ce:	eee6 5a87 	vfma.f32	s11, s13, s14
 80126d2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80127b0 <atanf+0x17c>
 80126d6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80126da:	eddf 5a36 	vldr	s11, [pc, #216]	; 80127b4 <atanf+0x180>
 80126de:	eee7 5a26 	vfma.f32	s11, s14, s13
 80126e2:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80127b8 <atanf+0x184>
 80126e6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80126ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80127bc <atanf+0x188>
 80126ee:	eee7 5a26 	vfma.f32	s11, s14, s13
 80126f2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80127c0 <atanf+0x18c>
 80126f6:	eea6 5a87 	vfma.f32	s10, s13, s14
 80126fa:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80127c4 <atanf+0x190>
 80126fe:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012702:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80127c8 <atanf+0x194>
 8012706:	eea7 5a26 	vfma.f32	s10, s14, s13
 801270a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80127cc <atanf+0x198>
 801270e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012712:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012716:	eea5 7a86 	vfma.f32	s14, s11, s12
 801271a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801271e:	d121      	bne.n	8012764 <atanf+0x130>
 8012720:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012724:	e795      	b.n	8012652 <atanf+0x1e>
 8012726:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801272a:	ee30 7a67 	vsub.f32	s14, s0, s15
 801272e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012732:	2301      	movs	r3, #1
 8012734:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012738:	e7be      	b.n	80126b8 <atanf+0x84>
 801273a:	4b25      	ldr	r3, [pc, #148]	; (80127d0 <atanf+0x19c>)
 801273c:	429c      	cmp	r4, r3
 801273e:	dc0b      	bgt.n	8012758 <atanf+0x124>
 8012740:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8012744:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012748:	eea0 7a27 	vfma.f32	s14, s0, s15
 801274c:	2302      	movs	r3, #2
 801274e:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012756:	e7af      	b.n	80126b8 <atanf+0x84>
 8012758:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801275c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012760:	2303      	movs	r3, #3
 8012762:	e7a9      	b.n	80126b8 <atanf+0x84>
 8012764:	4a1b      	ldr	r2, [pc, #108]	; (80127d4 <atanf+0x1a0>)
 8012766:	491c      	ldr	r1, [pc, #112]	; (80127d8 <atanf+0x1a4>)
 8012768:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801276c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012770:	ed93 0a00 	vldr	s0, [r3]
 8012774:	ee37 7a40 	vsub.f32	s14, s14, s0
 8012778:	ed92 0a00 	vldr	s0, [r2]
 801277c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012780:	2d00      	cmp	r5, #0
 8012782:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012786:	bfb8      	it	lt
 8012788:	eef1 7a67 	vneglt.f32	s15, s15
 801278c:	e761      	b.n	8012652 <atanf+0x1e>
 801278e:	bf00      	nop
 8012790:	3fc90fdb 	.word	0x3fc90fdb
 8012794:	bfc90fdb 	.word	0xbfc90fdb
 8012798:	3edfffff 	.word	0x3edfffff
 801279c:	7149f2ca 	.word	0x7149f2ca
 80127a0:	3f97ffff 	.word	0x3f97ffff
 80127a4:	3c8569d7 	.word	0x3c8569d7
 80127a8:	3d4bda59 	.word	0x3d4bda59
 80127ac:	bd6ef16b 	.word	0xbd6ef16b
 80127b0:	3d886b35 	.word	0x3d886b35
 80127b4:	3dba2e6e 	.word	0x3dba2e6e
 80127b8:	3e124925 	.word	0x3e124925
 80127bc:	3eaaaaab 	.word	0x3eaaaaab
 80127c0:	bd15a221 	.word	0xbd15a221
 80127c4:	bd9d8795 	.word	0xbd9d8795
 80127c8:	bde38e38 	.word	0xbde38e38
 80127cc:	be4ccccd 	.word	0xbe4ccccd
 80127d0:	401bffff 	.word	0x401bffff
 80127d4:	08016d70 	.word	0x08016d70
 80127d8:	08016d80 	.word	0x08016d80

080127dc <fabsf>:
 80127dc:	ee10 3a10 	vmov	r3, s0
 80127e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80127e4:	ee00 3a10 	vmov	s0, r3
 80127e8:	4770      	bx	lr
	...

080127ec <__errno>:
 80127ec:	4b01      	ldr	r3, [pc, #4]	; (80127f4 <__errno+0x8>)
 80127ee:	6818      	ldr	r0, [r3, #0]
 80127f0:	4770      	bx	lr
 80127f2:	bf00      	nop
 80127f4:	24000240 	.word	0x24000240

080127f8 <__libc_init_array>:
 80127f8:	b570      	push	{r4, r5, r6, lr}
 80127fa:	4d0d      	ldr	r5, [pc, #52]	; (8012830 <__libc_init_array+0x38>)
 80127fc:	4c0d      	ldr	r4, [pc, #52]	; (8012834 <__libc_init_array+0x3c>)
 80127fe:	1b64      	subs	r4, r4, r5
 8012800:	10a4      	asrs	r4, r4, #2
 8012802:	2600      	movs	r6, #0
 8012804:	42a6      	cmp	r6, r4
 8012806:	d109      	bne.n	801281c <__libc_init_array+0x24>
 8012808:	4d0b      	ldr	r5, [pc, #44]	; (8012838 <__libc_init_array+0x40>)
 801280a:	4c0c      	ldr	r4, [pc, #48]	; (801283c <__libc_init_array+0x44>)
 801280c:	f002 fd02 	bl	8015214 <_init>
 8012810:	1b64      	subs	r4, r4, r5
 8012812:	10a4      	asrs	r4, r4, #2
 8012814:	2600      	movs	r6, #0
 8012816:	42a6      	cmp	r6, r4
 8012818:	d105      	bne.n	8012826 <__libc_init_array+0x2e>
 801281a:	bd70      	pop	{r4, r5, r6, pc}
 801281c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012820:	4798      	blx	r3
 8012822:	3601      	adds	r6, #1
 8012824:	e7ee      	b.n	8012804 <__libc_init_array+0xc>
 8012826:	f855 3b04 	ldr.w	r3, [r5], #4
 801282a:	4798      	blx	r3
 801282c:	3601      	adds	r6, #1
 801282e:	e7f2      	b.n	8012816 <__libc_init_array+0x1e>
 8012830:	08017174 	.word	0x08017174
 8012834:	08017174 	.word	0x08017174
 8012838:	08017174 	.word	0x08017174
 801283c:	0801717c 	.word	0x0801717c

08012840 <memset>:
 8012840:	4402      	add	r2, r0
 8012842:	4603      	mov	r3, r0
 8012844:	4293      	cmp	r3, r2
 8012846:	d100      	bne.n	801284a <memset+0xa>
 8012848:	4770      	bx	lr
 801284a:	f803 1b01 	strb.w	r1, [r3], #1
 801284e:	e7f9      	b.n	8012844 <memset+0x4>

08012850 <__cvt>:
 8012850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012852:	ed2d 8b02 	vpush	{d8}
 8012856:	eeb0 8b40 	vmov.f64	d8, d0
 801285a:	b085      	sub	sp, #20
 801285c:	4617      	mov	r7, r2
 801285e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012860:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012862:	ee18 2a90 	vmov	r2, s17
 8012866:	f025 0520 	bic.w	r5, r5, #32
 801286a:	2a00      	cmp	r2, #0
 801286c:	bfb6      	itet	lt
 801286e:	222d      	movlt	r2, #45	; 0x2d
 8012870:	2200      	movge	r2, #0
 8012872:	eeb1 8b40 	vneglt.f64	d8, d0
 8012876:	2d46      	cmp	r5, #70	; 0x46
 8012878:	460c      	mov	r4, r1
 801287a:	701a      	strb	r2, [r3, #0]
 801287c:	d004      	beq.n	8012888 <__cvt+0x38>
 801287e:	2d45      	cmp	r5, #69	; 0x45
 8012880:	d100      	bne.n	8012884 <__cvt+0x34>
 8012882:	3401      	adds	r4, #1
 8012884:	2102      	movs	r1, #2
 8012886:	e000      	b.n	801288a <__cvt+0x3a>
 8012888:	2103      	movs	r1, #3
 801288a:	ab03      	add	r3, sp, #12
 801288c:	9301      	str	r3, [sp, #4]
 801288e:	ab02      	add	r3, sp, #8
 8012890:	9300      	str	r3, [sp, #0]
 8012892:	4622      	mov	r2, r4
 8012894:	4633      	mov	r3, r6
 8012896:	eeb0 0b48 	vmov.f64	d0, d8
 801289a:	f000 fddd 	bl	8013458 <_dtoa_r>
 801289e:	2d47      	cmp	r5, #71	; 0x47
 80128a0:	d101      	bne.n	80128a6 <__cvt+0x56>
 80128a2:	07fb      	lsls	r3, r7, #31
 80128a4:	d51a      	bpl.n	80128dc <__cvt+0x8c>
 80128a6:	2d46      	cmp	r5, #70	; 0x46
 80128a8:	eb00 0204 	add.w	r2, r0, r4
 80128ac:	d10c      	bne.n	80128c8 <__cvt+0x78>
 80128ae:	7803      	ldrb	r3, [r0, #0]
 80128b0:	2b30      	cmp	r3, #48	; 0x30
 80128b2:	d107      	bne.n	80128c4 <__cvt+0x74>
 80128b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80128b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128bc:	bf1c      	itt	ne
 80128be:	f1c4 0401 	rsbne	r4, r4, #1
 80128c2:	6034      	strne	r4, [r6, #0]
 80128c4:	6833      	ldr	r3, [r6, #0]
 80128c6:	441a      	add	r2, r3
 80128c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80128cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128d0:	bf08      	it	eq
 80128d2:	9203      	streq	r2, [sp, #12]
 80128d4:	2130      	movs	r1, #48	; 0x30
 80128d6:	9b03      	ldr	r3, [sp, #12]
 80128d8:	4293      	cmp	r3, r2
 80128da:	d307      	bcc.n	80128ec <__cvt+0x9c>
 80128dc:	9b03      	ldr	r3, [sp, #12]
 80128de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80128e0:	1a1b      	subs	r3, r3, r0
 80128e2:	6013      	str	r3, [r2, #0]
 80128e4:	b005      	add	sp, #20
 80128e6:	ecbd 8b02 	vpop	{d8}
 80128ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128ec:	1c5c      	adds	r4, r3, #1
 80128ee:	9403      	str	r4, [sp, #12]
 80128f0:	7019      	strb	r1, [r3, #0]
 80128f2:	e7f0      	b.n	80128d6 <__cvt+0x86>

080128f4 <__exponent>:
 80128f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80128f6:	4603      	mov	r3, r0
 80128f8:	2900      	cmp	r1, #0
 80128fa:	bfb8      	it	lt
 80128fc:	4249      	neglt	r1, r1
 80128fe:	f803 2b02 	strb.w	r2, [r3], #2
 8012902:	bfb4      	ite	lt
 8012904:	222d      	movlt	r2, #45	; 0x2d
 8012906:	222b      	movge	r2, #43	; 0x2b
 8012908:	2909      	cmp	r1, #9
 801290a:	7042      	strb	r2, [r0, #1]
 801290c:	dd2a      	ble.n	8012964 <__exponent+0x70>
 801290e:	f10d 0407 	add.w	r4, sp, #7
 8012912:	46a4      	mov	ip, r4
 8012914:	270a      	movs	r7, #10
 8012916:	46a6      	mov	lr, r4
 8012918:	460a      	mov	r2, r1
 801291a:	fb91 f6f7 	sdiv	r6, r1, r7
 801291e:	fb07 1516 	mls	r5, r7, r6, r1
 8012922:	3530      	adds	r5, #48	; 0x30
 8012924:	2a63      	cmp	r2, #99	; 0x63
 8012926:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801292a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801292e:	4631      	mov	r1, r6
 8012930:	dcf1      	bgt.n	8012916 <__exponent+0x22>
 8012932:	3130      	adds	r1, #48	; 0x30
 8012934:	f1ae 0502 	sub.w	r5, lr, #2
 8012938:	f804 1c01 	strb.w	r1, [r4, #-1]
 801293c:	1c44      	adds	r4, r0, #1
 801293e:	4629      	mov	r1, r5
 8012940:	4561      	cmp	r1, ip
 8012942:	d30a      	bcc.n	801295a <__exponent+0x66>
 8012944:	f10d 0209 	add.w	r2, sp, #9
 8012948:	eba2 020e 	sub.w	r2, r2, lr
 801294c:	4565      	cmp	r5, ip
 801294e:	bf88      	it	hi
 8012950:	2200      	movhi	r2, #0
 8012952:	4413      	add	r3, r2
 8012954:	1a18      	subs	r0, r3, r0
 8012956:	b003      	add	sp, #12
 8012958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801295a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801295e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012962:	e7ed      	b.n	8012940 <__exponent+0x4c>
 8012964:	2330      	movs	r3, #48	; 0x30
 8012966:	3130      	adds	r1, #48	; 0x30
 8012968:	7083      	strb	r3, [r0, #2]
 801296a:	70c1      	strb	r1, [r0, #3]
 801296c:	1d03      	adds	r3, r0, #4
 801296e:	e7f1      	b.n	8012954 <__exponent+0x60>

08012970 <_printf_float>:
 8012970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012974:	b08b      	sub	sp, #44	; 0x2c
 8012976:	460c      	mov	r4, r1
 8012978:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801297c:	4616      	mov	r6, r2
 801297e:	461f      	mov	r7, r3
 8012980:	4605      	mov	r5, r0
 8012982:	f001 fc8f 	bl	80142a4 <_localeconv_r>
 8012986:	f8d0 b000 	ldr.w	fp, [r0]
 801298a:	4658      	mov	r0, fp
 801298c:	f7ed fca8 	bl	80002e0 <strlen>
 8012990:	2300      	movs	r3, #0
 8012992:	9308      	str	r3, [sp, #32]
 8012994:	f8d8 3000 	ldr.w	r3, [r8]
 8012998:	f894 9018 	ldrb.w	r9, [r4, #24]
 801299c:	6822      	ldr	r2, [r4, #0]
 801299e:	3307      	adds	r3, #7
 80129a0:	f023 0307 	bic.w	r3, r3, #7
 80129a4:	f103 0108 	add.w	r1, r3, #8
 80129a8:	f8c8 1000 	str.w	r1, [r8]
 80129ac:	4682      	mov	sl, r0
 80129ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80129b2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80129b6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8012c18 <_printf_float+0x2a8>
 80129ba:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80129be:	eeb0 6bc0 	vabs.f64	d6, d0
 80129c2:	eeb4 6b47 	vcmp.f64	d6, d7
 80129c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ca:	dd24      	ble.n	8012a16 <_printf_float+0xa6>
 80129cc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80129d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129d4:	d502      	bpl.n	80129dc <_printf_float+0x6c>
 80129d6:	232d      	movs	r3, #45	; 0x2d
 80129d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129dc:	4b90      	ldr	r3, [pc, #576]	; (8012c20 <_printf_float+0x2b0>)
 80129de:	4891      	ldr	r0, [pc, #580]	; (8012c24 <_printf_float+0x2b4>)
 80129e0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80129e4:	bf94      	ite	ls
 80129e6:	4698      	movls	r8, r3
 80129e8:	4680      	movhi	r8, r0
 80129ea:	2303      	movs	r3, #3
 80129ec:	6123      	str	r3, [r4, #16]
 80129ee:	f022 0204 	bic.w	r2, r2, #4
 80129f2:	2300      	movs	r3, #0
 80129f4:	6022      	str	r2, [r4, #0]
 80129f6:	9304      	str	r3, [sp, #16]
 80129f8:	9700      	str	r7, [sp, #0]
 80129fa:	4633      	mov	r3, r6
 80129fc:	aa09      	add	r2, sp, #36	; 0x24
 80129fe:	4621      	mov	r1, r4
 8012a00:	4628      	mov	r0, r5
 8012a02:	f000 f9d3 	bl	8012dac <_printf_common>
 8012a06:	3001      	adds	r0, #1
 8012a08:	f040 808a 	bne.w	8012b20 <_printf_float+0x1b0>
 8012a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a10:	b00b      	add	sp, #44	; 0x2c
 8012a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a16:	eeb4 0b40 	vcmp.f64	d0, d0
 8012a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a1e:	d709      	bvc.n	8012a34 <_printf_float+0xc4>
 8012a20:	ee10 3a90 	vmov	r3, s1
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	bfbc      	itt	lt
 8012a28:	232d      	movlt	r3, #45	; 0x2d
 8012a2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012a2e:	487e      	ldr	r0, [pc, #504]	; (8012c28 <_printf_float+0x2b8>)
 8012a30:	4b7e      	ldr	r3, [pc, #504]	; (8012c2c <_printf_float+0x2bc>)
 8012a32:	e7d5      	b.n	80129e0 <_printf_float+0x70>
 8012a34:	6863      	ldr	r3, [r4, #4]
 8012a36:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8012a3a:	9104      	str	r1, [sp, #16]
 8012a3c:	1c59      	adds	r1, r3, #1
 8012a3e:	d13c      	bne.n	8012aba <_printf_float+0x14a>
 8012a40:	2306      	movs	r3, #6
 8012a42:	6063      	str	r3, [r4, #4]
 8012a44:	2300      	movs	r3, #0
 8012a46:	9303      	str	r3, [sp, #12]
 8012a48:	ab08      	add	r3, sp, #32
 8012a4a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012a4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012a52:	ab07      	add	r3, sp, #28
 8012a54:	6861      	ldr	r1, [r4, #4]
 8012a56:	9300      	str	r3, [sp, #0]
 8012a58:	6022      	str	r2, [r4, #0]
 8012a5a:	f10d 031b 	add.w	r3, sp, #27
 8012a5e:	4628      	mov	r0, r5
 8012a60:	f7ff fef6 	bl	8012850 <__cvt>
 8012a64:	9b04      	ldr	r3, [sp, #16]
 8012a66:	9907      	ldr	r1, [sp, #28]
 8012a68:	2b47      	cmp	r3, #71	; 0x47
 8012a6a:	4680      	mov	r8, r0
 8012a6c:	d108      	bne.n	8012a80 <_printf_float+0x110>
 8012a6e:	1cc8      	adds	r0, r1, #3
 8012a70:	db02      	blt.n	8012a78 <_printf_float+0x108>
 8012a72:	6863      	ldr	r3, [r4, #4]
 8012a74:	4299      	cmp	r1, r3
 8012a76:	dd41      	ble.n	8012afc <_printf_float+0x18c>
 8012a78:	f1a9 0902 	sub.w	r9, r9, #2
 8012a7c:	fa5f f989 	uxtb.w	r9, r9
 8012a80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012a84:	d820      	bhi.n	8012ac8 <_printf_float+0x158>
 8012a86:	3901      	subs	r1, #1
 8012a88:	464a      	mov	r2, r9
 8012a8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012a8e:	9107      	str	r1, [sp, #28]
 8012a90:	f7ff ff30 	bl	80128f4 <__exponent>
 8012a94:	9a08      	ldr	r2, [sp, #32]
 8012a96:	9004      	str	r0, [sp, #16]
 8012a98:	1813      	adds	r3, r2, r0
 8012a9a:	2a01      	cmp	r2, #1
 8012a9c:	6123      	str	r3, [r4, #16]
 8012a9e:	dc02      	bgt.n	8012aa6 <_printf_float+0x136>
 8012aa0:	6822      	ldr	r2, [r4, #0]
 8012aa2:	07d2      	lsls	r2, r2, #31
 8012aa4:	d501      	bpl.n	8012aaa <_printf_float+0x13a>
 8012aa6:	3301      	adds	r3, #1
 8012aa8:	6123      	str	r3, [r4, #16]
 8012aaa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d0a2      	beq.n	80129f8 <_printf_float+0x88>
 8012ab2:	232d      	movs	r3, #45	; 0x2d
 8012ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012ab8:	e79e      	b.n	80129f8 <_printf_float+0x88>
 8012aba:	9904      	ldr	r1, [sp, #16]
 8012abc:	2947      	cmp	r1, #71	; 0x47
 8012abe:	d1c1      	bne.n	8012a44 <_printf_float+0xd4>
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d1bf      	bne.n	8012a44 <_printf_float+0xd4>
 8012ac4:	2301      	movs	r3, #1
 8012ac6:	e7bc      	b.n	8012a42 <_printf_float+0xd2>
 8012ac8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8012acc:	d118      	bne.n	8012b00 <_printf_float+0x190>
 8012ace:	2900      	cmp	r1, #0
 8012ad0:	6863      	ldr	r3, [r4, #4]
 8012ad2:	dd0b      	ble.n	8012aec <_printf_float+0x17c>
 8012ad4:	6121      	str	r1, [r4, #16]
 8012ad6:	b913      	cbnz	r3, 8012ade <_printf_float+0x16e>
 8012ad8:	6822      	ldr	r2, [r4, #0]
 8012ada:	07d0      	lsls	r0, r2, #31
 8012adc:	d502      	bpl.n	8012ae4 <_printf_float+0x174>
 8012ade:	3301      	adds	r3, #1
 8012ae0:	440b      	add	r3, r1
 8012ae2:	6123      	str	r3, [r4, #16]
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	65a1      	str	r1, [r4, #88]	; 0x58
 8012ae8:	9304      	str	r3, [sp, #16]
 8012aea:	e7de      	b.n	8012aaa <_printf_float+0x13a>
 8012aec:	b913      	cbnz	r3, 8012af4 <_printf_float+0x184>
 8012aee:	6822      	ldr	r2, [r4, #0]
 8012af0:	07d2      	lsls	r2, r2, #31
 8012af2:	d501      	bpl.n	8012af8 <_printf_float+0x188>
 8012af4:	3302      	adds	r3, #2
 8012af6:	e7f4      	b.n	8012ae2 <_printf_float+0x172>
 8012af8:	2301      	movs	r3, #1
 8012afa:	e7f2      	b.n	8012ae2 <_printf_float+0x172>
 8012afc:	f04f 0967 	mov.w	r9, #103	; 0x67
 8012b00:	9b08      	ldr	r3, [sp, #32]
 8012b02:	4299      	cmp	r1, r3
 8012b04:	db05      	blt.n	8012b12 <_printf_float+0x1a2>
 8012b06:	6823      	ldr	r3, [r4, #0]
 8012b08:	6121      	str	r1, [r4, #16]
 8012b0a:	07d8      	lsls	r0, r3, #31
 8012b0c:	d5ea      	bpl.n	8012ae4 <_printf_float+0x174>
 8012b0e:	1c4b      	adds	r3, r1, #1
 8012b10:	e7e7      	b.n	8012ae2 <_printf_float+0x172>
 8012b12:	2900      	cmp	r1, #0
 8012b14:	bfd4      	ite	le
 8012b16:	f1c1 0202 	rsble	r2, r1, #2
 8012b1a:	2201      	movgt	r2, #1
 8012b1c:	4413      	add	r3, r2
 8012b1e:	e7e0      	b.n	8012ae2 <_printf_float+0x172>
 8012b20:	6823      	ldr	r3, [r4, #0]
 8012b22:	055a      	lsls	r2, r3, #21
 8012b24:	d407      	bmi.n	8012b36 <_printf_float+0x1c6>
 8012b26:	6923      	ldr	r3, [r4, #16]
 8012b28:	4642      	mov	r2, r8
 8012b2a:	4631      	mov	r1, r6
 8012b2c:	4628      	mov	r0, r5
 8012b2e:	47b8      	blx	r7
 8012b30:	3001      	adds	r0, #1
 8012b32:	d12a      	bne.n	8012b8a <_printf_float+0x21a>
 8012b34:	e76a      	b.n	8012a0c <_printf_float+0x9c>
 8012b36:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012b3a:	f240 80e2 	bls.w	8012d02 <_printf_float+0x392>
 8012b3e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012b42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b4a:	d133      	bne.n	8012bb4 <_printf_float+0x244>
 8012b4c:	4a38      	ldr	r2, [pc, #224]	; (8012c30 <_printf_float+0x2c0>)
 8012b4e:	2301      	movs	r3, #1
 8012b50:	4631      	mov	r1, r6
 8012b52:	4628      	mov	r0, r5
 8012b54:	47b8      	blx	r7
 8012b56:	3001      	adds	r0, #1
 8012b58:	f43f af58 	beq.w	8012a0c <_printf_float+0x9c>
 8012b5c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012b60:	429a      	cmp	r2, r3
 8012b62:	db02      	blt.n	8012b6a <_printf_float+0x1fa>
 8012b64:	6823      	ldr	r3, [r4, #0]
 8012b66:	07d8      	lsls	r0, r3, #31
 8012b68:	d50f      	bpl.n	8012b8a <_printf_float+0x21a>
 8012b6a:	4653      	mov	r3, sl
 8012b6c:	465a      	mov	r2, fp
 8012b6e:	4631      	mov	r1, r6
 8012b70:	4628      	mov	r0, r5
 8012b72:	47b8      	blx	r7
 8012b74:	3001      	adds	r0, #1
 8012b76:	f43f af49 	beq.w	8012a0c <_printf_float+0x9c>
 8012b7a:	f04f 0800 	mov.w	r8, #0
 8012b7e:	f104 091a 	add.w	r9, r4, #26
 8012b82:	9b08      	ldr	r3, [sp, #32]
 8012b84:	3b01      	subs	r3, #1
 8012b86:	4543      	cmp	r3, r8
 8012b88:	dc09      	bgt.n	8012b9e <_printf_float+0x22e>
 8012b8a:	6823      	ldr	r3, [r4, #0]
 8012b8c:	079b      	lsls	r3, r3, #30
 8012b8e:	f100 8108 	bmi.w	8012da2 <_printf_float+0x432>
 8012b92:	68e0      	ldr	r0, [r4, #12]
 8012b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b96:	4298      	cmp	r0, r3
 8012b98:	bfb8      	it	lt
 8012b9a:	4618      	movlt	r0, r3
 8012b9c:	e738      	b.n	8012a10 <_printf_float+0xa0>
 8012b9e:	2301      	movs	r3, #1
 8012ba0:	464a      	mov	r2, r9
 8012ba2:	4631      	mov	r1, r6
 8012ba4:	4628      	mov	r0, r5
 8012ba6:	47b8      	blx	r7
 8012ba8:	3001      	adds	r0, #1
 8012baa:	f43f af2f 	beq.w	8012a0c <_printf_float+0x9c>
 8012bae:	f108 0801 	add.w	r8, r8, #1
 8012bb2:	e7e6      	b.n	8012b82 <_printf_float+0x212>
 8012bb4:	9b07      	ldr	r3, [sp, #28]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	dc3c      	bgt.n	8012c34 <_printf_float+0x2c4>
 8012bba:	4a1d      	ldr	r2, [pc, #116]	; (8012c30 <_printf_float+0x2c0>)
 8012bbc:	2301      	movs	r3, #1
 8012bbe:	4631      	mov	r1, r6
 8012bc0:	4628      	mov	r0, r5
 8012bc2:	47b8      	blx	r7
 8012bc4:	3001      	adds	r0, #1
 8012bc6:	f43f af21 	beq.w	8012a0c <_printf_float+0x9c>
 8012bca:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012bce:	4313      	orrs	r3, r2
 8012bd0:	d102      	bne.n	8012bd8 <_printf_float+0x268>
 8012bd2:	6823      	ldr	r3, [r4, #0]
 8012bd4:	07d9      	lsls	r1, r3, #31
 8012bd6:	d5d8      	bpl.n	8012b8a <_printf_float+0x21a>
 8012bd8:	4653      	mov	r3, sl
 8012bda:	465a      	mov	r2, fp
 8012bdc:	4631      	mov	r1, r6
 8012bde:	4628      	mov	r0, r5
 8012be0:	47b8      	blx	r7
 8012be2:	3001      	adds	r0, #1
 8012be4:	f43f af12 	beq.w	8012a0c <_printf_float+0x9c>
 8012be8:	f04f 0900 	mov.w	r9, #0
 8012bec:	f104 0a1a 	add.w	sl, r4, #26
 8012bf0:	9b07      	ldr	r3, [sp, #28]
 8012bf2:	425b      	negs	r3, r3
 8012bf4:	454b      	cmp	r3, r9
 8012bf6:	dc01      	bgt.n	8012bfc <_printf_float+0x28c>
 8012bf8:	9b08      	ldr	r3, [sp, #32]
 8012bfa:	e795      	b.n	8012b28 <_printf_float+0x1b8>
 8012bfc:	2301      	movs	r3, #1
 8012bfe:	4652      	mov	r2, sl
 8012c00:	4631      	mov	r1, r6
 8012c02:	4628      	mov	r0, r5
 8012c04:	47b8      	blx	r7
 8012c06:	3001      	adds	r0, #1
 8012c08:	f43f af00 	beq.w	8012a0c <_printf_float+0x9c>
 8012c0c:	f109 0901 	add.w	r9, r9, #1
 8012c10:	e7ee      	b.n	8012bf0 <_printf_float+0x280>
 8012c12:	bf00      	nop
 8012c14:	f3af 8000 	nop.w
 8012c18:	ffffffff 	.word	0xffffffff
 8012c1c:	7fefffff 	.word	0x7fefffff
 8012c20:	08016d94 	.word	0x08016d94
 8012c24:	08016d98 	.word	0x08016d98
 8012c28:	08016da0 	.word	0x08016da0
 8012c2c:	08016d9c 	.word	0x08016d9c
 8012c30:	08016da4 	.word	0x08016da4
 8012c34:	9a08      	ldr	r2, [sp, #32]
 8012c36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012c38:	429a      	cmp	r2, r3
 8012c3a:	bfa8      	it	ge
 8012c3c:	461a      	movge	r2, r3
 8012c3e:	2a00      	cmp	r2, #0
 8012c40:	4691      	mov	r9, r2
 8012c42:	dc38      	bgt.n	8012cb6 <_printf_float+0x346>
 8012c44:	2300      	movs	r3, #0
 8012c46:	9305      	str	r3, [sp, #20]
 8012c48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012c4c:	f104 021a 	add.w	r2, r4, #26
 8012c50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012c52:	9905      	ldr	r1, [sp, #20]
 8012c54:	9304      	str	r3, [sp, #16]
 8012c56:	eba3 0309 	sub.w	r3, r3, r9
 8012c5a:	428b      	cmp	r3, r1
 8012c5c:	dc33      	bgt.n	8012cc6 <_printf_float+0x356>
 8012c5e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012c62:	429a      	cmp	r2, r3
 8012c64:	db3c      	blt.n	8012ce0 <_printf_float+0x370>
 8012c66:	6823      	ldr	r3, [r4, #0]
 8012c68:	07da      	lsls	r2, r3, #31
 8012c6a:	d439      	bmi.n	8012ce0 <_printf_float+0x370>
 8012c6c:	9b08      	ldr	r3, [sp, #32]
 8012c6e:	9a04      	ldr	r2, [sp, #16]
 8012c70:	9907      	ldr	r1, [sp, #28]
 8012c72:	1a9a      	subs	r2, r3, r2
 8012c74:	eba3 0901 	sub.w	r9, r3, r1
 8012c78:	4591      	cmp	r9, r2
 8012c7a:	bfa8      	it	ge
 8012c7c:	4691      	movge	r9, r2
 8012c7e:	f1b9 0f00 	cmp.w	r9, #0
 8012c82:	dc35      	bgt.n	8012cf0 <_printf_float+0x380>
 8012c84:	f04f 0800 	mov.w	r8, #0
 8012c88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012c8c:	f104 0a1a 	add.w	sl, r4, #26
 8012c90:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012c94:	1a9b      	subs	r3, r3, r2
 8012c96:	eba3 0309 	sub.w	r3, r3, r9
 8012c9a:	4543      	cmp	r3, r8
 8012c9c:	f77f af75 	ble.w	8012b8a <_printf_float+0x21a>
 8012ca0:	2301      	movs	r3, #1
 8012ca2:	4652      	mov	r2, sl
 8012ca4:	4631      	mov	r1, r6
 8012ca6:	4628      	mov	r0, r5
 8012ca8:	47b8      	blx	r7
 8012caa:	3001      	adds	r0, #1
 8012cac:	f43f aeae 	beq.w	8012a0c <_printf_float+0x9c>
 8012cb0:	f108 0801 	add.w	r8, r8, #1
 8012cb4:	e7ec      	b.n	8012c90 <_printf_float+0x320>
 8012cb6:	4613      	mov	r3, r2
 8012cb8:	4631      	mov	r1, r6
 8012cba:	4642      	mov	r2, r8
 8012cbc:	4628      	mov	r0, r5
 8012cbe:	47b8      	blx	r7
 8012cc0:	3001      	adds	r0, #1
 8012cc2:	d1bf      	bne.n	8012c44 <_printf_float+0x2d4>
 8012cc4:	e6a2      	b.n	8012a0c <_printf_float+0x9c>
 8012cc6:	2301      	movs	r3, #1
 8012cc8:	4631      	mov	r1, r6
 8012cca:	4628      	mov	r0, r5
 8012ccc:	9204      	str	r2, [sp, #16]
 8012cce:	47b8      	blx	r7
 8012cd0:	3001      	adds	r0, #1
 8012cd2:	f43f ae9b 	beq.w	8012a0c <_printf_float+0x9c>
 8012cd6:	9b05      	ldr	r3, [sp, #20]
 8012cd8:	9a04      	ldr	r2, [sp, #16]
 8012cda:	3301      	adds	r3, #1
 8012cdc:	9305      	str	r3, [sp, #20]
 8012cde:	e7b7      	b.n	8012c50 <_printf_float+0x2e0>
 8012ce0:	4653      	mov	r3, sl
 8012ce2:	465a      	mov	r2, fp
 8012ce4:	4631      	mov	r1, r6
 8012ce6:	4628      	mov	r0, r5
 8012ce8:	47b8      	blx	r7
 8012cea:	3001      	adds	r0, #1
 8012cec:	d1be      	bne.n	8012c6c <_printf_float+0x2fc>
 8012cee:	e68d      	b.n	8012a0c <_printf_float+0x9c>
 8012cf0:	9a04      	ldr	r2, [sp, #16]
 8012cf2:	464b      	mov	r3, r9
 8012cf4:	4442      	add	r2, r8
 8012cf6:	4631      	mov	r1, r6
 8012cf8:	4628      	mov	r0, r5
 8012cfa:	47b8      	blx	r7
 8012cfc:	3001      	adds	r0, #1
 8012cfe:	d1c1      	bne.n	8012c84 <_printf_float+0x314>
 8012d00:	e684      	b.n	8012a0c <_printf_float+0x9c>
 8012d02:	9a08      	ldr	r2, [sp, #32]
 8012d04:	2a01      	cmp	r2, #1
 8012d06:	dc01      	bgt.n	8012d0c <_printf_float+0x39c>
 8012d08:	07db      	lsls	r3, r3, #31
 8012d0a:	d537      	bpl.n	8012d7c <_printf_float+0x40c>
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	4642      	mov	r2, r8
 8012d10:	4631      	mov	r1, r6
 8012d12:	4628      	mov	r0, r5
 8012d14:	47b8      	blx	r7
 8012d16:	3001      	adds	r0, #1
 8012d18:	f43f ae78 	beq.w	8012a0c <_printf_float+0x9c>
 8012d1c:	4653      	mov	r3, sl
 8012d1e:	465a      	mov	r2, fp
 8012d20:	4631      	mov	r1, r6
 8012d22:	4628      	mov	r0, r5
 8012d24:	47b8      	blx	r7
 8012d26:	3001      	adds	r0, #1
 8012d28:	f43f ae70 	beq.w	8012a0c <_printf_float+0x9c>
 8012d2c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012d30:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d38:	d01b      	beq.n	8012d72 <_printf_float+0x402>
 8012d3a:	9b08      	ldr	r3, [sp, #32]
 8012d3c:	f108 0201 	add.w	r2, r8, #1
 8012d40:	3b01      	subs	r3, #1
 8012d42:	4631      	mov	r1, r6
 8012d44:	4628      	mov	r0, r5
 8012d46:	47b8      	blx	r7
 8012d48:	3001      	adds	r0, #1
 8012d4a:	d10e      	bne.n	8012d6a <_printf_float+0x3fa>
 8012d4c:	e65e      	b.n	8012a0c <_printf_float+0x9c>
 8012d4e:	2301      	movs	r3, #1
 8012d50:	464a      	mov	r2, r9
 8012d52:	4631      	mov	r1, r6
 8012d54:	4628      	mov	r0, r5
 8012d56:	47b8      	blx	r7
 8012d58:	3001      	adds	r0, #1
 8012d5a:	f43f ae57 	beq.w	8012a0c <_printf_float+0x9c>
 8012d5e:	f108 0801 	add.w	r8, r8, #1
 8012d62:	9b08      	ldr	r3, [sp, #32]
 8012d64:	3b01      	subs	r3, #1
 8012d66:	4543      	cmp	r3, r8
 8012d68:	dcf1      	bgt.n	8012d4e <_printf_float+0x3de>
 8012d6a:	9b04      	ldr	r3, [sp, #16]
 8012d6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012d70:	e6db      	b.n	8012b2a <_printf_float+0x1ba>
 8012d72:	f04f 0800 	mov.w	r8, #0
 8012d76:	f104 091a 	add.w	r9, r4, #26
 8012d7a:	e7f2      	b.n	8012d62 <_printf_float+0x3f2>
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	4642      	mov	r2, r8
 8012d80:	e7df      	b.n	8012d42 <_printf_float+0x3d2>
 8012d82:	2301      	movs	r3, #1
 8012d84:	464a      	mov	r2, r9
 8012d86:	4631      	mov	r1, r6
 8012d88:	4628      	mov	r0, r5
 8012d8a:	47b8      	blx	r7
 8012d8c:	3001      	adds	r0, #1
 8012d8e:	f43f ae3d 	beq.w	8012a0c <_printf_float+0x9c>
 8012d92:	f108 0801 	add.w	r8, r8, #1
 8012d96:	68e3      	ldr	r3, [r4, #12]
 8012d98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012d9a:	1a5b      	subs	r3, r3, r1
 8012d9c:	4543      	cmp	r3, r8
 8012d9e:	dcf0      	bgt.n	8012d82 <_printf_float+0x412>
 8012da0:	e6f7      	b.n	8012b92 <_printf_float+0x222>
 8012da2:	f04f 0800 	mov.w	r8, #0
 8012da6:	f104 0919 	add.w	r9, r4, #25
 8012daa:	e7f4      	b.n	8012d96 <_printf_float+0x426>

08012dac <_printf_common>:
 8012dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012db0:	4616      	mov	r6, r2
 8012db2:	4699      	mov	r9, r3
 8012db4:	688a      	ldr	r2, [r1, #8]
 8012db6:	690b      	ldr	r3, [r1, #16]
 8012db8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012dbc:	4293      	cmp	r3, r2
 8012dbe:	bfb8      	it	lt
 8012dc0:	4613      	movlt	r3, r2
 8012dc2:	6033      	str	r3, [r6, #0]
 8012dc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012dc8:	4607      	mov	r7, r0
 8012dca:	460c      	mov	r4, r1
 8012dcc:	b10a      	cbz	r2, 8012dd2 <_printf_common+0x26>
 8012dce:	3301      	adds	r3, #1
 8012dd0:	6033      	str	r3, [r6, #0]
 8012dd2:	6823      	ldr	r3, [r4, #0]
 8012dd4:	0699      	lsls	r1, r3, #26
 8012dd6:	bf42      	ittt	mi
 8012dd8:	6833      	ldrmi	r3, [r6, #0]
 8012dda:	3302      	addmi	r3, #2
 8012ddc:	6033      	strmi	r3, [r6, #0]
 8012dde:	6825      	ldr	r5, [r4, #0]
 8012de0:	f015 0506 	ands.w	r5, r5, #6
 8012de4:	d106      	bne.n	8012df4 <_printf_common+0x48>
 8012de6:	f104 0a19 	add.w	sl, r4, #25
 8012dea:	68e3      	ldr	r3, [r4, #12]
 8012dec:	6832      	ldr	r2, [r6, #0]
 8012dee:	1a9b      	subs	r3, r3, r2
 8012df0:	42ab      	cmp	r3, r5
 8012df2:	dc26      	bgt.n	8012e42 <_printf_common+0x96>
 8012df4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012df8:	1e13      	subs	r3, r2, #0
 8012dfa:	6822      	ldr	r2, [r4, #0]
 8012dfc:	bf18      	it	ne
 8012dfe:	2301      	movne	r3, #1
 8012e00:	0692      	lsls	r2, r2, #26
 8012e02:	d42b      	bmi.n	8012e5c <_printf_common+0xb0>
 8012e04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012e08:	4649      	mov	r1, r9
 8012e0a:	4638      	mov	r0, r7
 8012e0c:	47c0      	blx	r8
 8012e0e:	3001      	adds	r0, #1
 8012e10:	d01e      	beq.n	8012e50 <_printf_common+0xa4>
 8012e12:	6823      	ldr	r3, [r4, #0]
 8012e14:	68e5      	ldr	r5, [r4, #12]
 8012e16:	6832      	ldr	r2, [r6, #0]
 8012e18:	f003 0306 	and.w	r3, r3, #6
 8012e1c:	2b04      	cmp	r3, #4
 8012e1e:	bf08      	it	eq
 8012e20:	1aad      	subeq	r5, r5, r2
 8012e22:	68a3      	ldr	r3, [r4, #8]
 8012e24:	6922      	ldr	r2, [r4, #16]
 8012e26:	bf0c      	ite	eq
 8012e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e2c:	2500      	movne	r5, #0
 8012e2e:	4293      	cmp	r3, r2
 8012e30:	bfc4      	itt	gt
 8012e32:	1a9b      	subgt	r3, r3, r2
 8012e34:	18ed      	addgt	r5, r5, r3
 8012e36:	2600      	movs	r6, #0
 8012e38:	341a      	adds	r4, #26
 8012e3a:	42b5      	cmp	r5, r6
 8012e3c:	d11a      	bne.n	8012e74 <_printf_common+0xc8>
 8012e3e:	2000      	movs	r0, #0
 8012e40:	e008      	b.n	8012e54 <_printf_common+0xa8>
 8012e42:	2301      	movs	r3, #1
 8012e44:	4652      	mov	r2, sl
 8012e46:	4649      	mov	r1, r9
 8012e48:	4638      	mov	r0, r7
 8012e4a:	47c0      	blx	r8
 8012e4c:	3001      	adds	r0, #1
 8012e4e:	d103      	bne.n	8012e58 <_printf_common+0xac>
 8012e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e58:	3501      	adds	r5, #1
 8012e5a:	e7c6      	b.n	8012dea <_printf_common+0x3e>
 8012e5c:	18e1      	adds	r1, r4, r3
 8012e5e:	1c5a      	adds	r2, r3, #1
 8012e60:	2030      	movs	r0, #48	; 0x30
 8012e62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012e66:	4422      	add	r2, r4
 8012e68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012e6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012e70:	3302      	adds	r3, #2
 8012e72:	e7c7      	b.n	8012e04 <_printf_common+0x58>
 8012e74:	2301      	movs	r3, #1
 8012e76:	4622      	mov	r2, r4
 8012e78:	4649      	mov	r1, r9
 8012e7a:	4638      	mov	r0, r7
 8012e7c:	47c0      	blx	r8
 8012e7e:	3001      	adds	r0, #1
 8012e80:	d0e6      	beq.n	8012e50 <_printf_common+0xa4>
 8012e82:	3601      	adds	r6, #1
 8012e84:	e7d9      	b.n	8012e3a <_printf_common+0x8e>
	...

08012e88 <_printf_i>:
 8012e88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e8c:	7e0f      	ldrb	r7, [r1, #24]
 8012e8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012e90:	2f78      	cmp	r7, #120	; 0x78
 8012e92:	4691      	mov	r9, r2
 8012e94:	4680      	mov	r8, r0
 8012e96:	460c      	mov	r4, r1
 8012e98:	469a      	mov	sl, r3
 8012e9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012e9e:	d807      	bhi.n	8012eb0 <_printf_i+0x28>
 8012ea0:	2f62      	cmp	r7, #98	; 0x62
 8012ea2:	d80a      	bhi.n	8012eba <_printf_i+0x32>
 8012ea4:	2f00      	cmp	r7, #0
 8012ea6:	f000 80d8 	beq.w	801305a <_printf_i+0x1d2>
 8012eaa:	2f58      	cmp	r7, #88	; 0x58
 8012eac:	f000 80a3 	beq.w	8012ff6 <_printf_i+0x16e>
 8012eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012eb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012eb8:	e03a      	b.n	8012f30 <_printf_i+0xa8>
 8012eba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012ebe:	2b15      	cmp	r3, #21
 8012ec0:	d8f6      	bhi.n	8012eb0 <_printf_i+0x28>
 8012ec2:	a101      	add	r1, pc, #4	; (adr r1, 8012ec8 <_printf_i+0x40>)
 8012ec4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012ec8:	08012f21 	.word	0x08012f21
 8012ecc:	08012f35 	.word	0x08012f35
 8012ed0:	08012eb1 	.word	0x08012eb1
 8012ed4:	08012eb1 	.word	0x08012eb1
 8012ed8:	08012eb1 	.word	0x08012eb1
 8012edc:	08012eb1 	.word	0x08012eb1
 8012ee0:	08012f35 	.word	0x08012f35
 8012ee4:	08012eb1 	.word	0x08012eb1
 8012ee8:	08012eb1 	.word	0x08012eb1
 8012eec:	08012eb1 	.word	0x08012eb1
 8012ef0:	08012eb1 	.word	0x08012eb1
 8012ef4:	08013041 	.word	0x08013041
 8012ef8:	08012f65 	.word	0x08012f65
 8012efc:	08013023 	.word	0x08013023
 8012f00:	08012eb1 	.word	0x08012eb1
 8012f04:	08012eb1 	.word	0x08012eb1
 8012f08:	08013063 	.word	0x08013063
 8012f0c:	08012eb1 	.word	0x08012eb1
 8012f10:	08012f65 	.word	0x08012f65
 8012f14:	08012eb1 	.word	0x08012eb1
 8012f18:	08012eb1 	.word	0x08012eb1
 8012f1c:	0801302b 	.word	0x0801302b
 8012f20:	682b      	ldr	r3, [r5, #0]
 8012f22:	1d1a      	adds	r2, r3, #4
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	602a      	str	r2, [r5, #0]
 8012f28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012f30:	2301      	movs	r3, #1
 8012f32:	e0a3      	b.n	801307c <_printf_i+0x1f4>
 8012f34:	6820      	ldr	r0, [r4, #0]
 8012f36:	6829      	ldr	r1, [r5, #0]
 8012f38:	0606      	lsls	r6, r0, #24
 8012f3a:	f101 0304 	add.w	r3, r1, #4
 8012f3e:	d50a      	bpl.n	8012f56 <_printf_i+0xce>
 8012f40:	680e      	ldr	r6, [r1, #0]
 8012f42:	602b      	str	r3, [r5, #0]
 8012f44:	2e00      	cmp	r6, #0
 8012f46:	da03      	bge.n	8012f50 <_printf_i+0xc8>
 8012f48:	232d      	movs	r3, #45	; 0x2d
 8012f4a:	4276      	negs	r6, r6
 8012f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f50:	485e      	ldr	r0, [pc, #376]	; (80130cc <_printf_i+0x244>)
 8012f52:	230a      	movs	r3, #10
 8012f54:	e019      	b.n	8012f8a <_printf_i+0x102>
 8012f56:	680e      	ldr	r6, [r1, #0]
 8012f58:	602b      	str	r3, [r5, #0]
 8012f5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012f5e:	bf18      	it	ne
 8012f60:	b236      	sxthne	r6, r6
 8012f62:	e7ef      	b.n	8012f44 <_printf_i+0xbc>
 8012f64:	682b      	ldr	r3, [r5, #0]
 8012f66:	6820      	ldr	r0, [r4, #0]
 8012f68:	1d19      	adds	r1, r3, #4
 8012f6a:	6029      	str	r1, [r5, #0]
 8012f6c:	0601      	lsls	r1, r0, #24
 8012f6e:	d501      	bpl.n	8012f74 <_printf_i+0xec>
 8012f70:	681e      	ldr	r6, [r3, #0]
 8012f72:	e002      	b.n	8012f7a <_printf_i+0xf2>
 8012f74:	0646      	lsls	r6, r0, #25
 8012f76:	d5fb      	bpl.n	8012f70 <_printf_i+0xe8>
 8012f78:	881e      	ldrh	r6, [r3, #0]
 8012f7a:	4854      	ldr	r0, [pc, #336]	; (80130cc <_printf_i+0x244>)
 8012f7c:	2f6f      	cmp	r7, #111	; 0x6f
 8012f7e:	bf0c      	ite	eq
 8012f80:	2308      	moveq	r3, #8
 8012f82:	230a      	movne	r3, #10
 8012f84:	2100      	movs	r1, #0
 8012f86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012f8a:	6865      	ldr	r5, [r4, #4]
 8012f8c:	60a5      	str	r5, [r4, #8]
 8012f8e:	2d00      	cmp	r5, #0
 8012f90:	bfa2      	ittt	ge
 8012f92:	6821      	ldrge	r1, [r4, #0]
 8012f94:	f021 0104 	bicge.w	r1, r1, #4
 8012f98:	6021      	strge	r1, [r4, #0]
 8012f9a:	b90e      	cbnz	r6, 8012fa0 <_printf_i+0x118>
 8012f9c:	2d00      	cmp	r5, #0
 8012f9e:	d04d      	beq.n	801303c <_printf_i+0x1b4>
 8012fa0:	4615      	mov	r5, r2
 8012fa2:	fbb6 f1f3 	udiv	r1, r6, r3
 8012fa6:	fb03 6711 	mls	r7, r3, r1, r6
 8012faa:	5dc7      	ldrb	r7, [r0, r7]
 8012fac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012fb0:	4637      	mov	r7, r6
 8012fb2:	42bb      	cmp	r3, r7
 8012fb4:	460e      	mov	r6, r1
 8012fb6:	d9f4      	bls.n	8012fa2 <_printf_i+0x11a>
 8012fb8:	2b08      	cmp	r3, #8
 8012fba:	d10b      	bne.n	8012fd4 <_printf_i+0x14c>
 8012fbc:	6823      	ldr	r3, [r4, #0]
 8012fbe:	07de      	lsls	r6, r3, #31
 8012fc0:	d508      	bpl.n	8012fd4 <_printf_i+0x14c>
 8012fc2:	6923      	ldr	r3, [r4, #16]
 8012fc4:	6861      	ldr	r1, [r4, #4]
 8012fc6:	4299      	cmp	r1, r3
 8012fc8:	bfde      	ittt	le
 8012fca:	2330      	movle	r3, #48	; 0x30
 8012fcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012fd0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012fd4:	1b52      	subs	r2, r2, r5
 8012fd6:	6122      	str	r2, [r4, #16]
 8012fd8:	f8cd a000 	str.w	sl, [sp]
 8012fdc:	464b      	mov	r3, r9
 8012fde:	aa03      	add	r2, sp, #12
 8012fe0:	4621      	mov	r1, r4
 8012fe2:	4640      	mov	r0, r8
 8012fe4:	f7ff fee2 	bl	8012dac <_printf_common>
 8012fe8:	3001      	adds	r0, #1
 8012fea:	d14c      	bne.n	8013086 <_printf_i+0x1fe>
 8012fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ff0:	b004      	add	sp, #16
 8012ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ff6:	4835      	ldr	r0, [pc, #212]	; (80130cc <_printf_i+0x244>)
 8012ff8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012ffc:	6829      	ldr	r1, [r5, #0]
 8012ffe:	6823      	ldr	r3, [r4, #0]
 8013000:	f851 6b04 	ldr.w	r6, [r1], #4
 8013004:	6029      	str	r1, [r5, #0]
 8013006:	061d      	lsls	r5, r3, #24
 8013008:	d514      	bpl.n	8013034 <_printf_i+0x1ac>
 801300a:	07df      	lsls	r7, r3, #31
 801300c:	bf44      	itt	mi
 801300e:	f043 0320 	orrmi.w	r3, r3, #32
 8013012:	6023      	strmi	r3, [r4, #0]
 8013014:	b91e      	cbnz	r6, 801301e <_printf_i+0x196>
 8013016:	6823      	ldr	r3, [r4, #0]
 8013018:	f023 0320 	bic.w	r3, r3, #32
 801301c:	6023      	str	r3, [r4, #0]
 801301e:	2310      	movs	r3, #16
 8013020:	e7b0      	b.n	8012f84 <_printf_i+0xfc>
 8013022:	6823      	ldr	r3, [r4, #0]
 8013024:	f043 0320 	orr.w	r3, r3, #32
 8013028:	6023      	str	r3, [r4, #0]
 801302a:	2378      	movs	r3, #120	; 0x78
 801302c:	4828      	ldr	r0, [pc, #160]	; (80130d0 <_printf_i+0x248>)
 801302e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013032:	e7e3      	b.n	8012ffc <_printf_i+0x174>
 8013034:	0659      	lsls	r1, r3, #25
 8013036:	bf48      	it	mi
 8013038:	b2b6      	uxthmi	r6, r6
 801303a:	e7e6      	b.n	801300a <_printf_i+0x182>
 801303c:	4615      	mov	r5, r2
 801303e:	e7bb      	b.n	8012fb8 <_printf_i+0x130>
 8013040:	682b      	ldr	r3, [r5, #0]
 8013042:	6826      	ldr	r6, [r4, #0]
 8013044:	6961      	ldr	r1, [r4, #20]
 8013046:	1d18      	adds	r0, r3, #4
 8013048:	6028      	str	r0, [r5, #0]
 801304a:	0635      	lsls	r5, r6, #24
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	d501      	bpl.n	8013054 <_printf_i+0x1cc>
 8013050:	6019      	str	r1, [r3, #0]
 8013052:	e002      	b.n	801305a <_printf_i+0x1d2>
 8013054:	0670      	lsls	r0, r6, #25
 8013056:	d5fb      	bpl.n	8013050 <_printf_i+0x1c8>
 8013058:	8019      	strh	r1, [r3, #0]
 801305a:	2300      	movs	r3, #0
 801305c:	6123      	str	r3, [r4, #16]
 801305e:	4615      	mov	r5, r2
 8013060:	e7ba      	b.n	8012fd8 <_printf_i+0x150>
 8013062:	682b      	ldr	r3, [r5, #0]
 8013064:	1d1a      	adds	r2, r3, #4
 8013066:	602a      	str	r2, [r5, #0]
 8013068:	681d      	ldr	r5, [r3, #0]
 801306a:	6862      	ldr	r2, [r4, #4]
 801306c:	2100      	movs	r1, #0
 801306e:	4628      	mov	r0, r5
 8013070:	f7ed f93e 	bl	80002f0 <memchr>
 8013074:	b108      	cbz	r0, 801307a <_printf_i+0x1f2>
 8013076:	1b40      	subs	r0, r0, r5
 8013078:	6060      	str	r0, [r4, #4]
 801307a:	6863      	ldr	r3, [r4, #4]
 801307c:	6123      	str	r3, [r4, #16]
 801307e:	2300      	movs	r3, #0
 8013080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013084:	e7a8      	b.n	8012fd8 <_printf_i+0x150>
 8013086:	6923      	ldr	r3, [r4, #16]
 8013088:	462a      	mov	r2, r5
 801308a:	4649      	mov	r1, r9
 801308c:	4640      	mov	r0, r8
 801308e:	47d0      	blx	sl
 8013090:	3001      	adds	r0, #1
 8013092:	d0ab      	beq.n	8012fec <_printf_i+0x164>
 8013094:	6823      	ldr	r3, [r4, #0]
 8013096:	079b      	lsls	r3, r3, #30
 8013098:	d413      	bmi.n	80130c2 <_printf_i+0x23a>
 801309a:	68e0      	ldr	r0, [r4, #12]
 801309c:	9b03      	ldr	r3, [sp, #12]
 801309e:	4298      	cmp	r0, r3
 80130a0:	bfb8      	it	lt
 80130a2:	4618      	movlt	r0, r3
 80130a4:	e7a4      	b.n	8012ff0 <_printf_i+0x168>
 80130a6:	2301      	movs	r3, #1
 80130a8:	4632      	mov	r2, r6
 80130aa:	4649      	mov	r1, r9
 80130ac:	4640      	mov	r0, r8
 80130ae:	47d0      	blx	sl
 80130b0:	3001      	adds	r0, #1
 80130b2:	d09b      	beq.n	8012fec <_printf_i+0x164>
 80130b4:	3501      	adds	r5, #1
 80130b6:	68e3      	ldr	r3, [r4, #12]
 80130b8:	9903      	ldr	r1, [sp, #12]
 80130ba:	1a5b      	subs	r3, r3, r1
 80130bc:	42ab      	cmp	r3, r5
 80130be:	dcf2      	bgt.n	80130a6 <_printf_i+0x21e>
 80130c0:	e7eb      	b.n	801309a <_printf_i+0x212>
 80130c2:	2500      	movs	r5, #0
 80130c4:	f104 0619 	add.w	r6, r4, #25
 80130c8:	e7f5      	b.n	80130b6 <_printf_i+0x22e>
 80130ca:	bf00      	nop
 80130cc:	08016da6 	.word	0x08016da6
 80130d0:	08016db7 	.word	0x08016db7

080130d4 <_puts_r>:
 80130d4:	b570      	push	{r4, r5, r6, lr}
 80130d6:	460e      	mov	r6, r1
 80130d8:	4605      	mov	r5, r0
 80130da:	b118      	cbz	r0, 80130e4 <_puts_r+0x10>
 80130dc:	6983      	ldr	r3, [r0, #24]
 80130de:	b90b      	cbnz	r3, 80130e4 <_puts_r+0x10>
 80130e0:	f001 f842 	bl	8014168 <__sinit>
 80130e4:	69ab      	ldr	r3, [r5, #24]
 80130e6:	68ac      	ldr	r4, [r5, #8]
 80130e8:	b913      	cbnz	r3, 80130f0 <_puts_r+0x1c>
 80130ea:	4628      	mov	r0, r5
 80130ec:	f001 f83c 	bl	8014168 <__sinit>
 80130f0:	4b2c      	ldr	r3, [pc, #176]	; (80131a4 <_puts_r+0xd0>)
 80130f2:	429c      	cmp	r4, r3
 80130f4:	d120      	bne.n	8013138 <_puts_r+0x64>
 80130f6:	686c      	ldr	r4, [r5, #4]
 80130f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80130fa:	07db      	lsls	r3, r3, #31
 80130fc:	d405      	bmi.n	801310a <_puts_r+0x36>
 80130fe:	89a3      	ldrh	r3, [r4, #12]
 8013100:	0598      	lsls	r0, r3, #22
 8013102:	d402      	bmi.n	801310a <_puts_r+0x36>
 8013104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013106:	f001 f8d2 	bl	80142ae <__retarget_lock_acquire_recursive>
 801310a:	89a3      	ldrh	r3, [r4, #12]
 801310c:	0719      	lsls	r1, r3, #28
 801310e:	d51d      	bpl.n	801314c <_puts_r+0x78>
 8013110:	6923      	ldr	r3, [r4, #16]
 8013112:	b1db      	cbz	r3, 801314c <_puts_r+0x78>
 8013114:	3e01      	subs	r6, #1
 8013116:	68a3      	ldr	r3, [r4, #8]
 8013118:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801311c:	3b01      	subs	r3, #1
 801311e:	60a3      	str	r3, [r4, #8]
 8013120:	bb39      	cbnz	r1, 8013172 <_puts_r+0x9e>
 8013122:	2b00      	cmp	r3, #0
 8013124:	da38      	bge.n	8013198 <_puts_r+0xc4>
 8013126:	4622      	mov	r2, r4
 8013128:	210a      	movs	r1, #10
 801312a:	4628      	mov	r0, r5
 801312c:	f000 f848 	bl	80131c0 <__swbuf_r>
 8013130:	3001      	adds	r0, #1
 8013132:	d011      	beq.n	8013158 <_puts_r+0x84>
 8013134:	250a      	movs	r5, #10
 8013136:	e011      	b.n	801315c <_puts_r+0x88>
 8013138:	4b1b      	ldr	r3, [pc, #108]	; (80131a8 <_puts_r+0xd4>)
 801313a:	429c      	cmp	r4, r3
 801313c:	d101      	bne.n	8013142 <_puts_r+0x6e>
 801313e:	68ac      	ldr	r4, [r5, #8]
 8013140:	e7da      	b.n	80130f8 <_puts_r+0x24>
 8013142:	4b1a      	ldr	r3, [pc, #104]	; (80131ac <_puts_r+0xd8>)
 8013144:	429c      	cmp	r4, r3
 8013146:	bf08      	it	eq
 8013148:	68ec      	ldreq	r4, [r5, #12]
 801314a:	e7d5      	b.n	80130f8 <_puts_r+0x24>
 801314c:	4621      	mov	r1, r4
 801314e:	4628      	mov	r0, r5
 8013150:	f000 f888 	bl	8013264 <__swsetup_r>
 8013154:	2800      	cmp	r0, #0
 8013156:	d0dd      	beq.n	8013114 <_puts_r+0x40>
 8013158:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801315c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801315e:	07da      	lsls	r2, r3, #31
 8013160:	d405      	bmi.n	801316e <_puts_r+0x9a>
 8013162:	89a3      	ldrh	r3, [r4, #12]
 8013164:	059b      	lsls	r3, r3, #22
 8013166:	d402      	bmi.n	801316e <_puts_r+0x9a>
 8013168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801316a:	f001 f8a1 	bl	80142b0 <__retarget_lock_release_recursive>
 801316e:	4628      	mov	r0, r5
 8013170:	bd70      	pop	{r4, r5, r6, pc}
 8013172:	2b00      	cmp	r3, #0
 8013174:	da04      	bge.n	8013180 <_puts_r+0xac>
 8013176:	69a2      	ldr	r2, [r4, #24]
 8013178:	429a      	cmp	r2, r3
 801317a:	dc06      	bgt.n	801318a <_puts_r+0xb6>
 801317c:	290a      	cmp	r1, #10
 801317e:	d004      	beq.n	801318a <_puts_r+0xb6>
 8013180:	6823      	ldr	r3, [r4, #0]
 8013182:	1c5a      	adds	r2, r3, #1
 8013184:	6022      	str	r2, [r4, #0]
 8013186:	7019      	strb	r1, [r3, #0]
 8013188:	e7c5      	b.n	8013116 <_puts_r+0x42>
 801318a:	4622      	mov	r2, r4
 801318c:	4628      	mov	r0, r5
 801318e:	f000 f817 	bl	80131c0 <__swbuf_r>
 8013192:	3001      	adds	r0, #1
 8013194:	d1bf      	bne.n	8013116 <_puts_r+0x42>
 8013196:	e7df      	b.n	8013158 <_puts_r+0x84>
 8013198:	6823      	ldr	r3, [r4, #0]
 801319a:	250a      	movs	r5, #10
 801319c:	1c5a      	adds	r2, r3, #1
 801319e:	6022      	str	r2, [r4, #0]
 80131a0:	701d      	strb	r5, [r3, #0]
 80131a2:	e7db      	b.n	801315c <_puts_r+0x88>
 80131a4:	08016e78 	.word	0x08016e78
 80131a8:	08016e98 	.word	0x08016e98
 80131ac:	08016e58 	.word	0x08016e58

080131b0 <puts>:
 80131b0:	4b02      	ldr	r3, [pc, #8]	; (80131bc <puts+0xc>)
 80131b2:	4601      	mov	r1, r0
 80131b4:	6818      	ldr	r0, [r3, #0]
 80131b6:	f7ff bf8d 	b.w	80130d4 <_puts_r>
 80131ba:	bf00      	nop
 80131bc:	24000240 	.word	0x24000240

080131c0 <__swbuf_r>:
 80131c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131c2:	460e      	mov	r6, r1
 80131c4:	4614      	mov	r4, r2
 80131c6:	4605      	mov	r5, r0
 80131c8:	b118      	cbz	r0, 80131d2 <__swbuf_r+0x12>
 80131ca:	6983      	ldr	r3, [r0, #24]
 80131cc:	b90b      	cbnz	r3, 80131d2 <__swbuf_r+0x12>
 80131ce:	f000 ffcb 	bl	8014168 <__sinit>
 80131d2:	4b21      	ldr	r3, [pc, #132]	; (8013258 <__swbuf_r+0x98>)
 80131d4:	429c      	cmp	r4, r3
 80131d6:	d12b      	bne.n	8013230 <__swbuf_r+0x70>
 80131d8:	686c      	ldr	r4, [r5, #4]
 80131da:	69a3      	ldr	r3, [r4, #24]
 80131dc:	60a3      	str	r3, [r4, #8]
 80131de:	89a3      	ldrh	r3, [r4, #12]
 80131e0:	071a      	lsls	r2, r3, #28
 80131e2:	d52f      	bpl.n	8013244 <__swbuf_r+0x84>
 80131e4:	6923      	ldr	r3, [r4, #16]
 80131e6:	b36b      	cbz	r3, 8013244 <__swbuf_r+0x84>
 80131e8:	6923      	ldr	r3, [r4, #16]
 80131ea:	6820      	ldr	r0, [r4, #0]
 80131ec:	1ac0      	subs	r0, r0, r3
 80131ee:	6963      	ldr	r3, [r4, #20]
 80131f0:	b2f6      	uxtb	r6, r6
 80131f2:	4283      	cmp	r3, r0
 80131f4:	4637      	mov	r7, r6
 80131f6:	dc04      	bgt.n	8013202 <__swbuf_r+0x42>
 80131f8:	4621      	mov	r1, r4
 80131fa:	4628      	mov	r0, r5
 80131fc:	f000 ff20 	bl	8014040 <_fflush_r>
 8013200:	bb30      	cbnz	r0, 8013250 <__swbuf_r+0x90>
 8013202:	68a3      	ldr	r3, [r4, #8]
 8013204:	3b01      	subs	r3, #1
 8013206:	60a3      	str	r3, [r4, #8]
 8013208:	6823      	ldr	r3, [r4, #0]
 801320a:	1c5a      	adds	r2, r3, #1
 801320c:	6022      	str	r2, [r4, #0]
 801320e:	701e      	strb	r6, [r3, #0]
 8013210:	6963      	ldr	r3, [r4, #20]
 8013212:	3001      	adds	r0, #1
 8013214:	4283      	cmp	r3, r0
 8013216:	d004      	beq.n	8013222 <__swbuf_r+0x62>
 8013218:	89a3      	ldrh	r3, [r4, #12]
 801321a:	07db      	lsls	r3, r3, #31
 801321c:	d506      	bpl.n	801322c <__swbuf_r+0x6c>
 801321e:	2e0a      	cmp	r6, #10
 8013220:	d104      	bne.n	801322c <__swbuf_r+0x6c>
 8013222:	4621      	mov	r1, r4
 8013224:	4628      	mov	r0, r5
 8013226:	f000 ff0b 	bl	8014040 <_fflush_r>
 801322a:	b988      	cbnz	r0, 8013250 <__swbuf_r+0x90>
 801322c:	4638      	mov	r0, r7
 801322e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013230:	4b0a      	ldr	r3, [pc, #40]	; (801325c <__swbuf_r+0x9c>)
 8013232:	429c      	cmp	r4, r3
 8013234:	d101      	bne.n	801323a <__swbuf_r+0x7a>
 8013236:	68ac      	ldr	r4, [r5, #8]
 8013238:	e7cf      	b.n	80131da <__swbuf_r+0x1a>
 801323a:	4b09      	ldr	r3, [pc, #36]	; (8013260 <__swbuf_r+0xa0>)
 801323c:	429c      	cmp	r4, r3
 801323e:	bf08      	it	eq
 8013240:	68ec      	ldreq	r4, [r5, #12]
 8013242:	e7ca      	b.n	80131da <__swbuf_r+0x1a>
 8013244:	4621      	mov	r1, r4
 8013246:	4628      	mov	r0, r5
 8013248:	f000 f80c 	bl	8013264 <__swsetup_r>
 801324c:	2800      	cmp	r0, #0
 801324e:	d0cb      	beq.n	80131e8 <__swbuf_r+0x28>
 8013250:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013254:	e7ea      	b.n	801322c <__swbuf_r+0x6c>
 8013256:	bf00      	nop
 8013258:	08016e78 	.word	0x08016e78
 801325c:	08016e98 	.word	0x08016e98
 8013260:	08016e58 	.word	0x08016e58

08013264 <__swsetup_r>:
 8013264:	4b32      	ldr	r3, [pc, #200]	; (8013330 <__swsetup_r+0xcc>)
 8013266:	b570      	push	{r4, r5, r6, lr}
 8013268:	681d      	ldr	r5, [r3, #0]
 801326a:	4606      	mov	r6, r0
 801326c:	460c      	mov	r4, r1
 801326e:	b125      	cbz	r5, 801327a <__swsetup_r+0x16>
 8013270:	69ab      	ldr	r3, [r5, #24]
 8013272:	b913      	cbnz	r3, 801327a <__swsetup_r+0x16>
 8013274:	4628      	mov	r0, r5
 8013276:	f000 ff77 	bl	8014168 <__sinit>
 801327a:	4b2e      	ldr	r3, [pc, #184]	; (8013334 <__swsetup_r+0xd0>)
 801327c:	429c      	cmp	r4, r3
 801327e:	d10f      	bne.n	80132a0 <__swsetup_r+0x3c>
 8013280:	686c      	ldr	r4, [r5, #4]
 8013282:	89a3      	ldrh	r3, [r4, #12]
 8013284:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013288:	0719      	lsls	r1, r3, #28
 801328a:	d42c      	bmi.n	80132e6 <__swsetup_r+0x82>
 801328c:	06dd      	lsls	r5, r3, #27
 801328e:	d411      	bmi.n	80132b4 <__swsetup_r+0x50>
 8013290:	2309      	movs	r3, #9
 8013292:	6033      	str	r3, [r6, #0]
 8013294:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013298:	81a3      	strh	r3, [r4, #12]
 801329a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801329e:	e03e      	b.n	801331e <__swsetup_r+0xba>
 80132a0:	4b25      	ldr	r3, [pc, #148]	; (8013338 <__swsetup_r+0xd4>)
 80132a2:	429c      	cmp	r4, r3
 80132a4:	d101      	bne.n	80132aa <__swsetup_r+0x46>
 80132a6:	68ac      	ldr	r4, [r5, #8]
 80132a8:	e7eb      	b.n	8013282 <__swsetup_r+0x1e>
 80132aa:	4b24      	ldr	r3, [pc, #144]	; (801333c <__swsetup_r+0xd8>)
 80132ac:	429c      	cmp	r4, r3
 80132ae:	bf08      	it	eq
 80132b0:	68ec      	ldreq	r4, [r5, #12]
 80132b2:	e7e6      	b.n	8013282 <__swsetup_r+0x1e>
 80132b4:	0758      	lsls	r0, r3, #29
 80132b6:	d512      	bpl.n	80132de <__swsetup_r+0x7a>
 80132b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80132ba:	b141      	cbz	r1, 80132ce <__swsetup_r+0x6a>
 80132bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80132c0:	4299      	cmp	r1, r3
 80132c2:	d002      	beq.n	80132ca <__swsetup_r+0x66>
 80132c4:	4630      	mov	r0, r6
 80132c6:	f001 fc09 	bl	8014adc <_free_r>
 80132ca:	2300      	movs	r3, #0
 80132cc:	6363      	str	r3, [r4, #52]	; 0x34
 80132ce:	89a3      	ldrh	r3, [r4, #12]
 80132d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80132d4:	81a3      	strh	r3, [r4, #12]
 80132d6:	2300      	movs	r3, #0
 80132d8:	6063      	str	r3, [r4, #4]
 80132da:	6923      	ldr	r3, [r4, #16]
 80132dc:	6023      	str	r3, [r4, #0]
 80132de:	89a3      	ldrh	r3, [r4, #12]
 80132e0:	f043 0308 	orr.w	r3, r3, #8
 80132e4:	81a3      	strh	r3, [r4, #12]
 80132e6:	6923      	ldr	r3, [r4, #16]
 80132e8:	b94b      	cbnz	r3, 80132fe <__swsetup_r+0x9a>
 80132ea:	89a3      	ldrh	r3, [r4, #12]
 80132ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80132f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80132f4:	d003      	beq.n	80132fe <__swsetup_r+0x9a>
 80132f6:	4621      	mov	r1, r4
 80132f8:	4630      	mov	r0, r6
 80132fa:	f000 ffff 	bl	80142fc <__smakebuf_r>
 80132fe:	89a0      	ldrh	r0, [r4, #12]
 8013300:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013304:	f010 0301 	ands.w	r3, r0, #1
 8013308:	d00a      	beq.n	8013320 <__swsetup_r+0xbc>
 801330a:	2300      	movs	r3, #0
 801330c:	60a3      	str	r3, [r4, #8]
 801330e:	6963      	ldr	r3, [r4, #20]
 8013310:	425b      	negs	r3, r3
 8013312:	61a3      	str	r3, [r4, #24]
 8013314:	6923      	ldr	r3, [r4, #16]
 8013316:	b943      	cbnz	r3, 801332a <__swsetup_r+0xc6>
 8013318:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801331c:	d1ba      	bne.n	8013294 <__swsetup_r+0x30>
 801331e:	bd70      	pop	{r4, r5, r6, pc}
 8013320:	0781      	lsls	r1, r0, #30
 8013322:	bf58      	it	pl
 8013324:	6963      	ldrpl	r3, [r4, #20]
 8013326:	60a3      	str	r3, [r4, #8]
 8013328:	e7f4      	b.n	8013314 <__swsetup_r+0xb0>
 801332a:	2000      	movs	r0, #0
 801332c:	e7f7      	b.n	801331e <__swsetup_r+0xba>
 801332e:	bf00      	nop
 8013330:	24000240 	.word	0x24000240
 8013334:	08016e78 	.word	0x08016e78
 8013338:	08016e98 	.word	0x08016e98
 801333c:	08016e58 	.word	0x08016e58

08013340 <quorem>:
 8013340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013344:	6903      	ldr	r3, [r0, #16]
 8013346:	690c      	ldr	r4, [r1, #16]
 8013348:	42a3      	cmp	r3, r4
 801334a:	4607      	mov	r7, r0
 801334c:	f2c0 8081 	blt.w	8013452 <quorem+0x112>
 8013350:	3c01      	subs	r4, #1
 8013352:	f101 0814 	add.w	r8, r1, #20
 8013356:	f100 0514 	add.w	r5, r0, #20
 801335a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801335e:	9301      	str	r3, [sp, #4]
 8013360:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013364:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013368:	3301      	adds	r3, #1
 801336a:	429a      	cmp	r2, r3
 801336c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013370:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013374:	fbb2 f6f3 	udiv	r6, r2, r3
 8013378:	d331      	bcc.n	80133de <quorem+0x9e>
 801337a:	f04f 0e00 	mov.w	lr, #0
 801337e:	4640      	mov	r0, r8
 8013380:	46ac      	mov	ip, r5
 8013382:	46f2      	mov	sl, lr
 8013384:	f850 2b04 	ldr.w	r2, [r0], #4
 8013388:	b293      	uxth	r3, r2
 801338a:	fb06 e303 	mla	r3, r6, r3, lr
 801338e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013392:	b29b      	uxth	r3, r3
 8013394:	ebaa 0303 	sub.w	r3, sl, r3
 8013398:	f8dc a000 	ldr.w	sl, [ip]
 801339c:	0c12      	lsrs	r2, r2, #16
 801339e:	fa13 f38a 	uxtah	r3, r3, sl
 80133a2:	fb06 e202 	mla	r2, r6, r2, lr
 80133a6:	9300      	str	r3, [sp, #0]
 80133a8:	9b00      	ldr	r3, [sp, #0]
 80133aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80133ae:	b292      	uxth	r2, r2
 80133b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80133b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80133b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80133bc:	4581      	cmp	r9, r0
 80133be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80133c2:	f84c 3b04 	str.w	r3, [ip], #4
 80133c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80133ca:	d2db      	bcs.n	8013384 <quorem+0x44>
 80133cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80133d0:	b92b      	cbnz	r3, 80133de <quorem+0x9e>
 80133d2:	9b01      	ldr	r3, [sp, #4]
 80133d4:	3b04      	subs	r3, #4
 80133d6:	429d      	cmp	r5, r3
 80133d8:	461a      	mov	r2, r3
 80133da:	d32e      	bcc.n	801343a <quorem+0xfa>
 80133dc:	613c      	str	r4, [r7, #16]
 80133de:	4638      	mov	r0, r7
 80133e0:	f001 fa64 	bl	80148ac <__mcmp>
 80133e4:	2800      	cmp	r0, #0
 80133e6:	db24      	blt.n	8013432 <quorem+0xf2>
 80133e8:	3601      	adds	r6, #1
 80133ea:	4628      	mov	r0, r5
 80133ec:	f04f 0c00 	mov.w	ip, #0
 80133f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80133f4:	f8d0 e000 	ldr.w	lr, [r0]
 80133f8:	b293      	uxth	r3, r2
 80133fa:	ebac 0303 	sub.w	r3, ip, r3
 80133fe:	0c12      	lsrs	r2, r2, #16
 8013400:	fa13 f38e 	uxtah	r3, r3, lr
 8013404:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013408:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801340c:	b29b      	uxth	r3, r3
 801340e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013412:	45c1      	cmp	r9, r8
 8013414:	f840 3b04 	str.w	r3, [r0], #4
 8013418:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801341c:	d2e8      	bcs.n	80133f0 <quorem+0xb0>
 801341e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013422:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013426:	b922      	cbnz	r2, 8013432 <quorem+0xf2>
 8013428:	3b04      	subs	r3, #4
 801342a:	429d      	cmp	r5, r3
 801342c:	461a      	mov	r2, r3
 801342e:	d30a      	bcc.n	8013446 <quorem+0x106>
 8013430:	613c      	str	r4, [r7, #16]
 8013432:	4630      	mov	r0, r6
 8013434:	b003      	add	sp, #12
 8013436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801343a:	6812      	ldr	r2, [r2, #0]
 801343c:	3b04      	subs	r3, #4
 801343e:	2a00      	cmp	r2, #0
 8013440:	d1cc      	bne.n	80133dc <quorem+0x9c>
 8013442:	3c01      	subs	r4, #1
 8013444:	e7c7      	b.n	80133d6 <quorem+0x96>
 8013446:	6812      	ldr	r2, [r2, #0]
 8013448:	3b04      	subs	r3, #4
 801344a:	2a00      	cmp	r2, #0
 801344c:	d1f0      	bne.n	8013430 <quorem+0xf0>
 801344e:	3c01      	subs	r4, #1
 8013450:	e7eb      	b.n	801342a <quorem+0xea>
 8013452:	2000      	movs	r0, #0
 8013454:	e7ee      	b.n	8013434 <quorem+0xf4>
	...

08013458 <_dtoa_r>:
 8013458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801345c:	ed2d 8b02 	vpush	{d8}
 8013460:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013462:	b091      	sub	sp, #68	; 0x44
 8013464:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013468:	ec59 8b10 	vmov	r8, r9, d0
 801346c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801346e:	9106      	str	r1, [sp, #24]
 8013470:	4606      	mov	r6, r0
 8013472:	9208      	str	r2, [sp, #32]
 8013474:	930c      	str	r3, [sp, #48]	; 0x30
 8013476:	b975      	cbnz	r5, 8013496 <_dtoa_r+0x3e>
 8013478:	2010      	movs	r0, #16
 801347a:	f000 ff7f 	bl	801437c <malloc>
 801347e:	4602      	mov	r2, r0
 8013480:	6270      	str	r0, [r6, #36]	; 0x24
 8013482:	b920      	cbnz	r0, 801348e <_dtoa_r+0x36>
 8013484:	4baa      	ldr	r3, [pc, #680]	; (8013730 <_dtoa_r+0x2d8>)
 8013486:	21ea      	movs	r1, #234	; 0xea
 8013488:	48aa      	ldr	r0, [pc, #680]	; (8013734 <_dtoa_r+0x2dc>)
 801348a:	f001 fc6d 	bl	8014d68 <__assert_func>
 801348e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013492:	6005      	str	r5, [r0, #0]
 8013494:	60c5      	str	r5, [r0, #12]
 8013496:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013498:	6819      	ldr	r1, [r3, #0]
 801349a:	b151      	cbz	r1, 80134b2 <_dtoa_r+0x5a>
 801349c:	685a      	ldr	r2, [r3, #4]
 801349e:	604a      	str	r2, [r1, #4]
 80134a0:	2301      	movs	r3, #1
 80134a2:	4093      	lsls	r3, r2
 80134a4:	608b      	str	r3, [r1, #8]
 80134a6:	4630      	mov	r0, r6
 80134a8:	f000 ffbe 	bl	8014428 <_Bfree>
 80134ac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80134ae:	2200      	movs	r2, #0
 80134b0:	601a      	str	r2, [r3, #0]
 80134b2:	f1b9 0300 	subs.w	r3, r9, #0
 80134b6:	bfbb      	ittet	lt
 80134b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80134bc:	9303      	strlt	r3, [sp, #12]
 80134be:	2300      	movge	r3, #0
 80134c0:	2201      	movlt	r2, #1
 80134c2:	bfac      	ite	ge
 80134c4:	6023      	strge	r3, [r4, #0]
 80134c6:	6022      	strlt	r2, [r4, #0]
 80134c8:	4b9b      	ldr	r3, [pc, #620]	; (8013738 <_dtoa_r+0x2e0>)
 80134ca:	9c03      	ldr	r4, [sp, #12]
 80134cc:	43a3      	bics	r3, r4
 80134ce:	d11c      	bne.n	801350a <_dtoa_r+0xb2>
 80134d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80134d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80134d6:	6013      	str	r3, [r2, #0]
 80134d8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80134dc:	ea53 0308 	orrs.w	r3, r3, r8
 80134e0:	f000 84fd 	beq.w	8013ede <_dtoa_r+0xa86>
 80134e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80134e6:	b963      	cbnz	r3, 8013502 <_dtoa_r+0xaa>
 80134e8:	4b94      	ldr	r3, [pc, #592]	; (801373c <_dtoa_r+0x2e4>)
 80134ea:	e01f      	b.n	801352c <_dtoa_r+0xd4>
 80134ec:	4b94      	ldr	r3, [pc, #592]	; (8013740 <_dtoa_r+0x2e8>)
 80134ee:	9301      	str	r3, [sp, #4]
 80134f0:	3308      	adds	r3, #8
 80134f2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80134f4:	6013      	str	r3, [r2, #0]
 80134f6:	9801      	ldr	r0, [sp, #4]
 80134f8:	b011      	add	sp, #68	; 0x44
 80134fa:	ecbd 8b02 	vpop	{d8}
 80134fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013502:	4b8e      	ldr	r3, [pc, #568]	; (801373c <_dtoa_r+0x2e4>)
 8013504:	9301      	str	r3, [sp, #4]
 8013506:	3303      	adds	r3, #3
 8013508:	e7f3      	b.n	80134f2 <_dtoa_r+0x9a>
 801350a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801350e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013516:	d10b      	bne.n	8013530 <_dtoa_r+0xd8>
 8013518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801351a:	2301      	movs	r3, #1
 801351c:	6013      	str	r3, [r2, #0]
 801351e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013520:	2b00      	cmp	r3, #0
 8013522:	f000 84d9 	beq.w	8013ed8 <_dtoa_r+0xa80>
 8013526:	4887      	ldr	r0, [pc, #540]	; (8013744 <_dtoa_r+0x2ec>)
 8013528:	6018      	str	r0, [r3, #0]
 801352a:	1e43      	subs	r3, r0, #1
 801352c:	9301      	str	r3, [sp, #4]
 801352e:	e7e2      	b.n	80134f6 <_dtoa_r+0x9e>
 8013530:	a90f      	add	r1, sp, #60	; 0x3c
 8013532:	aa0e      	add	r2, sp, #56	; 0x38
 8013534:	4630      	mov	r0, r6
 8013536:	eeb0 0b48 	vmov.f64	d0, d8
 801353a:	f001 fa5d 	bl	80149f8 <__d2b>
 801353e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8013542:	4605      	mov	r5, r0
 8013544:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013546:	2900      	cmp	r1, #0
 8013548:	d046      	beq.n	80135d8 <_dtoa_r+0x180>
 801354a:	ee18 4a90 	vmov	r4, s17
 801354e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013552:	ec53 2b18 	vmov	r2, r3, d8
 8013556:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801355a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801355e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013562:	2400      	movs	r4, #0
 8013564:	ec43 2b16 	vmov	d6, r2, r3
 8013568:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801356c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8013718 <_dtoa_r+0x2c0>
 8013570:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013574:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8013720 <_dtoa_r+0x2c8>
 8013578:	eea7 6b05 	vfma.f64	d6, d7, d5
 801357c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8013728 <_dtoa_r+0x2d0>
 8013580:	ee07 1a90 	vmov	s15, r1
 8013584:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013588:	eeb0 7b46 	vmov.f64	d7, d6
 801358c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013590:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013594:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801359c:	ee16 ba90 	vmov	fp, s13
 80135a0:	940a      	str	r4, [sp, #40]	; 0x28
 80135a2:	d508      	bpl.n	80135b6 <_dtoa_r+0x15e>
 80135a4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80135a8:	eeb4 6b47 	vcmp.f64	d6, d7
 80135ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135b0:	bf18      	it	ne
 80135b2:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 80135b6:	f1bb 0f16 	cmp.w	fp, #22
 80135ba:	d82f      	bhi.n	801361c <_dtoa_r+0x1c4>
 80135bc:	4b62      	ldr	r3, [pc, #392]	; (8013748 <_dtoa_r+0x2f0>)
 80135be:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80135c2:	ed93 7b00 	vldr	d7, [r3]
 80135c6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80135ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135ce:	d501      	bpl.n	80135d4 <_dtoa_r+0x17c>
 80135d0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80135d4:	2300      	movs	r3, #0
 80135d6:	e022      	b.n	801361e <_dtoa_r+0x1c6>
 80135d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80135da:	4401      	add	r1, r0
 80135dc:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80135e0:	2b20      	cmp	r3, #32
 80135e2:	bfc1      	itttt	gt
 80135e4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80135e8:	fa04 f303 	lslgt.w	r3, r4, r3
 80135ec:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80135f0:	fa28 f804 	lsrgt.w	r8, r8, r4
 80135f4:	bfd6      	itet	le
 80135f6:	f1c3 0320 	rsble	r3, r3, #32
 80135fa:	ea43 0808 	orrgt.w	r8, r3, r8
 80135fe:	fa08 f803 	lslle.w	r8, r8, r3
 8013602:	ee07 8a90 	vmov	s15, r8
 8013606:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801360a:	3901      	subs	r1, #1
 801360c:	ee17 4a90 	vmov	r4, s15
 8013610:	ec53 2b17 	vmov	r2, r3, d7
 8013614:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8013618:	2401      	movs	r4, #1
 801361a:	e7a3      	b.n	8013564 <_dtoa_r+0x10c>
 801361c:	2301      	movs	r3, #1
 801361e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013620:	1a43      	subs	r3, r0, r1
 8013622:	1e5a      	subs	r2, r3, #1
 8013624:	bf45      	ittet	mi
 8013626:	f1c3 0301 	rsbmi	r3, r3, #1
 801362a:	9304      	strmi	r3, [sp, #16]
 801362c:	2300      	movpl	r3, #0
 801362e:	2300      	movmi	r3, #0
 8013630:	9205      	str	r2, [sp, #20]
 8013632:	bf54      	ite	pl
 8013634:	9304      	strpl	r3, [sp, #16]
 8013636:	9305      	strmi	r3, [sp, #20]
 8013638:	f1bb 0f00 	cmp.w	fp, #0
 801363c:	db18      	blt.n	8013670 <_dtoa_r+0x218>
 801363e:	9b05      	ldr	r3, [sp, #20]
 8013640:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8013644:	445b      	add	r3, fp
 8013646:	9305      	str	r3, [sp, #20]
 8013648:	2300      	movs	r3, #0
 801364a:	9a06      	ldr	r2, [sp, #24]
 801364c:	2a09      	cmp	r2, #9
 801364e:	d849      	bhi.n	80136e4 <_dtoa_r+0x28c>
 8013650:	2a05      	cmp	r2, #5
 8013652:	bfc4      	itt	gt
 8013654:	3a04      	subgt	r2, #4
 8013656:	9206      	strgt	r2, [sp, #24]
 8013658:	9a06      	ldr	r2, [sp, #24]
 801365a:	f1a2 0202 	sub.w	r2, r2, #2
 801365e:	bfcc      	ite	gt
 8013660:	2400      	movgt	r4, #0
 8013662:	2401      	movle	r4, #1
 8013664:	2a03      	cmp	r2, #3
 8013666:	d848      	bhi.n	80136fa <_dtoa_r+0x2a2>
 8013668:	e8df f002 	tbb	[pc, r2]
 801366c:	3a2c2e0b 	.word	0x3a2c2e0b
 8013670:	9b04      	ldr	r3, [sp, #16]
 8013672:	2200      	movs	r2, #0
 8013674:	eba3 030b 	sub.w	r3, r3, fp
 8013678:	9304      	str	r3, [sp, #16]
 801367a:	9209      	str	r2, [sp, #36]	; 0x24
 801367c:	f1cb 0300 	rsb	r3, fp, #0
 8013680:	e7e3      	b.n	801364a <_dtoa_r+0x1f2>
 8013682:	2200      	movs	r2, #0
 8013684:	9207      	str	r2, [sp, #28]
 8013686:	9a08      	ldr	r2, [sp, #32]
 8013688:	2a00      	cmp	r2, #0
 801368a:	dc39      	bgt.n	8013700 <_dtoa_r+0x2a8>
 801368c:	f04f 0a01 	mov.w	sl, #1
 8013690:	46d1      	mov	r9, sl
 8013692:	4652      	mov	r2, sl
 8013694:	f8cd a020 	str.w	sl, [sp, #32]
 8013698:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801369a:	2100      	movs	r1, #0
 801369c:	6079      	str	r1, [r7, #4]
 801369e:	2004      	movs	r0, #4
 80136a0:	f100 0c14 	add.w	ip, r0, #20
 80136a4:	4594      	cmp	ip, r2
 80136a6:	6879      	ldr	r1, [r7, #4]
 80136a8:	d92f      	bls.n	801370a <_dtoa_r+0x2b2>
 80136aa:	4630      	mov	r0, r6
 80136ac:	930d      	str	r3, [sp, #52]	; 0x34
 80136ae:	f000 fe7b 	bl	80143a8 <_Balloc>
 80136b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80136b4:	9001      	str	r0, [sp, #4]
 80136b6:	4602      	mov	r2, r0
 80136b8:	2800      	cmp	r0, #0
 80136ba:	d149      	bne.n	8013750 <_dtoa_r+0x2f8>
 80136bc:	4b23      	ldr	r3, [pc, #140]	; (801374c <_dtoa_r+0x2f4>)
 80136be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80136c2:	e6e1      	b.n	8013488 <_dtoa_r+0x30>
 80136c4:	2201      	movs	r2, #1
 80136c6:	e7dd      	b.n	8013684 <_dtoa_r+0x22c>
 80136c8:	2200      	movs	r2, #0
 80136ca:	9207      	str	r2, [sp, #28]
 80136cc:	9a08      	ldr	r2, [sp, #32]
 80136ce:	eb0b 0a02 	add.w	sl, fp, r2
 80136d2:	f10a 0901 	add.w	r9, sl, #1
 80136d6:	464a      	mov	r2, r9
 80136d8:	2a01      	cmp	r2, #1
 80136da:	bfb8      	it	lt
 80136dc:	2201      	movlt	r2, #1
 80136de:	e7db      	b.n	8013698 <_dtoa_r+0x240>
 80136e0:	2201      	movs	r2, #1
 80136e2:	e7f2      	b.n	80136ca <_dtoa_r+0x272>
 80136e4:	2401      	movs	r4, #1
 80136e6:	2200      	movs	r2, #0
 80136e8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80136ec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80136f0:	2100      	movs	r1, #0
 80136f2:	46d1      	mov	r9, sl
 80136f4:	2212      	movs	r2, #18
 80136f6:	9108      	str	r1, [sp, #32]
 80136f8:	e7ce      	b.n	8013698 <_dtoa_r+0x240>
 80136fa:	2201      	movs	r2, #1
 80136fc:	9207      	str	r2, [sp, #28]
 80136fe:	e7f5      	b.n	80136ec <_dtoa_r+0x294>
 8013700:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013704:	46d1      	mov	r9, sl
 8013706:	4652      	mov	r2, sl
 8013708:	e7c6      	b.n	8013698 <_dtoa_r+0x240>
 801370a:	3101      	adds	r1, #1
 801370c:	6079      	str	r1, [r7, #4]
 801370e:	0040      	lsls	r0, r0, #1
 8013710:	e7c6      	b.n	80136a0 <_dtoa_r+0x248>
 8013712:	bf00      	nop
 8013714:	f3af 8000 	nop.w
 8013718:	636f4361 	.word	0x636f4361
 801371c:	3fd287a7 	.word	0x3fd287a7
 8013720:	8b60c8b3 	.word	0x8b60c8b3
 8013724:	3fc68a28 	.word	0x3fc68a28
 8013728:	509f79fb 	.word	0x509f79fb
 801372c:	3fd34413 	.word	0x3fd34413
 8013730:	08016dd5 	.word	0x08016dd5
 8013734:	08016dec 	.word	0x08016dec
 8013738:	7ff00000 	.word	0x7ff00000
 801373c:	08016dd1 	.word	0x08016dd1
 8013740:	08016dc8 	.word	0x08016dc8
 8013744:	08016da5 	.word	0x08016da5
 8013748:	08016f40 	.word	0x08016f40
 801374c:	08016e47 	.word	0x08016e47
 8013750:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8013752:	9901      	ldr	r1, [sp, #4]
 8013754:	6011      	str	r1, [r2, #0]
 8013756:	f1b9 0f0e 	cmp.w	r9, #14
 801375a:	d86c      	bhi.n	8013836 <_dtoa_r+0x3de>
 801375c:	2c00      	cmp	r4, #0
 801375e:	d06a      	beq.n	8013836 <_dtoa_r+0x3de>
 8013760:	f1bb 0f00 	cmp.w	fp, #0
 8013764:	f340 80a0 	ble.w	80138a8 <_dtoa_r+0x450>
 8013768:	49c1      	ldr	r1, [pc, #772]	; (8013a70 <_dtoa_r+0x618>)
 801376a:	f00b 020f 	and.w	r2, fp, #15
 801376e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8013772:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013776:	ed92 7b00 	vldr	d7, [r2]
 801377a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801377e:	f000 8087 	beq.w	8013890 <_dtoa_r+0x438>
 8013782:	4abc      	ldr	r2, [pc, #752]	; (8013a74 <_dtoa_r+0x61c>)
 8013784:	ed92 6b08 	vldr	d6, [r2, #32]
 8013788:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801378c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013790:	f001 010f 	and.w	r1, r1, #15
 8013794:	2203      	movs	r2, #3
 8013796:	48b7      	ldr	r0, [pc, #732]	; (8013a74 <_dtoa_r+0x61c>)
 8013798:	2900      	cmp	r1, #0
 801379a:	d17b      	bne.n	8013894 <_dtoa_r+0x43c>
 801379c:	ed9d 6b02 	vldr	d6, [sp, #8]
 80137a0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80137a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80137a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80137aa:	2900      	cmp	r1, #0
 80137ac:	f000 80a2 	beq.w	80138f4 <_dtoa_r+0x49c>
 80137b0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80137b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80137b8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80137bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137c0:	f140 8098 	bpl.w	80138f4 <_dtoa_r+0x49c>
 80137c4:	f1b9 0f00 	cmp.w	r9, #0
 80137c8:	f000 8094 	beq.w	80138f4 <_dtoa_r+0x49c>
 80137cc:	f1ba 0f00 	cmp.w	sl, #0
 80137d0:	dd2f      	ble.n	8013832 <_dtoa_r+0x3da>
 80137d2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80137d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80137da:	ed8d 7b02 	vstr	d7, [sp, #8]
 80137de:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80137e2:	3201      	adds	r2, #1
 80137e4:	4650      	mov	r0, sl
 80137e6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80137ea:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80137ee:	ee07 2a90 	vmov	s15, r2
 80137f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80137f6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80137fa:	ee15 4a90 	vmov	r4, s11
 80137fe:	ec52 1b15 	vmov	r1, r2, d5
 8013802:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8013806:	2800      	cmp	r0, #0
 8013808:	d177      	bne.n	80138fa <_dtoa_r+0x4a2>
 801380a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801380e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013812:	ec42 1b17 	vmov	d7, r1, r2
 8013816:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801381a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801381e:	f300 8263 	bgt.w	8013ce8 <_dtoa_r+0x890>
 8013822:	eeb1 7b47 	vneg.f64	d7, d7
 8013826:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801382a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801382e:	f100 8258 	bmi.w	8013ce2 <_dtoa_r+0x88a>
 8013832:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013836:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013838:	2a00      	cmp	r2, #0
 801383a:	f2c0 811d 	blt.w	8013a78 <_dtoa_r+0x620>
 801383e:	f1bb 0f0e 	cmp.w	fp, #14
 8013842:	f300 8119 	bgt.w	8013a78 <_dtoa_r+0x620>
 8013846:	4b8a      	ldr	r3, [pc, #552]	; (8013a70 <_dtoa_r+0x618>)
 8013848:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801384c:	ed93 6b00 	vldr	d6, [r3]
 8013850:	9b08      	ldr	r3, [sp, #32]
 8013852:	2b00      	cmp	r3, #0
 8013854:	f280 80b7 	bge.w	80139c6 <_dtoa_r+0x56e>
 8013858:	f1b9 0f00 	cmp.w	r9, #0
 801385c:	f300 80b3 	bgt.w	80139c6 <_dtoa_r+0x56e>
 8013860:	f040 823f 	bne.w	8013ce2 <_dtoa_r+0x88a>
 8013864:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013868:	ee26 6b07 	vmul.f64	d6, d6, d7
 801386c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013870:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013878:	464c      	mov	r4, r9
 801387a:	464f      	mov	r7, r9
 801387c:	f280 8215 	bge.w	8013caa <_dtoa_r+0x852>
 8013880:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013884:	2331      	movs	r3, #49	; 0x31
 8013886:	f808 3b01 	strb.w	r3, [r8], #1
 801388a:	f10b 0b01 	add.w	fp, fp, #1
 801388e:	e211      	b.n	8013cb4 <_dtoa_r+0x85c>
 8013890:	2202      	movs	r2, #2
 8013892:	e780      	b.n	8013796 <_dtoa_r+0x33e>
 8013894:	07cc      	lsls	r4, r1, #31
 8013896:	d504      	bpl.n	80138a2 <_dtoa_r+0x44a>
 8013898:	ed90 6b00 	vldr	d6, [r0]
 801389c:	3201      	adds	r2, #1
 801389e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80138a2:	1049      	asrs	r1, r1, #1
 80138a4:	3008      	adds	r0, #8
 80138a6:	e777      	b.n	8013798 <_dtoa_r+0x340>
 80138a8:	d022      	beq.n	80138f0 <_dtoa_r+0x498>
 80138aa:	f1cb 0100 	rsb	r1, fp, #0
 80138ae:	4a70      	ldr	r2, [pc, #448]	; (8013a70 <_dtoa_r+0x618>)
 80138b0:	f001 000f 	and.w	r0, r1, #15
 80138b4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80138b8:	ed92 7b00 	vldr	d7, [r2]
 80138bc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80138c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80138c4:	486b      	ldr	r0, [pc, #428]	; (8013a74 <_dtoa_r+0x61c>)
 80138c6:	1109      	asrs	r1, r1, #4
 80138c8:	2400      	movs	r4, #0
 80138ca:	2202      	movs	r2, #2
 80138cc:	b929      	cbnz	r1, 80138da <_dtoa_r+0x482>
 80138ce:	2c00      	cmp	r4, #0
 80138d0:	f43f af6a 	beq.w	80137a8 <_dtoa_r+0x350>
 80138d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80138d8:	e766      	b.n	80137a8 <_dtoa_r+0x350>
 80138da:	07cf      	lsls	r7, r1, #31
 80138dc:	d505      	bpl.n	80138ea <_dtoa_r+0x492>
 80138de:	ed90 6b00 	vldr	d6, [r0]
 80138e2:	3201      	adds	r2, #1
 80138e4:	2401      	movs	r4, #1
 80138e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80138ea:	1049      	asrs	r1, r1, #1
 80138ec:	3008      	adds	r0, #8
 80138ee:	e7ed      	b.n	80138cc <_dtoa_r+0x474>
 80138f0:	2202      	movs	r2, #2
 80138f2:	e759      	b.n	80137a8 <_dtoa_r+0x350>
 80138f4:	465f      	mov	r7, fp
 80138f6:	4648      	mov	r0, r9
 80138f8:	e775      	b.n	80137e6 <_dtoa_r+0x38e>
 80138fa:	ec42 1b17 	vmov	d7, r1, r2
 80138fe:	4a5c      	ldr	r2, [pc, #368]	; (8013a70 <_dtoa_r+0x618>)
 8013900:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013904:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013908:	9a01      	ldr	r2, [sp, #4]
 801390a:	1814      	adds	r4, r2, r0
 801390c:	9a07      	ldr	r2, [sp, #28]
 801390e:	b352      	cbz	r2, 8013966 <_dtoa_r+0x50e>
 8013910:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8013914:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8013918:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801391c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013920:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013924:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013928:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801392c:	ee14 2a90 	vmov	r2, s9
 8013930:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013934:	3230      	adds	r2, #48	; 0x30
 8013936:	ee36 6b45 	vsub.f64	d6, d6, d5
 801393a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801393e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013942:	f808 2b01 	strb.w	r2, [r8], #1
 8013946:	d439      	bmi.n	80139bc <_dtoa_r+0x564>
 8013948:	ee32 5b46 	vsub.f64	d5, d2, d6
 801394c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013954:	d472      	bmi.n	8013a3c <_dtoa_r+0x5e4>
 8013956:	45a0      	cmp	r8, r4
 8013958:	f43f af6b 	beq.w	8013832 <_dtoa_r+0x3da>
 801395c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013960:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013964:	e7e0      	b.n	8013928 <_dtoa_r+0x4d0>
 8013966:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801396a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801396e:	4621      	mov	r1, r4
 8013970:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013974:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013978:	ee14 2a90 	vmov	r2, s9
 801397c:	3230      	adds	r2, #48	; 0x30
 801397e:	f808 2b01 	strb.w	r2, [r8], #1
 8013982:	45a0      	cmp	r8, r4
 8013984:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013988:	ee36 6b45 	vsub.f64	d6, d6, d5
 801398c:	d118      	bne.n	80139c0 <_dtoa_r+0x568>
 801398e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8013992:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013996:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801399a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801399e:	dc4d      	bgt.n	8013a3c <_dtoa_r+0x5e4>
 80139a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80139a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80139a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ac:	f57f af41 	bpl.w	8013832 <_dtoa_r+0x3da>
 80139b0:	4688      	mov	r8, r1
 80139b2:	3901      	subs	r1, #1
 80139b4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80139b8:	2b30      	cmp	r3, #48	; 0x30
 80139ba:	d0f9      	beq.n	80139b0 <_dtoa_r+0x558>
 80139bc:	46bb      	mov	fp, r7
 80139be:	e02a      	b.n	8013a16 <_dtoa_r+0x5be>
 80139c0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80139c4:	e7d6      	b.n	8013974 <_dtoa_r+0x51c>
 80139c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80139ca:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80139ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80139d2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80139d6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80139da:	ee15 3a10 	vmov	r3, s10
 80139de:	3330      	adds	r3, #48	; 0x30
 80139e0:	f808 3b01 	strb.w	r3, [r8], #1
 80139e4:	9b01      	ldr	r3, [sp, #4]
 80139e6:	eba8 0303 	sub.w	r3, r8, r3
 80139ea:	4599      	cmp	r9, r3
 80139ec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80139f0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80139f4:	d133      	bne.n	8013a5e <_dtoa_r+0x606>
 80139f6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80139fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80139fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a02:	dc1a      	bgt.n	8013a3a <_dtoa_r+0x5e2>
 8013a04:	eeb4 7b46 	vcmp.f64	d7, d6
 8013a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a0c:	d103      	bne.n	8013a16 <_dtoa_r+0x5be>
 8013a0e:	ee15 3a10 	vmov	r3, s10
 8013a12:	07d9      	lsls	r1, r3, #31
 8013a14:	d411      	bmi.n	8013a3a <_dtoa_r+0x5e2>
 8013a16:	4629      	mov	r1, r5
 8013a18:	4630      	mov	r0, r6
 8013a1a:	f000 fd05 	bl	8014428 <_Bfree>
 8013a1e:	2300      	movs	r3, #0
 8013a20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013a22:	f888 3000 	strb.w	r3, [r8]
 8013a26:	f10b 0301 	add.w	r3, fp, #1
 8013a2a:	6013      	str	r3, [r2, #0]
 8013a2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	f43f ad61 	beq.w	80134f6 <_dtoa_r+0x9e>
 8013a34:	f8c3 8000 	str.w	r8, [r3]
 8013a38:	e55d      	b.n	80134f6 <_dtoa_r+0x9e>
 8013a3a:	465f      	mov	r7, fp
 8013a3c:	4643      	mov	r3, r8
 8013a3e:	4698      	mov	r8, r3
 8013a40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013a44:	2a39      	cmp	r2, #57	; 0x39
 8013a46:	d106      	bne.n	8013a56 <_dtoa_r+0x5fe>
 8013a48:	9a01      	ldr	r2, [sp, #4]
 8013a4a:	429a      	cmp	r2, r3
 8013a4c:	d1f7      	bne.n	8013a3e <_dtoa_r+0x5e6>
 8013a4e:	9901      	ldr	r1, [sp, #4]
 8013a50:	2230      	movs	r2, #48	; 0x30
 8013a52:	3701      	adds	r7, #1
 8013a54:	700a      	strb	r2, [r1, #0]
 8013a56:	781a      	ldrb	r2, [r3, #0]
 8013a58:	3201      	adds	r2, #1
 8013a5a:	701a      	strb	r2, [r3, #0]
 8013a5c:	e7ae      	b.n	80139bc <_dtoa_r+0x564>
 8013a5e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013a62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a6a:	d1b2      	bne.n	80139d2 <_dtoa_r+0x57a>
 8013a6c:	e7d3      	b.n	8013a16 <_dtoa_r+0x5be>
 8013a6e:	bf00      	nop
 8013a70:	08016f40 	.word	0x08016f40
 8013a74:	08016f18 	.word	0x08016f18
 8013a78:	9907      	ldr	r1, [sp, #28]
 8013a7a:	2900      	cmp	r1, #0
 8013a7c:	f000 80d0 	beq.w	8013c20 <_dtoa_r+0x7c8>
 8013a80:	9906      	ldr	r1, [sp, #24]
 8013a82:	2901      	cmp	r1, #1
 8013a84:	f300 80b4 	bgt.w	8013bf0 <_dtoa_r+0x798>
 8013a88:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013a8a:	2900      	cmp	r1, #0
 8013a8c:	f000 80ac 	beq.w	8013be8 <_dtoa_r+0x790>
 8013a90:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013a94:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013a98:	461c      	mov	r4, r3
 8013a9a:	930a      	str	r3, [sp, #40]	; 0x28
 8013a9c:	9b04      	ldr	r3, [sp, #16]
 8013a9e:	4413      	add	r3, r2
 8013aa0:	9304      	str	r3, [sp, #16]
 8013aa2:	9b05      	ldr	r3, [sp, #20]
 8013aa4:	2101      	movs	r1, #1
 8013aa6:	4413      	add	r3, r2
 8013aa8:	4630      	mov	r0, r6
 8013aaa:	9305      	str	r3, [sp, #20]
 8013aac:	f000 fd74 	bl	8014598 <__i2b>
 8013ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ab2:	4607      	mov	r7, r0
 8013ab4:	f1b8 0f00 	cmp.w	r8, #0
 8013ab8:	dd0d      	ble.n	8013ad6 <_dtoa_r+0x67e>
 8013aba:	9a05      	ldr	r2, [sp, #20]
 8013abc:	2a00      	cmp	r2, #0
 8013abe:	dd0a      	ble.n	8013ad6 <_dtoa_r+0x67e>
 8013ac0:	4542      	cmp	r2, r8
 8013ac2:	9904      	ldr	r1, [sp, #16]
 8013ac4:	bfa8      	it	ge
 8013ac6:	4642      	movge	r2, r8
 8013ac8:	1a89      	subs	r1, r1, r2
 8013aca:	9104      	str	r1, [sp, #16]
 8013acc:	9905      	ldr	r1, [sp, #20]
 8013ace:	eba8 0802 	sub.w	r8, r8, r2
 8013ad2:	1a8a      	subs	r2, r1, r2
 8013ad4:	9205      	str	r2, [sp, #20]
 8013ad6:	b303      	cbz	r3, 8013b1a <_dtoa_r+0x6c2>
 8013ad8:	9a07      	ldr	r2, [sp, #28]
 8013ada:	2a00      	cmp	r2, #0
 8013adc:	f000 80a5 	beq.w	8013c2a <_dtoa_r+0x7d2>
 8013ae0:	2c00      	cmp	r4, #0
 8013ae2:	dd13      	ble.n	8013b0c <_dtoa_r+0x6b4>
 8013ae4:	4639      	mov	r1, r7
 8013ae6:	4622      	mov	r2, r4
 8013ae8:	4630      	mov	r0, r6
 8013aea:	930d      	str	r3, [sp, #52]	; 0x34
 8013aec:	f000 fe14 	bl	8014718 <__pow5mult>
 8013af0:	462a      	mov	r2, r5
 8013af2:	4601      	mov	r1, r0
 8013af4:	4607      	mov	r7, r0
 8013af6:	4630      	mov	r0, r6
 8013af8:	f000 fd64 	bl	80145c4 <__multiply>
 8013afc:	4629      	mov	r1, r5
 8013afe:	900a      	str	r0, [sp, #40]	; 0x28
 8013b00:	4630      	mov	r0, r6
 8013b02:	f000 fc91 	bl	8014428 <_Bfree>
 8013b06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013b08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013b0a:	4615      	mov	r5, r2
 8013b0c:	1b1a      	subs	r2, r3, r4
 8013b0e:	d004      	beq.n	8013b1a <_dtoa_r+0x6c2>
 8013b10:	4629      	mov	r1, r5
 8013b12:	4630      	mov	r0, r6
 8013b14:	f000 fe00 	bl	8014718 <__pow5mult>
 8013b18:	4605      	mov	r5, r0
 8013b1a:	2101      	movs	r1, #1
 8013b1c:	4630      	mov	r0, r6
 8013b1e:	f000 fd3b 	bl	8014598 <__i2b>
 8013b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	4604      	mov	r4, r0
 8013b28:	f340 8081 	ble.w	8013c2e <_dtoa_r+0x7d6>
 8013b2c:	461a      	mov	r2, r3
 8013b2e:	4601      	mov	r1, r0
 8013b30:	4630      	mov	r0, r6
 8013b32:	f000 fdf1 	bl	8014718 <__pow5mult>
 8013b36:	9b06      	ldr	r3, [sp, #24]
 8013b38:	2b01      	cmp	r3, #1
 8013b3a:	4604      	mov	r4, r0
 8013b3c:	dd7a      	ble.n	8013c34 <_dtoa_r+0x7dc>
 8013b3e:	2300      	movs	r3, #0
 8013b40:	930a      	str	r3, [sp, #40]	; 0x28
 8013b42:	6922      	ldr	r2, [r4, #16]
 8013b44:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013b48:	6910      	ldr	r0, [r2, #16]
 8013b4a:	f000 fcd5 	bl	80144f8 <__hi0bits>
 8013b4e:	f1c0 0020 	rsb	r0, r0, #32
 8013b52:	9b05      	ldr	r3, [sp, #20]
 8013b54:	4418      	add	r0, r3
 8013b56:	f010 001f 	ands.w	r0, r0, #31
 8013b5a:	f000 808c 	beq.w	8013c76 <_dtoa_r+0x81e>
 8013b5e:	f1c0 0220 	rsb	r2, r0, #32
 8013b62:	2a04      	cmp	r2, #4
 8013b64:	f340 8085 	ble.w	8013c72 <_dtoa_r+0x81a>
 8013b68:	f1c0 001c 	rsb	r0, r0, #28
 8013b6c:	9b04      	ldr	r3, [sp, #16]
 8013b6e:	4403      	add	r3, r0
 8013b70:	9304      	str	r3, [sp, #16]
 8013b72:	9b05      	ldr	r3, [sp, #20]
 8013b74:	4403      	add	r3, r0
 8013b76:	4480      	add	r8, r0
 8013b78:	9305      	str	r3, [sp, #20]
 8013b7a:	9b04      	ldr	r3, [sp, #16]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	dd05      	ble.n	8013b8c <_dtoa_r+0x734>
 8013b80:	4629      	mov	r1, r5
 8013b82:	461a      	mov	r2, r3
 8013b84:	4630      	mov	r0, r6
 8013b86:	f000 fe21 	bl	80147cc <__lshift>
 8013b8a:	4605      	mov	r5, r0
 8013b8c:	9b05      	ldr	r3, [sp, #20]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	dd05      	ble.n	8013b9e <_dtoa_r+0x746>
 8013b92:	4621      	mov	r1, r4
 8013b94:	461a      	mov	r2, r3
 8013b96:	4630      	mov	r0, r6
 8013b98:	f000 fe18 	bl	80147cc <__lshift>
 8013b9c:	4604      	mov	r4, r0
 8013b9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d06a      	beq.n	8013c7a <_dtoa_r+0x822>
 8013ba4:	4621      	mov	r1, r4
 8013ba6:	4628      	mov	r0, r5
 8013ba8:	f000 fe80 	bl	80148ac <__mcmp>
 8013bac:	2800      	cmp	r0, #0
 8013bae:	da64      	bge.n	8013c7a <_dtoa_r+0x822>
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	4629      	mov	r1, r5
 8013bb4:	220a      	movs	r2, #10
 8013bb6:	4630      	mov	r0, r6
 8013bb8:	f000 fc58 	bl	801446c <__multadd>
 8013bbc:	9b07      	ldr	r3, [sp, #28]
 8013bbe:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013bc2:	4605      	mov	r5, r0
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	f000 8191 	beq.w	8013eec <_dtoa_r+0xa94>
 8013bca:	4639      	mov	r1, r7
 8013bcc:	2300      	movs	r3, #0
 8013bce:	220a      	movs	r2, #10
 8013bd0:	4630      	mov	r0, r6
 8013bd2:	f000 fc4b 	bl	801446c <__multadd>
 8013bd6:	f1ba 0f00 	cmp.w	sl, #0
 8013bda:	4607      	mov	r7, r0
 8013bdc:	f300 808d 	bgt.w	8013cfa <_dtoa_r+0x8a2>
 8013be0:	9b06      	ldr	r3, [sp, #24]
 8013be2:	2b02      	cmp	r3, #2
 8013be4:	dc50      	bgt.n	8013c88 <_dtoa_r+0x830>
 8013be6:	e088      	b.n	8013cfa <_dtoa_r+0x8a2>
 8013be8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013bea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013bee:	e751      	b.n	8013a94 <_dtoa_r+0x63c>
 8013bf0:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8013bf4:	42a3      	cmp	r3, r4
 8013bf6:	bfbf      	itttt	lt
 8013bf8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8013bfa:	1ae3      	sublt	r3, r4, r3
 8013bfc:	18d2      	addlt	r2, r2, r3
 8013bfe:	9209      	strlt	r2, [sp, #36]	; 0x24
 8013c00:	bfb6      	itet	lt
 8013c02:	4623      	movlt	r3, r4
 8013c04:	1b1c      	subge	r4, r3, r4
 8013c06:	2400      	movlt	r4, #0
 8013c08:	f1b9 0f00 	cmp.w	r9, #0
 8013c0c:	bfb5      	itete	lt
 8013c0e:	9a04      	ldrlt	r2, [sp, #16]
 8013c10:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8013c14:	eba2 0809 	sublt.w	r8, r2, r9
 8013c18:	464a      	movge	r2, r9
 8013c1a:	bfb8      	it	lt
 8013c1c:	2200      	movlt	r2, #0
 8013c1e:	e73c      	b.n	8013a9a <_dtoa_r+0x642>
 8013c20:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013c24:	9f07      	ldr	r7, [sp, #28]
 8013c26:	461c      	mov	r4, r3
 8013c28:	e744      	b.n	8013ab4 <_dtoa_r+0x65c>
 8013c2a:	461a      	mov	r2, r3
 8013c2c:	e770      	b.n	8013b10 <_dtoa_r+0x6b8>
 8013c2e:	9b06      	ldr	r3, [sp, #24]
 8013c30:	2b01      	cmp	r3, #1
 8013c32:	dc18      	bgt.n	8013c66 <_dtoa_r+0x80e>
 8013c34:	9b02      	ldr	r3, [sp, #8]
 8013c36:	b9b3      	cbnz	r3, 8013c66 <_dtoa_r+0x80e>
 8013c38:	9b03      	ldr	r3, [sp, #12]
 8013c3a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013c3e:	b9a2      	cbnz	r2, 8013c6a <_dtoa_r+0x812>
 8013c40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013c44:	0d12      	lsrs	r2, r2, #20
 8013c46:	0512      	lsls	r2, r2, #20
 8013c48:	b18a      	cbz	r2, 8013c6e <_dtoa_r+0x816>
 8013c4a:	9b04      	ldr	r3, [sp, #16]
 8013c4c:	3301      	adds	r3, #1
 8013c4e:	9304      	str	r3, [sp, #16]
 8013c50:	9b05      	ldr	r3, [sp, #20]
 8013c52:	3301      	adds	r3, #1
 8013c54:	9305      	str	r3, [sp, #20]
 8013c56:	2301      	movs	r3, #1
 8013c58:	930a      	str	r3, [sp, #40]	; 0x28
 8013c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	f47f af70 	bne.w	8013b42 <_dtoa_r+0x6ea>
 8013c62:	2001      	movs	r0, #1
 8013c64:	e775      	b.n	8013b52 <_dtoa_r+0x6fa>
 8013c66:	2300      	movs	r3, #0
 8013c68:	e7f6      	b.n	8013c58 <_dtoa_r+0x800>
 8013c6a:	9b02      	ldr	r3, [sp, #8]
 8013c6c:	e7f4      	b.n	8013c58 <_dtoa_r+0x800>
 8013c6e:	920a      	str	r2, [sp, #40]	; 0x28
 8013c70:	e7f3      	b.n	8013c5a <_dtoa_r+0x802>
 8013c72:	d082      	beq.n	8013b7a <_dtoa_r+0x722>
 8013c74:	4610      	mov	r0, r2
 8013c76:	301c      	adds	r0, #28
 8013c78:	e778      	b.n	8013b6c <_dtoa_r+0x714>
 8013c7a:	f1b9 0f00 	cmp.w	r9, #0
 8013c7e:	dc37      	bgt.n	8013cf0 <_dtoa_r+0x898>
 8013c80:	9b06      	ldr	r3, [sp, #24]
 8013c82:	2b02      	cmp	r3, #2
 8013c84:	dd34      	ble.n	8013cf0 <_dtoa_r+0x898>
 8013c86:	46ca      	mov	sl, r9
 8013c88:	f1ba 0f00 	cmp.w	sl, #0
 8013c8c:	d10d      	bne.n	8013caa <_dtoa_r+0x852>
 8013c8e:	4621      	mov	r1, r4
 8013c90:	4653      	mov	r3, sl
 8013c92:	2205      	movs	r2, #5
 8013c94:	4630      	mov	r0, r6
 8013c96:	f000 fbe9 	bl	801446c <__multadd>
 8013c9a:	4601      	mov	r1, r0
 8013c9c:	4604      	mov	r4, r0
 8013c9e:	4628      	mov	r0, r5
 8013ca0:	f000 fe04 	bl	80148ac <__mcmp>
 8013ca4:	2800      	cmp	r0, #0
 8013ca6:	f73f adeb 	bgt.w	8013880 <_dtoa_r+0x428>
 8013caa:	9b08      	ldr	r3, [sp, #32]
 8013cac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013cb0:	ea6f 0b03 	mvn.w	fp, r3
 8013cb4:	f04f 0900 	mov.w	r9, #0
 8013cb8:	4621      	mov	r1, r4
 8013cba:	4630      	mov	r0, r6
 8013cbc:	f000 fbb4 	bl	8014428 <_Bfree>
 8013cc0:	2f00      	cmp	r7, #0
 8013cc2:	f43f aea8 	beq.w	8013a16 <_dtoa_r+0x5be>
 8013cc6:	f1b9 0f00 	cmp.w	r9, #0
 8013cca:	d005      	beq.n	8013cd8 <_dtoa_r+0x880>
 8013ccc:	45b9      	cmp	r9, r7
 8013cce:	d003      	beq.n	8013cd8 <_dtoa_r+0x880>
 8013cd0:	4649      	mov	r1, r9
 8013cd2:	4630      	mov	r0, r6
 8013cd4:	f000 fba8 	bl	8014428 <_Bfree>
 8013cd8:	4639      	mov	r1, r7
 8013cda:	4630      	mov	r0, r6
 8013cdc:	f000 fba4 	bl	8014428 <_Bfree>
 8013ce0:	e699      	b.n	8013a16 <_dtoa_r+0x5be>
 8013ce2:	2400      	movs	r4, #0
 8013ce4:	4627      	mov	r7, r4
 8013ce6:	e7e0      	b.n	8013caa <_dtoa_r+0x852>
 8013ce8:	46bb      	mov	fp, r7
 8013cea:	4604      	mov	r4, r0
 8013cec:	4607      	mov	r7, r0
 8013cee:	e5c7      	b.n	8013880 <_dtoa_r+0x428>
 8013cf0:	9b07      	ldr	r3, [sp, #28]
 8013cf2:	46ca      	mov	sl, r9
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	f000 8100 	beq.w	8013efa <_dtoa_r+0xaa2>
 8013cfa:	f1b8 0f00 	cmp.w	r8, #0
 8013cfe:	dd05      	ble.n	8013d0c <_dtoa_r+0x8b4>
 8013d00:	4639      	mov	r1, r7
 8013d02:	4642      	mov	r2, r8
 8013d04:	4630      	mov	r0, r6
 8013d06:	f000 fd61 	bl	80147cc <__lshift>
 8013d0a:	4607      	mov	r7, r0
 8013d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d05d      	beq.n	8013dce <_dtoa_r+0x976>
 8013d12:	6879      	ldr	r1, [r7, #4]
 8013d14:	4630      	mov	r0, r6
 8013d16:	f000 fb47 	bl	80143a8 <_Balloc>
 8013d1a:	4680      	mov	r8, r0
 8013d1c:	b928      	cbnz	r0, 8013d2a <_dtoa_r+0x8d2>
 8013d1e:	4b82      	ldr	r3, [pc, #520]	; (8013f28 <_dtoa_r+0xad0>)
 8013d20:	4602      	mov	r2, r0
 8013d22:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013d26:	f7ff bbaf 	b.w	8013488 <_dtoa_r+0x30>
 8013d2a:	693a      	ldr	r2, [r7, #16]
 8013d2c:	3202      	adds	r2, #2
 8013d2e:	0092      	lsls	r2, r2, #2
 8013d30:	f107 010c 	add.w	r1, r7, #12
 8013d34:	300c      	adds	r0, #12
 8013d36:	f000 fb29 	bl	801438c <memcpy>
 8013d3a:	2201      	movs	r2, #1
 8013d3c:	4641      	mov	r1, r8
 8013d3e:	4630      	mov	r0, r6
 8013d40:	f000 fd44 	bl	80147cc <__lshift>
 8013d44:	9b01      	ldr	r3, [sp, #4]
 8013d46:	3301      	adds	r3, #1
 8013d48:	9304      	str	r3, [sp, #16]
 8013d4a:	9b01      	ldr	r3, [sp, #4]
 8013d4c:	4453      	add	r3, sl
 8013d4e:	9308      	str	r3, [sp, #32]
 8013d50:	9b02      	ldr	r3, [sp, #8]
 8013d52:	f003 0301 	and.w	r3, r3, #1
 8013d56:	46b9      	mov	r9, r7
 8013d58:	9307      	str	r3, [sp, #28]
 8013d5a:	4607      	mov	r7, r0
 8013d5c:	9b04      	ldr	r3, [sp, #16]
 8013d5e:	4621      	mov	r1, r4
 8013d60:	3b01      	subs	r3, #1
 8013d62:	4628      	mov	r0, r5
 8013d64:	9302      	str	r3, [sp, #8]
 8013d66:	f7ff faeb 	bl	8013340 <quorem>
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	3330      	adds	r3, #48	; 0x30
 8013d6e:	9005      	str	r0, [sp, #20]
 8013d70:	4649      	mov	r1, r9
 8013d72:	4628      	mov	r0, r5
 8013d74:	9309      	str	r3, [sp, #36]	; 0x24
 8013d76:	f000 fd99 	bl	80148ac <__mcmp>
 8013d7a:	463a      	mov	r2, r7
 8013d7c:	4682      	mov	sl, r0
 8013d7e:	4621      	mov	r1, r4
 8013d80:	4630      	mov	r0, r6
 8013d82:	f000 fdaf 	bl	80148e4 <__mdiff>
 8013d86:	68c2      	ldr	r2, [r0, #12]
 8013d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d8a:	4680      	mov	r8, r0
 8013d8c:	bb0a      	cbnz	r2, 8013dd2 <_dtoa_r+0x97a>
 8013d8e:	4601      	mov	r1, r0
 8013d90:	4628      	mov	r0, r5
 8013d92:	f000 fd8b 	bl	80148ac <__mcmp>
 8013d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d98:	4602      	mov	r2, r0
 8013d9a:	4641      	mov	r1, r8
 8013d9c:	4630      	mov	r0, r6
 8013d9e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8013da2:	f000 fb41 	bl	8014428 <_Bfree>
 8013da6:	9b06      	ldr	r3, [sp, #24]
 8013da8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013daa:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013dae:	ea43 0102 	orr.w	r1, r3, r2
 8013db2:	9b07      	ldr	r3, [sp, #28]
 8013db4:	430b      	orrs	r3, r1
 8013db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013db8:	d10d      	bne.n	8013dd6 <_dtoa_r+0x97e>
 8013dba:	2b39      	cmp	r3, #57	; 0x39
 8013dbc:	d029      	beq.n	8013e12 <_dtoa_r+0x9ba>
 8013dbe:	f1ba 0f00 	cmp.w	sl, #0
 8013dc2:	dd01      	ble.n	8013dc8 <_dtoa_r+0x970>
 8013dc4:	9b05      	ldr	r3, [sp, #20]
 8013dc6:	3331      	adds	r3, #49	; 0x31
 8013dc8:	9a02      	ldr	r2, [sp, #8]
 8013dca:	7013      	strb	r3, [r2, #0]
 8013dcc:	e774      	b.n	8013cb8 <_dtoa_r+0x860>
 8013dce:	4638      	mov	r0, r7
 8013dd0:	e7b8      	b.n	8013d44 <_dtoa_r+0x8ec>
 8013dd2:	2201      	movs	r2, #1
 8013dd4:	e7e1      	b.n	8013d9a <_dtoa_r+0x942>
 8013dd6:	f1ba 0f00 	cmp.w	sl, #0
 8013dda:	db06      	blt.n	8013dea <_dtoa_r+0x992>
 8013ddc:	9906      	ldr	r1, [sp, #24]
 8013dde:	ea41 0a0a 	orr.w	sl, r1, sl
 8013de2:	9907      	ldr	r1, [sp, #28]
 8013de4:	ea5a 0101 	orrs.w	r1, sl, r1
 8013de8:	d120      	bne.n	8013e2c <_dtoa_r+0x9d4>
 8013dea:	2a00      	cmp	r2, #0
 8013dec:	ddec      	ble.n	8013dc8 <_dtoa_r+0x970>
 8013dee:	4629      	mov	r1, r5
 8013df0:	2201      	movs	r2, #1
 8013df2:	4630      	mov	r0, r6
 8013df4:	9304      	str	r3, [sp, #16]
 8013df6:	f000 fce9 	bl	80147cc <__lshift>
 8013dfa:	4621      	mov	r1, r4
 8013dfc:	4605      	mov	r5, r0
 8013dfe:	f000 fd55 	bl	80148ac <__mcmp>
 8013e02:	2800      	cmp	r0, #0
 8013e04:	9b04      	ldr	r3, [sp, #16]
 8013e06:	dc02      	bgt.n	8013e0e <_dtoa_r+0x9b6>
 8013e08:	d1de      	bne.n	8013dc8 <_dtoa_r+0x970>
 8013e0a:	07da      	lsls	r2, r3, #31
 8013e0c:	d5dc      	bpl.n	8013dc8 <_dtoa_r+0x970>
 8013e0e:	2b39      	cmp	r3, #57	; 0x39
 8013e10:	d1d8      	bne.n	8013dc4 <_dtoa_r+0x96c>
 8013e12:	9a02      	ldr	r2, [sp, #8]
 8013e14:	2339      	movs	r3, #57	; 0x39
 8013e16:	7013      	strb	r3, [r2, #0]
 8013e18:	4643      	mov	r3, r8
 8013e1a:	4698      	mov	r8, r3
 8013e1c:	3b01      	subs	r3, #1
 8013e1e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8013e22:	2a39      	cmp	r2, #57	; 0x39
 8013e24:	d051      	beq.n	8013eca <_dtoa_r+0xa72>
 8013e26:	3201      	adds	r2, #1
 8013e28:	701a      	strb	r2, [r3, #0]
 8013e2a:	e745      	b.n	8013cb8 <_dtoa_r+0x860>
 8013e2c:	2a00      	cmp	r2, #0
 8013e2e:	dd03      	ble.n	8013e38 <_dtoa_r+0x9e0>
 8013e30:	2b39      	cmp	r3, #57	; 0x39
 8013e32:	d0ee      	beq.n	8013e12 <_dtoa_r+0x9ba>
 8013e34:	3301      	adds	r3, #1
 8013e36:	e7c7      	b.n	8013dc8 <_dtoa_r+0x970>
 8013e38:	9a04      	ldr	r2, [sp, #16]
 8013e3a:	9908      	ldr	r1, [sp, #32]
 8013e3c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013e40:	428a      	cmp	r2, r1
 8013e42:	d02b      	beq.n	8013e9c <_dtoa_r+0xa44>
 8013e44:	4629      	mov	r1, r5
 8013e46:	2300      	movs	r3, #0
 8013e48:	220a      	movs	r2, #10
 8013e4a:	4630      	mov	r0, r6
 8013e4c:	f000 fb0e 	bl	801446c <__multadd>
 8013e50:	45b9      	cmp	r9, r7
 8013e52:	4605      	mov	r5, r0
 8013e54:	f04f 0300 	mov.w	r3, #0
 8013e58:	f04f 020a 	mov.w	r2, #10
 8013e5c:	4649      	mov	r1, r9
 8013e5e:	4630      	mov	r0, r6
 8013e60:	d107      	bne.n	8013e72 <_dtoa_r+0xa1a>
 8013e62:	f000 fb03 	bl	801446c <__multadd>
 8013e66:	4681      	mov	r9, r0
 8013e68:	4607      	mov	r7, r0
 8013e6a:	9b04      	ldr	r3, [sp, #16]
 8013e6c:	3301      	adds	r3, #1
 8013e6e:	9304      	str	r3, [sp, #16]
 8013e70:	e774      	b.n	8013d5c <_dtoa_r+0x904>
 8013e72:	f000 fafb 	bl	801446c <__multadd>
 8013e76:	4639      	mov	r1, r7
 8013e78:	4681      	mov	r9, r0
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	220a      	movs	r2, #10
 8013e7e:	4630      	mov	r0, r6
 8013e80:	f000 faf4 	bl	801446c <__multadd>
 8013e84:	4607      	mov	r7, r0
 8013e86:	e7f0      	b.n	8013e6a <_dtoa_r+0xa12>
 8013e88:	f1ba 0f00 	cmp.w	sl, #0
 8013e8c:	9a01      	ldr	r2, [sp, #4]
 8013e8e:	bfcc      	ite	gt
 8013e90:	46d0      	movgt	r8, sl
 8013e92:	f04f 0801 	movle.w	r8, #1
 8013e96:	4490      	add	r8, r2
 8013e98:	f04f 0900 	mov.w	r9, #0
 8013e9c:	4629      	mov	r1, r5
 8013e9e:	2201      	movs	r2, #1
 8013ea0:	4630      	mov	r0, r6
 8013ea2:	9302      	str	r3, [sp, #8]
 8013ea4:	f000 fc92 	bl	80147cc <__lshift>
 8013ea8:	4621      	mov	r1, r4
 8013eaa:	4605      	mov	r5, r0
 8013eac:	f000 fcfe 	bl	80148ac <__mcmp>
 8013eb0:	2800      	cmp	r0, #0
 8013eb2:	dcb1      	bgt.n	8013e18 <_dtoa_r+0x9c0>
 8013eb4:	d102      	bne.n	8013ebc <_dtoa_r+0xa64>
 8013eb6:	9b02      	ldr	r3, [sp, #8]
 8013eb8:	07db      	lsls	r3, r3, #31
 8013eba:	d4ad      	bmi.n	8013e18 <_dtoa_r+0x9c0>
 8013ebc:	4643      	mov	r3, r8
 8013ebe:	4698      	mov	r8, r3
 8013ec0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013ec4:	2a30      	cmp	r2, #48	; 0x30
 8013ec6:	d0fa      	beq.n	8013ebe <_dtoa_r+0xa66>
 8013ec8:	e6f6      	b.n	8013cb8 <_dtoa_r+0x860>
 8013eca:	9a01      	ldr	r2, [sp, #4]
 8013ecc:	429a      	cmp	r2, r3
 8013ece:	d1a4      	bne.n	8013e1a <_dtoa_r+0x9c2>
 8013ed0:	f10b 0b01 	add.w	fp, fp, #1
 8013ed4:	2331      	movs	r3, #49	; 0x31
 8013ed6:	e778      	b.n	8013dca <_dtoa_r+0x972>
 8013ed8:	4b14      	ldr	r3, [pc, #80]	; (8013f2c <_dtoa_r+0xad4>)
 8013eda:	f7ff bb27 	b.w	801352c <_dtoa_r+0xd4>
 8013ede:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	f47f ab03 	bne.w	80134ec <_dtoa_r+0x94>
 8013ee6:	4b12      	ldr	r3, [pc, #72]	; (8013f30 <_dtoa_r+0xad8>)
 8013ee8:	f7ff bb20 	b.w	801352c <_dtoa_r+0xd4>
 8013eec:	f1ba 0f00 	cmp.w	sl, #0
 8013ef0:	dc03      	bgt.n	8013efa <_dtoa_r+0xaa2>
 8013ef2:	9b06      	ldr	r3, [sp, #24]
 8013ef4:	2b02      	cmp	r3, #2
 8013ef6:	f73f aec7 	bgt.w	8013c88 <_dtoa_r+0x830>
 8013efa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013efe:	4621      	mov	r1, r4
 8013f00:	4628      	mov	r0, r5
 8013f02:	f7ff fa1d 	bl	8013340 <quorem>
 8013f06:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013f0a:	f808 3b01 	strb.w	r3, [r8], #1
 8013f0e:	9a01      	ldr	r2, [sp, #4]
 8013f10:	eba8 0202 	sub.w	r2, r8, r2
 8013f14:	4592      	cmp	sl, r2
 8013f16:	ddb7      	ble.n	8013e88 <_dtoa_r+0xa30>
 8013f18:	4629      	mov	r1, r5
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	220a      	movs	r2, #10
 8013f1e:	4630      	mov	r0, r6
 8013f20:	f000 faa4 	bl	801446c <__multadd>
 8013f24:	4605      	mov	r5, r0
 8013f26:	e7ea      	b.n	8013efe <_dtoa_r+0xaa6>
 8013f28:	08016e47 	.word	0x08016e47
 8013f2c:	08016da4 	.word	0x08016da4
 8013f30:	08016dc8 	.word	0x08016dc8

08013f34 <__sflush_r>:
 8013f34:	898a      	ldrh	r2, [r1, #12]
 8013f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f3a:	4605      	mov	r5, r0
 8013f3c:	0710      	lsls	r0, r2, #28
 8013f3e:	460c      	mov	r4, r1
 8013f40:	d458      	bmi.n	8013ff4 <__sflush_r+0xc0>
 8013f42:	684b      	ldr	r3, [r1, #4]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	dc05      	bgt.n	8013f54 <__sflush_r+0x20>
 8013f48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	dc02      	bgt.n	8013f54 <__sflush_r+0x20>
 8013f4e:	2000      	movs	r0, #0
 8013f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f56:	2e00      	cmp	r6, #0
 8013f58:	d0f9      	beq.n	8013f4e <__sflush_r+0x1a>
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013f60:	682f      	ldr	r7, [r5, #0]
 8013f62:	602b      	str	r3, [r5, #0]
 8013f64:	d032      	beq.n	8013fcc <__sflush_r+0x98>
 8013f66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013f68:	89a3      	ldrh	r3, [r4, #12]
 8013f6a:	075a      	lsls	r2, r3, #29
 8013f6c:	d505      	bpl.n	8013f7a <__sflush_r+0x46>
 8013f6e:	6863      	ldr	r3, [r4, #4]
 8013f70:	1ac0      	subs	r0, r0, r3
 8013f72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013f74:	b10b      	cbz	r3, 8013f7a <__sflush_r+0x46>
 8013f76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013f78:	1ac0      	subs	r0, r0, r3
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	4602      	mov	r2, r0
 8013f7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f80:	6a21      	ldr	r1, [r4, #32]
 8013f82:	4628      	mov	r0, r5
 8013f84:	47b0      	blx	r6
 8013f86:	1c43      	adds	r3, r0, #1
 8013f88:	89a3      	ldrh	r3, [r4, #12]
 8013f8a:	d106      	bne.n	8013f9a <__sflush_r+0x66>
 8013f8c:	6829      	ldr	r1, [r5, #0]
 8013f8e:	291d      	cmp	r1, #29
 8013f90:	d82c      	bhi.n	8013fec <__sflush_r+0xb8>
 8013f92:	4a2a      	ldr	r2, [pc, #168]	; (801403c <__sflush_r+0x108>)
 8013f94:	40ca      	lsrs	r2, r1
 8013f96:	07d6      	lsls	r6, r2, #31
 8013f98:	d528      	bpl.n	8013fec <__sflush_r+0xb8>
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	6062      	str	r2, [r4, #4]
 8013f9e:	04d9      	lsls	r1, r3, #19
 8013fa0:	6922      	ldr	r2, [r4, #16]
 8013fa2:	6022      	str	r2, [r4, #0]
 8013fa4:	d504      	bpl.n	8013fb0 <__sflush_r+0x7c>
 8013fa6:	1c42      	adds	r2, r0, #1
 8013fa8:	d101      	bne.n	8013fae <__sflush_r+0x7a>
 8013faa:	682b      	ldr	r3, [r5, #0]
 8013fac:	b903      	cbnz	r3, 8013fb0 <__sflush_r+0x7c>
 8013fae:	6560      	str	r0, [r4, #84]	; 0x54
 8013fb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013fb2:	602f      	str	r7, [r5, #0]
 8013fb4:	2900      	cmp	r1, #0
 8013fb6:	d0ca      	beq.n	8013f4e <__sflush_r+0x1a>
 8013fb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013fbc:	4299      	cmp	r1, r3
 8013fbe:	d002      	beq.n	8013fc6 <__sflush_r+0x92>
 8013fc0:	4628      	mov	r0, r5
 8013fc2:	f000 fd8b 	bl	8014adc <_free_r>
 8013fc6:	2000      	movs	r0, #0
 8013fc8:	6360      	str	r0, [r4, #52]	; 0x34
 8013fca:	e7c1      	b.n	8013f50 <__sflush_r+0x1c>
 8013fcc:	6a21      	ldr	r1, [r4, #32]
 8013fce:	2301      	movs	r3, #1
 8013fd0:	4628      	mov	r0, r5
 8013fd2:	47b0      	blx	r6
 8013fd4:	1c41      	adds	r1, r0, #1
 8013fd6:	d1c7      	bne.n	8013f68 <__sflush_r+0x34>
 8013fd8:	682b      	ldr	r3, [r5, #0]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d0c4      	beq.n	8013f68 <__sflush_r+0x34>
 8013fde:	2b1d      	cmp	r3, #29
 8013fe0:	d001      	beq.n	8013fe6 <__sflush_r+0xb2>
 8013fe2:	2b16      	cmp	r3, #22
 8013fe4:	d101      	bne.n	8013fea <__sflush_r+0xb6>
 8013fe6:	602f      	str	r7, [r5, #0]
 8013fe8:	e7b1      	b.n	8013f4e <__sflush_r+0x1a>
 8013fea:	89a3      	ldrh	r3, [r4, #12]
 8013fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ff0:	81a3      	strh	r3, [r4, #12]
 8013ff2:	e7ad      	b.n	8013f50 <__sflush_r+0x1c>
 8013ff4:	690f      	ldr	r7, [r1, #16]
 8013ff6:	2f00      	cmp	r7, #0
 8013ff8:	d0a9      	beq.n	8013f4e <__sflush_r+0x1a>
 8013ffa:	0793      	lsls	r3, r2, #30
 8013ffc:	680e      	ldr	r6, [r1, #0]
 8013ffe:	bf08      	it	eq
 8014000:	694b      	ldreq	r3, [r1, #20]
 8014002:	600f      	str	r7, [r1, #0]
 8014004:	bf18      	it	ne
 8014006:	2300      	movne	r3, #0
 8014008:	eba6 0807 	sub.w	r8, r6, r7
 801400c:	608b      	str	r3, [r1, #8]
 801400e:	f1b8 0f00 	cmp.w	r8, #0
 8014012:	dd9c      	ble.n	8013f4e <__sflush_r+0x1a>
 8014014:	6a21      	ldr	r1, [r4, #32]
 8014016:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014018:	4643      	mov	r3, r8
 801401a:	463a      	mov	r2, r7
 801401c:	4628      	mov	r0, r5
 801401e:	47b0      	blx	r6
 8014020:	2800      	cmp	r0, #0
 8014022:	dc06      	bgt.n	8014032 <__sflush_r+0xfe>
 8014024:	89a3      	ldrh	r3, [r4, #12]
 8014026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801402a:	81a3      	strh	r3, [r4, #12]
 801402c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014030:	e78e      	b.n	8013f50 <__sflush_r+0x1c>
 8014032:	4407      	add	r7, r0
 8014034:	eba8 0800 	sub.w	r8, r8, r0
 8014038:	e7e9      	b.n	801400e <__sflush_r+0xda>
 801403a:	bf00      	nop
 801403c:	20400001 	.word	0x20400001

08014040 <_fflush_r>:
 8014040:	b538      	push	{r3, r4, r5, lr}
 8014042:	690b      	ldr	r3, [r1, #16]
 8014044:	4605      	mov	r5, r0
 8014046:	460c      	mov	r4, r1
 8014048:	b913      	cbnz	r3, 8014050 <_fflush_r+0x10>
 801404a:	2500      	movs	r5, #0
 801404c:	4628      	mov	r0, r5
 801404e:	bd38      	pop	{r3, r4, r5, pc}
 8014050:	b118      	cbz	r0, 801405a <_fflush_r+0x1a>
 8014052:	6983      	ldr	r3, [r0, #24]
 8014054:	b90b      	cbnz	r3, 801405a <_fflush_r+0x1a>
 8014056:	f000 f887 	bl	8014168 <__sinit>
 801405a:	4b14      	ldr	r3, [pc, #80]	; (80140ac <_fflush_r+0x6c>)
 801405c:	429c      	cmp	r4, r3
 801405e:	d11b      	bne.n	8014098 <_fflush_r+0x58>
 8014060:	686c      	ldr	r4, [r5, #4]
 8014062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d0ef      	beq.n	801404a <_fflush_r+0xa>
 801406a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801406c:	07d0      	lsls	r0, r2, #31
 801406e:	d404      	bmi.n	801407a <_fflush_r+0x3a>
 8014070:	0599      	lsls	r1, r3, #22
 8014072:	d402      	bmi.n	801407a <_fflush_r+0x3a>
 8014074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014076:	f000 f91a 	bl	80142ae <__retarget_lock_acquire_recursive>
 801407a:	4628      	mov	r0, r5
 801407c:	4621      	mov	r1, r4
 801407e:	f7ff ff59 	bl	8013f34 <__sflush_r>
 8014082:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014084:	07da      	lsls	r2, r3, #31
 8014086:	4605      	mov	r5, r0
 8014088:	d4e0      	bmi.n	801404c <_fflush_r+0xc>
 801408a:	89a3      	ldrh	r3, [r4, #12]
 801408c:	059b      	lsls	r3, r3, #22
 801408e:	d4dd      	bmi.n	801404c <_fflush_r+0xc>
 8014090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014092:	f000 f90d 	bl	80142b0 <__retarget_lock_release_recursive>
 8014096:	e7d9      	b.n	801404c <_fflush_r+0xc>
 8014098:	4b05      	ldr	r3, [pc, #20]	; (80140b0 <_fflush_r+0x70>)
 801409a:	429c      	cmp	r4, r3
 801409c:	d101      	bne.n	80140a2 <_fflush_r+0x62>
 801409e:	68ac      	ldr	r4, [r5, #8]
 80140a0:	e7df      	b.n	8014062 <_fflush_r+0x22>
 80140a2:	4b04      	ldr	r3, [pc, #16]	; (80140b4 <_fflush_r+0x74>)
 80140a4:	429c      	cmp	r4, r3
 80140a6:	bf08      	it	eq
 80140a8:	68ec      	ldreq	r4, [r5, #12]
 80140aa:	e7da      	b.n	8014062 <_fflush_r+0x22>
 80140ac:	08016e78 	.word	0x08016e78
 80140b0:	08016e98 	.word	0x08016e98
 80140b4:	08016e58 	.word	0x08016e58

080140b8 <std>:
 80140b8:	2300      	movs	r3, #0
 80140ba:	b510      	push	{r4, lr}
 80140bc:	4604      	mov	r4, r0
 80140be:	e9c0 3300 	strd	r3, r3, [r0]
 80140c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80140c6:	6083      	str	r3, [r0, #8]
 80140c8:	8181      	strh	r1, [r0, #12]
 80140ca:	6643      	str	r3, [r0, #100]	; 0x64
 80140cc:	81c2      	strh	r2, [r0, #14]
 80140ce:	6183      	str	r3, [r0, #24]
 80140d0:	4619      	mov	r1, r3
 80140d2:	2208      	movs	r2, #8
 80140d4:	305c      	adds	r0, #92	; 0x5c
 80140d6:	f7fe fbb3 	bl	8012840 <memset>
 80140da:	4b05      	ldr	r3, [pc, #20]	; (80140f0 <std+0x38>)
 80140dc:	6263      	str	r3, [r4, #36]	; 0x24
 80140de:	4b05      	ldr	r3, [pc, #20]	; (80140f4 <std+0x3c>)
 80140e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80140e2:	4b05      	ldr	r3, [pc, #20]	; (80140f8 <std+0x40>)
 80140e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80140e6:	4b05      	ldr	r3, [pc, #20]	; (80140fc <std+0x44>)
 80140e8:	6224      	str	r4, [r4, #32]
 80140ea:	6323      	str	r3, [r4, #48]	; 0x30
 80140ec:	bd10      	pop	{r4, pc}
 80140ee:	bf00      	nop
 80140f0:	08014cbd 	.word	0x08014cbd
 80140f4:	08014cdf 	.word	0x08014cdf
 80140f8:	08014d17 	.word	0x08014d17
 80140fc:	08014d3b 	.word	0x08014d3b

08014100 <_cleanup_r>:
 8014100:	4901      	ldr	r1, [pc, #4]	; (8014108 <_cleanup_r+0x8>)
 8014102:	f000 b8af 	b.w	8014264 <_fwalk_reent>
 8014106:	bf00      	nop
 8014108:	08014041 	.word	0x08014041

0801410c <__sfmoreglue>:
 801410c:	b570      	push	{r4, r5, r6, lr}
 801410e:	2268      	movs	r2, #104	; 0x68
 8014110:	1e4d      	subs	r5, r1, #1
 8014112:	4355      	muls	r5, r2
 8014114:	460e      	mov	r6, r1
 8014116:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801411a:	f000 fd4b 	bl	8014bb4 <_malloc_r>
 801411e:	4604      	mov	r4, r0
 8014120:	b140      	cbz	r0, 8014134 <__sfmoreglue+0x28>
 8014122:	2100      	movs	r1, #0
 8014124:	e9c0 1600 	strd	r1, r6, [r0]
 8014128:	300c      	adds	r0, #12
 801412a:	60a0      	str	r0, [r4, #8]
 801412c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014130:	f7fe fb86 	bl	8012840 <memset>
 8014134:	4620      	mov	r0, r4
 8014136:	bd70      	pop	{r4, r5, r6, pc}

08014138 <__sfp_lock_acquire>:
 8014138:	4801      	ldr	r0, [pc, #4]	; (8014140 <__sfp_lock_acquire+0x8>)
 801413a:	f000 b8b8 	b.w	80142ae <__retarget_lock_acquire_recursive>
 801413e:	bf00      	nop
 8014140:	24001751 	.word	0x24001751

08014144 <__sfp_lock_release>:
 8014144:	4801      	ldr	r0, [pc, #4]	; (801414c <__sfp_lock_release+0x8>)
 8014146:	f000 b8b3 	b.w	80142b0 <__retarget_lock_release_recursive>
 801414a:	bf00      	nop
 801414c:	24001751 	.word	0x24001751

08014150 <__sinit_lock_acquire>:
 8014150:	4801      	ldr	r0, [pc, #4]	; (8014158 <__sinit_lock_acquire+0x8>)
 8014152:	f000 b8ac 	b.w	80142ae <__retarget_lock_acquire_recursive>
 8014156:	bf00      	nop
 8014158:	24001752 	.word	0x24001752

0801415c <__sinit_lock_release>:
 801415c:	4801      	ldr	r0, [pc, #4]	; (8014164 <__sinit_lock_release+0x8>)
 801415e:	f000 b8a7 	b.w	80142b0 <__retarget_lock_release_recursive>
 8014162:	bf00      	nop
 8014164:	24001752 	.word	0x24001752

08014168 <__sinit>:
 8014168:	b510      	push	{r4, lr}
 801416a:	4604      	mov	r4, r0
 801416c:	f7ff fff0 	bl	8014150 <__sinit_lock_acquire>
 8014170:	69a3      	ldr	r3, [r4, #24]
 8014172:	b11b      	cbz	r3, 801417c <__sinit+0x14>
 8014174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014178:	f7ff bff0 	b.w	801415c <__sinit_lock_release>
 801417c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014180:	6523      	str	r3, [r4, #80]	; 0x50
 8014182:	4b13      	ldr	r3, [pc, #76]	; (80141d0 <__sinit+0x68>)
 8014184:	4a13      	ldr	r2, [pc, #76]	; (80141d4 <__sinit+0x6c>)
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	62a2      	str	r2, [r4, #40]	; 0x28
 801418a:	42a3      	cmp	r3, r4
 801418c:	bf04      	itt	eq
 801418e:	2301      	moveq	r3, #1
 8014190:	61a3      	streq	r3, [r4, #24]
 8014192:	4620      	mov	r0, r4
 8014194:	f000 f820 	bl	80141d8 <__sfp>
 8014198:	6060      	str	r0, [r4, #4]
 801419a:	4620      	mov	r0, r4
 801419c:	f000 f81c 	bl	80141d8 <__sfp>
 80141a0:	60a0      	str	r0, [r4, #8]
 80141a2:	4620      	mov	r0, r4
 80141a4:	f000 f818 	bl	80141d8 <__sfp>
 80141a8:	2200      	movs	r2, #0
 80141aa:	60e0      	str	r0, [r4, #12]
 80141ac:	2104      	movs	r1, #4
 80141ae:	6860      	ldr	r0, [r4, #4]
 80141b0:	f7ff ff82 	bl	80140b8 <std>
 80141b4:	68a0      	ldr	r0, [r4, #8]
 80141b6:	2201      	movs	r2, #1
 80141b8:	2109      	movs	r1, #9
 80141ba:	f7ff ff7d 	bl	80140b8 <std>
 80141be:	68e0      	ldr	r0, [r4, #12]
 80141c0:	2202      	movs	r2, #2
 80141c2:	2112      	movs	r1, #18
 80141c4:	f7ff ff78 	bl	80140b8 <std>
 80141c8:	2301      	movs	r3, #1
 80141ca:	61a3      	str	r3, [r4, #24]
 80141cc:	e7d2      	b.n	8014174 <__sinit+0xc>
 80141ce:	bf00      	nop
 80141d0:	08016d90 	.word	0x08016d90
 80141d4:	08014101 	.word	0x08014101

080141d8 <__sfp>:
 80141d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141da:	4607      	mov	r7, r0
 80141dc:	f7ff ffac 	bl	8014138 <__sfp_lock_acquire>
 80141e0:	4b1e      	ldr	r3, [pc, #120]	; (801425c <__sfp+0x84>)
 80141e2:	681e      	ldr	r6, [r3, #0]
 80141e4:	69b3      	ldr	r3, [r6, #24]
 80141e6:	b913      	cbnz	r3, 80141ee <__sfp+0x16>
 80141e8:	4630      	mov	r0, r6
 80141ea:	f7ff ffbd 	bl	8014168 <__sinit>
 80141ee:	3648      	adds	r6, #72	; 0x48
 80141f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80141f4:	3b01      	subs	r3, #1
 80141f6:	d503      	bpl.n	8014200 <__sfp+0x28>
 80141f8:	6833      	ldr	r3, [r6, #0]
 80141fa:	b30b      	cbz	r3, 8014240 <__sfp+0x68>
 80141fc:	6836      	ldr	r6, [r6, #0]
 80141fe:	e7f7      	b.n	80141f0 <__sfp+0x18>
 8014200:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014204:	b9d5      	cbnz	r5, 801423c <__sfp+0x64>
 8014206:	4b16      	ldr	r3, [pc, #88]	; (8014260 <__sfp+0x88>)
 8014208:	60e3      	str	r3, [r4, #12]
 801420a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801420e:	6665      	str	r5, [r4, #100]	; 0x64
 8014210:	f000 f84c 	bl	80142ac <__retarget_lock_init_recursive>
 8014214:	f7ff ff96 	bl	8014144 <__sfp_lock_release>
 8014218:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801421c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014220:	6025      	str	r5, [r4, #0]
 8014222:	61a5      	str	r5, [r4, #24]
 8014224:	2208      	movs	r2, #8
 8014226:	4629      	mov	r1, r5
 8014228:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801422c:	f7fe fb08 	bl	8012840 <memset>
 8014230:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014234:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014238:	4620      	mov	r0, r4
 801423a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801423c:	3468      	adds	r4, #104	; 0x68
 801423e:	e7d9      	b.n	80141f4 <__sfp+0x1c>
 8014240:	2104      	movs	r1, #4
 8014242:	4638      	mov	r0, r7
 8014244:	f7ff ff62 	bl	801410c <__sfmoreglue>
 8014248:	4604      	mov	r4, r0
 801424a:	6030      	str	r0, [r6, #0]
 801424c:	2800      	cmp	r0, #0
 801424e:	d1d5      	bne.n	80141fc <__sfp+0x24>
 8014250:	f7ff ff78 	bl	8014144 <__sfp_lock_release>
 8014254:	230c      	movs	r3, #12
 8014256:	603b      	str	r3, [r7, #0]
 8014258:	e7ee      	b.n	8014238 <__sfp+0x60>
 801425a:	bf00      	nop
 801425c:	08016d90 	.word	0x08016d90
 8014260:	ffff0001 	.word	0xffff0001

08014264 <_fwalk_reent>:
 8014264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014268:	4606      	mov	r6, r0
 801426a:	4688      	mov	r8, r1
 801426c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014270:	2700      	movs	r7, #0
 8014272:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014276:	f1b9 0901 	subs.w	r9, r9, #1
 801427a:	d505      	bpl.n	8014288 <_fwalk_reent+0x24>
 801427c:	6824      	ldr	r4, [r4, #0]
 801427e:	2c00      	cmp	r4, #0
 8014280:	d1f7      	bne.n	8014272 <_fwalk_reent+0xe>
 8014282:	4638      	mov	r0, r7
 8014284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014288:	89ab      	ldrh	r3, [r5, #12]
 801428a:	2b01      	cmp	r3, #1
 801428c:	d907      	bls.n	801429e <_fwalk_reent+0x3a>
 801428e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014292:	3301      	adds	r3, #1
 8014294:	d003      	beq.n	801429e <_fwalk_reent+0x3a>
 8014296:	4629      	mov	r1, r5
 8014298:	4630      	mov	r0, r6
 801429a:	47c0      	blx	r8
 801429c:	4307      	orrs	r7, r0
 801429e:	3568      	adds	r5, #104	; 0x68
 80142a0:	e7e9      	b.n	8014276 <_fwalk_reent+0x12>
	...

080142a4 <_localeconv_r>:
 80142a4:	4800      	ldr	r0, [pc, #0]	; (80142a8 <_localeconv_r+0x4>)
 80142a6:	4770      	bx	lr
 80142a8:	24000394 	.word	0x24000394

080142ac <__retarget_lock_init_recursive>:
 80142ac:	4770      	bx	lr

080142ae <__retarget_lock_acquire_recursive>:
 80142ae:	4770      	bx	lr

080142b0 <__retarget_lock_release_recursive>:
 80142b0:	4770      	bx	lr

080142b2 <__swhatbuf_r>:
 80142b2:	b570      	push	{r4, r5, r6, lr}
 80142b4:	460e      	mov	r6, r1
 80142b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142ba:	2900      	cmp	r1, #0
 80142bc:	b096      	sub	sp, #88	; 0x58
 80142be:	4614      	mov	r4, r2
 80142c0:	461d      	mov	r5, r3
 80142c2:	da08      	bge.n	80142d6 <__swhatbuf_r+0x24>
 80142c4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80142c8:	2200      	movs	r2, #0
 80142ca:	602a      	str	r2, [r5, #0]
 80142cc:	061a      	lsls	r2, r3, #24
 80142ce:	d410      	bmi.n	80142f2 <__swhatbuf_r+0x40>
 80142d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80142d4:	e00e      	b.n	80142f4 <__swhatbuf_r+0x42>
 80142d6:	466a      	mov	r2, sp
 80142d8:	f000 fd86 	bl	8014de8 <_fstat_r>
 80142dc:	2800      	cmp	r0, #0
 80142de:	dbf1      	blt.n	80142c4 <__swhatbuf_r+0x12>
 80142e0:	9a01      	ldr	r2, [sp, #4]
 80142e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80142e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80142ea:	425a      	negs	r2, r3
 80142ec:	415a      	adcs	r2, r3
 80142ee:	602a      	str	r2, [r5, #0]
 80142f0:	e7ee      	b.n	80142d0 <__swhatbuf_r+0x1e>
 80142f2:	2340      	movs	r3, #64	; 0x40
 80142f4:	2000      	movs	r0, #0
 80142f6:	6023      	str	r3, [r4, #0]
 80142f8:	b016      	add	sp, #88	; 0x58
 80142fa:	bd70      	pop	{r4, r5, r6, pc}

080142fc <__smakebuf_r>:
 80142fc:	898b      	ldrh	r3, [r1, #12]
 80142fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014300:	079d      	lsls	r5, r3, #30
 8014302:	4606      	mov	r6, r0
 8014304:	460c      	mov	r4, r1
 8014306:	d507      	bpl.n	8014318 <__smakebuf_r+0x1c>
 8014308:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801430c:	6023      	str	r3, [r4, #0]
 801430e:	6123      	str	r3, [r4, #16]
 8014310:	2301      	movs	r3, #1
 8014312:	6163      	str	r3, [r4, #20]
 8014314:	b002      	add	sp, #8
 8014316:	bd70      	pop	{r4, r5, r6, pc}
 8014318:	ab01      	add	r3, sp, #4
 801431a:	466a      	mov	r2, sp
 801431c:	f7ff ffc9 	bl	80142b2 <__swhatbuf_r>
 8014320:	9900      	ldr	r1, [sp, #0]
 8014322:	4605      	mov	r5, r0
 8014324:	4630      	mov	r0, r6
 8014326:	f000 fc45 	bl	8014bb4 <_malloc_r>
 801432a:	b948      	cbnz	r0, 8014340 <__smakebuf_r+0x44>
 801432c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014330:	059a      	lsls	r2, r3, #22
 8014332:	d4ef      	bmi.n	8014314 <__smakebuf_r+0x18>
 8014334:	f023 0303 	bic.w	r3, r3, #3
 8014338:	f043 0302 	orr.w	r3, r3, #2
 801433c:	81a3      	strh	r3, [r4, #12]
 801433e:	e7e3      	b.n	8014308 <__smakebuf_r+0xc>
 8014340:	4b0d      	ldr	r3, [pc, #52]	; (8014378 <__smakebuf_r+0x7c>)
 8014342:	62b3      	str	r3, [r6, #40]	; 0x28
 8014344:	89a3      	ldrh	r3, [r4, #12]
 8014346:	6020      	str	r0, [r4, #0]
 8014348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801434c:	81a3      	strh	r3, [r4, #12]
 801434e:	9b00      	ldr	r3, [sp, #0]
 8014350:	6163      	str	r3, [r4, #20]
 8014352:	9b01      	ldr	r3, [sp, #4]
 8014354:	6120      	str	r0, [r4, #16]
 8014356:	b15b      	cbz	r3, 8014370 <__smakebuf_r+0x74>
 8014358:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801435c:	4630      	mov	r0, r6
 801435e:	f000 fd55 	bl	8014e0c <_isatty_r>
 8014362:	b128      	cbz	r0, 8014370 <__smakebuf_r+0x74>
 8014364:	89a3      	ldrh	r3, [r4, #12]
 8014366:	f023 0303 	bic.w	r3, r3, #3
 801436a:	f043 0301 	orr.w	r3, r3, #1
 801436e:	81a3      	strh	r3, [r4, #12]
 8014370:	89a0      	ldrh	r0, [r4, #12]
 8014372:	4305      	orrs	r5, r0
 8014374:	81a5      	strh	r5, [r4, #12]
 8014376:	e7cd      	b.n	8014314 <__smakebuf_r+0x18>
 8014378:	08014101 	.word	0x08014101

0801437c <malloc>:
 801437c:	4b02      	ldr	r3, [pc, #8]	; (8014388 <malloc+0xc>)
 801437e:	4601      	mov	r1, r0
 8014380:	6818      	ldr	r0, [r3, #0]
 8014382:	f000 bc17 	b.w	8014bb4 <_malloc_r>
 8014386:	bf00      	nop
 8014388:	24000240 	.word	0x24000240

0801438c <memcpy>:
 801438c:	440a      	add	r2, r1
 801438e:	4291      	cmp	r1, r2
 8014390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014394:	d100      	bne.n	8014398 <memcpy+0xc>
 8014396:	4770      	bx	lr
 8014398:	b510      	push	{r4, lr}
 801439a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801439e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80143a2:	4291      	cmp	r1, r2
 80143a4:	d1f9      	bne.n	801439a <memcpy+0xe>
 80143a6:	bd10      	pop	{r4, pc}

080143a8 <_Balloc>:
 80143a8:	b570      	push	{r4, r5, r6, lr}
 80143aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80143ac:	4604      	mov	r4, r0
 80143ae:	460d      	mov	r5, r1
 80143b0:	b976      	cbnz	r6, 80143d0 <_Balloc+0x28>
 80143b2:	2010      	movs	r0, #16
 80143b4:	f7ff ffe2 	bl	801437c <malloc>
 80143b8:	4602      	mov	r2, r0
 80143ba:	6260      	str	r0, [r4, #36]	; 0x24
 80143bc:	b920      	cbnz	r0, 80143c8 <_Balloc+0x20>
 80143be:	4b18      	ldr	r3, [pc, #96]	; (8014420 <_Balloc+0x78>)
 80143c0:	4818      	ldr	r0, [pc, #96]	; (8014424 <_Balloc+0x7c>)
 80143c2:	2166      	movs	r1, #102	; 0x66
 80143c4:	f000 fcd0 	bl	8014d68 <__assert_func>
 80143c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80143cc:	6006      	str	r6, [r0, #0]
 80143ce:	60c6      	str	r6, [r0, #12]
 80143d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80143d2:	68f3      	ldr	r3, [r6, #12]
 80143d4:	b183      	cbz	r3, 80143f8 <_Balloc+0x50>
 80143d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80143d8:	68db      	ldr	r3, [r3, #12]
 80143da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80143de:	b9b8      	cbnz	r0, 8014410 <_Balloc+0x68>
 80143e0:	2101      	movs	r1, #1
 80143e2:	fa01 f605 	lsl.w	r6, r1, r5
 80143e6:	1d72      	adds	r2, r6, #5
 80143e8:	0092      	lsls	r2, r2, #2
 80143ea:	4620      	mov	r0, r4
 80143ec:	f000 fb60 	bl	8014ab0 <_calloc_r>
 80143f0:	b160      	cbz	r0, 801440c <_Balloc+0x64>
 80143f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80143f6:	e00e      	b.n	8014416 <_Balloc+0x6e>
 80143f8:	2221      	movs	r2, #33	; 0x21
 80143fa:	2104      	movs	r1, #4
 80143fc:	4620      	mov	r0, r4
 80143fe:	f000 fb57 	bl	8014ab0 <_calloc_r>
 8014402:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014404:	60f0      	str	r0, [r6, #12]
 8014406:	68db      	ldr	r3, [r3, #12]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d1e4      	bne.n	80143d6 <_Balloc+0x2e>
 801440c:	2000      	movs	r0, #0
 801440e:	bd70      	pop	{r4, r5, r6, pc}
 8014410:	6802      	ldr	r2, [r0, #0]
 8014412:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014416:	2300      	movs	r3, #0
 8014418:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801441c:	e7f7      	b.n	801440e <_Balloc+0x66>
 801441e:	bf00      	nop
 8014420:	08016dd5 	.word	0x08016dd5
 8014424:	08016eb8 	.word	0x08016eb8

08014428 <_Bfree>:
 8014428:	b570      	push	{r4, r5, r6, lr}
 801442a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801442c:	4605      	mov	r5, r0
 801442e:	460c      	mov	r4, r1
 8014430:	b976      	cbnz	r6, 8014450 <_Bfree+0x28>
 8014432:	2010      	movs	r0, #16
 8014434:	f7ff ffa2 	bl	801437c <malloc>
 8014438:	4602      	mov	r2, r0
 801443a:	6268      	str	r0, [r5, #36]	; 0x24
 801443c:	b920      	cbnz	r0, 8014448 <_Bfree+0x20>
 801443e:	4b09      	ldr	r3, [pc, #36]	; (8014464 <_Bfree+0x3c>)
 8014440:	4809      	ldr	r0, [pc, #36]	; (8014468 <_Bfree+0x40>)
 8014442:	218a      	movs	r1, #138	; 0x8a
 8014444:	f000 fc90 	bl	8014d68 <__assert_func>
 8014448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801444c:	6006      	str	r6, [r0, #0]
 801444e:	60c6      	str	r6, [r0, #12]
 8014450:	b13c      	cbz	r4, 8014462 <_Bfree+0x3a>
 8014452:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014454:	6862      	ldr	r2, [r4, #4]
 8014456:	68db      	ldr	r3, [r3, #12]
 8014458:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801445c:	6021      	str	r1, [r4, #0]
 801445e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014462:	bd70      	pop	{r4, r5, r6, pc}
 8014464:	08016dd5 	.word	0x08016dd5
 8014468:	08016eb8 	.word	0x08016eb8

0801446c <__multadd>:
 801446c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014470:	690d      	ldr	r5, [r1, #16]
 8014472:	4607      	mov	r7, r0
 8014474:	460c      	mov	r4, r1
 8014476:	461e      	mov	r6, r3
 8014478:	f101 0c14 	add.w	ip, r1, #20
 801447c:	2000      	movs	r0, #0
 801447e:	f8dc 3000 	ldr.w	r3, [ip]
 8014482:	b299      	uxth	r1, r3
 8014484:	fb02 6101 	mla	r1, r2, r1, r6
 8014488:	0c1e      	lsrs	r6, r3, #16
 801448a:	0c0b      	lsrs	r3, r1, #16
 801448c:	fb02 3306 	mla	r3, r2, r6, r3
 8014490:	b289      	uxth	r1, r1
 8014492:	3001      	adds	r0, #1
 8014494:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014498:	4285      	cmp	r5, r0
 801449a:	f84c 1b04 	str.w	r1, [ip], #4
 801449e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80144a2:	dcec      	bgt.n	801447e <__multadd+0x12>
 80144a4:	b30e      	cbz	r6, 80144ea <__multadd+0x7e>
 80144a6:	68a3      	ldr	r3, [r4, #8]
 80144a8:	42ab      	cmp	r3, r5
 80144aa:	dc19      	bgt.n	80144e0 <__multadd+0x74>
 80144ac:	6861      	ldr	r1, [r4, #4]
 80144ae:	4638      	mov	r0, r7
 80144b0:	3101      	adds	r1, #1
 80144b2:	f7ff ff79 	bl	80143a8 <_Balloc>
 80144b6:	4680      	mov	r8, r0
 80144b8:	b928      	cbnz	r0, 80144c6 <__multadd+0x5a>
 80144ba:	4602      	mov	r2, r0
 80144bc:	4b0c      	ldr	r3, [pc, #48]	; (80144f0 <__multadd+0x84>)
 80144be:	480d      	ldr	r0, [pc, #52]	; (80144f4 <__multadd+0x88>)
 80144c0:	21b5      	movs	r1, #181	; 0xb5
 80144c2:	f000 fc51 	bl	8014d68 <__assert_func>
 80144c6:	6922      	ldr	r2, [r4, #16]
 80144c8:	3202      	adds	r2, #2
 80144ca:	f104 010c 	add.w	r1, r4, #12
 80144ce:	0092      	lsls	r2, r2, #2
 80144d0:	300c      	adds	r0, #12
 80144d2:	f7ff ff5b 	bl	801438c <memcpy>
 80144d6:	4621      	mov	r1, r4
 80144d8:	4638      	mov	r0, r7
 80144da:	f7ff ffa5 	bl	8014428 <_Bfree>
 80144de:	4644      	mov	r4, r8
 80144e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80144e4:	3501      	adds	r5, #1
 80144e6:	615e      	str	r6, [r3, #20]
 80144e8:	6125      	str	r5, [r4, #16]
 80144ea:	4620      	mov	r0, r4
 80144ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144f0:	08016e47 	.word	0x08016e47
 80144f4:	08016eb8 	.word	0x08016eb8

080144f8 <__hi0bits>:
 80144f8:	0c03      	lsrs	r3, r0, #16
 80144fa:	041b      	lsls	r3, r3, #16
 80144fc:	b9d3      	cbnz	r3, 8014534 <__hi0bits+0x3c>
 80144fe:	0400      	lsls	r0, r0, #16
 8014500:	2310      	movs	r3, #16
 8014502:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014506:	bf04      	itt	eq
 8014508:	0200      	lsleq	r0, r0, #8
 801450a:	3308      	addeq	r3, #8
 801450c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014510:	bf04      	itt	eq
 8014512:	0100      	lsleq	r0, r0, #4
 8014514:	3304      	addeq	r3, #4
 8014516:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801451a:	bf04      	itt	eq
 801451c:	0080      	lsleq	r0, r0, #2
 801451e:	3302      	addeq	r3, #2
 8014520:	2800      	cmp	r0, #0
 8014522:	db05      	blt.n	8014530 <__hi0bits+0x38>
 8014524:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014528:	f103 0301 	add.w	r3, r3, #1
 801452c:	bf08      	it	eq
 801452e:	2320      	moveq	r3, #32
 8014530:	4618      	mov	r0, r3
 8014532:	4770      	bx	lr
 8014534:	2300      	movs	r3, #0
 8014536:	e7e4      	b.n	8014502 <__hi0bits+0xa>

08014538 <__lo0bits>:
 8014538:	6803      	ldr	r3, [r0, #0]
 801453a:	f013 0207 	ands.w	r2, r3, #7
 801453e:	4601      	mov	r1, r0
 8014540:	d00b      	beq.n	801455a <__lo0bits+0x22>
 8014542:	07da      	lsls	r2, r3, #31
 8014544:	d423      	bmi.n	801458e <__lo0bits+0x56>
 8014546:	0798      	lsls	r0, r3, #30
 8014548:	bf49      	itett	mi
 801454a:	085b      	lsrmi	r3, r3, #1
 801454c:	089b      	lsrpl	r3, r3, #2
 801454e:	2001      	movmi	r0, #1
 8014550:	600b      	strmi	r3, [r1, #0]
 8014552:	bf5c      	itt	pl
 8014554:	600b      	strpl	r3, [r1, #0]
 8014556:	2002      	movpl	r0, #2
 8014558:	4770      	bx	lr
 801455a:	b298      	uxth	r0, r3
 801455c:	b9a8      	cbnz	r0, 801458a <__lo0bits+0x52>
 801455e:	0c1b      	lsrs	r3, r3, #16
 8014560:	2010      	movs	r0, #16
 8014562:	b2da      	uxtb	r2, r3
 8014564:	b90a      	cbnz	r2, 801456a <__lo0bits+0x32>
 8014566:	3008      	adds	r0, #8
 8014568:	0a1b      	lsrs	r3, r3, #8
 801456a:	071a      	lsls	r2, r3, #28
 801456c:	bf04      	itt	eq
 801456e:	091b      	lsreq	r3, r3, #4
 8014570:	3004      	addeq	r0, #4
 8014572:	079a      	lsls	r2, r3, #30
 8014574:	bf04      	itt	eq
 8014576:	089b      	lsreq	r3, r3, #2
 8014578:	3002      	addeq	r0, #2
 801457a:	07da      	lsls	r2, r3, #31
 801457c:	d403      	bmi.n	8014586 <__lo0bits+0x4e>
 801457e:	085b      	lsrs	r3, r3, #1
 8014580:	f100 0001 	add.w	r0, r0, #1
 8014584:	d005      	beq.n	8014592 <__lo0bits+0x5a>
 8014586:	600b      	str	r3, [r1, #0]
 8014588:	4770      	bx	lr
 801458a:	4610      	mov	r0, r2
 801458c:	e7e9      	b.n	8014562 <__lo0bits+0x2a>
 801458e:	2000      	movs	r0, #0
 8014590:	4770      	bx	lr
 8014592:	2020      	movs	r0, #32
 8014594:	4770      	bx	lr
	...

08014598 <__i2b>:
 8014598:	b510      	push	{r4, lr}
 801459a:	460c      	mov	r4, r1
 801459c:	2101      	movs	r1, #1
 801459e:	f7ff ff03 	bl	80143a8 <_Balloc>
 80145a2:	4602      	mov	r2, r0
 80145a4:	b928      	cbnz	r0, 80145b2 <__i2b+0x1a>
 80145a6:	4b05      	ldr	r3, [pc, #20]	; (80145bc <__i2b+0x24>)
 80145a8:	4805      	ldr	r0, [pc, #20]	; (80145c0 <__i2b+0x28>)
 80145aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80145ae:	f000 fbdb 	bl	8014d68 <__assert_func>
 80145b2:	2301      	movs	r3, #1
 80145b4:	6144      	str	r4, [r0, #20]
 80145b6:	6103      	str	r3, [r0, #16]
 80145b8:	bd10      	pop	{r4, pc}
 80145ba:	bf00      	nop
 80145bc:	08016e47 	.word	0x08016e47
 80145c0:	08016eb8 	.word	0x08016eb8

080145c4 <__multiply>:
 80145c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145c8:	4691      	mov	r9, r2
 80145ca:	690a      	ldr	r2, [r1, #16]
 80145cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80145d0:	429a      	cmp	r2, r3
 80145d2:	bfb8      	it	lt
 80145d4:	460b      	movlt	r3, r1
 80145d6:	460c      	mov	r4, r1
 80145d8:	bfbc      	itt	lt
 80145da:	464c      	movlt	r4, r9
 80145dc:	4699      	movlt	r9, r3
 80145de:	6927      	ldr	r7, [r4, #16]
 80145e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80145e4:	68a3      	ldr	r3, [r4, #8]
 80145e6:	6861      	ldr	r1, [r4, #4]
 80145e8:	eb07 060a 	add.w	r6, r7, sl
 80145ec:	42b3      	cmp	r3, r6
 80145ee:	b085      	sub	sp, #20
 80145f0:	bfb8      	it	lt
 80145f2:	3101      	addlt	r1, #1
 80145f4:	f7ff fed8 	bl	80143a8 <_Balloc>
 80145f8:	b930      	cbnz	r0, 8014608 <__multiply+0x44>
 80145fa:	4602      	mov	r2, r0
 80145fc:	4b44      	ldr	r3, [pc, #272]	; (8014710 <__multiply+0x14c>)
 80145fe:	4845      	ldr	r0, [pc, #276]	; (8014714 <__multiply+0x150>)
 8014600:	f240 115d 	movw	r1, #349	; 0x15d
 8014604:	f000 fbb0 	bl	8014d68 <__assert_func>
 8014608:	f100 0514 	add.w	r5, r0, #20
 801460c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014610:	462b      	mov	r3, r5
 8014612:	2200      	movs	r2, #0
 8014614:	4543      	cmp	r3, r8
 8014616:	d321      	bcc.n	801465c <__multiply+0x98>
 8014618:	f104 0314 	add.w	r3, r4, #20
 801461c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014620:	f109 0314 	add.w	r3, r9, #20
 8014624:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014628:	9202      	str	r2, [sp, #8]
 801462a:	1b3a      	subs	r2, r7, r4
 801462c:	3a15      	subs	r2, #21
 801462e:	f022 0203 	bic.w	r2, r2, #3
 8014632:	3204      	adds	r2, #4
 8014634:	f104 0115 	add.w	r1, r4, #21
 8014638:	428f      	cmp	r7, r1
 801463a:	bf38      	it	cc
 801463c:	2204      	movcc	r2, #4
 801463e:	9201      	str	r2, [sp, #4]
 8014640:	9a02      	ldr	r2, [sp, #8]
 8014642:	9303      	str	r3, [sp, #12]
 8014644:	429a      	cmp	r2, r3
 8014646:	d80c      	bhi.n	8014662 <__multiply+0x9e>
 8014648:	2e00      	cmp	r6, #0
 801464a:	dd03      	ble.n	8014654 <__multiply+0x90>
 801464c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014650:	2b00      	cmp	r3, #0
 8014652:	d05a      	beq.n	801470a <__multiply+0x146>
 8014654:	6106      	str	r6, [r0, #16]
 8014656:	b005      	add	sp, #20
 8014658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801465c:	f843 2b04 	str.w	r2, [r3], #4
 8014660:	e7d8      	b.n	8014614 <__multiply+0x50>
 8014662:	f8b3 a000 	ldrh.w	sl, [r3]
 8014666:	f1ba 0f00 	cmp.w	sl, #0
 801466a:	d024      	beq.n	80146b6 <__multiply+0xf2>
 801466c:	f104 0e14 	add.w	lr, r4, #20
 8014670:	46a9      	mov	r9, r5
 8014672:	f04f 0c00 	mov.w	ip, #0
 8014676:	f85e 2b04 	ldr.w	r2, [lr], #4
 801467a:	f8d9 1000 	ldr.w	r1, [r9]
 801467e:	fa1f fb82 	uxth.w	fp, r2
 8014682:	b289      	uxth	r1, r1
 8014684:	fb0a 110b 	mla	r1, sl, fp, r1
 8014688:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801468c:	f8d9 2000 	ldr.w	r2, [r9]
 8014690:	4461      	add	r1, ip
 8014692:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014696:	fb0a c20b 	mla	r2, sl, fp, ip
 801469a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801469e:	b289      	uxth	r1, r1
 80146a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80146a4:	4577      	cmp	r7, lr
 80146a6:	f849 1b04 	str.w	r1, [r9], #4
 80146aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80146ae:	d8e2      	bhi.n	8014676 <__multiply+0xb2>
 80146b0:	9a01      	ldr	r2, [sp, #4]
 80146b2:	f845 c002 	str.w	ip, [r5, r2]
 80146b6:	9a03      	ldr	r2, [sp, #12]
 80146b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80146bc:	3304      	adds	r3, #4
 80146be:	f1b9 0f00 	cmp.w	r9, #0
 80146c2:	d020      	beq.n	8014706 <__multiply+0x142>
 80146c4:	6829      	ldr	r1, [r5, #0]
 80146c6:	f104 0c14 	add.w	ip, r4, #20
 80146ca:	46ae      	mov	lr, r5
 80146cc:	f04f 0a00 	mov.w	sl, #0
 80146d0:	f8bc b000 	ldrh.w	fp, [ip]
 80146d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80146d8:	fb09 220b 	mla	r2, r9, fp, r2
 80146dc:	4492      	add	sl, r2
 80146de:	b289      	uxth	r1, r1
 80146e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80146e4:	f84e 1b04 	str.w	r1, [lr], #4
 80146e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80146ec:	f8be 1000 	ldrh.w	r1, [lr]
 80146f0:	0c12      	lsrs	r2, r2, #16
 80146f2:	fb09 1102 	mla	r1, r9, r2, r1
 80146f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80146fa:	4567      	cmp	r7, ip
 80146fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014700:	d8e6      	bhi.n	80146d0 <__multiply+0x10c>
 8014702:	9a01      	ldr	r2, [sp, #4]
 8014704:	50a9      	str	r1, [r5, r2]
 8014706:	3504      	adds	r5, #4
 8014708:	e79a      	b.n	8014640 <__multiply+0x7c>
 801470a:	3e01      	subs	r6, #1
 801470c:	e79c      	b.n	8014648 <__multiply+0x84>
 801470e:	bf00      	nop
 8014710:	08016e47 	.word	0x08016e47
 8014714:	08016eb8 	.word	0x08016eb8

08014718 <__pow5mult>:
 8014718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801471c:	4615      	mov	r5, r2
 801471e:	f012 0203 	ands.w	r2, r2, #3
 8014722:	4606      	mov	r6, r0
 8014724:	460f      	mov	r7, r1
 8014726:	d007      	beq.n	8014738 <__pow5mult+0x20>
 8014728:	4c25      	ldr	r4, [pc, #148]	; (80147c0 <__pow5mult+0xa8>)
 801472a:	3a01      	subs	r2, #1
 801472c:	2300      	movs	r3, #0
 801472e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014732:	f7ff fe9b 	bl	801446c <__multadd>
 8014736:	4607      	mov	r7, r0
 8014738:	10ad      	asrs	r5, r5, #2
 801473a:	d03d      	beq.n	80147b8 <__pow5mult+0xa0>
 801473c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801473e:	b97c      	cbnz	r4, 8014760 <__pow5mult+0x48>
 8014740:	2010      	movs	r0, #16
 8014742:	f7ff fe1b 	bl	801437c <malloc>
 8014746:	4602      	mov	r2, r0
 8014748:	6270      	str	r0, [r6, #36]	; 0x24
 801474a:	b928      	cbnz	r0, 8014758 <__pow5mult+0x40>
 801474c:	4b1d      	ldr	r3, [pc, #116]	; (80147c4 <__pow5mult+0xac>)
 801474e:	481e      	ldr	r0, [pc, #120]	; (80147c8 <__pow5mult+0xb0>)
 8014750:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014754:	f000 fb08 	bl	8014d68 <__assert_func>
 8014758:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801475c:	6004      	str	r4, [r0, #0]
 801475e:	60c4      	str	r4, [r0, #12]
 8014760:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014764:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014768:	b94c      	cbnz	r4, 801477e <__pow5mult+0x66>
 801476a:	f240 2171 	movw	r1, #625	; 0x271
 801476e:	4630      	mov	r0, r6
 8014770:	f7ff ff12 	bl	8014598 <__i2b>
 8014774:	2300      	movs	r3, #0
 8014776:	f8c8 0008 	str.w	r0, [r8, #8]
 801477a:	4604      	mov	r4, r0
 801477c:	6003      	str	r3, [r0, #0]
 801477e:	f04f 0900 	mov.w	r9, #0
 8014782:	07eb      	lsls	r3, r5, #31
 8014784:	d50a      	bpl.n	801479c <__pow5mult+0x84>
 8014786:	4639      	mov	r1, r7
 8014788:	4622      	mov	r2, r4
 801478a:	4630      	mov	r0, r6
 801478c:	f7ff ff1a 	bl	80145c4 <__multiply>
 8014790:	4639      	mov	r1, r7
 8014792:	4680      	mov	r8, r0
 8014794:	4630      	mov	r0, r6
 8014796:	f7ff fe47 	bl	8014428 <_Bfree>
 801479a:	4647      	mov	r7, r8
 801479c:	106d      	asrs	r5, r5, #1
 801479e:	d00b      	beq.n	80147b8 <__pow5mult+0xa0>
 80147a0:	6820      	ldr	r0, [r4, #0]
 80147a2:	b938      	cbnz	r0, 80147b4 <__pow5mult+0x9c>
 80147a4:	4622      	mov	r2, r4
 80147a6:	4621      	mov	r1, r4
 80147a8:	4630      	mov	r0, r6
 80147aa:	f7ff ff0b 	bl	80145c4 <__multiply>
 80147ae:	6020      	str	r0, [r4, #0]
 80147b0:	f8c0 9000 	str.w	r9, [r0]
 80147b4:	4604      	mov	r4, r0
 80147b6:	e7e4      	b.n	8014782 <__pow5mult+0x6a>
 80147b8:	4638      	mov	r0, r7
 80147ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147be:	bf00      	nop
 80147c0:	08017008 	.word	0x08017008
 80147c4:	08016dd5 	.word	0x08016dd5
 80147c8:	08016eb8 	.word	0x08016eb8

080147cc <__lshift>:
 80147cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147d0:	460c      	mov	r4, r1
 80147d2:	6849      	ldr	r1, [r1, #4]
 80147d4:	6923      	ldr	r3, [r4, #16]
 80147d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80147da:	68a3      	ldr	r3, [r4, #8]
 80147dc:	4607      	mov	r7, r0
 80147de:	4691      	mov	r9, r2
 80147e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80147e4:	f108 0601 	add.w	r6, r8, #1
 80147e8:	42b3      	cmp	r3, r6
 80147ea:	db0b      	blt.n	8014804 <__lshift+0x38>
 80147ec:	4638      	mov	r0, r7
 80147ee:	f7ff fddb 	bl	80143a8 <_Balloc>
 80147f2:	4605      	mov	r5, r0
 80147f4:	b948      	cbnz	r0, 801480a <__lshift+0x3e>
 80147f6:	4602      	mov	r2, r0
 80147f8:	4b2a      	ldr	r3, [pc, #168]	; (80148a4 <__lshift+0xd8>)
 80147fa:	482b      	ldr	r0, [pc, #172]	; (80148a8 <__lshift+0xdc>)
 80147fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014800:	f000 fab2 	bl	8014d68 <__assert_func>
 8014804:	3101      	adds	r1, #1
 8014806:	005b      	lsls	r3, r3, #1
 8014808:	e7ee      	b.n	80147e8 <__lshift+0x1c>
 801480a:	2300      	movs	r3, #0
 801480c:	f100 0114 	add.w	r1, r0, #20
 8014810:	f100 0210 	add.w	r2, r0, #16
 8014814:	4618      	mov	r0, r3
 8014816:	4553      	cmp	r3, sl
 8014818:	db37      	blt.n	801488a <__lshift+0xbe>
 801481a:	6920      	ldr	r0, [r4, #16]
 801481c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014820:	f104 0314 	add.w	r3, r4, #20
 8014824:	f019 091f 	ands.w	r9, r9, #31
 8014828:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801482c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014830:	d02f      	beq.n	8014892 <__lshift+0xc6>
 8014832:	f1c9 0e20 	rsb	lr, r9, #32
 8014836:	468a      	mov	sl, r1
 8014838:	f04f 0c00 	mov.w	ip, #0
 801483c:	681a      	ldr	r2, [r3, #0]
 801483e:	fa02 f209 	lsl.w	r2, r2, r9
 8014842:	ea42 020c 	orr.w	r2, r2, ip
 8014846:	f84a 2b04 	str.w	r2, [sl], #4
 801484a:	f853 2b04 	ldr.w	r2, [r3], #4
 801484e:	4298      	cmp	r0, r3
 8014850:	fa22 fc0e 	lsr.w	ip, r2, lr
 8014854:	d8f2      	bhi.n	801483c <__lshift+0x70>
 8014856:	1b03      	subs	r3, r0, r4
 8014858:	3b15      	subs	r3, #21
 801485a:	f023 0303 	bic.w	r3, r3, #3
 801485e:	3304      	adds	r3, #4
 8014860:	f104 0215 	add.w	r2, r4, #21
 8014864:	4290      	cmp	r0, r2
 8014866:	bf38      	it	cc
 8014868:	2304      	movcc	r3, #4
 801486a:	f841 c003 	str.w	ip, [r1, r3]
 801486e:	f1bc 0f00 	cmp.w	ip, #0
 8014872:	d001      	beq.n	8014878 <__lshift+0xac>
 8014874:	f108 0602 	add.w	r6, r8, #2
 8014878:	3e01      	subs	r6, #1
 801487a:	4638      	mov	r0, r7
 801487c:	612e      	str	r6, [r5, #16]
 801487e:	4621      	mov	r1, r4
 8014880:	f7ff fdd2 	bl	8014428 <_Bfree>
 8014884:	4628      	mov	r0, r5
 8014886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801488a:	f842 0f04 	str.w	r0, [r2, #4]!
 801488e:	3301      	adds	r3, #1
 8014890:	e7c1      	b.n	8014816 <__lshift+0x4a>
 8014892:	3904      	subs	r1, #4
 8014894:	f853 2b04 	ldr.w	r2, [r3], #4
 8014898:	f841 2f04 	str.w	r2, [r1, #4]!
 801489c:	4298      	cmp	r0, r3
 801489e:	d8f9      	bhi.n	8014894 <__lshift+0xc8>
 80148a0:	e7ea      	b.n	8014878 <__lshift+0xac>
 80148a2:	bf00      	nop
 80148a4:	08016e47 	.word	0x08016e47
 80148a8:	08016eb8 	.word	0x08016eb8

080148ac <__mcmp>:
 80148ac:	b530      	push	{r4, r5, lr}
 80148ae:	6902      	ldr	r2, [r0, #16]
 80148b0:	690c      	ldr	r4, [r1, #16]
 80148b2:	1b12      	subs	r2, r2, r4
 80148b4:	d10e      	bne.n	80148d4 <__mcmp+0x28>
 80148b6:	f100 0314 	add.w	r3, r0, #20
 80148ba:	3114      	adds	r1, #20
 80148bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80148c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80148c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80148c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80148cc:	42a5      	cmp	r5, r4
 80148ce:	d003      	beq.n	80148d8 <__mcmp+0x2c>
 80148d0:	d305      	bcc.n	80148de <__mcmp+0x32>
 80148d2:	2201      	movs	r2, #1
 80148d4:	4610      	mov	r0, r2
 80148d6:	bd30      	pop	{r4, r5, pc}
 80148d8:	4283      	cmp	r3, r0
 80148da:	d3f3      	bcc.n	80148c4 <__mcmp+0x18>
 80148dc:	e7fa      	b.n	80148d4 <__mcmp+0x28>
 80148de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80148e2:	e7f7      	b.n	80148d4 <__mcmp+0x28>

080148e4 <__mdiff>:
 80148e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148e8:	460c      	mov	r4, r1
 80148ea:	4606      	mov	r6, r0
 80148ec:	4611      	mov	r1, r2
 80148ee:	4620      	mov	r0, r4
 80148f0:	4690      	mov	r8, r2
 80148f2:	f7ff ffdb 	bl	80148ac <__mcmp>
 80148f6:	1e05      	subs	r5, r0, #0
 80148f8:	d110      	bne.n	801491c <__mdiff+0x38>
 80148fa:	4629      	mov	r1, r5
 80148fc:	4630      	mov	r0, r6
 80148fe:	f7ff fd53 	bl	80143a8 <_Balloc>
 8014902:	b930      	cbnz	r0, 8014912 <__mdiff+0x2e>
 8014904:	4b3a      	ldr	r3, [pc, #232]	; (80149f0 <__mdiff+0x10c>)
 8014906:	4602      	mov	r2, r0
 8014908:	f240 2132 	movw	r1, #562	; 0x232
 801490c:	4839      	ldr	r0, [pc, #228]	; (80149f4 <__mdiff+0x110>)
 801490e:	f000 fa2b 	bl	8014d68 <__assert_func>
 8014912:	2301      	movs	r3, #1
 8014914:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801491c:	bfa4      	itt	ge
 801491e:	4643      	movge	r3, r8
 8014920:	46a0      	movge	r8, r4
 8014922:	4630      	mov	r0, r6
 8014924:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014928:	bfa6      	itte	ge
 801492a:	461c      	movge	r4, r3
 801492c:	2500      	movge	r5, #0
 801492e:	2501      	movlt	r5, #1
 8014930:	f7ff fd3a 	bl	80143a8 <_Balloc>
 8014934:	b920      	cbnz	r0, 8014940 <__mdiff+0x5c>
 8014936:	4b2e      	ldr	r3, [pc, #184]	; (80149f0 <__mdiff+0x10c>)
 8014938:	4602      	mov	r2, r0
 801493a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801493e:	e7e5      	b.n	801490c <__mdiff+0x28>
 8014940:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014944:	6926      	ldr	r6, [r4, #16]
 8014946:	60c5      	str	r5, [r0, #12]
 8014948:	f104 0914 	add.w	r9, r4, #20
 801494c:	f108 0514 	add.w	r5, r8, #20
 8014950:	f100 0e14 	add.w	lr, r0, #20
 8014954:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014958:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801495c:	f108 0210 	add.w	r2, r8, #16
 8014960:	46f2      	mov	sl, lr
 8014962:	2100      	movs	r1, #0
 8014964:	f859 3b04 	ldr.w	r3, [r9], #4
 8014968:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801496c:	fa1f f883 	uxth.w	r8, r3
 8014970:	fa11 f18b 	uxtah	r1, r1, fp
 8014974:	0c1b      	lsrs	r3, r3, #16
 8014976:	eba1 0808 	sub.w	r8, r1, r8
 801497a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801497e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014982:	fa1f f888 	uxth.w	r8, r8
 8014986:	1419      	asrs	r1, r3, #16
 8014988:	454e      	cmp	r6, r9
 801498a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801498e:	f84a 3b04 	str.w	r3, [sl], #4
 8014992:	d8e7      	bhi.n	8014964 <__mdiff+0x80>
 8014994:	1b33      	subs	r3, r6, r4
 8014996:	3b15      	subs	r3, #21
 8014998:	f023 0303 	bic.w	r3, r3, #3
 801499c:	3304      	adds	r3, #4
 801499e:	3415      	adds	r4, #21
 80149a0:	42a6      	cmp	r6, r4
 80149a2:	bf38      	it	cc
 80149a4:	2304      	movcc	r3, #4
 80149a6:	441d      	add	r5, r3
 80149a8:	4473      	add	r3, lr
 80149aa:	469e      	mov	lr, r3
 80149ac:	462e      	mov	r6, r5
 80149ae:	4566      	cmp	r6, ip
 80149b0:	d30e      	bcc.n	80149d0 <__mdiff+0xec>
 80149b2:	f10c 0203 	add.w	r2, ip, #3
 80149b6:	1b52      	subs	r2, r2, r5
 80149b8:	f022 0203 	bic.w	r2, r2, #3
 80149bc:	3d03      	subs	r5, #3
 80149be:	45ac      	cmp	ip, r5
 80149c0:	bf38      	it	cc
 80149c2:	2200      	movcc	r2, #0
 80149c4:	441a      	add	r2, r3
 80149c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80149ca:	b17b      	cbz	r3, 80149ec <__mdiff+0x108>
 80149cc:	6107      	str	r7, [r0, #16]
 80149ce:	e7a3      	b.n	8014918 <__mdiff+0x34>
 80149d0:	f856 8b04 	ldr.w	r8, [r6], #4
 80149d4:	fa11 f288 	uxtah	r2, r1, r8
 80149d8:	1414      	asrs	r4, r2, #16
 80149da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80149de:	b292      	uxth	r2, r2
 80149e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80149e4:	f84e 2b04 	str.w	r2, [lr], #4
 80149e8:	1421      	asrs	r1, r4, #16
 80149ea:	e7e0      	b.n	80149ae <__mdiff+0xca>
 80149ec:	3f01      	subs	r7, #1
 80149ee:	e7ea      	b.n	80149c6 <__mdiff+0xe2>
 80149f0:	08016e47 	.word	0x08016e47
 80149f4:	08016eb8 	.word	0x08016eb8

080149f8 <__d2b>:
 80149f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80149fc:	4689      	mov	r9, r1
 80149fe:	2101      	movs	r1, #1
 8014a00:	ec57 6b10 	vmov	r6, r7, d0
 8014a04:	4690      	mov	r8, r2
 8014a06:	f7ff fccf 	bl	80143a8 <_Balloc>
 8014a0a:	4604      	mov	r4, r0
 8014a0c:	b930      	cbnz	r0, 8014a1c <__d2b+0x24>
 8014a0e:	4602      	mov	r2, r0
 8014a10:	4b25      	ldr	r3, [pc, #148]	; (8014aa8 <__d2b+0xb0>)
 8014a12:	4826      	ldr	r0, [pc, #152]	; (8014aac <__d2b+0xb4>)
 8014a14:	f240 310a 	movw	r1, #778	; 0x30a
 8014a18:	f000 f9a6 	bl	8014d68 <__assert_func>
 8014a1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014a20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014a24:	bb35      	cbnz	r5, 8014a74 <__d2b+0x7c>
 8014a26:	2e00      	cmp	r6, #0
 8014a28:	9301      	str	r3, [sp, #4]
 8014a2a:	d028      	beq.n	8014a7e <__d2b+0x86>
 8014a2c:	4668      	mov	r0, sp
 8014a2e:	9600      	str	r6, [sp, #0]
 8014a30:	f7ff fd82 	bl	8014538 <__lo0bits>
 8014a34:	9900      	ldr	r1, [sp, #0]
 8014a36:	b300      	cbz	r0, 8014a7a <__d2b+0x82>
 8014a38:	9a01      	ldr	r2, [sp, #4]
 8014a3a:	f1c0 0320 	rsb	r3, r0, #32
 8014a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8014a42:	430b      	orrs	r3, r1
 8014a44:	40c2      	lsrs	r2, r0
 8014a46:	6163      	str	r3, [r4, #20]
 8014a48:	9201      	str	r2, [sp, #4]
 8014a4a:	9b01      	ldr	r3, [sp, #4]
 8014a4c:	61a3      	str	r3, [r4, #24]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	bf14      	ite	ne
 8014a52:	2202      	movne	r2, #2
 8014a54:	2201      	moveq	r2, #1
 8014a56:	6122      	str	r2, [r4, #16]
 8014a58:	b1d5      	cbz	r5, 8014a90 <__d2b+0x98>
 8014a5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014a5e:	4405      	add	r5, r0
 8014a60:	f8c9 5000 	str.w	r5, [r9]
 8014a64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014a68:	f8c8 0000 	str.w	r0, [r8]
 8014a6c:	4620      	mov	r0, r4
 8014a6e:	b003      	add	sp, #12
 8014a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014a78:	e7d5      	b.n	8014a26 <__d2b+0x2e>
 8014a7a:	6161      	str	r1, [r4, #20]
 8014a7c:	e7e5      	b.n	8014a4a <__d2b+0x52>
 8014a7e:	a801      	add	r0, sp, #4
 8014a80:	f7ff fd5a 	bl	8014538 <__lo0bits>
 8014a84:	9b01      	ldr	r3, [sp, #4]
 8014a86:	6163      	str	r3, [r4, #20]
 8014a88:	2201      	movs	r2, #1
 8014a8a:	6122      	str	r2, [r4, #16]
 8014a8c:	3020      	adds	r0, #32
 8014a8e:	e7e3      	b.n	8014a58 <__d2b+0x60>
 8014a90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014a94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014a98:	f8c9 0000 	str.w	r0, [r9]
 8014a9c:	6918      	ldr	r0, [r3, #16]
 8014a9e:	f7ff fd2b 	bl	80144f8 <__hi0bits>
 8014aa2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014aa6:	e7df      	b.n	8014a68 <__d2b+0x70>
 8014aa8:	08016e47 	.word	0x08016e47
 8014aac:	08016eb8 	.word	0x08016eb8

08014ab0 <_calloc_r>:
 8014ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014ab2:	fba1 2402 	umull	r2, r4, r1, r2
 8014ab6:	b94c      	cbnz	r4, 8014acc <_calloc_r+0x1c>
 8014ab8:	4611      	mov	r1, r2
 8014aba:	9201      	str	r2, [sp, #4]
 8014abc:	f000 f87a 	bl	8014bb4 <_malloc_r>
 8014ac0:	9a01      	ldr	r2, [sp, #4]
 8014ac2:	4605      	mov	r5, r0
 8014ac4:	b930      	cbnz	r0, 8014ad4 <_calloc_r+0x24>
 8014ac6:	4628      	mov	r0, r5
 8014ac8:	b003      	add	sp, #12
 8014aca:	bd30      	pop	{r4, r5, pc}
 8014acc:	220c      	movs	r2, #12
 8014ace:	6002      	str	r2, [r0, #0]
 8014ad0:	2500      	movs	r5, #0
 8014ad2:	e7f8      	b.n	8014ac6 <_calloc_r+0x16>
 8014ad4:	4621      	mov	r1, r4
 8014ad6:	f7fd feb3 	bl	8012840 <memset>
 8014ada:	e7f4      	b.n	8014ac6 <_calloc_r+0x16>

08014adc <_free_r>:
 8014adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014ade:	2900      	cmp	r1, #0
 8014ae0:	d044      	beq.n	8014b6c <_free_r+0x90>
 8014ae2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ae6:	9001      	str	r0, [sp, #4]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	f1a1 0404 	sub.w	r4, r1, #4
 8014aee:	bfb8      	it	lt
 8014af0:	18e4      	addlt	r4, r4, r3
 8014af2:	f000 f9bf 	bl	8014e74 <__malloc_lock>
 8014af6:	4a1e      	ldr	r2, [pc, #120]	; (8014b70 <_free_r+0x94>)
 8014af8:	9801      	ldr	r0, [sp, #4]
 8014afa:	6813      	ldr	r3, [r2, #0]
 8014afc:	b933      	cbnz	r3, 8014b0c <_free_r+0x30>
 8014afe:	6063      	str	r3, [r4, #4]
 8014b00:	6014      	str	r4, [r2, #0]
 8014b02:	b003      	add	sp, #12
 8014b04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b08:	f000 b9ba 	b.w	8014e80 <__malloc_unlock>
 8014b0c:	42a3      	cmp	r3, r4
 8014b0e:	d908      	bls.n	8014b22 <_free_r+0x46>
 8014b10:	6825      	ldr	r5, [r4, #0]
 8014b12:	1961      	adds	r1, r4, r5
 8014b14:	428b      	cmp	r3, r1
 8014b16:	bf01      	itttt	eq
 8014b18:	6819      	ldreq	r1, [r3, #0]
 8014b1a:	685b      	ldreq	r3, [r3, #4]
 8014b1c:	1949      	addeq	r1, r1, r5
 8014b1e:	6021      	streq	r1, [r4, #0]
 8014b20:	e7ed      	b.n	8014afe <_free_r+0x22>
 8014b22:	461a      	mov	r2, r3
 8014b24:	685b      	ldr	r3, [r3, #4]
 8014b26:	b10b      	cbz	r3, 8014b2c <_free_r+0x50>
 8014b28:	42a3      	cmp	r3, r4
 8014b2a:	d9fa      	bls.n	8014b22 <_free_r+0x46>
 8014b2c:	6811      	ldr	r1, [r2, #0]
 8014b2e:	1855      	adds	r5, r2, r1
 8014b30:	42a5      	cmp	r5, r4
 8014b32:	d10b      	bne.n	8014b4c <_free_r+0x70>
 8014b34:	6824      	ldr	r4, [r4, #0]
 8014b36:	4421      	add	r1, r4
 8014b38:	1854      	adds	r4, r2, r1
 8014b3a:	42a3      	cmp	r3, r4
 8014b3c:	6011      	str	r1, [r2, #0]
 8014b3e:	d1e0      	bne.n	8014b02 <_free_r+0x26>
 8014b40:	681c      	ldr	r4, [r3, #0]
 8014b42:	685b      	ldr	r3, [r3, #4]
 8014b44:	6053      	str	r3, [r2, #4]
 8014b46:	4421      	add	r1, r4
 8014b48:	6011      	str	r1, [r2, #0]
 8014b4a:	e7da      	b.n	8014b02 <_free_r+0x26>
 8014b4c:	d902      	bls.n	8014b54 <_free_r+0x78>
 8014b4e:	230c      	movs	r3, #12
 8014b50:	6003      	str	r3, [r0, #0]
 8014b52:	e7d6      	b.n	8014b02 <_free_r+0x26>
 8014b54:	6825      	ldr	r5, [r4, #0]
 8014b56:	1961      	adds	r1, r4, r5
 8014b58:	428b      	cmp	r3, r1
 8014b5a:	bf04      	itt	eq
 8014b5c:	6819      	ldreq	r1, [r3, #0]
 8014b5e:	685b      	ldreq	r3, [r3, #4]
 8014b60:	6063      	str	r3, [r4, #4]
 8014b62:	bf04      	itt	eq
 8014b64:	1949      	addeq	r1, r1, r5
 8014b66:	6021      	streq	r1, [r4, #0]
 8014b68:	6054      	str	r4, [r2, #4]
 8014b6a:	e7ca      	b.n	8014b02 <_free_r+0x26>
 8014b6c:	b003      	add	sp, #12
 8014b6e:	bd30      	pop	{r4, r5, pc}
 8014b70:	24001754 	.word	0x24001754

08014b74 <sbrk_aligned>:
 8014b74:	b570      	push	{r4, r5, r6, lr}
 8014b76:	4e0e      	ldr	r6, [pc, #56]	; (8014bb0 <sbrk_aligned+0x3c>)
 8014b78:	460c      	mov	r4, r1
 8014b7a:	6831      	ldr	r1, [r6, #0]
 8014b7c:	4605      	mov	r5, r0
 8014b7e:	b911      	cbnz	r1, 8014b86 <sbrk_aligned+0x12>
 8014b80:	f000 f88c 	bl	8014c9c <_sbrk_r>
 8014b84:	6030      	str	r0, [r6, #0]
 8014b86:	4621      	mov	r1, r4
 8014b88:	4628      	mov	r0, r5
 8014b8a:	f000 f887 	bl	8014c9c <_sbrk_r>
 8014b8e:	1c43      	adds	r3, r0, #1
 8014b90:	d00a      	beq.n	8014ba8 <sbrk_aligned+0x34>
 8014b92:	1cc4      	adds	r4, r0, #3
 8014b94:	f024 0403 	bic.w	r4, r4, #3
 8014b98:	42a0      	cmp	r0, r4
 8014b9a:	d007      	beq.n	8014bac <sbrk_aligned+0x38>
 8014b9c:	1a21      	subs	r1, r4, r0
 8014b9e:	4628      	mov	r0, r5
 8014ba0:	f000 f87c 	bl	8014c9c <_sbrk_r>
 8014ba4:	3001      	adds	r0, #1
 8014ba6:	d101      	bne.n	8014bac <sbrk_aligned+0x38>
 8014ba8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014bac:	4620      	mov	r0, r4
 8014bae:	bd70      	pop	{r4, r5, r6, pc}
 8014bb0:	24001758 	.word	0x24001758

08014bb4 <_malloc_r>:
 8014bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bb8:	1ccd      	adds	r5, r1, #3
 8014bba:	f025 0503 	bic.w	r5, r5, #3
 8014bbe:	3508      	adds	r5, #8
 8014bc0:	2d0c      	cmp	r5, #12
 8014bc2:	bf38      	it	cc
 8014bc4:	250c      	movcc	r5, #12
 8014bc6:	2d00      	cmp	r5, #0
 8014bc8:	4607      	mov	r7, r0
 8014bca:	db01      	blt.n	8014bd0 <_malloc_r+0x1c>
 8014bcc:	42a9      	cmp	r1, r5
 8014bce:	d905      	bls.n	8014bdc <_malloc_r+0x28>
 8014bd0:	230c      	movs	r3, #12
 8014bd2:	603b      	str	r3, [r7, #0]
 8014bd4:	2600      	movs	r6, #0
 8014bd6:	4630      	mov	r0, r6
 8014bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bdc:	4e2e      	ldr	r6, [pc, #184]	; (8014c98 <_malloc_r+0xe4>)
 8014bde:	f000 f949 	bl	8014e74 <__malloc_lock>
 8014be2:	6833      	ldr	r3, [r6, #0]
 8014be4:	461c      	mov	r4, r3
 8014be6:	bb34      	cbnz	r4, 8014c36 <_malloc_r+0x82>
 8014be8:	4629      	mov	r1, r5
 8014bea:	4638      	mov	r0, r7
 8014bec:	f7ff ffc2 	bl	8014b74 <sbrk_aligned>
 8014bf0:	1c43      	adds	r3, r0, #1
 8014bf2:	4604      	mov	r4, r0
 8014bf4:	d14d      	bne.n	8014c92 <_malloc_r+0xde>
 8014bf6:	6834      	ldr	r4, [r6, #0]
 8014bf8:	4626      	mov	r6, r4
 8014bfa:	2e00      	cmp	r6, #0
 8014bfc:	d140      	bne.n	8014c80 <_malloc_r+0xcc>
 8014bfe:	6823      	ldr	r3, [r4, #0]
 8014c00:	4631      	mov	r1, r6
 8014c02:	4638      	mov	r0, r7
 8014c04:	eb04 0803 	add.w	r8, r4, r3
 8014c08:	f000 f848 	bl	8014c9c <_sbrk_r>
 8014c0c:	4580      	cmp	r8, r0
 8014c0e:	d13a      	bne.n	8014c86 <_malloc_r+0xd2>
 8014c10:	6821      	ldr	r1, [r4, #0]
 8014c12:	3503      	adds	r5, #3
 8014c14:	1a6d      	subs	r5, r5, r1
 8014c16:	f025 0503 	bic.w	r5, r5, #3
 8014c1a:	3508      	adds	r5, #8
 8014c1c:	2d0c      	cmp	r5, #12
 8014c1e:	bf38      	it	cc
 8014c20:	250c      	movcc	r5, #12
 8014c22:	4629      	mov	r1, r5
 8014c24:	4638      	mov	r0, r7
 8014c26:	f7ff ffa5 	bl	8014b74 <sbrk_aligned>
 8014c2a:	3001      	adds	r0, #1
 8014c2c:	d02b      	beq.n	8014c86 <_malloc_r+0xd2>
 8014c2e:	6823      	ldr	r3, [r4, #0]
 8014c30:	442b      	add	r3, r5
 8014c32:	6023      	str	r3, [r4, #0]
 8014c34:	e00e      	b.n	8014c54 <_malloc_r+0xa0>
 8014c36:	6822      	ldr	r2, [r4, #0]
 8014c38:	1b52      	subs	r2, r2, r5
 8014c3a:	d41e      	bmi.n	8014c7a <_malloc_r+0xc6>
 8014c3c:	2a0b      	cmp	r2, #11
 8014c3e:	d916      	bls.n	8014c6e <_malloc_r+0xba>
 8014c40:	1961      	adds	r1, r4, r5
 8014c42:	42a3      	cmp	r3, r4
 8014c44:	6025      	str	r5, [r4, #0]
 8014c46:	bf18      	it	ne
 8014c48:	6059      	strne	r1, [r3, #4]
 8014c4a:	6863      	ldr	r3, [r4, #4]
 8014c4c:	bf08      	it	eq
 8014c4e:	6031      	streq	r1, [r6, #0]
 8014c50:	5162      	str	r2, [r4, r5]
 8014c52:	604b      	str	r3, [r1, #4]
 8014c54:	4638      	mov	r0, r7
 8014c56:	f104 060b 	add.w	r6, r4, #11
 8014c5a:	f000 f911 	bl	8014e80 <__malloc_unlock>
 8014c5e:	f026 0607 	bic.w	r6, r6, #7
 8014c62:	1d23      	adds	r3, r4, #4
 8014c64:	1af2      	subs	r2, r6, r3
 8014c66:	d0b6      	beq.n	8014bd6 <_malloc_r+0x22>
 8014c68:	1b9b      	subs	r3, r3, r6
 8014c6a:	50a3      	str	r3, [r4, r2]
 8014c6c:	e7b3      	b.n	8014bd6 <_malloc_r+0x22>
 8014c6e:	6862      	ldr	r2, [r4, #4]
 8014c70:	42a3      	cmp	r3, r4
 8014c72:	bf0c      	ite	eq
 8014c74:	6032      	streq	r2, [r6, #0]
 8014c76:	605a      	strne	r2, [r3, #4]
 8014c78:	e7ec      	b.n	8014c54 <_malloc_r+0xa0>
 8014c7a:	4623      	mov	r3, r4
 8014c7c:	6864      	ldr	r4, [r4, #4]
 8014c7e:	e7b2      	b.n	8014be6 <_malloc_r+0x32>
 8014c80:	4634      	mov	r4, r6
 8014c82:	6876      	ldr	r6, [r6, #4]
 8014c84:	e7b9      	b.n	8014bfa <_malloc_r+0x46>
 8014c86:	230c      	movs	r3, #12
 8014c88:	603b      	str	r3, [r7, #0]
 8014c8a:	4638      	mov	r0, r7
 8014c8c:	f000 f8f8 	bl	8014e80 <__malloc_unlock>
 8014c90:	e7a1      	b.n	8014bd6 <_malloc_r+0x22>
 8014c92:	6025      	str	r5, [r4, #0]
 8014c94:	e7de      	b.n	8014c54 <_malloc_r+0xa0>
 8014c96:	bf00      	nop
 8014c98:	24001754 	.word	0x24001754

08014c9c <_sbrk_r>:
 8014c9c:	b538      	push	{r3, r4, r5, lr}
 8014c9e:	4d06      	ldr	r5, [pc, #24]	; (8014cb8 <_sbrk_r+0x1c>)
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	4604      	mov	r4, r0
 8014ca4:	4608      	mov	r0, r1
 8014ca6:	602b      	str	r3, [r5, #0]
 8014ca8:	f7f0 fd00 	bl	80056ac <_sbrk>
 8014cac:	1c43      	adds	r3, r0, #1
 8014cae:	d102      	bne.n	8014cb6 <_sbrk_r+0x1a>
 8014cb0:	682b      	ldr	r3, [r5, #0]
 8014cb2:	b103      	cbz	r3, 8014cb6 <_sbrk_r+0x1a>
 8014cb4:	6023      	str	r3, [r4, #0]
 8014cb6:	bd38      	pop	{r3, r4, r5, pc}
 8014cb8:	2400175c 	.word	0x2400175c

08014cbc <__sread>:
 8014cbc:	b510      	push	{r4, lr}
 8014cbe:	460c      	mov	r4, r1
 8014cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cc4:	f000 fa3c 	bl	8015140 <_read_r>
 8014cc8:	2800      	cmp	r0, #0
 8014cca:	bfab      	itete	ge
 8014ccc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014cce:	89a3      	ldrhlt	r3, [r4, #12]
 8014cd0:	181b      	addge	r3, r3, r0
 8014cd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014cd6:	bfac      	ite	ge
 8014cd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8014cda:	81a3      	strhlt	r3, [r4, #12]
 8014cdc:	bd10      	pop	{r4, pc}

08014cde <__swrite>:
 8014cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ce2:	461f      	mov	r7, r3
 8014ce4:	898b      	ldrh	r3, [r1, #12]
 8014ce6:	05db      	lsls	r3, r3, #23
 8014ce8:	4605      	mov	r5, r0
 8014cea:	460c      	mov	r4, r1
 8014cec:	4616      	mov	r6, r2
 8014cee:	d505      	bpl.n	8014cfc <__swrite+0x1e>
 8014cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cf4:	2302      	movs	r3, #2
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	f000 f898 	bl	8014e2c <_lseek_r>
 8014cfc:	89a3      	ldrh	r3, [r4, #12]
 8014cfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014d06:	81a3      	strh	r3, [r4, #12]
 8014d08:	4632      	mov	r2, r6
 8014d0a:	463b      	mov	r3, r7
 8014d0c:	4628      	mov	r0, r5
 8014d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014d12:	f000 b817 	b.w	8014d44 <_write_r>

08014d16 <__sseek>:
 8014d16:	b510      	push	{r4, lr}
 8014d18:	460c      	mov	r4, r1
 8014d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d1e:	f000 f885 	bl	8014e2c <_lseek_r>
 8014d22:	1c43      	adds	r3, r0, #1
 8014d24:	89a3      	ldrh	r3, [r4, #12]
 8014d26:	bf15      	itete	ne
 8014d28:	6560      	strne	r0, [r4, #84]	; 0x54
 8014d2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014d2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014d32:	81a3      	strheq	r3, [r4, #12]
 8014d34:	bf18      	it	ne
 8014d36:	81a3      	strhne	r3, [r4, #12]
 8014d38:	bd10      	pop	{r4, pc}

08014d3a <__sclose>:
 8014d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d3e:	f000 b831 	b.w	8014da4 <_close_r>
	...

08014d44 <_write_r>:
 8014d44:	b538      	push	{r3, r4, r5, lr}
 8014d46:	4d07      	ldr	r5, [pc, #28]	; (8014d64 <_write_r+0x20>)
 8014d48:	4604      	mov	r4, r0
 8014d4a:	4608      	mov	r0, r1
 8014d4c:	4611      	mov	r1, r2
 8014d4e:	2200      	movs	r2, #0
 8014d50:	602a      	str	r2, [r5, #0]
 8014d52:	461a      	mov	r2, r3
 8014d54:	f7f0 fc59 	bl	800560a <_write>
 8014d58:	1c43      	adds	r3, r0, #1
 8014d5a:	d102      	bne.n	8014d62 <_write_r+0x1e>
 8014d5c:	682b      	ldr	r3, [r5, #0]
 8014d5e:	b103      	cbz	r3, 8014d62 <_write_r+0x1e>
 8014d60:	6023      	str	r3, [r4, #0]
 8014d62:	bd38      	pop	{r3, r4, r5, pc}
 8014d64:	2400175c 	.word	0x2400175c

08014d68 <__assert_func>:
 8014d68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014d6a:	4614      	mov	r4, r2
 8014d6c:	461a      	mov	r2, r3
 8014d6e:	4b09      	ldr	r3, [pc, #36]	; (8014d94 <__assert_func+0x2c>)
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	4605      	mov	r5, r0
 8014d74:	68d8      	ldr	r0, [r3, #12]
 8014d76:	b14c      	cbz	r4, 8014d8c <__assert_func+0x24>
 8014d78:	4b07      	ldr	r3, [pc, #28]	; (8014d98 <__assert_func+0x30>)
 8014d7a:	9100      	str	r1, [sp, #0]
 8014d7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014d80:	4906      	ldr	r1, [pc, #24]	; (8014d9c <__assert_func+0x34>)
 8014d82:	462b      	mov	r3, r5
 8014d84:	f000 f81e 	bl	8014dc4 <fiprintf>
 8014d88:	f000 f9f9 	bl	801517e <abort>
 8014d8c:	4b04      	ldr	r3, [pc, #16]	; (8014da0 <__assert_func+0x38>)
 8014d8e:	461c      	mov	r4, r3
 8014d90:	e7f3      	b.n	8014d7a <__assert_func+0x12>
 8014d92:	bf00      	nop
 8014d94:	24000240 	.word	0x24000240
 8014d98:	08017014 	.word	0x08017014
 8014d9c:	08017021 	.word	0x08017021
 8014da0:	0801704f 	.word	0x0801704f

08014da4 <_close_r>:
 8014da4:	b538      	push	{r3, r4, r5, lr}
 8014da6:	4d06      	ldr	r5, [pc, #24]	; (8014dc0 <_close_r+0x1c>)
 8014da8:	2300      	movs	r3, #0
 8014daa:	4604      	mov	r4, r0
 8014dac:	4608      	mov	r0, r1
 8014dae:	602b      	str	r3, [r5, #0]
 8014db0:	f7f0 fc47 	bl	8005642 <_close>
 8014db4:	1c43      	adds	r3, r0, #1
 8014db6:	d102      	bne.n	8014dbe <_close_r+0x1a>
 8014db8:	682b      	ldr	r3, [r5, #0]
 8014dba:	b103      	cbz	r3, 8014dbe <_close_r+0x1a>
 8014dbc:	6023      	str	r3, [r4, #0]
 8014dbe:	bd38      	pop	{r3, r4, r5, pc}
 8014dc0:	2400175c 	.word	0x2400175c

08014dc4 <fiprintf>:
 8014dc4:	b40e      	push	{r1, r2, r3}
 8014dc6:	b503      	push	{r0, r1, lr}
 8014dc8:	4601      	mov	r1, r0
 8014dca:	ab03      	add	r3, sp, #12
 8014dcc:	4805      	ldr	r0, [pc, #20]	; (8014de4 <fiprintf+0x20>)
 8014dce:	f853 2b04 	ldr.w	r2, [r3], #4
 8014dd2:	6800      	ldr	r0, [r0, #0]
 8014dd4:	9301      	str	r3, [sp, #4]
 8014dd6:	f000 f883 	bl	8014ee0 <_vfiprintf_r>
 8014dda:	b002      	add	sp, #8
 8014ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014de0:	b003      	add	sp, #12
 8014de2:	4770      	bx	lr
 8014de4:	24000240 	.word	0x24000240

08014de8 <_fstat_r>:
 8014de8:	b538      	push	{r3, r4, r5, lr}
 8014dea:	4d07      	ldr	r5, [pc, #28]	; (8014e08 <_fstat_r+0x20>)
 8014dec:	2300      	movs	r3, #0
 8014dee:	4604      	mov	r4, r0
 8014df0:	4608      	mov	r0, r1
 8014df2:	4611      	mov	r1, r2
 8014df4:	602b      	str	r3, [r5, #0]
 8014df6:	f7f0 fc30 	bl	800565a <_fstat>
 8014dfa:	1c43      	adds	r3, r0, #1
 8014dfc:	d102      	bne.n	8014e04 <_fstat_r+0x1c>
 8014dfe:	682b      	ldr	r3, [r5, #0]
 8014e00:	b103      	cbz	r3, 8014e04 <_fstat_r+0x1c>
 8014e02:	6023      	str	r3, [r4, #0]
 8014e04:	bd38      	pop	{r3, r4, r5, pc}
 8014e06:	bf00      	nop
 8014e08:	2400175c 	.word	0x2400175c

08014e0c <_isatty_r>:
 8014e0c:	b538      	push	{r3, r4, r5, lr}
 8014e0e:	4d06      	ldr	r5, [pc, #24]	; (8014e28 <_isatty_r+0x1c>)
 8014e10:	2300      	movs	r3, #0
 8014e12:	4604      	mov	r4, r0
 8014e14:	4608      	mov	r0, r1
 8014e16:	602b      	str	r3, [r5, #0]
 8014e18:	f7f0 fc2f 	bl	800567a <_isatty>
 8014e1c:	1c43      	adds	r3, r0, #1
 8014e1e:	d102      	bne.n	8014e26 <_isatty_r+0x1a>
 8014e20:	682b      	ldr	r3, [r5, #0]
 8014e22:	b103      	cbz	r3, 8014e26 <_isatty_r+0x1a>
 8014e24:	6023      	str	r3, [r4, #0]
 8014e26:	bd38      	pop	{r3, r4, r5, pc}
 8014e28:	2400175c 	.word	0x2400175c

08014e2c <_lseek_r>:
 8014e2c:	b538      	push	{r3, r4, r5, lr}
 8014e2e:	4d07      	ldr	r5, [pc, #28]	; (8014e4c <_lseek_r+0x20>)
 8014e30:	4604      	mov	r4, r0
 8014e32:	4608      	mov	r0, r1
 8014e34:	4611      	mov	r1, r2
 8014e36:	2200      	movs	r2, #0
 8014e38:	602a      	str	r2, [r5, #0]
 8014e3a:	461a      	mov	r2, r3
 8014e3c:	f7f0 fc28 	bl	8005690 <_lseek>
 8014e40:	1c43      	adds	r3, r0, #1
 8014e42:	d102      	bne.n	8014e4a <_lseek_r+0x1e>
 8014e44:	682b      	ldr	r3, [r5, #0]
 8014e46:	b103      	cbz	r3, 8014e4a <_lseek_r+0x1e>
 8014e48:	6023      	str	r3, [r4, #0]
 8014e4a:	bd38      	pop	{r3, r4, r5, pc}
 8014e4c:	2400175c 	.word	0x2400175c

08014e50 <__ascii_mbtowc>:
 8014e50:	b082      	sub	sp, #8
 8014e52:	b901      	cbnz	r1, 8014e56 <__ascii_mbtowc+0x6>
 8014e54:	a901      	add	r1, sp, #4
 8014e56:	b142      	cbz	r2, 8014e6a <__ascii_mbtowc+0x1a>
 8014e58:	b14b      	cbz	r3, 8014e6e <__ascii_mbtowc+0x1e>
 8014e5a:	7813      	ldrb	r3, [r2, #0]
 8014e5c:	600b      	str	r3, [r1, #0]
 8014e5e:	7812      	ldrb	r2, [r2, #0]
 8014e60:	1e10      	subs	r0, r2, #0
 8014e62:	bf18      	it	ne
 8014e64:	2001      	movne	r0, #1
 8014e66:	b002      	add	sp, #8
 8014e68:	4770      	bx	lr
 8014e6a:	4610      	mov	r0, r2
 8014e6c:	e7fb      	b.n	8014e66 <__ascii_mbtowc+0x16>
 8014e6e:	f06f 0001 	mvn.w	r0, #1
 8014e72:	e7f8      	b.n	8014e66 <__ascii_mbtowc+0x16>

08014e74 <__malloc_lock>:
 8014e74:	4801      	ldr	r0, [pc, #4]	; (8014e7c <__malloc_lock+0x8>)
 8014e76:	f7ff ba1a 	b.w	80142ae <__retarget_lock_acquire_recursive>
 8014e7a:	bf00      	nop
 8014e7c:	24001750 	.word	0x24001750

08014e80 <__malloc_unlock>:
 8014e80:	4801      	ldr	r0, [pc, #4]	; (8014e88 <__malloc_unlock+0x8>)
 8014e82:	f7ff ba15 	b.w	80142b0 <__retarget_lock_release_recursive>
 8014e86:	bf00      	nop
 8014e88:	24001750 	.word	0x24001750

08014e8c <__sfputc_r>:
 8014e8c:	6893      	ldr	r3, [r2, #8]
 8014e8e:	3b01      	subs	r3, #1
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	b410      	push	{r4}
 8014e94:	6093      	str	r3, [r2, #8]
 8014e96:	da08      	bge.n	8014eaa <__sfputc_r+0x1e>
 8014e98:	6994      	ldr	r4, [r2, #24]
 8014e9a:	42a3      	cmp	r3, r4
 8014e9c:	db01      	blt.n	8014ea2 <__sfputc_r+0x16>
 8014e9e:	290a      	cmp	r1, #10
 8014ea0:	d103      	bne.n	8014eaa <__sfputc_r+0x1e>
 8014ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ea6:	f7fe b98b 	b.w	80131c0 <__swbuf_r>
 8014eaa:	6813      	ldr	r3, [r2, #0]
 8014eac:	1c58      	adds	r0, r3, #1
 8014eae:	6010      	str	r0, [r2, #0]
 8014eb0:	7019      	strb	r1, [r3, #0]
 8014eb2:	4608      	mov	r0, r1
 8014eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014eb8:	4770      	bx	lr

08014eba <__sfputs_r>:
 8014eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ebc:	4606      	mov	r6, r0
 8014ebe:	460f      	mov	r7, r1
 8014ec0:	4614      	mov	r4, r2
 8014ec2:	18d5      	adds	r5, r2, r3
 8014ec4:	42ac      	cmp	r4, r5
 8014ec6:	d101      	bne.n	8014ecc <__sfputs_r+0x12>
 8014ec8:	2000      	movs	r0, #0
 8014eca:	e007      	b.n	8014edc <__sfputs_r+0x22>
 8014ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ed0:	463a      	mov	r2, r7
 8014ed2:	4630      	mov	r0, r6
 8014ed4:	f7ff ffda 	bl	8014e8c <__sfputc_r>
 8014ed8:	1c43      	adds	r3, r0, #1
 8014eda:	d1f3      	bne.n	8014ec4 <__sfputs_r+0xa>
 8014edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014ee0 <_vfiprintf_r>:
 8014ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ee4:	460d      	mov	r5, r1
 8014ee6:	b09d      	sub	sp, #116	; 0x74
 8014ee8:	4614      	mov	r4, r2
 8014eea:	4698      	mov	r8, r3
 8014eec:	4606      	mov	r6, r0
 8014eee:	b118      	cbz	r0, 8014ef8 <_vfiprintf_r+0x18>
 8014ef0:	6983      	ldr	r3, [r0, #24]
 8014ef2:	b90b      	cbnz	r3, 8014ef8 <_vfiprintf_r+0x18>
 8014ef4:	f7ff f938 	bl	8014168 <__sinit>
 8014ef8:	4b89      	ldr	r3, [pc, #548]	; (8015120 <_vfiprintf_r+0x240>)
 8014efa:	429d      	cmp	r5, r3
 8014efc:	d11b      	bne.n	8014f36 <_vfiprintf_r+0x56>
 8014efe:	6875      	ldr	r5, [r6, #4]
 8014f00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f02:	07d9      	lsls	r1, r3, #31
 8014f04:	d405      	bmi.n	8014f12 <_vfiprintf_r+0x32>
 8014f06:	89ab      	ldrh	r3, [r5, #12]
 8014f08:	059a      	lsls	r2, r3, #22
 8014f0a:	d402      	bmi.n	8014f12 <_vfiprintf_r+0x32>
 8014f0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f0e:	f7ff f9ce 	bl	80142ae <__retarget_lock_acquire_recursive>
 8014f12:	89ab      	ldrh	r3, [r5, #12]
 8014f14:	071b      	lsls	r3, r3, #28
 8014f16:	d501      	bpl.n	8014f1c <_vfiprintf_r+0x3c>
 8014f18:	692b      	ldr	r3, [r5, #16]
 8014f1a:	b9eb      	cbnz	r3, 8014f58 <_vfiprintf_r+0x78>
 8014f1c:	4629      	mov	r1, r5
 8014f1e:	4630      	mov	r0, r6
 8014f20:	f7fe f9a0 	bl	8013264 <__swsetup_r>
 8014f24:	b1c0      	cbz	r0, 8014f58 <_vfiprintf_r+0x78>
 8014f26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f28:	07dc      	lsls	r4, r3, #31
 8014f2a:	d50e      	bpl.n	8014f4a <_vfiprintf_r+0x6a>
 8014f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f30:	b01d      	add	sp, #116	; 0x74
 8014f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f36:	4b7b      	ldr	r3, [pc, #492]	; (8015124 <_vfiprintf_r+0x244>)
 8014f38:	429d      	cmp	r5, r3
 8014f3a:	d101      	bne.n	8014f40 <_vfiprintf_r+0x60>
 8014f3c:	68b5      	ldr	r5, [r6, #8]
 8014f3e:	e7df      	b.n	8014f00 <_vfiprintf_r+0x20>
 8014f40:	4b79      	ldr	r3, [pc, #484]	; (8015128 <_vfiprintf_r+0x248>)
 8014f42:	429d      	cmp	r5, r3
 8014f44:	bf08      	it	eq
 8014f46:	68f5      	ldreq	r5, [r6, #12]
 8014f48:	e7da      	b.n	8014f00 <_vfiprintf_r+0x20>
 8014f4a:	89ab      	ldrh	r3, [r5, #12]
 8014f4c:	0598      	lsls	r0, r3, #22
 8014f4e:	d4ed      	bmi.n	8014f2c <_vfiprintf_r+0x4c>
 8014f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f52:	f7ff f9ad 	bl	80142b0 <__retarget_lock_release_recursive>
 8014f56:	e7e9      	b.n	8014f2c <_vfiprintf_r+0x4c>
 8014f58:	2300      	movs	r3, #0
 8014f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8014f5c:	2320      	movs	r3, #32
 8014f5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014f62:	f8cd 800c 	str.w	r8, [sp, #12]
 8014f66:	2330      	movs	r3, #48	; 0x30
 8014f68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801512c <_vfiprintf_r+0x24c>
 8014f6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014f70:	f04f 0901 	mov.w	r9, #1
 8014f74:	4623      	mov	r3, r4
 8014f76:	469a      	mov	sl, r3
 8014f78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f7c:	b10a      	cbz	r2, 8014f82 <_vfiprintf_r+0xa2>
 8014f7e:	2a25      	cmp	r2, #37	; 0x25
 8014f80:	d1f9      	bne.n	8014f76 <_vfiprintf_r+0x96>
 8014f82:	ebba 0b04 	subs.w	fp, sl, r4
 8014f86:	d00b      	beq.n	8014fa0 <_vfiprintf_r+0xc0>
 8014f88:	465b      	mov	r3, fp
 8014f8a:	4622      	mov	r2, r4
 8014f8c:	4629      	mov	r1, r5
 8014f8e:	4630      	mov	r0, r6
 8014f90:	f7ff ff93 	bl	8014eba <__sfputs_r>
 8014f94:	3001      	adds	r0, #1
 8014f96:	f000 80aa 	beq.w	80150ee <_vfiprintf_r+0x20e>
 8014f9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f9c:	445a      	add	r2, fp
 8014f9e:	9209      	str	r2, [sp, #36]	; 0x24
 8014fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	f000 80a2 	beq.w	80150ee <_vfiprintf_r+0x20e>
 8014faa:	2300      	movs	r3, #0
 8014fac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014fb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014fb4:	f10a 0a01 	add.w	sl, sl, #1
 8014fb8:	9304      	str	r3, [sp, #16]
 8014fba:	9307      	str	r3, [sp, #28]
 8014fbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014fc0:	931a      	str	r3, [sp, #104]	; 0x68
 8014fc2:	4654      	mov	r4, sl
 8014fc4:	2205      	movs	r2, #5
 8014fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014fca:	4858      	ldr	r0, [pc, #352]	; (801512c <_vfiprintf_r+0x24c>)
 8014fcc:	f7eb f990 	bl	80002f0 <memchr>
 8014fd0:	9a04      	ldr	r2, [sp, #16]
 8014fd2:	b9d8      	cbnz	r0, 801500c <_vfiprintf_r+0x12c>
 8014fd4:	06d1      	lsls	r1, r2, #27
 8014fd6:	bf44      	itt	mi
 8014fd8:	2320      	movmi	r3, #32
 8014fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014fde:	0713      	lsls	r3, r2, #28
 8014fe0:	bf44      	itt	mi
 8014fe2:	232b      	movmi	r3, #43	; 0x2b
 8014fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8014fec:	2b2a      	cmp	r3, #42	; 0x2a
 8014fee:	d015      	beq.n	801501c <_vfiprintf_r+0x13c>
 8014ff0:	9a07      	ldr	r2, [sp, #28]
 8014ff2:	4654      	mov	r4, sl
 8014ff4:	2000      	movs	r0, #0
 8014ff6:	f04f 0c0a 	mov.w	ip, #10
 8014ffa:	4621      	mov	r1, r4
 8014ffc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015000:	3b30      	subs	r3, #48	; 0x30
 8015002:	2b09      	cmp	r3, #9
 8015004:	d94e      	bls.n	80150a4 <_vfiprintf_r+0x1c4>
 8015006:	b1b0      	cbz	r0, 8015036 <_vfiprintf_r+0x156>
 8015008:	9207      	str	r2, [sp, #28]
 801500a:	e014      	b.n	8015036 <_vfiprintf_r+0x156>
 801500c:	eba0 0308 	sub.w	r3, r0, r8
 8015010:	fa09 f303 	lsl.w	r3, r9, r3
 8015014:	4313      	orrs	r3, r2
 8015016:	9304      	str	r3, [sp, #16]
 8015018:	46a2      	mov	sl, r4
 801501a:	e7d2      	b.n	8014fc2 <_vfiprintf_r+0xe2>
 801501c:	9b03      	ldr	r3, [sp, #12]
 801501e:	1d19      	adds	r1, r3, #4
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	9103      	str	r1, [sp, #12]
 8015024:	2b00      	cmp	r3, #0
 8015026:	bfbb      	ittet	lt
 8015028:	425b      	neglt	r3, r3
 801502a:	f042 0202 	orrlt.w	r2, r2, #2
 801502e:	9307      	strge	r3, [sp, #28]
 8015030:	9307      	strlt	r3, [sp, #28]
 8015032:	bfb8      	it	lt
 8015034:	9204      	strlt	r2, [sp, #16]
 8015036:	7823      	ldrb	r3, [r4, #0]
 8015038:	2b2e      	cmp	r3, #46	; 0x2e
 801503a:	d10c      	bne.n	8015056 <_vfiprintf_r+0x176>
 801503c:	7863      	ldrb	r3, [r4, #1]
 801503e:	2b2a      	cmp	r3, #42	; 0x2a
 8015040:	d135      	bne.n	80150ae <_vfiprintf_r+0x1ce>
 8015042:	9b03      	ldr	r3, [sp, #12]
 8015044:	1d1a      	adds	r2, r3, #4
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	9203      	str	r2, [sp, #12]
 801504a:	2b00      	cmp	r3, #0
 801504c:	bfb8      	it	lt
 801504e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015052:	3402      	adds	r4, #2
 8015054:	9305      	str	r3, [sp, #20]
 8015056:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801513c <_vfiprintf_r+0x25c>
 801505a:	7821      	ldrb	r1, [r4, #0]
 801505c:	2203      	movs	r2, #3
 801505e:	4650      	mov	r0, sl
 8015060:	f7eb f946 	bl	80002f0 <memchr>
 8015064:	b140      	cbz	r0, 8015078 <_vfiprintf_r+0x198>
 8015066:	2340      	movs	r3, #64	; 0x40
 8015068:	eba0 000a 	sub.w	r0, r0, sl
 801506c:	fa03 f000 	lsl.w	r0, r3, r0
 8015070:	9b04      	ldr	r3, [sp, #16]
 8015072:	4303      	orrs	r3, r0
 8015074:	3401      	adds	r4, #1
 8015076:	9304      	str	r3, [sp, #16]
 8015078:	f814 1b01 	ldrb.w	r1, [r4], #1
 801507c:	482c      	ldr	r0, [pc, #176]	; (8015130 <_vfiprintf_r+0x250>)
 801507e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015082:	2206      	movs	r2, #6
 8015084:	f7eb f934 	bl	80002f0 <memchr>
 8015088:	2800      	cmp	r0, #0
 801508a:	d03f      	beq.n	801510c <_vfiprintf_r+0x22c>
 801508c:	4b29      	ldr	r3, [pc, #164]	; (8015134 <_vfiprintf_r+0x254>)
 801508e:	bb1b      	cbnz	r3, 80150d8 <_vfiprintf_r+0x1f8>
 8015090:	9b03      	ldr	r3, [sp, #12]
 8015092:	3307      	adds	r3, #7
 8015094:	f023 0307 	bic.w	r3, r3, #7
 8015098:	3308      	adds	r3, #8
 801509a:	9303      	str	r3, [sp, #12]
 801509c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801509e:	443b      	add	r3, r7
 80150a0:	9309      	str	r3, [sp, #36]	; 0x24
 80150a2:	e767      	b.n	8014f74 <_vfiprintf_r+0x94>
 80150a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80150a8:	460c      	mov	r4, r1
 80150aa:	2001      	movs	r0, #1
 80150ac:	e7a5      	b.n	8014ffa <_vfiprintf_r+0x11a>
 80150ae:	2300      	movs	r3, #0
 80150b0:	3401      	adds	r4, #1
 80150b2:	9305      	str	r3, [sp, #20]
 80150b4:	4619      	mov	r1, r3
 80150b6:	f04f 0c0a 	mov.w	ip, #10
 80150ba:	4620      	mov	r0, r4
 80150bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80150c0:	3a30      	subs	r2, #48	; 0x30
 80150c2:	2a09      	cmp	r2, #9
 80150c4:	d903      	bls.n	80150ce <_vfiprintf_r+0x1ee>
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d0c5      	beq.n	8015056 <_vfiprintf_r+0x176>
 80150ca:	9105      	str	r1, [sp, #20]
 80150cc:	e7c3      	b.n	8015056 <_vfiprintf_r+0x176>
 80150ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80150d2:	4604      	mov	r4, r0
 80150d4:	2301      	movs	r3, #1
 80150d6:	e7f0      	b.n	80150ba <_vfiprintf_r+0x1da>
 80150d8:	ab03      	add	r3, sp, #12
 80150da:	9300      	str	r3, [sp, #0]
 80150dc:	462a      	mov	r2, r5
 80150de:	4b16      	ldr	r3, [pc, #88]	; (8015138 <_vfiprintf_r+0x258>)
 80150e0:	a904      	add	r1, sp, #16
 80150e2:	4630      	mov	r0, r6
 80150e4:	f7fd fc44 	bl	8012970 <_printf_float>
 80150e8:	4607      	mov	r7, r0
 80150ea:	1c78      	adds	r0, r7, #1
 80150ec:	d1d6      	bne.n	801509c <_vfiprintf_r+0x1bc>
 80150ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80150f0:	07d9      	lsls	r1, r3, #31
 80150f2:	d405      	bmi.n	8015100 <_vfiprintf_r+0x220>
 80150f4:	89ab      	ldrh	r3, [r5, #12]
 80150f6:	059a      	lsls	r2, r3, #22
 80150f8:	d402      	bmi.n	8015100 <_vfiprintf_r+0x220>
 80150fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80150fc:	f7ff f8d8 	bl	80142b0 <__retarget_lock_release_recursive>
 8015100:	89ab      	ldrh	r3, [r5, #12]
 8015102:	065b      	lsls	r3, r3, #25
 8015104:	f53f af12 	bmi.w	8014f2c <_vfiprintf_r+0x4c>
 8015108:	9809      	ldr	r0, [sp, #36]	; 0x24
 801510a:	e711      	b.n	8014f30 <_vfiprintf_r+0x50>
 801510c:	ab03      	add	r3, sp, #12
 801510e:	9300      	str	r3, [sp, #0]
 8015110:	462a      	mov	r2, r5
 8015112:	4b09      	ldr	r3, [pc, #36]	; (8015138 <_vfiprintf_r+0x258>)
 8015114:	a904      	add	r1, sp, #16
 8015116:	4630      	mov	r0, r6
 8015118:	f7fd feb6 	bl	8012e88 <_printf_i>
 801511c:	e7e4      	b.n	80150e8 <_vfiprintf_r+0x208>
 801511e:	bf00      	nop
 8015120:	08016e78 	.word	0x08016e78
 8015124:	08016e98 	.word	0x08016e98
 8015128:	08016e58 	.word	0x08016e58
 801512c:	0801705a 	.word	0x0801705a
 8015130:	08017064 	.word	0x08017064
 8015134:	08012971 	.word	0x08012971
 8015138:	08014ebb 	.word	0x08014ebb
 801513c:	08017060 	.word	0x08017060

08015140 <_read_r>:
 8015140:	b538      	push	{r3, r4, r5, lr}
 8015142:	4d07      	ldr	r5, [pc, #28]	; (8015160 <_read_r+0x20>)
 8015144:	4604      	mov	r4, r0
 8015146:	4608      	mov	r0, r1
 8015148:	4611      	mov	r1, r2
 801514a:	2200      	movs	r2, #0
 801514c:	602a      	str	r2, [r5, #0]
 801514e:	461a      	mov	r2, r3
 8015150:	f7f0 fa3e 	bl	80055d0 <_read>
 8015154:	1c43      	adds	r3, r0, #1
 8015156:	d102      	bne.n	801515e <_read_r+0x1e>
 8015158:	682b      	ldr	r3, [r5, #0]
 801515a:	b103      	cbz	r3, 801515e <_read_r+0x1e>
 801515c:	6023      	str	r3, [r4, #0]
 801515e:	bd38      	pop	{r3, r4, r5, pc}
 8015160:	2400175c 	.word	0x2400175c

08015164 <__ascii_wctomb>:
 8015164:	b149      	cbz	r1, 801517a <__ascii_wctomb+0x16>
 8015166:	2aff      	cmp	r2, #255	; 0xff
 8015168:	bf85      	ittet	hi
 801516a:	238a      	movhi	r3, #138	; 0x8a
 801516c:	6003      	strhi	r3, [r0, #0]
 801516e:	700a      	strbls	r2, [r1, #0]
 8015170:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8015174:	bf98      	it	ls
 8015176:	2001      	movls	r0, #1
 8015178:	4770      	bx	lr
 801517a:	4608      	mov	r0, r1
 801517c:	4770      	bx	lr

0801517e <abort>:
 801517e:	b508      	push	{r3, lr}
 8015180:	2006      	movs	r0, #6
 8015182:	f000 f82b 	bl	80151dc <raise>
 8015186:	2001      	movs	r0, #1
 8015188:	f7f0 fa18 	bl	80055bc <_exit>

0801518c <_raise_r>:
 801518c:	291f      	cmp	r1, #31
 801518e:	b538      	push	{r3, r4, r5, lr}
 8015190:	4604      	mov	r4, r0
 8015192:	460d      	mov	r5, r1
 8015194:	d904      	bls.n	80151a0 <_raise_r+0x14>
 8015196:	2316      	movs	r3, #22
 8015198:	6003      	str	r3, [r0, #0]
 801519a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801519e:	bd38      	pop	{r3, r4, r5, pc}
 80151a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80151a2:	b112      	cbz	r2, 80151aa <_raise_r+0x1e>
 80151a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80151a8:	b94b      	cbnz	r3, 80151be <_raise_r+0x32>
 80151aa:	4620      	mov	r0, r4
 80151ac:	f000 f830 	bl	8015210 <_getpid_r>
 80151b0:	462a      	mov	r2, r5
 80151b2:	4601      	mov	r1, r0
 80151b4:	4620      	mov	r0, r4
 80151b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80151ba:	f000 b817 	b.w	80151ec <_kill_r>
 80151be:	2b01      	cmp	r3, #1
 80151c0:	d00a      	beq.n	80151d8 <_raise_r+0x4c>
 80151c2:	1c59      	adds	r1, r3, #1
 80151c4:	d103      	bne.n	80151ce <_raise_r+0x42>
 80151c6:	2316      	movs	r3, #22
 80151c8:	6003      	str	r3, [r0, #0]
 80151ca:	2001      	movs	r0, #1
 80151cc:	e7e7      	b.n	801519e <_raise_r+0x12>
 80151ce:	2400      	movs	r4, #0
 80151d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80151d4:	4628      	mov	r0, r5
 80151d6:	4798      	blx	r3
 80151d8:	2000      	movs	r0, #0
 80151da:	e7e0      	b.n	801519e <_raise_r+0x12>

080151dc <raise>:
 80151dc:	4b02      	ldr	r3, [pc, #8]	; (80151e8 <raise+0xc>)
 80151de:	4601      	mov	r1, r0
 80151e0:	6818      	ldr	r0, [r3, #0]
 80151e2:	f7ff bfd3 	b.w	801518c <_raise_r>
 80151e6:	bf00      	nop
 80151e8:	24000240 	.word	0x24000240

080151ec <_kill_r>:
 80151ec:	b538      	push	{r3, r4, r5, lr}
 80151ee:	4d07      	ldr	r5, [pc, #28]	; (801520c <_kill_r+0x20>)
 80151f0:	2300      	movs	r3, #0
 80151f2:	4604      	mov	r4, r0
 80151f4:	4608      	mov	r0, r1
 80151f6:	4611      	mov	r1, r2
 80151f8:	602b      	str	r3, [r5, #0]
 80151fa:	f7f0 f9cf 	bl	800559c <_kill>
 80151fe:	1c43      	adds	r3, r0, #1
 8015200:	d102      	bne.n	8015208 <_kill_r+0x1c>
 8015202:	682b      	ldr	r3, [r5, #0]
 8015204:	b103      	cbz	r3, 8015208 <_kill_r+0x1c>
 8015206:	6023      	str	r3, [r4, #0]
 8015208:	bd38      	pop	{r3, r4, r5, pc}
 801520a:	bf00      	nop
 801520c:	2400175c 	.word	0x2400175c

08015210 <_getpid_r>:
 8015210:	f7f0 b9bc 	b.w	800558c <_getpid>

08015214 <_init>:
 8015214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015216:	bf00      	nop
 8015218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801521a:	bc08      	pop	{r3}
 801521c:	469e      	mov	lr, r3
 801521e:	4770      	bx	lr

08015220 <_fini>:
 8015220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015222:	bf00      	nop
 8015224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015226:	bc08      	pop	{r3}
 8015228:	469e      	mov	lr, r3
 801522a:	4770      	bx	lr
