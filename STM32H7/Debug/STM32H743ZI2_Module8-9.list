
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ed8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001edc  08013178  08013178  00023178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015054  08015054  00025054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801505c  0801505c  0002505c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08015064  08015064  00025064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  24000000  0801506c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001158  240001f4  08015260  000301f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400134c  08015260  0003134c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003e723  00000000  00000000  00030222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005b8e  00000000  00000000  0006e945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016e8  00000000  00000000  000744d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001530  00000000  00000000  00075bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e58b  00000000  00000000  000770f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023b5e  00000000  00000000  000b567b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016dcc2  00000000  00000000  000d91d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00246e9b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000070a4  00000000  00000000  00246ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f4 	.word	0x240001f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013160 	.word	0x08013160

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f8 	.word	0x240001f8
 80002dc:	08013160 	.word	0x08013160

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	4613      	mov	r3, r2
 8000694:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	601a      	str	r2, [r3, #0]
	this->address = _address;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	729a      	strb	r2, [r3, #10]
}
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4618      	mov	r0, r3
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

}
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f103 010a 	add.w	r1, r3, #10
 80006d8:	2364      	movs	r3, #100	; 0x64
 80006da:	2201      	movs	r2, #1
 80006dc:	f00c fdd4 	bl	800d288 <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f103 010c 	add.w	r1, r3, #12
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	2202      	movs	r2, #2
 80006ee:	f00c fe61 	bl	800d3b4 <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	899b      	ldrh	r3, [r3, #12]
 80006f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	bf14      	ite	ne
 80006fe:	2301      	movne	r3, #1
 8000700:	2300      	moveq	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	899b      	ldrh	r3, [r3, #12]
 800070e:	b21b      	sxth	r3, r3
 8000710:	b29b      	uxth	r3, r3
 8000712:	0bdb      	lsrs	r3, r3, #15
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	765a      	strb	r2, [r3, #25]
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(this->address), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	899b      	ldrh	r3, [r3, #12]
 8000730:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000734:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	899b      	ldrh	r3, [r3, #12]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	105b      	asrs	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000750:	2300      	movs	r3, #0
 8000752:	737b      	strb	r3, [r7, #13]
 8000754:	7b7b      	ldrb	r3, [r7, #13]
 8000756:	2b05      	cmp	r3, #5
 8000758:	d820      	bhi.n	800079c <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	899b      	ldrh	r3, [r3, #12]
 800075e:	109b      	asrs	r3, r3, #2
 8000760:	b29a      	uxth	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	899b      	ldrh	r3, [r3, #12]
 800076a:	b25b      	sxtb	r3, r3
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	b25a      	sxtb	r2, r3
 8000772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000776:	4053      	eors	r3, r2
 8000778:	b25b      	sxtb	r3, r3
 800077a:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	899b      	ldrh	r3, [r3, #12]
 8000780:	105b      	asrs	r3, r3, #1
 8000782:	b25b      	sxtb	r3, r3
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	b25a      	sxtb	r2, r3
 800078a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800078e:	4053      	eors	r3, r2
 8000790:	b25b      	sxtb	r3, r3
 8000792:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	3301      	adds	r3, #1
 8000798:	737b      	strb	r3, [r7, #13]
 800079a:	e7db      	b.n	8000754 <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	bf0c      	ite	eq
 80007a2:	2301      	moveq	r3, #1
 80007a4:	2300      	movne	r3, #0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	bf0c      	ite	eq
 80007b0:	2301      	moveq	r3, #1
 80007b2:	2300      	movne	r3, #0
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7e1b      	ldrb	r3, [r3, #24]
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d10a      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7e5b      	ldrb	r3, [r3, #25]
 80007c6:	7bba      	ldrb	r2, [r7, #14]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d105      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 80007cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e003      	b.n	80007e0 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
	}
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue() {
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	135b      	asrs	r3, r3, #13
			+ (this->raw_value & 0x3FFF)) * -1;
 80007fe:	b29b      	uxth	r3, r3
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	b29b      	uxth	r3, r3
 8000806:	461a      	mov	r2, r3
 8000808:	0392      	lsls	r2, r2, #14
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	b29a      	uxth	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000814:	b29b      	uxth	r3, r3
 8000816:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800081a:	b29b      	uxth	r3, r3
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	b21b      	sxth	r3, r3
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
	...

08000830 <_ZN10RobotJointC1Ev>:
 *      Author: SakuranohanaTH
 */

#include "RobotJoint.h"

RobotJoint::RobotJoint() {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a32      	ldr	r2, [pc, #200]	; (8000904 <_ZN10RobotJointC1Ev+0xd4>)
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	edd3 7a00 	vldr	s15, [r3]
 8000844:	2002      	movs	r0, #2
 8000846:	eeb0 0a67 	vmov.f32	s0, s15
 800084a:	f000 fecd 	bl	80015e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800084e:	eeb0 7b40 	vmov.f64	d7, d0
 8000852:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	edc3 7a01 	vstr	s15, [r3, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	edd3 7a00 	vldr	s15, [r3]
 8000862:	2003      	movs	r0, #3
 8000864:	eeb0 0a67 	vmov.f32	s0, s15
 8000868:	f000 febe 	bl	80015e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800086c:	eeb0 7b40 	vmov.f64	d7, d0
 8000870:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	edc3 7a02 	vstr	s15, [r3, #8]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	edd3 7a00 	vldr	s15, [r3]
 8000880:	2004      	movs	r0, #4
 8000882:	eeb0 0a67 	vmov.f32	s0, s15
 8000886:	f000 feaf 	bl	80015e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800088a:	eeb0 7b40 	vmov.f64	d7, d0
 800088e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	edc3 7a03 	vstr	s15, [r3, #12]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f04f 0200 	mov.w	r2, #0
 800089e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f04f 0200 	mov.w	r2, #0
 80008a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80008b2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f04f 0200 	mov.w	r2, #0
 80008bc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80008c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f04f 0200 	mov.w	r2, #0
 80008d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f04f 0200 	mov.w	r2, #0
 80008da:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f04f 0200 	mov.w	r2, #0
 80008e4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a07      	ldr	r2, [pc, #28]	; (8000908 <_ZN10RobotJointC1Ev+0xd8>)
 80008ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a06      	ldr	r2, [pc, #24]	; (800090c <_ZN10RobotJointC1Ev+0xdc>)
 80008f4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

}
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	3b03126f 	.word	0x3b03126f
 8000908:	3dcccccd 	.word	0x3dcccccd
 800090c:	3a83126f 	.word	0x3a83126f

08000910 <_ZN10RobotJointD1Ev>:
RobotJoint::~RobotJoint() {
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]

}
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4618      	mov	r0, r3
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <_ZN10RobotJoint9UpdateIVKEffffffff>:
void RobotJoint::UpdateIVK(float _q1, float _q2, float _q3, float _q4, float Vx,
		float Vy, float Vz, float Wz) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b090      	sub	sp, #64	; 0x40
 800092c:	af00      	add	r7, sp, #0
 800092e:	6278      	str	r0, [r7, #36]	; 0x24
 8000930:	ed87 0a08 	vstr	s0, [r7, #32]
 8000934:	edc7 0a07 	vstr	s1, [r7, #28]
 8000938:	ed87 1a06 	vstr	s2, [r7, #24]
 800093c:	edc7 1a05 	vstr	s3, [r7, #20]
 8000940:	ed87 2a04 	vstr	s4, [r7, #16]
 8000944:	edc7 2a03 	vstr	s5, [r7, #12]
 8000948:	ed87 3a02 	vstr	s6, [r7, #8]
 800094c:	edc7 3a01 	vstr	s7, [r7, #4]
	float S13 = sin((_q1 + _q3)*1000.0);
 8000950:	ed97 7a08 	vldr	s14, [r7, #32]
 8000954:	edd7 7a06 	vldr	s15, [r7, #24]
 8000958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800095c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000960:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8000b60 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000964:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000968:	eeb0 0b47 	vmov.f64	d0, d7
 800096c:	f00f f938 	bl	800fbe0 <sin>
 8000970:	eeb0 7b40 	vmov.f64	d7, d0
 8000974:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000978:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float C13 = cos((_q1 + _q3)*1000.0);
 800097c:	ed97 7a08 	vldr	s14, [r7, #32]
 8000980:	edd7 7a06 	vldr	s15, [r7, #24]
 8000984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000988:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800098c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8000b60 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000990:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000994:	eeb0 0b47 	vmov.f64	d0, d7
 8000998:	f00f f8da 	bl	800fb50 <cos>
 800099c:	eeb0 7b40 	vmov.f64	d7, d0
 80009a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009a4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float S3 = sin(_q3*1000.0);
 80009a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80009ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009b0:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8000b60 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 80009b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009b8:	eeb0 0b47 	vmov.f64	d0, d7
 80009bc:	f00f f910 	bl	800fbe0 <sin>
 80009c0:	eeb0 7b40 	vmov.f64	d7, d0
 80009c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009c8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S1 = sin(_q1*1000.0);
 80009cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80009d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009d4:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8000b60 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 80009d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009dc:	eeb0 0b47 	vmov.f64	d0, d7
 80009e0:	f00f f8fe 	bl	800fbe0 <sin>
 80009e4:	eeb0 7b40 	vmov.f64	d7, d0
 80009e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009ec:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float C1 = cos(_q1*1000.0);
 80009f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80009f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009f8:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8000b60 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 80009fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a00:	eeb0 0b47 	vmov.f64	d0, d7
 8000a04:	f00f f8a4 	bl	800fb50 <cos>
 8000a08:	eeb0 7b40 	vmov.f64	d7, d0
 8000a0c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a10:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float L3S3 = this->L3 * S3;
 8000a14:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000a18:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8000b68 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a20:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	this->w_q1 = ((Vx * C13 + Vy * S13) / (S3 * this->L12))* 1000.0;
 8000a24:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a28:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000a2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a30:	edd7 6a03 	vldr	s13, [r7, #12]
 8000a34:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000a38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a3c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000a40:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000a44:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000b6c <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000a48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a50:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000b70 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000a54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	this->w_q2 = Vz * 1000.0;
 8000a5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a62:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000b70 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000a66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000a70:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000a74:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000b68 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000a78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a7c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000a80:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8000b74 <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000a84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a8c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000a90:	eddf 6a39 	vldr	s13, [pc, #228]	; 8000b78 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000a94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aa4:	eef1 6a67 	vneg.f32	s13, s15
			/ (L3S3 * this->L12)
 8000aa8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000aac:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000b6c <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ab4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000ab8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000abc:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000b68 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000ac0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000ac4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000ac8:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 8000b74 <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000acc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000ad0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000ad4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000ad8:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8000b78 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000adc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000ae0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000ae4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ae8:	ee26 6aa7 	vmul.f32	s12, s13, s15
					/ (L3S3 * this->L12)) * 1000.0;
 8000aec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000af0:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000b6c <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000af4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000af8:	eec6 7a26 	vdiv.f32	s15, s12, s13
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000afc:	ee77 7a67 	vsub.f32	s15, s14, s15
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000b00:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000b70 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000b04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	this->w_q4 = ((Vx * C1 + Vy * S1 + this->L3 * Wz * S3) / (L3S3)) * 1000.0;
 8000b0e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b12:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000b16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b1a:	edd7 6a03 	vldr	s13, [r7, #12]
 8000b1e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000b22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b2e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000b68 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000b32:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000b36:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000b3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b3e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000b42:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b4a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000b70 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000b4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
}
 8000b58:	bf00      	nop
 8000b5a:	3740      	adds	r7, #64	; 0x40
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	00000000 	.word	0x00000000
 8000b64:	408f4000 	.word	0x408f4000
 8000b68:	439d8000 	.word	0x439d8000
 8000b6c:	43bfa000 	.word	0x43bfa000
 8000b70:	447a0000 	.word	0x447a0000
 8000b74:	41540000 	.word	0x41540000
 8000b78:	43b90000 	.word	0x43b90000

08000b7c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>:
void RobotJoint::UpdateQuinticCoff(float T, float Start_pos, float Final_pos,
		float Start_velocity, float Final_velocity, float Start_acceleration,
		float Final_acceleration) {
 8000b7c:	b480      	push	{r7}
 8000b7e:	b091      	sub	sp, #68	; 0x44
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	61f8      	str	r0, [r7, #28]
 8000b84:	ed87 0a06 	vstr	s0, [r7, #24]
 8000b88:	edc7 0a05 	vstr	s1, [r7, #20]
 8000b8c:	ed87 1a04 	vstr	s2, [r7, #16]
 8000b90:	edc7 1a03 	vstr	s3, [r7, #12]
 8000b94:	ed87 2a02 	vstr	s4, [r7, #8]
 8000b98:	edc7 2a01 	vstr	s5, [r7, #4]
 8000b9c:	ed87 3a00 	vstr	s6, [r7]
	this->C0 = Start_pos;
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	this->C1 = Start_velocity;
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	this->C2 = Start_acceleration / 2.0;
 8000bb0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000bb4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000bb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

	const float A = Final_pos
			- (Start_pos + (Start_velocity * T)
 8000bc2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000bc6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bce:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bd2:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ (Start_acceleration * T * T / 2));
 8000bd6:	edd7 6a01 	vldr	s13, [r7, #4]
 8000bda:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bde:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000be2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000be6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000bea:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000bee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float A = Final_pos
 8000bf6:	ed97 7a04 	vldr	s14, [r7, #16]
 8000bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bfe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	const float B = Final_velocity
			- (Start_velocity + (Start_acceleration * T));
 8000c02:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c06:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c12:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float B = Final_velocity
 8000c16:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c1e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	const float C = Final_acceleration - Start_acceleration;
 8000c22:	ed97 7a00 	vldr	s14, [r7]
 8000c26:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c2e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	const float T2 = T * T;
 8000c32:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c36:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000c3a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	const float T3 = T * T * T;
 8000c3e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c42:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000c46:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c4e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	const float T4 = T * T * T * T;
 8000c52:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c56:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000c5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c62:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c6a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	const float T5 = T * T * T * T * T;
 8000c6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c72:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000c76:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c86:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c8e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	this->C3 = (10.0 * A / T3) - (4.0 * B / T2) + (C / (2.0 * T));
 8000c92:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000c96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c9a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000c9e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000ca2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000ca6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000caa:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000cae:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000cb2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cb6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000cba:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000cbe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000cc2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000cc6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000cca:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000cce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000cd2:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000cd6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cda:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cde:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000ce2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000ce6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000cea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	this->C4 = (-15.0 * A / T4) + (7.0 * B / T3) - (C / T2);
 8000cf4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000cf8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cfc:	eeba 6b0e 	vmov.f64	d6, #174	; 0xc1700000 -15.0
 8000d00:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000d04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d0c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000d10:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000d14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d18:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8000d1c:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000d20:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d24:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000d28:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000d2c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d30:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8000d34:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000d38:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8000d3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d40:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d44:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	this->C5 = (6.0 * A / T5) - (3.0 * B / T4) + (C / (2.0 * T3));
 8000d4e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000d52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d56:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8000d5a:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000d5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000d62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d66:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000d6a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000d6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d72:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000d76:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000d7a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d7e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000d82:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000d86:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000d8a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000d8e:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000d92:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d9a:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000d9e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000da2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000da6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	this->T = T;
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

}
 8000db8:	bf00      	nop
 8000dba:	3744      	adds	r7, #68	; 0x44
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <_ZN10RobotJoint13KalmanFillterEf>:
void RobotJoint::KalmanFillter(float theta_k) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	ed2d 8b08 	vpush	{d8-d11}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	ed87 0a00 	vstr	s0, [r7]
	float X1 = this->X11;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = this->X21;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000de2:	623b      	str	r3, [r7, #32]
	float P11 = this->p11;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000dea:	61fb      	str	r3, [r7, #28]
	float P12 = this->p12;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000df2:	61bb      	str	r3, [r7, #24]
	float P21 = this->p21;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000dfa:	617b      	str	r3, [r7, #20]
	float P22 = this->p22;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000e02:	613b      	str	r3, [r7, #16]
	float Q = this->Q;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000e0a:	60fb      	str	r3, [r7, #12]
	float R = this->R;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000e12:	60bb      	str	r3, [r7, #8]

	this->X11 = X1 + (X2 * this->dt)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	ed93 7a00 	vldr	s14, [r3]
 8000e1a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e22:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e2a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- ((X1 - theta_k + X2 * this->dt)
 8000e2e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e32:	edd7 7a00 	vldr	s15, [r7]
 8000e36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	edd3 6a00 	vldr	s13, [r3]
 8000e40:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e4c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	ed93 7a00 	vldr	s14, [r3]
 8000e56:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e66:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000e6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e6e:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	edd3 7a00 	vldr	s15, [r3]
 8000e78:	2004      	movs	r0, #4
 8000e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e7e:	f000 fbb3 	bl	80015e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000e82:	eeb0 7b40 	vmov.f64	d7, d0
 8000e86:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000e8a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000e8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e92:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	ed93 7a00 	vldr	s14, [r3]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	edd3 5a00 	vldr	s11, [r3]
 8000ea2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ea6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000eaa:	edd7 7a06 	vldr	s15, [r7, #24]
 8000eae:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eba:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000ebe:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000ec2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ec6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000eca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	edd3 6a00 	vldr	s13, [r3]
 8000ed4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ed8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ee0:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000ee4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ee8:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	edd3 7a00 	vldr	s15, [r3]
 8000ef2:	2004      	movs	r0, #4
 8000ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef8:	f000 fb76 	bl	80015e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000efc:	eeb0 7b40 	vmov.f64	d7, d0
 8000f00:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000f04:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000f08:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f0c:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	ed93 7a00 	vldr	s14, [r3]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	edd3 5a00 	vldr	s11, [r3]
 8000f1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f20:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000f24:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f28:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f34:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000f38:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- ((X1 - theta_k + X2 * this->dt)
 8000f3c:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000f40:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X11 = X1 + (X2 * this->dt)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	this->X21 = X2
 8000f4a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f4e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8000f52:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f56:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	edd3 7a00 	vldr	s15, [r3]
 8000f60:	2003      	movs	r0, #3
 8000f62:	eeb0 0a67 	vmov.f32	s0, s15
 8000f66:	f000 fb3f 	bl	80015e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000f6a:	eeb0 7b40 	vmov.f64	d7, d0
 8000f6e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000f72:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000f76:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	ed93 7a00 	vldr	s14, [r3]
 8000f80:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f8c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000f90:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f98:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (X1 - theta_k + X2 * this->dt))
 8000f9c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000fa0:	edd7 7a00 	vldr	s15, [r7]
 8000fa4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	edd3 5a00 	vldr	s11, [r3]
 8000fae:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fb2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8000fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fbe:	ee26 9b07 	vmul.f64	d9, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000fc2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fc6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	edd3 6a00 	vldr	s13, [r3]
 8000fd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe0:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000fe4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fe8:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	edd3 7a00 	vldr	s15, [r3]
 8000ff2:	2004      	movs	r0, #4
 8000ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff8:	f000 faf6 	bl	80015e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000ffc:	eeb0 7b40 	vmov.f64	d7, d0
 8001000:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001004:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001008:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800100c:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	ed93 7a00 	vldr	s14, [r3]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	edd3 5a00 	vldr	s11, [r3]
 800101c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001020:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001024:	edd7 7a06 	vldr	s15, [r7, #24]
 8001028:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800102c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001030:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001034:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001038:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 800103c:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001040:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X21 = X2
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	ed93 7a00 	vldr	s14, [r3]
 8001050:	edd7 7a05 	vldr	s15, [r7, #20]
 8001054:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001058:	edd7 7a07 	vldr	s15, [r7, #28]
 800105c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001060:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001064:	edd7 7a03 	vldr	s15, [r7, #12]
 8001068:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	edd3 7a00 	vldr	s15, [r3]
 8001072:	2004      	movs	r0, #4
 8001074:	eeb0 0a67 	vmov.f32	s0, s15
 8001078:	f000 fab6 	bl	80015e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800107c:	eeb0 7b40 	vmov.f64	d7, d0
 8001080:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001084:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001088:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800108c:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	ed93 7a00 	vldr	s14, [r3]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	edd3 5a00 	vldr	s11, [r3]
 800109c:	edd7 7a04 	vldr	s15, [r7, #16]
 80010a0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80010a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80010a8:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80010ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010b4:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80010b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80010bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80010c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	edd3 6a00 	vldr	s13, [r3]
 80010ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80010ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d6:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80010da:	edd7 7a03 	vldr	s15, [r7, #12]
 80010de:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	edd3 7a00 	vldr	s15, [r3]
 80010e8:	2004      	movs	r0, #4
 80010ea:	eeb0 0a67 	vmov.f32	s0, s15
 80010ee:	f000 fa7b 	bl	80015e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80010f2:	eeb0 7b40 	vmov.f64	d7, d0
 80010f6:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80010fa:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80010fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001102:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	ed93 7a00 	vldr	s14, [r3]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	edd3 5a00 	vldr	s11, [r3]
 8001112:	edd7 7a04 	vldr	s15, [r7, #16]
 8001116:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800111a:	edd7 7a06 	vldr	s15, [r7, #24]
 800111e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001126:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800112a:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800112e:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001132:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001136:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800113a:	eeb1 8b47 	vneg.f64	d8, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	ed93 7a00 	vldr	s14, [r3]
 8001144:	edd7 7a05 	vldr	s15, [r7, #20]
 8001148:	ee27 7a27 	vmul.f32	s14, s14, s15
 800114c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001154:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001158:	edd7 7a03 	vldr	s15, [r7, #12]
 800115c:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	edd3 7a00 	vldr	s15, [r3]
 8001166:	2004      	movs	r0, #4
 8001168:	eeb0 0a67 	vmov.f32	s0, s15
 800116c:	f000 fa3c 	bl	80015e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001170:	eeb0 7b40 	vmov.f64	d7, d0
 8001174:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001178:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800117c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001180:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	ed93 7a00 	vldr	s14, [r3]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	edd3 5a00 	vldr	s11, [r3]
 8001190:	edd7 7a04 	vldr	s15, [r7, #16]
 8001194:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001198:	edd7 7a06 	vldr	s15, [r7, #24]
 800119c:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80011a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011a8:	ee36 7b07 	vadd.f64	d7, d6, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80011ac:	ee28 7b07 	vmul.f64	d7, d8, d7
 80011b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	ed93 7a00 	vldr	s14, [r3]
 80011c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80011cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d0:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80011d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d8:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	2004      	movs	r0, #4
 80011e4:	eeb0 0a67 	vmov.f32	s0, s15
 80011e8:	f000 f9fe 	bl	80015e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011ec:	eeb0 7b40 	vmov.f64	d7, d0
 80011f0:	ee29 6b07 	vmul.f64	d6, d9, d7
 80011f4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80011f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011fc:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	ed93 7a00 	vldr	s14, [r3]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	edd3 5a00 	vldr	s11, [r3]
 800120c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001210:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001214:	edd7 7a06 	vldr	s15, [r7, #24]
 8001218:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800121c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001220:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001224:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001228:	ed97 7a07 	vldr	s14, [r7, #28]
 800122c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001230:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	edd3 6a00 	vldr	s13, [r3]
 800123a:	edd7 7a05 	vldr	s15, [r7, #20]
 800123e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001246:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800124a:	edd7 7a03 	vldr	s15, [r7, #12]
 800124e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	edd3 7a00 	vldr	s15, [r3]
 8001258:	2004      	movs	r0, #4
 800125a:	eeb0 0a67 	vmov.f32	s0, s15
 800125e:	f000 f9c3 	bl	80015e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001262:	eeb0 7b40 	vmov.f64	d7, d0
 8001266:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800126a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800126e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001272:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	ed93 7a00 	vldr	s14, [r3]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	edd3 5a00 	vldr	s11, [r3]
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800128a:	edd7 7a06 	vldr	s15, [r7, #24]
 800128e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001296:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800129a:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800129e:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80012a2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80012a6:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012aa:	eeb1 8b47 	vneg.f64	d8, d7
			* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12);
 80012ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b2:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	2003      	movs	r0, #3
 80012be:	eeb0 0a67 	vmov.f32	s0, s15
 80012c2:	f000 f991 	bl	80015e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80012c6:	eeb0 7b40 	vmov.f64	d7, d0
 80012ca:	ee29 7b07 	vmul.f64	d7, d9, d7
 80012ce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80012d2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	ed93 7a00 	vldr	s14, [r3]
 80012dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80012ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80012f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80012f8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80012fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	ed93 7a00 	vldr	s14, [r3]
 800130c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001310:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001314:	edd7 7a05 	vldr	s15, [r7, #20]
 8001318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001320:	edd7 7a03 	vldr	s15, [r7, #12]
 8001324:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	edd3 7a00 	vldr	s15, [r3]
 800132e:	2003      	movs	r0, #3
 8001330:	eeb0 0a67 	vmov.f32	s0, s15
 8001334:	f000 f958 	bl	80015e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001338:	eeb0 7b40 	vmov.f64	d7, d0
 800133c:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001340:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001344:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001348:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 800134c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001350:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	2003      	movs	r0, #3
 800135c:	eeb0 0a67 	vmov.f32	s0, s15
 8001360:	f000 f942 	bl	80015e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001364:	eeb0 7b40 	vmov.f64	d7, d0
 8001368:	ee29 7b07 	vmul.f64	d7, d9, d7
 800136c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001370:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	ed93 7a00 	vldr	s14, [r3]
 800137a:	edd7 7a04 	vldr	s15, [r7, #16]
 800137e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001382:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001386:	ee36 6b07 	vadd.f64	d6, d6, d7
 800138a:	edd7 7a05 	vldr	s15, [r7, #20]
 800138e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001392:	ee36 9b07 	vadd.f64	d9, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	ed93 7a00 	vldr	s14, [r3]
 800139c:	edd7 7a05 	vldr	s15, [r7, #20]
 80013a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80013a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ac:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80013b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80013b4:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	edd3 7a00 	vldr	s15, [r3]
 80013be:	2004      	movs	r0, #4
 80013c0:	eeb0 0a67 	vmov.f32	s0, s15
 80013c4:	f000 f910 	bl	80015e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80013c8:	eeb0 7b40 	vmov.f64	d7, d0
 80013cc:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80013d0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80013d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013d8:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	ed93 7a00 	vldr	s14, [r3]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	edd3 5a00 	vldr	s11, [r3]
 80013e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80013ec:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80013f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80013f4:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80013f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001400:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001404:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001408:	ed97 7a07 	vldr	s14, [r7, #28]
 800140c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001410:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	edd3 6a00 	vldr	s13, [r3]
 800141a:	edd7 7a05 	vldr	s15, [r7, #20]
 800141e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001426:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800142a:	edd7 7a03 	vldr	s15, [r7, #12]
 800142e:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	edd3 7a00 	vldr	s15, [r3]
 8001438:	2004      	movs	r0, #4
 800143a:	eeb0 0a67 	vmov.f32	s0, s15
 800143e:	f000 f8d3 	bl	80015e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001442:	eeb0 7b40 	vmov.f64	d7, d0
 8001446:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800144a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800144e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001452:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	ed93 7a00 	vldr	s14, [r3]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	edd3 5a00 	vldr	s11, [r3]
 8001462:	edd7 7a04 	vldr	s15, [r7, #16]
 8001466:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800146a:	edd7 7a06 	vldr	s15, [r7, #24]
 800146e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001476:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800147a:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800147e:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001482:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001486:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	this->p22 = P22 + Q * pow(this->dt, 2)
 8001490:	edd7 7a04 	vldr	s15, [r7, #16]
 8001494:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001498:	edd7 7a03 	vldr	s15, [r7, #12]
 800149c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	2002      	movs	r0, #2
 80014a8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ac:	f000 f89c 	bl	80015e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014b0:	eeb0 7b40 	vmov.f64	d7, d0
 80014b4:	ee29 7b07 	vmul.f64	d7, d9, d7
 80014b8:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 80014bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80014c0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	edd3 7a00 	vldr	s15, [r3]
 80014ca:	2003      	movs	r0, #3
 80014cc:	eeb0 0a67 	vmov.f32	s0, s15
 80014d0:	f000 f88a 	bl	80015e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014d4:	eeb0 7b40 	vmov.f64	d7, d0
 80014d8:	ee29 7b07 	vmul.f64	d7, d9, d7
 80014dc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80014e0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	ed93 7a00 	vldr	s14, [r3]
 80014ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80014ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014f6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80014fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001502:	ee36 9b07 	vadd.f64	d9, d6, d7
					* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21))
 8001506:	edd7 7a03 	vldr	s15, [r7, #12]
 800150a:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	edd3 7a00 	vldr	s15, [r3]
 8001514:	2003      	movs	r0, #3
 8001516:	eeb0 0a67 	vmov.f32	s0, s15
 800151a:	f000 f865 	bl	80015e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800151e:	eeb0 7b40 	vmov.f64	d7, d0
 8001522:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8001526:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800152a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	ed93 7a00 	vldr	s14, [r3]
 8001534:	edd7 7a04 	vldr	s15, [r7, #16]
 8001538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001540:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001544:	edd7 7a05 	vldr	s15, [r7, #20]
 8001548:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800154c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001550:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001554:	ed97 7a07 	vldr	s14, [r7, #28]
 8001558:	edd7 7a02 	vldr	s15, [r7, #8]
 800155c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	edd3 6a00 	vldr	s13, [r3]
 8001566:	edd7 7a05 	vldr	s15, [r7, #20]
 800156a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800156e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001572:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001576:	edd7 7a03 	vldr	s15, [r7, #12]
 800157a:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	2004      	movs	r0, #4
 8001586:	eeb0 0a67 	vmov.f32	s0, s15
 800158a:	f000 f82d 	bl	80015e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800158e:	eeb0 7b40 	vmov.f64	d7, d0
 8001592:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001596:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800159a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800159e:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	ed93 7a00 	vldr	s14, [r3]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	edd3 5a00 	vldr	s11, [r3]
 80015ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80015b2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80015b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80015ba:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80015be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015c6:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80015ca:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 80015ce:	ee38 7b47 	vsub.f64	d7, d8, d7
 80015d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p22 = P22 + Q * pow(this->dt, 2)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

}
 80015dc:	bf00      	nop
 80015de:	3728      	adds	r7, #40	; 0x28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	ecbd 8b08 	vpop	{d8-d11}
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80015f2:	6038      	str	r0, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80015f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80015f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	ee06 3a90 	vmov	s13, r3
 8001602:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8001606:	eeb0 1b46 	vmov.f64	d1, d6
 800160a:	eeb0 0b47 	vmov.f64	d0, d7
 800160e:	f00d ffdb 	bl	800f5c8 <pow>
 8001612:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8001616:	eeb0 0b47 	vmov.f64	d0, d7
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	ed87 0a01 	vstr	s0, [r7, #4]
 800162a:	edd7 7a01 	vldr	s15, [r7, #4]
 800162e:	fefb 7a67 	vrintm.f32	s15, s15
 8001632:	eeb0 0a67 	vmov.f32	s0, s15
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	ed87 0a01 	vstr	s0, [r7, #4]
 800164a:	edd7 7a01 	vldr	s15, [r7, #4]
 800164e:	fef8 7a67 	vrinta.f32	s15, s15
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>:
 *
 *  Created on: Jan 30, 2022
 *      Author: SakuranohanaTH
 */
#include "ServoMotor.h"
ServoMotor::ServoMotor(TIM_HandleTypeDef *_servo_htim,
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
		uint32_t _SERVO_TIM_CHANNEL) {
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	22b4      	movs	r2, #180	; 0xb4
 8001682:	615a      	str	r2, [r3, #20]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2200      	movs	r2, #0
 8001688:	761a      	strb	r2, [r3, #24]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	765a      	strb	r2, [r3, #25]
	this->servo_htim = _servo_htim;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	601a      	str	r2, [r3, #0]
	this->SERVO_TIM_CHANNEL = _SERVO_TIM_CHANNEL;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	605a      	str	r2, [r3, #4]
	 * 2ms/20ms = 0.1 = 10%
	 *
	 * CRR = 0.1 * (19999 + 1) = 2000
	 *
	 */
	this->servo_htim->Instance->PSC = _PSC_SERVO_MOTOR - 1U;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	22ef      	movs	r2, #239	; 0xef
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
	this->servo_htim->Instance->ARR = _ARR_SERVO_MOTOR - 1U;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80016b0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <_ZN10ServoMotorD1Ev>:
ServoMotor::~ServoMotor() {
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
}
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <_ZN10ServoMotor11ServoEnableEv>:
void ServoMotor::ServoEnable() {
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Enable PWM for Servo Motor
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4619      	mov	r1, r3
 80016e8:	4610      	mov	r0, r2
 80016ea:	f00a fbbd 	bl	800be68 <HAL_TIM_PWM_Start>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <_ZN10ServoMotor17ServoRotateDegreeEl>:
void ServoMotor::ServoDisable() {
	HAL_TIM_PWM_Stop(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Disable PWM for Servo Motor
}
void ServoMotor::ServoRotateDegree(int32_t _sdegrotate) {
 80016f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
	if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d13f      	bne.n	800178a <_ZN10ServoMotor17ServoRotateDegreeEl+0x92>
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691c      	ldr	r4, [r3, #16]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	695d      	ldr	r5, [r3, #20]
				_sdegrotate, this->minsdeg, this->maxsdeg, // Mapping degree value to CRR value
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171a:	3301      	adds	r3, #1
 800171c:	ee07 3a90 	vmov	s15, r3
 8001720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001724:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 80019ac <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001728:	ee67 7a87 	vmul.f32	s15, s15, s14
 800172c:	eeb0 0a67 	vmov.f32	s0, s15
 8001730:	f7ff ff86 	bl	8001640 <_ZSt5roundf>
 8001734:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001738:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800173c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	3301      	adds	r3, #1
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001752:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80019b0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001756:	ee67 7a87 	vmul.f32	s15, s15, s14
 800175a:	eeb0 0a67 	vmov.f32	s0, s15
 800175e:	f7ff ff5f 	bl	8001620 <_ZSt5floorf>
 8001762:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001766:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800176a:	ee17 3a90 	vmov	r3, s15
 800176e:	9301      	str	r3, [sp, #4]
 8001770:	9600      	str	r6, [sp, #0]
 8001772:	462b      	mov	r3, r5
 8001774:	4622      	mov	r2, r4
 8001776:	6839      	ldr	r1, [r7, #0]
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f9cf 	bl	8001b1c <_ZN10ServoMotor10GripperMapElllll>
 800177e:	4602      	mov	r2, r0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR3 = 0;
		this->servo_htim->Instance->CCR4 = 0;
		this->servo_htim->Instance->CCR5 = 0;
		this->servo_htim->Instance->CCR6 = 0;
	}
}
 8001788:	e176      	b.n	8001a78 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_2) {
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b04      	cmp	r3, #4
 8001790:	d13f      	bne.n	8001812 <_ZN10ServoMotor17ServoRotateDegreeEl+0x11a>
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691c      	ldr	r4, [r3, #16]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a2:	3301      	adds	r3, #1
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ac:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80019ac <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80017b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b4:	eeb0 0a67 	vmov.f32	s0, s15
 80017b8:	f7ff ff42 	bl	8001640 <_ZSt5roundf>
 80017bc:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80017c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017c4:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	3301      	adds	r3, #1
 80017d2:	ee07 3a90 	vmov	s15, r3
 80017d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017da:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80019b0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 80017de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017e2:	eeb0 0a67 	vmov.f32	s0, s15
 80017e6:	f7ff ff1b 	bl	8001620 <_ZSt5floorf>
 80017ea:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80017ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017f2:	ee17 3a90 	vmov	r3, s15
 80017f6:	9301      	str	r3, [sp, #4]
 80017f8:	9600      	str	r6, [sp, #0]
 80017fa:	462b      	mov	r3, r5
 80017fc:	4622      	mov	r2, r4
 80017fe:	6839      	ldr	r1, [r7, #0]
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f98b 	bl	8001b1c <_ZN10ServoMotor10GripperMapElllll>
 8001806:	4602      	mov	r2, r0
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001810:	e132      	b.n	8001a78 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b08      	cmp	r3, #8
 8001818:	d13f      	bne.n	800189a <_ZN10ServoMotor17ServoRotateDegreeEl+0x1a2>
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691c      	ldr	r4, [r3, #16]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182a:	3301      	adds	r3, #1
 800182c:	ee07 3a90 	vmov	s15, r3
 8001830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001834:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80019ac <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001838:	ee67 7a87 	vmul.f32	s15, s15, s14
 800183c:	eeb0 0a67 	vmov.f32	s0, s15
 8001840:	f7ff fefe 	bl	8001640 <_ZSt5roundf>
 8001844:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001848:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800184c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001858:	3301      	adds	r3, #1
 800185a:	ee07 3a90 	vmov	s15, r3
 800185e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001862:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80019b0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001866:	ee67 7a87 	vmul.f32	s15, s15, s14
 800186a:	eeb0 0a67 	vmov.f32	s0, s15
 800186e:	f7ff fed7 	bl	8001620 <_ZSt5floorf>
 8001872:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001876:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800187a:	ee17 3a90 	vmov	r3, s15
 800187e:	9301      	str	r3, [sp, #4]
 8001880:	9600      	str	r6, [sp, #0]
 8001882:	462b      	mov	r3, r5
 8001884:	4622      	mov	r2, r4
 8001886:	6839      	ldr	r1, [r7, #0]
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 f947 	bl	8001b1c <_ZN10ServoMotor10GripperMapElllll>
 800188e:	4602      	mov	r2, r0
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001898:	e0ee      	b.n	8001a78 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_4) {
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b0c      	cmp	r3, #12
 80018a0:	d13f      	bne.n	8001922 <_ZN10ServoMotor17ServoRotateDegreeEl+0x22a>
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691c      	ldr	r4, [r3, #16]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b2:	3301      	adds	r3, #1
 80018b4:	ee07 3a90 	vmov	s15, r3
 80018b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018bc:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80019ac <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80018c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c4:	eeb0 0a67 	vmov.f32	s0, s15
 80018c8:	f7ff feba 	bl	8001640 <_ZSt5roundf>
 80018cc:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 80018d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018d4:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	3301      	adds	r3, #1
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ea:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80019b0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 80018ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f2:	eeb0 0a67 	vmov.f32	s0, s15
 80018f6:	f7ff fe93 	bl	8001620 <_ZSt5floorf>
 80018fa:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 80018fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001902:	ee17 3a90 	vmov	r3, s15
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	9600      	str	r6, [sp, #0]
 800190a:	462b      	mov	r3, r5
 800190c:	4622      	mov	r2, r4
 800190e:	6839      	ldr	r1, [r7, #0]
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f903 	bl	8001b1c <_ZN10ServoMotor10GripperMapElllll>
 8001916:	4602      	mov	r2, r0
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001920:	e0aa      	b.n	8001a78 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b10      	cmp	r3, #16
 8001928:	d144      	bne.n	80019b4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2bc>
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691c      	ldr	r4, [r3, #16]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193a:	3301      	adds	r3, #1
 800193c:	ee07 3a90 	vmov	s15, r3
 8001940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001944:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80019ac <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800194c:	eeb0 0a67 	vmov.f32	s0, s15
 8001950:	f7ff fe76 	bl	8001640 <_ZSt5roundf>
 8001954:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800195c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	3301      	adds	r3, #1
 800196a:	ee07 3a90 	vmov	s15, r3
 800196e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001972:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80019b0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001976:	ee67 7a87 	vmul.f32	s15, s15, s14
 800197a:	eeb0 0a67 	vmov.f32	s0, s15
 800197e:	f7ff fe4f 	bl	8001620 <_ZSt5floorf>
 8001982:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001986:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800198a:	ee17 3a90 	vmov	r3, s15
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	9600      	str	r6, [sp, #0]
 8001992:	462b      	mov	r3, r5
 8001994:	4622      	mov	r2, r4
 8001996:	6839      	ldr	r1, [r7, #0]
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 f8bf 	bl	8001b1c <_ZN10ServoMotor10GripperMapElllll>
 800199e:	4602      	mov	r2, r0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	659a      	str	r2, [r3, #88]	; 0x58
}
 80019a8:	e066      	b.n	8001a78 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
 80019aa:	bf00      	nop
 80019ac:	3d4ccccd 	.word	0x3d4ccccd
 80019b0:	3e19999a 	.word	0x3e19999a
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_6) {
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b14      	cmp	r3, #20
 80019ba:	d13f      	bne.n	8001a3c <_ZN10ServoMotor17ServoRotateDegreeEl+0x344>
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691c      	ldr	r4, [r3, #16]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	3301      	adds	r3, #1
 80019ce:	ee07 3a90 	vmov	s15, r3
 80019d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d6:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 80019ac <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80019da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019de:	eeb0 0a67 	vmov.f32	s0, s15
 80019e2:	f7ff fe2d 	bl	8001640 <_ZSt5roundf>
 80019e6:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 80019ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ee:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	3301      	adds	r3, #1
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a04:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 80019b0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001a08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a10:	f7ff fe06 	bl	8001620 <_ZSt5floorf>
 8001a14:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001a18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a1c:	ee17 3a90 	vmov	r3, s15
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	9600      	str	r6, [sp, #0]
 8001a24:	462b      	mov	r3, r5
 8001a26:	4622      	mov	r2, r4
 8001a28:	6839      	ldr	r1, [r7, #0]
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f876 	bl	8001b1c <_ZN10ServoMotor10GripperMapElllll>
 8001a30:	4602      	mov	r2, r0
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001a3a:	e01d      	b.n	8001a78 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
		this->servo_htim->Instance->CCR1 = 0;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2200      	movs	r2, #0
 8001a44:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR2 = 0;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	639a      	str	r2, [r3, #56]	; 0x38
		this->servo_htim->Instance->CCR3 = 0;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2200      	movs	r2, #0
 8001a58:	63da      	str	r2, [r3, #60]	; 0x3c
		this->servo_htim->Instance->CCR4 = 0;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2200      	movs	r2, #0
 8001a62:	641a      	str	r2, [r3, #64]	; 0x40
		this->servo_htim->Instance->CCR5 = 0;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	659a      	str	r2, [r3, #88]	; 0x58
		this->servo_htim->Instance->CCR6 = 0;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2200      	movs	r2, #0
 8001a76:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a80 <_ZN10ServoMotor20setDegreeGripperOpenEl>:
void ServoMotor::setDegreeGripperOpen(int32_t _sdegopen) {
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
	this->sdegopen = _sdegopen;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	609a      	str	r2, [r3, #8]
	this->isSetDegreeGripperOpen = true;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	761a      	strb	r2, [r3, #24]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <_ZN10ServoMotor21setDegreeGripperCloseEl>:
void ServoMotor::setDegreeGripperClose(int32_t _sdegclose) {
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	6039      	str	r1, [r7, #0]
	this->sdegclose = _sdegclose;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	60da      	str	r2, [r3, #12]
	this->isSetDegreeGripperClose = true;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	765a      	strb	r2, [r3, #25]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_ZN10ServoMotor12GripperCloseEv>:
void ServoMotor::GripperClose() {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperClose)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7e5b      	ldrb	r3, [r3, #25]
 8001ad0:	f083 0301 	eor.w	r3, r3, #1
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d106      	bne.n	8001ae8 <_ZN10ServoMotor12GripperCloseEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegclose);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff fe09 	bl	80016f8 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001ae6:	e000      	b.n	8001aea <_ZN10ServoMotor12GripperCloseEv+0x26>
		return;
 8001ae8:	bf00      	nop
}
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_ZN10ServoMotor11GripperOpenEv>:
void ServoMotor::GripperOpen() {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperOpen)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	7e1b      	ldrb	r3, [r3, #24]
 8001afc:	f083 0301 	eor.w	r3, r3, #1
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d106      	bne.n	8001b14 <_ZN10ServoMotor11GripperOpenEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegopen);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff fdf3 	bl	80016f8 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001b12:	e000      	b.n	8001b16 <_ZN10ServoMotor11GripperOpenEv+0x26>
		return;
 8001b14:	bf00      	nop
}
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <_ZN10ServoMotor10GripperMapElllll>:
int32_t ServoMotor::GripperMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	69f9      	ldr	r1, [r7, #28]
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	1a8a      	subs	r2, r1, r2
 8001b36:	fb02 f203 	mul.w	r2, r2, r3
 8001b3a:	6839      	ldr	r1, [r7, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	1acb      	subs	r3, r1, r3
 8001b40:	fb92 f2f3 	sdiv	r2, r2, r3
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	4413      	add	r3, r2
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b62:	eef0 7ae7 	vabs.f32	s15, s15
 8001b66:	eeb0 0a67 	vmov.f32	s0, s15
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4a18      	ldr	r2, [pc, #96]	; (8001be8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8001b86:	615a      	str	r2, [r3, #20]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4a18      	ldr	r2, [pc, #96]	; (8001bec <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001b8c:	619a      	str	r2, [r3, #24]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b94:	61da      	str	r2, [r3, #28]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4a15      	ldr	r2, [pc, #84]	; (8001bf0 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8001b9a:	621a      	str	r2, [r3, #32]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ba2:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	22c7      	movs	r2, #199	; 0xc7
 8001bb8:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 60.0f;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>)
 8001bbe:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001bc4:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 8001bc6:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001bf8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x84>
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 f832 	bl	8001c34 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	60da      	str	r2, [r3, #12]
}
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	41a00000 	.word	0x41a00000
 8001bec:	469c4000 	.word	0x469c4000
 8001bf0:	43480000 	.word	0x43480000
 8001bf4:	42700000 	.word	0x42700000
 8001bf8:	00000000 	.word	0x00000000

08001bfc <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
}
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	4619      	mov	r1, r3
 8001c24:	4610      	mov	r0, r2
 8001c26:	f00a f91f 	bl	800be68 <HAL_TIM_PWM_Start>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	ed2d 8b02 	vpush	{d8}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c50:	eeb0 0a67 	vmov.f32	s0, s15
 8001c54:	f7ff ff7e 	bl	8001b54 <_ZSt4fabsf>
 8001c58:	eeb0 7a40 	vmov.f32	s14, s0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6a:	bf94      	ite	ls
 8001c6c:	2301      	movls	r3, #1
 8001c6e:	2300      	movhi	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	e01b      	b.n	8001cb6 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c84:	eeb0 0a67 	vmov.f32	s0, s15
 8001c88:	f7ff ff64 	bl	8001b54 <_ZSt4fabsf>
 8001c8c:	eeb0 7a40 	vmov.f32	s14, s0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9e:	bfac      	ite	ge
 8001ca0:	2301      	movge	r3, #1
 8001ca2:	2300      	movlt	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	e001      	b.n	8001cb6 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cbc:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001f58 <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8001cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc8:	f2c0 80db 	blt.w	8001e82 <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6898      	ldr	r0, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f007 fabd 	bl	8009258 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	ee07 3a90 	vmov	s15, r3
 8001cec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cf0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cf8:	eddf 6a98 	vldr	s13, [pc, #608]	; 8001f5c <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001cfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001d00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d08:	eeb0 0a67 	vmov.f32	s0, s15
 8001d0c:	f7ff fc98 	bl	8001640 <_ZSt5roundf>
 8001d10:	eef0 7a40 	vmov.f32	s15, s0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d1e:	ee17 2a90 	vmov	r2, s15
 8001d22:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d113      	bne.n	8001d54 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8001d36:	085b      	lsrs	r3, r3, #1
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 fa59 	bl	80021f0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001d3e:	eeb0 7b40 	vmov.f64	d7, d0
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d4c:	ee17 2a90 	vmov	r2, s15
 8001d50:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8001d52:	e1e0      	b.n	8002116 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d113      	bne.n	8001d84 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8001d66:	085b      	lsrs	r3, r3, #1
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 fa41 	bl	80021f0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001d6e:	eeb0 7b40 	vmov.f64	d7, d0
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d7c:	ee17 2a90 	vmov	r2, s15
 8001d80:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001d82:	e1c8      	b.n	8002116 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d113      	bne.n	8001db4 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8001d96:	085b      	lsrs	r3, r3, #1
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 fa29 	bl	80021f0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001d9e:	eeb0 7b40 	vmov.f64	d7, d0
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001dac:	ee17 2a90 	vmov	r2, s15
 8001db0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001db2:	e1b0      	b.n	8002116 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b0c      	cmp	r3, #12
 8001dba:	d113      	bne.n	8001de4 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc4:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8001dc6:	085b      	lsrs	r3, r3, #1
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 fa11 	bl	80021f0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001dce:	eeb0 7b40 	vmov.f64	d7, d0
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ddc:	ee17 2a90 	vmov	r2, s15
 8001de0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001de2:	e198      	b.n	8002116 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d113      	bne.n	8001e14 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8001df6:	085b      	lsrs	r3, r3, #1
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 f9f9 	bl	80021f0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001dfe:	eeb0 7b40 	vmov.f64	d7, d0
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e0c:	ee17 2a90 	vmov	r2, s15
 8001e10:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001e12:	e180      	b.n	8002116 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b14      	cmp	r3, #20
 8001e1a:	d113      	bne.n	8001e44 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8001e26:	085b      	lsrs	r3, r3, #1
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 f9e1 	bl	80021f0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001e2e:	eeb0 7b40 	vmov.f64	d7, d0
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e3c:	ee17 2a90 	vmov	r2, s15
 8001e40:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001e42:	e168      	b.n	8002116 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2200      	movs	r2, #0
 8001e56:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2200      	movs	r2, #0
 8001e74:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001e80:	e149      	b.n	8002116 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e88:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001f60 <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 8001e8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e94:	f200 80e5 	bhi.w	8002062 <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6898      	ldr	r0, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f007 f9d7 	bl	8009258 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	ee07 3a90 	vmov	s15, r3
 8001eb8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001ebc:	ed97 0a03 	vldr	s0, [r7, #12]
 8001ec0:	f7ff fe48 	bl	8001b54 <_ZSt4fabsf>
 8001ec4:	eef0 7a40 	vmov.f32	s15, s0
 8001ec8:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001ecc:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001f5c <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001ed0:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001ed4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ed8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001edc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee0:	f7ff fbae 	bl	8001640 <_ZSt5roundf>
 8001ee4:	eef0 7a40 	vmov.f32	s15, s0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ef2:	ee17 2a90 	vmov	r2, s15
 8001ef6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d113      	bne.n	8001f28 <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f08:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8001f0a:	085b      	lsrs	r3, r3, #1
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f000 f96f 	bl	80021f0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f12:	eeb0 7b40 	vmov.f64	d7, d0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f20:	ee17 2a90 	vmov	r2, s15
 8001f24:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001f26:	e0f6      	b.n	8002116 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d119      	bne.n	8001f64 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8001f3a:	085b      	lsrs	r3, r3, #1
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 f957 	bl	80021f0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f42:	eeb0 7b40 	vmov.f64	d7, d0
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f50:	ee17 2a90 	vmov	r2, s15
 8001f54:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001f56:	e0de      	b.n	8002116 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 8001f58:	3a83126f 	.word	0x3a83126f
 8001f5c:	4d64e1c0 	.word	0x4d64e1c0
 8001f60:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d113      	bne.n	8001f94 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8001f76:	085b      	lsrs	r3, r3, #1
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 f939 	bl	80021f0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f7e:	eeb0 7b40 	vmov.f64	d7, d0
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f8c:	ee17 2a90 	vmov	r2, s15
 8001f90:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001f92:	e0c0      	b.n	8002116 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b0c      	cmp	r3, #12
 8001f9a:	d113      	bne.n	8001fc4 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8001fa6:	085b      	lsrs	r3, r3, #1
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 f921 	bl	80021f0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001fae:	eeb0 7b40 	vmov.f64	d7, d0
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fbc:	ee17 2a90 	vmov	r2, s15
 8001fc0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001fc2:	e0a8      	b.n	8002116 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b10      	cmp	r3, #16
 8001fca:	d113      	bne.n	8001ff4 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8001fd6:	085b      	lsrs	r3, r3, #1
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 f909 	bl	80021f0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001fde:	eeb0 7b40 	vmov.f64	d7, d0
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fec:	ee17 2a90 	vmov	r2, s15
 8001ff0:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001ff2:	e090      	b.n	8002116 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b14      	cmp	r3, #20
 8001ffa:	d113      	bne.n	8002024 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	4618      	mov	r0, r3
 800200a:	f000 f8f1 	bl	80021f0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800200e:	eeb0 7b40 	vmov.f64	d7, d0
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800201c:	ee17 2a90 	vmov	r2, s15
 8002020:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002022:	e078      	b.n	8002116 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2200      	movs	r2, #0
 800202c:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2200      	movs	r2, #0
 8002036:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2200      	movs	r2, #0
 8002040:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2200      	movs	r2, #0
 800204a:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2200      	movs	r2, #0
 8002054:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002060:	e059      	b.n	8002116 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d105      	bne.n	8002076 <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2200      	movs	r2, #0
 8002072:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002074:	e04f      	b.n	8002116 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b04      	cmp	r3, #4
 800207c:	d105      	bne.n	800208a <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2200      	movs	r2, #0
 8002086:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002088:	e045      	b.n	8002116 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b08      	cmp	r3, #8
 8002090:	d105      	bne.n	800209e <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2200      	movs	r2, #0
 800209a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800209c:	e03b      	b.n	8002116 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b0c      	cmp	r3, #12
 80020a4:	d105      	bne.n	80020b2 <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2200      	movs	r2, #0
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40
}
 80020b0:	e031      	b.n	8002116 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b10      	cmp	r3, #16
 80020b8:	d105      	bne.n	80020c6 <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2200      	movs	r2, #0
 80020c2:	659a      	str	r2, [r3, #88]	; 0x58
}
 80020c4:	e027      	b.n	8002116 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b14      	cmp	r3, #20
 80020cc:	d105      	bne.n	80020da <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2200      	movs	r2, #0
 80020d6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80020d8:	e01d      	b.n	8002116 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2200      	movs	r2, #0
 80020e2:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2200      	movs	r2, #0
 80020ec:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2200      	movs	r2, #0
 80020f6:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2200      	movs	r2, #0
 8002100:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2200      	movs	r2, #0
 800210a:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2200      	movs	r2, #0
 8002114:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	ecbd 8b02 	vpop	{d8}
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop

08002124 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 8002130:	ed97 0a00 	vldr	s0, [r7]
 8002134:	f7ff fd0e 	bl	8001b54 <_ZSt4fabsf>
 8002138:	eef0 7a40 	vmov.f32	s15, s0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	4603      	mov	r3, r0
 8002152:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	ee07 3a90 	vmov	s15, r3
 800215a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800215e:	eeb0 0b47 	vmov.f64	d0, d7
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff ffe5 	bl	800214a <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002180:	eeb0 7b40 	vmov.f64	d7, d0
 8002184:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	edc3 7a07 	vstr	s15, [r3, #28]
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <_ZN7Stepper21StepperOpenLoopSpeedMEf>:
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
						/ (2.0f * PI)));
//	}
}
void Stepper::StepperOpenLoopSpeedM(float _speed_m) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed_m * this->microStep * this->ratio * this->SPR * 1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	ed93 7a07 	vldr	s14, [r3, #28]
 80021aa:	edd7 7a00 	vldr	s15, [r7]
 80021ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80021b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	edd3 7a08 	vldr	s15, [r3, #32]
 80021c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI * 1000.0f)));
 80021ca:	ed9f 5b07 	vldr	d5, [pc, #28]	; 80021e8 <_ZN7Stepper21StepperOpenLoopSpeedMEf+0x50>
 80021ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 80021d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021d6:	eeb0 0a67 	vmov.f32	s0, s15
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff fd2a 	bl	8001c34 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	704a95d1 	.word	0x704a95d1
 80021ec:	40b88b2f 	.word	0x40b88b2f

080021f0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	ee07 3a90 	vmov	s15, r3
 80021fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002202:	eeb0 0b47 	vmov.f64	d0, d7
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002214:	4b13      	ldr	r3, [pc, #76]	; (8002264 <MX_CRC_Init+0x54>)
 8002216:	4a14      	ldr	r2, [pc, #80]	; (8002268 <MX_CRC_Init+0x58>)
 8002218:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <MX_CRC_Init+0x54>)
 800221c:	2201      	movs	r2, #1
 800221e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002220:	4b10      	ldr	r3, [pc, #64]	; (8002264 <MX_CRC_Init+0x54>)
 8002222:	2201      	movs	r2, #1
 8002224:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 8002226:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <MX_CRC_Init+0x54>)
 8002228:	f248 0205 	movw	r2, #32773	; 0x8005
 800222c:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 800222e:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <MX_CRC_Init+0x54>)
 8002230:	2208      	movs	r2, #8
 8002232:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <MX_CRC_Init+0x54>)
 8002236:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800223a:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <MX_CRC_Init+0x54>)
 800223e:	2220      	movs	r2, #32
 8002240:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8002242:	4b08      	ldr	r3, [pc, #32]	; (8002264 <MX_CRC_Init+0x54>)
 8002244:	2280      	movs	r2, #128	; 0x80
 8002246:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <MX_CRC_Init+0x54>)
 800224a:	2201      	movs	r2, #1
 800224c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800224e:	4805      	ldr	r0, [pc, #20]	; (8002264 <MX_CRC_Init+0x54>)
 8002250:	f003 fe1a 	bl	8005e88 <HAL_CRC_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 800225a:	f001 fe35 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	24000af4 	.word	0x24000af4
 8002268:	58024c00 	.word	0x58024c00

0800226c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0b      	ldr	r2, [pc, #44]	; (80022a8 <HAL_CRC_MspInit+0x3c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d10e      	bne.n	800229c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_CRC_MspInit+0x40>)
 8002280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002284:	4a09      	ldr	r2, [pc, #36]	; (80022ac <HAL_CRC_MspInit+0x40>)
 8002286:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800228a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800228e:	4b07      	ldr	r3, [pc, #28]	; (80022ac <HAL_CRC_MspInit+0x40>)
 8002290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002294:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800229c:	bf00      	nop
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	58024c00 	.word	0x58024c00
 80022ac:	58024400 	.word	0x58024400

080022b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <MX_DMA_Init+0x7c>)
 80022b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022bc:	4a1b      	ldr	r2, [pc, #108]	; (800232c <MX_DMA_Init+0x7c>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022c6:	4b19      	ldr	r3, [pc, #100]	; (800232c <MX_DMA_Init+0x7c>)
 80022c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	607b      	str	r3, [r7, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2100      	movs	r1, #0
 80022d8:	200b      	movs	r0, #11
 80022da:	f003 fd94 	bl	8005e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80022de:	200b      	movs	r0, #11
 80022e0:	f003 fdab 	bl	8005e3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80022e4:	2200      	movs	r2, #0
 80022e6:	2100      	movs	r1, #0
 80022e8:	200c      	movs	r0, #12
 80022ea:	f003 fd8c 	bl	8005e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80022ee:	200c      	movs	r0, #12
 80022f0:	f003 fda3 	bl	8005e3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80022f4:	2200      	movs	r2, #0
 80022f6:	2100      	movs	r1, #0
 80022f8:	200d      	movs	r0, #13
 80022fa:	f003 fd84 	bl	8005e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80022fe:	200d      	movs	r0, #13
 8002300:	f003 fd9b 	bl	8005e3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002304:	2200      	movs	r2, #0
 8002306:	2100      	movs	r1, #0
 8002308:	200e      	movs	r0, #14
 800230a:	f003 fd7c 	bl	8005e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800230e:	200e      	movs	r0, #14
 8002310:	f003 fd93 	bl	8005e3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002314:	2200      	movs	r2, #0
 8002316:	2100      	movs	r1, #0
 8002318:	200f      	movs	r0, #15
 800231a:	f003 fd74 	bl	8005e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800231e:	200f      	movs	r0, #15
 8002320:	f003 fd8b 	bl	8005e3a <HAL_NVIC_EnableIRQ>

}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	58024400 	.word	0x58024400

08002330 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08c      	sub	sp, #48	; 0x30
 8002334:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002336:	f107 031c 	add.w	r3, r7, #28
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002346:	4b8e      	ldr	r3, [pc, #568]	; (8002580 <MX_GPIO_Init+0x250>)
 8002348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800234c:	4a8c      	ldr	r2, [pc, #560]	; (8002580 <MX_GPIO_Init+0x250>)
 800234e:	f043 0310 	orr.w	r3, r3, #16
 8002352:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002356:	4b8a      	ldr	r3, [pc, #552]	; (8002580 <MX_GPIO_Init+0x250>)
 8002358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800235c:	f003 0310 	and.w	r3, r3, #16
 8002360:	61bb      	str	r3, [r7, #24]
 8002362:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002364:	4b86      	ldr	r3, [pc, #536]	; (8002580 <MX_GPIO_Init+0x250>)
 8002366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800236a:	4a85      	ldr	r2, [pc, #532]	; (8002580 <MX_GPIO_Init+0x250>)
 800236c:	f043 0304 	orr.w	r3, r3, #4
 8002370:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002374:	4b82      	ldr	r3, [pc, #520]	; (8002580 <MX_GPIO_Init+0x250>)
 8002376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002382:	4b7f      	ldr	r3, [pc, #508]	; (8002580 <MX_GPIO_Init+0x250>)
 8002384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002388:	4a7d      	ldr	r2, [pc, #500]	; (8002580 <MX_GPIO_Init+0x250>)
 800238a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800238e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002392:	4b7b      	ldr	r3, [pc, #492]	; (8002580 <MX_GPIO_Init+0x250>)
 8002394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a0:	4b77      	ldr	r3, [pc, #476]	; (8002580 <MX_GPIO_Init+0x250>)
 80023a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a6:	4a76      	ldr	r2, [pc, #472]	; (8002580 <MX_GPIO_Init+0x250>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023b0:	4b73      	ldr	r3, [pc, #460]	; (8002580 <MX_GPIO_Init+0x250>)
 80023b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023be:	4b70      	ldr	r3, [pc, #448]	; (8002580 <MX_GPIO_Init+0x250>)
 80023c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023c4:	4a6e      	ldr	r2, [pc, #440]	; (8002580 <MX_GPIO_Init+0x250>)
 80023c6:	f043 0302 	orr.w	r3, r3, #2
 80023ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023ce:	4b6c      	ldr	r3, [pc, #432]	; (8002580 <MX_GPIO_Init+0x250>)
 80023d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023dc:	4b68      	ldr	r3, [pc, #416]	; (8002580 <MX_GPIO_Init+0x250>)
 80023de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e2:	4a67      	ldr	r2, [pc, #412]	; (8002580 <MX_GPIO_Init+0x250>)
 80023e4:	f043 0308 	orr.w	r3, r3, #8
 80023e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023ec:	4b64      	ldr	r3, [pc, #400]	; (8002580 <MX_GPIO_Init+0x250>)
 80023ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	607b      	str	r3, [r7, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80023fa:	4b61      	ldr	r3, [pc, #388]	; (8002580 <MX_GPIO_Init+0x250>)
 80023fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002400:	4a5f      	ldr	r2, [pc, #380]	; (8002580 <MX_GPIO_Init+0x250>)
 8002402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002406:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800240a:	4b5d      	ldr	r3, [pc, #372]	; (8002580 <MX_GPIO_Init+0x250>)
 800240c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002414:	603b      	str	r3, [r7, #0]
 8002416:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8002418:	2200      	movs	r2, #0
 800241a:	f644 2121 	movw	r1, #18977	; 0x4a21
 800241e:	4859      	ldr	r0, [pc, #356]	; (8002584 <MX_GPIO_Init+0x254>)
 8002420:	f006 ff1a 	bl	8009258 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002424:	2200      	movs	r2, #0
 8002426:	f24c 0102 	movw	r1, #49154	; 0xc002
 800242a:	4857      	ldr	r0, [pc, #348]	; (8002588 <MX_GPIO_Init+0x258>)
 800242c:	f006 ff14 	bl	8009258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002430:	2200      	movs	r2, #0
 8002432:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002436:	4855      	ldr	r0, [pc, #340]	; (800258c <MX_GPIO_Init+0x25c>)
 8002438:	f006 ff0e 	bl	8009258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800243c:	2200      	movs	r2, #0
 800243e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002442:	4853      	ldr	r0, [pc, #332]	; (8002590 <MX_GPIO_Init+0x260>)
 8002444:	f006 ff08 	bl	8009258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8002448:	2200      	movs	r2, #0
 800244a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800244e:	4851      	ldr	r0, [pc, #324]	; (8002594 <MX_GPIO_Init+0x264>)
 8002450:	f006 ff02 	bl	8009258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 8002454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800245a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800245e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 8002464:	f107 031c 	add.w	r3, r7, #28
 8002468:	4619      	mov	r1, r3
 800246a:	4849      	ldr	r0, [pc, #292]	; (8002590 <MX_GPIO_Init+0x260>)
 800246c:	f006 fd44 	bl	8008ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8002470:	f644 2321 	movw	r3, #18977	; 0x4a21
 8002474:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002476:	2301      	movs	r3, #1
 8002478:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247e:	2300      	movs	r3, #0
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002482:	f107 031c 	add.w	r3, r7, #28
 8002486:	4619      	mov	r1, r3
 8002488:	483e      	ldr	r0, [pc, #248]	; (8002584 <MX_GPIO_Init+0x254>)
 800248a:	f006 fd35 	bl	8008ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 800248e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002492:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002494:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002498:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800249e:	f107 031c 	add.w	r3, r7, #28
 80024a2:	4619      	mov	r1, r3
 80024a4:	4838      	ldr	r0, [pc, #224]	; (8002588 <MX_GPIO_Init+0x258>)
 80024a6:	f006 fd27 	bl	8008ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 80024aa:	f24c 0302 	movw	r3, #49154	; 0xc002
 80024ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b0:	2301      	movs	r3, #1
 80024b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b8:	2300      	movs	r3, #0
 80024ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024bc:	f107 031c 	add.w	r3, r7, #28
 80024c0:	4619      	mov	r1, r3
 80024c2:	4831      	ldr	r0, [pc, #196]	; (8002588 <MX_GPIO_Init+0x258>)
 80024c4:	f006 fd18 	bl	8008ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80024c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ce:	2301      	movs	r3, #1
 80024d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d6:	2300      	movs	r3, #0
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80024da:	f107 031c 	add.w	r3, r7, #28
 80024de:	4619      	mov	r1, r3
 80024e0:	482a      	ldr	r0, [pc, #168]	; (800258c <MX_GPIO_Init+0x25c>)
 80024e2:	f006 fd09 	bl	8008ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80024e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ec:	2301      	movs	r3, #1
 80024ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f4:	2300      	movs	r3, #0
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80024f8:	f107 031c 	add.w	r3, r7, #28
 80024fc:	4619      	mov	r1, r3
 80024fe:	4824      	ldr	r0, [pc, #144]	; (8002590 <MX_GPIO_Init+0x260>)
 8002500:	f006 fcfa 	bl	8008ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8002504:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800250a:	2301      	movs	r3, #1
 800250c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002512:	2300      	movs	r3, #0
 8002514:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 8002516:	f107 031c 	add.w	r3, r7, #28
 800251a:	4619      	mov	r1, r3
 800251c:	481d      	ldr	r0, [pc, #116]	; (8002594 <MX_GPIO_Init+0x264>)
 800251e:	f006 fceb 	bl	8008ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM5_Pin;
 8002522:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002528:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800252c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8002532:	f107 031c 	add.w	r3, r7, #28
 8002536:	4619      	mov	r1, r3
 8002538:	4817      	ldr	r0, [pc, #92]	; (8002598 <MX_GPIO_Init+0x268>)
 800253a:	f006 fcdd 	bl	8008ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 800253e:	23c0      	movs	r3, #192	; 0xc0
 8002540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002542:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002546:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254c:	f107 031c 	add.w	r3, r7, #28
 8002550:	4619      	mov	r1, r3
 8002552:	480c      	ldr	r0, [pc, #48]	; (8002584 <MX_GPIO_Init+0x254>)
 8002554:	f006 fcd0 	bl	8008ef8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002558:	2200      	movs	r2, #0
 800255a:	2100      	movs	r1, #0
 800255c:	2017      	movs	r0, #23
 800255e:	f003 fc52 	bl	8005e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002562:	2017      	movs	r0, #23
 8002564:	f003 fc69 	bl	8005e3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002568:	2200      	movs	r2, #0
 800256a:	2100      	movs	r1, #0
 800256c:	2028      	movs	r0, #40	; 0x28
 800256e:	f003 fc4a 	bl	8005e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002572:	2028      	movs	r0, #40	; 0x28
 8002574:	f003 fc61 	bl	8005e3a <HAL_NVIC_EnableIRQ>

}
 8002578:	bf00      	nop
 800257a:	3730      	adds	r7, #48	; 0x30
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	58024400 	.word	0x58024400
 8002584:	58020400 	.word	0x58020400
 8002588:	58021000 	.word	0x58021000
 800258c:	58020c00 	.word	0x58020c00
 8002590:	58020800 	.word	0x58020800
 8002594:	58020000 	.word	0x58020000
 8002598:	58021800 	.word	0x58021800
 800259c:	00000000 	.word	0x00000000

080025a0 <_Z6fcb_FKffff>:
volatile float debug_wq3;

volatile float Robot_X,Robot_Y,Robot_Z,Robot_Yaw;

void fcb_FK(float J_q1, float J_q2, float J_q3, float J_q4)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b090      	sub	sp, #64	; 0x40
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80025aa:	edc7 0a02 	vstr	s1, [r7, #8]
 80025ae:	ed87 1a01 	vstr	s2, [r7, #4]
 80025b2:	edc7 1a00 	vstr	s3, [r7]

	 const float C1 = cos(J_q1/1000.0);
 80025b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80025ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025be:	ed9f 5b52 	vldr	d5, [pc, #328]	; 8002708 <_Z6fcb_FKffff+0x168>
 80025c2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80025c6:	eeb0 0b46 	vmov.f64	d0, d6
 80025ca:	f00d fac1 	bl	800fb50 <cos>
 80025ce:	eeb0 7b40 	vmov.f64	d7, d0
 80025d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80025d6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	 const float S1 = sin(J_q1/1000.0);
 80025da:	edd7 7a03 	vldr	s15, [r7, #12]
 80025de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025e2:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8002708 <_Z6fcb_FKffff+0x168>
 80025e6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80025ea:	eeb0 0b46 	vmov.f64	d0, d6
 80025ee:	f00d faf7 	bl	800fbe0 <sin>
 80025f2:	eeb0 7b40 	vmov.f64	d7, d0
 80025f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80025fa:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	 const float C13 = cos((J_q1+J_q3)/1000.0);
 80025fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8002602:	edd7 7a01 	vldr	s15, [r7, #4]
 8002606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800260a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800260e:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8002708 <_Z6fcb_FKffff+0x168>
 8002612:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002616:	eeb0 0b46 	vmov.f64	d0, d6
 800261a:	f00d fa99 	bl	800fb50 <cos>
 800261e:	eeb0 7b40 	vmov.f64	d7, d0
 8002622:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002626:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	 const float S13 = sin((J_q1+J_q3)/1000.0);
 800262a:	ed97 7a03 	vldr	s14, [r7, #12]
 800262e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002632:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002636:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800263a:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8002708 <_Z6fcb_FKffff+0x168>
 800263e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002642:	eeb0 0b46 	vmov.f64	d0, d6
 8002646:	f00d facb 	bl	800fbe0 <sin>
 800264a:	eeb0 7b40 	vmov.f64	d7, d0
 800264e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002652:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	 const float L1 = 0.01325; // 0.053
 8002656:	4b30      	ldr	r3, [pc, #192]	; (8002718 <_Z6fcb_FKffff+0x178>)
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
	 const float L2 = 0.370; // 0.36625
 800265a:	4b30      	ldr	r3, [pc, #192]	; (800271c <_Z6fcb_FKffff+0x17c>)
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
	 const float L3 = 0.315;
 800265e:	4b30      	ldr	r3, [pc, #192]	; (8002720 <_Z6fcb_FKffff+0x180>)
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
	 const float L12 = 0.38325;
 8002662:	4b30      	ldr	r3, [pc, #192]	; (8002724 <_Z6fcb_FKffff+0x184>)
 8002664:	623b      	str	r3, [r7, #32]
	 const float H1 = 0.125;
 8002666:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 800266a:	61fb      	str	r3, [r7, #28]
	 const float H3 = 0.065;
 800266c:	4b2e      	ldr	r3, [pc, #184]	; (8002728 <_Z6fcb_FKffff+0x188>)
 800266e:	61bb      	str	r3, [r7, #24]
	 const float H4 = 0.190;
 8002670:	4b2e      	ldr	r3, [pc, #184]	; (800272c <_Z6fcb_FKffff+0x18c>)
 8002672:	617b      	str	r3, [r7, #20]

	Robot_X = (L3*C13) + (L12*C1);
 8002674:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002678:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002730 <_Z6fcb_FKffff+0x190>
 800267c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002680:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002684:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002734 <_Z6fcb_FKffff+0x194>
 8002688:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800268c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002690:	4b29      	ldr	r3, [pc, #164]	; (8002738 <_Z6fcb_FKffff+0x198>)
 8002692:	edc3 7a00 	vstr	s15, [r3]
	Robot_Y = (L3*S13) + (L12*S1);
 8002696:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800269a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002730 <_Z6fcb_FKffff+0x190>
 800269e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026a2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80026a6:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002734 <_Z6fcb_FKffff+0x194>
 80026aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80026ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b2:	4b22      	ldr	r3, [pc, #136]	; (800273c <_Z6fcb_FKffff+0x19c>)
 80026b4:	edc3 7a00 	vstr	s15, [r3]
	Robot_Z = 0.38 + (J_q2/1000.0);
 80026b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80026bc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80026c0:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8002708 <_Z6fcb_FKffff+0x168>
 80026c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80026c8:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8002710 <_Z6fcb_FKffff+0x170>
 80026cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80026d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80026d4:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <_Z6fcb_FKffff+0x1a0>)
 80026d6:	edc3 7a00 	vstr	s15, [r3]
	Robot_Yaw = (J_q1 + J_q3 + J_q4)/1000.0;
 80026da:	ed97 7a03 	vldr	s14, [r7, #12]
 80026de:	edd7 7a01 	vldr	s15, [r7, #4]
 80026e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026e6:	edd7 7a00 	vldr	s15, [r7]
 80026ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026ee:	eddf 6a15 	vldr	s13, [pc, #84]	; 8002744 <_Z6fcb_FKffff+0x1a4>
 80026f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026f6:	4b14      	ldr	r3, [pc, #80]	; (8002748 <_Z6fcb_FKffff+0x1a8>)
 80026f8:	edc3 7a00 	vstr	s15, [r3]

}
 80026fc:	bf00      	nop
 80026fe:	3740      	adds	r7, #64	; 0x40
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	f3af 8000 	nop.w
 8002708:	00000000 	.word	0x00000000
 800270c:	408f4000 	.word	0x408f4000
 8002710:	851eb852 	.word	0x851eb852
 8002714:	3fd851eb 	.word	0x3fd851eb
 8002718:	3c591687 	.word	0x3c591687
 800271c:	3ebd70a4 	.word	0x3ebd70a4
 8002720:	3ea147ae 	.word	0x3ea147ae
 8002724:	3ec43958 	.word	0x3ec43958
 8002728:	3d851eb8 	.word	0x3d851eb8
 800272c:	3e428f5c 	.word	0x3e428f5c
 8002730:	3ea147ae 	.word	0x3ea147ae
 8002734:	3ec43958 	.word	0x3ec43958
 8002738:	240008f8 	.word	0x240008f8
 800273c:	240008fc 	.word	0x240008fc
 8002740:	24000900 	.word	0x24000900
 8002744:	447a0000 	.word	0x447a0000
 8002748:	24000904 	.word	0x24000904

0800274c <HAL_UARTEx_RxEventCallback>:

#endif



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800274c:	b5b0      	push	{r4, r5, r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a99      	ldr	r2, [pc, #612]	; (80029c0 <HAL_UARTEx_RxEventCallback+0x274>)
 800275c:	4293      	cmp	r3, r2
 800275e:	f040 8229 	bne.w	8002bb4 <HAL_UARTEx_RxEventCallback+0x468>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 8002762:	4a98      	ldr	r2, [pc, #608]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 8002764:	4b98      	ldr	r3, [pc, #608]	; (80029c8 <HAL_UARTEx_RxEventCallback+0x27c>)
 8002766:	4614      	mov	r4, r2
 8002768:	461d      	mov	r5, r3
 800276a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800276c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800276e:	682b      	ldr	r3, [r5, #0]
 8002770:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 8002772:	2214      	movs	r2, #20
 8002774:	2100      	movs	r1, #0
 8002776:	4894      	ldr	r0, [pc, #592]	; (80029c8 <HAL_UARTEx_RxEventCallback+0x27c>)
 8002778:	f00e f8aa 	bl	80108d0 <memset>
		if (Size - 2 > 0 && Size <= Rx_BUFFER_SIZE) {// Check if there's some data.
 800277c:	887b      	ldrh	r3, [r7, #2]
 800277e:	2b02      	cmp	r3, #2
 8002780:	f240 8207 	bls.w	8002b92 <HAL_UARTEx_RxEventCallback+0x446>
 8002784:	887b      	ldrh	r3, [r7, #2]
 8002786:	2b14      	cmp	r3, #20
 8002788:	f200 8203 	bhi.w	8002b92 <HAL_UARTEx_RxEventCallback+0x446>
			cmdDataSize = Size - 2;	// Calculate data length.
 800278c:	887b      	ldrh	r3, [r7, #2]
 800278e:	3b02      	subs	r3, #2
 8002790:	b29a      	uxth	r2, r3
 8002792:	4b8e      	ldr	r3, [pc, #568]	; (80029cc <HAL_UARTEx_RxEventCallback+0x280>)
 8002794:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) Old_Rx_Buffer,
 8002796:	4b8d      	ldr	r3, [pc, #564]	; (80029cc <HAL_UARTEx_RxEventCallback+0x280>)
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	461a      	mov	r2, r3
 800279e:	4989      	ldr	r1, [pc, #548]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 80027a0:	488b      	ldr	r0, [pc, #556]	; (80029d0 <HAL_UARTEx_RxEventCallback+0x284>)
 80027a2:	f003 fbd5 	bl	8005f50 <HAL_CRC_Calculate>
 80027a6:	4603      	mov	r3, r0
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	4b8a      	ldr	r3, [pc, #552]	; (80029d4 <HAL_UARTEx_RxEventCallback+0x288>)
 80027ac:	801a      	strh	r2, [r3, #0]
					cmdDataSize); // Calculate data only by STM32 Hardware CRC.
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 80027ae:	4b87      	ldr	r3, [pc, #540]	; (80029cc <HAL_UARTEx_RxEventCallback+0x280>)
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b83      	ldr	r3, [pc, #524]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 80027b8:	5c9b      	ldrb	r3, [r3, r2]
 80027ba:	021b      	lsls	r3, r3, #8
					| Old_Rx_Buffer[cmdDataSize + 1]; // Read Expected CRC from Protocol.
 80027bc:	b21a      	sxth	r2, r3
 80027be:	4b83      	ldr	r3, [pc, #524]	; (80029cc <HAL_UARTEx_RxEventCallback+0x280>)
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	3301      	adds	r3, #1
 80027c6:	497f      	ldr	r1, [pc, #508]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 80027c8:	5ccb      	ldrb	r3, [r1, r3]
 80027ca:	b21b      	sxth	r3, r3
 80027cc:	4313      	orrs	r3, r2
 80027ce:	b21b      	sxth	r3, r3
 80027d0:	b29a      	uxth	r2, r3
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 80027d2:	4b81      	ldr	r3, [pc, #516]	; (80029d8 <HAL_UARTEx_RxEventCallback+0x28c>)
 80027d4:	801a      	strh	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 80027d6:	4b7f      	ldr	r3, [pc, #508]	; (80029d4 <HAL_UARTEx_RxEventCallback+0x288>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	b29a      	uxth	r2, r3
 80027dc:	4b7e      	ldr	r3, [pc, #504]	; (80029d8 <HAL_UARTEx_RxEventCallback+0x28c>)
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	429a      	cmp	r2, r3
 80027e4:	bf0c      	ite	eq
 80027e6:	2301      	moveq	r3, #1
 80027e8:	2300      	movne	r3, #0
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 8225 	beq.w	8002c3c <HAL_UARTEx_RxEventCallback+0x4f0>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80027f2:	2201      	movs	r2, #1
 80027f4:	2102      	movs	r1, #2
 80027f6:	4879      	ldr	r0, [pc, #484]	; (80029dc <HAL_UARTEx_RxEventCallback+0x290>)
 80027f8:	f006 fd2e 	bl	8009258 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80027fc:	2200      	movs	r2, #0
 80027fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002802:	4877      	ldr	r0, [pc, #476]	; (80029e0 <HAL_UARTEx_RxEventCallback+0x294>)
 8002804:	f006 fd28 	bl	8009258 <HAL_GPIO_WritePin>
				if (Old_Rx_Buffer[0] == 0x41 && cmdDataSize == 3) {	// Joint Jog q1
 8002808:	4b6e      	ldr	r3, [pc, #440]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b41      	cmp	r3, #65	; 0x41
 800280e:	d106      	bne.n	800281e <HAL_UARTEx_RxEventCallback+0xd2>
 8002810:	4b6e      	ldr	r3, [pc, #440]	; (80029cc <HAL_UARTEx_RxEventCallback+0x280>)
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	b29b      	uxth	r3, r3
 8002816:	2b03      	cmp	r3, #3
 8002818:	d101      	bne.n	800281e <HAL_UARTEx_RxEventCallback+0xd2>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_UARTEx_RxEventCallback+0xd4>
 800281e:	2300      	movs	r3, #0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00b      	beq.n	800283c <HAL_UARTEx_RxEventCallback+0xf0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8002824:	4b67      	ldr	r3, [pc, #412]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 8002826:	785b      	ldrb	r3, [r3, #1]
 8002828:	021b      	lsls	r3, r3, #8
 800282a:	b25a      	sxtb	r2, r3
 800282c:	4b65      	ldr	r3, [pc, #404]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 800282e:	789b      	ldrb	r3, [r3, #2]
 8002830:	b25b      	sxtb	r3, r3
 8002832:	4313      	orrs	r3, r2
 8002834:	b25a      	sxtb	r2, r3
 8002836:	4b6b      	ldr	r3, [pc, #428]	; (80029e4 <HAL_UARTEx_RxEventCallback+0x298>)
 8002838:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 800283a:	e1ff      	b.n	8002c3c <HAL_UARTEx_RxEventCallback+0x4f0>
				} else if (Old_Rx_Buffer[0] == 0x42 && cmdDataSize == 3) {// Joint Jog q2
 800283c:	4b61      	ldr	r3, [pc, #388]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b42      	cmp	r3, #66	; 0x42
 8002842:	d106      	bne.n	8002852 <HAL_UARTEx_RxEventCallback+0x106>
 8002844:	4b61      	ldr	r3, [pc, #388]	; (80029cc <HAL_UARTEx_RxEventCallback+0x280>)
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b03      	cmp	r3, #3
 800284c:	d101      	bne.n	8002852 <HAL_UARTEx_RxEventCallback+0x106>
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <HAL_UARTEx_RxEventCallback+0x108>
 8002852:	2300      	movs	r3, #0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00b      	beq.n	8002870 <HAL_UARTEx_RxEventCallback+0x124>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq2 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8002858:	4b5a      	ldr	r3, [pc, #360]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 800285a:	785b      	ldrb	r3, [r3, #1]
 800285c:	021b      	lsls	r3, r3, #8
 800285e:	b25a      	sxtb	r2, r3
 8002860:	4b58      	ldr	r3, [pc, #352]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 8002862:	789b      	ldrb	r3, [r3, #2]
 8002864:	b25b      	sxtb	r3, r3
 8002866:	4313      	orrs	r3, r2
 8002868:	b25a      	sxtb	r2, r3
 800286a:	4b5f      	ldr	r3, [pc, #380]	; (80029e8 <HAL_UARTEx_RxEventCallback+0x29c>)
 800286c:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 800286e:	e1e5      	b.n	8002c3c <HAL_UARTEx_RxEventCallback+0x4f0>
				} else if (Old_Rx_Buffer[0] == 0x43 && cmdDataSize == 3) {// Joint Jog q3
 8002870:	4b54      	ldr	r3, [pc, #336]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b43      	cmp	r3, #67	; 0x43
 8002876:	d106      	bne.n	8002886 <HAL_UARTEx_RxEventCallback+0x13a>
 8002878:	4b54      	ldr	r3, [pc, #336]	; (80029cc <HAL_UARTEx_RxEventCallback+0x280>)
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	b29b      	uxth	r3, r3
 800287e:	2b03      	cmp	r3, #3
 8002880:	d101      	bne.n	8002886 <HAL_UARTEx_RxEventCallback+0x13a>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_UARTEx_RxEventCallback+0x13c>
 8002886:	2300      	movs	r3, #0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00b      	beq.n	80028a4 <HAL_UARTEx_RxEventCallback+0x158>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq3 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 800288c:	4b4d      	ldr	r3, [pc, #308]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 800288e:	785b      	ldrb	r3, [r3, #1]
 8002890:	021b      	lsls	r3, r3, #8
 8002892:	b25a      	sxtb	r2, r3
 8002894:	4b4b      	ldr	r3, [pc, #300]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 8002896:	789b      	ldrb	r3, [r3, #2]
 8002898:	b25b      	sxtb	r3, r3
 800289a:	4313      	orrs	r3, r2
 800289c:	b25a      	sxtb	r2, r3
 800289e:	4b53      	ldr	r3, [pc, #332]	; (80029ec <HAL_UARTEx_RxEventCallback+0x2a0>)
 80028a0:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 80028a2:	e1cb      	b.n	8002c3c <HAL_UARTEx_RxEventCallback+0x4f0>
				} else if (Old_Rx_Buffer[0] == 0x44 && cmdDataSize == 3) {// Joint Jog q4
 80028a4:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b44      	cmp	r3, #68	; 0x44
 80028aa:	d106      	bne.n	80028ba <HAL_UARTEx_RxEventCallback+0x16e>
 80028ac:	4b47      	ldr	r3, [pc, #284]	; (80029cc <HAL_UARTEx_RxEventCallback+0x280>)
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d101      	bne.n	80028ba <HAL_UARTEx_RxEventCallback+0x16e>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <HAL_UARTEx_RxEventCallback+0x170>
 80028ba:	2300      	movs	r3, #0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00b      	beq.n	80028d8 <HAL_UARTEx_RxEventCallback+0x18c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq4 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 80028c0:	4b40      	ldr	r3, [pc, #256]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 80028c2:	785b      	ldrb	r3, [r3, #1]
 80028c4:	021b      	lsls	r3, r3, #8
 80028c6:	b25a      	sxtb	r2, r3
 80028c8:	4b3e      	ldr	r3, [pc, #248]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 80028ca:	789b      	ldrb	r3, [r3, #2]
 80028cc:	b25b      	sxtb	r3, r3
 80028ce:	4313      	orrs	r3, r2
 80028d0:	b25a      	sxtb	r2, r3
 80028d2:	4b47      	ldr	r3, [pc, #284]	; (80029f0 <HAL_UARTEx_RxEventCallback+0x2a4>)
 80028d4:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 80028d6:	e1b1      	b.n	8002c3c <HAL_UARTEx_RxEventCallback+0x4f0>
				} else if (Old_Rx_Buffer[0] == 0x51 && cmdDataSize == 3) {// Linear Jog X
 80028d8:	4b3a      	ldr	r3, [pc, #232]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b51      	cmp	r3, #81	; 0x51
 80028de:	d106      	bne.n	80028ee <HAL_UARTEx_RxEventCallback+0x1a2>
 80028e0:	4b3a      	ldr	r3, [pc, #232]	; (80029cc <HAL_UARTEx_RxEventCallback+0x280>)
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d101      	bne.n	80028ee <HAL_UARTEx_RxEventCallback+0x1a2>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <HAL_UARTEx_RxEventCallback+0x1a4>
 80028ee:	2300      	movs	r3, #0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00b      	beq.n	800290c <HAL_UARTEx_RxEventCallback+0x1c0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 80028f4:	4b33      	ldr	r3, [pc, #204]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 80028f6:	785b      	ldrb	r3, [r3, #1]
 80028f8:	021b      	lsls	r3, r3, #8
 80028fa:	b25a      	sxtb	r2, r3
 80028fc:	4b31      	ldr	r3, [pc, #196]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 80028fe:	789b      	ldrb	r3, [r3, #2]
 8002900:	b25b      	sxtb	r3, r3
 8002902:	4313      	orrs	r3, r2
 8002904:	b25a      	sxtb	r2, r3
 8002906:	4b3b      	ldr	r3, [pc, #236]	; (80029f4 <HAL_UARTEx_RxEventCallback+0x2a8>)
 8002908:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 800290a:	e197      	b.n	8002c3c <HAL_UARTEx_RxEventCallback+0x4f0>
				} else if (Old_Rx_Buffer[0] == 0x52 && cmdDataSize == 3) {// Linear Jog Y
 800290c:	4b2d      	ldr	r3, [pc, #180]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b52      	cmp	r3, #82	; 0x52
 8002912:	d106      	bne.n	8002922 <HAL_UARTEx_RxEventCallback+0x1d6>
 8002914:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <HAL_UARTEx_RxEventCallback+0x280>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	2b03      	cmp	r3, #3
 800291c:	d101      	bne.n	8002922 <HAL_UARTEx_RxEventCallback+0x1d6>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_UARTEx_RxEventCallback+0x1d8>
 8002922:	2300      	movs	r3, #0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00b      	beq.n	8002940 <HAL_UARTEx_RxEventCallback+0x1f4>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dy = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8002928:	4b26      	ldr	r3, [pc, #152]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 800292a:	785b      	ldrb	r3, [r3, #1]
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	b25a      	sxtb	r2, r3
 8002930:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 8002932:	789b      	ldrb	r3, [r3, #2]
 8002934:	b25b      	sxtb	r3, r3
 8002936:	4313      	orrs	r3, r2
 8002938:	b25a      	sxtb	r2, r3
 800293a:	4b2f      	ldr	r3, [pc, #188]	; (80029f8 <HAL_UARTEx_RxEventCallback+0x2ac>)
 800293c:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 800293e:	e17d      	b.n	8002c3c <HAL_UARTEx_RxEventCallback+0x4f0>
				} else if (Old_Rx_Buffer[0] == 0x53 && cmdDataSize == 3) {// Linear Jog Z
 8002940:	4b20      	ldr	r3, [pc, #128]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b53      	cmp	r3, #83	; 0x53
 8002946:	d106      	bne.n	8002956 <HAL_UARTEx_RxEventCallback+0x20a>
 8002948:	4b20      	ldr	r3, [pc, #128]	; (80029cc <HAL_UARTEx_RxEventCallback+0x280>)
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	2b03      	cmp	r3, #3
 8002950:	d101      	bne.n	8002956 <HAL_UARTEx_RxEventCallback+0x20a>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <HAL_UARTEx_RxEventCallback+0x20c>
 8002956:	2300      	movs	r3, #0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00b      	beq.n	8002974 <HAL_UARTEx_RxEventCallback+0x228>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dz = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 800295c:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 800295e:	785b      	ldrb	r3, [r3, #1]
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	b25a      	sxtb	r2, r3
 8002964:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 8002966:	789b      	ldrb	r3, [r3, #2]
 8002968:	b25b      	sxtb	r3, r3
 800296a:	4313      	orrs	r3, r2
 800296c:	b25a      	sxtb	r2, r3
 800296e:	4b23      	ldr	r3, [pc, #140]	; (80029fc <HAL_UARTEx_RxEventCallback+0x2b0>)
 8002970:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002972:	e163      	b.n	8002c3c <HAL_UARTEx_RxEventCallback+0x4f0>
				} else if (Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3) {// Linear Jog Yaw
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b54      	cmp	r3, #84	; 0x54
 800297a:	d106      	bne.n	800298a <HAL_UARTEx_RxEventCallback+0x23e>
 800297c:	4b13      	ldr	r3, [pc, #76]	; (80029cc <HAL_UARTEx_RxEventCallback+0x280>)
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b03      	cmp	r3, #3
 8002984:	d101      	bne.n	800298a <HAL_UARTEx_RxEventCallback+0x23e>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <HAL_UARTEx_RxEventCallback+0x240>
 800298a:	2300      	movs	r3, #0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00b      	beq.n	80029a8 <HAL_UARTEx_RxEventCallback+0x25c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 8002992:	785b      	ldrb	r3, [r3, #1]
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	b25a      	sxtb	r2, r3
 8002998:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 800299a:	789b      	ldrb	r3, [r3, #2]
 800299c:	b25b      	sxtb	r3, r3
 800299e:	4313      	orrs	r3, r2
 80029a0:	b25a      	sxtb	r2, r3
 80029a2:	4b17      	ldr	r3, [pc, #92]	; (8002a00 <HAL_UARTEx_RxEventCallback+0x2b4>)
 80029a4:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 80029a6:	e149      	b.n	8002c3c <HAL_UARTEx_RxEventCallback+0x4f0>
				} else if (Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5) { // Joint Jog 4q
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_UARTEx_RxEventCallback+0x278>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b61      	cmp	r3, #97	; 0x61
 80029ae:	d129      	bne.n	8002a04 <HAL_UARTEx_RxEventCallback+0x2b8>
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_UARTEx_RxEventCallback+0x280>)
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b05      	cmp	r3, #5
 80029b8:	d124      	bne.n	8002a04 <HAL_UARTEx_RxEventCallback+0x2b8>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e023      	b.n	8002a06 <HAL_UARTEx_RxEventCallback+0x2ba>
 80029be:	bf00      	nop
 80029c0:	240010b0 	.word	0x240010b0
 80029c4:	240008a0 	.word	0x240008a0
 80029c8:	240008b4 	.word	0x240008b4
 80029cc:	240008c8 	.word	0x240008c8
 80029d0:	24000af4 	.word	0x24000af4
 80029d4:	24000894 	.word	0x24000894
 80029d8:	24000896 	.word	0x24000896
 80029dc:	58021000 	.word	0x58021000
 80029e0:	58020400 	.word	0x58020400
 80029e4:	2400087b 	.word	0x2400087b
 80029e8:	2400087c 	.word	0x2400087c
 80029ec:	2400087d 	.word	0x2400087d
 80029f0:	2400087e 	.word	0x2400087e
 80029f4:	2400087f 	.word	0x2400087f
 80029f8:	24000880 	.word	0x24000880
 80029fc:	24000881 	.word	0x24000881
 8002a00:	24000882 	.word	0x24000882
 8002a04:	2300      	movs	r3, #0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d014      	beq.n	8002a34 <HAL_UARTEx_RxEventCallback+0x2e8>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 8002a0a:	4b73      	ldr	r3, [pc, #460]	; (8002bd8 <HAL_UARTEx_RxEventCallback+0x48c>)
 8002a0c:	785b      	ldrb	r3, [r3, #1]
 8002a0e:	b25a      	sxtb	r2, r3
 8002a10:	4b72      	ldr	r3, [pc, #456]	; (8002bdc <HAL_UARTEx_RxEventCallback+0x490>)
 8002a12:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 8002a14:	4b70      	ldr	r3, [pc, #448]	; (8002bd8 <HAL_UARTEx_RxEventCallback+0x48c>)
 8002a16:	789b      	ldrb	r3, [r3, #2]
 8002a18:	b25a      	sxtb	r2, r3
 8002a1a:	4b71      	ldr	r3, [pc, #452]	; (8002be0 <HAL_UARTEx_RxEventCallback+0x494>)
 8002a1c:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 8002a1e:	4b6e      	ldr	r3, [pc, #440]	; (8002bd8 <HAL_UARTEx_RxEventCallback+0x48c>)
 8002a20:	78db      	ldrb	r3, [r3, #3]
 8002a22:	b25a      	sxtb	r2, r3
 8002a24:	4b6f      	ldr	r3, [pc, #444]	; (8002be4 <HAL_UARTEx_RxEventCallback+0x498>)
 8002a26:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 8002a28:	4b6b      	ldr	r3, [pc, #428]	; (8002bd8 <HAL_UARTEx_RxEventCallback+0x48c>)
 8002a2a:	791b      	ldrb	r3, [r3, #4]
 8002a2c:	b25a      	sxtb	r2, r3
 8002a2e:	4b6e      	ldr	r3, [pc, #440]	; (8002be8 <HAL_UARTEx_RxEventCallback+0x49c>)
 8002a30:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002a32:	e103      	b.n	8002c3c <HAL_UARTEx_RxEventCallback+0x4f0>
				} else if (Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5) { // Linear Jog X,Y,Z,Yaw
 8002a34:	4b68      	ldr	r3, [pc, #416]	; (8002bd8 <HAL_UARTEx_RxEventCallback+0x48c>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b71      	cmp	r3, #113	; 0x71
 8002a3a:	d106      	bne.n	8002a4a <HAL_UARTEx_RxEventCallback+0x2fe>
 8002a3c:	4b6b      	ldr	r3, [pc, #428]	; (8002bec <HAL_UARTEx_RxEventCallback+0x4a0>)
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b05      	cmp	r3, #5
 8002a44:	d101      	bne.n	8002a4a <HAL_UARTEx_RxEventCallback+0x2fe>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <HAL_UARTEx_RxEventCallback+0x300>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d014      	beq.n	8002a7a <HAL_UARTEx_RxEventCallback+0x32e>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = Old_Rx_Buffer[1];
 8002a50:	4b61      	ldr	r3, [pc, #388]	; (8002bd8 <HAL_UARTEx_RxEventCallback+0x48c>)
 8002a52:	785b      	ldrb	r3, [r3, #1]
 8002a54:	b25a      	sxtb	r2, r3
 8002a56:	4b66      	ldr	r3, [pc, #408]	; (8002bf0 <HAL_UARTEx_RxEventCallback+0x4a4>)
 8002a58:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 8002a5a:	4b5f      	ldr	r3, [pc, #380]	; (8002bd8 <HAL_UARTEx_RxEventCallback+0x48c>)
 8002a5c:	789b      	ldrb	r3, [r3, #2]
 8002a5e:	b25a      	sxtb	r2, r3
 8002a60:	4b64      	ldr	r3, [pc, #400]	; (8002bf4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002a62:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 8002a64:	4b5c      	ldr	r3, [pc, #368]	; (8002bd8 <HAL_UARTEx_RxEventCallback+0x48c>)
 8002a66:	78db      	ldrb	r3, [r3, #3]
 8002a68:	b25a      	sxtb	r2, r3
 8002a6a:	4b63      	ldr	r3, [pc, #396]	; (8002bf8 <HAL_UARTEx_RxEventCallback+0x4ac>)
 8002a6c:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 8002a6e:	4b5a      	ldr	r3, [pc, #360]	; (8002bd8 <HAL_UARTEx_RxEventCallback+0x48c>)
 8002a70:	791b      	ldrb	r3, [r3, #4]
 8002a72:	b25a      	sxtb	r2, r3
 8002a74:	4b61      	ldr	r3, [pc, #388]	; (8002bfc <HAL_UARTEx_RxEventCallback+0x4b0>)
 8002a76:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002a78:	e0e0      	b.n	8002c3c <HAL_UARTEx_RxEventCallback+0x4f0>
				}else if(Old_Rx_Buffer[0] == 0x85 && cmdDataSize == 2) {
 8002a7a:	4b57      	ldr	r3, [pc, #348]	; (8002bd8 <HAL_UARTEx_RxEventCallback+0x48c>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b85      	cmp	r3, #133	; 0x85
 8002a80:	d106      	bne.n	8002a90 <HAL_UARTEx_RxEventCallback+0x344>
 8002a82:	4b5a      	ldr	r3, [pc, #360]	; (8002bec <HAL_UARTEx_RxEventCallback+0x4a0>)
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d101      	bne.n	8002a90 <HAL_UARTEx_RxEventCallback+0x344>
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e000      	b.n	8002a92 <HAL_UARTEx_RxEventCallback+0x346>
 8002a90:	2300      	movs	r3, #0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d019      	beq.n	8002aca <HAL_UARTEx_RxEventCallback+0x37e>
					trajstate = Old_Rx_Buffer[1];
 8002a96:	4b50      	ldr	r3, [pc, #320]	; (8002bd8 <HAL_UARTEx_RxEventCallback+0x48c>)
 8002a98:	785b      	ldrb	r3, [r3, #1]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4b58      	ldr	r3, [pc, #352]	; (8002c00 <HAL_UARTEx_RxEventCallback+0x4b4>)
 8002a9e:	601a      	str	r2, [r3, #0]
					if (trajstate != 0) {
 8002aa0:	4b57      	ldr	r3, [pc, #348]	; (8002c00 <HAL_UARTEx_RxEventCallback+0x4b4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	bf14      	ite	ne
 8002aa8:	2301      	movne	r3, #1
 8002aaa:	2300      	moveq	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 80c4 	beq.w	8002c3c <HAL_UARTEx_RxEventCallback+0x4f0>
						Traj_Flag = 1;
 8002ab4:	4b53      	ldr	r3, [pc, #332]	; (8002c04 <HAL_UARTEx_RxEventCallback+0x4b8>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
						t = 0;
 8002aba:	4b53      	ldr	r3, [pc, #332]	; (8002c08 <HAL_UARTEx_RxEventCallback+0x4bc>)
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim14);
 8002ac2:	4852      	ldr	r0, [pc, #328]	; (8002c0c <HAL_UARTEx_RxEventCallback+0x4c0>)
 8002ac4:	f009 f8c8 	bl	800bc58 <HAL_TIM_Base_Start_IT>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002ac8:	e0b8      	b.n	8002c3c <HAL_UARTEx_RxEventCallback+0x4f0>
					}
				} else if (Old_Rx_Buffer[0] == 0x81 && cmdDataSize == 2) {// Servo
 8002aca:	4b43      	ldr	r3, [pc, #268]	; (8002bd8 <HAL_UARTEx_RxEventCallback+0x48c>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b81      	cmp	r3, #129	; 0x81
 8002ad0:	d106      	bne.n	8002ae0 <HAL_UARTEx_RxEventCallback+0x394>
 8002ad2:	4b46      	ldr	r3, [pc, #280]	; (8002bec <HAL_UARTEx_RxEventCallback+0x4a0>)
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d101      	bne.n	8002ae0 <HAL_UARTEx_RxEventCallback+0x394>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <HAL_UARTEx_RxEventCallback+0x396>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d015      	beq.n	8002b12 <HAL_UARTEx_RxEventCallback+0x3c6>
					gripperstate = Old_Rx_Buffer[1];
 8002ae6:	4b3c      	ldr	r3, [pc, #240]	; (8002bd8 <HAL_UARTEx_RxEventCallback+0x48c>)
 8002ae8:	785b      	ldrb	r3, [r3, #1]
 8002aea:	461a      	mov	r2, r3
 8002aec:	4b48      	ldr	r3, [pc, #288]	; (8002c10 <HAL_UARTEx_RxEventCallback+0x4c4>)
 8002aee:	601a      	str	r2, [r3, #0]
					if (gripperstate == 0) {
 8002af0:	4b47      	ldr	r3, [pc, #284]	; (8002c10 <HAL_UARTEx_RxEventCallback+0x4c4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	bf0c      	ite	eq
 8002af8:	2301      	moveq	r3, #1
 8002afa:	2300      	movne	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_UARTEx_RxEventCallback+0x3be>
						gripper.GripperOpen();
 8002b02:	4844      	ldr	r0, [pc, #272]	; (8002c14 <HAL_UARTEx_RxEventCallback+0x4c8>)
 8002b04:	f7fe fff4 	bl	8001af0 <_ZN10ServoMotor11GripperOpenEv>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002b08:	e098      	b.n	8002c3c <HAL_UARTEx_RxEventCallback+0x4f0>
					} else {
						gripper.GripperClose();
 8002b0a:	4842      	ldr	r0, [pc, #264]	; (8002c14 <HAL_UARTEx_RxEventCallback+0x4c8>)
 8002b0c:	f7fe ffda 	bl	8001ac4 <_ZN10ServoMotor12GripperCloseEv>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002b10:	e094      	b.n	8002c3c <HAL_UARTEx_RxEventCallback+0x4f0>
					}

				} else if (Old_Rx_Buffer[0] == 0x91 && cmdDataSize == 8) {
 8002b12:	4b31      	ldr	r3, [pc, #196]	; (8002bd8 <HAL_UARTEx_RxEventCallback+0x48c>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b91      	cmp	r3, #145	; 0x91
 8002b18:	d106      	bne.n	8002b28 <HAL_UARTEx_RxEventCallback+0x3dc>
 8002b1a:	4b34      	ldr	r3, [pc, #208]	; (8002bec <HAL_UARTEx_RxEventCallback+0x4a0>)
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d101      	bne.n	8002b28 <HAL_UARTEx_RxEventCallback+0x3dc>
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <HAL_UARTEx_RxEventCallback+0x3de>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 8086 	beq.w	8002c3c <HAL_UARTEx_RxEventCallback+0x4f0>
					px = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2] ;
 8002b30:	4b29      	ldr	r3, [pc, #164]	; (8002bd8 <HAL_UARTEx_RxEventCallback+0x48c>)
 8002b32:	785b      	ldrb	r3, [r3, #1]
 8002b34:	021b      	lsls	r3, r3, #8
 8002b36:	4a28      	ldr	r2, [pc, #160]	; (8002bd8 <HAL_UARTEx_RxEventCallback+0x48c>)
 8002b38:	7892      	ldrb	r2, [r2, #2]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	ee07 3a90 	vmov	s15, r3
 8002b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b44:	4b34      	ldr	r3, [pc, #208]	; (8002c18 <HAL_UARTEx_RxEventCallback+0x4cc>)
 8002b46:	edc3 7a00 	vstr	s15, [r3]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4] ;
 8002b4a:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <HAL_UARTEx_RxEventCallback+0x48c>)
 8002b4c:	78db      	ldrb	r3, [r3, #3]
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	4a21      	ldr	r2, [pc, #132]	; (8002bd8 <HAL_UARTEx_RxEventCallback+0x48c>)
 8002b52:	7912      	ldrb	r2, [r2, #4]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	ee07 3a90 	vmov	s15, r3
 8002b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b5e:	4b2f      	ldr	r3, [pc, #188]	; (8002c1c <HAL_UARTEx_RxEventCallback+0x4d0>)
 8002b60:	edc3 7a00 	vstr	s15, [r3]
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6] ;
 8002b64:	4b1c      	ldr	r3, [pc, #112]	; (8002bd8 <HAL_UARTEx_RxEventCallback+0x48c>)
 8002b66:	795b      	ldrb	r3, [r3, #5]
 8002b68:	021b      	lsls	r3, r3, #8
 8002b6a:	4a1b      	ldr	r2, [pc, #108]	; (8002bd8 <HAL_UARTEx_RxEventCallback+0x48c>)
 8002b6c:	7992      	ldrb	r2, [r2, #6]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	ee07 3a90 	vmov	s15, r3
 8002b74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b78:	4b29      	ldr	r3, [pc, #164]	; (8002c20 <HAL_UARTEx_RxEventCallback+0x4d4>)
 8002b7a:	edc3 7a00 	vstr	s15, [r3]
					pyaw = Old_Rx_Buffer[7];
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <HAL_UARTEx_RxEventCallback+0x48c>)
 8002b80:	79db      	ldrb	r3, [r3, #7]
 8002b82:	ee07 3a90 	vmov	s15, r3
 8002b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b8a:	4b26      	ldr	r3, [pc, #152]	; (8002c24 <HAL_UARTEx_RxEventCallback+0x4d8>)
 8002b8c:	edc3 7a00 	vstr	s15, [r3]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002b90:	e054      	b.n	8002c3c <HAL_UARTEx_RxEventCallback+0x4f0>
				}
			}
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002b92:	2200      	movs	r2, #0
 8002b94:	2102      	movs	r1, #2
 8002b96:	4824      	ldr	r0, [pc, #144]	; (8002c28 <HAL_UARTEx_RxEventCallback+0x4dc>)
 8002b98:	f006 fb5e 	bl	8009258 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ba2:	4822      	ldr	r0, [pc, #136]	; (8002c2c <HAL_UARTEx_RxEventCallback+0x4e0>)
 8002ba4:	f006 fb58 	bl	8009258 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "CRC16 error\n", 12);
 8002ba8:	220c      	movs	r2, #12
 8002baa:	4921      	ldr	r1, [pc, #132]	; (8002c30 <HAL_UARTEx_RxEventCallback+0x4e4>)
 8002bac:	4821      	ldr	r0, [pc, #132]	; (8002c34 <HAL_UARTEx_RxEventCallback+0x4e8>)
 8002bae:	f00a fcd5 	bl	800d55c <HAL_UART_Transmit_DMA>
 8002bb2:	e044      	b.n	8002c3e <HAL_UARTEx_RxEventCallback+0x4f2>
		}
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2102      	movs	r1, #2
 8002bb8:	481b      	ldr	r0, [pc, #108]	; (8002c28 <HAL_UARTEx_RxEventCallback+0x4dc>)
 8002bba:	f006 fb4d 	bl	8009258 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bc4:	4819      	ldr	r0, [pc, #100]	; (8002c2c <HAL_UARTEx_RxEventCallback+0x4e0>)
 8002bc6:	f006 fb47 	bl	8009258 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "Protocol match error\n", 21);
 8002bca:	2215      	movs	r2, #21
 8002bcc:	491a      	ldr	r1, [pc, #104]	; (8002c38 <HAL_UARTEx_RxEventCallback+0x4ec>)
 8002bce:	4819      	ldr	r0, [pc, #100]	; (8002c34 <HAL_UARTEx_RxEventCallback+0x4e8>)
 8002bd0:	f00a fcc4 	bl	800d55c <HAL_UART_Transmit_DMA>
 8002bd4:	e033      	b.n	8002c3e <HAL_UARTEx_RxEventCallback+0x4f2>
 8002bd6:	bf00      	nop
 8002bd8:	240008a0 	.word	0x240008a0
 8002bdc:	2400087b 	.word	0x2400087b
 8002be0:	2400087c 	.word	0x2400087c
 8002be4:	2400087d 	.word	0x2400087d
 8002be8:	2400087e 	.word	0x2400087e
 8002bec:	240008c8 	.word	0x240008c8
 8002bf0:	2400087f 	.word	0x2400087f
 8002bf4:	24000880 	.word	0x24000880
 8002bf8:	24000881 	.word	0x24000881
 8002bfc:	24000882 	.word	0x24000882
 8002c00:	2400089c 	.word	0x2400089c
 8002c04:	240008d0 	.word	0x240008d0
 8002c08:	240008d4 	.word	0x240008d4
 8002c0c:	24000e00 	.word	0x24000e00
 8002c10:	24000898 	.word	0x24000898
 8002c14:	2400085c 	.word	0x2400085c
 8002c18:	24000884 	.word	0x24000884
 8002c1c:	24000888 	.word	0x24000888
 8002c20:	2400088c 	.word	0x2400088c
 8002c24:	24000890 	.word	0x24000890
 8002c28:	58021000 	.word	0x58021000
 8002c2c:	58020400 	.word	0x58020400
 8002c30:	08013178 	.word	0x08013178
 8002c34:	240010b0 	.word	0x240010b0
 8002c38:	08013188 	.word	0x08013188
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002c3c:	bf00      	nop
	}
	/* start the DMA again */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 8002c3e:	2214      	movs	r2, #20
 8002c40:	4934      	ldr	r1, [pc, #208]	; (8002d14 <HAL_UARTEx_RxEventCallback+0x5c8>)
 8002c42:	4835      	ldr	r0, [pc, #212]	; (8002d18 <HAL_UARTEx_RxEventCallback+0x5cc>)
 8002c44:	f00c fbdd 	bl	800f402 <HAL_UARTEx_ReceiveToIdle_DMA>
			Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002c48:	4b34      	ldr	r3, [pc, #208]	; (8002d1c <HAL_UARTEx_RxEventCallback+0x5d0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a34      	ldr	r2, [pc, #208]	; (8002d20 <HAL_UARTEx_RxEventCallback+0x5d4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d04a      	beq.n	8002ce8 <HAL_UARTEx_RxEventCallback+0x59c>
 8002c52:	4b32      	ldr	r3, [pc, #200]	; (8002d1c <HAL_UARTEx_RxEventCallback+0x5d0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a33      	ldr	r2, [pc, #204]	; (8002d24 <HAL_UARTEx_RxEventCallback+0x5d8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d045      	beq.n	8002ce8 <HAL_UARTEx_RxEventCallback+0x59c>
 8002c5c:	4b2f      	ldr	r3, [pc, #188]	; (8002d1c <HAL_UARTEx_RxEventCallback+0x5d0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a31      	ldr	r2, [pc, #196]	; (8002d28 <HAL_UARTEx_RxEventCallback+0x5dc>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d040      	beq.n	8002ce8 <HAL_UARTEx_RxEventCallback+0x59c>
 8002c66:	4b2d      	ldr	r3, [pc, #180]	; (8002d1c <HAL_UARTEx_RxEventCallback+0x5d0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a30      	ldr	r2, [pc, #192]	; (8002d2c <HAL_UARTEx_RxEventCallback+0x5e0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d03b      	beq.n	8002ce8 <HAL_UARTEx_RxEventCallback+0x59c>
 8002c70:	4b2a      	ldr	r3, [pc, #168]	; (8002d1c <HAL_UARTEx_RxEventCallback+0x5d0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a2e      	ldr	r2, [pc, #184]	; (8002d30 <HAL_UARTEx_RxEventCallback+0x5e4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d036      	beq.n	8002ce8 <HAL_UARTEx_RxEventCallback+0x59c>
 8002c7a:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <HAL_UARTEx_RxEventCallback+0x5d0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a2d      	ldr	r2, [pc, #180]	; (8002d34 <HAL_UARTEx_RxEventCallback+0x5e8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d031      	beq.n	8002ce8 <HAL_UARTEx_RxEventCallback+0x59c>
 8002c84:	4b25      	ldr	r3, [pc, #148]	; (8002d1c <HAL_UARTEx_RxEventCallback+0x5d0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a2b      	ldr	r2, [pc, #172]	; (8002d38 <HAL_UARTEx_RxEventCallback+0x5ec>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d02c      	beq.n	8002ce8 <HAL_UARTEx_RxEventCallback+0x59c>
 8002c8e:	4b23      	ldr	r3, [pc, #140]	; (8002d1c <HAL_UARTEx_RxEventCallback+0x5d0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a2a      	ldr	r2, [pc, #168]	; (8002d3c <HAL_UARTEx_RxEventCallback+0x5f0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d027      	beq.n	8002ce8 <HAL_UARTEx_RxEventCallback+0x59c>
 8002c98:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_UARTEx_RxEventCallback+0x5d0>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a28      	ldr	r2, [pc, #160]	; (8002d40 <HAL_UARTEx_RxEventCallback+0x5f4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d022      	beq.n	8002ce8 <HAL_UARTEx_RxEventCallback+0x59c>
 8002ca2:	4b1e      	ldr	r3, [pc, #120]	; (8002d1c <HAL_UARTEx_RxEventCallback+0x5d0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a27      	ldr	r2, [pc, #156]	; (8002d44 <HAL_UARTEx_RxEventCallback+0x5f8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d01d      	beq.n	8002ce8 <HAL_UARTEx_RxEventCallback+0x59c>
 8002cac:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <HAL_UARTEx_RxEventCallback+0x5d0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a25      	ldr	r2, [pc, #148]	; (8002d48 <HAL_UARTEx_RxEventCallback+0x5fc>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d018      	beq.n	8002ce8 <HAL_UARTEx_RxEventCallback+0x59c>
 8002cb6:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <HAL_UARTEx_RxEventCallback+0x5d0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a24      	ldr	r2, [pc, #144]	; (8002d4c <HAL_UARTEx_RxEventCallback+0x600>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d013      	beq.n	8002ce8 <HAL_UARTEx_RxEventCallback+0x59c>
 8002cc0:	4b16      	ldr	r3, [pc, #88]	; (8002d1c <HAL_UARTEx_RxEventCallback+0x5d0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a22      	ldr	r2, [pc, #136]	; (8002d50 <HAL_UARTEx_RxEventCallback+0x604>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d00e      	beq.n	8002ce8 <HAL_UARTEx_RxEventCallback+0x59c>
 8002cca:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <HAL_UARTEx_RxEventCallback+0x5d0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a21      	ldr	r2, [pc, #132]	; (8002d54 <HAL_UARTEx_RxEventCallback+0x608>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d009      	beq.n	8002ce8 <HAL_UARTEx_RxEventCallback+0x59c>
 8002cd4:	4b11      	ldr	r3, [pc, #68]	; (8002d1c <HAL_UARTEx_RxEventCallback+0x5d0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1f      	ldr	r2, [pc, #124]	; (8002d58 <HAL_UARTEx_RxEventCallback+0x60c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d004      	beq.n	8002ce8 <HAL_UARTEx_RxEventCallback+0x59c>
 8002cde:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <HAL_UARTEx_RxEventCallback+0x5d0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a1e      	ldr	r2, [pc, #120]	; (8002d5c <HAL_UARTEx_RxEventCallback+0x610>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d108      	bne.n	8002cfa <HAL_UARTEx_RxEventCallback+0x5ae>
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <HAL_UARTEx_RxEventCallback+0x5d0>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_UARTEx_RxEventCallback+0x5d0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0208 	bic.w	r2, r2, #8
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	e008      	b.n	8002d0c <HAL_UARTEx_RxEventCallback+0x5c0>
 8002cfa:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <HAL_UARTEx_RxEventCallback+0x5d0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_UARTEx_RxEventCallback+0x5d0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0204 	bic.w	r2, r2, #4
 8002d08:	601a      	str	r2, [r3, #0]
}
 8002d0a:	bf00      	nop
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bdb0      	pop	{r4, r5, r7, pc}
 8002d14:	240008b4 	.word	0x240008b4
 8002d18:	240010b0 	.word	0x240010b0
 8002d1c:	24001038 	.word	0x24001038
 8002d20:	40020010 	.word	0x40020010
 8002d24:	40020028 	.word	0x40020028
 8002d28:	40020040 	.word	0x40020040
 8002d2c:	40020058 	.word	0x40020058
 8002d30:	40020070 	.word	0x40020070
 8002d34:	40020088 	.word	0x40020088
 8002d38:	400200a0 	.word	0x400200a0
 8002d3c:	400200b8 	.word	0x400200b8
 8002d40:	40020410 	.word	0x40020410
 8002d44:	40020428 	.word	0x40020428
 8002d48:	40020440 	.word	0x40020440
 8002d4c:	40020458 	.word	0x40020458
 8002d50:	40020470 	.word	0x40020470
 8002d54:	40020488 	.word	0x40020488
 8002d58:	400204a0 	.word	0x400204a0
 8002d5c:	400204b8 	.word	0x400204b8

08002d60 <HAL_TIM_PeriodElapsedCallback>:





void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]

	if (htim == &htim7) {	//

	}

	if (htim == &htim5) {	//
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4aad      	ldr	r2, [pc, #692]	; (8003020 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	f040 8187 	bne.w	8003080 <HAL_TIM_PeriodElapsedCallback+0x320>

			encoderJ1.AMT21_Read();
 8002d72:	48ac      	ldr	r0, [pc, #688]	; (8003024 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002d74:	f7fd fca7 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
			HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8002d78:	48aa      	ldr	r0, [pc, #680]	; (8003024 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002d7a:	f7fd fcd3 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	461a      	mov	r2, r3
 8002d82:	4ba9      	ldr	r3, [pc, #676]	; (8003028 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002d84:	701a      	strb	r2, [r3, #0]
			if (HALENCJ1OK == HAL_OK) {
 8002d86:	4ba8      	ldr	r3, [pc, #672]	; (8003028 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d110      	bne.n	8002db0 <HAL_TIM_PeriodElapsedCallback+0x50>
				fcb_joint1.Encoder = encoderJ1.getAngPos180()/ 2609.0 ;
 8002d8e:	48a5      	ldr	r0, [pc, #660]	; (8003024 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002d90:	f7fd fd2c 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8002d94:	4603      	mov	r3, r0
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002d9e:	ed9f 5b9c 	vldr	d5, [pc, #624]	; 8003010 <HAL_TIM_PeriodElapsedCallback+0x2b0>
 8002da2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002da6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002daa:	4ba0      	ldr	r3, [pc, #640]	; (800302c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002dac:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	//		if(HALENCJ2OK == HAL_OK){
	//			encoderJ2.unwarp();
	//			posJ2 = encoderJ2.getUnwarpValue();
	//		}

			encoderJ3.AMT21_Read();
 8002db0:	489f      	ldr	r0, [pc, #636]	; (8003030 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002db2:	f7fd fc88 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
			HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8002db6:	489e      	ldr	r0, [pc, #632]	; (8003030 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002db8:	f7fd fcb4 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4b9c      	ldr	r3, [pc, #624]	; (8003034 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002dc2:	701a      	strb	r2, [r3, #0]
			if (HALENCJ3OK == HAL_OK) {
 8002dc4:	4b9b      	ldr	r3, [pc, #620]	; (8003034 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d110      	bne.n	8002dee <HAL_TIM_PeriodElapsedCallback+0x8e>
				fcb_joint3.Encoder = encoderJ3.getAngPos180()/ 2609.0 ;
 8002dcc:	4898      	ldr	r0, [pc, #608]	; (8003030 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002dce:	f7fd fd0d 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	ee07 3a90 	vmov	s15, r3
 8002dd8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002ddc:	ed9f 5b8c 	vldr	d5, [pc, #560]	; 8003010 <HAL_TIM_PeriodElapsedCallback+0x2b0>
 8002de0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002de4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002de8:	4b93      	ldr	r3, [pc, #588]	; (8003038 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002dea:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			}

			encoderJ4.AMT21_Read();
 8002dee:	4893      	ldr	r0, [pc, #588]	; (800303c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002df0:	f7fd fc69 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
			HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8002df4:	4891      	ldr	r0, [pc, #580]	; (800303c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002df6:	f7fd fc95 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4b90      	ldr	r3, [pc, #576]	; (8003040 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002e00:	701a      	strb	r2, [r3, #0]
			if (HALENCJ4OK == HAL_OK) {
 8002e02:	4b8f      	ldr	r3, [pc, #572]	; (8003040 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d110      	bne.n	8002e2c <HAL_TIM_PeriodElapsedCallback+0xcc>
				fcb_joint4.Encoder = encoderJ4.getAngPos180()/ 2609.0 ;
 8002e0a:	488c      	ldr	r0, [pc, #560]	; (800303c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002e0c:	f7fd fcee 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8002e10:	4603      	mov	r3, r0
 8002e12:	ee07 3a90 	vmov	s15, r3
 8002e16:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002e1a:	ed9f 5b7d 	vldr	d5, [pc, #500]	; 8003010 <HAL_TIM_PeriodElapsedCallback+0x2b0>
 8002e1e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002e22:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e26:	4b87      	ldr	r3, [pc, #540]	; (8003044 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002e28:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	//		stepperJ2.StepperSetFrequency(dq2);
	//		stepperJ3.StepperSetFrequency(dq3);
	//		stepperJ4.StepperSetFrequency(dq4);


			fcb_X.UpdateIVK(fcb_joint1.Encoder , 0.0,fcb_joint3.Encoder, 0.0, dx/1000.0, dy/1000.0, dz/1000.0, 0.0);
 8002e2c:	4b7f      	ldr	r3, [pc, #508]	; (800302c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002e2e:	edd3 4a11 	vldr	s9, [r3, #68]	; 0x44
 8002e32:	4b81      	ldr	r3, [pc, #516]	; (8003038 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002e34:	ed93 4a11 	vldr	s8, [r3, #68]	; 0x44
 8002e38:	4b83      	ldr	r3, [pc, #524]	; (8003048 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	b25b      	sxtb	r3, r3
 8002e3e:	ee07 3a90 	vmov	s15, r3
 8002e42:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002e46:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8003018 <HAL_TIM_PeriodElapsedCallback+0x2b8>
 8002e4a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002e4e:	eeb7 2bc7 	vcvt.f32.f64	s4, d7
 8002e52:	4b7e      	ldr	r3, [pc, #504]	; (800304c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	b25b      	sxtb	r3, r3
 8002e58:	ee07 3a90 	vmov	s15, r3
 8002e5c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002e60:	ed9f 5b6d 	vldr	d5, [pc, #436]	; 8003018 <HAL_TIM_PeriodElapsedCallback+0x2b8>
 8002e64:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002e68:	eef7 2bc7 	vcvt.f32.f64	s5, d7
 8002e6c:	4b78      	ldr	r3, [pc, #480]	; (8003050 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	b25b      	sxtb	r3, r3
 8002e72:	ee07 3a90 	vmov	s15, r3
 8002e76:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002e7a:	ed9f 5b67 	vldr	d5, [pc, #412]	; 8003018 <HAL_TIM_PeriodElapsedCallback+0x2b8>
 8002e7e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002e82:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e86:	eddf 3a73 	vldr	s7, [pc, #460]	; 8003054 <HAL_TIM_PeriodElapsedCallback+0x2f4>
 8002e8a:	eeb0 3a67 	vmov.f32	s6, s15
 8002e8e:	eddf 1a71 	vldr	s3, [pc, #452]	; 8003054 <HAL_TIM_PeriodElapsedCallback+0x2f4>
 8002e92:	eeb0 1a44 	vmov.f32	s2, s8
 8002e96:	eddf 0a6f 	vldr	s1, [pc, #444]	; 8003054 <HAL_TIM_PeriodElapsedCallback+0x2f4>
 8002e9a:	eeb0 0a64 	vmov.f32	s0, s9
 8002e9e:	486e      	ldr	r0, [pc, #440]	; (8003058 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002ea0:	f7fd fd42 	bl	8000928 <_ZN10RobotJoint9UpdateIVKEffffffff>

			int i;
					for (i = 1 ; i<num ; i++)
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	61fb      	str	r3, [r7, #28]
 8002ea8:	4b6c      	ldr	r3, [pc, #432]	; (800305c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	da2f      	bge.n	8002f12 <HAL_TIM_PeriodElapsedCallback+0x1b2>
					{
						box_q1[i-1] = box_q1[i];
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	496a      	ldr	r1, [pc, #424]	; (8003060 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002eb8:	69fa      	ldr	r2, [r7, #28]
 8002eba:	0092      	lsls	r2, r2, #2
 8002ebc:	440a      	add	r2, r1
 8002ebe:	6812      	ldr	r2, [r2, #0]
 8002ec0:	4967      	ldr	r1, [pc, #412]	; (8003060 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	601a      	str	r2, [r3, #0]
						box_q2[i-1] = box_q2[i];
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	4965      	ldr	r1, [pc, #404]	; (8003064 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	0092      	lsls	r2, r2, #2
 8002ed2:	440a      	add	r2, r1
 8002ed4:	6812      	ldr	r2, [r2, #0]
 8002ed6:	4963      	ldr	r1, [pc, #396]	; (8003064 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	601a      	str	r2, [r3, #0]
						box_q3[i-1] = box_q3[i];
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	4961      	ldr	r1, [pc, #388]	; (8003068 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	0092      	lsls	r2, r2, #2
 8002ee8:	440a      	add	r2, r1
 8002eea:	6812      	ldr	r2, [r2, #0]
 8002eec:	495e      	ldr	r1, [pc, #376]	; (8003068 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	601a      	str	r2, [r3, #0]
						box_q4[i-1] = box_q4[i];
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	495c      	ldr	r1, [pc, #368]	; (800306c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002efa:	69fa      	ldr	r2, [r7, #28]
 8002efc:	0092      	lsls	r2, r2, #2
 8002efe:	440a      	add	r2, r1
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	495a      	ldr	r1, [pc, #360]	; (800306c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	601a      	str	r2, [r3, #0]
					for (i = 1 ; i<num ; i++)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	e7ca      	b.n	8002ea8 <HAL_TIM_PeriodElapsedCallback+0x148>
					}
					 box_q1[num-1] = fcb_X.w_q1;
 8002f12:	4b52      	ldr	r3, [pc, #328]	; (800305c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	4a4f      	ldr	r2, [pc, #316]	; (8003058 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002f1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f1c:	4950      	ldr	r1, [pc, #320]	; (8003060 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	601a      	str	r2, [r3, #0]
					 box_q2[num-1] = dz;
 8002f24:	4b4a      	ldr	r3, [pc, #296]	; (8003050 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	b25a      	sxtb	r2, r3
 8002f2a:	4b4c      	ldr	r3, [pc, #304]	; (800305c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	ee07 2a90 	vmov	s15, r2
 8002f34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f38:	4a4a      	ldr	r2, [pc, #296]	; (8003064 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	edc3 7a00 	vstr	s15, [r3]
					 box_q3[num-1] = fcb_X.w_q3;
 8002f42:	4b46      	ldr	r3, [pc, #280]	; (800305c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	4a43      	ldr	r2, [pc, #268]	; (8003058 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002f4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f4c:	4946      	ldr	r1, [pc, #280]	; (8003068 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	601a      	str	r2, [r3, #0]
					 box_q4[num-1] = fcb_X.w_q4;
 8002f54:	4b41      	ldr	r3, [pc, #260]	; (800305c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	4a3f      	ldr	r2, [pc, #252]	; (8003058 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002f5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f5e:	4943      	ldr	r1, [pc, #268]	; (800306c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	601a      	str	r2, [r3, #0]

					u_q1 = 0.0;
 8002f66:	4b42      	ldr	r3, [pc, #264]	; (8003070 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
					u_q2 = 0.0;
 8002f6e:	4b41      	ldr	r3, [pc, #260]	; (8003074 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
					u_q3 = 0.0;
 8002f76:	4b40      	ldr	r3, [pc, #256]	; (8003078 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
					u_q4 = 0.0;
 8002f7e:	4b3f      	ldr	r3, [pc, #252]	; (800307c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]

					for(i = 0; i < num; i++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	4b34      	ldr	r3, [pc, #208]	; (800305c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	da75      	bge.n	8003080 <HAL_TIM_PeriodElapsedCallback+0x320>
					{
						u_q1 += box_q1[i];
 8002f94:	4a32      	ldr	r2, [pc, #200]	; (8003060 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	ed93 7a00 	vldr	s14, [r3]
 8002fa0:	4b33      	ldr	r3, [pc, #204]	; (8003070 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002fa2:	edd3 7a00 	vldr	s15, [r3]
 8002fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002faa:	4b31      	ldr	r3, [pc, #196]	; (8003070 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002fac:	edc3 7a00 	vstr	s15, [r3]
						u_q2 += box_q2[i];
 8002fb0:	4a2c      	ldr	r2, [pc, #176]	; (8003064 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	ed93 7a00 	vldr	s14, [r3]
 8002fbc:	4b2d      	ldr	r3, [pc, #180]	; (8003074 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002fbe:	edd3 7a00 	vldr	s15, [r3]
 8002fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fc6:	4b2b      	ldr	r3, [pc, #172]	; (8003074 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002fc8:	edc3 7a00 	vstr	s15, [r3]
						u_q3 += box_q3[i];
 8002fcc:	4a26      	ldr	r2, [pc, #152]	; (8003068 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	ed93 7a00 	vldr	s14, [r3]
 8002fd8:	4b27      	ldr	r3, [pc, #156]	; (8003078 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002fda:	edd3 7a00 	vldr	s15, [r3]
 8002fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe2:	4b25      	ldr	r3, [pc, #148]	; (8003078 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002fe4:	edc3 7a00 	vstr	s15, [r3]
						u_q4 += box_q4[i];
 8002fe8:	4a20      	ldr	r2, [pc, #128]	; (800306c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	ed93 7a00 	vldr	s14, [r3]
 8002ff4:	4b21      	ldr	r3, [pc, #132]	; (800307c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002ff6:	edd3 7a00 	vldr	s15, [r3]
 8002ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffe:	4b1f      	ldr	r3, [pc, #124]	; (800307c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8003000:	edc3 7a00 	vstr	s15, [r3]
					for(i = 0; i < num; i++)
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	3301      	adds	r3, #1
 8003008:	61fb      	str	r3, [r7, #28]
 800300a:	e7be      	b.n	8002f8a <HAL_TIM_PeriodElapsedCallback+0x22a>
 800300c:	f3af 8000 	nop.w
 8003010:	00000000 	.word	0x00000000
 8003014:	40a46200 	.word	0x40a46200
 8003018:	00000000 	.word	0x00000000
 800301c:	408f4000 	.word	0x408f4000
 8003020:	24000c38 	.word	0x24000c38
 8003024:	24000210 	.word	0x24000210
 8003028:	24000878 	.word	0x24000878
 800302c:	24000304 	.word	0x24000304
 8003030:	2400022c 	.word	0x2400022c
 8003034:	24000879 	.word	0x24000879
 8003038:	240004cc 	.word	0x240004cc
 800303c:	24000248 	.word	0x24000248
 8003040:	2400087a 	.word	0x2400087a
 8003044:	240005b0 	.word	0x240005b0
 8003048:	2400087f 	.word	0x2400087f
 800304c:	24000880 	.word	0x24000880
 8003050:	24000881 	.word	0x24000881
 8003054:	00000000 	.word	0x00000000
 8003058:	24000778 	.word	0x24000778
 800305c:	24000010 	.word	0x24000010
 8003060:	24000908 	.word	0x24000908
 8003064:	24000980 	.word	0x24000980
 8003068:	240009f8 	.word	0x240009f8
 800306c:	24000a70 	.word	0x24000a70
 8003070:	240008e8 	.word	0x240008e8
 8003074:	240008ec 	.word	0x240008ec
 8003078:	240008f0 	.word	0x240008f0
 800307c:	240008f4 	.word	0x240008f4

	if (htim == &htim16)
	{

	}
	if (htim == &htim14) {
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4ad9      	ldr	r2, [pc, #868]	; (80033e8 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8003084:	4293      	cmp	r3, r2
 8003086:	f040 8424 	bne.w	80038d2 <HAL_TIM_PeriodElapsedCallback+0xb72>

		encoderJ1.AMT21_Read();
 800308a:	48d8      	ldr	r0, [pc, #864]	; (80033ec <HAL_TIM_PeriodElapsedCallback+0x68c>)
 800308c:	f7fd fb1b 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8003090:	48d6      	ldr	r0, [pc, #856]	; (80033ec <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8003092:	f7fd fb47 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003096:	4603      	mov	r3, r0
 8003098:	461a      	mov	r2, r3
 800309a:	4bd5      	ldr	r3, [pc, #852]	; (80033f0 <HAL_TIM_PeriodElapsedCallback+0x690>)
 800309c:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 800309e:	4bd4      	ldr	r3, [pc, #848]	; (80033f0 <HAL_TIM_PeriodElapsedCallback+0x690>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d110      	bne.n	80030c8 <HAL_TIM_PeriodElapsedCallback+0x368>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609 ;
 80030a6:	48d1      	ldr	r0, [pc, #836]	; (80033ec <HAL_TIM_PeriodElapsedCallback+0x68c>)
 80030a8:	f7fd fba0 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 80030ac:	4603      	mov	r3, r0
 80030ae:	ee07 3a90 	vmov	s15, r3
 80030b2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80030b6:	ed9f 5bca 	vldr	d5, [pc, #808]	; 80033e0 <HAL_TIM_PeriodElapsedCallback+0x680>
 80030ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80030be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80030c2:	4bcc      	ldr	r3, [pc, #816]	; (80033f4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 80030c4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
//		if(HALENCJ2OK == HAL_OK){
//			encoderJ2.unwarp();
//			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609 ;
//		}

		encoderJ3.AMT21_Read();
 80030c8:	48cb      	ldr	r0, [pc, #812]	; (80033f8 <HAL_TIM_PeriodElapsedCallback+0x698>)
 80030ca:	f7fd fafc 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 80030ce:	48ca      	ldr	r0, [pc, #808]	; (80033f8 <HAL_TIM_PeriodElapsedCallback+0x698>)
 80030d0:	f7fd fb28 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80030d4:	4603      	mov	r3, r0
 80030d6:	461a      	mov	r2, r3
 80030d8:	4bc8      	ldr	r3, [pc, #800]	; (80033fc <HAL_TIM_PeriodElapsedCallback+0x69c>)
 80030da:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 80030dc:	4bc7      	ldr	r3, [pc, #796]	; (80033fc <HAL_TIM_PeriodElapsedCallback+0x69c>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d110      	bne.n	8003106 <HAL_TIM_PeriodElapsedCallback+0x3a6>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609 ;
 80030e4:	48c4      	ldr	r0, [pc, #784]	; (80033f8 <HAL_TIM_PeriodElapsedCallback+0x698>)
 80030e6:	f7fd fb81 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 80030ea:	4603      	mov	r3, r0
 80030ec:	ee07 3a90 	vmov	s15, r3
 80030f0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80030f4:	ed9f 5bba 	vldr	d5, [pc, #744]	; 80033e0 <HAL_TIM_PeriodElapsedCallback+0x680>
 80030f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80030fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003100:	4bbf      	ldr	r3, [pc, #764]	; (8003400 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8003102:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 8003106:	48bf      	ldr	r0, [pc, #764]	; (8003404 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8003108:	f7fd fadd 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 800310c:	48bd      	ldr	r0, [pc, #756]	; (8003404 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 800310e:	f7fd fb09 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003112:	4603      	mov	r3, r0
 8003114:	461a      	mov	r2, r3
 8003116:	4bbc      	ldr	r3, [pc, #752]	; (8003408 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8003118:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 800311a:	4bbb      	ldr	r3, [pc, #748]	; (8003408 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d110      	bne.n	8003144 <HAL_TIM_PeriodElapsedCallback+0x3e4>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;
 8003122:	48b8      	ldr	r0, [pc, #736]	; (8003404 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8003124:	f7fd fb62 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8003128:	4603      	mov	r3, r0
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003132:	ed9f 5bab 	vldr	d5, [pc, #684]	; 80033e0 <HAL_TIM_PeriodElapsedCallback+0x680>
 8003136:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800313a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800313e:	4bb3      	ldr	r3, [pc, #716]	; (800340c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8003140:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}



		float t2 = t * t;
 8003144:	4bb2      	ldr	r3, [pc, #712]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8003146:	ed93 7a00 	vldr	s14, [r3]
 800314a:	4bb1      	ldr	r3, [pc, #708]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 800314c:	edd3 7a00 	vldr	s15, [r3]
 8003150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003154:	edc7 7a06 	vstr	s15, [r7, #24]
		float t3 = t * t * t;
 8003158:	4bad      	ldr	r3, [pc, #692]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 800315a:	ed93 7a00 	vldr	s14, [r3]
 800315e:	4bac      	ldr	r3, [pc, #688]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8003160:	edd3 7a00 	vldr	s15, [r3]
 8003164:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003168:	4ba9      	ldr	r3, [pc, #676]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 800316a:	edd3 7a00 	vldr	s15, [r3]
 800316e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003172:	edc7 7a05 	vstr	s15, [r7, #20]
		float t4 = t * t * t * t;
 8003176:	4ba6      	ldr	r3, [pc, #664]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8003178:	ed93 7a00 	vldr	s14, [r3]
 800317c:	4ba4      	ldr	r3, [pc, #656]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 800317e:	edd3 7a00 	vldr	s15, [r3]
 8003182:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003186:	4ba2      	ldr	r3, [pc, #648]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8003188:	edd3 7a00 	vldr	s15, [r3]
 800318c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003190:	4b9f      	ldr	r3, [pc, #636]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8003192:	edd3 7a00 	vldr	s15, [r3]
 8003196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319a:	edc7 7a04 	vstr	s15, [r7, #16]
		float t5 = t * t * t * t * t;
 800319e:	4b9c      	ldr	r3, [pc, #624]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 80031a0:	ed93 7a00 	vldr	s14, [r3]
 80031a4:	4b9a      	ldr	r3, [pc, #616]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 80031a6:	edd3 7a00 	vldr	s15, [r3]
 80031aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031ae:	4b98      	ldr	r3, [pc, #608]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 80031b0:	edd3 7a00 	vldr	s15, [r3]
 80031b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031b8:	4b95      	ldr	r3, [pc, #596]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 80031ba:	edd3 7a00 	vldr	s15, [r3]
 80031be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031c2:	4b93      	ldr	r3, [pc, #588]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 80031c4:	edd3 7a00 	vldr	s15, [r3]
 80031c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031cc:	edc7 7a03 	vstr	s15, [r7, #12]
////		fcb_joint3.Goal_Position = fcb_X.q3;




		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0*fcb_joint1.C2*t) + (3.0*fcb_joint1.C3*t2) + (4.0*fcb_joint1.C4*t3) + (5.0*fcb_joint1.C5*t4);
 80031d0:	4b88      	ldr	r3, [pc, #544]	; (80033f4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 80031d2:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80031d6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80031da:	4b86      	ldr	r3, [pc, #536]	; (80033f4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 80031dc:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 80031e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031e4:	ee37 5b07 	vadd.f64	d5, d7, d7
 80031e8:	4b89      	ldr	r3, [pc, #548]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 80031ea:	edd3 7a00 	vldr	s15, [r3]
 80031ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031f2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80031f6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80031fa:	4b7e      	ldr	r3, [pc, #504]	; (80033f4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 80031fc:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003200:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003204:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003208:	ee27 5b05 	vmul.f64	d5, d7, d5
 800320c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003210:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003214:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003218:	ee36 6b07 	vadd.f64	d6, d6, d7
 800321c:	4b75      	ldr	r3, [pc, #468]	; (80033f4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 800321e:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003222:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003226:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800322a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800322e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003232:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003236:	ee25 7b07 	vmul.f64	d7, d5, d7
 800323a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800323e:	4b6d      	ldr	r3, [pc, #436]	; (80033f4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8003240:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003244:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003248:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 800324c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003250:	edd7 7a04 	vldr	s15, [r7, #16]
 8003254:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003258:	ee25 7b07 	vmul.f64	d7, d5, d7
 800325c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003260:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003264:	4b63      	ldr	r3, [pc, #396]	; (80033f4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8003266:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1*t) + (fcb_joint1.C2*t2) + (fcb_joint1.C3*t3) + (fcb_joint1.C4*t4) + (fcb_joint1.C5*t5));
 800326a:	4b62      	ldr	r3, [pc, #392]	; (80033f4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 800326c:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003270:	4b60      	ldr	r3, [pc, #384]	; (80033f4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8003272:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003276:	4b66      	ldr	r3, [pc, #408]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8003278:	edd3 7a00 	vldr	s15, [r3]
 800327c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003280:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003284:	4b5b      	ldr	r3, [pc, #364]	; (80033f4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8003286:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 800328a:	edd7 7a06 	vldr	s15, [r7, #24]
 800328e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003292:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003296:	4b57      	ldr	r3, [pc, #348]	; (80033f4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8003298:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 800329c:	edd7 7a05 	vldr	s15, [r7, #20]
 80032a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032a8:	4b52      	ldr	r3, [pc, #328]	; (80033f4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 80032aa:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 80032ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80032b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032ba:	4b4e      	ldr	r3, [pc, #312]	; (80033f4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 80032bc:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 80032c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80032c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032cc:	4b49      	ldr	r3, [pc, #292]	; (80033f4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 80032ce:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0*fcb_joint3.C2*t) + (3.0*fcb_joint3.C3*t2) + (4.0*fcb_joint3.C4*t3) + (5.0*fcb_joint3.C5*t4);
 80032d2:	4b4b      	ldr	r3, [pc, #300]	; (8003400 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80032d4:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80032d8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80032dc:	4b48      	ldr	r3, [pc, #288]	; (8003400 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80032de:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 80032e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80032e6:	ee37 5b07 	vadd.f64	d5, d7, d7
 80032ea:	4b49      	ldr	r3, [pc, #292]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 80032ec:	edd3 7a00 	vldr	s15, [r3]
 80032f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80032f4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80032f8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80032fc:	4b40      	ldr	r3, [pc, #256]	; (8003400 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80032fe:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003302:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003306:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800330a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800330e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003312:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003316:	ee25 7b07 	vmul.f64	d7, d5, d7
 800331a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800331e:	4b38      	ldr	r3, [pc, #224]	; (8003400 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8003320:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003324:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003328:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800332c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003330:	edd7 7a05 	vldr	s15, [r7, #20]
 8003334:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003338:	ee25 7b07 	vmul.f64	d7, d5, d7
 800333c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003340:	4b2f      	ldr	r3, [pc, #188]	; (8003400 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8003342:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003346:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800334a:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 800334e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003352:	edd7 7a04 	vldr	s15, [r7, #16]
 8003356:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800335a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800335e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003362:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003366:	4b26      	ldr	r3, [pc, #152]	; (8003400 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8003368:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1*t) + (fcb_joint3.C2*t2) + (fcb_joint3.C3*t3) + (fcb_joint3.C4*t4) + (fcb_joint3.C5*t5));
 800336c:	4b24      	ldr	r3, [pc, #144]	; (8003400 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 800336e:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003372:	4b23      	ldr	r3, [pc, #140]	; (8003400 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8003374:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003378:	4b25      	ldr	r3, [pc, #148]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 800337a:	edd3 7a00 	vldr	s15, [r3]
 800337e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003382:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003386:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8003388:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 800338c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003390:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003394:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003398:	4b19      	ldr	r3, [pc, #100]	; (8003400 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 800339a:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 800339e:	edd7 7a05 	vldr	s15, [r7, #20]
 80033a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033aa:	4b15      	ldr	r3, [pc, #84]	; (8003400 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80033ac:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 80033b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80033b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033bc:	4b10      	ldr	r3, [pc, #64]	; (8003400 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80033be:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 80033c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80033c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ce:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80033d0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		//		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
		//		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
		//		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
		//		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;

		fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
 80033d4:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 80033d6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80033da:	eeb0 0a67 	vmov.f32	s0, s15
 80033de:	e019      	b.n	8003414 <HAL_TIM_PeriodElapsedCallback+0x6b4>
 80033e0:	645a1cac 	.word	0x645a1cac
 80033e4:	4004df3b 	.word	0x4004df3b
 80033e8:	24000e00 	.word	0x24000e00
 80033ec:	24000210 	.word	0x24000210
 80033f0:	24000878 	.word	0x24000878
 80033f4:	24000304 	.word	0x24000304
 80033f8:	2400022c 	.word	0x2400022c
 80033fc:	24000879 	.word	0x24000879
 8003400:	240004cc 	.word	0x240004cc
 8003404:	24000248 	.word	0x24000248
 8003408:	2400087a 	.word	0x2400087a
 800340c:	240005b0 	.word	0x240005b0
 8003410:	240008d4 	.word	0x240008d4
 8003414:	48bf      	ldr	r0, [pc, #764]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8003416:	f7fd fcd5 	bl	8000dc4 <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint1.kalman_pos = fcb_joint1.X11;
 800341a:	4bbe      	ldr	r3, [pc, #760]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 800341c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003420:	4abc      	ldr	r2, [pc, #752]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8003422:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint1.kalman_velo = fcb_joint1.X21;
 8003426:	4bbb      	ldr	r3, [pc, #748]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8003428:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800342c:	4ab9      	ldr	r2, [pc, #740]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 800342e:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
 8003432:	4bb9      	ldr	r3, [pc, #740]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8003434:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003438:	eeb0 0a67 	vmov.f32	s0, s15
 800343c:	48b6      	ldr	r0, [pc, #728]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 800343e:	f7fd fcc1 	bl	8000dc4 <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint3.kalman_pos = fcb_joint3.X11;
 8003442:	4bb5      	ldr	r3, [pc, #724]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8003444:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003448:	4ab3      	ldr	r2, [pc, #716]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 800344a:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint3.kalman_velo = fcb_joint3.X21;
 800344e:	4bb2      	ldr	r3, [pc, #712]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8003450:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003454:	4ab0      	ldr	r2, [pc, #704]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8003456:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
		// -1570, 785

		fcb_joint1.Kp_p = 0.0;
 800345a:	4bae      	ldr	r3, [pc, #696]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint1.Ki_p = 0.0;
 8003462:	4bac      	ldr	r3, [pc, #688]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint1.Kd_p = 0.0;
 800346a:	4baa      	ldr	r3, [pc, #680]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	669a      	str	r2, [r3, #104]	; 0x68
		fcb_joint3.Kp_p = 0.015; // 0.008
 8003472:	4ba9      	ldr	r3, [pc, #676]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8003474:	4aa9      	ldr	r2, [pc, #676]	; (800371c <HAL_TIM_PeriodElapsedCallback+0x9bc>)
 8003476:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint3.Ki_p = 0.009; // 0.01
 8003478:	4ba7      	ldr	r3, [pc, #668]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 800347a:	4aa9      	ldr	r2, [pc, #676]	; (8003720 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 800347c:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint3.Kd_p = 0.0015; // 0.02
 800347e:	4ba6      	ldr	r3, [pc, #664]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8003480:	4aa8      	ldr	r2, [pc, #672]	; (8003724 <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 8003482:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint1.Kp_v = 0.0;
 8003484:	4ba3      	ldr	r3, [pc, #652]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint1.Ki_v = 0.0;
 800348c:	4ba1      	ldr	r3, [pc, #644]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint1.Kd_v = 0.0;
 8003494:	4b9f      	ldr	r3, [pc, #636]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	675a      	str	r2, [r3, #116]	; 0x74
		fcb_joint3.Kp_v = 0.0;
 800349c:	4b9e      	ldr	r3, [pc, #632]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint3.Ki_v = 0.0;
 80034a4:	4b9c      	ldr	r3, [pc, #624]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint3.Kd_v = 0.0;
 80034ac:	4b9a      	ldr	r3, [pc, #616]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
 80034b4:	4b97      	ldr	r3, [pc, #604]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80034b6:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80034ba:	4b96      	ldr	r3, [pc, #600]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80034bc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80034c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034c4:	4b93      	ldr	r3, [pc, #588]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80034c6:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
 80034ca:	4b93      	ldr	r3, [pc, #588]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 80034cc:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80034d0:	4b91      	ldr	r3, [pc, #580]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 80034d2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80034d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034da:	4b8f      	ldr	r3, [pc, #572]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 80034dc:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint1.Error_v = fcb_joint1.Goal_Velocity - fcb_joint1.kalman_velo;
 80034e0:	4b8c      	ldr	r3, [pc, #560]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80034e2:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80034e6:	4b8b      	ldr	r3, [pc, #556]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80034e8:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 80034ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f0:	4b88      	ldr	r3, [pc, #544]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80034f2:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		fcb_joint3.Error_v = fcb_joint3.Goal_Velocity - fcb_joint3.kalman_velo;
 80034f6:	4b88      	ldr	r3, [pc, #544]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 80034f8:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80034fc:	4b86      	ldr	r3, [pc, #536]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 80034fe:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003506:	4b84      	ldr	r3, [pc, #528]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8003508:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 800350c:	4b81      	ldr	r3, [pc, #516]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 800350e:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003512:	4b80      	ldr	r3, [pc, #512]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8003514:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800351c:	4b7d      	ldr	r3, [pc, #500]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 800351e:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 8003522:	4b7d      	ldr	r3, [pc, #500]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8003524:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003528:	4b7b      	ldr	r3, [pc, #492]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 800352a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800352e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003532:	4b79      	ldr	r3, [pc, #484]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8003534:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint1.Sum_Error_v += fcb_joint1.Error_v;
 8003538:	4b76      	ldr	r3, [pc, #472]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 800353a:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800353e:	4b75      	ldr	r3, [pc, #468]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8003540:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003548:	4b72      	ldr	r3, [pc, #456]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 800354a:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		fcb_joint3.Sum_Error_v += fcb_joint3.Error_v;
 800354e:	4b72      	ldr	r3, [pc, #456]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8003550:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8003554:	4b70      	ldr	r3, [pc, #448]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8003556:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800355a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800355e:	4b6e      	ldr	r3, [pc, #440]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8003560:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 8003564:	4b6b      	ldr	r3, [pc, #428]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8003566:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
									(fcb_joint1.Kp_p * fcb_joint1.Error_p ) +
 800356a:	4b6a      	ldr	r3, [pc, #424]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 800356c:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003570:	4b68      	ldr	r3, [pc, #416]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8003572:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003576:	ee66 7aa7 	vmul.f32	s15, s13, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 800357a:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p ) +
 800357e:	4b65      	ldr	r3, [pc, #404]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8003580:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8003584:	4b63      	ldr	r3, [pc, #396]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8003586:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800358a:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kp_p * fcb_joint1.Error_p ) +
 800358e:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p) ) +
 8003592:	4b60      	ldr	r3, [pc, #384]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8003594:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003598:	4b5e      	ldr	r3, [pc, #376]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 800359a:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 800359e:	4b5d      	ldr	r3, [pc, #372]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80035a0:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80035a4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80035a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p ) +
 80035ac:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kp_v * fcb_joint1.Error_v ) +
 80035b0:	4b58      	ldr	r3, [pc, #352]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80035b2:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 80035b6:	4b57      	ldr	r3, [pc, #348]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80035b8:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80035bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p) ) +
 80035c0:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v ) +
 80035c4:	4b53      	ldr	r3, [pc, #332]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80035c6:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 80035ca:	4b52      	ldr	r3, [pc, #328]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80035cc:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80035d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kp_v * fcb_joint1.Error_v ) +
 80035d4:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kd_v * (fcb_joint1.Error_v - fcb_joint1.Old_v) ) ;
 80035d8:	4b4e      	ldr	r3, [pc, #312]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80035da:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 80035de:	4b4d      	ldr	r3, [pc, #308]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80035e0:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 80035e4:	4b4b      	ldr	r3, [pc, #300]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80035e6:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80035ea:	ee76 7a67 	vsub.f32	s15, s12, s15
 80035ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v ) +
 80035f2:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 80035f6:	4b47      	ldr	r3, [pc, #284]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80035f8:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 80035fc:	4b46      	ldr	r3, [pc, #280]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 80035fe:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
									(fcb_joint3.Kp_p * fcb_joint3.Error_p ) +
 8003602:	4b45      	ldr	r3, [pc, #276]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8003604:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003608:	4b43      	ldr	r3, [pc, #268]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 800360a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800360e:	ee66 7aa7 	vmul.f32	s15, s13, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 8003612:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p ) +
 8003616:	4b40      	ldr	r3, [pc, #256]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8003618:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 800361c:	4b3e      	ldr	r3, [pc, #248]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 800361e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003622:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kp_p * fcb_joint3.Error_p ) +
 8003626:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p) ) +
 800362a:	4b3b      	ldr	r3, [pc, #236]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 800362c:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003630:	4b39      	ldr	r3, [pc, #228]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8003632:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8003636:	4b38      	ldr	r3, [pc, #224]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8003638:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800363c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003640:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p ) +
 8003644:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kp_v * fcb_joint3.Error_v) +
 8003648:	4b33      	ldr	r3, [pc, #204]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 800364a:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800364e:	4b32      	ldr	r3, [pc, #200]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8003650:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003654:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p) ) +
 8003658:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v ) +
 800365c:	4b2e      	ldr	r3, [pc, #184]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 800365e:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8003662:	4b2d      	ldr	r3, [pc, #180]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8003664:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003668:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kp_v * fcb_joint3.Error_v) +
 800366c:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kd_v * (fcb_joint3.Error_v - fcb_joint3.Old_v) ) ;
 8003670:	4b29      	ldr	r3, [pc, #164]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8003672:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8003676:	4b28      	ldr	r3, [pc, #160]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8003678:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 800367c:	4b26      	ldr	r3, [pc, #152]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 800367e:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8003682:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003686:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v ) +
 800368a:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 800368e:	4b22      	ldr	r3, [pc, #136]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8003690:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
//
		stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Output_Joint_W);
 8003694:	4b1f      	ldr	r3, [pc, #124]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8003696:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800369a:	eeb0 0a67 	vmov.f32	s0, s15
 800369e:	4822      	ldr	r0, [pc, #136]	; (8003728 <HAL_TIM_PeriodElapsedCallback+0x9c8>)
 80036a0:	f7fe fd7a 	bl	8002198 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(fcb_joint3.Output_Joint_W);
 80036a4:	4b1c      	ldr	r3, [pc, #112]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 80036a6:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80036aa:	eeb0 0a67 	vmov.f32	s0, s15
 80036ae:	481f      	ldr	r0, [pc, #124]	; (800372c <HAL_TIM_PeriodElapsedCallback+0x9cc>)
 80036b0:	f7fe fd72 	bl	8002198 <_ZN7Stepper21StepperOpenLoopSpeedMEf>

//		stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Goal_Velocity);
//		stepperJ3.StepperOpenLoopSpeedM(fcb_joint3.Goal_Velocity);
//		stepperJ4.StepperOpenLoopSpeed(-4.0 * fcb_joint1.Goal_Velocity);

		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 80036b4:	4b17      	ldr	r3, [pc, #92]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80036b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036b8:	4a16      	ldr	r2, [pc, #88]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80036ba:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 80036bc:	4b16      	ldr	r3, [pc, #88]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 80036be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036c0:	4a15      	ldr	r2, [pc, #84]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 80036c2:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint1.Old_Error_v = fcb_joint1.Error_v;
 80036c4:	4b13      	ldr	r3, [pc, #76]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80036c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ca:	4a12      	ldr	r2, [pc, #72]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80036cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint3.Old_Error_v = fcb_joint3.Error_v;
 80036d0:	4b11      	ldr	r3, [pc, #68]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 80036d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d6:	4a10      	ldr	r2, [pc, #64]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 80036d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

		fcb_joint1.Old_p = fcb_joint1.Encoder;
 80036dc:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80036de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e0:	4a0c      	ldr	r2, [pc, #48]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80036e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint3.Old_p = fcb_joint3.Encoder;
 80036e6:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 80036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ea:	4a0b      	ldr	r2, [pc, #44]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 80036ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint1.Old_v = fcb_joint1.kalman_velo;
 80036f0:	4b08      	ldr	r3, [pc, #32]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80036f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80036f6:	4a07      	ldr	r2, [pc, #28]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80036f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint3.Old_v = fcb_joint1.kalman_velo;
 80036fc:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80036fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003702:	4a05      	ldr	r2, [pc, #20]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8003704:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

		if (Traj_Flag == 1){
 8003708:	4b09      	ldr	r3, [pc, #36]	; (8003730 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b01      	cmp	r3, #1
 800370e:	bf08      	it	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	e00f      	b.n	8003734 <HAL_TIM_PeriodElapsedCallback+0x9d4>
 8003714:	24000304 	.word	0x24000304
 8003718:	240004cc 	.word	0x240004cc
 800371c:	3c75c28f 	.word	0x3c75c28f
 8003720:	3c1374bc 	.word	0x3c1374bc
 8003724:	3ac49ba6 	.word	0x3ac49ba6
 8003728:	24000264 	.word	0x24000264
 800372c:	240002b4 	.word	0x240002b4
 8003730:	240008d0 	.word	0x240008d0
 8003734:	bf18      	it	ne
 8003736:	2300      	movne	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <HAL_TIM_PeriodElapsedCallback+0x9f4>
			t = t + sample_time_500;
 800373e:	4b67      	ldr	r3, [pc, #412]	; (80038dc <HAL_TIM_PeriodElapsedCallback+0xb7c>)
 8003740:	ed93 7a00 	vldr	s14, [r3]
 8003744:	4b66      	ldr	r3, [pc, #408]	; (80038e0 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 8003746:	edd3 7a00 	vldr	s15, [r3]
 800374a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800374e:	4b63      	ldr	r3, [pc, #396]	; (80038dc <HAL_TIM_PeriodElapsedCallback+0xb7c>)
 8003750:	edc3 7a00 	vstr	s15, [r3]
		}
		//-  (sample_time_500*40.0)
		if (t >= fcb_joint3.T )
 8003754:	4b63      	ldr	r3, [pc, #396]	; (80038e4 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 8003756:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 800375a:	4b60      	ldr	r3, [pc, #384]	; (80038dc <HAL_TIM_PeriodElapsedCallback+0xb7c>)
 800375c:	edd3 7a00 	vldr	s15, [r3]
 8003760:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003768:	bf94      	ite	ls
 800376a:	2301      	movls	r3, #1
 800376c:	2300      	movhi	r3, #0
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80ae 	beq.w	80038d2 <HAL_TIM_PeriodElapsedCallback+0xb72>
				{

			stepperJ1.StepperOpenLoopSpeedM(0);
 8003776:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 80038e8 <HAL_TIM_PeriodElapsedCallback+0xb88>
 800377a:	485c      	ldr	r0, [pc, #368]	; (80038ec <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 800377c:	f7fe fd0c 	bl	8002198 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ3.StepperOpenLoopSpeedM(0);
 8003780:	ed9f 0a59 	vldr	s0, [pc, #356]	; 80038e8 <HAL_TIM_PeriodElapsedCallback+0xb88>
 8003784:	485a      	ldr	r0, [pc, #360]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 8003786:	f7fe fd07 	bl	8002198 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			Traj_Flag = 0;
 800378a:	4b5a      	ldr	r3, [pc, #360]	; (80038f4 <HAL_TIM_PeriodElapsedCallback+0xb94>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
			if (direction_traj == 0)
 8003790:	4b59      	ldr	r3, [pc, #356]	; (80038f8 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	bf0c      	ite	eq
 8003798:	2301      	moveq	r3, #1
 800379a:	2300      	movne	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d028      	beq.n	80037f4 <HAL_TIM_PeriodElapsedCallback+0xa94>
			{

				fcb_joint1.UpdateQuinticCoff(15, fcb_joint1.Encoder, 0.0, 0.0, 0.0, 0.0, 0.0);
 80037a2:	4b56      	ldr	r3, [pc, #344]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 80037a4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80037a8:	ed9f 3a4f 	vldr	s6, [pc, #316]	; 80038e8 <HAL_TIM_PeriodElapsedCallback+0xb88>
 80037ac:	eddf 2a4e 	vldr	s5, [pc, #312]	; 80038e8 <HAL_TIM_PeriodElapsedCallback+0xb88>
 80037b0:	ed9f 2a4d 	vldr	s4, [pc, #308]	; 80038e8 <HAL_TIM_PeriodElapsedCallback+0xb88>
 80037b4:	eddf 1a4c 	vldr	s3, [pc, #304]	; 80038e8 <HAL_TIM_PeriodElapsedCallback+0xb88>
 80037b8:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 80038e8 <HAL_TIM_PeriodElapsedCallback+0xb88>
 80037bc:	eef0 0a67 	vmov.f32	s1, s15
 80037c0:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80037c4:	484d      	ldr	r0, [pc, #308]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 80037c6:	f7fd f9d9 	bl	8000b7c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint3.UpdateQuinticCoff(15, fcb_joint3.Encoder, 0.0, 0.0, 0.0, 0.0, 0.0);
 80037ca:	4b46      	ldr	r3, [pc, #280]	; (80038e4 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 80037cc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80037d0:	ed9f 3a45 	vldr	s6, [pc, #276]	; 80038e8 <HAL_TIM_PeriodElapsedCallback+0xb88>
 80037d4:	eddf 2a44 	vldr	s5, [pc, #272]	; 80038e8 <HAL_TIM_PeriodElapsedCallback+0xb88>
 80037d8:	ed9f 2a43 	vldr	s4, [pc, #268]	; 80038e8 <HAL_TIM_PeriodElapsedCallback+0xb88>
 80037dc:	eddf 1a42 	vldr	s3, [pc, #264]	; 80038e8 <HAL_TIM_PeriodElapsedCallback+0xb88>
 80037e0:	ed9f 1a41 	vldr	s2, [pc, #260]	; 80038e8 <HAL_TIM_PeriodElapsedCallback+0xb88>
 80037e4:	eef0 0a67 	vmov.f32	s1, s15
 80037e8:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80037ec:	483d      	ldr	r0, [pc, #244]	; (80038e4 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 80037ee:	f7fd f9c5 	bl	8000b7c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
 80037f2:	e027      	b.n	8003844 <HAL_TIM_PeriodElapsedCallback+0xae4>

			else
			{
//				fcb_joint1.UpdateQuinticCoff(15, fcb_joint1.Encoder, 0, 0.0, 0.0, 0.0, 0.0);
//				fcb_joint3.UpdateQuinticCoff(15, fcb_joint3.Encoder, 0, 0.0, 0.0, 0.0, 0.0);
				fcb_joint1.UpdateQuinticCoff(15, fcb_joint1.Encoder, 785.0, 0.0, 0.0, 0.0, 0.0);
 80037f4:	4b41      	ldr	r3, [pc, #260]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 80037f6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80037fa:	ed9f 3a3b 	vldr	s6, [pc, #236]	; 80038e8 <HAL_TIM_PeriodElapsedCallback+0xb88>
 80037fe:	eddf 2a3a 	vldr	s5, [pc, #232]	; 80038e8 <HAL_TIM_PeriodElapsedCallback+0xb88>
 8003802:	ed9f 2a39 	vldr	s4, [pc, #228]	; 80038e8 <HAL_TIM_PeriodElapsedCallback+0xb88>
 8003806:	eddf 1a38 	vldr	s3, [pc, #224]	; 80038e8 <HAL_TIM_PeriodElapsedCallback+0xb88>
 800380a:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 8003900 <HAL_TIM_PeriodElapsedCallback+0xba0>
 800380e:	eef0 0a67 	vmov.f32	s1, s15
 8003812:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8003816:	4839      	ldr	r0, [pc, #228]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8003818:	f7fd f9b0 	bl	8000b7c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint3.UpdateQuinticCoff(15, fcb_joint3.Encoder, -1570.0, 0.0, 0.0, 0.0, 0.0);
 800381c:	4b31      	ldr	r3, [pc, #196]	; (80038e4 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 800381e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003822:	ed9f 3a31 	vldr	s6, [pc, #196]	; 80038e8 <HAL_TIM_PeriodElapsedCallback+0xb88>
 8003826:	eddf 2a30 	vldr	s5, [pc, #192]	; 80038e8 <HAL_TIM_PeriodElapsedCallback+0xb88>
 800382a:	ed9f 2a2f 	vldr	s4, [pc, #188]	; 80038e8 <HAL_TIM_PeriodElapsedCallback+0xb88>
 800382e:	eddf 1a2e 	vldr	s3, [pc, #184]	; 80038e8 <HAL_TIM_PeriodElapsedCallback+0xb88>
 8003832:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8003904 <HAL_TIM_PeriodElapsedCallback+0xba4>
 8003836:	eef0 0a67 	vmov.f32	s1, s15
 800383a:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 800383e:	4829      	ldr	r0, [pc, #164]	; (80038e4 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 8003840:	f7fd f99c 	bl	8000b7c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>


//				fcb_X.UpdateQuinticCoff(5.0, Robot_X, Robot_X + 0.2, 0, 0, 0, 0);
			}

			direction_traj ^= 1;
 8003844:	4b2c      	ldr	r3, [pc, #176]	; (80038f8 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f083 0301 	eor.w	r3, r3, #1
 800384c:	4a2a      	ldr	r2, [pc, #168]	; (80038f8 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 800384e:	6013      	str	r3, [r2, #0]


			t = (int)0;
 8003850:	4b22      	ldr	r3, [pc, #136]	; (80038dc <HAL_TIM_PeriodElapsedCallback+0xb7c>)
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim14);
 8003858:	482b      	ldr	r0, [pc, #172]	; (8003908 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 800385a:	f008 fa75 	bl	800bd48 <HAL_TIM_Base_Stop_IT>
			fcb_joint1.Sum_Error_p = 0;
 800385e:	4b27      	ldr	r3, [pc, #156]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint3.Sum_Error_p = 0;
 8003868:	4b1e      	ldr	r3, [pc, #120]	; (80038e4 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint1.Sum_Error_v = 0;
 8003872:	4b22      	ldr	r3, [pc, #136]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint3.Sum_Error_v = 0;
 800387c:	4b19      	ldr	r3, [pc, #100]	; (80038e4 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint1.Old_Error_p = 0;
 8003886:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint3.Old_Error_p = 0;
 800388e:	4b15      	ldr	r3, [pc, #84]	; (80038e4 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint1.Old_Error_v = 0;
 8003896:	4b19      	ldr	r3, [pc, #100]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint3.Old_Error_v = 0;
 80038a0:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint1.Old_p = 0;
 80038aa:	4b14      	ldr	r3, [pc, #80]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint3.Old_p = 0;
 80038b4:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint1.Old_v = 0;
 80038be:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_joint3.Old_v = 0;
 80038c8:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

				}


	}
}
 80038d2:	bf00      	nop
 80038d4:	3720      	adds	r7, #32
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	240008d4 	.word	0x240008d4
 80038e0:	2400000c 	.word	0x2400000c
 80038e4:	240004cc 	.word	0x240004cc
 80038e8:	00000000 	.word	0x00000000
 80038ec:	24000264 	.word	0x24000264
 80038f0:	240002b4 	.word	0x240002b4
 80038f4:	240008d0 	.word	0x240008d0
 80038f8:	240008cc 	.word	0x240008cc
 80038fc:	24000304 	.word	0x24000304
 8003900:	44444000 	.word	0x44444000
 8003904:	c4c44000 	.word	0xc4c44000
 8003908:	24000e00 	.word	0x24000e00
 800390c:	00000000 	.word	0x00000000

08003910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003914:	f002 f8da 	bl	8005acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003918:	f000 fa36 	bl	8003d88 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800391c:	f7fe fd08 	bl	8002330 <MX_GPIO_Init>
  MX_DMA_Init();
 8003920:	f7fe fcc6 	bl	80022b0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8003924:	f001 fe26 	bl	8005574 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8003928:	f000 ffe4 	bl	80048f4 <MX_TIM2_Init>
  MX_UART4_Init();
 800392c:	f001 fd80 	bl	8005430 <MX_UART4_Init>
  MX_TIM4_Init();
 8003930:	f001 f8d0 	bl	8004ad4 <MX_TIM4_Init>
  MX_SPI3_Init();
 8003934:	f000 fc28 	bl	8004188 <MX_SPI3_Init>
  MX_TIM1_Init();
 8003938:	f000 ff2e 	bl	8004798 <MX_TIM1_Init>
  MX_TIM3_Init();
 800393c:	f001 f852 	bl	80049e4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8003940:	f001 f940 	bl	8004bc4 <MX_TIM5_Init>
  MX_TIM15_Init();
 8003944:	f001 fa7a 	bl	8004e3c <MX_TIM15_Init>
  MX_CRC_Init();
 8003948:	f7fe fc62 	bl	8002210 <MX_CRC_Init>
  MX_UART7_Init();
 800394c:	f001 fdc4 	bl	80054d8 <MX_UART7_Init>
  MX_TIM6_Init();
 8003950:	f001 f986 	bl	8004c60 <MX_TIM6_Init>
  MX_TIM7_Init();
 8003954:	f001 f9ba 	bl	8004ccc <MX_TIM7_Init>
  MX_TIM12_Init();
 8003958:	f001 f9ee 	bl	8004d38 <MX_TIM12_Init>
  MX_TIM13_Init();
 800395c:	f001 fa26 	bl	8004dac <MX_TIM13_Init>
  MX_TIM14_Init();
 8003960:	f001 fa48 	bl	8004df4 <MX_TIM14_Init>
  MX_TIM16_Init();
 8003964:	f001 fb0e 	bl	8004f84 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8003968:	2201      	movs	r2, #1
 800396a:	2101      	movs	r1, #1
 800396c:	48c4      	ldr	r0, [pc, #784]	; (8003c80 <main+0x370>)
 800396e:	f005 fc73 	bl	8009258 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8003972:	2201      	movs	r2, #1
 8003974:	2102      	movs	r1, #2
 8003976:	48c3      	ldr	r0, [pc, #780]	; (8003c84 <main+0x374>)
 8003978:	f005 fc6e 	bl	8009258 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800397c:	2200      	movs	r2, #0
 800397e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003982:	48bf      	ldr	r0, [pc, #764]	; (8003c80 <main+0x370>)
 8003984:	f005 fc68 	bl	8009258 <HAL_GPIO_WritePin>

	#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 8003988:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8003c88 <main+0x378>
 800398c:	48bf      	ldr	r0, [pc, #764]	; (8003c8c <main+0x37c>)
 800398e:	f7fe f951 	bl	8001c34 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(8.0);
 8003992:	2108      	movs	r1, #8
 8003994:	48bd      	ldr	r0, [pc, #756]	; (8003c8c <main+0x37c>)
 8003996:	f7fe fbe9 	bl	800216c <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(42.0);
 800399a:	ed9f 0abd 	vldr	s0, [pc, #756]	; 8003c90 <main+0x380>
 800399e:	48bb      	ldr	r0, [pc, #748]	; (8003c8c <main+0x37c>)
 80039a0:	f7fe fbc0 	bl	8002124 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 80039a4:	48b9      	ldr	r0, [pc, #740]	; (8003c8c <main+0x37c>)
 80039a6:	f7fe f934 	bl	8001c12 <_ZN7Stepper13StepperEnableEv>
//	stepperJ2.StepperSetFrequency(0.0f);
//	stepperJ2.StepperSetMicrostep(8);
//	stepperJ2.StepperSetRatio(3);
//	stepperJ2.StepperEnable();

	stepperJ3.StepperSetFrequency(0.0f);
 80039aa:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 8003c88 <main+0x378>
 80039ae:	48b9      	ldr	r0, [pc, #740]	; (8003c94 <main+0x384>)
 80039b0:	f7fe f940 	bl	8001c34 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(8.0);
 80039b4:	2108      	movs	r1, #8
 80039b6:	48b7      	ldr	r0, [pc, #732]	; (8003c94 <main+0x384>)
 80039b8:	f7fe fbd8 	bl	800216c <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9.0);
 80039bc:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 80039c0:	48b4      	ldr	r0, [pc, #720]	; (8003c94 <main+0x384>)
 80039c2:	f7fe fbaf 	bl	8002124 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 80039c6:	48b3      	ldr	r0, [pc, #716]	; (8003c94 <main+0x384>)
 80039c8:	f7fe f923 	bl	8001c12 <_ZN7Stepper13StepperEnableEv>

	stepperJ4.StepperSetFrequency(0.0f);
 80039cc:	ed9f 0aae 	vldr	s0, [pc, #696]	; 8003c88 <main+0x378>
 80039d0:	48b1      	ldr	r0, [pc, #708]	; (8003c98 <main+0x388>)
 80039d2:	f7fe f92f 	bl	8001c34 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ4.StepperSetMicrostep(8.0);
 80039d6:	2108      	movs	r1, #8
 80039d8:	48af      	ldr	r0, [pc, #700]	; (8003c98 <main+0x388>)
 80039da:	f7fe fbc7 	bl	800216c <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ4.StepperSetRatio(3.0);
 80039de:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80039e2:	48ad      	ldr	r0, [pc, #692]	; (8003c98 <main+0x388>)
 80039e4:	f7fe fb9e 	bl	8002124 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ4.StepperEnable();
 80039e8:	48ab      	ldr	r0, [pc, #684]	; (8003c98 <main+0x388>)
 80039ea:	f7fe f912 	bl	8001c12 <_ZN7Stepper13StepperEnableEv>

	//	stepperJ4.StepperSetMicrostep(1);
	//	stepperJ4.StepperSetRatio(1);

	gripper.setDegreeGripperClose(40);
 80039ee:	2128      	movs	r1, #40	; 0x28
 80039f0:	48aa      	ldr	r0, [pc, #680]	; (8003c9c <main+0x38c>)
 80039f2:	f7fe f856 	bl	8001aa2 <_ZN10ServoMotor21setDegreeGripperCloseEl>
	gripper.setDegreeGripperOpen(0);
 80039f6:	2100      	movs	r1, #0
 80039f8:	48a8      	ldr	r0, [pc, #672]	; (8003c9c <main+0x38c>)
 80039fa:	f7fe f841 	bl	8001a80 <_ZN10ServoMotor20setDegreeGripperOpenEl>
	gripper.ServoEnable();
 80039fe:	48a7      	ldr	r0, [pc, #668]	; (8003c9c <main+0x38c>)
 8003a00:	f7fd fe69 	bl	80016d6 <_ZN10ServoMotor11ServoEnableEv>
//	fcb_joint3.Q = 0.12;
//	fcb_joint3.R = 0.0001;

	encoderJ1.AMT21_Read();
 8003a04:	48a6      	ldr	r0, [pc, #664]	; (8003ca0 <main+0x390>)
 8003a06:	f7fc fe5e 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8003a0a:	48a5      	ldr	r0, [pc, #660]	; (8003ca0 <main+0x390>)
 8003a0c:	f7fc fe8a 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003a10:	4603      	mov	r3, r0
 8003a12:	461a      	mov	r2, r3
 8003a14:	4ba3      	ldr	r3, [pc, #652]	; (8003ca4 <main+0x394>)
 8003a16:	701a      	strb	r2, [r3, #0]
	if (HALENCJ1OK == HAL_OK) {
 8003a18:	4ba2      	ldr	r3, [pc, #648]	; (8003ca4 <main+0x394>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d110      	bne.n	8003a42 <main+0x132>
		fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609 ;}
 8003a20:	489f      	ldr	r0, [pc, #636]	; (8003ca0 <main+0x390>)
 8003a22:	f7fc fee3 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8003a26:	4603      	mov	r3, r0
 8003a28:	ee07 3a90 	vmov	s15, r3
 8003a2c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a30:	ed9f 5b91 	vldr	d5, [pc, #580]	; 8003c78 <main+0x368>
 8003a34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a3c:	4b9a      	ldr	r3, [pc, #616]	; (8003ca8 <main+0x398>)
 8003a3e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	encoderJ3.AMT21_Read();
 8003a42:	489a      	ldr	r0, [pc, #616]	; (8003cac <main+0x39c>)
 8003a44:	f7fc fe3f 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8003a48:	4898      	ldr	r0, [pc, #608]	; (8003cac <main+0x39c>)
 8003a4a:	f7fc fe6b 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	461a      	mov	r2, r3
 8003a52:	4b97      	ldr	r3, [pc, #604]	; (8003cb0 <main+0x3a0>)
 8003a54:	701a      	strb	r2, [r3, #0]
	if (HALENCJ3OK == HAL_OK) {
 8003a56:	4b96      	ldr	r3, [pc, #600]	; (8003cb0 <main+0x3a0>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d110      	bne.n	8003a80 <main+0x170>
		fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609 ;}
 8003a5e:	4893      	ldr	r0, [pc, #588]	; (8003cac <main+0x39c>)
 8003a60:	f7fc fec4 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8003a64:	4603      	mov	r3, r0
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a6e:	ed9f 5b82 	vldr	d5, [pc, #520]	; 8003c78 <main+0x368>
 8003a72:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a76:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a7a:	4b8e      	ldr	r3, [pc, #568]	; (8003cb4 <main+0x3a4>)
 8003a7c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	encoderJ4.AMT21_Read();
 8003a80:	488d      	ldr	r0, [pc, #564]	; (8003cb8 <main+0x3a8>)
 8003a82:	f7fc fe20 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8003a86:	488c      	ldr	r0, [pc, #560]	; (8003cb8 <main+0x3a8>)
 8003a88:	f7fc fe4c 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	461a      	mov	r2, r3
 8003a90:	4b8a      	ldr	r3, [pc, #552]	; (8003cbc <main+0x3ac>)
 8003a92:	701a      	strb	r2, [r3, #0]
	if (HALENCJ4OK == HAL_OK) {
 8003a94:	4b89      	ldr	r3, [pc, #548]	; (8003cbc <main+0x3ac>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d110      	bne.n	8003abe <main+0x1ae>
		fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;}
 8003a9c:	4886      	ldr	r0, [pc, #536]	; (8003cb8 <main+0x3a8>)
 8003a9e:	f7fc fea5 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	ee07 3a90 	vmov	s15, r3
 8003aa8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003aac:	ed9f 5b72 	vldr	d5, [pc, #456]	; 8003c78 <main+0x368>
 8003ab0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003ab4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003ab8:	4b81      	ldr	r3, [pc, #516]	; (8003cc0 <main+0x3b0>)
 8003aba:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	fcb_FK(fcb_joint1.Encoder, 0, fcb_joint3.Encoder, fcb_joint4.Encoder);
 8003abe:	4b7a      	ldr	r3, [pc, #488]	; (8003ca8 <main+0x398>)
 8003ac0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003ac4:	4b7b      	ldr	r3, [pc, #492]	; (8003cb4 <main+0x3a4>)
 8003ac6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8003aca:	4b7d      	ldr	r3, [pc, #500]	; (8003cc0 <main+0x3b0>)
 8003acc:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8003ad0:	eef0 1a66 	vmov.f32	s3, s13
 8003ad4:	eeb0 1a47 	vmov.f32	s2, s14
 8003ad8:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8003c88 <main+0x378>
 8003adc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae0:	f7fe fd5e 	bl	80025a0 <_Z6fcb_FKffff>
	fcb_joint1.X11 = fcb_joint1.Encoder;
 8003ae4:	4b70      	ldr	r3, [pc, #448]	; (8003ca8 <main+0x398>)
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae8:	4a6f      	ldr	r2, [pc, #444]	; (8003ca8 <main+0x398>)
 8003aea:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint3.X11 = fcb_joint3.Encoder;
 8003aee:	4b71      	ldr	r3, [pc, #452]	; (8003cb4 <main+0x3a4>)
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	4a70      	ldr	r2, [pc, #448]	; (8003cb4 <main+0x3a4>)
 8003af4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	HAL_Delay(3000);
 8003af8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003afc:	f002 f878 	bl	8005bf0 <HAL_Delay>

	encoderJ1.AMT21_Read();
 8003b00:	4867      	ldr	r0, [pc, #412]	; (8003ca0 <main+0x390>)
 8003b02:	f7fc fde0 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8003b06:	4866      	ldr	r0, [pc, #408]	; (8003ca0 <main+0x390>)
 8003b08:	f7fc fe0c 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	461a      	mov	r2, r3
 8003b10:	4b64      	ldr	r3, [pc, #400]	; (8003ca4 <main+0x394>)
 8003b12:	701a      	strb	r2, [r3, #0]
	if (HALENCJ1OK == HAL_OK) {
 8003b14:	4b63      	ldr	r3, [pc, #396]	; (8003ca4 <main+0x394>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d110      	bne.n	8003b3e <main+0x22e>
		fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609 ;}
 8003b1c:	4860      	ldr	r0, [pc, #384]	; (8003ca0 <main+0x390>)
 8003b1e:	f7fc fe65 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8003b22:	4603      	mov	r3, r0
 8003b24:	ee07 3a90 	vmov	s15, r3
 8003b28:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003b2c:	ed9f 5b52 	vldr	d5, [pc, #328]	; 8003c78 <main+0x368>
 8003b30:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003b34:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b38:	4b5b      	ldr	r3, [pc, #364]	; (8003ca8 <main+0x398>)
 8003b3a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	encoderJ3.AMT21_Read();
 8003b3e:	485b      	ldr	r0, [pc, #364]	; (8003cac <main+0x39c>)
 8003b40:	f7fc fdc1 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8003b44:	4859      	ldr	r0, [pc, #356]	; (8003cac <main+0x39c>)
 8003b46:	f7fc fded 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4b58      	ldr	r3, [pc, #352]	; (8003cb0 <main+0x3a0>)
 8003b50:	701a      	strb	r2, [r3, #0]
	if (HALENCJ3OK == HAL_OK) {
 8003b52:	4b57      	ldr	r3, [pc, #348]	; (8003cb0 <main+0x3a0>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d110      	bne.n	8003b7c <main+0x26c>
		fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609 ;}
 8003b5a:	4854      	ldr	r0, [pc, #336]	; (8003cac <main+0x39c>)
 8003b5c:	f7fc fe46 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8003b60:	4603      	mov	r3, r0
 8003b62:	ee07 3a90 	vmov	s15, r3
 8003b66:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003b6a:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8003c78 <main+0x368>
 8003b6e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003b72:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b76:	4b4f      	ldr	r3, [pc, #316]	; (8003cb4 <main+0x3a4>)
 8003b78:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	encoderJ4.AMT21_Read();
 8003b7c:	484e      	ldr	r0, [pc, #312]	; (8003cb8 <main+0x3a8>)
 8003b7e:	f7fc fda2 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8003b82:	484d      	ldr	r0, [pc, #308]	; (8003cb8 <main+0x3a8>)
 8003b84:	f7fc fdce 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4b4b      	ldr	r3, [pc, #300]	; (8003cbc <main+0x3ac>)
 8003b8e:	701a      	strb	r2, [r3, #0]
	if (HALENCJ4OK == HAL_OK) {
 8003b90:	4b4a      	ldr	r3, [pc, #296]	; (8003cbc <main+0x3ac>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d110      	bne.n	8003bba <main+0x2aa>
		fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;}
 8003b98:	4847      	ldr	r0, [pc, #284]	; (8003cb8 <main+0x3a8>)
 8003b9a:	f7fc fe27 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	ee07 3a90 	vmov	s15, r3
 8003ba4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003ba8:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8003c78 <main+0x368>
 8003bac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003bb0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003bb4:	4b42      	ldr	r3, [pc, #264]	; (8003cc0 <main+0x3b0>)
 8003bb6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	#endif

//	fcb_joint1.UpdateQuinticCoff(6, fcb_joint1.Encoder, 0, 0, 0, 0, 0);
//	fcb_joint3.UpdateQuinticCoff(6, fcb_joint3.Encoder, 0, 0, 0, 0, 0);

	fcb_joint1.UpdateQuinticCoff(15, fcb_joint1.Encoder, 785.0, 0, 0, 0, 0);
 8003bba:	4b3b      	ldr	r3, [pc, #236]	; (8003ca8 <main+0x398>)
 8003bbc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003bc0:	ed9f 3a31 	vldr	s6, [pc, #196]	; 8003c88 <main+0x378>
 8003bc4:	eddf 2a30 	vldr	s5, [pc, #192]	; 8003c88 <main+0x378>
 8003bc8:	ed9f 2a2f 	vldr	s4, [pc, #188]	; 8003c88 <main+0x378>
 8003bcc:	eddf 1a2e 	vldr	s3, [pc, #184]	; 8003c88 <main+0x378>
 8003bd0:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 8003cc4 <main+0x3b4>
 8003bd4:	eef0 0a67 	vmov.f32	s1, s15
 8003bd8:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8003bdc:	4832      	ldr	r0, [pc, #200]	; (8003ca8 <main+0x398>)
 8003bde:	f7fc ffcd 	bl	8000b7c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
	fcb_joint3.UpdateQuinticCoff(15, fcb_joint3.Encoder, -1570.0, 0, 0, 0, 0);
 8003be2:	4b34      	ldr	r3, [pc, #208]	; (8003cb4 <main+0x3a4>)
 8003be4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003be8:	ed9f 3a27 	vldr	s6, [pc, #156]	; 8003c88 <main+0x378>
 8003bec:	eddf 2a26 	vldr	s5, [pc, #152]	; 8003c88 <main+0x378>
 8003bf0:	ed9f 2a25 	vldr	s4, [pc, #148]	; 8003c88 <main+0x378>
 8003bf4:	eddf 1a24 	vldr	s3, [pc, #144]	; 8003c88 <main+0x378>
 8003bf8:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8003cc8 <main+0x3b8>
 8003bfc:	eef0 0a67 	vmov.f32	s1, s15
 8003c00:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8003c04:	482b      	ldr	r0, [pc, #172]	; (8003cb4 <main+0x3a4>)
 8003c06:	f7fc ffb9 	bl	8000b7c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
//		HAL_TIM_Base_Start_IT(&htim7); // Control 	1000 Hz
//		HAL_TIM_Base_Start_IT(&htim12); // 			2000 Hz
//		HAL_TIM_Base_Start_IT(&htim14); // 			500Hz
//		HAL_TIM_Base_Start_IT(&htim16); // 			1000Hz

	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 8003c0a:	2214      	movs	r2, #20
 8003c0c:	492f      	ldr	r1, [pc, #188]	; (8003ccc <main+0x3bc>)
 8003c0e:	4830      	ldr	r0, [pc, #192]	; (8003cd0 <main+0x3c0>)
 8003c10:	f00b fbf7 	bl	800f402 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8003c14:	4b2f      	ldr	r3, [pc, #188]	; (8003cd4 <main+0x3c4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a2f      	ldr	r2, [pc, #188]	; (8003cd8 <main+0x3c8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	f000 8091 	beq.w	8003d42 <main+0x432>
 8003c20:	4b2c      	ldr	r3, [pc, #176]	; (8003cd4 <main+0x3c4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a2d      	ldr	r2, [pc, #180]	; (8003cdc <main+0x3cc>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	f000 808b 	beq.w	8003d42 <main+0x432>
 8003c2c:	4b29      	ldr	r3, [pc, #164]	; (8003cd4 <main+0x3c4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a2b      	ldr	r2, [pc, #172]	; (8003ce0 <main+0x3d0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	f000 8085 	beq.w	8003d42 <main+0x432>
 8003c38:	4b26      	ldr	r3, [pc, #152]	; (8003cd4 <main+0x3c4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a29      	ldr	r2, [pc, #164]	; (8003ce4 <main+0x3d4>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d07f      	beq.n	8003d42 <main+0x432>
 8003c42:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <main+0x3c4>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a28      	ldr	r2, [pc, #160]	; (8003ce8 <main+0x3d8>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d07a      	beq.n	8003d42 <main+0x432>
 8003c4c:	4b21      	ldr	r3, [pc, #132]	; (8003cd4 <main+0x3c4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a26      	ldr	r2, [pc, #152]	; (8003cec <main+0x3dc>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d075      	beq.n	8003d42 <main+0x432>
 8003c56:	4b1f      	ldr	r3, [pc, #124]	; (8003cd4 <main+0x3c4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a25      	ldr	r2, [pc, #148]	; (8003cf0 <main+0x3e0>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d070      	beq.n	8003d42 <main+0x432>
 8003c60:	4b1c      	ldr	r3, [pc, #112]	; (8003cd4 <main+0x3c4>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a23      	ldr	r2, [pc, #140]	; (8003cf4 <main+0x3e4>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d06b      	beq.n	8003d42 <main+0x432>
 8003c6a:	4b1a      	ldr	r3, [pc, #104]	; (8003cd4 <main+0x3c4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a22      	ldr	r2, [pc, #136]	; (8003cf8 <main+0x3e8>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d066      	beq.n	8003d42 <main+0x432>
 8003c74:	e042      	b.n	8003cfc <main+0x3ec>
 8003c76:	bf00      	nop
 8003c78:	645a1cac 	.word	0x645a1cac
 8003c7c:	4004df3b 	.word	0x4004df3b
 8003c80:	58020400 	.word	0x58020400
 8003c84:	58021000 	.word	0x58021000
 8003c88:	00000000 	.word	0x00000000
 8003c8c:	24000264 	.word	0x24000264
 8003c90:	42280000 	.word	0x42280000
 8003c94:	240002b4 	.word	0x240002b4
 8003c98:	240002dc 	.word	0x240002dc
 8003c9c:	2400085c 	.word	0x2400085c
 8003ca0:	24000210 	.word	0x24000210
 8003ca4:	24000878 	.word	0x24000878
 8003ca8:	24000304 	.word	0x24000304
 8003cac:	2400022c 	.word	0x2400022c
 8003cb0:	24000879 	.word	0x24000879
 8003cb4:	240004cc 	.word	0x240004cc
 8003cb8:	24000248 	.word	0x24000248
 8003cbc:	2400087a 	.word	0x2400087a
 8003cc0:	240005b0 	.word	0x240005b0
 8003cc4:	44444000 	.word	0x44444000
 8003cc8:	c4c44000 	.word	0xc4c44000
 8003ccc:	240008b4 	.word	0x240008b4
 8003cd0:	240010b0 	.word	0x240010b0
 8003cd4:	24001038 	.word	0x24001038
 8003cd8:	40020010 	.word	0x40020010
 8003cdc:	40020028 	.word	0x40020028
 8003ce0:	40020040 	.word	0x40020040
 8003ce4:	40020058 	.word	0x40020058
 8003ce8:	40020070 	.word	0x40020070
 8003cec:	40020088 	.word	0x40020088
 8003cf0:	400200a0 	.word	0x400200a0
 8003cf4:	400200b8 	.word	0x400200b8
 8003cf8:	40020410 	.word	0x40020410
 8003cfc:	4b1a      	ldr	r3, [pc, #104]	; (8003d68 <main+0x458>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1a      	ldr	r2, [pc, #104]	; (8003d6c <main+0x45c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d01d      	beq.n	8003d42 <main+0x432>
 8003d06:	4b18      	ldr	r3, [pc, #96]	; (8003d68 <main+0x458>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a19      	ldr	r2, [pc, #100]	; (8003d70 <main+0x460>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d018      	beq.n	8003d42 <main+0x432>
 8003d10:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <main+0x458>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a17      	ldr	r2, [pc, #92]	; (8003d74 <main+0x464>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d013      	beq.n	8003d42 <main+0x432>
 8003d1a:	4b13      	ldr	r3, [pc, #76]	; (8003d68 <main+0x458>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a16      	ldr	r2, [pc, #88]	; (8003d78 <main+0x468>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00e      	beq.n	8003d42 <main+0x432>
 8003d24:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <main+0x458>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a14      	ldr	r2, [pc, #80]	; (8003d7c <main+0x46c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d009      	beq.n	8003d42 <main+0x432>
 8003d2e:	4b0e      	ldr	r3, [pc, #56]	; (8003d68 <main+0x458>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <main+0x470>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d004      	beq.n	8003d42 <main+0x432>
 8003d38:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <main+0x458>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a11      	ldr	r2, [pc, #68]	; (8003d84 <main+0x474>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d108      	bne.n	8003d54 <main+0x444>
 8003d42:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <main+0x458>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <main+0x458>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0208 	bic.w	r2, r2, #8
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	e007      	b.n	8003d64 <main+0x454>
 8003d54:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <main+0x458>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4b03      	ldr	r3, [pc, #12]	; (8003d68 <main+0x458>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0204 	bic.w	r2, r2, #4
 8003d62:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8003d64:	e7fe      	b.n	8003d64 <main+0x454>
 8003d66:	bf00      	nop
 8003d68:	24001038 	.word	0x24001038
 8003d6c:	40020428 	.word	0x40020428
 8003d70:	40020440 	.word	0x40020440
 8003d74:	40020458 	.word	0x40020458
 8003d78:	40020470 	.word	0x40020470
 8003d7c:	40020488 	.word	0x40020488
 8003d80:	400204a0 	.word	0x400204a0
 8003d84:	400204b8 	.word	0x400204b8

08003d88 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b09c      	sub	sp, #112	; 0x70
 8003d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d92:	224c      	movs	r2, #76	; 0x4c
 8003d94:	2100      	movs	r1, #0
 8003d96:	4618      	mov	r0, r3
 8003d98:	f00c fd9a 	bl	80108d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	2220      	movs	r2, #32
 8003da0:	2100      	movs	r1, #0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f00c fd94 	bl	80108d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003da8:	2002      	movs	r0, #2
 8003daa:	f005 fa89 	bl	80092c0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003dae:	2300      	movs	r3, #0
 8003db0:	603b      	str	r3, [r7, #0]
 8003db2:	4b38      	ldr	r3, [pc, #224]	; (8003e94 <_Z18SystemClock_Configv+0x10c>)
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	4a37      	ldr	r2, [pc, #220]	; (8003e94 <_Z18SystemClock_Configv+0x10c>)
 8003db8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dbc:	6193      	str	r3, [r2, #24]
 8003dbe:	4b35      	ldr	r3, [pc, #212]	; (8003e94 <_Z18SystemClock_Configv+0x10c>)
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	4b33      	ldr	r3, [pc, #204]	; (8003e98 <_Z18SystemClock_Configv+0x110>)
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	4a32      	ldr	r2, [pc, #200]	; (8003e98 <_Z18SystemClock_Configv+0x110>)
 8003dce:	f043 0301 	orr.w	r3, r3, #1
 8003dd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003dd4:	4b30      	ldr	r3, [pc, #192]	; (8003e98 <_Z18SystemClock_Configv+0x110>)
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	603b      	str	r3, [r7, #0]
 8003dde:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003de0:	4b2c      	ldr	r3, [pc, #176]	; (8003e94 <_Z18SystemClock_Configv+0x10c>)
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dec:	bf14      	ite	ne
 8003dee:	2301      	movne	r3, #1
 8003df0:	2300      	moveq	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d000      	beq.n	8003dfa <_Z18SystemClock_Configv+0x72>
 8003df8:	e7f2      	b.n	8003de0 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e02:	2340      	movs	r3, #64	; 0x40
 8003e04:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e06:	2302      	movs	r3, #2
 8003e08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003e0e:	2304      	movs	r3, #4
 8003e10:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8003e12:	233c      	movs	r3, #60	; 0x3c
 8003e14:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003e16:	2302      	movs	r3, #2
 8003e18:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8003e1a:	2306      	movs	r3, #6
 8003e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003e22:	230c      	movs	r3, #12
 8003e24:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003e26:	2300      	movs	r3, #0
 8003e28:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e32:	4618      	mov	r0, r3
 8003e34:	f005 fa7e 	bl	8009334 <HAL_RCC_OscConfig>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	bf14      	ite	ne
 8003e3e:	2301      	movne	r3, #1
 8003e40:	2300      	moveq	r3, #0
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8003e48:	f000 f83e 	bl	8003ec8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e4c:	233f      	movs	r3, #63	; 0x3f
 8003e4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e50:	2303      	movs	r3, #3
 8003e52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003e58:	2308      	movs	r3, #8
 8003e5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003e5c:	2340      	movs	r3, #64	; 0x40
 8003e5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003e60:	2340      	movs	r3, #64	; 0x40
 8003e62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e68:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003e6a:	2340      	movs	r3, #64	; 0x40
 8003e6c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003e6e:	1d3b      	adds	r3, r7, #4
 8003e70:	2104      	movs	r1, #4
 8003e72:	4618      	mov	r0, r3
 8003e74:	f005 fe8a 	bl	8009b8c <HAL_RCC_ClockConfig>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	bf14      	ite	ne
 8003e7e:	2301      	movne	r3, #1
 8003e80:	2300      	moveq	r3, #0
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8003e88:	f000 f81e 	bl	8003ec8 <Error_Handler>
  }
}
 8003e8c:	bf00      	nop
 8003e8e:	3770      	adds	r7, #112	; 0x70
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	58024800 	.word	0x58024800
 8003e98:	58000400 	.word	0x58000400

08003e9c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]

}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	80fb      	strh	r3, [r7, #6]

}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2101      	movs	r1, #1
 8003ed0:	4808      	ldr	r0, [pc, #32]	; (8003ef4 <Error_Handler+0x2c>)
 8003ed2:	f005 f9c1 	bl	8009258 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2102      	movs	r1, #2
 8003eda:	4807      	ldr	r0, [pc, #28]	; (8003ef8 <Error_Handler+0x30>)
 8003edc:	f005 f9bc 	bl	8009258 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ee6:	4803      	ldr	r0, [pc, #12]	; (8003ef4 <Error_Handler+0x2c>)
 8003ee8:	f005 f9b6 	bl	8009258 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003eec:	b672      	cpsid	i
}
 8003eee:	bf00      	nop
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8003ef0:	e7fe      	b.n	8003ef0 <Error_Handler+0x28>
 8003ef2:	bf00      	nop
 8003ef4:	58020400 	.word	0x58020400
 8003ef8:	58021000 	.word	0x58021000

08003efc <_Z41__static_initialization_and_destruction_0ii>:
}
  /* USER CODE END Error_Handler_Debug */
}
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	f040 80bd 	bne.w	8004088 <_Z41__static_initialization_and_destruction_0ii+0x18c>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f14:	4293      	cmp	r3, r2
 8003f16:	f040 80b7 	bne.w	8004088 <_Z41__static_initialization_and_destruction_0ii+0x18c>
AMT21 encoderJ1(&huart4, 0xD4);
 8003f1a:	22d4      	movs	r2, #212	; 0xd4
 8003f1c:	4975      	ldr	r1, [pc, #468]	; (80040f4 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8003f1e:	4876      	ldr	r0, [pc, #472]	; (80040f8 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8003f20:	f7fc fbb2 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 8003f24:	22c4      	movs	r2, #196	; 0xc4
 8003f26:	4973      	ldr	r1, [pc, #460]	; (80040f4 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8003f28:	4874      	ldr	r0, [pc, #464]	; (80040fc <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8003f2a:	f7fc fbad 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ4(&huart4, 0xA4);
 8003f2e:	22a4      	movs	r2, #164	; 0xa4
 8003f30:	4970      	ldr	r1, [pc, #448]	; (80040f4 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8003f32:	4873      	ldr	r0, [pc, #460]	; (8004100 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8003f34:	f7fc fba8 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8003f38:	2320      	movs	r3, #32
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	4b71      	ldr	r3, [pc, #452]	; (8004104 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	4971      	ldr	r1, [pc, #452]	; (8004108 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8003f42:	4872      	ldr	r0, [pc, #456]	; (800410c <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8003f44:	f7fd fe16 	bl	8001b74 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8003f48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	4b70      	ldr	r3, [pc, #448]	; (8004110 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8003f50:	2204      	movs	r2, #4
 8003f52:	4970      	ldr	r1, [pc, #448]	; (8004114 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8003f54:	4870      	ldr	r0, [pc, #448]	; (8004118 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8003f56:	f7fd fe0d 	bl	8001b74 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8003f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	4b6b      	ldr	r3, [pc, #428]	; (8004110 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8003f62:	2204      	movs	r2, #4
 8003f64:	496d      	ldr	r1, [pc, #436]	; (800411c <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8003f66:	486e      	ldr	r0, [pc, #440]	; (8004120 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8003f68:	f7fd fe04 	bl	8001b74 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8003f6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	4b64      	ldr	r3, [pc, #400]	; (8004104 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8003f74:	2208      	movs	r2, #8
 8003f76:	496b      	ldr	r1, [pc, #428]	; (8004124 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8003f78:	486b      	ldr	r0, [pc, #428]	; (8004128 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8003f7a:	f7fd fdfb 	bl	8001b74 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
RobotJoint fcb_joint1;
 8003f7e:	486b      	ldr	r0, [pc, #428]	; (800412c <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8003f80:	f7fc fc56 	bl	8000830 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint2;
 8003f84:	486a      	ldr	r0, [pc, #424]	; (8004130 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8003f86:	f7fc fc53 	bl	8000830 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint3;
 8003f8a:	486a      	ldr	r0, [pc, #424]	; (8004134 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8003f8c:	f7fc fc50 	bl	8000830 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint4;
 8003f90:	4869      	ldr	r0, [pc, #420]	; (8004138 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003f92:	f7fc fc4d 	bl	8000830 <_ZN10RobotJointC1Ev>
RobotJoint fcb_Y;
 8003f96:	4869      	ldr	r0, [pc, #420]	; (800413c <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8003f98:	f7fc fc4a 	bl	8000830 <_ZN10RobotJointC1Ev>
RobotJoint fcb_X;
 8003f9c:	4868      	ldr	r0, [pc, #416]	; (8004140 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8003f9e:	f7fc fc47 	bl	8000830 <_ZN10RobotJointC1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8003fa2:	2208      	movs	r2, #8
 8003fa4:	4967      	ldr	r1, [pc, #412]	; (8004144 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8003fa6:	4868      	ldr	r0, [pc, #416]	; (8004148 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8003fa8:	f7fd fb5a 	bl	8001660 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>
volatile const float C2_q1 = (3.0 * C0_q1) / (Time * Time);
 8003fac:	4b67      	ldr	r3, [pc, #412]	; (800414c <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8003fae:	edd3 7a00 	vldr	s15, [r3]
 8003fb2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fb6:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8003fba:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003fbe:	4b64      	ldr	r3, [pc, #400]	; (8004150 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003fc0:	ed93 7a00 	vldr	s14, [r3]
 8003fc4:	4b62      	ldr	r3, [pc, #392]	; (8004150 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003fc6:	edd3 7a00 	vldr	s15, [r3]
 8003fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fce:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003fd2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003fd6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003fda:	4b5e      	ldr	r3, [pc, #376]	; (8004154 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8003fdc:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q1 = (2.0 * C0_q1) / (Time * Time * Time);
 8003fe0:	4b5a      	ldr	r3, [pc, #360]	; (800414c <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8003fe2:	edd3 7a00 	vldr	s15, [r3]
 8003fe6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fea:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003fee:	4b58      	ldr	r3, [pc, #352]	; (8004150 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003ff0:	ed93 7a00 	vldr	s14, [r3]
 8003ff4:	4b56      	ldr	r3, [pc, #344]	; (8004150 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003ff6:	edd3 7a00 	vldr	s15, [r3]
 8003ffa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ffe:	4b54      	ldr	r3, [pc, #336]	; (8004150 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8004000:	edd3 7a00 	vldr	s15, [r3]
 8004004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004008:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800400c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004010:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004014:	4b50      	ldr	r3, [pc, #320]	; (8004158 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8004016:	edc3 7a00 	vstr	s15, [r3]
volatile const float C2_q3 = (3.0 * C0_q3) / (Time * Time);
 800401a:	4b50      	ldr	r3, [pc, #320]	; (800415c <_Z41__static_initialization_and_destruction_0ii+0x260>)
 800401c:	edd3 7a00 	vldr	s15, [r3]
 8004020:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004024:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8004028:	ee27 5b06 	vmul.f64	d5, d7, d6
 800402c:	4b48      	ldr	r3, [pc, #288]	; (8004150 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800402e:	ed93 7a00 	vldr	s14, [r3]
 8004032:	4b47      	ldr	r3, [pc, #284]	; (8004150 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8004034:	edd3 7a00 	vldr	s15, [r3]
 8004038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800403c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004040:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004044:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004048:	4b45      	ldr	r3, [pc, #276]	; (8004160 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 800404a:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q3 = (2.0 * C0_q3) / (Time * Time * Time);
 800404e:	4b43      	ldr	r3, [pc, #268]	; (800415c <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8004050:	edd3 7a00 	vldr	s15, [r3]
 8004054:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004058:	ee37 5b07 	vadd.f64	d5, d7, d7
 800405c:	4b3c      	ldr	r3, [pc, #240]	; (8004150 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800405e:	ed93 7a00 	vldr	s14, [r3]
 8004062:	4b3b      	ldr	r3, [pc, #236]	; (8004150 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8004064:	edd3 7a00 	vldr	s15, [r3]
 8004068:	ee27 7a27 	vmul.f32	s14, s14, s15
 800406c:	4b38      	ldr	r3, [pc, #224]	; (8004150 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800406e:	edd3 7a00 	vldr	s15, [r3]
 8004072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004076:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800407a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800407e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004082:	4b38      	ldr	r3, [pc, #224]	; (8004164 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8004084:	edc3 7a00 	vstr	s15, [r3]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d12e      	bne.n	80040ec <_Z41__static_initialization_and_destruction_0ii+0x1f0>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004094:	4293      	cmp	r3, r2
 8004096:	d129      	bne.n	80040ec <_Z41__static_initialization_and_destruction_0ii+0x1f0>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8004098:	482b      	ldr	r0, [pc, #172]	; (8004148 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800409a:	f7fd fb11 	bl	80016c0 <_ZN10ServoMotorD1Ev>
RobotJoint fcb_X;
 800409e:	4828      	ldr	r0, [pc, #160]	; (8004140 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 80040a0:	f7fc fc36 	bl	8000910 <_ZN10RobotJointD1Ev>
RobotJoint fcb_Y;
 80040a4:	4825      	ldr	r0, [pc, #148]	; (800413c <_Z41__static_initialization_and_destruction_0ii+0x240>)
 80040a6:	f7fc fc33 	bl	8000910 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint4;
 80040aa:	4823      	ldr	r0, [pc, #140]	; (8004138 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 80040ac:	f7fc fc30 	bl	8000910 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint3;
 80040b0:	4820      	ldr	r0, [pc, #128]	; (8004134 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 80040b2:	f7fc fc2d 	bl	8000910 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint2;
 80040b6:	481e      	ldr	r0, [pc, #120]	; (8004130 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 80040b8:	f7fc fc2a 	bl	8000910 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint1;
 80040bc:	481b      	ldr	r0, [pc, #108]	; (800412c <_Z41__static_initialization_and_destruction_0ii+0x230>)
 80040be:	f7fc fc27 	bl	8000910 <_ZN10RobotJointD1Ev>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 80040c2:	4819      	ldr	r0, [pc, #100]	; (8004128 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 80040c4:	f7fd fd9a 	bl	8001bfc <_ZN7StepperD1Ev>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 80040c8:	4815      	ldr	r0, [pc, #84]	; (8004120 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 80040ca:	f7fd fd97 	bl	8001bfc <_ZN7StepperD1Ev>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 80040ce:	4812      	ldr	r0, [pc, #72]	; (8004118 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 80040d0:	f7fd fd94 	bl	8001bfc <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 80040d4:	480d      	ldr	r0, [pc, #52]	; (800410c <_Z41__static_initialization_and_destruction_0ii+0x210>)
 80040d6:	f7fd fd91 	bl	8001bfc <_ZN7StepperD1Ev>
AMT21 encoderJ4(&huart4, 0xA4);
 80040da:	4809      	ldr	r0, [pc, #36]	; (8004100 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 80040dc:	f7fc fae8 	bl	80006b0 <_ZN5AMT21D1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 80040e0:	4806      	ldr	r0, [pc, #24]	; (80040fc <_Z41__static_initialization_and_destruction_0ii+0x200>)
 80040e2:	f7fc fae5 	bl	80006b0 <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 80040e6:	4804      	ldr	r0, [pc, #16]	; (80040f8 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 80040e8:	f7fc fae2 	bl	80006b0 <_ZN5AMT21D1Ev>
}
 80040ec:	bf00      	nop
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	24001230 	.word	0x24001230
 80040f8:	24000210 	.word	0x24000210
 80040fc:	2400022c 	.word	0x2400022c
 8004100:	24000248 	.word	0x24000248
 8004104:	58020400 	.word	0x58020400
 8004108:	24000c84 	.word	0x24000c84
 800410c:	24000264 	.word	0x24000264
 8004110:	58021000 	.word	0x58021000
 8004114:	24000d68 	.word	0x24000d68
 8004118:	2400028c 	.word	0x2400028c
 800411c:	24000bec 	.word	0x24000bec
 8004120:	240002b4 	.word	0x240002b4
 8004124:	24000db4 	.word	0x24000db4
 8004128:	240002dc 	.word	0x240002dc
 800412c:	24000304 	.word	0x24000304
 8004130:	240003e8 	.word	0x240003e8
 8004134:	240004cc 	.word	0x240004cc
 8004138:	240005b0 	.word	0x240005b0
 800413c:	24000694 	.word	0x24000694
 8004140:	24000778 	.word	0x24000778
 8004144:	24000ba0 	.word	0x24000ba0
 8004148:	2400085c 	.word	0x2400085c
 800414c:	24000004 	.word	0x24000004
 8004150:	24000000 	.word	0x24000000
 8004154:	240008d8 	.word	0x240008d8
 8004158:	240008dc 	.word	0x240008dc
 800415c:	24000008 	.word	0x24000008
 8004160:	240008e0 	.word	0x240008e0
 8004164:	240008e4 	.word	0x240008e4

08004168 <_GLOBAL__sub_I_TIM_MS>:
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
 800416c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004170:	2001      	movs	r0, #1
 8004172:	f7ff fec3 	bl	8003efc <_Z41__static_initialization_and_destruction_0ii>
 8004176:	bd80      	pop	{r7, pc}

08004178 <_GLOBAL__sub_D_TIM_MS>:
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
 800417c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004180:	2000      	movs	r0, #0
 8004182:	f7ff febb 	bl	8003efc <_Z41__static_initialization_and_destruction_0ii>
 8004186:	bd80      	pop	{r7, pc}

08004188 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800418c:	4b27      	ldr	r3, [pc, #156]	; (800422c <MX_SPI3_Init+0xa4>)
 800418e:	4a28      	ldr	r2, [pc, #160]	; (8004230 <MX_SPI3_Init+0xa8>)
 8004190:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004192:	4b26      	ldr	r3, [pc, #152]	; (800422c <MX_SPI3_Init+0xa4>)
 8004194:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004198:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800419a:	4b24      	ldr	r3, [pc, #144]	; (800422c <MX_SPI3_Init+0xa4>)
 800419c:	2200      	movs	r2, #0
 800419e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80041a0:	4b22      	ldr	r3, [pc, #136]	; (800422c <MX_SPI3_Init+0xa4>)
 80041a2:	2203      	movs	r2, #3
 80041a4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041a6:	4b21      	ldr	r3, [pc, #132]	; (800422c <MX_SPI3_Init+0xa4>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041ac:	4b1f      	ldr	r3, [pc, #124]	; (800422c <MX_SPI3_Init+0xa4>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80041b2:	4b1e      	ldr	r3, [pc, #120]	; (800422c <MX_SPI3_Init+0xa4>)
 80041b4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80041b8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041ba:	4b1c      	ldr	r3, [pc, #112]	; (800422c <MX_SPI3_Init+0xa4>)
 80041bc:	2200      	movs	r2, #0
 80041be:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80041c0:	4b1a      	ldr	r3, [pc, #104]	; (800422c <MX_SPI3_Init+0xa4>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80041c6:	4b19      	ldr	r3, [pc, #100]	; (800422c <MX_SPI3_Init+0xa4>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041cc:	4b17      	ldr	r3, [pc, #92]	; (800422c <MX_SPI3_Init+0xa4>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80041d2:	4b16      	ldr	r3, [pc, #88]	; (800422c <MX_SPI3_Init+0xa4>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80041d8:	4b14      	ldr	r3, [pc, #80]	; (800422c <MX_SPI3_Init+0xa4>)
 80041da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041de:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80041e0:	4b12      	ldr	r3, [pc, #72]	; (800422c <MX_SPI3_Init+0xa4>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80041e6:	4b11      	ldr	r3, [pc, #68]	; (800422c <MX_SPI3_Init+0xa4>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80041ec:	4b0f      	ldr	r3, [pc, #60]	; (800422c <MX_SPI3_Init+0xa4>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80041f2:	4b0e      	ldr	r3, [pc, #56]	; (800422c <MX_SPI3_Init+0xa4>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80041f8:	4b0c      	ldr	r3, [pc, #48]	; (800422c <MX_SPI3_Init+0xa4>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80041fe:	4b0b      	ldr	r3, [pc, #44]	; (800422c <MX_SPI3_Init+0xa4>)
 8004200:	2200      	movs	r2, #0
 8004202:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004204:	4b09      	ldr	r3, [pc, #36]	; (800422c <MX_SPI3_Init+0xa4>)
 8004206:	2200      	movs	r2, #0
 8004208:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800420a:	4b08      	ldr	r3, [pc, #32]	; (800422c <MX_SPI3_Init+0xa4>)
 800420c:	2200      	movs	r2, #0
 800420e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004210:	4b06      	ldr	r3, [pc, #24]	; (800422c <MX_SPI3_Init+0xa4>)
 8004212:	2200      	movs	r2, #0
 8004214:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004216:	4805      	ldr	r0, [pc, #20]	; (800422c <MX_SPI3_Init+0xa4>)
 8004218:	f007 fba6 	bl	800b968 <HAL_SPI_Init>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8004222:	f7ff fe51 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004226:	bf00      	nop
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	24000b18 	.word	0x24000b18
 8004230:	40003c00 	.word	0x40003c00

08004234 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b0b8      	sub	sp, #224	; 0xe0
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800423c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	605a      	str	r2, [r3, #4]
 8004246:	609a      	str	r2, [r3, #8]
 8004248:	60da      	str	r2, [r3, #12]
 800424a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800424c:	f107 0310 	add.w	r3, r7, #16
 8004250:	22bc      	movs	r2, #188	; 0xbc
 8004252:	2100      	movs	r1, #0
 8004254:	4618      	mov	r0, r3
 8004256:	f00c fb3b 	bl	80108d0 <memset>
  if(spiHandle->Instance==SPI3)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a25      	ldr	r2, [pc, #148]	; (80042f4 <HAL_SPI_MspInit+0xc0>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d142      	bne.n	80042ea <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004268:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800426a:	2300      	movs	r3, #0
 800426c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800426e:	f107 0310 	add.w	r3, r7, #16
 8004272:	4618      	mov	r0, r3
 8004274:	f006 f816 	bl	800a2a4 <HAL_RCCEx_PeriphCLKConfig>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800427e:	f7ff fe23 	bl	8003ec8 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004282:	4b1d      	ldr	r3, [pc, #116]	; (80042f8 <HAL_SPI_MspInit+0xc4>)
 8004284:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004288:	4a1b      	ldr	r2, [pc, #108]	; (80042f8 <HAL_SPI_MspInit+0xc4>)
 800428a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800428e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004292:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <HAL_SPI_MspInit+0xc4>)
 8004294:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042a0:	4b15      	ldr	r3, [pc, #84]	; (80042f8 <HAL_SPI_MspInit+0xc4>)
 80042a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042a6:	4a14      	ldr	r2, [pc, #80]	; (80042f8 <HAL_SPI_MspInit+0xc4>)
 80042a8:	f043 0304 	orr.w	r3, r3, #4
 80042ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042b0:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <HAL_SPI_MspInit+0xc4>)
 80042b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	60bb      	str	r3, [r7, #8]
 80042bc:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80042be:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80042c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c6:	2302      	movs	r3, #2
 80042c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042d2:	2300      	movs	r3, #0
 80042d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80042d8:	2306      	movs	r3, #6
 80042da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042de:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80042e2:	4619      	mov	r1, r3
 80042e4:	4805      	ldr	r0, [pc, #20]	; (80042fc <HAL_SPI_MspInit+0xc8>)
 80042e6:	f004 fe07 	bl	8008ef8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80042ea:	bf00      	nop
 80042ec:	37e0      	adds	r7, #224	; 0xe0
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40003c00 	.word	0x40003c00
 80042f8:	58024400 	.word	0x58024400
 80042fc:	58020800 	.word	0x58020800

08004300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004306:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <HAL_MspInit+0x30>)
 8004308:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800430c:	4a08      	ldr	r2, [pc, #32]	; (8004330 <HAL_MspInit+0x30>)
 800430e:	f043 0302 	orr.w	r3, r3, #2
 8004312:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004316:	4b06      	ldr	r3, [pc, #24]	; (8004330 <HAL_MspInit+0x30>)
 8004318:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	607b      	str	r3, [r7, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	58024400 	.word	0x58024400

08004334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004338:	e7fe      	b.n	8004338 <NMI_Handler+0x4>

0800433a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800433a:	b480      	push	{r7}
 800433c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800433e:	e7fe      	b.n	800433e <HardFault_Handler+0x4>

08004340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004344:	e7fe      	b.n	8004344 <MemManage_Handler+0x4>

08004346 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004346:	b480      	push	{r7}
 8004348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800434a:	e7fe      	b.n	800434a <BusFault_Handler+0x4>

0800434c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004350:	e7fe      	b.n	8004350 <UsageFault_Handler+0x4>

08004352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004352:	b480      	push	{r7}
 8004354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004356:	bf00      	nop
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004364:	bf00      	nop
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800436e:	b480      	push	{r7}
 8004370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004372:	bf00      	nop
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004380:	f001 fc16 	bl	8005bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8004384:	f001 fd73 	bl	8005e6e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004388:	bf00      	nop
 800438a:	bd80      	pop	{r7, pc}

0800438c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8004390:	4802      	ldr	r0, [pc, #8]	; (800439c <DMA1_Stream0_IRQHandler+0x10>)
 8004392:	f003 fa9f 	bl	80078d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004396:	bf00      	nop
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	240011b8 	.word	0x240011b8

080043a0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80043a4:	4802      	ldr	r0, [pc, #8]	; (80043b0 <DMA1_Stream1_IRQHandler+0x10>)
 80043a6:	f003 fa95 	bl	80078d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80043aa:	bf00      	nop
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	24001038 	.word	0x24001038

080043b4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80043b8:	4802      	ldr	r0, [pc, #8]	; (80043c4 <DMA1_Stream2_IRQHandler+0x10>)
 80043ba:	f003 fa8b 	bl	80078d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80043be:	bf00      	nop
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	24001140 	.word	0x24001140

080043c8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80043cc:	4802      	ldr	r0, [pc, #8]	; (80043d8 <DMA1_Stream3_IRQHandler+0x10>)
 80043ce:	f003 fa81 	bl	80078d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80043d2:	bf00      	nop
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	24000f30 	.word	0x24000f30

080043dc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80043e0:	4802      	ldr	r0, [pc, #8]	; (80043ec <DMA1_Stream4_IRQHandler+0x10>)
 80043e2:	f003 fa77 	bl	80078d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80043e6:	bf00      	nop
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	240012c0 	.word	0x240012c0

080043f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 80043f4:	2040      	movs	r0, #64	; 0x40
 80043f6:	f004 ff48 	bl	800928a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 80043fa:	2080      	movs	r0, #128	; 0x80
 80043fc:	f004 ff45 	bl	800928a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004400:	bf00      	nop
 8004402:	bd80      	pop	{r7, pc}

08004404 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004408:	4802      	ldr	r0, [pc, #8]	; (8004414 <USART3_IRQHandler+0x10>)
 800440a:	f009 f939 	bl	800d680 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800440e:	bf00      	nop
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	240010b0 	.word	0x240010b0

08004418 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 800441c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004420:	f004 ff33 	bl	800928a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8004424:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004428:	f004 ff2f 	bl	800928a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 800442c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004430:	f004 ff2b 	bl	800928a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8004434:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004438:	f004 ff27 	bl	800928a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800443c:	bf00      	nop
 800443e:	bd80      	pop	{r7, pc}

08004440 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8004444:	4802      	ldr	r0, [pc, #8]	; (8004450 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8004446:	f007 fe1d 	bl	800c084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800444a:	bf00      	nop
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	24000e4c 	.word	0x24000e4c

08004454 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8004458:	4802      	ldr	r0, [pc, #8]	; (8004464 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800445a:	f007 fe13 	bl	800c084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800445e:	bf00      	nop
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	24000cd0 	.word	0x24000cd0

08004468 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800446c:	4802      	ldr	r0, [pc, #8]	; (8004478 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800446e:	f007 fe09 	bl	800c084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004472:	bf00      	nop
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	24000e00 	.word	0x24000e00

0800447c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004480:	4802      	ldr	r0, [pc, #8]	; (800448c <TIM5_IRQHandler+0x10>)
 8004482:	f007 fdff 	bl	800c084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004486:	bf00      	nop
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	24000c38 	.word	0x24000c38

08004490 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004494:	4802      	ldr	r0, [pc, #8]	; (80044a0 <UART4_IRQHandler+0x10>)
 8004496:	f009 f8f3 	bl	800d680 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800449a:	bf00      	nop
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	24001230 	.word	0x24001230

080044a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80044a8:	4802      	ldr	r0, [pc, #8]	; (80044b4 <TIM6_DAC_IRQHandler+0x10>)
 80044aa:	f007 fdeb 	bl	800c084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80044ae:	bf00      	nop
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	24000d1c 	.word	0x24000d1c

080044b8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80044bc:	4802      	ldr	r0, [pc, #8]	; (80044c8 <TIM7_IRQHandler+0x10>)
 80044be:	f007 fde1 	bl	800c084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80044c2:	bf00      	nop
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	24000ee4 	.word	0x24000ee4

080044cc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80044d0:	4802      	ldr	r0, [pc, #8]	; (80044dc <UART7_IRQHandler+0x10>)
 80044d2:	f009 f8d5 	bl	800d680 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80044d6:	bf00      	nop
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	24000fa8 	.word	0x24000fa8

080044e0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80044e4:	4802      	ldr	r0, [pc, #8]	; (80044f0 <TIM16_IRQHandler+0x10>)
 80044e6:	f007 fdcd 	bl	800c084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80044ea:	bf00      	nop
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	24000e98 	.word	0x24000e98

080044f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
	return 1;
 80044f8:	2301      	movs	r3, #1
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <_kill>:

int _kill(int pid, int sig)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800450e:	f00c f9b5 	bl	801087c <__errno>
 8004512:	4603      	mov	r3, r0
 8004514:	2216      	movs	r2, #22
 8004516:	601a      	str	r2, [r3, #0]
	return -1;
 8004518:	f04f 33ff 	mov.w	r3, #4294967295
}
 800451c:	4618      	mov	r0, r3
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <_exit>:

void _exit (int status)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800452c:	f04f 31ff 	mov.w	r1, #4294967295
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff ffe7 	bl	8004504 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004536:	e7fe      	b.n	8004536 <_exit+0x12>

08004538 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004544:	2300      	movs	r3, #0
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	e00a      	b.n	8004560 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800454a:	f3af 8000 	nop.w
 800454e:	4601      	mov	r1, r0
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	60ba      	str	r2, [r7, #8]
 8004556:	b2ca      	uxtb	r2, r1
 8004558:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	3301      	adds	r3, #1
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	429a      	cmp	r2, r3
 8004566:	dbf0      	blt.n	800454a <_read+0x12>
	}

return len;
 8004568:	687b      	ldr	r3, [r7, #4]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b086      	sub	sp, #24
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	e009      	b.n	8004598 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	60ba      	str	r2, [r7, #8]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	3301      	adds	r3, #1
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	429a      	cmp	r2, r3
 800459e:	dbf1      	blt.n	8004584 <_write+0x12>
	}
	return len;
 80045a0:	687b      	ldr	r3, [r7, #4]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <_close>:

int _close(int file)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
	return -1;
 80045b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045d2:	605a      	str	r2, [r3, #4]
	return 0;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <_isatty>:

int _isatty(int file)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
	return 1;
 80045ea:	2301      	movs	r3, #1
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
	return 0;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
	...

08004614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800461c:	4a14      	ldr	r2, [pc, #80]	; (8004670 <_sbrk+0x5c>)
 800461e:	4b15      	ldr	r3, [pc, #84]	; (8004674 <_sbrk+0x60>)
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004628:	4b13      	ldr	r3, [pc, #76]	; (8004678 <_sbrk+0x64>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d102      	bne.n	8004636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004630:	4b11      	ldr	r3, [pc, #68]	; (8004678 <_sbrk+0x64>)
 8004632:	4a12      	ldr	r2, [pc, #72]	; (800467c <_sbrk+0x68>)
 8004634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004636:	4b10      	ldr	r3, [pc, #64]	; (8004678 <_sbrk+0x64>)
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4413      	add	r3, r2
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	429a      	cmp	r2, r3
 8004642:	d207      	bcs.n	8004654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004644:	f00c f91a 	bl	801087c <__errno>
 8004648:	4603      	mov	r3, r0
 800464a:	220c      	movs	r2, #12
 800464c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800464e:	f04f 33ff 	mov.w	r3, #4294967295
 8004652:	e009      	b.n	8004668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004654:	4b08      	ldr	r3, [pc, #32]	; (8004678 <_sbrk+0x64>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800465a:	4b07      	ldr	r3, [pc, #28]	; (8004678 <_sbrk+0x64>)
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4413      	add	r3, r2
 8004662:	4a05      	ldr	r2, [pc, #20]	; (8004678 <_sbrk+0x64>)
 8004664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004666:	68fb      	ldr	r3, [r7, #12]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	24001950 	.word	0x24001950
 8004674:	00000400 	.word	0x00000400
 8004678:	24000ae8 	.word	0x24000ae8
 800467c:	24001350 	.word	0x24001350

08004680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004684:	4b39      	ldr	r3, [pc, #228]	; (800476c <SystemInit+0xec>)
 8004686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468a:	4a38      	ldr	r2, [pc, #224]	; (800476c <SystemInit+0xec>)
 800468c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004694:	4b36      	ldr	r3, [pc, #216]	; (8004770 <SystemInit+0xf0>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 030f 	and.w	r3, r3, #15
 800469c:	2b06      	cmp	r3, #6
 800469e:	d807      	bhi.n	80046b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80046a0:	4b33      	ldr	r3, [pc, #204]	; (8004770 <SystemInit+0xf0>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f023 030f 	bic.w	r3, r3, #15
 80046a8:	4a31      	ldr	r2, [pc, #196]	; (8004770 <SystemInit+0xf0>)
 80046aa:	f043 0307 	orr.w	r3, r3, #7
 80046ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80046b0:	4b30      	ldr	r3, [pc, #192]	; (8004774 <SystemInit+0xf4>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a2f      	ldr	r2, [pc, #188]	; (8004774 <SystemInit+0xf4>)
 80046b6:	f043 0301 	orr.w	r3, r3, #1
 80046ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80046bc:	4b2d      	ldr	r3, [pc, #180]	; (8004774 <SystemInit+0xf4>)
 80046be:	2200      	movs	r2, #0
 80046c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80046c2:	4b2c      	ldr	r3, [pc, #176]	; (8004774 <SystemInit+0xf4>)
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	492b      	ldr	r1, [pc, #172]	; (8004774 <SystemInit+0xf4>)
 80046c8:	4b2b      	ldr	r3, [pc, #172]	; (8004778 <SystemInit+0xf8>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80046ce:	4b28      	ldr	r3, [pc, #160]	; (8004770 <SystemInit+0xf0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d007      	beq.n	80046ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80046da:	4b25      	ldr	r3, [pc, #148]	; (8004770 <SystemInit+0xf0>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f023 030f 	bic.w	r3, r3, #15
 80046e2:	4a23      	ldr	r2, [pc, #140]	; (8004770 <SystemInit+0xf0>)
 80046e4:	f043 0307 	orr.w	r3, r3, #7
 80046e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80046ea:	4b22      	ldr	r3, [pc, #136]	; (8004774 <SystemInit+0xf4>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80046f0:	4b20      	ldr	r3, [pc, #128]	; (8004774 <SystemInit+0xf4>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80046f6:	4b1f      	ldr	r3, [pc, #124]	; (8004774 <SystemInit+0xf4>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80046fc:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <SystemInit+0xf4>)
 80046fe:	4a1f      	ldr	r2, [pc, #124]	; (800477c <SystemInit+0xfc>)
 8004700:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004702:	4b1c      	ldr	r3, [pc, #112]	; (8004774 <SystemInit+0xf4>)
 8004704:	4a1e      	ldr	r2, [pc, #120]	; (8004780 <SystemInit+0x100>)
 8004706:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004708:	4b1a      	ldr	r3, [pc, #104]	; (8004774 <SystemInit+0xf4>)
 800470a:	4a1e      	ldr	r2, [pc, #120]	; (8004784 <SystemInit+0x104>)
 800470c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800470e:	4b19      	ldr	r3, [pc, #100]	; (8004774 <SystemInit+0xf4>)
 8004710:	2200      	movs	r2, #0
 8004712:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004714:	4b17      	ldr	r3, [pc, #92]	; (8004774 <SystemInit+0xf4>)
 8004716:	4a1b      	ldr	r2, [pc, #108]	; (8004784 <SystemInit+0x104>)
 8004718:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800471a:	4b16      	ldr	r3, [pc, #88]	; (8004774 <SystemInit+0xf4>)
 800471c:	2200      	movs	r2, #0
 800471e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004720:	4b14      	ldr	r3, [pc, #80]	; (8004774 <SystemInit+0xf4>)
 8004722:	4a18      	ldr	r2, [pc, #96]	; (8004784 <SystemInit+0x104>)
 8004724:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004726:	4b13      	ldr	r3, [pc, #76]	; (8004774 <SystemInit+0xf4>)
 8004728:	2200      	movs	r2, #0
 800472a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800472c:	4b11      	ldr	r3, [pc, #68]	; (8004774 <SystemInit+0xf4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a10      	ldr	r2, [pc, #64]	; (8004774 <SystemInit+0xf4>)
 8004732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004736:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004738:	4b0e      	ldr	r3, [pc, #56]	; (8004774 <SystemInit+0xf4>)
 800473a:	2200      	movs	r2, #0
 800473c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800473e:	4b12      	ldr	r3, [pc, #72]	; (8004788 <SystemInit+0x108>)
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	4b12      	ldr	r3, [pc, #72]	; (800478c <SystemInit+0x10c>)
 8004744:	4013      	ands	r3, r2
 8004746:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800474a:	d202      	bcs.n	8004752 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800474c:	4b10      	ldr	r3, [pc, #64]	; (8004790 <SystemInit+0x110>)
 800474e:	2201      	movs	r2, #1
 8004750:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004752:	4b10      	ldr	r3, [pc, #64]	; (8004794 <SystemInit+0x114>)
 8004754:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004758:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800475a:	4b04      	ldr	r3, [pc, #16]	; (800476c <SystemInit+0xec>)
 800475c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004760:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004762:	bf00      	nop
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	e000ed00 	.word	0xe000ed00
 8004770:	52002000 	.word	0x52002000
 8004774:	58024400 	.word	0x58024400
 8004778:	eaf6ed7f 	.word	0xeaf6ed7f
 800477c:	02020200 	.word	0x02020200
 8004780:	01ff0000 	.word	0x01ff0000
 8004784:	01010280 	.word	0x01010280
 8004788:	5c001000 	.word	0x5c001000
 800478c:	ffff0000 	.word	0xffff0000
 8004790:	51008108 	.word	0x51008108
 8004794:	52004000 	.word	0x52004000

08004798 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b09a      	sub	sp, #104	; 0x68
 800479c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800479e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	605a      	str	r2, [r3, #4]
 80047a8:	609a      	str	r2, [r3, #8]
 80047aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80047b0:	2200      	movs	r2, #0
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	605a      	str	r2, [r3, #4]
 80047b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80047b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	605a      	str	r2, [r3, #4]
 80047c2:	609a      	str	r2, [r3, #8]
 80047c4:	60da      	str	r2, [r3, #12]
 80047c6:	611a      	str	r2, [r3, #16]
 80047c8:	615a      	str	r2, [r3, #20]
 80047ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80047cc:	1d3b      	adds	r3, r7, #4
 80047ce:	222c      	movs	r2, #44	; 0x2c
 80047d0:	2100      	movs	r1, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	f00c f87c 	bl	80108d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80047d8:	4b44      	ldr	r3, [pc, #272]	; (80048ec <MX_TIM1_Init+0x154>)
 80047da:	4a45      	ldr	r2, [pc, #276]	; (80048f0 <MX_TIM1_Init+0x158>)
 80047dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 80047de:	4b43      	ldr	r3, [pc, #268]	; (80048ec <MX_TIM1_Init+0x154>)
 80047e0:	22c7      	movs	r2, #199	; 0xc7
 80047e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047e4:	4b41      	ldr	r3, [pc, #260]	; (80048ec <MX_TIM1_Init+0x154>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 80047ea:	4b40      	ldr	r3, [pc, #256]	; (80048ec <MX_TIM1_Init+0x154>)
 80047ec:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80047f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047f2:	4b3e      	ldr	r3, [pc, #248]	; (80048ec <MX_TIM1_Init+0x154>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80047f8:	4b3c      	ldr	r3, [pc, #240]	; (80048ec <MX_TIM1_Init+0x154>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80047fe:	4b3b      	ldr	r3, [pc, #236]	; (80048ec <MX_TIM1_Init+0x154>)
 8004800:	2280      	movs	r2, #128	; 0x80
 8004802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004804:	4839      	ldr	r0, [pc, #228]	; (80048ec <MX_TIM1_Init+0x154>)
 8004806:	f007 f9d0 	bl	800bbaa <HAL_TIM_Base_Init>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004810:	f7ff fb5a 	bl	8003ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004818:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800481a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800481e:	4619      	mov	r1, r3
 8004820:	4832      	ldr	r0, [pc, #200]	; (80048ec <MX_TIM1_Init+0x154>)
 8004822:	f007 fe63 	bl	800c4ec <HAL_TIM_ConfigClockSource>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800482c:	f7ff fb4c 	bl	8003ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004830:	482e      	ldr	r0, [pc, #184]	; (80048ec <MX_TIM1_Init+0x154>)
 8004832:	f007 fab8 	bl	800bda6 <HAL_TIM_PWM_Init>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800483c:	f7ff fb44 	bl	8003ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004840:	2300      	movs	r3, #0
 8004842:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004844:	2300      	movs	r3, #0
 8004846:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004848:	2300      	movs	r3, #0
 800484a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800484c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004850:	4619      	mov	r1, r3
 8004852:	4826      	ldr	r0, [pc, #152]	; (80048ec <MX_TIM1_Init+0x154>)
 8004854:	f008 fb9e 	bl	800cf94 <HAL_TIMEx_MasterConfigSynchronization>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800485e:	f7ff fb33 	bl	8003ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004862:	2360      	movs	r3, #96	; 0x60
 8004864:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8004866:	f240 1339 	movw	r3, #313	; 0x139
 800486a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800486c:	2300      	movs	r3, #0
 800486e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004870:	2300      	movs	r3, #0
 8004872:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004874:	2300      	movs	r3, #0
 8004876:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004878:	2300      	movs	r3, #0
 800487a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800487c:	2300      	movs	r3, #0
 800487e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004880:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004884:	2204      	movs	r2, #4
 8004886:	4619      	mov	r1, r3
 8004888:	4818      	ldr	r0, [pc, #96]	; (80048ec <MX_TIM1_Init+0x154>)
 800488a:	f007 fd1b 	bl	800c2c4 <HAL_TIM_PWM_ConfigChannel>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004894:	f7ff fb18 	bl	8003ec8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004898:	2300      	movs	r3, #0
 800489a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800489c:	2300      	movs	r3, #0
 800489e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80048a4:	2300      	movs	r3, #0
 80048a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80048ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80048b6:	2300      	movs	r3, #0
 80048b8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80048ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80048c4:	2300      	movs	r3, #0
 80048c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80048c8:	1d3b      	adds	r3, r7, #4
 80048ca:	4619      	mov	r1, r3
 80048cc:	4807      	ldr	r0, [pc, #28]	; (80048ec <MX_TIM1_Init+0x154>)
 80048ce:	f008 fbef 	bl	800d0b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80048d8:	f7ff faf6 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80048dc:	4803      	ldr	r0, [pc, #12]	; (80048ec <MX_TIM1_Init+0x154>)
 80048de:	f000 fccb 	bl	8005278 <HAL_TIM_MspPostInit>

}
 80048e2:	bf00      	nop
 80048e4:	3768      	adds	r7, #104	; 0x68
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	24000d68 	.word	0x24000d68
 80048f0:	40010000 	.word	0x40010000

080048f4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08e      	sub	sp, #56	; 0x38
 80048f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	605a      	str	r2, [r3, #4]
 8004904:	609a      	str	r2, [r3, #8]
 8004906:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004908:	f107 031c 	add.w	r3, r7, #28
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	605a      	str	r2, [r3, #4]
 8004912:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004914:	463b      	mov	r3, r7
 8004916:	2200      	movs	r2, #0
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	605a      	str	r2, [r3, #4]
 800491c:	609a      	str	r2, [r3, #8]
 800491e:	60da      	str	r2, [r3, #12]
 8004920:	611a      	str	r2, [r3, #16]
 8004922:	615a      	str	r2, [r3, #20]
 8004924:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004926:	4b2e      	ldr	r3, [pc, #184]	; (80049e0 <MX_TIM2_Init+0xec>)
 8004928:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800492c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 800492e:	4b2c      	ldr	r3, [pc, #176]	; (80049e0 <MX_TIM2_Init+0xec>)
 8004930:	22c7      	movs	r2, #199	; 0xc7
 8004932:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004934:	4b2a      	ldr	r3, [pc, #168]	; (80049e0 <MX_TIM2_Init+0xec>)
 8004936:	2200      	movs	r2, #0
 8004938:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 800493a:	4b29      	ldr	r3, [pc, #164]	; (80049e0 <MX_TIM2_Init+0xec>)
 800493c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8004940:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004942:	4b27      	ldr	r3, [pc, #156]	; (80049e0 <MX_TIM2_Init+0xec>)
 8004944:	2200      	movs	r2, #0
 8004946:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004948:	4b25      	ldr	r3, [pc, #148]	; (80049e0 <MX_TIM2_Init+0xec>)
 800494a:	2280      	movs	r2, #128	; 0x80
 800494c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800494e:	4824      	ldr	r0, [pc, #144]	; (80049e0 <MX_TIM2_Init+0xec>)
 8004950:	f007 f92b 	bl	800bbaa <HAL_TIM_Base_Init>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800495a:	f7ff fab5 	bl	8003ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800495e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004962:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004964:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004968:	4619      	mov	r1, r3
 800496a:	481d      	ldr	r0, [pc, #116]	; (80049e0 <MX_TIM2_Init+0xec>)
 800496c:	f007 fdbe 	bl	800c4ec <HAL_TIM_ConfigClockSource>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004976:	f7ff faa7 	bl	8003ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800497a:	4819      	ldr	r0, [pc, #100]	; (80049e0 <MX_TIM2_Init+0xec>)
 800497c:	f007 fa13 	bl	800bda6 <HAL_TIM_PWM_Init>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004986:	f7ff fa9f 	bl	8003ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800498a:	2300      	movs	r3, #0
 800498c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800498e:	2300      	movs	r3, #0
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004992:	f107 031c 	add.w	r3, r7, #28
 8004996:	4619      	mov	r1, r3
 8004998:	4811      	ldr	r0, [pc, #68]	; (80049e0 <MX_TIM2_Init+0xec>)
 800499a:	f008 fafb 	bl	800cf94 <HAL_TIMEx_MasterConfigSynchronization>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80049a4:	f7ff fa90 	bl	8003ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049a8:	2360      	movs	r3, #96	; 0x60
 80049aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80049ac:	f240 1339 	movw	r3, #313	; 0x139
 80049b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80049b2:	2300      	movs	r3, #0
 80049b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80049b6:	2300      	movs	r3, #0
 80049b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80049ba:	463b      	mov	r3, r7
 80049bc:	2208      	movs	r2, #8
 80049be:	4619      	mov	r1, r3
 80049c0:	4807      	ldr	r0, [pc, #28]	; (80049e0 <MX_TIM2_Init+0xec>)
 80049c2:	f007 fc7f 	bl	800c2c4 <HAL_TIM_PWM_ConfigChannel>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80049cc:	f7ff fa7c 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80049d0:	4803      	ldr	r0, [pc, #12]	; (80049e0 <MX_TIM2_Init+0xec>)
 80049d2:	f000 fc51 	bl	8005278 <HAL_TIM_MspPostInit>

}
 80049d6:	bf00      	nop
 80049d8:	3738      	adds	r7, #56	; 0x38
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	24000db4 	.word	0x24000db4

080049e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b08e      	sub	sp, #56	; 0x38
 80049e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	605a      	str	r2, [r3, #4]
 80049f4:	609a      	str	r2, [r3, #8]
 80049f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049f8:	f107 031c 	add.w	r3, r7, #28
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	605a      	str	r2, [r3, #4]
 8004a02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a04:	463b      	mov	r3, r7
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	605a      	str	r2, [r3, #4]
 8004a0c:	609a      	str	r2, [r3, #8]
 8004a0e:	60da      	str	r2, [r3, #12]
 8004a10:	611a      	str	r2, [r3, #16]
 8004a12:	615a      	str	r2, [r3, #20]
 8004a14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004a16:	4b2d      	ldr	r3, [pc, #180]	; (8004acc <MX_TIM3_Init+0xe8>)
 8004a18:	4a2d      	ldr	r2, [pc, #180]	; (8004ad0 <MX_TIM3_Init+0xec>)
 8004a1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8004a1c:	4b2b      	ldr	r3, [pc, #172]	; (8004acc <MX_TIM3_Init+0xe8>)
 8004a1e:	22c7      	movs	r2, #199	; 0xc7
 8004a20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a22:	4b2a      	ldr	r3, [pc, #168]	; (8004acc <MX_TIM3_Init+0xe8>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 8004a28:	4b28      	ldr	r3, [pc, #160]	; (8004acc <MX_TIM3_Init+0xe8>)
 8004a2a:	f640 125f 	movw	r2, #2399	; 0x95f
 8004a2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a30:	4b26      	ldr	r3, [pc, #152]	; (8004acc <MX_TIM3_Init+0xe8>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a36:	4b25      	ldr	r3, [pc, #148]	; (8004acc <MX_TIM3_Init+0xe8>)
 8004a38:	2280      	movs	r2, #128	; 0x80
 8004a3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004a3c:	4823      	ldr	r0, [pc, #140]	; (8004acc <MX_TIM3_Init+0xe8>)
 8004a3e:	f007 f8b4 	bl	800bbaa <HAL_TIM_Base_Init>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004a48:	f7ff fa3e 	bl	8003ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004a52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a56:	4619      	mov	r1, r3
 8004a58:	481c      	ldr	r0, [pc, #112]	; (8004acc <MX_TIM3_Init+0xe8>)
 8004a5a:	f007 fd47 	bl	800c4ec <HAL_TIM_ConfigClockSource>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004a64:	f7ff fa30 	bl	8003ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004a68:	4818      	ldr	r0, [pc, #96]	; (8004acc <MX_TIM3_Init+0xe8>)
 8004a6a:	f007 f99c 	bl	800bda6 <HAL_TIM_PWM_Init>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004a74:	f7ff fa28 	bl	8003ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004a80:	f107 031c 	add.w	r3, r7, #28
 8004a84:	4619      	mov	r1, r3
 8004a86:	4811      	ldr	r0, [pc, #68]	; (8004acc <MX_TIM3_Init+0xe8>)
 8004a88:	f008 fa84 	bl	800cf94 <HAL_TIMEx_MasterConfigSynchronization>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004a92:	f7ff fa19 	bl	8003ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a96:	2360      	movs	r3, #96	; 0x60
 8004a98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004aa6:	463b      	mov	r3, r7
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4807      	ldr	r0, [pc, #28]	; (8004acc <MX_TIM3_Init+0xe8>)
 8004aae:	f007 fc09 	bl	800c2c4 <HAL_TIM_PWM_ConfigChannel>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004ab8:	f7ff fa06 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004abc:	4803      	ldr	r0, [pc, #12]	; (8004acc <MX_TIM3_Init+0xe8>)
 8004abe:	f000 fbdb 	bl	8005278 <HAL_TIM_MspPostInit>

}
 8004ac2:	bf00      	nop
 8004ac4:	3738      	adds	r7, #56	; 0x38
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	24000c84 	.word	0x24000c84
 8004ad0:	40000400 	.word	0x40000400

08004ad4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08e      	sub	sp, #56	; 0x38
 8004ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ada:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ade:	2200      	movs	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	605a      	str	r2, [r3, #4]
 8004ae4:	609a      	str	r2, [r3, #8]
 8004ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ae8:	f107 031c 	add.w	r3, r7, #28
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	605a      	str	r2, [r3, #4]
 8004af2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004af4:	463b      	mov	r3, r7
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	605a      	str	r2, [r3, #4]
 8004afc:	609a      	str	r2, [r3, #8]
 8004afe:	60da      	str	r2, [r3, #12]
 8004b00:	611a      	str	r2, [r3, #16]
 8004b02:	615a      	str	r2, [r3, #20]
 8004b04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004b06:	4b2d      	ldr	r3, [pc, #180]	; (8004bbc <MX_TIM4_Init+0xe8>)
 8004b08:	4a2d      	ldr	r2, [pc, #180]	; (8004bc0 <MX_TIM4_Init+0xec>)
 8004b0a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8004b0c:	4b2b      	ldr	r3, [pc, #172]	; (8004bbc <MX_TIM4_Init+0xe8>)
 8004b0e:	22ef      	movs	r2, #239	; 0xef
 8004b10:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b12:	4b2a      	ldr	r3, [pc, #168]	; (8004bbc <MX_TIM4_Init+0xe8>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8004b18:	4b28      	ldr	r3, [pc, #160]	; (8004bbc <MX_TIM4_Init+0xe8>)
 8004b1a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004b1e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b20:	4b26      	ldr	r3, [pc, #152]	; (8004bbc <MX_TIM4_Init+0xe8>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b26:	4b25      	ldr	r3, [pc, #148]	; (8004bbc <MX_TIM4_Init+0xe8>)
 8004b28:	2280      	movs	r2, #128	; 0x80
 8004b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004b2c:	4823      	ldr	r0, [pc, #140]	; (8004bbc <MX_TIM4_Init+0xe8>)
 8004b2e:	f007 f83c 	bl	800bbaa <HAL_TIM_Base_Init>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8004b38:	f7ff f9c6 	bl	8003ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004b42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b46:	4619      	mov	r1, r3
 8004b48:	481c      	ldr	r0, [pc, #112]	; (8004bbc <MX_TIM4_Init+0xe8>)
 8004b4a:	f007 fccf 	bl	800c4ec <HAL_TIM_ConfigClockSource>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8004b54:	f7ff f9b8 	bl	8003ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004b58:	4818      	ldr	r0, [pc, #96]	; (8004bbc <MX_TIM4_Init+0xe8>)
 8004b5a:	f007 f924 	bl	800bda6 <HAL_TIM_PWM_Init>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8004b64:	f7ff f9b0 	bl	8003ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004b70:	f107 031c 	add.w	r3, r7, #28
 8004b74:	4619      	mov	r1, r3
 8004b76:	4811      	ldr	r0, [pc, #68]	; (8004bbc <MX_TIM4_Init+0xe8>)
 8004b78:	f008 fa0c 	bl	800cf94 <HAL_TIMEx_MasterConfigSynchronization>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004b82:	f7ff f9a1 	bl	8003ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b86:	2360      	movs	r3, #96	; 0x60
 8004b88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b92:	2300      	movs	r3, #0
 8004b94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004b96:	463b      	mov	r3, r7
 8004b98:	2208      	movs	r2, #8
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4807      	ldr	r0, [pc, #28]	; (8004bbc <MX_TIM4_Init+0xe8>)
 8004b9e:	f007 fb91 	bl	800c2c4 <HAL_TIM_PWM_ConfigChannel>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8004ba8:	f7ff f98e 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004bac:	4803      	ldr	r0, [pc, #12]	; (8004bbc <MX_TIM4_Init+0xe8>)
 8004bae:	f000 fb63 	bl	8005278 <HAL_TIM_MspPostInit>

}
 8004bb2:	bf00      	nop
 8004bb4:	3738      	adds	r7, #56	; 0x38
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	24000ba0 	.word	0x24000ba0
 8004bc0:	40000800 	.word	0x40000800

08004bc4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004bca:	f107 0310 	add.w	r3, r7, #16
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	605a      	str	r2, [r3, #4]
 8004bd4:	609a      	str	r2, [r3, #8]
 8004bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bd8:	1d3b      	adds	r3, r7, #4
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	605a      	str	r2, [r3, #4]
 8004be0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004be2:	4b1d      	ldr	r3, [pc, #116]	; (8004c58 <MX_TIM5_Init+0x94>)
 8004be4:	4a1d      	ldr	r2, [pc, #116]	; (8004c5c <MX_TIM5_Init+0x98>)
 8004be6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 8004be8:	4b1b      	ldr	r3, [pc, #108]	; (8004c58 <MX_TIM5_Init+0x94>)
 8004bea:	22c7      	movs	r2, #199	; 0xc7
 8004bec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bee:	4b1a      	ldr	r3, [pc, #104]	; (8004c58 <MX_TIM5_Init+0x94>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8004bf4:	4b18      	ldr	r3, [pc, #96]	; (8004c58 <MX_TIM5_Init+0x94>)
 8004bf6:	f642 62df 	movw	r2, #11999	; 0x2edf
 8004bfa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bfc:	4b16      	ldr	r3, [pc, #88]	; (8004c58 <MX_TIM5_Init+0x94>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c02:	4b15      	ldr	r3, [pc, #84]	; (8004c58 <MX_TIM5_Init+0x94>)
 8004c04:	2280      	movs	r2, #128	; 0x80
 8004c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004c08:	4813      	ldr	r0, [pc, #76]	; (8004c58 <MX_TIM5_Init+0x94>)
 8004c0a:	f006 ffce 	bl	800bbaa <HAL_TIM_Base_Init>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004c14:	f7ff f958 	bl	8003ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004c1e:	f107 0310 	add.w	r3, r7, #16
 8004c22:	4619      	mov	r1, r3
 8004c24:	480c      	ldr	r0, [pc, #48]	; (8004c58 <MX_TIM5_Init+0x94>)
 8004c26:	f007 fc61 	bl	800c4ec <HAL_TIM_ConfigClockSource>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004c30:	f7ff f94a 	bl	8003ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c34:	2300      	movs	r3, #0
 8004c36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004c3c:	1d3b      	adds	r3, r7, #4
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4805      	ldr	r0, [pc, #20]	; (8004c58 <MX_TIM5_Init+0x94>)
 8004c42:	f008 f9a7 	bl	800cf94 <HAL_TIMEx_MasterConfigSynchronization>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004c4c:	f7ff f93c 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004c50:	bf00      	nop
 8004c52:	3720      	adds	r7, #32
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	24000c38 	.word	0x24000c38
 8004c5c:	40000c00 	.word	0x40000c00

08004c60 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c66:	1d3b      	adds	r3, r7, #4
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	605a      	str	r2, [r3, #4]
 8004c6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004c70:	4b14      	ldr	r3, [pc, #80]	; (8004cc4 <MX_TIM6_Init+0x64>)
 8004c72:	4a15      	ldr	r2, [pc, #84]	; (8004cc8 <MX_TIM6_Init+0x68>)
 8004c74:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 8004c76:	4b13      	ldr	r3, [pc, #76]	; (8004cc4 <MX_TIM6_Init+0x64>)
 8004c78:	22c7      	movs	r2, #199	; 0xc7
 8004c7a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c7c:	4b11      	ldr	r3, [pc, #68]	; (8004cc4 <MX_TIM6_Init+0x64>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 8004c82:	4b10      	ldr	r3, [pc, #64]	; (8004cc4 <MX_TIM6_Init+0x64>)
 8004c84:	f241 726f 	movw	r2, #5999	; 0x176f
 8004c88:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c8a:	4b0e      	ldr	r3, [pc, #56]	; (8004cc4 <MX_TIM6_Init+0x64>)
 8004c8c:	2280      	movs	r2, #128	; 0x80
 8004c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004c90:	480c      	ldr	r0, [pc, #48]	; (8004cc4 <MX_TIM6_Init+0x64>)
 8004c92:	f006 ff8a 	bl	800bbaa <HAL_TIM_Base_Init>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004c9c:	f7ff f914 	bl	8003ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004ca8:	1d3b      	adds	r3, r7, #4
 8004caa:	4619      	mov	r1, r3
 8004cac:	4805      	ldr	r0, [pc, #20]	; (8004cc4 <MX_TIM6_Init+0x64>)
 8004cae:	f008 f971 	bl	800cf94 <HAL_TIMEx_MasterConfigSynchronization>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004cb8:	f7ff f906 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004cbc:	bf00      	nop
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	24000d1c 	.word	0x24000d1c
 8004cc8:	40001000 	.word	0x40001000

08004ccc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cd2:	1d3b      	adds	r3, r7, #4
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	605a      	str	r2, [r3, #4]
 8004cda:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004cdc:	4b14      	ldr	r3, [pc, #80]	; (8004d30 <MX_TIM7_Init+0x64>)
 8004cde:	4a15      	ldr	r2, [pc, #84]	; (8004d34 <MX_TIM7_Init+0x68>)
 8004ce0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8004ce2:	4b13      	ldr	r3, [pc, #76]	; (8004d30 <MX_TIM7_Init+0x64>)
 8004ce4:	22c7      	movs	r2, #199	; 0xc7
 8004ce6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ce8:	4b11      	ldr	r3, [pc, #68]	; (8004d30 <MX_TIM7_Init+0x64>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8004cee:	4b10      	ldr	r3, [pc, #64]	; (8004d30 <MX_TIM7_Init+0x64>)
 8004cf0:	f240 42af 	movw	r2, #1199	; 0x4af
 8004cf4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004cf6:	4b0e      	ldr	r3, [pc, #56]	; (8004d30 <MX_TIM7_Init+0x64>)
 8004cf8:	2280      	movs	r2, #128	; 0x80
 8004cfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004cfc:	480c      	ldr	r0, [pc, #48]	; (8004d30 <MX_TIM7_Init+0x64>)
 8004cfe:	f006 ff54 	bl	800bbaa <HAL_TIM_Base_Init>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004d08:	f7ff f8de 	bl	8003ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d10:	2300      	movs	r3, #0
 8004d12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004d14:	1d3b      	adds	r3, r7, #4
 8004d16:	4619      	mov	r1, r3
 8004d18:	4805      	ldr	r0, [pc, #20]	; (8004d30 <MX_TIM7_Init+0x64>)
 8004d1a:	f008 f93b 	bl	800cf94 <HAL_TIMEx_MasterConfigSynchronization>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004d24:	f7ff f8d0 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004d28:	bf00      	nop
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	24000ee4 	.word	0x24000ee4
 8004d34:	40001400 	.word	0x40001400

08004d38 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d3e:	463b      	mov	r3, r7
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	605a      	str	r2, [r3, #4]
 8004d46:	609a      	str	r2, [r3, #8]
 8004d48:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004d4a:	4b16      	ldr	r3, [pc, #88]	; (8004da4 <MX_TIM12_Init+0x6c>)
 8004d4c:	4a16      	ldr	r2, [pc, #88]	; (8004da8 <MX_TIM12_Init+0x70>)
 8004d4e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8004d50:	4b14      	ldr	r3, [pc, #80]	; (8004da4 <MX_TIM12_Init+0x6c>)
 8004d52:	22c7      	movs	r2, #199	; 0xc7
 8004d54:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d56:	4b13      	ldr	r3, [pc, #76]	; (8004da4 <MX_TIM12_Init+0x6c>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8004d5c:	4b11      	ldr	r3, [pc, #68]	; (8004da4 <MX_TIM12_Init+0x6c>)
 8004d5e:	f240 2257 	movw	r2, #599	; 0x257
 8004d62:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d64:	4b0f      	ldr	r3, [pc, #60]	; (8004da4 <MX_TIM12_Init+0x6c>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d6a:	4b0e      	ldr	r3, [pc, #56]	; (8004da4 <MX_TIM12_Init+0x6c>)
 8004d6c:	2280      	movs	r2, #128	; 0x80
 8004d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8004d70:	480c      	ldr	r0, [pc, #48]	; (8004da4 <MX_TIM12_Init+0x6c>)
 8004d72:	f006 ff1a 	bl	800bbaa <HAL_TIM_Base_Init>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8004d7c:	f7ff f8a4 	bl	8003ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d84:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004d86:	463b      	mov	r3, r7
 8004d88:	4619      	mov	r1, r3
 8004d8a:	4806      	ldr	r0, [pc, #24]	; (8004da4 <MX_TIM12_Init+0x6c>)
 8004d8c:	f007 fbae 	bl	800c4ec <HAL_TIM_ConfigClockSource>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8004d96:	f7ff f897 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8004d9a:	bf00      	nop
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	24000e4c 	.word	0x24000e4c
 8004da8:	40001800 	.word	0x40001800

08004dac <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004db0:	4b0e      	ldr	r3, [pc, #56]	; (8004dec <MX_TIM13_Init+0x40>)
 8004db2:	4a0f      	ldr	r2, [pc, #60]	; (8004df0 <MX_TIM13_Init+0x44>)
 8004db4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 8004db6:	4b0d      	ldr	r3, [pc, #52]	; (8004dec <MX_TIM13_Init+0x40>)
 8004db8:	22c7      	movs	r2, #199	; 0xc7
 8004dba:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dbc:	4b0b      	ldr	r3, [pc, #44]	; (8004dec <MX_TIM13_Init+0x40>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <MX_TIM13_Init+0x40>)
 8004dc4:	f240 2257 	movw	r2, #599	; 0x257
 8004dc8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dca:	4b08      	ldr	r3, [pc, #32]	; (8004dec <MX_TIM13_Init+0x40>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004dd0:	4b06      	ldr	r3, [pc, #24]	; (8004dec <MX_TIM13_Init+0x40>)
 8004dd2:	2280      	movs	r2, #128	; 0x80
 8004dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004dd6:	4805      	ldr	r0, [pc, #20]	; (8004dec <MX_TIM13_Init+0x40>)
 8004dd8:	f006 fee7 	bl	800bbaa <HAL_TIM_Base_Init>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8004de2:	f7ff f871 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004de6:	bf00      	nop
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	24000cd0 	.word	0x24000cd0
 8004df0:	40001c00 	.word	0x40001c00

08004df4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004df8:	4b0e      	ldr	r3, [pc, #56]	; (8004e34 <MX_TIM14_Init+0x40>)
 8004dfa:	4a0f      	ldr	r2, [pc, #60]	; (8004e38 <MX_TIM14_Init+0x44>)
 8004dfc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <MX_TIM14_Init+0x40>)
 8004e00:	22c7      	movs	r2, #199	; 0xc7
 8004e02:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e04:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <MX_TIM14_Init+0x40>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 8004e0a:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <MX_TIM14_Init+0x40>)
 8004e0c:	f640 125f 	movw	r2, #2399	; 0x95f
 8004e10:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e12:	4b08      	ldr	r3, [pc, #32]	; (8004e34 <MX_TIM14_Init+0x40>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e18:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <MX_TIM14_Init+0x40>)
 8004e1a:	2280      	movs	r2, #128	; 0x80
 8004e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004e1e:	4805      	ldr	r0, [pc, #20]	; (8004e34 <MX_TIM14_Init+0x40>)
 8004e20:	f006 fec3 	bl	800bbaa <HAL_TIM_Base_Init>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8004e2a:	f7ff f84d 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004e2e:	bf00      	nop
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	24000e00 	.word	0x24000e00
 8004e38:	40002000 	.word	0x40002000

08004e3c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b09a      	sub	sp, #104	; 0x68
 8004e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	605a      	str	r2, [r3, #4]
 8004e4c:	609a      	str	r2, [r3, #8]
 8004e4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	605a      	str	r2, [r3, #4]
 8004e5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	605a      	str	r2, [r3, #4]
 8004e66:	609a      	str	r2, [r3, #8]
 8004e68:	60da      	str	r2, [r3, #12]
 8004e6a:	611a      	str	r2, [r3, #16]
 8004e6c:	615a      	str	r2, [r3, #20]
 8004e6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004e70:	1d3b      	adds	r3, r7, #4
 8004e72:	222c      	movs	r2, #44	; 0x2c
 8004e74:	2100      	movs	r1, #0
 8004e76:	4618      	mov	r0, r3
 8004e78:	f00b fd2a 	bl	80108d0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004e7c:	4b3f      	ldr	r3, [pc, #252]	; (8004f7c <MX_TIM15_Init+0x140>)
 8004e7e:	4a40      	ldr	r2, [pc, #256]	; (8004f80 <MX_TIM15_Init+0x144>)
 8004e80:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8004e82:	4b3e      	ldr	r3, [pc, #248]	; (8004f7c <MX_TIM15_Init+0x140>)
 8004e84:	22ef      	movs	r2, #239	; 0xef
 8004e86:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e88:	4b3c      	ldr	r3, [pc, #240]	; (8004f7c <MX_TIM15_Init+0x140>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8004e8e:	4b3b      	ldr	r3, [pc, #236]	; (8004f7c <MX_TIM15_Init+0x140>)
 8004e90:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004e94:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e96:	4b39      	ldr	r3, [pc, #228]	; (8004f7c <MX_TIM15_Init+0x140>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004e9c:	4b37      	ldr	r3, [pc, #220]	; (8004f7c <MX_TIM15_Init+0x140>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ea2:	4b36      	ldr	r3, [pc, #216]	; (8004f7c <MX_TIM15_Init+0x140>)
 8004ea4:	2280      	movs	r2, #128	; 0x80
 8004ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004ea8:	4834      	ldr	r0, [pc, #208]	; (8004f7c <MX_TIM15_Init+0x140>)
 8004eaa:	f006 fe7e 	bl	800bbaa <HAL_TIM_Base_Init>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8004eb4:	f7ff f808 	bl	8003ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ebc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004ebe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	482d      	ldr	r0, [pc, #180]	; (8004f7c <MX_TIM15_Init+0x140>)
 8004ec6:	f007 fb11 	bl	800c4ec <HAL_TIM_ConfigClockSource>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8004ed0:	f7fe fffa 	bl	8003ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8004ed4:	4829      	ldr	r0, [pc, #164]	; (8004f7c <MX_TIM15_Init+0x140>)
 8004ed6:	f006 ff66 	bl	800bda6 <HAL_TIM_PWM_Init>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8004ee0:	f7fe fff2 	bl	8003ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004eec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4822      	ldr	r0, [pc, #136]	; (8004f7c <MX_TIM15_Init+0x140>)
 8004ef4:	f008 f84e 	bl	800cf94 <HAL_TIMEx_MasterConfigSynchronization>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8004efe:	f7fe ffe3 	bl	8003ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f02:	2360      	movs	r3, #96	; 0x60
 8004f04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8004f06:	f240 1339 	movw	r3, #313	; 0x139
 8004f0a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004f10:	2300      	movs	r3, #0
 8004f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f14:	2300      	movs	r3, #0
 8004f16:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004f20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f24:	2204      	movs	r2, #4
 8004f26:	4619      	mov	r1, r3
 8004f28:	4814      	ldr	r0, [pc, #80]	; (8004f7c <MX_TIM15_Init+0x140>)
 8004f2a:	f007 f9cb 	bl	800c2c4 <HAL_TIM_PWM_ConfigChannel>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8004f34:	f7fe ffc8 	bl	8003ec8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004f4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004f52:	2300      	movs	r3, #0
 8004f54:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004f56:	2300      	movs	r3, #0
 8004f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004f5a:	1d3b      	adds	r3, r7, #4
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4807      	ldr	r0, [pc, #28]	; (8004f7c <MX_TIM15_Init+0x140>)
 8004f60:	f008 f8a6 	bl	800d0b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8004f6a:	f7fe ffad 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8004f6e:	4803      	ldr	r0, [pc, #12]	; (8004f7c <MX_TIM15_Init+0x140>)
 8004f70:	f000 f982 	bl	8005278 <HAL_TIM_MspPostInit>

}
 8004f74:	bf00      	nop
 8004f76:	3768      	adds	r7, #104	; 0x68
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	24000bec 	.word	0x24000bec
 8004f80:	40014000 	.word	0x40014000

08004f84 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004f88:	4b0f      	ldr	r3, [pc, #60]	; (8004fc8 <MX_TIM16_Init+0x44>)
 8004f8a:	4a10      	ldr	r2, [pc, #64]	; (8004fcc <MX_TIM16_Init+0x48>)
 8004f8c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 240-1;
 8004f8e:	4b0e      	ldr	r3, [pc, #56]	; (8004fc8 <MX_TIM16_Init+0x44>)
 8004f90:	22ef      	movs	r2, #239	; 0xef
 8004f92:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f94:	4b0c      	ldr	r3, [pc, #48]	; (8004fc8 <MX_TIM16_Init+0x44>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8004f9a:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <MX_TIM16_Init+0x44>)
 8004f9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004fa0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fa2:	4b09      	ldr	r3, [pc, #36]	; (8004fc8 <MX_TIM16_Init+0x44>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004fa8:	4b07      	ldr	r3, [pc, #28]	; (8004fc8 <MX_TIM16_Init+0x44>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004fae:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <MX_TIM16_Init+0x44>)
 8004fb0:	2280      	movs	r2, #128	; 0x80
 8004fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004fb4:	4804      	ldr	r0, [pc, #16]	; (8004fc8 <MX_TIM16_Init+0x44>)
 8004fb6:	f006 fdf8 	bl	800bbaa <HAL_TIM_Base_Init>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8004fc0:	f7fe ff82 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004fc4:	bf00      	nop
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	24000e98 	.word	0x24000e98
 8004fcc:	40014400 	.word	0x40014400

08004fd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08e      	sub	sp, #56	; 0x38
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a9a      	ldr	r2, [pc, #616]	; (8005248 <HAL_TIM_Base_MspInit+0x278>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d10f      	bne.n	8005002 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fe2:	4b9a      	ldr	r3, [pc, #616]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 8004fe4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fe8:	4a98      	ldr	r2, [pc, #608]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 8004fea:	f043 0301 	orr.w	r3, r3, #1
 8004fee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004ff2:	4b96      	ldr	r3, [pc, #600]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 8004ff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8005000:	e11d      	b.n	800523e <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM2)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500a:	d10f      	bne.n	800502c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800500c:	4b8f      	ldr	r3, [pc, #572]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 800500e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005012:	4a8e      	ldr	r2, [pc, #568]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 8005014:	f043 0301 	orr.w	r3, r3, #1
 8005018:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800501c:	4b8b      	ldr	r3, [pc, #556]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 800501e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	633b      	str	r3, [r7, #48]	; 0x30
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800502a:	e108      	b.n	800523e <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM3)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a87      	ldr	r2, [pc, #540]	; (8005250 <HAL_TIM_Base_MspInit+0x280>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d10f      	bne.n	8005056 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005036:	4b85      	ldr	r3, [pc, #532]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 8005038:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800503c:	4a83      	ldr	r2, [pc, #524]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 800503e:	f043 0302 	orr.w	r3, r3, #2
 8005042:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005046:	4b81      	ldr	r3, [pc, #516]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 8005048:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005054:	e0f3      	b.n	800523e <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM4)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a7e      	ldr	r2, [pc, #504]	; (8005254 <HAL_TIM_Base_MspInit+0x284>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d10f      	bne.n	8005080 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005060:	4b7a      	ldr	r3, [pc, #488]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 8005062:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005066:	4a79      	ldr	r2, [pc, #484]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 8005068:	f043 0304 	orr.w	r3, r3, #4
 800506c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005070:	4b76      	ldr	r3, [pc, #472]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 8005072:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	62bb      	str	r3, [r7, #40]	; 0x28
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800507e:	e0de      	b.n	800523e <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM5)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a74      	ldr	r2, [pc, #464]	; (8005258 <HAL_TIM_Base_MspInit+0x288>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d117      	bne.n	80050ba <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800508a:	4b70      	ldr	r3, [pc, #448]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 800508c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005090:	4a6e      	ldr	r2, [pc, #440]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 8005092:	f043 0308 	orr.w	r3, r3, #8
 8005096:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800509a:	4b6c      	ldr	r3, [pc, #432]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 800509c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050a0:	f003 0308 	and.w	r3, r3, #8
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80050a8:	2200      	movs	r2, #0
 80050aa:	2100      	movs	r1, #0
 80050ac:	2032      	movs	r0, #50	; 0x32
 80050ae:	f000 feaa 	bl	8005e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80050b2:	2032      	movs	r0, #50	; 0x32
 80050b4:	f000 fec1 	bl	8005e3a <HAL_NVIC_EnableIRQ>
}
 80050b8:	e0c1      	b.n	800523e <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM6)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a67      	ldr	r2, [pc, #412]	; (800525c <HAL_TIM_Base_MspInit+0x28c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d117      	bne.n	80050f4 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80050c4:	4b61      	ldr	r3, [pc, #388]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 80050c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050ca:	4a60      	ldr	r2, [pc, #384]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 80050cc:	f043 0310 	orr.w	r3, r3, #16
 80050d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80050d4:	4b5d      	ldr	r3, [pc, #372]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 80050d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050da:	f003 0310 	and.w	r3, r3, #16
 80050de:	623b      	str	r3, [r7, #32]
 80050e0:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80050e2:	2200      	movs	r2, #0
 80050e4:	2100      	movs	r1, #0
 80050e6:	2036      	movs	r0, #54	; 0x36
 80050e8:	f000 fe8d 	bl	8005e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80050ec:	2036      	movs	r0, #54	; 0x36
 80050ee:	f000 fea4 	bl	8005e3a <HAL_NVIC_EnableIRQ>
}
 80050f2:	e0a4      	b.n	800523e <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM7)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a59      	ldr	r2, [pc, #356]	; (8005260 <HAL_TIM_Base_MspInit+0x290>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d117      	bne.n	800512e <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80050fe:	4b53      	ldr	r3, [pc, #332]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 8005100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005104:	4a51      	ldr	r2, [pc, #324]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 8005106:	f043 0320 	orr.w	r3, r3, #32
 800510a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800510e:	4b4f      	ldr	r3, [pc, #316]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 8005110:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005114:	f003 0320 	and.w	r3, r3, #32
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800511c:	2200      	movs	r2, #0
 800511e:	2100      	movs	r1, #0
 8005120:	2037      	movs	r0, #55	; 0x37
 8005122:	f000 fe70 	bl	8005e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005126:	2037      	movs	r0, #55	; 0x37
 8005128:	f000 fe87 	bl	8005e3a <HAL_NVIC_EnableIRQ>
}
 800512c:	e087      	b.n	800523e <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM12)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a4c      	ldr	r2, [pc, #304]	; (8005264 <HAL_TIM_Base_MspInit+0x294>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d117      	bne.n	8005168 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8005138:	4b44      	ldr	r3, [pc, #272]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 800513a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800513e:	4a43      	ldr	r2, [pc, #268]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 8005140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005144:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005148:	4b40      	ldr	r3, [pc, #256]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 800514a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800514e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005152:	61bb      	str	r3, [r7, #24]
 8005154:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005156:	2200      	movs	r2, #0
 8005158:	2100      	movs	r1, #0
 800515a:	202b      	movs	r0, #43	; 0x2b
 800515c:	f000 fe53 	bl	8005e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005160:	202b      	movs	r0, #43	; 0x2b
 8005162:	f000 fe6a 	bl	8005e3a <HAL_NVIC_EnableIRQ>
}
 8005166:	e06a      	b.n	800523e <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM13)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a3e      	ldr	r2, [pc, #248]	; (8005268 <HAL_TIM_Base_MspInit+0x298>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d117      	bne.n	80051a2 <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005172:	4b36      	ldr	r3, [pc, #216]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 8005174:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005178:	4a34      	ldr	r2, [pc, #208]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 800517a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800517e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005182:	4b32      	ldr	r3, [pc, #200]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 8005184:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005190:	2200      	movs	r2, #0
 8005192:	2100      	movs	r1, #0
 8005194:	202c      	movs	r0, #44	; 0x2c
 8005196:	f000 fe36 	bl	8005e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800519a:	202c      	movs	r0, #44	; 0x2c
 800519c:	f000 fe4d 	bl	8005e3a <HAL_NVIC_EnableIRQ>
}
 80051a0:	e04d      	b.n	800523e <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM14)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a31      	ldr	r2, [pc, #196]	; (800526c <HAL_TIM_Base_MspInit+0x29c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d117      	bne.n	80051dc <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80051ac:	4b27      	ldr	r3, [pc, #156]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 80051ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051b2:	4a26      	ldr	r2, [pc, #152]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 80051b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051bc:	4b23      	ldr	r3, [pc, #140]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 80051be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80051ca:	2200      	movs	r2, #0
 80051cc:	2100      	movs	r1, #0
 80051ce:	202d      	movs	r0, #45	; 0x2d
 80051d0:	f000 fe19 	bl	8005e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80051d4:	202d      	movs	r0, #45	; 0x2d
 80051d6:	f000 fe30 	bl	8005e3a <HAL_NVIC_EnableIRQ>
}
 80051da:	e030      	b.n	800523e <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM15)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a23      	ldr	r2, [pc, #140]	; (8005270 <HAL_TIM_Base_MspInit+0x2a0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d10f      	bne.n	8005206 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80051e6:	4b19      	ldr	r3, [pc, #100]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 80051e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051ec:	4a17      	ldr	r2, [pc, #92]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 80051ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80051f6:	4b15      	ldr	r3, [pc, #84]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 80051f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	68fb      	ldr	r3, [r7, #12]
}
 8005204:	e01b      	b.n	800523e <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM16)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a1a      	ldr	r2, [pc, #104]	; (8005274 <HAL_TIM_Base_MspInit+0x2a4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d116      	bne.n	800523e <HAL_TIM_Base_MspInit+0x26e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005210:	4b0e      	ldr	r3, [pc, #56]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 8005212:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005216:	4a0d      	ldr	r2, [pc, #52]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 8005218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800521c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005220:	4b0a      	ldr	r3, [pc, #40]	; (800524c <HAL_TIM_Base_MspInit+0x27c>)
 8005222:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522a:	60bb      	str	r3, [r7, #8]
 800522c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800522e:	2200      	movs	r2, #0
 8005230:	2100      	movs	r1, #0
 8005232:	2075      	movs	r0, #117	; 0x75
 8005234:	f000 fde7 	bl	8005e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005238:	2075      	movs	r0, #117	; 0x75
 800523a:	f000 fdfe 	bl	8005e3a <HAL_NVIC_EnableIRQ>
}
 800523e:	bf00      	nop
 8005240:	3738      	adds	r7, #56	; 0x38
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	40010000 	.word	0x40010000
 800524c:	58024400 	.word	0x58024400
 8005250:	40000400 	.word	0x40000400
 8005254:	40000800 	.word	0x40000800
 8005258:	40000c00 	.word	0x40000c00
 800525c:	40001000 	.word	0x40001000
 8005260:	40001400 	.word	0x40001400
 8005264:	40001800 	.word	0x40001800
 8005268:	40001c00 	.word	0x40001c00
 800526c:	40002000 	.word	0x40002000
 8005270:	40014000 	.word	0x40014000
 8005274:	40014400 	.word	0x40014400

08005278 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08c      	sub	sp, #48	; 0x30
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005280:	f107 031c 	add.w	r3, r7, #28
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	605a      	str	r2, [r3, #4]
 800528a:	609a      	str	r2, [r3, #8]
 800528c:	60da      	str	r2, [r3, #12]
 800528e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a5e      	ldr	r2, [pc, #376]	; (8005410 <HAL_TIM_MspPostInit+0x198>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d120      	bne.n	80052dc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800529a:	4b5e      	ldr	r3, [pc, #376]	; (8005414 <HAL_TIM_MspPostInit+0x19c>)
 800529c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052a0:	4a5c      	ldr	r2, [pc, #368]	; (8005414 <HAL_TIM_MspPostInit+0x19c>)
 80052a2:	f043 0310 	orr.w	r3, r3, #16
 80052a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052aa:	4b5a      	ldr	r3, [pc, #360]	; (8005414 <HAL_TIM_MspPostInit+0x19c>)
 80052ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052b0:	f003 0310 	and.w	r3, r3, #16
 80052b4:	61bb      	str	r3, [r7, #24]
 80052b6:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 80052b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80052bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052be:	2302      	movs	r3, #2
 80052c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052c6:	2300      	movs	r3, #0
 80052c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80052ca:	2301      	movs	r3, #1
 80052cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 80052ce:	f107 031c 	add.w	r3, r7, #28
 80052d2:	4619      	mov	r1, r3
 80052d4:	4850      	ldr	r0, [pc, #320]	; (8005418 <HAL_TIM_MspPostInit+0x1a0>)
 80052d6:	f003 fe0f 	bl	8008ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80052da:	e094      	b.n	8005406 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e4:	d120      	bne.n	8005328 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052e6:	4b4b      	ldr	r3, [pc, #300]	; (8005414 <HAL_TIM_MspPostInit+0x19c>)
 80052e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052ec:	4a49      	ldr	r2, [pc, #292]	; (8005414 <HAL_TIM_MspPostInit+0x19c>)
 80052ee:	f043 0302 	orr.w	r3, r3, #2
 80052f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052f6:	4b47      	ldr	r3, [pc, #284]	; (8005414 <HAL_TIM_MspPostInit+0x19c>)
 80052f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8005304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800530a:	2302      	movs	r3, #2
 800530c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800530e:	2300      	movs	r3, #0
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005312:	2300      	movs	r3, #0
 8005314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005316:	2301      	movs	r3, #1
 8005318:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 800531a:	f107 031c 	add.w	r3, r7, #28
 800531e:	4619      	mov	r1, r3
 8005320:	483e      	ldr	r0, [pc, #248]	; (800541c <HAL_TIM_MspPostInit+0x1a4>)
 8005322:	f003 fde9 	bl	8008ef8 <HAL_GPIO_Init>
}
 8005326:	e06e      	b.n	8005406 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a3c      	ldr	r2, [pc, #240]	; (8005420 <HAL_TIM_MspPostInit+0x1a8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d11f      	bne.n	8005372 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005332:	4b38      	ldr	r3, [pc, #224]	; (8005414 <HAL_TIM_MspPostInit+0x19c>)
 8005334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005338:	4a36      	ldr	r2, [pc, #216]	; (8005414 <HAL_TIM_MspPostInit+0x19c>)
 800533a:	f043 0301 	orr.w	r3, r3, #1
 800533e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005342:	4b34      	ldr	r3, [pc, #208]	; (8005414 <HAL_TIM_MspPostInit+0x19c>)
 8005344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8005350:	2340      	movs	r3, #64	; 0x40
 8005352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005354:	2302      	movs	r3, #2
 8005356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005358:	2300      	movs	r3, #0
 800535a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800535c:	2300      	movs	r3, #0
 800535e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005360:	2302      	movs	r3, #2
 8005362:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8005364:	f107 031c 	add.w	r3, r7, #28
 8005368:	4619      	mov	r1, r3
 800536a:	482e      	ldr	r0, [pc, #184]	; (8005424 <HAL_TIM_MspPostInit+0x1ac>)
 800536c:	f003 fdc4 	bl	8008ef8 <HAL_GPIO_Init>
}
 8005370:	e049      	b.n	8005406 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a2c      	ldr	r2, [pc, #176]	; (8005428 <HAL_TIM_MspPostInit+0x1b0>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d120      	bne.n	80053be <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800537c:	4b25      	ldr	r3, [pc, #148]	; (8005414 <HAL_TIM_MspPostInit+0x19c>)
 800537e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005382:	4a24      	ldr	r2, [pc, #144]	; (8005414 <HAL_TIM_MspPostInit+0x19c>)
 8005384:	f043 0302 	orr.w	r3, r3, #2
 8005388:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800538c:	4b21      	ldr	r3, [pc, #132]	; (8005414 <HAL_TIM_MspPostInit+0x19c>)
 800538e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 800539a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800539e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a0:	2302      	movs	r3, #2
 80053a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a4:	2300      	movs	r3, #0
 80053a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053a8:	2300      	movs	r3, #0
 80053aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80053ac:	2302      	movs	r3, #2
 80053ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 80053b0:	f107 031c 	add.w	r3, r7, #28
 80053b4:	4619      	mov	r1, r3
 80053b6:	4819      	ldr	r0, [pc, #100]	; (800541c <HAL_TIM_MspPostInit+0x1a4>)
 80053b8:	f003 fd9e 	bl	8008ef8 <HAL_GPIO_Init>
}
 80053bc:	e023      	b.n	8005406 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1a      	ldr	r2, [pc, #104]	; (800542c <HAL_TIM_MspPostInit+0x1b4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d11e      	bne.n	8005406 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80053c8:	4b12      	ldr	r3, [pc, #72]	; (8005414 <HAL_TIM_MspPostInit+0x19c>)
 80053ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053ce:	4a11      	ldr	r2, [pc, #68]	; (8005414 <HAL_TIM_MspPostInit+0x19c>)
 80053d0:	f043 0310 	orr.w	r3, r3, #16
 80053d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053d8:	4b0e      	ldr	r3, [pc, #56]	; (8005414 <HAL_TIM_MspPostInit+0x19c>)
 80053da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053de:	f003 0310 	and.w	r3, r3, #16
 80053e2:	60bb      	str	r3, [r7, #8]
 80053e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 80053e6:	2340      	movs	r3, #64	; 0x40
 80053e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ea:	2302      	movs	r3, #2
 80053ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053f2:	2300      	movs	r3, #0
 80053f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80053f6:	2304      	movs	r3, #4
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 80053fa:	f107 031c 	add.w	r3, r7, #28
 80053fe:	4619      	mov	r1, r3
 8005400:	4805      	ldr	r0, [pc, #20]	; (8005418 <HAL_TIM_MspPostInit+0x1a0>)
 8005402:	f003 fd79 	bl	8008ef8 <HAL_GPIO_Init>
}
 8005406:	bf00      	nop
 8005408:	3730      	adds	r7, #48	; 0x30
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40010000 	.word	0x40010000
 8005414:	58024400 	.word	0x58024400
 8005418:	58021000 	.word	0x58021000
 800541c:	58020400 	.word	0x58020400
 8005420:	40000400 	.word	0x40000400
 8005424:	58020000 	.word	0x58020000
 8005428:	40000800 	.word	0x40000800
 800542c:	40014000 	.word	0x40014000

08005430 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005434:	4b25      	ldr	r3, [pc, #148]	; (80054cc <MX_UART4_Init+0x9c>)
 8005436:	4a26      	ldr	r2, [pc, #152]	; (80054d0 <MX_UART4_Init+0xa0>)
 8005438:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 800543a:	4b24      	ldr	r3, [pc, #144]	; (80054cc <MX_UART4_Init+0x9c>)
 800543c:	4a25      	ldr	r2, [pc, #148]	; (80054d4 <MX_UART4_Init+0xa4>)
 800543e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005440:	4b22      	ldr	r3, [pc, #136]	; (80054cc <MX_UART4_Init+0x9c>)
 8005442:	2200      	movs	r2, #0
 8005444:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005446:	4b21      	ldr	r3, [pc, #132]	; (80054cc <MX_UART4_Init+0x9c>)
 8005448:	2200      	movs	r2, #0
 800544a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800544c:	4b1f      	ldr	r3, [pc, #124]	; (80054cc <MX_UART4_Init+0x9c>)
 800544e:	2200      	movs	r2, #0
 8005450:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005452:	4b1e      	ldr	r3, [pc, #120]	; (80054cc <MX_UART4_Init+0x9c>)
 8005454:	220c      	movs	r2, #12
 8005456:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005458:	4b1c      	ldr	r3, [pc, #112]	; (80054cc <MX_UART4_Init+0x9c>)
 800545a:	2200      	movs	r2, #0
 800545c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800545e:	4b1b      	ldr	r3, [pc, #108]	; (80054cc <MX_UART4_Init+0x9c>)
 8005460:	2200      	movs	r2, #0
 8005462:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005464:	4b19      	ldr	r3, [pc, #100]	; (80054cc <MX_UART4_Init+0x9c>)
 8005466:	2200      	movs	r2, #0
 8005468:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800546a:	4b18      	ldr	r3, [pc, #96]	; (80054cc <MX_UART4_Init+0x9c>)
 800546c:	2200      	movs	r2, #0
 800546e:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005470:	4b16      	ldr	r3, [pc, #88]	; (80054cc <MX_UART4_Init+0x9c>)
 8005472:	2208      	movs	r2, #8
 8005474:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005476:	4b15      	ldr	r3, [pc, #84]	; (80054cc <MX_UART4_Init+0x9c>)
 8005478:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800547c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800547e:	4813      	ldr	r0, [pc, #76]	; (80054cc <MX_UART4_Init+0x9c>)
 8005480:	f007 feb2 	bl	800d1e8 <HAL_UART_Init>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 800548a:	f7fe fd1d 	bl	8003ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800548e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005492:	480e      	ldr	r0, [pc, #56]	; (80054cc <MX_UART4_Init+0x9c>)
 8005494:	f009 ff39 	bl	800f30a <HAL_UARTEx_SetTxFifoThreshold>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <MX_UART4_Init+0x72>
  {
    Error_Handler();
 800549e:	f7fe fd13 	bl	8003ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80054a2:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 80054a6:	4809      	ldr	r0, [pc, #36]	; (80054cc <MX_UART4_Init+0x9c>)
 80054a8:	f009 ff6d 	bl	800f386 <HAL_UARTEx_SetRxFifoThreshold>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <MX_UART4_Init+0x86>
  {
    Error_Handler();
 80054b2:	f7fe fd09 	bl	8003ec8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 80054b6:	4805      	ldr	r0, [pc, #20]	; (80054cc <MX_UART4_Init+0x9c>)
 80054b8:	f009 feb3 	bl	800f222 <HAL_UARTEx_EnableFifoMode>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <MX_UART4_Init+0x96>
  {
    Error_Handler();
 80054c2:	f7fe fd01 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80054c6:	bf00      	nop
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	24001230 	.word	0x24001230
 80054d0:	40004c00 	.word	0x40004c00
 80054d4:	001e8480 	.word	0x001e8480

080054d8 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80054dc:	4b23      	ldr	r3, [pc, #140]	; (800556c <MX_UART7_Init+0x94>)
 80054de:	4a24      	ldr	r2, [pc, #144]	; (8005570 <MX_UART7_Init+0x98>)
 80054e0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80054e2:	4b22      	ldr	r3, [pc, #136]	; (800556c <MX_UART7_Init+0x94>)
 80054e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80054e8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80054ea:	4b20      	ldr	r3, [pc, #128]	; (800556c <MX_UART7_Init+0x94>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80054f0:	4b1e      	ldr	r3, [pc, #120]	; (800556c <MX_UART7_Init+0x94>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80054f6:	4b1d      	ldr	r3, [pc, #116]	; (800556c <MX_UART7_Init+0x94>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80054fc:	4b1b      	ldr	r3, [pc, #108]	; (800556c <MX_UART7_Init+0x94>)
 80054fe:	220c      	movs	r2, #12
 8005500:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005502:	4b1a      	ldr	r3, [pc, #104]	; (800556c <MX_UART7_Init+0x94>)
 8005504:	2200      	movs	r2, #0
 8005506:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8005508:	4b18      	ldr	r3, [pc, #96]	; (800556c <MX_UART7_Init+0x94>)
 800550a:	2200      	movs	r2, #0
 800550c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800550e:	4b17      	ldr	r3, [pc, #92]	; (800556c <MX_UART7_Init+0x94>)
 8005510:	2200      	movs	r2, #0
 8005512:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005514:	4b15      	ldr	r3, [pc, #84]	; (800556c <MX_UART7_Init+0x94>)
 8005516:	2200      	movs	r2, #0
 8005518:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800551a:	4b14      	ldr	r3, [pc, #80]	; (800556c <MX_UART7_Init+0x94>)
 800551c:	2200      	movs	r2, #0
 800551e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8005520:	4812      	ldr	r0, [pc, #72]	; (800556c <MX_UART7_Init+0x94>)
 8005522:	f007 fe61 	bl	800d1e8 <HAL_UART_Init>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 800552c:	f7fe fccc 	bl	8003ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005530:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005534:	480d      	ldr	r0, [pc, #52]	; (800556c <MX_UART7_Init+0x94>)
 8005536:	f009 fee8 	bl	800f30a <HAL_UARTEx_SetTxFifoThreshold>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8005540:	f7fe fcc2 	bl	8003ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005544:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8005548:	4808      	ldr	r0, [pc, #32]	; (800556c <MX_UART7_Init+0x94>)
 800554a:	f009 ff1c 	bl	800f386 <HAL_UARTEx_SetRxFifoThreshold>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d001      	beq.n	8005558 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 8005554:	f7fe fcb8 	bl	8003ec8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8005558:	4804      	ldr	r0, [pc, #16]	; (800556c <MX_UART7_Init+0x94>)
 800555a:	f009 fe62 	bl	800f222 <HAL_UARTEx_EnableFifoMode>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 8005564:	f7fe fcb0 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8005568:	bf00      	nop
 800556a:	bd80      	pop	{r7, pc}
 800556c:	24000fa8 	.word	0x24000fa8
 8005570:	40007800 	.word	0x40007800

08005574 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005578:	4b22      	ldr	r3, [pc, #136]	; (8005604 <MX_USART3_UART_Init+0x90>)
 800557a:	4a23      	ldr	r2, [pc, #140]	; (8005608 <MX_USART3_UART_Init+0x94>)
 800557c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800557e:	4b21      	ldr	r3, [pc, #132]	; (8005604 <MX_USART3_UART_Init+0x90>)
 8005580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005584:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005586:	4b1f      	ldr	r3, [pc, #124]	; (8005604 <MX_USART3_UART_Init+0x90>)
 8005588:	2200      	movs	r2, #0
 800558a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800558c:	4b1d      	ldr	r3, [pc, #116]	; (8005604 <MX_USART3_UART_Init+0x90>)
 800558e:	2200      	movs	r2, #0
 8005590:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005592:	4b1c      	ldr	r3, [pc, #112]	; (8005604 <MX_USART3_UART_Init+0x90>)
 8005594:	2200      	movs	r2, #0
 8005596:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005598:	4b1a      	ldr	r3, [pc, #104]	; (8005604 <MX_USART3_UART_Init+0x90>)
 800559a:	220c      	movs	r2, #12
 800559c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800559e:	4b19      	ldr	r3, [pc, #100]	; (8005604 <MX_USART3_UART_Init+0x90>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80055a4:	4b17      	ldr	r3, [pc, #92]	; (8005604 <MX_USART3_UART_Init+0x90>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80055aa:	4b16      	ldr	r3, [pc, #88]	; (8005604 <MX_USART3_UART_Init+0x90>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80055b0:	4b14      	ldr	r3, [pc, #80]	; (8005604 <MX_USART3_UART_Init+0x90>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80055b6:	4b13      	ldr	r3, [pc, #76]	; (8005604 <MX_USART3_UART_Init+0x90>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80055bc:	4811      	ldr	r0, [pc, #68]	; (8005604 <MX_USART3_UART_Init+0x90>)
 80055be:	f007 fe13 	bl	800d1e8 <HAL_UART_Init>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80055c8:	f7fe fc7e 	bl	8003ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055cc:	2100      	movs	r1, #0
 80055ce:	480d      	ldr	r0, [pc, #52]	; (8005604 <MX_USART3_UART_Init+0x90>)
 80055d0:	f009 fe9b 	bl	800f30a <HAL_UARTEx_SetTxFifoThreshold>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80055da:	f7fe fc75 	bl	8003ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055de:	2100      	movs	r1, #0
 80055e0:	4808      	ldr	r0, [pc, #32]	; (8005604 <MX_USART3_UART_Init+0x90>)
 80055e2:	f009 fed0 	bl	800f386 <HAL_UARTEx_SetRxFifoThreshold>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80055ec:	f7fe fc6c 	bl	8003ec8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80055f0:	4804      	ldr	r0, [pc, #16]	; (8005604 <MX_USART3_UART_Init+0x90>)
 80055f2:	f009 fe51 	bl	800f298 <HAL_UARTEx_DisableFifoMode>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80055fc:	f7fe fc64 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005600:	bf00      	nop
 8005602:	bd80      	pop	{r7, pc}
 8005604:	240010b0 	.word	0x240010b0
 8005608:	40004800 	.word	0x40004800

0800560c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b0bc      	sub	sp, #240	; 0xf0
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005614:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	605a      	str	r2, [r3, #4]
 800561e:	609a      	str	r2, [r3, #8]
 8005620:	60da      	str	r2, [r3, #12]
 8005622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005624:	f107 0320 	add.w	r3, r7, #32
 8005628:	22bc      	movs	r2, #188	; 0xbc
 800562a:	2100      	movs	r1, #0
 800562c:	4618      	mov	r0, r3
 800562e:	f00b f94f 	bl	80108d0 <memset>
  if(uartHandle->Instance==UART4)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4aa1      	ldr	r2, [pc, #644]	; (80058bc <HAL_UART_MspInit+0x2b0>)
 8005638:	4293      	cmp	r3, r2
 800563a:	f040 80b7 	bne.w	80057ac <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800563e:	2302      	movs	r3, #2
 8005640:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005642:	2300      	movs	r3, #0
 8005644:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005648:	f107 0320 	add.w	r3, r7, #32
 800564c:	4618      	mov	r0, r3
 800564e:	f004 fe29 	bl	800a2a4 <HAL_RCCEx_PeriphCLKConfig>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005658:	f7fe fc36 	bl	8003ec8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800565c:	4b98      	ldr	r3, [pc, #608]	; (80058c0 <HAL_UART_MspInit+0x2b4>)
 800565e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005662:	4a97      	ldr	r2, [pc, #604]	; (80058c0 <HAL_UART_MspInit+0x2b4>)
 8005664:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005668:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800566c:	4b94      	ldr	r3, [pc, #592]	; (80058c0 <HAL_UART_MspInit+0x2b4>)
 800566e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005672:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005676:	61fb      	str	r3, [r7, #28]
 8005678:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800567a:	4b91      	ldr	r3, [pc, #580]	; (80058c0 <HAL_UART_MspInit+0x2b4>)
 800567c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005680:	4a8f      	ldr	r2, [pc, #572]	; (80058c0 <HAL_UART_MspInit+0x2b4>)
 8005682:	f043 0308 	orr.w	r3, r3, #8
 8005686:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800568a:	4b8d      	ldr	r3, [pc, #564]	; (80058c0 <HAL_UART_MspInit+0x2b4>)
 800568c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005690:	f003 0308 	and.w	r3, r3, #8
 8005694:	61bb      	str	r3, [r7, #24]
 8005696:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005698:	2303      	movs	r3, #3
 800569a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800569e:	2302      	movs	r3, #2
 80056a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a4:	2300      	movs	r3, #0
 80056a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056aa:	2300      	movs	r3, #0
 80056ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80056b0:	2308      	movs	r3, #8
 80056b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056b6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80056ba:	4619      	mov	r1, r3
 80056bc:	4881      	ldr	r0, [pc, #516]	; (80058c4 <HAL_UART_MspInit+0x2b8>)
 80056be:	f003 fc1b 	bl	8008ef8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 80056c2:	4b81      	ldr	r3, [pc, #516]	; (80058c8 <HAL_UART_MspInit+0x2bc>)
 80056c4:	4a81      	ldr	r2, [pc, #516]	; (80058cc <HAL_UART_MspInit+0x2c0>)
 80056c6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80056c8:	4b7f      	ldr	r3, [pc, #508]	; (80058c8 <HAL_UART_MspInit+0x2bc>)
 80056ca:	223f      	movs	r2, #63	; 0x3f
 80056cc:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056ce:	4b7e      	ldr	r3, [pc, #504]	; (80058c8 <HAL_UART_MspInit+0x2bc>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056d4:	4b7c      	ldr	r3, [pc, #496]	; (80058c8 <HAL_UART_MspInit+0x2bc>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80056da:	4b7b      	ldr	r3, [pc, #492]	; (80058c8 <HAL_UART_MspInit+0x2bc>)
 80056dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056e0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056e2:	4b79      	ldr	r3, [pc, #484]	; (80058c8 <HAL_UART_MspInit+0x2bc>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056e8:	4b77      	ldr	r3, [pc, #476]	; (80058c8 <HAL_UART_MspInit+0x2bc>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80056ee:	4b76      	ldr	r3, [pc, #472]	; (80058c8 <HAL_UART_MspInit+0x2bc>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80056f4:	4b74      	ldr	r3, [pc, #464]	; (80058c8 <HAL_UART_MspInit+0x2bc>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80056fa:	4b73      	ldr	r3, [pc, #460]	; (80058c8 <HAL_UART_MspInit+0x2bc>)
 80056fc:	2204      	movs	r2, #4
 80056fe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005700:	4b71      	ldr	r3, [pc, #452]	; (80058c8 <HAL_UART_MspInit+0x2bc>)
 8005702:	2203      	movs	r2, #3
 8005704:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005706:	4b70      	ldr	r3, [pc, #448]	; (80058c8 <HAL_UART_MspInit+0x2bc>)
 8005708:	2200      	movs	r2, #0
 800570a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800570c:	4b6e      	ldr	r3, [pc, #440]	; (80058c8 <HAL_UART_MspInit+0x2bc>)
 800570e:	2200      	movs	r2, #0
 8005710:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8005712:	486d      	ldr	r0, [pc, #436]	; (80058c8 <HAL_UART_MspInit+0x2bc>)
 8005714:	f000 fdb6 	bl	8006284 <HAL_DMA_Init>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 800571e:	f7fe fbd3 	bl	8003ec8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a68      	ldr	r2, [pc, #416]	; (80058c8 <HAL_UART_MspInit+0x2bc>)
 8005726:	67da      	str	r2, [r3, #124]	; 0x7c
 8005728:	4a67      	ldr	r2, [pc, #412]	; (80058c8 <HAL_UART_MspInit+0x2bc>)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800572e:	4b68      	ldr	r3, [pc, #416]	; (80058d0 <HAL_UART_MspInit+0x2c4>)
 8005730:	4a68      	ldr	r2, [pc, #416]	; (80058d4 <HAL_UART_MspInit+0x2c8>)
 8005732:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8005734:	4b66      	ldr	r3, [pc, #408]	; (80058d0 <HAL_UART_MspInit+0x2c4>)
 8005736:	2240      	movs	r2, #64	; 0x40
 8005738:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800573a:	4b65      	ldr	r3, [pc, #404]	; (80058d0 <HAL_UART_MspInit+0x2c4>)
 800573c:	2240      	movs	r2, #64	; 0x40
 800573e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005740:	4b63      	ldr	r3, [pc, #396]	; (80058d0 <HAL_UART_MspInit+0x2c4>)
 8005742:	2200      	movs	r2, #0
 8005744:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005746:	4b62      	ldr	r3, [pc, #392]	; (80058d0 <HAL_UART_MspInit+0x2c4>)
 8005748:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800574c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800574e:	4b60      	ldr	r3, [pc, #384]	; (80058d0 <HAL_UART_MspInit+0x2c4>)
 8005750:	2200      	movs	r2, #0
 8005752:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005754:	4b5e      	ldr	r3, [pc, #376]	; (80058d0 <HAL_UART_MspInit+0x2c4>)
 8005756:	2200      	movs	r2, #0
 8005758:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800575a:	4b5d      	ldr	r3, [pc, #372]	; (80058d0 <HAL_UART_MspInit+0x2c4>)
 800575c:	2200      	movs	r2, #0
 800575e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005760:	4b5b      	ldr	r3, [pc, #364]	; (80058d0 <HAL_UART_MspInit+0x2c4>)
 8005762:	2200      	movs	r2, #0
 8005764:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005766:	4b5a      	ldr	r3, [pc, #360]	; (80058d0 <HAL_UART_MspInit+0x2c4>)
 8005768:	2204      	movs	r2, #4
 800576a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800576c:	4b58      	ldr	r3, [pc, #352]	; (80058d0 <HAL_UART_MspInit+0x2c4>)
 800576e:	2203      	movs	r2, #3
 8005770:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005772:	4b57      	ldr	r3, [pc, #348]	; (80058d0 <HAL_UART_MspInit+0x2c4>)
 8005774:	2200      	movs	r2, #0
 8005776:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005778:	4b55      	ldr	r3, [pc, #340]	; (80058d0 <HAL_UART_MspInit+0x2c4>)
 800577a:	2200      	movs	r2, #0
 800577c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800577e:	4854      	ldr	r0, [pc, #336]	; (80058d0 <HAL_UART_MspInit+0x2c4>)
 8005780:	f000 fd80 	bl	8006284 <HAL_DMA_Init>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 800578a:	f7fe fb9d 	bl	8003ec8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a4f      	ldr	r2, [pc, #316]	; (80058d0 <HAL_UART_MspInit+0x2c4>)
 8005792:	679a      	str	r2, [r3, #120]	; 0x78
 8005794:	4a4e      	ldr	r2, [pc, #312]	; (80058d0 <HAL_UART_MspInit+0x2c4>)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800579a:	2200      	movs	r2, #0
 800579c:	2100      	movs	r1, #0
 800579e:	2034      	movs	r0, #52	; 0x34
 80057a0:	f000 fb31 	bl	8005e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80057a4:	2034      	movs	r0, #52	; 0x34
 80057a6:	f000 fb48 	bl	8005e3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80057aa:	e153      	b.n	8005a54 <HAL_UART_MspInit+0x448>
  else if(uartHandle->Instance==UART7)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a49      	ldr	r2, [pc, #292]	; (80058d8 <HAL_UART_MspInit+0x2cc>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	f040 8098 	bne.w	80058e8 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80057b8:	2302      	movs	r3, #2
 80057ba:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80057bc:	2300      	movs	r3, #0
 80057be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80057c2:	f107 0320 	add.w	r3, r7, #32
 80057c6:	4618      	mov	r0, r3
 80057c8:	f004 fd6c 	bl	800a2a4 <HAL_RCCEx_PeriphCLKConfig>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 80057d2:	f7fe fb79 	bl	8003ec8 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80057d6:	4b3a      	ldr	r3, [pc, #232]	; (80058c0 <HAL_UART_MspInit+0x2b4>)
 80057d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057dc:	4a38      	ldr	r2, [pc, #224]	; (80058c0 <HAL_UART_MspInit+0x2b4>)
 80057de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80057e6:	4b36      	ldr	r3, [pc, #216]	; (80058c0 <HAL_UART_MspInit+0x2b4>)
 80057e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80057f0:	617b      	str	r3, [r7, #20]
 80057f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80057f4:	4b32      	ldr	r3, [pc, #200]	; (80058c0 <HAL_UART_MspInit+0x2b4>)
 80057f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057fa:	4a31      	ldr	r2, [pc, #196]	; (80058c0 <HAL_UART_MspInit+0x2b4>)
 80057fc:	f043 0310 	orr.w	r3, r3, #16
 8005800:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005804:	4b2e      	ldr	r3, [pc, #184]	; (80058c0 <HAL_UART_MspInit+0x2b4>)
 8005806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800580a:	f003 0310 	and.w	r3, r3, #16
 800580e:	613b      	str	r3, [r7, #16]
 8005810:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8005812:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005816:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800581a:	2302      	movs	r3, #2
 800581c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005820:	2300      	movs	r3, #0
 8005822:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005826:	2300      	movs	r3, #0
 8005828:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800582c:	2307      	movs	r3, #7
 800582e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005832:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005836:	4619      	mov	r1, r3
 8005838:	4828      	ldr	r0, [pc, #160]	; (80058dc <HAL_UART_MspInit+0x2d0>)
 800583a:	f003 fb5d 	bl	8008ef8 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 800583e:	4b28      	ldr	r3, [pc, #160]	; (80058e0 <HAL_UART_MspInit+0x2d4>)
 8005840:	4a28      	ldr	r2, [pc, #160]	; (80058e4 <HAL_UART_MspInit+0x2d8>)
 8005842:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8005844:	4b26      	ldr	r3, [pc, #152]	; (80058e0 <HAL_UART_MspInit+0x2d4>)
 8005846:	2250      	movs	r2, #80	; 0x50
 8005848:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800584a:	4b25      	ldr	r3, [pc, #148]	; (80058e0 <HAL_UART_MspInit+0x2d4>)
 800584c:	2240      	movs	r2, #64	; 0x40
 800584e:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005850:	4b23      	ldr	r3, [pc, #140]	; (80058e0 <HAL_UART_MspInit+0x2d4>)
 8005852:	2200      	movs	r2, #0
 8005854:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005856:	4b22      	ldr	r3, [pc, #136]	; (80058e0 <HAL_UART_MspInit+0x2d4>)
 8005858:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800585c:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800585e:	4b20      	ldr	r3, [pc, #128]	; (80058e0 <HAL_UART_MspInit+0x2d4>)
 8005860:	2200      	movs	r2, #0
 8005862:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005864:	4b1e      	ldr	r3, [pc, #120]	; (80058e0 <HAL_UART_MspInit+0x2d4>)
 8005866:	2200      	movs	r2, #0
 8005868:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 800586a:	4b1d      	ldr	r3, [pc, #116]	; (80058e0 <HAL_UART_MspInit+0x2d4>)
 800586c:	2200      	movs	r2, #0
 800586e:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005870:	4b1b      	ldr	r3, [pc, #108]	; (80058e0 <HAL_UART_MspInit+0x2d4>)
 8005872:	2200      	movs	r2, #0
 8005874:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005876:	4b1a      	ldr	r3, [pc, #104]	; (80058e0 <HAL_UART_MspInit+0x2d4>)
 8005878:	2204      	movs	r2, #4
 800587a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800587c:	4b18      	ldr	r3, [pc, #96]	; (80058e0 <HAL_UART_MspInit+0x2d4>)
 800587e:	2203      	movs	r2, #3
 8005880:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005882:	4b17      	ldr	r3, [pc, #92]	; (80058e0 <HAL_UART_MspInit+0x2d4>)
 8005884:	2200      	movs	r2, #0
 8005886:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005888:	4b15      	ldr	r3, [pc, #84]	; (80058e0 <HAL_UART_MspInit+0x2d4>)
 800588a:	2200      	movs	r2, #0
 800588c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 800588e:	4814      	ldr	r0, [pc, #80]	; (80058e0 <HAL_UART_MspInit+0x2d4>)
 8005890:	f000 fcf8 	bl	8006284 <HAL_DMA_Init>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <HAL_UART_MspInit+0x292>
      Error_Handler();
 800589a:	f7fe fb15 	bl	8003ec8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a0f      	ldr	r2, [pc, #60]	; (80058e0 <HAL_UART_MspInit+0x2d4>)
 80058a2:	679a      	str	r2, [r3, #120]	; 0x78
 80058a4:	4a0e      	ldr	r2, [pc, #56]	; (80058e0 <HAL_UART_MspInit+0x2d4>)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80058aa:	2200      	movs	r2, #0
 80058ac:	2100      	movs	r1, #0
 80058ae:	2052      	movs	r0, #82	; 0x52
 80058b0:	f000 faa9 	bl	8005e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80058b4:	2052      	movs	r0, #82	; 0x52
 80058b6:	f000 fac0 	bl	8005e3a <HAL_NVIC_EnableIRQ>
}
 80058ba:	e0cb      	b.n	8005a54 <HAL_UART_MspInit+0x448>
 80058bc:	40004c00 	.word	0x40004c00
 80058c0:	58024400 	.word	0x58024400
 80058c4:	58020c00 	.word	0x58020c00
 80058c8:	24000f30 	.word	0x24000f30
 80058cc:	40020058 	.word	0x40020058
 80058d0:	240012c0 	.word	0x240012c0
 80058d4:	40020070 	.word	0x40020070
 80058d8:	40007800 	.word	0x40007800
 80058dc:	58021000 	.word	0x58021000
 80058e0:	240011b8 	.word	0x240011b8
 80058e4:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a5b      	ldr	r2, [pc, #364]	; (8005a5c <HAL_UART_MspInit+0x450>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	f040 80b0 	bne.w	8005a54 <HAL_UART_MspInit+0x448>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80058f4:	2302      	movs	r3, #2
 80058f6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80058f8:	2300      	movs	r3, #0
 80058fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80058fe:	f107 0320 	add.w	r3, r7, #32
 8005902:	4618      	mov	r0, r3
 8005904:	f004 fcce 	bl	800a2a4 <HAL_RCCEx_PeriphCLKConfig>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <HAL_UART_MspInit+0x306>
      Error_Handler();
 800590e:	f7fe fadb 	bl	8003ec8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005912:	4b53      	ldr	r3, [pc, #332]	; (8005a60 <HAL_UART_MspInit+0x454>)
 8005914:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005918:	4a51      	ldr	r2, [pc, #324]	; (8005a60 <HAL_UART_MspInit+0x454>)
 800591a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800591e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005922:	4b4f      	ldr	r3, [pc, #316]	; (8005a60 <HAL_UART_MspInit+0x454>)
 8005924:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005928:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800592c:	60fb      	str	r3, [r7, #12]
 800592e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005930:	4b4b      	ldr	r3, [pc, #300]	; (8005a60 <HAL_UART_MspInit+0x454>)
 8005932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005936:	4a4a      	ldr	r2, [pc, #296]	; (8005a60 <HAL_UART_MspInit+0x454>)
 8005938:	f043 0308 	orr.w	r3, r3, #8
 800593c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005940:	4b47      	ldr	r3, [pc, #284]	; (8005a60 <HAL_UART_MspInit+0x454>)
 8005942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	60bb      	str	r3, [r7, #8]
 800594c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800594e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005952:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005956:	2302      	movs	r3, #2
 8005958:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800595c:	2300      	movs	r3, #0
 800595e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005962:	2300      	movs	r3, #0
 8005964:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005968:	2307      	movs	r3, #7
 800596a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800596e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005972:	4619      	mov	r1, r3
 8005974:	483b      	ldr	r0, [pc, #236]	; (8005a64 <HAL_UART_MspInit+0x458>)
 8005976:	f003 fabf 	bl	8008ef8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800597a:	4b3b      	ldr	r3, [pc, #236]	; (8005a68 <HAL_UART_MspInit+0x45c>)
 800597c:	4a3b      	ldr	r2, [pc, #236]	; (8005a6c <HAL_UART_MspInit+0x460>)
 800597e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005980:	4b39      	ldr	r3, [pc, #228]	; (8005a68 <HAL_UART_MspInit+0x45c>)
 8005982:	222d      	movs	r2, #45	; 0x2d
 8005984:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005986:	4b38      	ldr	r3, [pc, #224]	; (8005a68 <HAL_UART_MspInit+0x45c>)
 8005988:	2200      	movs	r2, #0
 800598a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800598c:	4b36      	ldr	r3, [pc, #216]	; (8005a68 <HAL_UART_MspInit+0x45c>)
 800598e:	2200      	movs	r2, #0
 8005990:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005992:	4b35      	ldr	r3, [pc, #212]	; (8005a68 <HAL_UART_MspInit+0x45c>)
 8005994:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005998:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800599a:	4b33      	ldr	r3, [pc, #204]	; (8005a68 <HAL_UART_MspInit+0x45c>)
 800599c:	2200      	movs	r2, #0
 800599e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80059a0:	4b31      	ldr	r3, [pc, #196]	; (8005a68 <HAL_UART_MspInit+0x45c>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80059a6:	4b30      	ldr	r3, [pc, #192]	; (8005a68 <HAL_UART_MspInit+0x45c>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80059ac:	4b2e      	ldr	r3, [pc, #184]	; (8005a68 <HAL_UART_MspInit+0x45c>)
 80059ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80059b2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80059b4:	4b2c      	ldr	r3, [pc, #176]	; (8005a68 <HAL_UART_MspInit+0x45c>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80059ba:	482b      	ldr	r0, [pc, #172]	; (8005a68 <HAL_UART_MspInit+0x45c>)
 80059bc:	f000 fc62 	bl	8006284 <HAL_DMA_Init>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <HAL_UART_MspInit+0x3be>
      Error_Handler();
 80059c6:	f7fe fa7f 	bl	8003ec8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a26      	ldr	r2, [pc, #152]	; (8005a68 <HAL_UART_MspInit+0x45c>)
 80059ce:	67da      	str	r2, [r3, #124]	; 0x7c
 80059d0:	4a25      	ldr	r2, [pc, #148]	; (8005a68 <HAL_UART_MspInit+0x45c>)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 80059d6:	4b26      	ldr	r3, [pc, #152]	; (8005a70 <HAL_UART_MspInit+0x464>)
 80059d8:	4a26      	ldr	r2, [pc, #152]	; (8005a74 <HAL_UART_MspInit+0x468>)
 80059da:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80059dc:	4b24      	ldr	r3, [pc, #144]	; (8005a70 <HAL_UART_MspInit+0x464>)
 80059de:	222e      	movs	r2, #46	; 0x2e
 80059e0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80059e2:	4b23      	ldr	r3, [pc, #140]	; (8005a70 <HAL_UART_MspInit+0x464>)
 80059e4:	2240      	movs	r2, #64	; 0x40
 80059e6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059e8:	4b21      	ldr	r3, [pc, #132]	; (8005a70 <HAL_UART_MspInit+0x464>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80059ee:	4b20      	ldr	r3, [pc, #128]	; (8005a70 <HAL_UART_MspInit+0x464>)
 80059f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059f4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80059f6:	4b1e      	ldr	r3, [pc, #120]	; (8005a70 <HAL_UART_MspInit+0x464>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80059fc:	4b1c      	ldr	r3, [pc, #112]	; (8005a70 <HAL_UART_MspInit+0x464>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005a02:	4b1b      	ldr	r3, [pc, #108]	; (8005a70 <HAL_UART_MspInit+0x464>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005a08:	4b19      	ldr	r3, [pc, #100]	; (8005a70 <HAL_UART_MspInit+0x464>)
 8005a0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005a0e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005a10:	4b17      	ldr	r3, [pc, #92]	; (8005a70 <HAL_UART_MspInit+0x464>)
 8005a12:	2204      	movs	r2, #4
 8005a14:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005a16:	4b16      	ldr	r3, [pc, #88]	; (8005a70 <HAL_UART_MspInit+0x464>)
 8005a18:	2203      	movs	r2, #3
 8005a1a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005a1c:	4b14      	ldr	r3, [pc, #80]	; (8005a70 <HAL_UART_MspInit+0x464>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005a22:	4b13      	ldr	r3, [pc, #76]	; (8005a70 <HAL_UART_MspInit+0x464>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005a28:	4811      	ldr	r0, [pc, #68]	; (8005a70 <HAL_UART_MspInit+0x464>)
 8005a2a:	f000 fc2b 	bl	8006284 <HAL_DMA_Init>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8005a34:	f7fe fa48 	bl	8003ec8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a0d      	ldr	r2, [pc, #52]	; (8005a70 <HAL_UART_MspInit+0x464>)
 8005a3c:	679a      	str	r2, [r3, #120]	; 0x78
 8005a3e:	4a0c      	ldr	r2, [pc, #48]	; (8005a70 <HAL_UART_MspInit+0x464>)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005a44:	2200      	movs	r2, #0
 8005a46:	2100      	movs	r1, #0
 8005a48:	2027      	movs	r0, #39	; 0x27
 8005a4a:	f000 f9dc 	bl	8005e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005a4e:	2027      	movs	r0, #39	; 0x27
 8005a50:	f000 f9f3 	bl	8005e3a <HAL_NVIC_EnableIRQ>
}
 8005a54:	bf00      	nop
 8005a56:	37f0      	adds	r7, #240	; 0xf0
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	40004800 	.word	0x40004800
 8005a60:	58024400 	.word	0x58024400
 8005a64:	58020c00 	.word	0x58020c00
 8005a68:	24001038 	.word	0x24001038
 8005a6c:	40020028 	.word	0x40020028
 8005a70:	24001140 	.word	0x24001140
 8005a74:	40020040 	.word	0x40020040

08005a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 8005a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005ab0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005a7c:	f7fe fe00 	bl	8004680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005a80:	480c      	ldr	r0, [pc, #48]	; (8005ab4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005a82:	490d      	ldr	r1, [pc, #52]	; (8005ab8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005a84:	4a0d      	ldr	r2, [pc, #52]	; (8005abc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a88:	e002      	b.n	8005a90 <LoopCopyDataInit>

08005a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a8e:	3304      	adds	r3, #4

08005a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a94:	d3f9      	bcc.n	8005a8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a96:	4a0a      	ldr	r2, [pc, #40]	; (8005ac0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005a98:	4c0a      	ldr	r4, [pc, #40]	; (8005ac4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a9c:	e001      	b.n	8005aa2 <LoopFillZerobss>

08005a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005aa0:	3204      	adds	r2, #4

08005aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005aa4:	d3fb      	bcc.n	8005a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005aa6:	f00a feef 	bl	8010888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005aaa:	f7fd ff31 	bl	8003910 <main>
  bx  lr
 8005aae:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8005ab0:	24001950 	.word	0x24001950
  ldr r0, =_sdata
 8005ab4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005ab8:	240001f4 	.word	0x240001f4
  ldr r2, =_sidata
 8005abc:	0801506c 	.word	0x0801506c
  ldr r2, =_sbss
 8005ac0:	240001f4 	.word	0x240001f4
  ldr r4, =_ebss
 8005ac4:	2400134c 	.word	0x2400134c

08005ac8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ac8:	e7fe      	b.n	8005ac8 <ADC3_IRQHandler>
	...

08005acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ad2:	2003      	movs	r0, #3
 8005ad4:	f000 f98c 	bl	8005df0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ad8:	f004 fa0e 	bl	8009ef8 <HAL_RCC_GetSysClockFreq>
 8005adc:	4602      	mov	r2, r0
 8005ade:	4b15      	ldr	r3, [pc, #84]	; (8005b34 <HAL_Init+0x68>)
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	0a1b      	lsrs	r3, r3, #8
 8005ae4:	f003 030f 	and.w	r3, r3, #15
 8005ae8:	4913      	ldr	r1, [pc, #76]	; (8005b38 <HAL_Init+0x6c>)
 8005aea:	5ccb      	ldrb	r3, [r1, r3]
 8005aec:	f003 031f 	and.w	r3, r3, #31
 8005af0:	fa22 f303 	lsr.w	r3, r2, r3
 8005af4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005af6:	4b0f      	ldr	r3, [pc, #60]	; (8005b34 <HAL_Init+0x68>)
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	f003 030f 	and.w	r3, r3, #15
 8005afe:	4a0e      	ldr	r2, [pc, #56]	; (8005b38 <HAL_Init+0x6c>)
 8005b00:	5cd3      	ldrb	r3, [r2, r3]
 8005b02:	f003 031f 	and.w	r3, r3, #31
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0c:	4a0b      	ldr	r2, [pc, #44]	; (8005b3c <HAL_Init+0x70>)
 8005b0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b10:	4a0b      	ldr	r2, [pc, #44]	; (8005b40 <HAL_Init+0x74>)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005b16:	2000      	movs	r0, #0
 8005b18:	f000 f814 	bl	8005b44 <HAL_InitTick>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e002      	b.n	8005b2c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005b26:	f7fe fbeb 	bl	8004300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	58024400 	.word	0x58024400
 8005b38:	080131a0 	.word	0x080131a0
 8005b3c:	24000018 	.word	0x24000018
 8005b40:	24000014 	.word	0x24000014

08005b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005b4c:	4b15      	ldr	r3, [pc, #84]	; (8005ba4 <HAL_InitTick+0x60>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e021      	b.n	8005b9c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005b58:	4b13      	ldr	r3, [pc, #76]	; (8005ba8 <HAL_InitTick+0x64>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	4b11      	ldr	r3, [pc, #68]	; (8005ba4 <HAL_InitTick+0x60>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	4619      	mov	r1, r3
 8005b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 f971 	bl	8005e56 <HAL_SYSTICK_Config>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e00e      	b.n	8005b9c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b0f      	cmp	r3, #15
 8005b82:	d80a      	bhi.n	8005b9a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b84:	2200      	movs	r2, #0
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8c:	f000 f93b 	bl	8005e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b90:	4a06      	ldr	r2, [pc, #24]	; (8005bac <HAL_InitTick+0x68>)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	e000      	b.n	8005b9c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	24000020 	.word	0x24000020
 8005ba8:	24000014 	.word	0x24000014
 8005bac:	2400001c 	.word	0x2400001c

08005bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005bb4:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <HAL_IncTick+0x20>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	4b06      	ldr	r3, [pc, #24]	; (8005bd4 <HAL_IncTick+0x24>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	4a04      	ldr	r2, [pc, #16]	; (8005bd4 <HAL_IncTick+0x24>)
 8005bc2:	6013      	str	r3, [r2, #0]
}
 8005bc4:	bf00      	nop
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	24000020 	.word	0x24000020
 8005bd4:	24001338 	.word	0x24001338

08005bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	af00      	add	r7, sp, #0
  return uwTick;
 8005bdc:	4b03      	ldr	r3, [pc, #12]	; (8005bec <HAL_GetTick+0x14>)
 8005bde:	681b      	ldr	r3, [r3, #0]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	24001338 	.word	0x24001338

08005bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005bf8:	f7ff ffee 	bl	8005bd8 <HAL_GetTick>
 8005bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c08:	d005      	beq.n	8005c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c0a:	4b0a      	ldr	r3, [pc, #40]	; (8005c34 <HAL_Delay+0x44>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4413      	add	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c16:	bf00      	nop
 8005c18:	f7ff ffde 	bl	8005bd8 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d8f7      	bhi.n	8005c18 <HAL_Delay+0x28>
  {
  }
}
 8005c28:	bf00      	nop
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	24000020 	.word	0x24000020

08005c38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005c3c:	4b03      	ldr	r3, [pc, #12]	; (8005c4c <HAL_GetREVID+0x14>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	0c1b      	lsrs	r3, r3, #16
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	5c001000 	.word	0x5c001000

08005c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f003 0307 	and.w	r3, r3, #7
 8005c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c60:	4b0b      	ldr	r3, [pc, #44]	; (8005c90 <__NVIC_SetPriorityGrouping+0x40>)
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005c78:	4b06      	ldr	r3, [pc, #24]	; (8005c94 <__NVIC_SetPriorityGrouping+0x44>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c7e:	4a04      	ldr	r2, [pc, #16]	; (8005c90 <__NVIC_SetPriorityGrouping+0x40>)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	60d3      	str	r3, [r2, #12]
}
 8005c84:	bf00      	nop
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	e000ed00 	.word	0xe000ed00
 8005c94:	05fa0000 	.word	0x05fa0000

08005c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c9c:	4b04      	ldr	r3, [pc, #16]	; (8005cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	0a1b      	lsrs	r3, r3, #8
 8005ca2:	f003 0307 	and.w	r3, r3, #7
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	e000ed00 	.word	0xe000ed00

08005cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	4603      	mov	r3, r0
 8005cbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	db0b      	blt.n	8005cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cc6:	88fb      	ldrh	r3, [r7, #6]
 8005cc8:	f003 021f 	and.w	r2, r3, #31
 8005ccc:	4907      	ldr	r1, [pc, #28]	; (8005cec <__NVIC_EnableIRQ+0x38>)
 8005cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	2001      	movs	r0, #1
 8005cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8005cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005cde:	bf00      	nop
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	e000e100 	.word	0xe000e100

08005cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	6039      	str	r1, [r7, #0]
 8005cfa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005cfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	db0a      	blt.n	8005d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	490c      	ldr	r1, [pc, #48]	; (8005d3c <__NVIC_SetPriority+0x4c>)
 8005d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d0e:	0112      	lsls	r2, r2, #4
 8005d10:	b2d2      	uxtb	r2, r2
 8005d12:	440b      	add	r3, r1
 8005d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d18:	e00a      	b.n	8005d30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	4908      	ldr	r1, [pc, #32]	; (8005d40 <__NVIC_SetPriority+0x50>)
 8005d20:	88fb      	ldrh	r3, [r7, #6]
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	3b04      	subs	r3, #4
 8005d28:	0112      	lsls	r2, r2, #4
 8005d2a:	b2d2      	uxtb	r2, r2
 8005d2c:	440b      	add	r3, r1
 8005d2e:	761a      	strb	r2, [r3, #24]
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	e000e100 	.word	0xe000e100
 8005d40:	e000ed00 	.word	0xe000ed00

08005d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b089      	sub	sp, #36	; 0x24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	f1c3 0307 	rsb	r3, r3, #7
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	bf28      	it	cs
 8005d62:	2304      	movcs	r3, #4
 8005d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	3304      	adds	r3, #4
 8005d6a:	2b06      	cmp	r3, #6
 8005d6c:	d902      	bls.n	8005d74 <NVIC_EncodePriority+0x30>
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	3b03      	subs	r3, #3
 8005d72:	e000      	b.n	8005d76 <NVIC_EncodePriority+0x32>
 8005d74:	2300      	movs	r3, #0
 8005d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d78:	f04f 32ff 	mov.w	r2, #4294967295
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d82:	43da      	mvns	r2, r3
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	401a      	ands	r2, r3
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	fa01 f303 	lsl.w	r3, r1, r3
 8005d96:	43d9      	mvns	r1, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d9c:	4313      	orrs	r3, r2
         );
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3724      	adds	r7, #36	; 0x24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
	...

08005dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dbc:	d301      	bcc.n	8005dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e00f      	b.n	8005de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005dc2:	4a0a      	ldr	r2, [pc, #40]	; (8005dec <SysTick_Config+0x40>)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005dca:	210f      	movs	r1, #15
 8005dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd0:	f7ff ff8e 	bl	8005cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005dd4:	4b05      	ldr	r3, [pc, #20]	; (8005dec <SysTick_Config+0x40>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dda:	4b04      	ldr	r3, [pc, #16]	; (8005dec <SysTick_Config+0x40>)
 8005ddc:	2207      	movs	r2, #7
 8005dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	e000e010 	.word	0xe000e010

08005df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7ff ff29 	bl	8005c50 <__NVIC_SetPriorityGrouping>
}
 8005dfe:	bf00      	nop
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b086      	sub	sp, #24
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	607a      	str	r2, [r7, #4]
 8005e12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e14:	f7ff ff40 	bl	8005c98 <__NVIC_GetPriorityGrouping>
 8005e18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	68b9      	ldr	r1, [r7, #8]
 8005e1e:	6978      	ldr	r0, [r7, #20]
 8005e20:	f7ff ff90 	bl	8005d44 <NVIC_EncodePriority>
 8005e24:	4602      	mov	r2, r0
 8005e26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff ff5f 	bl	8005cf0 <__NVIC_SetPriority>
}
 8005e32:	bf00      	nop
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b082      	sub	sp, #8
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	4603      	mov	r3, r0
 8005e42:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7ff ff33 	bl	8005cb4 <__NVIC_EnableIRQ>
}
 8005e4e:	bf00      	nop
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b082      	sub	sp, #8
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff ffa4 	bl	8005dac <SysTick_Config>
 8005e64:	4603      	mov	r3, r0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8005e72:	f000 f802 	bl	8005e7a <HAL_SYSTICK_Callback>
}
 8005e76:	bf00      	nop
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005e7e:	bf00      	nop
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e054      	b.n	8005f44 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	7f5b      	ldrb	r3, [r3, #29]
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d105      	bne.n	8005eb0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7fc f9de 	bl	800226c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	791b      	ldrb	r3, [r3, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10c      	bne.n	8005ed8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a22      	ldr	r2, [pc, #136]	; (8005f4c <HAL_CRC_Init+0xc4>)
 8005ec4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0218 	bic.w	r2, r2, #24
 8005ed4:	609a      	str	r2, [r3, #8]
 8005ed6:	e00c      	b.n	8005ef2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6899      	ldr	r1, [r3, #8]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f948 	bl	8006178 <HAL_CRCEx_Polynomial_Set>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e028      	b.n	8005f44 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	795b      	ldrb	r3, [r3, #5]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d105      	bne.n	8005f06 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f04f 32ff 	mov.w	r2, #4294967295
 8005f02:	611a      	str	r2, [r3, #16]
 8005f04:	e004      	b.n	8005f10 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6912      	ldr	r2, [r2, #16]
 8005f0e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	695a      	ldr	r2, [r3, #20]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	699a      	ldr	r2, [r3, #24]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	04c11db7 	.word	0x04c11db7

08005f50 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2202      	movs	r2, #2
 8005f64:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f042 0201 	orr.w	r2, r2, #1
 8005f74:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d006      	beq.n	8005f8c <HAL_CRC_Calculate+0x3c>
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d829      	bhi.n	8005fd6 <HAL_CRC_Calculate+0x86>
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d019      	beq.n	8005fba <HAL_CRC_Calculate+0x6a>
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d01e      	beq.n	8005fc8 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8005f8a:	e024      	b.n	8005fd6 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	e00a      	b.n	8005fa8 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	441a      	add	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6812      	ldr	r2, [r2, #0]
 8005fa0:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	617b      	str	r3, [r7, #20]
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d3f0      	bcc.n	8005f92 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	613b      	str	r3, [r7, #16]
      break;
 8005fb8:	e00e      	b.n	8005fd8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	68b9      	ldr	r1, [r7, #8]
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 f812 	bl	8005fe8 <CRC_Handle_8>
 8005fc4:	6138      	str	r0, [r7, #16]
      break;
 8005fc6:	e007      	b.n	8005fd8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	68b9      	ldr	r1, [r7, #8]
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 f899 	bl	8006104 <CRC_Handle_16>
 8005fd2:	6138      	str	r0, [r7, #16]
      break;
 8005fd4:	e000      	b.n	8005fd8 <HAL_CRC_Calculate+0x88>
      break;
 8005fd6:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8005fde:	693b      	ldr	r3, [r7, #16]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b089      	sub	sp, #36	; 0x24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	61fb      	str	r3, [r7, #28]
 8005ff8:	e023      	b.n	8006042 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	4413      	add	r3, r2
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	3301      	adds	r3, #1
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	440b      	add	r3, r1
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006014:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	3302      	adds	r3, #2
 800601c:	68b9      	ldr	r1, [r7, #8]
 800601e:	440b      	add	r3, r1
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8006024:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	3303      	adds	r3, #3
 800602c:	68b9      	ldr	r1, [r7, #8]
 800602e:	440b      	add	r3, r1
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006038:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800603a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	3301      	adds	r3, #1
 8006040:	61fb      	str	r3, [r7, #28]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	089b      	lsrs	r3, r3, #2
 8006046:	69fa      	ldr	r2, [r7, #28]
 8006048:	429a      	cmp	r2, r3
 800604a:	d3d6      	bcc.n	8005ffa <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f003 0303 	and.w	r3, r3, #3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d04d      	beq.n	80060f2 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f003 0303 	and.w	r3, r3, #3
 800605c:	2b01      	cmp	r3, #1
 800605e:	d107      	bne.n	8006070 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	4413      	add	r3, r2
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	6812      	ldr	r2, [r2, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f003 0303 	and.w	r3, r3, #3
 8006076:	2b02      	cmp	r3, #2
 8006078:	d116      	bne.n	80060a8 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	4413      	add	r3, r2
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	021b      	lsls	r3, r3, #8
 8006086:	b21a      	sxth	r2, r3
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	3301      	adds	r3, #1
 800608e:	68b9      	ldr	r1, [r7, #8]
 8006090:	440b      	add	r3, r1
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	b21b      	sxth	r3, r3
 8006096:	4313      	orrs	r3, r2
 8006098:	b21b      	sxth	r3, r3
 800609a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	8b7a      	ldrh	r2, [r7, #26]
 80060a6:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f003 0303 	and.w	r3, r3, #3
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d11f      	bne.n	80060f2 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	4413      	add	r3, r2
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	021b      	lsls	r3, r3, #8
 80060be:	b21a      	sxth	r2, r3
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	3301      	adds	r3, #1
 80060c6:	68b9      	ldr	r1, [r7, #8]
 80060c8:	440b      	add	r3, r1
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	b21b      	sxth	r3, r3
 80060ce:	4313      	orrs	r3, r2
 80060d0:	b21b      	sxth	r3, r3
 80060d2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	8b7a      	ldrh	r2, [r7, #26]
 80060de:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	3302      	adds	r3, #2
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	4413      	add	r3, r2
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	6812      	ldr	r2, [r2, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3724      	adds	r7, #36	; 0x24
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006110:	2300      	movs	r3, #0
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	e013      	b.n	800613e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	4413      	add	r3, r2
 800611e:	881b      	ldrh	r3, [r3, #0]
 8006120:	041a      	lsls	r2, r3, #16
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	3302      	adds	r3, #2
 8006128:	68b9      	ldr	r1, [r7, #8]
 800612a:	440b      	add	r3, r1
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	4619      	mov	r1, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	3301      	adds	r3, #1
 800613c:	617b      	str	r3, [r7, #20]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	085b      	lsrs	r3, r3, #1
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	429a      	cmp	r2, r3
 8006146:	d3e6      	bcc.n	8006116 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	4413      	add	r3, r2
 8006160:	881a      	ldrh	r2, [r3, #0]
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
}
 800616c:	4618      	mov	r0, r3
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006188:	231f      	movs	r3, #31
 800618a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800618c:	bf00      	nop
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1e5a      	subs	r2, r3, #1
 8006192:	613a      	str	r2, [r7, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d009      	beq.n	80061ac <HAL_CRCEx_Polynomial_Set+0x34>
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	fa22 f303 	lsr.w	r3, r2, r3
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d0f0      	beq.n	800618e <HAL_CRCEx_Polynomial_Set+0x16>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b18      	cmp	r3, #24
 80061b0:	d846      	bhi.n	8006240 <HAL_CRCEx_Polynomial_Set+0xc8>
 80061b2:	a201      	add	r2, pc, #4	; (adr r2, 80061b8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80061b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b8:	08006247 	.word	0x08006247
 80061bc:	08006241 	.word	0x08006241
 80061c0:	08006241 	.word	0x08006241
 80061c4:	08006241 	.word	0x08006241
 80061c8:	08006241 	.word	0x08006241
 80061cc:	08006241 	.word	0x08006241
 80061d0:	08006241 	.word	0x08006241
 80061d4:	08006241 	.word	0x08006241
 80061d8:	08006235 	.word	0x08006235
 80061dc:	08006241 	.word	0x08006241
 80061e0:	08006241 	.word	0x08006241
 80061e4:	08006241 	.word	0x08006241
 80061e8:	08006241 	.word	0x08006241
 80061ec:	08006241 	.word	0x08006241
 80061f0:	08006241 	.word	0x08006241
 80061f4:	08006241 	.word	0x08006241
 80061f8:	08006229 	.word	0x08006229
 80061fc:	08006241 	.word	0x08006241
 8006200:	08006241 	.word	0x08006241
 8006204:	08006241 	.word	0x08006241
 8006208:	08006241 	.word	0x08006241
 800620c:	08006241 	.word	0x08006241
 8006210:	08006241 	.word	0x08006241
 8006214:	08006241 	.word	0x08006241
 8006218:	0800621d 	.word	0x0800621d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	2b06      	cmp	r3, #6
 8006220:	d913      	bls.n	800624a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006226:	e010      	b.n	800624a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	2b07      	cmp	r3, #7
 800622c:	d90f      	bls.n	800624e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006232:	e00c      	b.n	800624e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	2b0f      	cmp	r3, #15
 8006238:	d90b      	bls.n	8006252 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800623e:	e008      	b.n	8006252 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	75fb      	strb	r3, [r7, #23]
      break;
 8006244:	e006      	b.n	8006254 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006246:	bf00      	nop
 8006248:	e004      	b.n	8006254 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800624a:	bf00      	nop
 800624c:	e002      	b.n	8006254 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800624e:	bf00      	nop
 8006250:	e000      	b.n	8006254 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006252:	bf00      	nop
  }
  if (status == HAL_OK)
 8006254:	7dfb      	ldrb	r3, [r7, #23]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10d      	bne.n	8006276 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f023 0118 	bic.w	r1, r3, #24
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	430a      	orrs	r2, r1
 8006274:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006276:	7dfb      	ldrb	r3, [r7, #23]
}
 8006278:	4618      	mov	r0, r3
 800627a:	371c      	adds	r7, #28
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800628c:	f7ff fca4 	bl	8005bd8 <HAL_GetTick>
 8006290:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e316      	b.n	80068ca <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a66      	ldr	r2, [pc, #408]	; (800643c <HAL_DMA_Init+0x1b8>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d04a      	beq.n	800633c <HAL_DMA_Init+0xb8>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a65      	ldr	r2, [pc, #404]	; (8006440 <HAL_DMA_Init+0x1bc>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d045      	beq.n	800633c <HAL_DMA_Init+0xb8>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a63      	ldr	r2, [pc, #396]	; (8006444 <HAL_DMA_Init+0x1c0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d040      	beq.n	800633c <HAL_DMA_Init+0xb8>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a62      	ldr	r2, [pc, #392]	; (8006448 <HAL_DMA_Init+0x1c4>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d03b      	beq.n	800633c <HAL_DMA_Init+0xb8>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a60      	ldr	r2, [pc, #384]	; (800644c <HAL_DMA_Init+0x1c8>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d036      	beq.n	800633c <HAL_DMA_Init+0xb8>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a5f      	ldr	r2, [pc, #380]	; (8006450 <HAL_DMA_Init+0x1cc>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d031      	beq.n	800633c <HAL_DMA_Init+0xb8>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a5d      	ldr	r2, [pc, #372]	; (8006454 <HAL_DMA_Init+0x1d0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d02c      	beq.n	800633c <HAL_DMA_Init+0xb8>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a5c      	ldr	r2, [pc, #368]	; (8006458 <HAL_DMA_Init+0x1d4>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d027      	beq.n	800633c <HAL_DMA_Init+0xb8>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a5a      	ldr	r2, [pc, #360]	; (800645c <HAL_DMA_Init+0x1d8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d022      	beq.n	800633c <HAL_DMA_Init+0xb8>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a59      	ldr	r2, [pc, #356]	; (8006460 <HAL_DMA_Init+0x1dc>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d01d      	beq.n	800633c <HAL_DMA_Init+0xb8>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a57      	ldr	r2, [pc, #348]	; (8006464 <HAL_DMA_Init+0x1e0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d018      	beq.n	800633c <HAL_DMA_Init+0xb8>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a56      	ldr	r2, [pc, #344]	; (8006468 <HAL_DMA_Init+0x1e4>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d013      	beq.n	800633c <HAL_DMA_Init+0xb8>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a54      	ldr	r2, [pc, #336]	; (800646c <HAL_DMA_Init+0x1e8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d00e      	beq.n	800633c <HAL_DMA_Init+0xb8>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a53      	ldr	r2, [pc, #332]	; (8006470 <HAL_DMA_Init+0x1ec>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d009      	beq.n	800633c <HAL_DMA_Init+0xb8>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a51      	ldr	r2, [pc, #324]	; (8006474 <HAL_DMA_Init+0x1f0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d004      	beq.n	800633c <HAL_DMA_Init+0xb8>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a50      	ldr	r2, [pc, #320]	; (8006478 <HAL_DMA_Init+0x1f4>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d101      	bne.n	8006340 <HAL_DMA_Init+0xbc>
 800633c:	2301      	movs	r3, #1
 800633e:	e000      	b.n	8006342 <HAL_DMA_Init+0xbe>
 8006340:	2300      	movs	r3, #0
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 813b 	beq.w	80065be <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a37      	ldr	r2, [pc, #220]	; (800643c <HAL_DMA_Init+0x1b8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d04a      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a36      	ldr	r2, [pc, #216]	; (8006440 <HAL_DMA_Init+0x1bc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d045      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a34      	ldr	r2, [pc, #208]	; (8006444 <HAL_DMA_Init+0x1c0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d040      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a33      	ldr	r2, [pc, #204]	; (8006448 <HAL_DMA_Init+0x1c4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d03b      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a31      	ldr	r2, [pc, #196]	; (800644c <HAL_DMA_Init+0x1c8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d036      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a30      	ldr	r2, [pc, #192]	; (8006450 <HAL_DMA_Init+0x1cc>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d031      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a2e      	ldr	r2, [pc, #184]	; (8006454 <HAL_DMA_Init+0x1d0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d02c      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a2d      	ldr	r2, [pc, #180]	; (8006458 <HAL_DMA_Init+0x1d4>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d027      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a2b      	ldr	r2, [pc, #172]	; (800645c <HAL_DMA_Init+0x1d8>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d022      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a2a      	ldr	r2, [pc, #168]	; (8006460 <HAL_DMA_Init+0x1dc>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d01d      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a28      	ldr	r2, [pc, #160]	; (8006464 <HAL_DMA_Init+0x1e0>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d018      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a27      	ldr	r2, [pc, #156]	; (8006468 <HAL_DMA_Init+0x1e4>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d013      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a25      	ldr	r2, [pc, #148]	; (800646c <HAL_DMA_Init+0x1e8>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d00e      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a24      	ldr	r2, [pc, #144]	; (8006470 <HAL_DMA_Init+0x1ec>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d009      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a22      	ldr	r2, [pc, #136]	; (8006474 <HAL_DMA_Init+0x1f0>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d004      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a21      	ldr	r2, [pc, #132]	; (8006478 <HAL_DMA_Init+0x1f4>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d108      	bne.n	800640a <HAL_DMA_Init+0x186>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0201 	bic.w	r2, r2, #1
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	e007      	b.n	800641a <HAL_DMA_Init+0x196>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 0201 	bic.w	r2, r2, #1
 8006418:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800641a:	e02f      	b.n	800647c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800641c:	f7ff fbdc 	bl	8005bd8 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b05      	cmp	r3, #5
 8006428:	d928      	bls.n	800647c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2220      	movs	r2, #32
 800642e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2203      	movs	r2, #3
 8006434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e246      	b.n	80068ca <HAL_DMA_Init+0x646>
 800643c:	40020010 	.word	0x40020010
 8006440:	40020028 	.word	0x40020028
 8006444:	40020040 	.word	0x40020040
 8006448:	40020058 	.word	0x40020058
 800644c:	40020070 	.word	0x40020070
 8006450:	40020088 	.word	0x40020088
 8006454:	400200a0 	.word	0x400200a0
 8006458:	400200b8 	.word	0x400200b8
 800645c:	40020410 	.word	0x40020410
 8006460:	40020428 	.word	0x40020428
 8006464:	40020440 	.word	0x40020440
 8006468:	40020458 	.word	0x40020458
 800646c:	40020470 	.word	0x40020470
 8006470:	40020488 	.word	0x40020488
 8006474:	400204a0 	.word	0x400204a0
 8006478:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1c8      	bne.n	800641c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4b83      	ldr	r3, [pc, #524]	; (80066a4 <HAL_DMA_Init+0x420>)
 8006496:	4013      	ands	r3, r2
 8006498:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80064a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064ba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	2b04      	cmp	r3, #4
 80064ce:	d107      	bne.n	80064e0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d8:	4313      	orrs	r3, r2
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80064e0:	4b71      	ldr	r3, [pc, #452]	; (80066a8 <HAL_DMA_Init+0x424>)
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	4b71      	ldr	r3, [pc, #452]	; (80066ac <HAL_DMA_Init+0x428>)
 80064e6:	4013      	ands	r3, r2
 80064e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064ec:	d328      	bcc.n	8006540 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2b28      	cmp	r3, #40	; 0x28
 80064f4:	d903      	bls.n	80064fe <HAL_DMA_Init+0x27a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2b2e      	cmp	r3, #46	; 0x2e
 80064fc:	d917      	bls.n	800652e <HAL_DMA_Init+0x2aa>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	2b3e      	cmp	r3, #62	; 0x3e
 8006504:	d903      	bls.n	800650e <HAL_DMA_Init+0x28a>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2b42      	cmp	r3, #66	; 0x42
 800650c:	d90f      	bls.n	800652e <HAL_DMA_Init+0x2aa>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2b46      	cmp	r3, #70	; 0x46
 8006514:	d903      	bls.n	800651e <HAL_DMA_Init+0x29a>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2b48      	cmp	r3, #72	; 0x48
 800651c:	d907      	bls.n	800652e <HAL_DMA_Init+0x2aa>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2b4e      	cmp	r3, #78	; 0x4e
 8006524:	d905      	bls.n	8006532 <HAL_DMA_Init+0x2ae>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	2b52      	cmp	r3, #82	; 0x52
 800652c:	d801      	bhi.n	8006532 <HAL_DMA_Init+0x2ae>
 800652e:	2301      	movs	r3, #1
 8006530:	e000      	b.n	8006534 <HAL_DMA_Init+0x2b0>
 8006532:	2300      	movs	r3, #0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800653e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f023 0307 	bic.w	r3, r3, #7
 8006556:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	2b04      	cmp	r3, #4
 8006568:	d117      	bne.n	800659a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4313      	orrs	r3, r2
 8006572:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00e      	beq.n	800659a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f002 fb31 	bl	8008be4 <DMA_CheckFifoParam>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d008      	beq.n	800659a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2240      	movs	r2, #64	; 0x40
 800658c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e197      	b.n	80068ca <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f002 fa6c 	bl	8008a80 <DMA_CalcBaseAndBitshift>
 80065a8:	4603      	mov	r3, r0
 80065aa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b0:	f003 031f 	and.w	r3, r3, #31
 80065b4:	223f      	movs	r2, #63	; 0x3f
 80065b6:	409a      	lsls	r2, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	609a      	str	r2, [r3, #8]
 80065bc:	e0cd      	b.n	800675a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a3b      	ldr	r2, [pc, #236]	; (80066b0 <HAL_DMA_Init+0x42c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d022      	beq.n	800660e <HAL_DMA_Init+0x38a>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a39      	ldr	r2, [pc, #228]	; (80066b4 <HAL_DMA_Init+0x430>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d01d      	beq.n	800660e <HAL_DMA_Init+0x38a>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a38      	ldr	r2, [pc, #224]	; (80066b8 <HAL_DMA_Init+0x434>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d018      	beq.n	800660e <HAL_DMA_Init+0x38a>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a36      	ldr	r2, [pc, #216]	; (80066bc <HAL_DMA_Init+0x438>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d013      	beq.n	800660e <HAL_DMA_Init+0x38a>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a35      	ldr	r2, [pc, #212]	; (80066c0 <HAL_DMA_Init+0x43c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d00e      	beq.n	800660e <HAL_DMA_Init+0x38a>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a33      	ldr	r2, [pc, #204]	; (80066c4 <HAL_DMA_Init+0x440>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d009      	beq.n	800660e <HAL_DMA_Init+0x38a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a32      	ldr	r2, [pc, #200]	; (80066c8 <HAL_DMA_Init+0x444>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d004      	beq.n	800660e <HAL_DMA_Init+0x38a>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a30      	ldr	r2, [pc, #192]	; (80066cc <HAL_DMA_Init+0x448>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d101      	bne.n	8006612 <HAL_DMA_Init+0x38e>
 800660e:	2301      	movs	r3, #1
 8006610:	e000      	b.n	8006614 <HAL_DMA_Init+0x390>
 8006612:	2300      	movs	r3, #0
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 8097 	beq.w	8006748 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a24      	ldr	r2, [pc, #144]	; (80066b0 <HAL_DMA_Init+0x42c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d021      	beq.n	8006668 <HAL_DMA_Init+0x3e4>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a22      	ldr	r2, [pc, #136]	; (80066b4 <HAL_DMA_Init+0x430>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d01c      	beq.n	8006668 <HAL_DMA_Init+0x3e4>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a21      	ldr	r2, [pc, #132]	; (80066b8 <HAL_DMA_Init+0x434>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d017      	beq.n	8006668 <HAL_DMA_Init+0x3e4>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a1f      	ldr	r2, [pc, #124]	; (80066bc <HAL_DMA_Init+0x438>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d012      	beq.n	8006668 <HAL_DMA_Init+0x3e4>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a1e      	ldr	r2, [pc, #120]	; (80066c0 <HAL_DMA_Init+0x43c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00d      	beq.n	8006668 <HAL_DMA_Init+0x3e4>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a1c      	ldr	r2, [pc, #112]	; (80066c4 <HAL_DMA_Init+0x440>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d008      	beq.n	8006668 <HAL_DMA_Init+0x3e4>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a1b      	ldr	r2, [pc, #108]	; (80066c8 <HAL_DMA_Init+0x444>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d003      	beq.n	8006668 <HAL_DMA_Init+0x3e4>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a19      	ldr	r2, [pc, #100]	; (80066cc <HAL_DMA_Init+0x448>)
 8006666:	4293      	cmp	r3, r2
 8006668:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2202      	movs	r2, #2
 800666e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4b12      	ldr	r3, [pc, #72]	; (80066d0 <HAL_DMA_Init+0x44c>)
 8006686:	4013      	ands	r3, r2
 8006688:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	2b40      	cmp	r3, #64	; 0x40
 8006690:	d020      	beq.n	80066d4 <HAL_DMA_Init+0x450>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	2b80      	cmp	r3, #128	; 0x80
 8006698:	d102      	bne.n	80066a0 <HAL_DMA_Init+0x41c>
 800669a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800669e:	e01a      	b.n	80066d6 <HAL_DMA_Init+0x452>
 80066a0:	2300      	movs	r3, #0
 80066a2:	e018      	b.n	80066d6 <HAL_DMA_Init+0x452>
 80066a4:	fe10803f 	.word	0xfe10803f
 80066a8:	5c001000 	.word	0x5c001000
 80066ac:	ffff0000 	.word	0xffff0000
 80066b0:	58025408 	.word	0x58025408
 80066b4:	5802541c 	.word	0x5802541c
 80066b8:	58025430 	.word	0x58025430
 80066bc:	58025444 	.word	0x58025444
 80066c0:	58025458 	.word	0x58025458
 80066c4:	5802546c 	.word	0x5802546c
 80066c8:	58025480 	.word	0x58025480
 80066cc:	58025494 	.word	0x58025494
 80066d0:	fffe000f 	.word	0xfffe000f
 80066d4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	68d2      	ldr	r2, [r2, #12]
 80066da:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80066dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80066e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80066ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80066f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80066fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006704:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	4313      	orrs	r3, r2
 800670a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	461a      	mov	r2, r3
 800671a:	4b6e      	ldr	r3, [pc, #440]	; (80068d4 <HAL_DMA_Init+0x650>)
 800671c:	4413      	add	r3, r2
 800671e:	4a6e      	ldr	r2, [pc, #440]	; (80068d8 <HAL_DMA_Init+0x654>)
 8006720:	fba2 2303 	umull	r2, r3, r2, r3
 8006724:	091b      	lsrs	r3, r3, #4
 8006726:	009a      	lsls	r2, r3, #2
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f002 f9a7 	bl	8008a80 <DMA_CalcBaseAndBitshift>
 8006732:	4603      	mov	r3, r0
 8006734:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800673a:	f003 031f 	and.w	r3, r3, #31
 800673e:	2201      	movs	r2, #1
 8006740:	409a      	lsls	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	605a      	str	r2, [r3, #4]
 8006746:	e008      	b.n	800675a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2240      	movs	r2, #64	; 0x40
 800674c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2203      	movs	r2, #3
 8006752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e0b7      	b.n	80068ca <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a5f      	ldr	r2, [pc, #380]	; (80068dc <HAL_DMA_Init+0x658>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d072      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a5d      	ldr	r2, [pc, #372]	; (80068e0 <HAL_DMA_Init+0x65c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d06d      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a5c      	ldr	r2, [pc, #368]	; (80068e4 <HAL_DMA_Init+0x660>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d068      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a5a      	ldr	r2, [pc, #360]	; (80068e8 <HAL_DMA_Init+0x664>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d063      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a59      	ldr	r2, [pc, #356]	; (80068ec <HAL_DMA_Init+0x668>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d05e      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a57      	ldr	r2, [pc, #348]	; (80068f0 <HAL_DMA_Init+0x66c>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d059      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a56      	ldr	r2, [pc, #344]	; (80068f4 <HAL_DMA_Init+0x670>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d054      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a54      	ldr	r2, [pc, #336]	; (80068f8 <HAL_DMA_Init+0x674>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d04f      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a53      	ldr	r2, [pc, #332]	; (80068fc <HAL_DMA_Init+0x678>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d04a      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a51      	ldr	r2, [pc, #324]	; (8006900 <HAL_DMA_Init+0x67c>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d045      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a50      	ldr	r2, [pc, #320]	; (8006904 <HAL_DMA_Init+0x680>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d040      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a4e      	ldr	r2, [pc, #312]	; (8006908 <HAL_DMA_Init+0x684>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d03b      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a4d      	ldr	r2, [pc, #308]	; (800690c <HAL_DMA_Init+0x688>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d036      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a4b      	ldr	r2, [pc, #300]	; (8006910 <HAL_DMA_Init+0x68c>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d031      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a4a      	ldr	r2, [pc, #296]	; (8006914 <HAL_DMA_Init+0x690>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d02c      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a48      	ldr	r2, [pc, #288]	; (8006918 <HAL_DMA_Init+0x694>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d027      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a47      	ldr	r2, [pc, #284]	; (800691c <HAL_DMA_Init+0x698>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d022      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a45      	ldr	r2, [pc, #276]	; (8006920 <HAL_DMA_Init+0x69c>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d01d      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a44      	ldr	r2, [pc, #272]	; (8006924 <HAL_DMA_Init+0x6a0>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d018      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a42      	ldr	r2, [pc, #264]	; (8006928 <HAL_DMA_Init+0x6a4>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d013      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a41      	ldr	r2, [pc, #260]	; (800692c <HAL_DMA_Init+0x6a8>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d00e      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a3f      	ldr	r2, [pc, #252]	; (8006930 <HAL_DMA_Init+0x6ac>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d009      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a3e      	ldr	r2, [pc, #248]	; (8006934 <HAL_DMA_Init+0x6b0>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d004      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a3c      	ldr	r2, [pc, #240]	; (8006938 <HAL_DMA_Init+0x6b4>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d101      	bne.n	800684e <HAL_DMA_Init+0x5ca>
 800684a:	2301      	movs	r3, #1
 800684c:	e000      	b.n	8006850 <HAL_DMA_Init+0x5cc>
 800684e:	2300      	movs	r3, #0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d032      	beq.n	80068ba <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f002 fa41 	bl	8008cdc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	2b80      	cmp	r3, #128	; 0x80
 8006860:	d102      	bne.n	8006868 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006870:	b2d2      	uxtb	r2, r2
 8006872:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800687c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d010      	beq.n	80068a8 <HAL_DMA_Init+0x624>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	2b08      	cmp	r3, #8
 800688c:	d80c      	bhi.n	80068a8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f002 fabe 	bl	8008e10 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006898:	2200      	movs	r2, #0
 800689a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80068a4:	605a      	str	r2, [r3, #4]
 80068a6:	e008      	b.n	80068ba <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	a7fdabf8 	.word	0xa7fdabf8
 80068d8:	cccccccd 	.word	0xcccccccd
 80068dc:	40020010 	.word	0x40020010
 80068e0:	40020028 	.word	0x40020028
 80068e4:	40020040 	.word	0x40020040
 80068e8:	40020058 	.word	0x40020058
 80068ec:	40020070 	.word	0x40020070
 80068f0:	40020088 	.word	0x40020088
 80068f4:	400200a0 	.word	0x400200a0
 80068f8:	400200b8 	.word	0x400200b8
 80068fc:	40020410 	.word	0x40020410
 8006900:	40020428 	.word	0x40020428
 8006904:	40020440 	.word	0x40020440
 8006908:	40020458 	.word	0x40020458
 800690c:	40020470 	.word	0x40020470
 8006910:	40020488 	.word	0x40020488
 8006914:	400204a0 	.word	0x400204a0
 8006918:	400204b8 	.word	0x400204b8
 800691c:	58025408 	.word	0x58025408
 8006920:	5802541c 	.word	0x5802541c
 8006924:	58025430 	.word	0x58025430
 8006928:	58025444 	.word	0x58025444
 800692c:	58025458 	.word	0x58025458
 8006930:	5802546c 	.word	0x5802546c
 8006934:	58025480 	.word	0x58025480
 8006938:	58025494 	.word	0x58025494

0800693c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e226      	b.n	8006da6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800695e:	2b01      	cmp	r3, #1
 8006960:	d101      	bne.n	8006966 <HAL_DMA_Start_IT+0x2a>
 8006962:	2302      	movs	r3, #2
 8006964:	e21f      	b.n	8006da6 <HAL_DMA_Start_IT+0x46a>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b01      	cmp	r3, #1
 8006978:	f040 820a 	bne.w	8006d90 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a68      	ldr	r2, [pc, #416]	; (8006b30 <HAL_DMA_Start_IT+0x1f4>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d04a      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a66      	ldr	r2, [pc, #408]	; (8006b34 <HAL_DMA_Start_IT+0x1f8>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d045      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a65      	ldr	r2, [pc, #404]	; (8006b38 <HAL_DMA_Start_IT+0x1fc>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d040      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a63      	ldr	r2, [pc, #396]	; (8006b3c <HAL_DMA_Start_IT+0x200>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d03b      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a62      	ldr	r2, [pc, #392]	; (8006b40 <HAL_DMA_Start_IT+0x204>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d036      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a60      	ldr	r2, [pc, #384]	; (8006b44 <HAL_DMA_Start_IT+0x208>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d031      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a5f      	ldr	r2, [pc, #380]	; (8006b48 <HAL_DMA_Start_IT+0x20c>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d02c      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a5d      	ldr	r2, [pc, #372]	; (8006b4c <HAL_DMA_Start_IT+0x210>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d027      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a5c      	ldr	r2, [pc, #368]	; (8006b50 <HAL_DMA_Start_IT+0x214>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d022      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a5a      	ldr	r2, [pc, #360]	; (8006b54 <HAL_DMA_Start_IT+0x218>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d01d      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a59      	ldr	r2, [pc, #356]	; (8006b58 <HAL_DMA_Start_IT+0x21c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d018      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a57      	ldr	r2, [pc, #348]	; (8006b5c <HAL_DMA_Start_IT+0x220>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d013      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a56      	ldr	r2, [pc, #344]	; (8006b60 <HAL_DMA_Start_IT+0x224>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d00e      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a54      	ldr	r2, [pc, #336]	; (8006b64 <HAL_DMA_Start_IT+0x228>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d009      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a53      	ldr	r2, [pc, #332]	; (8006b68 <HAL_DMA_Start_IT+0x22c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d004      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a51      	ldr	r2, [pc, #324]	; (8006b6c <HAL_DMA_Start_IT+0x230>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d108      	bne.n	8006a3c <HAL_DMA_Start_IT+0x100>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0201 	bic.w	r2, r2, #1
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	e007      	b.n	8006a4c <HAL_DMA_Start_IT+0x110>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 0201 	bic.w	r2, r2, #1
 8006a4a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	68b9      	ldr	r1, [r7, #8]
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f001 fe68 	bl	8008728 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a34      	ldr	r2, [pc, #208]	; (8006b30 <HAL_DMA_Start_IT+0x1f4>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d04a      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a33      	ldr	r2, [pc, #204]	; (8006b34 <HAL_DMA_Start_IT+0x1f8>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d045      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a31      	ldr	r2, [pc, #196]	; (8006b38 <HAL_DMA_Start_IT+0x1fc>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d040      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a30      	ldr	r2, [pc, #192]	; (8006b3c <HAL_DMA_Start_IT+0x200>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d03b      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a2e      	ldr	r2, [pc, #184]	; (8006b40 <HAL_DMA_Start_IT+0x204>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d036      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a2d      	ldr	r2, [pc, #180]	; (8006b44 <HAL_DMA_Start_IT+0x208>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d031      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a2b      	ldr	r2, [pc, #172]	; (8006b48 <HAL_DMA_Start_IT+0x20c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d02c      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a2a      	ldr	r2, [pc, #168]	; (8006b4c <HAL_DMA_Start_IT+0x210>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d027      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a28      	ldr	r2, [pc, #160]	; (8006b50 <HAL_DMA_Start_IT+0x214>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d022      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a27      	ldr	r2, [pc, #156]	; (8006b54 <HAL_DMA_Start_IT+0x218>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d01d      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a25      	ldr	r2, [pc, #148]	; (8006b58 <HAL_DMA_Start_IT+0x21c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d018      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a24      	ldr	r2, [pc, #144]	; (8006b5c <HAL_DMA_Start_IT+0x220>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d013      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a22      	ldr	r2, [pc, #136]	; (8006b60 <HAL_DMA_Start_IT+0x224>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d00e      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a21      	ldr	r2, [pc, #132]	; (8006b64 <HAL_DMA_Start_IT+0x228>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d009      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a1f      	ldr	r2, [pc, #124]	; (8006b68 <HAL_DMA_Start_IT+0x22c>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d004      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a1e      	ldr	r2, [pc, #120]	; (8006b6c <HAL_DMA_Start_IT+0x230>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d101      	bne.n	8006afc <HAL_DMA_Start_IT+0x1c0>
 8006af8:	2301      	movs	r3, #1
 8006afa:	e000      	b.n	8006afe <HAL_DMA_Start_IT+0x1c2>
 8006afc:	2300      	movs	r3, #0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d036      	beq.n	8006b70 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f023 021e 	bic.w	r2, r3, #30
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f042 0216 	orr.w	r2, r2, #22
 8006b14:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d03e      	beq.n	8006b9c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f042 0208 	orr.w	r2, r2, #8
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	e035      	b.n	8006b9c <HAL_DMA_Start_IT+0x260>
 8006b30:	40020010 	.word	0x40020010
 8006b34:	40020028 	.word	0x40020028
 8006b38:	40020040 	.word	0x40020040
 8006b3c:	40020058 	.word	0x40020058
 8006b40:	40020070 	.word	0x40020070
 8006b44:	40020088 	.word	0x40020088
 8006b48:	400200a0 	.word	0x400200a0
 8006b4c:	400200b8 	.word	0x400200b8
 8006b50:	40020410 	.word	0x40020410
 8006b54:	40020428 	.word	0x40020428
 8006b58:	40020440 	.word	0x40020440
 8006b5c:	40020458 	.word	0x40020458
 8006b60:	40020470 	.word	0x40020470
 8006b64:	40020488 	.word	0x40020488
 8006b68:	400204a0 	.word	0x400204a0
 8006b6c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f023 020e 	bic.w	r2, r3, #14
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 020a 	orr.w	r2, r2, #10
 8006b82:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d007      	beq.n	8006b9c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f042 0204 	orr.w	r2, r2, #4
 8006b9a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a83      	ldr	r2, [pc, #524]	; (8006db0 <HAL_DMA_Start_IT+0x474>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d072      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a82      	ldr	r2, [pc, #520]	; (8006db4 <HAL_DMA_Start_IT+0x478>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d06d      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a80      	ldr	r2, [pc, #512]	; (8006db8 <HAL_DMA_Start_IT+0x47c>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d068      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a7f      	ldr	r2, [pc, #508]	; (8006dbc <HAL_DMA_Start_IT+0x480>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d063      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a7d      	ldr	r2, [pc, #500]	; (8006dc0 <HAL_DMA_Start_IT+0x484>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d05e      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a7c      	ldr	r2, [pc, #496]	; (8006dc4 <HAL_DMA_Start_IT+0x488>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d059      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a7a      	ldr	r2, [pc, #488]	; (8006dc8 <HAL_DMA_Start_IT+0x48c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d054      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a79      	ldr	r2, [pc, #484]	; (8006dcc <HAL_DMA_Start_IT+0x490>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d04f      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a77      	ldr	r2, [pc, #476]	; (8006dd0 <HAL_DMA_Start_IT+0x494>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d04a      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a76      	ldr	r2, [pc, #472]	; (8006dd4 <HAL_DMA_Start_IT+0x498>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d045      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a74      	ldr	r2, [pc, #464]	; (8006dd8 <HAL_DMA_Start_IT+0x49c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d040      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a73      	ldr	r2, [pc, #460]	; (8006ddc <HAL_DMA_Start_IT+0x4a0>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d03b      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a71      	ldr	r2, [pc, #452]	; (8006de0 <HAL_DMA_Start_IT+0x4a4>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d036      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a70      	ldr	r2, [pc, #448]	; (8006de4 <HAL_DMA_Start_IT+0x4a8>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d031      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a6e      	ldr	r2, [pc, #440]	; (8006de8 <HAL_DMA_Start_IT+0x4ac>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d02c      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a6d      	ldr	r2, [pc, #436]	; (8006dec <HAL_DMA_Start_IT+0x4b0>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d027      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a6b      	ldr	r2, [pc, #428]	; (8006df0 <HAL_DMA_Start_IT+0x4b4>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d022      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a6a      	ldr	r2, [pc, #424]	; (8006df4 <HAL_DMA_Start_IT+0x4b8>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d01d      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a68      	ldr	r2, [pc, #416]	; (8006df8 <HAL_DMA_Start_IT+0x4bc>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d018      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a67      	ldr	r2, [pc, #412]	; (8006dfc <HAL_DMA_Start_IT+0x4c0>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d013      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a65      	ldr	r2, [pc, #404]	; (8006e00 <HAL_DMA_Start_IT+0x4c4>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d00e      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a64      	ldr	r2, [pc, #400]	; (8006e04 <HAL_DMA_Start_IT+0x4c8>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d009      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a62      	ldr	r2, [pc, #392]	; (8006e08 <HAL_DMA_Start_IT+0x4cc>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d004      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a61      	ldr	r2, [pc, #388]	; (8006e0c <HAL_DMA_Start_IT+0x4d0>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d101      	bne.n	8006c90 <HAL_DMA_Start_IT+0x354>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e000      	b.n	8006c92 <HAL_DMA_Start_IT+0x356>
 8006c90:	2300      	movs	r3, #0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d01a      	beq.n	8006ccc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d007      	beq.n	8006cb4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cb2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d007      	beq.n	8006ccc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a37      	ldr	r2, [pc, #220]	; (8006db0 <HAL_DMA_Start_IT+0x474>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d04a      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a36      	ldr	r2, [pc, #216]	; (8006db4 <HAL_DMA_Start_IT+0x478>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d045      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a34      	ldr	r2, [pc, #208]	; (8006db8 <HAL_DMA_Start_IT+0x47c>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d040      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a33      	ldr	r2, [pc, #204]	; (8006dbc <HAL_DMA_Start_IT+0x480>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d03b      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a31      	ldr	r2, [pc, #196]	; (8006dc0 <HAL_DMA_Start_IT+0x484>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d036      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a30      	ldr	r2, [pc, #192]	; (8006dc4 <HAL_DMA_Start_IT+0x488>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d031      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a2e      	ldr	r2, [pc, #184]	; (8006dc8 <HAL_DMA_Start_IT+0x48c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d02c      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a2d      	ldr	r2, [pc, #180]	; (8006dcc <HAL_DMA_Start_IT+0x490>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d027      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a2b      	ldr	r2, [pc, #172]	; (8006dd0 <HAL_DMA_Start_IT+0x494>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d022      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a2a      	ldr	r2, [pc, #168]	; (8006dd4 <HAL_DMA_Start_IT+0x498>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d01d      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a28      	ldr	r2, [pc, #160]	; (8006dd8 <HAL_DMA_Start_IT+0x49c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d018      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a27      	ldr	r2, [pc, #156]	; (8006ddc <HAL_DMA_Start_IT+0x4a0>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d013      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a25      	ldr	r2, [pc, #148]	; (8006de0 <HAL_DMA_Start_IT+0x4a4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d00e      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a24      	ldr	r2, [pc, #144]	; (8006de4 <HAL_DMA_Start_IT+0x4a8>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d009      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a22      	ldr	r2, [pc, #136]	; (8006de8 <HAL_DMA_Start_IT+0x4ac>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d004      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a21      	ldr	r2, [pc, #132]	; (8006dec <HAL_DMA_Start_IT+0x4b0>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d108      	bne.n	8006d7e <HAL_DMA_Start_IT+0x442>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0201 	orr.w	r2, r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	e012      	b.n	8006da4 <HAL_DMA_Start_IT+0x468>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f042 0201 	orr.w	r2, r2, #1
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	e009      	b.n	8006da4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	40020010 	.word	0x40020010
 8006db4:	40020028 	.word	0x40020028
 8006db8:	40020040 	.word	0x40020040
 8006dbc:	40020058 	.word	0x40020058
 8006dc0:	40020070 	.word	0x40020070
 8006dc4:	40020088 	.word	0x40020088
 8006dc8:	400200a0 	.word	0x400200a0
 8006dcc:	400200b8 	.word	0x400200b8
 8006dd0:	40020410 	.word	0x40020410
 8006dd4:	40020428 	.word	0x40020428
 8006dd8:	40020440 	.word	0x40020440
 8006ddc:	40020458 	.word	0x40020458
 8006de0:	40020470 	.word	0x40020470
 8006de4:	40020488 	.word	0x40020488
 8006de8:	400204a0 	.word	0x400204a0
 8006dec:	400204b8 	.word	0x400204b8
 8006df0:	58025408 	.word	0x58025408
 8006df4:	5802541c 	.word	0x5802541c
 8006df8:	58025430 	.word	0x58025430
 8006dfc:	58025444 	.word	0x58025444
 8006e00:	58025458 	.word	0x58025458
 8006e04:	5802546c 	.word	0x5802546c
 8006e08:	58025480 	.word	0x58025480
 8006e0c:	58025494 	.word	0x58025494

08006e10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006e18:	f7fe fede 	bl	8005bd8 <HAL_GetTick>
 8006e1c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e2dc      	b.n	80073e2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d008      	beq.n	8006e46 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2280      	movs	r2, #128	; 0x80
 8006e38:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e2cd      	b.n	80073e2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a76      	ldr	r2, [pc, #472]	; (8007024 <HAL_DMA_Abort+0x214>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d04a      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a74      	ldr	r2, [pc, #464]	; (8007028 <HAL_DMA_Abort+0x218>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d045      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a73      	ldr	r2, [pc, #460]	; (800702c <HAL_DMA_Abort+0x21c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d040      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a71      	ldr	r2, [pc, #452]	; (8007030 <HAL_DMA_Abort+0x220>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d03b      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a70      	ldr	r2, [pc, #448]	; (8007034 <HAL_DMA_Abort+0x224>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d036      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a6e      	ldr	r2, [pc, #440]	; (8007038 <HAL_DMA_Abort+0x228>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d031      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a6d      	ldr	r2, [pc, #436]	; (800703c <HAL_DMA_Abort+0x22c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d02c      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a6b      	ldr	r2, [pc, #428]	; (8007040 <HAL_DMA_Abort+0x230>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d027      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a6a      	ldr	r2, [pc, #424]	; (8007044 <HAL_DMA_Abort+0x234>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d022      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a68      	ldr	r2, [pc, #416]	; (8007048 <HAL_DMA_Abort+0x238>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d01d      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a67      	ldr	r2, [pc, #412]	; (800704c <HAL_DMA_Abort+0x23c>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d018      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a65      	ldr	r2, [pc, #404]	; (8007050 <HAL_DMA_Abort+0x240>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d013      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a64      	ldr	r2, [pc, #400]	; (8007054 <HAL_DMA_Abort+0x244>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d00e      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a62      	ldr	r2, [pc, #392]	; (8007058 <HAL_DMA_Abort+0x248>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d009      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a61      	ldr	r2, [pc, #388]	; (800705c <HAL_DMA_Abort+0x24c>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d004      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a5f      	ldr	r2, [pc, #380]	; (8007060 <HAL_DMA_Abort+0x250>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d101      	bne.n	8006eea <HAL_DMA_Abort+0xda>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e000      	b.n	8006eec <HAL_DMA_Abort+0xdc>
 8006eea:	2300      	movs	r3, #0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d013      	beq.n	8006f18 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f022 021e 	bic.w	r2, r2, #30
 8006efe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	695a      	ldr	r2, [r3, #20]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f0e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	617b      	str	r3, [r7, #20]
 8006f16:	e00a      	b.n	8006f2e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 020e 	bic.w	r2, r2, #14
 8006f26:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a3c      	ldr	r2, [pc, #240]	; (8007024 <HAL_DMA_Abort+0x214>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d072      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a3a      	ldr	r2, [pc, #232]	; (8007028 <HAL_DMA_Abort+0x218>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d06d      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a39      	ldr	r2, [pc, #228]	; (800702c <HAL_DMA_Abort+0x21c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d068      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a37      	ldr	r2, [pc, #220]	; (8007030 <HAL_DMA_Abort+0x220>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d063      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a36      	ldr	r2, [pc, #216]	; (8007034 <HAL_DMA_Abort+0x224>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d05e      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a34      	ldr	r2, [pc, #208]	; (8007038 <HAL_DMA_Abort+0x228>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d059      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a33      	ldr	r2, [pc, #204]	; (800703c <HAL_DMA_Abort+0x22c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d054      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a31      	ldr	r2, [pc, #196]	; (8007040 <HAL_DMA_Abort+0x230>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d04f      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a30      	ldr	r2, [pc, #192]	; (8007044 <HAL_DMA_Abort+0x234>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d04a      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a2e      	ldr	r2, [pc, #184]	; (8007048 <HAL_DMA_Abort+0x238>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d045      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a2d      	ldr	r2, [pc, #180]	; (800704c <HAL_DMA_Abort+0x23c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d040      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a2b      	ldr	r2, [pc, #172]	; (8007050 <HAL_DMA_Abort+0x240>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d03b      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a2a      	ldr	r2, [pc, #168]	; (8007054 <HAL_DMA_Abort+0x244>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d036      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a28      	ldr	r2, [pc, #160]	; (8007058 <HAL_DMA_Abort+0x248>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d031      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a27      	ldr	r2, [pc, #156]	; (800705c <HAL_DMA_Abort+0x24c>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d02c      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a25      	ldr	r2, [pc, #148]	; (8007060 <HAL_DMA_Abort+0x250>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d027      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a24      	ldr	r2, [pc, #144]	; (8007064 <HAL_DMA_Abort+0x254>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d022      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a22      	ldr	r2, [pc, #136]	; (8007068 <HAL_DMA_Abort+0x258>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d01d      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a21      	ldr	r2, [pc, #132]	; (800706c <HAL_DMA_Abort+0x25c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d018      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a1f      	ldr	r2, [pc, #124]	; (8007070 <HAL_DMA_Abort+0x260>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d013      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a1e      	ldr	r2, [pc, #120]	; (8007074 <HAL_DMA_Abort+0x264>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00e      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a1c      	ldr	r2, [pc, #112]	; (8007078 <HAL_DMA_Abort+0x268>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d009      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a1b      	ldr	r2, [pc, #108]	; (800707c <HAL_DMA_Abort+0x26c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d004      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a19      	ldr	r2, [pc, #100]	; (8007080 <HAL_DMA_Abort+0x270>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d132      	bne.n	8007084 <HAL_DMA_Abort+0x274>
 800701e:	2301      	movs	r3, #1
 8007020:	e031      	b.n	8007086 <HAL_DMA_Abort+0x276>
 8007022:	bf00      	nop
 8007024:	40020010 	.word	0x40020010
 8007028:	40020028 	.word	0x40020028
 800702c:	40020040 	.word	0x40020040
 8007030:	40020058 	.word	0x40020058
 8007034:	40020070 	.word	0x40020070
 8007038:	40020088 	.word	0x40020088
 800703c:	400200a0 	.word	0x400200a0
 8007040:	400200b8 	.word	0x400200b8
 8007044:	40020410 	.word	0x40020410
 8007048:	40020428 	.word	0x40020428
 800704c:	40020440 	.word	0x40020440
 8007050:	40020458 	.word	0x40020458
 8007054:	40020470 	.word	0x40020470
 8007058:	40020488 	.word	0x40020488
 800705c:	400204a0 	.word	0x400204a0
 8007060:	400204b8 	.word	0x400204b8
 8007064:	58025408 	.word	0x58025408
 8007068:	5802541c 	.word	0x5802541c
 800706c:	58025430 	.word	0x58025430
 8007070:	58025444 	.word	0x58025444
 8007074:	58025458 	.word	0x58025458
 8007078:	5802546c 	.word	0x5802546c
 800707c:	58025480 	.word	0x58025480
 8007080:	58025494 	.word	0x58025494
 8007084:	2300      	movs	r3, #0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d007      	beq.n	800709a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007094:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007098:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a6d      	ldr	r2, [pc, #436]	; (8007254 <HAL_DMA_Abort+0x444>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d04a      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a6b      	ldr	r2, [pc, #428]	; (8007258 <HAL_DMA_Abort+0x448>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d045      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a6a      	ldr	r2, [pc, #424]	; (800725c <HAL_DMA_Abort+0x44c>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d040      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a68      	ldr	r2, [pc, #416]	; (8007260 <HAL_DMA_Abort+0x450>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d03b      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a67      	ldr	r2, [pc, #412]	; (8007264 <HAL_DMA_Abort+0x454>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d036      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a65      	ldr	r2, [pc, #404]	; (8007268 <HAL_DMA_Abort+0x458>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d031      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a64      	ldr	r2, [pc, #400]	; (800726c <HAL_DMA_Abort+0x45c>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d02c      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a62      	ldr	r2, [pc, #392]	; (8007270 <HAL_DMA_Abort+0x460>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d027      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a61      	ldr	r2, [pc, #388]	; (8007274 <HAL_DMA_Abort+0x464>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d022      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a5f      	ldr	r2, [pc, #380]	; (8007278 <HAL_DMA_Abort+0x468>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d01d      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a5e      	ldr	r2, [pc, #376]	; (800727c <HAL_DMA_Abort+0x46c>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d018      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a5c      	ldr	r2, [pc, #368]	; (8007280 <HAL_DMA_Abort+0x470>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d013      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a5b      	ldr	r2, [pc, #364]	; (8007284 <HAL_DMA_Abort+0x474>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d00e      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a59      	ldr	r2, [pc, #356]	; (8007288 <HAL_DMA_Abort+0x478>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d009      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a58      	ldr	r2, [pc, #352]	; (800728c <HAL_DMA_Abort+0x47c>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d004      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a56      	ldr	r2, [pc, #344]	; (8007290 <HAL_DMA_Abort+0x480>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d108      	bne.n	800714c <HAL_DMA_Abort+0x33c>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 0201 	bic.w	r2, r2, #1
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	e007      	b.n	800715c <HAL_DMA_Abort+0x34c>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0201 	bic.w	r2, r2, #1
 800715a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800715c:	e013      	b.n	8007186 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800715e:	f7fe fd3b 	bl	8005bd8 <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	2b05      	cmp	r3, #5
 800716a:	d90c      	bls.n	8007186 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2220      	movs	r2, #32
 8007170:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2203      	movs	r2, #3
 8007176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e12d      	b.n	80073e2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1e5      	bne.n	800715e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a2f      	ldr	r2, [pc, #188]	; (8007254 <HAL_DMA_Abort+0x444>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d04a      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a2d      	ldr	r2, [pc, #180]	; (8007258 <HAL_DMA_Abort+0x448>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d045      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a2c      	ldr	r2, [pc, #176]	; (800725c <HAL_DMA_Abort+0x44c>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d040      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a2a      	ldr	r2, [pc, #168]	; (8007260 <HAL_DMA_Abort+0x450>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d03b      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a29      	ldr	r2, [pc, #164]	; (8007264 <HAL_DMA_Abort+0x454>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d036      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a27      	ldr	r2, [pc, #156]	; (8007268 <HAL_DMA_Abort+0x458>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d031      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a26      	ldr	r2, [pc, #152]	; (800726c <HAL_DMA_Abort+0x45c>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d02c      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a24      	ldr	r2, [pc, #144]	; (8007270 <HAL_DMA_Abort+0x460>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d027      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a23      	ldr	r2, [pc, #140]	; (8007274 <HAL_DMA_Abort+0x464>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d022      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a21      	ldr	r2, [pc, #132]	; (8007278 <HAL_DMA_Abort+0x468>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d01d      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a20      	ldr	r2, [pc, #128]	; (800727c <HAL_DMA_Abort+0x46c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d018      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a1e      	ldr	r2, [pc, #120]	; (8007280 <HAL_DMA_Abort+0x470>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d013      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a1d      	ldr	r2, [pc, #116]	; (8007284 <HAL_DMA_Abort+0x474>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d00e      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a1b      	ldr	r2, [pc, #108]	; (8007288 <HAL_DMA_Abort+0x478>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d009      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a1a      	ldr	r2, [pc, #104]	; (800728c <HAL_DMA_Abort+0x47c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d004      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a18      	ldr	r2, [pc, #96]	; (8007290 <HAL_DMA_Abort+0x480>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d101      	bne.n	8007236 <HAL_DMA_Abort+0x426>
 8007232:	2301      	movs	r3, #1
 8007234:	e000      	b.n	8007238 <HAL_DMA_Abort+0x428>
 8007236:	2300      	movs	r3, #0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d02b      	beq.n	8007294 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007240:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007246:	f003 031f 	and.w	r3, r3, #31
 800724a:	223f      	movs	r2, #63	; 0x3f
 800724c:	409a      	lsls	r2, r3
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	609a      	str	r2, [r3, #8]
 8007252:	e02a      	b.n	80072aa <HAL_DMA_Abort+0x49a>
 8007254:	40020010 	.word	0x40020010
 8007258:	40020028 	.word	0x40020028
 800725c:	40020040 	.word	0x40020040
 8007260:	40020058 	.word	0x40020058
 8007264:	40020070 	.word	0x40020070
 8007268:	40020088 	.word	0x40020088
 800726c:	400200a0 	.word	0x400200a0
 8007270:	400200b8 	.word	0x400200b8
 8007274:	40020410 	.word	0x40020410
 8007278:	40020428 	.word	0x40020428
 800727c:	40020440 	.word	0x40020440
 8007280:	40020458 	.word	0x40020458
 8007284:	40020470 	.word	0x40020470
 8007288:	40020488 	.word	0x40020488
 800728c:	400204a0 	.word	0x400204a0
 8007290:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007298:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800729e:	f003 031f 	and.w	r3, r3, #31
 80072a2:	2201      	movs	r2, #1
 80072a4:	409a      	lsls	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a4f      	ldr	r2, [pc, #316]	; (80073ec <HAL_DMA_Abort+0x5dc>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d072      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a4d      	ldr	r2, [pc, #308]	; (80073f0 <HAL_DMA_Abort+0x5e0>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d06d      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a4c      	ldr	r2, [pc, #304]	; (80073f4 <HAL_DMA_Abort+0x5e4>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d068      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a4a      	ldr	r2, [pc, #296]	; (80073f8 <HAL_DMA_Abort+0x5e8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d063      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a49      	ldr	r2, [pc, #292]	; (80073fc <HAL_DMA_Abort+0x5ec>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d05e      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a47      	ldr	r2, [pc, #284]	; (8007400 <HAL_DMA_Abort+0x5f0>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d059      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a46      	ldr	r2, [pc, #280]	; (8007404 <HAL_DMA_Abort+0x5f4>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d054      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a44      	ldr	r2, [pc, #272]	; (8007408 <HAL_DMA_Abort+0x5f8>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d04f      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a43      	ldr	r2, [pc, #268]	; (800740c <HAL_DMA_Abort+0x5fc>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d04a      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a41      	ldr	r2, [pc, #260]	; (8007410 <HAL_DMA_Abort+0x600>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d045      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a40      	ldr	r2, [pc, #256]	; (8007414 <HAL_DMA_Abort+0x604>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d040      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a3e      	ldr	r2, [pc, #248]	; (8007418 <HAL_DMA_Abort+0x608>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d03b      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a3d      	ldr	r2, [pc, #244]	; (800741c <HAL_DMA_Abort+0x60c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d036      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a3b      	ldr	r2, [pc, #236]	; (8007420 <HAL_DMA_Abort+0x610>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d031      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a3a      	ldr	r2, [pc, #232]	; (8007424 <HAL_DMA_Abort+0x614>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d02c      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a38      	ldr	r2, [pc, #224]	; (8007428 <HAL_DMA_Abort+0x618>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d027      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a37      	ldr	r2, [pc, #220]	; (800742c <HAL_DMA_Abort+0x61c>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d022      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a35      	ldr	r2, [pc, #212]	; (8007430 <HAL_DMA_Abort+0x620>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d01d      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a34      	ldr	r2, [pc, #208]	; (8007434 <HAL_DMA_Abort+0x624>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d018      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a32      	ldr	r2, [pc, #200]	; (8007438 <HAL_DMA_Abort+0x628>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d013      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a31      	ldr	r2, [pc, #196]	; (800743c <HAL_DMA_Abort+0x62c>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d00e      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a2f      	ldr	r2, [pc, #188]	; (8007440 <HAL_DMA_Abort+0x630>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d009      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a2e      	ldr	r2, [pc, #184]	; (8007444 <HAL_DMA_Abort+0x634>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d004      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a2c      	ldr	r2, [pc, #176]	; (8007448 <HAL_DMA_Abort+0x638>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d101      	bne.n	800739e <HAL_DMA_Abort+0x58e>
 800739a:	2301      	movs	r3, #1
 800739c:	e000      	b.n	80073a0 <HAL_DMA_Abort+0x590>
 800739e:	2300      	movs	r3, #0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d015      	beq.n	80073d0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80073ac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00c      	beq.n	80073d0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073c4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80073ce:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	40020010 	.word	0x40020010
 80073f0:	40020028 	.word	0x40020028
 80073f4:	40020040 	.word	0x40020040
 80073f8:	40020058 	.word	0x40020058
 80073fc:	40020070 	.word	0x40020070
 8007400:	40020088 	.word	0x40020088
 8007404:	400200a0 	.word	0x400200a0
 8007408:	400200b8 	.word	0x400200b8
 800740c:	40020410 	.word	0x40020410
 8007410:	40020428 	.word	0x40020428
 8007414:	40020440 	.word	0x40020440
 8007418:	40020458 	.word	0x40020458
 800741c:	40020470 	.word	0x40020470
 8007420:	40020488 	.word	0x40020488
 8007424:	400204a0 	.word	0x400204a0
 8007428:	400204b8 	.word	0x400204b8
 800742c:	58025408 	.word	0x58025408
 8007430:	5802541c 	.word	0x5802541c
 8007434:	58025430 	.word	0x58025430
 8007438:	58025444 	.word	0x58025444
 800743c:	58025458 	.word	0x58025458
 8007440:	5802546c 	.word	0x5802546c
 8007444:	58025480 	.word	0x58025480
 8007448:	58025494 	.word	0x58025494

0800744c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e205      	b.n	800786a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b02      	cmp	r3, #2
 8007468:	d004      	beq.n	8007474 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2280      	movs	r2, #128	; 0x80
 800746e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e1fa      	b.n	800786a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a8c      	ldr	r2, [pc, #560]	; (80076ac <HAL_DMA_Abort_IT+0x260>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d04a      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a8b      	ldr	r2, [pc, #556]	; (80076b0 <HAL_DMA_Abort_IT+0x264>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d045      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a89      	ldr	r2, [pc, #548]	; (80076b4 <HAL_DMA_Abort_IT+0x268>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d040      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a88      	ldr	r2, [pc, #544]	; (80076b8 <HAL_DMA_Abort_IT+0x26c>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d03b      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a86      	ldr	r2, [pc, #536]	; (80076bc <HAL_DMA_Abort_IT+0x270>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d036      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a85      	ldr	r2, [pc, #532]	; (80076c0 <HAL_DMA_Abort_IT+0x274>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d031      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a83      	ldr	r2, [pc, #524]	; (80076c4 <HAL_DMA_Abort_IT+0x278>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d02c      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a82      	ldr	r2, [pc, #520]	; (80076c8 <HAL_DMA_Abort_IT+0x27c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d027      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a80      	ldr	r2, [pc, #512]	; (80076cc <HAL_DMA_Abort_IT+0x280>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d022      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a7f      	ldr	r2, [pc, #508]	; (80076d0 <HAL_DMA_Abort_IT+0x284>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d01d      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a7d      	ldr	r2, [pc, #500]	; (80076d4 <HAL_DMA_Abort_IT+0x288>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d018      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a7c      	ldr	r2, [pc, #496]	; (80076d8 <HAL_DMA_Abort_IT+0x28c>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d013      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a7a      	ldr	r2, [pc, #488]	; (80076dc <HAL_DMA_Abort_IT+0x290>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d00e      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a79      	ldr	r2, [pc, #484]	; (80076e0 <HAL_DMA_Abort_IT+0x294>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d009      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a77      	ldr	r2, [pc, #476]	; (80076e4 <HAL_DMA_Abort_IT+0x298>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d004      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a76      	ldr	r2, [pc, #472]	; (80076e8 <HAL_DMA_Abort_IT+0x29c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d101      	bne.n	8007518 <HAL_DMA_Abort_IT+0xcc>
 8007514:	2301      	movs	r3, #1
 8007516:	e000      	b.n	800751a <HAL_DMA_Abort_IT+0xce>
 8007518:	2300      	movs	r3, #0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d065      	beq.n	80075ea <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2204      	movs	r2, #4
 8007522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a60      	ldr	r2, [pc, #384]	; (80076ac <HAL_DMA_Abort_IT+0x260>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d04a      	beq.n	80075c6 <HAL_DMA_Abort_IT+0x17a>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a5e      	ldr	r2, [pc, #376]	; (80076b0 <HAL_DMA_Abort_IT+0x264>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d045      	beq.n	80075c6 <HAL_DMA_Abort_IT+0x17a>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a5d      	ldr	r2, [pc, #372]	; (80076b4 <HAL_DMA_Abort_IT+0x268>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d040      	beq.n	80075c6 <HAL_DMA_Abort_IT+0x17a>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a5b      	ldr	r2, [pc, #364]	; (80076b8 <HAL_DMA_Abort_IT+0x26c>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d03b      	beq.n	80075c6 <HAL_DMA_Abort_IT+0x17a>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a5a      	ldr	r2, [pc, #360]	; (80076bc <HAL_DMA_Abort_IT+0x270>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d036      	beq.n	80075c6 <HAL_DMA_Abort_IT+0x17a>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a58      	ldr	r2, [pc, #352]	; (80076c0 <HAL_DMA_Abort_IT+0x274>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d031      	beq.n	80075c6 <HAL_DMA_Abort_IT+0x17a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a57      	ldr	r2, [pc, #348]	; (80076c4 <HAL_DMA_Abort_IT+0x278>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d02c      	beq.n	80075c6 <HAL_DMA_Abort_IT+0x17a>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a55      	ldr	r2, [pc, #340]	; (80076c8 <HAL_DMA_Abort_IT+0x27c>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d027      	beq.n	80075c6 <HAL_DMA_Abort_IT+0x17a>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a54      	ldr	r2, [pc, #336]	; (80076cc <HAL_DMA_Abort_IT+0x280>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d022      	beq.n	80075c6 <HAL_DMA_Abort_IT+0x17a>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a52      	ldr	r2, [pc, #328]	; (80076d0 <HAL_DMA_Abort_IT+0x284>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d01d      	beq.n	80075c6 <HAL_DMA_Abort_IT+0x17a>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a51      	ldr	r2, [pc, #324]	; (80076d4 <HAL_DMA_Abort_IT+0x288>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d018      	beq.n	80075c6 <HAL_DMA_Abort_IT+0x17a>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a4f      	ldr	r2, [pc, #316]	; (80076d8 <HAL_DMA_Abort_IT+0x28c>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d013      	beq.n	80075c6 <HAL_DMA_Abort_IT+0x17a>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a4e      	ldr	r2, [pc, #312]	; (80076dc <HAL_DMA_Abort_IT+0x290>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00e      	beq.n	80075c6 <HAL_DMA_Abort_IT+0x17a>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a4c      	ldr	r2, [pc, #304]	; (80076e0 <HAL_DMA_Abort_IT+0x294>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d009      	beq.n	80075c6 <HAL_DMA_Abort_IT+0x17a>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a4b      	ldr	r2, [pc, #300]	; (80076e4 <HAL_DMA_Abort_IT+0x298>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d004      	beq.n	80075c6 <HAL_DMA_Abort_IT+0x17a>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a49      	ldr	r2, [pc, #292]	; (80076e8 <HAL_DMA_Abort_IT+0x29c>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d108      	bne.n	80075d8 <HAL_DMA_Abort_IT+0x18c>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f022 0201 	bic.w	r2, r2, #1
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	e147      	b.n	8007868 <HAL_DMA_Abort_IT+0x41c>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0201 	bic.w	r2, r2, #1
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	e13e      	b.n	8007868 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 020e 	bic.w	r2, r2, #14
 80075f8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a2b      	ldr	r2, [pc, #172]	; (80076ac <HAL_DMA_Abort_IT+0x260>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d04a      	beq.n	800769a <HAL_DMA_Abort_IT+0x24e>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a29      	ldr	r2, [pc, #164]	; (80076b0 <HAL_DMA_Abort_IT+0x264>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d045      	beq.n	800769a <HAL_DMA_Abort_IT+0x24e>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a28      	ldr	r2, [pc, #160]	; (80076b4 <HAL_DMA_Abort_IT+0x268>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d040      	beq.n	800769a <HAL_DMA_Abort_IT+0x24e>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a26      	ldr	r2, [pc, #152]	; (80076b8 <HAL_DMA_Abort_IT+0x26c>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d03b      	beq.n	800769a <HAL_DMA_Abort_IT+0x24e>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a25      	ldr	r2, [pc, #148]	; (80076bc <HAL_DMA_Abort_IT+0x270>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d036      	beq.n	800769a <HAL_DMA_Abort_IT+0x24e>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a23      	ldr	r2, [pc, #140]	; (80076c0 <HAL_DMA_Abort_IT+0x274>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d031      	beq.n	800769a <HAL_DMA_Abort_IT+0x24e>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a22      	ldr	r2, [pc, #136]	; (80076c4 <HAL_DMA_Abort_IT+0x278>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d02c      	beq.n	800769a <HAL_DMA_Abort_IT+0x24e>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a20      	ldr	r2, [pc, #128]	; (80076c8 <HAL_DMA_Abort_IT+0x27c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d027      	beq.n	800769a <HAL_DMA_Abort_IT+0x24e>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a1f      	ldr	r2, [pc, #124]	; (80076cc <HAL_DMA_Abort_IT+0x280>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d022      	beq.n	800769a <HAL_DMA_Abort_IT+0x24e>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a1d      	ldr	r2, [pc, #116]	; (80076d0 <HAL_DMA_Abort_IT+0x284>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d01d      	beq.n	800769a <HAL_DMA_Abort_IT+0x24e>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a1c      	ldr	r2, [pc, #112]	; (80076d4 <HAL_DMA_Abort_IT+0x288>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d018      	beq.n	800769a <HAL_DMA_Abort_IT+0x24e>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a1a      	ldr	r2, [pc, #104]	; (80076d8 <HAL_DMA_Abort_IT+0x28c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d013      	beq.n	800769a <HAL_DMA_Abort_IT+0x24e>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a19      	ldr	r2, [pc, #100]	; (80076dc <HAL_DMA_Abort_IT+0x290>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d00e      	beq.n	800769a <HAL_DMA_Abort_IT+0x24e>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a17      	ldr	r2, [pc, #92]	; (80076e0 <HAL_DMA_Abort_IT+0x294>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d009      	beq.n	800769a <HAL_DMA_Abort_IT+0x24e>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a16      	ldr	r2, [pc, #88]	; (80076e4 <HAL_DMA_Abort_IT+0x298>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d004      	beq.n	800769a <HAL_DMA_Abort_IT+0x24e>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a14      	ldr	r2, [pc, #80]	; (80076e8 <HAL_DMA_Abort_IT+0x29c>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d128      	bne.n	80076ec <HAL_DMA_Abort_IT+0x2a0>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f022 0201 	bic.w	r2, r2, #1
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	e027      	b.n	80076fc <HAL_DMA_Abort_IT+0x2b0>
 80076ac:	40020010 	.word	0x40020010
 80076b0:	40020028 	.word	0x40020028
 80076b4:	40020040 	.word	0x40020040
 80076b8:	40020058 	.word	0x40020058
 80076bc:	40020070 	.word	0x40020070
 80076c0:	40020088 	.word	0x40020088
 80076c4:	400200a0 	.word	0x400200a0
 80076c8:	400200b8 	.word	0x400200b8
 80076cc:	40020410 	.word	0x40020410
 80076d0:	40020428 	.word	0x40020428
 80076d4:	40020440 	.word	0x40020440
 80076d8:	40020458 	.word	0x40020458
 80076dc:	40020470 	.word	0x40020470
 80076e0:	40020488 	.word	0x40020488
 80076e4:	400204a0 	.word	0x400204a0
 80076e8:	400204b8 	.word	0x400204b8
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f022 0201 	bic.w	r2, r2, #1
 80076fa:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a5c      	ldr	r2, [pc, #368]	; (8007874 <HAL_DMA_Abort_IT+0x428>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d072      	beq.n	80077ec <HAL_DMA_Abort_IT+0x3a0>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a5b      	ldr	r2, [pc, #364]	; (8007878 <HAL_DMA_Abort_IT+0x42c>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d06d      	beq.n	80077ec <HAL_DMA_Abort_IT+0x3a0>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a59      	ldr	r2, [pc, #356]	; (800787c <HAL_DMA_Abort_IT+0x430>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d068      	beq.n	80077ec <HAL_DMA_Abort_IT+0x3a0>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a58      	ldr	r2, [pc, #352]	; (8007880 <HAL_DMA_Abort_IT+0x434>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d063      	beq.n	80077ec <HAL_DMA_Abort_IT+0x3a0>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a56      	ldr	r2, [pc, #344]	; (8007884 <HAL_DMA_Abort_IT+0x438>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d05e      	beq.n	80077ec <HAL_DMA_Abort_IT+0x3a0>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a55      	ldr	r2, [pc, #340]	; (8007888 <HAL_DMA_Abort_IT+0x43c>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d059      	beq.n	80077ec <HAL_DMA_Abort_IT+0x3a0>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a53      	ldr	r2, [pc, #332]	; (800788c <HAL_DMA_Abort_IT+0x440>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d054      	beq.n	80077ec <HAL_DMA_Abort_IT+0x3a0>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a52      	ldr	r2, [pc, #328]	; (8007890 <HAL_DMA_Abort_IT+0x444>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d04f      	beq.n	80077ec <HAL_DMA_Abort_IT+0x3a0>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a50      	ldr	r2, [pc, #320]	; (8007894 <HAL_DMA_Abort_IT+0x448>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d04a      	beq.n	80077ec <HAL_DMA_Abort_IT+0x3a0>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a4f      	ldr	r2, [pc, #316]	; (8007898 <HAL_DMA_Abort_IT+0x44c>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d045      	beq.n	80077ec <HAL_DMA_Abort_IT+0x3a0>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a4d      	ldr	r2, [pc, #308]	; (800789c <HAL_DMA_Abort_IT+0x450>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d040      	beq.n	80077ec <HAL_DMA_Abort_IT+0x3a0>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a4c      	ldr	r2, [pc, #304]	; (80078a0 <HAL_DMA_Abort_IT+0x454>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d03b      	beq.n	80077ec <HAL_DMA_Abort_IT+0x3a0>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a4a      	ldr	r2, [pc, #296]	; (80078a4 <HAL_DMA_Abort_IT+0x458>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d036      	beq.n	80077ec <HAL_DMA_Abort_IT+0x3a0>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a49      	ldr	r2, [pc, #292]	; (80078a8 <HAL_DMA_Abort_IT+0x45c>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d031      	beq.n	80077ec <HAL_DMA_Abort_IT+0x3a0>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a47      	ldr	r2, [pc, #284]	; (80078ac <HAL_DMA_Abort_IT+0x460>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d02c      	beq.n	80077ec <HAL_DMA_Abort_IT+0x3a0>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a46      	ldr	r2, [pc, #280]	; (80078b0 <HAL_DMA_Abort_IT+0x464>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d027      	beq.n	80077ec <HAL_DMA_Abort_IT+0x3a0>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a44      	ldr	r2, [pc, #272]	; (80078b4 <HAL_DMA_Abort_IT+0x468>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d022      	beq.n	80077ec <HAL_DMA_Abort_IT+0x3a0>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a43      	ldr	r2, [pc, #268]	; (80078b8 <HAL_DMA_Abort_IT+0x46c>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d01d      	beq.n	80077ec <HAL_DMA_Abort_IT+0x3a0>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a41      	ldr	r2, [pc, #260]	; (80078bc <HAL_DMA_Abort_IT+0x470>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d018      	beq.n	80077ec <HAL_DMA_Abort_IT+0x3a0>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a40      	ldr	r2, [pc, #256]	; (80078c0 <HAL_DMA_Abort_IT+0x474>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d013      	beq.n	80077ec <HAL_DMA_Abort_IT+0x3a0>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a3e      	ldr	r2, [pc, #248]	; (80078c4 <HAL_DMA_Abort_IT+0x478>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d00e      	beq.n	80077ec <HAL_DMA_Abort_IT+0x3a0>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a3d      	ldr	r2, [pc, #244]	; (80078c8 <HAL_DMA_Abort_IT+0x47c>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d009      	beq.n	80077ec <HAL_DMA_Abort_IT+0x3a0>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a3b      	ldr	r2, [pc, #236]	; (80078cc <HAL_DMA_Abort_IT+0x480>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d004      	beq.n	80077ec <HAL_DMA_Abort_IT+0x3a0>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a3a      	ldr	r2, [pc, #232]	; (80078d0 <HAL_DMA_Abort_IT+0x484>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d101      	bne.n	80077f0 <HAL_DMA_Abort_IT+0x3a4>
 80077ec:	2301      	movs	r3, #1
 80077ee:	e000      	b.n	80077f2 <HAL_DMA_Abort_IT+0x3a6>
 80077f0:	2300      	movs	r3, #0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d028      	beq.n	8007848 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007800:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007804:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800780a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007810:	f003 031f 	and.w	r3, r3, #31
 8007814:	2201      	movs	r2, #1
 8007816:	409a      	lsls	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007824:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00c      	beq.n	8007848 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800783c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007846:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800785c:	2b00      	cmp	r3, #0
 800785e:	d003      	beq.n	8007868 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	40020010 	.word	0x40020010
 8007878:	40020028 	.word	0x40020028
 800787c:	40020040 	.word	0x40020040
 8007880:	40020058 	.word	0x40020058
 8007884:	40020070 	.word	0x40020070
 8007888:	40020088 	.word	0x40020088
 800788c:	400200a0 	.word	0x400200a0
 8007890:	400200b8 	.word	0x400200b8
 8007894:	40020410 	.word	0x40020410
 8007898:	40020428 	.word	0x40020428
 800789c:	40020440 	.word	0x40020440
 80078a0:	40020458 	.word	0x40020458
 80078a4:	40020470 	.word	0x40020470
 80078a8:	40020488 	.word	0x40020488
 80078ac:	400204a0 	.word	0x400204a0
 80078b0:	400204b8 	.word	0x400204b8
 80078b4:	58025408 	.word	0x58025408
 80078b8:	5802541c 	.word	0x5802541c
 80078bc:	58025430 	.word	0x58025430
 80078c0:	58025444 	.word	0x58025444
 80078c4:	58025458 	.word	0x58025458
 80078c8:	5802546c 	.word	0x5802546c
 80078cc:	58025480 	.word	0x58025480
 80078d0:	58025494 	.word	0x58025494

080078d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b08a      	sub	sp, #40	; 0x28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80078dc:	2300      	movs	r3, #0
 80078de:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80078e0:	4b67      	ldr	r3, [pc, #412]	; (8007a80 <HAL_DMA_IRQHandler+0x1ac>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a67      	ldr	r2, [pc, #412]	; (8007a84 <HAL_DMA_IRQHandler+0x1b0>)
 80078e6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ea:	0a9b      	lsrs	r3, r3, #10
 80078ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80078fa:	6a3b      	ldr	r3, [r7, #32]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a5f      	ldr	r2, [pc, #380]	; (8007a88 <HAL_DMA_IRQHandler+0x1b4>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d04a      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a5d      	ldr	r2, [pc, #372]	; (8007a8c <HAL_DMA_IRQHandler+0x1b8>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d045      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a5c      	ldr	r2, [pc, #368]	; (8007a90 <HAL_DMA_IRQHandler+0x1bc>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d040      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a5a      	ldr	r2, [pc, #360]	; (8007a94 <HAL_DMA_IRQHandler+0x1c0>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d03b      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a59      	ldr	r2, [pc, #356]	; (8007a98 <HAL_DMA_IRQHandler+0x1c4>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d036      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a57      	ldr	r2, [pc, #348]	; (8007a9c <HAL_DMA_IRQHandler+0x1c8>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d031      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a56      	ldr	r2, [pc, #344]	; (8007aa0 <HAL_DMA_IRQHandler+0x1cc>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d02c      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a54      	ldr	r2, [pc, #336]	; (8007aa4 <HAL_DMA_IRQHandler+0x1d0>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d027      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a53      	ldr	r2, [pc, #332]	; (8007aa8 <HAL_DMA_IRQHandler+0x1d4>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d022      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a51      	ldr	r2, [pc, #324]	; (8007aac <HAL_DMA_IRQHandler+0x1d8>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d01d      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a50      	ldr	r2, [pc, #320]	; (8007ab0 <HAL_DMA_IRQHandler+0x1dc>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d018      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a4e      	ldr	r2, [pc, #312]	; (8007ab4 <HAL_DMA_IRQHandler+0x1e0>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d013      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a4d      	ldr	r2, [pc, #308]	; (8007ab8 <HAL_DMA_IRQHandler+0x1e4>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d00e      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a4b      	ldr	r2, [pc, #300]	; (8007abc <HAL_DMA_IRQHandler+0x1e8>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d009      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a4a      	ldr	r2, [pc, #296]	; (8007ac0 <HAL_DMA_IRQHandler+0x1ec>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d004      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a48      	ldr	r2, [pc, #288]	; (8007ac4 <HAL_DMA_IRQHandler+0x1f0>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d101      	bne.n	80079aa <HAL_DMA_IRQHandler+0xd6>
 80079a6:	2301      	movs	r3, #1
 80079a8:	e000      	b.n	80079ac <HAL_DMA_IRQHandler+0xd8>
 80079aa:	2300      	movs	r3, #0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 842b 	beq.w	8008208 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b6:	f003 031f 	and.w	r3, r3, #31
 80079ba:	2208      	movs	r2, #8
 80079bc:	409a      	lsls	r2, r3
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	4013      	ands	r3, r2
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 80a2 	beq.w	8007b0c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a2e      	ldr	r2, [pc, #184]	; (8007a88 <HAL_DMA_IRQHandler+0x1b4>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d04a      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a2d      	ldr	r2, [pc, #180]	; (8007a8c <HAL_DMA_IRQHandler+0x1b8>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d045      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a2b      	ldr	r2, [pc, #172]	; (8007a90 <HAL_DMA_IRQHandler+0x1bc>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d040      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a2a      	ldr	r2, [pc, #168]	; (8007a94 <HAL_DMA_IRQHandler+0x1c0>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d03b      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a28      	ldr	r2, [pc, #160]	; (8007a98 <HAL_DMA_IRQHandler+0x1c4>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d036      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a27      	ldr	r2, [pc, #156]	; (8007a9c <HAL_DMA_IRQHandler+0x1c8>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d031      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a25      	ldr	r2, [pc, #148]	; (8007aa0 <HAL_DMA_IRQHandler+0x1cc>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d02c      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a24      	ldr	r2, [pc, #144]	; (8007aa4 <HAL_DMA_IRQHandler+0x1d0>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d027      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a22      	ldr	r2, [pc, #136]	; (8007aa8 <HAL_DMA_IRQHandler+0x1d4>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d022      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a21      	ldr	r2, [pc, #132]	; (8007aac <HAL_DMA_IRQHandler+0x1d8>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d01d      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a1f      	ldr	r2, [pc, #124]	; (8007ab0 <HAL_DMA_IRQHandler+0x1dc>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d018      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a1e      	ldr	r2, [pc, #120]	; (8007ab4 <HAL_DMA_IRQHandler+0x1e0>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d013      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a1c      	ldr	r2, [pc, #112]	; (8007ab8 <HAL_DMA_IRQHandler+0x1e4>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d00e      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a1b      	ldr	r2, [pc, #108]	; (8007abc <HAL_DMA_IRQHandler+0x1e8>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d009      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a19      	ldr	r2, [pc, #100]	; (8007ac0 <HAL_DMA_IRQHandler+0x1ec>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d004      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a18      	ldr	r2, [pc, #96]	; (8007ac4 <HAL_DMA_IRQHandler+0x1f0>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d12f      	bne.n	8007ac8 <HAL_DMA_IRQHandler+0x1f4>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0304 	and.w	r3, r3, #4
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	bf14      	ite	ne
 8007a76:	2301      	movne	r3, #1
 8007a78:	2300      	moveq	r3, #0
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	e02e      	b.n	8007adc <HAL_DMA_IRQHandler+0x208>
 8007a7e:	bf00      	nop
 8007a80:	24000014 	.word	0x24000014
 8007a84:	1b4e81b5 	.word	0x1b4e81b5
 8007a88:	40020010 	.word	0x40020010
 8007a8c:	40020028 	.word	0x40020028
 8007a90:	40020040 	.word	0x40020040
 8007a94:	40020058 	.word	0x40020058
 8007a98:	40020070 	.word	0x40020070
 8007a9c:	40020088 	.word	0x40020088
 8007aa0:	400200a0 	.word	0x400200a0
 8007aa4:	400200b8 	.word	0x400200b8
 8007aa8:	40020410 	.word	0x40020410
 8007aac:	40020428 	.word	0x40020428
 8007ab0:	40020440 	.word	0x40020440
 8007ab4:	40020458 	.word	0x40020458
 8007ab8:	40020470 	.word	0x40020470
 8007abc:	40020488 	.word	0x40020488
 8007ac0:	400204a0 	.word	0x400204a0
 8007ac4:	400204b8 	.word	0x400204b8
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0308 	and.w	r3, r3, #8
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	bf14      	ite	ne
 8007ad6:	2301      	movne	r3, #1
 8007ad8:	2300      	moveq	r3, #0
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d015      	beq.n	8007b0c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f022 0204 	bic.w	r2, r2, #4
 8007aee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007af4:	f003 031f 	and.w	r3, r3, #31
 8007af8:	2208      	movs	r2, #8
 8007afa:	409a      	lsls	r2, r3
 8007afc:	6a3b      	ldr	r3, [r7, #32]
 8007afe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b04:	f043 0201 	orr.w	r2, r3, #1
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b10:	f003 031f 	and.w	r3, r3, #31
 8007b14:	69ba      	ldr	r2, [r7, #24]
 8007b16:	fa22 f303 	lsr.w	r3, r2, r3
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d06e      	beq.n	8007c00 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a69      	ldr	r2, [pc, #420]	; (8007ccc <HAL_DMA_IRQHandler+0x3f8>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d04a      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a67      	ldr	r2, [pc, #412]	; (8007cd0 <HAL_DMA_IRQHandler+0x3fc>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d045      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a66      	ldr	r2, [pc, #408]	; (8007cd4 <HAL_DMA_IRQHandler+0x400>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d040      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a64      	ldr	r2, [pc, #400]	; (8007cd8 <HAL_DMA_IRQHandler+0x404>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d03b      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a63      	ldr	r2, [pc, #396]	; (8007cdc <HAL_DMA_IRQHandler+0x408>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d036      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a61      	ldr	r2, [pc, #388]	; (8007ce0 <HAL_DMA_IRQHandler+0x40c>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d031      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a60      	ldr	r2, [pc, #384]	; (8007ce4 <HAL_DMA_IRQHandler+0x410>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d02c      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a5e      	ldr	r2, [pc, #376]	; (8007ce8 <HAL_DMA_IRQHandler+0x414>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d027      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a5d      	ldr	r2, [pc, #372]	; (8007cec <HAL_DMA_IRQHandler+0x418>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d022      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a5b      	ldr	r2, [pc, #364]	; (8007cf0 <HAL_DMA_IRQHandler+0x41c>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d01d      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a5a      	ldr	r2, [pc, #360]	; (8007cf4 <HAL_DMA_IRQHandler+0x420>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d018      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a58      	ldr	r2, [pc, #352]	; (8007cf8 <HAL_DMA_IRQHandler+0x424>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d013      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a57      	ldr	r2, [pc, #348]	; (8007cfc <HAL_DMA_IRQHandler+0x428>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d00e      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a55      	ldr	r2, [pc, #340]	; (8007d00 <HAL_DMA_IRQHandler+0x42c>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d009      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a54      	ldr	r2, [pc, #336]	; (8007d04 <HAL_DMA_IRQHandler+0x430>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d004      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a52      	ldr	r2, [pc, #328]	; (8007d08 <HAL_DMA_IRQHandler+0x434>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d10a      	bne.n	8007bd8 <HAL_DMA_IRQHandler+0x304>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	bf14      	ite	ne
 8007bd0:	2301      	movne	r3, #1
 8007bd2:	2300      	moveq	r3, #0
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	e003      	b.n	8007be0 <HAL_DMA_IRQHandler+0x30c>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2300      	movs	r3, #0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00d      	beq.n	8007c00 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007be8:	f003 031f 	and.w	r3, r3, #31
 8007bec:	2201      	movs	r2, #1
 8007bee:	409a      	lsls	r2, r3
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf8:	f043 0202 	orr.w	r2, r3, #2
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c04:	f003 031f 	and.w	r3, r3, #31
 8007c08:	2204      	movs	r2, #4
 8007c0a:	409a      	lsls	r2, r3
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	4013      	ands	r3, r2
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 808f 	beq.w	8007d34 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a2c      	ldr	r2, [pc, #176]	; (8007ccc <HAL_DMA_IRQHandler+0x3f8>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d04a      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a2a      	ldr	r2, [pc, #168]	; (8007cd0 <HAL_DMA_IRQHandler+0x3fc>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d045      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a29      	ldr	r2, [pc, #164]	; (8007cd4 <HAL_DMA_IRQHandler+0x400>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d040      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a27      	ldr	r2, [pc, #156]	; (8007cd8 <HAL_DMA_IRQHandler+0x404>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d03b      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a26      	ldr	r2, [pc, #152]	; (8007cdc <HAL_DMA_IRQHandler+0x408>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d036      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a24      	ldr	r2, [pc, #144]	; (8007ce0 <HAL_DMA_IRQHandler+0x40c>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d031      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a23      	ldr	r2, [pc, #140]	; (8007ce4 <HAL_DMA_IRQHandler+0x410>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d02c      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a21      	ldr	r2, [pc, #132]	; (8007ce8 <HAL_DMA_IRQHandler+0x414>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d027      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a20      	ldr	r2, [pc, #128]	; (8007cec <HAL_DMA_IRQHandler+0x418>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d022      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a1e      	ldr	r2, [pc, #120]	; (8007cf0 <HAL_DMA_IRQHandler+0x41c>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d01d      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a1d      	ldr	r2, [pc, #116]	; (8007cf4 <HAL_DMA_IRQHandler+0x420>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d018      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a1b      	ldr	r2, [pc, #108]	; (8007cf8 <HAL_DMA_IRQHandler+0x424>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d013      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a1a      	ldr	r2, [pc, #104]	; (8007cfc <HAL_DMA_IRQHandler+0x428>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d00e      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a18      	ldr	r2, [pc, #96]	; (8007d00 <HAL_DMA_IRQHandler+0x42c>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d009      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a17      	ldr	r2, [pc, #92]	; (8007d04 <HAL_DMA_IRQHandler+0x430>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d004      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a15      	ldr	r2, [pc, #84]	; (8007d08 <HAL_DMA_IRQHandler+0x434>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d12a      	bne.n	8007d0c <HAL_DMA_IRQHandler+0x438>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0302 	and.w	r3, r3, #2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	bf14      	ite	ne
 8007cc4:	2301      	movne	r3, #1
 8007cc6:	2300      	moveq	r3, #0
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	e023      	b.n	8007d14 <HAL_DMA_IRQHandler+0x440>
 8007ccc:	40020010 	.word	0x40020010
 8007cd0:	40020028 	.word	0x40020028
 8007cd4:	40020040 	.word	0x40020040
 8007cd8:	40020058 	.word	0x40020058
 8007cdc:	40020070 	.word	0x40020070
 8007ce0:	40020088 	.word	0x40020088
 8007ce4:	400200a0 	.word	0x400200a0
 8007ce8:	400200b8 	.word	0x400200b8
 8007cec:	40020410 	.word	0x40020410
 8007cf0:	40020428 	.word	0x40020428
 8007cf4:	40020440 	.word	0x40020440
 8007cf8:	40020458 	.word	0x40020458
 8007cfc:	40020470 	.word	0x40020470
 8007d00:	40020488 	.word	0x40020488
 8007d04:	400204a0 	.word	0x400204a0
 8007d08:	400204b8 	.word	0x400204b8
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2300      	movs	r3, #0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00d      	beq.n	8007d34 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d1c:	f003 031f 	and.w	r3, r3, #31
 8007d20:	2204      	movs	r2, #4
 8007d22:	409a      	lsls	r2, r3
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d2c:	f043 0204 	orr.w	r2, r3, #4
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d38:	f003 031f 	and.w	r3, r3, #31
 8007d3c:	2210      	movs	r2, #16
 8007d3e:	409a      	lsls	r2, r3
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	4013      	ands	r3, r2
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 80a6 	beq.w	8007e96 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a85      	ldr	r2, [pc, #532]	; (8007f64 <HAL_DMA_IRQHandler+0x690>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d04a      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a83      	ldr	r2, [pc, #524]	; (8007f68 <HAL_DMA_IRQHandler+0x694>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d045      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a82      	ldr	r2, [pc, #520]	; (8007f6c <HAL_DMA_IRQHandler+0x698>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d040      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a80      	ldr	r2, [pc, #512]	; (8007f70 <HAL_DMA_IRQHandler+0x69c>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d03b      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a7f      	ldr	r2, [pc, #508]	; (8007f74 <HAL_DMA_IRQHandler+0x6a0>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d036      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a7d      	ldr	r2, [pc, #500]	; (8007f78 <HAL_DMA_IRQHandler+0x6a4>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d031      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a7c      	ldr	r2, [pc, #496]	; (8007f7c <HAL_DMA_IRQHandler+0x6a8>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d02c      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a7a      	ldr	r2, [pc, #488]	; (8007f80 <HAL_DMA_IRQHandler+0x6ac>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d027      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a79      	ldr	r2, [pc, #484]	; (8007f84 <HAL_DMA_IRQHandler+0x6b0>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d022      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a77      	ldr	r2, [pc, #476]	; (8007f88 <HAL_DMA_IRQHandler+0x6b4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d01d      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a76      	ldr	r2, [pc, #472]	; (8007f8c <HAL_DMA_IRQHandler+0x6b8>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d018      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a74      	ldr	r2, [pc, #464]	; (8007f90 <HAL_DMA_IRQHandler+0x6bc>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d013      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a73      	ldr	r2, [pc, #460]	; (8007f94 <HAL_DMA_IRQHandler+0x6c0>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d00e      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a71      	ldr	r2, [pc, #452]	; (8007f98 <HAL_DMA_IRQHandler+0x6c4>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d009      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a70      	ldr	r2, [pc, #448]	; (8007f9c <HAL_DMA_IRQHandler+0x6c8>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d004      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a6e      	ldr	r2, [pc, #440]	; (8007fa0 <HAL_DMA_IRQHandler+0x6cc>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d10a      	bne.n	8007e00 <HAL_DMA_IRQHandler+0x52c>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0308 	and.w	r3, r3, #8
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	bf14      	ite	ne
 8007df8:	2301      	movne	r3, #1
 8007dfa:	2300      	moveq	r3, #0
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	e009      	b.n	8007e14 <HAL_DMA_IRQHandler+0x540>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0304 	and.w	r3, r3, #4
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	bf14      	ite	ne
 8007e0e:	2301      	movne	r3, #1
 8007e10:	2300      	moveq	r3, #0
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d03e      	beq.n	8007e96 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e1c:	f003 031f 	and.w	r3, r3, #31
 8007e20:	2210      	movs	r2, #16
 8007e22:	409a      	lsls	r2, r3
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d018      	beq.n	8007e68 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d108      	bne.n	8007e56 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d024      	beq.n	8007e96 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	4798      	blx	r3
 8007e54:	e01f      	b.n	8007e96 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d01b      	beq.n	8007e96 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	4798      	blx	r3
 8007e66:	e016      	b.n	8007e96 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d107      	bne.n	8007e86 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 0208 	bic.w	r2, r2, #8
 8007e84:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e9a:	f003 031f 	and.w	r3, r3, #31
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	409a      	lsls	r2, r3
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 8110 	beq.w	80080cc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a2c      	ldr	r2, [pc, #176]	; (8007f64 <HAL_DMA_IRQHandler+0x690>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d04a      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a2b      	ldr	r2, [pc, #172]	; (8007f68 <HAL_DMA_IRQHandler+0x694>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d045      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a29      	ldr	r2, [pc, #164]	; (8007f6c <HAL_DMA_IRQHandler+0x698>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d040      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a28      	ldr	r2, [pc, #160]	; (8007f70 <HAL_DMA_IRQHandler+0x69c>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d03b      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a26      	ldr	r2, [pc, #152]	; (8007f74 <HAL_DMA_IRQHandler+0x6a0>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d036      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a25      	ldr	r2, [pc, #148]	; (8007f78 <HAL_DMA_IRQHandler+0x6a4>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d031      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a23      	ldr	r2, [pc, #140]	; (8007f7c <HAL_DMA_IRQHandler+0x6a8>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d02c      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a22      	ldr	r2, [pc, #136]	; (8007f80 <HAL_DMA_IRQHandler+0x6ac>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d027      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a20      	ldr	r2, [pc, #128]	; (8007f84 <HAL_DMA_IRQHandler+0x6b0>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d022      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a1f      	ldr	r2, [pc, #124]	; (8007f88 <HAL_DMA_IRQHandler+0x6b4>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d01d      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a1d      	ldr	r2, [pc, #116]	; (8007f8c <HAL_DMA_IRQHandler+0x6b8>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d018      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a1c      	ldr	r2, [pc, #112]	; (8007f90 <HAL_DMA_IRQHandler+0x6bc>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d013      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a1a      	ldr	r2, [pc, #104]	; (8007f94 <HAL_DMA_IRQHandler+0x6c0>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d00e      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a19      	ldr	r2, [pc, #100]	; (8007f98 <HAL_DMA_IRQHandler+0x6c4>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d009      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a17      	ldr	r2, [pc, #92]	; (8007f9c <HAL_DMA_IRQHandler+0x6c8>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d004      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a16      	ldr	r2, [pc, #88]	; (8007fa0 <HAL_DMA_IRQHandler+0x6cc>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d12b      	bne.n	8007fa4 <HAL_DMA_IRQHandler+0x6d0>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 0310 	and.w	r3, r3, #16
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	bf14      	ite	ne
 8007f5a:	2301      	movne	r3, #1
 8007f5c:	2300      	moveq	r3, #0
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	e02a      	b.n	8007fb8 <HAL_DMA_IRQHandler+0x6e4>
 8007f62:	bf00      	nop
 8007f64:	40020010 	.word	0x40020010
 8007f68:	40020028 	.word	0x40020028
 8007f6c:	40020040 	.word	0x40020040
 8007f70:	40020058 	.word	0x40020058
 8007f74:	40020070 	.word	0x40020070
 8007f78:	40020088 	.word	0x40020088
 8007f7c:	400200a0 	.word	0x400200a0
 8007f80:	400200b8 	.word	0x400200b8
 8007f84:	40020410 	.word	0x40020410
 8007f88:	40020428 	.word	0x40020428
 8007f8c:	40020440 	.word	0x40020440
 8007f90:	40020458 	.word	0x40020458
 8007f94:	40020470 	.word	0x40020470
 8007f98:	40020488 	.word	0x40020488
 8007f9c:	400204a0 	.word	0x400204a0
 8007fa0:	400204b8 	.word	0x400204b8
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0302 	and.w	r3, r3, #2
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	bf14      	ite	ne
 8007fb2:	2301      	movne	r3, #1
 8007fb4:	2300      	moveq	r3, #0
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 8087 	beq.w	80080cc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fc2:	f003 031f 	and.w	r3, r3, #31
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	409a      	lsls	r2, r3
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b04      	cmp	r3, #4
 8007fd8:	d139      	bne.n	800804e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 0216 	bic.w	r2, r2, #22
 8007fe8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	695a      	ldr	r2, [r3, #20]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ff8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d103      	bne.n	800800a <HAL_DMA_IRQHandler+0x736>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008006:	2b00      	cmp	r3, #0
 8008008:	d007      	beq.n	800801a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f022 0208 	bic.w	r2, r2, #8
 8008018:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800801e:	f003 031f 	and.w	r3, r3, #31
 8008022:	223f      	movs	r2, #63	; 0x3f
 8008024:	409a      	lsls	r2, r3
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 834a 	beq.w	80086d8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	4798      	blx	r3
          }
          return;
 800804c:	e344      	b.n	80086d8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d018      	beq.n	800808e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d108      	bne.n	800807c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800806e:	2b00      	cmp	r3, #0
 8008070:	d02c      	beq.n	80080cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	4798      	blx	r3
 800807a:	e027      	b.n	80080cc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008080:	2b00      	cmp	r3, #0
 8008082:	d023      	beq.n	80080cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	4798      	blx	r3
 800808c:	e01e      	b.n	80080cc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10f      	bne.n	80080bc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f022 0210 	bic.w	r2, r2, #16
 80080aa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f000 8306 	beq.w	80086e2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f000 8088 	beq.w	80081f4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2204      	movs	r2, #4
 80080e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a7a      	ldr	r2, [pc, #488]	; (80082dc <HAL_DMA_IRQHandler+0xa08>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d04a      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a79      	ldr	r2, [pc, #484]	; (80082e0 <HAL_DMA_IRQHandler+0xa0c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d045      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a77      	ldr	r2, [pc, #476]	; (80082e4 <HAL_DMA_IRQHandler+0xa10>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d040      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a76      	ldr	r2, [pc, #472]	; (80082e8 <HAL_DMA_IRQHandler+0xa14>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d03b      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a74      	ldr	r2, [pc, #464]	; (80082ec <HAL_DMA_IRQHandler+0xa18>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d036      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a73      	ldr	r2, [pc, #460]	; (80082f0 <HAL_DMA_IRQHandler+0xa1c>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d031      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a71      	ldr	r2, [pc, #452]	; (80082f4 <HAL_DMA_IRQHandler+0xa20>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d02c      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a70      	ldr	r2, [pc, #448]	; (80082f8 <HAL_DMA_IRQHandler+0xa24>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d027      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a6e      	ldr	r2, [pc, #440]	; (80082fc <HAL_DMA_IRQHandler+0xa28>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d022      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a6d      	ldr	r2, [pc, #436]	; (8008300 <HAL_DMA_IRQHandler+0xa2c>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d01d      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a6b      	ldr	r2, [pc, #428]	; (8008304 <HAL_DMA_IRQHandler+0xa30>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d018      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a6a      	ldr	r2, [pc, #424]	; (8008308 <HAL_DMA_IRQHandler+0xa34>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d013      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a68      	ldr	r2, [pc, #416]	; (800830c <HAL_DMA_IRQHandler+0xa38>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d00e      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a67      	ldr	r2, [pc, #412]	; (8008310 <HAL_DMA_IRQHandler+0xa3c>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d009      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a65      	ldr	r2, [pc, #404]	; (8008314 <HAL_DMA_IRQHandler+0xa40>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d004      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a64      	ldr	r2, [pc, #400]	; (8008318 <HAL_DMA_IRQHandler+0xa44>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d108      	bne.n	800819e <HAL_DMA_IRQHandler+0x8ca>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 0201 	bic.w	r2, r2, #1
 800819a:	601a      	str	r2, [r3, #0]
 800819c:	e007      	b.n	80081ae <HAL_DMA_IRQHandler+0x8da>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f022 0201 	bic.w	r2, r2, #1
 80081ac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	3301      	adds	r3, #1
 80081b2:	60fb      	str	r3, [r7, #12]
 80081b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d307      	bcc.n	80081ca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1f2      	bne.n	80081ae <HAL_DMA_IRQHandler+0x8da>
 80081c8:	e000      	b.n	80081cc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80081ca:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d004      	beq.n	80081e4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2203      	movs	r2, #3
 80081de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80081e2:	e003      	b.n	80081ec <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 8272 	beq.w	80086e2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	4798      	blx	r3
 8008206:	e26c      	b.n	80086e2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a43      	ldr	r2, [pc, #268]	; (800831c <HAL_DMA_IRQHandler+0xa48>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d022      	beq.n	8008258 <HAL_DMA_IRQHandler+0x984>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a42      	ldr	r2, [pc, #264]	; (8008320 <HAL_DMA_IRQHandler+0xa4c>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d01d      	beq.n	8008258 <HAL_DMA_IRQHandler+0x984>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a40      	ldr	r2, [pc, #256]	; (8008324 <HAL_DMA_IRQHandler+0xa50>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d018      	beq.n	8008258 <HAL_DMA_IRQHandler+0x984>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a3f      	ldr	r2, [pc, #252]	; (8008328 <HAL_DMA_IRQHandler+0xa54>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d013      	beq.n	8008258 <HAL_DMA_IRQHandler+0x984>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a3d      	ldr	r2, [pc, #244]	; (800832c <HAL_DMA_IRQHandler+0xa58>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d00e      	beq.n	8008258 <HAL_DMA_IRQHandler+0x984>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a3c      	ldr	r2, [pc, #240]	; (8008330 <HAL_DMA_IRQHandler+0xa5c>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d009      	beq.n	8008258 <HAL_DMA_IRQHandler+0x984>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a3a      	ldr	r2, [pc, #232]	; (8008334 <HAL_DMA_IRQHandler+0xa60>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d004      	beq.n	8008258 <HAL_DMA_IRQHandler+0x984>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a39      	ldr	r2, [pc, #228]	; (8008338 <HAL_DMA_IRQHandler+0xa64>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d101      	bne.n	800825c <HAL_DMA_IRQHandler+0x988>
 8008258:	2301      	movs	r3, #1
 800825a:	e000      	b.n	800825e <HAL_DMA_IRQHandler+0x98a>
 800825c:	2300      	movs	r3, #0
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 823f 	beq.w	80086e2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008270:	f003 031f 	and.w	r3, r3, #31
 8008274:	2204      	movs	r2, #4
 8008276:	409a      	lsls	r2, r3
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	4013      	ands	r3, r2
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 80cd 	beq.w	800841c <HAL_DMA_IRQHandler+0xb48>
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b00      	cmp	r3, #0
 800828a:	f000 80c7 	beq.w	800841c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008292:	f003 031f 	and.w	r3, r3, #31
 8008296:	2204      	movs	r2, #4
 8008298:	409a      	lsls	r2, r3
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d049      	beq.n	800833c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d109      	bne.n	80082c6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f000 8210 	beq.w	80086dc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082c4:	e20a      	b.n	80086dc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f000 8206 	beq.w	80086dc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082d8:	e200      	b.n	80086dc <HAL_DMA_IRQHandler+0xe08>
 80082da:	bf00      	nop
 80082dc:	40020010 	.word	0x40020010
 80082e0:	40020028 	.word	0x40020028
 80082e4:	40020040 	.word	0x40020040
 80082e8:	40020058 	.word	0x40020058
 80082ec:	40020070 	.word	0x40020070
 80082f0:	40020088 	.word	0x40020088
 80082f4:	400200a0 	.word	0x400200a0
 80082f8:	400200b8 	.word	0x400200b8
 80082fc:	40020410 	.word	0x40020410
 8008300:	40020428 	.word	0x40020428
 8008304:	40020440 	.word	0x40020440
 8008308:	40020458 	.word	0x40020458
 800830c:	40020470 	.word	0x40020470
 8008310:	40020488 	.word	0x40020488
 8008314:	400204a0 	.word	0x400204a0
 8008318:	400204b8 	.word	0x400204b8
 800831c:	58025408 	.word	0x58025408
 8008320:	5802541c 	.word	0x5802541c
 8008324:	58025430 	.word	0x58025430
 8008328:	58025444 	.word	0x58025444
 800832c:	58025458 	.word	0x58025458
 8008330:	5802546c 	.word	0x5802546c
 8008334:	58025480 	.word	0x58025480
 8008338:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	f003 0320 	and.w	r3, r3, #32
 8008342:	2b00      	cmp	r3, #0
 8008344:	d160      	bne.n	8008408 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a8c      	ldr	r2, [pc, #560]	; (800857c <HAL_DMA_IRQHandler+0xca8>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d04a      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a8a      	ldr	r2, [pc, #552]	; (8008580 <HAL_DMA_IRQHandler+0xcac>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d045      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a89      	ldr	r2, [pc, #548]	; (8008584 <HAL_DMA_IRQHandler+0xcb0>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d040      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a87      	ldr	r2, [pc, #540]	; (8008588 <HAL_DMA_IRQHandler+0xcb4>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d03b      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a86      	ldr	r2, [pc, #536]	; (800858c <HAL_DMA_IRQHandler+0xcb8>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d036      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a84      	ldr	r2, [pc, #528]	; (8008590 <HAL_DMA_IRQHandler+0xcbc>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d031      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a83      	ldr	r2, [pc, #524]	; (8008594 <HAL_DMA_IRQHandler+0xcc0>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d02c      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a81      	ldr	r2, [pc, #516]	; (8008598 <HAL_DMA_IRQHandler+0xcc4>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d027      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a80      	ldr	r2, [pc, #512]	; (800859c <HAL_DMA_IRQHandler+0xcc8>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d022      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a7e      	ldr	r2, [pc, #504]	; (80085a0 <HAL_DMA_IRQHandler+0xccc>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d01d      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a7d      	ldr	r2, [pc, #500]	; (80085a4 <HAL_DMA_IRQHandler+0xcd0>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d018      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a7b      	ldr	r2, [pc, #492]	; (80085a8 <HAL_DMA_IRQHandler+0xcd4>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d013      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a7a      	ldr	r2, [pc, #488]	; (80085ac <HAL_DMA_IRQHandler+0xcd8>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d00e      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a78      	ldr	r2, [pc, #480]	; (80085b0 <HAL_DMA_IRQHandler+0xcdc>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d009      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a77      	ldr	r2, [pc, #476]	; (80085b4 <HAL_DMA_IRQHandler+0xce0>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d004      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a75      	ldr	r2, [pc, #468]	; (80085b8 <HAL_DMA_IRQHandler+0xce4>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d108      	bne.n	80083f8 <HAL_DMA_IRQHandler+0xb24>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f022 0208 	bic.w	r2, r2, #8
 80083f4:	601a      	str	r2, [r3, #0]
 80083f6:	e007      	b.n	8008408 <HAL_DMA_IRQHandler+0xb34>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f022 0204 	bic.w	r2, r2, #4
 8008406:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840c:	2b00      	cmp	r3, #0
 800840e:	f000 8165 	beq.w	80086dc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800841a:	e15f      	b.n	80086dc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008420:	f003 031f 	and.w	r3, r3, #31
 8008424:	2202      	movs	r2, #2
 8008426:	409a      	lsls	r2, r3
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	4013      	ands	r3, r2
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 80c5 	beq.w	80085bc <HAL_DMA_IRQHandler+0xce8>
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	f003 0302 	and.w	r3, r3, #2
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 80bf 	beq.w	80085bc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008442:	f003 031f 	and.w	r3, r3, #31
 8008446:	2202      	movs	r2, #2
 8008448:	409a      	lsls	r2, r3
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008454:	2b00      	cmp	r3, #0
 8008456:	d018      	beq.n	800848a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d109      	bne.n	8008476 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008466:	2b00      	cmp	r3, #0
 8008468:	f000 813a 	beq.w	80086e0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008474:	e134      	b.n	80086e0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800847a:	2b00      	cmp	r3, #0
 800847c:	f000 8130 	beq.w	80086e0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008488:	e12a      	b.n	80086e0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	f003 0320 	and.w	r3, r3, #32
 8008490:	2b00      	cmp	r3, #0
 8008492:	d168      	bne.n	8008566 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a38      	ldr	r2, [pc, #224]	; (800857c <HAL_DMA_IRQHandler+0xca8>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d04a      	beq.n	8008534 <HAL_DMA_IRQHandler+0xc60>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a37      	ldr	r2, [pc, #220]	; (8008580 <HAL_DMA_IRQHandler+0xcac>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d045      	beq.n	8008534 <HAL_DMA_IRQHandler+0xc60>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a35      	ldr	r2, [pc, #212]	; (8008584 <HAL_DMA_IRQHandler+0xcb0>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d040      	beq.n	8008534 <HAL_DMA_IRQHandler+0xc60>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a34      	ldr	r2, [pc, #208]	; (8008588 <HAL_DMA_IRQHandler+0xcb4>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d03b      	beq.n	8008534 <HAL_DMA_IRQHandler+0xc60>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a32      	ldr	r2, [pc, #200]	; (800858c <HAL_DMA_IRQHandler+0xcb8>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d036      	beq.n	8008534 <HAL_DMA_IRQHandler+0xc60>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a31      	ldr	r2, [pc, #196]	; (8008590 <HAL_DMA_IRQHandler+0xcbc>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d031      	beq.n	8008534 <HAL_DMA_IRQHandler+0xc60>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a2f      	ldr	r2, [pc, #188]	; (8008594 <HAL_DMA_IRQHandler+0xcc0>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d02c      	beq.n	8008534 <HAL_DMA_IRQHandler+0xc60>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a2e      	ldr	r2, [pc, #184]	; (8008598 <HAL_DMA_IRQHandler+0xcc4>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d027      	beq.n	8008534 <HAL_DMA_IRQHandler+0xc60>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a2c      	ldr	r2, [pc, #176]	; (800859c <HAL_DMA_IRQHandler+0xcc8>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d022      	beq.n	8008534 <HAL_DMA_IRQHandler+0xc60>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a2b      	ldr	r2, [pc, #172]	; (80085a0 <HAL_DMA_IRQHandler+0xccc>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d01d      	beq.n	8008534 <HAL_DMA_IRQHandler+0xc60>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a29      	ldr	r2, [pc, #164]	; (80085a4 <HAL_DMA_IRQHandler+0xcd0>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d018      	beq.n	8008534 <HAL_DMA_IRQHandler+0xc60>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a28      	ldr	r2, [pc, #160]	; (80085a8 <HAL_DMA_IRQHandler+0xcd4>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d013      	beq.n	8008534 <HAL_DMA_IRQHandler+0xc60>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a26      	ldr	r2, [pc, #152]	; (80085ac <HAL_DMA_IRQHandler+0xcd8>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d00e      	beq.n	8008534 <HAL_DMA_IRQHandler+0xc60>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a25      	ldr	r2, [pc, #148]	; (80085b0 <HAL_DMA_IRQHandler+0xcdc>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d009      	beq.n	8008534 <HAL_DMA_IRQHandler+0xc60>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a23      	ldr	r2, [pc, #140]	; (80085b4 <HAL_DMA_IRQHandler+0xce0>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d004      	beq.n	8008534 <HAL_DMA_IRQHandler+0xc60>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a22      	ldr	r2, [pc, #136]	; (80085b8 <HAL_DMA_IRQHandler+0xce4>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d108      	bne.n	8008546 <HAL_DMA_IRQHandler+0xc72>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f022 0214 	bic.w	r2, r2, #20
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	e007      	b.n	8008556 <HAL_DMA_IRQHandler+0xc82>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f022 020a 	bic.w	r2, r2, #10
 8008554:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856a:	2b00      	cmp	r3, #0
 800856c:	f000 80b8 	beq.w	80086e0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008578:	e0b2      	b.n	80086e0 <HAL_DMA_IRQHandler+0xe0c>
 800857a:	bf00      	nop
 800857c:	40020010 	.word	0x40020010
 8008580:	40020028 	.word	0x40020028
 8008584:	40020040 	.word	0x40020040
 8008588:	40020058 	.word	0x40020058
 800858c:	40020070 	.word	0x40020070
 8008590:	40020088 	.word	0x40020088
 8008594:	400200a0 	.word	0x400200a0
 8008598:	400200b8 	.word	0x400200b8
 800859c:	40020410 	.word	0x40020410
 80085a0:	40020428 	.word	0x40020428
 80085a4:	40020440 	.word	0x40020440
 80085a8:	40020458 	.word	0x40020458
 80085ac:	40020470 	.word	0x40020470
 80085b0:	40020488 	.word	0x40020488
 80085b4:	400204a0 	.word	0x400204a0
 80085b8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085c0:	f003 031f 	and.w	r3, r3, #31
 80085c4:	2208      	movs	r2, #8
 80085c6:	409a      	lsls	r2, r3
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	4013      	ands	r3, r2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f000 8088 	beq.w	80086e2 <HAL_DMA_IRQHandler+0xe0e>
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	f003 0308 	and.w	r3, r3, #8
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 8082 	beq.w	80086e2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a41      	ldr	r2, [pc, #260]	; (80086e8 <HAL_DMA_IRQHandler+0xe14>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d04a      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a3f      	ldr	r2, [pc, #252]	; (80086ec <HAL_DMA_IRQHandler+0xe18>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d045      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a3e      	ldr	r2, [pc, #248]	; (80086f0 <HAL_DMA_IRQHandler+0xe1c>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d040      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a3c      	ldr	r2, [pc, #240]	; (80086f4 <HAL_DMA_IRQHandler+0xe20>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d03b      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a3b      	ldr	r2, [pc, #236]	; (80086f8 <HAL_DMA_IRQHandler+0xe24>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d036      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a39      	ldr	r2, [pc, #228]	; (80086fc <HAL_DMA_IRQHandler+0xe28>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d031      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a38      	ldr	r2, [pc, #224]	; (8008700 <HAL_DMA_IRQHandler+0xe2c>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d02c      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a36      	ldr	r2, [pc, #216]	; (8008704 <HAL_DMA_IRQHandler+0xe30>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d027      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a35      	ldr	r2, [pc, #212]	; (8008708 <HAL_DMA_IRQHandler+0xe34>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d022      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a33      	ldr	r2, [pc, #204]	; (800870c <HAL_DMA_IRQHandler+0xe38>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d01d      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a32      	ldr	r2, [pc, #200]	; (8008710 <HAL_DMA_IRQHandler+0xe3c>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d018      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a30      	ldr	r2, [pc, #192]	; (8008714 <HAL_DMA_IRQHandler+0xe40>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d013      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a2f      	ldr	r2, [pc, #188]	; (8008718 <HAL_DMA_IRQHandler+0xe44>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d00e      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a2d      	ldr	r2, [pc, #180]	; (800871c <HAL_DMA_IRQHandler+0xe48>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d009      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a2c      	ldr	r2, [pc, #176]	; (8008720 <HAL_DMA_IRQHandler+0xe4c>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d004      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a2a      	ldr	r2, [pc, #168]	; (8008724 <HAL_DMA_IRQHandler+0xe50>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d108      	bne.n	8008690 <HAL_DMA_IRQHandler+0xdbc>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f022 021c 	bic.w	r2, r2, #28
 800868c:	601a      	str	r2, [r3, #0]
 800868e:	e007      	b.n	80086a0 <HAL_DMA_IRQHandler+0xdcc>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f022 020e 	bic.w	r2, r2, #14
 800869e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086a4:	f003 031f 	and.w	r3, r3, #31
 80086a8:	2201      	movs	r2, #1
 80086aa:	409a      	lsls	r2, r3
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2201      	movs	r2, #1
 80086ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d009      	beq.n	80086e2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	4798      	blx	r3
 80086d6:	e004      	b.n	80086e2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80086d8:	bf00      	nop
 80086da:	e002      	b.n	80086e2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086dc:	bf00      	nop
 80086de:	e000      	b.n	80086e2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086e0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80086e2:	3728      	adds	r7, #40	; 0x28
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	40020010 	.word	0x40020010
 80086ec:	40020028 	.word	0x40020028
 80086f0:	40020040 	.word	0x40020040
 80086f4:	40020058 	.word	0x40020058
 80086f8:	40020070 	.word	0x40020070
 80086fc:	40020088 	.word	0x40020088
 8008700:	400200a0 	.word	0x400200a0
 8008704:	400200b8 	.word	0x400200b8
 8008708:	40020410 	.word	0x40020410
 800870c:	40020428 	.word	0x40020428
 8008710:	40020440 	.word	0x40020440
 8008714:	40020458 	.word	0x40020458
 8008718:	40020470 	.word	0x40020470
 800871c:	40020488 	.word	0x40020488
 8008720:	400204a0 	.word	0x400204a0
 8008724:	400204b8 	.word	0x400204b8

08008728 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008728:	b480      	push	{r7}
 800872a:	b087      	sub	sp, #28
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
 8008734:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800873a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008740:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a84      	ldr	r2, [pc, #528]	; (8008958 <DMA_SetConfig+0x230>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d072      	beq.n	8008832 <DMA_SetConfig+0x10a>
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a82      	ldr	r2, [pc, #520]	; (800895c <DMA_SetConfig+0x234>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d06d      	beq.n	8008832 <DMA_SetConfig+0x10a>
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a81      	ldr	r2, [pc, #516]	; (8008960 <DMA_SetConfig+0x238>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d068      	beq.n	8008832 <DMA_SetConfig+0x10a>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a7f      	ldr	r2, [pc, #508]	; (8008964 <DMA_SetConfig+0x23c>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d063      	beq.n	8008832 <DMA_SetConfig+0x10a>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a7e      	ldr	r2, [pc, #504]	; (8008968 <DMA_SetConfig+0x240>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d05e      	beq.n	8008832 <DMA_SetConfig+0x10a>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a7c      	ldr	r2, [pc, #496]	; (800896c <DMA_SetConfig+0x244>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d059      	beq.n	8008832 <DMA_SetConfig+0x10a>
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a7b      	ldr	r2, [pc, #492]	; (8008970 <DMA_SetConfig+0x248>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d054      	beq.n	8008832 <DMA_SetConfig+0x10a>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a79      	ldr	r2, [pc, #484]	; (8008974 <DMA_SetConfig+0x24c>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d04f      	beq.n	8008832 <DMA_SetConfig+0x10a>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a78      	ldr	r2, [pc, #480]	; (8008978 <DMA_SetConfig+0x250>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d04a      	beq.n	8008832 <DMA_SetConfig+0x10a>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a76      	ldr	r2, [pc, #472]	; (800897c <DMA_SetConfig+0x254>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d045      	beq.n	8008832 <DMA_SetConfig+0x10a>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a75      	ldr	r2, [pc, #468]	; (8008980 <DMA_SetConfig+0x258>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d040      	beq.n	8008832 <DMA_SetConfig+0x10a>
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a73      	ldr	r2, [pc, #460]	; (8008984 <DMA_SetConfig+0x25c>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d03b      	beq.n	8008832 <DMA_SetConfig+0x10a>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a72      	ldr	r2, [pc, #456]	; (8008988 <DMA_SetConfig+0x260>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d036      	beq.n	8008832 <DMA_SetConfig+0x10a>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a70      	ldr	r2, [pc, #448]	; (800898c <DMA_SetConfig+0x264>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d031      	beq.n	8008832 <DMA_SetConfig+0x10a>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a6f      	ldr	r2, [pc, #444]	; (8008990 <DMA_SetConfig+0x268>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d02c      	beq.n	8008832 <DMA_SetConfig+0x10a>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a6d      	ldr	r2, [pc, #436]	; (8008994 <DMA_SetConfig+0x26c>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d027      	beq.n	8008832 <DMA_SetConfig+0x10a>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a6c      	ldr	r2, [pc, #432]	; (8008998 <DMA_SetConfig+0x270>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d022      	beq.n	8008832 <DMA_SetConfig+0x10a>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a6a      	ldr	r2, [pc, #424]	; (800899c <DMA_SetConfig+0x274>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d01d      	beq.n	8008832 <DMA_SetConfig+0x10a>
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a69      	ldr	r2, [pc, #420]	; (80089a0 <DMA_SetConfig+0x278>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d018      	beq.n	8008832 <DMA_SetConfig+0x10a>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a67      	ldr	r2, [pc, #412]	; (80089a4 <DMA_SetConfig+0x27c>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d013      	beq.n	8008832 <DMA_SetConfig+0x10a>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a66      	ldr	r2, [pc, #408]	; (80089a8 <DMA_SetConfig+0x280>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d00e      	beq.n	8008832 <DMA_SetConfig+0x10a>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a64      	ldr	r2, [pc, #400]	; (80089ac <DMA_SetConfig+0x284>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d009      	beq.n	8008832 <DMA_SetConfig+0x10a>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a63      	ldr	r2, [pc, #396]	; (80089b0 <DMA_SetConfig+0x288>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d004      	beq.n	8008832 <DMA_SetConfig+0x10a>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a61      	ldr	r2, [pc, #388]	; (80089b4 <DMA_SetConfig+0x28c>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d101      	bne.n	8008836 <DMA_SetConfig+0x10e>
 8008832:	2301      	movs	r3, #1
 8008834:	e000      	b.n	8008838 <DMA_SetConfig+0x110>
 8008836:	2300      	movs	r3, #0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00d      	beq.n	8008858 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008844:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800884a:	2b00      	cmp	r3, #0
 800884c:	d004      	beq.n	8008858 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008856:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a3e      	ldr	r2, [pc, #248]	; (8008958 <DMA_SetConfig+0x230>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d04a      	beq.n	80088f8 <DMA_SetConfig+0x1d0>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a3d      	ldr	r2, [pc, #244]	; (800895c <DMA_SetConfig+0x234>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d045      	beq.n	80088f8 <DMA_SetConfig+0x1d0>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a3b      	ldr	r2, [pc, #236]	; (8008960 <DMA_SetConfig+0x238>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d040      	beq.n	80088f8 <DMA_SetConfig+0x1d0>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a3a      	ldr	r2, [pc, #232]	; (8008964 <DMA_SetConfig+0x23c>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d03b      	beq.n	80088f8 <DMA_SetConfig+0x1d0>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a38      	ldr	r2, [pc, #224]	; (8008968 <DMA_SetConfig+0x240>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d036      	beq.n	80088f8 <DMA_SetConfig+0x1d0>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a37      	ldr	r2, [pc, #220]	; (800896c <DMA_SetConfig+0x244>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d031      	beq.n	80088f8 <DMA_SetConfig+0x1d0>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a35      	ldr	r2, [pc, #212]	; (8008970 <DMA_SetConfig+0x248>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d02c      	beq.n	80088f8 <DMA_SetConfig+0x1d0>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a34      	ldr	r2, [pc, #208]	; (8008974 <DMA_SetConfig+0x24c>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d027      	beq.n	80088f8 <DMA_SetConfig+0x1d0>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a32      	ldr	r2, [pc, #200]	; (8008978 <DMA_SetConfig+0x250>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d022      	beq.n	80088f8 <DMA_SetConfig+0x1d0>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a31      	ldr	r2, [pc, #196]	; (800897c <DMA_SetConfig+0x254>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d01d      	beq.n	80088f8 <DMA_SetConfig+0x1d0>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a2f      	ldr	r2, [pc, #188]	; (8008980 <DMA_SetConfig+0x258>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d018      	beq.n	80088f8 <DMA_SetConfig+0x1d0>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a2e      	ldr	r2, [pc, #184]	; (8008984 <DMA_SetConfig+0x25c>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d013      	beq.n	80088f8 <DMA_SetConfig+0x1d0>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a2c      	ldr	r2, [pc, #176]	; (8008988 <DMA_SetConfig+0x260>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d00e      	beq.n	80088f8 <DMA_SetConfig+0x1d0>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a2b      	ldr	r2, [pc, #172]	; (800898c <DMA_SetConfig+0x264>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d009      	beq.n	80088f8 <DMA_SetConfig+0x1d0>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a29      	ldr	r2, [pc, #164]	; (8008990 <DMA_SetConfig+0x268>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d004      	beq.n	80088f8 <DMA_SetConfig+0x1d0>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a28      	ldr	r2, [pc, #160]	; (8008994 <DMA_SetConfig+0x26c>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d101      	bne.n	80088fc <DMA_SetConfig+0x1d4>
 80088f8:	2301      	movs	r3, #1
 80088fa:	e000      	b.n	80088fe <DMA_SetConfig+0x1d6>
 80088fc:	2300      	movs	r3, #0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d05a      	beq.n	80089b8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008906:	f003 031f 	and.w	r3, r3, #31
 800890a:	223f      	movs	r2, #63	; 0x3f
 800890c:	409a      	lsls	r2, r3
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008920:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	683a      	ldr	r2, [r7, #0]
 8008928:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	2b40      	cmp	r3, #64	; 0x40
 8008930:	d108      	bne.n	8008944 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008942:	e087      	b.n	8008a54 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	60da      	str	r2, [r3, #12]
}
 8008954:	e07e      	b.n	8008a54 <DMA_SetConfig+0x32c>
 8008956:	bf00      	nop
 8008958:	40020010 	.word	0x40020010
 800895c:	40020028 	.word	0x40020028
 8008960:	40020040 	.word	0x40020040
 8008964:	40020058 	.word	0x40020058
 8008968:	40020070 	.word	0x40020070
 800896c:	40020088 	.word	0x40020088
 8008970:	400200a0 	.word	0x400200a0
 8008974:	400200b8 	.word	0x400200b8
 8008978:	40020410 	.word	0x40020410
 800897c:	40020428 	.word	0x40020428
 8008980:	40020440 	.word	0x40020440
 8008984:	40020458 	.word	0x40020458
 8008988:	40020470 	.word	0x40020470
 800898c:	40020488 	.word	0x40020488
 8008990:	400204a0 	.word	0x400204a0
 8008994:	400204b8 	.word	0x400204b8
 8008998:	58025408 	.word	0x58025408
 800899c:	5802541c 	.word	0x5802541c
 80089a0:	58025430 	.word	0x58025430
 80089a4:	58025444 	.word	0x58025444
 80089a8:	58025458 	.word	0x58025458
 80089ac:	5802546c 	.word	0x5802546c
 80089b0:	58025480 	.word	0x58025480
 80089b4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a28      	ldr	r2, [pc, #160]	; (8008a60 <DMA_SetConfig+0x338>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d022      	beq.n	8008a08 <DMA_SetConfig+0x2e0>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a27      	ldr	r2, [pc, #156]	; (8008a64 <DMA_SetConfig+0x33c>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d01d      	beq.n	8008a08 <DMA_SetConfig+0x2e0>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a25      	ldr	r2, [pc, #148]	; (8008a68 <DMA_SetConfig+0x340>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d018      	beq.n	8008a08 <DMA_SetConfig+0x2e0>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a24      	ldr	r2, [pc, #144]	; (8008a6c <DMA_SetConfig+0x344>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d013      	beq.n	8008a08 <DMA_SetConfig+0x2e0>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a22      	ldr	r2, [pc, #136]	; (8008a70 <DMA_SetConfig+0x348>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d00e      	beq.n	8008a08 <DMA_SetConfig+0x2e0>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a21      	ldr	r2, [pc, #132]	; (8008a74 <DMA_SetConfig+0x34c>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d009      	beq.n	8008a08 <DMA_SetConfig+0x2e0>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a1f      	ldr	r2, [pc, #124]	; (8008a78 <DMA_SetConfig+0x350>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d004      	beq.n	8008a08 <DMA_SetConfig+0x2e0>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a1e      	ldr	r2, [pc, #120]	; (8008a7c <DMA_SetConfig+0x354>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d101      	bne.n	8008a0c <DMA_SetConfig+0x2e4>
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e000      	b.n	8008a0e <DMA_SetConfig+0x2e6>
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d020      	beq.n	8008a54 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a16:	f003 031f 	and.w	r3, r3, #31
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	409a      	lsls	r2, r3
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	683a      	ldr	r2, [r7, #0]
 8008a28:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	2b40      	cmp	r3, #64	; 0x40
 8008a30:	d108      	bne.n	8008a44 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	60da      	str	r2, [r3, #12]
}
 8008a42:	e007      	b.n	8008a54 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	60da      	str	r2, [r3, #12]
}
 8008a54:	bf00      	nop
 8008a56:	371c      	adds	r7, #28
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr
 8008a60:	58025408 	.word	0x58025408
 8008a64:	5802541c 	.word	0x5802541c
 8008a68:	58025430 	.word	0x58025430
 8008a6c:	58025444 	.word	0x58025444
 8008a70:	58025458 	.word	0x58025458
 8008a74:	5802546c 	.word	0x5802546c
 8008a78:	58025480 	.word	0x58025480
 8008a7c:	58025494 	.word	0x58025494

08008a80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a42      	ldr	r2, [pc, #264]	; (8008b98 <DMA_CalcBaseAndBitshift+0x118>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d04a      	beq.n	8008b28 <DMA_CalcBaseAndBitshift+0xa8>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a41      	ldr	r2, [pc, #260]	; (8008b9c <DMA_CalcBaseAndBitshift+0x11c>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d045      	beq.n	8008b28 <DMA_CalcBaseAndBitshift+0xa8>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a3f      	ldr	r2, [pc, #252]	; (8008ba0 <DMA_CalcBaseAndBitshift+0x120>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d040      	beq.n	8008b28 <DMA_CalcBaseAndBitshift+0xa8>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a3e      	ldr	r2, [pc, #248]	; (8008ba4 <DMA_CalcBaseAndBitshift+0x124>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d03b      	beq.n	8008b28 <DMA_CalcBaseAndBitshift+0xa8>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a3c      	ldr	r2, [pc, #240]	; (8008ba8 <DMA_CalcBaseAndBitshift+0x128>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d036      	beq.n	8008b28 <DMA_CalcBaseAndBitshift+0xa8>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a3b      	ldr	r2, [pc, #236]	; (8008bac <DMA_CalcBaseAndBitshift+0x12c>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d031      	beq.n	8008b28 <DMA_CalcBaseAndBitshift+0xa8>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a39      	ldr	r2, [pc, #228]	; (8008bb0 <DMA_CalcBaseAndBitshift+0x130>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d02c      	beq.n	8008b28 <DMA_CalcBaseAndBitshift+0xa8>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a38      	ldr	r2, [pc, #224]	; (8008bb4 <DMA_CalcBaseAndBitshift+0x134>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d027      	beq.n	8008b28 <DMA_CalcBaseAndBitshift+0xa8>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a36      	ldr	r2, [pc, #216]	; (8008bb8 <DMA_CalcBaseAndBitshift+0x138>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d022      	beq.n	8008b28 <DMA_CalcBaseAndBitshift+0xa8>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a35      	ldr	r2, [pc, #212]	; (8008bbc <DMA_CalcBaseAndBitshift+0x13c>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d01d      	beq.n	8008b28 <DMA_CalcBaseAndBitshift+0xa8>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a33      	ldr	r2, [pc, #204]	; (8008bc0 <DMA_CalcBaseAndBitshift+0x140>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d018      	beq.n	8008b28 <DMA_CalcBaseAndBitshift+0xa8>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a32      	ldr	r2, [pc, #200]	; (8008bc4 <DMA_CalcBaseAndBitshift+0x144>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d013      	beq.n	8008b28 <DMA_CalcBaseAndBitshift+0xa8>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a30      	ldr	r2, [pc, #192]	; (8008bc8 <DMA_CalcBaseAndBitshift+0x148>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d00e      	beq.n	8008b28 <DMA_CalcBaseAndBitshift+0xa8>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a2f      	ldr	r2, [pc, #188]	; (8008bcc <DMA_CalcBaseAndBitshift+0x14c>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d009      	beq.n	8008b28 <DMA_CalcBaseAndBitshift+0xa8>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a2d      	ldr	r2, [pc, #180]	; (8008bd0 <DMA_CalcBaseAndBitshift+0x150>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d004      	beq.n	8008b28 <DMA_CalcBaseAndBitshift+0xa8>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a2c      	ldr	r2, [pc, #176]	; (8008bd4 <DMA_CalcBaseAndBitshift+0x154>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d101      	bne.n	8008b2c <DMA_CalcBaseAndBitshift+0xac>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e000      	b.n	8008b2e <DMA_CalcBaseAndBitshift+0xae>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d024      	beq.n	8008b7c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	3b10      	subs	r3, #16
 8008b3a:	4a27      	ldr	r2, [pc, #156]	; (8008bd8 <DMA_CalcBaseAndBitshift+0x158>)
 8008b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b40:	091b      	lsrs	r3, r3, #4
 8008b42:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f003 0307 	and.w	r3, r3, #7
 8008b4a:	4a24      	ldr	r2, [pc, #144]	; (8008bdc <DMA_CalcBaseAndBitshift+0x15c>)
 8008b4c:	5cd3      	ldrb	r3, [r2, r3]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d908      	bls.n	8008b6c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	4b1f      	ldr	r3, [pc, #124]	; (8008be0 <DMA_CalcBaseAndBitshift+0x160>)
 8008b62:	4013      	ands	r3, r2
 8008b64:	1d1a      	adds	r2, r3, #4
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	659a      	str	r2, [r3, #88]	; 0x58
 8008b6a:	e00d      	b.n	8008b88 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	461a      	mov	r2, r3
 8008b72:	4b1b      	ldr	r3, [pc, #108]	; (8008be0 <DMA_CalcBaseAndBitshift+0x160>)
 8008b74:	4013      	ands	r3, r2
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	6593      	str	r3, [r2, #88]	; 0x58
 8008b7a:	e005      	b.n	8008b88 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3714      	adds	r7, #20
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	40020010 	.word	0x40020010
 8008b9c:	40020028 	.word	0x40020028
 8008ba0:	40020040 	.word	0x40020040
 8008ba4:	40020058 	.word	0x40020058
 8008ba8:	40020070 	.word	0x40020070
 8008bac:	40020088 	.word	0x40020088
 8008bb0:	400200a0 	.word	0x400200a0
 8008bb4:	400200b8 	.word	0x400200b8
 8008bb8:	40020410 	.word	0x40020410
 8008bbc:	40020428 	.word	0x40020428
 8008bc0:	40020440 	.word	0x40020440
 8008bc4:	40020458 	.word	0x40020458
 8008bc8:	40020470 	.word	0x40020470
 8008bcc:	40020488 	.word	0x40020488
 8008bd0:	400204a0 	.word	0x400204a0
 8008bd4:	400204b8 	.word	0x400204b8
 8008bd8:	aaaaaaab 	.word	0xaaaaaaab
 8008bdc:	080131b0 	.word	0x080131b0
 8008be0:	fffffc00 	.word	0xfffffc00

08008be4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bec:	2300      	movs	r3, #0
 8008bee:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	699b      	ldr	r3, [r3, #24]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d120      	bne.n	8008c3a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfc:	2b03      	cmp	r3, #3
 8008bfe:	d858      	bhi.n	8008cb2 <DMA_CheckFifoParam+0xce>
 8008c00:	a201      	add	r2, pc, #4	; (adr r2, 8008c08 <DMA_CheckFifoParam+0x24>)
 8008c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c06:	bf00      	nop
 8008c08:	08008c19 	.word	0x08008c19
 8008c0c:	08008c2b 	.word	0x08008c2b
 8008c10:	08008c19 	.word	0x08008c19
 8008c14:	08008cb3 	.word	0x08008cb3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d048      	beq.n	8008cb6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c28:	e045      	b.n	8008cb6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008c32:	d142      	bne.n	8008cba <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c38:	e03f      	b.n	8008cba <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c42:	d123      	bne.n	8008c8c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d838      	bhi.n	8008cbe <DMA_CheckFifoParam+0xda>
 8008c4c:	a201      	add	r2, pc, #4	; (adr r2, 8008c54 <DMA_CheckFifoParam+0x70>)
 8008c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c52:	bf00      	nop
 8008c54:	08008c65 	.word	0x08008c65
 8008c58:	08008c6b 	.word	0x08008c6b
 8008c5c:	08008c65 	.word	0x08008c65
 8008c60:	08008c7d 	.word	0x08008c7d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	73fb      	strb	r3, [r7, #15]
        break;
 8008c68:	e030      	b.n	8008ccc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d025      	beq.n	8008cc2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c7a:	e022      	b.n	8008cc2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008c84:	d11f      	bne.n	8008cc6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c8a:	e01c      	b.n	8008cc6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d902      	bls.n	8008c9a <DMA_CheckFifoParam+0xb6>
 8008c94:	2b03      	cmp	r3, #3
 8008c96:	d003      	beq.n	8008ca0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008c98:	e018      	b.n	8008ccc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	73fb      	strb	r3, [r7, #15]
        break;
 8008c9e:	e015      	b.n	8008ccc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00e      	beq.n	8008cca <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb0:	e00b      	b.n	8008cca <DMA_CheckFifoParam+0xe6>
        break;
 8008cb2:	bf00      	nop
 8008cb4:	e00a      	b.n	8008ccc <DMA_CheckFifoParam+0xe8>
        break;
 8008cb6:	bf00      	nop
 8008cb8:	e008      	b.n	8008ccc <DMA_CheckFifoParam+0xe8>
        break;
 8008cba:	bf00      	nop
 8008cbc:	e006      	b.n	8008ccc <DMA_CheckFifoParam+0xe8>
        break;
 8008cbe:	bf00      	nop
 8008cc0:	e004      	b.n	8008ccc <DMA_CheckFifoParam+0xe8>
        break;
 8008cc2:	bf00      	nop
 8008cc4:	e002      	b.n	8008ccc <DMA_CheckFifoParam+0xe8>
        break;
 8008cc6:	bf00      	nop
 8008cc8:	e000      	b.n	8008ccc <DMA_CheckFifoParam+0xe8>
    break;
 8008cca:	bf00      	nop
    }
  }

  return status;
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3714      	adds	r7, #20
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop

08008cdc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b085      	sub	sp, #20
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a38      	ldr	r2, [pc, #224]	; (8008dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d022      	beq.n	8008d3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a36      	ldr	r2, [pc, #216]	; (8008dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d01d      	beq.n	8008d3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a35      	ldr	r2, [pc, #212]	; (8008dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d018      	beq.n	8008d3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a33      	ldr	r2, [pc, #204]	; (8008ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d013      	beq.n	8008d3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a32      	ldr	r2, [pc, #200]	; (8008de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d00e      	beq.n	8008d3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a30      	ldr	r2, [pc, #192]	; (8008de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d009      	beq.n	8008d3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a2f      	ldr	r2, [pc, #188]	; (8008de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d004      	beq.n	8008d3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a2d      	ldr	r2, [pc, #180]	; (8008dec <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d101      	bne.n	8008d3e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e000      	b.n	8008d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d01a      	beq.n	8008d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	3b08      	subs	r3, #8
 8008d4c:	4a28      	ldr	r2, [pc, #160]	; (8008df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d52:	091b      	lsrs	r3, r3, #4
 8008d54:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	4b26      	ldr	r3, [pc, #152]	; (8008df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008d5a:	4413      	add	r3, r2
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	461a      	mov	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a24      	ldr	r2, [pc, #144]	; (8008df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008d68:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f003 031f 	and.w	r3, r3, #31
 8008d70:	2201      	movs	r2, #1
 8008d72:	409a      	lsls	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008d78:	e024      	b.n	8008dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	3b10      	subs	r3, #16
 8008d82:	4a1e      	ldr	r2, [pc, #120]	; (8008dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008d84:	fba2 2303 	umull	r2, r3, r2, r3
 8008d88:	091b      	lsrs	r3, r3, #4
 8008d8a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	4a1c      	ldr	r2, [pc, #112]	; (8008e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d806      	bhi.n	8008da2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	4a1b      	ldr	r2, [pc, #108]	; (8008e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d902      	bls.n	8008da2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	3308      	adds	r3, #8
 8008da0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	4b18      	ldr	r3, [pc, #96]	; (8008e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008da6:	4413      	add	r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	461a      	mov	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a16      	ldr	r2, [pc, #88]	; (8008e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008db4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f003 031f 	and.w	r3, r3, #31
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	409a      	lsls	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008dc4:	bf00      	nop
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	58025408 	.word	0x58025408
 8008dd4:	5802541c 	.word	0x5802541c
 8008dd8:	58025430 	.word	0x58025430
 8008ddc:	58025444 	.word	0x58025444
 8008de0:	58025458 	.word	0x58025458
 8008de4:	5802546c 	.word	0x5802546c
 8008de8:	58025480 	.word	0x58025480
 8008dec:	58025494 	.word	0x58025494
 8008df0:	cccccccd 	.word	0xcccccccd
 8008df4:	16009600 	.word	0x16009600
 8008df8:	58025880 	.word	0x58025880
 8008dfc:	aaaaaaab 	.word	0xaaaaaaab
 8008e00:	400204b8 	.word	0x400204b8
 8008e04:	4002040f 	.word	0x4002040f
 8008e08:	10008200 	.word	0x10008200
 8008e0c:	40020880 	.word	0x40020880

08008e10 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d04a      	beq.n	8008ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2b08      	cmp	r3, #8
 8008e2a:	d847      	bhi.n	8008ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a25      	ldr	r2, [pc, #148]	; (8008ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d022      	beq.n	8008e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a24      	ldr	r2, [pc, #144]	; (8008ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d01d      	beq.n	8008e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a22      	ldr	r2, [pc, #136]	; (8008ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d018      	beq.n	8008e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a21      	ldr	r2, [pc, #132]	; (8008ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d013      	beq.n	8008e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a1f      	ldr	r2, [pc, #124]	; (8008ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d00e      	beq.n	8008e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a1e      	ldr	r2, [pc, #120]	; (8008edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d009      	beq.n	8008e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a1c      	ldr	r2, [pc, #112]	; (8008ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d004      	beq.n	8008e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a1b      	ldr	r2, [pc, #108]	; (8008ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d101      	bne.n	8008e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e000      	b.n	8008e82 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008e80:	2300      	movs	r3, #0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00a      	beq.n	8008e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	4b17      	ldr	r3, [pc, #92]	; (8008ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008e8a:	4413      	add	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	461a      	mov	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a15      	ldr	r2, [pc, #84]	; (8008eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008e98:	671a      	str	r2, [r3, #112]	; 0x70
 8008e9a:	e009      	b.n	8008eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	4b14      	ldr	r3, [pc, #80]	; (8008ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008ea0:	4413      	add	r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a11      	ldr	r2, [pc, #68]	; (8008ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008eae:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	409a      	lsls	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008ebc:	bf00      	nop
 8008ebe:	3714      	adds	r7, #20
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr
 8008ec8:	58025408 	.word	0x58025408
 8008ecc:	5802541c 	.word	0x5802541c
 8008ed0:	58025430 	.word	0x58025430
 8008ed4:	58025444 	.word	0x58025444
 8008ed8:	58025458 	.word	0x58025458
 8008edc:	5802546c 	.word	0x5802546c
 8008ee0:	58025480 	.word	0x58025480
 8008ee4:	58025494 	.word	0x58025494
 8008ee8:	1600963f 	.word	0x1600963f
 8008eec:	58025940 	.word	0x58025940
 8008ef0:	1000823f 	.word	0x1000823f
 8008ef4:	40020940 	.word	0x40020940

08008ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b089      	sub	sp, #36	; 0x24
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008f02:	2300      	movs	r3, #0
 8008f04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008f06:	4b89      	ldr	r3, [pc, #548]	; (800912c <HAL_GPIO_Init+0x234>)
 8008f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008f0a:	e194      	b.n	8009236 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	2101      	movs	r1, #1
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	fa01 f303 	lsl.w	r3, r1, r3
 8008f18:	4013      	ands	r3, r2
 8008f1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f000 8186 	beq.w	8009230 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	f003 0303 	and.w	r3, r3, #3
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d005      	beq.n	8008f3c <HAL_GPIO_Init+0x44>
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	f003 0303 	and.w	r3, r3, #3
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d130      	bne.n	8008f9e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	005b      	lsls	r3, r3, #1
 8008f46:	2203      	movs	r2, #3
 8008f48:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4c:	43db      	mvns	r3, r3
 8008f4e:	69ba      	ldr	r2, [r7, #24]
 8008f50:	4013      	ands	r3, r2
 8008f52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	68da      	ldr	r2, [r3, #12]
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	005b      	lsls	r3, r3, #1
 8008f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f60:	69ba      	ldr	r2, [r7, #24]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	69ba      	ldr	r2, [r7, #24]
 8008f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008f72:	2201      	movs	r2, #1
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	fa02 f303 	lsl.w	r3, r2, r3
 8008f7a:	43db      	mvns	r3, r3
 8008f7c:	69ba      	ldr	r2, [r7, #24]
 8008f7e:	4013      	ands	r3, r2
 8008f80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	091b      	lsrs	r3, r3, #4
 8008f88:	f003 0201 	and.w	r2, r3, #1
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f92:	69ba      	ldr	r2, [r7, #24]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	69ba      	ldr	r2, [r7, #24]
 8008f9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f003 0303 	and.w	r3, r3, #3
 8008fa6:	2b03      	cmp	r3, #3
 8008fa8:	d017      	beq.n	8008fda <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	005b      	lsls	r3, r3, #1
 8008fb4:	2203      	movs	r2, #3
 8008fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8008fba:	43db      	mvns	r3, r3
 8008fbc:	69ba      	ldr	r2, [r7, #24]
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	689a      	ldr	r2, [r3, #8]
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	005b      	lsls	r3, r3, #1
 8008fca:	fa02 f303 	lsl.w	r3, r2, r3
 8008fce:	69ba      	ldr	r2, [r7, #24]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	69ba      	ldr	r2, [r7, #24]
 8008fd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	f003 0303 	and.w	r3, r3, #3
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d123      	bne.n	800902e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	08da      	lsrs	r2, r3, #3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	3208      	adds	r2, #8
 8008fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	f003 0307 	and.w	r3, r3, #7
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	220f      	movs	r2, #15
 8008ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8009002:	43db      	mvns	r3, r3
 8009004:	69ba      	ldr	r2, [r7, #24]
 8009006:	4013      	ands	r3, r2
 8009008:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	691a      	ldr	r2, [r3, #16]
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	f003 0307 	and.w	r3, r3, #7
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	fa02 f303 	lsl.w	r3, r2, r3
 800901a:	69ba      	ldr	r2, [r7, #24]
 800901c:	4313      	orrs	r3, r2
 800901e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	08da      	lsrs	r2, r3, #3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	3208      	adds	r2, #8
 8009028:	69b9      	ldr	r1, [r7, #24]
 800902a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	005b      	lsls	r3, r3, #1
 8009038:	2203      	movs	r2, #3
 800903a:	fa02 f303 	lsl.w	r3, r2, r3
 800903e:	43db      	mvns	r3, r3
 8009040:	69ba      	ldr	r2, [r7, #24]
 8009042:	4013      	ands	r3, r2
 8009044:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	f003 0203 	and.w	r2, r3, #3
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	005b      	lsls	r3, r3, #1
 8009052:	fa02 f303 	lsl.w	r3, r2, r3
 8009056:	69ba      	ldr	r2, [r7, #24]
 8009058:	4313      	orrs	r3, r2
 800905a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	69ba      	ldr	r2, [r7, #24]
 8009060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800906a:	2b00      	cmp	r3, #0
 800906c:	f000 80e0 	beq.w	8009230 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009070:	4b2f      	ldr	r3, [pc, #188]	; (8009130 <HAL_GPIO_Init+0x238>)
 8009072:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009076:	4a2e      	ldr	r2, [pc, #184]	; (8009130 <HAL_GPIO_Init+0x238>)
 8009078:	f043 0302 	orr.w	r3, r3, #2
 800907c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009080:	4b2b      	ldr	r3, [pc, #172]	; (8009130 <HAL_GPIO_Init+0x238>)
 8009082:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009086:	f003 0302 	and.w	r3, r3, #2
 800908a:	60fb      	str	r3, [r7, #12]
 800908c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800908e:	4a29      	ldr	r2, [pc, #164]	; (8009134 <HAL_GPIO_Init+0x23c>)
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	089b      	lsrs	r3, r3, #2
 8009094:	3302      	adds	r3, #2
 8009096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800909a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	f003 0303 	and.w	r3, r3, #3
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	220f      	movs	r2, #15
 80090a6:	fa02 f303 	lsl.w	r3, r2, r3
 80090aa:	43db      	mvns	r3, r3
 80090ac:	69ba      	ldr	r2, [r7, #24]
 80090ae:	4013      	ands	r3, r2
 80090b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a20      	ldr	r2, [pc, #128]	; (8009138 <HAL_GPIO_Init+0x240>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d052      	beq.n	8009160 <HAL_GPIO_Init+0x268>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a1f      	ldr	r2, [pc, #124]	; (800913c <HAL_GPIO_Init+0x244>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d031      	beq.n	8009126 <HAL_GPIO_Init+0x22e>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a1e      	ldr	r2, [pc, #120]	; (8009140 <HAL_GPIO_Init+0x248>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d02b      	beq.n	8009122 <HAL_GPIO_Init+0x22a>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a1d      	ldr	r2, [pc, #116]	; (8009144 <HAL_GPIO_Init+0x24c>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d025      	beq.n	800911e <HAL_GPIO_Init+0x226>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a1c      	ldr	r2, [pc, #112]	; (8009148 <HAL_GPIO_Init+0x250>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d01f      	beq.n	800911a <HAL_GPIO_Init+0x222>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4a1b      	ldr	r2, [pc, #108]	; (800914c <HAL_GPIO_Init+0x254>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d019      	beq.n	8009116 <HAL_GPIO_Init+0x21e>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a1a      	ldr	r2, [pc, #104]	; (8009150 <HAL_GPIO_Init+0x258>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d013      	beq.n	8009112 <HAL_GPIO_Init+0x21a>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a19      	ldr	r2, [pc, #100]	; (8009154 <HAL_GPIO_Init+0x25c>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d00d      	beq.n	800910e <HAL_GPIO_Init+0x216>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a18      	ldr	r2, [pc, #96]	; (8009158 <HAL_GPIO_Init+0x260>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d007      	beq.n	800910a <HAL_GPIO_Init+0x212>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a17      	ldr	r2, [pc, #92]	; (800915c <HAL_GPIO_Init+0x264>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d101      	bne.n	8009106 <HAL_GPIO_Init+0x20e>
 8009102:	2309      	movs	r3, #9
 8009104:	e02d      	b.n	8009162 <HAL_GPIO_Init+0x26a>
 8009106:	230a      	movs	r3, #10
 8009108:	e02b      	b.n	8009162 <HAL_GPIO_Init+0x26a>
 800910a:	2308      	movs	r3, #8
 800910c:	e029      	b.n	8009162 <HAL_GPIO_Init+0x26a>
 800910e:	2307      	movs	r3, #7
 8009110:	e027      	b.n	8009162 <HAL_GPIO_Init+0x26a>
 8009112:	2306      	movs	r3, #6
 8009114:	e025      	b.n	8009162 <HAL_GPIO_Init+0x26a>
 8009116:	2305      	movs	r3, #5
 8009118:	e023      	b.n	8009162 <HAL_GPIO_Init+0x26a>
 800911a:	2304      	movs	r3, #4
 800911c:	e021      	b.n	8009162 <HAL_GPIO_Init+0x26a>
 800911e:	2303      	movs	r3, #3
 8009120:	e01f      	b.n	8009162 <HAL_GPIO_Init+0x26a>
 8009122:	2302      	movs	r3, #2
 8009124:	e01d      	b.n	8009162 <HAL_GPIO_Init+0x26a>
 8009126:	2301      	movs	r3, #1
 8009128:	e01b      	b.n	8009162 <HAL_GPIO_Init+0x26a>
 800912a:	bf00      	nop
 800912c:	58000080 	.word	0x58000080
 8009130:	58024400 	.word	0x58024400
 8009134:	58000400 	.word	0x58000400
 8009138:	58020000 	.word	0x58020000
 800913c:	58020400 	.word	0x58020400
 8009140:	58020800 	.word	0x58020800
 8009144:	58020c00 	.word	0x58020c00
 8009148:	58021000 	.word	0x58021000
 800914c:	58021400 	.word	0x58021400
 8009150:	58021800 	.word	0x58021800
 8009154:	58021c00 	.word	0x58021c00
 8009158:	58022000 	.word	0x58022000
 800915c:	58022400 	.word	0x58022400
 8009160:	2300      	movs	r3, #0
 8009162:	69fa      	ldr	r2, [r7, #28]
 8009164:	f002 0203 	and.w	r2, r2, #3
 8009168:	0092      	lsls	r2, r2, #2
 800916a:	4093      	lsls	r3, r2
 800916c:	69ba      	ldr	r2, [r7, #24]
 800916e:	4313      	orrs	r3, r2
 8009170:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009172:	4938      	ldr	r1, [pc, #224]	; (8009254 <HAL_GPIO_Init+0x35c>)
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	089b      	lsrs	r3, r3, #2
 8009178:	3302      	adds	r3, #2
 800917a:	69ba      	ldr	r2, [r7, #24]
 800917c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	43db      	mvns	r3, r3
 800918c:	69ba      	ldr	r2, [r7, #24]
 800918e:	4013      	ands	r3, r2
 8009190:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800919a:	2b00      	cmp	r3, #0
 800919c:	d003      	beq.n	80091a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800919e:	69ba      	ldr	r2, [r7, #24]
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80091a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80091ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	43db      	mvns	r3, r3
 80091ba:	69ba      	ldr	r2, [r7, #24]
 80091bc:	4013      	ands	r3, r2
 80091be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d003      	beq.n	80091d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80091cc:	69ba      	ldr	r2, [r7, #24]
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80091d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	43db      	mvns	r3, r3
 80091e6:	69ba      	ldr	r2, [r7, #24]
 80091e8:	4013      	ands	r3, r2
 80091ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d003      	beq.n	8009200 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80091f8:	69ba      	ldr	r2, [r7, #24]
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	69ba      	ldr	r2, [r7, #24]
 8009204:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	43db      	mvns	r3, r3
 8009210:	69ba      	ldr	r2, [r7, #24]
 8009212:	4013      	ands	r3, r2
 8009214:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d003      	beq.n	800922a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009222:	69ba      	ldr	r2, [r7, #24]
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	4313      	orrs	r3, r2
 8009228:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	69ba      	ldr	r2, [r7, #24]
 800922e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	3301      	adds	r3, #1
 8009234:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	fa22 f303 	lsr.w	r3, r2, r3
 8009240:	2b00      	cmp	r3, #0
 8009242:	f47f ae63 	bne.w	8008f0c <HAL_GPIO_Init+0x14>
  }
}
 8009246:	bf00      	nop
 8009248:	bf00      	nop
 800924a:	3724      	adds	r7, #36	; 0x24
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	58000400 	.word	0x58000400

08009258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	807b      	strh	r3, [r7, #2]
 8009264:	4613      	mov	r3, r2
 8009266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009268:	787b      	ldrb	r3, [r7, #1]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d003      	beq.n	8009276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800926e:	887a      	ldrh	r2, [r7, #2]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009274:	e003      	b.n	800927e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009276:	887b      	ldrh	r3, [r7, #2]
 8009278:	041a      	lsls	r2, r3, #16
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	619a      	str	r2, [r3, #24]
}
 800927e:	bf00      	nop
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr

0800928a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b082      	sub	sp, #8
 800928e:	af00      	add	r7, sp, #0
 8009290:	4603      	mov	r3, r0
 8009292:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8009294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009298:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800929c:	88fb      	ldrh	r3, [r7, #6]
 800929e:	4013      	ands	r3, r2
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d008      	beq.n	80092b6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80092a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092a8:	88fb      	ldrh	r3, [r7, #6]
 80092aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80092ae:	88fb      	ldrh	r3, [r7, #6]
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7fa fdfd 	bl	8003eb0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80092b6:	bf00      	nop
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
	...

080092c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80092c8:	4b19      	ldr	r3, [pc, #100]	; (8009330 <HAL_PWREx_ConfigSupply+0x70>)
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	f003 0304 	and.w	r3, r3, #4
 80092d0:	2b04      	cmp	r3, #4
 80092d2:	d00a      	beq.n	80092ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80092d4:	4b16      	ldr	r3, [pc, #88]	; (8009330 <HAL_PWREx_ConfigSupply+0x70>)
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	f003 0307 	and.w	r3, r3, #7
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d001      	beq.n	80092e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e01f      	b.n	8009326 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	e01d      	b.n	8009326 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80092ea:	4b11      	ldr	r3, [pc, #68]	; (8009330 <HAL_PWREx_ConfigSupply+0x70>)
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	f023 0207 	bic.w	r2, r3, #7
 80092f2:	490f      	ldr	r1, [pc, #60]	; (8009330 <HAL_PWREx_ConfigSupply+0x70>)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80092fa:	f7fc fc6d 	bl	8005bd8 <HAL_GetTick>
 80092fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009300:	e009      	b.n	8009316 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009302:	f7fc fc69 	bl	8005bd8 <HAL_GetTick>
 8009306:	4602      	mov	r2, r0
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009310:	d901      	bls.n	8009316 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	e007      	b.n	8009326 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009316:	4b06      	ldr	r3, [pc, #24]	; (8009330 <HAL_PWREx_ConfigSupply+0x70>)
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800931e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009322:	d1ee      	bne.n	8009302 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	58024800 	.word	0x58024800

08009334 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b08c      	sub	sp, #48	; 0x30
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d102      	bne.n	8009348 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	f000 bc1c 	b.w	8009b80 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 0301 	and.w	r3, r3, #1
 8009350:	2b00      	cmp	r3, #0
 8009352:	f000 8087 	beq.w	8009464 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009356:	4b9e      	ldr	r3, [pc, #632]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800935e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009360:	4b9b      	ldr	r3, [pc, #620]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 8009362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009364:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009368:	2b10      	cmp	r3, #16
 800936a:	d007      	beq.n	800937c <HAL_RCC_OscConfig+0x48>
 800936c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936e:	2b18      	cmp	r3, #24
 8009370:	d110      	bne.n	8009394 <HAL_RCC_OscConfig+0x60>
 8009372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009374:	f003 0303 	and.w	r3, r3, #3
 8009378:	2b02      	cmp	r3, #2
 800937a:	d10b      	bne.n	8009394 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800937c:	4b94      	ldr	r3, [pc, #592]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009384:	2b00      	cmp	r3, #0
 8009386:	d06c      	beq.n	8009462 <HAL_RCC_OscConfig+0x12e>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d168      	bne.n	8009462 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	e3f5      	b.n	8009b80 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800939c:	d106      	bne.n	80093ac <HAL_RCC_OscConfig+0x78>
 800939e:	4b8c      	ldr	r3, [pc, #560]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a8b      	ldr	r2, [pc, #556]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 80093a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093a8:	6013      	str	r3, [r2, #0]
 80093aa:	e02e      	b.n	800940a <HAL_RCC_OscConfig+0xd6>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10c      	bne.n	80093ce <HAL_RCC_OscConfig+0x9a>
 80093b4:	4b86      	ldr	r3, [pc, #536]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a85      	ldr	r2, [pc, #532]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 80093ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093be:	6013      	str	r3, [r2, #0]
 80093c0:	4b83      	ldr	r3, [pc, #524]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a82      	ldr	r2, [pc, #520]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 80093c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093ca:	6013      	str	r3, [r2, #0]
 80093cc:	e01d      	b.n	800940a <HAL_RCC_OscConfig+0xd6>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093d6:	d10c      	bne.n	80093f2 <HAL_RCC_OscConfig+0xbe>
 80093d8:	4b7d      	ldr	r3, [pc, #500]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a7c      	ldr	r2, [pc, #496]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 80093de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093e2:	6013      	str	r3, [r2, #0]
 80093e4:	4b7a      	ldr	r3, [pc, #488]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a79      	ldr	r2, [pc, #484]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 80093ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093ee:	6013      	str	r3, [r2, #0]
 80093f0:	e00b      	b.n	800940a <HAL_RCC_OscConfig+0xd6>
 80093f2:	4b77      	ldr	r3, [pc, #476]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a76      	ldr	r2, [pc, #472]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 80093f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093fc:	6013      	str	r3, [r2, #0]
 80093fe:	4b74      	ldr	r3, [pc, #464]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a73      	ldr	r2, [pc, #460]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 8009404:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009408:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d013      	beq.n	800943a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009412:	f7fc fbe1 	bl	8005bd8 <HAL_GetTick>
 8009416:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009418:	e008      	b.n	800942c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800941a:	f7fc fbdd 	bl	8005bd8 <HAL_GetTick>
 800941e:	4602      	mov	r2, r0
 8009420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009422:	1ad3      	subs	r3, r2, r3
 8009424:	2b64      	cmp	r3, #100	; 0x64
 8009426:	d901      	bls.n	800942c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8009428:	2303      	movs	r3, #3
 800942a:	e3a9      	b.n	8009b80 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800942c:	4b68      	ldr	r3, [pc, #416]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009434:	2b00      	cmp	r3, #0
 8009436:	d0f0      	beq.n	800941a <HAL_RCC_OscConfig+0xe6>
 8009438:	e014      	b.n	8009464 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800943a:	f7fc fbcd 	bl	8005bd8 <HAL_GetTick>
 800943e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009440:	e008      	b.n	8009454 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009442:	f7fc fbc9 	bl	8005bd8 <HAL_GetTick>
 8009446:	4602      	mov	r2, r0
 8009448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944a:	1ad3      	subs	r3, r2, r3
 800944c:	2b64      	cmp	r3, #100	; 0x64
 800944e:	d901      	bls.n	8009454 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8009450:	2303      	movs	r3, #3
 8009452:	e395      	b.n	8009b80 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009454:	4b5e      	ldr	r3, [pc, #376]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1f0      	bne.n	8009442 <HAL_RCC_OscConfig+0x10e>
 8009460:	e000      	b.n	8009464 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009462:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 0302 	and.w	r3, r3, #2
 800946c:	2b00      	cmp	r3, #0
 800946e:	f000 80ca 	beq.w	8009606 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009472:	4b57      	ldr	r3, [pc, #348]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800947a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800947c:	4b54      	ldr	r3, [pc, #336]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 800947e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009480:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009482:	6a3b      	ldr	r3, [r7, #32]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d007      	beq.n	8009498 <HAL_RCC_OscConfig+0x164>
 8009488:	6a3b      	ldr	r3, [r7, #32]
 800948a:	2b18      	cmp	r3, #24
 800948c:	d156      	bne.n	800953c <HAL_RCC_OscConfig+0x208>
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	f003 0303 	and.w	r3, r3, #3
 8009494:	2b00      	cmp	r3, #0
 8009496:	d151      	bne.n	800953c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009498:	4b4d      	ldr	r3, [pc, #308]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 0304 	and.w	r3, r3, #4
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d005      	beq.n	80094b0 <HAL_RCC_OscConfig+0x17c>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d101      	bne.n	80094b0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	e367      	b.n	8009b80 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80094b0:	4b47      	ldr	r3, [pc, #284]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f023 0219 	bic.w	r2, r3, #25
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	4944      	ldr	r1, [pc, #272]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 80094be:	4313      	orrs	r3, r2
 80094c0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80094c2:	f7fc fb89 	bl	8005bd8 <HAL_GetTick>
 80094c6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094c8:	e008      	b.n	80094dc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80094ca:	f7fc fb85 	bl	8005bd8 <HAL_GetTick>
 80094ce:	4602      	mov	r2, r0
 80094d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	d901      	bls.n	80094dc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80094d8:	2303      	movs	r3, #3
 80094da:	e351      	b.n	8009b80 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094dc:	4b3c      	ldr	r3, [pc, #240]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f003 0304 	and.w	r3, r3, #4
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d0f0      	beq.n	80094ca <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094e8:	f7fc fba6 	bl	8005c38 <HAL_GetREVID>
 80094ec:	4603      	mov	r3, r0
 80094ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d817      	bhi.n	8009526 <HAL_RCC_OscConfig+0x1f2>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	2b40      	cmp	r3, #64	; 0x40
 80094fc:	d108      	bne.n	8009510 <HAL_RCC_OscConfig+0x1dc>
 80094fe:	4b34      	ldr	r3, [pc, #208]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009506:	4a32      	ldr	r2, [pc, #200]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 8009508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800950c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800950e:	e07a      	b.n	8009606 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009510:	4b2f      	ldr	r3, [pc, #188]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	031b      	lsls	r3, r3, #12
 800951e:	492c      	ldr	r1, [pc, #176]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 8009520:	4313      	orrs	r3, r2
 8009522:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009524:	e06f      	b.n	8009606 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009526:	4b2a      	ldr	r3, [pc, #168]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	061b      	lsls	r3, r3, #24
 8009534:	4926      	ldr	r1, [pc, #152]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 8009536:	4313      	orrs	r3, r2
 8009538:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800953a:	e064      	b.n	8009606 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d047      	beq.n	80095d4 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009544:	4b22      	ldr	r3, [pc, #136]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f023 0219 	bic.w	r2, r3, #25
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	491f      	ldr	r1, [pc, #124]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 8009552:	4313      	orrs	r3, r2
 8009554:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009556:	f7fc fb3f 	bl	8005bd8 <HAL_GetTick>
 800955a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800955c:	e008      	b.n	8009570 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800955e:	f7fc fb3b 	bl	8005bd8 <HAL_GetTick>
 8009562:	4602      	mov	r2, r0
 8009564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009566:	1ad3      	subs	r3, r2, r3
 8009568:	2b02      	cmp	r3, #2
 800956a:	d901      	bls.n	8009570 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800956c:	2303      	movs	r3, #3
 800956e:	e307      	b.n	8009b80 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009570:	4b17      	ldr	r3, [pc, #92]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 0304 	and.w	r3, r3, #4
 8009578:	2b00      	cmp	r3, #0
 800957a:	d0f0      	beq.n	800955e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800957c:	f7fc fb5c 	bl	8005c38 <HAL_GetREVID>
 8009580:	4603      	mov	r3, r0
 8009582:	f241 0203 	movw	r2, #4099	; 0x1003
 8009586:	4293      	cmp	r3, r2
 8009588:	d817      	bhi.n	80095ba <HAL_RCC_OscConfig+0x286>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	2b40      	cmp	r3, #64	; 0x40
 8009590:	d108      	bne.n	80095a4 <HAL_RCC_OscConfig+0x270>
 8009592:	4b0f      	ldr	r3, [pc, #60]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800959a:	4a0d      	ldr	r2, [pc, #52]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 800959c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095a0:	6053      	str	r3, [r2, #4]
 80095a2:	e030      	b.n	8009606 <HAL_RCC_OscConfig+0x2d2>
 80095a4:	4b0a      	ldr	r3, [pc, #40]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	031b      	lsls	r3, r3, #12
 80095b2:	4907      	ldr	r1, [pc, #28]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 80095b4:	4313      	orrs	r3, r2
 80095b6:	604b      	str	r3, [r1, #4]
 80095b8:	e025      	b.n	8009606 <HAL_RCC_OscConfig+0x2d2>
 80095ba:	4b05      	ldr	r3, [pc, #20]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	691b      	ldr	r3, [r3, #16]
 80095c6:	061b      	lsls	r3, r3, #24
 80095c8:	4901      	ldr	r1, [pc, #4]	; (80095d0 <HAL_RCC_OscConfig+0x29c>)
 80095ca:	4313      	orrs	r3, r2
 80095cc:	604b      	str	r3, [r1, #4]
 80095ce:	e01a      	b.n	8009606 <HAL_RCC_OscConfig+0x2d2>
 80095d0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80095d4:	4b9e      	ldr	r3, [pc, #632]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a9d      	ldr	r2, [pc, #628]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 80095da:	f023 0301 	bic.w	r3, r3, #1
 80095de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095e0:	f7fc fafa 	bl	8005bd8 <HAL_GetTick>
 80095e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80095e6:	e008      	b.n	80095fa <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80095e8:	f7fc faf6 	bl	8005bd8 <HAL_GetTick>
 80095ec:	4602      	mov	r2, r0
 80095ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	d901      	bls.n	80095fa <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80095f6:	2303      	movs	r3, #3
 80095f8:	e2c2      	b.n	8009b80 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80095fa:	4b95      	ldr	r3, [pc, #596]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 0304 	and.w	r3, r3, #4
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1f0      	bne.n	80095e8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 0310 	and.w	r3, r3, #16
 800960e:	2b00      	cmp	r3, #0
 8009610:	f000 80a9 	beq.w	8009766 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009614:	4b8e      	ldr	r3, [pc, #568]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 8009616:	691b      	ldr	r3, [r3, #16]
 8009618:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800961c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800961e:	4b8c      	ldr	r3, [pc, #560]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 8009620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009622:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	2b08      	cmp	r3, #8
 8009628:	d007      	beq.n	800963a <HAL_RCC_OscConfig+0x306>
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	2b18      	cmp	r3, #24
 800962e:	d13a      	bne.n	80096a6 <HAL_RCC_OscConfig+0x372>
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	f003 0303 	and.w	r3, r3, #3
 8009636:	2b01      	cmp	r3, #1
 8009638:	d135      	bne.n	80096a6 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800963a:	4b85      	ldr	r3, [pc, #532]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009642:	2b00      	cmp	r3, #0
 8009644:	d005      	beq.n	8009652 <HAL_RCC_OscConfig+0x31e>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	69db      	ldr	r3, [r3, #28]
 800964a:	2b80      	cmp	r3, #128	; 0x80
 800964c:	d001      	beq.n	8009652 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e296      	b.n	8009b80 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009652:	f7fc faf1 	bl	8005c38 <HAL_GetREVID>
 8009656:	4603      	mov	r3, r0
 8009658:	f241 0203 	movw	r2, #4099	; 0x1003
 800965c:	4293      	cmp	r3, r2
 800965e:	d817      	bhi.n	8009690 <HAL_RCC_OscConfig+0x35c>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6a1b      	ldr	r3, [r3, #32]
 8009664:	2b20      	cmp	r3, #32
 8009666:	d108      	bne.n	800967a <HAL_RCC_OscConfig+0x346>
 8009668:	4b79      	ldr	r3, [pc, #484]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009670:	4a77      	ldr	r2, [pc, #476]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 8009672:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009676:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009678:	e075      	b.n	8009766 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800967a:	4b75      	ldr	r3, [pc, #468]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a1b      	ldr	r3, [r3, #32]
 8009686:	069b      	lsls	r3, r3, #26
 8009688:	4971      	ldr	r1, [pc, #452]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 800968a:	4313      	orrs	r3, r2
 800968c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800968e:	e06a      	b.n	8009766 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009690:	4b6f      	ldr	r3, [pc, #444]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6a1b      	ldr	r3, [r3, #32]
 800969c:	061b      	lsls	r3, r3, #24
 800969e:	496c      	ldr	r1, [pc, #432]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 80096a0:	4313      	orrs	r3, r2
 80096a2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80096a4:	e05f      	b.n	8009766 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	69db      	ldr	r3, [r3, #28]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d042      	beq.n	8009734 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80096ae:	4b68      	ldr	r3, [pc, #416]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a67      	ldr	r2, [pc, #412]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 80096b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096ba:	f7fc fa8d 	bl	8005bd8 <HAL_GetTick>
 80096be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80096c0:	e008      	b.n	80096d4 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80096c2:	f7fc fa89 	bl	8005bd8 <HAL_GetTick>
 80096c6:	4602      	mov	r2, r0
 80096c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d901      	bls.n	80096d4 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80096d0:	2303      	movs	r3, #3
 80096d2:	e255      	b.n	8009b80 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80096d4:	4b5e      	ldr	r3, [pc, #376]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d0f0      	beq.n	80096c2 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80096e0:	f7fc faaa 	bl	8005c38 <HAL_GetREVID>
 80096e4:	4603      	mov	r3, r0
 80096e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d817      	bhi.n	800971e <HAL_RCC_OscConfig+0x3ea>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a1b      	ldr	r3, [r3, #32]
 80096f2:	2b20      	cmp	r3, #32
 80096f4:	d108      	bne.n	8009708 <HAL_RCC_OscConfig+0x3d4>
 80096f6:	4b56      	ldr	r3, [pc, #344]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80096fe:	4a54      	ldr	r2, [pc, #336]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 8009700:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009704:	6053      	str	r3, [r2, #4]
 8009706:	e02e      	b.n	8009766 <HAL_RCC_OscConfig+0x432>
 8009708:	4b51      	ldr	r3, [pc, #324]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a1b      	ldr	r3, [r3, #32]
 8009714:	069b      	lsls	r3, r3, #26
 8009716:	494e      	ldr	r1, [pc, #312]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 8009718:	4313      	orrs	r3, r2
 800971a:	604b      	str	r3, [r1, #4]
 800971c:	e023      	b.n	8009766 <HAL_RCC_OscConfig+0x432>
 800971e:	4b4c      	ldr	r3, [pc, #304]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a1b      	ldr	r3, [r3, #32]
 800972a:	061b      	lsls	r3, r3, #24
 800972c:	4948      	ldr	r1, [pc, #288]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 800972e:	4313      	orrs	r3, r2
 8009730:	60cb      	str	r3, [r1, #12]
 8009732:	e018      	b.n	8009766 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009734:	4b46      	ldr	r3, [pc, #280]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a45      	ldr	r2, [pc, #276]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 800973a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800973e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009740:	f7fc fa4a 	bl	8005bd8 <HAL_GetTick>
 8009744:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009746:	e008      	b.n	800975a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009748:	f7fc fa46 	bl	8005bd8 <HAL_GetTick>
 800974c:	4602      	mov	r2, r0
 800974e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	2b02      	cmp	r3, #2
 8009754:	d901      	bls.n	800975a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8009756:	2303      	movs	r3, #3
 8009758:	e212      	b.n	8009b80 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800975a:	4b3d      	ldr	r3, [pc, #244]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1f0      	bne.n	8009748 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f003 0308 	and.w	r3, r3, #8
 800976e:	2b00      	cmp	r3, #0
 8009770:	d036      	beq.n	80097e0 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d019      	beq.n	80097ae <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800977a:	4b35      	ldr	r3, [pc, #212]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 800977c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800977e:	4a34      	ldr	r2, [pc, #208]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 8009780:	f043 0301 	orr.w	r3, r3, #1
 8009784:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009786:	f7fc fa27 	bl	8005bd8 <HAL_GetTick>
 800978a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800978c:	e008      	b.n	80097a0 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800978e:	f7fc fa23 	bl	8005bd8 <HAL_GetTick>
 8009792:	4602      	mov	r2, r0
 8009794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	2b02      	cmp	r3, #2
 800979a:	d901      	bls.n	80097a0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800979c:	2303      	movs	r3, #3
 800979e:	e1ef      	b.n	8009b80 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80097a0:	4b2b      	ldr	r3, [pc, #172]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 80097a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097a4:	f003 0302 	and.w	r3, r3, #2
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d0f0      	beq.n	800978e <HAL_RCC_OscConfig+0x45a>
 80097ac:	e018      	b.n	80097e0 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80097ae:	4b28      	ldr	r3, [pc, #160]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 80097b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097b2:	4a27      	ldr	r2, [pc, #156]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 80097b4:	f023 0301 	bic.w	r3, r3, #1
 80097b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097ba:	f7fc fa0d 	bl	8005bd8 <HAL_GetTick>
 80097be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80097c0:	e008      	b.n	80097d4 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097c2:	f7fc fa09 	bl	8005bd8 <HAL_GetTick>
 80097c6:	4602      	mov	r2, r0
 80097c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ca:	1ad3      	subs	r3, r2, r3
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	d901      	bls.n	80097d4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80097d0:	2303      	movs	r3, #3
 80097d2:	e1d5      	b.n	8009b80 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80097d4:	4b1e      	ldr	r3, [pc, #120]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 80097d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097d8:	f003 0302 	and.w	r3, r3, #2
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d1f0      	bne.n	80097c2 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f003 0320 	and.w	r3, r3, #32
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d039      	beq.n	8009860 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	699b      	ldr	r3, [r3, #24]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d019      	beq.n	8009828 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80097f4:	4b16      	ldr	r3, [pc, #88]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a15      	ldr	r2, [pc, #84]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 80097fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80097fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009800:	f7fc f9ea 	bl	8005bd8 <HAL_GetTick>
 8009804:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009806:	e008      	b.n	800981a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009808:	f7fc f9e6 	bl	8005bd8 <HAL_GetTick>
 800980c:	4602      	mov	r2, r0
 800980e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	2b02      	cmp	r3, #2
 8009814:	d901      	bls.n	800981a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8009816:	2303      	movs	r3, #3
 8009818:	e1b2      	b.n	8009b80 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800981a:	4b0d      	ldr	r3, [pc, #52]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009822:	2b00      	cmp	r3, #0
 8009824:	d0f0      	beq.n	8009808 <HAL_RCC_OscConfig+0x4d4>
 8009826:	e01b      	b.n	8009860 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009828:	4b09      	ldr	r3, [pc, #36]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a08      	ldr	r2, [pc, #32]	; (8009850 <HAL_RCC_OscConfig+0x51c>)
 800982e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009832:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009834:	f7fc f9d0 	bl	8005bd8 <HAL_GetTick>
 8009838:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800983a:	e00b      	b.n	8009854 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800983c:	f7fc f9cc 	bl	8005bd8 <HAL_GetTick>
 8009840:	4602      	mov	r2, r0
 8009842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	2b02      	cmp	r3, #2
 8009848:	d904      	bls.n	8009854 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800984a:	2303      	movs	r3, #3
 800984c:	e198      	b.n	8009b80 <HAL_RCC_OscConfig+0x84c>
 800984e:	bf00      	nop
 8009850:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009854:	4ba3      	ldr	r3, [pc, #652]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1ed      	bne.n	800983c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f003 0304 	and.w	r3, r3, #4
 8009868:	2b00      	cmp	r3, #0
 800986a:	f000 8081 	beq.w	8009970 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800986e:	4b9e      	ldr	r3, [pc, #632]	; (8009ae8 <HAL_RCC_OscConfig+0x7b4>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a9d      	ldr	r2, [pc, #628]	; (8009ae8 <HAL_RCC_OscConfig+0x7b4>)
 8009874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009878:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800987a:	f7fc f9ad 	bl	8005bd8 <HAL_GetTick>
 800987e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009880:	e008      	b.n	8009894 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009882:	f7fc f9a9 	bl	8005bd8 <HAL_GetTick>
 8009886:	4602      	mov	r2, r0
 8009888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	2b64      	cmp	r3, #100	; 0x64
 800988e:	d901      	bls.n	8009894 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8009890:	2303      	movs	r3, #3
 8009892:	e175      	b.n	8009b80 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009894:	4b94      	ldr	r3, [pc, #592]	; (8009ae8 <HAL_RCC_OscConfig+0x7b4>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800989c:	2b00      	cmp	r3, #0
 800989e:	d0f0      	beq.n	8009882 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d106      	bne.n	80098b6 <HAL_RCC_OscConfig+0x582>
 80098a8:	4b8e      	ldr	r3, [pc, #568]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 80098aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ac:	4a8d      	ldr	r2, [pc, #564]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 80098ae:	f043 0301 	orr.w	r3, r3, #1
 80098b2:	6713      	str	r3, [r2, #112]	; 0x70
 80098b4:	e02d      	b.n	8009912 <HAL_RCC_OscConfig+0x5de>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10c      	bne.n	80098d8 <HAL_RCC_OscConfig+0x5a4>
 80098be:	4b89      	ldr	r3, [pc, #548]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 80098c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098c2:	4a88      	ldr	r2, [pc, #544]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 80098c4:	f023 0301 	bic.w	r3, r3, #1
 80098c8:	6713      	str	r3, [r2, #112]	; 0x70
 80098ca:	4b86      	ldr	r3, [pc, #536]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 80098cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ce:	4a85      	ldr	r2, [pc, #532]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 80098d0:	f023 0304 	bic.w	r3, r3, #4
 80098d4:	6713      	str	r3, [r2, #112]	; 0x70
 80098d6:	e01c      	b.n	8009912 <HAL_RCC_OscConfig+0x5de>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	2b05      	cmp	r3, #5
 80098de:	d10c      	bne.n	80098fa <HAL_RCC_OscConfig+0x5c6>
 80098e0:	4b80      	ldr	r3, [pc, #512]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 80098e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098e4:	4a7f      	ldr	r2, [pc, #508]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 80098e6:	f043 0304 	orr.w	r3, r3, #4
 80098ea:	6713      	str	r3, [r2, #112]	; 0x70
 80098ec:	4b7d      	ldr	r3, [pc, #500]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 80098ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098f0:	4a7c      	ldr	r2, [pc, #496]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 80098f2:	f043 0301 	orr.w	r3, r3, #1
 80098f6:	6713      	str	r3, [r2, #112]	; 0x70
 80098f8:	e00b      	b.n	8009912 <HAL_RCC_OscConfig+0x5de>
 80098fa:	4b7a      	ldr	r3, [pc, #488]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 80098fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098fe:	4a79      	ldr	r2, [pc, #484]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009900:	f023 0301 	bic.w	r3, r3, #1
 8009904:	6713      	str	r3, [r2, #112]	; 0x70
 8009906:	4b77      	ldr	r3, [pc, #476]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800990a:	4a76      	ldr	r2, [pc, #472]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 800990c:	f023 0304 	bic.w	r3, r3, #4
 8009910:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d015      	beq.n	8009946 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800991a:	f7fc f95d 	bl	8005bd8 <HAL_GetTick>
 800991e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009920:	e00a      	b.n	8009938 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009922:	f7fc f959 	bl	8005bd8 <HAL_GetTick>
 8009926:	4602      	mov	r2, r0
 8009928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009930:	4293      	cmp	r3, r2
 8009932:	d901      	bls.n	8009938 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8009934:	2303      	movs	r3, #3
 8009936:	e123      	b.n	8009b80 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009938:	4b6a      	ldr	r3, [pc, #424]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 800993a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800993c:	f003 0302 	and.w	r3, r3, #2
 8009940:	2b00      	cmp	r3, #0
 8009942:	d0ee      	beq.n	8009922 <HAL_RCC_OscConfig+0x5ee>
 8009944:	e014      	b.n	8009970 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009946:	f7fc f947 	bl	8005bd8 <HAL_GetTick>
 800994a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800994c:	e00a      	b.n	8009964 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800994e:	f7fc f943 	bl	8005bd8 <HAL_GetTick>
 8009952:	4602      	mov	r2, r0
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	f241 3288 	movw	r2, #5000	; 0x1388
 800995c:	4293      	cmp	r3, r2
 800995e:	d901      	bls.n	8009964 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8009960:	2303      	movs	r3, #3
 8009962:	e10d      	b.n	8009b80 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009964:	4b5f      	ldr	r3, [pc, #380]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009968:	f003 0302 	and.w	r3, r3, #2
 800996c:	2b00      	cmp	r3, #0
 800996e:	d1ee      	bne.n	800994e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009974:	2b00      	cmp	r3, #0
 8009976:	f000 8102 	beq.w	8009b7e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800997a:	4b5a      	ldr	r3, [pc, #360]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009982:	2b18      	cmp	r3, #24
 8009984:	f000 80bd 	beq.w	8009b02 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998c:	2b02      	cmp	r3, #2
 800998e:	f040 8095 	bne.w	8009abc <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009992:	4b54      	ldr	r3, [pc, #336]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a53      	ldr	r2, [pc, #332]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009998:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800999c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800999e:	f7fc f91b 	bl	8005bd8 <HAL_GetTick>
 80099a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80099a4:	e008      	b.n	80099b8 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099a6:	f7fc f917 	bl	8005bd8 <HAL_GetTick>
 80099aa:	4602      	mov	r2, r0
 80099ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	d901      	bls.n	80099b8 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80099b4:	2303      	movs	r3, #3
 80099b6:	e0e3      	b.n	8009b80 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80099b8:	4b4a      	ldr	r3, [pc, #296]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1f0      	bne.n	80099a6 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80099c4:	4b47      	ldr	r3, [pc, #284]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 80099c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099c8:	4b48      	ldr	r3, [pc, #288]	; (8009aec <HAL_RCC_OscConfig+0x7b8>)
 80099ca:	4013      	ands	r3, r2
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80099d4:	0112      	lsls	r2, r2, #4
 80099d6:	430a      	orrs	r2, r1
 80099d8:	4942      	ldr	r1, [pc, #264]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 80099da:	4313      	orrs	r3, r2
 80099dc:	628b      	str	r3, [r1, #40]	; 0x28
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e2:	3b01      	subs	r3, #1
 80099e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ec:	3b01      	subs	r3, #1
 80099ee:	025b      	lsls	r3, r3, #9
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	431a      	orrs	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f8:	3b01      	subs	r3, #1
 80099fa:	041b      	lsls	r3, r3, #16
 80099fc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a00:	431a      	orrs	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a06:	3b01      	subs	r3, #1
 8009a08:	061b      	lsls	r3, r3, #24
 8009a0a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a0e:	4935      	ldr	r1, [pc, #212]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009a10:	4313      	orrs	r3, r2
 8009a12:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009a14:	4b33      	ldr	r3, [pc, #204]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a18:	4a32      	ldr	r2, [pc, #200]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009a1a:	f023 0301 	bic.w	r3, r3, #1
 8009a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009a20:	4b30      	ldr	r3, [pc, #192]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a24:	4b32      	ldr	r3, [pc, #200]	; (8009af0 <HAL_RCC_OscConfig+0x7bc>)
 8009a26:	4013      	ands	r3, r2
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009a2c:	00d2      	lsls	r2, r2, #3
 8009a2e:	492d      	ldr	r1, [pc, #180]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009a30:	4313      	orrs	r3, r2
 8009a32:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009a34:	4b2b      	ldr	r3, [pc, #172]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a38:	f023 020c 	bic.w	r2, r3, #12
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a40:	4928      	ldr	r1, [pc, #160]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009a42:	4313      	orrs	r3, r2
 8009a44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009a46:	4b27      	ldr	r3, [pc, #156]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a4a:	f023 0202 	bic.w	r2, r3, #2
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a52:	4924      	ldr	r1, [pc, #144]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009a54:	4313      	orrs	r3, r2
 8009a56:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009a58:	4b22      	ldr	r3, [pc, #136]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5c:	4a21      	ldr	r2, [pc, #132]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a64:	4b1f      	ldr	r3, [pc, #124]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a68:	4a1e      	ldr	r2, [pc, #120]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009a70:	4b1c      	ldr	r3, [pc, #112]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a74:	4a1b      	ldr	r2, [pc, #108]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009a76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009a7c:	4b19      	ldr	r3, [pc, #100]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a80:	4a18      	ldr	r2, [pc, #96]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009a82:	f043 0301 	orr.w	r3, r3, #1
 8009a86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009a88:	4b16      	ldr	r3, [pc, #88]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a15      	ldr	r2, [pc, #84]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a94:	f7fc f8a0 	bl	8005bd8 <HAL_GetTick>
 8009a98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009a9a:	e008      	b.n	8009aae <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a9c:	f7fc f89c 	bl	8005bd8 <HAL_GetTick>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa4:	1ad3      	subs	r3, r2, r3
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	d901      	bls.n	8009aae <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	e068      	b.n	8009b80 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009aae:	4b0d      	ldr	r3, [pc, #52]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d0f0      	beq.n	8009a9c <HAL_RCC_OscConfig+0x768>
 8009aba:	e060      	b.n	8009b7e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009abc:	4b09      	ldr	r3, [pc, #36]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a08      	ldr	r2, [pc, #32]	; (8009ae4 <HAL_RCC_OscConfig+0x7b0>)
 8009ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ac8:	f7fc f886 	bl	8005bd8 <HAL_GetTick>
 8009acc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ace:	e011      	b.n	8009af4 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ad0:	f7fc f882 	bl	8005bd8 <HAL_GetTick>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d90a      	bls.n	8009af4 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8009ade:	2303      	movs	r3, #3
 8009ae0:	e04e      	b.n	8009b80 <HAL_RCC_OscConfig+0x84c>
 8009ae2:	bf00      	nop
 8009ae4:	58024400 	.word	0x58024400
 8009ae8:	58024800 	.word	0x58024800
 8009aec:	fffffc0c 	.word	0xfffffc0c
 8009af0:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009af4:	4b24      	ldr	r3, [pc, #144]	; (8009b88 <HAL_RCC_OscConfig+0x854>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d1e7      	bne.n	8009ad0 <HAL_RCC_OscConfig+0x79c>
 8009b00:	e03d      	b.n	8009b7e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009b02:	4b21      	ldr	r3, [pc, #132]	; (8009b88 <HAL_RCC_OscConfig+0x854>)
 8009b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b06:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009b08:	4b1f      	ldr	r3, [pc, #124]	; (8009b88 <HAL_RCC_OscConfig+0x854>)
 8009b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b0c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d031      	beq.n	8009b7a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	f003 0203 	and.w	r2, r3, #3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d12a      	bne.n	8009b7a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	091b      	lsrs	r3, r3, #4
 8009b28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d122      	bne.n	8009b7a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b3e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d11a      	bne.n	8009b7a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	0a5b      	lsrs	r3, r3, #9
 8009b48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b50:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d111      	bne.n	8009b7a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	0c1b      	lsrs	r3, r3, #16
 8009b5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b62:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d108      	bne.n	8009b7a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	0e1b      	lsrs	r3, r3, #24
 8009b6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b74:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d001      	beq.n	8009b7e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e000      	b.n	8009b80 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3730      	adds	r7, #48	; 0x30
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	58024400 	.word	0x58024400

08009b8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b086      	sub	sp, #24
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d101      	bne.n	8009ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e19c      	b.n	8009eda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009ba0:	4b8a      	ldr	r3, [pc, #552]	; (8009dcc <HAL_RCC_ClockConfig+0x240>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f003 030f 	and.w	r3, r3, #15
 8009ba8:	683a      	ldr	r2, [r7, #0]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d910      	bls.n	8009bd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bae:	4b87      	ldr	r3, [pc, #540]	; (8009dcc <HAL_RCC_ClockConfig+0x240>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f023 020f 	bic.w	r2, r3, #15
 8009bb6:	4985      	ldr	r1, [pc, #532]	; (8009dcc <HAL_RCC_ClockConfig+0x240>)
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bbe:	4b83      	ldr	r3, [pc, #524]	; (8009dcc <HAL_RCC_ClockConfig+0x240>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f003 030f 	and.w	r3, r3, #15
 8009bc6:	683a      	ldr	r2, [r7, #0]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d001      	beq.n	8009bd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e184      	b.n	8009eda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f003 0304 	and.w	r3, r3, #4
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d010      	beq.n	8009bfe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	691a      	ldr	r2, [r3, #16]
 8009be0:	4b7b      	ldr	r3, [pc, #492]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009be2:	699b      	ldr	r3, [r3, #24]
 8009be4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d908      	bls.n	8009bfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009bec:	4b78      	ldr	r3, [pc, #480]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009bee:	699b      	ldr	r3, [r3, #24]
 8009bf0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	691b      	ldr	r3, [r3, #16]
 8009bf8:	4975      	ldr	r1, [pc, #468]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f003 0308 	and.w	r3, r3, #8
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d010      	beq.n	8009c2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	695a      	ldr	r2, [r3, #20]
 8009c0e:	4b70      	ldr	r3, [pc, #448]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009c10:	69db      	ldr	r3, [r3, #28]
 8009c12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d908      	bls.n	8009c2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009c1a:	4b6d      	ldr	r3, [pc, #436]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009c1c:	69db      	ldr	r3, [r3, #28]
 8009c1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	695b      	ldr	r3, [r3, #20]
 8009c26:	496a      	ldr	r1, [pc, #424]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 0310 	and.w	r3, r3, #16
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d010      	beq.n	8009c5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	699a      	ldr	r2, [r3, #24]
 8009c3c:	4b64      	ldr	r3, [pc, #400]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009c3e:	69db      	ldr	r3, [r3, #28]
 8009c40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d908      	bls.n	8009c5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009c48:	4b61      	ldr	r3, [pc, #388]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009c4a:	69db      	ldr	r3, [r3, #28]
 8009c4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	699b      	ldr	r3, [r3, #24]
 8009c54:	495e      	ldr	r1, [pc, #376]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009c56:	4313      	orrs	r3, r2
 8009c58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f003 0320 	and.w	r3, r3, #32
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d010      	beq.n	8009c88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	69da      	ldr	r2, [r3, #28]
 8009c6a:	4b59      	ldr	r3, [pc, #356]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009c6c:	6a1b      	ldr	r3, [r3, #32]
 8009c6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d908      	bls.n	8009c88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009c76:	4b56      	ldr	r3, [pc, #344]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009c78:	6a1b      	ldr	r3, [r3, #32]
 8009c7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	69db      	ldr	r3, [r3, #28]
 8009c82:	4953      	ldr	r1, [pc, #332]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009c84:	4313      	orrs	r3, r2
 8009c86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f003 0302 	and.w	r3, r3, #2
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d010      	beq.n	8009cb6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	68da      	ldr	r2, [r3, #12]
 8009c98:	4b4d      	ldr	r3, [pc, #308]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009c9a:	699b      	ldr	r3, [r3, #24]
 8009c9c:	f003 030f 	and.w	r3, r3, #15
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d908      	bls.n	8009cb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ca4:	4b4a      	ldr	r3, [pc, #296]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	f023 020f 	bic.w	r2, r3, #15
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	4947      	ldr	r1, [pc, #284]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f003 0301 	and.w	r3, r3, #1
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d055      	beq.n	8009d6e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009cc2:	4b43      	ldr	r3, [pc, #268]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	4940      	ldr	r1, [pc, #256]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d107      	bne.n	8009cec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009cdc:	4b3c      	ldr	r3, [pc, #240]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d121      	bne.n	8009d2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e0f6      	b.n	8009eda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	2b03      	cmp	r3, #3
 8009cf2:	d107      	bne.n	8009d04 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009cf4:	4b36      	ldr	r3, [pc, #216]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d115      	bne.n	8009d2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	e0ea      	b.n	8009eda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d107      	bne.n	8009d1c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009d0c:	4b30      	ldr	r3, [pc, #192]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d109      	bne.n	8009d2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e0de      	b.n	8009eda <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d1c:	4b2c      	ldr	r3, [pc, #176]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f003 0304 	and.w	r3, r3, #4
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d101      	bne.n	8009d2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e0d6      	b.n	8009eda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009d2c:	4b28      	ldr	r3, [pc, #160]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	f023 0207 	bic.w	r2, r3, #7
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	4925      	ldr	r1, [pc, #148]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d3e:	f7fb ff4b 	bl	8005bd8 <HAL_GetTick>
 8009d42:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d44:	e00a      	b.n	8009d5c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d46:	f7fb ff47 	bl	8005bd8 <HAL_GetTick>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	1ad3      	subs	r3, r2, r3
 8009d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d901      	bls.n	8009d5c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009d58:	2303      	movs	r3, #3
 8009d5a:	e0be      	b.n	8009eda <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d5c:	4b1c      	ldr	r3, [pc, #112]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	00db      	lsls	r3, r3, #3
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d1eb      	bne.n	8009d46 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f003 0302 	and.w	r3, r3, #2
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d010      	beq.n	8009d9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	68da      	ldr	r2, [r3, #12]
 8009d7e:	4b14      	ldr	r3, [pc, #80]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009d80:	699b      	ldr	r3, [r3, #24]
 8009d82:	f003 030f 	and.w	r3, r3, #15
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d208      	bcs.n	8009d9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d8a:	4b11      	ldr	r3, [pc, #68]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009d8c:	699b      	ldr	r3, [r3, #24]
 8009d8e:	f023 020f 	bic.w	r2, r3, #15
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	490e      	ldr	r1, [pc, #56]	; (8009dd0 <HAL_RCC_ClockConfig+0x244>)
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009d9c:	4b0b      	ldr	r3, [pc, #44]	; (8009dcc <HAL_RCC_ClockConfig+0x240>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f003 030f 	and.w	r3, r3, #15
 8009da4:	683a      	ldr	r2, [r7, #0]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d214      	bcs.n	8009dd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009daa:	4b08      	ldr	r3, [pc, #32]	; (8009dcc <HAL_RCC_ClockConfig+0x240>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f023 020f 	bic.w	r2, r3, #15
 8009db2:	4906      	ldr	r1, [pc, #24]	; (8009dcc <HAL_RCC_ClockConfig+0x240>)
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009dba:	4b04      	ldr	r3, [pc, #16]	; (8009dcc <HAL_RCC_ClockConfig+0x240>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f003 030f 	and.w	r3, r3, #15
 8009dc2:	683a      	ldr	r2, [r7, #0]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d005      	beq.n	8009dd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e086      	b.n	8009eda <HAL_RCC_ClockConfig+0x34e>
 8009dcc:	52002000 	.word	0x52002000
 8009dd0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 0304 	and.w	r3, r3, #4
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d010      	beq.n	8009e02 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	691a      	ldr	r2, [r3, #16]
 8009de4:	4b3f      	ldr	r3, [pc, #252]	; (8009ee4 <HAL_RCC_ClockConfig+0x358>)
 8009de6:	699b      	ldr	r3, [r3, #24]
 8009de8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d208      	bcs.n	8009e02 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009df0:	4b3c      	ldr	r3, [pc, #240]	; (8009ee4 <HAL_RCC_ClockConfig+0x358>)
 8009df2:	699b      	ldr	r3, [r3, #24]
 8009df4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	4939      	ldr	r1, [pc, #228]	; (8009ee4 <HAL_RCC_ClockConfig+0x358>)
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f003 0308 	and.w	r3, r3, #8
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d010      	beq.n	8009e30 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	695a      	ldr	r2, [r3, #20]
 8009e12:	4b34      	ldr	r3, [pc, #208]	; (8009ee4 <HAL_RCC_ClockConfig+0x358>)
 8009e14:	69db      	ldr	r3, [r3, #28]
 8009e16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d208      	bcs.n	8009e30 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009e1e:	4b31      	ldr	r3, [pc, #196]	; (8009ee4 <HAL_RCC_ClockConfig+0x358>)
 8009e20:	69db      	ldr	r3, [r3, #28]
 8009e22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	695b      	ldr	r3, [r3, #20]
 8009e2a:	492e      	ldr	r1, [pc, #184]	; (8009ee4 <HAL_RCC_ClockConfig+0x358>)
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f003 0310 	and.w	r3, r3, #16
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d010      	beq.n	8009e5e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	699a      	ldr	r2, [r3, #24]
 8009e40:	4b28      	ldr	r3, [pc, #160]	; (8009ee4 <HAL_RCC_ClockConfig+0x358>)
 8009e42:	69db      	ldr	r3, [r3, #28]
 8009e44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d208      	bcs.n	8009e5e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009e4c:	4b25      	ldr	r3, [pc, #148]	; (8009ee4 <HAL_RCC_ClockConfig+0x358>)
 8009e4e:	69db      	ldr	r3, [r3, #28]
 8009e50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	699b      	ldr	r3, [r3, #24]
 8009e58:	4922      	ldr	r1, [pc, #136]	; (8009ee4 <HAL_RCC_ClockConfig+0x358>)
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f003 0320 	and.w	r3, r3, #32
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d010      	beq.n	8009e8c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	69da      	ldr	r2, [r3, #28]
 8009e6e:	4b1d      	ldr	r3, [pc, #116]	; (8009ee4 <HAL_RCC_ClockConfig+0x358>)
 8009e70:	6a1b      	ldr	r3, [r3, #32]
 8009e72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d208      	bcs.n	8009e8c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009e7a:	4b1a      	ldr	r3, [pc, #104]	; (8009ee4 <HAL_RCC_ClockConfig+0x358>)
 8009e7c:	6a1b      	ldr	r3, [r3, #32]
 8009e7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	69db      	ldr	r3, [r3, #28]
 8009e86:	4917      	ldr	r1, [pc, #92]	; (8009ee4 <HAL_RCC_ClockConfig+0x358>)
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009e8c:	f000 f834 	bl	8009ef8 <HAL_RCC_GetSysClockFreq>
 8009e90:	4602      	mov	r2, r0
 8009e92:	4b14      	ldr	r3, [pc, #80]	; (8009ee4 <HAL_RCC_ClockConfig+0x358>)
 8009e94:	699b      	ldr	r3, [r3, #24]
 8009e96:	0a1b      	lsrs	r3, r3, #8
 8009e98:	f003 030f 	and.w	r3, r3, #15
 8009e9c:	4912      	ldr	r1, [pc, #72]	; (8009ee8 <HAL_RCC_ClockConfig+0x35c>)
 8009e9e:	5ccb      	ldrb	r3, [r1, r3]
 8009ea0:	f003 031f 	and.w	r3, r3, #31
 8009ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ea8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009eaa:	4b0e      	ldr	r3, [pc, #56]	; (8009ee4 <HAL_RCC_ClockConfig+0x358>)
 8009eac:	699b      	ldr	r3, [r3, #24]
 8009eae:	f003 030f 	and.w	r3, r3, #15
 8009eb2:	4a0d      	ldr	r2, [pc, #52]	; (8009ee8 <HAL_RCC_ClockConfig+0x35c>)
 8009eb4:	5cd3      	ldrb	r3, [r2, r3]
 8009eb6:	f003 031f 	and.w	r3, r3, #31
 8009eba:	693a      	ldr	r2, [r7, #16]
 8009ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8009ec0:	4a0a      	ldr	r2, [pc, #40]	; (8009eec <HAL_RCC_ClockConfig+0x360>)
 8009ec2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009ec4:	4a0a      	ldr	r2, [pc, #40]	; (8009ef0 <HAL_RCC_ClockConfig+0x364>)
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009eca:	4b0a      	ldr	r3, [pc, #40]	; (8009ef4 <HAL_RCC_ClockConfig+0x368>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fb fe38 	bl	8005b44 <HAL_InitTick>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3718      	adds	r7, #24
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	58024400 	.word	0x58024400
 8009ee8:	080131a0 	.word	0x080131a0
 8009eec:	24000018 	.word	0x24000018
 8009ef0:	24000014 	.word	0x24000014
 8009ef4:	2400001c 	.word	0x2400001c

08009ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b089      	sub	sp, #36	; 0x24
 8009efc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009efe:	4bb3      	ldr	r3, [pc, #716]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f06:	2b18      	cmp	r3, #24
 8009f08:	f200 8155 	bhi.w	800a1b6 <HAL_RCC_GetSysClockFreq+0x2be>
 8009f0c:	a201      	add	r2, pc, #4	; (adr r2, 8009f14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f12:	bf00      	nop
 8009f14:	08009f79 	.word	0x08009f79
 8009f18:	0800a1b7 	.word	0x0800a1b7
 8009f1c:	0800a1b7 	.word	0x0800a1b7
 8009f20:	0800a1b7 	.word	0x0800a1b7
 8009f24:	0800a1b7 	.word	0x0800a1b7
 8009f28:	0800a1b7 	.word	0x0800a1b7
 8009f2c:	0800a1b7 	.word	0x0800a1b7
 8009f30:	0800a1b7 	.word	0x0800a1b7
 8009f34:	08009f9f 	.word	0x08009f9f
 8009f38:	0800a1b7 	.word	0x0800a1b7
 8009f3c:	0800a1b7 	.word	0x0800a1b7
 8009f40:	0800a1b7 	.word	0x0800a1b7
 8009f44:	0800a1b7 	.word	0x0800a1b7
 8009f48:	0800a1b7 	.word	0x0800a1b7
 8009f4c:	0800a1b7 	.word	0x0800a1b7
 8009f50:	0800a1b7 	.word	0x0800a1b7
 8009f54:	08009fa5 	.word	0x08009fa5
 8009f58:	0800a1b7 	.word	0x0800a1b7
 8009f5c:	0800a1b7 	.word	0x0800a1b7
 8009f60:	0800a1b7 	.word	0x0800a1b7
 8009f64:	0800a1b7 	.word	0x0800a1b7
 8009f68:	0800a1b7 	.word	0x0800a1b7
 8009f6c:	0800a1b7 	.word	0x0800a1b7
 8009f70:	0800a1b7 	.word	0x0800a1b7
 8009f74:	08009fab 	.word	0x08009fab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f78:	4b94      	ldr	r3, [pc, #592]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 0320 	and.w	r3, r3, #32
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d009      	beq.n	8009f98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f84:	4b91      	ldr	r3, [pc, #580]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	08db      	lsrs	r3, r3, #3
 8009f8a:	f003 0303 	and.w	r3, r3, #3
 8009f8e:	4a90      	ldr	r2, [pc, #576]	; (800a1d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009f90:	fa22 f303 	lsr.w	r3, r2, r3
 8009f94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009f96:	e111      	b.n	800a1bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009f98:	4b8d      	ldr	r3, [pc, #564]	; (800a1d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009f9a:	61bb      	str	r3, [r7, #24]
    break;
 8009f9c:	e10e      	b.n	800a1bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009f9e:	4b8d      	ldr	r3, [pc, #564]	; (800a1d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009fa0:	61bb      	str	r3, [r7, #24]
    break;
 8009fa2:	e10b      	b.n	800a1bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009fa4:	4b8c      	ldr	r3, [pc, #560]	; (800a1d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009fa6:	61bb      	str	r3, [r7, #24]
    break;
 8009fa8:	e108      	b.n	800a1bc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009faa:	4b88      	ldr	r3, [pc, #544]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fae:	f003 0303 	and.w	r3, r3, #3
 8009fb2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009fb4:	4b85      	ldr	r3, [pc, #532]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fb8:	091b      	lsrs	r3, r3, #4
 8009fba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fbe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009fc0:	4b82      	ldr	r3, [pc, #520]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc4:	f003 0301 	and.w	r3, r3, #1
 8009fc8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009fca:	4b80      	ldr	r3, [pc, #512]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fce:	08db      	lsrs	r3, r3, #3
 8009fd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	fb02 f303 	mul.w	r3, r2, r3
 8009fda:	ee07 3a90 	vmov	s15, r3
 8009fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fe2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f000 80e1 	beq.w	800a1b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	2b02      	cmp	r3, #2
 8009ff2:	f000 8083 	beq.w	800a0fc <HAL_RCC_GetSysClockFreq+0x204>
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	2b02      	cmp	r3, #2
 8009ffa:	f200 80a1 	bhi.w	800a140 <HAL_RCC_GetSysClockFreq+0x248>
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d003      	beq.n	800a00c <HAL_RCC_GetSysClockFreq+0x114>
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	2b01      	cmp	r3, #1
 800a008:	d056      	beq.n	800a0b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a00a:	e099      	b.n	800a140 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a00c:	4b6f      	ldr	r3, [pc, #444]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 0320 	and.w	r3, r3, #32
 800a014:	2b00      	cmp	r3, #0
 800a016:	d02d      	beq.n	800a074 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a018:	4b6c      	ldr	r3, [pc, #432]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	08db      	lsrs	r3, r3, #3
 800a01e:	f003 0303 	and.w	r3, r3, #3
 800a022:	4a6b      	ldr	r2, [pc, #428]	; (800a1d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a024:	fa22 f303 	lsr.w	r3, r2, r3
 800a028:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	ee07 3a90 	vmov	s15, r3
 800a030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	ee07 3a90 	vmov	s15, r3
 800a03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a03e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a042:	4b62      	ldr	r3, [pc, #392]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a04a:	ee07 3a90 	vmov	s15, r3
 800a04e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a052:	ed97 6a02 	vldr	s12, [r7, #8]
 800a056:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a1dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a05a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a05e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a06a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a06e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a072:	e087      	b.n	800a184 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	ee07 3a90 	vmov	s15, r3
 800a07a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a07e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a1e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a086:	4b51      	ldr	r3, [pc, #324]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a08e:	ee07 3a90 	vmov	s15, r3
 800a092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a096:	ed97 6a02 	vldr	s12, [r7, #8]
 800a09a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a1dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a09e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0b6:	e065      	b.n	800a184 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	ee07 3a90 	vmov	s15, r3
 800a0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a1e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a0c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ca:	4b40      	ldr	r3, [pc, #256]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d2:	ee07 3a90 	vmov	s15, r3
 800a0d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0da:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a1dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a0e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0fa:	e043      	b.n	800a184 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	ee07 3a90 	vmov	s15, r3
 800a102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a106:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a1e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a10a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a10e:	4b2f      	ldr	r3, [pc, #188]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a116:	ee07 3a90 	vmov	s15, r3
 800a11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a11e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a122:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a1dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a12e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a13a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a13e:	e021      	b.n	800a184 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	ee07 3a90 	vmov	s15, r3
 800a146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a14a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a1e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a14e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a152:	4b1e      	ldr	r3, [pc, #120]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a15a:	ee07 3a90 	vmov	s15, r3
 800a15e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a162:	ed97 6a02 	vldr	s12, [r7, #8]
 800a166:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a1dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a16a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a16e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a17a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a17e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a182:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a184:	4b11      	ldr	r3, [pc, #68]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a188:	0a5b      	lsrs	r3, r3, #9
 800a18a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a18e:	3301      	adds	r3, #1
 800a190:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	ee07 3a90 	vmov	s15, r3
 800a198:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a19c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1a8:	ee17 3a90 	vmov	r3, s15
 800a1ac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a1ae:	e005      	b.n	800a1bc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	61bb      	str	r3, [r7, #24]
    break;
 800a1b4:	e002      	b.n	800a1bc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a1b6:	4b07      	ldr	r3, [pc, #28]	; (800a1d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a1b8:	61bb      	str	r3, [r7, #24]
    break;
 800a1ba:	bf00      	nop
  }

  return sysclockfreq;
 800a1bc:	69bb      	ldr	r3, [r7, #24]
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3724      	adds	r7, #36	; 0x24
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	58024400 	.word	0x58024400
 800a1d0:	03d09000 	.word	0x03d09000
 800a1d4:	003d0900 	.word	0x003d0900
 800a1d8:	02dc6c00 	.word	0x02dc6c00
 800a1dc:	46000000 	.word	0x46000000
 800a1e0:	4c742400 	.word	0x4c742400
 800a1e4:	4a742400 	.word	0x4a742400
 800a1e8:	4c371b00 	.word	0x4c371b00

0800a1ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a1f2:	f7ff fe81 	bl	8009ef8 <HAL_RCC_GetSysClockFreq>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	4b10      	ldr	r3, [pc, #64]	; (800a23c <HAL_RCC_GetHCLKFreq+0x50>)
 800a1fa:	699b      	ldr	r3, [r3, #24]
 800a1fc:	0a1b      	lsrs	r3, r3, #8
 800a1fe:	f003 030f 	and.w	r3, r3, #15
 800a202:	490f      	ldr	r1, [pc, #60]	; (800a240 <HAL_RCC_GetHCLKFreq+0x54>)
 800a204:	5ccb      	ldrb	r3, [r1, r3]
 800a206:	f003 031f 	and.w	r3, r3, #31
 800a20a:	fa22 f303 	lsr.w	r3, r2, r3
 800a20e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a210:	4b0a      	ldr	r3, [pc, #40]	; (800a23c <HAL_RCC_GetHCLKFreq+0x50>)
 800a212:	699b      	ldr	r3, [r3, #24]
 800a214:	f003 030f 	and.w	r3, r3, #15
 800a218:	4a09      	ldr	r2, [pc, #36]	; (800a240 <HAL_RCC_GetHCLKFreq+0x54>)
 800a21a:	5cd3      	ldrb	r3, [r2, r3]
 800a21c:	f003 031f 	and.w	r3, r3, #31
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	fa22 f303 	lsr.w	r3, r2, r3
 800a226:	4a07      	ldr	r2, [pc, #28]	; (800a244 <HAL_RCC_GetHCLKFreq+0x58>)
 800a228:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a22a:	4a07      	ldr	r2, [pc, #28]	; (800a248 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a230:	4b04      	ldr	r3, [pc, #16]	; (800a244 <HAL_RCC_GetHCLKFreq+0x58>)
 800a232:	681b      	ldr	r3, [r3, #0]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3708      	adds	r7, #8
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	58024400 	.word	0x58024400
 800a240:	080131a0 	.word	0x080131a0
 800a244:	24000018 	.word	0x24000018
 800a248:	24000014 	.word	0x24000014

0800a24c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a250:	f7ff ffcc 	bl	800a1ec <HAL_RCC_GetHCLKFreq>
 800a254:	4602      	mov	r2, r0
 800a256:	4b06      	ldr	r3, [pc, #24]	; (800a270 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a258:	69db      	ldr	r3, [r3, #28]
 800a25a:	091b      	lsrs	r3, r3, #4
 800a25c:	f003 0307 	and.w	r3, r3, #7
 800a260:	4904      	ldr	r1, [pc, #16]	; (800a274 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a262:	5ccb      	ldrb	r3, [r1, r3]
 800a264:	f003 031f 	and.w	r3, r3, #31
 800a268:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	58024400 	.word	0x58024400
 800a274:	080131a0 	.word	0x080131a0

0800a278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a27c:	f7ff ffb6 	bl	800a1ec <HAL_RCC_GetHCLKFreq>
 800a280:	4602      	mov	r2, r0
 800a282:	4b06      	ldr	r3, [pc, #24]	; (800a29c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a284:	69db      	ldr	r3, [r3, #28]
 800a286:	0a1b      	lsrs	r3, r3, #8
 800a288:	f003 0307 	and.w	r3, r3, #7
 800a28c:	4904      	ldr	r1, [pc, #16]	; (800a2a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a28e:	5ccb      	ldrb	r3, [r1, r3]
 800a290:	f003 031f 	and.w	r3, r3, #31
 800a294:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a298:	4618      	mov	r0, r3
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	58024400 	.word	0x58024400
 800a2a0:	080131a0 	.word	0x080131a0

0800a2a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b086      	sub	sp, #24
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d03f      	beq.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2c8:	d02a      	beq.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a2ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2ce:	d824      	bhi.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a2d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2d4:	d018      	beq.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a2d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2da:	d81e      	bhi.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d003      	beq.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a2e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2e4:	d007      	beq.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a2e6:	e018      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2e8:	4bab      	ldr	r3, [pc, #684]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ec:	4aaa      	ldr	r2, [pc, #680]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a2ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a2f4:	e015      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	3304      	adds	r3, #4
 800a2fa:	2102      	movs	r1, #2
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f001 f9cf 	bl	800b6a0 <RCCEx_PLL2_Config>
 800a302:	4603      	mov	r3, r0
 800a304:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a306:	e00c      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	3324      	adds	r3, #36	; 0x24
 800a30c:	2102      	movs	r1, #2
 800a30e:	4618      	mov	r0, r3
 800a310:	f001 fa78 	bl	800b804 <RCCEx_PLL3_Config>
 800a314:	4603      	mov	r3, r0
 800a316:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a318:	e003      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	75fb      	strb	r3, [r7, #23]
      break;
 800a31e:	e000      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a320:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a322:	7dfb      	ldrb	r3, [r7, #23]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d109      	bne.n	800a33c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a328:	4b9b      	ldr	r3, [pc, #620]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a32a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a32c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a334:	4998      	ldr	r1, [pc, #608]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a336:	4313      	orrs	r3, r2
 800a338:	650b      	str	r3, [r1, #80]	; 0x50
 800a33a:	e001      	b.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a33c:	7dfb      	ldrb	r3, [r7, #23]
 800a33e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d03d      	beq.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a350:	2b04      	cmp	r3, #4
 800a352:	d826      	bhi.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a354:	a201      	add	r2, pc, #4	; (adr r2, 800a35c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a35a:	bf00      	nop
 800a35c:	0800a371 	.word	0x0800a371
 800a360:	0800a37f 	.word	0x0800a37f
 800a364:	0800a391 	.word	0x0800a391
 800a368:	0800a3a9 	.word	0x0800a3a9
 800a36c:	0800a3a9 	.word	0x0800a3a9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a370:	4b89      	ldr	r3, [pc, #548]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a374:	4a88      	ldr	r2, [pc, #544]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a37a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a37c:	e015      	b.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	3304      	adds	r3, #4
 800a382:	2100      	movs	r1, #0
 800a384:	4618      	mov	r0, r3
 800a386:	f001 f98b 	bl	800b6a0 <RCCEx_PLL2_Config>
 800a38a:	4603      	mov	r3, r0
 800a38c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a38e:	e00c      	b.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	3324      	adds	r3, #36	; 0x24
 800a394:	2100      	movs	r1, #0
 800a396:	4618      	mov	r0, r3
 800a398:	f001 fa34 	bl	800b804 <RCCEx_PLL3_Config>
 800a39c:	4603      	mov	r3, r0
 800a39e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a3a0:	e003      	b.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	75fb      	strb	r3, [r7, #23]
      break;
 800a3a6:	e000      	b.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a3a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3aa:	7dfb      	ldrb	r3, [r7, #23]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d109      	bne.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a3b0:	4b79      	ldr	r3, [pc, #484]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3b4:	f023 0207 	bic.w	r2, r3, #7
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3bc:	4976      	ldr	r1, [pc, #472]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	650b      	str	r3, [r1, #80]	; 0x50
 800a3c2:	e001      	b.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3c4:	7dfb      	ldrb	r3, [r7, #23]
 800a3c6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d042      	beq.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3dc:	d02b      	beq.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a3de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3e2:	d825      	bhi.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a3e4:	2bc0      	cmp	r3, #192	; 0xc0
 800a3e6:	d028      	beq.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a3e8:	2bc0      	cmp	r3, #192	; 0xc0
 800a3ea:	d821      	bhi.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a3ec:	2b80      	cmp	r3, #128	; 0x80
 800a3ee:	d016      	beq.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800a3f0:	2b80      	cmp	r3, #128	; 0x80
 800a3f2:	d81d      	bhi.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d002      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800a3f8:	2b40      	cmp	r3, #64	; 0x40
 800a3fa:	d007      	beq.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a3fc:	e018      	b.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3fe:	4b66      	ldr	r3, [pc, #408]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a402:	4a65      	ldr	r2, [pc, #404]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a408:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a40a:	e017      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	3304      	adds	r3, #4
 800a410:	2100      	movs	r1, #0
 800a412:	4618      	mov	r0, r3
 800a414:	f001 f944 	bl	800b6a0 <RCCEx_PLL2_Config>
 800a418:	4603      	mov	r3, r0
 800a41a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a41c:	e00e      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	3324      	adds	r3, #36	; 0x24
 800a422:	2100      	movs	r1, #0
 800a424:	4618      	mov	r0, r3
 800a426:	f001 f9ed 	bl	800b804 <RCCEx_PLL3_Config>
 800a42a:	4603      	mov	r3, r0
 800a42c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a42e:	e005      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a430:	2301      	movs	r3, #1
 800a432:	75fb      	strb	r3, [r7, #23]
      break;
 800a434:	e002      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a436:	bf00      	nop
 800a438:	e000      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a43a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a43c:	7dfb      	ldrb	r3, [r7, #23]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d109      	bne.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a442:	4b55      	ldr	r3, [pc, #340]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a446:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a44e:	4952      	ldr	r1, [pc, #328]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a450:	4313      	orrs	r3, r2
 800a452:	650b      	str	r3, [r1, #80]	; 0x50
 800a454:	e001      	b.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a456:	7dfb      	ldrb	r3, [r7, #23]
 800a458:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a462:	2b00      	cmp	r3, #0
 800a464:	d049      	beq.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a46c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a470:	d030      	beq.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a472:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a476:	d82a      	bhi.n	800a4ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a478:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a47c:	d02c      	beq.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800a47e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a482:	d824      	bhi.n	800a4ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a488:	d018      	beq.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x218>
 800a48a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a48e:	d81e      	bhi.n	800a4ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a490:	2b00      	cmp	r3, #0
 800a492:	d003      	beq.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800a494:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a498:	d007      	beq.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a49a:	e018      	b.n	800a4ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a49c:	4b3e      	ldr	r3, [pc, #248]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a0:	4a3d      	ldr	r2, [pc, #244]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a4a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a4a8:	e017      	b.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	3304      	adds	r3, #4
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f001 f8f5 	bl	800b6a0 <RCCEx_PLL2_Config>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a4ba:	e00e      	b.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	3324      	adds	r3, #36	; 0x24
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f001 f99e 	bl	800b804 <RCCEx_PLL3_Config>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a4cc:	e005      	b.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	75fb      	strb	r3, [r7, #23]
      break;
 800a4d2:	e002      	b.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a4d4:	bf00      	nop
 800a4d6:	e000      	b.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a4d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4da:	7dfb      	ldrb	r3, [r7, #23]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d10a      	bne.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a4e0:	4b2d      	ldr	r3, [pc, #180]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a4e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4e4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a4ee:	492a      	ldr	r1, [pc, #168]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	658b      	str	r3, [r1, #88]	; 0x58
 800a4f4:	e001      	b.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4f6:	7dfb      	ldrb	r3, [r7, #23]
 800a4f8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a502:	2b00      	cmp	r3, #0
 800a504:	d04c      	beq.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a50c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a510:	d030      	beq.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a512:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a516:	d82a      	bhi.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a518:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a51c:	d02c      	beq.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800a51e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a522:	d824      	bhi.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a524:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a528:	d018      	beq.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800a52a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a52e:	d81e      	bhi.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a530:	2b00      	cmp	r3, #0
 800a532:	d003      	beq.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a538:	d007      	beq.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a53a:	e018      	b.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a53c:	4b16      	ldr	r3, [pc, #88]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a540:	4a15      	ldr	r2, [pc, #84]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a546:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a548:	e017      	b.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	3304      	adds	r3, #4
 800a54e:	2100      	movs	r1, #0
 800a550:	4618      	mov	r0, r3
 800a552:	f001 f8a5 	bl	800b6a0 <RCCEx_PLL2_Config>
 800a556:	4603      	mov	r3, r0
 800a558:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a55a:	e00e      	b.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	3324      	adds	r3, #36	; 0x24
 800a560:	2100      	movs	r1, #0
 800a562:	4618      	mov	r0, r3
 800a564:	f001 f94e 	bl	800b804 <RCCEx_PLL3_Config>
 800a568:	4603      	mov	r3, r0
 800a56a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a56c:	e005      	b.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	75fb      	strb	r3, [r7, #23]
      break;
 800a572:	e002      	b.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a574:	bf00      	nop
 800a576:	e000      	b.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a57a:	7dfb      	ldrb	r3, [r7, #23]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10d      	bne.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a580:	4b05      	ldr	r3, [pc, #20]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a584:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a58e:	4902      	ldr	r1, [pc, #8]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a590:	4313      	orrs	r3, r2
 800a592:	658b      	str	r3, [r1, #88]	; 0x58
 800a594:	e004      	b.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800a596:	bf00      	nop
 800a598:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a59c:	7dfb      	ldrb	r3, [r7, #23]
 800a59e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d032      	beq.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5b0:	2b30      	cmp	r3, #48	; 0x30
 800a5b2:	d01c      	beq.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a5b4:	2b30      	cmp	r3, #48	; 0x30
 800a5b6:	d817      	bhi.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a5b8:	2b20      	cmp	r3, #32
 800a5ba:	d00c      	beq.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a5bc:	2b20      	cmp	r3, #32
 800a5be:	d813      	bhi.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d016      	beq.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a5c4:	2b10      	cmp	r3, #16
 800a5c6:	d10f      	bne.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5c8:	4baf      	ldr	r3, [pc, #700]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5cc:	4aae      	ldr	r2, [pc, #696]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a5ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a5d4:	e00e      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	3304      	adds	r3, #4
 800a5da:	2102      	movs	r1, #2
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f001 f85f 	bl	800b6a0 <RCCEx_PLL2_Config>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a5e6:	e005      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	75fb      	strb	r3, [r7, #23]
      break;
 800a5ec:	e002      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a5ee:	bf00      	nop
 800a5f0:	e000      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a5f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5f4:	7dfb      	ldrb	r3, [r7, #23]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d109      	bne.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a5fa:	4ba3      	ldr	r3, [pc, #652]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a5fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a606:	49a0      	ldr	r1, [pc, #640]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a608:	4313      	orrs	r3, r2
 800a60a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a60c:	e001      	b.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a60e:	7dfb      	ldrb	r3, [r7, #23]
 800a610:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d047      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a626:	d030      	beq.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800a628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a62c:	d82a      	bhi.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a62e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a632:	d02c      	beq.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800a634:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a638:	d824      	bhi.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a63a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a63e:	d018      	beq.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800a640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a644:	d81e      	bhi.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a646:	2b00      	cmp	r3, #0
 800a648:	d003      	beq.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800a64a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a64e:	d007      	beq.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800a650:	e018      	b.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a652:	4b8d      	ldr	r3, [pc, #564]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a656:	4a8c      	ldr	r2, [pc, #560]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a65c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a65e:	e017      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	3304      	adds	r3, #4
 800a664:	2100      	movs	r1, #0
 800a666:	4618      	mov	r0, r3
 800a668:	f001 f81a 	bl	800b6a0 <RCCEx_PLL2_Config>
 800a66c:	4603      	mov	r3, r0
 800a66e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a670:	e00e      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	3324      	adds	r3, #36	; 0x24
 800a676:	2100      	movs	r1, #0
 800a678:	4618      	mov	r0, r3
 800a67a:	f001 f8c3 	bl	800b804 <RCCEx_PLL3_Config>
 800a67e:	4603      	mov	r3, r0
 800a680:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a682:	e005      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	75fb      	strb	r3, [r7, #23]
      break;
 800a688:	e002      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a68a:	bf00      	nop
 800a68c:	e000      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a68e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a690:	7dfb      	ldrb	r3, [r7, #23]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d109      	bne.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a696:	4b7c      	ldr	r3, [pc, #496]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a69a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6a2:	4979      	ldr	r1, [pc, #484]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	650b      	str	r3, [r1, #80]	; 0x50
 800a6a8:	e001      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6aa:	7dfb      	ldrb	r3, [r7, #23]
 800a6ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d049      	beq.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a6c2:	d02e      	beq.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800a6c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a6c8:	d828      	bhi.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a6ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a6ce:	d02a      	beq.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800a6d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a6d4:	d822      	bhi.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a6d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a6da:	d026      	beq.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800a6dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a6e0:	d81c      	bhi.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a6e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6e6:	d010      	beq.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0x466>
 800a6e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6ec:	d816      	bhi.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d01d      	beq.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800a6f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6f6:	d111      	bne.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	3304      	adds	r3, #4
 800a6fc:	2101      	movs	r1, #1
 800a6fe:	4618      	mov	r0, r3
 800a700:	f000 ffce 	bl	800b6a0 <RCCEx_PLL2_Config>
 800a704:	4603      	mov	r3, r0
 800a706:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a708:	e012      	b.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	3324      	adds	r3, #36	; 0x24
 800a70e:	2101      	movs	r1, #1
 800a710:	4618      	mov	r0, r3
 800a712:	f001 f877 	bl	800b804 <RCCEx_PLL3_Config>
 800a716:	4603      	mov	r3, r0
 800a718:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a71a:	e009      	b.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	75fb      	strb	r3, [r7, #23]
      break;
 800a720:	e006      	b.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a722:	bf00      	nop
 800a724:	e004      	b.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a726:	bf00      	nop
 800a728:	e002      	b.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a72a:	bf00      	nop
 800a72c:	e000      	b.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a72e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a730:	7dfb      	ldrb	r3, [r7, #23]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d109      	bne.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a736:	4b54      	ldr	r3, [pc, #336]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a73a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a742:	4951      	ldr	r1, [pc, #324]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a744:	4313      	orrs	r3, r2
 800a746:	650b      	str	r3, [r1, #80]	; 0x50
 800a748:	e001      	b.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a74a:	7dfb      	ldrb	r3, [r7, #23]
 800a74c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a756:	2b00      	cmp	r3, #0
 800a758:	d04b      	beq.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a760:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a764:	d02e      	beq.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800a766:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a76a:	d828      	bhi.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a76c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a770:	d02a      	beq.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a776:	d822      	bhi.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a778:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a77c:	d026      	beq.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a77e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a782:	d81c      	bhi.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a788:	d010      	beq.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x508>
 800a78a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a78e:	d816      	bhi.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a790:	2b00      	cmp	r3, #0
 800a792:	d01d      	beq.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800a794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a798:	d111      	bne.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	3304      	adds	r3, #4
 800a79e:	2101      	movs	r1, #1
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f000 ff7d 	bl	800b6a0 <RCCEx_PLL2_Config>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a7aa:	e012      	b.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	3324      	adds	r3, #36	; 0x24
 800a7b0:	2101      	movs	r1, #1
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f001 f826 	bl	800b804 <RCCEx_PLL3_Config>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a7bc:	e009      	b.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	75fb      	strb	r3, [r7, #23]
      break;
 800a7c2:	e006      	b.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a7c4:	bf00      	nop
 800a7c6:	e004      	b.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a7c8:	bf00      	nop
 800a7ca:	e002      	b.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a7cc:	bf00      	nop
 800a7ce:	e000      	b.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a7d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7d2:	7dfb      	ldrb	r3, [r7, #23]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10a      	bne.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a7d8:	4b2b      	ldr	r3, [pc, #172]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a7da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7dc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a7e6:	4928      	ldr	r1, [pc, #160]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	658b      	str	r3, [r1, #88]	; 0x58
 800a7ec:	e001      	b.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ee:	7dfb      	ldrb	r3, [r7, #23]
 800a7f0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d02f      	beq.n	800a85e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a806:	d00e      	beq.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800a808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a80c:	d814      	bhi.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d015      	beq.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a816:	d10f      	bne.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a818:	4b1b      	ldr	r3, [pc, #108]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a81c:	4a1a      	ldr	r2, [pc, #104]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a81e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a822:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a824:	e00c      	b.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3304      	adds	r3, #4
 800a82a:	2101      	movs	r1, #1
 800a82c:	4618      	mov	r0, r3
 800a82e:	f000 ff37 	bl	800b6a0 <RCCEx_PLL2_Config>
 800a832:	4603      	mov	r3, r0
 800a834:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a836:	e003      	b.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	75fb      	strb	r3, [r7, #23]
      break;
 800a83c:	e000      	b.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800a83e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a840:	7dfb      	ldrb	r3, [r7, #23]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d109      	bne.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a846:	4b10      	ldr	r3, [pc, #64]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a84a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a852:	490d      	ldr	r1, [pc, #52]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a854:	4313      	orrs	r3, r2
 800a856:	650b      	str	r3, [r1, #80]	; 0x50
 800a858:	e001      	b.n	800a85e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a85a:	7dfb      	ldrb	r3, [r7, #23]
 800a85c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a866:	2b00      	cmp	r3, #0
 800a868:	d033      	beq.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a86e:	2b03      	cmp	r3, #3
 800a870:	d81c      	bhi.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a872:	a201      	add	r2, pc, #4	; (adr r2, 800a878 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800a874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a878:	0800a8b3 	.word	0x0800a8b3
 800a87c:	0800a88d 	.word	0x0800a88d
 800a880:	0800a89b 	.word	0x0800a89b
 800a884:	0800a8b3 	.word	0x0800a8b3
 800a888:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a88c:	4bb8      	ldr	r3, [pc, #736]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a890:	4ab7      	ldr	r2, [pc, #732]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a896:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a898:	e00c      	b.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	3304      	adds	r3, #4
 800a89e:	2102      	movs	r1, #2
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f000 fefd 	bl	800b6a0 <RCCEx_PLL2_Config>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a8aa:	e003      	b.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a8b0:	e000      	b.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a8b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8b4:	7dfb      	ldrb	r3, [r7, #23]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d109      	bne.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a8ba:	4bad      	ldr	r3, [pc, #692]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a8bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8be:	f023 0203 	bic.w	r2, r3, #3
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8c6:	49aa      	ldr	r1, [pc, #680]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a8cc:	e001      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8ce:	7dfb      	ldrb	r3, [r7, #23]
 800a8d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f000 8086 	beq.w	800a9ec <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a8e0:	4ba4      	ldr	r3, [pc, #656]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4aa3      	ldr	r2, [pc, #652]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a8e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a8ec:	f7fb f974 	bl	8005bd8 <HAL_GetTick>
 800a8f0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a8f2:	e009      	b.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a8f4:	f7fb f970 	bl	8005bd8 <HAL_GetTick>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	2b64      	cmp	r3, #100	; 0x64
 800a900:	d902      	bls.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a902:	2303      	movs	r3, #3
 800a904:	75fb      	strb	r3, [r7, #23]
        break;
 800a906:	e005      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a908:	4b9a      	ldr	r3, [pc, #616]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a910:	2b00      	cmp	r3, #0
 800a912:	d0ef      	beq.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a914:	7dfb      	ldrb	r3, [r7, #23]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d166      	bne.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a91a:	4b95      	ldr	r3, [pc, #596]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a91c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a924:	4053      	eors	r3, r2
 800a926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d013      	beq.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a92e:	4b90      	ldr	r3, [pc, #576]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a936:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a938:	4b8d      	ldr	r3, [pc, #564]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a93a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a93c:	4a8c      	ldr	r2, [pc, #560]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a93e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a942:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a944:	4b8a      	ldr	r3, [pc, #552]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a948:	4a89      	ldr	r2, [pc, #548]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a94a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a94e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a950:	4a87      	ldr	r2, [pc, #540]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a95c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a960:	d115      	bne.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a962:	f7fb f939 	bl	8005bd8 <HAL_GetTick>
 800a966:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a968:	e00b      	b.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a96a:	f7fb f935 	bl	8005bd8 <HAL_GetTick>
 800a96e:	4602      	mov	r2, r0
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	1ad3      	subs	r3, r2, r3
 800a974:	f241 3288 	movw	r2, #5000	; 0x1388
 800a978:	4293      	cmp	r3, r2
 800a97a:	d902      	bls.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800a97c:	2303      	movs	r3, #3
 800a97e:	75fb      	strb	r3, [r7, #23]
            break;
 800a980:	e005      	b.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a982:	4b7b      	ldr	r3, [pc, #492]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a986:	f003 0302 	and.w	r3, r3, #2
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d0ed      	beq.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800a98e:	7dfb      	ldrb	r3, [r7, #23]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d126      	bne.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a99a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a99e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9a2:	d10d      	bne.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800a9a4:	4b72      	ldr	r3, [pc, #456]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a9b2:	0919      	lsrs	r1, r3, #4
 800a9b4:	4b70      	ldr	r3, [pc, #448]	; (800ab78 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800a9b6:	400b      	ands	r3, r1
 800a9b8:	496d      	ldr	r1, [pc, #436]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	610b      	str	r3, [r1, #16]
 800a9be:	e005      	b.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0x728>
 800a9c0:	4b6b      	ldr	r3, [pc, #428]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9c2:	691b      	ldr	r3, [r3, #16]
 800a9c4:	4a6a      	ldr	r2, [pc, #424]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a9ca:	6113      	str	r3, [r2, #16]
 800a9cc:	4b68      	ldr	r3, [pc, #416]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a9d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a9da:	4965      	ldr	r1, [pc, #404]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	670b      	str	r3, [r1, #112]	; 0x70
 800a9e0:	e004      	b.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a9e2:	7dfb      	ldrb	r3, [r7, #23]
 800a9e4:	75bb      	strb	r3, [r7, #22]
 800a9e6:	e001      	b.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9e8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ea:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 0301 	and.w	r3, r3, #1
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d07e      	beq.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9fc:	2b28      	cmp	r3, #40	; 0x28
 800a9fe:	d867      	bhi.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800aa00:	a201      	add	r2, pc, #4	; (adr r2, 800aa08 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800aa02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa06:	bf00      	nop
 800aa08:	0800aad7 	.word	0x0800aad7
 800aa0c:	0800aad1 	.word	0x0800aad1
 800aa10:	0800aad1 	.word	0x0800aad1
 800aa14:	0800aad1 	.word	0x0800aad1
 800aa18:	0800aad1 	.word	0x0800aad1
 800aa1c:	0800aad1 	.word	0x0800aad1
 800aa20:	0800aad1 	.word	0x0800aad1
 800aa24:	0800aad1 	.word	0x0800aad1
 800aa28:	0800aaad 	.word	0x0800aaad
 800aa2c:	0800aad1 	.word	0x0800aad1
 800aa30:	0800aad1 	.word	0x0800aad1
 800aa34:	0800aad1 	.word	0x0800aad1
 800aa38:	0800aad1 	.word	0x0800aad1
 800aa3c:	0800aad1 	.word	0x0800aad1
 800aa40:	0800aad1 	.word	0x0800aad1
 800aa44:	0800aad1 	.word	0x0800aad1
 800aa48:	0800aabf 	.word	0x0800aabf
 800aa4c:	0800aad1 	.word	0x0800aad1
 800aa50:	0800aad1 	.word	0x0800aad1
 800aa54:	0800aad1 	.word	0x0800aad1
 800aa58:	0800aad1 	.word	0x0800aad1
 800aa5c:	0800aad1 	.word	0x0800aad1
 800aa60:	0800aad1 	.word	0x0800aad1
 800aa64:	0800aad1 	.word	0x0800aad1
 800aa68:	0800aad7 	.word	0x0800aad7
 800aa6c:	0800aad1 	.word	0x0800aad1
 800aa70:	0800aad1 	.word	0x0800aad1
 800aa74:	0800aad1 	.word	0x0800aad1
 800aa78:	0800aad1 	.word	0x0800aad1
 800aa7c:	0800aad1 	.word	0x0800aad1
 800aa80:	0800aad1 	.word	0x0800aad1
 800aa84:	0800aad1 	.word	0x0800aad1
 800aa88:	0800aad7 	.word	0x0800aad7
 800aa8c:	0800aad1 	.word	0x0800aad1
 800aa90:	0800aad1 	.word	0x0800aad1
 800aa94:	0800aad1 	.word	0x0800aad1
 800aa98:	0800aad1 	.word	0x0800aad1
 800aa9c:	0800aad1 	.word	0x0800aad1
 800aaa0:	0800aad1 	.word	0x0800aad1
 800aaa4:	0800aad1 	.word	0x0800aad1
 800aaa8:	0800aad7 	.word	0x0800aad7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	3304      	adds	r3, #4
 800aab0:	2101      	movs	r1, #1
 800aab2:	4618      	mov	r0, r3
 800aab4:	f000 fdf4 	bl	800b6a0 <RCCEx_PLL2_Config>
 800aab8:	4603      	mov	r3, r0
 800aaba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800aabc:	e00c      	b.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	3324      	adds	r3, #36	; 0x24
 800aac2:	2101      	movs	r1, #1
 800aac4:	4618      	mov	r0, r3
 800aac6:	f000 fe9d 	bl	800b804 <RCCEx_PLL3_Config>
 800aaca:	4603      	mov	r3, r0
 800aacc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800aace:	e003      	b.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aad0:	2301      	movs	r3, #1
 800aad2:	75fb      	strb	r3, [r7, #23]
      break;
 800aad4:	e000      	b.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800aad6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aad8:	7dfb      	ldrb	r3, [r7, #23]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d109      	bne.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800aade:	4b24      	ldr	r3, [pc, #144]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aae2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aaea:	4921      	ldr	r1, [pc, #132]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aaec:	4313      	orrs	r3, r2
 800aaee:	654b      	str	r3, [r1, #84]	; 0x54
 800aaf0:	e001      	b.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaf2:	7dfb      	ldrb	r3, [r7, #23]
 800aaf4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f003 0302 	and.w	r3, r3, #2
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d03e      	beq.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab06:	2b05      	cmp	r3, #5
 800ab08:	d820      	bhi.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800ab0a:	a201      	add	r2, pc, #4	; (adr r2, 800ab10 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800ab0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab10:	0800ab53 	.word	0x0800ab53
 800ab14:	0800ab29 	.word	0x0800ab29
 800ab18:	0800ab3b 	.word	0x0800ab3b
 800ab1c:	0800ab53 	.word	0x0800ab53
 800ab20:	0800ab53 	.word	0x0800ab53
 800ab24:	0800ab53 	.word	0x0800ab53
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	3304      	adds	r3, #4
 800ab2c:	2101      	movs	r1, #1
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f000 fdb6 	bl	800b6a0 <RCCEx_PLL2_Config>
 800ab34:	4603      	mov	r3, r0
 800ab36:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ab38:	e00c      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	3324      	adds	r3, #36	; 0x24
 800ab3e:	2101      	movs	r1, #1
 800ab40:	4618      	mov	r0, r3
 800ab42:	f000 fe5f 	bl	800b804 <RCCEx_PLL3_Config>
 800ab46:	4603      	mov	r3, r0
 800ab48:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ab4a:	e003      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	75fb      	strb	r3, [r7, #23]
      break;
 800ab50:	e000      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800ab52:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab54:	7dfb      	ldrb	r3, [r7, #23]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d110      	bne.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ab5a:	4b05      	ldr	r3, [pc, #20]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ab5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab5e:	f023 0207 	bic.w	r2, r3, #7
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab66:	4902      	ldr	r1, [pc, #8]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	654b      	str	r3, [r1, #84]	; 0x54
 800ab6c:	e008      	b.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800ab6e:	bf00      	nop
 800ab70:	58024400 	.word	0x58024400
 800ab74:	58024800 	.word	0x58024800
 800ab78:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab7c:	7dfb      	ldrb	r3, [r7, #23]
 800ab7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 0304 	and.w	r3, r3, #4
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d039      	beq.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab92:	2b05      	cmp	r3, #5
 800ab94:	d820      	bhi.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800ab96:	a201      	add	r2, pc, #4	; (adr r2, 800ab9c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800ab98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab9c:	0800abdf 	.word	0x0800abdf
 800aba0:	0800abb5 	.word	0x0800abb5
 800aba4:	0800abc7 	.word	0x0800abc7
 800aba8:	0800abdf 	.word	0x0800abdf
 800abac:	0800abdf 	.word	0x0800abdf
 800abb0:	0800abdf 	.word	0x0800abdf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	3304      	adds	r3, #4
 800abb8:	2101      	movs	r1, #1
 800abba:	4618      	mov	r0, r3
 800abbc:	f000 fd70 	bl	800b6a0 <RCCEx_PLL2_Config>
 800abc0:	4603      	mov	r3, r0
 800abc2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800abc4:	e00c      	b.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	3324      	adds	r3, #36	; 0x24
 800abca:	2101      	movs	r1, #1
 800abcc:	4618      	mov	r0, r3
 800abce:	f000 fe19 	bl	800b804 <RCCEx_PLL3_Config>
 800abd2:	4603      	mov	r3, r0
 800abd4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800abd6:	e003      	b.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	75fb      	strb	r3, [r7, #23]
      break;
 800abdc:	e000      	b.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800abde:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abe0:	7dfb      	ldrb	r3, [r7, #23]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d10a      	bne.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800abe6:	4bb7      	ldr	r3, [pc, #732]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800abe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abea:	f023 0207 	bic.w	r2, r3, #7
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abf4:	49b3      	ldr	r1, [pc, #716]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800abf6:	4313      	orrs	r3, r2
 800abf8:	658b      	str	r3, [r1, #88]	; 0x58
 800abfa:	e001      	b.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abfc:	7dfb      	ldrb	r3, [r7, #23]
 800abfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f003 0320 	and.w	r3, r3, #32
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d04b      	beq.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac16:	d02e      	beq.n	800ac76 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800ac18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac1c:	d828      	bhi.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800ac1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac22:	d02a      	beq.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800ac24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac28:	d822      	bhi.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800ac2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ac2e:	d026      	beq.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800ac30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ac34:	d81c      	bhi.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800ac36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac3a:	d010      	beq.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800ac3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac40:	d816      	bhi.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d01d      	beq.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800ac46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac4a:	d111      	bne.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	3304      	adds	r3, #4
 800ac50:	2100      	movs	r1, #0
 800ac52:	4618      	mov	r0, r3
 800ac54:	f000 fd24 	bl	800b6a0 <RCCEx_PLL2_Config>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800ac5c:	e012      	b.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	3324      	adds	r3, #36	; 0x24
 800ac62:	2102      	movs	r1, #2
 800ac64:	4618      	mov	r0, r3
 800ac66:	f000 fdcd 	bl	800b804 <RCCEx_PLL3_Config>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800ac6e:	e009      	b.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac70:	2301      	movs	r3, #1
 800ac72:	75fb      	strb	r3, [r7, #23]
      break;
 800ac74:	e006      	b.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800ac76:	bf00      	nop
 800ac78:	e004      	b.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800ac7a:	bf00      	nop
 800ac7c:	e002      	b.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800ac7e:	bf00      	nop
 800ac80:	e000      	b.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800ac82:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac84:	7dfb      	ldrb	r3, [r7, #23]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d10a      	bne.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ac8a:	4b8e      	ldr	r3, [pc, #568]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ac8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac8e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac98:	498a      	ldr	r1, [pc, #552]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	654b      	str	r3, [r1, #84]	; 0x54
 800ac9e:	e001      	b.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aca0:	7dfb      	ldrb	r3, [r7, #23]
 800aca2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acac:	2b00      	cmp	r3, #0
 800acae:	d04b      	beq.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800acb6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800acba:	d02e      	beq.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800acbc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800acc0:	d828      	bhi.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800acc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acc6:	d02a      	beq.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800acc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800accc:	d822      	bhi.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800acce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800acd2:	d026      	beq.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800acd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800acd8:	d81c      	bhi.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800acda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800acde:	d010      	beq.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800ace0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ace4:	d816      	bhi.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d01d      	beq.n	800ad26 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800acea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acee:	d111      	bne.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	3304      	adds	r3, #4
 800acf4:	2100      	movs	r1, #0
 800acf6:	4618      	mov	r0, r3
 800acf8:	f000 fcd2 	bl	800b6a0 <RCCEx_PLL2_Config>
 800acfc:	4603      	mov	r3, r0
 800acfe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ad00:	e012      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	3324      	adds	r3, #36	; 0x24
 800ad06:	2102      	movs	r1, #2
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f000 fd7b 	bl	800b804 <RCCEx_PLL3_Config>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ad12:	e009      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	75fb      	strb	r3, [r7, #23]
      break;
 800ad18:	e006      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ad1a:	bf00      	nop
 800ad1c:	e004      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ad1e:	bf00      	nop
 800ad20:	e002      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ad22:	bf00      	nop
 800ad24:	e000      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ad26:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad28:	7dfb      	ldrb	r3, [r7, #23]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d10a      	bne.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ad2e:	4b65      	ldr	r3, [pc, #404]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ad30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad32:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad3c:	4961      	ldr	r1, [pc, #388]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	658b      	str	r3, [r1, #88]	; 0x58
 800ad42:	e001      	b.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad44:	7dfb      	ldrb	r3, [r7, #23]
 800ad46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d04b      	beq.n	800adec <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ad5a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ad5e:	d02e      	beq.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800ad60:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ad64:	d828      	bhi.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ad66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad6a:	d02a      	beq.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800ad6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad70:	d822      	bhi.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ad72:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ad76:	d026      	beq.n	800adc6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800ad78:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ad7c:	d81c      	bhi.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ad7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad82:	d010      	beq.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800ad84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad88:	d816      	bhi.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d01d      	beq.n	800adca <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800ad8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad92:	d111      	bne.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	3304      	adds	r3, #4
 800ad98:	2100      	movs	r1, #0
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f000 fc80 	bl	800b6a0 <RCCEx_PLL2_Config>
 800ada0:	4603      	mov	r3, r0
 800ada2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ada4:	e012      	b.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	3324      	adds	r3, #36	; 0x24
 800adaa:	2102      	movs	r1, #2
 800adac:	4618      	mov	r0, r3
 800adae:	f000 fd29 	bl	800b804 <RCCEx_PLL3_Config>
 800adb2:	4603      	mov	r3, r0
 800adb4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800adb6:	e009      	b.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800adb8:	2301      	movs	r3, #1
 800adba:	75fb      	strb	r3, [r7, #23]
      break;
 800adbc:	e006      	b.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800adbe:	bf00      	nop
 800adc0:	e004      	b.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800adc2:	bf00      	nop
 800adc4:	e002      	b.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800adc6:	bf00      	nop
 800adc8:	e000      	b.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800adca:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adcc:	7dfb      	ldrb	r3, [r7, #23]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d10a      	bne.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800add2:	4b3c      	ldr	r3, [pc, #240]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800add4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800add6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ade0:	4938      	ldr	r1, [pc, #224]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ade2:	4313      	orrs	r3, r2
 800ade4:	658b      	str	r3, [r1, #88]	; 0x58
 800ade6:	e001      	b.n	800adec <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ade8:	7dfb      	ldrb	r3, [r7, #23]
 800adea:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f003 0308 	and.w	r3, r3, #8
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d01a      	beq.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae02:	d10a      	bne.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	3324      	adds	r3, #36	; 0x24
 800ae08:	2102      	movs	r1, #2
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f000 fcfa 	bl	800b804 <RCCEx_PLL3_Config>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d001      	beq.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ae1a:	4b2a      	ldr	r3, [pc, #168]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ae1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae28:	4926      	ldr	r1, [pc, #152]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f003 0310 	and.w	r3, r3, #16
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d01a      	beq.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae44:	d10a      	bne.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	3324      	adds	r3, #36	; 0x24
 800ae4a:	2102      	movs	r1, #2
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f000 fcd9 	bl	800b804 <RCCEx_PLL3_Config>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d001      	beq.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ae5c:	4b19      	ldr	r3, [pc, #100]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ae5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae6a:	4916      	ldr	r1, [pc, #88]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d036      	beq.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ae82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae86:	d01f      	beq.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800ae88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae8c:	d817      	bhi.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d003      	beq.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800ae92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae96:	d009      	beq.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800ae98:	e011      	b.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	3304      	adds	r3, #4
 800ae9e:	2100      	movs	r1, #0
 800aea0:	4618      	mov	r0, r3
 800aea2:	f000 fbfd 	bl	800b6a0 <RCCEx_PLL2_Config>
 800aea6:	4603      	mov	r3, r0
 800aea8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800aeaa:	e00e      	b.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	3324      	adds	r3, #36	; 0x24
 800aeb0:	2102      	movs	r1, #2
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f000 fca6 	bl	800b804 <RCCEx_PLL3_Config>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800aebc:	e005      	b.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aebe:	2301      	movs	r3, #1
 800aec0:	75fb      	strb	r3, [r7, #23]
      break;
 800aec2:	e002      	b.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800aec4:	58024400 	.word	0x58024400
      break;
 800aec8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aeca:	7dfb      	ldrb	r3, [r7, #23]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d10a      	bne.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aed0:	4b93      	ldr	r3, [pc, #588]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aed4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aede:	4990      	ldr	r1, [pc, #576]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aee0:	4313      	orrs	r3, r2
 800aee2:	658b      	str	r3, [r1, #88]	; 0x58
 800aee4:	e001      	b.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aee6:	7dfb      	ldrb	r3, [r7, #23]
 800aee8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d033      	beq.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aefc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af00:	d01c      	beq.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800af02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af06:	d816      	bhi.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800af08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af0c:	d003      	beq.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800af0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af12:	d007      	beq.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800af14:	e00f      	b.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af16:	4b82      	ldr	r3, [pc, #520]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af1a:	4a81      	ldr	r2, [pc, #516]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800af22:	e00c      	b.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	3324      	adds	r3, #36	; 0x24
 800af28:	2101      	movs	r1, #1
 800af2a:	4618      	mov	r0, r3
 800af2c:	f000 fc6a 	bl	800b804 <RCCEx_PLL3_Config>
 800af30:	4603      	mov	r3, r0
 800af32:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800af34:	e003      	b.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af36:	2301      	movs	r3, #1
 800af38:	75fb      	strb	r3, [r7, #23]
      break;
 800af3a:	e000      	b.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800af3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af3e:	7dfb      	ldrb	r3, [r7, #23]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10a      	bne.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800af44:	4b76      	ldr	r3, [pc, #472]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af52:	4973      	ldr	r1, [pc, #460]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af54:	4313      	orrs	r3, r2
 800af56:	654b      	str	r3, [r1, #84]	; 0x54
 800af58:	e001      	b.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af5a:	7dfb      	ldrb	r3, [r7, #23]
 800af5c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af66:	2b00      	cmp	r3, #0
 800af68:	d029      	beq.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d003      	beq.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800af72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af76:	d007      	beq.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800af78:	e00f      	b.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af7a:	4b69      	ldr	r3, [pc, #420]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7e:	4a68      	ldr	r2, [pc, #416]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800af86:	e00b      	b.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	3304      	adds	r3, #4
 800af8c:	2102      	movs	r1, #2
 800af8e:	4618      	mov	r0, r3
 800af90:	f000 fb86 	bl	800b6a0 <RCCEx_PLL2_Config>
 800af94:	4603      	mov	r3, r0
 800af96:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800af98:	e002      	b.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800af9a:	2301      	movs	r3, #1
 800af9c:	75fb      	strb	r3, [r7, #23]
      break;
 800af9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afa0:	7dfb      	ldrb	r3, [r7, #23]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d109      	bne.n	800afba <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800afa6:	4b5e      	ldr	r3, [pc, #376]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800afa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afaa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afb2:	495b      	ldr	r1, [pc, #364]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800afb4:	4313      	orrs	r3, r2
 800afb6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800afb8:	e001      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afba:	7dfb      	ldrb	r3, [r7, #23]
 800afbc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d00a      	beq.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	3324      	adds	r3, #36	; 0x24
 800afce:	2102      	movs	r1, #2
 800afd0:	4618      	mov	r0, r3
 800afd2:	f000 fc17 	bl	800b804 <RCCEx_PLL3_Config>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d001      	beq.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800afdc:	2301      	movs	r3, #1
 800afde:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d030      	beq.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aff0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aff4:	d017      	beq.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800aff6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800affa:	d811      	bhi.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800affc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b000:	d013      	beq.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b006:	d80b      	bhi.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d010      	beq.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b00c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b010:	d106      	bne.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b012:	4b43      	ldr	r3, [pc, #268]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b016:	4a42      	ldr	r2, [pc, #264]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b01c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b01e:	e007      	b.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b020:	2301      	movs	r3, #1
 800b022:	75fb      	strb	r3, [r7, #23]
      break;
 800b024:	e004      	b.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b026:	bf00      	nop
 800b028:	e002      	b.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b02a:	bf00      	nop
 800b02c:	e000      	b.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b02e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b030:	7dfb      	ldrb	r3, [r7, #23]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d109      	bne.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b036:	4b3a      	ldr	r3, [pc, #232]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b03a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b042:	4937      	ldr	r1, [pc, #220]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b044:	4313      	orrs	r3, r2
 800b046:	654b      	str	r3, [r1, #84]	; 0x54
 800b048:	e001      	b.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b04a:	7dfb      	ldrb	r3, [r7, #23]
 800b04c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b056:	2b00      	cmp	r3, #0
 800b058:	d008      	beq.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b05a:	4b31      	ldr	r3, [pc, #196]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b05c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b05e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b066:	492e      	ldr	r1, [pc, #184]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b068:	4313      	orrs	r3, r2
 800b06a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b074:	2b00      	cmp	r3, #0
 800b076:	d009      	beq.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b078:	4b29      	ldr	r3, [pc, #164]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b07a:	691b      	ldr	r3, [r3, #16]
 800b07c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b086:	4926      	ldr	r1, [pc, #152]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b088:	4313      	orrs	r3, r2
 800b08a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b094:	2b00      	cmp	r3, #0
 800b096:	d008      	beq.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b098:	4b21      	ldr	r3, [pc, #132]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b09a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b09c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0a4:	491e      	ldr	r1, [pc, #120]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d00d      	beq.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b0b6:	4b1a      	ldr	r3, [pc, #104]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	4a19      	ldr	r2, [pc, #100]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b0c0:	6113      	str	r3, [r2, #16]
 800b0c2:	4b17      	ldr	r3, [pc, #92]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0c4:	691a      	ldr	r2, [r3, #16]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b0cc:	4914      	ldr	r1, [pc, #80]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	da08      	bge.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b0da:	4b11      	ldr	r3, [pc, #68]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0e6:	490e      	ldr	r1, [pc, #56]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d009      	beq.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b0f8:	4b09      	ldr	r3, [pc, #36]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b106:	4906      	ldr	r1, [pc, #24]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b108:	4313      	orrs	r3, r2
 800b10a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b10c:	7dbb      	ldrb	r3, [r7, #22]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d101      	bne.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800b112:	2300      	movs	r3, #0
 800b114:	e000      	b.n	800b118 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800b116:	2301      	movs	r3, #1
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3718      	adds	r7, #24
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	58024400 	.word	0x58024400

0800b124 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b128:	f7ff f860 	bl	800a1ec <HAL_RCC_GetHCLKFreq>
 800b12c:	4602      	mov	r2, r0
 800b12e:	4b06      	ldr	r3, [pc, #24]	; (800b148 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b130:	6a1b      	ldr	r3, [r3, #32]
 800b132:	091b      	lsrs	r3, r3, #4
 800b134:	f003 0307 	and.w	r3, r3, #7
 800b138:	4904      	ldr	r1, [pc, #16]	; (800b14c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b13a:	5ccb      	ldrb	r3, [r1, r3]
 800b13c:	f003 031f 	and.w	r3, r3, #31
 800b140:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b144:	4618      	mov	r0, r3
 800b146:	bd80      	pop	{r7, pc}
 800b148:	58024400 	.word	0x58024400
 800b14c:	080131a0 	.word	0x080131a0

0800b150 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b150:	b480      	push	{r7}
 800b152:	b089      	sub	sp, #36	; 0x24
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b158:	4ba1      	ldr	r3, [pc, #644]	; (800b3e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b15a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b15c:	f003 0303 	and.w	r3, r3, #3
 800b160:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b162:	4b9f      	ldr	r3, [pc, #636]	; (800b3e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b166:	0b1b      	lsrs	r3, r3, #12
 800b168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b16c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b16e:	4b9c      	ldr	r3, [pc, #624]	; (800b3e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b172:	091b      	lsrs	r3, r3, #4
 800b174:	f003 0301 	and.w	r3, r3, #1
 800b178:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b17a:	4b99      	ldr	r3, [pc, #612]	; (800b3e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b17c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b17e:	08db      	lsrs	r3, r3, #3
 800b180:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b184:	693a      	ldr	r2, [r7, #16]
 800b186:	fb02 f303 	mul.w	r3, r2, r3
 800b18a:	ee07 3a90 	vmov	s15, r3
 800b18e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b192:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f000 8111 	beq.w	800b3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	2b02      	cmp	r3, #2
 800b1a2:	f000 8083 	beq.w	800b2ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	2b02      	cmp	r3, #2
 800b1aa:	f200 80a1 	bhi.w	800b2f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d003      	beq.n	800b1bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b1b4:	69bb      	ldr	r3, [r7, #24]
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d056      	beq.n	800b268 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b1ba:	e099      	b.n	800b2f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1bc:	4b88      	ldr	r3, [pc, #544]	; (800b3e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f003 0320 	and.w	r3, r3, #32
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d02d      	beq.n	800b224 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b1c8:	4b85      	ldr	r3, [pc, #532]	; (800b3e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	08db      	lsrs	r3, r3, #3
 800b1ce:	f003 0303 	and.w	r3, r3, #3
 800b1d2:	4a84      	ldr	r2, [pc, #528]	; (800b3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b1d4:	fa22 f303 	lsr.w	r3, r2, r3
 800b1d8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	ee07 3a90 	vmov	s15, r3
 800b1e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	ee07 3a90 	vmov	s15, r3
 800b1ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1f2:	4b7b      	ldr	r3, [pc, #492]	; (800b3e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1fa:	ee07 3a90 	vmov	s15, r3
 800b1fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b202:	ed97 6a03 	vldr	s12, [r7, #12]
 800b206:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b20a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b20e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b21a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b21e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b222:	e087      	b.n	800b334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	ee07 3a90 	vmov	s15, r3
 800b22a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b22e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b3ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b236:	4b6a      	ldr	r3, [pc, #424]	; (800b3e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b23e:	ee07 3a90 	vmov	s15, r3
 800b242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b246:	ed97 6a03 	vldr	s12, [r7, #12]
 800b24a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b24e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b25a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b25e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b262:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b266:	e065      	b.n	800b334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	ee07 3a90 	vmov	s15, r3
 800b26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b272:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b27a:	4b59      	ldr	r3, [pc, #356]	; (800b3e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b27e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b282:	ee07 3a90 	vmov	s15, r3
 800b286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b28a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b28e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b29a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b29e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2aa:	e043      	b.n	800b334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	ee07 3a90 	vmov	s15, r3
 800b2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b2ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2be:	4b48      	ldr	r3, [pc, #288]	; (800b3e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c6:	ee07 3a90 	vmov	s15, r3
 800b2ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2ee:	e021      	b.n	800b334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	ee07 3a90 	vmov	s15, r3
 800b2f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b2fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b302:	4b37      	ldr	r3, [pc, #220]	; (800b3e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b30a:	ee07 3a90 	vmov	s15, r3
 800b30e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b312:	ed97 6a03 	vldr	s12, [r7, #12]
 800b316:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b31a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b31e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b32a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b32e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b332:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b334:	4b2a      	ldr	r3, [pc, #168]	; (800b3e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b338:	0a5b      	lsrs	r3, r3, #9
 800b33a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b33e:	ee07 3a90 	vmov	s15, r3
 800b342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b346:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b34a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b34e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b35a:	ee17 2a90 	vmov	r2, s15
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b362:	4b1f      	ldr	r3, [pc, #124]	; (800b3e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b366:	0c1b      	lsrs	r3, r3, #16
 800b368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b36c:	ee07 3a90 	vmov	s15, r3
 800b370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b374:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b378:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b37c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b388:	ee17 2a90 	vmov	r2, s15
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b390:	4b13      	ldr	r3, [pc, #76]	; (800b3e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b394:	0e1b      	lsrs	r3, r3, #24
 800b396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b39a:	ee07 3a90 	vmov	s15, r3
 800b39e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3b6:	ee17 2a90 	vmov	r2, s15
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b3be:	e008      	b.n	800b3d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	609a      	str	r2, [r3, #8]
}
 800b3d2:	bf00      	nop
 800b3d4:	3724      	adds	r7, #36	; 0x24
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	58024400 	.word	0x58024400
 800b3e4:	03d09000 	.word	0x03d09000
 800b3e8:	46000000 	.word	0x46000000
 800b3ec:	4c742400 	.word	0x4c742400
 800b3f0:	4a742400 	.word	0x4a742400
 800b3f4:	4c371b00 	.word	0x4c371b00

0800b3f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b089      	sub	sp, #36	; 0x24
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b400:	4ba1      	ldr	r3, [pc, #644]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b404:	f003 0303 	and.w	r3, r3, #3
 800b408:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b40a:	4b9f      	ldr	r3, [pc, #636]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b40c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b40e:	0d1b      	lsrs	r3, r3, #20
 800b410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b414:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b416:	4b9c      	ldr	r3, [pc, #624]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41a:	0a1b      	lsrs	r3, r3, #8
 800b41c:	f003 0301 	and.w	r3, r3, #1
 800b420:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b422:	4b99      	ldr	r3, [pc, #612]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b426:	08db      	lsrs	r3, r3, #3
 800b428:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b42c:	693a      	ldr	r2, [r7, #16]
 800b42e:	fb02 f303 	mul.w	r3, r2, r3
 800b432:	ee07 3a90 	vmov	s15, r3
 800b436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b43a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	2b00      	cmp	r3, #0
 800b442:	f000 8111 	beq.w	800b668 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b446:	69bb      	ldr	r3, [r7, #24]
 800b448:	2b02      	cmp	r3, #2
 800b44a:	f000 8083 	beq.w	800b554 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	2b02      	cmp	r3, #2
 800b452:	f200 80a1 	bhi.w	800b598 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d003      	beq.n	800b464 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b45c:	69bb      	ldr	r3, [r7, #24]
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d056      	beq.n	800b510 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b462:	e099      	b.n	800b598 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b464:	4b88      	ldr	r3, [pc, #544]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f003 0320 	and.w	r3, r3, #32
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d02d      	beq.n	800b4cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b470:	4b85      	ldr	r3, [pc, #532]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	08db      	lsrs	r3, r3, #3
 800b476:	f003 0303 	and.w	r3, r3, #3
 800b47a:	4a84      	ldr	r2, [pc, #528]	; (800b68c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b47c:	fa22 f303 	lsr.w	r3, r2, r3
 800b480:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	ee07 3a90 	vmov	s15, r3
 800b488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	ee07 3a90 	vmov	s15, r3
 800b492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b49a:	4b7b      	ldr	r3, [pc, #492]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b49e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4a2:	ee07 3a90 	vmov	s15, r3
 800b4a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b4ca:	e087      	b.n	800b5dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	ee07 3a90 	vmov	s15, r3
 800b4d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b694 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b4da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4de:	4b6a      	ldr	r3, [pc, #424]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4e6:	ee07 3a90 	vmov	s15, r3
 800b4ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b50a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b50e:	e065      	b.n	800b5dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	ee07 3a90 	vmov	s15, r3
 800b516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b51a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b698 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b51e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b522:	4b59      	ldr	r3, [pc, #356]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b52a:	ee07 3a90 	vmov	s15, r3
 800b52e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b532:	ed97 6a03 	vldr	s12, [r7, #12]
 800b536:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b53a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b53e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b54a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b54e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b552:	e043      	b.n	800b5dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	ee07 3a90 	vmov	s15, r3
 800b55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b55e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b69c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b566:	4b48      	ldr	r3, [pc, #288]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b56e:	ee07 3a90 	vmov	s15, r3
 800b572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b576:	ed97 6a03 	vldr	s12, [r7, #12]
 800b57a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b57e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b58a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b58e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b592:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b596:	e021      	b.n	800b5dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	ee07 3a90 	vmov	s15, r3
 800b59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b698 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b5a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5aa:	4b37      	ldr	r3, [pc, #220]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5b2:	ee07 3a90 	vmov	s15, r3
 800b5b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5be:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b5da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b5dc:	4b2a      	ldr	r3, [pc, #168]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e0:	0a5b      	lsrs	r3, r3, #9
 800b5e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5e6:	ee07 3a90 	vmov	s15, r3
 800b5ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b5f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b602:	ee17 2a90 	vmov	r2, s15
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b60a:	4b1f      	ldr	r3, [pc, #124]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b60e:	0c1b      	lsrs	r3, r3, #16
 800b610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b614:	ee07 3a90 	vmov	s15, r3
 800b618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b61c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b620:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b624:	edd7 6a07 	vldr	s13, [r7, #28]
 800b628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b62c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b630:	ee17 2a90 	vmov	r2, s15
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b638:	4b13      	ldr	r3, [pc, #76]	; (800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b63c:	0e1b      	lsrs	r3, r3, #24
 800b63e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b642:	ee07 3a90 	vmov	s15, r3
 800b646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b64a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b64e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b652:	edd7 6a07 	vldr	s13, [r7, #28]
 800b656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b65a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b65e:	ee17 2a90 	vmov	r2, s15
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b666:	e008      	b.n	800b67a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	609a      	str	r2, [r3, #8]
}
 800b67a:	bf00      	nop
 800b67c:	3724      	adds	r7, #36	; 0x24
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr
 800b686:	bf00      	nop
 800b688:	58024400 	.word	0x58024400
 800b68c:	03d09000 	.word	0x03d09000
 800b690:	46000000 	.word	0x46000000
 800b694:	4c742400 	.word	0x4c742400
 800b698:	4a742400 	.word	0x4a742400
 800b69c:	4c371b00 	.word	0x4c371b00

0800b6a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b6ae:	4b53      	ldr	r3, [pc, #332]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b2:	f003 0303 	and.w	r3, r3, #3
 800b6b6:	2b03      	cmp	r3, #3
 800b6b8:	d101      	bne.n	800b6be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e099      	b.n	800b7f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b6be:	4b4f      	ldr	r3, [pc, #316]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a4e      	ldr	r2, [pc, #312]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b6c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b6c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6ca:	f7fa fa85 	bl	8005bd8 <HAL_GetTick>
 800b6ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b6d0:	e008      	b.n	800b6e4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b6d2:	f7fa fa81 	bl	8005bd8 <HAL_GetTick>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	1ad3      	subs	r3, r2, r3
 800b6dc:	2b02      	cmp	r3, #2
 800b6de:	d901      	bls.n	800b6e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b6e0:	2303      	movs	r3, #3
 800b6e2:	e086      	b.n	800b7f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b6e4:	4b45      	ldr	r3, [pc, #276]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d1f0      	bne.n	800b6d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b6f0:	4b42      	ldr	r3, [pc, #264]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	031b      	lsls	r3, r3, #12
 800b6fe:	493f      	ldr	r1, [pc, #252]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b700:	4313      	orrs	r3, r2
 800b702:	628b      	str	r3, [r1, #40]	; 0x28
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	3b01      	subs	r3, #1
 800b70a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	3b01      	subs	r3, #1
 800b714:	025b      	lsls	r3, r3, #9
 800b716:	b29b      	uxth	r3, r3
 800b718:	431a      	orrs	r2, r3
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	68db      	ldr	r3, [r3, #12]
 800b71e:	3b01      	subs	r3, #1
 800b720:	041b      	lsls	r3, r3, #16
 800b722:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b726:	431a      	orrs	r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	691b      	ldr	r3, [r3, #16]
 800b72c:	3b01      	subs	r3, #1
 800b72e:	061b      	lsls	r3, r3, #24
 800b730:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b734:	4931      	ldr	r1, [pc, #196]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b736:	4313      	orrs	r3, r2
 800b738:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b73a:	4b30      	ldr	r3, [pc, #192]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b73e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	695b      	ldr	r3, [r3, #20]
 800b746:	492d      	ldr	r1, [pc, #180]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b748:	4313      	orrs	r3, r2
 800b74a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b74c:	4b2b      	ldr	r3, [pc, #172]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b750:	f023 0220 	bic.w	r2, r3, #32
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	699b      	ldr	r3, [r3, #24]
 800b758:	4928      	ldr	r1, [pc, #160]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b75a:	4313      	orrs	r3, r2
 800b75c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b75e:	4b27      	ldr	r3, [pc, #156]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b762:	4a26      	ldr	r2, [pc, #152]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b764:	f023 0310 	bic.w	r3, r3, #16
 800b768:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b76a:	4b24      	ldr	r3, [pc, #144]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b76c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b76e:	4b24      	ldr	r3, [pc, #144]	; (800b800 <RCCEx_PLL2_Config+0x160>)
 800b770:	4013      	ands	r3, r2
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	69d2      	ldr	r2, [r2, #28]
 800b776:	00d2      	lsls	r2, r2, #3
 800b778:	4920      	ldr	r1, [pc, #128]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b77a:	4313      	orrs	r3, r2
 800b77c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b77e:	4b1f      	ldr	r3, [pc, #124]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b782:	4a1e      	ldr	r2, [pc, #120]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b784:	f043 0310 	orr.w	r3, r3, #16
 800b788:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d106      	bne.n	800b79e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b790:	4b1a      	ldr	r3, [pc, #104]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b794:	4a19      	ldr	r2, [pc, #100]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b796:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b79a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b79c:	e00f      	b.n	800b7be <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d106      	bne.n	800b7b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b7a4:	4b15      	ldr	r3, [pc, #84]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a8:	4a14      	ldr	r2, [pc, #80]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b7aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7b0:	e005      	b.n	800b7be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b7b2:	4b12      	ldr	r3, [pc, #72]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b6:	4a11      	ldr	r2, [pc, #68]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b7b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b7bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b7be:	4b0f      	ldr	r3, [pc, #60]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a0e      	ldr	r2, [pc, #56]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b7c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b7c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7ca:	f7fa fa05 	bl	8005bd8 <HAL_GetTick>
 800b7ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b7d0:	e008      	b.n	800b7e4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b7d2:	f7fa fa01 	bl	8005bd8 <HAL_GetTick>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	1ad3      	subs	r3, r2, r3
 800b7dc:	2b02      	cmp	r3, #2
 800b7de:	d901      	bls.n	800b7e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b7e0:	2303      	movs	r3, #3
 800b7e2:	e006      	b.n	800b7f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b7e4:	4b05      	ldr	r3, [pc, #20]	; (800b7fc <RCCEx_PLL2_Config+0x15c>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d0f0      	beq.n	800b7d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3710      	adds	r7, #16
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	58024400 	.word	0x58024400
 800b800:	ffff0007 	.word	0xffff0007

0800b804 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b80e:	2300      	movs	r3, #0
 800b810:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b812:	4b53      	ldr	r3, [pc, #332]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b816:	f003 0303 	and.w	r3, r3, #3
 800b81a:	2b03      	cmp	r3, #3
 800b81c:	d101      	bne.n	800b822 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b81e:	2301      	movs	r3, #1
 800b820:	e099      	b.n	800b956 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b822:	4b4f      	ldr	r3, [pc, #316]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a4e      	ldr	r2, [pc, #312]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b82c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b82e:	f7fa f9d3 	bl	8005bd8 <HAL_GetTick>
 800b832:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b834:	e008      	b.n	800b848 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b836:	f7fa f9cf 	bl	8005bd8 <HAL_GetTick>
 800b83a:	4602      	mov	r2, r0
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	1ad3      	subs	r3, r2, r3
 800b840:	2b02      	cmp	r3, #2
 800b842:	d901      	bls.n	800b848 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b844:	2303      	movs	r3, #3
 800b846:	e086      	b.n	800b956 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b848:	4b45      	ldr	r3, [pc, #276]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b850:	2b00      	cmp	r3, #0
 800b852:	d1f0      	bne.n	800b836 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b854:	4b42      	ldr	r3, [pc, #264]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b858:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	051b      	lsls	r3, r3, #20
 800b862:	493f      	ldr	r1, [pc, #252]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b864:	4313      	orrs	r3, r2
 800b866:	628b      	str	r3, [r1, #40]	; 0x28
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	3b01      	subs	r3, #1
 800b86e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	3b01      	subs	r3, #1
 800b878:	025b      	lsls	r3, r3, #9
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	431a      	orrs	r2, r3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	3b01      	subs	r3, #1
 800b884:	041b      	lsls	r3, r3, #16
 800b886:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b88a:	431a      	orrs	r2, r3
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	691b      	ldr	r3, [r3, #16]
 800b890:	3b01      	subs	r3, #1
 800b892:	061b      	lsls	r3, r3, #24
 800b894:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b898:	4931      	ldr	r1, [pc, #196]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b89a:	4313      	orrs	r3, r2
 800b89c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b89e:	4b30      	ldr	r3, [pc, #192]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	695b      	ldr	r3, [r3, #20]
 800b8aa:	492d      	ldr	r1, [pc, #180]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b8b0:	4b2b      	ldr	r3, [pc, #172]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	699b      	ldr	r3, [r3, #24]
 800b8bc:	4928      	ldr	r1, [pc, #160]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b8c2:	4b27      	ldr	r3, [pc, #156]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c6:	4a26      	ldr	r2, [pc, #152]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b8c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b8ce:	4b24      	ldr	r3, [pc, #144]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b8d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8d2:	4b24      	ldr	r3, [pc, #144]	; (800b964 <RCCEx_PLL3_Config+0x160>)
 800b8d4:	4013      	ands	r3, r2
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	69d2      	ldr	r2, [r2, #28]
 800b8da:	00d2      	lsls	r2, r2, #3
 800b8dc:	4920      	ldr	r1, [pc, #128]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b8e2:	4b1f      	ldr	r3, [pc, #124]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e6:	4a1e      	ldr	r2, [pc, #120]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b8e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d106      	bne.n	800b902 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b8f4:	4b1a      	ldr	r3, [pc, #104]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f8:	4a19      	ldr	r2, [pc, #100]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b8fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b8fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b900:	e00f      	b.n	800b922 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	2b01      	cmp	r3, #1
 800b906:	d106      	bne.n	800b916 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b908:	4b15      	ldr	r3, [pc, #84]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b90c:	4a14      	ldr	r2, [pc, #80]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b90e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b912:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b914:	e005      	b.n	800b922 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b916:	4b12      	ldr	r3, [pc, #72]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b91a:	4a11      	ldr	r2, [pc, #68]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b91c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b920:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b922:	4b0f      	ldr	r3, [pc, #60]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4a0e      	ldr	r2, [pc, #56]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b92c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b92e:	f7fa f953 	bl	8005bd8 <HAL_GetTick>
 800b932:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b934:	e008      	b.n	800b948 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b936:	f7fa f94f 	bl	8005bd8 <HAL_GetTick>
 800b93a:	4602      	mov	r2, r0
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	1ad3      	subs	r3, r2, r3
 800b940:	2b02      	cmp	r3, #2
 800b942:	d901      	bls.n	800b948 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b944:	2303      	movs	r3, #3
 800b946:	e006      	b.n	800b956 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b948:	4b05      	ldr	r3, [pc, #20]	; (800b960 <RCCEx_PLL3_Config+0x15c>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b950:	2b00      	cmp	r3, #0
 800b952:	d0f0      	beq.n	800b936 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b954:	7bfb      	ldrb	r3, [r7, #15]
}
 800b956:	4618      	mov	r0, r3
 800b958:	3710      	adds	r7, #16
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
 800b95e:	bf00      	nop
 800b960:	58024400 	.word	0x58024400
 800b964:	ffff0007 	.word	0xffff0007

0800b968 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d101      	bne.n	800b97a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b976:	2301      	movs	r3, #1
 800b978:	e0f1      	b.n	800bb5e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a78      	ldr	r2, [pc, #480]	; (800bb68 <HAL_SPI_Init+0x200>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d00f      	beq.n	800b9aa <HAL_SPI_Init+0x42>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4a77      	ldr	r2, [pc, #476]	; (800bb6c <HAL_SPI_Init+0x204>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d00a      	beq.n	800b9aa <HAL_SPI_Init+0x42>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a75      	ldr	r2, [pc, #468]	; (800bb70 <HAL_SPI_Init+0x208>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d005      	beq.n	800b9aa <HAL_SPI_Init+0x42>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	68db      	ldr	r3, [r3, #12]
 800b9a2:	2b0f      	cmp	r3, #15
 800b9a4:	d901      	bls.n	800b9aa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e0d9      	b.n	800bb5e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 f8e2 	bl	800bb74 <SPI_GetPacketSize>
 800b9b0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4a6c      	ldr	r2, [pc, #432]	; (800bb68 <HAL_SPI_Init+0x200>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d00c      	beq.n	800b9d6 <HAL_SPI_Init+0x6e>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a6a      	ldr	r2, [pc, #424]	; (800bb6c <HAL_SPI_Init+0x204>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d007      	beq.n	800b9d6 <HAL_SPI_Init+0x6e>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a69      	ldr	r2, [pc, #420]	; (800bb70 <HAL_SPI_Init+0x208>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d002      	beq.n	800b9d6 <HAL_SPI_Init+0x6e>
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2b08      	cmp	r3, #8
 800b9d4:	d811      	bhi.n	800b9fa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b9da:	4a63      	ldr	r2, [pc, #396]	; (800bb68 <HAL_SPI_Init+0x200>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d009      	beq.n	800b9f4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a61      	ldr	r2, [pc, #388]	; (800bb6c <HAL_SPI_Init+0x204>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d004      	beq.n	800b9f4 <HAL_SPI_Init+0x8c>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4a60      	ldr	r2, [pc, #384]	; (800bb70 <HAL_SPI_Init+0x208>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d104      	bne.n	800b9fe <HAL_SPI_Init+0x96>
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2b10      	cmp	r3, #16
 800b9f8:	d901      	bls.n	800b9fe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e0af      	b.n	800bb5e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ba04:	b2db      	uxtb	r3, r3
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d106      	bne.n	800ba18 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f7f8 fc0e 	bl	8004234 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f022 0201 	bic.w	r2, r2, #1
 800ba2e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ba3a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	699b      	ldr	r3, [r3, #24]
 800ba40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba44:	d119      	bne.n	800ba7a <HAL_SPI_Init+0x112>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba4e:	d103      	bne.n	800ba58 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d008      	beq.n	800ba6a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10c      	bne.n	800ba7a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ba64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba68:	d107      	bne.n	800ba7a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ba78:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	69da      	ldr	r2, [r3, #28]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba82:	431a      	orrs	r2, r3
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	431a      	orrs	r2, r3
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba8c:	ea42 0103 	orr.w	r1, r2, r3
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	68da      	ldr	r2, [r3, #12]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	430a      	orrs	r2, r1
 800ba9a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa4:	431a      	orrs	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baaa:	431a      	orrs	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	699b      	ldr	r3, [r3, #24]
 800bab0:	431a      	orrs	r2, r3
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	691b      	ldr	r3, [r3, #16]
 800bab6:	431a      	orrs	r2, r3
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	695b      	ldr	r3, [r3, #20]
 800babc:	431a      	orrs	r2, r3
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6a1b      	ldr	r3, [r3, #32]
 800bac2:	431a      	orrs	r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	431a      	orrs	r2, r3
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bace:	431a      	orrs	r2, r3
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	689b      	ldr	r3, [r3, #8]
 800bad4:	431a      	orrs	r2, r3
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bada:	ea42 0103 	orr.w	r1, r2, r3
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	430a      	orrs	r2, r1
 800bae8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d113      	bne.n	800bb1a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb04:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	689b      	ldr	r3, [r3, #8]
 800bb0c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bb18:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f022 0201 	bic.w	r2, r2, #1
 800bb28:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d00a      	beq.n	800bb4c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	430a      	orrs	r2, r1
 800bb4a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2201      	movs	r2, #1
 800bb58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	40013000 	.word	0x40013000
 800bb6c:	40003800 	.word	0x40003800
 800bb70:	40003c00 	.word	0x40003c00

0800bb74 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b085      	sub	sp, #20
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb80:	095b      	lsrs	r3, r3, #5
 800bb82:	3301      	adds	r3, #1
 800bb84:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	68db      	ldr	r3, [r3, #12]
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	3307      	adds	r3, #7
 800bb92:	08db      	lsrs	r3, r3, #3
 800bb94:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	fb02 f303 	mul.w	r3, r2, r3
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3714      	adds	r7, #20
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr

0800bbaa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b082      	sub	sp, #8
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d101      	bne.n	800bbbc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	e049      	b.n	800bc50 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d106      	bne.n	800bbd6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f7f9 f9fd 	bl	8004fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2202      	movs	r2, #2
 800bbda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	3304      	adds	r3, #4
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	4610      	mov	r0, r2
 800bbea:	f000 fd9f 	bl	800c72c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2201      	movs	r2, #1
 800bc02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2201      	movs	r2, #1
 800bc0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2201      	movs	r2, #1
 800bc12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2201      	movs	r2, #1
 800bc1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2201      	movs	r2, #1
 800bc22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2201      	movs	r2, #1
 800bc2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2201      	movs	r2, #1
 800bc32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2201      	movs	r2, #1
 800bc3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2201      	movs	r2, #1
 800bc42:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2201      	movs	r2, #1
 800bc4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc4e:	2300      	movs	r3, #0
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3708      	adds	r7, #8
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d001      	beq.n	800bc70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	e054      	b.n	800bd1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2202      	movs	r2, #2
 800bc74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	68da      	ldr	r2, [r3, #12]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f042 0201 	orr.w	r2, r2, #1
 800bc86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a26      	ldr	r2, [pc, #152]	; (800bd28 <HAL_TIM_Base_Start_IT+0xd0>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d022      	beq.n	800bcd8 <HAL_TIM_Base_Start_IT+0x80>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc9a:	d01d      	beq.n	800bcd8 <HAL_TIM_Base_Start_IT+0x80>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4a22      	ldr	r2, [pc, #136]	; (800bd2c <HAL_TIM_Base_Start_IT+0xd4>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d018      	beq.n	800bcd8 <HAL_TIM_Base_Start_IT+0x80>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4a21      	ldr	r2, [pc, #132]	; (800bd30 <HAL_TIM_Base_Start_IT+0xd8>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d013      	beq.n	800bcd8 <HAL_TIM_Base_Start_IT+0x80>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4a1f      	ldr	r2, [pc, #124]	; (800bd34 <HAL_TIM_Base_Start_IT+0xdc>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d00e      	beq.n	800bcd8 <HAL_TIM_Base_Start_IT+0x80>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	4a1e      	ldr	r2, [pc, #120]	; (800bd38 <HAL_TIM_Base_Start_IT+0xe0>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d009      	beq.n	800bcd8 <HAL_TIM_Base_Start_IT+0x80>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a1c      	ldr	r2, [pc, #112]	; (800bd3c <HAL_TIM_Base_Start_IT+0xe4>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d004      	beq.n	800bcd8 <HAL_TIM_Base_Start_IT+0x80>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4a1b      	ldr	r2, [pc, #108]	; (800bd40 <HAL_TIM_Base_Start_IT+0xe8>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d115      	bne.n	800bd04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	689a      	ldr	r2, [r3, #8]
 800bcde:	4b19      	ldr	r3, [pc, #100]	; (800bd44 <HAL_TIM_Base_Start_IT+0xec>)
 800bce0:	4013      	ands	r3, r2
 800bce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2b06      	cmp	r3, #6
 800bce8:	d015      	beq.n	800bd16 <HAL_TIM_Base_Start_IT+0xbe>
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcf0:	d011      	beq.n	800bd16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f042 0201 	orr.w	r2, r2, #1
 800bd00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd02:	e008      	b.n	800bd16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f042 0201 	orr.w	r2, r2, #1
 800bd12:	601a      	str	r2, [r3, #0]
 800bd14:	e000      	b.n	800bd18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3714      	adds	r7, #20
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr
 800bd26:	bf00      	nop
 800bd28:	40010000 	.word	0x40010000
 800bd2c:	40000400 	.word	0x40000400
 800bd30:	40000800 	.word	0x40000800
 800bd34:	40000c00 	.word	0x40000c00
 800bd38:	40010400 	.word	0x40010400
 800bd3c:	40001800 	.word	0x40001800
 800bd40:	40014000 	.word	0x40014000
 800bd44:	00010007 	.word	0x00010007

0800bd48 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	68da      	ldr	r2, [r3, #12]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f022 0201 	bic.w	r2, r2, #1
 800bd5e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	6a1a      	ldr	r2, [r3, #32]
 800bd66:	f241 1311 	movw	r3, #4369	; 0x1111
 800bd6a:	4013      	ands	r3, r2
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d10f      	bne.n	800bd90 <HAL_TIM_Base_Stop_IT+0x48>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	6a1a      	ldr	r2, [r3, #32]
 800bd76:	f240 4344 	movw	r3, #1092	; 0x444
 800bd7a:	4013      	ands	r3, r2
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d107      	bne.n	800bd90 <HAL_TIM_Base_Stop_IT+0x48>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	681a      	ldr	r2, [r3, #0]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f022 0201 	bic.w	r2, r2, #1
 800bd8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2201      	movs	r2, #1
 800bd94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bd98:	2300      	movs	r3, #0
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	370c      	adds	r7, #12
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda4:	4770      	bx	lr

0800bda6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bda6:	b580      	push	{r7, lr}
 800bda8:	b082      	sub	sp, #8
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d101      	bne.n	800bdb8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	e049      	b.n	800be4c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d106      	bne.n	800bdd2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 f841 	bl	800be54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2202      	movs	r2, #2
 800bdd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	3304      	adds	r3, #4
 800bde2:	4619      	mov	r1, r3
 800bde4:	4610      	mov	r0, r2
 800bde6:	f000 fca1 	bl	800c72c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2201      	movs	r2, #1
 800bdee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2201      	movs	r2, #1
 800be06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2201      	movs	r2, #1
 800be0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2201      	movs	r2, #1
 800be16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2201      	movs	r2, #1
 800be1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2201      	movs	r2, #1
 800be26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2201      	movs	r2, #1
 800be2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2201      	movs	r2, #1
 800be36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2201      	movs	r2, #1
 800be3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2201      	movs	r2, #1
 800be46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3708      	adds	r7, #8
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800be5c:	bf00      	nop
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d109      	bne.n	800be8c <HAL_TIM_PWM_Start+0x24>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	2b01      	cmp	r3, #1
 800be82:	bf14      	ite	ne
 800be84:	2301      	movne	r3, #1
 800be86:	2300      	moveq	r3, #0
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	e03c      	b.n	800bf06 <HAL_TIM_PWM_Start+0x9e>
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	2b04      	cmp	r3, #4
 800be90:	d109      	bne.n	800bea6 <HAL_TIM_PWM_Start+0x3e>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	bf14      	ite	ne
 800be9e:	2301      	movne	r3, #1
 800bea0:	2300      	moveq	r3, #0
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	e02f      	b.n	800bf06 <HAL_TIM_PWM_Start+0x9e>
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	2b08      	cmp	r3, #8
 800beaa:	d109      	bne.n	800bec0 <HAL_TIM_PWM_Start+0x58>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	bf14      	ite	ne
 800beb8:	2301      	movne	r3, #1
 800beba:	2300      	moveq	r3, #0
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	e022      	b.n	800bf06 <HAL_TIM_PWM_Start+0x9e>
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	2b0c      	cmp	r3, #12
 800bec4:	d109      	bne.n	800beda <HAL_TIM_PWM_Start+0x72>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800becc:	b2db      	uxtb	r3, r3
 800bece:	2b01      	cmp	r3, #1
 800bed0:	bf14      	ite	ne
 800bed2:	2301      	movne	r3, #1
 800bed4:	2300      	moveq	r3, #0
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	e015      	b.n	800bf06 <HAL_TIM_PWM_Start+0x9e>
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	2b10      	cmp	r3, #16
 800bede:	d109      	bne.n	800bef4 <HAL_TIM_PWM_Start+0x8c>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	2b01      	cmp	r3, #1
 800beea:	bf14      	ite	ne
 800beec:	2301      	movne	r3, #1
 800beee:	2300      	moveq	r3, #0
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	e008      	b.n	800bf06 <HAL_TIM_PWM_Start+0x9e>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800befa:	b2db      	uxtb	r3, r3
 800befc:	2b01      	cmp	r3, #1
 800befe:	bf14      	ite	ne
 800bf00:	2301      	movne	r3, #1
 800bf02:	2300      	moveq	r3, #0
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d001      	beq.n	800bf0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e0a1      	b.n	800c052 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d104      	bne.n	800bf1e <HAL_TIM_PWM_Start+0xb6>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2202      	movs	r2, #2
 800bf18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf1c:	e023      	b.n	800bf66 <HAL_TIM_PWM_Start+0xfe>
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	2b04      	cmp	r3, #4
 800bf22:	d104      	bne.n	800bf2e <HAL_TIM_PWM_Start+0xc6>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2202      	movs	r2, #2
 800bf28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf2c:	e01b      	b.n	800bf66 <HAL_TIM_PWM_Start+0xfe>
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	2b08      	cmp	r3, #8
 800bf32:	d104      	bne.n	800bf3e <HAL_TIM_PWM_Start+0xd6>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2202      	movs	r2, #2
 800bf38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf3c:	e013      	b.n	800bf66 <HAL_TIM_PWM_Start+0xfe>
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	2b0c      	cmp	r3, #12
 800bf42:	d104      	bne.n	800bf4e <HAL_TIM_PWM_Start+0xe6>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2202      	movs	r2, #2
 800bf48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bf4c:	e00b      	b.n	800bf66 <HAL_TIM_PWM_Start+0xfe>
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	2b10      	cmp	r3, #16
 800bf52:	d104      	bne.n	800bf5e <HAL_TIM_PWM_Start+0xf6>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2202      	movs	r2, #2
 800bf58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf5c:	e003      	b.n	800bf66 <HAL_TIM_PWM_Start+0xfe>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2202      	movs	r2, #2
 800bf62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	6839      	ldr	r1, [r7, #0]
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f000 ffea 	bl	800cf48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4a38      	ldr	r2, [pc, #224]	; (800c05c <HAL_TIM_PWM_Start+0x1f4>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d013      	beq.n	800bfa6 <HAL_TIM_PWM_Start+0x13e>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	4a37      	ldr	r2, [pc, #220]	; (800c060 <HAL_TIM_PWM_Start+0x1f8>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d00e      	beq.n	800bfa6 <HAL_TIM_PWM_Start+0x13e>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4a35      	ldr	r2, [pc, #212]	; (800c064 <HAL_TIM_PWM_Start+0x1fc>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d009      	beq.n	800bfa6 <HAL_TIM_PWM_Start+0x13e>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4a34      	ldr	r2, [pc, #208]	; (800c068 <HAL_TIM_PWM_Start+0x200>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d004      	beq.n	800bfa6 <HAL_TIM_PWM_Start+0x13e>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a32      	ldr	r2, [pc, #200]	; (800c06c <HAL_TIM_PWM_Start+0x204>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d101      	bne.n	800bfaa <HAL_TIM_PWM_Start+0x142>
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e000      	b.n	800bfac <HAL_TIM_PWM_Start+0x144>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d007      	beq.n	800bfc0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bfbe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4a25      	ldr	r2, [pc, #148]	; (800c05c <HAL_TIM_PWM_Start+0x1f4>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d022      	beq.n	800c010 <HAL_TIM_PWM_Start+0x1a8>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfd2:	d01d      	beq.n	800c010 <HAL_TIM_PWM_Start+0x1a8>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4a25      	ldr	r2, [pc, #148]	; (800c070 <HAL_TIM_PWM_Start+0x208>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d018      	beq.n	800c010 <HAL_TIM_PWM_Start+0x1a8>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4a24      	ldr	r2, [pc, #144]	; (800c074 <HAL_TIM_PWM_Start+0x20c>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d013      	beq.n	800c010 <HAL_TIM_PWM_Start+0x1a8>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4a22      	ldr	r2, [pc, #136]	; (800c078 <HAL_TIM_PWM_Start+0x210>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d00e      	beq.n	800c010 <HAL_TIM_PWM_Start+0x1a8>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	4a1a      	ldr	r2, [pc, #104]	; (800c060 <HAL_TIM_PWM_Start+0x1f8>)
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d009      	beq.n	800c010 <HAL_TIM_PWM_Start+0x1a8>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4a1e      	ldr	r2, [pc, #120]	; (800c07c <HAL_TIM_PWM_Start+0x214>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d004      	beq.n	800c010 <HAL_TIM_PWM_Start+0x1a8>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4a16      	ldr	r2, [pc, #88]	; (800c064 <HAL_TIM_PWM_Start+0x1fc>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d115      	bne.n	800c03c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	689a      	ldr	r2, [r3, #8]
 800c016:	4b1a      	ldr	r3, [pc, #104]	; (800c080 <HAL_TIM_PWM_Start+0x218>)
 800c018:	4013      	ands	r3, r2
 800c01a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2b06      	cmp	r3, #6
 800c020:	d015      	beq.n	800c04e <HAL_TIM_PWM_Start+0x1e6>
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c028:	d011      	beq.n	800c04e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	681a      	ldr	r2, [r3, #0]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f042 0201 	orr.w	r2, r2, #1
 800c038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c03a:	e008      	b.n	800c04e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f042 0201 	orr.w	r2, r2, #1
 800c04a:	601a      	str	r2, [r3, #0]
 800c04c:	e000      	b.n	800c050 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c04e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c050:	2300      	movs	r3, #0
}
 800c052:	4618      	mov	r0, r3
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	40010000 	.word	0x40010000
 800c060:	40010400 	.word	0x40010400
 800c064:	40014000 	.word	0x40014000
 800c068:	40014400 	.word	0x40014400
 800c06c:	40014800 	.word	0x40014800
 800c070:	40000400 	.word	0x40000400
 800c074:	40000800 	.word	0x40000800
 800c078:	40000c00 	.word	0x40000c00
 800c07c:	40001800 	.word	0x40001800
 800c080:	00010007 	.word	0x00010007

0800c084 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	691b      	ldr	r3, [r3, #16]
 800c092:	f003 0302 	and.w	r3, r3, #2
 800c096:	2b02      	cmp	r3, #2
 800c098:	d122      	bne.n	800c0e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	f003 0302 	and.w	r3, r3, #2
 800c0a4:	2b02      	cmp	r3, #2
 800c0a6:	d11b      	bne.n	800c0e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f06f 0202 	mvn.w	r2, #2
 800c0b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	699b      	ldr	r3, [r3, #24]
 800c0be:	f003 0303 	and.w	r3, r3, #3
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d003      	beq.n	800c0ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 fb12 	bl	800c6f0 <HAL_TIM_IC_CaptureCallback>
 800c0cc:	e005      	b.n	800c0da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 fb04 	bl	800c6dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 fb15 	bl	800c704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	691b      	ldr	r3, [r3, #16]
 800c0e6:	f003 0304 	and.w	r3, r3, #4
 800c0ea:	2b04      	cmp	r3, #4
 800c0ec:	d122      	bne.n	800c134 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	f003 0304 	and.w	r3, r3, #4
 800c0f8:	2b04      	cmp	r3, #4
 800c0fa:	d11b      	bne.n	800c134 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f06f 0204 	mvn.w	r2, #4
 800c104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2202      	movs	r2, #2
 800c10a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	699b      	ldr	r3, [r3, #24]
 800c112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c116:	2b00      	cmp	r3, #0
 800c118:	d003      	beq.n	800c122 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 fae8 	bl	800c6f0 <HAL_TIM_IC_CaptureCallback>
 800c120:	e005      	b.n	800c12e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 fada 	bl	800c6dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 faeb 	bl	800c704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2200      	movs	r2, #0
 800c132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	691b      	ldr	r3, [r3, #16]
 800c13a:	f003 0308 	and.w	r3, r3, #8
 800c13e:	2b08      	cmp	r3, #8
 800c140:	d122      	bne.n	800c188 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	68db      	ldr	r3, [r3, #12]
 800c148:	f003 0308 	and.w	r3, r3, #8
 800c14c:	2b08      	cmp	r3, #8
 800c14e:	d11b      	bne.n	800c188 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f06f 0208 	mvn.w	r2, #8
 800c158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2204      	movs	r2, #4
 800c15e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	69db      	ldr	r3, [r3, #28]
 800c166:	f003 0303 	and.w	r3, r3, #3
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d003      	beq.n	800c176 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 fabe 	bl	800c6f0 <HAL_TIM_IC_CaptureCallback>
 800c174:	e005      	b.n	800c182 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 fab0 	bl	800c6dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 fac1 	bl	800c704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	691b      	ldr	r3, [r3, #16]
 800c18e:	f003 0310 	and.w	r3, r3, #16
 800c192:	2b10      	cmp	r3, #16
 800c194:	d122      	bne.n	800c1dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	68db      	ldr	r3, [r3, #12]
 800c19c:	f003 0310 	and.w	r3, r3, #16
 800c1a0:	2b10      	cmp	r3, #16
 800c1a2:	d11b      	bne.n	800c1dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f06f 0210 	mvn.w	r2, #16
 800c1ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2208      	movs	r2, #8
 800c1b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	69db      	ldr	r3, [r3, #28]
 800c1ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d003      	beq.n	800c1ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 fa94 	bl	800c6f0 <HAL_TIM_IC_CaptureCallback>
 800c1c8:	e005      	b.n	800c1d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 fa86 	bl	800c6dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f000 fa97 	bl	800c704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	691b      	ldr	r3, [r3, #16]
 800c1e2:	f003 0301 	and.w	r3, r3, #1
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	d10e      	bne.n	800c208 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	68db      	ldr	r3, [r3, #12]
 800c1f0:	f003 0301 	and.w	r3, r3, #1
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d107      	bne.n	800c208 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f06f 0201 	mvn.w	r2, #1
 800c200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f7f6 fdac 	bl	8002d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	691b      	ldr	r3, [r3, #16]
 800c20e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c212:	2b80      	cmp	r3, #128	; 0x80
 800c214:	d10e      	bne.n	800c234 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	68db      	ldr	r3, [r3, #12]
 800c21c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c220:	2b80      	cmp	r3, #128	; 0x80
 800c222:	d107      	bne.n	800c234 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c22c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 ffc6 	bl	800d1c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	691b      	ldr	r3, [r3, #16]
 800c23a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c23e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c242:	d10e      	bne.n	800c262 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c24e:	2b80      	cmp	r3, #128	; 0x80
 800c250:	d107      	bne.n	800c262 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c25a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 ffb9 	bl	800d1d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	691b      	ldr	r3, [r3, #16]
 800c268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c26c:	2b40      	cmp	r3, #64	; 0x40
 800c26e:	d10e      	bne.n	800c28e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	68db      	ldr	r3, [r3, #12]
 800c276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c27a:	2b40      	cmp	r3, #64	; 0x40
 800c27c:	d107      	bne.n	800c28e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 fa45 	bl	800c718 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	691b      	ldr	r3, [r3, #16]
 800c294:	f003 0320 	and.w	r3, r3, #32
 800c298:	2b20      	cmp	r3, #32
 800c29a:	d10e      	bne.n	800c2ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	f003 0320 	and.w	r3, r3, #32
 800c2a6:	2b20      	cmp	r3, #32
 800c2a8:	d107      	bne.n	800c2ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f06f 0220 	mvn.w	r2, #32
 800c2b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 ff79 	bl	800d1ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c2ba:	bf00      	nop
 800c2bc:	3708      	adds	r7, #8
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
	...

0800c2c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b086      	sub	sp, #24
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	60f8      	str	r0, [r7, #12]
 800c2cc:	60b9      	str	r1, [r7, #8]
 800c2ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d101      	bne.n	800c2e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c2de:	2302      	movs	r3, #2
 800c2e0:	e0ff      	b.n	800c4e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2b14      	cmp	r3, #20
 800c2ee:	f200 80f0 	bhi.w	800c4d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c2f2:	a201      	add	r2, pc, #4	; (adr r2, 800c2f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2f8:	0800c34d 	.word	0x0800c34d
 800c2fc:	0800c4d3 	.word	0x0800c4d3
 800c300:	0800c4d3 	.word	0x0800c4d3
 800c304:	0800c4d3 	.word	0x0800c4d3
 800c308:	0800c38d 	.word	0x0800c38d
 800c30c:	0800c4d3 	.word	0x0800c4d3
 800c310:	0800c4d3 	.word	0x0800c4d3
 800c314:	0800c4d3 	.word	0x0800c4d3
 800c318:	0800c3cf 	.word	0x0800c3cf
 800c31c:	0800c4d3 	.word	0x0800c4d3
 800c320:	0800c4d3 	.word	0x0800c4d3
 800c324:	0800c4d3 	.word	0x0800c4d3
 800c328:	0800c40f 	.word	0x0800c40f
 800c32c:	0800c4d3 	.word	0x0800c4d3
 800c330:	0800c4d3 	.word	0x0800c4d3
 800c334:	0800c4d3 	.word	0x0800c4d3
 800c338:	0800c451 	.word	0x0800c451
 800c33c:	0800c4d3 	.word	0x0800c4d3
 800c340:	0800c4d3 	.word	0x0800c4d3
 800c344:	0800c4d3 	.word	0x0800c4d3
 800c348:	0800c491 	.word	0x0800c491
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	68b9      	ldr	r1, [r7, #8]
 800c352:	4618      	mov	r0, r3
 800c354:	f000 fa84 	bl	800c860 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	699a      	ldr	r2, [r3, #24]
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f042 0208 	orr.w	r2, r2, #8
 800c366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	699a      	ldr	r2, [r3, #24]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f022 0204 	bic.w	r2, r2, #4
 800c376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	6999      	ldr	r1, [r3, #24]
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	691a      	ldr	r2, [r3, #16]
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	430a      	orrs	r2, r1
 800c388:	619a      	str	r2, [r3, #24]
      break;
 800c38a:	e0a5      	b.n	800c4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	68b9      	ldr	r1, [r7, #8]
 800c392:	4618      	mov	r0, r3
 800c394:	f000 faf4 	bl	800c980 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	699a      	ldr	r2, [r3, #24]
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c3a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	699a      	ldr	r2, [r3, #24]
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	6999      	ldr	r1, [r3, #24]
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	691b      	ldr	r3, [r3, #16]
 800c3c2:	021a      	lsls	r2, r3, #8
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	430a      	orrs	r2, r1
 800c3ca:	619a      	str	r2, [r3, #24]
      break;
 800c3cc:	e084      	b.n	800c4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	68b9      	ldr	r1, [r7, #8]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f000 fb5d 	bl	800ca94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	69da      	ldr	r2, [r3, #28]
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f042 0208 	orr.w	r2, r2, #8
 800c3e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	69da      	ldr	r2, [r3, #28]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f022 0204 	bic.w	r2, r2, #4
 800c3f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	69d9      	ldr	r1, [r3, #28]
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	691a      	ldr	r2, [r3, #16]
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	430a      	orrs	r2, r1
 800c40a:	61da      	str	r2, [r3, #28]
      break;
 800c40c:	e064      	b.n	800c4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	68b9      	ldr	r1, [r7, #8]
 800c414:	4618      	mov	r0, r3
 800c416:	f000 fbc5 	bl	800cba4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	69da      	ldr	r2, [r3, #28]
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	69da      	ldr	r2, [r3, #28]
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	69d9      	ldr	r1, [r3, #28]
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	691b      	ldr	r3, [r3, #16]
 800c444:	021a      	lsls	r2, r3, #8
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	430a      	orrs	r2, r1
 800c44c:	61da      	str	r2, [r3, #28]
      break;
 800c44e:	e043      	b.n	800c4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	68b9      	ldr	r1, [r7, #8]
 800c456:	4618      	mov	r0, r3
 800c458:	f000 fc0e 	bl	800cc78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f042 0208 	orr.w	r2, r2, #8
 800c46a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f022 0204 	bic.w	r2, r2, #4
 800c47a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	691a      	ldr	r2, [r3, #16]
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	430a      	orrs	r2, r1
 800c48c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c48e:	e023      	b.n	800c4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	68b9      	ldr	r1, [r7, #8]
 800c496:	4618      	mov	r0, r3
 800c498:	f000 fc52 	bl	800cd40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c4aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c4ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	691b      	ldr	r3, [r3, #16]
 800c4c6:	021a      	lsls	r2, r3, #8
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	430a      	orrs	r2, r1
 800c4ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c4d0:	e002      	b.n	800c4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	75fb      	strb	r3, [r7, #23]
      break;
 800c4d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c4e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3718      	adds	r7, #24
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop

0800c4ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c500:	2b01      	cmp	r3, #1
 800c502:	d101      	bne.n	800c508 <HAL_TIM_ConfigClockSource+0x1c>
 800c504:	2302      	movs	r3, #2
 800c506:	e0dc      	b.n	800c6c2 <HAL_TIM_ConfigClockSource+0x1d6>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2201      	movs	r2, #1
 800c50c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2202      	movs	r2, #2
 800c514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	689b      	ldr	r3, [r3, #8]
 800c51e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c520:	68ba      	ldr	r2, [r7, #8]
 800c522:	4b6a      	ldr	r3, [pc, #424]	; (800c6cc <HAL_TIM_ConfigClockSource+0x1e0>)
 800c524:	4013      	ands	r3, r2
 800c526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c52e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	68ba      	ldr	r2, [r7, #8]
 800c536:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4a64      	ldr	r2, [pc, #400]	; (800c6d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	f000 80a9 	beq.w	800c696 <HAL_TIM_ConfigClockSource+0x1aa>
 800c544:	4a62      	ldr	r2, [pc, #392]	; (800c6d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c546:	4293      	cmp	r3, r2
 800c548:	f200 80ae 	bhi.w	800c6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c54c:	4a61      	ldr	r2, [pc, #388]	; (800c6d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	f000 80a1 	beq.w	800c696 <HAL_TIM_ConfigClockSource+0x1aa>
 800c554:	4a5f      	ldr	r2, [pc, #380]	; (800c6d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c556:	4293      	cmp	r3, r2
 800c558:	f200 80a6 	bhi.w	800c6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c55c:	4a5e      	ldr	r2, [pc, #376]	; (800c6d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	f000 8099 	beq.w	800c696 <HAL_TIM_ConfigClockSource+0x1aa>
 800c564:	4a5c      	ldr	r2, [pc, #368]	; (800c6d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c566:	4293      	cmp	r3, r2
 800c568:	f200 809e 	bhi.w	800c6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c56c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c570:	f000 8091 	beq.w	800c696 <HAL_TIM_ConfigClockSource+0x1aa>
 800c574:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c578:	f200 8096 	bhi.w	800c6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c57c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c580:	f000 8089 	beq.w	800c696 <HAL_TIM_ConfigClockSource+0x1aa>
 800c584:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c588:	f200 808e 	bhi.w	800c6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c58c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c590:	d03e      	beq.n	800c610 <HAL_TIM_ConfigClockSource+0x124>
 800c592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c596:	f200 8087 	bhi.w	800c6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c59a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c59e:	f000 8086 	beq.w	800c6ae <HAL_TIM_ConfigClockSource+0x1c2>
 800c5a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5a6:	d87f      	bhi.n	800c6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5a8:	2b70      	cmp	r3, #112	; 0x70
 800c5aa:	d01a      	beq.n	800c5e2 <HAL_TIM_ConfigClockSource+0xf6>
 800c5ac:	2b70      	cmp	r3, #112	; 0x70
 800c5ae:	d87b      	bhi.n	800c6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5b0:	2b60      	cmp	r3, #96	; 0x60
 800c5b2:	d050      	beq.n	800c656 <HAL_TIM_ConfigClockSource+0x16a>
 800c5b4:	2b60      	cmp	r3, #96	; 0x60
 800c5b6:	d877      	bhi.n	800c6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5b8:	2b50      	cmp	r3, #80	; 0x50
 800c5ba:	d03c      	beq.n	800c636 <HAL_TIM_ConfigClockSource+0x14a>
 800c5bc:	2b50      	cmp	r3, #80	; 0x50
 800c5be:	d873      	bhi.n	800c6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5c0:	2b40      	cmp	r3, #64	; 0x40
 800c5c2:	d058      	beq.n	800c676 <HAL_TIM_ConfigClockSource+0x18a>
 800c5c4:	2b40      	cmp	r3, #64	; 0x40
 800c5c6:	d86f      	bhi.n	800c6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5c8:	2b30      	cmp	r3, #48	; 0x30
 800c5ca:	d064      	beq.n	800c696 <HAL_TIM_ConfigClockSource+0x1aa>
 800c5cc:	2b30      	cmp	r3, #48	; 0x30
 800c5ce:	d86b      	bhi.n	800c6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5d0:	2b20      	cmp	r3, #32
 800c5d2:	d060      	beq.n	800c696 <HAL_TIM_ConfigClockSource+0x1aa>
 800c5d4:	2b20      	cmp	r3, #32
 800c5d6:	d867      	bhi.n	800c6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d05c      	beq.n	800c696 <HAL_TIM_ConfigClockSource+0x1aa>
 800c5dc:	2b10      	cmp	r3, #16
 800c5de:	d05a      	beq.n	800c696 <HAL_TIM_ConfigClockSource+0x1aa>
 800c5e0:	e062      	b.n	800c6a8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6818      	ldr	r0, [r3, #0]
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	6899      	ldr	r1, [r3, #8]
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	685a      	ldr	r2, [r3, #4]
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	68db      	ldr	r3, [r3, #12]
 800c5f2:	f000 fc89 	bl	800cf08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	689b      	ldr	r3, [r3, #8]
 800c5fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c604:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	609a      	str	r2, [r3, #8]
      break;
 800c60e:	e04f      	b.n	800c6b0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6818      	ldr	r0, [r3, #0]
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	6899      	ldr	r1, [r3, #8]
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	685a      	ldr	r2, [r3, #4]
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	68db      	ldr	r3, [r3, #12]
 800c620:	f000 fc72 	bl	800cf08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	689a      	ldr	r2, [r3, #8]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c632:	609a      	str	r2, [r3, #8]
      break;
 800c634:	e03c      	b.n	800c6b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6818      	ldr	r0, [r3, #0]
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	6859      	ldr	r1, [r3, #4]
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	68db      	ldr	r3, [r3, #12]
 800c642:	461a      	mov	r2, r3
 800c644:	f000 fbe2 	bl	800ce0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	2150      	movs	r1, #80	; 0x50
 800c64e:	4618      	mov	r0, r3
 800c650:	f000 fc3c 	bl	800cecc <TIM_ITRx_SetConfig>
      break;
 800c654:	e02c      	b.n	800c6b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6818      	ldr	r0, [r3, #0]
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	6859      	ldr	r1, [r3, #4]
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	68db      	ldr	r3, [r3, #12]
 800c662:	461a      	mov	r2, r3
 800c664:	f000 fc01 	bl	800ce6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2160      	movs	r1, #96	; 0x60
 800c66e:	4618      	mov	r0, r3
 800c670:	f000 fc2c 	bl	800cecc <TIM_ITRx_SetConfig>
      break;
 800c674:	e01c      	b.n	800c6b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6818      	ldr	r0, [r3, #0]
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	6859      	ldr	r1, [r3, #4]
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	68db      	ldr	r3, [r3, #12]
 800c682:	461a      	mov	r2, r3
 800c684:	f000 fbc2 	bl	800ce0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2140      	movs	r1, #64	; 0x40
 800c68e:	4618      	mov	r0, r3
 800c690:	f000 fc1c 	bl	800cecc <TIM_ITRx_SetConfig>
      break;
 800c694:	e00c      	b.n	800c6b0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681a      	ldr	r2, [r3, #0]
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4619      	mov	r1, r3
 800c6a0:	4610      	mov	r0, r2
 800c6a2:	f000 fc13 	bl	800cecc <TIM_ITRx_SetConfig>
      break;
 800c6a6:	e003      	b.n	800c6b0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	73fb      	strb	r3, [r7, #15]
      break;
 800c6ac:	e000      	b.n	800c6b0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c6ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3710      	adds	r7, #16
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
 800c6ca:	bf00      	nop
 800c6cc:	ffceff88 	.word	0xffceff88
 800c6d0:	00100040 	.word	0x00100040
 800c6d4:	00100030 	.word	0x00100030
 800c6d8:	00100020 	.word	0x00100020

0800c6dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b083      	sub	sp, #12
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c6e4:	bf00      	nop
 800c6e6:	370c      	adds	r7, #12
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ee:	4770      	bx	lr

0800c6f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b083      	sub	sp, #12
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c6f8:	bf00      	nop
 800c6fa:	370c      	adds	r7, #12
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c704:	b480      	push	{r7}
 800c706:	b083      	sub	sp, #12
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c70c:	bf00      	nop
 800c70e:	370c      	adds	r7, #12
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr

0800c718 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c718:	b480      	push	{r7}
 800c71a:	b083      	sub	sp, #12
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c720:	bf00      	nop
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr

0800c72c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b085      	sub	sp, #20
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	4a40      	ldr	r2, [pc, #256]	; (800c840 <TIM_Base_SetConfig+0x114>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d013      	beq.n	800c76c <TIM_Base_SetConfig+0x40>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c74a:	d00f      	beq.n	800c76c <TIM_Base_SetConfig+0x40>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	4a3d      	ldr	r2, [pc, #244]	; (800c844 <TIM_Base_SetConfig+0x118>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d00b      	beq.n	800c76c <TIM_Base_SetConfig+0x40>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	4a3c      	ldr	r2, [pc, #240]	; (800c848 <TIM_Base_SetConfig+0x11c>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d007      	beq.n	800c76c <TIM_Base_SetConfig+0x40>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	4a3b      	ldr	r2, [pc, #236]	; (800c84c <TIM_Base_SetConfig+0x120>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d003      	beq.n	800c76c <TIM_Base_SetConfig+0x40>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	4a3a      	ldr	r2, [pc, #232]	; (800c850 <TIM_Base_SetConfig+0x124>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d108      	bne.n	800c77e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	68fa      	ldr	r2, [r7, #12]
 800c77a:	4313      	orrs	r3, r2
 800c77c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	4a2f      	ldr	r2, [pc, #188]	; (800c840 <TIM_Base_SetConfig+0x114>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d01f      	beq.n	800c7c6 <TIM_Base_SetConfig+0x9a>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c78c:	d01b      	beq.n	800c7c6 <TIM_Base_SetConfig+0x9a>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	4a2c      	ldr	r2, [pc, #176]	; (800c844 <TIM_Base_SetConfig+0x118>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d017      	beq.n	800c7c6 <TIM_Base_SetConfig+0x9a>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	4a2b      	ldr	r2, [pc, #172]	; (800c848 <TIM_Base_SetConfig+0x11c>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d013      	beq.n	800c7c6 <TIM_Base_SetConfig+0x9a>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	4a2a      	ldr	r2, [pc, #168]	; (800c84c <TIM_Base_SetConfig+0x120>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d00f      	beq.n	800c7c6 <TIM_Base_SetConfig+0x9a>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	4a29      	ldr	r2, [pc, #164]	; (800c850 <TIM_Base_SetConfig+0x124>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d00b      	beq.n	800c7c6 <TIM_Base_SetConfig+0x9a>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	4a28      	ldr	r2, [pc, #160]	; (800c854 <TIM_Base_SetConfig+0x128>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d007      	beq.n	800c7c6 <TIM_Base_SetConfig+0x9a>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	4a27      	ldr	r2, [pc, #156]	; (800c858 <TIM_Base_SetConfig+0x12c>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d003      	beq.n	800c7c6 <TIM_Base_SetConfig+0x9a>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	4a26      	ldr	r2, [pc, #152]	; (800c85c <TIM_Base_SetConfig+0x130>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d108      	bne.n	800c7d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	68fa      	ldr	r2, [r7, #12]
 800c7d4:	4313      	orrs	r3, r2
 800c7d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	695b      	ldr	r3, [r3, #20]
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	689a      	ldr	r2, [r3, #8]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	4a10      	ldr	r2, [pc, #64]	; (800c840 <TIM_Base_SetConfig+0x114>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d00f      	beq.n	800c824 <TIM_Base_SetConfig+0xf8>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	4a12      	ldr	r2, [pc, #72]	; (800c850 <TIM_Base_SetConfig+0x124>)
 800c808:	4293      	cmp	r3, r2
 800c80a:	d00b      	beq.n	800c824 <TIM_Base_SetConfig+0xf8>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	4a11      	ldr	r2, [pc, #68]	; (800c854 <TIM_Base_SetConfig+0x128>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d007      	beq.n	800c824 <TIM_Base_SetConfig+0xf8>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	4a10      	ldr	r2, [pc, #64]	; (800c858 <TIM_Base_SetConfig+0x12c>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d003      	beq.n	800c824 <TIM_Base_SetConfig+0xf8>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	4a0f      	ldr	r2, [pc, #60]	; (800c85c <TIM_Base_SetConfig+0x130>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d103      	bne.n	800c82c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	691a      	ldr	r2, [r3, #16]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2201      	movs	r2, #1
 800c830:	615a      	str	r2, [r3, #20]
}
 800c832:	bf00      	nop
 800c834:	3714      	adds	r7, #20
 800c836:	46bd      	mov	sp, r7
 800c838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83c:	4770      	bx	lr
 800c83e:	bf00      	nop
 800c840:	40010000 	.word	0x40010000
 800c844:	40000400 	.word	0x40000400
 800c848:	40000800 	.word	0x40000800
 800c84c:	40000c00 	.word	0x40000c00
 800c850:	40010400 	.word	0x40010400
 800c854:	40014000 	.word	0x40014000
 800c858:	40014400 	.word	0x40014400
 800c85c:	40014800 	.word	0x40014800

0800c860 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c860:	b480      	push	{r7}
 800c862:	b087      	sub	sp, #28
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6a1b      	ldr	r3, [r3, #32]
 800c86e:	f023 0201 	bic.w	r2, r3, #1
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6a1b      	ldr	r3, [r3, #32]
 800c87a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	699b      	ldr	r3, [r3, #24]
 800c886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c888:	68fa      	ldr	r2, [r7, #12]
 800c88a:	4b37      	ldr	r3, [pc, #220]	; (800c968 <TIM_OC1_SetConfig+0x108>)
 800c88c:	4013      	ands	r3, r2
 800c88e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f023 0303 	bic.w	r3, r3, #3
 800c896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	68fa      	ldr	r2, [r7, #12]
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	f023 0302 	bic.w	r3, r3, #2
 800c8a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	689b      	ldr	r3, [r3, #8]
 800c8ae:	697a      	ldr	r2, [r7, #20]
 800c8b0:	4313      	orrs	r3, r2
 800c8b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	4a2d      	ldr	r2, [pc, #180]	; (800c96c <TIM_OC1_SetConfig+0x10c>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d00f      	beq.n	800c8dc <TIM_OC1_SetConfig+0x7c>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	4a2c      	ldr	r2, [pc, #176]	; (800c970 <TIM_OC1_SetConfig+0x110>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d00b      	beq.n	800c8dc <TIM_OC1_SetConfig+0x7c>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	4a2b      	ldr	r2, [pc, #172]	; (800c974 <TIM_OC1_SetConfig+0x114>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d007      	beq.n	800c8dc <TIM_OC1_SetConfig+0x7c>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	4a2a      	ldr	r2, [pc, #168]	; (800c978 <TIM_OC1_SetConfig+0x118>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d003      	beq.n	800c8dc <TIM_OC1_SetConfig+0x7c>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	4a29      	ldr	r2, [pc, #164]	; (800c97c <TIM_OC1_SetConfig+0x11c>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d10c      	bne.n	800c8f6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	f023 0308 	bic.w	r3, r3, #8
 800c8e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	68db      	ldr	r3, [r3, #12]
 800c8e8:	697a      	ldr	r2, [r7, #20]
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	f023 0304 	bic.w	r3, r3, #4
 800c8f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	4a1c      	ldr	r2, [pc, #112]	; (800c96c <TIM_OC1_SetConfig+0x10c>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d00f      	beq.n	800c91e <TIM_OC1_SetConfig+0xbe>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	4a1b      	ldr	r2, [pc, #108]	; (800c970 <TIM_OC1_SetConfig+0x110>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d00b      	beq.n	800c91e <TIM_OC1_SetConfig+0xbe>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	4a1a      	ldr	r2, [pc, #104]	; (800c974 <TIM_OC1_SetConfig+0x114>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d007      	beq.n	800c91e <TIM_OC1_SetConfig+0xbe>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	4a19      	ldr	r2, [pc, #100]	; (800c978 <TIM_OC1_SetConfig+0x118>)
 800c912:	4293      	cmp	r3, r2
 800c914:	d003      	beq.n	800c91e <TIM_OC1_SetConfig+0xbe>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	4a18      	ldr	r2, [pc, #96]	; (800c97c <TIM_OC1_SetConfig+0x11c>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d111      	bne.n	800c942 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c92c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	695b      	ldr	r3, [r3, #20]
 800c932:	693a      	ldr	r2, [r7, #16]
 800c934:	4313      	orrs	r3, r2
 800c936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	699b      	ldr	r3, [r3, #24]
 800c93c:	693a      	ldr	r2, [r7, #16]
 800c93e:	4313      	orrs	r3, r2
 800c940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	693a      	ldr	r2, [r7, #16]
 800c946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	68fa      	ldr	r2, [r7, #12]
 800c94c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	685a      	ldr	r2, [r3, #4]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	697a      	ldr	r2, [r7, #20]
 800c95a:	621a      	str	r2, [r3, #32]
}
 800c95c:	bf00      	nop
 800c95e:	371c      	adds	r7, #28
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr
 800c968:	fffeff8f 	.word	0xfffeff8f
 800c96c:	40010000 	.word	0x40010000
 800c970:	40010400 	.word	0x40010400
 800c974:	40014000 	.word	0x40014000
 800c978:	40014400 	.word	0x40014400
 800c97c:	40014800 	.word	0x40014800

0800c980 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c980:	b480      	push	{r7}
 800c982:	b087      	sub	sp, #28
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6a1b      	ldr	r3, [r3, #32]
 800c98e:	f023 0210 	bic.w	r2, r3, #16
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6a1b      	ldr	r3, [r3, #32]
 800c99a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	699b      	ldr	r3, [r3, #24]
 800c9a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	4b34      	ldr	r3, [pc, #208]	; (800ca7c <TIM_OC2_SetConfig+0xfc>)
 800c9ac:	4013      	ands	r3, r2
 800c9ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	021b      	lsls	r3, r3, #8
 800c9be:	68fa      	ldr	r2, [r7, #12]
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	f023 0320 	bic.w	r3, r3, #32
 800c9ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	689b      	ldr	r3, [r3, #8]
 800c9d0:	011b      	lsls	r3, r3, #4
 800c9d2:	697a      	ldr	r2, [r7, #20]
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	4a29      	ldr	r2, [pc, #164]	; (800ca80 <TIM_OC2_SetConfig+0x100>)
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d003      	beq.n	800c9e8 <TIM_OC2_SetConfig+0x68>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	4a28      	ldr	r2, [pc, #160]	; (800ca84 <TIM_OC2_SetConfig+0x104>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d10d      	bne.n	800ca04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	68db      	ldr	r3, [r3, #12]
 800c9f4:	011b      	lsls	r3, r3, #4
 800c9f6:	697a      	ldr	r2, [r7, #20]
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	4a1e      	ldr	r2, [pc, #120]	; (800ca80 <TIM_OC2_SetConfig+0x100>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d00f      	beq.n	800ca2c <TIM_OC2_SetConfig+0xac>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	4a1d      	ldr	r2, [pc, #116]	; (800ca84 <TIM_OC2_SetConfig+0x104>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d00b      	beq.n	800ca2c <TIM_OC2_SetConfig+0xac>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	4a1c      	ldr	r2, [pc, #112]	; (800ca88 <TIM_OC2_SetConfig+0x108>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d007      	beq.n	800ca2c <TIM_OC2_SetConfig+0xac>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	4a1b      	ldr	r2, [pc, #108]	; (800ca8c <TIM_OC2_SetConfig+0x10c>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d003      	beq.n	800ca2c <TIM_OC2_SetConfig+0xac>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	4a1a      	ldr	r2, [pc, #104]	; (800ca90 <TIM_OC2_SetConfig+0x110>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d113      	bne.n	800ca54 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ca32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ca3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	695b      	ldr	r3, [r3, #20]
 800ca40:	009b      	lsls	r3, r3, #2
 800ca42:	693a      	ldr	r2, [r7, #16]
 800ca44:	4313      	orrs	r3, r2
 800ca46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	699b      	ldr	r3, [r3, #24]
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	693a      	ldr	r2, [r7, #16]
 800ca50:	4313      	orrs	r3, r2
 800ca52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	693a      	ldr	r2, [r7, #16]
 800ca58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	68fa      	ldr	r2, [r7, #12]
 800ca5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	685a      	ldr	r2, [r3, #4]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	697a      	ldr	r2, [r7, #20]
 800ca6c:	621a      	str	r2, [r3, #32]
}
 800ca6e:	bf00      	nop
 800ca70:	371c      	adds	r7, #28
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr
 800ca7a:	bf00      	nop
 800ca7c:	feff8fff 	.word	0xfeff8fff
 800ca80:	40010000 	.word	0x40010000
 800ca84:	40010400 	.word	0x40010400
 800ca88:	40014000 	.word	0x40014000
 800ca8c:	40014400 	.word	0x40014400
 800ca90:	40014800 	.word	0x40014800

0800ca94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b087      	sub	sp, #28
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6a1b      	ldr	r3, [r3, #32]
 800caa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6a1b      	ldr	r3, [r3, #32]
 800caae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	69db      	ldr	r3, [r3, #28]
 800caba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cabc:	68fa      	ldr	r2, [r7, #12]
 800cabe:	4b33      	ldr	r3, [pc, #204]	; (800cb8c <TIM_OC3_SetConfig+0xf8>)
 800cac0:	4013      	ands	r3, r2
 800cac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f023 0303 	bic.w	r3, r3, #3
 800caca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	68fa      	ldr	r2, [r7, #12]
 800cad2:	4313      	orrs	r3, r2
 800cad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cadc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	021b      	lsls	r3, r3, #8
 800cae4:	697a      	ldr	r2, [r7, #20]
 800cae6:	4313      	orrs	r3, r2
 800cae8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	4a28      	ldr	r2, [pc, #160]	; (800cb90 <TIM_OC3_SetConfig+0xfc>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d003      	beq.n	800cafa <TIM_OC3_SetConfig+0x66>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	4a27      	ldr	r2, [pc, #156]	; (800cb94 <TIM_OC3_SetConfig+0x100>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d10d      	bne.n	800cb16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cb00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	68db      	ldr	r3, [r3, #12]
 800cb06:	021b      	lsls	r3, r3, #8
 800cb08:	697a      	ldr	r2, [r7, #20]
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cb14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	4a1d      	ldr	r2, [pc, #116]	; (800cb90 <TIM_OC3_SetConfig+0xfc>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d00f      	beq.n	800cb3e <TIM_OC3_SetConfig+0xaa>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4a1c      	ldr	r2, [pc, #112]	; (800cb94 <TIM_OC3_SetConfig+0x100>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d00b      	beq.n	800cb3e <TIM_OC3_SetConfig+0xaa>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	4a1b      	ldr	r2, [pc, #108]	; (800cb98 <TIM_OC3_SetConfig+0x104>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d007      	beq.n	800cb3e <TIM_OC3_SetConfig+0xaa>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	4a1a      	ldr	r2, [pc, #104]	; (800cb9c <TIM_OC3_SetConfig+0x108>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d003      	beq.n	800cb3e <TIM_OC3_SetConfig+0xaa>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	4a19      	ldr	r2, [pc, #100]	; (800cba0 <TIM_OC3_SetConfig+0x10c>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d113      	bne.n	800cb66 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cb4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	695b      	ldr	r3, [r3, #20]
 800cb52:	011b      	lsls	r3, r3, #4
 800cb54:	693a      	ldr	r2, [r7, #16]
 800cb56:	4313      	orrs	r3, r2
 800cb58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	699b      	ldr	r3, [r3, #24]
 800cb5e:	011b      	lsls	r3, r3, #4
 800cb60:	693a      	ldr	r2, [r7, #16]
 800cb62:	4313      	orrs	r3, r2
 800cb64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	693a      	ldr	r2, [r7, #16]
 800cb6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	68fa      	ldr	r2, [r7, #12]
 800cb70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	685a      	ldr	r2, [r3, #4]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	697a      	ldr	r2, [r7, #20]
 800cb7e:	621a      	str	r2, [r3, #32]
}
 800cb80:	bf00      	nop
 800cb82:	371c      	adds	r7, #28
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr
 800cb8c:	fffeff8f 	.word	0xfffeff8f
 800cb90:	40010000 	.word	0x40010000
 800cb94:	40010400 	.word	0x40010400
 800cb98:	40014000 	.word	0x40014000
 800cb9c:	40014400 	.word	0x40014400
 800cba0:	40014800 	.word	0x40014800

0800cba4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b087      	sub	sp, #28
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6a1b      	ldr	r3, [r3, #32]
 800cbb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6a1b      	ldr	r3, [r3, #32]
 800cbbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	69db      	ldr	r3, [r3, #28]
 800cbca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	4b24      	ldr	r3, [pc, #144]	; (800cc60 <TIM_OC4_SetConfig+0xbc>)
 800cbd0:	4013      	ands	r3, r2
 800cbd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	021b      	lsls	r3, r3, #8
 800cbe2:	68fa      	ldr	r2, [r7, #12]
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cbee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	031b      	lsls	r3, r3, #12
 800cbf6:	693a      	ldr	r2, [r7, #16]
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	4a19      	ldr	r2, [pc, #100]	; (800cc64 <TIM_OC4_SetConfig+0xc0>)
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d00f      	beq.n	800cc24 <TIM_OC4_SetConfig+0x80>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	4a18      	ldr	r2, [pc, #96]	; (800cc68 <TIM_OC4_SetConfig+0xc4>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d00b      	beq.n	800cc24 <TIM_OC4_SetConfig+0x80>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	4a17      	ldr	r2, [pc, #92]	; (800cc6c <TIM_OC4_SetConfig+0xc8>)
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d007      	beq.n	800cc24 <TIM_OC4_SetConfig+0x80>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	4a16      	ldr	r2, [pc, #88]	; (800cc70 <TIM_OC4_SetConfig+0xcc>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d003      	beq.n	800cc24 <TIM_OC4_SetConfig+0x80>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	4a15      	ldr	r2, [pc, #84]	; (800cc74 <TIM_OC4_SetConfig+0xd0>)
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d109      	bne.n	800cc38 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	695b      	ldr	r3, [r3, #20]
 800cc30:	019b      	lsls	r3, r3, #6
 800cc32:	697a      	ldr	r2, [r7, #20]
 800cc34:	4313      	orrs	r3, r2
 800cc36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	697a      	ldr	r2, [r7, #20]
 800cc3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	68fa      	ldr	r2, [r7, #12]
 800cc42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	685a      	ldr	r2, [r3, #4]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	693a      	ldr	r2, [r7, #16]
 800cc50:	621a      	str	r2, [r3, #32]
}
 800cc52:	bf00      	nop
 800cc54:	371c      	adds	r7, #28
 800cc56:	46bd      	mov	sp, r7
 800cc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5c:	4770      	bx	lr
 800cc5e:	bf00      	nop
 800cc60:	feff8fff 	.word	0xfeff8fff
 800cc64:	40010000 	.word	0x40010000
 800cc68:	40010400 	.word	0x40010400
 800cc6c:	40014000 	.word	0x40014000
 800cc70:	40014400 	.word	0x40014400
 800cc74:	40014800 	.word	0x40014800

0800cc78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b087      	sub	sp, #28
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6a1b      	ldr	r3, [r3, #32]
 800cc86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6a1b      	ldr	r3, [r3, #32]
 800cc92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cca0:	68fa      	ldr	r2, [r7, #12]
 800cca2:	4b21      	ldr	r3, [pc, #132]	; (800cd28 <TIM_OC5_SetConfig+0xb0>)
 800cca4:	4013      	ands	r3, r2
 800cca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ccb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	689b      	ldr	r3, [r3, #8]
 800ccbe:	041b      	lsls	r3, r3, #16
 800ccc0:	693a      	ldr	r2, [r7, #16]
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	4a18      	ldr	r2, [pc, #96]	; (800cd2c <TIM_OC5_SetConfig+0xb4>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d00f      	beq.n	800ccee <TIM_OC5_SetConfig+0x76>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	4a17      	ldr	r2, [pc, #92]	; (800cd30 <TIM_OC5_SetConfig+0xb8>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d00b      	beq.n	800ccee <TIM_OC5_SetConfig+0x76>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	4a16      	ldr	r2, [pc, #88]	; (800cd34 <TIM_OC5_SetConfig+0xbc>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d007      	beq.n	800ccee <TIM_OC5_SetConfig+0x76>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	4a15      	ldr	r2, [pc, #84]	; (800cd38 <TIM_OC5_SetConfig+0xc0>)
 800cce2:	4293      	cmp	r3, r2
 800cce4:	d003      	beq.n	800ccee <TIM_OC5_SetConfig+0x76>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	4a14      	ldr	r2, [pc, #80]	; (800cd3c <TIM_OC5_SetConfig+0xc4>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d109      	bne.n	800cd02 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ccf4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	695b      	ldr	r3, [r3, #20]
 800ccfa:	021b      	lsls	r3, r3, #8
 800ccfc:	697a      	ldr	r2, [r7, #20]
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	697a      	ldr	r2, [r7, #20]
 800cd06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	68fa      	ldr	r2, [r7, #12]
 800cd0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	685a      	ldr	r2, [r3, #4]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	693a      	ldr	r2, [r7, #16]
 800cd1a:	621a      	str	r2, [r3, #32]
}
 800cd1c:	bf00      	nop
 800cd1e:	371c      	adds	r7, #28
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr
 800cd28:	fffeff8f 	.word	0xfffeff8f
 800cd2c:	40010000 	.word	0x40010000
 800cd30:	40010400 	.word	0x40010400
 800cd34:	40014000 	.word	0x40014000
 800cd38:	40014400 	.word	0x40014400
 800cd3c:	40014800 	.word	0x40014800

0800cd40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b087      	sub	sp, #28
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6a1b      	ldr	r3, [r3, #32]
 800cd4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6a1b      	ldr	r3, [r3, #32]
 800cd5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cd68:	68fa      	ldr	r2, [r7, #12]
 800cd6a:	4b22      	ldr	r3, [pc, #136]	; (800cdf4 <TIM_OC6_SetConfig+0xb4>)
 800cd6c:	4013      	ands	r3, r2
 800cd6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	021b      	lsls	r3, r3, #8
 800cd76:	68fa      	ldr	r2, [r7, #12]
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cd82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	689b      	ldr	r3, [r3, #8]
 800cd88:	051b      	lsls	r3, r3, #20
 800cd8a:	693a      	ldr	r2, [r7, #16]
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	4a19      	ldr	r2, [pc, #100]	; (800cdf8 <TIM_OC6_SetConfig+0xb8>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d00f      	beq.n	800cdb8 <TIM_OC6_SetConfig+0x78>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	4a18      	ldr	r2, [pc, #96]	; (800cdfc <TIM_OC6_SetConfig+0xbc>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d00b      	beq.n	800cdb8 <TIM_OC6_SetConfig+0x78>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	4a17      	ldr	r2, [pc, #92]	; (800ce00 <TIM_OC6_SetConfig+0xc0>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d007      	beq.n	800cdb8 <TIM_OC6_SetConfig+0x78>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	4a16      	ldr	r2, [pc, #88]	; (800ce04 <TIM_OC6_SetConfig+0xc4>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d003      	beq.n	800cdb8 <TIM_OC6_SetConfig+0x78>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	4a15      	ldr	r2, [pc, #84]	; (800ce08 <TIM_OC6_SetConfig+0xc8>)
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	d109      	bne.n	800cdcc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cdbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	695b      	ldr	r3, [r3, #20]
 800cdc4:	029b      	lsls	r3, r3, #10
 800cdc6:	697a      	ldr	r2, [r7, #20]
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	697a      	ldr	r2, [r7, #20]
 800cdd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	68fa      	ldr	r2, [r7, #12]
 800cdd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	685a      	ldr	r2, [r3, #4]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	693a      	ldr	r2, [r7, #16]
 800cde4:	621a      	str	r2, [r3, #32]
}
 800cde6:	bf00      	nop
 800cde8:	371c      	adds	r7, #28
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	feff8fff 	.word	0xfeff8fff
 800cdf8:	40010000 	.word	0x40010000
 800cdfc:	40010400 	.word	0x40010400
 800ce00:	40014000 	.word	0x40014000
 800ce04:	40014400 	.word	0x40014400
 800ce08:	40014800 	.word	0x40014800

0800ce0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b087      	sub	sp, #28
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	60b9      	str	r1, [r7, #8]
 800ce16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	6a1b      	ldr	r3, [r3, #32]
 800ce1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	6a1b      	ldr	r3, [r3, #32]
 800ce22:	f023 0201 	bic.w	r2, r3, #1
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	699b      	ldr	r3, [r3, #24]
 800ce2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ce36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	011b      	lsls	r3, r3, #4
 800ce3c:	693a      	ldr	r2, [r7, #16]
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	f023 030a 	bic.w	r3, r3, #10
 800ce48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ce4a:	697a      	ldr	r2, [r7, #20]
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	693a      	ldr	r2, [r7, #16]
 800ce56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	697a      	ldr	r2, [r7, #20]
 800ce5c:	621a      	str	r2, [r3, #32]
}
 800ce5e:	bf00      	nop
 800ce60:	371c      	adds	r7, #28
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr

0800ce6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce6a:	b480      	push	{r7}
 800ce6c:	b087      	sub	sp, #28
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	60f8      	str	r0, [r7, #12]
 800ce72:	60b9      	str	r1, [r7, #8]
 800ce74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6a1b      	ldr	r3, [r3, #32]
 800ce7a:	f023 0210 	bic.w	r2, r3, #16
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	699b      	ldr	r3, [r3, #24]
 800ce86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	6a1b      	ldr	r3, [r3, #32]
 800ce8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	031b      	lsls	r3, r3, #12
 800ce9a:	697a      	ldr	r2, [r7, #20]
 800ce9c:	4313      	orrs	r3, r2
 800ce9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cea6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	011b      	lsls	r3, r3, #4
 800ceac:	693a      	ldr	r2, [r7, #16]
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	697a      	ldr	r2, [r7, #20]
 800ceb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	693a      	ldr	r2, [r7, #16]
 800cebc:	621a      	str	r2, [r3, #32]
}
 800cebe:	bf00      	nop
 800cec0:	371c      	adds	r7, #28
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr
	...

0800cecc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cecc:	b480      	push	{r7}
 800cece:	b085      	sub	sp, #20
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cedc:	68fa      	ldr	r2, [r7, #12]
 800cede:	4b09      	ldr	r3, [pc, #36]	; (800cf04 <TIM_ITRx_SetConfig+0x38>)
 800cee0:	4013      	ands	r3, r2
 800cee2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cee4:	683a      	ldr	r2, [r7, #0]
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	4313      	orrs	r3, r2
 800ceea:	f043 0307 	orr.w	r3, r3, #7
 800ceee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	68fa      	ldr	r2, [r7, #12]
 800cef4:	609a      	str	r2, [r3, #8]
}
 800cef6:	bf00      	nop
 800cef8:	3714      	adds	r7, #20
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	ffcfff8f 	.word	0xffcfff8f

0800cf08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b087      	sub	sp, #28
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	60f8      	str	r0, [r7, #12]
 800cf10:	60b9      	str	r1, [r7, #8]
 800cf12:	607a      	str	r2, [r7, #4]
 800cf14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	689b      	ldr	r3, [r3, #8]
 800cf1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cf22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	021a      	lsls	r2, r3, #8
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	431a      	orrs	r2, r3
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	697a      	ldr	r2, [r7, #20]
 800cf32:	4313      	orrs	r3, r2
 800cf34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	697a      	ldr	r2, [r7, #20]
 800cf3a:	609a      	str	r2, [r3, #8]
}
 800cf3c:	bf00      	nop
 800cf3e:	371c      	adds	r7, #28
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr

0800cf48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b087      	sub	sp, #28
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	60f8      	str	r0, [r7, #12]
 800cf50:	60b9      	str	r1, [r7, #8]
 800cf52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	f003 031f 	and.w	r3, r3, #31
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	fa02 f303 	lsl.w	r3, r2, r3
 800cf60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	6a1a      	ldr	r2, [r3, #32]
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	43db      	mvns	r3, r3
 800cf6a:	401a      	ands	r2, r3
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	6a1a      	ldr	r2, [r3, #32]
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	f003 031f 	and.w	r3, r3, #31
 800cf7a:	6879      	ldr	r1, [r7, #4]
 800cf7c:	fa01 f303 	lsl.w	r3, r1, r3
 800cf80:	431a      	orrs	r2, r3
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	621a      	str	r2, [r3, #32]
}
 800cf86:	bf00      	nop
 800cf88:	371c      	adds	r7, #28
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr
	...

0800cf94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b085      	sub	sp, #20
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d101      	bne.n	800cfac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cfa8:	2302      	movs	r3, #2
 800cfaa:	e06d      	b.n	800d088 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2201      	movs	r2, #1
 800cfb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2202      	movs	r2, #2
 800cfb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4a30      	ldr	r2, [pc, #192]	; (800d094 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d004      	beq.n	800cfe0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4a2f      	ldr	r2, [pc, #188]	; (800d098 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d108      	bne.n	800cff2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cfe6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	685b      	ldr	r3, [r3, #4]
 800cfec:	68fa      	ldr	r2, [r7, #12]
 800cfee:	4313      	orrs	r3, r2
 800cff0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cff8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	68fa      	ldr	r2, [r7, #12]
 800d000:	4313      	orrs	r3, r2
 800d002:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	68fa      	ldr	r2, [r7, #12]
 800d00a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4a20      	ldr	r2, [pc, #128]	; (800d094 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d012:	4293      	cmp	r3, r2
 800d014:	d022      	beq.n	800d05c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d01e:	d01d      	beq.n	800d05c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4a1d      	ldr	r2, [pc, #116]	; (800d09c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d018      	beq.n	800d05c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	4a1c      	ldr	r2, [pc, #112]	; (800d0a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d030:	4293      	cmp	r3, r2
 800d032:	d013      	beq.n	800d05c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	4a1a      	ldr	r2, [pc, #104]	; (800d0a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d00e      	beq.n	800d05c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	4a15      	ldr	r2, [pc, #84]	; (800d098 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d009      	beq.n	800d05c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	4a16      	ldr	r2, [pc, #88]	; (800d0a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d004      	beq.n	800d05c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	4a15      	ldr	r2, [pc, #84]	; (800d0ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d058:	4293      	cmp	r3, r2
 800d05a:	d10c      	bne.n	800d076 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d062:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	689b      	ldr	r3, [r3, #8]
 800d068:	68ba      	ldr	r2, [r7, #8]
 800d06a:	4313      	orrs	r3, r2
 800d06c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	68ba      	ldr	r2, [r7, #8]
 800d074:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2201      	movs	r2, #1
 800d07a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2200      	movs	r2, #0
 800d082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d086:	2300      	movs	r3, #0
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3714      	adds	r7, #20
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr
 800d094:	40010000 	.word	0x40010000
 800d098:	40010400 	.word	0x40010400
 800d09c:	40000400 	.word	0x40000400
 800d0a0:	40000800 	.word	0x40000800
 800d0a4:	40000c00 	.word	0x40000c00
 800d0a8:	40001800 	.word	0x40001800
 800d0ac:	40014000 	.word	0x40014000

0800d0b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b085      	sub	sp, #20
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d101      	bne.n	800d0cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d0c8:	2302      	movs	r3, #2
 800d0ca:	e065      	b.n	800d198 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	68db      	ldr	r3, [r3, #12]
 800d0de:	4313      	orrs	r3, r2
 800d0e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	689b      	ldr	r3, [r3, #8]
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	4313      	orrs	r3, r2
 800d0fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4313      	orrs	r3, r2
 800d10a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	691b      	ldr	r3, [r3, #16]
 800d116:	4313      	orrs	r3, r2
 800d118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	695b      	ldr	r3, [r3, #20]
 800d124:	4313      	orrs	r3, r2
 800d126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d132:	4313      	orrs	r3, r2
 800d134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	699b      	ldr	r3, [r3, #24]
 800d140:	041b      	lsls	r3, r3, #16
 800d142:	4313      	orrs	r3, r2
 800d144:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	4a16      	ldr	r2, [pc, #88]	; (800d1a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d004      	beq.n	800d15a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	4a14      	ldr	r2, [pc, #80]	; (800d1a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d115      	bne.n	800d186 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d164:	051b      	lsls	r3, r3, #20
 800d166:	4313      	orrs	r3, r2
 800d168:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	69db      	ldr	r3, [r3, #28]
 800d174:	4313      	orrs	r3, r2
 800d176:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	6a1b      	ldr	r3, [r3, #32]
 800d182:	4313      	orrs	r3, r2
 800d184:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	68fa      	ldr	r2, [r7, #12]
 800d18c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2200      	movs	r2, #0
 800d192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d196:	2300      	movs	r3, #0
}
 800d198:	4618      	mov	r0, r3
 800d19a:	3714      	adds	r7, #20
 800d19c:	46bd      	mov	sp, r7
 800d19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a2:	4770      	bx	lr
 800d1a4:	40010000 	.word	0x40010000
 800d1a8:	40010400 	.word	0x40010400

0800d1ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d1b4:	bf00      	nop
 800d1b6:	370c      	adds	r7, #12
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1be:	4770      	bx	lr

0800d1c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b083      	sub	sp, #12
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d1c8:	bf00      	nop
 800d1ca:	370c      	adds	r7, #12
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr

0800d1d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b083      	sub	sp, #12
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d1dc:	bf00      	nop
 800d1de:	370c      	adds	r7, #12
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr

0800d1e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d101      	bne.n	800d1fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	e042      	b.n	800d280 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d200:	2b00      	cmp	r3, #0
 800d202:	d106      	bne.n	800d212 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2200      	movs	r2, #0
 800d208:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f7f8 f9fd 	bl	800560c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2224      	movs	r2, #36	; 0x24
 800d216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f022 0201 	bic.w	r2, r2, #1
 800d228:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 fdee 	bl	800de0c <UART_SetConfig>
 800d230:	4603      	mov	r3, r0
 800d232:	2b01      	cmp	r3, #1
 800d234:	d101      	bne.n	800d23a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d236:	2301      	movs	r3, #1
 800d238:	e022      	b.n	800d280 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d002      	beq.n	800d248 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f001 fb42 	bl	800e8cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	685a      	ldr	r2, [r3, #4]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d256:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	689a      	ldr	r2, [r3, #8]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d266:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	681a      	ldr	r2, [r3, #0]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f042 0201 	orr.w	r2, r2, #1
 800d276:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f001 fbc9 	bl	800ea10 <UART_CheckIdleState>
 800d27e:	4603      	mov	r3, r0
}
 800d280:	4618      	mov	r0, r3
 800d282:	3708      	adds	r7, #8
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b08a      	sub	sp, #40	; 0x28
 800d28c:	af02      	add	r7, sp, #8
 800d28e:	60f8      	str	r0, [r7, #12]
 800d290:	60b9      	str	r1, [r7, #8]
 800d292:	603b      	str	r3, [r7, #0]
 800d294:	4613      	mov	r3, r2
 800d296:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d29e:	2b20      	cmp	r3, #32
 800d2a0:	f040 8083 	bne.w	800d3aa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d002      	beq.n	800d2b0 <HAL_UART_Transmit+0x28>
 800d2aa:	88fb      	ldrh	r3, [r7, #6]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d101      	bne.n	800d2b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e07b      	b.n	800d3ac <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d2ba:	2b01      	cmp	r3, #1
 800d2bc:	d101      	bne.n	800d2c2 <HAL_UART_Transmit+0x3a>
 800d2be:	2302      	movs	r3, #2
 800d2c0:	e074      	b.n	800d3ac <HAL_UART_Transmit+0x124>
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2201      	movs	r2, #1
 800d2c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2221      	movs	r2, #33	; 0x21
 800d2d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d2da:	f7f8 fc7d 	bl	8005bd8 <HAL_GetTick>
 800d2de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	88fa      	ldrh	r2, [r7, #6]
 800d2e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	88fa      	ldrh	r2, [r7, #6]
 800d2ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	689b      	ldr	r3, [r3, #8]
 800d2f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2f8:	d108      	bne.n	800d30c <HAL_UART_Transmit+0x84>
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	691b      	ldr	r3, [r3, #16]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d104      	bne.n	800d30c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d302:	2300      	movs	r3, #0
 800d304:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	61bb      	str	r3, [r7, #24]
 800d30a:	e003      	b.n	800d314 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d310:	2300      	movs	r3, #0
 800d312:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	2200      	movs	r2, #0
 800d318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d31c:	e02c      	b.n	800d378 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	9300      	str	r3, [sp, #0]
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	2200      	movs	r2, #0
 800d326:	2180      	movs	r1, #128	; 0x80
 800d328:	68f8      	ldr	r0, [r7, #12]
 800d32a:	f001 fbbc 	bl	800eaa6 <UART_WaitOnFlagUntilTimeout>
 800d32e:	4603      	mov	r3, r0
 800d330:	2b00      	cmp	r3, #0
 800d332:	d001      	beq.n	800d338 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d334:	2303      	movs	r3, #3
 800d336:	e039      	b.n	800d3ac <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d338:	69fb      	ldr	r3, [r7, #28]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d10b      	bne.n	800d356 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d33e:	69bb      	ldr	r3, [r7, #24]
 800d340:	881b      	ldrh	r3, [r3, #0]
 800d342:	461a      	mov	r2, r3
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d34c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d34e:	69bb      	ldr	r3, [r7, #24]
 800d350:	3302      	adds	r3, #2
 800d352:	61bb      	str	r3, [r7, #24]
 800d354:	e007      	b.n	800d366 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d356:	69fb      	ldr	r3, [r7, #28]
 800d358:	781a      	ldrb	r2, [r3, #0]
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d360:	69fb      	ldr	r3, [r7, #28]
 800d362:	3301      	adds	r3, #1
 800d364:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d36c:	b29b      	uxth	r3, r3
 800d36e:	3b01      	subs	r3, #1
 800d370:	b29a      	uxth	r2, r3
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d37e:	b29b      	uxth	r3, r3
 800d380:	2b00      	cmp	r3, #0
 800d382:	d1cc      	bne.n	800d31e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	9300      	str	r3, [sp, #0]
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	2200      	movs	r2, #0
 800d38c:	2140      	movs	r1, #64	; 0x40
 800d38e:	68f8      	ldr	r0, [r7, #12]
 800d390:	f001 fb89 	bl	800eaa6 <UART_WaitOnFlagUntilTimeout>
 800d394:	4603      	mov	r3, r0
 800d396:	2b00      	cmp	r3, #0
 800d398:	d001      	beq.n	800d39e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d39a:	2303      	movs	r3, #3
 800d39c:	e006      	b.n	800d3ac <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2220      	movs	r2, #32
 800d3a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	e000      	b.n	800d3ac <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d3aa:	2302      	movs	r3, #2
  }
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3720      	adds	r7, #32
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b08a      	sub	sp, #40	; 0x28
 800d3b8:	af02      	add	r7, sp, #8
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	603b      	str	r3, [r7, #0]
 800d3c0:	4613      	mov	r3, r2
 800d3c2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3ca:	2b20      	cmp	r3, #32
 800d3cc:	f040 80c0 	bne.w	800d550 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d002      	beq.n	800d3dc <HAL_UART_Receive+0x28>
 800d3d6:	88fb      	ldrh	r3, [r7, #6]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d101      	bne.n	800d3e0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	e0b8      	b.n	800d552 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d3e6:	2b01      	cmp	r3, #1
 800d3e8:	d101      	bne.n	800d3ee <HAL_UART_Receive+0x3a>
 800d3ea:	2302      	movs	r3, #2
 800d3ec:	e0b1      	b.n	800d552 <HAL_UART_Receive+0x19e>
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2222      	movs	r2, #34	; 0x22
 800d402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2200      	movs	r2, #0
 800d40a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d40c:	f7f8 fbe4 	bl	8005bd8 <HAL_GetTick>
 800d410:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	88fa      	ldrh	r2, [r7, #6]
 800d416:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	88fa      	ldrh	r2, [r7, #6]
 800d41e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	689b      	ldr	r3, [r3, #8]
 800d426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d42a:	d10e      	bne.n	800d44a <HAL_UART_Receive+0x96>
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	691b      	ldr	r3, [r3, #16]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d105      	bne.n	800d440 <HAL_UART_Receive+0x8c>
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d43a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d43e:	e02d      	b.n	800d49c <HAL_UART_Receive+0xe8>
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	22ff      	movs	r2, #255	; 0xff
 800d444:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d448:	e028      	b.n	800d49c <HAL_UART_Receive+0xe8>
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	689b      	ldr	r3, [r3, #8]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d10d      	bne.n	800d46e <HAL_UART_Receive+0xba>
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	691b      	ldr	r3, [r3, #16]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d104      	bne.n	800d464 <HAL_UART_Receive+0xb0>
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	22ff      	movs	r2, #255	; 0xff
 800d45e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d462:	e01b      	b.n	800d49c <HAL_UART_Receive+0xe8>
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	227f      	movs	r2, #127	; 0x7f
 800d468:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d46c:	e016      	b.n	800d49c <HAL_UART_Receive+0xe8>
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	689b      	ldr	r3, [r3, #8]
 800d472:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d476:	d10d      	bne.n	800d494 <HAL_UART_Receive+0xe0>
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	691b      	ldr	r3, [r3, #16]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d104      	bne.n	800d48a <HAL_UART_Receive+0xd6>
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	227f      	movs	r2, #127	; 0x7f
 800d484:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d488:	e008      	b.n	800d49c <HAL_UART_Receive+0xe8>
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	223f      	movs	r2, #63	; 0x3f
 800d48e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d492:	e003      	b.n	800d49c <HAL_UART_Receive+0xe8>
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	2200      	movs	r2, #0
 800d498:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d4a2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	689b      	ldr	r3, [r3, #8]
 800d4a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4ac:	d108      	bne.n	800d4c0 <HAL_UART_Receive+0x10c>
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	691b      	ldr	r3, [r3, #16]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d104      	bne.n	800d4c0 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	61bb      	str	r3, [r7, #24]
 800d4be:	e003      	b.n	800d4c8 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d4d0:	e032      	b.n	800d538 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	9300      	str	r3, [sp, #0]
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	2120      	movs	r1, #32
 800d4dc:	68f8      	ldr	r0, [r7, #12]
 800d4de:	f001 fae2 	bl	800eaa6 <UART_WaitOnFlagUntilTimeout>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d001      	beq.n	800d4ec <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800d4e8:	2303      	movs	r3, #3
 800d4ea:	e032      	b.n	800d552 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d10c      	bne.n	800d50c <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4f8:	b29a      	uxth	r2, r3
 800d4fa:	8a7b      	ldrh	r3, [r7, #18]
 800d4fc:	4013      	ands	r3, r2
 800d4fe:	b29a      	uxth	r2, r3
 800d500:	69bb      	ldr	r3, [r7, #24]
 800d502:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d504:	69bb      	ldr	r3, [r7, #24]
 800d506:	3302      	adds	r3, #2
 800d508:	61bb      	str	r3, [r7, #24]
 800d50a:	e00c      	b.n	800d526 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d512:	b2da      	uxtb	r2, r3
 800d514:	8a7b      	ldrh	r3, [r7, #18]
 800d516:	b2db      	uxtb	r3, r3
 800d518:	4013      	ands	r3, r2
 800d51a:	b2da      	uxtb	r2, r3
 800d51c:	69fb      	ldr	r3, [r7, #28]
 800d51e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d520:	69fb      	ldr	r3, [r7, #28]
 800d522:	3301      	adds	r3, #1
 800d524:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	3b01      	subs	r3, #1
 800d530:	b29a      	uxth	r2, r3
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d53e:	b29b      	uxth	r3, r3
 800d540:	2b00      	cmp	r3, #0
 800d542:	d1c6      	bne.n	800d4d2 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2220      	movs	r2, #32
 800d548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d54c:	2300      	movs	r3, #0
 800d54e:	e000      	b.n	800d552 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800d550:	2302      	movs	r3, #2
  }
}
 800d552:	4618      	mov	r0, r3
 800d554:	3720      	adds	r7, #32
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
	...

0800d55c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b08a      	sub	sp, #40	; 0x28
 800d560:	af00      	add	r7, sp, #0
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	4613      	mov	r3, r2
 800d568:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d570:	2b20      	cmp	r3, #32
 800d572:	d17a      	bne.n	800d66a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d002      	beq.n	800d580 <HAL_UART_Transmit_DMA+0x24>
 800d57a:	88fb      	ldrh	r3, [r7, #6]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d101      	bne.n	800d584 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800d580:	2301      	movs	r3, #1
 800d582:	e073      	b.n	800d66c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d58a:	2b01      	cmp	r3, #1
 800d58c:	d101      	bne.n	800d592 <HAL_UART_Transmit_DMA+0x36>
 800d58e:	2302      	movs	r3, #2
 800d590:	e06c      	b.n	800d66c <HAL_UART_Transmit_DMA+0x110>
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2201      	movs	r2, #1
 800d596:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	68ba      	ldr	r2, [r7, #8]
 800d59e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	88fa      	ldrh	r2, [r7, #6]
 800d5a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	88fa      	ldrh	r2, [r7, #6]
 800d5ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2221      	movs	r2, #33	; 0x21
 800d5bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d02c      	beq.n	800d622 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5cc:	4a29      	ldr	r2, [pc, #164]	; (800d674 <HAL_UART_Transmit_DMA+0x118>)
 800d5ce:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5d4:	4a28      	ldr	r2, [pc, #160]	; (800d678 <HAL_UART_Transmit_DMA+0x11c>)
 800d5d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5dc:	4a27      	ldr	r2, [pc, #156]	; (800d67c <HAL_UART_Transmit_DMA+0x120>)
 800d5de:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	3328      	adds	r3, #40	; 0x28
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	88fb      	ldrh	r3, [r7, #6]
 800d5fc:	f7f9 f99e 	bl	800693c <HAL_DMA_Start_IT>
 800d600:	4603      	mov	r3, r0
 800d602:	2b00      	cmp	r3, #0
 800d604:	d00d      	beq.n	800d622 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2210      	movs	r2, #16
 800d60a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2200      	movs	r2, #0
 800d612:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2220      	movs	r2, #32
 800d61a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800d61e:	2301      	movs	r3, #1
 800d620:	e024      	b.n	800d66c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	2240      	movs	r2, #64	; 0x40
 800d628:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2200      	movs	r2, #0
 800d62e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	3308      	adds	r3, #8
 800d638:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	e853 3f00 	ldrex	r3, [r3]
 800d640:	613b      	str	r3, [r7, #16]
   return(result);
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d648:	627b      	str	r3, [r7, #36]	; 0x24
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	3308      	adds	r3, #8
 800d650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d652:	623a      	str	r2, [r7, #32]
 800d654:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d656:	69f9      	ldr	r1, [r7, #28]
 800d658:	6a3a      	ldr	r2, [r7, #32]
 800d65a:	e841 2300 	strex	r3, r2, [r1]
 800d65e:	61bb      	str	r3, [r7, #24]
   return(result);
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d1e5      	bne.n	800d632 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800d666:	2300      	movs	r3, #0
 800d668:	e000      	b.n	800d66c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800d66a:	2302      	movs	r3, #2
  }
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3728      	adds	r7, #40	; 0x28
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}
 800d674:	0800eed9 	.word	0x0800eed9
 800d678:	0800ef6f 	.word	0x0800ef6f
 800d67c:	0800f0e5 	.word	0x0800f0e5

0800d680 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b0ba      	sub	sp, #232	; 0xe8
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	69db      	ldr	r3, [r3, #28]
 800d68e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	689b      	ldr	r3, [r3, #8]
 800d6a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d6a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d6aa:	f640 030f 	movw	r3, #2063	; 0x80f
 800d6ae:	4013      	ands	r3, r2
 800d6b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d6b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d11b      	bne.n	800d6f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d6bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6c0:	f003 0320 	and.w	r3, r3, #32
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d015      	beq.n	800d6f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d6c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6cc:	f003 0320 	and.w	r3, r3, #32
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d105      	bne.n	800d6e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d6d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d6d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d009      	beq.n	800d6f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	f000 835a 	beq.w	800dd9e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	4798      	blx	r3
      }
      return;
 800d6f2:	e354      	b.n	800dd9e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d6f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	f000 811f 	beq.w	800d93c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d6fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d702:	4b8b      	ldr	r3, [pc, #556]	; (800d930 <HAL_UART_IRQHandler+0x2b0>)
 800d704:	4013      	ands	r3, r2
 800d706:	2b00      	cmp	r3, #0
 800d708:	d106      	bne.n	800d718 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d70a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d70e:	4b89      	ldr	r3, [pc, #548]	; (800d934 <HAL_UART_IRQHandler+0x2b4>)
 800d710:	4013      	ands	r3, r2
 800d712:	2b00      	cmp	r3, #0
 800d714:	f000 8112 	beq.w	800d93c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d71c:	f003 0301 	and.w	r3, r3, #1
 800d720:	2b00      	cmp	r3, #0
 800d722:	d011      	beq.n	800d748 <HAL_UART_IRQHandler+0xc8>
 800d724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d00b      	beq.n	800d748 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	2201      	movs	r2, #1
 800d736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d73e:	f043 0201 	orr.w	r2, r3, #1
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d74c:	f003 0302 	and.w	r3, r3, #2
 800d750:	2b00      	cmp	r3, #0
 800d752:	d011      	beq.n	800d778 <HAL_UART_IRQHandler+0xf8>
 800d754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d758:	f003 0301 	and.w	r3, r3, #1
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d00b      	beq.n	800d778 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	2202      	movs	r2, #2
 800d766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d76e:	f043 0204 	orr.w	r2, r3, #4
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d77c:	f003 0304 	and.w	r3, r3, #4
 800d780:	2b00      	cmp	r3, #0
 800d782:	d011      	beq.n	800d7a8 <HAL_UART_IRQHandler+0x128>
 800d784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d788:	f003 0301 	and.w	r3, r3, #1
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d00b      	beq.n	800d7a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	2204      	movs	r2, #4
 800d796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d79e:	f043 0202 	orr.w	r2, r3, #2
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d7a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7ac:	f003 0308 	and.w	r3, r3, #8
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d017      	beq.n	800d7e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7b8:	f003 0320 	and.w	r3, r3, #32
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d105      	bne.n	800d7cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d7c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d7c4:	4b5a      	ldr	r3, [pc, #360]	; (800d930 <HAL_UART_IRQHandler+0x2b0>)
 800d7c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d00b      	beq.n	800d7e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	2208      	movs	r2, #8
 800d7d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7da:	f043 0208 	orr.w	r2, r3, #8
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d7e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d012      	beq.n	800d816 <HAL_UART_IRQHandler+0x196>
 800d7f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00c      	beq.n	800d816 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d804:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d80c:	f043 0220 	orr.w	r2, r3, #32
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	f000 82c0 	beq.w	800dda2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d826:	f003 0320 	and.w	r3, r3, #32
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d013      	beq.n	800d856 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d82e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d832:	f003 0320 	and.w	r3, r3, #32
 800d836:	2b00      	cmp	r3, #0
 800d838:	d105      	bne.n	800d846 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d83a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d83e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d842:	2b00      	cmp	r3, #0
 800d844:	d007      	beq.n	800d856 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d003      	beq.n	800d856 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d85c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	689b      	ldr	r3, [r3, #8]
 800d866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d86a:	2b40      	cmp	r3, #64	; 0x40
 800d86c:	d005      	beq.n	800d87a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d86e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d872:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d876:	2b00      	cmp	r3, #0
 800d878:	d04f      	beq.n	800d91a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f001 fac6 	bl	800ee0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	689b      	ldr	r3, [r3, #8]
 800d886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d88a:	2b40      	cmp	r3, #64	; 0x40
 800d88c:	d141      	bne.n	800d912 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	3308      	adds	r3, #8
 800d894:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d898:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d89c:	e853 3f00 	ldrex	r3, [r3]
 800d8a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d8a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d8a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	3308      	adds	r3, #8
 800d8b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d8ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d8be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d8c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d8ca:	e841 2300 	strex	r3, r2, [r1]
 800d8ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d8d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d1d9      	bne.n	800d88e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d013      	beq.n	800d90a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8e6:	4a14      	ldr	r2, [pc, #80]	; (800d938 <HAL_UART_IRQHandler+0x2b8>)
 800d8e8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7f9 fdac 	bl	800744c <HAL_DMA_Abort_IT>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d017      	beq.n	800d92a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d900:	687a      	ldr	r2, [r7, #4]
 800d902:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d904:	4610      	mov	r0, r2
 800d906:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d908:	e00f      	b.n	800d92a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 fa74 	bl	800ddf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d910:	e00b      	b.n	800d92a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f000 fa70 	bl	800ddf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d918:	e007      	b.n	800d92a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f000 fa6c 	bl	800ddf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2200      	movs	r2, #0
 800d924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d928:	e23b      	b.n	800dda2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d92a:	bf00      	nop
    return;
 800d92c:	e239      	b.n	800dda2 <HAL_UART_IRQHandler+0x722>
 800d92e:	bf00      	nop
 800d930:	10000001 	.word	0x10000001
 800d934:	04000120 	.word	0x04000120
 800d938:	0800f165 	.word	0x0800f165

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d940:	2b01      	cmp	r3, #1
 800d942:	f040 81ce 	bne.w	800dce2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d94a:	f003 0310 	and.w	r3, r3, #16
 800d94e:	2b00      	cmp	r3, #0
 800d950:	f000 81c7 	beq.w	800dce2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d958:	f003 0310 	and.w	r3, r3, #16
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	f000 81c0 	beq.w	800dce2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	2210      	movs	r2, #16
 800d968:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	689b      	ldr	r3, [r3, #8]
 800d970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d974:	2b40      	cmp	r3, #64	; 0x40
 800d976:	f040 813b 	bne.w	800dbf0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4a8b      	ldr	r2, [pc, #556]	; (800dbb0 <HAL_UART_IRQHandler+0x530>)
 800d982:	4293      	cmp	r3, r2
 800d984:	d059      	beq.n	800da3a <HAL_UART_IRQHandler+0x3ba>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	4a89      	ldr	r2, [pc, #548]	; (800dbb4 <HAL_UART_IRQHandler+0x534>)
 800d98e:	4293      	cmp	r3, r2
 800d990:	d053      	beq.n	800da3a <HAL_UART_IRQHandler+0x3ba>
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	4a87      	ldr	r2, [pc, #540]	; (800dbb8 <HAL_UART_IRQHandler+0x538>)
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d04d      	beq.n	800da3a <HAL_UART_IRQHandler+0x3ba>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4a85      	ldr	r2, [pc, #532]	; (800dbbc <HAL_UART_IRQHandler+0x53c>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d047      	beq.n	800da3a <HAL_UART_IRQHandler+0x3ba>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	4a83      	ldr	r2, [pc, #524]	; (800dbc0 <HAL_UART_IRQHandler+0x540>)
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d041      	beq.n	800da3a <HAL_UART_IRQHandler+0x3ba>
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4a81      	ldr	r2, [pc, #516]	; (800dbc4 <HAL_UART_IRQHandler+0x544>)
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d03b      	beq.n	800da3a <HAL_UART_IRQHandler+0x3ba>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4a7f      	ldr	r2, [pc, #508]	; (800dbc8 <HAL_UART_IRQHandler+0x548>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d035      	beq.n	800da3a <HAL_UART_IRQHandler+0x3ba>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4a7d      	ldr	r2, [pc, #500]	; (800dbcc <HAL_UART_IRQHandler+0x54c>)
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d02f      	beq.n	800da3a <HAL_UART_IRQHandler+0x3ba>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	4a7b      	ldr	r2, [pc, #492]	; (800dbd0 <HAL_UART_IRQHandler+0x550>)
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	d029      	beq.n	800da3a <HAL_UART_IRQHandler+0x3ba>
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a79      	ldr	r2, [pc, #484]	; (800dbd4 <HAL_UART_IRQHandler+0x554>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d023      	beq.n	800da3a <HAL_UART_IRQHandler+0x3ba>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	4a77      	ldr	r2, [pc, #476]	; (800dbd8 <HAL_UART_IRQHandler+0x558>)
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	d01d      	beq.n	800da3a <HAL_UART_IRQHandler+0x3ba>
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4a75      	ldr	r2, [pc, #468]	; (800dbdc <HAL_UART_IRQHandler+0x55c>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d017      	beq.n	800da3a <HAL_UART_IRQHandler+0x3ba>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4a73      	ldr	r2, [pc, #460]	; (800dbe0 <HAL_UART_IRQHandler+0x560>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d011      	beq.n	800da3a <HAL_UART_IRQHandler+0x3ba>
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4a71      	ldr	r2, [pc, #452]	; (800dbe4 <HAL_UART_IRQHandler+0x564>)
 800da1e:	4293      	cmp	r3, r2
 800da20:	d00b      	beq.n	800da3a <HAL_UART_IRQHandler+0x3ba>
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4a6f      	ldr	r2, [pc, #444]	; (800dbe8 <HAL_UART_IRQHandler+0x568>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d005      	beq.n	800da3a <HAL_UART_IRQHandler+0x3ba>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4a6d      	ldr	r2, [pc, #436]	; (800dbec <HAL_UART_IRQHandler+0x56c>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d105      	bne.n	800da46 <HAL_UART_IRQHandler+0x3c6>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	685b      	ldr	r3, [r3, #4]
 800da42:	b29b      	uxth	r3, r3
 800da44:	e004      	b.n	800da50 <HAL_UART_IRQHandler+0x3d0>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	b29b      	uxth	r3, r3
 800da50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800da54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800da58:	2b00      	cmp	r3, #0
 800da5a:	f000 81a4 	beq.w	800dda6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800da68:	429a      	cmp	r2, r3
 800da6a:	f080 819c 	bcs.w	800dda6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800da74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da7c:	69db      	ldr	r3, [r3, #28]
 800da7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da82:	f000 8086 	beq.w	800db92 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800da92:	e853 3f00 	ldrex	r3, [r3]
 800da96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800da9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800da9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800daa2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	461a      	mov	r2, r3
 800daac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dab0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dab4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dab8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dabc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dac0:	e841 2300 	strex	r3, r2, [r1]
 800dac4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d1da      	bne.n	800da86 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	3308      	adds	r3, #8
 800dad6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dad8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dada:	e853 3f00 	ldrex	r3, [r3]
 800dade:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dae0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dae2:	f023 0301 	bic.w	r3, r3, #1
 800dae6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	3308      	adds	r3, #8
 800daf0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800daf4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800daf8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dafa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dafc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800db00:	e841 2300 	strex	r3, r2, [r1]
 800db04:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800db06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d1e1      	bne.n	800dad0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	3308      	adds	r3, #8
 800db12:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db16:	e853 3f00 	ldrex	r3, [r3]
 800db1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800db1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	3308      	adds	r3, #8
 800db2c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800db30:	66fa      	str	r2, [r7, #108]	; 0x6c
 800db32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800db36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800db38:	e841 2300 	strex	r3, r2, [r1]
 800db3c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800db3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db40:	2b00      	cmp	r3, #0
 800db42:	d1e3      	bne.n	800db0c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2220      	movs	r2, #32
 800db48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2200      	movs	r2, #0
 800db50:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db5a:	e853 3f00 	ldrex	r3, [r3]
 800db5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800db60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db62:	f023 0310 	bic.w	r3, r3, #16
 800db66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	461a      	mov	r2, r3
 800db70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800db74:	65bb      	str	r3, [r7, #88]	; 0x58
 800db76:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800db7c:	e841 2300 	strex	r3, r2, [r1]
 800db80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800db82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db84:	2b00      	cmp	r3, #0
 800db86:	d1e4      	bne.n	800db52 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db8c:	4618      	mov	r0, r3
 800db8e:	f7f9 f93f 	bl	8006e10 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	1ad3      	subs	r3, r2, r3
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	4619      	mov	r1, r3
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f7f4 fdd0 	bl	800274c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dbac:	e0fb      	b.n	800dda6 <HAL_UART_IRQHandler+0x726>
 800dbae:	bf00      	nop
 800dbb0:	40020010 	.word	0x40020010
 800dbb4:	40020028 	.word	0x40020028
 800dbb8:	40020040 	.word	0x40020040
 800dbbc:	40020058 	.word	0x40020058
 800dbc0:	40020070 	.word	0x40020070
 800dbc4:	40020088 	.word	0x40020088
 800dbc8:	400200a0 	.word	0x400200a0
 800dbcc:	400200b8 	.word	0x400200b8
 800dbd0:	40020410 	.word	0x40020410
 800dbd4:	40020428 	.word	0x40020428
 800dbd8:	40020440 	.word	0x40020440
 800dbdc:	40020458 	.word	0x40020458
 800dbe0:	40020470 	.word	0x40020470
 800dbe4:	40020488 	.word	0x40020488
 800dbe8:	400204a0 	.word	0x400204a0
 800dbec:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dbfc:	b29b      	uxth	r3, r3
 800dbfe:	1ad3      	subs	r3, r2, r3
 800dc00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	f000 80cc 	beq.w	800ddaa <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800dc12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	f000 80c7 	beq.w	800ddaa <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc24:	e853 3f00 	ldrex	r3, [r3]
 800dc28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dc2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dc30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	461a      	mov	r2, r3
 800dc3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dc3e:	647b      	str	r3, [r7, #68]	; 0x44
 800dc40:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dc44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc46:	e841 2300 	strex	r3, r2, [r1]
 800dc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dc4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d1e4      	bne.n	800dc1c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	3308      	adds	r3, #8
 800dc58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5c:	e853 3f00 	ldrex	r3, [r3]
 800dc60:	623b      	str	r3, [r7, #32]
   return(result);
 800dc62:	6a3a      	ldr	r2, [r7, #32]
 800dc64:	4b54      	ldr	r3, [pc, #336]	; (800ddb8 <HAL_UART_IRQHandler+0x738>)
 800dc66:	4013      	ands	r3, r2
 800dc68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	3308      	adds	r3, #8
 800dc72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dc76:	633a      	str	r2, [r7, #48]	; 0x30
 800dc78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc7e:	e841 2300 	strex	r3, r2, [r1]
 800dc82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d1e3      	bne.n	800dc52 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2220      	movs	r2, #32
 800dc8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2200      	movs	r2, #0
 800dc96:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	e853 3f00 	ldrex	r3, [r3]
 800dcaa:	60fb      	str	r3, [r7, #12]
   return(result);
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f023 0310 	bic.w	r3, r3, #16
 800dcb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	461a      	mov	r2, r3
 800dcbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dcc0:	61fb      	str	r3, [r7, #28]
 800dcc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcc4:	69b9      	ldr	r1, [r7, #24]
 800dcc6:	69fa      	ldr	r2, [r7, #28]
 800dcc8:	e841 2300 	strex	r3, r2, [r1]
 800dccc:	617b      	str	r3, [r7, #20]
   return(result);
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d1e4      	bne.n	800dc9e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dcd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dcd8:	4619      	mov	r1, r3
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f7f4 fd36 	bl	800274c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dce0:	e063      	b.n	800ddaa <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d00e      	beq.n	800dd0c <HAL_UART_IRQHandler+0x68c>
 800dcee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dcf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d008      	beq.n	800dd0c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dd02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f001 fa6e 	bl	800f1e6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dd0a:	e051      	b.n	800ddb0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dd0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d014      	beq.n	800dd42 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dd18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d105      	bne.n	800dd30 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dd24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d008      	beq.n	800dd42 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d03a      	beq.n	800ddae <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	4798      	blx	r3
    }
    return;
 800dd40:	e035      	b.n	800ddae <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dd42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d009      	beq.n	800dd62 <HAL_UART_IRQHandler+0x6e2>
 800dd4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d003      	beq.n	800dd62 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f001 fa18 	bl	800f190 <UART_EndTransmit_IT>
    return;
 800dd60:	e026      	b.n	800ddb0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dd62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d009      	beq.n	800dd82 <HAL_UART_IRQHandler+0x702>
 800dd6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd72:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d003      	beq.n	800dd82 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f001 fa47 	bl	800f20e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dd80:	e016      	b.n	800ddb0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dd82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d010      	beq.n	800ddb0 <HAL_UART_IRQHandler+0x730>
 800dd8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	da0c      	bge.n	800ddb0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f001 fa2f 	bl	800f1fa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dd9c:	e008      	b.n	800ddb0 <HAL_UART_IRQHandler+0x730>
      return;
 800dd9e:	bf00      	nop
 800dda0:	e006      	b.n	800ddb0 <HAL_UART_IRQHandler+0x730>
    return;
 800dda2:	bf00      	nop
 800dda4:	e004      	b.n	800ddb0 <HAL_UART_IRQHandler+0x730>
      return;
 800dda6:	bf00      	nop
 800dda8:	e002      	b.n	800ddb0 <HAL_UART_IRQHandler+0x730>
      return;
 800ddaa:	bf00      	nop
 800ddac:	e000      	b.n	800ddb0 <HAL_UART_IRQHandler+0x730>
    return;
 800ddae:	bf00      	nop
  }
}
 800ddb0:	37e8      	adds	r7, #232	; 0xe8
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	effffffe 	.word	0xeffffffe

0800ddbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b083      	sub	sp, #12
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ddc4:	bf00      	nop
 800ddc6:	370c      	adds	r7, #12
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddce:	4770      	bx	lr

0800ddd0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ddd8:	bf00      	nop
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr

0800dde4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b083      	sub	sp, #12
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ddec:	bf00      	nop
 800ddee:	370c      	adds	r7, #12
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr

0800ddf8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b083      	sub	sp, #12
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800de00:	bf00      	nop
 800de02:	370c      	adds	r7, #12
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr

0800de0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800de0c:	b5b0      	push	{r4, r5, r7, lr}
 800de0e:	b08e      	sub	sp, #56	; 0x38
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800de14:	2300      	movs	r3, #0
 800de16:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	689a      	ldr	r2, [r3, #8]
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	691b      	ldr	r3, [r3, #16]
 800de22:	431a      	orrs	r2, r3
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	695b      	ldr	r3, [r3, #20]
 800de28:	431a      	orrs	r2, r3
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	69db      	ldr	r3, [r3, #28]
 800de2e:	4313      	orrs	r3, r2
 800de30:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	681a      	ldr	r2, [r3, #0]
 800de38:	4bbf      	ldr	r3, [pc, #764]	; (800e138 <UART_SetConfig+0x32c>)
 800de3a:	4013      	ands	r3, r2
 800de3c:	687a      	ldr	r2, [r7, #4]
 800de3e:	6812      	ldr	r2, [r2, #0]
 800de40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800de42:	430b      	orrs	r3, r1
 800de44:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	685b      	ldr	r3, [r3, #4]
 800de4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	68da      	ldr	r2, [r3, #12]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	430a      	orrs	r2, r1
 800de5a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	699b      	ldr	r3, [r3, #24]
 800de60:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	4ab5      	ldr	r2, [pc, #724]	; (800e13c <UART_SetConfig+0x330>)
 800de68:	4293      	cmp	r3, r2
 800de6a:	d004      	beq.n	800de76 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6a1b      	ldr	r3, [r3, #32]
 800de70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de72:	4313      	orrs	r3, r2
 800de74:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	689a      	ldr	r2, [r3, #8]
 800de7c:	4bb0      	ldr	r3, [pc, #704]	; (800e140 <UART_SetConfig+0x334>)
 800de7e:	4013      	ands	r3, r2
 800de80:	687a      	ldr	r2, [r7, #4]
 800de82:	6812      	ldr	r2, [r2, #0]
 800de84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800de86:	430b      	orrs	r3, r1
 800de88:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de90:	f023 010f 	bic.w	r1, r3, #15
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	430a      	orrs	r2, r1
 800de9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	4aa7      	ldr	r2, [pc, #668]	; (800e144 <UART_SetConfig+0x338>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d176      	bne.n	800df98 <UART_SetConfig+0x18c>
 800deaa:	4ba7      	ldr	r3, [pc, #668]	; (800e148 <UART_SetConfig+0x33c>)
 800deac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800deae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800deb2:	2b28      	cmp	r3, #40	; 0x28
 800deb4:	d86c      	bhi.n	800df90 <UART_SetConfig+0x184>
 800deb6:	a201      	add	r2, pc, #4	; (adr r2, 800debc <UART_SetConfig+0xb0>)
 800deb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800debc:	0800df61 	.word	0x0800df61
 800dec0:	0800df91 	.word	0x0800df91
 800dec4:	0800df91 	.word	0x0800df91
 800dec8:	0800df91 	.word	0x0800df91
 800decc:	0800df91 	.word	0x0800df91
 800ded0:	0800df91 	.word	0x0800df91
 800ded4:	0800df91 	.word	0x0800df91
 800ded8:	0800df91 	.word	0x0800df91
 800dedc:	0800df69 	.word	0x0800df69
 800dee0:	0800df91 	.word	0x0800df91
 800dee4:	0800df91 	.word	0x0800df91
 800dee8:	0800df91 	.word	0x0800df91
 800deec:	0800df91 	.word	0x0800df91
 800def0:	0800df91 	.word	0x0800df91
 800def4:	0800df91 	.word	0x0800df91
 800def8:	0800df91 	.word	0x0800df91
 800defc:	0800df71 	.word	0x0800df71
 800df00:	0800df91 	.word	0x0800df91
 800df04:	0800df91 	.word	0x0800df91
 800df08:	0800df91 	.word	0x0800df91
 800df0c:	0800df91 	.word	0x0800df91
 800df10:	0800df91 	.word	0x0800df91
 800df14:	0800df91 	.word	0x0800df91
 800df18:	0800df91 	.word	0x0800df91
 800df1c:	0800df79 	.word	0x0800df79
 800df20:	0800df91 	.word	0x0800df91
 800df24:	0800df91 	.word	0x0800df91
 800df28:	0800df91 	.word	0x0800df91
 800df2c:	0800df91 	.word	0x0800df91
 800df30:	0800df91 	.word	0x0800df91
 800df34:	0800df91 	.word	0x0800df91
 800df38:	0800df91 	.word	0x0800df91
 800df3c:	0800df81 	.word	0x0800df81
 800df40:	0800df91 	.word	0x0800df91
 800df44:	0800df91 	.word	0x0800df91
 800df48:	0800df91 	.word	0x0800df91
 800df4c:	0800df91 	.word	0x0800df91
 800df50:	0800df91 	.word	0x0800df91
 800df54:	0800df91 	.word	0x0800df91
 800df58:	0800df91 	.word	0x0800df91
 800df5c:	0800df89 	.word	0x0800df89
 800df60:	2301      	movs	r3, #1
 800df62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df66:	e222      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800df68:	2304      	movs	r3, #4
 800df6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df6e:	e21e      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800df70:	2308      	movs	r3, #8
 800df72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df76:	e21a      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800df78:	2310      	movs	r3, #16
 800df7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df7e:	e216      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800df80:	2320      	movs	r3, #32
 800df82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df86:	e212      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800df88:	2340      	movs	r3, #64	; 0x40
 800df8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df8e:	e20e      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800df90:	2380      	movs	r3, #128	; 0x80
 800df92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df96:	e20a      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	4a6b      	ldr	r2, [pc, #428]	; (800e14c <UART_SetConfig+0x340>)
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d130      	bne.n	800e004 <UART_SetConfig+0x1f8>
 800dfa2:	4b69      	ldr	r3, [pc, #420]	; (800e148 <UART_SetConfig+0x33c>)
 800dfa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfa6:	f003 0307 	and.w	r3, r3, #7
 800dfaa:	2b05      	cmp	r3, #5
 800dfac:	d826      	bhi.n	800dffc <UART_SetConfig+0x1f0>
 800dfae:	a201      	add	r2, pc, #4	; (adr r2, 800dfb4 <UART_SetConfig+0x1a8>)
 800dfb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfb4:	0800dfcd 	.word	0x0800dfcd
 800dfb8:	0800dfd5 	.word	0x0800dfd5
 800dfbc:	0800dfdd 	.word	0x0800dfdd
 800dfc0:	0800dfe5 	.word	0x0800dfe5
 800dfc4:	0800dfed 	.word	0x0800dfed
 800dfc8:	0800dff5 	.word	0x0800dff5
 800dfcc:	2300      	movs	r3, #0
 800dfce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dfd2:	e1ec      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800dfd4:	2304      	movs	r3, #4
 800dfd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dfda:	e1e8      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800dfdc:	2308      	movs	r3, #8
 800dfde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dfe2:	e1e4      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800dfe4:	2310      	movs	r3, #16
 800dfe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dfea:	e1e0      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800dfec:	2320      	movs	r3, #32
 800dfee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dff2:	e1dc      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800dff4:	2340      	movs	r3, #64	; 0x40
 800dff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dffa:	e1d8      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800dffc:	2380      	movs	r3, #128	; 0x80
 800dffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e002:	e1d4      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	4a51      	ldr	r2, [pc, #324]	; (800e150 <UART_SetConfig+0x344>)
 800e00a:	4293      	cmp	r3, r2
 800e00c:	d130      	bne.n	800e070 <UART_SetConfig+0x264>
 800e00e:	4b4e      	ldr	r3, [pc, #312]	; (800e148 <UART_SetConfig+0x33c>)
 800e010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e012:	f003 0307 	and.w	r3, r3, #7
 800e016:	2b05      	cmp	r3, #5
 800e018:	d826      	bhi.n	800e068 <UART_SetConfig+0x25c>
 800e01a:	a201      	add	r2, pc, #4	; (adr r2, 800e020 <UART_SetConfig+0x214>)
 800e01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e020:	0800e039 	.word	0x0800e039
 800e024:	0800e041 	.word	0x0800e041
 800e028:	0800e049 	.word	0x0800e049
 800e02c:	0800e051 	.word	0x0800e051
 800e030:	0800e059 	.word	0x0800e059
 800e034:	0800e061 	.word	0x0800e061
 800e038:	2300      	movs	r3, #0
 800e03a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e03e:	e1b6      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e040:	2304      	movs	r3, #4
 800e042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e046:	e1b2      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e048:	2308      	movs	r3, #8
 800e04a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e04e:	e1ae      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e050:	2310      	movs	r3, #16
 800e052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e056:	e1aa      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e058:	2320      	movs	r3, #32
 800e05a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e05e:	e1a6      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e060:	2340      	movs	r3, #64	; 0x40
 800e062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e066:	e1a2      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e068:	2380      	movs	r3, #128	; 0x80
 800e06a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e06e:	e19e      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	4a37      	ldr	r2, [pc, #220]	; (800e154 <UART_SetConfig+0x348>)
 800e076:	4293      	cmp	r3, r2
 800e078:	d130      	bne.n	800e0dc <UART_SetConfig+0x2d0>
 800e07a:	4b33      	ldr	r3, [pc, #204]	; (800e148 <UART_SetConfig+0x33c>)
 800e07c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e07e:	f003 0307 	and.w	r3, r3, #7
 800e082:	2b05      	cmp	r3, #5
 800e084:	d826      	bhi.n	800e0d4 <UART_SetConfig+0x2c8>
 800e086:	a201      	add	r2, pc, #4	; (adr r2, 800e08c <UART_SetConfig+0x280>)
 800e088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e08c:	0800e0a5 	.word	0x0800e0a5
 800e090:	0800e0ad 	.word	0x0800e0ad
 800e094:	0800e0b5 	.word	0x0800e0b5
 800e098:	0800e0bd 	.word	0x0800e0bd
 800e09c:	0800e0c5 	.word	0x0800e0c5
 800e0a0:	0800e0cd 	.word	0x0800e0cd
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0aa:	e180      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e0ac:	2304      	movs	r3, #4
 800e0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0b2:	e17c      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e0b4:	2308      	movs	r3, #8
 800e0b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0ba:	e178      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e0bc:	2310      	movs	r3, #16
 800e0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0c2:	e174      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e0c4:	2320      	movs	r3, #32
 800e0c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0ca:	e170      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e0cc:	2340      	movs	r3, #64	; 0x40
 800e0ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0d2:	e16c      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e0d4:	2380      	movs	r3, #128	; 0x80
 800e0d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0da:	e168      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	4a1d      	ldr	r2, [pc, #116]	; (800e158 <UART_SetConfig+0x34c>)
 800e0e2:	4293      	cmp	r3, r2
 800e0e4:	d142      	bne.n	800e16c <UART_SetConfig+0x360>
 800e0e6:	4b18      	ldr	r3, [pc, #96]	; (800e148 <UART_SetConfig+0x33c>)
 800e0e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0ea:	f003 0307 	and.w	r3, r3, #7
 800e0ee:	2b05      	cmp	r3, #5
 800e0f0:	d838      	bhi.n	800e164 <UART_SetConfig+0x358>
 800e0f2:	a201      	add	r2, pc, #4	; (adr r2, 800e0f8 <UART_SetConfig+0x2ec>)
 800e0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0f8:	0800e111 	.word	0x0800e111
 800e0fc:	0800e119 	.word	0x0800e119
 800e100:	0800e121 	.word	0x0800e121
 800e104:	0800e129 	.word	0x0800e129
 800e108:	0800e131 	.word	0x0800e131
 800e10c:	0800e15d 	.word	0x0800e15d
 800e110:	2300      	movs	r3, #0
 800e112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e116:	e14a      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e118:	2304      	movs	r3, #4
 800e11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e11e:	e146      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e120:	2308      	movs	r3, #8
 800e122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e126:	e142      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e128:	2310      	movs	r3, #16
 800e12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e12e:	e13e      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e130:	2320      	movs	r3, #32
 800e132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e136:	e13a      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e138:	cfff69f3 	.word	0xcfff69f3
 800e13c:	58000c00 	.word	0x58000c00
 800e140:	11fff4ff 	.word	0x11fff4ff
 800e144:	40011000 	.word	0x40011000
 800e148:	58024400 	.word	0x58024400
 800e14c:	40004400 	.word	0x40004400
 800e150:	40004800 	.word	0x40004800
 800e154:	40004c00 	.word	0x40004c00
 800e158:	40005000 	.word	0x40005000
 800e15c:	2340      	movs	r3, #64	; 0x40
 800e15e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e162:	e124      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e164:	2380      	movs	r3, #128	; 0x80
 800e166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e16a:	e120      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	4acc      	ldr	r2, [pc, #816]	; (800e4a4 <UART_SetConfig+0x698>)
 800e172:	4293      	cmp	r3, r2
 800e174:	d176      	bne.n	800e264 <UART_SetConfig+0x458>
 800e176:	4bcc      	ldr	r3, [pc, #816]	; (800e4a8 <UART_SetConfig+0x69c>)
 800e178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e17a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e17e:	2b28      	cmp	r3, #40	; 0x28
 800e180:	d86c      	bhi.n	800e25c <UART_SetConfig+0x450>
 800e182:	a201      	add	r2, pc, #4	; (adr r2, 800e188 <UART_SetConfig+0x37c>)
 800e184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e188:	0800e22d 	.word	0x0800e22d
 800e18c:	0800e25d 	.word	0x0800e25d
 800e190:	0800e25d 	.word	0x0800e25d
 800e194:	0800e25d 	.word	0x0800e25d
 800e198:	0800e25d 	.word	0x0800e25d
 800e19c:	0800e25d 	.word	0x0800e25d
 800e1a0:	0800e25d 	.word	0x0800e25d
 800e1a4:	0800e25d 	.word	0x0800e25d
 800e1a8:	0800e235 	.word	0x0800e235
 800e1ac:	0800e25d 	.word	0x0800e25d
 800e1b0:	0800e25d 	.word	0x0800e25d
 800e1b4:	0800e25d 	.word	0x0800e25d
 800e1b8:	0800e25d 	.word	0x0800e25d
 800e1bc:	0800e25d 	.word	0x0800e25d
 800e1c0:	0800e25d 	.word	0x0800e25d
 800e1c4:	0800e25d 	.word	0x0800e25d
 800e1c8:	0800e23d 	.word	0x0800e23d
 800e1cc:	0800e25d 	.word	0x0800e25d
 800e1d0:	0800e25d 	.word	0x0800e25d
 800e1d4:	0800e25d 	.word	0x0800e25d
 800e1d8:	0800e25d 	.word	0x0800e25d
 800e1dc:	0800e25d 	.word	0x0800e25d
 800e1e0:	0800e25d 	.word	0x0800e25d
 800e1e4:	0800e25d 	.word	0x0800e25d
 800e1e8:	0800e245 	.word	0x0800e245
 800e1ec:	0800e25d 	.word	0x0800e25d
 800e1f0:	0800e25d 	.word	0x0800e25d
 800e1f4:	0800e25d 	.word	0x0800e25d
 800e1f8:	0800e25d 	.word	0x0800e25d
 800e1fc:	0800e25d 	.word	0x0800e25d
 800e200:	0800e25d 	.word	0x0800e25d
 800e204:	0800e25d 	.word	0x0800e25d
 800e208:	0800e24d 	.word	0x0800e24d
 800e20c:	0800e25d 	.word	0x0800e25d
 800e210:	0800e25d 	.word	0x0800e25d
 800e214:	0800e25d 	.word	0x0800e25d
 800e218:	0800e25d 	.word	0x0800e25d
 800e21c:	0800e25d 	.word	0x0800e25d
 800e220:	0800e25d 	.word	0x0800e25d
 800e224:	0800e25d 	.word	0x0800e25d
 800e228:	0800e255 	.word	0x0800e255
 800e22c:	2301      	movs	r3, #1
 800e22e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e232:	e0bc      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e234:	2304      	movs	r3, #4
 800e236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e23a:	e0b8      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e23c:	2308      	movs	r3, #8
 800e23e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e242:	e0b4      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e244:	2310      	movs	r3, #16
 800e246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e24a:	e0b0      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e24c:	2320      	movs	r3, #32
 800e24e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e252:	e0ac      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e254:	2340      	movs	r3, #64	; 0x40
 800e256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e25a:	e0a8      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e25c:	2380      	movs	r3, #128	; 0x80
 800e25e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e262:	e0a4      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4a90      	ldr	r2, [pc, #576]	; (800e4ac <UART_SetConfig+0x6a0>)
 800e26a:	4293      	cmp	r3, r2
 800e26c:	d130      	bne.n	800e2d0 <UART_SetConfig+0x4c4>
 800e26e:	4b8e      	ldr	r3, [pc, #568]	; (800e4a8 <UART_SetConfig+0x69c>)
 800e270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e272:	f003 0307 	and.w	r3, r3, #7
 800e276:	2b05      	cmp	r3, #5
 800e278:	d826      	bhi.n	800e2c8 <UART_SetConfig+0x4bc>
 800e27a:	a201      	add	r2, pc, #4	; (adr r2, 800e280 <UART_SetConfig+0x474>)
 800e27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e280:	0800e299 	.word	0x0800e299
 800e284:	0800e2a1 	.word	0x0800e2a1
 800e288:	0800e2a9 	.word	0x0800e2a9
 800e28c:	0800e2b1 	.word	0x0800e2b1
 800e290:	0800e2b9 	.word	0x0800e2b9
 800e294:	0800e2c1 	.word	0x0800e2c1
 800e298:	2300      	movs	r3, #0
 800e29a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e29e:	e086      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e2a0:	2304      	movs	r3, #4
 800e2a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2a6:	e082      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e2a8:	2308      	movs	r3, #8
 800e2aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2ae:	e07e      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e2b0:	2310      	movs	r3, #16
 800e2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2b6:	e07a      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e2b8:	2320      	movs	r3, #32
 800e2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2be:	e076      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e2c0:	2340      	movs	r3, #64	; 0x40
 800e2c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2c6:	e072      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e2c8:	2380      	movs	r3, #128	; 0x80
 800e2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2ce:	e06e      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	4a76      	ldr	r2, [pc, #472]	; (800e4b0 <UART_SetConfig+0x6a4>)
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d130      	bne.n	800e33c <UART_SetConfig+0x530>
 800e2da:	4b73      	ldr	r3, [pc, #460]	; (800e4a8 <UART_SetConfig+0x69c>)
 800e2dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2de:	f003 0307 	and.w	r3, r3, #7
 800e2e2:	2b05      	cmp	r3, #5
 800e2e4:	d826      	bhi.n	800e334 <UART_SetConfig+0x528>
 800e2e6:	a201      	add	r2, pc, #4	; (adr r2, 800e2ec <UART_SetConfig+0x4e0>)
 800e2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ec:	0800e305 	.word	0x0800e305
 800e2f0:	0800e30d 	.word	0x0800e30d
 800e2f4:	0800e315 	.word	0x0800e315
 800e2f8:	0800e31d 	.word	0x0800e31d
 800e2fc:	0800e325 	.word	0x0800e325
 800e300:	0800e32d 	.word	0x0800e32d
 800e304:	2300      	movs	r3, #0
 800e306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e30a:	e050      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e30c:	2304      	movs	r3, #4
 800e30e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e312:	e04c      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e314:	2308      	movs	r3, #8
 800e316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e31a:	e048      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e31c:	2310      	movs	r3, #16
 800e31e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e322:	e044      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e324:	2320      	movs	r3, #32
 800e326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e32a:	e040      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e32c:	2340      	movs	r3, #64	; 0x40
 800e32e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e332:	e03c      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e334:	2380      	movs	r3, #128	; 0x80
 800e336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e33a:	e038      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a5c      	ldr	r2, [pc, #368]	; (800e4b4 <UART_SetConfig+0x6a8>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d130      	bne.n	800e3a8 <UART_SetConfig+0x59c>
 800e346:	4b58      	ldr	r3, [pc, #352]	; (800e4a8 <UART_SetConfig+0x69c>)
 800e348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e34a:	f003 0307 	and.w	r3, r3, #7
 800e34e:	2b05      	cmp	r3, #5
 800e350:	d826      	bhi.n	800e3a0 <UART_SetConfig+0x594>
 800e352:	a201      	add	r2, pc, #4	; (adr r2, 800e358 <UART_SetConfig+0x54c>)
 800e354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e358:	0800e371 	.word	0x0800e371
 800e35c:	0800e379 	.word	0x0800e379
 800e360:	0800e381 	.word	0x0800e381
 800e364:	0800e389 	.word	0x0800e389
 800e368:	0800e391 	.word	0x0800e391
 800e36c:	0800e399 	.word	0x0800e399
 800e370:	2302      	movs	r3, #2
 800e372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e376:	e01a      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e378:	2304      	movs	r3, #4
 800e37a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e37e:	e016      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e380:	2308      	movs	r3, #8
 800e382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e386:	e012      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e388:	2310      	movs	r3, #16
 800e38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e38e:	e00e      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e390:	2320      	movs	r3, #32
 800e392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e396:	e00a      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e398:	2340      	movs	r3, #64	; 0x40
 800e39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e39e:	e006      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e3a0:	2380      	movs	r3, #128	; 0x80
 800e3a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3a6:	e002      	b.n	800e3ae <UART_SetConfig+0x5a2>
 800e3a8:	2380      	movs	r3, #128	; 0x80
 800e3aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	4a40      	ldr	r2, [pc, #256]	; (800e4b4 <UART_SetConfig+0x6a8>)
 800e3b4:	4293      	cmp	r3, r2
 800e3b6:	f040 80ef 	bne.w	800e598 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e3ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e3be:	2b20      	cmp	r3, #32
 800e3c0:	dc46      	bgt.n	800e450 <UART_SetConfig+0x644>
 800e3c2:	2b02      	cmp	r3, #2
 800e3c4:	f2c0 8081 	blt.w	800e4ca <UART_SetConfig+0x6be>
 800e3c8:	3b02      	subs	r3, #2
 800e3ca:	2b1e      	cmp	r3, #30
 800e3cc:	d87d      	bhi.n	800e4ca <UART_SetConfig+0x6be>
 800e3ce:	a201      	add	r2, pc, #4	; (adr r2, 800e3d4 <UART_SetConfig+0x5c8>)
 800e3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3d4:	0800e457 	.word	0x0800e457
 800e3d8:	0800e4cb 	.word	0x0800e4cb
 800e3dc:	0800e45f 	.word	0x0800e45f
 800e3e0:	0800e4cb 	.word	0x0800e4cb
 800e3e4:	0800e4cb 	.word	0x0800e4cb
 800e3e8:	0800e4cb 	.word	0x0800e4cb
 800e3ec:	0800e46f 	.word	0x0800e46f
 800e3f0:	0800e4cb 	.word	0x0800e4cb
 800e3f4:	0800e4cb 	.word	0x0800e4cb
 800e3f8:	0800e4cb 	.word	0x0800e4cb
 800e3fc:	0800e4cb 	.word	0x0800e4cb
 800e400:	0800e4cb 	.word	0x0800e4cb
 800e404:	0800e4cb 	.word	0x0800e4cb
 800e408:	0800e4cb 	.word	0x0800e4cb
 800e40c:	0800e47f 	.word	0x0800e47f
 800e410:	0800e4cb 	.word	0x0800e4cb
 800e414:	0800e4cb 	.word	0x0800e4cb
 800e418:	0800e4cb 	.word	0x0800e4cb
 800e41c:	0800e4cb 	.word	0x0800e4cb
 800e420:	0800e4cb 	.word	0x0800e4cb
 800e424:	0800e4cb 	.word	0x0800e4cb
 800e428:	0800e4cb 	.word	0x0800e4cb
 800e42c:	0800e4cb 	.word	0x0800e4cb
 800e430:	0800e4cb 	.word	0x0800e4cb
 800e434:	0800e4cb 	.word	0x0800e4cb
 800e438:	0800e4cb 	.word	0x0800e4cb
 800e43c:	0800e4cb 	.word	0x0800e4cb
 800e440:	0800e4cb 	.word	0x0800e4cb
 800e444:	0800e4cb 	.word	0x0800e4cb
 800e448:	0800e4cb 	.word	0x0800e4cb
 800e44c:	0800e4bd 	.word	0x0800e4bd
 800e450:	2b40      	cmp	r3, #64	; 0x40
 800e452:	d036      	beq.n	800e4c2 <UART_SetConfig+0x6b6>
 800e454:	e039      	b.n	800e4ca <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e456:	f7fc fe65 	bl	800b124 <HAL_RCCEx_GetD3PCLK1Freq>
 800e45a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e45c:	e03b      	b.n	800e4d6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e45e:	f107 0314 	add.w	r3, r7, #20
 800e462:	4618      	mov	r0, r3
 800e464:	f7fc fe74 	bl	800b150 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e468:	69bb      	ldr	r3, [r7, #24]
 800e46a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e46c:	e033      	b.n	800e4d6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e46e:	f107 0308 	add.w	r3, r7, #8
 800e472:	4618      	mov	r0, r3
 800e474:	f7fc ffc0 	bl	800b3f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e47c:	e02b      	b.n	800e4d6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e47e:	4b0a      	ldr	r3, [pc, #40]	; (800e4a8 <UART_SetConfig+0x69c>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f003 0320 	and.w	r3, r3, #32
 800e486:	2b00      	cmp	r3, #0
 800e488:	d009      	beq.n	800e49e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e48a:	4b07      	ldr	r3, [pc, #28]	; (800e4a8 <UART_SetConfig+0x69c>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	08db      	lsrs	r3, r3, #3
 800e490:	f003 0303 	and.w	r3, r3, #3
 800e494:	4a08      	ldr	r2, [pc, #32]	; (800e4b8 <UART_SetConfig+0x6ac>)
 800e496:	fa22 f303 	lsr.w	r3, r2, r3
 800e49a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e49c:	e01b      	b.n	800e4d6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800e49e:	4b06      	ldr	r3, [pc, #24]	; (800e4b8 <UART_SetConfig+0x6ac>)
 800e4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e4a2:	e018      	b.n	800e4d6 <UART_SetConfig+0x6ca>
 800e4a4:	40011400 	.word	0x40011400
 800e4a8:	58024400 	.word	0x58024400
 800e4ac:	40007800 	.word	0x40007800
 800e4b0:	40007c00 	.word	0x40007c00
 800e4b4:	58000c00 	.word	0x58000c00
 800e4b8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e4bc:	4bc4      	ldr	r3, [pc, #784]	; (800e7d0 <UART_SetConfig+0x9c4>)
 800e4be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e4c0:	e009      	b.n	800e4d6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e4c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e4c8:	e005      	b.n	800e4d6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e4d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	f000 81da 	beq.w	800e892 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4e2:	4abc      	ldr	r2, [pc, #752]	; (800e7d4 <UART_SetConfig+0x9c8>)
 800e4e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4e8:	461a      	mov	r2, r3
 800e4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800e4f0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	685a      	ldr	r2, [r3, #4]
 800e4f6:	4613      	mov	r3, r2
 800e4f8:	005b      	lsls	r3, r3, #1
 800e4fa:	4413      	add	r3, r2
 800e4fc:	6a3a      	ldr	r2, [r7, #32]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d305      	bcc.n	800e50e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	685b      	ldr	r3, [r3, #4]
 800e506:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e508:	6a3a      	ldr	r2, [r7, #32]
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d903      	bls.n	800e516 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800e50e:	2301      	movs	r3, #1
 800e510:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e514:	e1bd      	b.n	800e892 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e518:	4618      	mov	r0, r3
 800e51a:	f04f 0100 	mov.w	r1, #0
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e522:	4aac      	ldr	r2, [pc, #688]	; (800e7d4 <UART_SetConfig+0x9c8>)
 800e524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e528:	b29a      	uxth	r2, r3
 800e52a:	f04f 0300 	mov.w	r3, #0
 800e52e:	f7f1 ff2f 	bl	8000390 <__aeabi_uldivmod>
 800e532:	4602      	mov	r2, r0
 800e534:	460b      	mov	r3, r1
 800e536:	4610      	mov	r0, r2
 800e538:	4619      	mov	r1, r3
 800e53a:	f04f 0200 	mov.w	r2, #0
 800e53e:	f04f 0300 	mov.w	r3, #0
 800e542:	020b      	lsls	r3, r1, #8
 800e544:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e548:	0202      	lsls	r2, r0, #8
 800e54a:	6879      	ldr	r1, [r7, #4]
 800e54c:	6849      	ldr	r1, [r1, #4]
 800e54e:	0849      	lsrs	r1, r1, #1
 800e550:	4608      	mov	r0, r1
 800e552:	f04f 0100 	mov.w	r1, #0
 800e556:	1814      	adds	r4, r2, r0
 800e558:	eb43 0501 	adc.w	r5, r3, r1
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	461a      	mov	r2, r3
 800e562:	f04f 0300 	mov.w	r3, #0
 800e566:	4620      	mov	r0, r4
 800e568:	4629      	mov	r1, r5
 800e56a:	f7f1 ff11 	bl	8000390 <__aeabi_uldivmod>
 800e56e:	4602      	mov	r2, r0
 800e570:	460b      	mov	r3, r1
 800e572:	4613      	mov	r3, r2
 800e574:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e578:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e57c:	d308      	bcc.n	800e590 <UART_SetConfig+0x784>
 800e57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e584:	d204      	bcs.n	800e590 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e58c:	60da      	str	r2, [r3, #12]
 800e58e:	e180      	b.n	800e892 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800e590:	2301      	movs	r3, #1
 800e592:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e596:	e17c      	b.n	800e892 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	69db      	ldr	r3, [r3, #28]
 800e59c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e5a0:	f040 80be 	bne.w	800e720 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800e5a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e5a8:	2b20      	cmp	r3, #32
 800e5aa:	dc49      	bgt.n	800e640 <UART_SetConfig+0x834>
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	db7c      	blt.n	800e6aa <UART_SetConfig+0x89e>
 800e5b0:	2b20      	cmp	r3, #32
 800e5b2:	d87a      	bhi.n	800e6aa <UART_SetConfig+0x89e>
 800e5b4:	a201      	add	r2, pc, #4	; (adr r2, 800e5bc <UART_SetConfig+0x7b0>)
 800e5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5ba:	bf00      	nop
 800e5bc:	0800e647 	.word	0x0800e647
 800e5c0:	0800e64f 	.word	0x0800e64f
 800e5c4:	0800e6ab 	.word	0x0800e6ab
 800e5c8:	0800e6ab 	.word	0x0800e6ab
 800e5cc:	0800e657 	.word	0x0800e657
 800e5d0:	0800e6ab 	.word	0x0800e6ab
 800e5d4:	0800e6ab 	.word	0x0800e6ab
 800e5d8:	0800e6ab 	.word	0x0800e6ab
 800e5dc:	0800e667 	.word	0x0800e667
 800e5e0:	0800e6ab 	.word	0x0800e6ab
 800e5e4:	0800e6ab 	.word	0x0800e6ab
 800e5e8:	0800e6ab 	.word	0x0800e6ab
 800e5ec:	0800e6ab 	.word	0x0800e6ab
 800e5f0:	0800e6ab 	.word	0x0800e6ab
 800e5f4:	0800e6ab 	.word	0x0800e6ab
 800e5f8:	0800e6ab 	.word	0x0800e6ab
 800e5fc:	0800e677 	.word	0x0800e677
 800e600:	0800e6ab 	.word	0x0800e6ab
 800e604:	0800e6ab 	.word	0x0800e6ab
 800e608:	0800e6ab 	.word	0x0800e6ab
 800e60c:	0800e6ab 	.word	0x0800e6ab
 800e610:	0800e6ab 	.word	0x0800e6ab
 800e614:	0800e6ab 	.word	0x0800e6ab
 800e618:	0800e6ab 	.word	0x0800e6ab
 800e61c:	0800e6ab 	.word	0x0800e6ab
 800e620:	0800e6ab 	.word	0x0800e6ab
 800e624:	0800e6ab 	.word	0x0800e6ab
 800e628:	0800e6ab 	.word	0x0800e6ab
 800e62c:	0800e6ab 	.word	0x0800e6ab
 800e630:	0800e6ab 	.word	0x0800e6ab
 800e634:	0800e6ab 	.word	0x0800e6ab
 800e638:	0800e6ab 	.word	0x0800e6ab
 800e63c:	0800e69d 	.word	0x0800e69d
 800e640:	2b40      	cmp	r3, #64	; 0x40
 800e642:	d02e      	beq.n	800e6a2 <UART_SetConfig+0x896>
 800e644:	e031      	b.n	800e6aa <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e646:	f7fb fe01 	bl	800a24c <HAL_RCC_GetPCLK1Freq>
 800e64a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e64c:	e033      	b.n	800e6b6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e64e:	f7fb fe13 	bl	800a278 <HAL_RCC_GetPCLK2Freq>
 800e652:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e654:	e02f      	b.n	800e6b6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e656:	f107 0314 	add.w	r3, r7, #20
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7fc fd78 	bl	800b150 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e660:	69bb      	ldr	r3, [r7, #24]
 800e662:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e664:	e027      	b.n	800e6b6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e666:	f107 0308 	add.w	r3, r7, #8
 800e66a:	4618      	mov	r0, r3
 800e66c:	f7fc fec4 	bl	800b3f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e674:	e01f      	b.n	800e6b6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e676:	4b58      	ldr	r3, [pc, #352]	; (800e7d8 <UART_SetConfig+0x9cc>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f003 0320 	and.w	r3, r3, #32
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d009      	beq.n	800e696 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e682:	4b55      	ldr	r3, [pc, #340]	; (800e7d8 <UART_SetConfig+0x9cc>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	08db      	lsrs	r3, r3, #3
 800e688:	f003 0303 	and.w	r3, r3, #3
 800e68c:	4a53      	ldr	r2, [pc, #332]	; (800e7dc <UART_SetConfig+0x9d0>)
 800e68e:	fa22 f303 	lsr.w	r3, r2, r3
 800e692:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e694:	e00f      	b.n	800e6b6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800e696:	4b51      	ldr	r3, [pc, #324]	; (800e7dc <UART_SetConfig+0x9d0>)
 800e698:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e69a:	e00c      	b.n	800e6b6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e69c:	4b4c      	ldr	r3, [pc, #304]	; (800e7d0 <UART_SetConfig+0x9c4>)
 800e69e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e6a0:	e009      	b.n	800e6b6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e6a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e6a8:	e005      	b.n	800e6b6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e6b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	f000 80ea 	beq.w	800e892 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6c2:	4a44      	ldr	r2, [pc, #272]	; (800e7d4 <UART_SetConfig+0x9c8>)
 800e6c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e6c8:	461a      	mov	r2, r3
 800e6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e6d0:	005a      	lsls	r2, r3, #1
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	685b      	ldr	r3, [r3, #4]
 800e6d6:	085b      	lsrs	r3, r3, #1
 800e6d8:	441a      	add	r2, r3
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	685b      	ldr	r3, [r3, #4]
 800e6de:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6e2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e6:	2b0f      	cmp	r3, #15
 800e6e8:	d916      	bls.n	800e718 <UART_SetConfig+0x90c>
 800e6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6f0:	d212      	bcs.n	800e718 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f4:	b29b      	uxth	r3, r3
 800e6f6:	f023 030f 	bic.w	r3, r3, #15
 800e6fa:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6fe:	085b      	lsrs	r3, r3, #1
 800e700:	b29b      	uxth	r3, r3
 800e702:	f003 0307 	and.w	r3, r3, #7
 800e706:	b29a      	uxth	r2, r3
 800e708:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e70a:	4313      	orrs	r3, r2
 800e70c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e714:	60da      	str	r2, [r3, #12]
 800e716:	e0bc      	b.n	800e892 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800e718:	2301      	movs	r3, #1
 800e71a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e71e:	e0b8      	b.n	800e892 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e720:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e724:	2b20      	cmp	r3, #32
 800e726:	dc4b      	bgt.n	800e7c0 <UART_SetConfig+0x9b4>
 800e728:	2b00      	cmp	r3, #0
 800e72a:	f2c0 8087 	blt.w	800e83c <UART_SetConfig+0xa30>
 800e72e:	2b20      	cmp	r3, #32
 800e730:	f200 8084 	bhi.w	800e83c <UART_SetConfig+0xa30>
 800e734:	a201      	add	r2, pc, #4	; (adr r2, 800e73c <UART_SetConfig+0x930>)
 800e736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e73a:	bf00      	nop
 800e73c:	0800e7c7 	.word	0x0800e7c7
 800e740:	0800e7e1 	.word	0x0800e7e1
 800e744:	0800e83d 	.word	0x0800e83d
 800e748:	0800e83d 	.word	0x0800e83d
 800e74c:	0800e7e9 	.word	0x0800e7e9
 800e750:	0800e83d 	.word	0x0800e83d
 800e754:	0800e83d 	.word	0x0800e83d
 800e758:	0800e83d 	.word	0x0800e83d
 800e75c:	0800e7f9 	.word	0x0800e7f9
 800e760:	0800e83d 	.word	0x0800e83d
 800e764:	0800e83d 	.word	0x0800e83d
 800e768:	0800e83d 	.word	0x0800e83d
 800e76c:	0800e83d 	.word	0x0800e83d
 800e770:	0800e83d 	.word	0x0800e83d
 800e774:	0800e83d 	.word	0x0800e83d
 800e778:	0800e83d 	.word	0x0800e83d
 800e77c:	0800e809 	.word	0x0800e809
 800e780:	0800e83d 	.word	0x0800e83d
 800e784:	0800e83d 	.word	0x0800e83d
 800e788:	0800e83d 	.word	0x0800e83d
 800e78c:	0800e83d 	.word	0x0800e83d
 800e790:	0800e83d 	.word	0x0800e83d
 800e794:	0800e83d 	.word	0x0800e83d
 800e798:	0800e83d 	.word	0x0800e83d
 800e79c:	0800e83d 	.word	0x0800e83d
 800e7a0:	0800e83d 	.word	0x0800e83d
 800e7a4:	0800e83d 	.word	0x0800e83d
 800e7a8:	0800e83d 	.word	0x0800e83d
 800e7ac:	0800e83d 	.word	0x0800e83d
 800e7b0:	0800e83d 	.word	0x0800e83d
 800e7b4:	0800e83d 	.word	0x0800e83d
 800e7b8:	0800e83d 	.word	0x0800e83d
 800e7bc:	0800e82f 	.word	0x0800e82f
 800e7c0:	2b40      	cmp	r3, #64	; 0x40
 800e7c2:	d037      	beq.n	800e834 <UART_SetConfig+0xa28>
 800e7c4:	e03a      	b.n	800e83c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e7c6:	f7fb fd41 	bl	800a24c <HAL_RCC_GetPCLK1Freq>
 800e7ca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e7cc:	e03c      	b.n	800e848 <UART_SetConfig+0xa3c>
 800e7ce:	bf00      	nop
 800e7d0:	003d0900 	.word	0x003d0900
 800e7d4:	080131b8 	.word	0x080131b8
 800e7d8:	58024400 	.word	0x58024400
 800e7dc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e7e0:	f7fb fd4a 	bl	800a278 <HAL_RCC_GetPCLK2Freq>
 800e7e4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e7e6:	e02f      	b.n	800e848 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e7e8:	f107 0314 	add.w	r3, r7, #20
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7fc fcaf 	bl	800b150 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e7f2:	69bb      	ldr	r3, [r7, #24]
 800e7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e7f6:	e027      	b.n	800e848 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e7f8:	f107 0308 	add.w	r3, r7, #8
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7fc fdfb 	bl	800b3f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e806:	e01f      	b.n	800e848 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e808:	4b2c      	ldr	r3, [pc, #176]	; (800e8bc <UART_SetConfig+0xab0>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	f003 0320 	and.w	r3, r3, #32
 800e810:	2b00      	cmp	r3, #0
 800e812:	d009      	beq.n	800e828 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e814:	4b29      	ldr	r3, [pc, #164]	; (800e8bc <UART_SetConfig+0xab0>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	08db      	lsrs	r3, r3, #3
 800e81a:	f003 0303 	and.w	r3, r3, #3
 800e81e:	4a28      	ldr	r2, [pc, #160]	; (800e8c0 <UART_SetConfig+0xab4>)
 800e820:	fa22 f303 	lsr.w	r3, r2, r3
 800e824:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e826:	e00f      	b.n	800e848 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800e828:	4b25      	ldr	r3, [pc, #148]	; (800e8c0 <UART_SetConfig+0xab4>)
 800e82a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e82c:	e00c      	b.n	800e848 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e82e:	4b25      	ldr	r3, [pc, #148]	; (800e8c4 <UART_SetConfig+0xab8>)
 800e830:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e832:	e009      	b.n	800e848 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e834:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e838:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e83a:	e005      	b.n	800e848 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800e83c:	2300      	movs	r3, #0
 800e83e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e840:	2301      	movs	r3, #1
 800e842:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e846:	bf00      	nop
    }

    if (pclk != 0U)
 800e848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d021      	beq.n	800e892 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e852:	4a1d      	ldr	r2, [pc, #116]	; (800e8c8 <UART_SetConfig+0xabc>)
 800e854:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e858:	461a      	mov	r2, r3
 800e85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85c:	fbb3 f2f2 	udiv	r2, r3, r2
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	685b      	ldr	r3, [r3, #4]
 800e864:	085b      	lsrs	r3, r3, #1
 800e866:	441a      	add	r2, r3
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e870:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e874:	2b0f      	cmp	r3, #15
 800e876:	d909      	bls.n	800e88c <UART_SetConfig+0xa80>
 800e878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e87e:	d205      	bcs.n	800e88c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e882:	b29a      	uxth	r2, r3
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	60da      	str	r2, [r3, #12]
 800e88a:	e002      	b.n	800e892 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800e88c:	2301      	movs	r3, #1
 800e88e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2201      	movs	r2, #1
 800e896:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2201      	movs	r2, #1
 800e89e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e8ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3738      	adds	r7, #56	; 0x38
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bdb0      	pop	{r4, r5, r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	58024400 	.word	0x58024400
 800e8c0:	03d09000 	.word	0x03d09000
 800e8c4:	003d0900 	.word	0x003d0900
 800e8c8:	080131b8 	.word	0x080131b8

0800e8cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b083      	sub	sp, #12
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8d8:	f003 0301 	and.w	r3, r3, #1
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d00a      	beq.n	800e8f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	430a      	orrs	r2, r1
 800e8f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8fa:	f003 0302 	and.w	r3, r3, #2
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d00a      	beq.n	800e918 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	430a      	orrs	r2, r1
 800e916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e91c:	f003 0304 	and.w	r3, r3, #4
 800e920:	2b00      	cmp	r3, #0
 800e922:	d00a      	beq.n	800e93a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	685b      	ldr	r3, [r3, #4]
 800e92a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	430a      	orrs	r2, r1
 800e938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e93e:	f003 0308 	and.w	r3, r3, #8
 800e942:	2b00      	cmp	r3, #0
 800e944:	d00a      	beq.n	800e95c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	685b      	ldr	r3, [r3, #4]
 800e94c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	430a      	orrs	r2, r1
 800e95a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e960:	f003 0310 	and.w	r3, r3, #16
 800e964:	2b00      	cmp	r3, #0
 800e966:	d00a      	beq.n	800e97e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	689b      	ldr	r3, [r3, #8]
 800e96e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	430a      	orrs	r2, r1
 800e97c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e982:	f003 0320 	and.w	r3, r3, #32
 800e986:	2b00      	cmp	r3, #0
 800e988:	d00a      	beq.n	800e9a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	689b      	ldr	r3, [r3, #8]
 800e990:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	430a      	orrs	r2, r1
 800e99e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d01a      	beq.n	800e9e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	685b      	ldr	r3, [r3, #4]
 800e9b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	430a      	orrs	r2, r1
 800e9c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e9ca:	d10a      	bne.n	800e9e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	430a      	orrs	r2, r1
 800e9e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d00a      	beq.n	800ea04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	685b      	ldr	r3, [r3, #4]
 800e9f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	430a      	orrs	r2, r1
 800ea02:	605a      	str	r2, [r3, #4]
  }
}
 800ea04:	bf00      	nop
 800ea06:	370c      	adds	r7, #12
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0e:	4770      	bx	lr

0800ea10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b086      	sub	sp, #24
 800ea14:	af02      	add	r7, sp, #8
 800ea16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ea20:	f7f7 f8da 	bl	8005bd8 <HAL_GetTick>
 800ea24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	f003 0308 	and.w	r3, r3, #8
 800ea30:	2b08      	cmp	r3, #8
 800ea32:	d10e      	bne.n	800ea52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ea34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ea38:	9300      	str	r3, [sp, #0]
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f000 f82f 	bl	800eaa6 <UART_WaitOnFlagUntilTimeout>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d001      	beq.n	800ea52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ea4e:	2303      	movs	r3, #3
 800ea50:	e025      	b.n	800ea9e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	f003 0304 	and.w	r3, r3, #4
 800ea5c:	2b04      	cmp	r3, #4
 800ea5e:	d10e      	bne.n	800ea7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ea60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ea64:	9300      	str	r3, [sp, #0]
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	2200      	movs	r2, #0
 800ea6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f000 f819 	bl	800eaa6 <UART_WaitOnFlagUntilTimeout>
 800ea74:	4603      	mov	r3, r0
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d001      	beq.n	800ea7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ea7a:	2303      	movs	r3, #3
 800ea7c:	e00f      	b.n	800ea9e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2220      	movs	r2, #32
 800ea82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2220      	movs	r2, #32
 800ea8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2200      	movs	r2, #0
 800ea92:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2200      	movs	r2, #0
 800ea98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ea9c:	2300      	movs	r3, #0
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3710      	adds	r7, #16
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}

0800eaa6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eaa6:	b580      	push	{r7, lr}
 800eaa8:	b09c      	sub	sp, #112	; 0x70
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	60f8      	str	r0, [r7, #12]
 800eaae:	60b9      	str	r1, [r7, #8]
 800eab0:	603b      	str	r3, [r7, #0]
 800eab2:	4613      	mov	r3, r2
 800eab4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eab6:	e0a9      	b.n	800ec0c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eaba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eabe:	f000 80a5 	beq.w	800ec0c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eac2:	f7f7 f889 	bl	8005bd8 <HAL_GetTick>
 800eac6:	4602      	mov	r2, r0
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	1ad3      	subs	r3, r2, r3
 800eacc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800eace:	429a      	cmp	r2, r3
 800ead0:	d302      	bcc.n	800ead8 <UART_WaitOnFlagUntilTimeout+0x32>
 800ead2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d140      	bne.n	800eb5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eae0:	e853 3f00 	ldrex	r3, [r3]
 800eae4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800eae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eae8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800eaec:	667b      	str	r3, [r7, #100]	; 0x64
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eaf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eaf8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eafa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eafc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eafe:	e841 2300 	strex	r3, r2, [r1]
 800eb02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800eb04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d1e6      	bne.n	800ead8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	3308      	adds	r3, #8
 800eb10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb14:	e853 3f00 	ldrex	r3, [r3]
 800eb18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb1c:	f023 0301 	bic.w	r3, r3, #1
 800eb20:	663b      	str	r3, [r7, #96]	; 0x60
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	3308      	adds	r3, #8
 800eb28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eb2a:	64ba      	str	r2, [r7, #72]	; 0x48
 800eb2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb32:	e841 2300 	strex	r3, r2, [r1]
 800eb36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800eb38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d1e5      	bne.n	800eb0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2220      	movs	r2, #32
 800eb42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	2220      	movs	r2, #32
 800eb4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2200      	movs	r2, #0
 800eb52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800eb56:	2303      	movs	r3, #3
 800eb58:	e069      	b.n	800ec2e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	f003 0304 	and.w	r3, r3, #4
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d051      	beq.n	800ec0c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	69db      	ldr	r3, [r3, #28]
 800eb6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb76:	d149      	bne.n	800ec0c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eb80:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb8a:	e853 3f00 	ldrex	r3, [r3]
 800eb8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800eb96:	66fb      	str	r3, [r7, #108]	; 0x6c
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	461a      	mov	r2, r3
 800eb9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eba0:	637b      	str	r3, [r7, #52]	; 0x34
 800eba2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eba4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eba8:	e841 2300 	strex	r3, r2, [r1]
 800ebac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ebae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d1e6      	bne.n	800eb82 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	3308      	adds	r3, #8
 800ebba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	e853 3f00 	ldrex	r3, [r3]
 800ebc2:	613b      	str	r3, [r7, #16]
   return(result);
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	f023 0301 	bic.w	r3, r3, #1
 800ebca:	66bb      	str	r3, [r7, #104]	; 0x68
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	3308      	adds	r3, #8
 800ebd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ebd4:	623a      	str	r2, [r7, #32]
 800ebd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebd8:	69f9      	ldr	r1, [r7, #28]
 800ebda:	6a3a      	ldr	r2, [r7, #32]
 800ebdc:	e841 2300 	strex	r3, r2, [r1]
 800ebe0:	61bb      	str	r3, [r7, #24]
   return(result);
 800ebe2:	69bb      	ldr	r3, [r7, #24]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d1e5      	bne.n	800ebb4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2220      	movs	r2, #32
 800ebec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	2220      	movs	r2, #32
 800ebf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	2220      	movs	r2, #32
 800ebfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	2200      	movs	r2, #0
 800ec04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ec08:	2303      	movs	r3, #3
 800ec0a:	e010      	b.n	800ec2e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	69da      	ldr	r2, [r3, #28]
 800ec12:	68bb      	ldr	r3, [r7, #8]
 800ec14:	4013      	ands	r3, r2
 800ec16:	68ba      	ldr	r2, [r7, #8]
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	bf0c      	ite	eq
 800ec1c:	2301      	moveq	r3, #1
 800ec1e:	2300      	movne	r3, #0
 800ec20:	b2db      	uxtb	r3, r3
 800ec22:	461a      	mov	r2, r3
 800ec24:	79fb      	ldrb	r3, [r7, #7]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	f43f af46 	beq.w	800eab8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ec2c:	2300      	movs	r3, #0
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3770      	adds	r7, #112	; 0x70
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
	...

0800ec38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b096      	sub	sp, #88	; 0x58
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	60f8      	str	r0, [r7, #12]
 800ec40:	60b9      	str	r1, [r7, #8]
 800ec42:	4613      	mov	r3, r2
 800ec44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	68ba      	ldr	r2, [r7, #8]
 800ec4a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	88fa      	ldrh	r2, [r7, #6]
 800ec50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	2200      	movs	r2, #0
 800ec58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2222      	movs	r2, #34	; 0x22
 800ec60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d02c      	beq.n	800ecc6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec70:	4a42      	ldr	r2, [pc, #264]	; (800ed7c <UART_Start_Receive_DMA+0x144>)
 800ec72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec78:	4a41      	ldr	r2, [pc, #260]	; (800ed80 <UART_Start_Receive_DMA+0x148>)
 800ec7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec80:	4a40      	ldr	r2, [pc, #256]	; (800ed84 <UART_Start_Receive_DMA+0x14c>)
 800ec82:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec88:	2200      	movs	r2, #0
 800ec8a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	3324      	adds	r3, #36	; 0x24
 800ec96:	4619      	mov	r1, r3
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec9c:	461a      	mov	r2, r3
 800ec9e:	88fb      	ldrh	r3, [r7, #6]
 800eca0:	f7f7 fe4c 	bl	800693c <HAL_DMA_Start_IT>
 800eca4:	4603      	mov	r3, r0
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d00d      	beq.n	800ecc6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2210      	movs	r2, #16
 800ecae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	2220      	movs	r2, #32
 800ecbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	e055      	b.n	800ed72 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	691b      	ldr	r3, [r3, #16]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d018      	beq.n	800ed08 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecde:	e853 3f00 	ldrex	r3, [r3]
 800ece2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ece4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ecea:	657b      	str	r3, [r7, #84]	; 0x54
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	461a      	mov	r2, r3
 800ecf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecf4:	64bb      	str	r3, [r7, #72]	; 0x48
 800ecf6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecf8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ecfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ecfc:	e841 2300 	strex	r3, r2, [r1]
 800ed00:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ed02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d1e6      	bne.n	800ecd6 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	3308      	adds	r3, #8
 800ed0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed12:	e853 3f00 	ldrex	r3, [r3]
 800ed16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ed18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1a:	f043 0301 	orr.w	r3, r3, #1
 800ed1e:	653b      	str	r3, [r7, #80]	; 0x50
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	3308      	adds	r3, #8
 800ed26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed28:	637a      	str	r2, [r7, #52]	; 0x34
 800ed2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ed2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed30:	e841 2300 	strex	r3, r2, [r1]
 800ed34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ed36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d1e5      	bne.n	800ed08 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	3308      	adds	r3, #8
 800ed42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	e853 3f00 	ldrex	r3, [r3]
 800ed4a:	613b      	str	r3, [r7, #16]
   return(result);
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed52:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	3308      	adds	r3, #8
 800ed5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ed5c:	623a      	str	r2, [r7, #32]
 800ed5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed60:	69f9      	ldr	r1, [r7, #28]
 800ed62:	6a3a      	ldr	r2, [r7, #32]
 800ed64:	e841 2300 	strex	r3, r2, [r1]
 800ed68:	61bb      	str	r3, [r7, #24]
   return(result);
 800ed6a:	69bb      	ldr	r3, [r7, #24]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d1e5      	bne.n	800ed3c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800ed70:	2300      	movs	r3, #0
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3758      	adds	r7, #88	; 0x58
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}
 800ed7a:	bf00      	nop
 800ed7c:	0800ef8b 	.word	0x0800ef8b
 800ed80:	0800f0ad 	.word	0x0800f0ad
 800ed84:	0800f0e5 	.word	0x0800f0e5

0800ed88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ed88:	b480      	push	{r7}
 800ed8a:	b08f      	sub	sp, #60	; 0x3c
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed96:	6a3b      	ldr	r3, [r7, #32]
 800ed98:	e853 3f00 	ldrex	r3, [r3]
 800ed9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed9e:	69fb      	ldr	r3, [r7, #28]
 800eda0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800eda4:	637b      	str	r3, [r7, #52]	; 0x34
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	461a      	mov	r2, r3
 800edac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800edb0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800edb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800edb6:	e841 2300 	strex	r3, r2, [r1]
 800edba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800edbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d1e6      	bne.n	800ed90 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	3308      	adds	r3, #8
 800edc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	e853 3f00 	ldrex	r3, [r3]
 800edd0:	60bb      	str	r3, [r7, #8]
   return(result);
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800edd8:	633b      	str	r3, [r7, #48]	; 0x30
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	3308      	adds	r3, #8
 800ede0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ede2:	61ba      	str	r2, [r7, #24]
 800ede4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ede6:	6979      	ldr	r1, [r7, #20]
 800ede8:	69ba      	ldr	r2, [r7, #24]
 800edea:	e841 2300 	strex	r3, r2, [r1]
 800edee:	613b      	str	r3, [r7, #16]
   return(result);
 800edf0:	693b      	ldr	r3, [r7, #16]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d1e5      	bne.n	800edc2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2220      	movs	r2, #32
 800edfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800edfe:	bf00      	nop
 800ee00:	373c      	adds	r7, #60	; 0x3c
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr
	...

0800ee0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b095      	sub	sp, #84	; 0x54
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee1c:	e853 3f00 	ldrex	r3, [r3]
 800ee20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ee22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ee28:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	461a      	mov	r2, r3
 800ee30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee32:	643b      	str	r3, [r7, #64]	; 0x40
 800ee34:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ee38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee3a:	e841 2300 	strex	r3, r2, [r1]
 800ee3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ee40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d1e6      	bne.n	800ee14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	3308      	adds	r3, #8
 800ee4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee4e:	6a3b      	ldr	r3, [r7, #32]
 800ee50:	e853 3f00 	ldrex	r3, [r3]
 800ee54:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee56:	69fa      	ldr	r2, [r7, #28]
 800ee58:	4b1e      	ldr	r3, [pc, #120]	; (800eed4 <UART_EndRxTransfer+0xc8>)
 800ee5a:	4013      	ands	r3, r2
 800ee5c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	3308      	adds	r3, #8
 800ee64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee66:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ee68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee6e:	e841 2300 	strex	r3, r2, [r1]
 800ee72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ee74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d1e5      	bne.n	800ee46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee7e:	2b01      	cmp	r3, #1
 800ee80:	d118      	bne.n	800eeb4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	e853 3f00 	ldrex	r3, [r3]
 800ee8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	f023 0310 	bic.w	r3, r3, #16
 800ee96:	647b      	str	r3, [r7, #68]	; 0x44
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eea0:	61bb      	str	r3, [r7, #24]
 800eea2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eea4:	6979      	ldr	r1, [r7, #20]
 800eea6:	69ba      	ldr	r2, [r7, #24]
 800eea8:	e841 2300 	strex	r3, r2, [r1]
 800eeac:	613b      	str	r3, [r7, #16]
   return(result);
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d1e6      	bne.n	800ee82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2220      	movs	r2, #32
 800eeb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2200      	movs	r2, #0
 800eec0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2200      	movs	r2, #0
 800eec6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800eec8:	bf00      	nop
 800eeca:	3754      	adds	r7, #84	; 0x54
 800eecc:	46bd      	mov	sp, r7
 800eece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed2:	4770      	bx	lr
 800eed4:	effffffe 	.word	0xeffffffe

0800eed8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b090      	sub	sp, #64	; 0x40
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eee4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	69db      	ldr	r3, [r3, #28]
 800eeea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eeee:	d037      	beq.n	800ef60 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800eef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eef2:	2200      	movs	r2, #0
 800eef4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800eef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	3308      	adds	r3, #8
 800eefe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef02:	e853 3f00 	ldrex	r3, [r3]
 800ef06:	623b      	str	r3, [r7, #32]
   return(result);
 800ef08:	6a3b      	ldr	r3, [r7, #32]
 800ef0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef0e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	3308      	adds	r3, #8
 800ef16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef18:	633a      	str	r2, [r7, #48]	; 0x30
 800ef1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ef1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef20:	e841 2300 	strex	r3, r2, [r1]
 800ef24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ef26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d1e5      	bne.n	800eef8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ef2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef32:	693b      	ldr	r3, [r7, #16]
 800ef34:	e853 3f00 	ldrex	r3, [r3]
 800ef38:	60fb      	str	r3, [r7, #12]
   return(result);
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef40:	637b      	str	r3, [r7, #52]	; 0x34
 800ef42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	461a      	mov	r2, r3
 800ef48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef4a:	61fb      	str	r3, [r7, #28]
 800ef4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef4e:	69b9      	ldr	r1, [r7, #24]
 800ef50:	69fa      	ldr	r2, [r7, #28]
 800ef52:	e841 2300 	strex	r3, r2, [r1]
 800ef56:	617b      	str	r3, [r7, #20]
   return(result);
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d1e6      	bne.n	800ef2c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ef5e:	e002      	b.n	800ef66 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800ef60:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ef62:	f7fe ff2b 	bl	800ddbc <HAL_UART_TxCpltCallback>
}
 800ef66:	bf00      	nop
 800ef68:	3740      	adds	r7, #64	; 0x40
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}

0800ef6e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ef6e:	b580      	push	{r7, lr}
 800ef70:	b084      	sub	sp, #16
 800ef72:	af00      	add	r7, sp, #0
 800ef74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef7a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ef7c:	68f8      	ldr	r0, [r7, #12]
 800ef7e:	f7fe ff27 	bl	800ddd0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef82:	bf00      	nop
 800ef84:	3710      	adds	r7, #16
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}

0800ef8a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ef8a:	b580      	push	{r7, lr}
 800ef8c:	b09c      	sub	sp, #112	; 0x70
 800ef8e:	af00      	add	r7, sp, #0
 800ef90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef96:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	69db      	ldr	r3, [r3, #28]
 800ef9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800efa0:	d071      	beq.n	800f086 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800efa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800efa4:	2200      	movs	r2, #0
 800efa6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800efaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efb2:	e853 3f00 	ldrex	r3, [r3]
 800efb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800efb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800efbe:	66bb      	str	r3, [r7, #104]	; 0x68
 800efc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	461a      	mov	r2, r3
 800efc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800efc8:	65bb      	str	r3, [r7, #88]	; 0x58
 800efca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800efce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800efd0:	e841 2300 	strex	r3, r2, [r1]
 800efd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800efd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d1e6      	bne.n	800efaa <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800efdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	3308      	adds	r3, #8
 800efe2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe6:	e853 3f00 	ldrex	r3, [r3]
 800efea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800efec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efee:	f023 0301 	bic.w	r3, r3, #1
 800eff2:	667b      	str	r3, [r7, #100]	; 0x64
 800eff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	3308      	adds	r3, #8
 800effa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800effc:	647a      	str	r2, [r7, #68]	; 0x44
 800effe:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f000:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f004:	e841 2300 	strex	r3, r2, [r1]
 800f008:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d1e5      	bne.n	800efdc <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	3308      	adds	r3, #8
 800f016:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01a:	e853 3f00 	ldrex	r3, [r3]
 800f01e:	623b      	str	r3, [r7, #32]
   return(result);
 800f020:	6a3b      	ldr	r3, [r7, #32]
 800f022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f026:	663b      	str	r3, [r7, #96]	; 0x60
 800f028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	3308      	adds	r3, #8
 800f02e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f030:	633a      	str	r2, [r7, #48]	; 0x30
 800f032:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f034:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f036:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f038:	e841 2300 	strex	r3, r2, [r1]
 800f03c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f040:	2b00      	cmp	r3, #0
 800f042:	d1e5      	bne.n	800f010 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f046:	2220      	movs	r2, #32
 800f048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f04c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f04e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f050:	2b01      	cmp	r3, #1
 800f052:	d118      	bne.n	800f086 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f05a:	693b      	ldr	r3, [r7, #16]
 800f05c:	e853 3f00 	ldrex	r3, [r3]
 800f060:	60fb      	str	r3, [r7, #12]
   return(result);
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	f023 0310 	bic.w	r3, r3, #16
 800f068:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f06a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	461a      	mov	r2, r3
 800f070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f072:	61fb      	str	r3, [r7, #28]
 800f074:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f076:	69b9      	ldr	r1, [r7, #24]
 800f078:	69fa      	ldr	r2, [r7, #28]
 800f07a:	e841 2300 	strex	r3, r2, [r1]
 800f07e:	617b      	str	r3, [r7, #20]
   return(result);
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d1e6      	bne.n	800f054 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f08a:	2b01      	cmp	r3, #1
 800f08c:	d107      	bne.n	800f09e <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f08e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f090:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f094:	4619      	mov	r1, r3
 800f096:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f098:	f7f3 fb58 	bl	800274c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f09c:	e002      	b.n	800f0a4 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800f09e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f0a0:	f7f4 fefc 	bl	8003e9c <HAL_UART_RxCpltCallback>
}
 800f0a4:	bf00      	nop
 800f0a6:	3770      	adds	r7, #112	; 0x70
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0b8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0be:	2b01      	cmp	r3, #1
 800f0c0:	d109      	bne.n	800f0d6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f0c8:	085b      	lsrs	r3, r3, #1
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	4619      	mov	r1, r3
 800f0ce:	68f8      	ldr	r0, [r7, #12]
 800f0d0:	f7f3 fb3c 	bl	800274c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f0d4:	e002      	b.n	800f0dc <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800f0d6:	68f8      	ldr	r0, [r7, #12]
 800f0d8:	f7fe fe84 	bl	800dde4 <HAL_UART_RxHalfCpltCallback>
}
 800f0dc:	bf00      	nop
 800f0de:	3710      	adds	r7, #16
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}

0800f0e4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b086      	sub	sp, #24
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0f0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0f8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f100:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	689b      	ldr	r3, [r3, #8]
 800f108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f10c:	2b80      	cmp	r3, #128	; 0x80
 800f10e:	d109      	bne.n	800f124 <UART_DMAError+0x40>
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	2b21      	cmp	r3, #33	; 0x21
 800f114:	d106      	bne.n	800f124 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	2200      	movs	r2, #0
 800f11a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f11e:	6978      	ldr	r0, [r7, #20]
 800f120:	f7ff fe32 	bl	800ed88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	689b      	ldr	r3, [r3, #8]
 800f12a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f12e:	2b40      	cmp	r3, #64	; 0x40
 800f130:	d109      	bne.n	800f146 <UART_DMAError+0x62>
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	2b22      	cmp	r3, #34	; 0x22
 800f136:	d106      	bne.n	800f146 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	2200      	movs	r2, #0
 800f13c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f140:	6978      	ldr	r0, [r7, #20]
 800f142:	f7ff fe63 	bl	800ee0c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f14c:	f043 0210 	orr.w	r2, r3, #16
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f156:	6978      	ldr	r0, [r7, #20]
 800f158:	f7fe fe4e 	bl	800ddf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f15c:	bf00      	nop
 800f15e:	3718      	adds	r7, #24
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}

0800f164 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b084      	sub	sp, #16
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f170:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	2200      	movs	r2, #0
 800f176:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	2200      	movs	r2, #0
 800f17e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f182:	68f8      	ldr	r0, [r7, #12]
 800f184:	f7fe fe38 	bl	800ddf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f188:	bf00      	nop
 800f18a:	3710      	adds	r7, #16
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b088      	sub	sp, #32
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	e853 3f00 	ldrex	r3, [r3]
 800f1a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1ac:	61fb      	str	r3, [r7, #28]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	461a      	mov	r2, r3
 800f1b4:	69fb      	ldr	r3, [r7, #28]
 800f1b6:	61bb      	str	r3, [r7, #24]
 800f1b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1ba:	6979      	ldr	r1, [r7, #20]
 800f1bc:	69ba      	ldr	r2, [r7, #24]
 800f1be:	e841 2300 	strex	r3, r2, [r1]
 800f1c2:	613b      	str	r3, [r7, #16]
   return(result);
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d1e6      	bne.n	800f198 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2220      	movs	r2, #32
 800f1ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f7fe fdef 	bl	800ddbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f1de:	bf00      	nop
 800f1e0:	3720      	adds	r7, #32
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}

0800f1e6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f1e6:	b480      	push	{r7}
 800f1e8:	b083      	sub	sp, #12
 800f1ea:	af00      	add	r7, sp, #0
 800f1ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f1ee:	bf00      	nop
 800f1f0:	370c      	adds	r7, #12
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f8:	4770      	bx	lr

0800f1fa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f1fa:	b480      	push	{r7}
 800f1fc:	b083      	sub	sp, #12
 800f1fe:	af00      	add	r7, sp, #0
 800f200:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f202:	bf00      	nop
 800f204:	370c      	adds	r7, #12
 800f206:	46bd      	mov	sp, r7
 800f208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20c:	4770      	bx	lr

0800f20e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f20e:	b480      	push	{r7}
 800f210:	b083      	sub	sp, #12
 800f212:	af00      	add	r7, sp, #0
 800f214:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f216:	bf00      	nop
 800f218:	370c      	adds	r7, #12
 800f21a:	46bd      	mov	sp, r7
 800f21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f220:	4770      	bx	lr

0800f222 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800f222:	b580      	push	{r7, lr}
 800f224:	b084      	sub	sp, #16
 800f226:	af00      	add	r7, sp, #0
 800f228:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f230:	2b01      	cmp	r3, #1
 800f232:	d101      	bne.n	800f238 <HAL_UARTEx_EnableFifoMode+0x16>
 800f234:	2302      	movs	r3, #2
 800f236:	e02b      	b.n	800f290 <HAL_UARTEx_EnableFifoMode+0x6e>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2201      	movs	r2, #1
 800f23c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2224      	movs	r2, #36	; 0x24
 800f244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	681a      	ldr	r2, [r3, #0]
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	f022 0201 	bic.w	r2, r2, #1
 800f25e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f266:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800f26e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	68fa      	ldr	r2, [r7, #12]
 800f276:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f000 f91f 	bl	800f4bc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	2220      	movs	r2, #32
 800f282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2200      	movs	r2, #0
 800f28a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f28e:	2300      	movs	r3, #0
}
 800f290:	4618      	mov	r0, r3
 800f292:	3710      	adds	r7, #16
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}

0800f298 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f298:	b480      	push	{r7}
 800f29a:	b085      	sub	sp, #20
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f2a6:	2b01      	cmp	r3, #1
 800f2a8:	d101      	bne.n	800f2ae <HAL_UARTEx_DisableFifoMode+0x16>
 800f2aa:	2302      	movs	r3, #2
 800f2ac:	e027      	b.n	800f2fe <HAL_UARTEx_DisableFifoMode+0x66>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2201      	movs	r2, #1
 800f2b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2224      	movs	r2, #36	; 0x24
 800f2ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	681a      	ldr	r2, [r3, #0]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	f022 0201 	bic.w	r2, r2, #1
 800f2d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f2dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	68fa      	ldr	r2, [r7, #12]
 800f2ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2220      	movs	r2, #32
 800f2f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f2fc:	2300      	movs	r3, #0
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	3714      	adds	r7, #20
 800f302:	46bd      	mov	sp, r7
 800f304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f308:	4770      	bx	lr

0800f30a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f30a:	b580      	push	{r7, lr}
 800f30c:	b084      	sub	sp, #16
 800f30e:	af00      	add	r7, sp, #0
 800f310:	6078      	str	r0, [r7, #4]
 800f312:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f31a:	2b01      	cmp	r3, #1
 800f31c:	d101      	bne.n	800f322 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f31e:	2302      	movs	r3, #2
 800f320:	e02d      	b.n	800f37e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	2201      	movs	r2, #1
 800f326:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2224      	movs	r2, #36	; 0x24
 800f32e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	681a      	ldr	r2, [r3, #0]
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	f022 0201 	bic.w	r2, r2, #1
 800f348:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	689b      	ldr	r3, [r3, #8]
 800f350:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	683a      	ldr	r2, [r7, #0]
 800f35a:	430a      	orrs	r2, r1
 800f35c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f000 f8ac 	bl	800f4bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	68fa      	ldr	r2, [r7, #12]
 800f36a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2220      	movs	r2, #32
 800f370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2200      	movs	r2, #0
 800f378:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f37c:	2300      	movs	r3, #0
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3710      	adds	r7, #16
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}

0800f386 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f386:	b580      	push	{r7, lr}
 800f388:	b084      	sub	sp, #16
 800f38a:	af00      	add	r7, sp, #0
 800f38c:	6078      	str	r0, [r7, #4]
 800f38e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f396:	2b01      	cmp	r3, #1
 800f398:	d101      	bne.n	800f39e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f39a:	2302      	movs	r3, #2
 800f39c:	e02d      	b.n	800f3fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2201      	movs	r2, #1
 800f3a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2224      	movs	r2, #36	; 0x24
 800f3aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	681a      	ldr	r2, [r3, #0]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	f022 0201 	bic.w	r2, r2, #1
 800f3c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	689b      	ldr	r3, [r3, #8]
 800f3cc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	683a      	ldr	r2, [r7, #0]
 800f3d6:	430a      	orrs	r2, r1
 800f3d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f000 f86e 	bl	800f4bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	68fa      	ldr	r2, [r7, #12]
 800f3e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2220      	movs	r2, #32
 800f3ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f3f8:	2300      	movs	r3, #0
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	3710      	adds	r7, #16
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}

0800f402 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f402:	b580      	push	{r7, lr}
 800f404:	b08c      	sub	sp, #48	; 0x30
 800f406:	af00      	add	r7, sp, #0
 800f408:	60f8      	str	r0, [r7, #12]
 800f40a:	60b9      	str	r1, [r7, #8]
 800f40c:	4613      	mov	r3, r2
 800f40e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f416:	2b20      	cmp	r3, #32
 800f418:	d14a      	bne.n	800f4b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800f41a:	68bb      	ldr	r3, [r7, #8]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d002      	beq.n	800f426 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800f420:	88fb      	ldrh	r3, [r7, #6]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d101      	bne.n	800f42a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800f426:	2301      	movs	r3, #1
 800f428:	e043      	b.n	800f4b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f430:	2b01      	cmp	r3, #1
 800f432:	d101      	bne.n	800f438 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800f434:	2302      	movs	r3, #2
 800f436:	e03c      	b.n	800f4b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	2201      	movs	r2, #1
 800f43c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	2201      	movs	r2, #1
 800f444:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800f446:	88fb      	ldrh	r3, [r7, #6]
 800f448:	461a      	mov	r2, r3
 800f44a:	68b9      	ldr	r1, [r7, #8]
 800f44c:	68f8      	ldr	r0, [r7, #12]
 800f44e:	f7ff fbf3 	bl	800ec38 <UART_Start_Receive_DMA>
 800f452:	4603      	mov	r3, r0
 800f454:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800f458:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d124      	bne.n	800f4aa <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f464:	2b01      	cmp	r3, #1
 800f466:	d11d      	bne.n	800f4a4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	2210      	movs	r2, #16
 800f46e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f476:	69bb      	ldr	r3, [r7, #24]
 800f478:	e853 3f00 	ldrex	r3, [r3]
 800f47c:	617b      	str	r3, [r7, #20]
   return(result);
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	f043 0310 	orr.w	r3, r3, #16
 800f484:	62bb      	str	r3, [r7, #40]	; 0x28
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	461a      	mov	r2, r3
 800f48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f48e:	627b      	str	r3, [r7, #36]	; 0x24
 800f490:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f492:	6a39      	ldr	r1, [r7, #32]
 800f494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f496:	e841 2300 	strex	r3, r2, [r1]
 800f49a:	61fb      	str	r3, [r7, #28]
   return(result);
 800f49c:	69fb      	ldr	r3, [r7, #28]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d1e6      	bne.n	800f470 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800f4a2:	e002      	b.n	800f4aa <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800f4a4:	2301      	movs	r3, #1
 800f4a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800f4aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4ae:	e000      	b.n	800f4b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800f4b0:	2302      	movs	r3, #2
  }
}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	3730      	adds	r7, #48	; 0x30
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}
	...

0800f4bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f4bc:	b480      	push	{r7}
 800f4be:	b085      	sub	sp, #20
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d108      	bne.n	800f4de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2201      	movs	r2, #1
 800f4d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2201      	movs	r2, #1
 800f4d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f4dc:	e031      	b.n	800f542 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f4de:	2310      	movs	r3, #16
 800f4e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f4e2:	2310      	movs	r3, #16
 800f4e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	689b      	ldr	r3, [r3, #8]
 800f4ec:	0e5b      	lsrs	r3, r3, #25
 800f4ee:	b2db      	uxtb	r3, r3
 800f4f0:	f003 0307 	and.w	r3, r3, #7
 800f4f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	689b      	ldr	r3, [r3, #8]
 800f4fc:	0f5b      	lsrs	r3, r3, #29
 800f4fe:	b2db      	uxtb	r3, r3
 800f500:	f003 0307 	and.w	r3, r3, #7
 800f504:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f506:	7bbb      	ldrb	r3, [r7, #14]
 800f508:	7b3a      	ldrb	r2, [r7, #12]
 800f50a:	4911      	ldr	r1, [pc, #68]	; (800f550 <UARTEx_SetNbDataToProcess+0x94>)
 800f50c:	5c8a      	ldrb	r2, [r1, r2]
 800f50e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f512:	7b3a      	ldrb	r2, [r7, #12]
 800f514:	490f      	ldr	r1, [pc, #60]	; (800f554 <UARTEx_SetNbDataToProcess+0x98>)
 800f516:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f518:	fb93 f3f2 	sdiv	r3, r3, r2
 800f51c:	b29a      	uxth	r2, r3
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f524:	7bfb      	ldrb	r3, [r7, #15]
 800f526:	7b7a      	ldrb	r2, [r7, #13]
 800f528:	4909      	ldr	r1, [pc, #36]	; (800f550 <UARTEx_SetNbDataToProcess+0x94>)
 800f52a:	5c8a      	ldrb	r2, [r1, r2]
 800f52c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f530:	7b7a      	ldrb	r2, [r7, #13]
 800f532:	4908      	ldr	r1, [pc, #32]	; (800f554 <UARTEx_SetNbDataToProcess+0x98>)
 800f534:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f536:	fb93 f3f2 	sdiv	r3, r3, r2
 800f53a:	b29a      	uxth	r2, r3
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f542:	bf00      	nop
 800f544:	3714      	adds	r7, #20
 800f546:	46bd      	mov	sp, r7
 800f548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54c:	4770      	bx	lr
 800f54e:	bf00      	nop
 800f550:	080131d0 	.word	0x080131d0
 800f554:	080131d8 	.word	0x080131d8

0800f558 <checkint>:
 800f558:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f55c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800f560:	429a      	cmp	r2, r3
 800f562:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f564:	dd2b      	ble.n	800f5be <checkint+0x66>
 800f566:	f240 4333 	movw	r3, #1075	; 0x433
 800f56a:	429a      	cmp	r2, r3
 800f56c:	dc25      	bgt.n	800f5ba <checkint+0x62>
 800f56e:	1a9b      	subs	r3, r3, r2
 800f570:	f1a3 0620 	sub.w	r6, r3, #32
 800f574:	f04f 32ff 	mov.w	r2, #4294967295
 800f578:	fa02 f606 	lsl.w	r6, r2, r6
 800f57c:	fa02 f403 	lsl.w	r4, r2, r3
 800f580:	f1c3 0520 	rsb	r5, r3, #32
 800f584:	4334      	orrs	r4, r6
 800f586:	fa22 f505 	lsr.w	r5, r2, r5
 800f58a:	432c      	orrs	r4, r5
 800f58c:	409a      	lsls	r2, r3
 800f58e:	ea20 0602 	bic.w	r6, r0, r2
 800f592:	ea21 0704 	bic.w	r7, r1, r4
 800f596:	ea56 0207 	orrs.w	r2, r6, r7
 800f59a:	f1a3 0420 	sub.w	r4, r3, #32
 800f59e:	f1c3 0220 	rsb	r2, r3, #32
 800f5a2:	d10c      	bne.n	800f5be <checkint+0x66>
 800f5a4:	40d8      	lsrs	r0, r3
 800f5a6:	fa01 f302 	lsl.w	r3, r1, r2
 800f5aa:	4318      	orrs	r0, r3
 800f5ac:	40e1      	lsrs	r1, r4
 800f5ae:	4308      	orrs	r0, r1
 800f5b0:	f000 0301 	and.w	r3, r0, #1
 800f5b4:	f1c3 0002 	rsb	r0, r3, #2
 800f5b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5ba:	2002      	movs	r0, #2
 800f5bc:	e7fc      	b.n	800f5b8 <checkint+0x60>
 800f5be:	2000      	movs	r0, #0
 800f5c0:	e7fa      	b.n	800f5b8 <checkint+0x60>
 800f5c2:	0000      	movs	r0, r0
 800f5c4:	0000      	movs	r0, r0
	...

0800f5c8 <pow>:
 800f5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5cc:	ed2d 8b0a 	vpush	{d8-d12}
 800f5d0:	b09b      	sub	sp, #108	; 0x6c
 800f5d2:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f5d6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f5da:	ed8d 1b00 	vstr	d1, [sp]
 800f5de:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800f5e2:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f5e6:	f109 30ff 	add.w	r0, r9, #4294967295
 800f5ea:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800f5ee:	4288      	cmp	r0, r1
 800f5f0:	46cc      	mov	ip, r9
 800f5f2:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800f5f6:	d806      	bhi.n	800f606 <pow+0x3e>
 800f5f8:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800f5fc:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800f600:	297f      	cmp	r1, #127	; 0x7f
 800f602:	f240 81ab 	bls.w	800f95c <pow+0x394>
 800f606:	19b1      	adds	r1, r6, r6
 800f608:	9104      	str	r1, [sp, #16]
 800f60a:	eb47 0107 	adc.w	r1, r7, r7
 800f60e:	9105      	str	r1, [sp, #20]
 800f610:	9904      	ldr	r1, [sp, #16]
 800f612:	f111 31ff 	adds.w	r1, r1, #4294967295
 800f616:	460a      	mov	r2, r1
 800f618:	9905      	ldr	r1, [sp, #20]
 800f61a:	f141 31ff 	adc.w	r1, r1, #4294967295
 800f61e:	460b      	mov	r3, r1
 800f620:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800f624:	f06f 0001 	mvn.w	r0, #1
 800f628:	4299      	cmp	r1, r3
 800f62a:	bf08      	it	eq
 800f62c:	4290      	cmpeq	r0, r2
 800f62e:	d260      	bcs.n	800f6f2 <pow+0x12a>
 800f630:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f634:	4313      	orrs	r3, r2
 800f636:	d11a      	bne.n	800f66e <pow+0xa6>
 800f638:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800f63c:	1923      	adds	r3, r4, r4
 800f63e:	930c      	str	r3, [sp, #48]	; 0x30
 800f640:	eb42 0302 	adc.w	r3, r2, r2
 800f644:	930d      	str	r3, [sp, #52]	; 0x34
 800f646:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f64a:	4bcf      	ldr	r3, [pc, #828]	; (800f988 <pow+0x3c0>)
 800f64c:	2200      	movs	r2, #0
 800f64e:	428b      	cmp	r3, r1
 800f650:	bf08      	it	eq
 800f652:	4282      	cmpeq	r2, r0
 800f654:	f080 8265 	bcs.w	800fb22 <pow+0x55a>
 800f658:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f65c:	ed9d 6b00 	vldr	d6, [sp]
 800f660:	ee37 0b06 	vadd.f64	d0, d7, d6
 800f664:	b01b      	add	sp, #108	; 0x6c
 800f666:	ecbd 8b0a 	vpop	{d8-d12}
 800f66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f66e:	49c7      	ldr	r1, [pc, #796]	; (800f98c <pow+0x3c4>)
 800f670:	2000      	movs	r0, #0
 800f672:	428d      	cmp	r5, r1
 800f674:	bf08      	it	eq
 800f676:	4284      	cmpeq	r4, r0
 800f678:	d10b      	bne.n	800f692 <pow+0xca>
 800f67a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f67e:	19b3      	adds	r3, r6, r6
 800f680:	930e      	str	r3, [sp, #56]	; 0x38
 800f682:	eb42 0302 	adc.w	r3, r2, r2
 800f686:	930f      	str	r3, [sp, #60]	; 0x3c
 800f688:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f68c:	4bbe      	ldr	r3, [pc, #760]	; (800f988 <pow+0x3c0>)
 800f68e:	2200      	movs	r2, #0
 800f690:	e7dd      	b.n	800f64e <pow+0x86>
 800f692:	1921      	adds	r1, r4, r4
 800f694:	9106      	str	r1, [sp, #24]
 800f696:	eb45 0105 	adc.w	r1, r5, r5
 800f69a:	9107      	str	r1, [sp, #28]
 800f69c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800f6a0:	49bb      	ldr	r1, [pc, #748]	; (800f990 <pow+0x3c8>)
 800f6a2:	2000      	movs	r0, #0
 800f6a4:	42a1      	cmp	r1, r4
 800f6a6:	bf08      	it	eq
 800f6a8:	4298      	cmpeq	r0, r3
 800f6aa:	d3d5      	bcc.n	800f658 <pow+0x90>
 800f6ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f6b0:	428c      	cmp	r4, r1
 800f6b2:	bf08      	it	eq
 800f6b4:	4283      	cmpeq	r3, r0
 800f6b6:	d1cf      	bne.n	800f658 <pow+0x90>
 800f6b8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800f6bc:	49b5      	ldr	r1, [pc, #724]	; (800f994 <pow+0x3cc>)
 800f6be:	2000      	movs	r0, #0
 800f6c0:	428c      	cmp	r4, r1
 800f6c2:	bf08      	it	eq
 800f6c4:	4283      	cmpeq	r3, r0
 800f6c6:	f000 822c 	beq.w	800fb22 <pow+0x55a>
 800f6ca:	49b3      	ldr	r1, [pc, #716]	; (800f998 <pow+0x3d0>)
 800f6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f6d0:	42a1      	cmp	r1, r4
 800f6d2:	bf08      	it	eq
 800f6d4:	4298      	cmpeq	r0, r3
 800f6d6:	ea6f 0307 	mvn.w	r3, r7
 800f6da:	bf34      	ite	cc
 800f6dc:	2201      	movcc	r2, #1
 800f6de:	2200      	movcs	r2, #0
 800f6e0:	0fdb      	lsrs	r3, r3, #31
 800f6e2:	429a      	cmp	r2, r3
 800f6e4:	f040 821a 	bne.w	800fb1c <pow+0x554>
 800f6e8:	ed9d 7b00 	vldr	d7, [sp]
 800f6ec:	ee27 0b07 	vmul.f64	d0, d7, d7
 800f6f0:	e7b8      	b.n	800f664 <pow+0x9c>
 800f6f2:	1923      	adds	r3, r4, r4
 800f6f4:	9308      	str	r3, [sp, #32]
 800f6f6:	eb45 0305 	adc.w	r3, r5, r5
 800f6fa:	9309      	str	r3, [sp, #36]	; 0x24
 800f6fc:	9b08      	ldr	r3, [sp, #32]
 800f6fe:	f113 33ff 	adds.w	r3, r3, #4294967295
 800f702:	9310      	str	r3, [sp, #64]	; 0x40
 800f704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f706:	f143 33ff 	adc.w	r3, r3, #4294967295
 800f70a:	9311      	str	r3, [sp, #68]	; 0x44
 800f70c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f710:	4299      	cmp	r1, r3
 800f712:	bf08      	it	eq
 800f714:	4290      	cmpeq	r0, r2
 800f716:	d22d      	bcs.n	800f774 <pow+0x1ac>
 800f718:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f71c:	2c00      	cmp	r4, #0
 800f71e:	f175 0300 	sbcs.w	r3, r5, #0
 800f722:	ee27 0b07 	vmul.f64	d0, d7, d7
 800f726:	da16      	bge.n	800f756 <pow+0x18e>
 800f728:	4630      	mov	r0, r6
 800f72a:	4639      	mov	r1, r7
 800f72c:	f7ff ff14 	bl	800f558 <checkint>
 800f730:	2801      	cmp	r0, #1
 800f732:	d110      	bne.n	800f756 <pow+0x18e>
 800f734:	eeb1 0b40 	vneg.f64	d0, d0
 800f738:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800f73c:	4323      	orrs	r3, r4
 800f73e:	d10c      	bne.n	800f75a <pow+0x192>
 800f740:	2e00      	cmp	r6, #0
 800f742:	f177 0300 	sbcs.w	r3, r7, #0
 800f746:	da8d      	bge.n	800f664 <pow+0x9c>
 800f748:	b01b      	add	sp, #108	; 0x6c
 800f74a:	ecbd 8b0a 	vpop	{d8-d12}
 800f74e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f752:	f000 bf3d 	b.w	80105d0 <__math_divzero>
 800f756:	2000      	movs	r0, #0
 800f758:	e7ee      	b.n	800f738 <pow+0x170>
 800f75a:	2e00      	cmp	r6, #0
 800f75c:	f177 0300 	sbcs.w	r3, r7, #0
 800f760:	da80      	bge.n	800f664 <pow+0x9c>
 800f762:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f766:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800f76a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800f76e:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800f772:	e777      	b.n	800f664 <pow+0x9c>
 800f774:	2c00      	cmp	r4, #0
 800f776:	f175 0300 	sbcs.w	r3, r5, #0
 800f77a:	da35      	bge.n	800f7e8 <pow+0x220>
 800f77c:	4630      	mov	r0, r6
 800f77e:	4639      	mov	r1, r7
 800f780:	f7ff feea 	bl	800f558 <checkint>
 800f784:	b940      	cbnz	r0, 800f798 <pow+0x1d0>
 800f786:	ed9d 0b02 	vldr	d0, [sp, #8]
 800f78a:	b01b      	add	sp, #108	; 0x6c
 800f78c:	ecbd 8b0a 	vpop	{d8-d12}
 800f790:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f794:	f000 bf34 	b.w	8010600 <__math_invalid>
 800f798:	2801      	cmp	r0, #1
 800f79a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f79e:	bf14      	ite	ne
 800f7a0:	2000      	movne	r0, #0
 800f7a2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800f7a6:	461d      	mov	r5, r3
 800f7a8:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800f7ac:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800f7b0:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800f7b4:	2a7f      	cmp	r2, #127	; 0x7f
 800f7b6:	d933      	bls.n	800f820 <pow+0x258>
 800f7b8:	4974      	ldr	r1, [pc, #464]	; (800f98c <pow+0x3c4>)
 800f7ba:	2000      	movs	r0, #0
 800f7bc:	428d      	cmp	r5, r1
 800f7be:	bf08      	it	eq
 800f7c0:	4284      	cmpeq	r4, r0
 800f7c2:	f000 81ae 	beq.w	800fb22 <pow+0x55a>
 800f7c6:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f7ca:	4293      	cmp	r3, r2
 800f7cc:	d80e      	bhi.n	800f7ec <pow+0x224>
 800f7ce:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f7d2:	ed9d 7b00 	vldr	d7, [sp]
 800f7d6:	42a9      	cmp	r1, r5
 800f7d8:	bf08      	it	eq
 800f7da:	42a0      	cmpeq	r0, r4
 800f7dc:	bf34      	ite	cc
 800f7de:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800f7e2:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800f7e6:	e73d      	b.n	800f664 <pow+0x9c>
 800f7e8:	2000      	movs	r0, #0
 800f7ea:	e7df      	b.n	800f7ac <pow+0x1e4>
 800f7ec:	42a9      	cmp	r1, r5
 800f7ee:	bf08      	it	eq
 800f7f0:	42a0      	cmpeq	r0, r4
 800f7f2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f7f6:	bf2c      	ite	cs
 800f7f8:	2301      	movcs	r3, #1
 800f7fa:	2300      	movcc	r3, #0
 800f7fc:	4590      	cmp	r8, r2
 800f7fe:	bf8c      	ite	hi
 800f800:	f04f 0800 	movhi.w	r8, #0
 800f804:	f04f 0801 	movls.w	r8, #1
 800f808:	4543      	cmp	r3, r8
 800f80a:	f04f 0000 	mov.w	r0, #0
 800f80e:	f000 80af 	beq.w	800f970 <pow+0x3a8>
 800f812:	b01b      	add	sp, #108	; 0x6c
 800f814:	ecbd 8b0a 	vpop	{d8-d12}
 800f818:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f81c:	f000 bed0 	b.w	80105c0 <__math_oflow>
 800f820:	f1bc 0f00 	cmp.w	ip, #0
 800f824:	d10e      	bne.n	800f844 <pow+0x27c>
 800f826:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800f980 <pow+0x3b8>
 800f82a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f82e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f832:	ec57 6b17 	vmov	r6, r7, d7
 800f836:	4b59      	ldr	r3, [pc, #356]	; (800f99c <pow+0x3d4>)
 800f838:	2100      	movs	r1, #0
 800f83a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800f83e:	1874      	adds	r4, r6, r1
 800f840:	eb42 0503 	adc.w	r5, r2, r3
 800f844:	2300      	movs	r3, #0
 800f846:	18e3      	adds	r3, r4, r3
 800f848:	4b55      	ldr	r3, [pc, #340]	; (800f9a0 <pow+0x3d8>)
 800f84a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800f84e:	eb45 0303 	adc.w	r3, r5, r3
 800f852:	1519      	asrs	r1, r3, #20
 800f854:	ee03 1a10 	vmov	s6, r1
 800f858:	0d1e      	lsrs	r6, r3, #20
 800f85a:	2100      	movs	r1, #0
 800f85c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800f860:	0536      	lsls	r6, r6, #20
 800f862:	1a63      	subs	r3, r4, r1
 800f864:	9312      	str	r3, [sp, #72]	; 0x48
 800f866:	eb65 0306 	sbc.w	r3, r5, r6
 800f86a:	9313      	str	r3, [sp, #76]	; 0x4c
 800f86c:	4b4d      	ldr	r3, [pc, #308]	; (800f9a4 <pow+0x3dc>)
 800f86e:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800f872:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f876:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800f87a:	eea5 6b07 	vfma.f64	d6, d5, d7
 800f87e:	ed93 7b00 	vldr	d7, [r3]
 800f882:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800f886:	ed93 4b02 	vldr	d4, [r3, #8]
 800f88a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800f88e:	eea3 5b07 	vfma.f64	d5, d3, d7
 800f892:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800f896:	ee36 9b05 	vadd.f64	d9, d6, d5
 800f89a:	ee35 5b49 	vsub.f64	d5, d5, d9
 800f89e:	eea3 7b04 	vfma.f64	d7, d3, d4
 800f8a2:	ed93 4b04 	vldr	d4, [r3, #16]
 800f8a6:	ee35 5b06 	vadd.f64	d5, d5, d6
 800f8aa:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f8ae:	ee26 4b04 	vmul.f64	d4, d6, d4
 800f8b2:	ed93 3b08 	vldr	d3, [r3, #32]
 800f8b6:	ee26 0b04 	vmul.f64	d0, d6, d4
 800f8ba:	eeb0 8b40 	vmov.f64	d8, d0
 800f8be:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800f8c2:	ed93 4b06 	vldr	d4, [r3, #24]
 800f8c6:	ee26 ab00 	vmul.f64	d10, d6, d0
 800f8ca:	ee39 1b00 	vadd.f64	d1, d9, d0
 800f8ce:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800f8d2:	eea6 4b03 	vfma.f64	d4, d6, d3
 800f8d6:	ee39 9b41 	vsub.f64	d9, d9, d1
 800f8da:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800f8de:	ee37 8b08 	vadd.f64	d8, d7, d8
 800f8e2:	ee39 9b00 	vadd.f64	d9, d9, d0
 800f8e6:	eea6 3b02 	vfma.f64	d3, d6, d2
 800f8ea:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800f8ee:	ee38 9b09 	vadd.f64	d9, d8, d9
 800f8f2:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800f8f6:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800f8fa:	ed9d 6b00 	vldr	d6, [sp]
 800f8fe:	eea0 3b02 	vfma.f64	d3, d0, d2
 800f902:	eea0 4b03 	vfma.f64	d4, d0, d3
 800f906:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800f90a:	ee31 7b09 	vadd.f64	d7, d1, d9
 800f90e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f912:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f916:	eeb0 3b46 	vmov.f64	d3, d6
 800f91a:	ee31 1b47 	vsub.f64	d1, d1, d7
 800f91e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f922:	ee31 9b09 	vadd.f64	d9, d1, d9
 800f926:	ed9d 6b00 	vldr	d6, [sp]
 800f92a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800f92e:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800f932:	193c      	adds	r4, r7, r4
 800f934:	2c3e      	cmp	r4, #62	; 0x3e
 800f936:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800f93a:	eea6 3b09 	vfma.f64	d3, d6, d9
 800f93e:	d934      	bls.n	800f9aa <pow+0x3e2>
 800f940:	428c      	cmp	r4, r1
 800f942:	da0d      	bge.n	800f960 <pow+0x398>
 800f944:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f948:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f94c:	ee37 0b00 	vadd.f64	d0, d7, d0
 800f950:	2800      	cmp	r0, #0
 800f952:	f43f ae87 	beq.w	800f664 <pow+0x9c>
 800f956:	eeb1 0b40 	vneg.f64	d0, d0
 800f95a:	e683      	b.n	800f664 <pow+0x9c>
 800f95c:	2000      	movs	r0, #0
 800f95e:	e771      	b.n	800f844 <pow+0x27c>
 800f960:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800f964:	d920      	bls.n	800f9a8 <pow+0x3e0>
 800f966:	2a00      	cmp	r2, #0
 800f968:	f173 0300 	sbcs.w	r3, r3, #0
 800f96c:	f6bf af51 	bge.w	800f812 <pow+0x24a>
 800f970:	b01b      	add	sp, #108	; 0x6c
 800f972:	ecbd 8b0a 	vpop	{d8-d12}
 800f976:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f97a:	f000 be19 	b.w	80105b0 <__math_uflow>
 800f97e:	bf00      	nop
 800f980:	00000000 	.word	0x00000000
 800f984:	43300000 	.word	0x43300000
 800f988:	fff00000 	.word	0xfff00000
 800f98c:	3ff00000 	.word	0x3ff00000
 800f990:	ffe00000 	.word	0xffe00000
 800f994:	7fe00000 	.word	0x7fe00000
 800f998:	7fdfffff 	.word	0x7fdfffff
 800f99c:	fcc00000 	.word	0xfcc00000
 800f9a0:	c0196aab 	.word	0xc0196aab
 800f9a4:	080131e0 	.word	0x080131e0
 800f9a8:	460f      	mov	r7, r1
 800f9aa:	4e65      	ldr	r6, [pc, #404]	; (800fb40 <pow+0x578>)
 800f9ac:	ed9d 4b02 	vldr	d4, [sp, #8]
 800f9b0:	ed96 6b02 	vldr	d6, [r6, #8]
 800f9b4:	ed96 7b00 	vldr	d7, [r6]
 800f9b8:	eeb0 5b46 	vmov.f64	d5, d6
 800f9bc:	eea4 5b07 	vfma.f64	d5, d4, d7
 800f9c0:	ed8d 5b00 	vstr	d5, [sp]
 800f9c4:	ee35 6b46 	vsub.f64	d6, d5, d6
 800f9c8:	eeb0 5b44 	vmov.f64	d5, d4
 800f9cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9d0:	ed96 7b04 	vldr	d7, [r6, #16]
 800f9d4:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800f9d8:	eea6 5b07 	vfma.f64	d5, d6, d7
 800f9dc:	eeb0 7b45 	vmov.f64	d7, d5
 800f9e0:	ed96 5b06 	vldr	d5, [r6, #24]
 800f9e4:	1849      	adds	r1, r1, r1
 800f9e6:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800f9ea:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800f9ee:	eea6 7b05 	vfma.f64	d7, d6, d5
 800f9f2:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800f9f6:	ee33 3b07 	vadd.f64	d3, d3, d7
 800f9fa:	ee23 6b03 	vmul.f64	d6, d3, d3
 800f9fe:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800fa02:	ed96 5b08 	vldr	d5, [r6, #32]
 800fa06:	ee33 7b07 	vadd.f64	d7, d3, d7
 800fa0a:	1814      	adds	r4, r2, r0
 800fa0c:	0365      	lsls	r5, r4, #13
 800fa0e:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800fa12:	eea3 5b04 	vfma.f64	d5, d3, d4
 800fa16:	eea6 7b05 	vfma.f64	d7, d6, d5
 800fa1a:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800fa1e:	ee26 6b06 	vmul.f64	d6, d6, d6
 800fa22:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800fa26:	2000      	movs	r0, #0
 800fa28:	eb10 0a04 	adds.w	sl, r0, r4
 800fa2c:	eea3 5b04 	vfma.f64	d5, d3, d4
 800fa30:	eb45 0b0c 	adc.w	fp, r5, ip
 800fa34:	eea6 7b05 	vfma.f64	d7, d6, d5
 800fa38:	2f00      	cmp	r7, #0
 800fa3a:	d16a      	bne.n	800fb12 <pow+0x54a>
 800fa3c:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800fa40:	4639      	mov	r1, r7
 800fa42:	ea50 0301 	orrs.w	r3, r0, r1
 800fa46:	f04f 0300 	mov.w	r3, #0
 800fa4a:	d115      	bne.n	800fa78 <pow+0x4b0>
 800fa4c:	eb1a 0303 	adds.w	r3, sl, r3
 800fa50:	ee0b 3a10 	vmov	s22, r3
 800fa54:	4b3b      	ldr	r3, [pc, #236]	; (800fb44 <pow+0x57c>)
 800fa56:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800fb28 <pow+0x560>
 800fa5a:	eb4b 0303 	adc.w	r3, fp, r3
 800fa5e:	ee0b 3a90 	vmov	s23, r3
 800fa62:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800fa66:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800fa6a:	b01b      	add	sp, #108	; 0x6c
 800fa6c:	ecbd 8b0a 	vpop	{d8-d12}
 800fa70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa74:	f000 bddc 	b.w	8010630 <__math_check_oflow>
 800fa78:	eb1a 0303 	adds.w	r3, sl, r3
 800fa7c:	930a      	str	r3, [sp, #40]	; 0x28
 800fa7e:	4b32      	ldr	r3, [pc, #200]	; (800fb48 <pow+0x580>)
 800fa80:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800fa84:	eb4b 0303 	adc.w	r3, fp, r3
 800fa88:	930b      	str	r3, [sp, #44]	; 0x2c
 800fa8a:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800fa8e:	ee27 6b05 	vmul.f64	d6, d7, d5
 800fa92:	ee35 7b06 	vadd.f64	d7, d5, d6
 800fa96:	eeb0 3bc7 	vabs.f64	d3, d7
 800fa9a:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800fa9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faa2:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800fb30 <pow+0x568>
 800faa6:	d52b      	bpl.n	800fb00 <pow+0x538>
 800faa8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800faac:	ee35 5b47 	vsub.f64	d5, d5, d7
 800fab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fab4:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800fab8:	ee35 6b06 	vadd.f64	d6, d5, d6
 800fabc:	bf48      	it	mi
 800fabe:	eeb0 4b43 	vmovmi.f64	d4, d3
 800fac2:	ee37 3b04 	vadd.f64	d3, d7, d4
 800fac6:	ee34 5b43 	vsub.f64	d5, d4, d3
 800faca:	ee35 7b07 	vadd.f64	d7, d5, d7
 800face:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fad2:	ee37 7b03 	vadd.f64	d7, d7, d3
 800fad6:	ee37 7b44 	vsub.f64	d7, d7, d4
 800fada:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fae2:	d105      	bne.n	800faf0 <pow+0x528>
 800fae4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fae6:	463a      	mov	r2, r7
 800fae8:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800faec:	ec43 2b17 	vmov	d7, r2, r3
 800faf0:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800faf4:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800faf8:	ee26 6b00 	vmul.f64	d6, d6, d0
 800fafc:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800fb00:	ee27 0b00 	vmul.f64	d0, d7, d0
 800fb04:	b01b      	add	sp, #108	; 0x6c
 800fb06:	ecbd 8b0a 	vpop	{d8-d12}
 800fb0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb0e:	f000 bd86 	b.w	801061e <__math_check_uflow>
 800fb12:	ec4b ab10 	vmov	d0, sl, fp
 800fb16:	eea7 0b00 	vfma.f64	d0, d7, d0
 800fb1a:	e5a3      	b.n	800f664 <pow+0x9c>
 800fb1c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800fb38 <pow+0x570>
 800fb20:	e5a0      	b.n	800f664 <pow+0x9c>
 800fb22:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fb26:	e59d      	b.n	800f664 <pow+0x9c>
 800fb28:	00000000 	.word	0x00000000
 800fb2c:	7f000000 	.word	0x7f000000
 800fb30:	00000000 	.word	0x00000000
 800fb34:	00100000 	.word	0x00100000
	...
 800fb40:	080143b0 	.word	0x080143b0
 800fb44:	c0f00000 	.word	0xc0f00000
 800fb48:	3fe00000 	.word	0x3fe00000
 800fb4c:	00000000 	.word	0x00000000

0800fb50 <cos>:
 800fb50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb52:	eeb0 7b40 	vmov.f64	d7, d0
 800fb56:	ee17 3a90 	vmov	r3, s15
 800fb5a:	4a1f      	ldr	r2, [pc, #124]	; (800fbd8 <cos+0x88>)
 800fb5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb60:	4293      	cmp	r3, r2
 800fb62:	dc04      	bgt.n	800fb6e <cos+0x1e>
 800fb64:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800fbd0 <cos+0x80>
 800fb68:	f000 f9c2 	bl	800fef0 <__kernel_cos>
 800fb6c:	e004      	b.n	800fb78 <cos+0x28>
 800fb6e:	4a1b      	ldr	r2, [pc, #108]	; (800fbdc <cos+0x8c>)
 800fb70:	4293      	cmp	r3, r2
 800fb72:	dd04      	ble.n	800fb7e <cos+0x2e>
 800fb74:	ee30 0b40 	vsub.f64	d0, d0, d0
 800fb78:	b005      	add	sp, #20
 800fb7a:	f85d fb04 	ldr.w	pc, [sp], #4
 800fb7e:	4668      	mov	r0, sp
 800fb80:	f000 f876 	bl	800fc70 <__ieee754_rem_pio2>
 800fb84:	f000 0003 	and.w	r0, r0, #3
 800fb88:	2801      	cmp	r0, #1
 800fb8a:	d007      	beq.n	800fb9c <cos+0x4c>
 800fb8c:	2802      	cmp	r0, #2
 800fb8e:	d00e      	beq.n	800fbae <cos+0x5e>
 800fb90:	b9a0      	cbnz	r0, 800fbbc <cos+0x6c>
 800fb92:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fb96:	ed9d 0b00 	vldr	d0, [sp]
 800fb9a:	e7e5      	b.n	800fb68 <cos+0x18>
 800fb9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fba0:	ed9d 0b00 	vldr	d0, [sp]
 800fba4:	f000 fc90 	bl	80104c8 <__kernel_sin>
 800fba8:	eeb1 0b40 	vneg.f64	d0, d0
 800fbac:	e7e4      	b.n	800fb78 <cos+0x28>
 800fbae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fbb2:	ed9d 0b00 	vldr	d0, [sp]
 800fbb6:	f000 f99b 	bl	800fef0 <__kernel_cos>
 800fbba:	e7f5      	b.n	800fba8 <cos+0x58>
 800fbbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fbc0:	ed9d 0b00 	vldr	d0, [sp]
 800fbc4:	2001      	movs	r0, #1
 800fbc6:	f000 fc7f 	bl	80104c8 <__kernel_sin>
 800fbca:	e7d5      	b.n	800fb78 <cos+0x28>
 800fbcc:	f3af 8000 	nop.w
	...
 800fbd8:	3fe921fb 	.word	0x3fe921fb
 800fbdc:	7fefffff 	.word	0x7fefffff

0800fbe0 <sin>:
 800fbe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fbe2:	eeb0 7b40 	vmov.f64	d7, d0
 800fbe6:	ee17 3a90 	vmov	r3, s15
 800fbea:	4a1f      	ldr	r2, [pc, #124]	; (800fc68 <sin+0x88>)
 800fbec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fbf0:	4293      	cmp	r3, r2
 800fbf2:	dc05      	bgt.n	800fc00 <sin+0x20>
 800fbf4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800fc60 <sin+0x80>
 800fbf8:	2000      	movs	r0, #0
 800fbfa:	f000 fc65 	bl	80104c8 <__kernel_sin>
 800fbfe:	e004      	b.n	800fc0a <sin+0x2a>
 800fc00:	4a1a      	ldr	r2, [pc, #104]	; (800fc6c <sin+0x8c>)
 800fc02:	4293      	cmp	r3, r2
 800fc04:	dd04      	ble.n	800fc10 <sin+0x30>
 800fc06:	ee30 0b40 	vsub.f64	d0, d0, d0
 800fc0a:	b005      	add	sp, #20
 800fc0c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc10:	4668      	mov	r0, sp
 800fc12:	f000 f82d 	bl	800fc70 <__ieee754_rem_pio2>
 800fc16:	f000 0003 	and.w	r0, r0, #3
 800fc1a:	2801      	cmp	r0, #1
 800fc1c:	d008      	beq.n	800fc30 <sin+0x50>
 800fc1e:	2802      	cmp	r0, #2
 800fc20:	d00d      	beq.n	800fc3e <sin+0x5e>
 800fc22:	b9b0      	cbnz	r0, 800fc52 <sin+0x72>
 800fc24:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fc28:	ed9d 0b00 	vldr	d0, [sp]
 800fc2c:	2001      	movs	r0, #1
 800fc2e:	e7e4      	b.n	800fbfa <sin+0x1a>
 800fc30:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fc34:	ed9d 0b00 	vldr	d0, [sp]
 800fc38:	f000 f95a 	bl	800fef0 <__kernel_cos>
 800fc3c:	e7e5      	b.n	800fc0a <sin+0x2a>
 800fc3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fc42:	ed9d 0b00 	vldr	d0, [sp]
 800fc46:	2001      	movs	r0, #1
 800fc48:	f000 fc3e 	bl	80104c8 <__kernel_sin>
 800fc4c:	eeb1 0b40 	vneg.f64	d0, d0
 800fc50:	e7db      	b.n	800fc0a <sin+0x2a>
 800fc52:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fc56:	ed9d 0b00 	vldr	d0, [sp]
 800fc5a:	f000 f949 	bl	800fef0 <__kernel_cos>
 800fc5e:	e7f5      	b.n	800fc4c <sin+0x6c>
	...
 800fc68:	3fe921fb 	.word	0x3fe921fb
 800fc6c:	7fefffff 	.word	0x7fefffff

0800fc70 <__ieee754_rem_pio2>:
 800fc70:	b570      	push	{r4, r5, r6, lr}
 800fc72:	eeb0 7b40 	vmov.f64	d7, d0
 800fc76:	ee17 5a90 	vmov	r5, s15
 800fc7a:	4b97      	ldr	r3, [pc, #604]	; (800fed8 <__ieee754_rem_pio2+0x268>)
 800fc7c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fc80:	429e      	cmp	r6, r3
 800fc82:	b088      	sub	sp, #32
 800fc84:	4604      	mov	r4, r0
 800fc86:	dc07      	bgt.n	800fc98 <__ieee754_rem_pio2+0x28>
 800fc88:	2200      	movs	r2, #0
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	ed84 0b00 	vstr	d0, [r4]
 800fc90:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fc94:	2000      	movs	r0, #0
 800fc96:	e01b      	b.n	800fcd0 <__ieee754_rem_pio2+0x60>
 800fc98:	4b90      	ldr	r3, [pc, #576]	; (800fedc <__ieee754_rem_pio2+0x26c>)
 800fc9a:	429e      	cmp	r6, r3
 800fc9c:	dc3b      	bgt.n	800fd16 <__ieee754_rem_pio2+0xa6>
 800fc9e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800fca2:	2d00      	cmp	r5, #0
 800fca4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800fe98 <__ieee754_rem_pio2+0x228>
 800fca8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800fcac:	dd19      	ble.n	800fce2 <__ieee754_rem_pio2+0x72>
 800fcae:	ee30 7b46 	vsub.f64	d7, d0, d6
 800fcb2:	429e      	cmp	r6, r3
 800fcb4:	d00e      	beq.n	800fcd4 <__ieee754_rem_pio2+0x64>
 800fcb6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800fea0 <__ieee754_rem_pio2+0x230>
 800fcba:	ee37 5b46 	vsub.f64	d5, d7, d6
 800fcbe:	ee37 7b45 	vsub.f64	d7, d7, d5
 800fcc2:	ed84 5b00 	vstr	d5, [r4]
 800fcc6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fcca:	ed84 7b02 	vstr	d7, [r4, #8]
 800fcce:	2001      	movs	r0, #1
 800fcd0:	b008      	add	sp, #32
 800fcd2:	bd70      	pop	{r4, r5, r6, pc}
 800fcd4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800fea8 <__ieee754_rem_pio2+0x238>
 800fcd8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fcdc:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800feb0 <__ieee754_rem_pio2+0x240>
 800fce0:	e7eb      	b.n	800fcba <__ieee754_rem_pio2+0x4a>
 800fce2:	429e      	cmp	r6, r3
 800fce4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800fce8:	d00e      	beq.n	800fd08 <__ieee754_rem_pio2+0x98>
 800fcea:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800fea0 <__ieee754_rem_pio2+0x230>
 800fcee:	ee37 5b06 	vadd.f64	d5, d7, d6
 800fcf2:	ee37 7b45 	vsub.f64	d7, d7, d5
 800fcf6:	ed84 5b00 	vstr	d5, [r4]
 800fcfa:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fcfe:	f04f 30ff 	mov.w	r0, #4294967295
 800fd02:	ed84 7b02 	vstr	d7, [r4, #8]
 800fd06:	e7e3      	b.n	800fcd0 <__ieee754_rem_pio2+0x60>
 800fd08:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800fea8 <__ieee754_rem_pio2+0x238>
 800fd0c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fd10:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800feb0 <__ieee754_rem_pio2+0x240>
 800fd14:	e7eb      	b.n	800fcee <__ieee754_rem_pio2+0x7e>
 800fd16:	4b72      	ldr	r3, [pc, #456]	; (800fee0 <__ieee754_rem_pio2+0x270>)
 800fd18:	429e      	cmp	r6, r3
 800fd1a:	dc6e      	bgt.n	800fdfa <__ieee754_rem_pio2+0x18a>
 800fd1c:	f000 fc9c 	bl	8010658 <fabs>
 800fd20:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800fd24:	ed9f 6b64 	vldr	d6, [pc, #400]	; 800feb8 <__ieee754_rem_pio2+0x248>
 800fd28:	eea0 7b06 	vfma.f64	d7, d0, d6
 800fd2c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800fd30:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800fd34:	ee17 0a90 	vmov	r0, s15
 800fd38:	eeb1 4b45 	vneg.f64	d4, d5
 800fd3c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800fe98 <__ieee754_rem_pio2+0x228>
 800fd40:	eea5 0b47 	vfms.f64	d0, d5, d7
 800fd44:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800fea0 <__ieee754_rem_pio2+0x230>
 800fd48:	281f      	cmp	r0, #31
 800fd4a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800fd4e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800fd52:	dc08      	bgt.n	800fd66 <__ieee754_rem_pio2+0xf6>
 800fd54:	4b63      	ldr	r3, [pc, #396]	; (800fee4 <__ieee754_rem_pio2+0x274>)
 800fd56:	1e42      	subs	r2, r0, #1
 800fd58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd5c:	42b3      	cmp	r3, r6
 800fd5e:	d002      	beq.n	800fd66 <__ieee754_rem_pio2+0xf6>
 800fd60:	ed84 6b00 	vstr	d6, [r4]
 800fd64:	e024      	b.n	800fdb0 <__ieee754_rem_pio2+0x140>
 800fd66:	ee16 3a90 	vmov	r3, s13
 800fd6a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800fd6e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800fd72:	2b10      	cmp	r3, #16
 800fd74:	ea4f 5226 	mov.w	r2, r6, asr #20
 800fd78:	ddf2      	ble.n	800fd60 <__ieee754_rem_pio2+0xf0>
 800fd7a:	eeb0 6b40 	vmov.f64	d6, d0
 800fd7e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800fea8 <__ieee754_rem_pio2+0x238>
 800fd82:	eea4 6b03 	vfma.f64	d6, d4, d3
 800fd86:	ee30 7b46 	vsub.f64	d7, d0, d6
 800fd8a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800fd8e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 800feb0 <__ieee754_rem_pio2+0x240>
 800fd92:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800fd96:	ee36 3b47 	vsub.f64	d3, d6, d7
 800fd9a:	ee13 3a90 	vmov	r3, s7
 800fd9e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800fda2:	1ad3      	subs	r3, r2, r3
 800fda4:	2b31      	cmp	r3, #49	; 0x31
 800fda6:	dc17      	bgt.n	800fdd8 <__ieee754_rem_pio2+0x168>
 800fda8:	eeb0 0b46 	vmov.f64	d0, d6
 800fdac:	ed84 3b00 	vstr	d3, [r4]
 800fdb0:	ed94 6b00 	vldr	d6, [r4]
 800fdb4:	2d00      	cmp	r5, #0
 800fdb6:	ee30 0b46 	vsub.f64	d0, d0, d6
 800fdba:	ee30 7b47 	vsub.f64	d7, d0, d7
 800fdbe:	ed84 7b02 	vstr	d7, [r4, #8]
 800fdc2:	da85      	bge.n	800fcd0 <__ieee754_rem_pio2+0x60>
 800fdc4:	eeb1 6b46 	vneg.f64	d6, d6
 800fdc8:	ed84 6b00 	vstr	d6, [r4]
 800fdcc:	eeb1 7b47 	vneg.f64	d7, d7
 800fdd0:	4240      	negs	r0, r0
 800fdd2:	ed84 7b02 	vstr	d7, [r4, #8]
 800fdd6:	e77b      	b.n	800fcd0 <__ieee754_rem_pio2+0x60>
 800fdd8:	ed9f 3b39 	vldr	d3, [pc, #228]	; 800fec0 <__ieee754_rem_pio2+0x250>
 800fddc:	eeb0 0b46 	vmov.f64	d0, d6
 800fde0:	eea4 0b03 	vfma.f64	d0, d4, d3
 800fde4:	ee36 7b40 	vsub.f64	d7, d6, d0
 800fde8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 800fec8 <__ieee754_rem_pio2+0x258>
 800fdec:	eea4 7b03 	vfma.f64	d7, d4, d3
 800fdf0:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800fdf4:	ee30 6b47 	vsub.f64	d6, d0, d7
 800fdf8:	e7b2      	b.n	800fd60 <__ieee754_rem_pio2+0xf0>
 800fdfa:	4b3b      	ldr	r3, [pc, #236]	; (800fee8 <__ieee754_rem_pio2+0x278>)
 800fdfc:	429e      	cmp	r6, r3
 800fdfe:	dd06      	ble.n	800fe0e <__ieee754_rem_pio2+0x19e>
 800fe00:	ee30 7b40 	vsub.f64	d7, d0, d0
 800fe04:	ed80 7b02 	vstr	d7, [r0, #8]
 800fe08:	ed80 7b00 	vstr	d7, [r0]
 800fe0c:	e742      	b.n	800fc94 <__ieee754_rem_pio2+0x24>
 800fe0e:	1532      	asrs	r2, r6, #20
 800fe10:	ee10 0a10 	vmov	r0, s0
 800fe14:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800fe18:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800fe1c:	ec41 0b17 	vmov	d7, r0, r1
 800fe20:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800fe24:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800fed0 <__ieee754_rem_pio2+0x260>
 800fe28:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800fe2c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fe30:	ed8d 6b02 	vstr	d6, [sp, #8]
 800fe34:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fe38:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800fe3c:	a902      	add	r1, sp, #8
 800fe3e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800fe42:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fe46:	ed8d 6b04 	vstr	d6, [sp, #16]
 800fe4a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fe4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fe52:	2603      	movs	r6, #3
 800fe54:	4608      	mov	r0, r1
 800fe56:	ed91 7b04 	vldr	d7, [r1, #16]
 800fe5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fe5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe62:	4633      	mov	r3, r6
 800fe64:	f1a1 0108 	sub.w	r1, r1, #8
 800fe68:	f106 36ff 	add.w	r6, r6, #4294967295
 800fe6c:	d0f3      	beq.n	800fe56 <__ieee754_rem_pio2+0x1e6>
 800fe6e:	491f      	ldr	r1, [pc, #124]	; (800feec <__ieee754_rem_pio2+0x27c>)
 800fe70:	9101      	str	r1, [sp, #4]
 800fe72:	2102      	movs	r1, #2
 800fe74:	9100      	str	r1, [sp, #0]
 800fe76:	4621      	mov	r1, r4
 800fe78:	f000 f8a6 	bl	800ffc8 <__kernel_rem_pio2>
 800fe7c:	2d00      	cmp	r5, #0
 800fe7e:	f6bf af27 	bge.w	800fcd0 <__ieee754_rem_pio2+0x60>
 800fe82:	ed94 7b00 	vldr	d7, [r4]
 800fe86:	eeb1 7b47 	vneg.f64	d7, d7
 800fe8a:	ed84 7b00 	vstr	d7, [r4]
 800fe8e:	ed94 7b02 	vldr	d7, [r4, #8]
 800fe92:	e79b      	b.n	800fdcc <__ieee754_rem_pio2+0x15c>
 800fe94:	f3af 8000 	nop.w
 800fe98:	54400000 	.word	0x54400000
 800fe9c:	3ff921fb 	.word	0x3ff921fb
 800fea0:	1a626331 	.word	0x1a626331
 800fea4:	3dd0b461 	.word	0x3dd0b461
 800fea8:	1a600000 	.word	0x1a600000
 800feac:	3dd0b461 	.word	0x3dd0b461
 800feb0:	2e037073 	.word	0x2e037073
 800feb4:	3ba3198a 	.word	0x3ba3198a
 800feb8:	6dc9c883 	.word	0x6dc9c883
 800febc:	3fe45f30 	.word	0x3fe45f30
 800fec0:	2e000000 	.word	0x2e000000
 800fec4:	3ba3198a 	.word	0x3ba3198a
 800fec8:	252049c1 	.word	0x252049c1
 800fecc:	397b839a 	.word	0x397b839a
 800fed0:	00000000 	.word	0x00000000
 800fed4:	41700000 	.word	0x41700000
 800fed8:	3fe921fb 	.word	0x3fe921fb
 800fedc:	4002d97b 	.word	0x4002d97b
 800fee0:	413921fb 	.word	0x413921fb
 800fee4:	08014228 	.word	0x08014228
 800fee8:	7fefffff 	.word	0x7fefffff
 800feec:	080142a8 	.word	0x080142a8

0800fef0 <__kernel_cos>:
 800fef0:	ee10 1a90 	vmov	r1, s1
 800fef4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800fef8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800fefc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800ff00:	da05      	bge.n	800ff0e <__kernel_cos+0x1e>
 800ff02:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800ff06:	ee17 3a90 	vmov	r3, s15
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d03d      	beq.n	800ff8a <__kernel_cos+0x9a>
 800ff0e:	ee20 3b00 	vmul.f64	d3, d0, d0
 800ff12:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800ff90 <__kernel_cos+0xa0>
 800ff16:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800ff98 <__kernel_cos+0xa8>
 800ff1a:	eea3 6b07 	vfma.f64	d6, d3, d7
 800ff1e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ffa0 <__kernel_cos+0xb0>
 800ff22:	eea6 7b03 	vfma.f64	d7, d6, d3
 800ff26:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800ffa8 <__kernel_cos+0xb8>
 800ff2a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800ff2e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ffb0 <__kernel_cos+0xc0>
 800ff32:	4b23      	ldr	r3, [pc, #140]	; (800ffc0 <__kernel_cos+0xd0>)
 800ff34:	eea6 7b03 	vfma.f64	d7, d6, d3
 800ff38:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800ffb8 <__kernel_cos+0xc8>
 800ff3c:	4299      	cmp	r1, r3
 800ff3e:	eea7 6b03 	vfma.f64	d6, d7, d3
 800ff42:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ff46:	ee26 5b03 	vmul.f64	d5, d6, d3
 800ff4a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800ff4e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800ff52:	eea3 6b05 	vfma.f64	d6, d3, d5
 800ff56:	dc04      	bgt.n	800ff62 <__kernel_cos+0x72>
 800ff58:	ee37 6b46 	vsub.f64	d6, d7, d6
 800ff5c:	ee34 0b46 	vsub.f64	d0, d4, d6
 800ff60:	4770      	bx	lr
 800ff62:	4b18      	ldr	r3, [pc, #96]	; (800ffc4 <__kernel_cos+0xd4>)
 800ff64:	4299      	cmp	r1, r3
 800ff66:	dc0d      	bgt.n	800ff84 <__kernel_cos+0x94>
 800ff68:	2200      	movs	r2, #0
 800ff6a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800ff6e:	ec43 2b15 	vmov	d5, r2, r3
 800ff72:	ee34 0b45 	vsub.f64	d0, d4, d5
 800ff76:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ff7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ff7e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ff82:	4770      	bx	lr
 800ff84:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800ff88:	e7f3      	b.n	800ff72 <__kernel_cos+0x82>
 800ff8a:	eeb0 0b44 	vmov.f64	d0, d4
 800ff8e:	4770      	bx	lr
 800ff90:	be8838d4 	.word	0xbe8838d4
 800ff94:	bda8fae9 	.word	0xbda8fae9
 800ff98:	bdb4b1c4 	.word	0xbdb4b1c4
 800ff9c:	3e21ee9e 	.word	0x3e21ee9e
 800ffa0:	809c52ad 	.word	0x809c52ad
 800ffa4:	be927e4f 	.word	0xbe927e4f
 800ffa8:	19cb1590 	.word	0x19cb1590
 800ffac:	3efa01a0 	.word	0x3efa01a0
 800ffb0:	16c15177 	.word	0x16c15177
 800ffb4:	bf56c16c 	.word	0xbf56c16c
 800ffb8:	5555554c 	.word	0x5555554c
 800ffbc:	3fa55555 	.word	0x3fa55555
 800ffc0:	3fd33332 	.word	0x3fd33332
 800ffc4:	3fe90000 	.word	0x3fe90000

0800ffc8 <__kernel_rem_pio2>:
 800ffc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffcc:	ed2d 8b06 	vpush	{d8-d10}
 800ffd0:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800ffd4:	469b      	mov	fp, r3
 800ffd6:	460f      	mov	r7, r1
 800ffd8:	4bcf      	ldr	r3, [pc, #828]	; (8010318 <__kernel_rem_pio2+0x350>)
 800ffda:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800ffdc:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 800ffe0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800ffe4:	9000      	str	r0, [sp, #0]
 800ffe6:	f112 0f14 	cmn.w	r2, #20
 800ffea:	bfa8      	it	ge
 800ffec:	2318      	movge	r3, #24
 800ffee:	f10b 31ff 	add.w	r1, fp, #4294967295
 800fff2:	bfb8      	it	lt
 800fff4:	2300      	movlt	r3, #0
 800fff6:	f06f 0417 	mvn.w	r4, #23
 800fffa:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8010300 <__kernel_rem_pio2+0x338>
 800fffe:	bfa4      	itt	ge
 8010000:	f1a2 0a03 	subge.w	sl, r2, #3
 8010004:	fb9a f3f3 	sdivge	r3, sl, r3
 8010008:	fb03 4404 	mla	r4, r3, r4, r4
 801000c:	1a5d      	subs	r5, r3, r1
 801000e:	4414      	add	r4, r2
 8010010:	eb09 0601 	add.w	r6, r9, r1
 8010014:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8010018:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 801001c:	2200      	movs	r2, #0
 801001e:	42b2      	cmp	r2, r6
 8010020:	dd12      	ble.n	8010048 <__kernel_rem_pio2+0x80>
 8010022:	aa18      	add	r2, sp, #96	; 0x60
 8010024:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8010028:	460e      	mov	r6, r1
 801002a:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 801002e:	f1cb 0a01 	rsb	sl, fp, #1
 8010032:	eb0a 0006 	add.w	r0, sl, r6
 8010036:	4581      	cmp	r9, r0
 8010038:	db25      	blt.n	8010086 <__kernel_rem_pio2+0xbe>
 801003a:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8010300 <__kernel_rem_pio2+0x338>
 801003e:	f8dd e000 	ldr.w	lr, [sp]
 8010042:	4615      	mov	r5, r2
 8010044:	2000      	movs	r0, #0
 8010046:	e015      	b.n	8010074 <__kernel_rem_pio2+0xac>
 8010048:	42d5      	cmn	r5, r2
 801004a:	d409      	bmi.n	8010060 <__kernel_rem_pio2+0x98>
 801004c:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8010050:	ee07 0a90 	vmov	s15, r0
 8010054:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010058:	eca8 7b02 	vstmia	r8!, {d7}
 801005c:	3201      	adds	r2, #1
 801005e:	e7de      	b.n	801001e <__kernel_rem_pio2+0x56>
 8010060:	eeb0 7b46 	vmov.f64	d7, d6
 8010064:	e7f8      	b.n	8010058 <__kernel_rem_pio2+0x90>
 8010066:	ecbe 5b02 	vldmia	lr!, {d5}
 801006a:	ed95 6b00 	vldr	d6, [r5]
 801006e:	3001      	adds	r0, #1
 8010070:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010074:	4288      	cmp	r0, r1
 8010076:	f1a5 0508 	sub.w	r5, r5, #8
 801007a:	ddf4      	ble.n	8010066 <__kernel_rem_pio2+0x9e>
 801007c:	eca8 7b02 	vstmia	r8!, {d7}
 8010080:	3208      	adds	r2, #8
 8010082:	3601      	adds	r6, #1
 8010084:	e7d5      	b.n	8010032 <__kernel_rem_pio2+0x6a>
 8010086:	aa04      	add	r2, sp, #16
 8010088:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8010308 <__kernel_rem_pio2+0x340>
 801008c:	ed9f aba0 	vldr	d10, [pc, #640]	; 8010310 <__kernel_rem_pio2+0x348>
 8010090:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8010094:	9201      	str	r2, [sp, #4]
 8010096:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 801009a:	464e      	mov	r6, r9
 801009c:	ab90      	add	r3, sp, #576	; 0x240
 801009e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80100a2:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 80100a6:	ab04      	add	r3, sp, #16
 80100a8:	4618      	mov	r0, r3
 80100aa:	4632      	mov	r2, r6
 80100ac:	2a00      	cmp	r2, #0
 80100ae:	dc4e      	bgt.n	801014e <__kernel_rem_pio2+0x186>
 80100b0:	4620      	mov	r0, r4
 80100b2:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80100b6:	f000 fb4f 	bl	8010758 <scalbn>
 80100ba:	eeb0 8b40 	vmov.f64	d8, d0
 80100be:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80100c2:	ee28 0b00 	vmul.f64	d0, d8, d0
 80100c6:	f000 fad3 	bl	8010670 <floor>
 80100ca:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80100ce:	eea0 8b47 	vfms.f64	d8, d0, d7
 80100d2:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80100d6:	2c00      	cmp	r4, #0
 80100d8:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80100dc:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 80100e0:	ee38 8b40 	vsub.f64	d8, d8, d0
 80100e4:	ee17 8a90 	vmov	r8, s15
 80100e8:	dd46      	ble.n	8010178 <__kernel_rem_pio2+0x1b0>
 80100ea:	1e70      	subs	r0, r6, #1
 80100ec:	aa04      	add	r2, sp, #16
 80100ee:	f1c4 0c18 	rsb	ip, r4, #24
 80100f2:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 80100f6:	fa45 f20c 	asr.w	r2, r5, ip
 80100fa:	4490      	add	r8, r2
 80100fc:	fa02 f20c 	lsl.w	r2, r2, ip
 8010100:	1aad      	subs	r5, r5, r2
 8010102:	aa04      	add	r2, sp, #16
 8010104:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8010108:	f1c4 0217 	rsb	r2, r4, #23
 801010c:	4115      	asrs	r5, r2
 801010e:	2d00      	cmp	r5, #0
 8010110:	dd41      	ble.n	8010196 <__kernel_rem_pio2+0x1ce>
 8010112:	f04f 0c00 	mov.w	ip, #0
 8010116:	f108 0801 	add.w	r8, r8, #1
 801011a:	4660      	mov	r0, ip
 801011c:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8010120:	4566      	cmp	r6, ip
 8010122:	dc69      	bgt.n	80101f8 <__kernel_rem_pio2+0x230>
 8010124:	2c00      	cmp	r4, #0
 8010126:	dd03      	ble.n	8010130 <__kernel_rem_pio2+0x168>
 8010128:	2c01      	cmp	r4, #1
 801012a:	d076      	beq.n	801021a <__kernel_rem_pio2+0x252>
 801012c:	2c02      	cmp	r4, #2
 801012e:	d07f      	beq.n	8010230 <__kernel_rem_pio2+0x268>
 8010130:	2d02      	cmp	r5, #2
 8010132:	d130      	bne.n	8010196 <__kernel_rem_pio2+0x1ce>
 8010134:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010138:	ee30 8b48 	vsub.f64	d8, d0, d8
 801013c:	b358      	cbz	r0, 8010196 <__kernel_rem_pio2+0x1ce>
 801013e:	4620      	mov	r0, r4
 8010140:	9102      	str	r1, [sp, #8]
 8010142:	f000 fb09 	bl	8010758 <scalbn>
 8010146:	9902      	ldr	r1, [sp, #8]
 8010148:	ee38 8b40 	vsub.f64	d8, d8, d0
 801014c:	e023      	b.n	8010196 <__kernel_rem_pio2+0x1ce>
 801014e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8010152:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010156:	3a01      	subs	r2, #1
 8010158:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801015c:	ad68      	add	r5, sp, #416	; 0x1a0
 801015e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8010162:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010166:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 801016a:	eca0 0a01 	vstmia	r0!, {s0}
 801016e:	ed95 0b00 	vldr	d0, [r5]
 8010172:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010176:	e799      	b.n	80100ac <__kernel_rem_pio2+0xe4>
 8010178:	d105      	bne.n	8010186 <__kernel_rem_pio2+0x1be>
 801017a:	1e72      	subs	r2, r6, #1
 801017c:	a804      	add	r0, sp, #16
 801017e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8010182:	15ed      	asrs	r5, r5, #23
 8010184:	e7c3      	b.n	801010e <__kernel_rem_pio2+0x146>
 8010186:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801018a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801018e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010192:	da2f      	bge.n	80101f4 <__kernel_rem_pio2+0x22c>
 8010194:	2500      	movs	r5, #0
 8010196:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801019a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801019e:	f040 8087 	bne.w	80102b0 <__kernel_rem_pio2+0x2e8>
 80101a2:	1e73      	subs	r3, r6, #1
 80101a4:	4618      	mov	r0, r3
 80101a6:	f04f 0c00 	mov.w	ip, #0
 80101aa:	4548      	cmp	r0, r9
 80101ac:	da47      	bge.n	801023e <__kernel_rem_pio2+0x276>
 80101ae:	f1bc 0f00 	cmp.w	ip, #0
 80101b2:	d070      	beq.n	8010296 <__kernel_rem_pio2+0x2ce>
 80101b4:	aa04      	add	r2, sp, #16
 80101b6:	3c18      	subs	r4, #24
 80101b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80101bc:	2a00      	cmp	r2, #0
 80101be:	d075      	beq.n	80102ac <__kernel_rem_pio2+0x2e4>
 80101c0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80101c4:	4620      	mov	r0, r4
 80101c6:	9300      	str	r3, [sp, #0]
 80101c8:	f000 fac6 	bl	8010758 <scalbn>
 80101cc:	9b00      	ldr	r3, [sp, #0]
 80101ce:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010308 <__kernel_rem_pio2+0x340>
 80101d2:	461a      	mov	r2, r3
 80101d4:	2a00      	cmp	r2, #0
 80101d6:	f280 80ac 	bge.w	8010332 <__kernel_rem_pio2+0x36a>
 80101da:	4619      	mov	r1, r3
 80101dc:	2000      	movs	r0, #0
 80101de:	2900      	cmp	r1, #0
 80101e0:	f2c0 80cd 	blt.w	801037e <__kernel_rem_pio2+0x3b6>
 80101e4:	aa68      	add	r2, sp, #416	; 0x1a0
 80101e6:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 80101ea:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8010300 <__kernel_rem_pio2+0x338>
 80101ee:	4e4b      	ldr	r6, [pc, #300]	; (801031c <__kernel_rem_pio2+0x354>)
 80101f0:	2200      	movs	r2, #0
 80101f2:	e0b8      	b.n	8010366 <__kernel_rem_pio2+0x39e>
 80101f4:	2502      	movs	r5, #2
 80101f6:	e78c      	b.n	8010112 <__kernel_rem_pio2+0x14a>
 80101f8:	681a      	ldr	r2, [r3, #0]
 80101fa:	b948      	cbnz	r0, 8010210 <__kernel_rem_pio2+0x248>
 80101fc:	b11a      	cbz	r2, 8010206 <__kernel_rem_pio2+0x23e>
 80101fe:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8010202:	601a      	str	r2, [r3, #0]
 8010204:	2201      	movs	r2, #1
 8010206:	f10c 0c01 	add.w	ip, ip, #1
 801020a:	3304      	adds	r3, #4
 801020c:	4610      	mov	r0, r2
 801020e:	e787      	b.n	8010120 <__kernel_rem_pio2+0x158>
 8010210:	ebae 0202 	sub.w	r2, lr, r2
 8010214:	601a      	str	r2, [r3, #0]
 8010216:	4602      	mov	r2, r0
 8010218:	e7f5      	b.n	8010206 <__kernel_rem_pio2+0x23e>
 801021a:	1e72      	subs	r2, r6, #1
 801021c:	ab04      	add	r3, sp, #16
 801021e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010222:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010226:	f10d 0c10 	add.w	ip, sp, #16
 801022a:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 801022e:	e77f      	b.n	8010130 <__kernel_rem_pio2+0x168>
 8010230:	1e72      	subs	r2, r6, #1
 8010232:	ab04      	add	r3, sp, #16
 8010234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010238:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801023c:	e7f3      	b.n	8010226 <__kernel_rem_pio2+0x25e>
 801023e:	aa04      	add	r2, sp, #16
 8010240:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8010244:	3801      	subs	r0, #1
 8010246:	ea4c 0c02 	orr.w	ip, ip, r2
 801024a:	e7ae      	b.n	80101aa <__kernel_rem_pio2+0x1e2>
 801024c:	3001      	adds	r0, #1
 801024e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010252:	2a00      	cmp	r2, #0
 8010254:	d0fa      	beq.n	801024c <__kernel_rem_pio2+0x284>
 8010256:	eb06 020b 	add.w	r2, r6, fp
 801025a:	ad18      	add	r5, sp, #96	; 0x60
 801025c:	1c73      	adds	r3, r6, #1
 801025e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8010262:	4406      	add	r6, r0
 8010264:	429e      	cmp	r6, r3
 8010266:	f6ff af19 	blt.w	801009c <__kernel_rem_pio2+0xd4>
 801026a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 801026e:	9d00      	ldr	r5, [sp, #0]
 8010270:	ee07 0a90 	vmov	s15, r0
 8010274:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010278:	2000      	movs	r0, #0
 801027a:	eca2 7b02 	vstmia	r2!, {d7}
 801027e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010300 <__kernel_rem_pio2+0x338>
 8010282:	4694      	mov	ip, r2
 8010284:	4288      	cmp	r0, r1
 8010286:	dd09      	ble.n	801029c <__kernel_rem_pio2+0x2d4>
 8010288:	a868      	add	r0, sp, #416	; 0x1a0
 801028a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 801028e:	ed80 7b00 	vstr	d7, [r0]
 8010292:	3301      	adds	r3, #1
 8010294:	e7e6      	b.n	8010264 <__kernel_rem_pio2+0x29c>
 8010296:	9b01      	ldr	r3, [sp, #4]
 8010298:	2001      	movs	r0, #1
 801029a:	e7d8      	b.n	801024e <__kernel_rem_pio2+0x286>
 801029c:	ecb5 5b02 	vldmia	r5!, {d5}
 80102a0:	ed3c 6b02 	vldmdb	ip!, {d6}
 80102a4:	3001      	adds	r0, #1
 80102a6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80102aa:	e7eb      	b.n	8010284 <__kernel_rem_pio2+0x2bc>
 80102ac:	3b01      	subs	r3, #1
 80102ae:	e781      	b.n	80101b4 <__kernel_rem_pio2+0x1ec>
 80102b0:	4260      	negs	r0, r4
 80102b2:	eeb0 0b48 	vmov.f64	d0, d8
 80102b6:	f000 fa4f 	bl	8010758 <scalbn>
 80102ba:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8010310 <__kernel_rem_pio2+0x348>
 80102be:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80102c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102c6:	db2b      	blt.n	8010320 <__kernel_rem_pio2+0x358>
 80102c8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8010308 <__kernel_rem_pio2+0x340>
 80102cc:	ee20 7b07 	vmul.f64	d7, d0, d7
 80102d0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80102d4:	aa04      	add	r2, sp, #16
 80102d6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80102da:	eea5 0b46 	vfms.f64	d0, d5, d6
 80102de:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80102e2:	a904      	add	r1, sp, #16
 80102e4:	ee10 3a10 	vmov	r3, s0
 80102e8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80102ec:	ee17 2a10 	vmov	r2, s14
 80102f0:	1c73      	adds	r3, r6, #1
 80102f2:	3418      	adds	r4, #24
 80102f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80102f8:	e762      	b.n	80101c0 <__kernel_rem_pio2+0x1f8>
 80102fa:	bf00      	nop
 80102fc:	f3af 8000 	nop.w
	...
 801030c:	3e700000 	.word	0x3e700000
 8010310:	00000000 	.word	0x00000000
 8010314:	41700000 	.word	0x41700000
 8010318:	08014c60 	.word	0x08014c60
 801031c:	08014c20 	.word	0x08014c20
 8010320:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010324:	aa04      	add	r2, sp, #16
 8010326:	ee10 3a10 	vmov	r3, s0
 801032a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801032e:	4633      	mov	r3, r6
 8010330:	e746      	b.n	80101c0 <__kernel_rem_pio2+0x1f8>
 8010332:	a804      	add	r0, sp, #16
 8010334:	a968      	add	r1, sp, #416	; 0x1a0
 8010336:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801033a:	9000      	str	r0, [sp, #0]
 801033c:	ee07 0a90 	vmov	s15, r0
 8010340:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010344:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010348:	3a01      	subs	r2, #1
 801034a:	ee27 7b00 	vmul.f64	d7, d7, d0
 801034e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8010352:	ed81 7b00 	vstr	d7, [r1]
 8010356:	e73d      	b.n	80101d4 <__kernel_rem_pio2+0x20c>
 8010358:	ecb6 5b02 	vldmia	r6!, {d5}
 801035c:	ecb4 6b02 	vldmia	r4!, {d6}
 8010360:	3201      	adds	r2, #1
 8010362:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010366:	454a      	cmp	r2, r9
 8010368:	dc01      	bgt.n	801036e <__kernel_rem_pio2+0x3a6>
 801036a:	4290      	cmp	r0, r2
 801036c:	daf4      	bge.n	8010358 <__kernel_rem_pio2+0x390>
 801036e:	aa40      	add	r2, sp, #256	; 0x100
 8010370:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010374:	ed82 7b00 	vstr	d7, [r2]
 8010378:	3901      	subs	r1, #1
 801037a:	3001      	adds	r0, #1
 801037c:	e72f      	b.n	80101de <__kernel_rem_pio2+0x216>
 801037e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8010380:	2a02      	cmp	r2, #2
 8010382:	dc0a      	bgt.n	801039a <__kernel_rem_pio2+0x3d2>
 8010384:	2a00      	cmp	r2, #0
 8010386:	dc5a      	bgt.n	801043e <__kernel_rem_pio2+0x476>
 8010388:	d039      	beq.n	80103fe <__kernel_rem_pio2+0x436>
 801038a:	f008 0007 	and.w	r0, r8, #7
 801038e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8010392:	ecbd 8b06 	vpop	{d8-d10}
 8010396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801039a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 801039c:	2a03      	cmp	r2, #3
 801039e:	d1f4      	bne.n	801038a <__kernel_rem_pio2+0x3c2>
 80103a0:	aa40      	add	r2, sp, #256	; 0x100
 80103a2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80103a6:	4611      	mov	r1, r2
 80103a8:	4618      	mov	r0, r3
 80103aa:	2800      	cmp	r0, #0
 80103ac:	f1a1 0108 	sub.w	r1, r1, #8
 80103b0:	dc52      	bgt.n	8010458 <__kernel_rem_pio2+0x490>
 80103b2:	4619      	mov	r1, r3
 80103b4:	2901      	cmp	r1, #1
 80103b6:	f1a2 0208 	sub.w	r2, r2, #8
 80103ba:	dc5d      	bgt.n	8010478 <__kernel_rem_pio2+0x4b0>
 80103bc:	ed9f 7b40 	vldr	d7, [pc, #256]	; 80104c0 <__kernel_rem_pio2+0x4f8>
 80103c0:	2b01      	cmp	r3, #1
 80103c2:	dc69      	bgt.n	8010498 <__kernel_rem_pio2+0x4d0>
 80103c4:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 80103c8:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 80103cc:	2d00      	cmp	r5, #0
 80103ce:	d16c      	bne.n	80104aa <__kernel_rem_pio2+0x4e2>
 80103d0:	ed87 5b00 	vstr	d5, [r7]
 80103d4:	ed87 6b02 	vstr	d6, [r7, #8]
 80103d8:	ed87 7b04 	vstr	d7, [r7, #16]
 80103dc:	e7d5      	b.n	801038a <__kernel_rem_pio2+0x3c2>
 80103de:	aa40      	add	r2, sp, #256	; 0x100
 80103e0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80103e4:	ed92 6b00 	vldr	d6, [r2]
 80103e8:	3b01      	subs	r3, #1
 80103ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	daf5      	bge.n	80103de <__kernel_rem_pio2+0x416>
 80103f2:	b10d      	cbz	r5, 80103f8 <__kernel_rem_pio2+0x430>
 80103f4:	eeb1 7b47 	vneg.f64	d7, d7
 80103f8:	ed87 7b00 	vstr	d7, [r7]
 80103fc:	e7c5      	b.n	801038a <__kernel_rem_pio2+0x3c2>
 80103fe:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80104c0 <__kernel_rem_pio2+0x4f8>
 8010402:	e7f4      	b.n	80103ee <__kernel_rem_pio2+0x426>
 8010404:	a940      	add	r1, sp, #256	; 0x100
 8010406:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801040a:	ed91 7b00 	vldr	d7, [r1]
 801040e:	3a01      	subs	r2, #1
 8010410:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010414:	2a00      	cmp	r2, #0
 8010416:	daf5      	bge.n	8010404 <__kernel_rem_pio2+0x43c>
 8010418:	b1ad      	cbz	r5, 8010446 <__kernel_rem_pio2+0x47e>
 801041a:	eeb1 7b46 	vneg.f64	d7, d6
 801041e:	ed87 7b00 	vstr	d7, [r7]
 8010422:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8010426:	a942      	add	r1, sp, #264	; 0x108
 8010428:	2201      	movs	r2, #1
 801042a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801042e:	4293      	cmp	r3, r2
 8010430:	da0c      	bge.n	801044c <__kernel_rem_pio2+0x484>
 8010432:	b10d      	cbz	r5, 8010438 <__kernel_rem_pio2+0x470>
 8010434:	eeb1 7b47 	vneg.f64	d7, d7
 8010438:	ed87 7b02 	vstr	d7, [r7, #8]
 801043c:	e7a5      	b.n	801038a <__kernel_rem_pio2+0x3c2>
 801043e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80104c0 <__kernel_rem_pio2+0x4f8>
 8010442:	461a      	mov	r2, r3
 8010444:	e7e6      	b.n	8010414 <__kernel_rem_pio2+0x44c>
 8010446:	eeb0 7b46 	vmov.f64	d7, d6
 801044a:	e7e8      	b.n	801041e <__kernel_rem_pio2+0x456>
 801044c:	ecb1 6b02 	vldmia	r1!, {d6}
 8010450:	3201      	adds	r2, #1
 8010452:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010456:	e7ea      	b.n	801042e <__kernel_rem_pio2+0x466>
 8010458:	ed91 7b00 	vldr	d7, [r1]
 801045c:	ed91 5b02 	vldr	d5, [r1, #8]
 8010460:	3801      	subs	r0, #1
 8010462:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010466:	ee37 7b46 	vsub.f64	d7, d7, d6
 801046a:	ed81 6b00 	vstr	d6, [r1]
 801046e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010472:	ed81 7b02 	vstr	d7, [r1, #8]
 8010476:	e798      	b.n	80103aa <__kernel_rem_pio2+0x3e2>
 8010478:	ed92 7b00 	vldr	d7, [r2]
 801047c:	ed92 5b02 	vldr	d5, [r2, #8]
 8010480:	3901      	subs	r1, #1
 8010482:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010486:	ee37 7b46 	vsub.f64	d7, d7, d6
 801048a:	ed82 6b00 	vstr	d6, [r2]
 801048e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010492:	ed82 7b02 	vstr	d7, [r2, #8]
 8010496:	e78d      	b.n	80103b4 <__kernel_rem_pio2+0x3ec>
 8010498:	aa40      	add	r2, sp, #256	; 0x100
 801049a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801049e:	ed92 6b00 	vldr	d6, [r2]
 80104a2:	3b01      	subs	r3, #1
 80104a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80104a8:	e78a      	b.n	80103c0 <__kernel_rem_pio2+0x3f8>
 80104aa:	eeb1 5b45 	vneg.f64	d5, d5
 80104ae:	eeb1 6b46 	vneg.f64	d6, d6
 80104b2:	ed87 5b00 	vstr	d5, [r7]
 80104b6:	eeb1 7b47 	vneg.f64	d7, d7
 80104ba:	ed87 6b02 	vstr	d6, [r7, #8]
 80104be:	e78b      	b.n	80103d8 <__kernel_rem_pio2+0x410>
	...

080104c8 <__kernel_sin>:
 80104c8:	ee10 3a90 	vmov	r3, s1
 80104cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80104d0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80104d4:	da04      	bge.n	80104e0 <__kernel_sin+0x18>
 80104d6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80104da:	ee17 3a90 	vmov	r3, s15
 80104de:	b35b      	cbz	r3, 8010538 <__kernel_sin+0x70>
 80104e0:	ee20 6b00 	vmul.f64	d6, d0, d0
 80104e4:	ee20 5b06 	vmul.f64	d5, d0, d6
 80104e8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8010540 <__kernel_sin+0x78>
 80104ec:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010548 <__kernel_sin+0x80>
 80104f0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80104f4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010550 <__kernel_sin+0x88>
 80104f8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80104fc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010558 <__kernel_sin+0x90>
 8010500:	eea7 4b06 	vfma.f64	d4, d7, d6
 8010504:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010560 <__kernel_sin+0x98>
 8010508:	eea4 7b06 	vfma.f64	d7, d4, d6
 801050c:	b930      	cbnz	r0, 801051c <__kernel_sin+0x54>
 801050e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010568 <__kernel_sin+0xa0>
 8010512:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010516:	eea4 0b05 	vfma.f64	d0, d4, d5
 801051a:	4770      	bx	lr
 801051c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8010520:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8010524:	eea1 7b04 	vfma.f64	d7, d1, d4
 8010528:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801052c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8010570 <__kernel_sin+0xa8>
 8010530:	eea5 1b07 	vfma.f64	d1, d5, d7
 8010534:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010538:	4770      	bx	lr
 801053a:	bf00      	nop
 801053c:	f3af 8000 	nop.w
 8010540:	5acfd57c 	.word	0x5acfd57c
 8010544:	3de5d93a 	.word	0x3de5d93a
 8010548:	8a2b9ceb 	.word	0x8a2b9ceb
 801054c:	be5ae5e6 	.word	0xbe5ae5e6
 8010550:	57b1fe7d 	.word	0x57b1fe7d
 8010554:	3ec71de3 	.word	0x3ec71de3
 8010558:	19c161d5 	.word	0x19c161d5
 801055c:	bf2a01a0 	.word	0xbf2a01a0
 8010560:	1110f8a6 	.word	0x1110f8a6
 8010564:	3f811111 	.word	0x3f811111
 8010568:	55555549 	.word	0x55555549
 801056c:	bfc55555 	.word	0xbfc55555
 8010570:	55555549 	.word	0x55555549
 8010574:	3fc55555 	.word	0x3fc55555

08010578 <with_errno>:
 8010578:	b513      	push	{r0, r1, r4, lr}
 801057a:	4604      	mov	r4, r0
 801057c:	ed8d 0b00 	vstr	d0, [sp]
 8010580:	f000 f97c 	bl	801087c <__errno>
 8010584:	ed9d 0b00 	vldr	d0, [sp]
 8010588:	6004      	str	r4, [r0, #0]
 801058a:	b002      	add	sp, #8
 801058c:	bd10      	pop	{r4, pc}

0801058e <xflow>:
 801058e:	b082      	sub	sp, #8
 8010590:	b158      	cbz	r0, 80105aa <xflow+0x1c>
 8010592:	eeb1 7b40 	vneg.f64	d7, d0
 8010596:	ed8d 7b00 	vstr	d7, [sp]
 801059a:	ed9d 7b00 	vldr	d7, [sp]
 801059e:	2022      	movs	r0, #34	; 0x22
 80105a0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80105a4:	b002      	add	sp, #8
 80105a6:	f7ff bfe7 	b.w	8010578 <with_errno>
 80105aa:	eeb0 7b40 	vmov.f64	d7, d0
 80105ae:	e7f2      	b.n	8010596 <xflow+0x8>

080105b0 <__math_uflow>:
 80105b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80105b8 <__math_uflow+0x8>
 80105b4:	f7ff bfeb 	b.w	801058e <xflow>
 80105b8:	00000000 	.word	0x00000000
 80105bc:	10000000 	.word	0x10000000

080105c0 <__math_oflow>:
 80105c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80105c8 <__math_oflow+0x8>
 80105c4:	f7ff bfe3 	b.w	801058e <xflow>
 80105c8:	00000000 	.word	0x00000000
 80105cc:	70000000 	.word	0x70000000

080105d0 <__math_divzero>:
 80105d0:	b082      	sub	sp, #8
 80105d2:	2800      	cmp	r0, #0
 80105d4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80105d8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80105dc:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80105e0:	ed8d 7b00 	vstr	d7, [sp]
 80105e4:	ed9d 0b00 	vldr	d0, [sp]
 80105e8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80105f8 <__math_divzero+0x28>
 80105ec:	2022      	movs	r0, #34	; 0x22
 80105ee:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80105f2:	b002      	add	sp, #8
 80105f4:	f7ff bfc0 	b.w	8010578 <with_errno>
	...

08010600 <__math_invalid>:
 8010600:	eeb0 7b40 	vmov.f64	d7, d0
 8010604:	eeb4 7b47 	vcmp.f64	d7, d7
 8010608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801060c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8010610:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8010614:	d602      	bvs.n	801061c <__math_invalid+0x1c>
 8010616:	2021      	movs	r0, #33	; 0x21
 8010618:	f7ff bfae 	b.w	8010578 <with_errno>
 801061c:	4770      	bx	lr

0801061e <__math_check_uflow>:
 801061e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8010622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010626:	d102      	bne.n	801062e <__math_check_uflow+0x10>
 8010628:	2022      	movs	r0, #34	; 0x22
 801062a:	f7ff bfa5 	b.w	8010578 <with_errno>
 801062e:	4770      	bx	lr

08010630 <__math_check_oflow>:
 8010630:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8010650 <__math_check_oflow+0x20>
 8010634:	eeb0 7bc0 	vabs.f64	d7, d0
 8010638:	eeb4 7b46 	vcmp.f64	d7, d6
 801063c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010640:	dd02      	ble.n	8010648 <__math_check_oflow+0x18>
 8010642:	2022      	movs	r0, #34	; 0x22
 8010644:	f7ff bf98 	b.w	8010578 <with_errno>
 8010648:	4770      	bx	lr
 801064a:	bf00      	nop
 801064c:	f3af 8000 	nop.w
 8010650:	ffffffff 	.word	0xffffffff
 8010654:	7fefffff 	.word	0x7fefffff

08010658 <fabs>:
 8010658:	ec51 0b10 	vmov	r0, r1, d0
 801065c:	ee10 2a10 	vmov	r2, s0
 8010660:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010664:	ec43 2b10 	vmov	d0, r2, r3
 8010668:	4770      	bx	lr
 801066a:	0000      	movs	r0, r0
 801066c:	0000      	movs	r0, r0
	...

08010670 <floor>:
 8010670:	ee10 1a90 	vmov	r1, s1
 8010674:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010678:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801067c:	2b13      	cmp	r3, #19
 801067e:	b530      	push	{r4, r5, lr}
 8010680:	ee10 0a10 	vmov	r0, s0
 8010684:	ee10 5a10 	vmov	r5, s0
 8010688:	dc31      	bgt.n	80106ee <floor+0x7e>
 801068a:	2b00      	cmp	r3, #0
 801068c:	da15      	bge.n	80106ba <floor+0x4a>
 801068e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010748 <floor+0xd8>
 8010692:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010696:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801069a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801069e:	dd07      	ble.n	80106b0 <floor+0x40>
 80106a0:	2900      	cmp	r1, #0
 80106a2:	da4e      	bge.n	8010742 <floor+0xd2>
 80106a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80106a8:	4318      	orrs	r0, r3
 80106aa:	d001      	beq.n	80106b0 <floor+0x40>
 80106ac:	4928      	ldr	r1, [pc, #160]	; (8010750 <floor+0xe0>)
 80106ae:	2000      	movs	r0, #0
 80106b0:	460b      	mov	r3, r1
 80106b2:	4602      	mov	r2, r0
 80106b4:	ec43 2b10 	vmov	d0, r2, r3
 80106b8:	e020      	b.n	80106fc <floor+0x8c>
 80106ba:	4a26      	ldr	r2, [pc, #152]	; (8010754 <floor+0xe4>)
 80106bc:	411a      	asrs	r2, r3
 80106be:	ea01 0402 	and.w	r4, r1, r2
 80106c2:	4304      	orrs	r4, r0
 80106c4:	d01a      	beq.n	80106fc <floor+0x8c>
 80106c6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010748 <floor+0xd8>
 80106ca:	ee30 0b07 	vadd.f64	d0, d0, d7
 80106ce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80106d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106d6:	ddeb      	ble.n	80106b0 <floor+0x40>
 80106d8:	2900      	cmp	r1, #0
 80106da:	bfbe      	ittt	lt
 80106dc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80106e0:	fa40 f303 	asrlt.w	r3, r0, r3
 80106e4:	18c9      	addlt	r1, r1, r3
 80106e6:	ea21 0102 	bic.w	r1, r1, r2
 80106ea:	2000      	movs	r0, #0
 80106ec:	e7e0      	b.n	80106b0 <floor+0x40>
 80106ee:	2b33      	cmp	r3, #51	; 0x33
 80106f0:	dd05      	ble.n	80106fe <floor+0x8e>
 80106f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80106f6:	d101      	bne.n	80106fc <floor+0x8c>
 80106f8:	ee30 0b00 	vadd.f64	d0, d0, d0
 80106fc:	bd30      	pop	{r4, r5, pc}
 80106fe:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8010702:	f04f 32ff 	mov.w	r2, #4294967295
 8010706:	40e2      	lsrs	r2, r4
 8010708:	4202      	tst	r2, r0
 801070a:	d0f7      	beq.n	80106fc <floor+0x8c>
 801070c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8010748 <floor+0xd8>
 8010710:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010714:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801071c:	ddc8      	ble.n	80106b0 <floor+0x40>
 801071e:	2900      	cmp	r1, #0
 8010720:	da02      	bge.n	8010728 <floor+0xb8>
 8010722:	2b14      	cmp	r3, #20
 8010724:	d103      	bne.n	801072e <floor+0xbe>
 8010726:	3101      	adds	r1, #1
 8010728:	ea20 0002 	bic.w	r0, r0, r2
 801072c:	e7c0      	b.n	80106b0 <floor+0x40>
 801072e:	2401      	movs	r4, #1
 8010730:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010734:	fa04 f303 	lsl.w	r3, r4, r3
 8010738:	4418      	add	r0, r3
 801073a:	42a8      	cmp	r0, r5
 801073c:	bf38      	it	cc
 801073e:	1909      	addcc	r1, r1, r4
 8010740:	e7f2      	b.n	8010728 <floor+0xb8>
 8010742:	2000      	movs	r0, #0
 8010744:	4601      	mov	r1, r0
 8010746:	e7b3      	b.n	80106b0 <floor+0x40>
 8010748:	8800759c 	.word	0x8800759c
 801074c:	7e37e43c 	.word	0x7e37e43c
 8010750:	bff00000 	.word	0xbff00000
 8010754:	000fffff 	.word	0x000fffff

08010758 <scalbn>:
 8010758:	b082      	sub	sp, #8
 801075a:	ed8d 0b00 	vstr	d0, [sp]
 801075e:	9b01      	ldr	r3, [sp, #4]
 8010760:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010764:	b9a2      	cbnz	r2, 8010790 <scalbn+0x38>
 8010766:	9a00      	ldr	r2, [sp, #0]
 8010768:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801076c:	4313      	orrs	r3, r2
 801076e:	d03a      	beq.n	80107e6 <scalbn+0x8e>
 8010770:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8010848 <scalbn+0xf0>
 8010774:	4b40      	ldr	r3, [pc, #256]	; (8010878 <scalbn+0x120>)
 8010776:	ee20 7b07 	vmul.f64	d7, d0, d7
 801077a:	4298      	cmp	r0, r3
 801077c:	ed8d 7b00 	vstr	d7, [sp]
 8010780:	da11      	bge.n	80107a6 <scalbn+0x4e>
 8010782:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8010850 <scalbn+0xf8>
 8010786:	ed9d 6b00 	vldr	d6, [sp]
 801078a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801078e:	e007      	b.n	80107a0 <scalbn+0x48>
 8010790:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010794:	428a      	cmp	r2, r1
 8010796:	d10a      	bne.n	80107ae <scalbn+0x56>
 8010798:	ed9d 7b00 	vldr	d7, [sp]
 801079c:	ee37 7b07 	vadd.f64	d7, d7, d7
 80107a0:	ed8d 7b00 	vstr	d7, [sp]
 80107a4:	e01f      	b.n	80107e6 <scalbn+0x8e>
 80107a6:	9b01      	ldr	r3, [sp, #4]
 80107a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80107ac:	3a36      	subs	r2, #54	; 0x36
 80107ae:	4402      	add	r2, r0
 80107b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80107b4:	428a      	cmp	r2, r1
 80107b6:	dd0a      	ble.n	80107ce <scalbn+0x76>
 80107b8:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8010858 <scalbn+0x100>
 80107bc:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8010860 <scalbn+0x108>
 80107c0:	eeb0 6b47 	vmov.f64	d6, d7
 80107c4:	9b01      	ldr	r3, [sp, #4]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	fe27 7b05 	vselge.f64	d7, d7, d5
 80107cc:	e7dd      	b.n	801078a <scalbn+0x32>
 80107ce:	2a00      	cmp	r2, #0
 80107d0:	dd0d      	ble.n	80107ee <scalbn+0x96>
 80107d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80107d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80107da:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80107de:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80107e2:	e9cd 0100 	strd	r0, r1, [sp]
 80107e6:	ed9d 0b00 	vldr	d0, [sp]
 80107ea:	b002      	add	sp, #8
 80107ec:	4770      	bx	lr
 80107ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80107f2:	da18      	bge.n	8010826 <scalbn+0xce>
 80107f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80107f8:	4298      	cmp	r0, r3
 80107fa:	9b01      	ldr	r3, [sp, #4]
 80107fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010800:	dd09      	ble.n	8010816 <scalbn+0xbe>
 8010802:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8010858 <scalbn+0x100>
 8010806:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8010860 <scalbn+0x108>
 801080a:	eeb0 6b47 	vmov.f64	d6, d7
 801080e:	2b00      	cmp	r3, #0
 8010810:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8010814:	e7b9      	b.n	801078a <scalbn+0x32>
 8010816:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8010850 <scalbn+0xf8>
 801081a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8010868 <scalbn+0x110>
 801081e:	eeb0 6b47 	vmov.f64	d6, d7
 8010822:	2b00      	cmp	r3, #0
 8010824:	e7f4      	b.n	8010810 <scalbn+0xb8>
 8010826:	e9dd 0100 	ldrd	r0, r1, [sp]
 801082a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801082e:	3236      	adds	r2, #54	; 0x36
 8010830:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010834:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010838:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8010870 <scalbn+0x118>
 801083c:	ec41 0b17 	vmov	d7, r0, r1
 8010840:	e7a3      	b.n	801078a <scalbn+0x32>
 8010842:	bf00      	nop
 8010844:	f3af 8000 	nop.w
 8010848:	00000000 	.word	0x00000000
 801084c:	43500000 	.word	0x43500000
 8010850:	c2f8f359 	.word	0xc2f8f359
 8010854:	01a56e1f 	.word	0x01a56e1f
 8010858:	8800759c 	.word	0x8800759c
 801085c:	7e37e43c 	.word	0x7e37e43c
 8010860:	8800759c 	.word	0x8800759c
 8010864:	fe37e43c 	.word	0xfe37e43c
 8010868:	c2f8f359 	.word	0xc2f8f359
 801086c:	81a56e1f 	.word	0x81a56e1f
 8010870:	00000000 	.word	0x00000000
 8010874:	3c900000 	.word	0x3c900000
 8010878:	ffff3cb0 	.word	0xffff3cb0

0801087c <__errno>:
 801087c:	4b01      	ldr	r3, [pc, #4]	; (8010884 <__errno+0x8>)
 801087e:	6818      	ldr	r0, [r3, #0]
 8010880:	4770      	bx	lr
 8010882:	bf00      	nop
 8010884:	24000024 	.word	0x24000024

08010888 <__libc_init_array>:
 8010888:	b570      	push	{r4, r5, r6, lr}
 801088a:	4d0d      	ldr	r5, [pc, #52]	; (80108c0 <__libc_init_array+0x38>)
 801088c:	4c0d      	ldr	r4, [pc, #52]	; (80108c4 <__libc_init_array+0x3c>)
 801088e:	1b64      	subs	r4, r4, r5
 8010890:	10a4      	asrs	r4, r4, #2
 8010892:	2600      	movs	r6, #0
 8010894:	42a6      	cmp	r6, r4
 8010896:	d109      	bne.n	80108ac <__libc_init_array+0x24>
 8010898:	4d0b      	ldr	r5, [pc, #44]	; (80108c8 <__libc_init_array+0x40>)
 801089a:	4c0c      	ldr	r4, [pc, #48]	; (80108cc <__libc_init_array+0x44>)
 801089c:	f002 fc60 	bl	8013160 <_init>
 80108a0:	1b64      	subs	r4, r4, r5
 80108a2:	10a4      	asrs	r4, r4, #2
 80108a4:	2600      	movs	r6, #0
 80108a6:	42a6      	cmp	r6, r4
 80108a8:	d105      	bne.n	80108b6 <__libc_init_array+0x2e>
 80108aa:	bd70      	pop	{r4, r5, r6, pc}
 80108ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80108b0:	4798      	blx	r3
 80108b2:	3601      	adds	r6, #1
 80108b4:	e7ee      	b.n	8010894 <__libc_init_array+0xc>
 80108b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80108ba:	4798      	blx	r3
 80108bc:	3601      	adds	r6, #1
 80108be:	e7f2      	b.n	80108a6 <__libc_init_array+0x1e>
 80108c0:	0801505c 	.word	0x0801505c
 80108c4:	0801505c 	.word	0x0801505c
 80108c8:	0801505c 	.word	0x0801505c
 80108cc:	08015064 	.word	0x08015064

080108d0 <memset>:
 80108d0:	4402      	add	r2, r0
 80108d2:	4603      	mov	r3, r0
 80108d4:	4293      	cmp	r3, r2
 80108d6:	d100      	bne.n	80108da <memset+0xa>
 80108d8:	4770      	bx	lr
 80108da:	f803 1b01 	strb.w	r1, [r3], #1
 80108de:	e7f9      	b.n	80108d4 <memset+0x4>

080108e0 <__cvt>:
 80108e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108e2:	ed2d 8b02 	vpush	{d8}
 80108e6:	eeb0 8b40 	vmov.f64	d8, d0
 80108ea:	b085      	sub	sp, #20
 80108ec:	4617      	mov	r7, r2
 80108ee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80108f0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80108f2:	ee18 2a90 	vmov	r2, s17
 80108f6:	f025 0520 	bic.w	r5, r5, #32
 80108fa:	2a00      	cmp	r2, #0
 80108fc:	bfb6      	itet	lt
 80108fe:	222d      	movlt	r2, #45	; 0x2d
 8010900:	2200      	movge	r2, #0
 8010902:	eeb1 8b40 	vneglt.f64	d8, d0
 8010906:	2d46      	cmp	r5, #70	; 0x46
 8010908:	460c      	mov	r4, r1
 801090a:	701a      	strb	r2, [r3, #0]
 801090c:	d004      	beq.n	8010918 <__cvt+0x38>
 801090e:	2d45      	cmp	r5, #69	; 0x45
 8010910:	d100      	bne.n	8010914 <__cvt+0x34>
 8010912:	3401      	adds	r4, #1
 8010914:	2102      	movs	r1, #2
 8010916:	e000      	b.n	801091a <__cvt+0x3a>
 8010918:	2103      	movs	r1, #3
 801091a:	ab03      	add	r3, sp, #12
 801091c:	9301      	str	r3, [sp, #4]
 801091e:	ab02      	add	r3, sp, #8
 8010920:	9300      	str	r3, [sp, #0]
 8010922:	4622      	mov	r2, r4
 8010924:	4633      	mov	r3, r6
 8010926:	eeb0 0b48 	vmov.f64	d0, d8
 801092a:	f000 fca9 	bl	8011280 <_dtoa_r>
 801092e:	2d47      	cmp	r5, #71	; 0x47
 8010930:	d109      	bne.n	8010946 <__cvt+0x66>
 8010932:	07fb      	lsls	r3, r7, #31
 8010934:	d407      	bmi.n	8010946 <__cvt+0x66>
 8010936:	9b03      	ldr	r3, [sp, #12]
 8010938:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801093a:	1a1b      	subs	r3, r3, r0
 801093c:	6013      	str	r3, [r2, #0]
 801093e:	b005      	add	sp, #20
 8010940:	ecbd 8b02 	vpop	{d8}
 8010944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010946:	2d46      	cmp	r5, #70	; 0x46
 8010948:	eb00 0204 	add.w	r2, r0, r4
 801094c:	d10c      	bne.n	8010968 <__cvt+0x88>
 801094e:	7803      	ldrb	r3, [r0, #0]
 8010950:	2b30      	cmp	r3, #48	; 0x30
 8010952:	d107      	bne.n	8010964 <__cvt+0x84>
 8010954:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801095c:	bf1c      	itt	ne
 801095e:	f1c4 0401 	rsbne	r4, r4, #1
 8010962:	6034      	strne	r4, [r6, #0]
 8010964:	6833      	ldr	r3, [r6, #0]
 8010966:	441a      	add	r2, r3
 8010968:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801096c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010970:	bf08      	it	eq
 8010972:	9203      	streq	r2, [sp, #12]
 8010974:	2130      	movs	r1, #48	; 0x30
 8010976:	9b03      	ldr	r3, [sp, #12]
 8010978:	4293      	cmp	r3, r2
 801097a:	d2dc      	bcs.n	8010936 <__cvt+0x56>
 801097c:	1c5c      	adds	r4, r3, #1
 801097e:	9403      	str	r4, [sp, #12]
 8010980:	7019      	strb	r1, [r3, #0]
 8010982:	e7f8      	b.n	8010976 <__cvt+0x96>

08010984 <__exponent>:
 8010984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010986:	4603      	mov	r3, r0
 8010988:	2900      	cmp	r1, #0
 801098a:	bfb8      	it	lt
 801098c:	4249      	neglt	r1, r1
 801098e:	f803 2b02 	strb.w	r2, [r3], #2
 8010992:	bfb4      	ite	lt
 8010994:	222d      	movlt	r2, #45	; 0x2d
 8010996:	222b      	movge	r2, #43	; 0x2b
 8010998:	2909      	cmp	r1, #9
 801099a:	7042      	strb	r2, [r0, #1]
 801099c:	dd2a      	ble.n	80109f4 <__exponent+0x70>
 801099e:	f10d 0407 	add.w	r4, sp, #7
 80109a2:	46a4      	mov	ip, r4
 80109a4:	270a      	movs	r7, #10
 80109a6:	46a6      	mov	lr, r4
 80109a8:	460a      	mov	r2, r1
 80109aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80109ae:	fb07 1516 	mls	r5, r7, r6, r1
 80109b2:	3530      	adds	r5, #48	; 0x30
 80109b4:	2a63      	cmp	r2, #99	; 0x63
 80109b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80109ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80109be:	4631      	mov	r1, r6
 80109c0:	dcf1      	bgt.n	80109a6 <__exponent+0x22>
 80109c2:	3130      	adds	r1, #48	; 0x30
 80109c4:	f1ae 0502 	sub.w	r5, lr, #2
 80109c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80109cc:	1c44      	adds	r4, r0, #1
 80109ce:	4629      	mov	r1, r5
 80109d0:	4561      	cmp	r1, ip
 80109d2:	d30a      	bcc.n	80109ea <__exponent+0x66>
 80109d4:	f10d 0209 	add.w	r2, sp, #9
 80109d8:	eba2 020e 	sub.w	r2, r2, lr
 80109dc:	4565      	cmp	r5, ip
 80109de:	bf88      	it	hi
 80109e0:	2200      	movhi	r2, #0
 80109e2:	4413      	add	r3, r2
 80109e4:	1a18      	subs	r0, r3, r0
 80109e6:	b003      	add	sp, #12
 80109e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80109ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80109f2:	e7ed      	b.n	80109d0 <__exponent+0x4c>
 80109f4:	2330      	movs	r3, #48	; 0x30
 80109f6:	3130      	adds	r1, #48	; 0x30
 80109f8:	7083      	strb	r3, [r0, #2]
 80109fa:	70c1      	strb	r1, [r0, #3]
 80109fc:	1d03      	adds	r3, r0, #4
 80109fe:	e7f1      	b.n	80109e4 <__exponent+0x60>

08010a00 <_printf_float>:
 8010a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a04:	b08b      	sub	sp, #44	; 0x2c
 8010a06:	460c      	mov	r4, r1
 8010a08:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8010a0c:	4616      	mov	r6, r2
 8010a0e:	461f      	mov	r7, r3
 8010a10:	4605      	mov	r5, r0
 8010a12:	f001 f9b7 	bl	8011d84 <_localeconv_r>
 8010a16:	f8d0 b000 	ldr.w	fp, [r0]
 8010a1a:	4658      	mov	r0, fp
 8010a1c:	f7ef fc60 	bl	80002e0 <strlen>
 8010a20:	2300      	movs	r3, #0
 8010a22:	9308      	str	r3, [sp, #32]
 8010a24:	f8d8 3000 	ldr.w	r3, [r8]
 8010a28:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010a2c:	6822      	ldr	r2, [r4, #0]
 8010a2e:	3307      	adds	r3, #7
 8010a30:	f023 0307 	bic.w	r3, r3, #7
 8010a34:	f103 0108 	add.w	r1, r3, #8
 8010a38:	f8c8 1000 	str.w	r1, [r8]
 8010a3c:	4682      	mov	sl, r0
 8010a3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a42:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8010a46:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8010ca8 <_printf_float+0x2a8>
 8010a4a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8010a4e:	eeb0 6bc0 	vabs.f64	d6, d0
 8010a52:	eeb4 6b47 	vcmp.f64	d6, d7
 8010a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a5a:	dd24      	ble.n	8010aa6 <_printf_float+0xa6>
 8010a5c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a64:	d502      	bpl.n	8010a6c <_printf_float+0x6c>
 8010a66:	232d      	movs	r3, #45	; 0x2d
 8010a68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a6c:	4b90      	ldr	r3, [pc, #576]	; (8010cb0 <_printf_float+0x2b0>)
 8010a6e:	4891      	ldr	r0, [pc, #580]	; (8010cb4 <_printf_float+0x2b4>)
 8010a70:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010a74:	bf94      	ite	ls
 8010a76:	4698      	movls	r8, r3
 8010a78:	4680      	movhi	r8, r0
 8010a7a:	2303      	movs	r3, #3
 8010a7c:	6123      	str	r3, [r4, #16]
 8010a7e:	f022 0204 	bic.w	r2, r2, #4
 8010a82:	2300      	movs	r3, #0
 8010a84:	6022      	str	r2, [r4, #0]
 8010a86:	9304      	str	r3, [sp, #16]
 8010a88:	9700      	str	r7, [sp, #0]
 8010a8a:	4633      	mov	r3, r6
 8010a8c:	aa09      	add	r2, sp, #36	; 0x24
 8010a8e:	4621      	mov	r1, r4
 8010a90:	4628      	mov	r0, r5
 8010a92:	f000 f9d3 	bl	8010e3c <_printf_common>
 8010a96:	3001      	adds	r0, #1
 8010a98:	f040 808a 	bne.w	8010bb0 <_printf_float+0x1b0>
 8010a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8010aa0:	b00b      	add	sp, #44	; 0x2c
 8010aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aa6:	eeb4 0b40 	vcmp.f64	d0, d0
 8010aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aae:	d709      	bvc.n	8010ac4 <_printf_float+0xc4>
 8010ab0:	ee10 3a90 	vmov	r3, s1
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	bfbc      	itt	lt
 8010ab8:	232d      	movlt	r3, #45	; 0x2d
 8010aba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010abe:	487e      	ldr	r0, [pc, #504]	; (8010cb8 <_printf_float+0x2b8>)
 8010ac0:	4b7e      	ldr	r3, [pc, #504]	; (8010cbc <_printf_float+0x2bc>)
 8010ac2:	e7d5      	b.n	8010a70 <_printf_float+0x70>
 8010ac4:	6863      	ldr	r3, [r4, #4]
 8010ac6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8010aca:	9104      	str	r1, [sp, #16]
 8010acc:	1c59      	adds	r1, r3, #1
 8010ace:	d13c      	bne.n	8010b4a <_printf_float+0x14a>
 8010ad0:	2306      	movs	r3, #6
 8010ad2:	6063      	str	r3, [r4, #4]
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	9303      	str	r3, [sp, #12]
 8010ad8:	ab08      	add	r3, sp, #32
 8010ada:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8010ade:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010ae2:	ab07      	add	r3, sp, #28
 8010ae4:	6861      	ldr	r1, [r4, #4]
 8010ae6:	9300      	str	r3, [sp, #0]
 8010ae8:	6022      	str	r2, [r4, #0]
 8010aea:	f10d 031b 	add.w	r3, sp, #27
 8010aee:	4628      	mov	r0, r5
 8010af0:	f7ff fef6 	bl	80108e0 <__cvt>
 8010af4:	9b04      	ldr	r3, [sp, #16]
 8010af6:	9907      	ldr	r1, [sp, #28]
 8010af8:	2b47      	cmp	r3, #71	; 0x47
 8010afa:	4680      	mov	r8, r0
 8010afc:	d108      	bne.n	8010b10 <_printf_float+0x110>
 8010afe:	1cc8      	adds	r0, r1, #3
 8010b00:	db02      	blt.n	8010b08 <_printf_float+0x108>
 8010b02:	6863      	ldr	r3, [r4, #4]
 8010b04:	4299      	cmp	r1, r3
 8010b06:	dd41      	ble.n	8010b8c <_printf_float+0x18c>
 8010b08:	f1a9 0902 	sub.w	r9, r9, #2
 8010b0c:	fa5f f989 	uxtb.w	r9, r9
 8010b10:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010b14:	d820      	bhi.n	8010b58 <_printf_float+0x158>
 8010b16:	3901      	subs	r1, #1
 8010b18:	464a      	mov	r2, r9
 8010b1a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010b1e:	9107      	str	r1, [sp, #28]
 8010b20:	f7ff ff30 	bl	8010984 <__exponent>
 8010b24:	9a08      	ldr	r2, [sp, #32]
 8010b26:	9004      	str	r0, [sp, #16]
 8010b28:	1813      	adds	r3, r2, r0
 8010b2a:	2a01      	cmp	r2, #1
 8010b2c:	6123      	str	r3, [r4, #16]
 8010b2e:	dc02      	bgt.n	8010b36 <_printf_float+0x136>
 8010b30:	6822      	ldr	r2, [r4, #0]
 8010b32:	07d2      	lsls	r2, r2, #31
 8010b34:	d501      	bpl.n	8010b3a <_printf_float+0x13a>
 8010b36:	3301      	adds	r3, #1
 8010b38:	6123      	str	r3, [r4, #16]
 8010b3a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d0a2      	beq.n	8010a88 <_printf_float+0x88>
 8010b42:	232d      	movs	r3, #45	; 0x2d
 8010b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b48:	e79e      	b.n	8010a88 <_printf_float+0x88>
 8010b4a:	9904      	ldr	r1, [sp, #16]
 8010b4c:	2947      	cmp	r1, #71	; 0x47
 8010b4e:	d1c1      	bne.n	8010ad4 <_printf_float+0xd4>
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d1bf      	bne.n	8010ad4 <_printf_float+0xd4>
 8010b54:	2301      	movs	r3, #1
 8010b56:	e7bc      	b.n	8010ad2 <_printf_float+0xd2>
 8010b58:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010b5c:	d118      	bne.n	8010b90 <_printf_float+0x190>
 8010b5e:	2900      	cmp	r1, #0
 8010b60:	6863      	ldr	r3, [r4, #4]
 8010b62:	dd0b      	ble.n	8010b7c <_printf_float+0x17c>
 8010b64:	6121      	str	r1, [r4, #16]
 8010b66:	b913      	cbnz	r3, 8010b6e <_printf_float+0x16e>
 8010b68:	6822      	ldr	r2, [r4, #0]
 8010b6a:	07d0      	lsls	r0, r2, #31
 8010b6c:	d502      	bpl.n	8010b74 <_printf_float+0x174>
 8010b6e:	3301      	adds	r3, #1
 8010b70:	440b      	add	r3, r1
 8010b72:	6123      	str	r3, [r4, #16]
 8010b74:	2300      	movs	r3, #0
 8010b76:	65a1      	str	r1, [r4, #88]	; 0x58
 8010b78:	9304      	str	r3, [sp, #16]
 8010b7a:	e7de      	b.n	8010b3a <_printf_float+0x13a>
 8010b7c:	b913      	cbnz	r3, 8010b84 <_printf_float+0x184>
 8010b7e:	6822      	ldr	r2, [r4, #0]
 8010b80:	07d2      	lsls	r2, r2, #31
 8010b82:	d501      	bpl.n	8010b88 <_printf_float+0x188>
 8010b84:	3302      	adds	r3, #2
 8010b86:	e7f4      	b.n	8010b72 <_printf_float+0x172>
 8010b88:	2301      	movs	r3, #1
 8010b8a:	e7f2      	b.n	8010b72 <_printf_float+0x172>
 8010b8c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010b90:	9b08      	ldr	r3, [sp, #32]
 8010b92:	4299      	cmp	r1, r3
 8010b94:	db05      	blt.n	8010ba2 <_printf_float+0x1a2>
 8010b96:	6823      	ldr	r3, [r4, #0]
 8010b98:	6121      	str	r1, [r4, #16]
 8010b9a:	07d8      	lsls	r0, r3, #31
 8010b9c:	d5ea      	bpl.n	8010b74 <_printf_float+0x174>
 8010b9e:	1c4b      	adds	r3, r1, #1
 8010ba0:	e7e7      	b.n	8010b72 <_printf_float+0x172>
 8010ba2:	2900      	cmp	r1, #0
 8010ba4:	bfd4      	ite	le
 8010ba6:	f1c1 0202 	rsble	r2, r1, #2
 8010baa:	2201      	movgt	r2, #1
 8010bac:	4413      	add	r3, r2
 8010bae:	e7e0      	b.n	8010b72 <_printf_float+0x172>
 8010bb0:	6823      	ldr	r3, [r4, #0]
 8010bb2:	055a      	lsls	r2, r3, #21
 8010bb4:	d407      	bmi.n	8010bc6 <_printf_float+0x1c6>
 8010bb6:	6923      	ldr	r3, [r4, #16]
 8010bb8:	4642      	mov	r2, r8
 8010bba:	4631      	mov	r1, r6
 8010bbc:	4628      	mov	r0, r5
 8010bbe:	47b8      	blx	r7
 8010bc0:	3001      	adds	r0, #1
 8010bc2:	d12a      	bne.n	8010c1a <_printf_float+0x21a>
 8010bc4:	e76a      	b.n	8010a9c <_printf_float+0x9c>
 8010bc6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010bca:	f240 80e2 	bls.w	8010d92 <_printf_float+0x392>
 8010bce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010bd2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bda:	d133      	bne.n	8010c44 <_printf_float+0x244>
 8010bdc:	4a38      	ldr	r2, [pc, #224]	; (8010cc0 <_printf_float+0x2c0>)
 8010bde:	2301      	movs	r3, #1
 8010be0:	4631      	mov	r1, r6
 8010be2:	4628      	mov	r0, r5
 8010be4:	47b8      	blx	r7
 8010be6:	3001      	adds	r0, #1
 8010be8:	f43f af58 	beq.w	8010a9c <_printf_float+0x9c>
 8010bec:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	db02      	blt.n	8010bfa <_printf_float+0x1fa>
 8010bf4:	6823      	ldr	r3, [r4, #0]
 8010bf6:	07d8      	lsls	r0, r3, #31
 8010bf8:	d50f      	bpl.n	8010c1a <_printf_float+0x21a>
 8010bfa:	4653      	mov	r3, sl
 8010bfc:	465a      	mov	r2, fp
 8010bfe:	4631      	mov	r1, r6
 8010c00:	4628      	mov	r0, r5
 8010c02:	47b8      	blx	r7
 8010c04:	3001      	adds	r0, #1
 8010c06:	f43f af49 	beq.w	8010a9c <_printf_float+0x9c>
 8010c0a:	f04f 0800 	mov.w	r8, #0
 8010c0e:	f104 091a 	add.w	r9, r4, #26
 8010c12:	9b08      	ldr	r3, [sp, #32]
 8010c14:	3b01      	subs	r3, #1
 8010c16:	4543      	cmp	r3, r8
 8010c18:	dc09      	bgt.n	8010c2e <_printf_float+0x22e>
 8010c1a:	6823      	ldr	r3, [r4, #0]
 8010c1c:	079b      	lsls	r3, r3, #30
 8010c1e:	f100 8108 	bmi.w	8010e32 <_printf_float+0x432>
 8010c22:	68e0      	ldr	r0, [r4, #12]
 8010c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c26:	4298      	cmp	r0, r3
 8010c28:	bfb8      	it	lt
 8010c2a:	4618      	movlt	r0, r3
 8010c2c:	e738      	b.n	8010aa0 <_printf_float+0xa0>
 8010c2e:	2301      	movs	r3, #1
 8010c30:	464a      	mov	r2, r9
 8010c32:	4631      	mov	r1, r6
 8010c34:	4628      	mov	r0, r5
 8010c36:	47b8      	blx	r7
 8010c38:	3001      	adds	r0, #1
 8010c3a:	f43f af2f 	beq.w	8010a9c <_printf_float+0x9c>
 8010c3e:	f108 0801 	add.w	r8, r8, #1
 8010c42:	e7e6      	b.n	8010c12 <_printf_float+0x212>
 8010c44:	9b07      	ldr	r3, [sp, #28]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	dc3c      	bgt.n	8010cc4 <_printf_float+0x2c4>
 8010c4a:	4a1d      	ldr	r2, [pc, #116]	; (8010cc0 <_printf_float+0x2c0>)
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	4631      	mov	r1, r6
 8010c50:	4628      	mov	r0, r5
 8010c52:	47b8      	blx	r7
 8010c54:	3001      	adds	r0, #1
 8010c56:	f43f af21 	beq.w	8010a9c <_printf_float+0x9c>
 8010c5a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010c5e:	4313      	orrs	r3, r2
 8010c60:	d102      	bne.n	8010c68 <_printf_float+0x268>
 8010c62:	6823      	ldr	r3, [r4, #0]
 8010c64:	07d9      	lsls	r1, r3, #31
 8010c66:	d5d8      	bpl.n	8010c1a <_printf_float+0x21a>
 8010c68:	4653      	mov	r3, sl
 8010c6a:	465a      	mov	r2, fp
 8010c6c:	4631      	mov	r1, r6
 8010c6e:	4628      	mov	r0, r5
 8010c70:	47b8      	blx	r7
 8010c72:	3001      	adds	r0, #1
 8010c74:	f43f af12 	beq.w	8010a9c <_printf_float+0x9c>
 8010c78:	f04f 0900 	mov.w	r9, #0
 8010c7c:	f104 0a1a 	add.w	sl, r4, #26
 8010c80:	9b07      	ldr	r3, [sp, #28]
 8010c82:	425b      	negs	r3, r3
 8010c84:	454b      	cmp	r3, r9
 8010c86:	dc01      	bgt.n	8010c8c <_printf_float+0x28c>
 8010c88:	9b08      	ldr	r3, [sp, #32]
 8010c8a:	e795      	b.n	8010bb8 <_printf_float+0x1b8>
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	4652      	mov	r2, sl
 8010c90:	4631      	mov	r1, r6
 8010c92:	4628      	mov	r0, r5
 8010c94:	47b8      	blx	r7
 8010c96:	3001      	adds	r0, #1
 8010c98:	f43f af00 	beq.w	8010a9c <_printf_float+0x9c>
 8010c9c:	f109 0901 	add.w	r9, r9, #1
 8010ca0:	e7ee      	b.n	8010c80 <_printf_float+0x280>
 8010ca2:	bf00      	nop
 8010ca4:	f3af 8000 	nop.w
 8010ca8:	ffffffff 	.word	0xffffffff
 8010cac:	7fefffff 	.word	0x7fefffff
 8010cb0:	08014c74 	.word	0x08014c74
 8010cb4:	08014c78 	.word	0x08014c78
 8010cb8:	08014c80 	.word	0x08014c80
 8010cbc:	08014c7c 	.word	0x08014c7c
 8010cc0:	08014c84 	.word	0x08014c84
 8010cc4:	9a08      	ldr	r2, [sp, #32]
 8010cc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	bfa8      	it	ge
 8010ccc:	461a      	movge	r2, r3
 8010cce:	2a00      	cmp	r2, #0
 8010cd0:	4691      	mov	r9, r2
 8010cd2:	dc38      	bgt.n	8010d46 <_printf_float+0x346>
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	9305      	str	r3, [sp, #20]
 8010cd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010cdc:	f104 021a 	add.w	r2, r4, #26
 8010ce0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010ce2:	9905      	ldr	r1, [sp, #20]
 8010ce4:	9304      	str	r3, [sp, #16]
 8010ce6:	eba3 0309 	sub.w	r3, r3, r9
 8010cea:	428b      	cmp	r3, r1
 8010cec:	dc33      	bgt.n	8010d56 <_printf_float+0x356>
 8010cee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	db3c      	blt.n	8010d70 <_printf_float+0x370>
 8010cf6:	6823      	ldr	r3, [r4, #0]
 8010cf8:	07da      	lsls	r2, r3, #31
 8010cfa:	d439      	bmi.n	8010d70 <_printf_float+0x370>
 8010cfc:	9a08      	ldr	r2, [sp, #32]
 8010cfe:	9b04      	ldr	r3, [sp, #16]
 8010d00:	9907      	ldr	r1, [sp, #28]
 8010d02:	1ad3      	subs	r3, r2, r3
 8010d04:	eba2 0901 	sub.w	r9, r2, r1
 8010d08:	4599      	cmp	r9, r3
 8010d0a:	bfa8      	it	ge
 8010d0c:	4699      	movge	r9, r3
 8010d0e:	f1b9 0f00 	cmp.w	r9, #0
 8010d12:	dc35      	bgt.n	8010d80 <_printf_float+0x380>
 8010d14:	f04f 0800 	mov.w	r8, #0
 8010d18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010d1c:	f104 0a1a 	add.w	sl, r4, #26
 8010d20:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010d24:	1a9b      	subs	r3, r3, r2
 8010d26:	eba3 0309 	sub.w	r3, r3, r9
 8010d2a:	4543      	cmp	r3, r8
 8010d2c:	f77f af75 	ble.w	8010c1a <_printf_float+0x21a>
 8010d30:	2301      	movs	r3, #1
 8010d32:	4652      	mov	r2, sl
 8010d34:	4631      	mov	r1, r6
 8010d36:	4628      	mov	r0, r5
 8010d38:	47b8      	blx	r7
 8010d3a:	3001      	adds	r0, #1
 8010d3c:	f43f aeae 	beq.w	8010a9c <_printf_float+0x9c>
 8010d40:	f108 0801 	add.w	r8, r8, #1
 8010d44:	e7ec      	b.n	8010d20 <_printf_float+0x320>
 8010d46:	4613      	mov	r3, r2
 8010d48:	4631      	mov	r1, r6
 8010d4a:	4642      	mov	r2, r8
 8010d4c:	4628      	mov	r0, r5
 8010d4e:	47b8      	blx	r7
 8010d50:	3001      	adds	r0, #1
 8010d52:	d1bf      	bne.n	8010cd4 <_printf_float+0x2d4>
 8010d54:	e6a2      	b.n	8010a9c <_printf_float+0x9c>
 8010d56:	2301      	movs	r3, #1
 8010d58:	4631      	mov	r1, r6
 8010d5a:	4628      	mov	r0, r5
 8010d5c:	9204      	str	r2, [sp, #16]
 8010d5e:	47b8      	blx	r7
 8010d60:	3001      	adds	r0, #1
 8010d62:	f43f ae9b 	beq.w	8010a9c <_printf_float+0x9c>
 8010d66:	9b05      	ldr	r3, [sp, #20]
 8010d68:	9a04      	ldr	r2, [sp, #16]
 8010d6a:	3301      	adds	r3, #1
 8010d6c:	9305      	str	r3, [sp, #20]
 8010d6e:	e7b7      	b.n	8010ce0 <_printf_float+0x2e0>
 8010d70:	4653      	mov	r3, sl
 8010d72:	465a      	mov	r2, fp
 8010d74:	4631      	mov	r1, r6
 8010d76:	4628      	mov	r0, r5
 8010d78:	47b8      	blx	r7
 8010d7a:	3001      	adds	r0, #1
 8010d7c:	d1be      	bne.n	8010cfc <_printf_float+0x2fc>
 8010d7e:	e68d      	b.n	8010a9c <_printf_float+0x9c>
 8010d80:	9a04      	ldr	r2, [sp, #16]
 8010d82:	464b      	mov	r3, r9
 8010d84:	4442      	add	r2, r8
 8010d86:	4631      	mov	r1, r6
 8010d88:	4628      	mov	r0, r5
 8010d8a:	47b8      	blx	r7
 8010d8c:	3001      	adds	r0, #1
 8010d8e:	d1c1      	bne.n	8010d14 <_printf_float+0x314>
 8010d90:	e684      	b.n	8010a9c <_printf_float+0x9c>
 8010d92:	9a08      	ldr	r2, [sp, #32]
 8010d94:	2a01      	cmp	r2, #1
 8010d96:	dc01      	bgt.n	8010d9c <_printf_float+0x39c>
 8010d98:	07db      	lsls	r3, r3, #31
 8010d9a:	d537      	bpl.n	8010e0c <_printf_float+0x40c>
 8010d9c:	2301      	movs	r3, #1
 8010d9e:	4642      	mov	r2, r8
 8010da0:	4631      	mov	r1, r6
 8010da2:	4628      	mov	r0, r5
 8010da4:	47b8      	blx	r7
 8010da6:	3001      	adds	r0, #1
 8010da8:	f43f ae78 	beq.w	8010a9c <_printf_float+0x9c>
 8010dac:	4653      	mov	r3, sl
 8010dae:	465a      	mov	r2, fp
 8010db0:	4631      	mov	r1, r6
 8010db2:	4628      	mov	r0, r5
 8010db4:	47b8      	blx	r7
 8010db6:	3001      	adds	r0, #1
 8010db8:	f43f ae70 	beq.w	8010a9c <_printf_float+0x9c>
 8010dbc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010dc0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dc8:	d01b      	beq.n	8010e02 <_printf_float+0x402>
 8010dca:	9b08      	ldr	r3, [sp, #32]
 8010dcc:	f108 0201 	add.w	r2, r8, #1
 8010dd0:	3b01      	subs	r3, #1
 8010dd2:	4631      	mov	r1, r6
 8010dd4:	4628      	mov	r0, r5
 8010dd6:	47b8      	blx	r7
 8010dd8:	3001      	adds	r0, #1
 8010dda:	d10e      	bne.n	8010dfa <_printf_float+0x3fa>
 8010ddc:	e65e      	b.n	8010a9c <_printf_float+0x9c>
 8010dde:	2301      	movs	r3, #1
 8010de0:	464a      	mov	r2, r9
 8010de2:	4631      	mov	r1, r6
 8010de4:	4628      	mov	r0, r5
 8010de6:	47b8      	blx	r7
 8010de8:	3001      	adds	r0, #1
 8010dea:	f43f ae57 	beq.w	8010a9c <_printf_float+0x9c>
 8010dee:	f108 0801 	add.w	r8, r8, #1
 8010df2:	9b08      	ldr	r3, [sp, #32]
 8010df4:	3b01      	subs	r3, #1
 8010df6:	4543      	cmp	r3, r8
 8010df8:	dcf1      	bgt.n	8010dde <_printf_float+0x3de>
 8010dfa:	9b04      	ldr	r3, [sp, #16]
 8010dfc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010e00:	e6db      	b.n	8010bba <_printf_float+0x1ba>
 8010e02:	f04f 0800 	mov.w	r8, #0
 8010e06:	f104 091a 	add.w	r9, r4, #26
 8010e0a:	e7f2      	b.n	8010df2 <_printf_float+0x3f2>
 8010e0c:	2301      	movs	r3, #1
 8010e0e:	4642      	mov	r2, r8
 8010e10:	e7df      	b.n	8010dd2 <_printf_float+0x3d2>
 8010e12:	2301      	movs	r3, #1
 8010e14:	464a      	mov	r2, r9
 8010e16:	4631      	mov	r1, r6
 8010e18:	4628      	mov	r0, r5
 8010e1a:	47b8      	blx	r7
 8010e1c:	3001      	adds	r0, #1
 8010e1e:	f43f ae3d 	beq.w	8010a9c <_printf_float+0x9c>
 8010e22:	f108 0801 	add.w	r8, r8, #1
 8010e26:	68e3      	ldr	r3, [r4, #12]
 8010e28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010e2a:	1a5b      	subs	r3, r3, r1
 8010e2c:	4543      	cmp	r3, r8
 8010e2e:	dcf0      	bgt.n	8010e12 <_printf_float+0x412>
 8010e30:	e6f7      	b.n	8010c22 <_printf_float+0x222>
 8010e32:	f04f 0800 	mov.w	r8, #0
 8010e36:	f104 0919 	add.w	r9, r4, #25
 8010e3a:	e7f4      	b.n	8010e26 <_printf_float+0x426>

08010e3c <_printf_common>:
 8010e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e40:	4616      	mov	r6, r2
 8010e42:	4699      	mov	r9, r3
 8010e44:	688a      	ldr	r2, [r1, #8]
 8010e46:	690b      	ldr	r3, [r1, #16]
 8010e48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010e4c:	4293      	cmp	r3, r2
 8010e4e:	bfb8      	it	lt
 8010e50:	4613      	movlt	r3, r2
 8010e52:	6033      	str	r3, [r6, #0]
 8010e54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010e58:	4607      	mov	r7, r0
 8010e5a:	460c      	mov	r4, r1
 8010e5c:	b10a      	cbz	r2, 8010e62 <_printf_common+0x26>
 8010e5e:	3301      	adds	r3, #1
 8010e60:	6033      	str	r3, [r6, #0]
 8010e62:	6823      	ldr	r3, [r4, #0]
 8010e64:	0699      	lsls	r1, r3, #26
 8010e66:	bf42      	ittt	mi
 8010e68:	6833      	ldrmi	r3, [r6, #0]
 8010e6a:	3302      	addmi	r3, #2
 8010e6c:	6033      	strmi	r3, [r6, #0]
 8010e6e:	6825      	ldr	r5, [r4, #0]
 8010e70:	f015 0506 	ands.w	r5, r5, #6
 8010e74:	d106      	bne.n	8010e84 <_printf_common+0x48>
 8010e76:	f104 0a19 	add.w	sl, r4, #25
 8010e7a:	68e3      	ldr	r3, [r4, #12]
 8010e7c:	6832      	ldr	r2, [r6, #0]
 8010e7e:	1a9b      	subs	r3, r3, r2
 8010e80:	42ab      	cmp	r3, r5
 8010e82:	dc26      	bgt.n	8010ed2 <_printf_common+0x96>
 8010e84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010e88:	1e13      	subs	r3, r2, #0
 8010e8a:	6822      	ldr	r2, [r4, #0]
 8010e8c:	bf18      	it	ne
 8010e8e:	2301      	movne	r3, #1
 8010e90:	0692      	lsls	r2, r2, #26
 8010e92:	d42b      	bmi.n	8010eec <_printf_common+0xb0>
 8010e94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010e98:	4649      	mov	r1, r9
 8010e9a:	4638      	mov	r0, r7
 8010e9c:	47c0      	blx	r8
 8010e9e:	3001      	adds	r0, #1
 8010ea0:	d01e      	beq.n	8010ee0 <_printf_common+0xa4>
 8010ea2:	6823      	ldr	r3, [r4, #0]
 8010ea4:	68e5      	ldr	r5, [r4, #12]
 8010ea6:	6832      	ldr	r2, [r6, #0]
 8010ea8:	f003 0306 	and.w	r3, r3, #6
 8010eac:	2b04      	cmp	r3, #4
 8010eae:	bf08      	it	eq
 8010eb0:	1aad      	subeq	r5, r5, r2
 8010eb2:	68a3      	ldr	r3, [r4, #8]
 8010eb4:	6922      	ldr	r2, [r4, #16]
 8010eb6:	bf0c      	ite	eq
 8010eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010ebc:	2500      	movne	r5, #0
 8010ebe:	4293      	cmp	r3, r2
 8010ec0:	bfc4      	itt	gt
 8010ec2:	1a9b      	subgt	r3, r3, r2
 8010ec4:	18ed      	addgt	r5, r5, r3
 8010ec6:	2600      	movs	r6, #0
 8010ec8:	341a      	adds	r4, #26
 8010eca:	42b5      	cmp	r5, r6
 8010ecc:	d11a      	bne.n	8010f04 <_printf_common+0xc8>
 8010ece:	2000      	movs	r0, #0
 8010ed0:	e008      	b.n	8010ee4 <_printf_common+0xa8>
 8010ed2:	2301      	movs	r3, #1
 8010ed4:	4652      	mov	r2, sl
 8010ed6:	4649      	mov	r1, r9
 8010ed8:	4638      	mov	r0, r7
 8010eda:	47c0      	blx	r8
 8010edc:	3001      	adds	r0, #1
 8010ede:	d103      	bne.n	8010ee8 <_printf_common+0xac>
 8010ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ee8:	3501      	adds	r5, #1
 8010eea:	e7c6      	b.n	8010e7a <_printf_common+0x3e>
 8010eec:	18e1      	adds	r1, r4, r3
 8010eee:	1c5a      	adds	r2, r3, #1
 8010ef0:	2030      	movs	r0, #48	; 0x30
 8010ef2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010ef6:	4422      	add	r2, r4
 8010ef8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010efc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010f00:	3302      	adds	r3, #2
 8010f02:	e7c7      	b.n	8010e94 <_printf_common+0x58>
 8010f04:	2301      	movs	r3, #1
 8010f06:	4622      	mov	r2, r4
 8010f08:	4649      	mov	r1, r9
 8010f0a:	4638      	mov	r0, r7
 8010f0c:	47c0      	blx	r8
 8010f0e:	3001      	adds	r0, #1
 8010f10:	d0e6      	beq.n	8010ee0 <_printf_common+0xa4>
 8010f12:	3601      	adds	r6, #1
 8010f14:	e7d9      	b.n	8010eca <_printf_common+0x8e>
	...

08010f18 <_printf_i>:
 8010f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f1c:	460c      	mov	r4, r1
 8010f1e:	4691      	mov	r9, r2
 8010f20:	7e27      	ldrb	r7, [r4, #24]
 8010f22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010f24:	2f78      	cmp	r7, #120	; 0x78
 8010f26:	4680      	mov	r8, r0
 8010f28:	469a      	mov	sl, r3
 8010f2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010f2e:	d807      	bhi.n	8010f40 <_printf_i+0x28>
 8010f30:	2f62      	cmp	r7, #98	; 0x62
 8010f32:	d80a      	bhi.n	8010f4a <_printf_i+0x32>
 8010f34:	2f00      	cmp	r7, #0
 8010f36:	f000 80d8 	beq.w	80110ea <_printf_i+0x1d2>
 8010f3a:	2f58      	cmp	r7, #88	; 0x58
 8010f3c:	f000 80a3 	beq.w	8011086 <_printf_i+0x16e>
 8010f40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010f44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010f48:	e03a      	b.n	8010fc0 <_printf_i+0xa8>
 8010f4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010f4e:	2b15      	cmp	r3, #21
 8010f50:	d8f6      	bhi.n	8010f40 <_printf_i+0x28>
 8010f52:	a001      	add	r0, pc, #4	; (adr r0, 8010f58 <_printf_i+0x40>)
 8010f54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010f58:	08010fb1 	.word	0x08010fb1
 8010f5c:	08010fc5 	.word	0x08010fc5
 8010f60:	08010f41 	.word	0x08010f41
 8010f64:	08010f41 	.word	0x08010f41
 8010f68:	08010f41 	.word	0x08010f41
 8010f6c:	08010f41 	.word	0x08010f41
 8010f70:	08010fc5 	.word	0x08010fc5
 8010f74:	08010f41 	.word	0x08010f41
 8010f78:	08010f41 	.word	0x08010f41
 8010f7c:	08010f41 	.word	0x08010f41
 8010f80:	08010f41 	.word	0x08010f41
 8010f84:	080110d1 	.word	0x080110d1
 8010f88:	08010ff5 	.word	0x08010ff5
 8010f8c:	080110b3 	.word	0x080110b3
 8010f90:	08010f41 	.word	0x08010f41
 8010f94:	08010f41 	.word	0x08010f41
 8010f98:	080110f3 	.word	0x080110f3
 8010f9c:	08010f41 	.word	0x08010f41
 8010fa0:	08010ff5 	.word	0x08010ff5
 8010fa4:	08010f41 	.word	0x08010f41
 8010fa8:	08010f41 	.word	0x08010f41
 8010fac:	080110bb 	.word	0x080110bb
 8010fb0:	680b      	ldr	r3, [r1, #0]
 8010fb2:	1d1a      	adds	r2, r3, #4
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	600a      	str	r2, [r1, #0]
 8010fb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010fbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	e0a3      	b.n	801110c <_printf_i+0x1f4>
 8010fc4:	6825      	ldr	r5, [r4, #0]
 8010fc6:	6808      	ldr	r0, [r1, #0]
 8010fc8:	062e      	lsls	r6, r5, #24
 8010fca:	f100 0304 	add.w	r3, r0, #4
 8010fce:	d50a      	bpl.n	8010fe6 <_printf_i+0xce>
 8010fd0:	6805      	ldr	r5, [r0, #0]
 8010fd2:	600b      	str	r3, [r1, #0]
 8010fd4:	2d00      	cmp	r5, #0
 8010fd6:	da03      	bge.n	8010fe0 <_printf_i+0xc8>
 8010fd8:	232d      	movs	r3, #45	; 0x2d
 8010fda:	426d      	negs	r5, r5
 8010fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fe0:	485e      	ldr	r0, [pc, #376]	; (801115c <_printf_i+0x244>)
 8010fe2:	230a      	movs	r3, #10
 8010fe4:	e019      	b.n	801101a <_printf_i+0x102>
 8010fe6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010fea:	6805      	ldr	r5, [r0, #0]
 8010fec:	600b      	str	r3, [r1, #0]
 8010fee:	bf18      	it	ne
 8010ff0:	b22d      	sxthne	r5, r5
 8010ff2:	e7ef      	b.n	8010fd4 <_printf_i+0xbc>
 8010ff4:	680b      	ldr	r3, [r1, #0]
 8010ff6:	6825      	ldr	r5, [r4, #0]
 8010ff8:	1d18      	adds	r0, r3, #4
 8010ffa:	6008      	str	r0, [r1, #0]
 8010ffc:	0628      	lsls	r0, r5, #24
 8010ffe:	d501      	bpl.n	8011004 <_printf_i+0xec>
 8011000:	681d      	ldr	r5, [r3, #0]
 8011002:	e002      	b.n	801100a <_printf_i+0xf2>
 8011004:	0669      	lsls	r1, r5, #25
 8011006:	d5fb      	bpl.n	8011000 <_printf_i+0xe8>
 8011008:	881d      	ldrh	r5, [r3, #0]
 801100a:	4854      	ldr	r0, [pc, #336]	; (801115c <_printf_i+0x244>)
 801100c:	2f6f      	cmp	r7, #111	; 0x6f
 801100e:	bf0c      	ite	eq
 8011010:	2308      	moveq	r3, #8
 8011012:	230a      	movne	r3, #10
 8011014:	2100      	movs	r1, #0
 8011016:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801101a:	6866      	ldr	r6, [r4, #4]
 801101c:	60a6      	str	r6, [r4, #8]
 801101e:	2e00      	cmp	r6, #0
 8011020:	bfa2      	ittt	ge
 8011022:	6821      	ldrge	r1, [r4, #0]
 8011024:	f021 0104 	bicge.w	r1, r1, #4
 8011028:	6021      	strge	r1, [r4, #0]
 801102a:	b90d      	cbnz	r5, 8011030 <_printf_i+0x118>
 801102c:	2e00      	cmp	r6, #0
 801102e:	d04d      	beq.n	80110cc <_printf_i+0x1b4>
 8011030:	4616      	mov	r6, r2
 8011032:	fbb5 f1f3 	udiv	r1, r5, r3
 8011036:	fb03 5711 	mls	r7, r3, r1, r5
 801103a:	5dc7      	ldrb	r7, [r0, r7]
 801103c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011040:	462f      	mov	r7, r5
 8011042:	42bb      	cmp	r3, r7
 8011044:	460d      	mov	r5, r1
 8011046:	d9f4      	bls.n	8011032 <_printf_i+0x11a>
 8011048:	2b08      	cmp	r3, #8
 801104a:	d10b      	bne.n	8011064 <_printf_i+0x14c>
 801104c:	6823      	ldr	r3, [r4, #0]
 801104e:	07df      	lsls	r7, r3, #31
 8011050:	d508      	bpl.n	8011064 <_printf_i+0x14c>
 8011052:	6923      	ldr	r3, [r4, #16]
 8011054:	6861      	ldr	r1, [r4, #4]
 8011056:	4299      	cmp	r1, r3
 8011058:	bfde      	ittt	le
 801105a:	2330      	movle	r3, #48	; 0x30
 801105c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011060:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011064:	1b92      	subs	r2, r2, r6
 8011066:	6122      	str	r2, [r4, #16]
 8011068:	f8cd a000 	str.w	sl, [sp]
 801106c:	464b      	mov	r3, r9
 801106e:	aa03      	add	r2, sp, #12
 8011070:	4621      	mov	r1, r4
 8011072:	4640      	mov	r0, r8
 8011074:	f7ff fee2 	bl	8010e3c <_printf_common>
 8011078:	3001      	adds	r0, #1
 801107a:	d14c      	bne.n	8011116 <_printf_i+0x1fe>
 801107c:	f04f 30ff 	mov.w	r0, #4294967295
 8011080:	b004      	add	sp, #16
 8011082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011086:	4835      	ldr	r0, [pc, #212]	; (801115c <_printf_i+0x244>)
 8011088:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801108c:	6823      	ldr	r3, [r4, #0]
 801108e:	680e      	ldr	r6, [r1, #0]
 8011090:	061f      	lsls	r7, r3, #24
 8011092:	f856 5b04 	ldr.w	r5, [r6], #4
 8011096:	600e      	str	r6, [r1, #0]
 8011098:	d514      	bpl.n	80110c4 <_printf_i+0x1ac>
 801109a:	07d9      	lsls	r1, r3, #31
 801109c:	bf44      	itt	mi
 801109e:	f043 0320 	orrmi.w	r3, r3, #32
 80110a2:	6023      	strmi	r3, [r4, #0]
 80110a4:	b91d      	cbnz	r5, 80110ae <_printf_i+0x196>
 80110a6:	6823      	ldr	r3, [r4, #0]
 80110a8:	f023 0320 	bic.w	r3, r3, #32
 80110ac:	6023      	str	r3, [r4, #0]
 80110ae:	2310      	movs	r3, #16
 80110b0:	e7b0      	b.n	8011014 <_printf_i+0xfc>
 80110b2:	6823      	ldr	r3, [r4, #0]
 80110b4:	f043 0320 	orr.w	r3, r3, #32
 80110b8:	6023      	str	r3, [r4, #0]
 80110ba:	2378      	movs	r3, #120	; 0x78
 80110bc:	4828      	ldr	r0, [pc, #160]	; (8011160 <_printf_i+0x248>)
 80110be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80110c2:	e7e3      	b.n	801108c <_printf_i+0x174>
 80110c4:	065e      	lsls	r6, r3, #25
 80110c6:	bf48      	it	mi
 80110c8:	b2ad      	uxthmi	r5, r5
 80110ca:	e7e6      	b.n	801109a <_printf_i+0x182>
 80110cc:	4616      	mov	r6, r2
 80110ce:	e7bb      	b.n	8011048 <_printf_i+0x130>
 80110d0:	680b      	ldr	r3, [r1, #0]
 80110d2:	6826      	ldr	r6, [r4, #0]
 80110d4:	6960      	ldr	r0, [r4, #20]
 80110d6:	1d1d      	adds	r5, r3, #4
 80110d8:	600d      	str	r5, [r1, #0]
 80110da:	0635      	lsls	r5, r6, #24
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	d501      	bpl.n	80110e4 <_printf_i+0x1cc>
 80110e0:	6018      	str	r0, [r3, #0]
 80110e2:	e002      	b.n	80110ea <_printf_i+0x1d2>
 80110e4:	0671      	lsls	r1, r6, #25
 80110e6:	d5fb      	bpl.n	80110e0 <_printf_i+0x1c8>
 80110e8:	8018      	strh	r0, [r3, #0]
 80110ea:	2300      	movs	r3, #0
 80110ec:	6123      	str	r3, [r4, #16]
 80110ee:	4616      	mov	r6, r2
 80110f0:	e7ba      	b.n	8011068 <_printf_i+0x150>
 80110f2:	680b      	ldr	r3, [r1, #0]
 80110f4:	1d1a      	adds	r2, r3, #4
 80110f6:	600a      	str	r2, [r1, #0]
 80110f8:	681e      	ldr	r6, [r3, #0]
 80110fa:	6862      	ldr	r2, [r4, #4]
 80110fc:	2100      	movs	r1, #0
 80110fe:	4630      	mov	r0, r6
 8011100:	f7ef f8f6 	bl	80002f0 <memchr>
 8011104:	b108      	cbz	r0, 801110a <_printf_i+0x1f2>
 8011106:	1b80      	subs	r0, r0, r6
 8011108:	6060      	str	r0, [r4, #4]
 801110a:	6863      	ldr	r3, [r4, #4]
 801110c:	6123      	str	r3, [r4, #16]
 801110e:	2300      	movs	r3, #0
 8011110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011114:	e7a8      	b.n	8011068 <_printf_i+0x150>
 8011116:	6923      	ldr	r3, [r4, #16]
 8011118:	4632      	mov	r2, r6
 801111a:	4649      	mov	r1, r9
 801111c:	4640      	mov	r0, r8
 801111e:	47d0      	blx	sl
 8011120:	3001      	adds	r0, #1
 8011122:	d0ab      	beq.n	801107c <_printf_i+0x164>
 8011124:	6823      	ldr	r3, [r4, #0]
 8011126:	079b      	lsls	r3, r3, #30
 8011128:	d413      	bmi.n	8011152 <_printf_i+0x23a>
 801112a:	68e0      	ldr	r0, [r4, #12]
 801112c:	9b03      	ldr	r3, [sp, #12]
 801112e:	4298      	cmp	r0, r3
 8011130:	bfb8      	it	lt
 8011132:	4618      	movlt	r0, r3
 8011134:	e7a4      	b.n	8011080 <_printf_i+0x168>
 8011136:	2301      	movs	r3, #1
 8011138:	4632      	mov	r2, r6
 801113a:	4649      	mov	r1, r9
 801113c:	4640      	mov	r0, r8
 801113e:	47d0      	blx	sl
 8011140:	3001      	adds	r0, #1
 8011142:	d09b      	beq.n	801107c <_printf_i+0x164>
 8011144:	3501      	adds	r5, #1
 8011146:	68e3      	ldr	r3, [r4, #12]
 8011148:	9903      	ldr	r1, [sp, #12]
 801114a:	1a5b      	subs	r3, r3, r1
 801114c:	42ab      	cmp	r3, r5
 801114e:	dcf2      	bgt.n	8011136 <_printf_i+0x21e>
 8011150:	e7eb      	b.n	801112a <_printf_i+0x212>
 8011152:	2500      	movs	r5, #0
 8011154:	f104 0619 	add.w	r6, r4, #25
 8011158:	e7f5      	b.n	8011146 <_printf_i+0x22e>
 801115a:	bf00      	nop
 801115c:	08014c86 	.word	0x08014c86
 8011160:	08014c97 	.word	0x08014c97

08011164 <quorem>:
 8011164:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011168:	6903      	ldr	r3, [r0, #16]
 801116a:	690c      	ldr	r4, [r1, #16]
 801116c:	42a3      	cmp	r3, r4
 801116e:	4607      	mov	r7, r0
 8011170:	f2c0 8081 	blt.w	8011276 <quorem+0x112>
 8011174:	3c01      	subs	r4, #1
 8011176:	f101 0814 	add.w	r8, r1, #20
 801117a:	f100 0514 	add.w	r5, r0, #20
 801117e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011182:	9301      	str	r3, [sp, #4]
 8011184:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011188:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801118c:	3301      	adds	r3, #1
 801118e:	429a      	cmp	r2, r3
 8011190:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011194:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011198:	fbb2 f6f3 	udiv	r6, r2, r3
 801119c:	d331      	bcc.n	8011202 <quorem+0x9e>
 801119e:	f04f 0e00 	mov.w	lr, #0
 80111a2:	4640      	mov	r0, r8
 80111a4:	46ac      	mov	ip, r5
 80111a6:	46f2      	mov	sl, lr
 80111a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80111ac:	b293      	uxth	r3, r2
 80111ae:	fb06 e303 	mla	r3, r6, r3, lr
 80111b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80111b6:	b29b      	uxth	r3, r3
 80111b8:	ebaa 0303 	sub.w	r3, sl, r3
 80111bc:	0c12      	lsrs	r2, r2, #16
 80111be:	f8dc a000 	ldr.w	sl, [ip]
 80111c2:	fb06 e202 	mla	r2, r6, r2, lr
 80111c6:	fa13 f38a 	uxtah	r3, r3, sl
 80111ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80111ce:	fa1f fa82 	uxth.w	sl, r2
 80111d2:	f8dc 2000 	ldr.w	r2, [ip]
 80111d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80111da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80111de:	b29b      	uxth	r3, r3
 80111e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80111e4:	4581      	cmp	r9, r0
 80111e6:	f84c 3b04 	str.w	r3, [ip], #4
 80111ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80111ee:	d2db      	bcs.n	80111a8 <quorem+0x44>
 80111f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80111f4:	b92b      	cbnz	r3, 8011202 <quorem+0x9e>
 80111f6:	9b01      	ldr	r3, [sp, #4]
 80111f8:	3b04      	subs	r3, #4
 80111fa:	429d      	cmp	r5, r3
 80111fc:	461a      	mov	r2, r3
 80111fe:	d32e      	bcc.n	801125e <quorem+0xfa>
 8011200:	613c      	str	r4, [r7, #16]
 8011202:	4638      	mov	r0, r7
 8011204:	f001 f856 	bl	80122b4 <__mcmp>
 8011208:	2800      	cmp	r0, #0
 801120a:	db24      	blt.n	8011256 <quorem+0xf2>
 801120c:	3601      	adds	r6, #1
 801120e:	4628      	mov	r0, r5
 8011210:	f04f 0c00 	mov.w	ip, #0
 8011214:	f858 2b04 	ldr.w	r2, [r8], #4
 8011218:	f8d0 e000 	ldr.w	lr, [r0]
 801121c:	b293      	uxth	r3, r2
 801121e:	ebac 0303 	sub.w	r3, ip, r3
 8011222:	0c12      	lsrs	r2, r2, #16
 8011224:	fa13 f38e 	uxtah	r3, r3, lr
 8011228:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801122c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011230:	b29b      	uxth	r3, r3
 8011232:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011236:	45c1      	cmp	r9, r8
 8011238:	f840 3b04 	str.w	r3, [r0], #4
 801123c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011240:	d2e8      	bcs.n	8011214 <quorem+0xb0>
 8011242:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011246:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801124a:	b922      	cbnz	r2, 8011256 <quorem+0xf2>
 801124c:	3b04      	subs	r3, #4
 801124e:	429d      	cmp	r5, r3
 8011250:	461a      	mov	r2, r3
 8011252:	d30a      	bcc.n	801126a <quorem+0x106>
 8011254:	613c      	str	r4, [r7, #16]
 8011256:	4630      	mov	r0, r6
 8011258:	b003      	add	sp, #12
 801125a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801125e:	6812      	ldr	r2, [r2, #0]
 8011260:	3b04      	subs	r3, #4
 8011262:	2a00      	cmp	r2, #0
 8011264:	d1cc      	bne.n	8011200 <quorem+0x9c>
 8011266:	3c01      	subs	r4, #1
 8011268:	e7c7      	b.n	80111fa <quorem+0x96>
 801126a:	6812      	ldr	r2, [r2, #0]
 801126c:	3b04      	subs	r3, #4
 801126e:	2a00      	cmp	r2, #0
 8011270:	d1f0      	bne.n	8011254 <quorem+0xf0>
 8011272:	3c01      	subs	r4, #1
 8011274:	e7eb      	b.n	801124e <quorem+0xea>
 8011276:	2000      	movs	r0, #0
 8011278:	e7ee      	b.n	8011258 <quorem+0xf4>
 801127a:	0000      	movs	r0, r0
 801127c:	0000      	movs	r0, r0
	...

08011280 <_dtoa_r>:
 8011280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011284:	ec59 8b10 	vmov	r8, r9, d0
 8011288:	b095      	sub	sp, #84	; 0x54
 801128a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801128c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801128e:	9107      	str	r1, [sp, #28]
 8011290:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8011294:	4606      	mov	r6, r0
 8011296:	9209      	str	r2, [sp, #36]	; 0x24
 8011298:	9310      	str	r3, [sp, #64]	; 0x40
 801129a:	b975      	cbnz	r5, 80112ba <_dtoa_r+0x3a>
 801129c:	2010      	movs	r0, #16
 801129e:	f000 fd75 	bl	8011d8c <malloc>
 80112a2:	4602      	mov	r2, r0
 80112a4:	6270      	str	r0, [r6, #36]	; 0x24
 80112a6:	b920      	cbnz	r0, 80112b2 <_dtoa_r+0x32>
 80112a8:	4bab      	ldr	r3, [pc, #684]	; (8011558 <_dtoa_r+0x2d8>)
 80112aa:	21ea      	movs	r1, #234	; 0xea
 80112ac:	48ab      	ldr	r0, [pc, #684]	; (801155c <_dtoa_r+0x2dc>)
 80112ae:	f001 f9cb 	bl	8012648 <__assert_func>
 80112b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80112b6:	6005      	str	r5, [r0, #0]
 80112b8:	60c5      	str	r5, [r0, #12]
 80112ba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80112bc:	6819      	ldr	r1, [r3, #0]
 80112be:	b151      	cbz	r1, 80112d6 <_dtoa_r+0x56>
 80112c0:	685a      	ldr	r2, [r3, #4]
 80112c2:	604a      	str	r2, [r1, #4]
 80112c4:	2301      	movs	r3, #1
 80112c6:	4093      	lsls	r3, r2
 80112c8:	608b      	str	r3, [r1, #8]
 80112ca:	4630      	mov	r0, r6
 80112cc:	f000 fdb4 	bl	8011e38 <_Bfree>
 80112d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80112d2:	2200      	movs	r2, #0
 80112d4:	601a      	str	r2, [r3, #0]
 80112d6:	f1b9 0300 	subs.w	r3, r9, #0
 80112da:	bfbb      	ittet	lt
 80112dc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80112e0:	9303      	strlt	r3, [sp, #12]
 80112e2:	2300      	movge	r3, #0
 80112e4:	2201      	movlt	r2, #1
 80112e6:	bfac      	ite	ge
 80112e8:	6023      	strge	r3, [r4, #0]
 80112ea:	6022      	strlt	r2, [r4, #0]
 80112ec:	4b9c      	ldr	r3, [pc, #624]	; (8011560 <_dtoa_r+0x2e0>)
 80112ee:	9c03      	ldr	r4, [sp, #12]
 80112f0:	43a3      	bics	r3, r4
 80112f2:	d11a      	bne.n	801132a <_dtoa_r+0xaa>
 80112f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80112f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80112fa:	6013      	str	r3, [r2, #0]
 80112fc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8011300:	ea53 0308 	orrs.w	r3, r3, r8
 8011304:	f000 8512 	beq.w	8011d2c <_dtoa_r+0xaac>
 8011308:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801130a:	b953      	cbnz	r3, 8011322 <_dtoa_r+0xa2>
 801130c:	4b95      	ldr	r3, [pc, #596]	; (8011564 <_dtoa_r+0x2e4>)
 801130e:	e01f      	b.n	8011350 <_dtoa_r+0xd0>
 8011310:	4b95      	ldr	r3, [pc, #596]	; (8011568 <_dtoa_r+0x2e8>)
 8011312:	9300      	str	r3, [sp, #0]
 8011314:	3308      	adds	r3, #8
 8011316:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011318:	6013      	str	r3, [r2, #0]
 801131a:	9800      	ldr	r0, [sp, #0]
 801131c:	b015      	add	sp, #84	; 0x54
 801131e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011322:	4b90      	ldr	r3, [pc, #576]	; (8011564 <_dtoa_r+0x2e4>)
 8011324:	9300      	str	r3, [sp, #0]
 8011326:	3303      	adds	r3, #3
 8011328:	e7f5      	b.n	8011316 <_dtoa_r+0x96>
 801132a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801132e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011336:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801133a:	d10b      	bne.n	8011354 <_dtoa_r+0xd4>
 801133c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801133e:	2301      	movs	r3, #1
 8011340:	6013      	str	r3, [r2, #0]
 8011342:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011344:	2b00      	cmp	r3, #0
 8011346:	f000 84ee 	beq.w	8011d26 <_dtoa_r+0xaa6>
 801134a:	4888      	ldr	r0, [pc, #544]	; (801156c <_dtoa_r+0x2ec>)
 801134c:	6018      	str	r0, [r3, #0]
 801134e:	1e43      	subs	r3, r0, #1
 8011350:	9300      	str	r3, [sp, #0]
 8011352:	e7e2      	b.n	801131a <_dtoa_r+0x9a>
 8011354:	a913      	add	r1, sp, #76	; 0x4c
 8011356:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801135a:	aa12      	add	r2, sp, #72	; 0x48
 801135c:	4630      	mov	r0, r6
 801135e:	f001 f84d 	bl	80123fc <__d2b>
 8011362:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8011366:	4605      	mov	r5, r0
 8011368:	9812      	ldr	r0, [sp, #72]	; 0x48
 801136a:	2900      	cmp	r1, #0
 801136c:	d047      	beq.n	80113fe <_dtoa_r+0x17e>
 801136e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8011370:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011374:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011378:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801137c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011380:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011384:	2400      	movs	r4, #0
 8011386:	ec43 2b16 	vmov	d6, r2, r3
 801138a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801138e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8011540 <_dtoa_r+0x2c0>
 8011392:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011396:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8011548 <_dtoa_r+0x2c8>
 801139a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801139e:	eeb0 7b46 	vmov.f64	d7, d6
 80113a2:	ee06 1a90 	vmov	s13, r1
 80113a6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80113aa:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011550 <_dtoa_r+0x2d0>
 80113ae:	eea5 7b06 	vfma.f64	d7, d5, d6
 80113b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80113b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80113ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113be:	ee16 ba90 	vmov	fp, s13
 80113c2:	9411      	str	r4, [sp, #68]	; 0x44
 80113c4:	d508      	bpl.n	80113d8 <_dtoa_r+0x158>
 80113c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80113ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80113ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113d2:	bf18      	it	ne
 80113d4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80113d8:	f1bb 0f16 	cmp.w	fp, #22
 80113dc:	d832      	bhi.n	8011444 <_dtoa_r+0x1c4>
 80113de:	4b64      	ldr	r3, [pc, #400]	; (8011570 <_dtoa_r+0x2f0>)
 80113e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80113e4:	ed93 7b00 	vldr	d7, [r3]
 80113e8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80113ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80113f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113f4:	d501      	bpl.n	80113fa <_dtoa_r+0x17a>
 80113f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80113fa:	2300      	movs	r3, #0
 80113fc:	e023      	b.n	8011446 <_dtoa_r+0x1c6>
 80113fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011400:	4401      	add	r1, r0
 8011402:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8011406:	2b20      	cmp	r3, #32
 8011408:	bfc3      	ittte	gt
 801140a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801140e:	fa04 f303 	lslgt.w	r3, r4, r3
 8011412:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8011416:	f1c3 0320 	rsble	r3, r3, #32
 801141a:	bfc6      	itte	gt
 801141c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8011420:	ea43 0308 	orrgt.w	r3, r3, r8
 8011424:	fa08 f303 	lslle.w	r3, r8, r3
 8011428:	ee07 3a90 	vmov	s15, r3
 801142c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011430:	3901      	subs	r1, #1
 8011432:	ed8d 7b00 	vstr	d7, [sp]
 8011436:	9c01      	ldr	r4, [sp, #4]
 8011438:	e9dd 2300 	ldrd	r2, r3, [sp]
 801143c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8011440:	2401      	movs	r4, #1
 8011442:	e7a0      	b.n	8011386 <_dtoa_r+0x106>
 8011444:	2301      	movs	r3, #1
 8011446:	930f      	str	r3, [sp, #60]	; 0x3c
 8011448:	1a43      	subs	r3, r0, r1
 801144a:	1e5a      	subs	r2, r3, #1
 801144c:	bf45      	ittet	mi
 801144e:	f1c3 0301 	rsbmi	r3, r3, #1
 8011452:	9305      	strmi	r3, [sp, #20]
 8011454:	2300      	movpl	r3, #0
 8011456:	2300      	movmi	r3, #0
 8011458:	9206      	str	r2, [sp, #24]
 801145a:	bf54      	ite	pl
 801145c:	9305      	strpl	r3, [sp, #20]
 801145e:	9306      	strmi	r3, [sp, #24]
 8011460:	f1bb 0f00 	cmp.w	fp, #0
 8011464:	db18      	blt.n	8011498 <_dtoa_r+0x218>
 8011466:	9b06      	ldr	r3, [sp, #24]
 8011468:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801146c:	445b      	add	r3, fp
 801146e:	9306      	str	r3, [sp, #24]
 8011470:	2300      	movs	r3, #0
 8011472:	9a07      	ldr	r2, [sp, #28]
 8011474:	2a09      	cmp	r2, #9
 8011476:	d849      	bhi.n	801150c <_dtoa_r+0x28c>
 8011478:	2a05      	cmp	r2, #5
 801147a:	bfc4      	itt	gt
 801147c:	3a04      	subgt	r2, #4
 801147e:	9207      	strgt	r2, [sp, #28]
 8011480:	9a07      	ldr	r2, [sp, #28]
 8011482:	f1a2 0202 	sub.w	r2, r2, #2
 8011486:	bfcc      	ite	gt
 8011488:	2400      	movgt	r4, #0
 801148a:	2401      	movle	r4, #1
 801148c:	2a03      	cmp	r2, #3
 801148e:	d848      	bhi.n	8011522 <_dtoa_r+0x2a2>
 8011490:	e8df f002 	tbb	[pc, r2]
 8011494:	3a2c2e0b 	.word	0x3a2c2e0b
 8011498:	9b05      	ldr	r3, [sp, #20]
 801149a:	2200      	movs	r2, #0
 801149c:	eba3 030b 	sub.w	r3, r3, fp
 80114a0:	9305      	str	r3, [sp, #20]
 80114a2:	920e      	str	r2, [sp, #56]	; 0x38
 80114a4:	f1cb 0300 	rsb	r3, fp, #0
 80114a8:	e7e3      	b.n	8011472 <_dtoa_r+0x1f2>
 80114aa:	2200      	movs	r2, #0
 80114ac:	9208      	str	r2, [sp, #32]
 80114ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114b0:	2a00      	cmp	r2, #0
 80114b2:	dc39      	bgt.n	8011528 <_dtoa_r+0x2a8>
 80114b4:	f04f 0a01 	mov.w	sl, #1
 80114b8:	46d1      	mov	r9, sl
 80114ba:	4652      	mov	r2, sl
 80114bc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80114c0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80114c2:	2100      	movs	r1, #0
 80114c4:	6079      	str	r1, [r7, #4]
 80114c6:	2004      	movs	r0, #4
 80114c8:	f100 0c14 	add.w	ip, r0, #20
 80114cc:	4594      	cmp	ip, r2
 80114ce:	6879      	ldr	r1, [r7, #4]
 80114d0:	d92f      	bls.n	8011532 <_dtoa_r+0x2b2>
 80114d2:	4630      	mov	r0, r6
 80114d4:	930c      	str	r3, [sp, #48]	; 0x30
 80114d6:	f000 fc6f 	bl	8011db8 <_Balloc>
 80114da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80114dc:	9000      	str	r0, [sp, #0]
 80114de:	4602      	mov	r2, r0
 80114e0:	2800      	cmp	r0, #0
 80114e2:	d149      	bne.n	8011578 <_dtoa_r+0x2f8>
 80114e4:	4b23      	ldr	r3, [pc, #140]	; (8011574 <_dtoa_r+0x2f4>)
 80114e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80114ea:	e6df      	b.n	80112ac <_dtoa_r+0x2c>
 80114ec:	2201      	movs	r2, #1
 80114ee:	e7dd      	b.n	80114ac <_dtoa_r+0x22c>
 80114f0:	2200      	movs	r2, #0
 80114f2:	9208      	str	r2, [sp, #32]
 80114f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114f6:	eb0b 0a02 	add.w	sl, fp, r2
 80114fa:	f10a 0901 	add.w	r9, sl, #1
 80114fe:	464a      	mov	r2, r9
 8011500:	2a01      	cmp	r2, #1
 8011502:	bfb8      	it	lt
 8011504:	2201      	movlt	r2, #1
 8011506:	e7db      	b.n	80114c0 <_dtoa_r+0x240>
 8011508:	2201      	movs	r2, #1
 801150a:	e7f2      	b.n	80114f2 <_dtoa_r+0x272>
 801150c:	2401      	movs	r4, #1
 801150e:	2200      	movs	r2, #0
 8011510:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8011514:	f04f 3aff 	mov.w	sl, #4294967295
 8011518:	2100      	movs	r1, #0
 801151a:	46d1      	mov	r9, sl
 801151c:	2212      	movs	r2, #18
 801151e:	9109      	str	r1, [sp, #36]	; 0x24
 8011520:	e7ce      	b.n	80114c0 <_dtoa_r+0x240>
 8011522:	2201      	movs	r2, #1
 8011524:	9208      	str	r2, [sp, #32]
 8011526:	e7f5      	b.n	8011514 <_dtoa_r+0x294>
 8011528:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801152c:	46d1      	mov	r9, sl
 801152e:	4652      	mov	r2, sl
 8011530:	e7c6      	b.n	80114c0 <_dtoa_r+0x240>
 8011532:	3101      	adds	r1, #1
 8011534:	6079      	str	r1, [r7, #4]
 8011536:	0040      	lsls	r0, r0, #1
 8011538:	e7c6      	b.n	80114c8 <_dtoa_r+0x248>
 801153a:	bf00      	nop
 801153c:	f3af 8000 	nop.w
 8011540:	636f4361 	.word	0x636f4361
 8011544:	3fd287a7 	.word	0x3fd287a7
 8011548:	8b60c8b3 	.word	0x8b60c8b3
 801154c:	3fc68a28 	.word	0x3fc68a28
 8011550:	509f79fb 	.word	0x509f79fb
 8011554:	3fd34413 	.word	0x3fd34413
 8011558:	08014cb5 	.word	0x08014cb5
 801155c:	08014ccc 	.word	0x08014ccc
 8011560:	7ff00000 	.word	0x7ff00000
 8011564:	08014cb1 	.word	0x08014cb1
 8011568:	08014ca8 	.word	0x08014ca8
 801156c:	08014c85 	.word	0x08014c85
 8011570:	08014dc8 	.word	0x08014dc8
 8011574:	08014d2b 	.word	0x08014d2b
 8011578:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801157a:	9900      	ldr	r1, [sp, #0]
 801157c:	6011      	str	r1, [r2, #0]
 801157e:	f1b9 0f0e 	cmp.w	r9, #14
 8011582:	d872      	bhi.n	801166a <_dtoa_r+0x3ea>
 8011584:	2c00      	cmp	r4, #0
 8011586:	d070      	beq.n	801166a <_dtoa_r+0x3ea>
 8011588:	f1bb 0f00 	cmp.w	fp, #0
 801158c:	f340 80a6 	ble.w	80116dc <_dtoa_r+0x45c>
 8011590:	49ca      	ldr	r1, [pc, #808]	; (80118bc <_dtoa_r+0x63c>)
 8011592:	f00b 020f 	and.w	r2, fp, #15
 8011596:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801159a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801159e:	ed92 7b00 	vldr	d7, [r2]
 80115a2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80115a6:	f000 808d 	beq.w	80116c4 <_dtoa_r+0x444>
 80115aa:	4ac5      	ldr	r2, [pc, #788]	; (80118c0 <_dtoa_r+0x640>)
 80115ac:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80115b0:	ed92 6b08 	vldr	d6, [r2, #32]
 80115b4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80115b8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80115bc:	f001 010f 	and.w	r1, r1, #15
 80115c0:	2203      	movs	r2, #3
 80115c2:	48bf      	ldr	r0, [pc, #764]	; (80118c0 <_dtoa_r+0x640>)
 80115c4:	2900      	cmp	r1, #0
 80115c6:	d17f      	bne.n	80116c8 <_dtoa_r+0x448>
 80115c8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80115cc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80115d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80115d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80115d6:	2900      	cmp	r1, #0
 80115d8:	f000 80b2 	beq.w	8011740 <_dtoa_r+0x4c0>
 80115dc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80115e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80115e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80115e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115ec:	f140 80a8 	bpl.w	8011740 <_dtoa_r+0x4c0>
 80115f0:	f1b9 0f00 	cmp.w	r9, #0
 80115f4:	f000 80a4 	beq.w	8011740 <_dtoa_r+0x4c0>
 80115f8:	f1ba 0f00 	cmp.w	sl, #0
 80115fc:	dd31      	ble.n	8011662 <_dtoa_r+0x3e2>
 80115fe:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8011602:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011606:	ed8d 7b02 	vstr	d7, [sp, #8]
 801160a:	f10b 37ff 	add.w	r7, fp, #4294967295
 801160e:	3201      	adds	r2, #1
 8011610:	4650      	mov	r0, sl
 8011612:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011616:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801161a:	ee07 2a90 	vmov	s15, r2
 801161e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011622:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011626:	ed8d 5b02 	vstr	d5, [sp, #8]
 801162a:	9c03      	ldr	r4, [sp, #12]
 801162c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8011630:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8011634:	2800      	cmp	r0, #0
 8011636:	f040 8086 	bne.w	8011746 <_dtoa_r+0x4c6>
 801163a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801163e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011642:	ec42 1b17 	vmov	d7, r1, r2
 8011646:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801164a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801164e:	f300 8272 	bgt.w	8011b36 <_dtoa_r+0x8b6>
 8011652:	eeb1 7b47 	vneg.f64	d7, d7
 8011656:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801165a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801165e:	f100 8267 	bmi.w	8011b30 <_dtoa_r+0x8b0>
 8011662:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8011666:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801166a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801166c:	2a00      	cmp	r2, #0
 801166e:	f2c0 8129 	blt.w	80118c4 <_dtoa_r+0x644>
 8011672:	f1bb 0f0e 	cmp.w	fp, #14
 8011676:	f300 8125 	bgt.w	80118c4 <_dtoa_r+0x644>
 801167a:	4b90      	ldr	r3, [pc, #576]	; (80118bc <_dtoa_r+0x63c>)
 801167c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011680:	ed93 6b00 	vldr	d6, [r3]
 8011684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011686:	2b00      	cmp	r3, #0
 8011688:	f280 80c3 	bge.w	8011812 <_dtoa_r+0x592>
 801168c:	f1b9 0f00 	cmp.w	r9, #0
 8011690:	f300 80bf 	bgt.w	8011812 <_dtoa_r+0x592>
 8011694:	f040 824c 	bne.w	8011b30 <_dtoa_r+0x8b0>
 8011698:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801169c:	ee26 6b07 	vmul.f64	d6, d6, d7
 80116a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80116a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80116a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ac:	464c      	mov	r4, r9
 80116ae:	464f      	mov	r7, r9
 80116b0:	f280 8222 	bge.w	8011af8 <_dtoa_r+0x878>
 80116b4:	f8dd 8000 	ldr.w	r8, [sp]
 80116b8:	2331      	movs	r3, #49	; 0x31
 80116ba:	f808 3b01 	strb.w	r3, [r8], #1
 80116be:	f10b 0b01 	add.w	fp, fp, #1
 80116c2:	e21e      	b.n	8011b02 <_dtoa_r+0x882>
 80116c4:	2202      	movs	r2, #2
 80116c6:	e77c      	b.n	80115c2 <_dtoa_r+0x342>
 80116c8:	07cc      	lsls	r4, r1, #31
 80116ca:	d504      	bpl.n	80116d6 <_dtoa_r+0x456>
 80116cc:	ed90 6b00 	vldr	d6, [r0]
 80116d0:	3201      	adds	r2, #1
 80116d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80116d6:	1049      	asrs	r1, r1, #1
 80116d8:	3008      	adds	r0, #8
 80116da:	e773      	b.n	80115c4 <_dtoa_r+0x344>
 80116dc:	d02e      	beq.n	801173c <_dtoa_r+0x4bc>
 80116de:	f1cb 0100 	rsb	r1, fp, #0
 80116e2:	4a76      	ldr	r2, [pc, #472]	; (80118bc <_dtoa_r+0x63c>)
 80116e4:	f001 000f 	and.w	r0, r1, #15
 80116e8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80116ec:	ed92 7b00 	vldr	d7, [r2]
 80116f0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80116f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80116f8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80116fc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8011700:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8011704:	486e      	ldr	r0, [pc, #440]	; (80118c0 <_dtoa_r+0x640>)
 8011706:	1109      	asrs	r1, r1, #4
 8011708:	2400      	movs	r4, #0
 801170a:	2202      	movs	r2, #2
 801170c:	b939      	cbnz	r1, 801171e <_dtoa_r+0x49e>
 801170e:	2c00      	cmp	r4, #0
 8011710:	f43f af60 	beq.w	80115d4 <_dtoa_r+0x354>
 8011714:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011718:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801171c:	e75a      	b.n	80115d4 <_dtoa_r+0x354>
 801171e:	07cf      	lsls	r7, r1, #31
 8011720:	d509      	bpl.n	8011736 <_dtoa_r+0x4b6>
 8011722:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8011726:	ed90 7b00 	vldr	d7, [r0]
 801172a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801172e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8011732:	3201      	adds	r2, #1
 8011734:	2401      	movs	r4, #1
 8011736:	1049      	asrs	r1, r1, #1
 8011738:	3008      	adds	r0, #8
 801173a:	e7e7      	b.n	801170c <_dtoa_r+0x48c>
 801173c:	2202      	movs	r2, #2
 801173e:	e749      	b.n	80115d4 <_dtoa_r+0x354>
 8011740:	465f      	mov	r7, fp
 8011742:	4648      	mov	r0, r9
 8011744:	e765      	b.n	8011612 <_dtoa_r+0x392>
 8011746:	ec42 1b17 	vmov	d7, r1, r2
 801174a:	4a5c      	ldr	r2, [pc, #368]	; (80118bc <_dtoa_r+0x63c>)
 801174c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011750:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011754:	9a00      	ldr	r2, [sp, #0]
 8011756:	1814      	adds	r4, r2, r0
 8011758:	9a08      	ldr	r2, [sp, #32]
 801175a:	b352      	cbz	r2, 80117b2 <_dtoa_r+0x532>
 801175c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011760:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8011764:	f8dd 8000 	ldr.w	r8, [sp]
 8011768:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801176c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011770:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011774:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011778:	ee14 2a90 	vmov	r2, s9
 801177c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011780:	3230      	adds	r2, #48	; 0x30
 8011782:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011786:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801178a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801178e:	f808 2b01 	strb.w	r2, [r8], #1
 8011792:	d439      	bmi.n	8011808 <_dtoa_r+0x588>
 8011794:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011798:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801179c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117a0:	d472      	bmi.n	8011888 <_dtoa_r+0x608>
 80117a2:	45a0      	cmp	r8, r4
 80117a4:	f43f af5d 	beq.w	8011662 <_dtoa_r+0x3e2>
 80117a8:	ee27 7b03 	vmul.f64	d7, d7, d3
 80117ac:	ee26 6b03 	vmul.f64	d6, d6, d3
 80117b0:	e7e0      	b.n	8011774 <_dtoa_r+0x4f4>
 80117b2:	f8dd 8000 	ldr.w	r8, [sp]
 80117b6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80117ba:	4621      	mov	r1, r4
 80117bc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80117c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80117c4:	ee14 2a90 	vmov	r2, s9
 80117c8:	3230      	adds	r2, #48	; 0x30
 80117ca:	f808 2b01 	strb.w	r2, [r8], #1
 80117ce:	45a0      	cmp	r8, r4
 80117d0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80117d4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80117d8:	d118      	bne.n	801180c <_dtoa_r+0x58c>
 80117da:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80117de:	ee37 4b05 	vadd.f64	d4, d7, d5
 80117e2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80117e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ea:	dc4d      	bgt.n	8011888 <_dtoa_r+0x608>
 80117ec:	ee35 7b47 	vsub.f64	d7, d5, d7
 80117f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80117f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117f8:	f57f af33 	bpl.w	8011662 <_dtoa_r+0x3e2>
 80117fc:	4688      	mov	r8, r1
 80117fe:	3901      	subs	r1, #1
 8011800:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8011804:	2b30      	cmp	r3, #48	; 0x30
 8011806:	d0f9      	beq.n	80117fc <_dtoa_r+0x57c>
 8011808:	46bb      	mov	fp, r7
 801180a:	e02a      	b.n	8011862 <_dtoa_r+0x5e2>
 801180c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011810:	e7d6      	b.n	80117c0 <_dtoa_r+0x540>
 8011812:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011816:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801181a:	f8dd 8000 	ldr.w	r8, [sp]
 801181e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011822:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011826:	ee15 3a10 	vmov	r3, s10
 801182a:	3330      	adds	r3, #48	; 0x30
 801182c:	f808 3b01 	strb.w	r3, [r8], #1
 8011830:	9b00      	ldr	r3, [sp, #0]
 8011832:	eba8 0303 	sub.w	r3, r8, r3
 8011836:	4599      	cmp	r9, r3
 8011838:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801183c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011840:	d133      	bne.n	80118aa <_dtoa_r+0x62a>
 8011842:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011846:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801184a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801184e:	dc1a      	bgt.n	8011886 <_dtoa_r+0x606>
 8011850:	eeb4 7b46 	vcmp.f64	d7, d6
 8011854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011858:	d103      	bne.n	8011862 <_dtoa_r+0x5e2>
 801185a:	ee15 3a10 	vmov	r3, s10
 801185e:	07d9      	lsls	r1, r3, #31
 8011860:	d411      	bmi.n	8011886 <_dtoa_r+0x606>
 8011862:	4629      	mov	r1, r5
 8011864:	4630      	mov	r0, r6
 8011866:	f000 fae7 	bl	8011e38 <_Bfree>
 801186a:	2300      	movs	r3, #0
 801186c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801186e:	f888 3000 	strb.w	r3, [r8]
 8011872:	f10b 0301 	add.w	r3, fp, #1
 8011876:	6013      	str	r3, [r2, #0]
 8011878:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801187a:	2b00      	cmp	r3, #0
 801187c:	f43f ad4d 	beq.w	801131a <_dtoa_r+0x9a>
 8011880:	f8c3 8000 	str.w	r8, [r3]
 8011884:	e549      	b.n	801131a <_dtoa_r+0x9a>
 8011886:	465f      	mov	r7, fp
 8011888:	4643      	mov	r3, r8
 801188a:	4698      	mov	r8, r3
 801188c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011890:	2a39      	cmp	r2, #57	; 0x39
 8011892:	d106      	bne.n	80118a2 <_dtoa_r+0x622>
 8011894:	9a00      	ldr	r2, [sp, #0]
 8011896:	429a      	cmp	r2, r3
 8011898:	d1f7      	bne.n	801188a <_dtoa_r+0x60a>
 801189a:	9900      	ldr	r1, [sp, #0]
 801189c:	2230      	movs	r2, #48	; 0x30
 801189e:	3701      	adds	r7, #1
 80118a0:	700a      	strb	r2, [r1, #0]
 80118a2:	781a      	ldrb	r2, [r3, #0]
 80118a4:	3201      	adds	r2, #1
 80118a6:	701a      	strb	r2, [r3, #0]
 80118a8:	e7ae      	b.n	8011808 <_dtoa_r+0x588>
 80118aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 80118ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80118b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118b6:	d1b2      	bne.n	801181e <_dtoa_r+0x59e>
 80118b8:	e7d3      	b.n	8011862 <_dtoa_r+0x5e2>
 80118ba:	bf00      	nop
 80118bc:	08014dc8 	.word	0x08014dc8
 80118c0:	08014da0 	.word	0x08014da0
 80118c4:	9908      	ldr	r1, [sp, #32]
 80118c6:	2900      	cmp	r1, #0
 80118c8:	f000 80d1 	beq.w	8011a6e <_dtoa_r+0x7ee>
 80118cc:	9907      	ldr	r1, [sp, #28]
 80118ce:	2901      	cmp	r1, #1
 80118d0:	f300 80b4 	bgt.w	8011a3c <_dtoa_r+0x7bc>
 80118d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80118d6:	2900      	cmp	r1, #0
 80118d8:	f000 80ac 	beq.w	8011a34 <_dtoa_r+0x7b4>
 80118dc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80118e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80118e4:	461c      	mov	r4, r3
 80118e6:	930a      	str	r3, [sp, #40]	; 0x28
 80118e8:	9b05      	ldr	r3, [sp, #20]
 80118ea:	4413      	add	r3, r2
 80118ec:	9305      	str	r3, [sp, #20]
 80118ee:	9b06      	ldr	r3, [sp, #24]
 80118f0:	2101      	movs	r1, #1
 80118f2:	4413      	add	r3, r2
 80118f4:	4630      	mov	r0, r6
 80118f6:	9306      	str	r3, [sp, #24]
 80118f8:	f000 fb5a 	bl	8011fb0 <__i2b>
 80118fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118fe:	4607      	mov	r7, r0
 8011900:	f1b8 0f00 	cmp.w	r8, #0
 8011904:	dd0d      	ble.n	8011922 <_dtoa_r+0x6a2>
 8011906:	9a06      	ldr	r2, [sp, #24]
 8011908:	2a00      	cmp	r2, #0
 801190a:	dd0a      	ble.n	8011922 <_dtoa_r+0x6a2>
 801190c:	4542      	cmp	r2, r8
 801190e:	9905      	ldr	r1, [sp, #20]
 8011910:	bfa8      	it	ge
 8011912:	4642      	movge	r2, r8
 8011914:	1a89      	subs	r1, r1, r2
 8011916:	9105      	str	r1, [sp, #20]
 8011918:	9906      	ldr	r1, [sp, #24]
 801191a:	eba8 0802 	sub.w	r8, r8, r2
 801191e:	1a8a      	subs	r2, r1, r2
 8011920:	9206      	str	r2, [sp, #24]
 8011922:	b303      	cbz	r3, 8011966 <_dtoa_r+0x6e6>
 8011924:	9a08      	ldr	r2, [sp, #32]
 8011926:	2a00      	cmp	r2, #0
 8011928:	f000 80a6 	beq.w	8011a78 <_dtoa_r+0x7f8>
 801192c:	2c00      	cmp	r4, #0
 801192e:	dd13      	ble.n	8011958 <_dtoa_r+0x6d8>
 8011930:	4639      	mov	r1, r7
 8011932:	4622      	mov	r2, r4
 8011934:	4630      	mov	r0, r6
 8011936:	930c      	str	r3, [sp, #48]	; 0x30
 8011938:	f000 fbf6 	bl	8012128 <__pow5mult>
 801193c:	462a      	mov	r2, r5
 801193e:	4601      	mov	r1, r0
 8011940:	4607      	mov	r7, r0
 8011942:	4630      	mov	r0, r6
 8011944:	f000 fb4a 	bl	8011fdc <__multiply>
 8011948:	4629      	mov	r1, r5
 801194a:	900a      	str	r0, [sp, #40]	; 0x28
 801194c:	4630      	mov	r0, r6
 801194e:	f000 fa73 	bl	8011e38 <_Bfree>
 8011952:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011954:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011956:	4615      	mov	r5, r2
 8011958:	1b1a      	subs	r2, r3, r4
 801195a:	d004      	beq.n	8011966 <_dtoa_r+0x6e6>
 801195c:	4629      	mov	r1, r5
 801195e:	4630      	mov	r0, r6
 8011960:	f000 fbe2 	bl	8012128 <__pow5mult>
 8011964:	4605      	mov	r5, r0
 8011966:	2101      	movs	r1, #1
 8011968:	4630      	mov	r0, r6
 801196a:	f000 fb21 	bl	8011fb0 <__i2b>
 801196e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011970:	2b00      	cmp	r3, #0
 8011972:	4604      	mov	r4, r0
 8011974:	f340 8082 	ble.w	8011a7c <_dtoa_r+0x7fc>
 8011978:	461a      	mov	r2, r3
 801197a:	4601      	mov	r1, r0
 801197c:	4630      	mov	r0, r6
 801197e:	f000 fbd3 	bl	8012128 <__pow5mult>
 8011982:	9b07      	ldr	r3, [sp, #28]
 8011984:	2b01      	cmp	r3, #1
 8011986:	4604      	mov	r4, r0
 8011988:	dd7b      	ble.n	8011a82 <_dtoa_r+0x802>
 801198a:	2300      	movs	r3, #0
 801198c:	930a      	str	r3, [sp, #40]	; 0x28
 801198e:	6922      	ldr	r2, [r4, #16]
 8011990:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011994:	6910      	ldr	r0, [r2, #16]
 8011996:	f000 fabb 	bl	8011f10 <__hi0bits>
 801199a:	f1c0 0020 	rsb	r0, r0, #32
 801199e:	9b06      	ldr	r3, [sp, #24]
 80119a0:	4418      	add	r0, r3
 80119a2:	f010 001f 	ands.w	r0, r0, #31
 80119a6:	f000 808d 	beq.w	8011ac4 <_dtoa_r+0x844>
 80119aa:	f1c0 0220 	rsb	r2, r0, #32
 80119ae:	2a04      	cmp	r2, #4
 80119b0:	f340 8086 	ble.w	8011ac0 <_dtoa_r+0x840>
 80119b4:	f1c0 001c 	rsb	r0, r0, #28
 80119b8:	9b05      	ldr	r3, [sp, #20]
 80119ba:	4403      	add	r3, r0
 80119bc:	9305      	str	r3, [sp, #20]
 80119be:	9b06      	ldr	r3, [sp, #24]
 80119c0:	4403      	add	r3, r0
 80119c2:	4480      	add	r8, r0
 80119c4:	9306      	str	r3, [sp, #24]
 80119c6:	9b05      	ldr	r3, [sp, #20]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	dd05      	ble.n	80119d8 <_dtoa_r+0x758>
 80119cc:	4629      	mov	r1, r5
 80119ce:	461a      	mov	r2, r3
 80119d0:	4630      	mov	r0, r6
 80119d2:	f000 fc03 	bl	80121dc <__lshift>
 80119d6:	4605      	mov	r5, r0
 80119d8:	9b06      	ldr	r3, [sp, #24]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	dd05      	ble.n	80119ea <_dtoa_r+0x76a>
 80119de:	4621      	mov	r1, r4
 80119e0:	461a      	mov	r2, r3
 80119e2:	4630      	mov	r0, r6
 80119e4:	f000 fbfa 	bl	80121dc <__lshift>
 80119e8:	4604      	mov	r4, r0
 80119ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d06b      	beq.n	8011ac8 <_dtoa_r+0x848>
 80119f0:	4621      	mov	r1, r4
 80119f2:	4628      	mov	r0, r5
 80119f4:	f000 fc5e 	bl	80122b4 <__mcmp>
 80119f8:	2800      	cmp	r0, #0
 80119fa:	da65      	bge.n	8011ac8 <_dtoa_r+0x848>
 80119fc:	2300      	movs	r3, #0
 80119fe:	4629      	mov	r1, r5
 8011a00:	220a      	movs	r2, #10
 8011a02:	4630      	mov	r0, r6
 8011a04:	f000 fa3a 	bl	8011e7c <__multadd>
 8011a08:	9b08      	ldr	r3, [sp, #32]
 8011a0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011a0e:	4605      	mov	r5, r0
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	f000 8192 	beq.w	8011d3a <_dtoa_r+0xaba>
 8011a16:	4639      	mov	r1, r7
 8011a18:	2300      	movs	r3, #0
 8011a1a:	220a      	movs	r2, #10
 8011a1c:	4630      	mov	r0, r6
 8011a1e:	f000 fa2d 	bl	8011e7c <__multadd>
 8011a22:	f1ba 0f00 	cmp.w	sl, #0
 8011a26:	4607      	mov	r7, r0
 8011a28:	f300 808e 	bgt.w	8011b48 <_dtoa_r+0x8c8>
 8011a2c:	9b07      	ldr	r3, [sp, #28]
 8011a2e:	2b02      	cmp	r3, #2
 8011a30:	dc51      	bgt.n	8011ad6 <_dtoa_r+0x856>
 8011a32:	e089      	b.n	8011b48 <_dtoa_r+0x8c8>
 8011a34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011a36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011a3a:	e751      	b.n	80118e0 <_dtoa_r+0x660>
 8011a3c:	f109 34ff 	add.w	r4, r9, #4294967295
 8011a40:	42a3      	cmp	r3, r4
 8011a42:	bfbf      	itttt	lt
 8011a44:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8011a46:	1ae3      	sublt	r3, r4, r3
 8011a48:	18d2      	addlt	r2, r2, r3
 8011a4a:	4613      	movlt	r3, r2
 8011a4c:	bfb7      	itett	lt
 8011a4e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011a50:	1b1c      	subge	r4, r3, r4
 8011a52:	4623      	movlt	r3, r4
 8011a54:	2400      	movlt	r4, #0
 8011a56:	f1b9 0f00 	cmp.w	r9, #0
 8011a5a:	bfb5      	itete	lt
 8011a5c:	9a05      	ldrlt	r2, [sp, #20]
 8011a5e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8011a62:	eba2 0809 	sublt.w	r8, r2, r9
 8011a66:	464a      	movge	r2, r9
 8011a68:	bfb8      	it	lt
 8011a6a:	2200      	movlt	r2, #0
 8011a6c:	e73b      	b.n	80118e6 <_dtoa_r+0x666>
 8011a6e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011a72:	9f08      	ldr	r7, [sp, #32]
 8011a74:	461c      	mov	r4, r3
 8011a76:	e743      	b.n	8011900 <_dtoa_r+0x680>
 8011a78:	461a      	mov	r2, r3
 8011a7a:	e76f      	b.n	801195c <_dtoa_r+0x6dc>
 8011a7c:	9b07      	ldr	r3, [sp, #28]
 8011a7e:	2b01      	cmp	r3, #1
 8011a80:	dc18      	bgt.n	8011ab4 <_dtoa_r+0x834>
 8011a82:	9b02      	ldr	r3, [sp, #8]
 8011a84:	b9b3      	cbnz	r3, 8011ab4 <_dtoa_r+0x834>
 8011a86:	9b03      	ldr	r3, [sp, #12]
 8011a88:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8011a8c:	b9a2      	cbnz	r2, 8011ab8 <_dtoa_r+0x838>
 8011a8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011a92:	0d12      	lsrs	r2, r2, #20
 8011a94:	0512      	lsls	r2, r2, #20
 8011a96:	b18a      	cbz	r2, 8011abc <_dtoa_r+0x83c>
 8011a98:	9b05      	ldr	r3, [sp, #20]
 8011a9a:	3301      	adds	r3, #1
 8011a9c:	9305      	str	r3, [sp, #20]
 8011a9e:	9b06      	ldr	r3, [sp, #24]
 8011aa0:	3301      	adds	r3, #1
 8011aa2:	9306      	str	r3, [sp, #24]
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	930a      	str	r3, [sp, #40]	; 0x28
 8011aa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	f47f af6f 	bne.w	801198e <_dtoa_r+0x70e>
 8011ab0:	2001      	movs	r0, #1
 8011ab2:	e774      	b.n	801199e <_dtoa_r+0x71e>
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	e7f6      	b.n	8011aa6 <_dtoa_r+0x826>
 8011ab8:	9b02      	ldr	r3, [sp, #8]
 8011aba:	e7f4      	b.n	8011aa6 <_dtoa_r+0x826>
 8011abc:	920a      	str	r2, [sp, #40]	; 0x28
 8011abe:	e7f3      	b.n	8011aa8 <_dtoa_r+0x828>
 8011ac0:	d081      	beq.n	80119c6 <_dtoa_r+0x746>
 8011ac2:	4610      	mov	r0, r2
 8011ac4:	301c      	adds	r0, #28
 8011ac6:	e777      	b.n	80119b8 <_dtoa_r+0x738>
 8011ac8:	f1b9 0f00 	cmp.w	r9, #0
 8011acc:	dc37      	bgt.n	8011b3e <_dtoa_r+0x8be>
 8011ace:	9b07      	ldr	r3, [sp, #28]
 8011ad0:	2b02      	cmp	r3, #2
 8011ad2:	dd34      	ble.n	8011b3e <_dtoa_r+0x8be>
 8011ad4:	46ca      	mov	sl, r9
 8011ad6:	f1ba 0f00 	cmp.w	sl, #0
 8011ada:	d10d      	bne.n	8011af8 <_dtoa_r+0x878>
 8011adc:	4621      	mov	r1, r4
 8011ade:	4653      	mov	r3, sl
 8011ae0:	2205      	movs	r2, #5
 8011ae2:	4630      	mov	r0, r6
 8011ae4:	f000 f9ca 	bl	8011e7c <__multadd>
 8011ae8:	4601      	mov	r1, r0
 8011aea:	4604      	mov	r4, r0
 8011aec:	4628      	mov	r0, r5
 8011aee:	f000 fbe1 	bl	80122b4 <__mcmp>
 8011af2:	2800      	cmp	r0, #0
 8011af4:	f73f adde 	bgt.w	80116b4 <_dtoa_r+0x434>
 8011af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011afa:	f8dd 8000 	ldr.w	r8, [sp]
 8011afe:	ea6f 0b03 	mvn.w	fp, r3
 8011b02:	f04f 0900 	mov.w	r9, #0
 8011b06:	4621      	mov	r1, r4
 8011b08:	4630      	mov	r0, r6
 8011b0a:	f000 f995 	bl	8011e38 <_Bfree>
 8011b0e:	2f00      	cmp	r7, #0
 8011b10:	f43f aea7 	beq.w	8011862 <_dtoa_r+0x5e2>
 8011b14:	f1b9 0f00 	cmp.w	r9, #0
 8011b18:	d005      	beq.n	8011b26 <_dtoa_r+0x8a6>
 8011b1a:	45b9      	cmp	r9, r7
 8011b1c:	d003      	beq.n	8011b26 <_dtoa_r+0x8a6>
 8011b1e:	4649      	mov	r1, r9
 8011b20:	4630      	mov	r0, r6
 8011b22:	f000 f989 	bl	8011e38 <_Bfree>
 8011b26:	4639      	mov	r1, r7
 8011b28:	4630      	mov	r0, r6
 8011b2a:	f000 f985 	bl	8011e38 <_Bfree>
 8011b2e:	e698      	b.n	8011862 <_dtoa_r+0x5e2>
 8011b30:	2400      	movs	r4, #0
 8011b32:	4627      	mov	r7, r4
 8011b34:	e7e0      	b.n	8011af8 <_dtoa_r+0x878>
 8011b36:	46bb      	mov	fp, r7
 8011b38:	4604      	mov	r4, r0
 8011b3a:	4607      	mov	r7, r0
 8011b3c:	e5ba      	b.n	80116b4 <_dtoa_r+0x434>
 8011b3e:	9b08      	ldr	r3, [sp, #32]
 8011b40:	46ca      	mov	sl, r9
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	f000 8100 	beq.w	8011d48 <_dtoa_r+0xac8>
 8011b48:	f1b8 0f00 	cmp.w	r8, #0
 8011b4c:	dd05      	ble.n	8011b5a <_dtoa_r+0x8da>
 8011b4e:	4639      	mov	r1, r7
 8011b50:	4642      	mov	r2, r8
 8011b52:	4630      	mov	r0, r6
 8011b54:	f000 fb42 	bl	80121dc <__lshift>
 8011b58:	4607      	mov	r7, r0
 8011b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d05d      	beq.n	8011c1c <_dtoa_r+0x99c>
 8011b60:	6879      	ldr	r1, [r7, #4]
 8011b62:	4630      	mov	r0, r6
 8011b64:	f000 f928 	bl	8011db8 <_Balloc>
 8011b68:	4680      	mov	r8, r0
 8011b6a:	b928      	cbnz	r0, 8011b78 <_dtoa_r+0x8f8>
 8011b6c:	4b82      	ldr	r3, [pc, #520]	; (8011d78 <_dtoa_r+0xaf8>)
 8011b6e:	4602      	mov	r2, r0
 8011b70:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011b74:	f7ff bb9a 	b.w	80112ac <_dtoa_r+0x2c>
 8011b78:	693a      	ldr	r2, [r7, #16]
 8011b7a:	3202      	adds	r2, #2
 8011b7c:	0092      	lsls	r2, r2, #2
 8011b7e:	f107 010c 	add.w	r1, r7, #12
 8011b82:	300c      	adds	r0, #12
 8011b84:	f000 f90a 	bl	8011d9c <memcpy>
 8011b88:	2201      	movs	r2, #1
 8011b8a:	4641      	mov	r1, r8
 8011b8c:	4630      	mov	r0, r6
 8011b8e:	f000 fb25 	bl	80121dc <__lshift>
 8011b92:	9b00      	ldr	r3, [sp, #0]
 8011b94:	3301      	adds	r3, #1
 8011b96:	9305      	str	r3, [sp, #20]
 8011b98:	9b00      	ldr	r3, [sp, #0]
 8011b9a:	4453      	add	r3, sl
 8011b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8011b9e:	9b02      	ldr	r3, [sp, #8]
 8011ba0:	f003 0301 	and.w	r3, r3, #1
 8011ba4:	46b9      	mov	r9, r7
 8011ba6:	9308      	str	r3, [sp, #32]
 8011ba8:	4607      	mov	r7, r0
 8011baa:	9b05      	ldr	r3, [sp, #20]
 8011bac:	4621      	mov	r1, r4
 8011bae:	3b01      	subs	r3, #1
 8011bb0:	4628      	mov	r0, r5
 8011bb2:	9302      	str	r3, [sp, #8]
 8011bb4:	f7ff fad6 	bl	8011164 <quorem>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	3330      	adds	r3, #48	; 0x30
 8011bbc:	9006      	str	r0, [sp, #24]
 8011bbe:	4649      	mov	r1, r9
 8011bc0:	4628      	mov	r0, r5
 8011bc2:	930a      	str	r3, [sp, #40]	; 0x28
 8011bc4:	f000 fb76 	bl	80122b4 <__mcmp>
 8011bc8:	463a      	mov	r2, r7
 8011bca:	4682      	mov	sl, r0
 8011bcc:	4621      	mov	r1, r4
 8011bce:	4630      	mov	r0, r6
 8011bd0:	f000 fb8c 	bl	80122ec <__mdiff>
 8011bd4:	68c2      	ldr	r2, [r0, #12]
 8011bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bd8:	4680      	mov	r8, r0
 8011bda:	bb0a      	cbnz	r2, 8011c20 <_dtoa_r+0x9a0>
 8011bdc:	4601      	mov	r1, r0
 8011bde:	4628      	mov	r0, r5
 8011be0:	f000 fb68 	bl	80122b4 <__mcmp>
 8011be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011be6:	4602      	mov	r2, r0
 8011be8:	4641      	mov	r1, r8
 8011bea:	4630      	mov	r0, r6
 8011bec:	920e      	str	r2, [sp, #56]	; 0x38
 8011bee:	930a      	str	r3, [sp, #40]	; 0x28
 8011bf0:	f000 f922 	bl	8011e38 <_Bfree>
 8011bf4:	9b07      	ldr	r3, [sp, #28]
 8011bf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011bf8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011bfc:	ea43 0102 	orr.w	r1, r3, r2
 8011c00:	9b08      	ldr	r3, [sp, #32]
 8011c02:	430b      	orrs	r3, r1
 8011c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c06:	d10d      	bne.n	8011c24 <_dtoa_r+0x9a4>
 8011c08:	2b39      	cmp	r3, #57	; 0x39
 8011c0a:	d029      	beq.n	8011c60 <_dtoa_r+0x9e0>
 8011c0c:	f1ba 0f00 	cmp.w	sl, #0
 8011c10:	dd01      	ble.n	8011c16 <_dtoa_r+0x996>
 8011c12:	9b06      	ldr	r3, [sp, #24]
 8011c14:	3331      	adds	r3, #49	; 0x31
 8011c16:	9a02      	ldr	r2, [sp, #8]
 8011c18:	7013      	strb	r3, [r2, #0]
 8011c1a:	e774      	b.n	8011b06 <_dtoa_r+0x886>
 8011c1c:	4638      	mov	r0, r7
 8011c1e:	e7b8      	b.n	8011b92 <_dtoa_r+0x912>
 8011c20:	2201      	movs	r2, #1
 8011c22:	e7e1      	b.n	8011be8 <_dtoa_r+0x968>
 8011c24:	f1ba 0f00 	cmp.w	sl, #0
 8011c28:	db06      	blt.n	8011c38 <_dtoa_r+0x9b8>
 8011c2a:	9907      	ldr	r1, [sp, #28]
 8011c2c:	ea41 0a0a 	orr.w	sl, r1, sl
 8011c30:	9908      	ldr	r1, [sp, #32]
 8011c32:	ea5a 0101 	orrs.w	r1, sl, r1
 8011c36:	d120      	bne.n	8011c7a <_dtoa_r+0x9fa>
 8011c38:	2a00      	cmp	r2, #0
 8011c3a:	ddec      	ble.n	8011c16 <_dtoa_r+0x996>
 8011c3c:	4629      	mov	r1, r5
 8011c3e:	2201      	movs	r2, #1
 8011c40:	4630      	mov	r0, r6
 8011c42:	9305      	str	r3, [sp, #20]
 8011c44:	f000 faca 	bl	80121dc <__lshift>
 8011c48:	4621      	mov	r1, r4
 8011c4a:	4605      	mov	r5, r0
 8011c4c:	f000 fb32 	bl	80122b4 <__mcmp>
 8011c50:	2800      	cmp	r0, #0
 8011c52:	9b05      	ldr	r3, [sp, #20]
 8011c54:	dc02      	bgt.n	8011c5c <_dtoa_r+0x9dc>
 8011c56:	d1de      	bne.n	8011c16 <_dtoa_r+0x996>
 8011c58:	07da      	lsls	r2, r3, #31
 8011c5a:	d5dc      	bpl.n	8011c16 <_dtoa_r+0x996>
 8011c5c:	2b39      	cmp	r3, #57	; 0x39
 8011c5e:	d1d8      	bne.n	8011c12 <_dtoa_r+0x992>
 8011c60:	9a02      	ldr	r2, [sp, #8]
 8011c62:	2339      	movs	r3, #57	; 0x39
 8011c64:	7013      	strb	r3, [r2, #0]
 8011c66:	4643      	mov	r3, r8
 8011c68:	4698      	mov	r8, r3
 8011c6a:	3b01      	subs	r3, #1
 8011c6c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8011c70:	2a39      	cmp	r2, #57	; 0x39
 8011c72:	d051      	beq.n	8011d18 <_dtoa_r+0xa98>
 8011c74:	3201      	adds	r2, #1
 8011c76:	701a      	strb	r2, [r3, #0]
 8011c78:	e745      	b.n	8011b06 <_dtoa_r+0x886>
 8011c7a:	2a00      	cmp	r2, #0
 8011c7c:	dd03      	ble.n	8011c86 <_dtoa_r+0xa06>
 8011c7e:	2b39      	cmp	r3, #57	; 0x39
 8011c80:	d0ee      	beq.n	8011c60 <_dtoa_r+0x9e0>
 8011c82:	3301      	adds	r3, #1
 8011c84:	e7c7      	b.n	8011c16 <_dtoa_r+0x996>
 8011c86:	9a05      	ldr	r2, [sp, #20]
 8011c88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c8a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011c8e:	428a      	cmp	r2, r1
 8011c90:	d02b      	beq.n	8011cea <_dtoa_r+0xa6a>
 8011c92:	4629      	mov	r1, r5
 8011c94:	2300      	movs	r3, #0
 8011c96:	220a      	movs	r2, #10
 8011c98:	4630      	mov	r0, r6
 8011c9a:	f000 f8ef 	bl	8011e7c <__multadd>
 8011c9e:	45b9      	cmp	r9, r7
 8011ca0:	4605      	mov	r5, r0
 8011ca2:	f04f 0300 	mov.w	r3, #0
 8011ca6:	f04f 020a 	mov.w	r2, #10
 8011caa:	4649      	mov	r1, r9
 8011cac:	4630      	mov	r0, r6
 8011cae:	d107      	bne.n	8011cc0 <_dtoa_r+0xa40>
 8011cb0:	f000 f8e4 	bl	8011e7c <__multadd>
 8011cb4:	4681      	mov	r9, r0
 8011cb6:	4607      	mov	r7, r0
 8011cb8:	9b05      	ldr	r3, [sp, #20]
 8011cba:	3301      	adds	r3, #1
 8011cbc:	9305      	str	r3, [sp, #20]
 8011cbe:	e774      	b.n	8011baa <_dtoa_r+0x92a>
 8011cc0:	f000 f8dc 	bl	8011e7c <__multadd>
 8011cc4:	4639      	mov	r1, r7
 8011cc6:	4681      	mov	r9, r0
 8011cc8:	2300      	movs	r3, #0
 8011cca:	220a      	movs	r2, #10
 8011ccc:	4630      	mov	r0, r6
 8011cce:	f000 f8d5 	bl	8011e7c <__multadd>
 8011cd2:	4607      	mov	r7, r0
 8011cd4:	e7f0      	b.n	8011cb8 <_dtoa_r+0xa38>
 8011cd6:	f1ba 0f00 	cmp.w	sl, #0
 8011cda:	9a00      	ldr	r2, [sp, #0]
 8011cdc:	bfcc      	ite	gt
 8011cde:	46d0      	movgt	r8, sl
 8011ce0:	f04f 0801 	movle.w	r8, #1
 8011ce4:	4490      	add	r8, r2
 8011ce6:	f04f 0900 	mov.w	r9, #0
 8011cea:	4629      	mov	r1, r5
 8011cec:	2201      	movs	r2, #1
 8011cee:	4630      	mov	r0, r6
 8011cf0:	9302      	str	r3, [sp, #8]
 8011cf2:	f000 fa73 	bl	80121dc <__lshift>
 8011cf6:	4621      	mov	r1, r4
 8011cf8:	4605      	mov	r5, r0
 8011cfa:	f000 fadb 	bl	80122b4 <__mcmp>
 8011cfe:	2800      	cmp	r0, #0
 8011d00:	dcb1      	bgt.n	8011c66 <_dtoa_r+0x9e6>
 8011d02:	d102      	bne.n	8011d0a <_dtoa_r+0xa8a>
 8011d04:	9b02      	ldr	r3, [sp, #8]
 8011d06:	07db      	lsls	r3, r3, #31
 8011d08:	d4ad      	bmi.n	8011c66 <_dtoa_r+0x9e6>
 8011d0a:	4643      	mov	r3, r8
 8011d0c:	4698      	mov	r8, r3
 8011d0e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011d12:	2a30      	cmp	r2, #48	; 0x30
 8011d14:	d0fa      	beq.n	8011d0c <_dtoa_r+0xa8c>
 8011d16:	e6f6      	b.n	8011b06 <_dtoa_r+0x886>
 8011d18:	9a00      	ldr	r2, [sp, #0]
 8011d1a:	429a      	cmp	r2, r3
 8011d1c:	d1a4      	bne.n	8011c68 <_dtoa_r+0x9e8>
 8011d1e:	f10b 0b01 	add.w	fp, fp, #1
 8011d22:	2331      	movs	r3, #49	; 0x31
 8011d24:	e778      	b.n	8011c18 <_dtoa_r+0x998>
 8011d26:	4b15      	ldr	r3, [pc, #84]	; (8011d7c <_dtoa_r+0xafc>)
 8011d28:	f7ff bb12 	b.w	8011350 <_dtoa_r+0xd0>
 8011d2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	f47f aaee 	bne.w	8011310 <_dtoa_r+0x90>
 8011d34:	4b12      	ldr	r3, [pc, #72]	; (8011d80 <_dtoa_r+0xb00>)
 8011d36:	f7ff bb0b 	b.w	8011350 <_dtoa_r+0xd0>
 8011d3a:	f1ba 0f00 	cmp.w	sl, #0
 8011d3e:	dc03      	bgt.n	8011d48 <_dtoa_r+0xac8>
 8011d40:	9b07      	ldr	r3, [sp, #28]
 8011d42:	2b02      	cmp	r3, #2
 8011d44:	f73f aec7 	bgt.w	8011ad6 <_dtoa_r+0x856>
 8011d48:	f8dd 8000 	ldr.w	r8, [sp]
 8011d4c:	4621      	mov	r1, r4
 8011d4e:	4628      	mov	r0, r5
 8011d50:	f7ff fa08 	bl	8011164 <quorem>
 8011d54:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011d58:	f808 3b01 	strb.w	r3, [r8], #1
 8011d5c:	9a00      	ldr	r2, [sp, #0]
 8011d5e:	eba8 0202 	sub.w	r2, r8, r2
 8011d62:	4592      	cmp	sl, r2
 8011d64:	ddb7      	ble.n	8011cd6 <_dtoa_r+0xa56>
 8011d66:	4629      	mov	r1, r5
 8011d68:	2300      	movs	r3, #0
 8011d6a:	220a      	movs	r2, #10
 8011d6c:	4630      	mov	r0, r6
 8011d6e:	f000 f885 	bl	8011e7c <__multadd>
 8011d72:	4605      	mov	r5, r0
 8011d74:	e7ea      	b.n	8011d4c <_dtoa_r+0xacc>
 8011d76:	bf00      	nop
 8011d78:	08014d2b 	.word	0x08014d2b
 8011d7c:	08014c84 	.word	0x08014c84
 8011d80:	08014ca8 	.word	0x08014ca8

08011d84 <_localeconv_r>:
 8011d84:	4800      	ldr	r0, [pc, #0]	; (8011d88 <_localeconv_r+0x4>)
 8011d86:	4770      	bx	lr
 8011d88:	24000178 	.word	0x24000178

08011d8c <malloc>:
 8011d8c:	4b02      	ldr	r3, [pc, #8]	; (8011d98 <malloc+0xc>)
 8011d8e:	4601      	mov	r1, r0
 8011d90:	6818      	ldr	r0, [r3, #0]
 8011d92:	f000 bbef 	b.w	8012574 <_malloc_r>
 8011d96:	bf00      	nop
 8011d98:	24000024 	.word	0x24000024

08011d9c <memcpy>:
 8011d9c:	440a      	add	r2, r1
 8011d9e:	4291      	cmp	r1, r2
 8011da0:	f100 33ff 	add.w	r3, r0, #4294967295
 8011da4:	d100      	bne.n	8011da8 <memcpy+0xc>
 8011da6:	4770      	bx	lr
 8011da8:	b510      	push	{r4, lr}
 8011daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011dae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011db2:	4291      	cmp	r1, r2
 8011db4:	d1f9      	bne.n	8011daa <memcpy+0xe>
 8011db6:	bd10      	pop	{r4, pc}

08011db8 <_Balloc>:
 8011db8:	b570      	push	{r4, r5, r6, lr}
 8011dba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011dbc:	4604      	mov	r4, r0
 8011dbe:	460d      	mov	r5, r1
 8011dc0:	b976      	cbnz	r6, 8011de0 <_Balloc+0x28>
 8011dc2:	2010      	movs	r0, #16
 8011dc4:	f7ff ffe2 	bl	8011d8c <malloc>
 8011dc8:	4602      	mov	r2, r0
 8011dca:	6260      	str	r0, [r4, #36]	; 0x24
 8011dcc:	b920      	cbnz	r0, 8011dd8 <_Balloc+0x20>
 8011dce:	4b18      	ldr	r3, [pc, #96]	; (8011e30 <_Balloc+0x78>)
 8011dd0:	4818      	ldr	r0, [pc, #96]	; (8011e34 <_Balloc+0x7c>)
 8011dd2:	2166      	movs	r1, #102	; 0x66
 8011dd4:	f000 fc38 	bl	8012648 <__assert_func>
 8011dd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011ddc:	6006      	str	r6, [r0, #0]
 8011dde:	60c6      	str	r6, [r0, #12]
 8011de0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011de2:	68f3      	ldr	r3, [r6, #12]
 8011de4:	b183      	cbz	r3, 8011e08 <_Balloc+0x50>
 8011de6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011de8:	68db      	ldr	r3, [r3, #12]
 8011dea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011dee:	b9b8      	cbnz	r0, 8011e20 <_Balloc+0x68>
 8011df0:	2101      	movs	r1, #1
 8011df2:	fa01 f605 	lsl.w	r6, r1, r5
 8011df6:	1d72      	adds	r2, r6, #5
 8011df8:	0092      	lsls	r2, r2, #2
 8011dfa:	4620      	mov	r0, r4
 8011dfc:	f000 fb5a 	bl	80124b4 <_calloc_r>
 8011e00:	b160      	cbz	r0, 8011e1c <_Balloc+0x64>
 8011e02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011e06:	e00e      	b.n	8011e26 <_Balloc+0x6e>
 8011e08:	2221      	movs	r2, #33	; 0x21
 8011e0a:	2104      	movs	r1, #4
 8011e0c:	4620      	mov	r0, r4
 8011e0e:	f000 fb51 	bl	80124b4 <_calloc_r>
 8011e12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011e14:	60f0      	str	r0, [r6, #12]
 8011e16:	68db      	ldr	r3, [r3, #12]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d1e4      	bne.n	8011de6 <_Balloc+0x2e>
 8011e1c:	2000      	movs	r0, #0
 8011e1e:	bd70      	pop	{r4, r5, r6, pc}
 8011e20:	6802      	ldr	r2, [r0, #0]
 8011e22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011e26:	2300      	movs	r3, #0
 8011e28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011e2c:	e7f7      	b.n	8011e1e <_Balloc+0x66>
 8011e2e:	bf00      	nop
 8011e30:	08014cb5 	.word	0x08014cb5
 8011e34:	08014d3c 	.word	0x08014d3c

08011e38 <_Bfree>:
 8011e38:	b570      	push	{r4, r5, r6, lr}
 8011e3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011e3c:	4605      	mov	r5, r0
 8011e3e:	460c      	mov	r4, r1
 8011e40:	b976      	cbnz	r6, 8011e60 <_Bfree+0x28>
 8011e42:	2010      	movs	r0, #16
 8011e44:	f7ff ffa2 	bl	8011d8c <malloc>
 8011e48:	4602      	mov	r2, r0
 8011e4a:	6268      	str	r0, [r5, #36]	; 0x24
 8011e4c:	b920      	cbnz	r0, 8011e58 <_Bfree+0x20>
 8011e4e:	4b09      	ldr	r3, [pc, #36]	; (8011e74 <_Bfree+0x3c>)
 8011e50:	4809      	ldr	r0, [pc, #36]	; (8011e78 <_Bfree+0x40>)
 8011e52:	218a      	movs	r1, #138	; 0x8a
 8011e54:	f000 fbf8 	bl	8012648 <__assert_func>
 8011e58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011e5c:	6006      	str	r6, [r0, #0]
 8011e5e:	60c6      	str	r6, [r0, #12]
 8011e60:	b13c      	cbz	r4, 8011e72 <_Bfree+0x3a>
 8011e62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011e64:	6862      	ldr	r2, [r4, #4]
 8011e66:	68db      	ldr	r3, [r3, #12]
 8011e68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011e6c:	6021      	str	r1, [r4, #0]
 8011e6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011e72:	bd70      	pop	{r4, r5, r6, pc}
 8011e74:	08014cb5 	.word	0x08014cb5
 8011e78:	08014d3c 	.word	0x08014d3c

08011e7c <__multadd>:
 8011e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e80:	690e      	ldr	r6, [r1, #16]
 8011e82:	4607      	mov	r7, r0
 8011e84:	4698      	mov	r8, r3
 8011e86:	460c      	mov	r4, r1
 8011e88:	f101 0014 	add.w	r0, r1, #20
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	6805      	ldr	r5, [r0, #0]
 8011e90:	b2a9      	uxth	r1, r5
 8011e92:	fb02 8101 	mla	r1, r2, r1, r8
 8011e96:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011e9a:	0c2d      	lsrs	r5, r5, #16
 8011e9c:	fb02 c505 	mla	r5, r2, r5, ip
 8011ea0:	b289      	uxth	r1, r1
 8011ea2:	3301      	adds	r3, #1
 8011ea4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011ea8:	429e      	cmp	r6, r3
 8011eaa:	f840 1b04 	str.w	r1, [r0], #4
 8011eae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011eb2:	dcec      	bgt.n	8011e8e <__multadd+0x12>
 8011eb4:	f1b8 0f00 	cmp.w	r8, #0
 8011eb8:	d022      	beq.n	8011f00 <__multadd+0x84>
 8011eba:	68a3      	ldr	r3, [r4, #8]
 8011ebc:	42b3      	cmp	r3, r6
 8011ebe:	dc19      	bgt.n	8011ef4 <__multadd+0x78>
 8011ec0:	6861      	ldr	r1, [r4, #4]
 8011ec2:	4638      	mov	r0, r7
 8011ec4:	3101      	adds	r1, #1
 8011ec6:	f7ff ff77 	bl	8011db8 <_Balloc>
 8011eca:	4605      	mov	r5, r0
 8011ecc:	b928      	cbnz	r0, 8011eda <__multadd+0x5e>
 8011ece:	4602      	mov	r2, r0
 8011ed0:	4b0d      	ldr	r3, [pc, #52]	; (8011f08 <__multadd+0x8c>)
 8011ed2:	480e      	ldr	r0, [pc, #56]	; (8011f0c <__multadd+0x90>)
 8011ed4:	21b5      	movs	r1, #181	; 0xb5
 8011ed6:	f000 fbb7 	bl	8012648 <__assert_func>
 8011eda:	6922      	ldr	r2, [r4, #16]
 8011edc:	3202      	adds	r2, #2
 8011ede:	f104 010c 	add.w	r1, r4, #12
 8011ee2:	0092      	lsls	r2, r2, #2
 8011ee4:	300c      	adds	r0, #12
 8011ee6:	f7ff ff59 	bl	8011d9c <memcpy>
 8011eea:	4621      	mov	r1, r4
 8011eec:	4638      	mov	r0, r7
 8011eee:	f7ff ffa3 	bl	8011e38 <_Bfree>
 8011ef2:	462c      	mov	r4, r5
 8011ef4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011ef8:	3601      	adds	r6, #1
 8011efa:	f8c3 8014 	str.w	r8, [r3, #20]
 8011efe:	6126      	str	r6, [r4, #16]
 8011f00:	4620      	mov	r0, r4
 8011f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f06:	bf00      	nop
 8011f08:	08014d2b 	.word	0x08014d2b
 8011f0c:	08014d3c 	.word	0x08014d3c

08011f10 <__hi0bits>:
 8011f10:	0c03      	lsrs	r3, r0, #16
 8011f12:	041b      	lsls	r3, r3, #16
 8011f14:	b9d3      	cbnz	r3, 8011f4c <__hi0bits+0x3c>
 8011f16:	0400      	lsls	r0, r0, #16
 8011f18:	2310      	movs	r3, #16
 8011f1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011f1e:	bf04      	itt	eq
 8011f20:	0200      	lsleq	r0, r0, #8
 8011f22:	3308      	addeq	r3, #8
 8011f24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011f28:	bf04      	itt	eq
 8011f2a:	0100      	lsleq	r0, r0, #4
 8011f2c:	3304      	addeq	r3, #4
 8011f2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011f32:	bf04      	itt	eq
 8011f34:	0080      	lsleq	r0, r0, #2
 8011f36:	3302      	addeq	r3, #2
 8011f38:	2800      	cmp	r0, #0
 8011f3a:	db05      	blt.n	8011f48 <__hi0bits+0x38>
 8011f3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011f40:	f103 0301 	add.w	r3, r3, #1
 8011f44:	bf08      	it	eq
 8011f46:	2320      	moveq	r3, #32
 8011f48:	4618      	mov	r0, r3
 8011f4a:	4770      	bx	lr
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	e7e4      	b.n	8011f1a <__hi0bits+0xa>

08011f50 <__lo0bits>:
 8011f50:	6803      	ldr	r3, [r0, #0]
 8011f52:	f013 0207 	ands.w	r2, r3, #7
 8011f56:	4601      	mov	r1, r0
 8011f58:	d00b      	beq.n	8011f72 <__lo0bits+0x22>
 8011f5a:	07da      	lsls	r2, r3, #31
 8011f5c:	d424      	bmi.n	8011fa8 <__lo0bits+0x58>
 8011f5e:	0798      	lsls	r0, r3, #30
 8011f60:	bf49      	itett	mi
 8011f62:	085b      	lsrmi	r3, r3, #1
 8011f64:	089b      	lsrpl	r3, r3, #2
 8011f66:	2001      	movmi	r0, #1
 8011f68:	600b      	strmi	r3, [r1, #0]
 8011f6a:	bf5c      	itt	pl
 8011f6c:	600b      	strpl	r3, [r1, #0]
 8011f6e:	2002      	movpl	r0, #2
 8011f70:	4770      	bx	lr
 8011f72:	b298      	uxth	r0, r3
 8011f74:	b9b0      	cbnz	r0, 8011fa4 <__lo0bits+0x54>
 8011f76:	0c1b      	lsrs	r3, r3, #16
 8011f78:	2010      	movs	r0, #16
 8011f7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011f7e:	bf04      	itt	eq
 8011f80:	0a1b      	lsreq	r3, r3, #8
 8011f82:	3008      	addeq	r0, #8
 8011f84:	071a      	lsls	r2, r3, #28
 8011f86:	bf04      	itt	eq
 8011f88:	091b      	lsreq	r3, r3, #4
 8011f8a:	3004      	addeq	r0, #4
 8011f8c:	079a      	lsls	r2, r3, #30
 8011f8e:	bf04      	itt	eq
 8011f90:	089b      	lsreq	r3, r3, #2
 8011f92:	3002      	addeq	r0, #2
 8011f94:	07da      	lsls	r2, r3, #31
 8011f96:	d403      	bmi.n	8011fa0 <__lo0bits+0x50>
 8011f98:	085b      	lsrs	r3, r3, #1
 8011f9a:	f100 0001 	add.w	r0, r0, #1
 8011f9e:	d005      	beq.n	8011fac <__lo0bits+0x5c>
 8011fa0:	600b      	str	r3, [r1, #0]
 8011fa2:	4770      	bx	lr
 8011fa4:	4610      	mov	r0, r2
 8011fa6:	e7e8      	b.n	8011f7a <__lo0bits+0x2a>
 8011fa8:	2000      	movs	r0, #0
 8011faa:	4770      	bx	lr
 8011fac:	2020      	movs	r0, #32
 8011fae:	4770      	bx	lr

08011fb0 <__i2b>:
 8011fb0:	b510      	push	{r4, lr}
 8011fb2:	460c      	mov	r4, r1
 8011fb4:	2101      	movs	r1, #1
 8011fb6:	f7ff feff 	bl	8011db8 <_Balloc>
 8011fba:	4602      	mov	r2, r0
 8011fbc:	b928      	cbnz	r0, 8011fca <__i2b+0x1a>
 8011fbe:	4b05      	ldr	r3, [pc, #20]	; (8011fd4 <__i2b+0x24>)
 8011fc0:	4805      	ldr	r0, [pc, #20]	; (8011fd8 <__i2b+0x28>)
 8011fc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011fc6:	f000 fb3f 	bl	8012648 <__assert_func>
 8011fca:	2301      	movs	r3, #1
 8011fcc:	6144      	str	r4, [r0, #20]
 8011fce:	6103      	str	r3, [r0, #16]
 8011fd0:	bd10      	pop	{r4, pc}
 8011fd2:	bf00      	nop
 8011fd4:	08014d2b 	.word	0x08014d2b
 8011fd8:	08014d3c 	.word	0x08014d3c

08011fdc <__multiply>:
 8011fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fe0:	4614      	mov	r4, r2
 8011fe2:	690a      	ldr	r2, [r1, #16]
 8011fe4:	6923      	ldr	r3, [r4, #16]
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	bfb8      	it	lt
 8011fea:	460b      	movlt	r3, r1
 8011fec:	460d      	mov	r5, r1
 8011fee:	bfbc      	itt	lt
 8011ff0:	4625      	movlt	r5, r4
 8011ff2:	461c      	movlt	r4, r3
 8011ff4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011ff8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011ffc:	68ab      	ldr	r3, [r5, #8]
 8011ffe:	6869      	ldr	r1, [r5, #4]
 8012000:	eb0a 0709 	add.w	r7, sl, r9
 8012004:	42bb      	cmp	r3, r7
 8012006:	b085      	sub	sp, #20
 8012008:	bfb8      	it	lt
 801200a:	3101      	addlt	r1, #1
 801200c:	f7ff fed4 	bl	8011db8 <_Balloc>
 8012010:	b930      	cbnz	r0, 8012020 <__multiply+0x44>
 8012012:	4602      	mov	r2, r0
 8012014:	4b42      	ldr	r3, [pc, #264]	; (8012120 <__multiply+0x144>)
 8012016:	4843      	ldr	r0, [pc, #268]	; (8012124 <__multiply+0x148>)
 8012018:	f240 115d 	movw	r1, #349	; 0x15d
 801201c:	f000 fb14 	bl	8012648 <__assert_func>
 8012020:	f100 0614 	add.w	r6, r0, #20
 8012024:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012028:	4633      	mov	r3, r6
 801202a:	2200      	movs	r2, #0
 801202c:	4543      	cmp	r3, r8
 801202e:	d31e      	bcc.n	801206e <__multiply+0x92>
 8012030:	f105 0c14 	add.w	ip, r5, #20
 8012034:	f104 0314 	add.w	r3, r4, #20
 8012038:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801203c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012040:	9202      	str	r2, [sp, #8]
 8012042:	ebac 0205 	sub.w	r2, ip, r5
 8012046:	3a15      	subs	r2, #21
 8012048:	f022 0203 	bic.w	r2, r2, #3
 801204c:	3204      	adds	r2, #4
 801204e:	f105 0115 	add.w	r1, r5, #21
 8012052:	458c      	cmp	ip, r1
 8012054:	bf38      	it	cc
 8012056:	2204      	movcc	r2, #4
 8012058:	9201      	str	r2, [sp, #4]
 801205a:	9a02      	ldr	r2, [sp, #8]
 801205c:	9303      	str	r3, [sp, #12]
 801205e:	429a      	cmp	r2, r3
 8012060:	d808      	bhi.n	8012074 <__multiply+0x98>
 8012062:	2f00      	cmp	r7, #0
 8012064:	dc55      	bgt.n	8012112 <__multiply+0x136>
 8012066:	6107      	str	r7, [r0, #16]
 8012068:	b005      	add	sp, #20
 801206a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801206e:	f843 2b04 	str.w	r2, [r3], #4
 8012072:	e7db      	b.n	801202c <__multiply+0x50>
 8012074:	f8b3 a000 	ldrh.w	sl, [r3]
 8012078:	f1ba 0f00 	cmp.w	sl, #0
 801207c:	d020      	beq.n	80120c0 <__multiply+0xe4>
 801207e:	f105 0e14 	add.w	lr, r5, #20
 8012082:	46b1      	mov	r9, r6
 8012084:	2200      	movs	r2, #0
 8012086:	f85e 4b04 	ldr.w	r4, [lr], #4
 801208a:	f8d9 b000 	ldr.w	fp, [r9]
 801208e:	b2a1      	uxth	r1, r4
 8012090:	fa1f fb8b 	uxth.w	fp, fp
 8012094:	fb0a b101 	mla	r1, sl, r1, fp
 8012098:	4411      	add	r1, r2
 801209a:	f8d9 2000 	ldr.w	r2, [r9]
 801209e:	0c24      	lsrs	r4, r4, #16
 80120a0:	0c12      	lsrs	r2, r2, #16
 80120a2:	fb0a 2404 	mla	r4, sl, r4, r2
 80120a6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80120aa:	b289      	uxth	r1, r1
 80120ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80120b0:	45f4      	cmp	ip, lr
 80120b2:	f849 1b04 	str.w	r1, [r9], #4
 80120b6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80120ba:	d8e4      	bhi.n	8012086 <__multiply+0xaa>
 80120bc:	9901      	ldr	r1, [sp, #4]
 80120be:	5072      	str	r2, [r6, r1]
 80120c0:	9a03      	ldr	r2, [sp, #12]
 80120c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80120c6:	3304      	adds	r3, #4
 80120c8:	f1b9 0f00 	cmp.w	r9, #0
 80120cc:	d01f      	beq.n	801210e <__multiply+0x132>
 80120ce:	6834      	ldr	r4, [r6, #0]
 80120d0:	f105 0114 	add.w	r1, r5, #20
 80120d4:	46b6      	mov	lr, r6
 80120d6:	f04f 0a00 	mov.w	sl, #0
 80120da:	880a      	ldrh	r2, [r1, #0]
 80120dc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80120e0:	fb09 b202 	mla	r2, r9, r2, fp
 80120e4:	4492      	add	sl, r2
 80120e6:	b2a4      	uxth	r4, r4
 80120e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80120ec:	f84e 4b04 	str.w	r4, [lr], #4
 80120f0:	f851 4b04 	ldr.w	r4, [r1], #4
 80120f4:	f8be 2000 	ldrh.w	r2, [lr]
 80120f8:	0c24      	lsrs	r4, r4, #16
 80120fa:	fb09 2404 	mla	r4, r9, r4, r2
 80120fe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012102:	458c      	cmp	ip, r1
 8012104:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012108:	d8e7      	bhi.n	80120da <__multiply+0xfe>
 801210a:	9a01      	ldr	r2, [sp, #4]
 801210c:	50b4      	str	r4, [r6, r2]
 801210e:	3604      	adds	r6, #4
 8012110:	e7a3      	b.n	801205a <__multiply+0x7e>
 8012112:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012116:	2b00      	cmp	r3, #0
 8012118:	d1a5      	bne.n	8012066 <__multiply+0x8a>
 801211a:	3f01      	subs	r7, #1
 801211c:	e7a1      	b.n	8012062 <__multiply+0x86>
 801211e:	bf00      	nop
 8012120:	08014d2b 	.word	0x08014d2b
 8012124:	08014d3c 	.word	0x08014d3c

08012128 <__pow5mult>:
 8012128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801212c:	4615      	mov	r5, r2
 801212e:	f012 0203 	ands.w	r2, r2, #3
 8012132:	4606      	mov	r6, r0
 8012134:	460f      	mov	r7, r1
 8012136:	d007      	beq.n	8012148 <__pow5mult+0x20>
 8012138:	4c25      	ldr	r4, [pc, #148]	; (80121d0 <__pow5mult+0xa8>)
 801213a:	3a01      	subs	r2, #1
 801213c:	2300      	movs	r3, #0
 801213e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012142:	f7ff fe9b 	bl	8011e7c <__multadd>
 8012146:	4607      	mov	r7, r0
 8012148:	10ad      	asrs	r5, r5, #2
 801214a:	d03d      	beq.n	80121c8 <__pow5mult+0xa0>
 801214c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801214e:	b97c      	cbnz	r4, 8012170 <__pow5mult+0x48>
 8012150:	2010      	movs	r0, #16
 8012152:	f7ff fe1b 	bl	8011d8c <malloc>
 8012156:	4602      	mov	r2, r0
 8012158:	6270      	str	r0, [r6, #36]	; 0x24
 801215a:	b928      	cbnz	r0, 8012168 <__pow5mult+0x40>
 801215c:	4b1d      	ldr	r3, [pc, #116]	; (80121d4 <__pow5mult+0xac>)
 801215e:	481e      	ldr	r0, [pc, #120]	; (80121d8 <__pow5mult+0xb0>)
 8012160:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012164:	f000 fa70 	bl	8012648 <__assert_func>
 8012168:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801216c:	6004      	str	r4, [r0, #0]
 801216e:	60c4      	str	r4, [r0, #12]
 8012170:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012174:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012178:	b94c      	cbnz	r4, 801218e <__pow5mult+0x66>
 801217a:	f240 2171 	movw	r1, #625	; 0x271
 801217e:	4630      	mov	r0, r6
 8012180:	f7ff ff16 	bl	8011fb0 <__i2b>
 8012184:	2300      	movs	r3, #0
 8012186:	f8c8 0008 	str.w	r0, [r8, #8]
 801218a:	4604      	mov	r4, r0
 801218c:	6003      	str	r3, [r0, #0]
 801218e:	f04f 0900 	mov.w	r9, #0
 8012192:	07eb      	lsls	r3, r5, #31
 8012194:	d50a      	bpl.n	80121ac <__pow5mult+0x84>
 8012196:	4639      	mov	r1, r7
 8012198:	4622      	mov	r2, r4
 801219a:	4630      	mov	r0, r6
 801219c:	f7ff ff1e 	bl	8011fdc <__multiply>
 80121a0:	4639      	mov	r1, r7
 80121a2:	4680      	mov	r8, r0
 80121a4:	4630      	mov	r0, r6
 80121a6:	f7ff fe47 	bl	8011e38 <_Bfree>
 80121aa:	4647      	mov	r7, r8
 80121ac:	106d      	asrs	r5, r5, #1
 80121ae:	d00b      	beq.n	80121c8 <__pow5mult+0xa0>
 80121b0:	6820      	ldr	r0, [r4, #0]
 80121b2:	b938      	cbnz	r0, 80121c4 <__pow5mult+0x9c>
 80121b4:	4622      	mov	r2, r4
 80121b6:	4621      	mov	r1, r4
 80121b8:	4630      	mov	r0, r6
 80121ba:	f7ff ff0f 	bl	8011fdc <__multiply>
 80121be:	6020      	str	r0, [r4, #0]
 80121c0:	f8c0 9000 	str.w	r9, [r0]
 80121c4:	4604      	mov	r4, r0
 80121c6:	e7e4      	b.n	8012192 <__pow5mult+0x6a>
 80121c8:	4638      	mov	r0, r7
 80121ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121ce:	bf00      	nop
 80121d0:	08014e90 	.word	0x08014e90
 80121d4:	08014cb5 	.word	0x08014cb5
 80121d8:	08014d3c 	.word	0x08014d3c

080121dc <__lshift>:
 80121dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121e0:	460c      	mov	r4, r1
 80121e2:	6849      	ldr	r1, [r1, #4]
 80121e4:	6923      	ldr	r3, [r4, #16]
 80121e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80121ea:	68a3      	ldr	r3, [r4, #8]
 80121ec:	4607      	mov	r7, r0
 80121ee:	4691      	mov	r9, r2
 80121f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80121f4:	f108 0601 	add.w	r6, r8, #1
 80121f8:	42b3      	cmp	r3, r6
 80121fa:	db0b      	blt.n	8012214 <__lshift+0x38>
 80121fc:	4638      	mov	r0, r7
 80121fe:	f7ff fddb 	bl	8011db8 <_Balloc>
 8012202:	4605      	mov	r5, r0
 8012204:	b948      	cbnz	r0, 801221a <__lshift+0x3e>
 8012206:	4602      	mov	r2, r0
 8012208:	4b28      	ldr	r3, [pc, #160]	; (80122ac <__lshift+0xd0>)
 801220a:	4829      	ldr	r0, [pc, #164]	; (80122b0 <__lshift+0xd4>)
 801220c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012210:	f000 fa1a 	bl	8012648 <__assert_func>
 8012214:	3101      	adds	r1, #1
 8012216:	005b      	lsls	r3, r3, #1
 8012218:	e7ee      	b.n	80121f8 <__lshift+0x1c>
 801221a:	2300      	movs	r3, #0
 801221c:	f100 0114 	add.w	r1, r0, #20
 8012220:	f100 0210 	add.w	r2, r0, #16
 8012224:	4618      	mov	r0, r3
 8012226:	4553      	cmp	r3, sl
 8012228:	db33      	blt.n	8012292 <__lshift+0xb6>
 801222a:	6920      	ldr	r0, [r4, #16]
 801222c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012230:	f104 0314 	add.w	r3, r4, #20
 8012234:	f019 091f 	ands.w	r9, r9, #31
 8012238:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801223c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012240:	d02b      	beq.n	801229a <__lshift+0xbe>
 8012242:	f1c9 0e20 	rsb	lr, r9, #32
 8012246:	468a      	mov	sl, r1
 8012248:	2200      	movs	r2, #0
 801224a:	6818      	ldr	r0, [r3, #0]
 801224c:	fa00 f009 	lsl.w	r0, r0, r9
 8012250:	4302      	orrs	r2, r0
 8012252:	f84a 2b04 	str.w	r2, [sl], #4
 8012256:	f853 2b04 	ldr.w	r2, [r3], #4
 801225a:	459c      	cmp	ip, r3
 801225c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012260:	d8f3      	bhi.n	801224a <__lshift+0x6e>
 8012262:	ebac 0304 	sub.w	r3, ip, r4
 8012266:	3b15      	subs	r3, #21
 8012268:	f023 0303 	bic.w	r3, r3, #3
 801226c:	3304      	adds	r3, #4
 801226e:	f104 0015 	add.w	r0, r4, #21
 8012272:	4584      	cmp	ip, r0
 8012274:	bf38      	it	cc
 8012276:	2304      	movcc	r3, #4
 8012278:	50ca      	str	r2, [r1, r3]
 801227a:	b10a      	cbz	r2, 8012280 <__lshift+0xa4>
 801227c:	f108 0602 	add.w	r6, r8, #2
 8012280:	3e01      	subs	r6, #1
 8012282:	4638      	mov	r0, r7
 8012284:	612e      	str	r6, [r5, #16]
 8012286:	4621      	mov	r1, r4
 8012288:	f7ff fdd6 	bl	8011e38 <_Bfree>
 801228c:	4628      	mov	r0, r5
 801228e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012292:	f842 0f04 	str.w	r0, [r2, #4]!
 8012296:	3301      	adds	r3, #1
 8012298:	e7c5      	b.n	8012226 <__lshift+0x4a>
 801229a:	3904      	subs	r1, #4
 801229c:	f853 2b04 	ldr.w	r2, [r3], #4
 80122a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80122a4:	459c      	cmp	ip, r3
 80122a6:	d8f9      	bhi.n	801229c <__lshift+0xc0>
 80122a8:	e7ea      	b.n	8012280 <__lshift+0xa4>
 80122aa:	bf00      	nop
 80122ac:	08014d2b 	.word	0x08014d2b
 80122b0:	08014d3c 	.word	0x08014d3c

080122b4 <__mcmp>:
 80122b4:	b530      	push	{r4, r5, lr}
 80122b6:	6902      	ldr	r2, [r0, #16]
 80122b8:	690c      	ldr	r4, [r1, #16]
 80122ba:	1b12      	subs	r2, r2, r4
 80122bc:	d10e      	bne.n	80122dc <__mcmp+0x28>
 80122be:	f100 0314 	add.w	r3, r0, #20
 80122c2:	3114      	adds	r1, #20
 80122c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80122c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80122cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80122d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80122d4:	42a5      	cmp	r5, r4
 80122d6:	d003      	beq.n	80122e0 <__mcmp+0x2c>
 80122d8:	d305      	bcc.n	80122e6 <__mcmp+0x32>
 80122da:	2201      	movs	r2, #1
 80122dc:	4610      	mov	r0, r2
 80122de:	bd30      	pop	{r4, r5, pc}
 80122e0:	4283      	cmp	r3, r0
 80122e2:	d3f3      	bcc.n	80122cc <__mcmp+0x18>
 80122e4:	e7fa      	b.n	80122dc <__mcmp+0x28>
 80122e6:	f04f 32ff 	mov.w	r2, #4294967295
 80122ea:	e7f7      	b.n	80122dc <__mcmp+0x28>

080122ec <__mdiff>:
 80122ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122f0:	460c      	mov	r4, r1
 80122f2:	4606      	mov	r6, r0
 80122f4:	4611      	mov	r1, r2
 80122f6:	4620      	mov	r0, r4
 80122f8:	4617      	mov	r7, r2
 80122fa:	f7ff ffdb 	bl	80122b4 <__mcmp>
 80122fe:	1e05      	subs	r5, r0, #0
 8012300:	d110      	bne.n	8012324 <__mdiff+0x38>
 8012302:	4629      	mov	r1, r5
 8012304:	4630      	mov	r0, r6
 8012306:	f7ff fd57 	bl	8011db8 <_Balloc>
 801230a:	b930      	cbnz	r0, 801231a <__mdiff+0x2e>
 801230c:	4b39      	ldr	r3, [pc, #228]	; (80123f4 <__mdiff+0x108>)
 801230e:	4602      	mov	r2, r0
 8012310:	f240 2132 	movw	r1, #562	; 0x232
 8012314:	4838      	ldr	r0, [pc, #224]	; (80123f8 <__mdiff+0x10c>)
 8012316:	f000 f997 	bl	8012648 <__assert_func>
 801231a:	2301      	movs	r3, #1
 801231c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012320:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012324:	bfa4      	itt	ge
 8012326:	463b      	movge	r3, r7
 8012328:	4627      	movge	r7, r4
 801232a:	4630      	mov	r0, r6
 801232c:	6879      	ldr	r1, [r7, #4]
 801232e:	bfa6      	itte	ge
 8012330:	461c      	movge	r4, r3
 8012332:	2500      	movge	r5, #0
 8012334:	2501      	movlt	r5, #1
 8012336:	f7ff fd3f 	bl	8011db8 <_Balloc>
 801233a:	b920      	cbnz	r0, 8012346 <__mdiff+0x5a>
 801233c:	4b2d      	ldr	r3, [pc, #180]	; (80123f4 <__mdiff+0x108>)
 801233e:	4602      	mov	r2, r0
 8012340:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012344:	e7e6      	b.n	8012314 <__mdiff+0x28>
 8012346:	693e      	ldr	r6, [r7, #16]
 8012348:	60c5      	str	r5, [r0, #12]
 801234a:	6925      	ldr	r5, [r4, #16]
 801234c:	f107 0114 	add.w	r1, r7, #20
 8012350:	f104 0914 	add.w	r9, r4, #20
 8012354:	f100 0e14 	add.w	lr, r0, #20
 8012358:	f107 0210 	add.w	r2, r7, #16
 801235c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012360:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012364:	46f2      	mov	sl, lr
 8012366:	2700      	movs	r7, #0
 8012368:	f859 3b04 	ldr.w	r3, [r9], #4
 801236c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012370:	fa1f f883 	uxth.w	r8, r3
 8012374:	fa17 f78b 	uxtah	r7, r7, fp
 8012378:	0c1b      	lsrs	r3, r3, #16
 801237a:	eba7 0808 	sub.w	r8, r7, r8
 801237e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012382:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012386:	fa1f f888 	uxth.w	r8, r8
 801238a:	141f      	asrs	r7, r3, #16
 801238c:	454d      	cmp	r5, r9
 801238e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012392:	f84a 3b04 	str.w	r3, [sl], #4
 8012396:	d8e7      	bhi.n	8012368 <__mdiff+0x7c>
 8012398:	1b2b      	subs	r3, r5, r4
 801239a:	3b15      	subs	r3, #21
 801239c:	f023 0303 	bic.w	r3, r3, #3
 80123a0:	3304      	adds	r3, #4
 80123a2:	3415      	adds	r4, #21
 80123a4:	42a5      	cmp	r5, r4
 80123a6:	bf38      	it	cc
 80123a8:	2304      	movcc	r3, #4
 80123aa:	4419      	add	r1, r3
 80123ac:	4473      	add	r3, lr
 80123ae:	469e      	mov	lr, r3
 80123b0:	460d      	mov	r5, r1
 80123b2:	4565      	cmp	r5, ip
 80123b4:	d30e      	bcc.n	80123d4 <__mdiff+0xe8>
 80123b6:	f10c 0203 	add.w	r2, ip, #3
 80123ba:	1a52      	subs	r2, r2, r1
 80123bc:	f022 0203 	bic.w	r2, r2, #3
 80123c0:	3903      	subs	r1, #3
 80123c2:	458c      	cmp	ip, r1
 80123c4:	bf38      	it	cc
 80123c6:	2200      	movcc	r2, #0
 80123c8:	441a      	add	r2, r3
 80123ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80123ce:	b17b      	cbz	r3, 80123f0 <__mdiff+0x104>
 80123d0:	6106      	str	r6, [r0, #16]
 80123d2:	e7a5      	b.n	8012320 <__mdiff+0x34>
 80123d4:	f855 8b04 	ldr.w	r8, [r5], #4
 80123d8:	fa17 f488 	uxtah	r4, r7, r8
 80123dc:	1422      	asrs	r2, r4, #16
 80123de:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80123e2:	b2a4      	uxth	r4, r4
 80123e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80123e8:	f84e 4b04 	str.w	r4, [lr], #4
 80123ec:	1417      	asrs	r7, r2, #16
 80123ee:	e7e0      	b.n	80123b2 <__mdiff+0xc6>
 80123f0:	3e01      	subs	r6, #1
 80123f2:	e7ea      	b.n	80123ca <__mdiff+0xde>
 80123f4:	08014d2b 	.word	0x08014d2b
 80123f8:	08014d3c 	.word	0x08014d3c

080123fc <__d2b>:
 80123fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012400:	4689      	mov	r9, r1
 8012402:	2101      	movs	r1, #1
 8012404:	ec57 6b10 	vmov	r6, r7, d0
 8012408:	4690      	mov	r8, r2
 801240a:	f7ff fcd5 	bl	8011db8 <_Balloc>
 801240e:	4604      	mov	r4, r0
 8012410:	b930      	cbnz	r0, 8012420 <__d2b+0x24>
 8012412:	4602      	mov	r2, r0
 8012414:	4b25      	ldr	r3, [pc, #148]	; (80124ac <__d2b+0xb0>)
 8012416:	4826      	ldr	r0, [pc, #152]	; (80124b0 <__d2b+0xb4>)
 8012418:	f240 310a 	movw	r1, #778	; 0x30a
 801241c:	f000 f914 	bl	8012648 <__assert_func>
 8012420:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012424:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012428:	bb35      	cbnz	r5, 8012478 <__d2b+0x7c>
 801242a:	2e00      	cmp	r6, #0
 801242c:	9301      	str	r3, [sp, #4]
 801242e:	d028      	beq.n	8012482 <__d2b+0x86>
 8012430:	4668      	mov	r0, sp
 8012432:	9600      	str	r6, [sp, #0]
 8012434:	f7ff fd8c 	bl	8011f50 <__lo0bits>
 8012438:	9900      	ldr	r1, [sp, #0]
 801243a:	b300      	cbz	r0, 801247e <__d2b+0x82>
 801243c:	9a01      	ldr	r2, [sp, #4]
 801243e:	f1c0 0320 	rsb	r3, r0, #32
 8012442:	fa02 f303 	lsl.w	r3, r2, r3
 8012446:	430b      	orrs	r3, r1
 8012448:	40c2      	lsrs	r2, r0
 801244a:	6163      	str	r3, [r4, #20]
 801244c:	9201      	str	r2, [sp, #4]
 801244e:	9b01      	ldr	r3, [sp, #4]
 8012450:	61a3      	str	r3, [r4, #24]
 8012452:	2b00      	cmp	r3, #0
 8012454:	bf14      	ite	ne
 8012456:	2202      	movne	r2, #2
 8012458:	2201      	moveq	r2, #1
 801245a:	6122      	str	r2, [r4, #16]
 801245c:	b1d5      	cbz	r5, 8012494 <__d2b+0x98>
 801245e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012462:	4405      	add	r5, r0
 8012464:	f8c9 5000 	str.w	r5, [r9]
 8012468:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801246c:	f8c8 0000 	str.w	r0, [r8]
 8012470:	4620      	mov	r0, r4
 8012472:	b003      	add	sp, #12
 8012474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012478:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801247c:	e7d5      	b.n	801242a <__d2b+0x2e>
 801247e:	6161      	str	r1, [r4, #20]
 8012480:	e7e5      	b.n	801244e <__d2b+0x52>
 8012482:	a801      	add	r0, sp, #4
 8012484:	f7ff fd64 	bl	8011f50 <__lo0bits>
 8012488:	9b01      	ldr	r3, [sp, #4]
 801248a:	6163      	str	r3, [r4, #20]
 801248c:	2201      	movs	r2, #1
 801248e:	6122      	str	r2, [r4, #16]
 8012490:	3020      	adds	r0, #32
 8012492:	e7e3      	b.n	801245c <__d2b+0x60>
 8012494:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012498:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801249c:	f8c9 0000 	str.w	r0, [r9]
 80124a0:	6918      	ldr	r0, [r3, #16]
 80124a2:	f7ff fd35 	bl	8011f10 <__hi0bits>
 80124a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80124aa:	e7df      	b.n	801246c <__d2b+0x70>
 80124ac:	08014d2b 	.word	0x08014d2b
 80124b0:	08014d3c 	.word	0x08014d3c

080124b4 <_calloc_r>:
 80124b4:	b513      	push	{r0, r1, r4, lr}
 80124b6:	434a      	muls	r2, r1
 80124b8:	4611      	mov	r1, r2
 80124ba:	9201      	str	r2, [sp, #4]
 80124bc:	f000 f85a 	bl	8012574 <_malloc_r>
 80124c0:	4604      	mov	r4, r0
 80124c2:	b118      	cbz	r0, 80124cc <_calloc_r+0x18>
 80124c4:	9a01      	ldr	r2, [sp, #4]
 80124c6:	2100      	movs	r1, #0
 80124c8:	f7fe fa02 	bl	80108d0 <memset>
 80124cc:	4620      	mov	r0, r4
 80124ce:	b002      	add	sp, #8
 80124d0:	bd10      	pop	{r4, pc}
	...

080124d4 <_free_r>:
 80124d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80124d6:	2900      	cmp	r1, #0
 80124d8:	d048      	beq.n	801256c <_free_r+0x98>
 80124da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80124de:	9001      	str	r0, [sp, #4]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	f1a1 0404 	sub.w	r4, r1, #4
 80124e6:	bfb8      	it	lt
 80124e8:	18e4      	addlt	r4, r4, r3
 80124ea:	f000 f8ef 	bl	80126cc <__malloc_lock>
 80124ee:	4a20      	ldr	r2, [pc, #128]	; (8012570 <_free_r+0x9c>)
 80124f0:	9801      	ldr	r0, [sp, #4]
 80124f2:	6813      	ldr	r3, [r2, #0]
 80124f4:	4615      	mov	r5, r2
 80124f6:	b933      	cbnz	r3, 8012506 <_free_r+0x32>
 80124f8:	6063      	str	r3, [r4, #4]
 80124fa:	6014      	str	r4, [r2, #0]
 80124fc:	b003      	add	sp, #12
 80124fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012502:	f000 b8e9 	b.w	80126d8 <__malloc_unlock>
 8012506:	42a3      	cmp	r3, r4
 8012508:	d90b      	bls.n	8012522 <_free_r+0x4e>
 801250a:	6821      	ldr	r1, [r4, #0]
 801250c:	1862      	adds	r2, r4, r1
 801250e:	4293      	cmp	r3, r2
 8012510:	bf04      	itt	eq
 8012512:	681a      	ldreq	r2, [r3, #0]
 8012514:	685b      	ldreq	r3, [r3, #4]
 8012516:	6063      	str	r3, [r4, #4]
 8012518:	bf04      	itt	eq
 801251a:	1852      	addeq	r2, r2, r1
 801251c:	6022      	streq	r2, [r4, #0]
 801251e:	602c      	str	r4, [r5, #0]
 8012520:	e7ec      	b.n	80124fc <_free_r+0x28>
 8012522:	461a      	mov	r2, r3
 8012524:	685b      	ldr	r3, [r3, #4]
 8012526:	b10b      	cbz	r3, 801252c <_free_r+0x58>
 8012528:	42a3      	cmp	r3, r4
 801252a:	d9fa      	bls.n	8012522 <_free_r+0x4e>
 801252c:	6811      	ldr	r1, [r2, #0]
 801252e:	1855      	adds	r5, r2, r1
 8012530:	42a5      	cmp	r5, r4
 8012532:	d10b      	bne.n	801254c <_free_r+0x78>
 8012534:	6824      	ldr	r4, [r4, #0]
 8012536:	4421      	add	r1, r4
 8012538:	1854      	adds	r4, r2, r1
 801253a:	42a3      	cmp	r3, r4
 801253c:	6011      	str	r1, [r2, #0]
 801253e:	d1dd      	bne.n	80124fc <_free_r+0x28>
 8012540:	681c      	ldr	r4, [r3, #0]
 8012542:	685b      	ldr	r3, [r3, #4]
 8012544:	6053      	str	r3, [r2, #4]
 8012546:	4421      	add	r1, r4
 8012548:	6011      	str	r1, [r2, #0]
 801254a:	e7d7      	b.n	80124fc <_free_r+0x28>
 801254c:	d902      	bls.n	8012554 <_free_r+0x80>
 801254e:	230c      	movs	r3, #12
 8012550:	6003      	str	r3, [r0, #0]
 8012552:	e7d3      	b.n	80124fc <_free_r+0x28>
 8012554:	6825      	ldr	r5, [r4, #0]
 8012556:	1961      	adds	r1, r4, r5
 8012558:	428b      	cmp	r3, r1
 801255a:	bf04      	itt	eq
 801255c:	6819      	ldreq	r1, [r3, #0]
 801255e:	685b      	ldreq	r3, [r3, #4]
 8012560:	6063      	str	r3, [r4, #4]
 8012562:	bf04      	itt	eq
 8012564:	1949      	addeq	r1, r1, r5
 8012566:	6021      	streq	r1, [r4, #0]
 8012568:	6054      	str	r4, [r2, #4]
 801256a:	e7c7      	b.n	80124fc <_free_r+0x28>
 801256c:	b003      	add	sp, #12
 801256e:	bd30      	pop	{r4, r5, pc}
 8012570:	24000aec 	.word	0x24000aec

08012574 <_malloc_r>:
 8012574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012576:	1ccd      	adds	r5, r1, #3
 8012578:	f025 0503 	bic.w	r5, r5, #3
 801257c:	3508      	adds	r5, #8
 801257e:	2d0c      	cmp	r5, #12
 8012580:	bf38      	it	cc
 8012582:	250c      	movcc	r5, #12
 8012584:	2d00      	cmp	r5, #0
 8012586:	4606      	mov	r6, r0
 8012588:	db01      	blt.n	801258e <_malloc_r+0x1a>
 801258a:	42a9      	cmp	r1, r5
 801258c:	d903      	bls.n	8012596 <_malloc_r+0x22>
 801258e:	230c      	movs	r3, #12
 8012590:	6033      	str	r3, [r6, #0]
 8012592:	2000      	movs	r0, #0
 8012594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012596:	f000 f899 	bl	80126cc <__malloc_lock>
 801259a:	4921      	ldr	r1, [pc, #132]	; (8012620 <_malloc_r+0xac>)
 801259c:	680a      	ldr	r2, [r1, #0]
 801259e:	4614      	mov	r4, r2
 80125a0:	b99c      	cbnz	r4, 80125ca <_malloc_r+0x56>
 80125a2:	4f20      	ldr	r7, [pc, #128]	; (8012624 <_malloc_r+0xb0>)
 80125a4:	683b      	ldr	r3, [r7, #0]
 80125a6:	b923      	cbnz	r3, 80125b2 <_malloc_r+0x3e>
 80125a8:	4621      	mov	r1, r4
 80125aa:	4630      	mov	r0, r6
 80125ac:	f000 f83c 	bl	8012628 <_sbrk_r>
 80125b0:	6038      	str	r0, [r7, #0]
 80125b2:	4629      	mov	r1, r5
 80125b4:	4630      	mov	r0, r6
 80125b6:	f000 f837 	bl	8012628 <_sbrk_r>
 80125ba:	1c43      	adds	r3, r0, #1
 80125bc:	d123      	bne.n	8012606 <_malloc_r+0x92>
 80125be:	230c      	movs	r3, #12
 80125c0:	6033      	str	r3, [r6, #0]
 80125c2:	4630      	mov	r0, r6
 80125c4:	f000 f888 	bl	80126d8 <__malloc_unlock>
 80125c8:	e7e3      	b.n	8012592 <_malloc_r+0x1e>
 80125ca:	6823      	ldr	r3, [r4, #0]
 80125cc:	1b5b      	subs	r3, r3, r5
 80125ce:	d417      	bmi.n	8012600 <_malloc_r+0x8c>
 80125d0:	2b0b      	cmp	r3, #11
 80125d2:	d903      	bls.n	80125dc <_malloc_r+0x68>
 80125d4:	6023      	str	r3, [r4, #0]
 80125d6:	441c      	add	r4, r3
 80125d8:	6025      	str	r5, [r4, #0]
 80125da:	e004      	b.n	80125e6 <_malloc_r+0x72>
 80125dc:	6863      	ldr	r3, [r4, #4]
 80125de:	42a2      	cmp	r2, r4
 80125e0:	bf0c      	ite	eq
 80125e2:	600b      	streq	r3, [r1, #0]
 80125e4:	6053      	strne	r3, [r2, #4]
 80125e6:	4630      	mov	r0, r6
 80125e8:	f000 f876 	bl	80126d8 <__malloc_unlock>
 80125ec:	f104 000b 	add.w	r0, r4, #11
 80125f0:	1d23      	adds	r3, r4, #4
 80125f2:	f020 0007 	bic.w	r0, r0, #7
 80125f6:	1ac2      	subs	r2, r0, r3
 80125f8:	d0cc      	beq.n	8012594 <_malloc_r+0x20>
 80125fa:	1a1b      	subs	r3, r3, r0
 80125fc:	50a3      	str	r3, [r4, r2]
 80125fe:	e7c9      	b.n	8012594 <_malloc_r+0x20>
 8012600:	4622      	mov	r2, r4
 8012602:	6864      	ldr	r4, [r4, #4]
 8012604:	e7cc      	b.n	80125a0 <_malloc_r+0x2c>
 8012606:	1cc4      	adds	r4, r0, #3
 8012608:	f024 0403 	bic.w	r4, r4, #3
 801260c:	42a0      	cmp	r0, r4
 801260e:	d0e3      	beq.n	80125d8 <_malloc_r+0x64>
 8012610:	1a21      	subs	r1, r4, r0
 8012612:	4630      	mov	r0, r6
 8012614:	f000 f808 	bl	8012628 <_sbrk_r>
 8012618:	3001      	adds	r0, #1
 801261a:	d1dd      	bne.n	80125d8 <_malloc_r+0x64>
 801261c:	e7cf      	b.n	80125be <_malloc_r+0x4a>
 801261e:	bf00      	nop
 8012620:	24000aec 	.word	0x24000aec
 8012624:	24000af0 	.word	0x24000af0

08012628 <_sbrk_r>:
 8012628:	b538      	push	{r3, r4, r5, lr}
 801262a:	4d06      	ldr	r5, [pc, #24]	; (8012644 <_sbrk_r+0x1c>)
 801262c:	2300      	movs	r3, #0
 801262e:	4604      	mov	r4, r0
 8012630:	4608      	mov	r0, r1
 8012632:	602b      	str	r3, [r5, #0]
 8012634:	f7f1 ffee 	bl	8004614 <_sbrk>
 8012638:	1c43      	adds	r3, r0, #1
 801263a:	d102      	bne.n	8012642 <_sbrk_r+0x1a>
 801263c:	682b      	ldr	r3, [r5, #0]
 801263e:	b103      	cbz	r3, 8012642 <_sbrk_r+0x1a>
 8012640:	6023      	str	r3, [r4, #0]
 8012642:	bd38      	pop	{r3, r4, r5, pc}
 8012644:	2400133c 	.word	0x2400133c

08012648 <__assert_func>:
 8012648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801264a:	4614      	mov	r4, r2
 801264c:	461a      	mov	r2, r3
 801264e:	4b09      	ldr	r3, [pc, #36]	; (8012674 <__assert_func+0x2c>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	4605      	mov	r5, r0
 8012654:	68d8      	ldr	r0, [r3, #12]
 8012656:	b14c      	cbz	r4, 801266c <__assert_func+0x24>
 8012658:	4b07      	ldr	r3, [pc, #28]	; (8012678 <__assert_func+0x30>)
 801265a:	9100      	str	r1, [sp, #0]
 801265c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012660:	4906      	ldr	r1, [pc, #24]	; (801267c <__assert_func+0x34>)
 8012662:	462b      	mov	r3, r5
 8012664:	f000 f80e 	bl	8012684 <fiprintf>
 8012668:	f000 fa64 	bl	8012b34 <abort>
 801266c:	4b04      	ldr	r3, [pc, #16]	; (8012680 <__assert_func+0x38>)
 801266e:	461c      	mov	r4, r3
 8012670:	e7f3      	b.n	801265a <__assert_func+0x12>
 8012672:	bf00      	nop
 8012674:	24000024 	.word	0x24000024
 8012678:	08014e9c 	.word	0x08014e9c
 801267c:	08014ea9 	.word	0x08014ea9
 8012680:	08014ed7 	.word	0x08014ed7

08012684 <fiprintf>:
 8012684:	b40e      	push	{r1, r2, r3}
 8012686:	b503      	push	{r0, r1, lr}
 8012688:	4601      	mov	r1, r0
 801268a:	ab03      	add	r3, sp, #12
 801268c:	4805      	ldr	r0, [pc, #20]	; (80126a4 <fiprintf+0x20>)
 801268e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012692:	6800      	ldr	r0, [r0, #0]
 8012694:	9301      	str	r3, [sp, #4]
 8012696:	f000 f84f 	bl	8012738 <_vfiprintf_r>
 801269a:	b002      	add	sp, #8
 801269c:	f85d eb04 	ldr.w	lr, [sp], #4
 80126a0:	b003      	add	sp, #12
 80126a2:	4770      	bx	lr
 80126a4:	24000024 	.word	0x24000024

080126a8 <__ascii_mbtowc>:
 80126a8:	b082      	sub	sp, #8
 80126aa:	b901      	cbnz	r1, 80126ae <__ascii_mbtowc+0x6>
 80126ac:	a901      	add	r1, sp, #4
 80126ae:	b142      	cbz	r2, 80126c2 <__ascii_mbtowc+0x1a>
 80126b0:	b14b      	cbz	r3, 80126c6 <__ascii_mbtowc+0x1e>
 80126b2:	7813      	ldrb	r3, [r2, #0]
 80126b4:	600b      	str	r3, [r1, #0]
 80126b6:	7812      	ldrb	r2, [r2, #0]
 80126b8:	1e10      	subs	r0, r2, #0
 80126ba:	bf18      	it	ne
 80126bc:	2001      	movne	r0, #1
 80126be:	b002      	add	sp, #8
 80126c0:	4770      	bx	lr
 80126c2:	4610      	mov	r0, r2
 80126c4:	e7fb      	b.n	80126be <__ascii_mbtowc+0x16>
 80126c6:	f06f 0001 	mvn.w	r0, #1
 80126ca:	e7f8      	b.n	80126be <__ascii_mbtowc+0x16>

080126cc <__malloc_lock>:
 80126cc:	4801      	ldr	r0, [pc, #4]	; (80126d4 <__malloc_lock+0x8>)
 80126ce:	f000 bbf1 	b.w	8012eb4 <__retarget_lock_acquire_recursive>
 80126d2:	bf00      	nop
 80126d4:	24001344 	.word	0x24001344

080126d8 <__malloc_unlock>:
 80126d8:	4801      	ldr	r0, [pc, #4]	; (80126e0 <__malloc_unlock+0x8>)
 80126da:	f000 bbec 	b.w	8012eb6 <__retarget_lock_release_recursive>
 80126de:	bf00      	nop
 80126e0:	24001344 	.word	0x24001344

080126e4 <__sfputc_r>:
 80126e4:	6893      	ldr	r3, [r2, #8]
 80126e6:	3b01      	subs	r3, #1
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	b410      	push	{r4}
 80126ec:	6093      	str	r3, [r2, #8]
 80126ee:	da08      	bge.n	8012702 <__sfputc_r+0x1e>
 80126f0:	6994      	ldr	r4, [r2, #24]
 80126f2:	42a3      	cmp	r3, r4
 80126f4:	db01      	blt.n	80126fa <__sfputc_r+0x16>
 80126f6:	290a      	cmp	r1, #10
 80126f8:	d103      	bne.n	8012702 <__sfputc_r+0x1e>
 80126fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126fe:	f000 b94b 	b.w	8012998 <__swbuf_r>
 8012702:	6813      	ldr	r3, [r2, #0]
 8012704:	1c58      	adds	r0, r3, #1
 8012706:	6010      	str	r0, [r2, #0]
 8012708:	7019      	strb	r1, [r3, #0]
 801270a:	4608      	mov	r0, r1
 801270c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012710:	4770      	bx	lr

08012712 <__sfputs_r>:
 8012712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012714:	4606      	mov	r6, r0
 8012716:	460f      	mov	r7, r1
 8012718:	4614      	mov	r4, r2
 801271a:	18d5      	adds	r5, r2, r3
 801271c:	42ac      	cmp	r4, r5
 801271e:	d101      	bne.n	8012724 <__sfputs_r+0x12>
 8012720:	2000      	movs	r0, #0
 8012722:	e007      	b.n	8012734 <__sfputs_r+0x22>
 8012724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012728:	463a      	mov	r2, r7
 801272a:	4630      	mov	r0, r6
 801272c:	f7ff ffda 	bl	80126e4 <__sfputc_r>
 8012730:	1c43      	adds	r3, r0, #1
 8012732:	d1f3      	bne.n	801271c <__sfputs_r+0xa>
 8012734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012738 <_vfiprintf_r>:
 8012738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801273c:	460d      	mov	r5, r1
 801273e:	b09d      	sub	sp, #116	; 0x74
 8012740:	4614      	mov	r4, r2
 8012742:	4698      	mov	r8, r3
 8012744:	4606      	mov	r6, r0
 8012746:	b118      	cbz	r0, 8012750 <_vfiprintf_r+0x18>
 8012748:	6983      	ldr	r3, [r0, #24]
 801274a:	b90b      	cbnz	r3, 8012750 <_vfiprintf_r+0x18>
 801274c:	f000 fb14 	bl	8012d78 <__sinit>
 8012750:	4b89      	ldr	r3, [pc, #548]	; (8012978 <_vfiprintf_r+0x240>)
 8012752:	429d      	cmp	r5, r3
 8012754:	d11b      	bne.n	801278e <_vfiprintf_r+0x56>
 8012756:	6875      	ldr	r5, [r6, #4]
 8012758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801275a:	07d9      	lsls	r1, r3, #31
 801275c:	d405      	bmi.n	801276a <_vfiprintf_r+0x32>
 801275e:	89ab      	ldrh	r3, [r5, #12]
 8012760:	059a      	lsls	r2, r3, #22
 8012762:	d402      	bmi.n	801276a <_vfiprintf_r+0x32>
 8012764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012766:	f000 fba5 	bl	8012eb4 <__retarget_lock_acquire_recursive>
 801276a:	89ab      	ldrh	r3, [r5, #12]
 801276c:	071b      	lsls	r3, r3, #28
 801276e:	d501      	bpl.n	8012774 <_vfiprintf_r+0x3c>
 8012770:	692b      	ldr	r3, [r5, #16]
 8012772:	b9eb      	cbnz	r3, 80127b0 <_vfiprintf_r+0x78>
 8012774:	4629      	mov	r1, r5
 8012776:	4630      	mov	r0, r6
 8012778:	f000 f96e 	bl	8012a58 <__swsetup_r>
 801277c:	b1c0      	cbz	r0, 80127b0 <_vfiprintf_r+0x78>
 801277e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012780:	07dc      	lsls	r4, r3, #31
 8012782:	d50e      	bpl.n	80127a2 <_vfiprintf_r+0x6a>
 8012784:	f04f 30ff 	mov.w	r0, #4294967295
 8012788:	b01d      	add	sp, #116	; 0x74
 801278a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801278e:	4b7b      	ldr	r3, [pc, #492]	; (801297c <_vfiprintf_r+0x244>)
 8012790:	429d      	cmp	r5, r3
 8012792:	d101      	bne.n	8012798 <_vfiprintf_r+0x60>
 8012794:	68b5      	ldr	r5, [r6, #8]
 8012796:	e7df      	b.n	8012758 <_vfiprintf_r+0x20>
 8012798:	4b79      	ldr	r3, [pc, #484]	; (8012980 <_vfiprintf_r+0x248>)
 801279a:	429d      	cmp	r5, r3
 801279c:	bf08      	it	eq
 801279e:	68f5      	ldreq	r5, [r6, #12]
 80127a0:	e7da      	b.n	8012758 <_vfiprintf_r+0x20>
 80127a2:	89ab      	ldrh	r3, [r5, #12]
 80127a4:	0598      	lsls	r0, r3, #22
 80127a6:	d4ed      	bmi.n	8012784 <_vfiprintf_r+0x4c>
 80127a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80127aa:	f000 fb84 	bl	8012eb6 <__retarget_lock_release_recursive>
 80127ae:	e7e9      	b.n	8012784 <_vfiprintf_r+0x4c>
 80127b0:	2300      	movs	r3, #0
 80127b2:	9309      	str	r3, [sp, #36]	; 0x24
 80127b4:	2320      	movs	r3, #32
 80127b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80127ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80127be:	2330      	movs	r3, #48	; 0x30
 80127c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012984 <_vfiprintf_r+0x24c>
 80127c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80127c8:	f04f 0901 	mov.w	r9, #1
 80127cc:	4623      	mov	r3, r4
 80127ce:	469a      	mov	sl, r3
 80127d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127d4:	b10a      	cbz	r2, 80127da <_vfiprintf_r+0xa2>
 80127d6:	2a25      	cmp	r2, #37	; 0x25
 80127d8:	d1f9      	bne.n	80127ce <_vfiprintf_r+0x96>
 80127da:	ebba 0b04 	subs.w	fp, sl, r4
 80127de:	d00b      	beq.n	80127f8 <_vfiprintf_r+0xc0>
 80127e0:	465b      	mov	r3, fp
 80127e2:	4622      	mov	r2, r4
 80127e4:	4629      	mov	r1, r5
 80127e6:	4630      	mov	r0, r6
 80127e8:	f7ff ff93 	bl	8012712 <__sfputs_r>
 80127ec:	3001      	adds	r0, #1
 80127ee:	f000 80aa 	beq.w	8012946 <_vfiprintf_r+0x20e>
 80127f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127f4:	445a      	add	r2, fp
 80127f6:	9209      	str	r2, [sp, #36]	; 0x24
 80127f8:	f89a 3000 	ldrb.w	r3, [sl]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	f000 80a2 	beq.w	8012946 <_vfiprintf_r+0x20e>
 8012802:	2300      	movs	r3, #0
 8012804:	f04f 32ff 	mov.w	r2, #4294967295
 8012808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801280c:	f10a 0a01 	add.w	sl, sl, #1
 8012810:	9304      	str	r3, [sp, #16]
 8012812:	9307      	str	r3, [sp, #28]
 8012814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012818:	931a      	str	r3, [sp, #104]	; 0x68
 801281a:	4654      	mov	r4, sl
 801281c:	2205      	movs	r2, #5
 801281e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012822:	4858      	ldr	r0, [pc, #352]	; (8012984 <_vfiprintf_r+0x24c>)
 8012824:	f7ed fd64 	bl	80002f0 <memchr>
 8012828:	9a04      	ldr	r2, [sp, #16]
 801282a:	b9d8      	cbnz	r0, 8012864 <_vfiprintf_r+0x12c>
 801282c:	06d1      	lsls	r1, r2, #27
 801282e:	bf44      	itt	mi
 8012830:	2320      	movmi	r3, #32
 8012832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012836:	0713      	lsls	r3, r2, #28
 8012838:	bf44      	itt	mi
 801283a:	232b      	movmi	r3, #43	; 0x2b
 801283c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012840:	f89a 3000 	ldrb.w	r3, [sl]
 8012844:	2b2a      	cmp	r3, #42	; 0x2a
 8012846:	d015      	beq.n	8012874 <_vfiprintf_r+0x13c>
 8012848:	9a07      	ldr	r2, [sp, #28]
 801284a:	4654      	mov	r4, sl
 801284c:	2000      	movs	r0, #0
 801284e:	f04f 0c0a 	mov.w	ip, #10
 8012852:	4621      	mov	r1, r4
 8012854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012858:	3b30      	subs	r3, #48	; 0x30
 801285a:	2b09      	cmp	r3, #9
 801285c:	d94e      	bls.n	80128fc <_vfiprintf_r+0x1c4>
 801285e:	b1b0      	cbz	r0, 801288e <_vfiprintf_r+0x156>
 8012860:	9207      	str	r2, [sp, #28]
 8012862:	e014      	b.n	801288e <_vfiprintf_r+0x156>
 8012864:	eba0 0308 	sub.w	r3, r0, r8
 8012868:	fa09 f303 	lsl.w	r3, r9, r3
 801286c:	4313      	orrs	r3, r2
 801286e:	9304      	str	r3, [sp, #16]
 8012870:	46a2      	mov	sl, r4
 8012872:	e7d2      	b.n	801281a <_vfiprintf_r+0xe2>
 8012874:	9b03      	ldr	r3, [sp, #12]
 8012876:	1d19      	adds	r1, r3, #4
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	9103      	str	r1, [sp, #12]
 801287c:	2b00      	cmp	r3, #0
 801287e:	bfbb      	ittet	lt
 8012880:	425b      	neglt	r3, r3
 8012882:	f042 0202 	orrlt.w	r2, r2, #2
 8012886:	9307      	strge	r3, [sp, #28]
 8012888:	9307      	strlt	r3, [sp, #28]
 801288a:	bfb8      	it	lt
 801288c:	9204      	strlt	r2, [sp, #16]
 801288e:	7823      	ldrb	r3, [r4, #0]
 8012890:	2b2e      	cmp	r3, #46	; 0x2e
 8012892:	d10c      	bne.n	80128ae <_vfiprintf_r+0x176>
 8012894:	7863      	ldrb	r3, [r4, #1]
 8012896:	2b2a      	cmp	r3, #42	; 0x2a
 8012898:	d135      	bne.n	8012906 <_vfiprintf_r+0x1ce>
 801289a:	9b03      	ldr	r3, [sp, #12]
 801289c:	1d1a      	adds	r2, r3, #4
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	9203      	str	r2, [sp, #12]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	bfb8      	it	lt
 80128a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80128aa:	3402      	adds	r4, #2
 80128ac:	9305      	str	r3, [sp, #20]
 80128ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012994 <_vfiprintf_r+0x25c>
 80128b2:	7821      	ldrb	r1, [r4, #0]
 80128b4:	2203      	movs	r2, #3
 80128b6:	4650      	mov	r0, sl
 80128b8:	f7ed fd1a 	bl	80002f0 <memchr>
 80128bc:	b140      	cbz	r0, 80128d0 <_vfiprintf_r+0x198>
 80128be:	2340      	movs	r3, #64	; 0x40
 80128c0:	eba0 000a 	sub.w	r0, r0, sl
 80128c4:	fa03 f000 	lsl.w	r0, r3, r0
 80128c8:	9b04      	ldr	r3, [sp, #16]
 80128ca:	4303      	orrs	r3, r0
 80128cc:	3401      	adds	r4, #1
 80128ce:	9304      	str	r3, [sp, #16]
 80128d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128d4:	482c      	ldr	r0, [pc, #176]	; (8012988 <_vfiprintf_r+0x250>)
 80128d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80128da:	2206      	movs	r2, #6
 80128dc:	f7ed fd08 	bl	80002f0 <memchr>
 80128e0:	2800      	cmp	r0, #0
 80128e2:	d03f      	beq.n	8012964 <_vfiprintf_r+0x22c>
 80128e4:	4b29      	ldr	r3, [pc, #164]	; (801298c <_vfiprintf_r+0x254>)
 80128e6:	bb1b      	cbnz	r3, 8012930 <_vfiprintf_r+0x1f8>
 80128e8:	9b03      	ldr	r3, [sp, #12]
 80128ea:	3307      	adds	r3, #7
 80128ec:	f023 0307 	bic.w	r3, r3, #7
 80128f0:	3308      	adds	r3, #8
 80128f2:	9303      	str	r3, [sp, #12]
 80128f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128f6:	443b      	add	r3, r7
 80128f8:	9309      	str	r3, [sp, #36]	; 0x24
 80128fa:	e767      	b.n	80127cc <_vfiprintf_r+0x94>
 80128fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8012900:	460c      	mov	r4, r1
 8012902:	2001      	movs	r0, #1
 8012904:	e7a5      	b.n	8012852 <_vfiprintf_r+0x11a>
 8012906:	2300      	movs	r3, #0
 8012908:	3401      	adds	r4, #1
 801290a:	9305      	str	r3, [sp, #20]
 801290c:	4619      	mov	r1, r3
 801290e:	f04f 0c0a 	mov.w	ip, #10
 8012912:	4620      	mov	r0, r4
 8012914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012918:	3a30      	subs	r2, #48	; 0x30
 801291a:	2a09      	cmp	r2, #9
 801291c:	d903      	bls.n	8012926 <_vfiprintf_r+0x1ee>
 801291e:	2b00      	cmp	r3, #0
 8012920:	d0c5      	beq.n	80128ae <_vfiprintf_r+0x176>
 8012922:	9105      	str	r1, [sp, #20]
 8012924:	e7c3      	b.n	80128ae <_vfiprintf_r+0x176>
 8012926:	fb0c 2101 	mla	r1, ip, r1, r2
 801292a:	4604      	mov	r4, r0
 801292c:	2301      	movs	r3, #1
 801292e:	e7f0      	b.n	8012912 <_vfiprintf_r+0x1da>
 8012930:	ab03      	add	r3, sp, #12
 8012932:	9300      	str	r3, [sp, #0]
 8012934:	462a      	mov	r2, r5
 8012936:	4b16      	ldr	r3, [pc, #88]	; (8012990 <_vfiprintf_r+0x258>)
 8012938:	a904      	add	r1, sp, #16
 801293a:	4630      	mov	r0, r6
 801293c:	f7fe f860 	bl	8010a00 <_printf_float>
 8012940:	4607      	mov	r7, r0
 8012942:	1c78      	adds	r0, r7, #1
 8012944:	d1d6      	bne.n	80128f4 <_vfiprintf_r+0x1bc>
 8012946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012948:	07d9      	lsls	r1, r3, #31
 801294a:	d405      	bmi.n	8012958 <_vfiprintf_r+0x220>
 801294c:	89ab      	ldrh	r3, [r5, #12]
 801294e:	059a      	lsls	r2, r3, #22
 8012950:	d402      	bmi.n	8012958 <_vfiprintf_r+0x220>
 8012952:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012954:	f000 faaf 	bl	8012eb6 <__retarget_lock_release_recursive>
 8012958:	89ab      	ldrh	r3, [r5, #12]
 801295a:	065b      	lsls	r3, r3, #25
 801295c:	f53f af12 	bmi.w	8012784 <_vfiprintf_r+0x4c>
 8012960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012962:	e711      	b.n	8012788 <_vfiprintf_r+0x50>
 8012964:	ab03      	add	r3, sp, #12
 8012966:	9300      	str	r3, [sp, #0]
 8012968:	462a      	mov	r2, r5
 801296a:	4b09      	ldr	r3, [pc, #36]	; (8012990 <_vfiprintf_r+0x258>)
 801296c:	a904      	add	r1, sp, #16
 801296e:	4630      	mov	r0, r6
 8012970:	f7fe fad2 	bl	8010f18 <_printf_i>
 8012974:	e7e4      	b.n	8012940 <_vfiprintf_r+0x208>
 8012976:	bf00      	nop
 8012978:	08015014 	.word	0x08015014
 801297c:	08015034 	.word	0x08015034
 8012980:	08014ff4 	.word	0x08014ff4
 8012984:	08014ee2 	.word	0x08014ee2
 8012988:	08014eec 	.word	0x08014eec
 801298c:	08010a01 	.word	0x08010a01
 8012990:	08012713 	.word	0x08012713
 8012994:	08014ee8 	.word	0x08014ee8

08012998 <__swbuf_r>:
 8012998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801299a:	460e      	mov	r6, r1
 801299c:	4614      	mov	r4, r2
 801299e:	4605      	mov	r5, r0
 80129a0:	b118      	cbz	r0, 80129aa <__swbuf_r+0x12>
 80129a2:	6983      	ldr	r3, [r0, #24]
 80129a4:	b90b      	cbnz	r3, 80129aa <__swbuf_r+0x12>
 80129a6:	f000 f9e7 	bl	8012d78 <__sinit>
 80129aa:	4b21      	ldr	r3, [pc, #132]	; (8012a30 <__swbuf_r+0x98>)
 80129ac:	429c      	cmp	r4, r3
 80129ae:	d12b      	bne.n	8012a08 <__swbuf_r+0x70>
 80129b0:	686c      	ldr	r4, [r5, #4]
 80129b2:	69a3      	ldr	r3, [r4, #24]
 80129b4:	60a3      	str	r3, [r4, #8]
 80129b6:	89a3      	ldrh	r3, [r4, #12]
 80129b8:	071a      	lsls	r2, r3, #28
 80129ba:	d52f      	bpl.n	8012a1c <__swbuf_r+0x84>
 80129bc:	6923      	ldr	r3, [r4, #16]
 80129be:	b36b      	cbz	r3, 8012a1c <__swbuf_r+0x84>
 80129c0:	6923      	ldr	r3, [r4, #16]
 80129c2:	6820      	ldr	r0, [r4, #0]
 80129c4:	1ac0      	subs	r0, r0, r3
 80129c6:	6963      	ldr	r3, [r4, #20]
 80129c8:	b2f6      	uxtb	r6, r6
 80129ca:	4283      	cmp	r3, r0
 80129cc:	4637      	mov	r7, r6
 80129ce:	dc04      	bgt.n	80129da <__swbuf_r+0x42>
 80129d0:	4621      	mov	r1, r4
 80129d2:	4628      	mov	r0, r5
 80129d4:	f000 f93c 	bl	8012c50 <_fflush_r>
 80129d8:	bb30      	cbnz	r0, 8012a28 <__swbuf_r+0x90>
 80129da:	68a3      	ldr	r3, [r4, #8]
 80129dc:	3b01      	subs	r3, #1
 80129de:	60a3      	str	r3, [r4, #8]
 80129e0:	6823      	ldr	r3, [r4, #0]
 80129e2:	1c5a      	adds	r2, r3, #1
 80129e4:	6022      	str	r2, [r4, #0]
 80129e6:	701e      	strb	r6, [r3, #0]
 80129e8:	6963      	ldr	r3, [r4, #20]
 80129ea:	3001      	adds	r0, #1
 80129ec:	4283      	cmp	r3, r0
 80129ee:	d004      	beq.n	80129fa <__swbuf_r+0x62>
 80129f0:	89a3      	ldrh	r3, [r4, #12]
 80129f2:	07db      	lsls	r3, r3, #31
 80129f4:	d506      	bpl.n	8012a04 <__swbuf_r+0x6c>
 80129f6:	2e0a      	cmp	r6, #10
 80129f8:	d104      	bne.n	8012a04 <__swbuf_r+0x6c>
 80129fa:	4621      	mov	r1, r4
 80129fc:	4628      	mov	r0, r5
 80129fe:	f000 f927 	bl	8012c50 <_fflush_r>
 8012a02:	b988      	cbnz	r0, 8012a28 <__swbuf_r+0x90>
 8012a04:	4638      	mov	r0, r7
 8012a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a08:	4b0a      	ldr	r3, [pc, #40]	; (8012a34 <__swbuf_r+0x9c>)
 8012a0a:	429c      	cmp	r4, r3
 8012a0c:	d101      	bne.n	8012a12 <__swbuf_r+0x7a>
 8012a0e:	68ac      	ldr	r4, [r5, #8]
 8012a10:	e7cf      	b.n	80129b2 <__swbuf_r+0x1a>
 8012a12:	4b09      	ldr	r3, [pc, #36]	; (8012a38 <__swbuf_r+0xa0>)
 8012a14:	429c      	cmp	r4, r3
 8012a16:	bf08      	it	eq
 8012a18:	68ec      	ldreq	r4, [r5, #12]
 8012a1a:	e7ca      	b.n	80129b2 <__swbuf_r+0x1a>
 8012a1c:	4621      	mov	r1, r4
 8012a1e:	4628      	mov	r0, r5
 8012a20:	f000 f81a 	bl	8012a58 <__swsetup_r>
 8012a24:	2800      	cmp	r0, #0
 8012a26:	d0cb      	beq.n	80129c0 <__swbuf_r+0x28>
 8012a28:	f04f 37ff 	mov.w	r7, #4294967295
 8012a2c:	e7ea      	b.n	8012a04 <__swbuf_r+0x6c>
 8012a2e:	bf00      	nop
 8012a30:	08015014 	.word	0x08015014
 8012a34:	08015034 	.word	0x08015034
 8012a38:	08014ff4 	.word	0x08014ff4

08012a3c <__ascii_wctomb>:
 8012a3c:	b149      	cbz	r1, 8012a52 <__ascii_wctomb+0x16>
 8012a3e:	2aff      	cmp	r2, #255	; 0xff
 8012a40:	bf85      	ittet	hi
 8012a42:	238a      	movhi	r3, #138	; 0x8a
 8012a44:	6003      	strhi	r3, [r0, #0]
 8012a46:	700a      	strbls	r2, [r1, #0]
 8012a48:	f04f 30ff 	movhi.w	r0, #4294967295
 8012a4c:	bf98      	it	ls
 8012a4e:	2001      	movls	r0, #1
 8012a50:	4770      	bx	lr
 8012a52:	4608      	mov	r0, r1
 8012a54:	4770      	bx	lr
	...

08012a58 <__swsetup_r>:
 8012a58:	4b32      	ldr	r3, [pc, #200]	; (8012b24 <__swsetup_r+0xcc>)
 8012a5a:	b570      	push	{r4, r5, r6, lr}
 8012a5c:	681d      	ldr	r5, [r3, #0]
 8012a5e:	4606      	mov	r6, r0
 8012a60:	460c      	mov	r4, r1
 8012a62:	b125      	cbz	r5, 8012a6e <__swsetup_r+0x16>
 8012a64:	69ab      	ldr	r3, [r5, #24]
 8012a66:	b913      	cbnz	r3, 8012a6e <__swsetup_r+0x16>
 8012a68:	4628      	mov	r0, r5
 8012a6a:	f000 f985 	bl	8012d78 <__sinit>
 8012a6e:	4b2e      	ldr	r3, [pc, #184]	; (8012b28 <__swsetup_r+0xd0>)
 8012a70:	429c      	cmp	r4, r3
 8012a72:	d10f      	bne.n	8012a94 <__swsetup_r+0x3c>
 8012a74:	686c      	ldr	r4, [r5, #4]
 8012a76:	89a3      	ldrh	r3, [r4, #12]
 8012a78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012a7c:	0719      	lsls	r1, r3, #28
 8012a7e:	d42c      	bmi.n	8012ada <__swsetup_r+0x82>
 8012a80:	06dd      	lsls	r5, r3, #27
 8012a82:	d411      	bmi.n	8012aa8 <__swsetup_r+0x50>
 8012a84:	2309      	movs	r3, #9
 8012a86:	6033      	str	r3, [r6, #0]
 8012a88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012a8c:	81a3      	strh	r3, [r4, #12]
 8012a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8012a92:	e03e      	b.n	8012b12 <__swsetup_r+0xba>
 8012a94:	4b25      	ldr	r3, [pc, #148]	; (8012b2c <__swsetup_r+0xd4>)
 8012a96:	429c      	cmp	r4, r3
 8012a98:	d101      	bne.n	8012a9e <__swsetup_r+0x46>
 8012a9a:	68ac      	ldr	r4, [r5, #8]
 8012a9c:	e7eb      	b.n	8012a76 <__swsetup_r+0x1e>
 8012a9e:	4b24      	ldr	r3, [pc, #144]	; (8012b30 <__swsetup_r+0xd8>)
 8012aa0:	429c      	cmp	r4, r3
 8012aa2:	bf08      	it	eq
 8012aa4:	68ec      	ldreq	r4, [r5, #12]
 8012aa6:	e7e6      	b.n	8012a76 <__swsetup_r+0x1e>
 8012aa8:	0758      	lsls	r0, r3, #29
 8012aaa:	d512      	bpl.n	8012ad2 <__swsetup_r+0x7a>
 8012aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012aae:	b141      	cbz	r1, 8012ac2 <__swsetup_r+0x6a>
 8012ab0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012ab4:	4299      	cmp	r1, r3
 8012ab6:	d002      	beq.n	8012abe <__swsetup_r+0x66>
 8012ab8:	4630      	mov	r0, r6
 8012aba:	f7ff fd0b 	bl	80124d4 <_free_r>
 8012abe:	2300      	movs	r3, #0
 8012ac0:	6363      	str	r3, [r4, #52]	; 0x34
 8012ac2:	89a3      	ldrh	r3, [r4, #12]
 8012ac4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012ac8:	81a3      	strh	r3, [r4, #12]
 8012aca:	2300      	movs	r3, #0
 8012acc:	6063      	str	r3, [r4, #4]
 8012ace:	6923      	ldr	r3, [r4, #16]
 8012ad0:	6023      	str	r3, [r4, #0]
 8012ad2:	89a3      	ldrh	r3, [r4, #12]
 8012ad4:	f043 0308 	orr.w	r3, r3, #8
 8012ad8:	81a3      	strh	r3, [r4, #12]
 8012ada:	6923      	ldr	r3, [r4, #16]
 8012adc:	b94b      	cbnz	r3, 8012af2 <__swsetup_r+0x9a>
 8012ade:	89a3      	ldrh	r3, [r4, #12]
 8012ae0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ae8:	d003      	beq.n	8012af2 <__swsetup_r+0x9a>
 8012aea:	4621      	mov	r1, r4
 8012aec:	4630      	mov	r0, r6
 8012aee:	f000 fa07 	bl	8012f00 <__smakebuf_r>
 8012af2:	89a0      	ldrh	r0, [r4, #12]
 8012af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012af8:	f010 0301 	ands.w	r3, r0, #1
 8012afc:	d00a      	beq.n	8012b14 <__swsetup_r+0xbc>
 8012afe:	2300      	movs	r3, #0
 8012b00:	60a3      	str	r3, [r4, #8]
 8012b02:	6963      	ldr	r3, [r4, #20]
 8012b04:	425b      	negs	r3, r3
 8012b06:	61a3      	str	r3, [r4, #24]
 8012b08:	6923      	ldr	r3, [r4, #16]
 8012b0a:	b943      	cbnz	r3, 8012b1e <__swsetup_r+0xc6>
 8012b0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012b10:	d1ba      	bne.n	8012a88 <__swsetup_r+0x30>
 8012b12:	bd70      	pop	{r4, r5, r6, pc}
 8012b14:	0781      	lsls	r1, r0, #30
 8012b16:	bf58      	it	pl
 8012b18:	6963      	ldrpl	r3, [r4, #20]
 8012b1a:	60a3      	str	r3, [r4, #8]
 8012b1c:	e7f4      	b.n	8012b08 <__swsetup_r+0xb0>
 8012b1e:	2000      	movs	r0, #0
 8012b20:	e7f7      	b.n	8012b12 <__swsetup_r+0xba>
 8012b22:	bf00      	nop
 8012b24:	24000024 	.word	0x24000024
 8012b28:	08015014 	.word	0x08015014
 8012b2c:	08015034 	.word	0x08015034
 8012b30:	08014ff4 	.word	0x08014ff4

08012b34 <abort>:
 8012b34:	b508      	push	{r3, lr}
 8012b36:	2006      	movs	r0, #6
 8012b38:	f000 fa4a 	bl	8012fd0 <raise>
 8012b3c:	2001      	movs	r0, #1
 8012b3e:	f7f1 fcf1 	bl	8004524 <_exit>
	...

08012b44 <__sflush_r>:
 8012b44:	898a      	ldrh	r2, [r1, #12]
 8012b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b4a:	4605      	mov	r5, r0
 8012b4c:	0710      	lsls	r0, r2, #28
 8012b4e:	460c      	mov	r4, r1
 8012b50:	d458      	bmi.n	8012c04 <__sflush_r+0xc0>
 8012b52:	684b      	ldr	r3, [r1, #4]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	dc05      	bgt.n	8012b64 <__sflush_r+0x20>
 8012b58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	dc02      	bgt.n	8012b64 <__sflush_r+0x20>
 8012b5e:	2000      	movs	r0, #0
 8012b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012b66:	2e00      	cmp	r6, #0
 8012b68:	d0f9      	beq.n	8012b5e <__sflush_r+0x1a>
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012b70:	682f      	ldr	r7, [r5, #0]
 8012b72:	602b      	str	r3, [r5, #0]
 8012b74:	d032      	beq.n	8012bdc <__sflush_r+0x98>
 8012b76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012b78:	89a3      	ldrh	r3, [r4, #12]
 8012b7a:	075a      	lsls	r2, r3, #29
 8012b7c:	d505      	bpl.n	8012b8a <__sflush_r+0x46>
 8012b7e:	6863      	ldr	r3, [r4, #4]
 8012b80:	1ac0      	subs	r0, r0, r3
 8012b82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012b84:	b10b      	cbz	r3, 8012b8a <__sflush_r+0x46>
 8012b86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012b88:	1ac0      	subs	r0, r0, r3
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	4602      	mov	r2, r0
 8012b8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012b90:	6a21      	ldr	r1, [r4, #32]
 8012b92:	4628      	mov	r0, r5
 8012b94:	47b0      	blx	r6
 8012b96:	1c43      	adds	r3, r0, #1
 8012b98:	89a3      	ldrh	r3, [r4, #12]
 8012b9a:	d106      	bne.n	8012baa <__sflush_r+0x66>
 8012b9c:	6829      	ldr	r1, [r5, #0]
 8012b9e:	291d      	cmp	r1, #29
 8012ba0:	d82c      	bhi.n	8012bfc <__sflush_r+0xb8>
 8012ba2:	4a2a      	ldr	r2, [pc, #168]	; (8012c4c <__sflush_r+0x108>)
 8012ba4:	40ca      	lsrs	r2, r1
 8012ba6:	07d6      	lsls	r6, r2, #31
 8012ba8:	d528      	bpl.n	8012bfc <__sflush_r+0xb8>
 8012baa:	2200      	movs	r2, #0
 8012bac:	6062      	str	r2, [r4, #4]
 8012bae:	04d9      	lsls	r1, r3, #19
 8012bb0:	6922      	ldr	r2, [r4, #16]
 8012bb2:	6022      	str	r2, [r4, #0]
 8012bb4:	d504      	bpl.n	8012bc0 <__sflush_r+0x7c>
 8012bb6:	1c42      	adds	r2, r0, #1
 8012bb8:	d101      	bne.n	8012bbe <__sflush_r+0x7a>
 8012bba:	682b      	ldr	r3, [r5, #0]
 8012bbc:	b903      	cbnz	r3, 8012bc0 <__sflush_r+0x7c>
 8012bbe:	6560      	str	r0, [r4, #84]	; 0x54
 8012bc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012bc2:	602f      	str	r7, [r5, #0]
 8012bc4:	2900      	cmp	r1, #0
 8012bc6:	d0ca      	beq.n	8012b5e <__sflush_r+0x1a>
 8012bc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012bcc:	4299      	cmp	r1, r3
 8012bce:	d002      	beq.n	8012bd6 <__sflush_r+0x92>
 8012bd0:	4628      	mov	r0, r5
 8012bd2:	f7ff fc7f 	bl	80124d4 <_free_r>
 8012bd6:	2000      	movs	r0, #0
 8012bd8:	6360      	str	r0, [r4, #52]	; 0x34
 8012bda:	e7c1      	b.n	8012b60 <__sflush_r+0x1c>
 8012bdc:	6a21      	ldr	r1, [r4, #32]
 8012bde:	2301      	movs	r3, #1
 8012be0:	4628      	mov	r0, r5
 8012be2:	47b0      	blx	r6
 8012be4:	1c41      	adds	r1, r0, #1
 8012be6:	d1c7      	bne.n	8012b78 <__sflush_r+0x34>
 8012be8:	682b      	ldr	r3, [r5, #0]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d0c4      	beq.n	8012b78 <__sflush_r+0x34>
 8012bee:	2b1d      	cmp	r3, #29
 8012bf0:	d001      	beq.n	8012bf6 <__sflush_r+0xb2>
 8012bf2:	2b16      	cmp	r3, #22
 8012bf4:	d101      	bne.n	8012bfa <__sflush_r+0xb6>
 8012bf6:	602f      	str	r7, [r5, #0]
 8012bf8:	e7b1      	b.n	8012b5e <__sflush_r+0x1a>
 8012bfa:	89a3      	ldrh	r3, [r4, #12]
 8012bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c00:	81a3      	strh	r3, [r4, #12]
 8012c02:	e7ad      	b.n	8012b60 <__sflush_r+0x1c>
 8012c04:	690f      	ldr	r7, [r1, #16]
 8012c06:	2f00      	cmp	r7, #0
 8012c08:	d0a9      	beq.n	8012b5e <__sflush_r+0x1a>
 8012c0a:	0793      	lsls	r3, r2, #30
 8012c0c:	680e      	ldr	r6, [r1, #0]
 8012c0e:	bf08      	it	eq
 8012c10:	694b      	ldreq	r3, [r1, #20]
 8012c12:	600f      	str	r7, [r1, #0]
 8012c14:	bf18      	it	ne
 8012c16:	2300      	movne	r3, #0
 8012c18:	eba6 0807 	sub.w	r8, r6, r7
 8012c1c:	608b      	str	r3, [r1, #8]
 8012c1e:	f1b8 0f00 	cmp.w	r8, #0
 8012c22:	dd9c      	ble.n	8012b5e <__sflush_r+0x1a>
 8012c24:	6a21      	ldr	r1, [r4, #32]
 8012c26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012c28:	4643      	mov	r3, r8
 8012c2a:	463a      	mov	r2, r7
 8012c2c:	4628      	mov	r0, r5
 8012c2e:	47b0      	blx	r6
 8012c30:	2800      	cmp	r0, #0
 8012c32:	dc06      	bgt.n	8012c42 <__sflush_r+0xfe>
 8012c34:	89a3      	ldrh	r3, [r4, #12]
 8012c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c3a:	81a3      	strh	r3, [r4, #12]
 8012c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c40:	e78e      	b.n	8012b60 <__sflush_r+0x1c>
 8012c42:	4407      	add	r7, r0
 8012c44:	eba8 0800 	sub.w	r8, r8, r0
 8012c48:	e7e9      	b.n	8012c1e <__sflush_r+0xda>
 8012c4a:	bf00      	nop
 8012c4c:	20400001 	.word	0x20400001

08012c50 <_fflush_r>:
 8012c50:	b538      	push	{r3, r4, r5, lr}
 8012c52:	690b      	ldr	r3, [r1, #16]
 8012c54:	4605      	mov	r5, r0
 8012c56:	460c      	mov	r4, r1
 8012c58:	b913      	cbnz	r3, 8012c60 <_fflush_r+0x10>
 8012c5a:	2500      	movs	r5, #0
 8012c5c:	4628      	mov	r0, r5
 8012c5e:	bd38      	pop	{r3, r4, r5, pc}
 8012c60:	b118      	cbz	r0, 8012c6a <_fflush_r+0x1a>
 8012c62:	6983      	ldr	r3, [r0, #24]
 8012c64:	b90b      	cbnz	r3, 8012c6a <_fflush_r+0x1a>
 8012c66:	f000 f887 	bl	8012d78 <__sinit>
 8012c6a:	4b14      	ldr	r3, [pc, #80]	; (8012cbc <_fflush_r+0x6c>)
 8012c6c:	429c      	cmp	r4, r3
 8012c6e:	d11b      	bne.n	8012ca8 <_fflush_r+0x58>
 8012c70:	686c      	ldr	r4, [r5, #4]
 8012c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d0ef      	beq.n	8012c5a <_fflush_r+0xa>
 8012c7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012c7c:	07d0      	lsls	r0, r2, #31
 8012c7e:	d404      	bmi.n	8012c8a <_fflush_r+0x3a>
 8012c80:	0599      	lsls	r1, r3, #22
 8012c82:	d402      	bmi.n	8012c8a <_fflush_r+0x3a>
 8012c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012c86:	f000 f915 	bl	8012eb4 <__retarget_lock_acquire_recursive>
 8012c8a:	4628      	mov	r0, r5
 8012c8c:	4621      	mov	r1, r4
 8012c8e:	f7ff ff59 	bl	8012b44 <__sflush_r>
 8012c92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012c94:	07da      	lsls	r2, r3, #31
 8012c96:	4605      	mov	r5, r0
 8012c98:	d4e0      	bmi.n	8012c5c <_fflush_r+0xc>
 8012c9a:	89a3      	ldrh	r3, [r4, #12]
 8012c9c:	059b      	lsls	r3, r3, #22
 8012c9e:	d4dd      	bmi.n	8012c5c <_fflush_r+0xc>
 8012ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012ca2:	f000 f908 	bl	8012eb6 <__retarget_lock_release_recursive>
 8012ca6:	e7d9      	b.n	8012c5c <_fflush_r+0xc>
 8012ca8:	4b05      	ldr	r3, [pc, #20]	; (8012cc0 <_fflush_r+0x70>)
 8012caa:	429c      	cmp	r4, r3
 8012cac:	d101      	bne.n	8012cb2 <_fflush_r+0x62>
 8012cae:	68ac      	ldr	r4, [r5, #8]
 8012cb0:	e7df      	b.n	8012c72 <_fflush_r+0x22>
 8012cb2:	4b04      	ldr	r3, [pc, #16]	; (8012cc4 <_fflush_r+0x74>)
 8012cb4:	429c      	cmp	r4, r3
 8012cb6:	bf08      	it	eq
 8012cb8:	68ec      	ldreq	r4, [r5, #12]
 8012cba:	e7da      	b.n	8012c72 <_fflush_r+0x22>
 8012cbc:	08015014 	.word	0x08015014
 8012cc0:	08015034 	.word	0x08015034
 8012cc4:	08014ff4 	.word	0x08014ff4

08012cc8 <std>:
 8012cc8:	2300      	movs	r3, #0
 8012cca:	b510      	push	{r4, lr}
 8012ccc:	4604      	mov	r4, r0
 8012cce:	e9c0 3300 	strd	r3, r3, [r0]
 8012cd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012cd6:	6083      	str	r3, [r0, #8]
 8012cd8:	8181      	strh	r1, [r0, #12]
 8012cda:	6643      	str	r3, [r0, #100]	; 0x64
 8012cdc:	81c2      	strh	r2, [r0, #14]
 8012cde:	6183      	str	r3, [r0, #24]
 8012ce0:	4619      	mov	r1, r3
 8012ce2:	2208      	movs	r2, #8
 8012ce4:	305c      	adds	r0, #92	; 0x5c
 8012ce6:	f7fd fdf3 	bl	80108d0 <memset>
 8012cea:	4b05      	ldr	r3, [pc, #20]	; (8012d00 <std+0x38>)
 8012cec:	6263      	str	r3, [r4, #36]	; 0x24
 8012cee:	4b05      	ldr	r3, [pc, #20]	; (8012d04 <std+0x3c>)
 8012cf0:	62a3      	str	r3, [r4, #40]	; 0x28
 8012cf2:	4b05      	ldr	r3, [pc, #20]	; (8012d08 <std+0x40>)
 8012cf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012cf6:	4b05      	ldr	r3, [pc, #20]	; (8012d0c <std+0x44>)
 8012cf8:	6224      	str	r4, [r4, #32]
 8012cfa:	6323      	str	r3, [r4, #48]	; 0x30
 8012cfc:	bd10      	pop	{r4, pc}
 8012cfe:	bf00      	nop
 8012d00:	08013009 	.word	0x08013009
 8012d04:	0801302b 	.word	0x0801302b
 8012d08:	08013063 	.word	0x08013063
 8012d0c:	08013087 	.word	0x08013087

08012d10 <_cleanup_r>:
 8012d10:	4901      	ldr	r1, [pc, #4]	; (8012d18 <_cleanup_r+0x8>)
 8012d12:	f000 b8af 	b.w	8012e74 <_fwalk_reent>
 8012d16:	bf00      	nop
 8012d18:	08012c51 	.word	0x08012c51

08012d1c <__sfmoreglue>:
 8012d1c:	b570      	push	{r4, r5, r6, lr}
 8012d1e:	1e4a      	subs	r2, r1, #1
 8012d20:	2568      	movs	r5, #104	; 0x68
 8012d22:	4355      	muls	r5, r2
 8012d24:	460e      	mov	r6, r1
 8012d26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012d2a:	f7ff fc23 	bl	8012574 <_malloc_r>
 8012d2e:	4604      	mov	r4, r0
 8012d30:	b140      	cbz	r0, 8012d44 <__sfmoreglue+0x28>
 8012d32:	2100      	movs	r1, #0
 8012d34:	e9c0 1600 	strd	r1, r6, [r0]
 8012d38:	300c      	adds	r0, #12
 8012d3a:	60a0      	str	r0, [r4, #8]
 8012d3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012d40:	f7fd fdc6 	bl	80108d0 <memset>
 8012d44:	4620      	mov	r0, r4
 8012d46:	bd70      	pop	{r4, r5, r6, pc}

08012d48 <__sfp_lock_acquire>:
 8012d48:	4801      	ldr	r0, [pc, #4]	; (8012d50 <__sfp_lock_acquire+0x8>)
 8012d4a:	f000 b8b3 	b.w	8012eb4 <__retarget_lock_acquire_recursive>
 8012d4e:	bf00      	nop
 8012d50:	24001348 	.word	0x24001348

08012d54 <__sfp_lock_release>:
 8012d54:	4801      	ldr	r0, [pc, #4]	; (8012d5c <__sfp_lock_release+0x8>)
 8012d56:	f000 b8ae 	b.w	8012eb6 <__retarget_lock_release_recursive>
 8012d5a:	bf00      	nop
 8012d5c:	24001348 	.word	0x24001348

08012d60 <__sinit_lock_acquire>:
 8012d60:	4801      	ldr	r0, [pc, #4]	; (8012d68 <__sinit_lock_acquire+0x8>)
 8012d62:	f000 b8a7 	b.w	8012eb4 <__retarget_lock_acquire_recursive>
 8012d66:	bf00      	nop
 8012d68:	24001343 	.word	0x24001343

08012d6c <__sinit_lock_release>:
 8012d6c:	4801      	ldr	r0, [pc, #4]	; (8012d74 <__sinit_lock_release+0x8>)
 8012d6e:	f000 b8a2 	b.w	8012eb6 <__retarget_lock_release_recursive>
 8012d72:	bf00      	nop
 8012d74:	24001343 	.word	0x24001343

08012d78 <__sinit>:
 8012d78:	b510      	push	{r4, lr}
 8012d7a:	4604      	mov	r4, r0
 8012d7c:	f7ff fff0 	bl	8012d60 <__sinit_lock_acquire>
 8012d80:	69a3      	ldr	r3, [r4, #24]
 8012d82:	b11b      	cbz	r3, 8012d8c <__sinit+0x14>
 8012d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d88:	f7ff bff0 	b.w	8012d6c <__sinit_lock_release>
 8012d8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012d90:	6523      	str	r3, [r4, #80]	; 0x50
 8012d92:	4b13      	ldr	r3, [pc, #76]	; (8012de0 <__sinit+0x68>)
 8012d94:	4a13      	ldr	r2, [pc, #76]	; (8012de4 <__sinit+0x6c>)
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	62a2      	str	r2, [r4, #40]	; 0x28
 8012d9a:	42a3      	cmp	r3, r4
 8012d9c:	bf04      	itt	eq
 8012d9e:	2301      	moveq	r3, #1
 8012da0:	61a3      	streq	r3, [r4, #24]
 8012da2:	4620      	mov	r0, r4
 8012da4:	f000 f820 	bl	8012de8 <__sfp>
 8012da8:	6060      	str	r0, [r4, #4]
 8012daa:	4620      	mov	r0, r4
 8012dac:	f000 f81c 	bl	8012de8 <__sfp>
 8012db0:	60a0      	str	r0, [r4, #8]
 8012db2:	4620      	mov	r0, r4
 8012db4:	f000 f818 	bl	8012de8 <__sfp>
 8012db8:	2200      	movs	r2, #0
 8012dba:	60e0      	str	r0, [r4, #12]
 8012dbc:	2104      	movs	r1, #4
 8012dbe:	6860      	ldr	r0, [r4, #4]
 8012dc0:	f7ff ff82 	bl	8012cc8 <std>
 8012dc4:	68a0      	ldr	r0, [r4, #8]
 8012dc6:	2201      	movs	r2, #1
 8012dc8:	2109      	movs	r1, #9
 8012dca:	f7ff ff7d 	bl	8012cc8 <std>
 8012dce:	68e0      	ldr	r0, [r4, #12]
 8012dd0:	2202      	movs	r2, #2
 8012dd2:	2112      	movs	r1, #18
 8012dd4:	f7ff ff78 	bl	8012cc8 <std>
 8012dd8:	2301      	movs	r3, #1
 8012dda:	61a3      	str	r3, [r4, #24]
 8012ddc:	e7d2      	b.n	8012d84 <__sinit+0xc>
 8012dde:	bf00      	nop
 8012de0:	08014c70 	.word	0x08014c70
 8012de4:	08012d11 	.word	0x08012d11

08012de8 <__sfp>:
 8012de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dea:	4607      	mov	r7, r0
 8012dec:	f7ff ffac 	bl	8012d48 <__sfp_lock_acquire>
 8012df0:	4b1e      	ldr	r3, [pc, #120]	; (8012e6c <__sfp+0x84>)
 8012df2:	681e      	ldr	r6, [r3, #0]
 8012df4:	69b3      	ldr	r3, [r6, #24]
 8012df6:	b913      	cbnz	r3, 8012dfe <__sfp+0x16>
 8012df8:	4630      	mov	r0, r6
 8012dfa:	f7ff ffbd 	bl	8012d78 <__sinit>
 8012dfe:	3648      	adds	r6, #72	; 0x48
 8012e00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012e04:	3b01      	subs	r3, #1
 8012e06:	d503      	bpl.n	8012e10 <__sfp+0x28>
 8012e08:	6833      	ldr	r3, [r6, #0]
 8012e0a:	b30b      	cbz	r3, 8012e50 <__sfp+0x68>
 8012e0c:	6836      	ldr	r6, [r6, #0]
 8012e0e:	e7f7      	b.n	8012e00 <__sfp+0x18>
 8012e10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012e14:	b9d5      	cbnz	r5, 8012e4c <__sfp+0x64>
 8012e16:	4b16      	ldr	r3, [pc, #88]	; (8012e70 <__sfp+0x88>)
 8012e18:	60e3      	str	r3, [r4, #12]
 8012e1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012e1e:	6665      	str	r5, [r4, #100]	; 0x64
 8012e20:	f000 f847 	bl	8012eb2 <__retarget_lock_init_recursive>
 8012e24:	f7ff ff96 	bl	8012d54 <__sfp_lock_release>
 8012e28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012e2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012e30:	6025      	str	r5, [r4, #0]
 8012e32:	61a5      	str	r5, [r4, #24]
 8012e34:	2208      	movs	r2, #8
 8012e36:	4629      	mov	r1, r5
 8012e38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012e3c:	f7fd fd48 	bl	80108d0 <memset>
 8012e40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012e44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012e48:	4620      	mov	r0, r4
 8012e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e4c:	3468      	adds	r4, #104	; 0x68
 8012e4e:	e7d9      	b.n	8012e04 <__sfp+0x1c>
 8012e50:	2104      	movs	r1, #4
 8012e52:	4638      	mov	r0, r7
 8012e54:	f7ff ff62 	bl	8012d1c <__sfmoreglue>
 8012e58:	4604      	mov	r4, r0
 8012e5a:	6030      	str	r0, [r6, #0]
 8012e5c:	2800      	cmp	r0, #0
 8012e5e:	d1d5      	bne.n	8012e0c <__sfp+0x24>
 8012e60:	f7ff ff78 	bl	8012d54 <__sfp_lock_release>
 8012e64:	230c      	movs	r3, #12
 8012e66:	603b      	str	r3, [r7, #0]
 8012e68:	e7ee      	b.n	8012e48 <__sfp+0x60>
 8012e6a:	bf00      	nop
 8012e6c:	08014c70 	.word	0x08014c70
 8012e70:	ffff0001 	.word	0xffff0001

08012e74 <_fwalk_reent>:
 8012e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e78:	4606      	mov	r6, r0
 8012e7a:	4688      	mov	r8, r1
 8012e7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012e80:	2700      	movs	r7, #0
 8012e82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012e86:	f1b9 0901 	subs.w	r9, r9, #1
 8012e8a:	d505      	bpl.n	8012e98 <_fwalk_reent+0x24>
 8012e8c:	6824      	ldr	r4, [r4, #0]
 8012e8e:	2c00      	cmp	r4, #0
 8012e90:	d1f7      	bne.n	8012e82 <_fwalk_reent+0xe>
 8012e92:	4638      	mov	r0, r7
 8012e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e98:	89ab      	ldrh	r3, [r5, #12]
 8012e9a:	2b01      	cmp	r3, #1
 8012e9c:	d907      	bls.n	8012eae <_fwalk_reent+0x3a>
 8012e9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012ea2:	3301      	adds	r3, #1
 8012ea4:	d003      	beq.n	8012eae <_fwalk_reent+0x3a>
 8012ea6:	4629      	mov	r1, r5
 8012ea8:	4630      	mov	r0, r6
 8012eaa:	47c0      	blx	r8
 8012eac:	4307      	orrs	r7, r0
 8012eae:	3568      	adds	r5, #104	; 0x68
 8012eb0:	e7e9      	b.n	8012e86 <_fwalk_reent+0x12>

08012eb2 <__retarget_lock_init_recursive>:
 8012eb2:	4770      	bx	lr

08012eb4 <__retarget_lock_acquire_recursive>:
 8012eb4:	4770      	bx	lr

08012eb6 <__retarget_lock_release_recursive>:
 8012eb6:	4770      	bx	lr

08012eb8 <__swhatbuf_r>:
 8012eb8:	b570      	push	{r4, r5, r6, lr}
 8012eba:	460e      	mov	r6, r1
 8012ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ec0:	2900      	cmp	r1, #0
 8012ec2:	b096      	sub	sp, #88	; 0x58
 8012ec4:	4614      	mov	r4, r2
 8012ec6:	461d      	mov	r5, r3
 8012ec8:	da07      	bge.n	8012eda <__swhatbuf_r+0x22>
 8012eca:	2300      	movs	r3, #0
 8012ecc:	602b      	str	r3, [r5, #0]
 8012ece:	89b3      	ldrh	r3, [r6, #12]
 8012ed0:	061a      	lsls	r2, r3, #24
 8012ed2:	d410      	bmi.n	8012ef6 <__swhatbuf_r+0x3e>
 8012ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012ed8:	e00e      	b.n	8012ef8 <__swhatbuf_r+0x40>
 8012eda:	466a      	mov	r2, sp
 8012edc:	f000 f8fa 	bl	80130d4 <_fstat_r>
 8012ee0:	2800      	cmp	r0, #0
 8012ee2:	dbf2      	blt.n	8012eca <__swhatbuf_r+0x12>
 8012ee4:	9a01      	ldr	r2, [sp, #4]
 8012ee6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012eea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012eee:	425a      	negs	r2, r3
 8012ef0:	415a      	adcs	r2, r3
 8012ef2:	602a      	str	r2, [r5, #0]
 8012ef4:	e7ee      	b.n	8012ed4 <__swhatbuf_r+0x1c>
 8012ef6:	2340      	movs	r3, #64	; 0x40
 8012ef8:	2000      	movs	r0, #0
 8012efa:	6023      	str	r3, [r4, #0]
 8012efc:	b016      	add	sp, #88	; 0x58
 8012efe:	bd70      	pop	{r4, r5, r6, pc}

08012f00 <__smakebuf_r>:
 8012f00:	898b      	ldrh	r3, [r1, #12]
 8012f02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012f04:	079d      	lsls	r5, r3, #30
 8012f06:	4606      	mov	r6, r0
 8012f08:	460c      	mov	r4, r1
 8012f0a:	d507      	bpl.n	8012f1c <__smakebuf_r+0x1c>
 8012f0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012f10:	6023      	str	r3, [r4, #0]
 8012f12:	6123      	str	r3, [r4, #16]
 8012f14:	2301      	movs	r3, #1
 8012f16:	6163      	str	r3, [r4, #20]
 8012f18:	b002      	add	sp, #8
 8012f1a:	bd70      	pop	{r4, r5, r6, pc}
 8012f1c:	ab01      	add	r3, sp, #4
 8012f1e:	466a      	mov	r2, sp
 8012f20:	f7ff ffca 	bl	8012eb8 <__swhatbuf_r>
 8012f24:	9900      	ldr	r1, [sp, #0]
 8012f26:	4605      	mov	r5, r0
 8012f28:	4630      	mov	r0, r6
 8012f2a:	f7ff fb23 	bl	8012574 <_malloc_r>
 8012f2e:	b948      	cbnz	r0, 8012f44 <__smakebuf_r+0x44>
 8012f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f34:	059a      	lsls	r2, r3, #22
 8012f36:	d4ef      	bmi.n	8012f18 <__smakebuf_r+0x18>
 8012f38:	f023 0303 	bic.w	r3, r3, #3
 8012f3c:	f043 0302 	orr.w	r3, r3, #2
 8012f40:	81a3      	strh	r3, [r4, #12]
 8012f42:	e7e3      	b.n	8012f0c <__smakebuf_r+0xc>
 8012f44:	4b0d      	ldr	r3, [pc, #52]	; (8012f7c <__smakebuf_r+0x7c>)
 8012f46:	62b3      	str	r3, [r6, #40]	; 0x28
 8012f48:	89a3      	ldrh	r3, [r4, #12]
 8012f4a:	6020      	str	r0, [r4, #0]
 8012f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f50:	81a3      	strh	r3, [r4, #12]
 8012f52:	9b00      	ldr	r3, [sp, #0]
 8012f54:	6163      	str	r3, [r4, #20]
 8012f56:	9b01      	ldr	r3, [sp, #4]
 8012f58:	6120      	str	r0, [r4, #16]
 8012f5a:	b15b      	cbz	r3, 8012f74 <__smakebuf_r+0x74>
 8012f5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012f60:	4630      	mov	r0, r6
 8012f62:	f000 f8c9 	bl	80130f8 <_isatty_r>
 8012f66:	b128      	cbz	r0, 8012f74 <__smakebuf_r+0x74>
 8012f68:	89a3      	ldrh	r3, [r4, #12]
 8012f6a:	f023 0303 	bic.w	r3, r3, #3
 8012f6e:	f043 0301 	orr.w	r3, r3, #1
 8012f72:	81a3      	strh	r3, [r4, #12]
 8012f74:	89a0      	ldrh	r0, [r4, #12]
 8012f76:	4305      	orrs	r5, r0
 8012f78:	81a5      	strh	r5, [r4, #12]
 8012f7a:	e7cd      	b.n	8012f18 <__smakebuf_r+0x18>
 8012f7c:	08012d11 	.word	0x08012d11

08012f80 <_raise_r>:
 8012f80:	291f      	cmp	r1, #31
 8012f82:	b538      	push	{r3, r4, r5, lr}
 8012f84:	4604      	mov	r4, r0
 8012f86:	460d      	mov	r5, r1
 8012f88:	d904      	bls.n	8012f94 <_raise_r+0x14>
 8012f8a:	2316      	movs	r3, #22
 8012f8c:	6003      	str	r3, [r0, #0]
 8012f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8012f92:	bd38      	pop	{r3, r4, r5, pc}
 8012f94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012f96:	b112      	cbz	r2, 8012f9e <_raise_r+0x1e>
 8012f98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012f9c:	b94b      	cbnz	r3, 8012fb2 <_raise_r+0x32>
 8012f9e:	4620      	mov	r0, r4
 8012fa0:	f000 f830 	bl	8013004 <_getpid_r>
 8012fa4:	462a      	mov	r2, r5
 8012fa6:	4601      	mov	r1, r0
 8012fa8:	4620      	mov	r0, r4
 8012faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012fae:	f000 b817 	b.w	8012fe0 <_kill_r>
 8012fb2:	2b01      	cmp	r3, #1
 8012fb4:	d00a      	beq.n	8012fcc <_raise_r+0x4c>
 8012fb6:	1c59      	adds	r1, r3, #1
 8012fb8:	d103      	bne.n	8012fc2 <_raise_r+0x42>
 8012fba:	2316      	movs	r3, #22
 8012fbc:	6003      	str	r3, [r0, #0]
 8012fbe:	2001      	movs	r0, #1
 8012fc0:	e7e7      	b.n	8012f92 <_raise_r+0x12>
 8012fc2:	2400      	movs	r4, #0
 8012fc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012fc8:	4628      	mov	r0, r5
 8012fca:	4798      	blx	r3
 8012fcc:	2000      	movs	r0, #0
 8012fce:	e7e0      	b.n	8012f92 <_raise_r+0x12>

08012fd0 <raise>:
 8012fd0:	4b02      	ldr	r3, [pc, #8]	; (8012fdc <raise+0xc>)
 8012fd2:	4601      	mov	r1, r0
 8012fd4:	6818      	ldr	r0, [r3, #0]
 8012fd6:	f7ff bfd3 	b.w	8012f80 <_raise_r>
 8012fda:	bf00      	nop
 8012fdc:	24000024 	.word	0x24000024

08012fe0 <_kill_r>:
 8012fe0:	b538      	push	{r3, r4, r5, lr}
 8012fe2:	4d07      	ldr	r5, [pc, #28]	; (8013000 <_kill_r+0x20>)
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	4604      	mov	r4, r0
 8012fe8:	4608      	mov	r0, r1
 8012fea:	4611      	mov	r1, r2
 8012fec:	602b      	str	r3, [r5, #0]
 8012fee:	f7f1 fa89 	bl	8004504 <_kill>
 8012ff2:	1c43      	adds	r3, r0, #1
 8012ff4:	d102      	bne.n	8012ffc <_kill_r+0x1c>
 8012ff6:	682b      	ldr	r3, [r5, #0]
 8012ff8:	b103      	cbz	r3, 8012ffc <_kill_r+0x1c>
 8012ffa:	6023      	str	r3, [r4, #0]
 8012ffc:	bd38      	pop	{r3, r4, r5, pc}
 8012ffe:	bf00      	nop
 8013000:	2400133c 	.word	0x2400133c

08013004 <_getpid_r>:
 8013004:	f7f1 ba76 	b.w	80044f4 <_getpid>

08013008 <__sread>:
 8013008:	b510      	push	{r4, lr}
 801300a:	460c      	mov	r4, r1
 801300c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013010:	f000 f894 	bl	801313c <_read_r>
 8013014:	2800      	cmp	r0, #0
 8013016:	bfab      	itete	ge
 8013018:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801301a:	89a3      	ldrhlt	r3, [r4, #12]
 801301c:	181b      	addge	r3, r3, r0
 801301e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013022:	bfac      	ite	ge
 8013024:	6563      	strge	r3, [r4, #84]	; 0x54
 8013026:	81a3      	strhlt	r3, [r4, #12]
 8013028:	bd10      	pop	{r4, pc}

0801302a <__swrite>:
 801302a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801302e:	461f      	mov	r7, r3
 8013030:	898b      	ldrh	r3, [r1, #12]
 8013032:	05db      	lsls	r3, r3, #23
 8013034:	4605      	mov	r5, r0
 8013036:	460c      	mov	r4, r1
 8013038:	4616      	mov	r6, r2
 801303a:	d505      	bpl.n	8013048 <__swrite+0x1e>
 801303c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013040:	2302      	movs	r3, #2
 8013042:	2200      	movs	r2, #0
 8013044:	f000 f868 	bl	8013118 <_lseek_r>
 8013048:	89a3      	ldrh	r3, [r4, #12]
 801304a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801304e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013052:	81a3      	strh	r3, [r4, #12]
 8013054:	4632      	mov	r2, r6
 8013056:	463b      	mov	r3, r7
 8013058:	4628      	mov	r0, r5
 801305a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801305e:	f000 b817 	b.w	8013090 <_write_r>

08013062 <__sseek>:
 8013062:	b510      	push	{r4, lr}
 8013064:	460c      	mov	r4, r1
 8013066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801306a:	f000 f855 	bl	8013118 <_lseek_r>
 801306e:	1c43      	adds	r3, r0, #1
 8013070:	89a3      	ldrh	r3, [r4, #12]
 8013072:	bf15      	itete	ne
 8013074:	6560      	strne	r0, [r4, #84]	; 0x54
 8013076:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801307a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801307e:	81a3      	strheq	r3, [r4, #12]
 8013080:	bf18      	it	ne
 8013082:	81a3      	strhne	r3, [r4, #12]
 8013084:	bd10      	pop	{r4, pc}

08013086 <__sclose>:
 8013086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801308a:	f000 b813 	b.w	80130b4 <_close_r>
	...

08013090 <_write_r>:
 8013090:	b538      	push	{r3, r4, r5, lr}
 8013092:	4d07      	ldr	r5, [pc, #28]	; (80130b0 <_write_r+0x20>)
 8013094:	4604      	mov	r4, r0
 8013096:	4608      	mov	r0, r1
 8013098:	4611      	mov	r1, r2
 801309a:	2200      	movs	r2, #0
 801309c:	602a      	str	r2, [r5, #0]
 801309e:	461a      	mov	r2, r3
 80130a0:	f7f1 fa67 	bl	8004572 <_write>
 80130a4:	1c43      	adds	r3, r0, #1
 80130a6:	d102      	bne.n	80130ae <_write_r+0x1e>
 80130a8:	682b      	ldr	r3, [r5, #0]
 80130aa:	b103      	cbz	r3, 80130ae <_write_r+0x1e>
 80130ac:	6023      	str	r3, [r4, #0]
 80130ae:	bd38      	pop	{r3, r4, r5, pc}
 80130b0:	2400133c 	.word	0x2400133c

080130b4 <_close_r>:
 80130b4:	b538      	push	{r3, r4, r5, lr}
 80130b6:	4d06      	ldr	r5, [pc, #24]	; (80130d0 <_close_r+0x1c>)
 80130b8:	2300      	movs	r3, #0
 80130ba:	4604      	mov	r4, r0
 80130bc:	4608      	mov	r0, r1
 80130be:	602b      	str	r3, [r5, #0]
 80130c0:	f7f1 fa73 	bl	80045aa <_close>
 80130c4:	1c43      	adds	r3, r0, #1
 80130c6:	d102      	bne.n	80130ce <_close_r+0x1a>
 80130c8:	682b      	ldr	r3, [r5, #0]
 80130ca:	b103      	cbz	r3, 80130ce <_close_r+0x1a>
 80130cc:	6023      	str	r3, [r4, #0]
 80130ce:	bd38      	pop	{r3, r4, r5, pc}
 80130d0:	2400133c 	.word	0x2400133c

080130d4 <_fstat_r>:
 80130d4:	b538      	push	{r3, r4, r5, lr}
 80130d6:	4d07      	ldr	r5, [pc, #28]	; (80130f4 <_fstat_r+0x20>)
 80130d8:	2300      	movs	r3, #0
 80130da:	4604      	mov	r4, r0
 80130dc:	4608      	mov	r0, r1
 80130de:	4611      	mov	r1, r2
 80130e0:	602b      	str	r3, [r5, #0]
 80130e2:	f7f1 fa6e 	bl	80045c2 <_fstat>
 80130e6:	1c43      	adds	r3, r0, #1
 80130e8:	d102      	bne.n	80130f0 <_fstat_r+0x1c>
 80130ea:	682b      	ldr	r3, [r5, #0]
 80130ec:	b103      	cbz	r3, 80130f0 <_fstat_r+0x1c>
 80130ee:	6023      	str	r3, [r4, #0]
 80130f0:	bd38      	pop	{r3, r4, r5, pc}
 80130f2:	bf00      	nop
 80130f4:	2400133c 	.word	0x2400133c

080130f8 <_isatty_r>:
 80130f8:	b538      	push	{r3, r4, r5, lr}
 80130fa:	4d06      	ldr	r5, [pc, #24]	; (8013114 <_isatty_r+0x1c>)
 80130fc:	2300      	movs	r3, #0
 80130fe:	4604      	mov	r4, r0
 8013100:	4608      	mov	r0, r1
 8013102:	602b      	str	r3, [r5, #0]
 8013104:	f7f1 fa6d 	bl	80045e2 <_isatty>
 8013108:	1c43      	adds	r3, r0, #1
 801310a:	d102      	bne.n	8013112 <_isatty_r+0x1a>
 801310c:	682b      	ldr	r3, [r5, #0]
 801310e:	b103      	cbz	r3, 8013112 <_isatty_r+0x1a>
 8013110:	6023      	str	r3, [r4, #0]
 8013112:	bd38      	pop	{r3, r4, r5, pc}
 8013114:	2400133c 	.word	0x2400133c

08013118 <_lseek_r>:
 8013118:	b538      	push	{r3, r4, r5, lr}
 801311a:	4d07      	ldr	r5, [pc, #28]	; (8013138 <_lseek_r+0x20>)
 801311c:	4604      	mov	r4, r0
 801311e:	4608      	mov	r0, r1
 8013120:	4611      	mov	r1, r2
 8013122:	2200      	movs	r2, #0
 8013124:	602a      	str	r2, [r5, #0]
 8013126:	461a      	mov	r2, r3
 8013128:	f7f1 fa66 	bl	80045f8 <_lseek>
 801312c:	1c43      	adds	r3, r0, #1
 801312e:	d102      	bne.n	8013136 <_lseek_r+0x1e>
 8013130:	682b      	ldr	r3, [r5, #0]
 8013132:	b103      	cbz	r3, 8013136 <_lseek_r+0x1e>
 8013134:	6023      	str	r3, [r4, #0]
 8013136:	bd38      	pop	{r3, r4, r5, pc}
 8013138:	2400133c 	.word	0x2400133c

0801313c <_read_r>:
 801313c:	b538      	push	{r3, r4, r5, lr}
 801313e:	4d07      	ldr	r5, [pc, #28]	; (801315c <_read_r+0x20>)
 8013140:	4604      	mov	r4, r0
 8013142:	4608      	mov	r0, r1
 8013144:	4611      	mov	r1, r2
 8013146:	2200      	movs	r2, #0
 8013148:	602a      	str	r2, [r5, #0]
 801314a:	461a      	mov	r2, r3
 801314c:	f7f1 f9f4 	bl	8004538 <_read>
 8013150:	1c43      	adds	r3, r0, #1
 8013152:	d102      	bne.n	801315a <_read_r+0x1e>
 8013154:	682b      	ldr	r3, [r5, #0]
 8013156:	b103      	cbz	r3, 801315a <_read_r+0x1e>
 8013158:	6023      	str	r3, [r4, #0]
 801315a:	bd38      	pop	{r3, r4, r5, pc}
 801315c:	2400133c 	.word	0x2400133c

08013160 <_init>:
 8013160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013162:	bf00      	nop
 8013164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013166:	bc08      	pop	{r3}
 8013168:	469e      	mov	lr, r3
 801316a:	4770      	bx	lr

0801316c <_fini>:
 801316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801316e:	bf00      	nop
 8013170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013172:	bc08      	pop	{r3}
 8013174:	469e      	mov	lr, r3
 8013176:	4770      	bx	lr
