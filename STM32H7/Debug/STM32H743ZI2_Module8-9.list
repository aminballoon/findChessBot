
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014910  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f44  08014bb0  08014bb0  00024bb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016af4  08016af4  00026af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08016afc  08016afc  00026afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08016b04  08016b04  00026b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000410  24000000  08016b0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000012f4  24000410  08016f1c  00030410  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001704  08016f1c  00031704  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030410  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003f443  00000000  00000000  0003043e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005c24  00000000  00000000  0006f881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001760  00000000  00000000  000754a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000015a8  00000000  00000000  00076c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e5a1  00000000  00000000  000781b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023d6d  00000000  00000000  000b6751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016dfbd  00000000  00000000  000da4be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0024847b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000073b8  00000000  00000000  002484d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000410 	.word	0x24000410
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014b98 	.word	0x08014b98

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000414 	.word	0x24000414
 80002dc:	08014b98 	.word	0x08014b98

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	4613      	mov	r3, r2
 8000694:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	601a      	str	r2, [r3, #0]
	this->address = _address;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	729a      	strb	r2, [r3, #10]
}
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4618      	mov	r0, r3
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

}
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f103 010a 	add.w	r1, r3, #10
 80006d8:	2364      	movs	r3, #100	; 0x64
 80006da:	2201      	movs	r2, #1
 80006dc:	f00e f8cc 	bl	800e878 <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f103 010c 	add.w	r1, r3, #12
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	2202      	movs	r2, #2
 80006ee:	f00e f959 	bl	800e9a4 <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	899b      	ldrh	r3, [r3, #12]
 80006f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	bf14      	ite	ne
 80006fe:	2301      	movne	r3, #1
 8000700:	2300      	moveq	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	899b      	ldrh	r3, [r3, #12]
 800070e:	b21b      	sxth	r3, r3
 8000710:	b29b      	uxth	r3, r3
 8000712:	0bdb      	lsrs	r3, r3, #15
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	765a      	strb	r2, [r3, #25]
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	899b      	ldrh	r3, [r3, #12]
 8000730:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000734:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	899b      	ldrh	r3, [r3, #12]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	105b      	asrs	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000750:	2300      	movs	r3, #0
 8000752:	737b      	strb	r3, [r7, #13]
 8000754:	7b7b      	ldrb	r3, [r7, #13]
 8000756:	2b05      	cmp	r3, #5
 8000758:	d820      	bhi.n	800079c <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	899b      	ldrh	r3, [r3, #12]
 800075e:	109b      	asrs	r3, r3, #2
 8000760:	b29a      	uxth	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	899b      	ldrh	r3, [r3, #12]
 800076a:	b25b      	sxtb	r3, r3
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	b25a      	sxtb	r2, r3
 8000772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000776:	4053      	eors	r3, r2
 8000778:	b25b      	sxtb	r3, r3
 800077a:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	899b      	ldrh	r3, [r3, #12]
 8000780:	105b      	asrs	r3, r3, #1
 8000782:	b25b      	sxtb	r3, r3
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	b25a      	sxtb	r2, r3
 800078a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800078e:	4053      	eors	r3, r2
 8000790:	b25b      	sxtb	r3, r3
 8000792:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	3301      	adds	r3, #1
 8000798:	737b      	strb	r3, [r7, #13]
 800079a:	e7db      	b.n	8000754 <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	bf0c      	ite	eq
 80007a2:	2301      	moveq	r3, #1
 80007a4:	2300      	movne	r3, #0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	bf0c      	ite	eq
 80007b0:	2301      	moveq	r3, #1
 80007b2:	2300      	movne	r3, #0
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7e1b      	ldrb	r3, [r3, #24]
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d10a      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7e5b      	ldrb	r3, [r3, #25]
 80007c6:	7bba      	ldrb	r2, [r7, #14]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d105      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 80007cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e003      	b.n	80007e0 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
	}
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue() {
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	135b      	asrs	r3, r3, #13
			+ (this->raw_value & 0x3FFF)) * -1;
 80007fe:	b29b      	uxth	r3, r3
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	b29b      	uxth	r3, r3
 8000806:	461a      	mov	r2, r3
 8000808:	0392      	lsls	r2, r2, #14
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	b29a      	uxth	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000814:	b29b      	uxth	r3, r3
 8000816:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800081a:	b29b      	uxth	r3, r3
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	b21b      	sxth	r3, r3
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
	...

08000830 <_ZN5AMT216unwarpEv>:
void AMT21::unwarp() {
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	int32_t dPulse = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
	if (this->raw_value - this->prev_raw_value > 8191) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000842:	461a      	mov	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000850:	db0b      	blt.n	800086a <_ZN5AMT216unwarpEv+0x3a>
		dPulse = -(16383 - (this->raw_value - this->prev_raw_value));
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000858:	461a      	mov	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000860:	1ad2      	subs	r2, r2, r3
 8000862:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <_ZN5AMT216unwarpEv+0xa0>)
 8000864:	4413      	add	r3, r2
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	e020      	b.n	80008ac <_ZN5AMT216unwarpEv+0x7c>
	} else if (this->raw_value - this->prev_raw_value < -8191) {
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000870:	461a      	mov	r2, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800087e:	dc0c      	bgt.n	800089a <_ZN5AMT216unwarpEv+0x6a>
		dPulse = 16383 - (this->prev_raw_value - this->raw_value);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000886:	461a      	mov	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800088e:	1ad2      	subs	r2, r2, r3
 8000890:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000894:	1a9b      	subs	r3, r3, r2
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	e008      	b.n	80008ac <_ZN5AMT216unwarpEv+0x7c>
	} else {
		dPulse = this->prev_raw_value - this->raw_value;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80008a0:	461a      	mov	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	60fb      	str	r3, [r7, #12]
	}
	this->prev_raw_value = this->raw_value;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	821a      	strh	r2, [r3, #16]
	this->unwarp_value = this->unwarp_value + dPulse;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	695a      	ldr	r2, [r3, #20]
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	441a      	add	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	615a      	str	r2, [r3, #20]
}
 80008c2:	bf00      	nop
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	ffffc001 	.word	0xffffc001

080008d4 <_ZN5AMT2113setUnwarpZeroEv>:
void AMT21::setUnwarpZero(){
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	this->unwarp_value = 0;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <_ZN5AMT2114getUnwarpValueEv>:
int32_t AMT21::getUnwarpValue() {
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
	return this->unwarp_value;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	695b      	ldr	r3, [r3, #20]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	ed87 0a01 	vstr	s0, [r7, #4]
 8000910:	edc7 0a00 	vstr	s1, [r7]
 8000914:	edd7 0a00 	vldr	s1, [r7]
 8000918:	ed97 0a01 	vldr	s0, [r7, #4]
 800091c:	f010 fca8 	bl	8011270 <atan2f>
 8000920:	eef0 7a40 	vmov.f32	s15, s0
 8000924:	eeb0 0a67 	vmov.f32	s0, s15
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	ed87 0a01 	vstr	s0, [r7, #4]
 8000938:	ed97 0a01 	vldr	s0, [r7, #4]
 800093c:	f010 fc9a 	bl	8011274 <sqrtf>
 8000940:	eef0 7a40 	vmov.f32	s15, s0
 8000944:	eeb0 0a67 	vmov.f32	s0, s15
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <_ZN10RobotJointC1Ev>:
 *      Author: SakuranohanaTH
 */

#include "RobotJoint.h"

RobotJoint::RobotJoint() {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a32      	ldr	r2, [pc, #200]	; (8000a24 <_ZN10RobotJointC1Ev+0xd4>)
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	edd3 7a00 	vldr	s15, [r3]
 8000964:	2002      	movs	r0, #2
 8000966:	eeb0 0a67 	vmov.f32	s0, s15
 800096a:	f000 fecd 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800096e:	eeb0 7b40 	vmov.f64	d7, d0
 8000972:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	edc3 7a01 	vstr	s15, [r3, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	edd3 7a00 	vldr	s15, [r3]
 8000982:	2003      	movs	r0, #3
 8000984:	eeb0 0a67 	vmov.f32	s0, s15
 8000988:	f000 febe 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800098c:	eeb0 7b40 	vmov.f64	d7, d0
 8000990:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	edc3 7a02 	vstr	s15, [r3, #8]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	edd3 7a00 	vldr	s15, [r3]
 80009a0:	2004      	movs	r0, #4
 80009a2:	eeb0 0a67 	vmov.f32	s0, s15
 80009a6:	f000 feaf 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80009aa:	eeb0 7b40 	vmov.f64	d7, d0
 80009ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	edc3 7a03 	vstr	s15, [r3, #12]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f04f 0200 	mov.w	r2, #0
 80009be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f04f 0200 	mov.w	r2, #0
 80009c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80009d2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f04f 0200 	mov.w	r2, #0
 80009dc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80009e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f04f 0200 	mov.w	r2, #0
 80009f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f04f 0200 	mov.w	r2, #0
 80009fa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f04f 0200 	mov.w	r2, #0
 8000a04:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <_ZN10RobotJointC1Ev+0xd8>)
 8000a0c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <_ZN10RobotJointC1Ev+0xd4>)
 8000a14:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

}
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	3a83126f 	.word	0x3a83126f
 8000a28:	3dcccccd 	.word	0x3dcccccd

08000a2c <_ZN10RobotJointD1Ev>:
RobotJoint::~RobotJoint() {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]

}
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	0000      	movs	r0, r0
 8000a44:	0000      	movs	r0, r0
	...

08000a48 <_ZN10RobotJoint9UpdateIVKEffffffff>:
void RobotJoint::UpdateIVK(float _q1, float _q2, float _q3, float _q4, float Vx,
		float Vy, float Vz, float Wz) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b090      	sub	sp, #64	; 0x40
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6278      	str	r0, [r7, #36]	; 0x24
 8000a50:	ed87 0a08 	vstr	s0, [r7, #32]
 8000a54:	edc7 0a07 	vstr	s1, [r7, #28]
 8000a58:	ed87 1a06 	vstr	s2, [r7, #24]
 8000a5c:	edc7 1a05 	vstr	s3, [r7, #20]
 8000a60:	ed87 2a04 	vstr	s4, [r7, #16]
 8000a64:	edc7 2a03 	vstr	s5, [r7, #12]
 8000a68:	ed87 3a02 	vstr	s6, [r7, #8]
 8000a6c:	edc7 3a01 	vstr	s7, [r7, #4]
	float S13 = sin((_q1 + _q3)/1000.0);
 8000a70:	ed97 7a08 	vldr	s14, [r7, #32]
 8000a74:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a80:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 8000c80 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000a84:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000a88:	eeb0 0b46 	vmov.f64	d0, d6
 8000a8c:	f010 fba8 	bl	80111e0 <sin>
 8000a90:	eeb0 7b40 	vmov.f64	d7, d0
 8000a94:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a98:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float C13 = cos((_q1 + _q3)/1000.0);
 8000a9c:	ed97 7a08 	vldr	s14, [r7, #32]
 8000aa0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aa8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aac:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8000c80 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000ab0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000ab4:	eeb0 0b46 	vmov.f64	d0, d6
 8000ab8:	f010 fb4a 	bl	8011150 <cos>
 8000abc:	eeb0 7b40 	vmov.f64	d7, d0
 8000ac0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ac4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float S3 = sin(_q3/1000.0);
 8000ac8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000acc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ad0:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8000c80 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000ad4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000ad8:	eeb0 0b46 	vmov.f64	d0, d6
 8000adc:	f010 fb80 	bl	80111e0 <sin>
 8000ae0:	eeb0 7b40 	vmov.f64	d7, d0
 8000ae4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ae8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S1 = sin(_q1/1000.0);
 8000aec:	edd7 7a08 	vldr	s15, [r7, #32]
 8000af0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000af4:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8000c80 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000af8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000afc:	eeb0 0b46 	vmov.f64	d0, d6
 8000b00:	f010 fb6e 	bl	80111e0 <sin>
 8000b04:	eeb0 7b40 	vmov.f64	d7, d0
 8000b08:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b0c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float C1 = cos(_q1/1000.0);
 8000b10:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b18:	ed9f 5b59 	vldr	d5, [pc, #356]	; 8000c80 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000b1c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000b20:	eeb0 0b46 	vmov.f64	d0, d6
 8000b24:	f010 fb14 	bl	8011150 <cos>
 8000b28:	eeb0 7b40 	vmov.f64	d7, d0
 8000b2c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b30:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float L3S3 = this->L3 * S3;
 8000b34:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000b38:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8000c88 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000b3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b40:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	this->w_q1 = ((Vx * C13 + Vy * S13) / (S3 * this->L12)) * 1000.0;
 8000b44:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b48:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000b4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b50:	edd7 6a03 	vldr	s13, [r7, #12]
 8000b54:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b5c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000b60:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000b64:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000c8c <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000b68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b70:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000c90 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	this->w_q2 = Vz * 1000.0;
 8000b7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b82:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000c90 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000b86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000b90:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000b94:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000c88 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000b98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b9c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000ba0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8000c94 <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000ba4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ba8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000bb0:	eddf 6a39 	vldr	s13, [pc, #228]	; 8000c98 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000bb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000bb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bc4:	eef1 6a67 	vneg.f32	s13, s15
			/ (L3S3 * this->L12)
 8000bc8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000bcc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000c8c <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000bd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000bd8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000bdc:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000c88 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000be0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000be4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000be8:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 8000c94 <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000bec:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000bf0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000bf4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000bf8:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8000c98 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000bfc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000c00:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000c04:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c08:	ee26 6aa7 	vmul.f32	s12, s13, s15
					/ (L3S3 * this->L12)) * 1000.0;
 8000c0c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000c10:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000c8c <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000c14:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000c18:	eec6 7a26 	vdiv.f32	s15, s12, s13
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000c20:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000c90 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000c24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	this->w_q4 = ((Vx * C1 + Vy * S1 + this->L3 * Wz * S3) / (L3S3)) * 1000.0;
 8000c2e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c32:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000c36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c3a:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c3e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c4e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000c88 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000c52:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000c56:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c5e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000c62:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c6a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000c90 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c74:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
}
 8000c78:	bf00      	nop
 8000c7a:	3740      	adds	r7, #64	; 0x40
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	00000000 	.word	0x00000000
 8000c84:	408f4000 	.word	0x408f4000
 8000c88:	439d8000 	.word	0x439d8000
 8000c8c:	43bfa000 	.word	0x43bfa000
 8000c90:	447a0000 	.word	0x447a0000
 8000c94:	41540000 	.word	0x41540000
 8000c98:	43b90000 	.word	0x43b90000

08000c9c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>:
void RobotJoint::UpdateQuinticCoff(float T, float Start_pos, float Final_pos,
		float Start_velocity, float Final_velocity, float Start_acceleration,
		float Final_acceleration) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	b091      	sub	sp, #68	; 0x44
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	61f8      	str	r0, [r7, #28]
 8000ca4:	ed87 0a06 	vstr	s0, [r7, #24]
 8000ca8:	edc7 0a05 	vstr	s1, [r7, #20]
 8000cac:	ed87 1a04 	vstr	s2, [r7, #16]
 8000cb0:	edc7 1a03 	vstr	s3, [r7, #12]
 8000cb4:	ed87 2a02 	vstr	s4, [r7, #8]
 8000cb8:	edc7 2a01 	vstr	s5, [r7, #4]
 8000cbc:	ed87 3a00 	vstr	s6, [r7]
	this->C0 = Start_pos;
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	this->C1 = Start_velocity;
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	this->C2 = Start_acceleration / 2.0;
 8000cd0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000cd4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000cd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

	const float A = Final_pos
			- (Start_pos + (Start_velocity * T)
 8000ce2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ce6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cee:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cf2:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ (Start_acceleration * T * T / 2));
 8000cf6:	edd7 6a01 	vldr	s13, [r7, #4]
 8000cfa:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cfe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000d02:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d06:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000d0a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000d0e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000d12:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float A = Final_pos
 8000d16:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d1e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	const float B = Final_velocity
			- (Start_velocity + (Start_acceleration * T));
 8000d22:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d26:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d32:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float B = Final_velocity
 8000d36:	ed97 7a02 	vldr	s14, [r7, #8]
 8000d3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d3e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	const float C = Final_acceleration - Start_acceleration;
 8000d42:	ed97 7a00 	vldr	s14, [r7]
 8000d46:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d4e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	const float T2 = T * T;
 8000d52:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d56:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d5a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	const float T3 = T * T * T;
 8000d5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d66:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d6e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	const float T4 = T * T * T * T;
 8000d72:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d76:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000d7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d82:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d8a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	const float T5 = T * T * T * T * T;
 8000d8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d92:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000d96:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000da6:	ed97 7a06 	vldr	s14, [r7, #24]
 8000daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	this->C3 = (10.0 * A / T3) - (4.0 * B / T2) + (C / (2.0 * T));
 8000db2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000db6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000dbe:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000dc2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000dc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dca:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000dce:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000dd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dd6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000dda:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000dde:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000de2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000de6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000dea:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000dee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000df2:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000df6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000dfa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dfe:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000e02:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e0a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	this->C4 = (-15.0 * A / T4) + (7.0 * B / T3) - (C / T2);
 8000e14:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000e18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e1c:	eeba 6b0e 	vmov.f64	d6, #174	; 0xc1700000 -15.0
 8000e20:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000e24:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000e28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e2c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e30:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000e34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e38:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8000e3c:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000e40:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000e44:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000e48:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e4c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e50:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8000e54:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000e58:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8000e5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e60:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000e64:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	this->C5 = (6.0 * A / T5) - (3.0 * B / T4) + (C / (2.0 * T3));
 8000e6e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000e72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e76:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8000e7a:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000e7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e86:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e8a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000e8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e92:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000e96:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000e9a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000e9e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000ea2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000ea6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000eaa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000eae:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000eb2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000eb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eba:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000ebe:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000ec2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ec6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	this->T = T;
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

}
 8000ed8:	bf00      	nop
 8000eda:	3744      	adds	r7, #68	; 0x44
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <_ZN10RobotJoint13KalmanFillterEf>:
void RobotJoint::KalmanFillter(float theta_k) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	ed2d 8b08 	vpush	{d8-d11}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	ed87 0a00 	vstr	s0, [r7]
	float X1 = this->X11;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = this->X21;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000f02:	623b      	str	r3, [r7, #32]
	float P11 = this->p11;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000f0a:	61fb      	str	r3, [r7, #28]
	float P12 = this->p12;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000f12:	61bb      	str	r3, [r7, #24]
	float P21 = this->p21;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000f1a:	617b      	str	r3, [r7, #20]
	float P22 = this->p22;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000f22:	613b      	str	r3, [r7, #16]
	float Q = this->Q;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000f2a:	60fb      	str	r3, [r7, #12]
	float R = this->R;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000f32:	60bb      	str	r3, [r7, #8]

	this->X11 = X1 + (X2 * this->dt)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	ed93 7a00 	vldr	s14, [r3]
 8000f3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f42:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f4a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- ((X1 - theta_k + X2 * this->dt)
 8000f4e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000f52:	edd7 7a00 	vldr	s15, [r7]
 8000f56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	edd3 6a00 	vldr	s13, [r3]
 8000f60:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	ed93 7a00 	vldr	s14, [r3]
 8000f76:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f86:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000f8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f8e:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	edd3 7a00 	vldr	s15, [r3]
 8000f98:	2004      	movs	r0, #4
 8000f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f9e:	f000 fbb3 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000fa2:	eeb0 7b40 	vmov.f64	d7, d0
 8000fa6:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000faa:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000fae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb2:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	ed93 7a00 	vldr	s14, [r3]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	edd3 5a00 	vldr	s11, [r3]
 8000fc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000fca:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fce:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fda:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000fde:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000fe2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fe6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	edd3 6a00 	vldr	s13, [r3]
 8000ff4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001000:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001004:	edd7 7a03 	vldr	s15, [r7, #12]
 8001008:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	edd3 7a00 	vldr	s15, [r3]
 8001012:	2004      	movs	r0, #4
 8001014:	eeb0 0a67 	vmov.f32	s0, s15
 8001018:	f000 fb76 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800101c:	eeb0 7b40 	vmov.f64	d7, d0
 8001020:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001024:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001028:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800102c:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	ed93 7a00 	vldr	s14, [r3]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	edd3 5a00 	vldr	s11, [r3]
 800103c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001040:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001044:	edd7 7a06 	vldr	s15, [r7, #24]
 8001048:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800104c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001050:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001054:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001058:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- ((X1 - theta_k + X2 * this->dt)
 800105c:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001060:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X11 = X1 + (X2 * this->dt)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	this->X21 = X2
 800106a:	edd7 7a08 	vldr	s15, [r7, #32]
 800106e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001072:	edd7 7a03 	vldr	s15, [r7, #12]
 8001076:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	edd3 7a00 	vldr	s15, [r3]
 8001080:	2003      	movs	r0, #3
 8001082:	eeb0 0a67 	vmov.f32	s0, s15
 8001086:	f000 fb3f 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800108a:	eeb0 7b40 	vmov.f64	d7, d0
 800108e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001092:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001096:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	ed93 7a00 	vldr	s14, [r3]
 80010a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80010a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ac:	ee36 6b07 	vadd.f64	d6, d6, d7
 80010b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010b8:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (X1 - theta_k + X2 * this->dt))
 80010bc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010c0:	edd7 7a00 	vldr	s15, [r7]
 80010c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	edd3 5a00 	vldr	s11, [r3]
 80010ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80010d2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80010d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010de:	ee26 9b07 	vmul.f64	d9, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80010e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80010e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80010ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	edd3 6a00 	vldr	s13, [r3]
 80010f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001100:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001104:	edd7 7a03 	vldr	s15, [r7, #12]
 8001108:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	edd3 7a00 	vldr	s15, [r3]
 8001112:	2004      	movs	r0, #4
 8001114:	eeb0 0a67 	vmov.f32	s0, s15
 8001118:	f000 faf6 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800111c:	eeb0 7b40 	vmov.f64	d7, d0
 8001120:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001124:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001128:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800112c:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	ed93 7a00 	vldr	s14, [r3]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	edd3 5a00 	vldr	s11, [r3]
 800113c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001140:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001144:	edd7 7a06 	vldr	s15, [r7, #24]
 8001148:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800114c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001150:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001154:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001158:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 800115c:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001160:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X21 = X2
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	ed93 7a00 	vldr	s14, [r3]
 8001170:	edd7 7a05 	vldr	s15, [r7, #20]
 8001174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001178:	edd7 7a07 	vldr	s15, [r7, #28]
 800117c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001180:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001184:	edd7 7a03 	vldr	s15, [r7, #12]
 8001188:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	edd3 7a00 	vldr	s15, [r3]
 8001192:	2004      	movs	r0, #4
 8001194:	eeb0 0a67 	vmov.f32	s0, s15
 8001198:	f000 fab6 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800119c:	eeb0 7b40 	vmov.f64	d7, d0
 80011a0:	ee29 6b07 	vmul.f64	d6, d9, d7
 80011a4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80011a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011ac:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	ed93 7a00 	vldr	s14, [r3]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	edd3 5a00 	vldr	s11, [r3]
 80011bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80011c0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80011c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80011c8:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80011cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011d4:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80011d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80011dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80011e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	edd3 6a00 	vldr	s13, [r3]
 80011ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f6:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80011fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80011fe:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	2004      	movs	r0, #4
 800120a:	eeb0 0a67 	vmov.f32	s0, s15
 800120e:	f000 fa7b 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001212:	eeb0 7b40 	vmov.f64	d7, d0
 8001216:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800121a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800121e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001222:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	ed93 7a00 	vldr	s14, [r3]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	edd3 5a00 	vldr	s11, [r3]
 8001232:	edd7 7a04 	vldr	s15, [r7, #16]
 8001236:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800123a:	edd7 7a06 	vldr	s15, [r7, #24]
 800123e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001246:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800124a:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800124e:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001252:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001256:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800125a:	eeb1 8b47 	vneg.f64	d8, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	ed93 7a00 	vldr	s14, [r3]
 8001264:	edd7 7a05 	vldr	s15, [r7, #20]
 8001268:	ee27 7a27 	vmul.f32	s14, s14, s15
 800126c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001274:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001278:	edd7 7a03 	vldr	s15, [r7, #12]
 800127c:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	edd3 7a00 	vldr	s15, [r3]
 8001286:	2004      	movs	r0, #4
 8001288:	eeb0 0a67 	vmov.f32	s0, s15
 800128c:	f000 fa3c 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001290:	eeb0 7b40 	vmov.f64	d7, d0
 8001294:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001298:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800129c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012a0:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	ed93 7a00 	vldr	s14, [r3]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	edd3 5a00 	vldr	s11, [r3]
 80012b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80012b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80012bc:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80012c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012c8:	ee36 7b07 	vadd.f64	d7, d6, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012cc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80012d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	ed93 7a00 	vldr	s14, [r3]
 80012e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80012ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f0:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80012f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80012f8:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	edd3 7a00 	vldr	s15, [r3]
 8001302:	2004      	movs	r0, #4
 8001304:	eeb0 0a67 	vmov.f32	s0, s15
 8001308:	f000 f9fe 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800130c:	eeb0 7b40 	vmov.f64	d7, d0
 8001310:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001314:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001318:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800131c:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	ed93 7a00 	vldr	s14, [r3]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	edd3 5a00 	vldr	s11, [r3]
 800132c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001330:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001334:	edd7 7a06 	vldr	s15, [r7, #24]
 8001338:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800133c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001340:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001344:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001348:	ed97 7a07 	vldr	s14, [r7, #28]
 800134c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001350:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	edd3 6a00 	vldr	s13, [r3]
 800135a:	edd7 7a05 	vldr	s15, [r7, #20]
 800135e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001366:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800136a:	edd7 7a03 	vldr	s15, [r7, #12]
 800136e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	2004      	movs	r0, #4
 800137a:	eeb0 0a67 	vmov.f32	s0, s15
 800137e:	f000 f9c3 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001382:	eeb0 7b40 	vmov.f64	d7, d0
 8001386:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800138a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800138e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001392:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	ed93 7a00 	vldr	s14, [r3]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	edd3 5a00 	vldr	s11, [r3]
 80013a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80013a6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80013aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80013ae:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80013b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013ba:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013be:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80013c2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80013c6:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013ca:	eeb1 8b47 	vneg.f64	d8, d7
			* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12);
 80013ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80013d2:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	edd3 7a00 	vldr	s15, [r3]
 80013dc:	2003      	movs	r0, #3
 80013de:	eeb0 0a67 	vmov.f32	s0, s15
 80013e2:	f000 f991 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80013e6:	eeb0 7b40 	vmov.f64	d7, d0
 80013ea:	ee29 7b07 	vmul.f64	d7, d9, d7
 80013ee:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80013f2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	ed93 7a00 	vldr	s14, [r3]
 80013fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001404:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001408:	ee36 6b07 	vadd.f64	d6, d6, d7
 800140c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001410:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001414:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001418:	ee28 7b07 	vmul.f64	d7, d8, d7
 800141c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	ed93 7a00 	vldr	s14, [r3]
 800142c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001430:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001434:	edd7 7a05 	vldr	s15, [r7, #20]
 8001438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001440:	edd7 7a03 	vldr	s15, [r7, #12]
 8001444:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	2003      	movs	r0, #3
 8001450:	eeb0 0a67 	vmov.f32	s0, s15
 8001454:	f000 f958 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001458:	eeb0 7b40 	vmov.f64	d7, d0
 800145c:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001460:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001464:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001468:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 800146c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001470:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	2003      	movs	r0, #3
 800147c:	eeb0 0a67 	vmov.f32	s0, s15
 8001480:	f000 f942 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001484:	eeb0 7b40 	vmov.f64	d7, d0
 8001488:	ee29 7b07 	vmul.f64	d7, d9, d7
 800148c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001490:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	ed93 7a00 	vldr	s14, [r3]
 800149a:	edd7 7a04 	vldr	s15, [r7, #16]
 800149e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014a6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80014ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014b2:	ee36 9b07 	vadd.f64	d9, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	ed93 7a00 	vldr	s14, [r3]
 80014bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80014c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014cc:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80014d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80014d4:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	edd3 7a00 	vldr	s15, [r3]
 80014de:	2004      	movs	r0, #4
 80014e0:	eeb0 0a67 	vmov.f32	s0, s15
 80014e4:	f000 f910 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014e8:	eeb0 7b40 	vmov.f64	d7, d0
 80014ec:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80014f0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80014f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014f8:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	ed93 7a00 	vldr	s14, [r3]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	edd3 5a00 	vldr	s11, [r3]
 8001508:	edd7 7a04 	vldr	s15, [r7, #16]
 800150c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001510:	edd7 7a06 	vldr	s15, [r7, #24]
 8001514:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001520:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001524:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001528:	ed97 7a07 	vldr	s14, [r7, #28]
 800152c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001530:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	edd3 6a00 	vldr	s13, [r3]
 800153a:	edd7 7a05 	vldr	s15, [r7, #20]
 800153e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001546:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800154a:	edd7 7a03 	vldr	s15, [r7, #12]
 800154e:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	2004      	movs	r0, #4
 800155a:	eeb0 0a67 	vmov.f32	s0, s15
 800155e:	f000 f8d3 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001562:	eeb0 7b40 	vmov.f64	d7, d0
 8001566:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800156a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800156e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001572:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	ed93 7a00 	vldr	s14, [r3]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	edd3 5a00 	vldr	s11, [r3]
 8001582:	edd7 7a04 	vldr	s15, [r7, #16]
 8001586:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800158a:	edd7 7a06 	vldr	s15, [r7, #24]
 800158e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001596:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800159a:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800159e:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 80015a2:	ee38 7b47 	vsub.f64	d7, d8, d7
 80015a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	this->p22 = P22 + Q * pow(this->dt, 2)
 80015b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015b4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80015b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015bc:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	2002      	movs	r0, #2
 80015c8:	eeb0 0a67 	vmov.f32	s0, s15
 80015cc:	f000 f89c 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015d0:	eeb0 7b40 	vmov.f64	d7, d0
 80015d4:	ee29 7b07 	vmul.f64	d7, d9, d7
 80015d8:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 80015dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80015e0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	2003      	movs	r0, #3
 80015ec:	eeb0 0a67 	vmov.f32	s0, s15
 80015f0:	f000 f88a 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015f4:	eeb0 7b40 	vmov.f64	d7, d0
 80015f8:	ee29 7b07 	vmul.f64	d7, d9, d7
 80015fc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001600:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	ed93 7a00 	vldr	s14, [r3]
 800160a:	edd7 7a04 	vldr	s15, [r7, #16]
 800160e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001612:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001616:	ee36 6b07 	vadd.f64	d6, d6, d7
 800161a:	edd7 7a06 	vldr	s15, [r7, #24]
 800161e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001622:	ee36 9b07 	vadd.f64	d9, d6, d7
					* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21))
 8001626:	edd7 7a03 	vldr	s15, [r7, #12]
 800162a:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	2003      	movs	r0, #3
 8001636:	eeb0 0a67 	vmov.f32	s0, s15
 800163a:	f000 f865 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800163e:	eeb0 7b40 	vmov.f64	d7, d0
 8001642:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8001646:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800164a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	ed93 7a00 	vldr	s14, [r3]
 8001654:	edd7 7a04 	vldr	s15, [r7, #16]
 8001658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800165c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001660:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001664:	edd7 7a05 	vldr	s15, [r7, #20]
 8001668:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800166c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001670:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001674:	ed97 7a07 	vldr	s14, [r7, #28]
 8001678:	edd7 7a02 	vldr	s15, [r7, #8]
 800167c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	edd3 6a00 	vldr	s13, [r3]
 8001686:	edd7 7a05 	vldr	s15, [r7, #20]
 800168a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800168e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001692:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001696:	edd7 7a03 	vldr	s15, [r7, #12]
 800169a:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	2004      	movs	r0, #4
 80016a6:	eeb0 0a67 	vmov.f32	s0, s15
 80016aa:	f000 f82d 	bl	8001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80016ae:	eeb0 7b40 	vmov.f64	d7, d0
 80016b2:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80016b6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80016ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016be:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	ed93 7a00 	vldr	s14, [r3]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	edd3 5a00 	vldr	s11, [r3]
 80016ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80016d2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80016d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016da:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80016de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016e6:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80016ea:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 80016ee:	ee38 7b47 	vsub.f64	d7, d8, d7
 80016f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p22 = P22 + Q * pow(this->dt, 2)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	; 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	ecbd 8b08 	vpop	{d8-d11}
 8001706:	bd80      	pop	{r7, pc}

08001708 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001712:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8001714:	edd7 7a01 	vldr	s15, [r7, #4]
 8001718:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	ee06 3a90 	vmov	s13, r3
 8001722:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8001726:	eeb0 1b46 	vmov.f64	d1, d6
 800172a:	eeb0 0b47 	vmov.f64	d0, d7
 800172e:	f00f fa4b 	bl	8010bc8 <pow>
 8001732:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8001736:	eeb0 0b47 	vmov.f64	d0, d7
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	ed87 0a01 	vstr	s0, [r7, #4]
 800174a:	edd7 7a01 	vldr	s15, [r7, #4]
 800174e:	fefb 7a67 	vrintm.f32	s15, s15
 8001752:	eeb0 0a67 	vmov.f32	s0, s15
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	ed87 0a01 	vstr	s0, [r7, #4]
 800176a:	edd7 7a01 	vldr	s15, [r7, #4]
 800176e:	fef8 7a67 	vrinta.f32	s15, s15
 8001772:	eeb0 0a67 	vmov.f32	s0, s15
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>:
 *
 *  Created on: Jan 30, 2022
 *      Author: SakuranohanaTH
 */
#include "ServoMotor.h"
ServoMotor::ServoMotor(TIM_HandleTypeDef *_servo_htim,
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
		uint32_t _SERVO_TIM_CHANNEL) {
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	22b4      	movs	r2, #180	; 0xb4
 80017a2:	615a      	str	r2, [r3, #20]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	761a      	strb	r2, [r3, #24]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	765a      	strb	r2, [r3, #25]
	this->servo_htim = _servo_htim;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	601a      	str	r2, [r3, #0]
	this->SERVO_TIM_CHANNEL = _SERVO_TIM_CHANNEL;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	605a      	str	r2, [r3, #4]
	 * 2ms/20ms = 0.1 = 10%
	 *
	 * CRR = 0.1 * (19999 + 1) = 2000
	 *
	 */
	this->servo_htim->Instance->PSC = _PSC_SERVO_MOTOR - 1U;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	22ef      	movs	r2, #239	; 0xef
 80017c4:	629a      	str	r2, [r3, #40]	; 0x28
	this->servo_htim->Instance->ARR = _ARR_SERVO_MOTOR - 1U;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80017d0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <_ZN10ServoMotorD1Ev>:
ServoMotor::~ServoMotor() {
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
}
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <_ZN10ServoMotor11ServoEnableEv>:
void ServoMotor::ServoEnable() {
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Enable PWM for Servo Motor
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4619      	mov	r1, r3
 8001808:	4610      	mov	r0, r2
 800180a:	f00b fe25 	bl	800d458 <HAL_TIM_PWM_Start>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <_ZN10ServoMotor17ServoRotateDegreeEl>:
void ServoMotor::ServoDisable() {
	HAL_TIM_PWM_Stop(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Disable PWM for Servo Motor
}
void ServoMotor::ServoRotateDegree(int32_t _sdegrotate) {
 8001818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181a:	b085      	sub	sp, #20
 800181c:	af02      	add	r7, sp, #8
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
	if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d13f      	bne.n	80018aa <_ZN10ServoMotor17ServoRotateDegreeEl+0x92>
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691c      	ldr	r4, [r3, #16]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695d      	ldr	r5, [r3, #20]
				_sdegrotate, this->minsdeg, this->maxsdeg, // Mapping degree value to CRR value
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	3301      	adds	r3, #1
 800183c:	ee07 3a90 	vmov	s15, r3
 8001840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001844:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8001acc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800184c:	eeb0 0a67 	vmov.f32	s0, s15
 8001850:	f7ff ff86 	bl	8001760 <_ZSt5roundf>
 8001854:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800185c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	3301      	adds	r3, #1
 800186a:	ee07 3a90 	vmov	s15, r3
 800186e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001872:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001ad0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001876:	ee67 7a87 	vmul.f32	s15, s15, s14
 800187a:	eeb0 0a67 	vmov.f32	s0, s15
 800187e:	f7ff ff5f 	bl	8001740 <_ZSt5floorf>
 8001882:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800188a:	ee17 3a90 	vmov	r3, s15
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	9600      	str	r6, [sp, #0]
 8001892:	462b      	mov	r3, r5
 8001894:	4622      	mov	r2, r4
 8001896:	6839      	ldr	r1, [r7, #0]
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f9cf 	bl	8001c3c <_ZN10ServoMotor10GripperMapElllll>
 800189e:	4602      	mov	r2, r0
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR3 = 0;
		this->servo_htim->Instance->CCR4 = 0;
		this->servo_htim->Instance->CCR5 = 0;
		this->servo_htim->Instance->CCR6 = 0;
	}
}
 80018a8:	e176      	b.n	8001b98 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_2) {
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d13f      	bne.n	8001932 <_ZN10ServoMotor17ServoRotateDegreeEl+0x11a>
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691c      	ldr	r4, [r3, #16]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	3301      	adds	r3, #1
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018cc:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001acc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80018d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d4:	eeb0 0a67 	vmov.f32	s0, s15
 80018d8:	f7ff ff42 	bl	8001760 <_ZSt5roundf>
 80018dc:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80018e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e4:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	3301      	adds	r3, #1
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018fa:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001ad0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 80018fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001902:	eeb0 0a67 	vmov.f32	s0, s15
 8001906:	f7ff ff1b 	bl	8001740 <_ZSt5floorf>
 800190a:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 800190e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001912:	ee17 3a90 	vmov	r3, s15
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	9600      	str	r6, [sp, #0]
 800191a:	462b      	mov	r3, r5
 800191c:	4622      	mov	r2, r4
 800191e:	6839      	ldr	r1, [r7, #0]
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f98b 	bl	8001c3c <_ZN10ServoMotor10GripperMapElllll>
 8001926:	4602      	mov	r2, r0
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001930:	e132      	b.n	8001b98 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b08      	cmp	r3, #8
 8001938:	d13f      	bne.n	80019ba <_ZN10ServoMotor17ServoRotateDegreeEl+0x1a2>
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691c      	ldr	r4, [r3, #16]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	3301      	adds	r3, #1
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001954:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001acc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001958:	ee67 7a87 	vmul.f32	s15, s15, s14
 800195c:	eeb0 0a67 	vmov.f32	s0, s15
 8001960:	f7ff fefe 	bl	8001760 <_ZSt5roundf>
 8001964:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800196c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	3301      	adds	r3, #1
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001982:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001ad0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001986:	ee67 7a87 	vmul.f32	s15, s15, s14
 800198a:	eeb0 0a67 	vmov.f32	s0, s15
 800198e:	f7ff fed7 	bl	8001740 <_ZSt5floorf>
 8001992:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001996:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800199a:	ee17 3a90 	vmov	r3, s15
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	9600      	str	r6, [sp, #0]
 80019a2:	462b      	mov	r3, r5
 80019a4:	4622      	mov	r2, r4
 80019a6:	6839      	ldr	r1, [r7, #0]
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f947 	bl	8001c3c <_ZN10ServoMotor10GripperMapElllll>
 80019ae:	4602      	mov	r2, r0
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80019b8:	e0ee      	b.n	8001b98 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_4) {
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b0c      	cmp	r3, #12
 80019c0:	d13f      	bne.n	8001a42 <_ZN10ServoMotor17ServoRotateDegreeEl+0x22a>
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691c      	ldr	r4, [r3, #16]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d2:	3301      	adds	r3, #1
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019dc:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001acc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80019e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e4:	eeb0 0a67 	vmov.f32	s0, s15
 80019e8:	f7ff feba 	bl	8001760 <_ZSt5roundf>
 80019ec:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 80019f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019f4:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	3301      	adds	r3, #1
 8001a02:	ee07 3a90 	vmov	s15, r3
 8001a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a0a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001ad0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001a0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a12:	eeb0 0a67 	vmov.f32	s0, s15
 8001a16:	f7ff fe93 	bl	8001740 <_ZSt5floorf>
 8001a1a:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001a1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a22:	ee17 3a90 	vmov	r3, s15
 8001a26:	9301      	str	r3, [sp, #4]
 8001a28:	9600      	str	r6, [sp, #0]
 8001a2a:	462b      	mov	r3, r5
 8001a2c:	4622      	mov	r2, r4
 8001a2e:	6839      	ldr	r1, [r7, #0]
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 f903 	bl	8001c3c <_ZN10ServoMotor10GripperMapElllll>
 8001a36:	4602      	mov	r2, r0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001a40:	e0aa      	b.n	8001b98 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b10      	cmp	r3, #16
 8001a48:	d144      	bne.n	8001ad4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2bc>
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691c      	ldr	r4, [r3, #16]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	ee07 3a90 	vmov	s15, r3
 8001a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a64:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001acc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001a68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a70:	f7ff fe76 	bl	8001760 <_ZSt5roundf>
 8001a74:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001a78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a7c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	3301      	adds	r3, #1
 8001a8a:	ee07 3a90 	vmov	s15, r3
 8001a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a92:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001ad0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001a96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a9e:	f7ff fe4f 	bl	8001740 <_ZSt5floorf>
 8001aa2:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001aa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aaa:	ee17 3a90 	vmov	r3, s15
 8001aae:	9301      	str	r3, [sp, #4]
 8001ab0:	9600      	str	r6, [sp, #0]
 8001ab2:	462b      	mov	r3, r5
 8001ab4:	4622      	mov	r2, r4
 8001ab6:	6839      	ldr	r1, [r7, #0]
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f8bf 	bl	8001c3c <_ZN10ServoMotor10GripperMapElllll>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001ac8:	e066      	b.n	8001b98 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
 8001aca:	bf00      	nop
 8001acc:	3d4ccccd 	.word	0x3d4ccccd
 8001ad0:	3e19999a 	.word	0x3e19999a
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b14      	cmp	r3, #20
 8001ada:	d13f      	bne.n	8001b5c <_ZN10ServoMotor17ServoRotateDegreeEl+0x344>
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691c      	ldr	r4, [r3, #16]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	3301      	adds	r3, #1
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af6:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8001acc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001afa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001afe:	eeb0 0a67 	vmov.f32	s0, s15
 8001b02:	f7ff fe2d 	bl	8001760 <_ZSt5roundf>
 8001b06:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001b0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b0e:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	ee07 3a90 	vmov	s15, r3
 8001b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b24:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8001ad0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001b28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b30:	f7ff fe06 	bl	8001740 <_ZSt5floorf>
 8001b34:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b3c:	ee17 3a90 	vmov	r3, s15
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	9600      	str	r6, [sp, #0]
 8001b44:	462b      	mov	r3, r5
 8001b46:	4622      	mov	r2, r4
 8001b48:	6839      	ldr	r1, [r7, #0]
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f876 	bl	8001c3c <_ZN10ServoMotor10GripperMapElllll>
 8001b50:	4602      	mov	r2, r0
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001b5a:	e01d      	b.n	8001b98 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
		this->servo_htim->Instance->CCR1 = 0;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2200      	movs	r2, #0
 8001b64:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR2 = 0;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	639a      	str	r2, [r3, #56]	; 0x38
		this->servo_htim->Instance->CCR3 = 0;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2200      	movs	r2, #0
 8001b78:	63da      	str	r2, [r3, #60]	; 0x3c
		this->servo_htim->Instance->CCR4 = 0;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2200      	movs	r2, #0
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40
		this->servo_htim->Instance->CCR5 = 0;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	659a      	str	r2, [r3, #88]	; 0x58
		this->servo_htim->Instance->CCR6 = 0;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2200      	movs	r2, #0
 8001b96:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ba0 <_ZN10ServoMotor20setDegreeGripperOpenEl>:
void ServoMotor::setDegreeGripperOpen(int32_t _sdegopen) {
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
	this->sdegopen = _sdegopen;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	609a      	str	r2, [r3, #8]
	this->isSetDegreeGripperOpen = true;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	761a      	strb	r2, [r3, #24]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <_ZN10ServoMotor21setDegreeGripperCloseEl>:
void ServoMotor::setDegreeGripperClose(int32_t _sdegclose) {
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	6039      	str	r1, [r7, #0]
	this->sdegclose = _sdegclose;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	60da      	str	r2, [r3, #12]
	this->isSetDegreeGripperClose = true;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	765a      	strb	r2, [r3, #25]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <_ZN10ServoMotor12GripperCloseEv>:
void ServoMotor::GripperClose() {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperClose)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7e5b      	ldrb	r3, [r3, #25]
 8001bf0:	f083 0301 	eor.w	r3, r3, #1
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d106      	bne.n	8001c08 <_ZN10ServoMotor12GripperCloseEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegclose);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff fe09 	bl	8001818 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001c06:	e000      	b.n	8001c0a <_ZN10ServoMotor12GripperCloseEv+0x26>
		return;
 8001c08:	bf00      	nop
}
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_ZN10ServoMotor11GripperOpenEv>:
void ServoMotor::GripperOpen() {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperOpen)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7e1b      	ldrb	r3, [r3, #24]
 8001c1c:	f083 0301 	eor.w	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d106      	bne.n	8001c34 <_ZN10ServoMotor11GripperOpenEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegopen);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff fdf3 	bl	8001818 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001c32:	e000      	b.n	8001c36 <_ZN10ServoMotor11GripperOpenEv+0x26>
		return;
 8001c34:	bf00      	nop
}
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_ZN10ServoMotor10GripperMapElllll>:
int32_t ServoMotor::GripperMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	69f9      	ldr	r1, [r7, #28]
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	1a8a      	subs	r2, r1, r2
 8001c56:	fb02 f203 	mul.w	r2, r2, r3
 8001c5a:	6839      	ldr	r1, [r7, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	1acb      	subs	r3, r1, r3
 8001c60:	fb92 f2f3 	sdiv	r2, r2, r3
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	4413      	add	r3, r2
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c82:	eef0 7ae7 	vabs.f32	s15, s15
 8001c86:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
 8001ca0:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4a18      	ldr	r2, [pc, #96]	; (8001d08 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8001ca6:	615a      	str	r2, [r3, #20]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4a18      	ldr	r2, [pc, #96]	; (8001d0c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001cac:	619a      	str	r2, [r3, #24]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cb4:	61da      	str	r2, [r3, #28]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4a15      	ldr	r2, [pc, #84]	; (8001d10 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8001cba:	621a      	str	r2, [r3, #32]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cc2:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	22c7      	movs	r2, #199	; 0xc7
 8001cd8:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 1.0f;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ce0:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4a09      	ldr	r2, [pc, #36]	; (8001d0c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001ce6:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 8001ce8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001d14 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 f82f 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	60da      	str	r2, [r3, #12]
}
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	41a00000 	.word	0x41a00000
 8001d0c:	469c4000 	.word	0x469c4000
 8001d10:	43480000 	.word	0x43480000
 8001d14:	00000000 	.word	0x00000000

08001d18 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
}
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4610      	mov	r0, r2
 8001d42:	f00b fb89 	bl	800d458 <HAL_TIM_PWM_Start>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	ed2d 8b02 	vpush	{d8}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d70:	f7ff ff80 	bl	8001c74 <_ZSt4fabsf>
 8001d74:	eeb0 7a40 	vmov.f32	s14, s0
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d86:	bf94      	ite	ls
 8001d88:	2301      	movls	r3, #1
 8001d8a:	2300      	movhi	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	e01b      	b.n	8001dd2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001da0:	eeb0 0a67 	vmov.f32	s0, s15
 8001da4:	f7ff ff66 	bl	8001c74 <_ZSt4fabsf>
 8001da8:	eeb0 7a40 	vmov.f32	s14, s0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	edd3 7a06 	vldr	s15, [r3, #24]
 8001db2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dba:	bfac      	ite	ge
 8001dbc:	2301      	movge	r3, #1
 8001dbe:	2300      	movlt	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e001      	b.n	8001dd2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dd8:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002074 <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8001ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de4:	f2c0 80db 	blt.w	8001f9e <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6898      	ldr	r0, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	2201      	movs	r2, #1
 8001df4:	4619      	mov	r1, r3
 8001df6:	f008 fa65 	bl	800a2c4 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	3301      	adds	r3, #1
 8001e04:	ee07 3a90 	vmov	s15, r3
 8001e08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e14:	eddf 6a98 	vldr	s13, [pc, #608]	; 8002078 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001e1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e24:	eeb0 0a67 	vmov.f32	s0, s15
 8001e28:	f7ff fc9a 	bl	8001760 <_ZSt5roundf>
 8001e2c:	eef0 7a40 	vmov.f32	s15, s0
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e3a:	ee17 2a90 	vmov	r2, s15
 8001e3e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d113      	bne.n	8001e70 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8001e52:	085b      	lsrs	r3, r3, #1
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 fa5b 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001e5a:	eeb0 7b40 	vmov.f64	d7, d0
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e68:	ee17 2a90 	vmov	r2, s15
 8001e6c:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8001e6e:	e1e0      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d113      	bne.n	8001ea0 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e80:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8001e82:	085b      	lsrs	r3, r3, #1
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 fa43 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001e8a:	eeb0 7b40 	vmov.f64	d7, d0
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e98:	ee17 2a90 	vmov	r2, s15
 8001e9c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e9e:	e1c8      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d113      	bne.n	8001ed0 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8001eb2:	085b      	lsrs	r3, r3, #1
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 fa2b 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001eba:	eeb0 7b40 	vmov.f64	d7, d0
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ec8:	ee17 2a90 	vmov	r2, s15
 8001ecc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ece:	e1b0      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b0c      	cmp	r3, #12
 8001ed6:	d113      	bne.n	8001f00 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8001ee2:	085b      	lsrs	r3, r3, #1
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 fa13 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001eea:	eeb0 7b40 	vmov.f64	d7, d0
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ef8:	ee17 2a90 	vmov	r2, s15
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001efe:	e198      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b10      	cmp	r3, #16
 8001f06:	d113      	bne.n	8001f30 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f10:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8001f12:	085b      	lsrs	r3, r3, #1
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 f9fb 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f1a:	eeb0 7b40 	vmov.f64	d7, d0
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f28:	ee17 2a90 	vmov	r2, s15
 8001f2c:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001f2e:	e180      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b14      	cmp	r3, #20
 8001f36:	d113      	bne.n	8001f60 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8001f42:	085b      	lsrs	r3, r3, #1
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 f9e3 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f4a:	eeb0 7b40 	vmov.f64	d7, d0
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f58:	ee17 2a90 	vmov	r2, s15
 8001f5c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001f5e:	e168      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2200      	movs	r2, #0
 8001f68:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2200      	movs	r2, #0
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2200      	movs	r2, #0
 8001f86:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001f9c:	e149      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001fa4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800207c <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 8001fa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb0:	f200 80e5 	bhi.w	800217e <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6898      	ldr	r0, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f008 f97f 	bl	800a2c4 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fce:	3301      	adds	r3, #1
 8001fd0:	ee07 3a90 	vmov	s15, r3
 8001fd4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001fd8:	ed97 0a03 	vldr	s0, [r7, #12]
 8001fdc:	f7ff fe4a 	bl	8001c74 <_ZSt4fabsf>
 8001fe0:	eef0 7a40 	vmov.f32	s15, s0
 8001fe4:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001fe8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002078 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001fec:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001ff0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ff4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ffc:	f7ff fbb0 	bl	8001760 <_ZSt5roundf>
 8002000:	eef0 7a40 	vmov.f32	s15, s0
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800200e:	ee17 2a90 	vmov	r2, s15
 8002012:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d113      	bne.n	8002044 <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8002026:	085b      	lsrs	r3, r3, #1
 8002028:	4618      	mov	r0, r3
 800202a:	f000 f971 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800202e:	eeb0 7b40 	vmov.f64	d7, d0
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800203c:	ee17 2a90 	vmov	r2, s15
 8002040:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002042:	e0f6      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b04      	cmp	r3, #4
 800204a:	d119      	bne.n	8002080 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8002056:	085b      	lsrs	r3, r3, #1
 8002058:	4618      	mov	r0, r3
 800205a:	f000 f959 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800205e:	eeb0 7b40 	vmov.f64	d7, d0
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800206c:	ee17 2a90 	vmov	r2, s15
 8002070:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002072:	e0de      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 8002074:	3a83126f 	.word	0x3a83126f
 8002078:	4d64e1c0 	.word	0x4d64e1c0
 800207c:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b08      	cmp	r3, #8
 8002086:	d113      	bne.n	80020b0 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8002092:	085b      	lsrs	r3, r3, #1
 8002094:	4618      	mov	r0, r3
 8002096:	f000 f93b 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800209a:	eeb0 7b40 	vmov.f64	d7, d0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020a8:	ee17 2a90 	vmov	r2, s15
 80020ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80020ae:	e0c0      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b0c      	cmp	r3, #12
 80020b6:	d113      	bne.n	80020e0 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 80020c2:	085b      	lsrs	r3, r3, #1
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 f923 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80020ca:	eeb0 7b40 	vmov.f64	d7, d0
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020d8:	ee17 2a90 	vmov	r2, s15
 80020dc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80020de:	e0a8      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b10      	cmp	r3, #16
 80020e6:	d113      	bne.n	8002110 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 80020f2:	085b      	lsrs	r3, r3, #1
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 f90b 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80020fa:	eeb0 7b40 	vmov.f64	d7, d0
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002108:	ee17 2a90 	vmov	r2, s15
 800210c:	659a      	str	r2, [r3, #88]	; 0x58
}
 800210e:	e090      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b14      	cmp	r3, #20
 8002116:	d113      	bne.n	8002140 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8002122:	085b      	lsrs	r3, r3, #1
 8002124:	4618      	mov	r0, r3
 8002126:	f000 f8f3 	bl	8002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800212a:	eeb0 7b40 	vmov.f64	d7, d0
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002138:	ee17 2a90 	vmov	r2, s15
 800213c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800213e:	e078      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2200      	movs	r2, #0
 8002148:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2200      	movs	r2, #0
 8002152:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2200      	movs	r2, #0
 800215c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2200      	movs	r2, #0
 8002166:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2200      	movs	r2, #0
 8002170:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2200      	movs	r2, #0
 800217a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800217c:	e059      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d105      	bne.n	8002192 <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2200      	movs	r2, #0
 800218e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002190:	e04f      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b04      	cmp	r3, #4
 8002198:	d105      	bne.n	80021a6 <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2200      	movs	r2, #0
 80021a2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80021a4:	e045      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d105      	bne.n	80021ba <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2200      	movs	r2, #0
 80021b6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80021b8:	e03b      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b0c      	cmp	r3, #12
 80021c0:	d105      	bne.n	80021ce <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2200      	movs	r2, #0
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40
}
 80021cc:	e031      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b10      	cmp	r3, #16
 80021d4:	d105      	bne.n	80021e2 <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2200      	movs	r2, #0
 80021de:	659a      	str	r2, [r3, #88]	; 0x58
}
 80021e0:	e027      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b14      	cmp	r3, #20
 80021e8:	d105      	bne.n	80021f6 <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2200      	movs	r2, #0
 80021f2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80021f4:	e01d      	b.n	8002232 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2200      	movs	r2, #0
 80021fe:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2200      	movs	r2, #0
 8002208:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2200      	movs	r2, #0
 8002212:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2200      	movs	r2, #0
 800221c:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2200      	movs	r2, #0
 8002226:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2200      	movs	r2, #0
 8002230:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	ecbd 8b02 	vpop	{d8}
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop

08002240 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 800224c:	ed97 0a00 	vldr	s0, [r7]
 8002250:	f7ff fd10 	bl	8001c74 <_ZSt4fabsf>
 8002254:	eef0 7a40 	vmov.f32	s15, s0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	ee07 3a90 	vmov	s15, r3
 8002276:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800227a:	eeb0 0b47 	vmov.f64	d0, d7
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff ffe5 	bl	8002266 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800229c:	eeb0 7b40 	vmov.f64	d7, d0
 80022a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	0000      	movs	r0, r0
 80022b4:	0000      	movs	r0, r0
	...

080022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>:
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
						/ (2.0f * PI)));
//	}
}
void Stepper::StepperOpenLoopSpeedM(float _speed_m) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed_m * this->microStep * this->ratio * this->SPR * 1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	ed93 7a07 	vldr	s14, [r3, #28]
 80022ca:	edd7 7a00 	vldr	s15, [r7]
 80022ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80022d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	edd3 7a08 	vldr	s15, [r3, #32]
 80022e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI * 1000.0f)));
 80022ea:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8002308 <_ZN7Stepper21StepperOpenLoopSpeedMEf+0x50>
 80022ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 80022f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022f6:	eeb0 0a67 	vmov.f32	s0, s15
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff fd28 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	704a95d1 	.word	0x704a95d1
 800230c:	40b88b2f 	.word	0x40b88b2f

08002310 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	ee07 3a90 	vmov	s15, r3
 800231e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002322:	eeb0 0b47 	vmov.f64	d0, d7
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002334:	4b13      	ldr	r3, [pc, #76]	; (8002384 <MX_CRC_Init+0x54>)
 8002336:	4a14      	ldr	r2, [pc, #80]	; (8002388 <MX_CRC_Init+0x58>)
 8002338:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <MX_CRC_Init+0x54>)
 800233c:	2201      	movs	r2, #1
 800233e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002340:	4b10      	ldr	r3, [pc, #64]	; (8002384 <MX_CRC_Init+0x54>)
 8002342:	2201      	movs	r2, #1
 8002344:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <MX_CRC_Init+0x54>)
 8002348:	f248 0205 	movw	r2, #32773	; 0x8005
 800234c:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <MX_CRC_Init+0x54>)
 8002350:	2208      	movs	r2, #8
 8002352:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <MX_CRC_Init+0x54>)
 8002356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800235a:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <MX_CRC_Init+0x54>)
 800235e:	2220      	movs	r2, #32
 8002360:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <MX_CRC_Init+0x54>)
 8002364:	2280      	movs	r2, #128	; 0x80
 8002366:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <MX_CRC_Init+0x54>)
 800236a:	2201      	movs	r2, #1
 800236c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800236e:	4805      	ldr	r0, [pc, #20]	; (8002384 <MX_CRC_Init+0x54>)
 8002370:	f004 fdc0 	bl	8006ef4 <HAL_CRC_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 800237a:	f002 fc57 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	24000bf0 	.word	0x24000bf0
 8002388:	58024c00 	.word	0x58024c00

0800238c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0b      	ldr	r2, [pc, #44]	; (80023c8 <HAL_CRC_MspInit+0x3c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d10e      	bne.n	80023bc <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800239e:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <HAL_CRC_MspInit+0x40>)
 80023a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a4:	4a09      	ldr	r2, [pc, #36]	; (80023cc <HAL_CRC_MspInit+0x40>)
 80023a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80023aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023ae:	4b07      	ldr	r3, [pc, #28]	; (80023cc <HAL_CRC_MspInit+0x40>)
 80023b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	58024c00 	.word	0x58024c00
 80023cc:	58024400 	.word	0x58024400

080023d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023d6:	4b35      	ldr	r3, [pc, #212]	; (80024ac <MX_DMA_Init+0xdc>)
 80023d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023dc:	4a33      	ldr	r2, [pc, #204]	; (80024ac <MX_DMA_Init+0xdc>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023e6:	4b31      	ldr	r3, [pc, #196]	; (80024ac <MX_DMA_Init+0xdc>)
 80023e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	607b      	str	r3, [r7, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023f4:	4b2d      	ldr	r3, [pc, #180]	; (80024ac <MX_DMA_Init+0xdc>)
 80023f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023fa:	4a2c      	ldr	r2, [pc, #176]	; (80024ac <MX_DMA_Init+0xdc>)
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002404:	4b29      	ldr	r3, [pc, #164]	; (80024ac <MX_DMA_Init+0xdc>)
 8002406:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	200b      	movs	r0, #11
 8002418:	f004 fd2b 	bl	8006e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800241c:	200b      	movs	r0, #11
 800241e:	f004 fd42 	bl	8006ea6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002422:	2200      	movs	r2, #0
 8002424:	2100      	movs	r1, #0
 8002426:	200c      	movs	r0, #12
 8002428:	f004 fd23 	bl	8006e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800242c:	200c      	movs	r0, #12
 800242e:	f004 fd3a 	bl	8006ea6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002432:	2200      	movs	r2, #0
 8002434:	2100      	movs	r1, #0
 8002436:	200d      	movs	r0, #13
 8002438:	f004 fd1b 	bl	8006e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800243c:	200d      	movs	r0, #13
 800243e:	f004 fd32 	bl	8006ea6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002442:	2200      	movs	r2, #0
 8002444:	2100      	movs	r1, #0
 8002446:	200e      	movs	r0, #14
 8002448:	f004 fd13 	bl	8006e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800244c:	200e      	movs	r0, #14
 800244e:	f004 fd2a 	bl	8006ea6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002452:	2200      	movs	r2, #0
 8002454:	2100      	movs	r1, #0
 8002456:	200f      	movs	r0, #15
 8002458:	f004 fd0b 	bl	8006e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800245c:	200f      	movs	r0, #15
 800245e:	f004 fd22 	bl	8006ea6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	2100      	movs	r1, #0
 8002466:	2010      	movs	r0, #16
 8002468:	f004 fd03 	bl	8006e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800246c:	2010      	movs	r0, #16
 800246e:	f004 fd1a 	bl	8006ea6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002472:	2200      	movs	r2, #0
 8002474:	2100      	movs	r1, #0
 8002476:	2011      	movs	r0, #17
 8002478:	f004 fcfb 	bl	8006e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800247c:	2011      	movs	r0, #17
 800247e:	f004 fd12 	bl	8006ea6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002482:	2200      	movs	r2, #0
 8002484:	2100      	movs	r1, #0
 8002486:	202f      	movs	r0, #47	; 0x2f
 8002488:	f004 fcf3 	bl	8006e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800248c:	202f      	movs	r0, #47	; 0x2f
 800248e:	f004 fd0a 	bl	8006ea6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002492:	2200      	movs	r2, #0
 8002494:	2100      	movs	r1, #0
 8002496:	2038      	movs	r0, #56	; 0x38
 8002498:	f004 fceb 	bl	8006e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800249c:	2038      	movs	r0, #56	; 0x38
 800249e:	f004 fd02 	bl	8006ea6 <HAL_NVIC_EnableIRQ>

}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	58024400 	.word	0x58024400

080024b0 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08c      	sub	sp, #48	; 0x30
 80024b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b6:	f107 031c 	add.w	r3, r7, #28
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
 80024c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024c6:	4b87      	ldr	r3, [pc, #540]	; (80026e4 <MX_GPIO_Init+0x234>)
 80024c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024cc:	4a85      	ldr	r2, [pc, #532]	; (80026e4 <MX_GPIO_Init+0x234>)
 80024ce:	f043 0310 	orr.w	r3, r3, #16
 80024d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024d6:	4b83      	ldr	r3, [pc, #524]	; (80026e4 <MX_GPIO_Init+0x234>)
 80024d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024dc:	f003 0310 	and.w	r3, r3, #16
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e4:	4b7f      	ldr	r3, [pc, #508]	; (80026e4 <MX_GPIO_Init+0x234>)
 80024e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ea:	4a7e      	ldr	r2, [pc, #504]	; (80026e4 <MX_GPIO_Init+0x234>)
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024f4:	4b7b      	ldr	r3, [pc, #492]	; (80026e4 <MX_GPIO_Init+0x234>)
 80024f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002502:	4b78      	ldr	r3, [pc, #480]	; (80026e4 <MX_GPIO_Init+0x234>)
 8002504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002508:	4a76      	ldr	r2, [pc, #472]	; (80026e4 <MX_GPIO_Init+0x234>)
 800250a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800250e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002512:	4b74      	ldr	r3, [pc, #464]	; (80026e4 <MX_GPIO_Init+0x234>)
 8002514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002520:	4b70      	ldr	r3, [pc, #448]	; (80026e4 <MX_GPIO_Init+0x234>)
 8002522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002526:	4a6f      	ldr	r2, [pc, #444]	; (80026e4 <MX_GPIO_Init+0x234>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002530:	4b6c      	ldr	r3, [pc, #432]	; (80026e4 <MX_GPIO_Init+0x234>)
 8002532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800253e:	4b69      	ldr	r3, [pc, #420]	; (80026e4 <MX_GPIO_Init+0x234>)
 8002540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002544:	4a67      	ldr	r2, [pc, #412]	; (80026e4 <MX_GPIO_Init+0x234>)
 8002546:	f043 0302 	orr.w	r3, r3, #2
 800254a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800254e:	4b65      	ldr	r3, [pc, #404]	; (80026e4 <MX_GPIO_Init+0x234>)
 8002550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800255c:	4b61      	ldr	r3, [pc, #388]	; (80026e4 <MX_GPIO_Init+0x234>)
 800255e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002562:	4a60      	ldr	r2, [pc, #384]	; (80026e4 <MX_GPIO_Init+0x234>)
 8002564:	f043 0308 	orr.w	r3, r3, #8
 8002568:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800256c:	4b5d      	ldr	r3, [pc, #372]	; (80026e4 <MX_GPIO_Init+0x234>)
 800256e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800257a:	4b5a      	ldr	r3, [pc, #360]	; (80026e4 <MX_GPIO_Init+0x234>)
 800257c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002580:	4a58      	ldr	r2, [pc, #352]	; (80026e4 <MX_GPIO_Init+0x234>)
 8002582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002586:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800258a:	4b56      	ldr	r3, [pc, #344]	; (80026e4 <MX_GPIO_Init+0x234>)
 800258c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002594:	603b      	str	r3, [r7, #0]
 8002596:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8002598:	2200      	movs	r2, #0
 800259a:	f644 2121 	movw	r1, #18977	; 0x4a21
 800259e:	4852      	ldr	r0, [pc, #328]	; (80026e8 <MX_GPIO_Init+0x238>)
 80025a0:	f007 fe90 	bl	800a2c4 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 80025a4:	2200      	movs	r2, #0
 80025a6:	f24c 0102 	movw	r1, #49154	; 0xc002
 80025aa:	4850      	ldr	r0, [pc, #320]	; (80026ec <MX_GPIO_Init+0x23c>)
 80025ac:	f007 fe8a 	bl	800a2c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80025b0:	2200      	movs	r2, #0
 80025b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025b6:	484e      	ldr	r0, [pc, #312]	; (80026f0 <MX_GPIO_Init+0x240>)
 80025b8:	f007 fe84 	bl	800a2c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80025bc:	2200      	movs	r2, #0
 80025be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025c2:	484c      	ldr	r0, [pc, #304]	; (80026f4 <MX_GPIO_Init+0x244>)
 80025c4:	f007 fe7e 	bl	800a2c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 80025c8:	2200      	movs	r2, #0
 80025ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025ce:	484a      	ldr	r0, [pc, #296]	; (80026f8 <MX_GPIO_Init+0x248>)
 80025d0:	f007 fe78 	bl	800a2c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80025d4:	f644 2321 	movw	r3, #18977	; 0x4a21
 80025d8:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025da:	2301      	movs	r3, #1
 80025dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	2300      	movs	r3, #0
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e6:	f107 031c 	add.w	r3, r7, #28
 80025ea:	4619      	mov	r1, r3
 80025ec:	483e      	ldr	r0, [pc, #248]	; (80026e8 <MX_GPIO_Init+0x238>)
 80025ee:	f007 fcb9 	bl	8009f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM_Z_BOTTOM_Pin;
 80025f2:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80025f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002602:	f107 031c 	add.w	r3, r7, #28
 8002606:	4619      	mov	r1, r3
 8002608:	4838      	ldr	r0, [pc, #224]	; (80026ec <MX_GPIO_Init+0x23c>)
 800260a:	f007 fcab 	bl	8009f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 800260e:	f24c 0302 	movw	r3, #49154	; 0xc002
 8002612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002614:	2301      	movs	r3, #1
 8002616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261c:	2300      	movs	r3, #0
 800261e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002620:	f107 031c 	add.w	r3, r7, #28
 8002624:	4619      	mov	r1, r3
 8002626:	4831      	ldr	r0, [pc, #196]	; (80026ec <MX_GPIO_Init+0x23c>)
 8002628:	f007 fc9c 	bl	8009f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800262c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002632:	2301      	movs	r3, #1
 8002634:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263a:	2300      	movs	r3, #0
 800263c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800263e:	f107 031c 	add.w	r3, r7, #28
 8002642:	4619      	mov	r1, r3
 8002644:	482a      	ldr	r0, [pc, #168]	; (80026f0 <MX_GPIO_Init+0x240>)
 8002646:	f007 fc8d 	bl	8009f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800264a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800264e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002650:	2301      	movs	r3, #1
 8002652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002654:	2300      	movs	r3, #0
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002658:	2300      	movs	r3, #0
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800265c:	f107 031c 	add.w	r3, r7, #28
 8002660:	4619      	mov	r1, r3
 8002662:	4824      	ldr	r0, [pc, #144]	; (80026f4 <MX_GPIO_Init+0x244>)
 8002664:	f007 fc7e 	bl	8009f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8002668:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800266c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800266e:	2301      	movs	r3, #1
 8002670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002676:	2300      	movs	r3, #0
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 800267a:	f107 031c 	add.w	r3, r7, #28
 800267e:	4619      	mov	r1, r3
 8002680:	481d      	ldr	r0, [pc, #116]	; (80026f8 <MX_GPIO_Init+0x248>)
 8002682:	f007 fc6f 	bl	8009f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM_Z_TOP_Pin;
 8002686:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800268a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800268c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM_Z_TOP_GPIO_Port, &GPIO_InitStruct);
 8002696:	f107 031c 	add.w	r3, r7, #28
 800269a:	4619      	mov	r1, r3
 800269c:	4817      	ldr	r0, [pc, #92]	; (80026fc <MX_GPIO_Init+0x24c>)
 800269e:	f007 fc61 	bl	8009f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM_LED_Pin|LM_SERVO_Pin;
 80026a2:	23c0      	movs	r3, #192	; 0xc0
 80026a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80026aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b0:	f107 031c 	add.w	r3, r7, #28
 80026b4:	4619      	mov	r1, r3
 80026b6:	480c      	ldr	r0, [pc, #48]	; (80026e8 <MX_GPIO_Init+0x238>)
 80026b8:	f007 fc54 	bl	8009f64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80026bc:	2200      	movs	r2, #0
 80026be:	2100      	movs	r1, #0
 80026c0:	2017      	movs	r0, #23
 80026c2:	f004 fbd6 	bl	8006e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80026c6:	2017      	movs	r0, #23
 80026c8:	f004 fbed 	bl	8006ea6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80026cc:	2200      	movs	r2, #0
 80026ce:	2100      	movs	r1, #0
 80026d0:	2028      	movs	r0, #40	; 0x28
 80026d2:	f004 fbce 	bl	8006e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80026d6:	2028      	movs	r0, #40	; 0x28
 80026d8:	f004 fbe5 	bl	8006ea6 <HAL_NVIC_EnableIRQ>

}
 80026dc:	bf00      	nop
 80026de:	3730      	adds	r7, #48	; 0x30
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	58024400 	.word	0x58024400
 80026e8:	58020400 	.word	0x58020400
 80026ec:	58021000 	.word	0x58021000
 80026f0:	58020c00 	.word	0x58020c00
 80026f4:	58020800 	.word	0x58020800
 80026f8:	58020000 	.word	0x58020000
 80026fc:	58021800 	.word	0x58021800

08002700 <_Z12Insert_queueii>:

volatile float Robot_X, Robot_Y, Robot_Z, Robot_Yaw;
volatile float Planning_q1, Planning_q2, Planning_q3, Planning_q4;

bool Insert_queue(int value, int gripper_value)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
    if (bot == LIMIT - 1)
 800270a:	4b18      	ldr	r3, [pc, #96]	; (800276c <_Z12Insert_queueii+0x6c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b13      	cmp	r3, #19
 8002710:	bf0c      	ite	eq
 8002712:	2301      	moveq	r3, #1
 8002714:	2300      	movne	r3, #0
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <_Z12Insert_queueii+0x20>
    {
        return false;
 800271c:	2300      	movs	r3, #0
 800271e:	e01e      	b.n	800275e <_Z12Insert_queueii+0x5e>
    }
    else
    {
        if (first == - 1)
 8002720:	4b13      	ldr	r3, [pc, #76]	; (8002770 <_Z12Insert_queueii+0x70>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002728:	bf0c      	ite	eq
 800272a:	2301      	moveq	r3, #1
 800272c:	2300      	movne	r3, #0
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <_Z12Insert_queueii+0x3a>
        {
            first = 0;
 8002734:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <_Z12Insert_queueii+0x70>)
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
        }
		bot++;
 800273a:	4b0c      	ldr	r3, [pc, #48]	; (800276c <_Z12Insert_queueii+0x6c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	3301      	adds	r3, #1
 8002740:	4a0a      	ldr	r2, [pc, #40]	; (800276c <_Z12Insert_queueii+0x6c>)
 8002742:	6013      	str	r3, [r2, #0]
		queue[bot] = value;
 8002744:	4b09      	ldr	r3, [pc, #36]	; (800276c <_Z12Insert_queueii+0x6c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	490a      	ldr	r1, [pc, #40]	; (8002774 <_Z12Insert_queueii+0x74>)
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Gripper_State[bot] = gripper_value;
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <_Z12Insert_queueii+0x6c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4908      	ldr	r1, [pc, #32]	; (8002778 <_Z12Insert_queueii+0x78>)
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return true;
 800275c:	2301      	movs	r3, #1
    }
}
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	2400000c 	.word	0x2400000c
 8002770:	24000008 	.word	0x24000008
 8002774:	24000b0c 	.word	0x24000b0c
 8002778:	24000b5c 	.word	0x24000b5c

0800277c <_Z10Call_queuev>:

int Call_queue()
    {
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
    int output;
    if (first == - 1 || first > bot)
 8002782:	4b23      	ldr	r3, [pc, #140]	; (8002810 <_Z10Call_queuev+0x94>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278a:	d005      	beq.n	8002798 <_Z10Call_queuev+0x1c>
 800278c:	4b20      	ldr	r3, [pc, #128]	; (8002810 <_Z10Call_queuev+0x94>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4b20      	ldr	r3, [pc, #128]	; (8002814 <_Z10Call_queuev+0x98>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	dd01      	ble.n	800279c <_Z10Call_queuev+0x20>
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <_Z10Call_queuev+0x22>
 800279c:	2300      	movs	r3, #0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d026      	beq.n	80027f0 <_Z10Call_queuev+0x74>
    {
        printf("Don't have stack in queue \n");
 80027a2:	481d      	ldr	r0, [pc, #116]	; (8002818 <_Z10Call_queuev+0x9c>)
 80027a4:	f010 f9f4 	bl	8012b90 <puts>
        for (int num = 0; num <= bot+1; num++)
 80027a8:	2300      	movs	r3, #0
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	4b19      	ldr	r3, [pc, #100]	; (8002814 <_Z10Call_queuev+0x98>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3301      	adds	r3, #1
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	bfd4      	ite	le
 80027b8:	2301      	movle	r3, #1
 80027ba:	2300      	movgt	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d008      	beq.n	80027d4 <_Z10Call_queuev+0x58>
        {
        	queue[num] = 0;
 80027c2:	4a16      	ldr	r2, [pc, #88]	; (800281c <_Z10Call_queuev+0xa0>)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2100      	movs	r1, #0
 80027c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int num = 0; num <= bot+1; num++)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	3301      	adds	r3, #1
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	e7eb      	b.n	80027ac <_Z10Call_queuev+0x30>
        }
        first = -1;
 80027d4:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <_Z10Call_queuev+0x94>)
 80027d6:	f04f 32ff 	mov.w	r2, #4294967295
 80027da:	601a      	str	r2, [r3, #0]
        bot = -1;
 80027dc:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <_Z10Call_queuev+0x98>)
 80027de:	f04f 32ff 	mov.w	r2, #4294967295
 80027e2:	601a      	str	r2, [r3, #0]
        printf("Clear queue \n");
 80027e4:	480e      	ldr	r0, [pc, #56]	; (8002820 <_Z10Call_queuev+0xa4>)
 80027e6:	f010 f9d3 	bl	8012b90 <puts>
        output = 255;
 80027ea:	23ff      	movs	r3, #255	; 0xff
 80027ec:	607b      	str	r3, [r7, #4]
 80027ee:	e00a      	b.n	8002806 <_Z10Call_queuev+0x8a>
    }
    else
    {
    	output = queue[first];
 80027f0:	4b07      	ldr	r3, [pc, #28]	; (8002810 <_Z10Call_queuev+0x94>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a09      	ldr	r2, [pc, #36]	; (800281c <_Z10Call_queuev+0xa0>)
 80027f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fa:	607b      	str	r3, [r7, #4]
        first++;
 80027fc:	4b04      	ldr	r3, [pc, #16]	; (8002810 <_Z10Call_queuev+0x94>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	3301      	adds	r3, #1
 8002802:	4a03      	ldr	r2, [pc, #12]	; (8002810 <_Z10Call_queuev+0x94>)
 8002804:	6013      	str	r3, [r2, #0]
    }
    return output;
 8002806:	687b      	ldr	r3, [r7, #4]

}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	24000008 	.word	0x24000008
 8002814:	2400000c 	.word	0x2400000c
 8002818:	08014bb0 	.word	0x08014bb0
 800281c:	24000b0c 	.word	0x24000b0c
 8002820:	08014bcc 	.word	0x08014bcc

08002824 <_Z6fcb_IKffff>:
	Robot_Yaw = (J_q1 + J_q3 + J_q4)/1000.0;

}

void fcb_IK(float gripper_linear_x, float gripper_linear_y, float gripper_linear_z, float gripper_angular_yaw)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b092      	sub	sp, #72	; 0x48
 8002828:	af00      	add	r7, sp, #0
 800282a:	ed87 0a03 	vstr	s0, [r7, #12]
 800282e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002832:	ed87 1a01 	vstr	s2, [r7, #4]
 8002836:	edc7 1a00 	vstr	s3, [r7]
	float x = gripper_linear_x/1000.0;
 800283a:	ed97 7a03 	vldr	s14, [r7, #12]
 800283e:	eddf 6a76 	vldr	s13, [pc, #472]	; 8002a18 <_Z6fcb_IKffff+0x1f4>
 8002842:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002846:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float y = gripper_linear_y/1000.0;
 800284a:	ed97 7a02 	vldr	s14, [r7, #8]
 800284e:	eddf 6a72 	vldr	s13, [pc, #456]	; 8002a18 <_Z6fcb_IKffff+0x1f4>
 8002852:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002856:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float z = gripper_linear_z/1000.0;
 800285a:	ed97 7a01 	vldr	s14, [r7, #4]
 800285e:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8002a18 <_Z6fcb_IKffff+0x1f4>
 8002862:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002866:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float yaw = gripper_angular_yaw/1000.0;
 800286a:	ed97 7a00 	vldr	s14, [r7]
 800286e:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8002a18 <_Z6fcb_IKffff+0x1f4>
 8002872:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002876:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	static float L12 = 0.38325;
	static float H1 = 0.125;
	static float H3 = 0.065;
	static float H4 = 0.190;

	float C3 = ((x*x)+(y*y)-(L12*L12)-(L3*L3)) / (2*L12*L3);
 800287a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800287e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002882:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002886:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800288a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800288e:	4b63      	ldr	r3, [pc, #396]	; (8002a1c <_Z6fcb_IKffff+0x1f8>)
 8002890:	edd3 6a00 	vldr	s13, [r3]
 8002894:	4b61      	ldr	r3, [pc, #388]	; (8002a1c <_Z6fcb_IKffff+0x1f8>)
 8002896:	edd3 7a00 	vldr	s15, [r3]
 800289a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800289e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028a2:	4b5f      	ldr	r3, [pc, #380]	; (8002a20 <_Z6fcb_IKffff+0x1fc>)
 80028a4:	edd3 6a00 	vldr	s13, [r3]
 80028a8:	4b5d      	ldr	r3, [pc, #372]	; (8002a20 <_Z6fcb_IKffff+0x1fc>)
 80028aa:	edd3 7a00 	vldr	s15, [r3]
 80028ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028b6:	4b59      	ldr	r3, [pc, #356]	; (8002a1c <_Z6fcb_IKffff+0x1f8>)
 80028b8:	edd3 7a00 	vldr	s15, [r3]
 80028bc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80028c0:	4b57      	ldr	r3, [pc, #348]	; (8002a20 <_Z6fcb_IKffff+0x1fc>)
 80028c2:	edd3 7a00 	vldr	s15, [r3]
 80028c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028ce:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S3 = -1.0 * sqrt(1-(C3*C3));
 80028d2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80028d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e2:	eeb0 0a67 	vmov.f32	s0, s15
 80028e6:	f7fe f822 	bl	800092e <_ZSt4sqrtf>
 80028ea:	eef0 7a40 	vmov.f32	s15, s0
 80028ee:	eef1 7a67 	vneg.f32	s15, s15
 80028f2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float q3 = atan2(S3,C3);
 80028f6:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 80028fa:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 80028fe:	f7fe f802 	bl	8000906 <_ZSt5atan2ff>
 8002902:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

	float L3S3 = L3*S3;
 8002906:	4b46      	ldr	r3, [pc, #280]	; (8002a20 <_Z6fcb_IKffff+0x1fc>)
 8002908:	edd3 7a00 	vldr	s15, [r3]
 800290c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002914:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float L123C3 = L12 + (L3*C3);
 8002918:	4b41      	ldr	r3, [pc, #260]	; (8002a20 <_Z6fcb_IKffff+0x1fc>)
 800291a:	ed93 7a00 	vldr	s14, [r3]
 800291e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002922:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002926:	4b3d      	ldr	r3, [pc, #244]	; (8002a1c <_Z6fcb_IKffff+0x1f8>)
 8002928:	edd3 7a00 	vldr	s15, [r3]
 800292c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002930:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float S1 = (-L3S3*x) + (L123C3*y);
 8002934:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002938:	eeb1 7a67 	vneg.f32	s14, s15
 800293c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002944:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002948:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800294c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002954:	edc7 7a08 	vstr	s15, [r7, #32]
	float C1 = (L3S3*y) + (L123C3*x);
 8002958:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800295c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002960:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002964:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002968:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800296c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002974:	edc7 7a07 	vstr	s15, [r7, #28]
	float q1 = atan2(S1,C1);
 8002978:	edd7 0a07 	vldr	s1, [r7, #28]
 800297c:	ed97 0a08 	vldr	s0, [r7, #32]
 8002980:	f7fd ffc1 	bl	8000906 <_ZSt5atan2ff>
 8002984:	ed87 0a06 	vstr	s0, [r7, #24]
	float q4 = yaw - q1 - q3;
 8002988:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800298c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002990:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002994:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800299c:	edc7 7a05 	vstr	s15, [r7, #20]
	float q2 = z + H4 - H3 - H1;
 80029a0:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <_Z6fcb_IKffff+0x200>)
 80029a2:	ed93 7a00 	vldr	s14, [r3]
 80029a6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80029aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029ae:	4b1e      	ldr	r3, [pc, #120]	; (8002a28 <_Z6fcb_IKffff+0x204>)
 80029b0:	edd3 7a00 	vldr	s15, [r3]
 80029b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029b8:	4b1c      	ldr	r3, [pc, #112]	; (8002a2c <_Z6fcb_IKffff+0x208>)
 80029ba:	edd3 7a00 	vldr	s15, [r3]
 80029be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c2:	edc7 7a04 	vstr	s15, [r7, #16]

	Planning_q1 = q1*1000.0;
 80029c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80029ca:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002a18 <_Z6fcb_IKffff+0x1f4>
 80029ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029d2:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <_Z6fcb_IKffff+0x20c>)
 80029d4:	edc3 7a00 	vstr	s15, [r3]
	Planning_q2 = q2*1000.0;
 80029d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80029dc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002a18 <_Z6fcb_IKffff+0x1f4>
 80029e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029e4:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <_Z6fcb_IKffff+0x210>)
 80029e6:	edc3 7a00 	vstr	s15, [r3]
	Planning_q3 = q3*1000.0;
 80029ea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80029ee:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002a18 <_Z6fcb_IKffff+0x1f4>
 80029f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029f6:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <_Z6fcb_IKffff+0x214>)
 80029f8:	edc3 7a00 	vstr	s15, [r3]
	Planning_q4 = q4*1000.0;
 80029fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a00:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002a18 <_Z6fcb_IKffff+0x1f4>
 8002a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a08:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <_Z6fcb_IKffff+0x218>)
 8002a0a:	edc3 7a00 	vstr	s15, [r3]

}
 8002a0e:	bf00      	nop
 8002a10:	3748      	adds	r7, #72	; 0x48
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	447a0000 	.word	0x447a0000
 8002a1c:	24000218 	.word	0x24000218
 8002a20:	24000214 	.word	0x24000214
 8002a24:	24000224 	.word	0x24000224
 8002a28:	24000220 	.word	0x24000220
 8002a2c:	2400021c 	.word	0x2400021c
 8002a30:	24000bc0 	.word	0x24000bc0
 8002a34:	24000bc4 	.word	0x24000bc4
 8002a38:	24000bc8 	.word	0x24000bc8
 8002a3c:	24000bcc 	.word	0x24000bcc

08002a40 <_Z20Update_State_Machinev>:
float offset_x_new = 0;
float offset_y_new = 0;
int indexy;
float pos_x,pos_y;
void Update_State_Machine()
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	ed2d 8b02 	vpush	{d8}
 8002a46:	af00      	add	r7, sp, #0

    switch (control_state)
 8002a48:	4bbf      	ldr	r3, [pc, #764]	; (8002d48 <_Z20Update_State_Machinev+0x308>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	3b29      	subs	r3, #41	; 0x29
 8002a50:	2b0f      	cmp	r3, #15
 8002a52:	f200 838c 	bhi.w	800316e <_Z20Update_State_Machinev+0x72e>
 8002a56:	a201      	add	r2, pc, #4	; (adr r2, 8002a5c <_Z20Update_State_Machinev+0x1c>)
 8002a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5c:	08002a9d 	.word	0x08002a9d
 8002a60:	08002da9 	.word	0x08002da9
 8002a64:	08002e05 	.word	0x08002e05
 8002a68:	0800316f 	.word	0x0800316f
 8002a6c:	0800316f 	.word	0x0800316f
 8002a70:	0800316f 	.word	0x0800316f
 8002a74:	0800316f 	.word	0x0800316f
 8002a78:	0800316f 	.word	0x0800316f
 8002a7c:	0800316f 	.word	0x0800316f
 8002a80:	0800316f 	.word	0x0800316f
 8002a84:	0800317d 	.word	0x0800317d
 8002a88:	08002e61 	.word	0x08002e61
 8002a8c:	0800317d 	.word	0x0800317d
 8002a90:	08002f83 	.word	0x08002f83
 8002a94:	0800317d 	.word	0x0800317d
 8002a98:	080030c9 	.word	0x080030c9
    {
	case 41: // Update Trajectory
		indexy = Call_queue();
 8002a9c:	f7ff fe6e 	bl	800277c <_Z10Call_queuev>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	4aaa      	ldr	r2, [pc, #680]	; (8002d4c <_Z20Update_State_Machinev+0x30c>)
 8002aa4:	6013      	str	r3, [r2, #0]
		if (indexy != 255)
 8002aa6:	4ba9      	ldr	r3, [pc, #676]	; (8002d4c <_Z20Update_State_Machinev+0x30c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2bff      	cmp	r3, #255	; 0xff
 8002aac:	f000 8131 	beq.w	8002d12 <_Z20Update_State_Machinev+0x2d2>
			{
				test_value_r = radias[indexy];
 8002ab0:	4ba6      	ldr	r3, [pc, #664]	; (8002d4c <_Z20Update_State_Machinev+0x30c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4aa6      	ldr	r2, [pc, #664]	; (8002d50 <_Z20Update_State_Machinev+0x310>)
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	edd3 7a00 	vldr	s15, [r3]
 8002abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ac2:	ee17 2a90 	vmov	r2, s15
 8002ac6:	4ba3      	ldr	r3, [pc, #652]	; (8002d54 <_Z20Update_State_Machinev+0x314>)
 8002ac8:	601a      	str	r2, [r3, #0]
				test_value_theta = theta[indexy];
 8002aca:	4ba0      	ldr	r3, [pc, #640]	; (8002d4c <_Z20Update_State_Machinev+0x30c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4aa2      	ldr	r2, [pc, #648]	; (8002d58 <_Z20Update_State_Machinev+0x318>)
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	edd3 7a00 	vldr	s15, [r3]
 8002ad8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002adc:	ee17 2a90 	vmov	r2, s15
 8002ae0:	4b9e      	ldr	r3, [pc, #632]	; (8002d5c <_Z20Update_State_Machinev+0x31c>)
 8002ae2:	601a      	str	r2, [r3, #0]
				offset_x_new = ((0.16075 * (test_value_r*cos((test_value_theta)/1000.0))) + 0.02289)/10.0 ;
 8002ae4:	4b9b      	ldr	r3, [pc, #620]	; (8002d54 <_Z20Update_State_Machinev+0x314>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	ee07 3a90 	vmov	s15, r3
 8002aec:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002af0:	4b9a      	ldr	r3, [pc, #616]	; (8002d5c <_Z20Update_State_Machinev+0x31c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	ee07 3a90 	vmov	s15, r3
 8002af8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002afc:	ed9f 5b88 	vldr	d5, [pc, #544]	; 8002d20 <_Z20Update_State_Machinev+0x2e0>
 8002b00:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002b04:	eeb0 0b46 	vmov.f64	d0, d6
 8002b08:	f00e fb22 	bl	8011150 <cos>
 8002b0c:	eeb0 7b40 	vmov.f64	d7, d0
 8002b10:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002b14:	ed9f 6b84 	vldr	d6, [pc, #528]	; 8002d28 <_Z20Update_State_Machinev+0x2e8>
 8002b18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b1c:	ed9f 6b84 	vldr	d6, [pc, #528]	; 8002d30 <_Z20Update_State_Machinev+0x2f0>
 8002b20:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002b24:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002b28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002b2c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b30:	4b8b      	ldr	r3, [pc, #556]	; (8002d60 <_Z20Update_State_Machinev+0x320>)
 8002b32:	edc3 7a00 	vstr	s15, [r3]
				offset_y_new = ((0.29560 * (test_value_r*sin((test_value_theta)/1000.0))) + 1.05911)/10.0 ;
 8002b36:	4b87      	ldr	r3, [pc, #540]	; (8002d54 <_Z20Update_State_Machinev+0x314>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	ee07 3a90 	vmov	s15, r3
 8002b3e:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002b42:	4b86      	ldr	r3, [pc, #536]	; (8002d5c <_Z20Update_State_Machinev+0x31c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	ee07 3a90 	vmov	s15, r3
 8002b4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b4e:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8002d20 <_Z20Update_State_Machinev+0x2e0>
 8002b52:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002b56:	eeb0 0b46 	vmov.f64	d0, d6
 8002b5a:	f00e fb41 	bl	80111e0 <sin>
 8002b5e:	eeb0 7b40 	vmov.f64	d7, d0
 8002b62:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002b66:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8002d38 <_Z20Update_State_Machinev+0x2f8>
 8002b6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b6e:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8002d40 <_Z20Update_State_Machinev+0x300>
 8002b72:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002b76:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002b7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002b7e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b82:	4b78      	ldr	r3, [pc, #480]	; (8002d64 <_Z20Update_State_Machinev+0x324>)
 8002b84:	edc3 7a00 	vstr	s15, [r3]
				pos_x = (test_value_r*cos((test_value_theta)/1000.0)) + offset_x + offset_x_new;
 8002b88:	4b72      	ldr	r3, [pc, #456]	; (8002d54 <_Z20Update_State_Machinev+0x314>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	ee07 3a90 	vmov	s15, r3
 8002b90:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002b94:	4b71      	ldr	r3, [pc, #452]	; (8002d5c <_Z20Update_State_Machinev+0x31c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	ee07 3a90 	vmov	s15, r3
 8002b9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ba0:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8002d20 <_Z20Update_State_Machinev+0x2e0>
 8002ba4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002ba8:	eeb0 0b46 	vmov.f64	d0, d6
 8002bac:	f00e fad0 	bl	8011150 <cos>
 8002bb0:	eeb0 7b40 	vmov.f64	d7, d0
 8002bb4:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002bb8:	4b6b      	ldr	r3, [pc, #428]	; (8002d68 <_Z20Update_State_Machinev+0x328>)
 8002bba:	edd3 7a00 	vldr	s15, [r3]
 8002bbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bc2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002bc6:	4b66      	ldr	r3, [pc, #408]	; (8002d60 <_Z20Update_State_Machinev+0x320>)
 8002bc8:	edd3 7a00 	vldr	s15, [r3]
 8002bcc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bd0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002bd4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002bd8:	4b64      	ldr	r3, [pc, #400]	; (8002d6c <_Z20Update_State_Machinev+0x32c>)
 8002bda:	edc3 7a00 	vstr	s15, [r3]
				pos_y = (test_value_r*sin((test_value_theta)/1000.0)) + offset_y + offset_y_new;
 8002bde:	4b5d      	ldr	r3, [pc, #372]	; (8002d54 <_Z20Update_State_Machinev+0x314>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	ee07 3a90 	vmov	s15, r3
 8002be6:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002bea:	4b5c      	ldr	r3, [pc, #368]	; (8002d5c <_Z20Update_State_Machinev+0x31c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	ee07 3a90 	vmov	s15, r3
 8002bf2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002bf6:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8002d20 <_Z20Update_State_Machinev+0x2e0>
 8002bfa:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002bfe:	eeb0 0b46 	vmov.f64	d0, d6
 8002c02:	f00e faed 	bl	80111e0 <sin>
 8002c06:	eeb0 7b40 	vmov.f64	d7, d0
 8002c0a:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002c0e:	4b58      	ldr	r3, [pc, #352]	; (8002d70 <_Z20Update_State_Machinev+0x330>)
 8002c10:	edd3 7a00 	vldr	s15, [r3]
 8002c14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c18:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002c1c:	4b51      	ldr	r3, [pc, #324]	; (8002d64 <_Z20Update_State_Machinev+0x324>)
 8002c1e:	edd3 7a00 	vldr	s15, [r3]
 8002c22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c26:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c2e:	4b51      	ldr	r3, [pc, #324]	; (8002d74 <_Z20Update_State_Machinev+0x334>)
 8002c30:	edc3 7a00 	vstr	s15, [r3]
				fcb_IK(pos_x, pos_y, 0, 0);
 8002c34:	4b4d      	ldr	r3, [pc, #308]	; (8002d6c <_Z20Update_State_Machinev+0x32c>)
 8002c36:	edd3 7a00 	vldr	s15, [r3]
 8002c3a:	4b4e      	ldr	r3, [pc, #312]	; (8002d74 <_Z20Update_State_Machinev+0x334>)
 8002c3c:	ed93 7a00 	vldr	s14, [r3]
 8002c40:	eddf 1a4d 	vldr	s3, [pc, #308]	; 8002d78 <_Z20Update_State_Machinev+0x338>
 8002c44:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8002d78 <_Z20Update_State_Machinev+0x338>
 8002c48:	eef0 0a47 	vmov.f32	s1, s14
 8002c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c50:	f7ff fde8 	bl	8002824 <_Z6fcb_IKffff>
				Max_Time = 7;
 8002c54:	4b49      	ldr	r3, [pc, #292]	; (8002d7c <_Z20Update_State_Machinev+0x33c>)
 8002c56:	4a4a      	ldr	r2, [pc, #296]	; (8002d80 <_Z20Update_State_Machinev+0x340>)
 8002c58:	601a      	str	r2, [r3, #0]
				fcb_joint1.UpdateQuinticCoff(Max_Time, fcb_joint1.Encoder, Planning_q1, 0.0, 0.0, 0.0, 0.0);
 8002c5a:	4b48      	ldr	r3, [pc, #288]	; (8002d7c <_Z20Update_State_Machinev+0x33c>)
 8002c5c:	edd3 7a00 	vldr	s15, [r3]
 8002c60:	4b48      	ldr	r3, [pc, #288]	; (8002d84 <_Z20Update_State_Machinev+0x344>)
 8002c62:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002c66:	4b48      	ldr	r3, [pc, #288]	; (8002d88 <_Z20Update_State_Machinev+0x348>)
 8002c68:	edd3 6a00 	vldr	s13, [r3]
 8002c6c:	ed9f 3a42 	vldr	s6, [pc, #264]	; 8002d78 <_Z20Update_State_Machinev+0x338>
 8002c70:	eddf 2a41 	vldr	s5, [pc, #260]	; 8002d78 <_Z20Update_State_Machinev+0x338>
 8002c74:	ed9f 2a40 	vldr	s4, [pc, #256]	; 8002d78 <_Z20Update_State_Machinev+0x338>
 8002c78:	eddf 1a3f 	vldr	s3, [pc, #252]	; 8002d78 <_Z20Update_State_Machinev+0x338>
 8002c7c:	eeb0 1a66 	vmov.f32	s2, s13
 8002c80:	eef0 0a47 	vmov.f32	s1, s14
 8002c84:	eeb0 0a67 	vmov.f32	s0, s15
 8002c88:	483e      	ldr	r0, [pc, #248]	; (8002d84 <_Z20Update_State_Machinev+0x344>)
 8002c8a:	f7fe f807 	bl	8000c9c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint3.UpdateQuinticCoff(Max_Time, fcb_joint3.Encoder, Planning_q3, 0.0, 0.0, 0.0, 0.0);
 8002c8e:	4b3b      	ldr	r3, [pc, #236]	; (8002d7c <_Z20Update_State_Machinev+0x33c>)
 8002c90:	edd3 7a00 	vldr	s15, [r3]
 8002c94:	4b3d      	ldr	r3, [pc, #244]	; (8002d8c <_Z20Update_State_Machinev+0x34c>)
 8002c96:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002c9a:	4b3d      	ldr	r3, [pc, #244]	; (8002d90 <_Z20Update_State_Machinev+0x350>)
 8002c9c:	edd3 6a00 	vldr	s13, [r3]
 8002ca0:	ed9f 3a35 	vldr	s6, [pc, #212]	; 8002d78 <_Z20Update_State_Machinev+0x338>
 8002ca4:	eddf 2a34 	vldr	s5, [pc, #208]	; 8002d78 <_Z20Update_State_Machinev+0x338>
 8002ca8:	ed9f 2a33 	vldr	s4, [pc, #204]	; 8002d78 <_Z20Update_State_Machinev+0x338>
 8002cac:	eddf 1a32 	vldr	s3, [pc, #200]	; 8002d78 <_Z20Update_State_Machinev+0x338>
 8002cb0:	eeb0 1a66 	vmov.f32	s2, s13
 8002cb4:	eef0 0a47 	vmov.f32	s1, s14
 8002cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cbc:	4833      	ldr	r0, [pc, #204]	; (8002d8c <_Z20Update_State_Machinev+0x34c>)
 8002cbe:	f7fd ffed 	bl	8000c9c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint4.UpdateQuinticCoff(Max_Time, fcb_joint4.Encoder, Planning_q4, 0.0, 0.0, 0.0, 0.0);
 8002cc2:	4b2e      	ldr	r3, [pc, #184]	; (8002d7c <_Z20Update_State_Machinev+0x33c>)
 8002cc4:	edd3 7a00 	vldr	s15, [r3]
 8002cc8:	4b32      	ldr	r3, [pc, #200]	; (8002d94 <_Z20Update_State_Machinev+0x354>)
 8002cca:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002cce:	4b32      	ldr	r3, [pc, #200]	; (8002d98 <_Z20Update_State_Machinev+0x358>)
 8002cd0:	edd3 6a00 	vldr	s13, [r3]
 8002cd4:	ed9f 3a28 	vldr	s6, [pc, #160]	; 8002d78 <_Z20Update_State_Machinev+0x338>
 8002cd8:	eddf 2a27 	vldr	s5, [pc, #156]	; 8002d78 <_Z20Update_State_Machinev+0x338>
 8002cdc:	ed9f 2a26 	vldr	s4, [pc, #152]	; 8002d78 <_Z20Update_State_Machinev+0x338>
 8002ce0:	eddf 1a25 	vldr	s3, [pc, #148]	; 8002d78 <_Z20Update_State_Machinev+0x338>
 8002ce4:	eeb0 1a66 	vmov.f32	s2, s13
 8002ce8:	eef0 0a47 	vmov.f32	s1, s14
 8002cec:	eeb0 0a67 	vmov.f32	s0, s15
 8002cf0:	4828      	ldr	r0, [pc, #160]	; (8002d94 <_Z20Update_State_Machinev+0x354>)
 8002cf2:	f7fd ffd3 	bl	8000c9c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				t = 0;
 8002cf6:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <_Z20Update_State_Machinev+0x35c>)
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
				joint13_on = true;
 8002cfe:	4b28      	ldr	r3, [pc, #160]	; (8002da0 <_Z20Update_State_Machinev+0x360>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim14);
 8002d04:	4827      	ldr	r0, [pc, #156]	; (8002da4 <_Z20Update_State_Machinev+0x364>)
 8002d06:	f00a fa9f 	bl	800d248 <HAL_TIM_Base_Start_IT>
				control_state = 52;
 8002d0a:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <_Z20Update_State_Machinev+0x308>)
 8002d0c:	2234      	movs	r2, #52	; 0x34
 8002d0e:	701a      	strb	r2, [r3, #0]
			}

//		Planning_q1
//		Planning_q3

		break;
 8002d10:	e235      	b.n	800317e <_Z20Update_State_Machinev+0x73e>
				control_state = 0;
 8002d12:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <_Z20Update_State_Machinev+0x308>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
		break;
 8002d18:	e231      	b.n	800317e <_Z20Update_State_Machinev+0x73e>
 8002d1a:	bf00      	nop
 8002d1c:	f3af 8000 	nop.w
 8002d20:	00000000 	.word	0x00000000
 8002d24:	408f4000 	.word	0x408f4000
 8002d28:	bc6a7efa 	.word	0xbc6a7efa
 8002d2c:	3fc49374 	.word	0x3fc49374
 8002d30:	e59f2baa 	.word	0xe59f2baa
 8002d34:	3f977079 	.word	0x3f977079
 8002d38:	432ca57a 	.word	0x432ca57a
 8002d3c:	3fd2eb1c 	.word	0x3fd2eb1c
 8002d40:	53cddd6e 	.word	0x53cddd6e
 8002d44:	3ff0f21d 	.word	0x3ff0f21d
 8002d48:	24000bb4 	.word	0x24000bb4
 8002d4c:	24000bd8 	.word	0x24000bd8
 8002d50:	24000110 	.word	0x24000110
 8002d54:	24000bac 	.word	0x24000bac
 8002d58:	24000010 	.word	0x24000010
 8002d5c:	24000bb0 	.word	0x24000bb0
 8002d60:	24000bd0 	.word	0x24000bd0
 8002d64:	24000bd4 	.word	0x24000bd4
 8002d68:	24000228 	.word	0x24000228
 8002d6c:	24000bdc 	.word	0x24000bdc
 8002d70:	2400022c 	.word	0x2400022c
 8002d74:	24000be0 	.word	0x24000be0
 8002d78:	00000000 	.word	0x00000000
 8002d7c:	24000ab8 	.word	0x24000ab8
 8002d80:	40e00000 	.word	0x40e00000
 8002d84:	2400053c 	.word	0x2400053c
 8002d88:	24000bc0 	.word	0x24000bc0
 8002d8c:	24000704 	.word	0x24000704
 8002d90:	24000bc8 	.word	0x24000bc8
 8002d94:	240007e8 	.word	0x240007e8
 8002d98:	24000bcc 	.word	0x24000bcc
 8002d9c:	24000bbc 	.word	0x24000bbc
 8002da0:	24000b0a 	.word	0x24000b0a
 8002da4:	24001038 	.word	0x24001038

	case 42:
		Max_Time = 12;
 8002da8:	4bb2      	ldr	r3, [pc, #712]	; (8003074 <_Z20Update_State_Machinev+0x634>)
 8002daa:	4ab3      	ldr	r2, [pc, #716]	; (8003078 <_Z20Update_State_Machinev+0x638>)
 8002dac:	601a      	str	r2, [r3, #0]
		joint13_on = false;
 8002dae:	4bb3      	ldr	r3, [pc, #716]	; (800307c <_Z20Update_State_Machinev+0x63c>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]
		fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder, Setpoint_J2_Down, 0.0, 0.0, 0.0, 0.0);
 8002db4:	4baf      	ldr	r3, [pc, #700]	; (8003074 <_Z20Update_State_Machinev+0x634>)
 8002db6:	edd3 7a00 	vldr	s15, [r3]
 8002dba:	4bb1      	ldr	r3, [pc, #708]	; (8003080 <_Z20Update_State_Machinev+0x640>)
 8002dbc:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002dc0:	4bb0      	ldr	r3, [pc, #704]	; (8003084 <_Z20Update_State_Machinev+0x644>)
 8002dc2:	edd3 6a00 	vldr	s13, [r3]
 8002dc6:	ed9f 3ab0 	vldr	s6, [pc, #704]	; 8003088 <_Z20Update_State_Machinev+0x648>
 8002dca:	eddf 2aaf 	vldr	s5, [pc, #700]	; 8003088 <_Z20Update_State_Machinev+0x648>
 8002dce:	ed9f 2aae 	vldr	s4, [pc, #696]	; 8003088 <_Z20Update_State_Machinev+0x648>
 8002dd2:	eddf 1aad 	vldr	s3, [pc, #692]	; 8003088 <_Z20Update_State_Machinev+0x648>
 8002dd6:	eeb0 1a66 	vmov.f32	s2, s13
 8002dda:	eef0 0a47 	vmov.f32	s1, s14
 8002dde:	eeb0 0a67 	vmov.f32	s0, s15
 8002de2:	48a7      	ldr	r0, [pc, #668]	; (8003080 <_Z20Update_State_Machinev+0x640>)
 8002de4:	f7fd ff5a 	bl	8000c9c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
		t = 0;
 8002de8:	4ba8      	ldr	r3, [pc, #672]	; (800308c <_Z20Update_State_Machinev+0x64c>)
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 8002df0:	48a7      	ldr	r0, [pc, #668]	; (8003090 <_Z20Update_State_Machinev+0x650>)
 8002df2:	f00a fa29 	bl	800d248 <HAL_TIM_Base_Start_IT>
		control_state = 54;
 8002df6:	4ba7      	ldr	r3, [pc, #668]	; (8003094 <_Z20Update_State_Machinev+0x654>)
 8002df8:	2236      	movs	r2, #54	; 0x36
 8002dfa:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002dfc:	4ba6      	ldr	r3, [pc, #664]	; (8003098 <_Z20Update_State_Machinev+0x658>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	701a      	strb	r2, [r3, #0]
		break;
 8002e02:	e1bc      	b.n	800317e <_Z20Update_State_Machinev+0x73e>

	case 43:
		Max_Time = 12;
 8002e04:	4b9b      	ldr	r3, [pc, #620]	; (8003074 <_Z20Update_State_Machinev+0x634>)
 8002e06:	4a9c      	ldr	r2, [pc, #624]	; (8003078 <_Z20Update_State_Machinev+0x638>)
 8002e08:	601a      	str	r2, [r3, #0]
		joint13_on = false;
 8002e0a:	4b9c      	ldr	r3, [pc, #624]	; (800307c <_Z20Update_State_Machinev+0x63c>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
		fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder, Setpoint_J2_Up, 0.0, 0.0, 0.0, 0.0);
 8002e10:	4b98      	ldr	r3, [pc, #608]	; (8003074 <_Z20Update_State_Machinev+0x634>)
 8002e12:	edd3 7a00 	vldr	s15, [r3]
 8002e16:	4b9a      	ldr	r3, [pc, #616]	; (8003080 <_Z20Update_State_Machinev+0x640>)
 8002e18:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002e1c:	4b9f      	ldr	r3, [pc, #636]	; (800309c <_Z20Update_State_Machinev+0x65c>)
 8002e1e:	edd3 6a00 	vldr	s13, [r3]
 8002e22:	ed9f 3a99 	vldr	s6, [pc, #612]	; 8003088 <_Z20Update_State_Machinev+0x648>
 8002e26:	eddf 2a98 	vldr	s5, [pc, #608]	; 8003088 <_Z20Update_State_Machinev+0x648>
 8002e2a:	ed9f 2a97 	vldr	s4, [pc, #604]	; 8003088 <_Z20Update_State_Machinev+0x648>
 8002e2e:	eddf 1a96 	vldr	s3, [pc, #600]	; 8003088 <_Z20Update_State_Machinev+0x648>
 8002e32:	eeb0 1a66 	vmov.f32	s2, s13
 8002e36:	eef0 0a47 	vmov.f32	s1, s14
 8002e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e3e:	4890      	ldr	r0, [pc, #576]	; (8003080 <_Z20Update_State_Machinev+0x640>)
 8002e40:	f7fd ff2c 	bl	8000c9c <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
		t = 0;
 8002e44:	4b91      	ldr	r3, [pc, #580]	; (800308c <_Z20Update_State_Machinev+0x64c>)
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 8002e4c:	4890      	ldr	r0, [pc, #576]	; (8003090 <_Z20Update_State_Machinev+0x650>)
 8002e4e:	f00a f9fb 	bl	800d248 <HAL_TIM_Base_Start_IT>
		control_state = 56;
 8002e52:	4b90      	ldr	r3, [pc, #576]	; (8003094 <_Z20Update_State_Machinev+0x654>)
 8002e54:	2238      	movs	r2, #56	; 0x38
 8002e56:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002e58:	4b8f      	ldr	r3, [pc, #572]	; (8003098 <_Z20Update_State_Machinev+0x658>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
		break;
 8002e5e:	e18e      	b.n	800317e <_Z20Update_State_Machinev+0x73e>

//		State_FIN = true;
		break;

	case 52:
		HAL_TIM_Base_Stop_IT(&htim14);
 8002e60:	488b      	ldr	r0, [pc, #556]	; (8003090 <_Z20Update_State_Machinev+0x650>)
 8002e62:	f00a fa69 	bl	800d338 <HAL_TIM_Base_Stop_IT>
		fcb_joint1.Goal_Velocity = 0;
 8002e66:	4b8e      	ldr	r3, [pc, #568]	; (80030a0 <_Z20Update_State_Machinev+0x660>)
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Velocity = 0;
 8002e6e:	4b8d      	ldr	r3, [pc, #564]	; (80030a4 <_Z20Update_State_Machinev+0x664>)
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Velocity = 0;
 8002e76:	4b8c      	ldr	r3, [pc, #560]	; (80030a8 <_Z20Update_State_Machinev+0x668>)
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint1.Output_Joint_W = 0;
 8002e7e:	4b88      	ldr	r3, [pc, #544]	; (80030a0 <_Z20Update_State_Machinev+0x660>)
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 8002e88:	4b87      	ldr	r3, [pc, #540]	; (80030a8 <_Z20Update_State_Machinev+0x668>)
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 8002e92:	4b84      	ldr	r3, [pc, #528]	; (80030a4 <_Z20Update_State_Machinev+0x664>)
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 8002e9c:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8003088 <_Z20Update_State_Machinev+0x648>
 8002ea0:	4882      	ldr	r0, [pc, #520]	; (80030ac <_Z20Update_State_Machinev+0x66c>)
 8002ea2:	f7ff fa09 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 8002ea6:	ed9f 0a78 	vldr	s0, [pc, #480]	; 8003088 <_Z20Update_State_Machinev+0x648>
 8002eaa:	4881      	ldr	r0, [pc, #516]	; (80030b0 <_Z20Update_State_Machinev+0x670>)
 8002eac:	f7ff fa04 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 8002eb0:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8003088 <_Z20Update_State_Machinev+0x648>
 8002eb4:	487f      	ldr	r0, [pc, #508]	; (80030b4 <_Z20Update_State_Machinev+0x674>)
 8002eb6:	f7ff f9ff 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint1.C0 = fcb_joint1.kalman_pos;
 8002eba:	4b79      	ldr	r3, [pc, #484]	; (80030a0 <_Z20Update_State_Machinev+0x660>)
 8002ebc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002ec0:	4a77      	ldr	r2, [pc, #476]	; (80030a0 <_Z20Update_State_Machinev+0x660>)
 8002ec2:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint4.C0 = fcb_joint4.kalman_pos;
 8002ec6:	4b77      	ldr	r3, [pc, #476]	; (80030a4 <_Z20Update_State_Machinev+0x664>)
 8002ec8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002ecc:	4a75      	ldr	r2, [pc, #468]	; (80030a4 <_Z20Update_State_Machinev+0x664>)
 8002ece:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint3.C0 = fcb_joint3.kalman_pos;
 8002ed2:	4b75      	ldr	r3, [pc, #468]	; (80030a8 <_Z20Update_State_Machinev+0x668>)
 8002ed4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002ed8:	4a73      	ldr	r2, [pc, #460]	; (80030a8 <_Z20Update_State_Machinev+0x668>)
 8002eda:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
//		fcb_joint1.C0 = fcb_joint1.Goal_Position;
//		fcb_joint4.C0 = fcb_joint4.Goal_Position;
//		fcb_joint3.C0 = fcb_joint3.Goal_Position;

		fcb_joint1.C1 = 0;
 8002ede:	4b70      	ldr	r3, [pc, #448]	; (80030a0 <_Z20Update_State_Machinev+0x660>)
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint3.C1 = 0;
 8002ee8:	4b6f      	ldr	r3, [pc, #444]	; (80030a8 <_Z20Update_State_Machinev+0x668>)
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint1.C2 = 0;
 8002ef2:	4b6b      	ldr	r3, [pc, #428]	; (80030a0 <_Z20Update_State_Machinev+0x660>)
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint3.C2 = 0;
 8002efc:	4b6a      	ldr	r3, [pc, #424]	; (80030a8 <_Z20Update_State_Machinev+0x668>)
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint1.C3 = 0;
 8002f06:	4b66      	ldr	r3, [pc, #408]	; (80030a0 <_Z20Update_State_Machinev+0x660>)
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint3.C3 = 0;
 8002f10:	4b65      	ldr	r3, [pc, #404]	; (80030a8 <_Z20Update_State_Machinev+0x668>)
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint1.C4 = 0;
 8002f1a:	4b61      	ldr	r3, [pc, #388]	; (80030a0 <_Z20Update_State_Machinev+0x660>)
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint3.C4 = 0;
 8002f24:	4b60      	ldr	r3, [pc, #384]	; (80030a8 <_Z20Update_State_Machinev+0x668>)
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint1.C5 = 0;
 8002f2e:	4b5c      	ldr	r3, [pc, #368]	; (80030a0 <_Z20Update_State_Machinev+0x660>)
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint3.C5 = 0;
 8002f38:	4b5b      	ldr	r3, [pc, #364]	; (80030a8 <_Z20Update_State_Machinev+0x668>)
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint4.C1 = 0;
 8002f42:	4b58      	ldr	r3, [pc, #352]	; (80030a4 <_Z20Update_State_Machinev+0x664>)
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint4.C2 = 0;
 8002f4c:	4b55      	ldr	r3, [pc, #340]	; (80030a4 <_Z20Update_State_Machinev+0x664>)
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint4.C3 = 0;
 8002f56:	4b53      	ldr	r3, [pc, #332]	; (80030a4 <_Z20Update_State_Machinev+0x664>)
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint4.C4 = 0;
 8002f60:	4b50      	ldr	r3, [pc, #320]	; (80030a4 <_Z20Update_State_Machinev+0x664>)
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint4.C5 = 0;
 8002f6a:	4b4e      	ldr	r3, [pc, #312]	; (80030a4 <_Z20Update_State_Machinev+0x664>)
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

		control_state = 42;
 8002f74:	4b47      	ldr	r3, [pc, #284]	; (8003094 <_Z20Update_State_Machinev+0x654>)
 8002f76:	222a      	movs	r2, #42	; 0x2a
 8002f78:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002f7a:	4b47      	ldr	r3, [pc, #284]	; (8003098 <_Z20Update_State_Machinev+0x658>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	701a      	strb	r2, [r3, #0]
		break;
 8002f80:	e0fd      	b.n	800317e <_Z20Update_State_Machinev+0x73e>

//		State_FIN = true;
		break;

	case 54:
		HAL_TIM_Base_Stop_IT(&htim14);
 8002f82:	4843      	ldr	r0, [pc, #268]	; (8003090 <_Z20Update_State_Machinev+0x650>)
 8002f84:	f00a f9d8 	bl	800d338 <HAL_TIM_Base_Stop_IT>
		fcb_joint2.Goal_Velocity = 0;
 8002f88:	4b3d      	ldr	r3, [pc, #244]	; (8003080 <_Z20Update_State_Machinev+0x640>)
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 8002f90:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8003088 <_Z20Update_State_Machinev+0x648>
 8002f94:	4848      	ldr	r0, [pc, #288]	; (80030b8 <_Z20Update_State_Machinev+0x678>)
 8002f96:	f7ff f98f 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 8002f9a:	4b39      	ldr	r3, [pc, #228]	; (8003080 <_Z20Update_State_Machinev+0x640>)
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	4a38      	ldr	r2, [pc, #224]	; (8003080 <_Z20Update_State_Machinev+0x640>)
 8002fa0:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.Output_Joint_W = 0;
 8002fa4:	4b3e      	ldr	r3, [pc, #248]	; (80030a0 <_Z20Update_State_Machinev+0x660>)
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 8002fae:	4b3e      	ldr	r3, [pc, #248]	; (80030a8 <_Z20Update_State_Machinev+0x668>)
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 8002fb8:	4b3a      	ldr	r3, [pc, #232]	; (80030a4 <_Z20Update_State_Machinev+0x664>)
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 8002fc2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8003088 <_Z20Update_State_Machinev+0x648>
 8002fc6:	4839      	ldr	r0, [pc, #228]	; (80030ac <_Z20Update_State_Machinev+0x66c>)
 8002fc8:	f7ff f976 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 8002fcc:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8003088 <_Z20Update_State_Machinev+0x648>
 8002fd0:	4837      	ldr	r0, [pc, #220]	; (80030b0 <_Z20Update_State_Machinev+0x670>)
 8002fd2:	f7ff f971 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 8002fd6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8003088 <_Z20Update_State_Machinev+0x648>
 8002fda:	4836      	ldr	r0, [pc, #216]	; (80030b4 <_Z20Update_State_Machinev+0x674>)
 8002fdc:	f7ff f96c 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		if (Gripper_State[first-1] == 1)
 8002fe0:	4b36      	ldr	r3, [pc, #216]	; (80030bc <_Z20Update_State_Machinev+0x67c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	4a36      	ldr	r2, [pc, #216]	; (80030c0 <_Z20Update_State_Machinev+0x680>)
 8002fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <_Z20Update_State_Machinev+0x5c2>
		{
			gripper.GripperClose();
 8002ffa:	4832      	ldr	r0, [pc, #200]	; (80030c4 <_Z20Update_State_Machinev+0x684>)
 8002ffc:	f7fe fdf2 	bl	8001be4 <_ZN10ServoMotor12GripperCloseEv>
 8003000:	e00f      	b.n	8003022 <_Z20Update_State_Machinev+0x5e2>
		}
		else if (Gripper_State[first-1] == 2)
 8003002:	4b2e      	ldr	r3, [pc, #184]	; (80030bc <_Z20Update_State_Machinev+0x67c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3b01      	subs	r3, #1
 8003008:	4a2d      	ldr	r2, [pc, #180]	; (80030c0 <_Z20Update_State_Machinev+0x680>)
 800300a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800300e:	2b02      	cmp	r3, #2
 8003010:	bf0c      	ite	eq
 8003012:	2301      	moveq	r3, #1
 8003014:	2300      	movne	r3, #0
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <_Z20Update_State_Machinev+0x5e2>
		{
			gripper.GripperOpen();
 800301c:	4829      	ldr	r0, [pc, #164]	; (80030c4 <_Z20Update_State_Machinev+0x684>)
 800301e:	f7fe fdf7 	bl	8001c10 <_ZN10ServoMotor11GripperOpenEv>
		}
//		for (int i =0 ;i <1000000;i++) {}
		fcb_joint2.C0 = 0;
 8003022:	4b17      	ldr	r3, [pc, #92]	; (8003080 <_Z20Update_State_Machinev+0x640>)
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		fcb_joint2.C1 = 0;
 800302c:	4b14      	ldr	r3, [pc, #80]	; (8003080 <_Z20Update_State_Machinev+0x640>)
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 8003036:	4b12      	ldr	r3, [pc, #72]	; (8003080 <_Z20Update_State_Machinev+0x640>)
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 8003040:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <_Z20Update_State_Machinev+0x640>)
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <_Z20Update_State_Machinev+0x640>)
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 8003054:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <_Z20Update_State_Machinev+0x640>)
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 800305e:	4b08      	ldr	r3, [pc, #32]	; (8003080 <_Z20Update_State_Machinev+0x640>)
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 43;
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <_Z20Update_State_Machinev+0x654>)
 8003068:	222b      	movs	r2, #43	; 0x2b
 800306a:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 800306c:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <_Z20Update_State_Machinev+0x658>)
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
		break;
 8003072:	e084      	b.n	800317e <_Z20Update_State_Machinev+0x73e>
 8003074:	24000ab8 	.word	0x24000ab8
 8003078:	41400000 	.word	0x41400000
 800307c:	24000b0a 	.word	0x24000b0a
 8003080:	24000620 	.word	0x24000620
 8003084:	24000004 	.word	0x24000004
 8003088:	00000000 	.word	0x00000000
 800308c:	24000bbc 	.word	0x24000bbc
 8003090:	24001038 	.word	0x24001038
 8003094:	24000bb4 	.word	0x24000bb4
 8003098:	24000ab4 	.word	0x24000ab4
 800309c:	24000000 	.word	0x24000000
 80030a0:	2400053c 	.word	0x2400053c
 80030a4:	240007e8 	.word	0x240007e8
 80030a8:	24000704 	.word	0x24000704
 80030ac:	2400049c 	.word	0x2400049c
 80030b0:	24000514 	.word	0x24000514
 80030b4:	240004ec 	.word	0x240004ec
 80030b8:	240004c4 	.word	0x240004c4
 80030bc:	24000008 	.word	0x24000008
 80030c0:	24000b5c 	.word	0x24000b5c
 80030c4:	24000a94 	.word	0x24000a94
	case 55:

		break;

	case 56:
		fcb_joint2.Goal_Velocity = 0;
 80030c8:	4b2f      	ldr	r3, [pc, #188]	; (8003188 <_Z20Update_State_Machinev+0x748>)
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 80030d0:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800318c <_Z20Update_State_Machinev+0x74c>
 80030d4:	482e      	ldr	r0, [pc, #184]	; (8003190 <_Z20Update_State_Machinev+0x750>)
 80030d6:	f7ff f8ef 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 80030da:	4b2b      	ldr	r3, [pc, #172]	; (8003188 <_Z20Update_State_Machinev+0x748>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	4a2a      	ldr	r2, [pc, #168]	; (8003188 <_Z20Update_State_Machinev+0x748>)
 80030e0:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.Output_Joint_W = 0;
 80030e4:	4b2b      	ldr	r3, [pc, #172]	; (8003194 <_Z20Update_State_Machinev+0x754>)
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 80030ee:	4b2a      	ldr	r3, [pc, #168]	; (8003198 <_Z20Update_State_Machinev+0x758>)
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 80030f8:	4b28      	ldr	r3, [pc, #160]	; (800319c <_Z20Update_State_Machinev+0x75c>)
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 8003102:	ed9f 0a22 	vldr	s0, [pc, #136]	; 800318c <_Z20Update_State_Machinev+0x74c>
 8003106:	4826      	ldr	r0, [pc, #152]	; (80031a0 <_Z20Update_State_Machinev+0x760>)
 8003108:	f7ff f8d6 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 800310c:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800318c <_Z20Update_State_Machinev+0x74c>
 8003110:	4824      	ldr	r0, [pc, #144]	; (80031a4 <_Z20Update_State_Machinev+0x764>)
 8003112:	f7ff f8d1 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 8003116:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800318c <_Z20Update_State_Machinev+0x74c>
 800311a:	4823      	ldr	r0, [pc, #140]	; (80031a8 <_Z20Update_State_Machinev+0x768>)
 800311c:	f7ff f8cc 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		HAL_TIM_Base_Stop_IT(&htim14);
 8003120:	4822      	ldr	r0, [pc, #136]	; (80031ac <_Z20Update_State_Machinev+0x76c>)
 8003122:	f00a f909 	bl	800d338 <HAL_TIM_Base_Stop_IT>
		fcb_joint2.C1 = 0;
 8003126:	4b18      	ldr	r3, [pc, #96]	; (8003188 <_Z20Update_State_Machinev+0x748>)
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 8003130:	4b15      	ldr	r3, [pc, #84]	; (8003188 <_Z20Update_State_Machinev+0x748>)
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 800313a:	4b13      	ldr	r3, [pc, #76]	; (8003188 <_Z20Update_State_Machinev+0x748>)
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 8003144:	4b10      	ldr	r3, [pc, #64]	; (8003188 <_Z20Update_State_Machinev+0x748>)
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 800314e:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <_Z20Update_State_Machinev+0x748>)
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 8003158:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <_Z20Update_State_Machinev+0x748>)
 800315a:	f04f 0200 	mov.w	r2, #0
 800315e:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 41;
 8003160:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <_Z20Update_State_Machinev+0x770>)
 8003162:	2229      	movs	r2, #41	; 0x29
 8003164:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8003166:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <_Z20Update_State_Machinev+0x774>)
 8003168:	2201      	movs	r2, #1
 800316a:	701a      	strb	r2, [r3, #0]
		break;
 800316c:	e007      	b.n	800317e <_Z20Update_State_Machinev+0x73e>

	default:
		control_state = 0;
 800316e:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <_Z20Update_State_Machinev+0x770>)
 8003170:	2200      	movs	r2, #0
 8003172:	701a      	strb	r2, [r3, #0]
		State_FIN = false;
 8003174:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <_Z20Update_State_Machinev+0x774>)
 8003176:	2200      	movs	r2, #0
 8003178:	701a      	strb	r2, [r3, #0]
		break;
 800317a:	e000      	b.n	800317e <_Z20Update_State_Machinev+0x73e>
		break;
 800317c:	bf00      	nop
    }
}
 800317e:	bf00      	nop
 8003180:	46bd      	mov	sp, r7
 8003182:	ecbd 8b02 	vpop	{d8}
 8003186:	bd80      	pop	{r7, pc}
 8003188:	24000620 	.word	0x24000620
 800318c:	00000000 	.word	0x00000000
 8003190:	240004c4 	.word	0x240004c4
 8003194:	2400053c 	.word	0x2400053c
 8003198:	24000704 	.word	0x24000704
 800319c:	240007e8 	.word	0x240007e8
 80031a0:	2400049c 	.word	0x2400049c
 80031a4:	24000514 	.word	0x24000514
 80031a8:	240004ec 	.word	0x240004ec
 80031ac:	24001038 	.word	0x24001038
 80031b0:	24000bb4 	.word	0x24000bb4
 80031b4:	24000ab4 	.word	0x24000ab4

080031b8 <HAL_UARTEx_RxEventCallback>:

#endif



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80031b8:	b5b0      	push	{r4, r5, r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a8f      	ldr	r2, [pc, #572]	; (8003404 <HAL_UARTEx_RxEventCallback+0x24c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	f040 8188 	bne.w	80034de <HAL_UARTEx_RxEventCallback+0x326>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 80031ce:	4a8e      	ldr	r2, [pc, #568]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 80031d0:	4b8e      	ldr	r3, [pc, #568]	; (800340c <HAL_UARTEx_RxEventCallback+0x254>)
 80031d2:	4614      	mov	r4, r2
 80031d4:	461d      	mov	r5, r3
 80031d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031da:	682b      	ldr	r3, [r5, #0]
 80031dc:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 80031de:	2214      	movs	r2, #20
 80031e0:	2100      	movs	r1, #0
 80031e2:	488a      	ldr	r0, [pc, #552]	; (800340c <HAL_UARTEx_RxEventCallback+0x254>)
 80031e4:	f00f f81c 	bl	8012220 <memset>
		if (Size - 2 > 0 && Size <= Rx_BUFFER_SIZE) {// Check if there's some data.
 80031e8:	887b      	ldrh	r3, [r7, #2]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	f240 8166 	bls.w	80034bc <HAL_UARTEx_RxEventCallback+0x304>
 80031f0:	887b      	ldrh	r3, [r7, #2]
 80031f2:	2b14      	cmp	r3, #20
 80031f4:	f200 8162 	bhi.w	80034bc <HAL_UARTEx_RxEventCallback+0x304>
			cmdDataSize = Size - 2;	// Calculate data length.
 80031f8:	887b      	ldrh	r3, [r7, #2]
 80031fa:	3b02      	subs	r3, #2
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	4b84      	ldr	r3, [pc, #528]	; (8003410 <HAL_UARTEx_RxEventCallback+0x258>)
 8003200:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) Old_Rx_Buffer,
 8003202:	4b83      	ldr	r3, [pc, #524]	; (8003410 <HAL_UARTEx_RxEventCallback+0x258>)
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	b29b      	uxth	r3, r3
 8003208:	461a      	mov	r2, r3
 800320a:	497f      	ldr	r1, [pc, #508]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 800320c:	4881      	ldr	r0, [pc, #516]	; (8003414 <HAL_UARTEx_RxEventCallback+0x25c>)
 800320e:	f003 fed5 	bl	8006fbc <HAL_CRC_Calculate>
 8003212:	4603      	mov	r3, r0
 8003214:	b29a      	uxth	r2, r3
 8003216:	4b80      	ldr	r3, [pc, #512]	; (8003418 <HAL_UARTEx_RxEventCallback+0x260>)
 8003218:	801a      	strh	r2, [r3, #0]
					cmdDataSize); // Calculate data only by STM32 Hardware CRC.
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 800321a:	4b7d      	ldr	r3, [pc, #500]	; (8003410 <HAL_UARTEx_RxEventCallback+0x258>)
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	4b79      	ldr	r3, [pc, #484]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 8003224:	5c9b      	ldrb	r3, [r3, r2]
 8003226:	021b      	lsls	r3, r3, #8
					| Old_Rx_Buffer[cmdDataSize + 1]; // Read Expected CRC from Protocol.
 8003228:	b21a      	sxth	r2, r3
 800322a:	4b79      	ldr	r3, [pc, #484]	; (8003410 <HAL_UARTEx_RxEventCallback+0x258>)
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	b29b      	uxth	r3, r3
 8003230:	3301      	adds	r3, #1
 8003232:	4975      	ldr	r1, [pc, #468]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 8003234:	5ccb      	ldrb	r3, [r1, r3]
 8003236:	b21b      	sxth	r3, r3
 8003238:	4313      	orrs	r3, r2
 800323a:	b21b      	sxth	r3, r3
 800323c:	b29a      	uxth	r2, r3
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 800323e:	4b77      	ldr	r3, [pc, #476]	; (800341c <HAL_UARTEx_RxEventCallback+0x264>)
 8003240:	801a      	strh	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8003242:	4b75      	ldr	r3, [pc, #468]	; (8003418 <HAL_UARTEx_RxEventCallback+0x260>)
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	b29a      	uxth	r2, r3
 8003248:	4b74      	ldr	r3, [pc, #464]	; (800341c <HAL_UARTEx_RxEventCallback+0x264>)
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	b29b      	uxth	r3, r3
 800324e:	429a      	cmp	r2, r3
 8003250:	bf0c      	ite	eq
 8003252:	2301      	moveq	r3, #1
 8003254:	2300      	movne	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 8151 	beq.w	8003500 <HAL_UARTEx_RxEventCallback+0x348>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800325e:	2201      	movs	r2, #1
 8003260:	2102      	movs	r1, #2
 8003262:	486f      	ldr	r0, [pc, #444]	; (8003420 <HAL_UARTEx_RxEventCallback+0x268>)
 8003264:	f007 f82e 	bl	800a2c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003268:	2200      	movs	r2, #0
 800326a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800326e:	486d      	ldr	r0, [pc, #436]	; (8003424 <HAL_UARTEx_RxEventCallback+0x26c>)
 8003270:	f007 f828 	bl	800a2c4 <HAL_GPIO_WritePin>
//				}
//				else if (Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3) {// Linear Jog Yaw
////					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
//					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
//				}
				if (Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5) // Joint Jog 4q
 8003274:	4b64      	ldr	r3, [pc, #400]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b61      	cmp	r3, #97	; 0x61
 800327a:	d106      	bne.n	800328a <HAL_UARTEx_RxEventCallback+0xd2>
 800327c:	4b64      	ldr	r3, [pc, #400]	; (8003410 <HAL_UARTEx_RxEventCallback+0x258>)
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b05      	cmp	r3, #5
 8003284:	d101      	bne.n	800328a <HAL_UARTEx_RxEventCallback+0xd2>
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <HAL_UARTEx_RxEventCallback+0xd4>
 800328a:	2300      	movs	r3, #0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d014      	beq.n	80032ba <HAL_UARTEx_RxEventCallback+0x102>
				{
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 8003290:	4b5d      	ldr	r3, [pc, #372]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 8003292:	785b      	ldrb	r3, [r3, #1]
 8003294:	b25a      	sxtb	r2, r3
 8003296:	4b64      	ldr	r3, [pc, #400]	; (8003428 <HAL_UARTEx_RxEventCallback+0x270>)
 8003298:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 800329a:	4b5b      	ldr	r3, [pc, #364]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 800329c:	789b      	ldrb	r3, [r3, #2]
 800329e:	b25a      	sxtb	r2, r3
 80032a0:	4b62      	ldr	r3, [pc, #392]	; (800342c <HAL_UARTEx_RxEventCallback+0x274>)
 80032a2:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 80032a4:	4b58      	ldr	r3, [pc, #352]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 80032a6:	78db      	ldrb	r3, [r3, #3]
 80032a8:	b25a      	sxtb	r2, r3
 80032aa:	4b61      	ldr	r3, [pc, #388]	; (8003430 <HAL_UARTEx_RxEventCallback+0x278>)
 80032ac:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 80032ae:	4b56      	ldr	r3, [pc, #344]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 80032b0:	791b      	ldrb	r3, [r3, #4]
 80032b2:	b25a      	sxtb	r2, r3
 80032b4:	4b5f      	ldr	r3, [pc, #380]	; (8003434 <HAL_UARTEx_RxEventCallback+0x27c>)
 80032b6:	701a      	strb	r2, [r3, #0]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4] ;
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6] ;
					pyaw = Old_Rx_Buffer[7];
				}

			}
 80032b8:	e122      	b.n	8003500 <HAL_UARTEx_RxEventCallback+0x348>
				else if (Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5) // Linear Jog X,Y,Z,Yaw
 80032ba:	4b53      	ldr	r3, [pc, #332]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b71      	cmp	r3, #113	; 0x71
 80032c0:	d106      	bne.n	80032d0 <HAL_UARTEx_RxEventCallback+0x118>
 80032c2:	4b53      	ldr	r3, [pc, #332]	; (8003410 <HAL_UARTEx_RxEventCallback+0x258>)
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b05      	cmp	r3, #5
 80032ca:	d101      	bne.n	80032d0 <HAL_UARTEx_RxEventCallback+0x118>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <HAL_UARTEx_RxEventCallback+0x11a>
 80032d0:	2300      	movs	r3, #0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d014      	beq.n	8003300 <HAL_UARTEx_RxEventCallback+0x148>
					dx = Old_Rx_Buffer[1];
 80032d6:	4b4c      	ldr	r3, [pc, #304]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 80032d8:	785b      	ldrb	r3, [r3, #1]
 80032da:	b25a      	sxtb	r2, r3
 80032dc:	4b56      	ldr	r3, [pc, #344]	; (8003438 <HAL_UARTEx_RxEventCallback+0x280>)
 80032de:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 80032e0:	4b49      	ldr	r3, [pc, #292]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 80032e2:	789b      	ldrb	r3, [r3, #2]
 80032e4:	b25a      	sxtb	r2, r3
 80032e6:	4b55      	ldr	r3, [pc, #340]	; (800343c <HAL_UARTEx_RxEventCallback+0x284>)
 80032e8:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 80032ea:	4b47      	ldr	r3, [pc, #284]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 80032ec:	78db      	ldrb	r3, [r3, #3]
 80032ee:	b25a      	sxtb	r2, r3
 80032f0:	4b53      	ldr	r3, [pc, #332]	; (8003440 <HAL_UARTEx_RxEventCallback+0x288>)
 80032f2:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 80032f4:	4b44      	ldr	r3, [pc, #272]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 80032f6:	791b      	ldrb	r3, [r3, #4]
 80032f8:	b25a      	sxtb	r2, r3
 80032fa:	4b52      	ldr	r3, [pc, #328]	; (8003444 <HAL_UARTEx_RxEventCallback+0x28c>)
 80032fc:	701a      	strb	r2, [r3, #0]
			}
 80032fe:	e0ff      	b.n	8003500 <HAL_UARTEx_RxEventCallback+0x348>
				else if(Old_Rx_Buffer[0] == 0x85 && cmdDataSize == 2)
 8003300:	4b41      	ldr	r3, [pc, #260]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b85      	cmp	r3, #133	; 0x85
 8003306:	d106      	bne.n	8003316 <HAL_UARTEx_RxEventCallback+0x15e>
 8003308:	4b41      	ldr	r3, [pc, #260]	; (8003410 <HAL_UARTEx_RxEventCallback+0x258>)
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d101      	bne.n	8003316 <HAL_UARTEx_RxEventCallback+0x15e>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <HAL_UARTEx_RxEventCallback+0x160>
 8003316:	2300      	movs	r3, #0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_UARTEx_RxEventCallback+0x16c>
					control_state = 51;
 800331c:	4b4a      	ldr	r3, [pc, #296]	; (8003448 <HAL_UARTEx_RxEventCallback+0x290>)
 800331e:	2233      	movs	r2, #51	; 0x33
 8003320:	701a      	strb	r2, [r3, #0]
			}
 8003322:	e0ed      	b.n	8003500 <HAL_UARTEx_RxEventCallback+0x348>
				else if(Old_Rx_Buffer[0] == 0x86 && cmdDataSize == 3) //
 8003324:	4b38      	ldr	r3, [pc, #224]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b86      	cmp	r3, #134	; 0x86
 800332a:	d106      	bne.n	800333a <HAL_UARTEx_RxEventCallback+0x182>
 800332c:	4b38      	ldr	r3, [pc, #224]	; (8003410 <HAL_UARTEx_RxEventCallback+0x258>)
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b03      	cmp	r3, #3
 8003334:	d101      	bne.n	800333a <HAL_UARTEx_RxEventCallback+0x182>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <HAL_UARTEx_RxEventCallback+0x184>
 800333a:	2300      	movs	r3, #0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <HAL_UARTEx_RxEventCallback+0x19e>
					int value_input = Old_Rx_Buffer[1];
 8003340:	4b31      	ldr	r3, [pc, #196]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 8003342:	785b      	ldrb	r3, [r3, #1]
 8003344:	613b      	str	r3, [r7, #16]
					int value_gripper = Old_Rx_Buffer[2];
 8003346:	4b30      	ldr	r3, [pc, #192]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 8003348:	789b      	ldrb	r3, [r3, #2]
 800334a:	60fb      	str	r3, [r7, #12]
					Insert_queue(value_input, value_gripper);
 800334c:	68f9      	ldr	r1, [r7, #12]
 800334e:	6938      	ldr	r0, [r7, #16]
 8003350:	f7ff f9d6 	bl	8002700 <_Z12Insert_queueii>
			}
 8003354:	e0d4      	b.n	8003500 <HAL_UARTEx_RxEventCallback+0x348>
				else if(Old_Rx_Buffer[0] == 0x87 && cmdDataSize == 2)
 8003356:	4b2c      	ldr	r3, [pc, #176]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b87      	cmp	r3, #135	; 0x87
 800335c:	d106      	bne.n	800336c <HAL_UARTEx_RxEventCallback+0x1b4>
 800335e:	4b2c      	ldr	r3, [pc, #176]	; (8003410 <HAL_UARTEx_RxEventCallback+0x258>)
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	b29b      	uxth	r3, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d101      	bne.n	800336c <HAL_UARTEx_RxEventCallback+0x1b4>
 8003368:	2301      	movs	r3, #1
 800336a:	e000      	b.n	800336e <HAL_UARTEx_RxEventCallback+0x1b6>
 800336c:	2300      	movs	r3, #0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d008      	beq.n	8003384 <HAL_UARTEx_RxEventCallback+0x1cc>
					char state_input = Old_Rx_Buffer[1];
 8003372:	4b25      	ldr	r3, [pc, #148]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 8003374:	785b      	ldrb	r3, [r3, #1]
 8003376:	75fb      	strb	r3, [r7, #23]
					control_state = state_input;
 8003378:	4a33      	ldr	r2, [pc, #204]	; (8003448 <HAL_UARTEx_RxEventCallback+0x290>)
 800337a:	7dfb      	ldrb	r3, [r7, #23]
 800337c:	7013      	strb	r3, [r2, #0]
					Update_State_Machine();
 800337e:	f7ff fb5f 	bl	8002a40 <_Z20Update_State_Machinev>
			}
 8003382:	e0bd      	b.n	8003500 <HAL_UARTEx_RxEventCallback+0x348>
				else if(Old_Rx_Buffer[0] == 0x89 && cmdDataSize == 2)
 8003384:	4b20      	ldr	r3, [pc, #128]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b89      	cmp	r3, #137	; 0x89
 800338a:	d106      	bne.n	800339a <HAL_UARTEx_RxEventCallback+0x1e2>
 800338c:	4b20      	ldr	r3, [pc, #128]	; (8003410 <HAL_UARTEx_RxEventCallback+0x258>)
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d101      	bne.n	800339a <HAL_UARTEx_RxEventCallback+0x1e2>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <HAL_UARTEx_RxEventCallback+0x1e4>
 800339a:	2300      	movs	r3, #0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <HAL_UARTEx_RxEventCallback+0x1ee>
					Update_State_Machine();
 80033a0:	f7ff fb4e 	bl	8002a40 <_Z20Update_State_Machinev>
			}
 80033a4:	e0ac      	b.n	8003500 <HAL_UARTEx_RxEventCallback+0x348>
				else if (Old_Rx_Buffer[0] == 0x81 && cmdDataSize == 2) // Servo
 80033a6:	4b18      	ldr	r3, [pc, #96]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b81      	cmp	r3, #129	; 0x81
 80033ac:	d106      	bne.n	80033bc <HAL_UARTEx_RxEventCallback+0x204>
 80033ae:	4b18      	ldr	r3, [pc, #96]	; (8003410 <HAL_UARTEx_RxEventCallback+0x258>)
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d101      	bne.n	80033bc <HAL_UARTEx_RxEventCallback+0x204>
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <HAL_UARTEx_RxEventCallback+0x206>
 80033bc:	2300      	movs	r3, #0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d015      	beq.n	80033ee <HAL_UARTEx_RxEventCallback+0x236>
					gripperstate = Old_Rx_Buffer[1];
 80033c2:	4b11      	ldr	r3, [pc, #68]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 80033c4:	785b      	ldrb	r3, [r3, #1]
 80033c6:	461a      	mov	r2, r3
 80033c8:	4b20      	ldr	r3, [pc, #128]	; (800344c <HAL_UARTEx_RxEventCallback+0x294>)
 80033ca:	601a      	str	r2, [r3, #0]
					if (gripperstate == 0)
 80033cc:	4b1f      	ldr	r3, [pc, #124]	; (800344c <HAL_UARTEx_RxEventCallback+0x294>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_UARTEx_RxEventCallback+0x22e>
						gripper.GripperOpen();
 80033de:	481c      	ldr	r0, [pc, #112]	; (8003450 <HAL_UARTEx_RxEventCallback+0x298>)
 80033e0:	f7fe fc16 	bl	8001c10 <_ZN10ServoMotor11GripperOpenEv>
			}
 80033e4:	e08c      	b.n	8003500 <HAL_UARTEx_RxEventCallback+0x348>
						gripper.GripperClose();
 80033e6:	481a      	ldr	r0, [pc, #104]	; (8003450 <HAL_UARTEx_RxEventCallback+0x298>)
 80033e8:	f7fe fbfc 	bl	8001be4 <_ZN10ServoMotor12GripperCloseEv>
			}
 80033ec:	e088      	b.n	8003500 <HAL_UARTEx_RxEventCallback+0x348>
				else if (Old_Rx_Buffer[0] == 0x91 && cmdDataSize == 8)
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_UARTEx_RxEventCallback+0x250>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b91      	cmp	r3, #145	; 0x91
 80033f4:	d12e      	bne.n	8003454 <HAL_UARTEx_RxEventCallback+0x29c>
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_UARTEx_RxEventCallback+0x258>)
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d129      	bne.n	8003454 <HAL_UARTEx_RxEventCallback+0x29c>
 8003400:	2301      	movs	r3, #1
 8003402:	e028      	b.n	8003456 <HAL_UARTEx_RxEventCallback+0x29e>
 8003404:	24001360 	.word	0x24001360
 8003408:	24000adc 	.word	0x24000adc
 800340c:	24000af0 	.word	0x24000af0
 8003410:	24000b04 	.word	0x24000b04
 8003414:	24000bf0 	.word	0x24000bf0
 8003418:	24000ad4 	.word	0x24000ad4
 800341c:	24000ad6 	.word	0x24000ad6
 8003420:	58021000 	.word	0x58021000
 8003424:	58020400 	.word	0x58020400
 8003428:	24000abc 	.word	0x24000abc
 800342c:	24000abd 	.word	0x24000abd
 8003430:	24000abe 	.word	0x24000abe
 8003434:	24000abf 	.word	0x24000abf
 8003438:	24000ac0 	.word	0x24000ac0
 800343c:	24000ac1 	.word	0x24000ac1
 8003440:	24000ac2 	.word	0x24000ac2
 8003444:	24000ac3 	.word	0x24000ac3
 8003448:	24000bb4 	.word	0x24000bb4
 800344c:	24000ad8 	.word	0x24000ad8
 8003450:	24000a94 	.word	0x24000a94
 8003454:	2300      	movs	r3, #0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d052      	beq.n	8003500 <HAL_UARTEx_RxEventCallback+0x348>
					px = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2] ;
 800345a:	4b5f      	ldr	r3, [pc, #380]	; (80035d8 <HAL_UARTEx_RxEventCallback+0x420>)
 800345c:	785b      	ldrb	r3, [r3, #1]
 800345e:	021b      	lsls	r3, r3, #8
 8003460:	4a5d      	ldr	r2, [pc, #372]	; (80035d8 <HAL_UARTEx_RxEventCallback+0x420>)
 8003462:	7892      	ldrb	r2, [r2, #2]
 8003464:	4313      	orrs	r3, r2
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800346e:	4b5b      	ldr	r3, [pc, #364]	; (80035dc <HAL_UARTEx_RxEventCallback+0x424>)
 8003470:	edc3 7a00 	vstr	s15, [r3]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4] ;
 8003474:	4b58      	ldr	r3, [pc, #352]	; (80035d8 <HAL_UARTEx_RxEventCallback+0x420>)
 8003476:	78db      	ldrb	r3, [r3, #3]
 8003478:	021b      	lsls	r3, r3, #8
 800347a:	4a57      	ldr	r2, [pc, #348]	; (80035d8 <HAL_UARTEx_RxEventCallback+0x420>)
 800347c:	7912      	ldrb	r2, [r2, #4]
 800347e:	4313      	orrs	r3, r2
 8003480:	ee07 3a90 	vmov	s15, r3
 8003484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003488:	4b55      	ldr	r3, [pc, #340]	; (80035e0 <HAL_UARTEx_RxEventCallback+0x428>)
 800348a:	edc3 7a00 	vstr	s15, [r3]
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6] ;
 800348e:	4b52      	ldr	r3, [pc, #328]	; (80035d8 <HAL_UARTEx_RxEventCallback+0x420>)
 8003490:	795b      	ldrb	r3, [r3, #5]
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	4a50      	ldr	r2, [pc, #320]	; (80035d8 <HAL_UARTEx_RxEventCallback+0x420>)
 8003496:	7992      	ldrb	r2, [r2, #6]
 8003498:	4313      	orrs	r3, r2
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034a2:	4b50      	ldr	r3, [pc, #320]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x42c>)
 80034a4:	edc3 7a00 	vstr	s15, [r3]
					pyaw = Old_Rx_Buffer[7];
 80034a8:	4b4b      	ldr	r3, [pc, #300]	; (80035d8 <HAL_UARTEx_RxEventCallback+0x420>)
 80034aa:	79db      	ldrb	r3, [r3, #7]
 80034ac:	ee07 3a90 	vmov	s15, r3
 80034b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b4:	4b4c      	ldr	r3, [pc, #304]	; (80035e8 <HAL_UARTEx_RxEventCallback+0x430>)
 80034b6:	edc3 7a00 	vstr	s15, [r3]
			}
 80034ba:	e021      	b.n	8003500 <HAL_UARTEx_RxEventCallback+0x348>
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80034bc:	2200      	movs	r2, #0
 80034be:	2102      	movs	r1, #2
 80034c0:	484a      	ldr	r0, [pc, #296]	; (80035ec <HAL_UARTEx_RxEventCallback+0x434>)
 80034c2:	f006 feff 	bl	800a2c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80034c6:	2201      	movs	r2, #1
 80034c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034cc:	4848      	ldr	r0, [pc, #288]	; (80035f0 <HAL_UARTEx_RxEventCallback+0x438>)
 80034ce:	f006 fef9 	bl	800a2c4 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "CRC16 error\n", 12);
 80034d2:	220c      	movs	r2, #12
 80034d4:	4947      	ldr	r1, [pc, #284]	; (80035f4 <HAL_UARTEx_RxEventCallback+0x43c>)
 80034d6:	4848      	ldr	r0, [pc, #288]	; (80035f8 <HAL_UARTEx_RxEventCallback+0x440>)
 80034d8:	f00b fb38 	bl	800eb4c <HAL_UART_Transmit_DMA>
 80034dc:	e011      	b.n	8003502 <HAL_UARTEx_RxEventCallback+0x34a>
		}
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80034de:	2200      	movs	r2, #0
 80034e0:	2102      	movs	r1, #2
 80034e2:	4842      	ldr	r0, [pc, #264]	; (80035ec <HAL_UARTEx_RxEventCallback+0x434>)
 80034e4:	f006 feee 	bl	800a2c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80034e8:	2201      	movs	r2, #1
 80034ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034ee:	4840      	ldr	r0, [pc, #256]	; (80035f0 <HAL_UARTEx_RxEventCallback+0x438>)
 80034f0:	f006 fee8 	bl	800a2c4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "Protocol match error\n", 21);
 80034f4:	2215      	movs	r2, #21
 80034f6:	4941      	ldr	r1, [pc, #260]	; (80035fc <HAL_UARTEx_RxEventCallback+0x444>)
 80034f8:	483f      	ldr	r0, [pc, #252]	; (80035f8 <HAL_UARTEx_RxEventCallback+0x440>)
 80034fa:	f00b fb27 	bl	800eb4c <HAL_UART_Transmit_DMA>
 80034fe:	e000      	b.n	8003502 <HAL_UARTEx_RxEventCallback+0x34a>
			}
 8003500:	bf00      	nop
	}
	/* start the DMA again */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 8003502:	2214      	movs	r2, #20
 8003504:	493e      	ldr	r1, [pc, #248]	; (8003600 <HAL_UARTEx_RxEventCallback+0x448>)
 8003506:	483c      	ldr	r0, [pc, #240]	; (80035f8 <HAL_UARTEx_RxEventCallback+0x440>)
 8003508:	f00d fa7d 	bl	8010a06 <HAL_UARTEx_ReceiveToIdle_DMA>
			Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800350c:	4b3d      	ldr	r3, [pc, #244]	; (8003604 <HAL_UARTEx_RxEventCallback+0x44c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a3d      	ldr	r2, [pc, #244]	; (8003608 <HAL_UARTEx_RxEventCallback+0x450>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d04a      	beq.n	80035ac <HAL_UARTEx_RxEventCallback+0x3f4>
 8003516:	4b3b      	ldr	r3, [pc, #236]	; (8003604 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a3c      	ldr	r2, [pc, #240]	; (800360c <HAL_UARTEx_RxEventCallback+0x454>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d045      	beq.n	80035ac <HAL_UARTEx_RxEventCallback+0x3f4>
 8003520:	4b38      	ldr	r3, [pc, #224]	; (8003604 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a3a      	ldr	r2, [pc, #232]	; (8003610 <HAL_UARTEx_RxEventCallback+0x458>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d040      	beq.n	80035ac <HAL_UARTEx_RxEventCallback+0x3f4>
 800352a:	4b36      	ldr	r3, [pc, #216]	; (8003604 <HAL_UARTEx_RxEventCallback+0x44c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a39      	ldr	r2, [pc, #228]	; (8003614 <HAL_UARTEx_RxEventCallback+0x45c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d03b      	beq.n	80035ac <HAL_UARTEx_RxEventCallback+0x3f4>
 8003534:	4b33      	ldr	r3, [pc, #204]	; (8003604 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a37      	ldr	r2, [pc, #220]	; (8003618 <HAL_UARTEx_RxEventCallback+0x460>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d036      	beq.n	80035ac <HAL_UARTEx_RxEventCallback+0x3f4>
 800353e:	4b31      	ldr	r3, [pc, #196]	; (8003604 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a36      	ldr	r2, [pc, #216]	; (800361c <HAL_UARTEx_RxEventCallback+0x464>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d031      	beq.n	80035ac <HAL_UARTEx_RxEventCallback+0x3f4>
 8003548:	4b2e      	ldr	r3, [pc, #184]	; (8003604 <HAL_UARTEx_RxEventCallback+0x44c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a34      	ldr	r2, [pc, #208]	; (8003620 <HAL_UARTEx_RxEventCallback+0x468>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d02c      	beq.n	80035ac <HAL_UARTEx_RxEventCallback+0x3f4>
 8003552:	4b2c      	ldr	r3, [pc, #176]	; (8003604 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a33      	ldr	r2, [pc, #204]	; (8003624 <HAL_UARTEx_RxEventCallback+0x46c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d027      	beq.n	80035ac <HAL_UARTEx_RxEventCallback+0x3f4>
 800355c:	4b29      	ldr	r3, [pc, #164]	; (8003604 <HAL_UARTEx_RxEventCallback+0x44c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a31      	ldr	r2, [pc, #196]	; (8003628 <HAL_UARTEx_RxEventCallback+0x470>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d022      	beq.n	80035ac <HAL_UARTEx_RxEventCallback+0x3f4>
 8003566:	4b27      	ldr	r3, [pc, #156]	; (8003604 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a30      	ldr	r2, [pc, #192]	; (800362c <HAL_UARTEx_RxEventCallback+0x474>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d01d      	beq.n	80035ac <HAL_UARTEx_RxEventCallback+0x3f4>
 8003570:	4b24      	ldr	r3, [pc, #144]	; (8003604 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a2e      	ldr	r2, [pc, #184]	; (8003630 <HAL_UARTEx_RxEventCallback+0x478>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d018      	beq.n	80035ac <HAL_UARTEx_RxEventCallback+0x3f4>
 800357a:	4b22      	ldr	r3, [pc, #136]	; (8003604 <HAL_UARTEx_RxEventCallback+0x44c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a2d      	ldr	r2, [pc, #180]	; (8003634 <HAL_UARTEx_RxEventCallback+0x47c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d013      	beq.n	80035ac <HAL_UARTEx_RxEventCallback+0x3f4>
 8003584:	4b1f      	ldr	r3, [pc, #124]	; (8003604 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a2b      	ldr	r2, [pc, #172]	; (8003638 <HAL_UARTEx_RxEventCallback+0x480>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00e      	beq.n	80035ac <HAL_UARTEx_RxEventCallback+0x3f4>
 800358e:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a2a      	ldr	r2, [pc, #168]	; (800363c <HAL_UARTEx_RxEventCallback+0x484>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d009      	beq.n	80035ac <HAL_UARTEx_RxEventCallback+0x3f4>
 8003598:	4b1a      	ldr	r3, [pc, #104]	; (8003604 <HAL_UARTEx_RxEventCallback+0x44c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a28      	ldr	r2, [pc, #160]	; (8003640 <HAL_UARTEx_RxEventCallback+0x488>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d004      	beq.n	80035ac <HAL_UARTEx_RxEventCallback+0x3f4>
 80035a2:	4b18      	ldr	r3, [pc, #96]	; (8003604 <HAL_UARTEx_RxEventCallback+0x44c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a27      	ldr	r2, [pc, #156]	; (8003644 <HAL_UARTEx_RxEventCallback+0x48c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d108      	bne.n	80035be <HAL_UARTEx_RxEventCallback+0x406>
 80035ac:	4b15      	ldr	r3, [pc, #84]	; (8003604 <HAL_UARTEx_RxEventCallback+0x44c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	4b14      	ldr	r3, [pc, #80]	; (8003604 <HAL_UARTEx_RxEventCallback+0x44c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0208 	bic.w	r2, r2, #8
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	e008      	b.n	80035d0 <HAL_UARTEx_RxEventCallback+0x418>
 80035be:	4b11      	ldr	r3, [pc, #68]	; (8003604 <HAL_UARTEx_RxEventCallback+0x44c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <HAL_UARTEx_RxEventCallback+0x44c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0204 	bic.w	r2, r2, #4
 80035cc:	601a      	str	r2, [r3, #0]
}
 80035ce:	bf00      	nop
 80035d0:	bf00      	nop
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bdb0      	pop	{r4, r5, r7, pc}
 80035d8:	24000adc 	.word	0x24000adc
 80035dc:	24000ac4 	.word	0x24000ac4
 80035e0:	24000ac8 	.word	0x24000ac8
 80035e4:	24000acc 	.word	0x24000acc
 80035e8:	24000ad0 	.word	0x24000ad0
 80035ec:	58021000 	.word	0x58021000
 80035f0:	58020400 	.word	0x58020400
 80035f4:	08014bdc 	.word	0x08014bdc
 80035f8:	24001360 	.word	0x24001360
 80035fc:	08014bec 	.word	0x08014bec
 8003600:	24000af0 	.word	0x24000af0
 8003604:	240012e8 	.word	0x240012e8
 8003608:	40020010 	.word	0x40020010
 800360c:	40020028 	.word	0x40020028
 8003610:	40020040 	.word	0x40020040
 8003614:	40020058 	.word	0x40020058
 8003618:	40020070 	.word	0x40020070
 800361c:	40020088 	.word	0x40020088
 8003620:	400200a0 	.word	0x400200a0
 8003624:	400200b8 	.word	0x400200b8
 8003628:	40020410 	.word	0x40020410
 800362c:	40020428 	.word	0x40020428
 8003630:	40020440 	.word	0x40020440
 8003634:	40020458 	.word	0x40020458
 8003638:	40020470 	.word	0x40020470
 800363c:	40020488 	.word	0x40020488
 8003640:	400204a0 	.word	0x400204a0
 8003644:	400204b8 	.word	0x400204b8

08003648 <HAL_TIM_PeriodElapsedCallback>:





void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003648:	b580      	push	{r7, lr}
 800364a:	b08a      	sub	sp, #40	; 0x28
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]

	if (htim == &htim7) {	//

	}

	if (htim == &htim5) {	//
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4ac9      	ldr	r2, [pc, #804]	; (8003978 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003654:	4293      	cmp	r3, r2
 8003656:	f040 80bc 	bne.w	80037d2 <HAL_TIM_PeriodElapsedCallback+0x18a>
		encoderJ1.AMT21_Read();
 800365a:	48c8      	ldr	r0, [pc, #800]	; (800397c <HAL_TIM_PeriodElapsedCallback+0x334>)
 800365c:	f7fd f833 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8003660:	48c6      	ldr	r0, [pc, #792]	; (800397c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003662:	f7fd f85f 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003666:	4603      	mov	r3, r0
 8003668:	461a      	mov	r2, r3
 800366a:	4bc5      	ldr	r3, [pc, #788]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800366c:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 800366e:	4bc4      	ldr	r3, [pc, #784]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d110      	bne.n	8003698 <HAL_TIM_PeriodElapsedCallback+0x50>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609 ;
 8003676:	48c1      	ldr	r0, [pc, #772]	; (800397c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003678:	f7fd f8b8 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 800367c:	4603      	mov	r3, r0
 800367e:	ee07 3a90 	vmov	s15, r3
 8003682:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003686:	ed9f 5bba 	vldr	d5, [pc, #744]	; 8003970 <HAL_TIM_PeriodElapsedCallback+0x328>
 800368a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800368e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003692:	4bbc      	ldr	r3, [pc, #752]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003694:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ2.AMT21_Read();
 8003698:	48bb      	ldr	r0, [pc, #748]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800369a:	f7fd f814 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 800369e:	48ba      	ldr	r0, [pc, #744]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80036a0:	f7fd f840 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80036a4:	4603      	mov	r3, r0
 80036a6:	461a      	mov	r2, r3
 80036a8:	4bb8      	ldr	r3, [pc, #736]	; (800398c <HAL_TIM_PeriodElapsedCallback+0x344>)
 80036aa:	701a      	strb	r2, [r3, #0]
		if(HALENCJ2OK == HAL_OK){
 80036ac:	4bb7      	ldr	r3, [pc, #732]	; (800398c <HAL_TIM_PeriodElapsedCallback+0x344>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d112      	bne.n	80036da <HAL_TIM_PeriodElapsedCallback+0x92>
			encoderJ2.unwarp();
 80036b4:	48b4      	ldr	r0, [pc, #720]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80036b6:	f7fd f8bb 	bl	8000830 <_ZN5AMT216unwarpEv>
			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609 ;
 80036ba:	48b3      	ldr	r0, [pc, #716]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80036bc:	f7fd f917 	bl	80008ee <_ZN5AMT2114getUnwarpValueEv>
 80036c0:	ee07 0a90 	vmov	s15, r0
 80036c4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80036c8:	ed9f 5ba9 	vldr	d5, [pc, #676]	; 8003970 <HAL_TIM_PeriodElapsedCallback+0x328>
 80036cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80036d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80036d4:	4bae      	ldr	r3, [pc, #696]	; (8003990 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80036d6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}


		encoderJ3.AMT21_Read();
 80036da:	48ae      	ldr	r0, [pc, #696]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80036dc:	f7fc fff3 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 80036e0:	48ac      	ldr	r0, [pc, #688]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80036e2:	f7fd f81f 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80036e6:	4603      	mov	r3, r0
 80036e8:	461a      	mov	r2, r3
 80036ea:	4bab      	ldr	r3, [pc, #684]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80036ec:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 80036ee:	4baa      	ldr	r3, [pc, #680]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d110      	bne.n	8003718 <HAL_TIM_PeriodElapsedCallback+0xd0>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609 ;
 80036f6:	48a7      	ldr	r0, [pc, #668]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80036f8:	f7fd f878 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 80036fc:	4603      	mov	r3, r0
 80036fe:	ee07 3a90 	vmov	s15, r3
 8003702:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003706:	ed9f 5b9a 	vldr	d5, [pc, #616]	; 8003970 <HAL_TIM_PeriodElapsedCallback+0x328>
 800370a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800370e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003712:	4ba2      	ldr	r3, [pc, #648]	; (800399c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003714:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 8003718:	48a1      	ldr	r0, [pc, #644]	; (80039a0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800371a:	f7fc ffd4 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 800371e:	48a0      	ldr	r0, [pc, #640]	; (80039a0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003720:	f7fd f800 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003724:	4603      	mov	r3, r0
 8003726:	461a      	mov	r2, r3
 8003728:	4b9e      	ldr	r3, [pc, #632]	; (80039a4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800372a:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 800372c:	4b9d      	ldr	r3, [pc, #628]	; (80039a4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d110      	bne.n	8003756 <HAL_TIM_PeriodElapsedCallback+0x10e>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;
 8003734:	489a      	ldr	r0, [pc, #616]	; (80039a0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003736:	f7fd f859 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 800373a:	4603      	mov	r3, r0
 800373c:	ee07 3a90 	vmov	s15, r3
 8003740:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003744:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 8003970 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003748:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800374c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003750:	4b95      	ldr	r3, [pc, #596]	; (80039a8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8003752:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
//			stepperJ2.StepperSetFrequency(dq2*10.0);
//			stepperJ3.StepperSetFrequency(dq3);
//			stepperJ4.StepperSetFrequency(dq4);


			fcb_X.UpdateIVK(fcb_joint1.Encoder , 0.0,fcb_joint3.Encoder, 0.0, dx, dy, dz, 0.0);
 8003756:	4b8b      	ldr	r3, [pc, #556]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003758:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800375c:	4b8f      	ldr	r3, [pc, #572]	; (800399c <HAL_TIM_PeriodElapsedCallback+0x354>)
 800375e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8003762:	4b92      	ldr	r3, [pc, #584]	; (80039ac <HAL_TIM_PeriodElapsedCallback+0x364>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	b25b      	sxtb	r3, r3
 8003768:	ee06 3a90 	vmov	s13, r3
 800376c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003770:	4b8f      	ldr	r3, [pc, #572]	; (80039b0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	b25b      	sxtb	r3, r3
 8003776:	ee06 3a10 	vmov	s12, r3
 800377a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800377e:	4b8d      	ldr	r3, [pc, #564]	; (80039b4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	b25b      	sxtb	r3, r3
 8003784:	ee05 3a90 	vmov	s11, r3
 8003788:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800378c:	eddf 3a8a 	vldr	s7, [pc, #552]	; 80039b8 <HAL_TIM_PeriodElapsedCallback+0x370>
 8003790:	eeb0 3a65 	vmov.f32	s6, s11
 8003794:	eef0 2a46 	vmov.f32	s5, s12
 8003798:	eeb0 2a66 	vmov.f32	s4, s13
 800379c:	eddf 1a86 	vldr	s3, [pc, #536]	; 80039b8 <HAL_TIM_PeriodElapsedCallback+0x370>
 80037a0:	eeb0 1a47 	vmov.f32	s2, s14
 80037a4:	eddf 0a84 	vldr	s1, [pc, #528]	; 80039b8 <HAL_TIM_PeriodElapsedCallback+0x370>
 80037a8:	eeb0 0a67 	vmov.f32	s0, s15
 80037ac:	4883      	ldr	r0, [pc, #524]	; (80039bc <HAL_TIM_PeriodElapsedCallback+0x374>)
 80037ae:	f7fd f94b 	bl	8000a48 <_ZN10RobotJoint9UpdateIVKEffffffff>

			stepperJ1.StepperOpenLoopSpeedM(fcb_X.w_q1);
 80037b2:	4b82      	ldr	r3, [pc, #520]	; (80039bc <HAL_TIM_PeriodElapsedCallback+0x374>)
 80037b4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80037b8:	eeb0 0a67 	vmov.f32	s0, s15
 80037bc:	4880      	ldr	r0, [pc, #512]	; (80039c0 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80037be:	f7fe fd7b 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//			stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
			stepperJ3.StepperOpenLoopSpeedM(fcb_X.w_q3);
 80037c2:	4b7e      	ldr	r3, [pc, #504]	; (80039bc <HAL_TIM_PeriodElapsedCallback+0x374>)
 80037c4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80037c8:	eeb0 0a67 	vmov.f32	s0, s15
 80037cc:	487d      	ldr	r0, [pc, #500]	; (80039c4 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80037ce:	f7fe fd73 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//					stepperJ3.StepperOpenLoopSpeed(u_q3/num);
//					stepperJ4.StepperOpenLoopSpeed(u_q4/num);

	}

	if (htim == &htim16)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a7c      	ldr	r2, [pc, #496]	; (80039c8 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	f040 8101 	bne.w	80039de <HAL_TIM_PeriodElapsedCallback+0x396>
	{
		encoderJ1.AMT21_Read();
 80037dc:	4867      	ldr	r0, [pc, #412]	; (800397c <HAL_TIM_PeriodElapsedCallback+0x334>)
 80037de:	f7fc ff72 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 80037e2:	4866      	ldr	r0, [pc, #408]	; (800397c <HAL_TIM_PeriodElapsedCallback+0x334>)
 80037e4:	f7fc ff9e 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80037e8:	4603      	mov	r3, r0
 80037ea:	461a      	mov	r2, r3
 80037ec:	4b64      	ldr	r3, [pc, #400]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80037ee:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 80037f0:	4b63      	ldr	r3, [pc, #396]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d110      	bne.n	800381a <HAL_TIM_PeriodElapsedCallback+0x1d2>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609 ;
 80037f8:	4860      	ldr	r0, [pc, #384]	; (800397c <HAL_TIM_PeriodElapsedCallback+0x334>)
 80037fa:	f7fc fff7 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 80037fe:	4603      	mov	r3, r0
 8003800:	ee07 3a90 	vmov	s15, r3
 8003804:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003808:	ed9f 5b59 	vldr	d5, [pc, #356]	; 8003970 <HAL_TIM_PeriodElapsedCallback+0x328>
 800380c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003810:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003814:	4b5b      	ldr	r3, [pc, #364]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003816:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ2.AMT21_Read();
 800381a:	485b      	ldr	r0, [pc, #364]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800381c:	f7fc ff53 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8003820:	4859      	ldr	r0, [pc, #356]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003822:	f7fc ff7f 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003826:	4603      	mov	r3, r0
 8003828:	461a      	mov	r2, r3
 800382a:	4b58      	ldr	r3, [pc, #352]	; (800398c <HAL_TIM_PeriodElapsedCallback+0x344>)
 800382c:	701a      	strb	r2, [r3, #0]
		if(HALENCJ2OK == HAL_OK){
 800382e:	4b57      	ldr	r3, [pc, #348]	; (800398c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d112      	bne.n	800385c <HAL_TIM_PeriodElapsedCallback+0x214>
			encoderJ2.unwarp();
 8003836:	4854      	ldr	r0, [pc, #336]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003838:	f7fc fffa 	bl	8000830 <_ZN5AMT216unwarpEv>
			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609 ;
 800383c:	4852      	ldr	r0, [pc, #328]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800383e:	f7fd f856 	bl	80008ee <_ZN5AMT2114getUnwarpValueEv>
 8003842:	ee07 0a90 	vmov	s15, r0
 8003846:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800384a:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8003970 <HAL_TIM_PeriodElapsedCallback+0x328>
 800384e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003852:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003856:	4b4e      	ldr	r3, [pc, #312]	; (8003990 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003858:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}


		encoderJ3.AMT21_Read();
 800385c:	484d      	ldr	r0, [pc, #308]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800385e:	f7fc ff32 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8003862:	484c      	ldr	r0, [pc, #304]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003864:	f7fc ff5e 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003868:	4603      	mov	r3, r0
 800386a:	461a      	mov	r2, r3
 800386c:	4b4a      	ldr	r3, [pc, #296]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800386e:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8003870:	4b49      	ldr	r3, [pc, #292]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d110      	bne.n	800389a <HAL_TIM_PeriodElapsedCallback+0x252>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609 ;
 8003878:	4846      	ldr	r0, [pc, #280]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800387a:	f7fc ffb7 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 800387e:	4603      	mov	r3, r0
 8003880:	ee07 3a90 	vmov	s15, r3
 8003884:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003888:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8003970 <HAL_TIM_PeriodElapsedCallback+0x328>
 800388c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003890:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003894:	4b41      	ldr	r3, [pc, #260]	; (800399c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003896:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 800389a:	4841      	ldr	r0, [pc, #260]	; (80039a0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800389c:	f7fc ff13 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 80038a0:	483f      	ldr	r0, [pc, #252]	; (80039a0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80038a2:	f7fc ff3f 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80038a6:	4603      	mov	r3, r0
 80038a8:	461a      	mov	r2, r3
 80038aa:	4b3e      	ldr	r3, [pc, #248]	; (80039a4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80038ac:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 80038ae:	4b3d      	ldr	r3, [pc, #244]	; (80039a4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d110      	bne.n	80038d8 <HAL_TIM_PeriodElapsedCallback+0x290>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;
 80038b6:	483a      	ldr	r0, [pc, #232]	; (80039a0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80038b8:	f7fc ff98 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 80038bc:	4603      	mov	r3, r0
 80038be:	ee07 3a90 	vmov	s15, r3
 80038c2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80038c6:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8003970 <HAL_TIM_PeriodElapsedCallback+0x328>
 80038ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80038ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038d2:	4b35      	ldr	r3, [pc, #212]	; (80039a8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80038d4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
//		current_angle = chessSPIEncoder.getRawRotation();
//		current_angle_map = chessSPIEncoder.read2angle(current_angle);
//		angle = current_angle_map - zero_position_map;
//		angle = chessSPIEncoder.normalize(angle);

		fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
 80038d8:	4b2a      	ldr	r3, [pc, #168]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80038da:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80038de:	eeb0 0a67 	vmov.f32	s0, s15
 80038e2:	4828      	ldr	r0, [pc, #160]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80038e4:	f7fd fafe 	bl	8000ee4 <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint1.kalman_pos = fcb_joint1.X11;
 80038e8:	4b26      	ldr	r3, [pc, #152]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80038ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038ee:	4a25      	ldr	r2, [pc, #148]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80038f0:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint1.kalman_velo = fcb_joint1.X21;
 80038f4:	4b23      	ldr	r3, [pc, #140]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80038f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038fa:	4a22      	ldr	r2, [pc, #136]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80038fc:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint2.KalmanFillter(fcb_joint2.Encoder);
 8003900:	4b23      	ldr	r3, [pc, #140]	; (8003990 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003902:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003906:	eeb0 0a67 	vmov.f32	s0, s15
 800390a:	4821      	ldr	r0, [pc, #132]	; (8003990 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800390c:	f7fd faea 	bl	8000ee4 <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint2.kalman_pos = fcb_joint2.X11;
 8003910:	4b1f      	ldr	r3, [pc, #124]	; (8003990 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003912:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003916:	4a1e      	ldr	r2, [pc, #120]	; (8003990 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003918:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint2.kalman_velo = fcb_joint2.X21;
 800391c:	4b1c      	ldr	r3, [pc, #112]	; (8003990 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800391e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003922:	4a1b      	ldr	r2, [pc, #108]	; (8003990 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003924:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
 8003928:	4b1c      	ldr	r3, [pc, #112]	; (800399c <HAL_TIM_PeriodElapsedCallback+0x354>)
 800392a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800392e:	eeb0 0a67 	vmov.f32	s0, s15
 8003932:	481a      	ldr	r0, [pc, #104]	; (800399c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003934:	f7fd fad6 	bl	8000ee4 <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint3.kalman_pos = fcb_joint3.X11;
 8003938:	4b18      	ldr	r3, [pc, #96]	; (800399c <HAL_TIM_PeriodElapsedCallback+0x354>)
 800393a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800393e:	4a17      	ldr	r2, [pc, #92]	; (800399c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003940:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint3.kalman_velo = fcb_joint3.X21;
 8003944:	4b15      	ldr	r3, [pc, #84]	; (800399c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003946:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800394a:	4a14      	ldr	r2, [pc, #80]	; (800399c <HAL_TIM_PeriodElapsedCallback+0x354>)
 800394c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		if (State_FIN)
 8003950:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <HAL_TIM_PeriodElapsedCallback+0x384>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d041      	beq.n	80039de <HAL_TIM_PeriodElapsedCallback+0x396>
		 {
			Balloon++;
 800395a:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3301      	adds	r3, #1
 8003960:	4a1b      	ldr	r2, [pc, #108]	; (80039d0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003962:	6013      	str	r3, [r2, #0]
			Update_State_Machine();
 8003964:	f7ff f86c 	bl	8002a40 <_Z20Update_State_Machinev>
 8003968:	e034      	b.n	80039d4 <HAL_TIM_PeriodElapsedCallback+0x38c>
 800396a:	bf00      	nop
 800396c:	f3af 8000 	nop.w
 8003970:	645a1cac 	.word	0x645a1cac
 8003974:	4004df3b 	.word	0x4004df3b
 8003978:	24000e70 	.word	0x24000e70
 800397c:	2400042c 	.word	0x2400042c
 8003980:	24000ab0 	.word	0x24000ab0
 8003984:	2400053c 	.word	0x2400053c
 8003988:	24000448 	.word	0x24000448
 800398c:	24000ab1 	.word	0x24000ab1
 8003990:	24000620 	.word	0x24000620
 8003994:	24000464 	.word	0x24000464
 8003998:	24000ab2 	.word	0x24000ab2
 800399c:	24000704 	.word	0x24000704
 80039a0:	24000480 	.word	0x24000480
 80039a4:	24000ab3 	.word	0x24000ab3
 80039a8:	240007e8 	.word	0x240007e8
 80039ac:	24000ac0 	.word	0x24000ac0
 80039b0:	24000ac1 	.word	0x24000ac1
 80039b4:	24000ac2 	.word	0x24000ac2
 80039b8:	00000000 	.word	0x00000000
 80039bc:	240009b0 	.word	0x240009b0
 80039c0:	2400049c 	.word	0x2400049c
 80039c4:	240004ec 	.word	0x240004ec
 80039c8:	240010d0 	.word	0x240010d0
 80039cc:	24000ab4 	.word	0x24000ab4
 80039d0:	24000bb8 	.word	0x24000bb8
			Update_State_Machine();
 80039d4:	f7ff f834 	bl	8002a40 <_Z20Update_State_Machinev>
			State_FIN = false;
 80039d8:	4bde      	ldr	r3, [pc, #888]	; (8003d54 <HAL_TIM_PeriodElapsedCallback+0x70c>)
 80039da:	2200      	movs	r2, #0
 80039dc:	701a      	strb	r2, [r3, #0]
		 }

	}

	if (htim == &htim14) {
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4add      	ldr	r2, [pc, #884]	; (8003d58 <HAL_TIM_PeriodElapsedCallback+0x710>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	f040 8514 	bne.w	8004410 <HAL_TIM_PeriodElapsedCallback+0xdc8>
//			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;
//		}
		// #############################################################################

		// ######################## Setpoint ##########################################
		float t2 = t * t;
 80039e8:	4bdc      	ldr	r3, [pc, #880]	; (8003d5c <HAL_TIM_PeriodElapsedCallback+0x714>)
 80039ea:	ed93 7a00 	vldr	s14, [r3]
 80039ee:	4bdb      	ldr	r3, [pc, #876]	; (8003d5c <HAL_TIM_PeriodElapsedCallback+0x714>)
 80039f0:	edd3 7a00 	vldr	s15, [r3]
 80039f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float t3 = t * t * t;
 80039fc:	4bd7      	ldr	r3, [pc, #860]	; (8003d5c <HAL_TIM_PeriodElapsedCallback+0x714>)
 80039fe:	ed93 7a00 	vldr	s14, [r3]
 8003a02:	4bd6      	ldr	r3, [pc, #856]	; (8003d5c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003a04:	edd3 7a00 	vldr	s15, [r3]
 8003a08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a0c:	4bd3      	ldr	r3, [pc, #844]	; (8003d5c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003a0e:	edd3 7a00 	vldr	s15, [r3]
 8003a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a16:	edc7 7a08 	vstr	s15, [r7, #32]
		float t4 = t * t * t * t;
 8003a1a:	4bd0      	ldr	r3, [pc, #832]	; (8003d5c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003a1c:	ed93 7a00 	vldr	s14, [r3]
 8003a20:	4bce      	ldr	r3, [pc, #824]	; (8003d5c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003a22:	edd3 7a00 	vldr	s15, [r3]
 8003a26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a2a:	4bcc      	ldr	r3, [pc, #816]	; (8003d5c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003a2c:	edd3 7a00 	vldr	s15, [r3]
 8003a30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a34:	4bc9      	ldr	r3, [pc, #804]	; (8003d5c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003a36:	edd3 7a00 	vldr	s15, [r3]
 8003a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a3e:	edc7 7a07 	vstr	s15, [r7, #28]
		float t5 = t * t * t * t * t;
 8003a42:	4bc6      	ldr	r3, [pc, #792]	; (8003d5c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003a44:	ed93 7a00 	vldr	s14, [r3]
 8003a48:	4bc4      	ldr	r3, [pc, #784]	; (8003d5c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003a4a:	edd3 7a00 	vldr	s15, [r3]
 8003a4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a52:	4bc2      	ldr	r3, [pc, #776]	; (8003d5c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003a54:	edd3 7a00 	vldr	s15, [r3]
 8003a58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a5c:	4bbf      	ldr	r3, [pc, #764]	; (8003d5c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003a5e:	edd3 7a00 	vldr	s15, [r3]
 8003a62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a66:	4bbd      	ldr	r3, [pc, #756]	; (8003d5c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003a68:	edd3 7a00 	vldr	s15, [r3]
 8003a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a70:	edc7 7a06 	vstr	s15, [r7, #24]
//		fcb_joint3.Goal_Velocity = fcb_X.w_q3;
//		fcb_joint4.Goal_Velocity = fcb_X.w_q4;
////	fcb_joint3.Goal_Position = fcb_X.q3;


		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0*fcb_joint1.C2*t) + (3.0*fcb_joint1.C3*t2) + (4.0*fcb_joint1.C4*t3) + (5.0*fcb_joint1.C5*t4);
 8003a74:	4bba      	ldr	r3, [pc, #744]	; (8003d60 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003a76:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003a7a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003a7e:	4bb8      	ldr	r3, [pc, #736]	; (8003d60 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003a80:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003a84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a88:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003a8c:	4bb3      	ldr	r3, [pc, #716]	; (8003d5c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003a8e:	edd3 7a00 	vldr	s15, [r3]
 8003a92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a96:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a9a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003a9e:	4bb0      	ldr	r3, [pc, #704]	; (8003d60 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003aa0:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003aa4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003aa8:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003aac:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003ab0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ab4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ab8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003abc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003ac0:	4ba7      	ldr	r3, [pc, #668]	; (8003d60 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003ac2:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003ac6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003aca:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003ace:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003ad2:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ad6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ada:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ade:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003ae2:	4b9f      	ldr	r3, [pc, #636]	; (8003d60 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003ae4:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003ae8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003aec:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003af0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003af4:	edd7 7a07 	vldr	s15, [r7, #28]
 8003af8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003afc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b00:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b08:	4b95      	ldr	r3, [pc, #596]	; (8003d60 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003b0a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1*t) + (fcb_joint1.C2*t2) + (fcb_joint1.C3*t3) + (fcb_joint1.C4*t4) + (fcb_joint1.C5*t5));
 8003b0e:	4b94      	ldr	r3, [pc, #592]	; (8003d60 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003b10:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003b14:	4b92      	ldr	r3, [pc, #584]	; (8003d60 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003b16:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003b1a:	4b90      	ldr	r3, [pc, #576]	; (8003d5c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003b1c:	edd3 7a00 	vldr	s15, [r3]
 8003b20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b28:	4b8d      	ldr	r3, [pc, #564]	; (8003d60 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003b2a:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003b2e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b3a:	4b89      	ldr	r3, [pc, #548]	; (8003d60 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003b3c:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003b40:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b4c:	4b84      	ldr	r3, [pc, #528]	; (8003d60 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003b4e:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003b52:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b5e:	4b80      	ldr	r3, [pc, #512]	; (8003d60 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003b60:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003b64:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b70:	4b7b      	ldr	r3, [pc, #492]	; (8003d60 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003b72:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint2.Goal_Velocity = fcb_joint2.C1 + (2.0*fcb_joint2.C2*t) + (3.0*fcb_joint2.C3*t2) + (4.0*fcb_joint2.C4*t3) + (5.0*fcb_joint2.C5*t4);
 8003b76:	4b7b      	ldr	r3, [pc, #492]	; (8003d64 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003b78:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003b7c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003b80:	4b78      	ldr	r3, [pc, #480]	; (8003d64 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003b82:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003b86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b8a:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003b8e:	4b73      	ldr	r3, [pc, #460]	; (8003d5c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003b90:	edd3 7a00 	vldr	s15, [r3]
 8003b94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b98:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b9c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003ba0:	4b70      	ldr	r3, [pc, #448]	; (8003d64 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003ba2:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003ba6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003baa:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003bae:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003bb2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003bb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bba:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003bbe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003bc2:	4b68      	ldr	r3, [pc, #416]	; (8003d64 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003bc4:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003bc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bcc:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003bd0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003bd4:	edd7 7a08 	vldr	s15, [r7, #32]
 8003bd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bdc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003be0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003be4:	4b5f      	ldr	r3, [pc, #380]	; (8003d64 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003be6:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003bea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bee:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003bf2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003bf6:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bfa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bfe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c02:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c06:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003c0a:	4b56      	ldr	r3, [pc, #344]	; (8003d64 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003c0c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint2.Goal_Position = (fcb_joint2.C0 + (fcb_joint2.C1*t) + (fcb_joint2.C2*t2) + (fcb_joint2.C3*t3) + (fcb_joint2.C4*t4) + (fcb_joint2.C5*t5));
 8003c10:	4b54      	ldr	r3, [pc, #336]	; (8003d64 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003c12:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003c16:	4b53      	ldr	r3, [pc, #332]	; (8003d64 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003c18:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003c1c:	4b4f      	ldr	r3, [pc, #316]	; (8003d5c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003c1e:	edd3 7a00 	vldr	s15, [r3]
 8003c22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c2a:	4b4e      	ldr	r3, [pc, #312]	; (8003d64 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003c2c:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003c30:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003c34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c3c:	4b49      	ldr	r3, [pc, #292]	; (8003d64 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003c3e:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003c42:	edd7 7a08 	vldr	s15, [r7, #32]
 8003c46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c4e:	4b45      	ldr	r3, [pc, #276]	; (8003d64 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003c50:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003c54:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c60:	4b40      	ldr	r3, [pc, #256]	; (8003d64 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003c62:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003c66:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c72:	4b3c      	ldr	r3, [pc, #240]	; (8003d64 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003c74:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0*fcb_joint3.C2*t) + (3.0*fcb_joint3.C3*t2) + (4.0*fcb_joint3.C4*t3) + (5.0*fcb_joint3.C5*t4);
 8003c78:	4b3b      	ldr	r3, [pc, #236]	; (8003d68 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003c7a:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003c7e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003c82:	4b39      	ldr	r3, [pc, #228]	; (8003d68 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003c84:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003c88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c8c:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003c90:	4b32      	ldr	r3, [pc, #200]	; (8003d5c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003c92:	edd3 7a00 	vldr	s15, [r3]
 8003c96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c9a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c9e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003ca2:	4b31      	ldr	r3, [pc, #196]	; (8003d68 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003ca4:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003ca8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cac:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003cb0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003cb4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003cb8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cbc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003cc0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003cc4:	4b28      	ldr	r3, [pc, #160]	; (8003d68 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003cc6:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003cca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cce:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003cd2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003cd6:	edd7 7a08 	vldr	s15, [r7, #32]
 8003cda:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cde:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ce2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003ce6:	4b20      	ldr	r3, [pc, #128]	; (8003d68 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003ce8:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003cec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cf0:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003cf4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003cf8:	edd7 7a07 	vldr	s15, [r7, #28]
 8003cfc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d00:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003d04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003d08:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003d0c:	4b16      	ldr	r3, [pc, #88]	; (8003d68 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003d0e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1*t) + (fcb_joint3.C2*t2) + (fcb_joint3.C3*t3) + (fcb_joint3.C4*t4) + (fcb_joint3.C5*t5));
 8003d12:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003d14:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003d18:	4b13      	ldr	r3, [pc, #76]	; (8003d68 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003d1a:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003d1e:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003d20:	edd3 7a00 	vldr	s15, [r3]
 8003d24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d2c:	4b0e      	ldr	r3, [pc, #56]	; (8003d68 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003d2e:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003d32:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003d40:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003d44:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d50:	e00c      	b.n	8003d6c <HAL_TIM_PeriodElapsedCallback+0x724>
 8003d52:	bf00      	nop
 8003d54:	24000ab4 	.word	0x24000ab4
 8003d58:	24001038 	.word	0x24001038
 8003d5c:	24000bbc 	.word	0x24000bbc
 8003d60:	2400053c 	.word	0x2400053c
 8003d64:	24000620 	.word	0x24000620
 8003d68:	24000704 	.word	0x24000704
 8003d6c:	4bc9      	ldr	r3, [pc, #804]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003d6e:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003d72:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d7e:	4bc5      	ldr	r3, [pc, #788]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003d80:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003d84:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d90:	4bc0      	ldr	r3, [pc, #768]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003d92:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint4.Goal_Velocity = fcb_joint4.C1 + (2.0*fcb_joint4.C2*t) + (3.0*fcb_joint4.C3*t2) + (4.0*fcb_joint4.C4*t3) + (5.0*fcb_joint4.C5*t4);
 8003d96:	4bc0      	ldr	r3, [pc, #768]	; (8004098 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003d98:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003d9c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003da0:	4bbd      	ldr	r3, [pc, #756]	; (8004098 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003da2:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003da6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003daa:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003dae:	4bbb      	ldr	r3, [pc, #748]	; (800409c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003db0:	edd3 7a00 	vldr	s15, [r3]
 8003db4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003db8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003dbc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003dc0:	4bb5      	ldr	r3, [pc, #724]	; (8004098 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003dc2:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003dc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dca:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003dce:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003dd2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003dd6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dda:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003dde:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003de2:	4bad      	ldr	r3, [pc, #692]	; (8004098 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003de4:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003de8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dec:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003df0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003df4:	edd7 7a08 	vldr	s15, [r7, #32]
 8003df8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dfc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003e00:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003e04:	4ba4      	ldr	r3, [pc, #656]	; (8004098 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e06:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003e0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e0e:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003e12:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003e16:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e1e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003e22:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e26:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003e2a:	4b9b      	ldr	r3, [pc, #620]	; (8004098 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e2c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Position = (fcb_joint4.C0 + (fcb_joint4.C1*t) + (fcb_joint4.C2*t2) + (fcb_joint4.C3*t3) + (fcb_joint4.C4*t4) + (fcb_joint4.C5*t5));
 8003e30:	4b99      	ldr	r3, [pc, #612]	; (8004098 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e32:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003e36:	4b98      	ldr	r3, [pc, #608]	; (8004098 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e38:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003e3c:	4b97      	ldr	r3, [pc, #604]	; (800409c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003e3e:	edd3 7a00 	vldr	s15, [r3]
 8003e42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e4a:	4b93      	ldr	r3, [pc, #588]	; (8004098 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e4c:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003e50:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003e54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e5c:	4b8e      	ldr	r3, [pc, #568]	; (8004098 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e5e:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003e62:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e6e:	4b8a      	ldr	r3, [pc, #552]	; (8004098 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e70:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003e74:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e80:	4b85      	ldr	r3, [pc, #532]	; (8004098 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e82:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003e86:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e92:	4b81      	ldr	r3, [pc, #516]	; (8004098 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e94:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		//		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
		//		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
		//		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;


		fcb_joint1.Kp_p = 0.4;
 8003e98:	4b81      	ldr	r3, [pc, #516]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003e9a:	4a82      	ldr	r2, [pc, #520]	; (80040a4 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8003e9c:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint1.Ki_p = 0.0;
 8003e9e:	4b80      	ldr	r3, [pc, #512]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint1.Kd_p = 0.0;
 8003ea6:	4b7e      	ldr	r3, [pc, #504]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint2.Kp_p = 0.03;
 8003eae:	4b7e      	ldr	r3, [pc, #504]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003eb0:	4a7e      	ldr	r2, [pc, #504]	; (80040ac <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8003eb2:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint2.Ki_p = 0.0;
 8003eb4:	4b7c      	ldr	r3, [pc, #496]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint2.Kd_p = 0.0;
 8003ebc:	4b7a      	ldr	r3, [pc, #488]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint3.Kp_p = 0.15;
 8003ec4:	4b73      	ldr	r3, [pc, #460]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003ec6:	4a7a      	ldr	r2, [pc, #488]	; (80040b0 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8003ec8:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint3.Ki_p = 0.0;
 8003eca:	4b72      	ldr	r3, [pc, #456]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint3.Kd_p = 0.0;
 8003ed2:	4b70      	ldr	r3, [pc, #448]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	669a      	str	r2, [r3, #104]	; 0x68
//		fcb_joint1.Kd_p = 0.0;
//		fcb_joint3.Kp_p = 0.0;
//		fcb_joint3.Ki_p = 0.0;
//		fcb_joint3.Kd_p = 0.0;

		fcb_joint1.Kp_v = 0.0; // 3.2
 8003eda:	4b71      	ldr	r3, [pc, #452]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint1.Ki_v = 0.0;
 8003ee2:	4b6f      	ldr	r3, [pc, #444]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint1.Kd_v = 0.0;
 8003eea:	4b6d      	ldr	r3, [pc, #436]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint2.Kp_v = 0.0; // 3.2
 8003ef2:	4b6d      	ldr	r3, [pc, #436]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint2.Ki_v = 0.0;
 8003efa:	4b6b      	ldr	r3, [pc, #428]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint2.Kd_v = 0.0;
 8003f02:	4b69      	ldr	r3, [pc, #420]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint3.Kp_v = 0.0; // 3.2
 8003f0a:	4b62      	ldr	r3, [pc, #392]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint3.Ki_v = 0.0;
 8003f12:	4b60      	ldr	r3, [pc, #384]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint3.Kd_v = 0.0;
 8003f1a:	4b5e      	ldr	r3, [pc, #376]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.kalman_pos;
 8003f22:	4b5f      	ldr	r3, [pc, #380]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003f24:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003f28:	4b5d      	ldr	r3, [pc, #372]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003f2a:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8003f2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f32:	4b5b      	ldr	r3, [pc, #364]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003f34:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.kalman_pos;
 8003f38:	4b56      	ldr	r3, [pc, #344]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003f3a:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003f3e:	4b55      	ldr	r3, [pc, #340]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003f40:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8003f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f48:	4b52      	ldr	r3, [pc, #328]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003f4a:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint1.Error_v = fcb_joint1.Goal_Velocity - fcb_joint1.kalman_velo;
 8003f4e:	4b54      	ldr	r3, [pc, #336]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003f50:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003f54:	4b52      	ldr	r3, [pc, #328]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003f56:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f5e:	4b50      	ldr	r3, [pc, #320]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003f60:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		fcb_joint3.Error_v = fcb_joint3.Goal_Velocity - fcb_joint3.kalman_velo;
 8003f64:	4b4b      	ldr	r3, [pc, #300]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003f66:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003f6a:	4b4a      	ldr	r3, [pc, #296]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003f6c:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f74:	4b47      	ldr	r3, [pc, #284]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003f76:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

		fcb_joint2.Error_p = fcb_joint2.Goal_Position - fcb_joint2.kalman_pos;
 8003f7a:	4b4b      	ldr	r3, [pc, #300]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003f7c:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003f80:	4b49      	ldr	r3, [pc, #292]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003f82:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8003f86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f8a:	4b47      	ldr	r3, [pc, #284]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003f8c:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint2.Error_v = fcb_joint2.Goal_Velocity - fcb_joint2.kalman_velo;
 8003f90:	4b45      	ldr	r3, [pc, #276]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003f92:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003f96:	4b44      	ldr	r3, [pc, #272]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003f98:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fa0:	4b41      	ldr	r3, [pc, #260]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8003fa2:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84


		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 8003fa6:	4b3e      	ldr	r3, [pc, #248]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003fa8:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003fac:	4b3c      	ldr	r3, [pc, #240]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003fae:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fb6:	4b3a      	ldr	r3, [pc, #232]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003fb8:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 8003fbc:	4b35      	ldr	r3, [pc, #212]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003fbe:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003fc2:	4b34      	ldr	r3, [pc, #208]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003fc4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fcc:	4b31      	ldr	r3, [pc, #196]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003fce:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint1.Sum_Error_v += fcb_joint1.Error_v;
 8003fd2:	4b33      	ldr	r3, [pc, #204]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003fd4:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8003fd8:	4b31      	ldr	r3, [pc, #196]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003fda:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fe2:	4b2f      	ldr	r3, [pc, #188]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003fe4:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		fcb_joint3.Sum_Error_v += fcb_joint3.Error_v;
 8003fe8:	4b2a      	ldr	r3, [pc, #168]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003fea:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8003fee:	4b29      	ldr	r3, [pc, #164]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003ff0:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ff8:	4b26      	ldr	r3, [pc, #152]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003ffa:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		fcb_joint2.Sum_Error_p += fcb_joint2.Error_p;
 8003ffe:	4b2a      	ldr	r3, [pc, #168]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8004000:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8004004:	4b28      	ldr	r3, [pc, #160]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8004006:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800400a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800400e:	4b26      	ldr	r3, [pc, #152]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8004010:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint2.Sum_Error_v += fcb_joint2.Error_v;
 8004014:	4b24      	ldr	r3, [pc, #144]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8004016:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800401a:	4b23      	ldr	r3, [pc, #140]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 800401c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8004020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004024:	4b20      	ldr	r3, [pc, #128]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8004026:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 800402a:	4b1d      	ldr	r3, [pc, #116]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 800402c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
									(fcb_joint1.Kp_p * fcb_joint1.Error_p ) +
 8004030:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8004032:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8004036:	4b1a      	ldr	r3, [pc, #104]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8004038:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800403c:	ee66 7aa7 	vmul.f32	s15, s13, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 8004040:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p ) +
 8004044:	4b16      	ldr	r3, [pc, #88]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8004046:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 800404a:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 800404c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8004050:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kp_p * fcb_joint1.Error_p ) +
 8004054:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p) ) +
 8004058:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 800405a:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 800405e:	4b10      	ldr	r3, [pc, #64]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8004060:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8004064:	4b0e      	ldr	r3, [pc, #56]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8004066:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800406a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800406e:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p ) +
 8004072:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kp_v * fcb_joint1.Error_v ) +
 8004076:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8004078:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800407c:	4b08      	ldr	r3, [pc, #32]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 800407e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004082:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p) ) +
 8004086:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v ) +
 800408a:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 800408c:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8004090:	e010      	b.n	80040b4 <HAL_TIM_PeriodElapsedCallback+0xa6c>
 8004092:	bf00      	nop
 8004094:	24000704 	.word	0x24000704
 8004098:	240007e8 	.word	0x240007e8
 800409c:	24000bbc 	.word	0x24000bbc
 80040a0:	2400053c 	.word	0x2400053c
 80040a4:	3ecccccd 	.word	0x3ecccccd
 80040a8:	24000620 	.word	0x24000620
 80040ac:	3cf5c28f 	.word	0x3cf5c28f
 80040b0:	3e19999a 	.word	0x3e19999a
 80040b4:	4b65      	ldr	r3, [pc, #404]	; (800424c <HAL_TIM_PeriodElapsedCallback+0xc04>)
 80040b6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80040ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kp_v * fcb_joint1.Error_v ) +
 80040be:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kd_v * (fcb_joint1.Error_v - fcb_joint1.Old_v) ) ;
 80040c2:	4b62      	ldr	r3, [pc, #392]	; (800424c <HAL_TIM_PeriodElapsedCallback+0xc04>)
 80040c4:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 80040c8:	4b60      	ldr	r3, [pc, #384]	; (800424c <HAL_TIM_PeriodElapsedCallback+0xc04>)
 80040ca:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 80040ce:	4b5f      	ldr	r3, [pc, #380]	; (800424c <HAL_TIM_PeriodElapsedCallback+0xc04>)
 80040d0:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80040d4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80040d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v ) +
 80040dc:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 80040e0:	4b5a      	ldr	r3, [pc, #360]	; (800424c <HAL_TIM_PeriodElapsedCallback+0xc04>)
 80040e2:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		fcb_joint2.Output_Joint_W = (fcb_joint2.Goal_Velocity) +
 80040e6:	4b5a      	ldr	r3, [pc, #360]	; (8004250 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 80040e8:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
									(fcb_joint2.Kp_p * fcb_joint2.Error_p ) +
 80040ec:	4b58      	ldr	r3, [pc, #352]	; (8004250 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 80040ee:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 80040f2:	4b57      	ldr	r3, [pc, #348]	; (8004250 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 80040f4:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80040f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
		fcb_joint2.Output_Joint_W = (fcb_joint2.Goal_Velocity) +
 80040fc:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint2.Ki_p * fcb_joint2.Sum_Error_p ) +
 8004100:	4b53      	ldr	r3, [pc, #332]	; (8004250 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004102:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8004106:	4b52      	ldr	r3, [pc, #328]	; (8004250 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004108:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800410c:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint2.Kp_p * fcb_joint2.Error_p ) +
 8004110:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint2.Kd_p * (fcb_joint2.Error_p - fcb_joint2.Old_p) ) +
 8004114:	4b4e      	ldr	r3, [pc, #312]	; (8004250 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004116:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 800411a:	4b4d      	ldr	r3, [pc, #308]	; (8004250 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 800411c:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8004120:	4b4b      	ldr	r3, [pc, #300]	; (8004250 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004122:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8004126:	ee76 7a67 	vsub.f32	s15, s12, s15
 800412a:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint2.Ki_p * fcb_joint2.Sum_Error_p ) +
 800412e:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint2.Kp_v * fcb_joint2.Error_v) +
 8004132:	4b47      	ldr	r3, [pc, #284]	; (8004250 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004134:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8004138:	4b45      	ldr	r3, [pc, #276]	; (8004250 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 800413a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800413e:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint2.Kd_p * (fcb_joint2.Error_p - fcb_joint2.Old_p) ) +
 8004142:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint2.Ki_v * fcb_joint2.Sum_Error_v ) +
 8004146:	4b42      	ldr	r3, [pc, #264]	; (8004250 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004148:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 800414c:	4b40      	ldr	r3, [pc, #256]	; (8004250 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 800414e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8004152:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint2.Kp_v * fcb_joint2.Error_v) +
 8004156:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint2.Kd_v * (fcb_joint2.Error_v - fcb_joint2.Old_v) ) ;
 800415a:	4b3d      	ldr	r3, [pc, #244]	; (8004250 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 800415c:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8004160:	4b3b      	ldr	r3, [pc, #236]	; (8004250 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004162:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8004166:	4b3a      	ldr	r3, [pc, #232]	; (8004250 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004168:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800416c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004170:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint2.Ki_v * fcb_joint2.Sum_Error_v ) +
 8004174:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint2.Output_Joint_W = (fcb_joint2.Goal_Velocity) +
 8004178:	4b35      	ldr	r3, [pc, #212]	; (8004250 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 800417a:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 800417e:	4b35      	ldr	r3, [pc, #212]	; (8004254 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 8004180:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
									(fcb_joint3.Kp_p * fcb_joint3.Error_p ) +
 8004184:	4b33      	ldr	r3, [pc, #204]	; (8004254 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 8004186:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 800418a:	4b32      	ldr	r3, [pc, #200]	; (8004254 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 800418c:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8004190:	ee66 7aa7 	vmul.f32	s15, s13, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 8004194:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p ) +
 8004198:	4b2e      	ldr	r3, [pc, #184]	; (8004254 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 800419a:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 800419e:	4b2d      	ldr	r3, [pc, #180]	; (8004254 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 80041a0:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80041a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kp_p * fcb_joint3.Error_p ) +
 80041a8:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p) ) +
 80041ac:	4b29      	ldr	r3, [pc, #164]	; (8004254 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 80041ae:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80041b2:	4b28      	ldr	r3, [pc, #160]	; (8004254 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 80041b4:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 80041b8:	4b26      	ldr	r3, [pc, #152]	; (8004254 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 80041ba:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80041be:	ee76 7a67 	vsub.f32	s15, s12, s15
 80041c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p ) +
 80041c6:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kp_v * fcb_joint3.Error_v) +
 80041ca:	4b22      	ldr	r3, [pc, #136]	; (8004254 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 80041cc:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 80041d0:	4b20      	ldr	r3, [pc, #128]	; (8004254 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 80041d2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80041d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p) ) +
 80041da:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v ) +
 80041de:	4b1d      	ldr	r3, [pc, #116]	; (8004254 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 80041e0:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 80041e4:	4b1b      	ldr	r3, [pc, #108]	; (8004254 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 80041e6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80041ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kp_v * fcb_joint3.Error_v) +
 80041ee:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kd_v * (fcb_joint3.Error_v - fcb_joint3.Old_v) ) ;
 80041f2:	4b18      	ldr	r3, [pc, #96]	; (8004254 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 80041f4:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 80041f8:	4b16      	ldr	r3, [pc, #88]	; (8004254 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 80041fa:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 80041fe:	4b15      	ldr	r3, [pc, #84]	; (8004254 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 8004200:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004204:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004208:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v ) +
 800420c:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 8004210:	4b10      	ldr	r3, [pc, #64]	; (8004254 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 8004212:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
		if (joint13_on)
 8004216:	4b10      	ldr	r3, [pc, #64]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d025      	beq.n	800426c <HAL_TIM_PeriodElapsedCallback+0xc24>
		{
			stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Output_Joint_W);
 8004220:	4b0a      	ldr	r3, [pc, #40]	; (800424c <HAL_TIM_PeriodElapsedCallback+0xc04>)
 8004222:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8004226:	eeb0 0a67 	vmov.f32	s0, s15
 800422a:	480c      	ldr	r0, [pc, #48]	; (800425c <HAL_TIM_PeriodElapsedCallback+0xc14>)
 800422c:	f7fe f844 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ2.StepperOpenLoopSpeedM(0.0);
 8004230:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8004268 <HAL_TIM_PeriodElapsedCallback+0xc20>
 8004234:	480a      	ldr	r0, [pc, #40]	; (8004260 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 8004236:	f7fe f83f 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ3.StepperOpenLoopSpeedM(fcb_joint3.Output_Joint_W);
 800423a:	4b06      	ldr	r3, [pc, #24]	; (8004254 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 800423c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8004240:	eeb0 0a67 	vmov.f32	s0, s15
 8004244:	4807      	ldr	r0, [pc, #28]	; (8004264 <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 8004246:	f7fe f837 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
 800424a:	e021      	b.n	8004290 <HAL_TIM_PeriodElapsedCallback+0xc48>
 800424c:	2400053c 	.word	0x2400053c
 8004250:	24000620 	.word	0x24000620
 8004254:	24000704 	.word	0x24000704
 8004258:	24000b0a 	.word	0x24000b0a
 800425c:	2400049c 	.word	0x2400049c
 8004260:	240004c4 	.word	0x240004c4
 8004264:	240004ec 	.word	0x240004ec
 8004268:	00000000 	.word	0x00000000
		}
		else
		{
			stepperJ1.StepperOpenLoopSpeedM(0.0);
 800426c:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 8004268 <HAL_TIM_PeriodElapsedCallback+0xc20>
 8004270:	48ad      	ldr	r0, [pc, #692]	; (8004528 <HAL_TIM_PeriodElapsedCallback+0xee0>)
 8004272:	f7fe f821 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ3.StepperOpenLoopSpeedM(0.0);
 8004276:	ed9f 0aad 	vldr	s0, [pc, #692]	; 800452c <HAL_TIM_PeriodElapsedCallback+0xee4>
 800427a:	48ad      	ldr	r0, [pc, #692]	; (8004530 <HAL_TIM_PeriodElapsedCallback+0xee8>)
 800427c:	f7fe f81c 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
 8004280:	4bac      	ldr	r3, [pc, #688]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0xeec>)
 8004282:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004286:	eeb0 0a67 	vmov.f32	s0, s15
 800428a:	48ab      	ldr	r0, [pc, #684]	; (8004538 <HAL_TIM_PeriodElapsedCallback+0xef0>)
 800428c:	f7fe f814 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//		stepperJ4.StepperOpenLoopSpeedM(fcb_joint4.Goal_Velocity);
//
//		stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Goal_Velocity);
//		stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
//		stepperJ3.StepperOpenLoopSpeedM(0);
		stepperJ4.StepperOpenLoopSpeedM(0);
 8004290:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 800452c <HAL_TIM_PeriodElapsedCallback+0xee4>
 8004294:	48a9      	ldr	r0, [pc, #676]	; (800453c <HAL_TIM_PeriodElapsedCallback+0xef4>)
 8004296:	f7fe f80f 	bl	80022b8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>

		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 800429a:	4ba9      	ldr	r3, [pc, #676]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 800429c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800429e:	4aa8      	ldr	r2, [pc, #672]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80042a0:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint2.Old_Error_p = fcb_joint2.Error_p;
 80042a2:	4ba4      	ldr	r3, [pc, #656]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80042a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042a6:	4aa3      	ldr	r2, [pc, #652]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80042a8:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 80042aa:	4ba6      	ldr	r3, [pc, #664]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80042ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ae:	4aa5      	ldr	r2, [pc, #660]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80042b0:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint1.Old_Error_v = fcb_joint1.Error_v;
 80042b2:	4ba3      	ldr	r3, [pc, #652]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80042b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042b8:	4aa1      	ldr	r2, [pc, #644]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80042ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint2.Old_Error_v = fcb_joint2.Error_v;
 80042be:	4b9d      	ldr	r3, [pc, #628]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80042c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c4:	4a9b      	ldr	r2, [pc, #620]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80042c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint3.Old_Error_v = fcb_joint3.Error_v;
 80042ca:	4b9e      	ldr	r3, [pc, #632]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80042cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042d0:	4a9c      	ldr	r2, [pc, #624]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80042d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

		fcb_joint1.Old_p = fcb_joint1.kalman_pos;
 80042d6:	4b9a      	ldr	r3, [pc, #616]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80042d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80042dc:	4a98      	ldr	r2, [pc, #608]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80042de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint3.Old_p = fcb_joint3.kalman_pos;
 80042e2:	4b98      	ldr	r3, [pc, #608]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80042e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80042e8:	4a96      	ldr	r2, [pc, #600]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80042ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint2.Old_p = fcb_joint2.kalman_pos;
 80042ee:	4b91      	ldr	r3, [pc, #580]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80042f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80042f4:	4a8f      	ldr	r2, [pc, #572]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80042f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint2.Old_v = fcb_joint2.kalman_velo;
 80042fa:	4b8e      	ldr	r3, [pc, #568]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80042fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004300:	4a8c      	ldr	r2, [pc, #560]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0xeec>)
 8004302:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint1.Old_v = fcb_joint1.kalman_velo;
 8004306:	4b8e      	ldr	r3, [pc, #568]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8004308:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800430c:	4a8c      	ldr	r2, [pc, #560]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 800430e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint3.Old_v = fcb_joint1.kalman_velo;
 8004312:	4b8b      	ldr	r3, [pc, #556]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8004314:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004318:	4a8a      	ldr	r2, [pc, #552]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 800431a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94


		t = t + sample_time_500;
 800431e:	4b8a      	ldr	r3, [pc, #552]	; (8004548 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 8004320:	ed93 7a00 	vldr	s14, [r3]
 8004324:	4b89      	ldr	r3, [pc, #548]	; (800454c <HAL_TIM_PeriodElapsedCallback+0xf04>)
 8004326:	edd3 7a00 	vldr	s15, [r3]
 800432a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800432e:	4b86      	ldr	r3, [pc, #536]	; (8004548 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 8004330:	edc3 7a00 	vstr	s15, [r3]
		if (t >= Max_Time )
 8004334:	4b84      	ldr	r3, [pc, #528]	; (8004548 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 8004336:	ed93 7a00 	vldr	s14, [r3]
 800433a:	4b85      	ldr	r3, [pc, #532]	; (8004550 <HAL_TIM_PeriodElapsedCallback+0xf08>)
 800433c:	edd3 7a00 	vldr	s15, [r3]
 8004340:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004348:	bfac      	ite	ge
 800434a:	2301      	movge	r3, #1
 800434c:	2300      	movlt	r3, #0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d05d      	beq.n	8004410 <HAL_TIM_PeriodElapsedCallback+0xdc8>
			{
			t = (int)0;
 8004354:	4b7c      	ldr	r3, [pc, #496]	; (8004548 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
			fcb_joint1.Sum_Error_p = 0;
 800435c:	4b78      	ldr	r3, [pc, #480]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint2.Sum_Error_p = 0;
 8004366:	4b73      	ldr	r3, [pc, #460]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0xeec>)
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint3.Sum_Error_p = 0;
 8004370:	4b74      	ldr	r3, [pc, #464]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

			fcb_joint1.Sum_Error_v = 0;
 800437a:	4b71      	ldr	r3, [pc, #452]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint2.Sum_Error_v = 0;
 8004384:	4b6b      	ldr	r3, [pc, #428]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0xeec>)
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint3.Sum_Error_v = 0;
 800438e:	4b6d      	ldr	r3, [pc, #436]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

			fcb_joint1.Old_Error_p = 0;
 8004398:	4b69      	ldr	r3, [pc, #420]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint2.Old_Error_p = 0;
 80043a0:	4b64      	ldr	r3, [pc, #400]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint3.Old_Error_p = 0;
 80043a8:	4b66      	ldr	r3, [pc, #408]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	67da      	str	r2, [r3, #124]	; 0x7c

			fcb_joint1.Old_Error_v = 0;
 80043b0:	4b63      	ldr	r3, [pc, #396]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint2.Old_Error_v = 0;
 80043ba:	4b5e      	ldr	r3, [pc, #376]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint3.Old_Error_v = 0;
 80043c4:	4b5f      	ldr	r3, [pc, #380]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

			fcb_joint1.Old_p = 0;
 80043ce:	4b5c      	ldr	r3, [pc, #368]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint2.Old_p = 0;
 80043d8:	4b56      	ldr	r3, [pc, #344]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint3.Old_p = 0;
 80043e2:	4b58      	ldr	r3, [pc, #352]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

			fcb_joint1.Old_v = 0;
 80043ec:	4b54      	ldr	r3, [pc, #336]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_joint2.Old_v = 0;
 80043f6:	4b4f      	ldr	r3, [pc, #316]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_joint3.Old_v = 0;
 8004400:	4b50      	ldr	r3, [pc, #320]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			State_FIN = true;
 800440a:	4b52      	ldr	r3, [pc, #328]	; (8004554 <HAL_TIM_PeriodElapsedCallback+0xf0c>)
 800440c:	2201      	movs	r2, #1
 800440e:	701a      	strb	r2, [r3, #0]
			}


	}
	if(htim == &htim17){
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a51      	ldr	r2, [pc, #324]	; (8004558 <HAL_TIM_PeriodElapsedCallback+0xf10>)
 8004414:	4293      	cmp	r3, r2
 8004416:	f040 8083 	bne.w	8004520 <HAL_TIM_PeriodElapsedCallback+0xed8>
		uint8_t encoder_state[12] = {
				(uint8_t)(((int16_t)fcb_joint1.Encoder >> 16) & 0xFF),
 800441a:	4b49      	ldr	r3, [pc, #292]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 800441c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004420:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004424:	ee17 3a90 	vmov	r3, s15
 8004428:	b21b      	sxth	r3, r3
 800442a:	141b      	asrs	r3, r3, #16
				(uint8_t)(((int16_t)fcb_joint3.Encoder >> 8) & 0xFF),
				(uint8_t)(((int16_t)fcb_joint3.Encoder) & 0xFF),
				(uint8_t)(((int32_t)fcb_joint4.Encoder >> 16) & 0xFF),
				(uint8_t)(((int16_t)fcb_joint4.Encoder >> 8) & 0xFF),
				(uint8_t)(((int16_t)fcb_joint4.Encoder) & 0xFF),
		};
 800442c:	b2db      	uxtb	r3, r3
 800442e:	733b      	strb	r3, [r7, #12]
				(uint8_t)(((int16_t)fcb_joint1.Encoder >> 8) & 0xFF),
 8004430:	4b43      	ldr	r3, [pc, #268]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8004432:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004436:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800443a:	ee17 3a90 	vmov	r3, s15
 800443e:	b21b      	sxth	r3, r3
 8004440:	121b      	asrs	r3, r3, #8
		};
 8004442:	b2db      	uxtb	r3, r3
 8004444:	737b      	strb	r3, [r7, #13]
				(uint8_t)(((int16_t)fcb_joint1.Encoder) & 0xFF),
 8004446:	4b3e      	ldr	r3, [pc, #248]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8004448:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800444c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004450:	ee17 3a90 	vmov	r3, s15
 8004454:	b21b      	sxth	r3, r3
		};
 8004456:	b2db      	uxtb	r3, r3
 8004458:	73bb      	strb	r3, [r7, #14]
				(uint8_t)(((int32_t)fcb_joint2.Encoder >> 16) & 0xFF),
 800445a:	4b36      	ldr	r3, [pc, #216]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0xeec>)
 800445c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004460:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004464:	ee17 3a90 	vmov	r3, s15
 8004468:	141b      	asrs	r3, r3, #16
		};
 800446a:	b2db      	uxtb	r3, r3
 800446c:	73fb      	strb	r3, [r7, #15]
				(uint8_t)(((int32_t)fcb_joint2.Encoder >> 8) & 0xFF),
 800446e:	4b31      	ldr	r3, [pc, #196]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0xeec>)
 8004470:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004474:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004478:	ee17 3a90 	vmov	r3, s15
 800447c:	121b      	asrs	r3, r3, #8
		};
 800447e:	b2db      	uxtb	r3, r3
 8004480:	743b      	strb	r3, [r7, #16]
				(uint8_t)(((int32_t)fcb_joint2.Encoder) & 0xFF),
 8004482:	4b2c      	ldr	r3, [pc, #176]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0xeec>)
 8004484:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004488:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800448c:	edc7 7a00 	vstr	s15, [r7]
		};
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	747b      	strb	r3, [r7, #17]
				(uint8_t)(((int32_t)fcb_joint3.Encoder >> 16) & 0xFF),
 8004496:	4b2b      	ldr	r3, [pc, #172]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8004498:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800449c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044a0:	ee17 3a90 	vmov	r3, s15
 80044a4:	141b      	asrs	r3, r3, #16
		};
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	74bb      	strb	r3, [r7, #18]
				(uint8_t)(((int16_t)fcb_joint3.Encoder >> 8) & 0xFF),
 80044aa:	4b26      	ldr	r3, [pc, #152]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80044ac:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80044b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044b4:	ee17 3a90 	vmov	r3, s15
 80044b8:	b21b      	sxth	r3, r3
 80044ba:	121b      	asrs	r3, r3, #8
		};
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	74fb      	strb	r3, [r7, #19]
				(uint8_t)(((int16_t)fcb_joint3.Encoder) & 0xFF),
 80044c0:	4b20      	ldr	r3, [pc, #128]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80044c2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80044c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044ca:	ee17 3a90 	vmov	r3, s15
 80044ce:	b21b      	sxth	r3, r3
		};
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	753b      	strb	r3, [r7, #20]
				(uint8_t)(((int32_t)fcb_joint4.Encoder >> 16) & 0xFF),
 80044d4:	4b21      	ldr	r3, [pc, #132]	; (800455c <HAL_TIM_PeriodElapsedCallback+0xf14>)
 80044d6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80044da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044de:	ee17 3a90 	vmov	r3, s15
 80044e2:	141b      	asrs	r3, r3, #16
		};
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	757b      	strb	r3, [r7, #21]
				(uint8_t)(((int16_t)fcb_joint4.Encoder >> 8) & 0xFF),
 80044e8:	4b1c      	ldr	r3, [pc, #112]	; (800455c <HAL_TIM_PeriodElapsedCallback+0xf14>)
 80044ea:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80044ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044f2:	ee17 3a90 	vmov	r3, s15
 80044f6:	b21b      	sxth	r3, r3
 80044f8:	121b      	asrs	r3, r3, #8
		};
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	75bb      	strb	r3, [r7, #22]
				(uint8_t)(((int16_t)fcb_joint4.Encoder) & 0xFF),
 80044fe:	4b17      	ldr	r3, [pc, #92]	; (800455c <HAL_TIM_PeriodElapsedCallback+0xf14>)
 8004500:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004504:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004508:	ee17 3a90 	vmov	r3, s15
 800450c:	b21b      	sxth	r3, r3
		};
 800450e:	b2db      	uxtb	r3, r3
 8004510:	75fb      	strb	r3, [r7, #23]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&encoder_state, 12);
 8004512:	f107 030c 	add.w	r3, r7, #12
 8004516:	220c      	movs	r2, #12
 8004518:	4619      	mov	r1, r3
 800451a:	4811      	ldr	r0, [pc, #68]	; (8004560 <HAL_TIM_PeriodElapsedCallback+0xf18>)
 800451c:	f00a fb16 	bl	800eb4c <HAL_UART_Transmit_DMA>
	}
}
 8004520:	bf00      	nop
 8004522:	3728      	adds	r7, #40	; 0x28
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	2400049c 	.word	0x2400049c
 800452c:	00000000 	.word	0x00000000
 8004530:	240004ec 	.word	0x240004ec
 8004534:	24000620 	.word	0x24000620
 8004538:	240004c4 	.word	0x240004c4
 800453c:	24000514 	.word	0x24000514
 8004540:	2400053c 	.word	0x2400053c
 8004544:	24000704 	.word	0x24000704
 8004548:	24000bbc 	.word	0x24000bbc
 800454c:	24000210 	.word	0x24000210
 8004550:	24000ab8 	.word	0x24000ab8
 8004554:	24000ab4 	.word	0x24000ab4
 8004558:	24000e24 	.word	0x24000e24
 800455c:	240007e8 	.word	0x240007e8
 8004560:	240015e8 	.word	0x240015e8
 8004564:	00000000 	.word	0x00000000

08004568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800456c:	f002 fae4 	bl	8006b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004570:	f000 faa4 	bl	8004abc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004574:	f7fd ff9c 	bl	80024b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004578:	f7fd ff2a 	bl	80023d0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800457c:	f001 ff7a 	bl	8006474 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8004580:	f001 f8a8 	bl	80056d4 <MX_TIM2_Init>
  MX_UART4_Init();
 8004584:	f001 fe88 	bl	8006298 <MX_UART4_Init>
  MX_TIM4_Init();
 8004588:	f001 f994 	bl	80058b4 <MX_TIM4_Init>
  MX_SPI3_Init();
 800458c:	f000 fc3a 	bl	8004e04 <MX_SPI3_Init>
  MX_TIM1_Init();
 8004590:	f000 fff2 	bl	8005578 <MX_TIM1_Init>
  MX_TIM3_Init();
 8004594:	f001 f916 	bl	80057c4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8004598:	f001 fa04 	bl	80059a4 <MX_TIM5_Init>
  MX_TIM15_Init();
 800459c:	f001 fb3e 	bl	8005c1c <MX_TIM15_Init>
  MX_CRC_Init();
 80045a0:	f7fd fec6 	bl	8002330 <MX_CRC_Init>
  MX_UART7_Init();
 80045a4:	f001 fecc 	bl	8006340 <MX_UART7_Init>
  MX_TIM6_Init();
 80045a8:	f001 fa4a 	bl	8005a40 <MX_TIM6_Init>
  MX_TIM7_Init();
 80045ac:	f001 fa7e 	bl	8005aac <MX_TIM7_Init>
  MX_TIM12_Init();
 80045b0:	f001 fab2 	bl	8005b18 <MX_TIM12_Init>
  MX_TIM13_Init();
 80045b4:	f001 faea 	bl	8005b8c <MX_TIM13_Init>
  MX_TIM14_Init();
 80045b8:	f001 fb0c 	bl	8005bd4 <MX_TIM14_Init>
  MX_TIM16_Init();
 80045bc:	f001 fbd2 	bl	8005d64 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80045c0:	f001 ff0c 	bl	80063dc <MX_USART2_UART_Init>
  MX_TIM17_Init();
 80045c4:	f001 fbf4 	bl	8005db0 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 80045c8:	2214      	movs	r2, #20
 80045ca:	496a      	ldr	r1, [pc, #424]	; (8004774 <main+0x20c>)
 80045cc:	486a      	ldr	r0, [pc, #424]	; (8004778 <main+0x210>)
 80045ce:	f00c fa1a 	bl	8010a06 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80045d2:	4b6a      	ldr	r3, [pc, #424]	; (800477c <main+0x214>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a6a      	ldr	r2, [pc, #424]	; (8004780 <main+0x218>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d04a      	beq.n	8004672 <main+0x10a>
 80045dc:	4b67      	ldr	r3, [pc, #412]	; (800477c <main+0x214>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a68      	ldr	r2, [pc, #416]	; (8004784 <main+0x21c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d045      	beq.n	8004672 <main+0x10a>
 80045e6:	4b65      	ldr	r3, [pc, #404]	; (800477c <main+0x214>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a67      	ldr	r2, [pc, #412]	; (8004788 <main+0x220>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d040      	beq.n	8004672 <main+0x10a>
 80045f0:	4b62      	ldr	r3, [pc, #392]	; (800477c <main+0x214>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a65      	ldr	r2, [pc, #404]	; (800478c <main+0x224>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d03b      	beq.n	8004672 <main+0x10a>
 80045fa:	4b60      	ldr	r3, [pc, #384]	; (800477c <main+0x214>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a64      	ldr	r2, [pc, #400]	; (8004790 <main+0x228>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d036      	beq.n	8004672 <main+0x10a>
 8004604:	4b5d      	ldr	r3, [pc, #372]	; (800477c <main+0x214>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a62      	ldr	r2, [pc, #392]	; (8004794 <main+0x22c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d031      	beq.n	8004672 <main+0x10a>
 800460e:	4b5b      	ldr	r3, [pc, #364]	; (800477c <main+0x214>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a61      	ldr	r2, [pc, #388]	; (8004798 <main+0x230>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d02c      	beq.n	8004672 <main+0x10a>
 8004618:	4b58      	ldr	r3, [pc, #352]	; (800477c <main+0x214>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a5f      	ldr	r2, [pc, #380]	; (800479c <main+0x234>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d027      	beq.n	8004672 <main+0x10a>
 8004622:	4b56      	ldr	r3, [pc, #344]	; (800477c <main+0x214>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a5e      	ldr	r2, [pc, #376]	; (80047a0 <main+0x238>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d022      	beq.n	8004672 <main+0x10a>
 800462c:	4b53      	ldr	r3, [pc, #332]	; (800477c <main+0x214>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a5c      	ldr	r2, [pc, #368]	; (80047a4 <main+0x23c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d01d      	beq.n	8004672 <main+0x10a>
 8004636:	4b51      	ldr	r3, [pc, #324]	; (800477c <main+0x214>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a5b      	ldr	r2, [pc, #364]	; (80047a8 <main+0x240>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d018      	beq.n	8004672 <main+0x10a>
 8004640:	4b4e      	ldr	r3, [pc, #312]	; (800477c <main+0x214>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a59      	ldr	r2, [pc, #356]	; (80047ac <main+0x244>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d013      	beq.n	8004672 <main+0x10a>
 800464a:	4b4c      	ldr	r3, [pc, #304]	; (800477c <main+0x214>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a58      	ldr	r2, [pc, #352]	; (80047b0 <main+0x248>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00e      	beq.n	8004672 <main+0x10a>
 8004654:	4b49      	ldr	r3, [pc, #292]	; (800477c <main+0x214>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a56      	ldr	r2, [pc, #344]	; (80047b4 <main+0x24c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d009      	beq.n	8004672 <main+0x10a>
 800465e:	4b47      	ldr	r3, [pc, #284]	; (800477c <main+0x214>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a55      	ldr	r2, [pc, #340]	; (80047b8 <main+0x250>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d004      	beq.n	8004672 <main+0x10a>
 8004668:	4b44      	ldr	r3, [pc, #272]	; (800477c <main+0x214>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a53      	ldr	r2, [pc, #332]	; (80047bc <main+0x254>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d108      	bne.n	8004684 <main+0x11c>
 8004672:	4b42      	ldr	r3, [pc, #264]	; (800477c <main+0x214>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	4b40      	ldr	r3, [pc, #256]	; (800477c <main+0x214>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0208 	bic.w	r2, r2, #8
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	e007      	b.n	8004694 <main+0x12c>
 8004684:	4b3d      	ldr	r3, [pc, #244]	; (800477c <main+0x214>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	4b3c      	ldr	r3, [pc, #240]	; (800477c <main+0x214>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0204 	bic.w	r2, r2, #4
 8004692:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8004694:	2201      	movs	r2, #1
 8004696:	2101      	movs	r1, #1
 8004698:	4849      	ldr	r0, [pc, #292]	; (80047c0 <main+0x258>)
 800469a:	f005 fe13 	bl	800a2c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800469e:	2201      	movs	r2, #1
 80046a0:	2102      	movs	r1, #2
 80046a2:	4848      	ldr	r0, [pc, #288]	; (80047c4 <main+0x25c>)
 80046a4:	f005 fe0e 	bl	800a2c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80046a8:	2200      	movs	r2, #0
 80046aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80046ae:	4844      	ldr	r0, [pc, #272]	; (80047c0 <main+0x258>)
 80046b0:	f005 fe08 	bl	800a2c4 <HAL_GPIO_WritePin>

	#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 80046b4:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80047e8 <main+0x280>
 80046b8:	4843      	ldr	r0, [pc, #268]	; (80047c8 <main+0x260>)
 80046ba:	f7fd fb49 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(8);
 80046be:	2108      	movs	r1, #8
 80046c0:	4841      	ldr	r0, [pc, #260]	; (80047c8 <main+0x260>)
 80046c2:	f7fd fde1 	bl	8002288 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(42);
 80046c6:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80047cc <main+0x264>
 80046ca:	483f      	ldr	r0, [pc, #252]	; (80047c8 <main+0x260>)
 80046cc:	f7fd fdb8 	bl	8002240 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 80046d0:	483d      	ldr	r0, [pc, #244]	; (80047c8 <main+0x260>)
 80046d2:	f7fd fb2c 	bl	8001d2e <_ZN7Stepper13StepperEnableEv>

	stepperJ2.StepperSetFrequency(0.0f);
 80046d6:	ed9f 0a44 	vldr	s0, [pc, #272]	; 80047e8 <main+0x280>
 80046da:	483d      	ldr	r0, [pc, #244]	; (80047d0 <main+0x268>)
 80046dc:	f7fd fb38 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ2.StepperSetMicrostep(16);
 80046e0:	2110      	movs	r1, #16
 80046e2:	483b      	ldr	r0, [pc, #236]	; (80047d0 <main+0x268>)
 80046e4:	f7fd fdd0 	bl	8002288 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ2.StepperSetRatio(3);
 80046e8:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80046ec:	4838      	ldr	r0, [pc, #224]	; (80047d0 <main+0x268>)
 80046ee:	f7fd fda7 	bl	8002240 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ2.StepperEnable();
 80046f2:	4837      	ldr	r0, [pc, #220]	; (80047d0 <main+0x268>)
 80046f4:	f7fd fb1b 	bl	8001d2e <_ZN7Stepper13StepperEnableEv>

	stepperJ3.StepperSetFrequency(0.0f);
 80046f8:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 80047e8 <main+0x280>
 80046fc:	4835      	ldr	r0, [pc, #212]	; (80047d4 <main+0x26c>)
 80046fe:	f7fd fb27 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(16);
 8004702:	2110      	movs	r1, #16
 8004704:	4833      	ldr	r0, [pc, #204]	; (80047d4 <main+0x26c>)
 8004706:	f7fd fdbf 	bl	8002288 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 800470a:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 800470e:	4831      	ldr	r0, [pc, #196]	; (80047d4 <main+0x26c>)
 8004710:	f7fd fd96 	bl	8002240 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 8004714:	482f      	ldr	r0, [pc, #188]	; (80047d4 <main+0x26c>)
 8004716:	f7fd fb0a 	bl	8001d2e <_ZN7Stepper13StepperEnableEv>

	stepperJ4.StepperSetFrequency(0.0f);
 800471a:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80047e8 <main+0x280>
 800471e:	482e      	ldr	r0, [pc, #184]	; (80047d8 <main+0x270>)
 8004720:	f7fd fb16 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ4.StepperSetMicrostep(1);
 8004724:	2101      	movs	r1, #1
 8004726:	482c      	ldr	r0, [pc, #176]	; (80047d8 <main+0x270>)
 8004728:	f7fd fdae 	bl	8002288 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ4.StepperSetRatio(3);
 800472c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004730:	4829      	ldr	r0, [pc, #164]	; (80047d8 <main+0x270>)
 8004732:	f7fd fd85 	bl	8002240 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ4.StepperEnable();
 8004736:	4828      	ldr	r0, [pc, #160]	; (80047d8 <main+0x270>)
 8004738:	f7fd faf9 	bl	8001d2e <_ZN7Stepper13StepperEnableEv>

//	gripper.setDegreeGripperClose(80);
	gripper.setDegreeGripperClose(145);
 800473c:	2191      	movs	r1, #145	; 0x91
 800473e:	4827      	ldr	r0, [pc, #156]	; (80047dc <main+0x274>)
 8004740:	f7fd fa3f 	bl	8001bc2 <_ZN10ServoMotor21setDegreeGripperCloseEl>
//	gripper.setDegreeGripperClose(40);
	gripper.setDegreeGripperOpen(57);
 8004744:	2139      	movs	r1, #57	; 0x39
 8004746:	4825      	ldr	r0, [pc, #148]	; (80047dc <main+0x274>)
 8004748:	f7fd fa2a 	bl	8001ba0 <_ZN10ServoMotor20setDegreeGripperOpenEl>
	gripper.ServoEnable();
 800474c:	4823      	ldr	r0, [pc, #140]	; (80047dc <main+0x274>)
 800474e:	f7fd f852 	bl	80017f6 <_ZN10ServoMotor11ServoEnableEv>
	gripper.GripperClose();
 8004752:	4822      	ldr	r0, [pc, #136]	; (80047dc <main+0x274>)
 8004754:	f7fd fa46 	bl	8001be4 <_ZN10ServoMotor12GripperCloseEv>
	while(!Limit_sw_Z_Top)
 8004758:	4b21      	ldr	r3, [pc, #132]	; (80047e0 <main+0x278>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	f083 0301 	eor.w	r3, r3, #1
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d041      	beq.n	80047ec <main+0x284>
	{
		stepperJ2.StepperSetFrequency(1200.0f);
 8004768:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80047e4 <main+0x27c>
 800476c:	4818      	ldr	r0, [pc, #96]	; (80047d0 <main+0x268>)
 800476e:	f7fd faef 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	while(!Limit_sw_Z_Top)
 8004772:	e7f1      	b.n	8004758 <main+0x1f0>
 8004774:	24000af0 	.word	0x24000af0
 8004778:	24001360 	.word	0x24001360
 800477c:	240012e8 	.word	0x240012e8
 8004780:	40020010 	.word	0x40020010
 8004784:	40020028 	.word	0x40020028
 8004788:	40020040 	.word	0x40020040
 800478c:	40020058 	.word	0x40020058
 8004790:	40020070 	.word	0x40020070
 8004794:	40020088 	.word	0x40020088
 8004798:	400200a0 	.word	0x400200a0
 800479c:	400200b8 	.word	0x400200b8
 80047a0:	40020410 	.word	0x40020410
 80047a4:	40020428 	.word	0x40020428
 80047a8:	40020440 	.word	0x40020440
 80047ac:	40020458 	.word	0x40020458
 80047b0:	40020470 	.word	0x40020470
 80047b4:	40020488 	.word	0x40020488
 80047b8:	400204a0 	.word	0x400204a0
 80047bc:	400204b8 	.word	0x400204b8
 80047c0:	58020400 	.word	0x58020400
 80047c4:	58021000 	.word	0x58021000
 80047c8:	2400049c 	.word	0x2400049c
 80047cc:	42280000 	.word	0x42280000
 80047d0:	240004c4 	.word	0x240004c4
 80047d4:	240004ec 	.word	0x240004ec
 80047d8:	24000514 	.word	0x24000514
 80047dc:	24000a94 	.word	0x24000a94
 80047e0:	24000b07 	.word	0x24000b07
 80047e4:	44960000 	.word	0x44960000
 80047e8:	00000000 	.word	0x00000000
	}
	stepperJ2.StepperSetFrequency(0.0f);
 80047ec:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 80047e8 <main+0x280>
 80047f0:	4897      	ldr	r0, [pc, #604]	; (8004a50 <main+0x4e8>)
 80047f2:	f7fd faad 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(200);
 80047f6:	20c8      	movs	r0, #200	; 0xc8
 80047f8:	f002 fa30 	bl	8006c5c <HAL_Delay>
	stepperJ2.StepperSetFrequency(-800.0f);
 80047fc:	ed9f 0a95 	vldr	s0, [pc, #596]	; 8004a54 <main+0x4ec>
 8004800:	4893      	ldr	r0, [pc, #588]	; (8004a50 <main+0x4e8>)
 8004802:	f7fd faa5 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(2000);
 8004806:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800480a:	f002 fa27 	bl	8006c5c <HAL_Delay>
	stepperJ2.StepperSetFrequency(0.0f);
 800480e:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8004a58 <main+0x4f0>
 8004812:	488f      	ldr	r0, [pc, #572]	; (8004a50 <main+0x4e8>)
 8004814:	f7fd fa9c 	bl	8001d50 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(1000);
 8004818:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800481c:	f002 fa1e 	bl	8006c5c <HAL_Delay>
	gripper.GripperOpen();
 8004820:	488e      	ldr	r0, [pc, #568]	; (8004a5c <main+0x4f4>)
 8004822:	f7fd f9f5 	bl	8001c10 <_ZN10ServoMotor11GripperOpenEv>
	Limit_sw_Z_Top = false;
 8004826:	4b8e      	ldr	r3, [pc, #568]	; (8004a60 <main+0x4f8>)
 8004828:	2200      	movs	r2, #0
 800482a:	701a      	strb	r2, [r3, #0]



	encoderJ1.AMT21_Read();
 800482c:	488d      	ldr	r0, [pc, #564]	; (8004a64 <main+0x4fc>)
 800482e:	f7fb ff4a 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8004832:	488c      	ldr	r0, [pc, #560]	; (8004a64 <main+0x4fc>)
 8004834:	f7fb ff76 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004838:	4603      	mov	r3, r0
 800483a:	461a      	mov	r2, r3
 800483c:	4b8a      	ldr	r3, [pc, #552]	; (8004a68 <main+0x500>)
 800483e:	701a      	strb	r2, [r3, #0]
	if (HALENCJ1OK == HAL_OK) {
 8004840:	4b89      	ldr	r3, [pc, #548]	; (8004a68 <main+0x500>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d110      	bne.n	800486a <main+0x302>
		fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609 ;}
 8004848:	4886      	ldr	r0, [pc, #536]	; (8004a64 <main+0x4fc>)
 800484a:	f7fb ffcf 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 800484e:	4603      	mov	r3, r0
 8004850:	ee07 3a90 	vmov	s15, r3
 8004854:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004858:	ed9f 5b7b 	vldr	d5, [pc, #492]	; 8004a48 <main+0x4e0>
 800485c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004860:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004864:	4b81      	ldr	r3, [pc, #516]	; (8004a6c <main+0x504>)
 8004866:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	encoderJ2.AMT21_Read();
 800486a:	4881      	ldr	r0, [pc, #516]	; (8004a70 <main+0x508>)
 800486c:	f7fb ff2b 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8004870:	487f      	ldr	r0, [pc, #508]	; (8004a70 <main+0x508>)
 8004872:	f7fb ff57 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004876:	4603      	mov	r3, r0
 8004878:	461a      	mov	r2, r3
 800487a:	4b7e      	ldr	r3, [pc, #504]	; (8004a74 <main+0x50c>)
 800487c:	701a      	strb	r2, [r3, #0]
	if (HALENCJ2OK == HAL_OK) {
 800487e:	4b7d      	ldr	r3, [pc, #500]	; (8004a74 <main+0x50c>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d115      	bne.n	80048b2 <main+0x34a>
		encoderJ2.unwarp();
 8004886:	487a      	ldr	r0, [pc, #488]	; (8004a70 <main+0x508>)
 8004888:	f7fb ffd2 	bl	8000830 <_ZN5AMT216unwarpEv>
		encoderJ2.setUnwarpZero();
 800488c:	4878      	ldr	r0, [pc, #480]	; (8004a70 <main+0x508>)
 800488e:	f7fc f821 	bl	80008d4 <_ZN5AMT2113setUnwarpZeroEv>
		fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609 ;}
 8004892:	4877      	ldr	r0, [pc, #476]	; (8004a70 <main+0x508>)
 8004894:	f7fc f82b 	bl	80008ee <_ZN5AMT2114getUnwarpValueEv>
 8004898:	ee07 0a90 	vmov	s15, r0
 800489c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80048a0:	ed9f 5b69 	vldr	d5, [pc, #420]	; 8004a48 <main+0x4e0>
 80048a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80048a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80048ac:	4b72      	ldr	r3, [pc, #456]	; (8004a78 <main+0x510>)
 80048ae:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	encoderJ3.AMT21_Read();
 80048b2:	4872      	ldr	r0, [pc, #456]	; (8004a7c <main+0x514>)
 80048b4:	f7fb ff07 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 80048b8:	4870      	ldr	r0, [pc, #448]	; (8004a7c <main+0x514>)
 80048ba:	f7fb ff33 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80048be:	4603      	mov	r3, r0
 80048c0:	461a      	mov	r2, r3
 80048c2:	4b6f      	ldr	r3, [pc, #444]	; (8004a80 <main+0x518>)
 80048c4:	701a      	strb	r2, [r3, #0]
	if (HALENCJ3OK == HAL_OK) {
 80048c6:	4b6e      	ldr	r3, [pc, #440]	; (8004a80 <main+0x518>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d110      	bne.n	80048f0 <main+0x388>
		fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609 ;}
 80048ce:	486b      	ldr	r0, [pc, #428]	; (8004a7c <main+0x514>)
 80048d0:	f7fb ff8c 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 80048d4:	4603      	mov	r3, r0
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80048de:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 8004a48 <main+0x4e0>
 80048e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80048e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80048ea:	4b66      	ldr	r3, [pc, #408]	; (8004a84 <main+0x51c>)
 80048ec:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	encoderJ4.AMT21_Read();
 80048f0:	4865      	ldr	r0, [pc, #404]	; (8004a88 <main+0x520>)
 80048f2:	f7fb fee8 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 80048f6:	4864      	ldr	r0, [pc, #400]	; (8004a88 <main+0x520>)
 80048f8:	f7fb ff14 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80048fc:	4603      	mov	r3, r0
 80048fe:	461a      	mov	r2, r3
 8004900:	4b62      	ldr	r3, [pc, #392]	; (8004a8c <main+0x524>)
 8004902:	701a      	strb	r2, [r3, #0]
	if (HALENCJ4OK == HAL_OK) {
 8004904:	4b61      	ldr	r3, [pc, #388]	; (8004a8c <main+0x524>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d110      	bne.n	800492e <main+0x3c6>
		fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;}
 800490c:	485e      	ldr	r0, [pc, #376]	; (8004a88 <main+0x520>)
 800490e:	f7fb ff6d 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8004912:	4603      	mov	r3, r0
 8004914:	ee07 3a90 	vmov	s15, r3
 8004918:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800491c:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8004a48 <main+0x4e0>
 8004920:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004924:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004928:	4b59      	ldr	r3, [pc, #356]	; (8004a90 <main+0x528>)
 800492a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

//	  zero_position = chessSPIEncoder.getRawRotation();
//	  zero_position_map = chessSPIEncoder.read2angle(zero_position);

	fcb_joint1.p11 = 3.60381982 / 100000000.0 ;
 800492e:	4b4f      	ldr	r3, [pc, #316]	; (8004a6c <main+0x504>)
 8004930:	4a58      	ldr	r2, [pc, #352]	; (8004a94 <main+0x52c>)
 8004932:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	fcb_joint1.p12 = 1.08884194 / 10000000.0;
 8004936:	4b4d      	ldr	r3, [pc, #308]	; (8004a6c <main+0x504>)
 8004938:	4a57      	ldr	r2, [pc, #348]	; (8004a98 <main+0x530>)
 800493a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	fcb_joint1.p21 = 1.0888423 / 10000000.0;
 800493e:	4b4b      	ldr	r3, [pc, #300]	; (8004a6c <main+0x504>)
 8004940:	4a56      	ldr	r2, [pc, #344]	; (8004a9c <main+0x534>)
 8004942:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	fcb_joint1.p22 = 6.59951866 / 10000000.0;
 8004946:	4b49      	ldr	r3, [pc, #292]	; (8004a6c <main+0x504>)
 8004948:	4a55      	ldr	r2, [pc, #340]	; (8004aa0 <main+0x538>)
 800494a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	fcb_joint3.p11 = 3.60381982 / 100000000.0;
 800494e:	4b4d      	ldr	r3, [pc, #308]	; (8004a84 <main+0x51c>)
 8004950:	4a50      	ldr	r2, [pc, #320]	; (8004a94 <main+0x52c>)
 8004952:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	fcb_joint3.p12 = 1.08884194 / 10000000.0;
 8004956:	4b4b      	ldr	r3, [pc, #300]	; (8004a84 <main+0x51c>)
 8004958:	4a4f      	ldr	r2, [pc, #316]	; (8004a98 <main+0x530>)
 800495a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	fcb_joint3.p21 = 1.0888423 / 10000000.0;
 800495e:	4b49      	ldr	r3, [pc, #292]	; (8004a84 <main+0x51c>)
 8004960:	4a4e      	ldr	r2, [pc, #312]	; (8004a9c <main+0x534>)
 8004962:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	fcb_joint3.p22 = 6.59951866 / 10000000.0;
 8004966:	4b47      	ldr	r3, [pc, #284]	; (8004a84 <main+0x51c>)
 8004968:	4a4d      	ldr	r2, [pc, #308]	; (8004aa0 <main+0x538>)
 800496a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4


	fcb_joint1.Q = 0.001;
 800496e:	4b3f      	ldr	r3, [pc, #252]	; (8004a6c <main+0x504>)
 8004970:	4a4c      	ldr	r2, [pc, #304]	; (8004aa4 <main+0x53c>)
 8004972:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint1.R = 0.0000003;
 8004976:	4b3d      	ldr	r3, [pc, #244]	; (8004a6c <main+0x504>)
 8004978:	4a4b      	ldr	r2, [pc, #300]	; (8004aa8 <main+0x540>)
 800497a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	fcb_joint2.Q = 0.001;
 800497e:	4b3e      	ldr	r3, [pc, #248]	; (8004a78 <main+0x510>)
 8004980:	4a48      	ldr	r2, [pc, #288]	; (8004aa4 <main+0x53c>)
 8004982:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint2.R = 0.00003;
 8004986:	4b3c      	ldr	r3, [pc, #240]	; (8004a78 <main+0x510>)
 8004988:	4a48      	ldr	r2, [pc, #288]	; (8004aac <main+0x544>)
 800498a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	fcb_joint3.Q = 0.001;
 800498e:	4b3d      	ldr	r3, [pc, #244]	; (8004a84 <main+0x51c>)
 8004990:	4a44      	ldr	r2, [pc, #272]	; (8004aa4 <main+0x53c>)
 8004992:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint3.R = 0.000001;
 8004996:	4b3b      	ldr	r3, [pc, #236]	; (8004a84 <main+0x51c>)
 8004998:	4a45      	ldr	r2, [pc, #276]	; (8004ab0 <main+0x548>)
 800499a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

//	fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
	fcb_joint1.X11 = fcb_joint1.Encoder;
 800499e:	4b33      	ldr	r3, [pc, #204]	; (8004a6c <main+0x504>)
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	4a32      	ldr	r2, [pc, #200]	; (8004a6c <main+0x504>)
 80049a4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint1.X21 = 0.0;
 80049a8:	4b30      	ldr	r3, [pc, #192]	; (8004a6c <main+0x504>)
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint1.kalman_pos = fcb_joint1.X11;
 80049b2:	4b2e      	ldr	r3, [pc, #184]	; (8004a6c <main+0x504>)
 80049b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049b8:	4a2c      	ldr	r2, [pc, #176]	; (8004a6c <main+0x504>)
 80049ba:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint1.kalman_velo = 0.0;
 80049be:	4b2b      	ldr	r3, [pc, #172]	; (8004a6c <main+0x504>)
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint1.Goal_Position = fcb_joint1.Encoder;
 80049c8:	4b28      	ldr	r3, [pc, #160]	; (8004a6c <main+0x504>)
 80049ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049cc:	4a27      	ldr	r2, [pc, #156]	; (8004a6c <main+0x504>)
 80049ce:	6493      	str	r3, [r2, #72]	; 0x48

//	fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
	fcb_joint2.X11 = fcb_joint2.Encoder;
 80049d0:	4b29      	ldr	r3, [pc, #164]	; (8004a78 <main+0x510>)
 80049d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d4:	4a28      	ldr	r2, [pc, #160]	; (8004a78 <main+0x510>)
 80049d6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint2.X21 = 0.0;
 80049da:	4b27      	ldr	r3, [pc, #156]	; (8004a78 <main+0x510>)
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint2.kalman_pos = fcb_joint2.X11;
 80049e4:	4b24      	ldr	r3, [pc, #144]	; (8004a78 <main+0x510>)
 80049e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049ea:	4a23      	ldr	r2, [pc, #140]	; (8004a78 <main+0x510>)
 80049ec:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint2.kalman_velo = 0.0;
 80049f0:	4b21      	ldr	r3, [pc, #132]	; (8004a78 <main+0x510>)
 80049f2:	f04f 0200 	mov.w	r2, #0
 80049f6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint2.Goal_Position = fcb_joint2.Encoder;
 80049fa:	4b1f      	ldr	r3, [pc, #124]	; (8004a78 <main+0x510>)
 80049fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fe:	4a1e      	ldr	r2, [pc, #120]	; (8004a78 <main+0x510>)
 8004a00:	6493      	str	r3, [r2, #72]	; 0x48

//	fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
	fcb_joint3.X11 = fcb_joint3.Encoder;
 8004a02:	4b20      	ldr	r3, [pc, #128]	; (8004a84 <main+0x51c>)
 8004a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a06:	4a1f      	ldr	r2, [pc, #124]	; (8004a84 <main+0x51c>)
 8004a08:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint3.X21 = 0.0;
 8004a0c:	4b1d      	ldr	r3, [pc, #116]	; (8004a84 <main+0x51c>)
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint3.kalman_pos = fcb_joint3.X11;
 8004a16:	4b1b      	ldr	r3, [pc, #108]	; (8004a84 <main+0x51c>)
 8004a18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a1c:	4a19      	ldr	r2, [pc, #100]	; (8004a84 <main+0x51c>)
 8004a1e:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint3.kalman_velo = 0.0;
 8004a22:	4b18      	ldr	r3, [pc, #96]	; (8004a84 <main+0x51c>)
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint3.Goal_Position = fcb_joint3.Encoder;
 8004a2c:	4b15      	ldr	r3, [pc, #84]	; (8004a84 <main+0x51c>)
 8004a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a30:	4a14      	ldr	r2, [pc, #80]	; (8004a84 <main+0x51c>)
 8004a32:	6493      	str	r3, [r2, #72]	; 0x48
//		HAL_TIM_Base_Start_IT(&htim5); // Jog 		100 Hz
//		HAL_TIM_Base_Start_IT(&htim6); // Set home 	200 Hz
//		HAL_TIM_Base_Start_IT(&htim7); // Control 	1000 Hz
//		HAL_TIM_Base_Start_IT(&htim12); // 			2000 Hz
//		HAL_TIM_Base_Start_IT(&htim14); // 			500Hz
		HAL_TIM_Base_Start_IT(&htim16); // 			1000Hz
 8004a34:	481f      	ldr	r0, [pc, #124]	; (8004ab4 <main+0x54c>)
 8004a36:	f008 fc07 	bl	800d248 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim17);	// Joint State 50Hz
 8004a3a:	481f      	ldr	r0, [pc, #124]	; (8004ab8 <main+0x550>)
 8004a3c:	f008 fc04 	bl	800d248 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 while (1)
 8004a40:	e7fe      	b.n	8004a40 <main+0x4d8>
 8004a42:	bf00      	nop
 8004a44:	f3af 8000 	nop.w
 8004a48:	645a1cac 	.word	0x645a1cac
 8004a4c:	4004df3b 	.word	0x4004df3b
 8004a50:	240004c4 	.word	0x240004c4
 8004a54:	c4480000 	.word	0xc4480000
 8004a58:	00000000 	.word	0x00000000
 8004a5c:	24000a94 	.word	0x24000a94
 8004a60:	24000b07 	.word	0x24000b07
 8004a64:	2400042c 	.word	0x2400042c
 8004a68:	24000ab0 	.word	0x24000ab0
 8004a6c:	2400053c 	.word	0x2400053c
 8004a70:	24000448 	.word	0x24000448
 8004a74:	24000ab1 	.word	0x24000ab1
 8004a78:	24000620 	.word	0x24000620
 8004a7c:	24000464 	.word	0x24000464
 8004a80:	24000ab2 	.word	0x24000ab2
 8004a84:	24000704 	.word	0x24000704
 8004a88:	24000480 	.word	0x24000480
 8004a8c:	24000ab3 	.word	0x24000ab3
 8004a90:	240007e8 	.word	0x240007e8
 8004a94:	331ac86b 	.word	0x331ac86b
 8004a98:	33e9d3b8 	.word	0x33e9d3b8
 8004a9c:	33e9d3bd 	.word	0x33e9d3bd
 8004aa0:	3531278c 	.word	0x3531278c
 8004aa4:	3a83126f 	.word	0x3a83126f
 8004aa8:	34a10fb0 	.word	0x34a10fb0
 8004aac:	37fba882 	.word	0x37fba882
 8004ab0:	358637bd 	.word	0x358637bd
 8004ab4:	240010d0 	.word	0x240010d0
 8004ab8:	24000e24 	.word	0x24000e24

08004abc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b09c      	sub	sp, #112	; 0x70
 8004ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ac6:	224c      	movs	r2, #76	; 0x4c
 8004ac8:	2100      	movs	r1, #0
 8004aca:	4618      	mov	r0, r3
 8004acc:	f00d fba8 	bl	8012220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ad0:	1d3b      	adds	r3, r7, #4
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f00d fba2 	bl	8012220 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004adc:	2002      	movs	r0, #2
 8004ade:	f005 fc25 	bl	800a32c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	603b      	str	r3, [r7, #0]
 8004ae6:	4b38      	ldr	r3, [pc, #224]	; (8004bc8 <_Z18SystemClock_Configv+0x10c>)
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	4a37      	ldr	r2, [pc, #220]	; (8004bc8 <_Z18SystemClock_Configv+0x10c>)
 8004aec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004af0:	6193      	str	r3, [r2, #24]
 8004af2:	4b35      	ldr	r3, [pc, #212]	; (8004bc8 <_Z18SystemClock_Configv+0x10c>)
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	4b33      	ldr	r3, [pc, #204]	; (8004bcc <_Z18SystemClock_Configv+0x110>)
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	4a32      	ldr	r2, [pc, #200]	; (8004bcc <_Z18SystemClock_Configv+0x110>)
 8004b02:	f043 0301 	orr.w	r3, r3, #1
 8004b06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b08:	4b30      	ldr	r3, [pc, #192]	; (8004bcc <_Z18SystemClock_Configv+0x110>)
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	603b      	str	r3, [r7, #0]
 8004b12:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004b14:	4b2c      	ldr	r3, [pc, #176]	; (8004bc8 <_Z18SystemClock_Configv+0x10c>)
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b20:	bf14      	ite	ne
 8004b22:	2301      	movne	r3, #1
 8004b24:	2300      	moveq	r3, #0
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d000      	beq.n	8004b2e <_Z18SystemClock_Configv+0x72>
 8004b2c:	e7f2      	b.n	8004b14 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004b2e:	2302      	movs	r3, #2
 8004b30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8004b32:	2301      	movs	r3, #1
 8004b34:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b36:	2340      	movs	r3, #64	; 0x40
 8004b38:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004b42:	2304      	movs	r3, #4
 8004b44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004b46:	233c      	movs	r3, #60	; 0x3c
 8004b48:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8004b4e:	2306      	movs	r3, #6
 8004b50:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004b52:	2302      	movs	r3, #2
 8004b54:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004b56:	230c      	movs	r3, #12
 8004b58:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b66:	4618      	mov	r0, r3
 8004b68:	f005 fc1a 	bl	800a3a0 <HAL_RCC_OscConfig>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	bf14      	ite	ne
 8004b72:	2301      	movne	r3, #1
 8004b74:	2300      	moveq	r3, #0
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8004b7c:	f000 f856 	bl	8004c2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b80:	233f      	movs	r3, #63	; 0x3f
 8004b82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b84:	2303      	movs	r3, #3
 8004b86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004b8c:	2308      	movs	r3, #8
 8004b8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004b90:	2340      	movs	r3, #64	; 0x40
 8004b92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004b94:	2340      	movs	r3, #64	; 0x40
 8004b96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b9c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004b9e:	2340      	movs	r3, #64	; 0x40
 8004ba0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004ba2:	1d3b      	adds	r3, r7, #4
 8004ba4:	2104      	movs	r1, #4
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f006 f826 	bl	800abf8 <HAL_RCC_ClockConfig>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	bf14      	ite	ne
 8004bb2:	2301      	movne	r3, #1
 8004bb4:	2300      	moveq	r3, #0
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8004bbc:	f000 f836 	bl	8004c2c <Error_Handler>
  }
}
 8004bc0:	bf00      	nop
 8004bc2:	3770      	adds	r7, #112	; 0x70
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	58024800 	.word	0x58024800
 8004bcc:	58000400 	.word	0x58000400

08004bd0 <HAL_GPIO_EXTI_Callback>:

/*void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
//
//}
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LM_Z_BOTTOM_Pin){	// Limit Switch Bottom Z-axis
 8004bda:	88fb      	ldrh	r3, [r7, #6]
 8004bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be0:	d102      	bne.n	8004be8 <HAL_GPIO_EXTI_Callback+0x18>
		Limit_sw_Z_Bot = true;
 8004be2:	4b0e      	ldr	r3, [pc, #56]	; (8004c1c <HAL_GPIO_EXTI_Callback+0x4c>)
 8004be4:	2201      	movs	r2, #1
 8004be6:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == LM_Z_TOP_Pin){	// Limit Switch Top Z-axis
 8004be8:	88fb      	ldrh	r3, [r7, #6]
 8004bea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bee:	d102      	bne.n	8004bf6 <HAL_GPIO_EXTI_Callback+0x26>
		Limit_sw_Z_Top = true;
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <HAL_GPIO_EXTI_Callback+0x50>)
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == LM_SERVO_Pin){	// Limit Switch Servo
 8004bf6:	88fb      	ldrh	r3, [r7, #6]
 8004bf8:	2b80      	cmp	r3, #128	; 0x80
 8004bfa:	d102      	bne.n	8004c02 <HAL_GPIO_EXTI_Callback+0x32>
		Limit_sw_Gripper = true;
 8004bfc:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <HAL_GPIO_EXTI_Callback+0x54>)
 8004bfe:	2201      	movs	r2, #1
 8004c00:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == LM_LED_Pin){	// Limit Switch LED on Cabinet
 8004c02:	88fb      	ldrh	r3, [r7, #6]
 8004c04:	2b40      	cmp	r3, #64	; 0x40
 8004c06:	d102      	bne.n	8004c0e <HAL_GPIO_EXTI_Callback+0x3e>
		Limit_sw_Emergancy = true;
 8004c08:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <HAL_GPIO_EXTI_Callback+0x58>)
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	701a      	strb	r2, [r3, #0]
	}


}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	24000b06 	.word	0x24000b06
 8004c20:	24000b07 	.word	0x24000b07
 8004c24:	24000b08 	.word	0x24000b08
 8004c28:	24000b09 	.word	0x24000b09

08004c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8004c30:	2200      	movs	r2, #0
 8004c32:	2101      	movs	r1, #1
 8004c34:	4808      	ldr	r0, [pc, #32]	; (8004c58 <Error_Handler+0x2c>)
 8004c36:	f005 fb45 	bl	800a2c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	2102      	movs	r1, #2
 8004c3e:	4807      	ldr	r0, [pc, #28]	; (8004c5c <Error_Handler+0x30>)
 8004c40:	f005 fb40 	bl	800a2c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8004c44:	2201      	movs	r2, #1
 8004c46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004c4a:	4803      	ldr	r0, [pc, #12]	; (8004c58 <Error_Handler+0x2c>)
 8004c4c:	f005 fb3a 	bl	800a2c4 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c50:	b672      	cpsid	i
}
 8004c52:	bf00      	nop
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8004c54:	e7fe      	b.n	8004c54 <Error_Handler+0x28>
 8004c56:	bf00      	nop
 8004c58:	58020400 	.word	0x58020400
 8004c5c:	58021000 	.word	0x58021000

08004c60 <_Z41__static_initialization_and_destruction_0ii>:
}
  /* USER CODE END Error_Handler_Debug */
}
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af02      	add	r7, sp, #8
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d152      	bne.n	8004d16 <_Z41__static_initialization_and_destruction_0ii+0xb6>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d14d      	bne.n	8004d16 <_Z41__static_initialization_and_destruction_0ii+0xb6>
AMT21 encoderJ1(&huart4, 0xD4);
 8004c7a:	22d4      	movs	r2, #212	; 0xd4
 8004c7c:	4942      	ldr	r1, [pc, #264]	; (8004d88 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8004c7e:	4843      	ldr	r0, [pc, #268]	; (8004d8c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8004c80:	f7fb fd02 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ2(&huart4, 0xB4);
 8004c84:	22b4      	movs	r2, #180	; 0xb4
 8004c86:	4940      	ldr	r1, [pc, #256]	; (8004d88 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8004c88:	4841      	ldr	r0, [pc, #260]	; (8004d90 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8004c8a:	f7fb fcfd 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 8004c8e:	22c4      	movs	r2, #196	; 0xc4
 8004c90:	493d      	ldr	r1, [pc, #244]	; (8004d88 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8004c92:	4840      	ldr	r0, [pc, #256]	; (8004d94 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8004c94:	f7fb fcf8 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ4(&huart4, 0xA4);
 8004c98:	22a4      	movs	r2, #164	; 0xa4
 8004c9a:	493b      	ldr	r1, [pc, #236]	; (8004d88 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8004c9c:	483e      	ldr	r0, [pc, #248]	; (8004d98 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8004c9e:	f7fb fcf3 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8004ca2:	2320      	movs	r3, #32
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	4b3d      	ldr	r3, [pc, #244]	; (8004d9c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	493d      	ldr	r1, [pc, #244]	; (8004da0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004cac:	483d      	ldr	r0, [pc, #244]	; (8004da4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004cae:	f7fc fff1 	bl	8001c94 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8004cb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	4b3b      	ldr	r3, [pc, #236]	; (8004da8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004cba:	2204      	movs	r2, #4
 8004cbc:	493b      	ldr	r1, [pc, #236]	; (8004dac <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004cbe:	483c      	ldr	r0, [pc, #240]	; (8004db0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004cc0:	f7fc ffe8 	bl	8001c94 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8004cc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	4b37      	ldr	r3, [pc, #220]	; (8004da8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004ccc:	2204      	movs	r2, #4
 8004cce:	4939      	ldr	r1, [pc, #228]	; (8004db4 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8004cd0:	4839      	ldr	r0, [pc, #228]	; (8004db8 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004cd2:	f7fc ffdf 	bl	8001c94 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8004cd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	4b2f      	ldr	r3, [pc, #188]	; (8004d9c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004cde:	2208      	movs	r2, #8
 8004ce0:	4936      	ldr	r1, [pc, #216]	; (8004dbc <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004ce2:	4837      	ldr	r0, [pc, #220]	; (8004dc0 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8004ce4:	f7fc ffd6 	bl	8001c94 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
RobotJoint fcb_joint1;
 8004ce8:	4836      	ldr	r0, [pc, #216]	; (8004dc4 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004cea:	f7fb fe31 	bl	8000950 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint2;
 8004cee:	4836      	ldr	r0, [pc, #216]	; (8004dc8 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004cf0:	f7fb fe2e 	bl	8000950 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint3;
 8004cf4:	4835      	ldr	r0, [pc, #212]	; (8004dcc <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004cf6:	f7fb fe2b 	bl	8000950 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint4;
 8004cfa:	4835      	ldr	r0, [pc, #212]	; (8004dd0 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004cfc:	f7fb fe28 	bl	8000950 <_ZN10RobotJointC1Ev>
RobotJoint fcb_Y;
 8004d00:	4834      	ldr	r0, [pc, #208]	; (8004dd4 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004d02:	f7fb fe25 	bl	8000950 <_ZN10RobotJointC1Ev>
RobotJoint fcb_X;
 8004d06:	4834      	ldr	r0, [pc, #208]	; (8004dd8 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004d08:	f7fb fe22 	bl	8000950 <_ZN10RobotJointC1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	4933      	ldr	r1, [pc, #204]	; (8004ddc <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004d10:	4833      	ldr	r0, [pc, #204]	; (8004de0 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004d12:	f7fc fd35 	bl	8001780 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d131      	bne.n	8004d80 <_Z41__static_initialization_and_destruction_0ii+0x120>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d12c      	bne.n	8004d80 <_Z41__static_initialization_and_destruction_0ii+0x120>
 8004d26:	482e      	ldr	r0, [pc, #184]	; (8004de0 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004d28:	f7fc fd5a 	bl	80017e0 <_ZN10ServoMotorD1Ev>
RobotJoint fcb_X;
 8004d2c:	482a      	ldr	r0, [pc, #168]	; (8004dd8 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004d2e:	f7fb fe7d 	bl	8000a2c <_ZN10RobotJointD1Ev>
RobotJoint fcb_Y;
 8004d32:	4828      	ldr	r0, [pc, #160]	; (8004dd4 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004d34:	f7fb fe7a 	bl	8000a2c <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint4;
 8004d38:	4825      	ldr	r0, [pc, #148]	; (8004dd0 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004d3a:	f7fb fe77 	bl	8000a2c <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint3;
 8004d3e:	4823      	ldr	r0, [pc, #140]	; (8004dcc <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004d40:	f7fb fe74 	bl	8000a2c <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint2;
 8004d44:	4820      	ldr	r0, [pc, #128]	; (8004dc8 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004d46:	f7fb fe71 	bl	8000a2c <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint1;
 8004d4a:	481e      	ldr	r0, [pc, #120]	; (8004dc4 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004d4c:	f7fb fe6e 	bl	8000a2c <_ZN10RobotJointD1Ev>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8004d50:	481b      	ldr	r0, [pc, #108]	; (8004dc0 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8004d52:	f7fc ffe1 	bl	8001d18 <_ZN7StepperD1Ev>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8004d56:	4818      	ldr	r0, [pc, #96]	; (8004db8 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004d58:	f7fc ffde 	bl	8001d18 <_ZN7StepperD1Ev>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8004d5c:	4814      	ldr	r0, [pc, #80]	; (8004db0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004d5e:	f7fc ffdb 	bl	8001d18 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8004d62:	4810      	ldr	r0, [pc, #64]	; (8004da4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004d64:	f7fc ffd8 	bl	8001d18 <_ZN7StepperD1Ev>
AMT21 encoderJ4(&huart4, 0xA4);
 8004d68:	480b      	ldr	r0, [pc, #44]	; (8004d98 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8004d6a:	f7fb fca1 	bl	80006b0 <_ZN5AMT21D1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 8004d6e:	4809      	ldr	r0, [pc, #36]	; (8004d94 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8004d70:	f7fb fc9e 	bl	80006b0 <_ZN5AMT21D1Ev>
AMT21 encoderJ2(&huart4, 0xB4);
 8004d74:	4806      	ldr	r0, [pc, #24]	; (8004d90 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8004d76:	f7fb fc9b 	bl	80006b0 <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8004d7a:	4804      	ldr	r0, [pc, #16]	; (8004d8c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8004d7c:	f7fb fc98 	bl	80006b0 <_ZN5AMT21D1Ev>
}
 8004d80:	bf00      	nop
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	24001558 	.word	0x24001558
 8004d8c:	2400042c 	.word	0x2400042c
 8004d90:	24000448 	.word	0x24000448
 8004d94:	24000464 	.word	0x24000464
 8004d98:	24000480 	.word	0x24000480
 8004d9c:	58020400 	.word	0x58020400
 8004da0:	24000ebc 	.word	0x24000ebc
 8004da4:	2400049c 	.word	0x2400049c
 8004da8:	58021000 	.word	0x58021000
 8004dac:	24000fa0 	.word	0x24000fa0
 8004db0:	240004c4 	.word	0x240004c4
 8004db4:	24000dd8 	.word	0x24000dd8
 8004db8:	240004ec 	.word	0x240004ec
 8004dbc:	24000fec 	.word	0x24000fec
 8004dc0:	24000514 	.word	0x24000514
 8004dc4:	2400053c 	.word	0x2400053c
 8004dc8:	24000620 	.word	0x24000620
 8004dcc:	24000704 	.word	0x24000704
 8004dd0:	240007e8 	.word	0x240007e8
 8004dd4:	240008cc 	.word	0x240008cc
 8004dd8:	240009b0 	.word	0x240009b0
 8004ddc:	24000d8c 	.word	0x24000d8c
 8004de0:	24000a94 	.word	0x24000a94

08004de4 <_GLOBAL__sub_I_TIM_MS>:
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004dec:	2001      	movs	r0, #1
 8004dee:	f7ff ff37 	bl	8004c60 <_Z41__static_initialization_and_destruction_0ii>
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <_GLOBAL__sub_D_TIM_MS>:
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	f7ff ff2f 	bl	8004c60 <_Z41__static_initialization_and_destruction_0ii>
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <MX_SPI3_Init>:
DMA_HandleTypeDef hdma_spi3_tx;
DMA_HandleTypeDef hdma_spi3_rx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004e08:	4b28      	ldr	r3, [pc, #160]	; (8004eac <MX_SPI3_Init+0xa8>)
 8004e0a:	4a29      	ldr	r2, [pc, #164]	; (8004eb0 <MX_SPI3_Init+0xac>)
 8004e0c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004e0e:	4b27      	ldr	r3, [pc, #156]	; (8004eac <MX_SPI3_Init+0xa8>)
 8004e10:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004e14:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004e16:	4b25      	ldr	r3, [pc, #148]	; (8004eac <MX_SPI3_Init+0xa8>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004e1c:	4b23      	ldr	r3, [pc, #140]	; (8004eac <MX_SPI3_Init+0xa8>)
 8004e1e:	2207      	movs	r2, #7
 8004e20:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e22:	4b22      	ldr	r3, [pc, #136]	; (8004eac <MX_SPI3_Init+0xa8>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004e28:	4b20      	ldr	r3, [pc, #128]	; (8004eac <MX_SPI3_Init+0xa8>)
 8004e2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e2e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004e30:	4b1e      	ldr	r3, [pc, #120]	; (8004eac <MX_SPI3_Init+0xa8>)
 8004e32:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004e36:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004e38:	4b1c      	ldr	r3, [pc, #112]	; (8004eac <MX_SPI3_Init+0xa8>)
 8004e3a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8004e3e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004e40:	4b1a      	ldr	r3, [pc, #104]	; (8004eac <MX_SPI3_Init+0xa8>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004e46:	4b19      	ldr	r3, [pc, #100]	; (8004eac <MX_SPI3_Init+0xa8>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e4c:	4b17      	ldr	r3, [pc, #92]	; (8004eac <MX_SPI3_Init+0xa8>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8004e52:	4b16      	ldr	r3, [pc, #88]	; (8004eac <MX_SPI3_Init+0xa8>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004e58:	4b14      	ldr	r3, [pc, #80]	; (8004eac <MX_SPI3_Init+0xa8>)
 8004e5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e5e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004e60:	4b12      	ldr	r3, [pc, #72]	; (8004eac <MX_SPI3_Init+0xa8>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004e66:	4b11      	ldr	r3, [pc, #68]	; (8004eac <MX_SPI3_Init+0xa8>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004e6c:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <MX_SPI3_Init+0xa8>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004e72:	4b0e      	ldr	r3, [pc, #56]	; (8004eac <MX_SPI3_Init+0xa8>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004e78:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <MX_SPI3_Init+0xa8>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004e7e:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <MX_SPI3_Init+0xa8>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004e84:	4b09      	ldr	r3, [pc, #36]	; (8004eac <MX_SPI3_Init+0xa8>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004e8a:	4b08      	ldr	r3, [pc, #32]	; (8004eac <MX_SPI3_Init+0xa8>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004e90:	4b06      	ldr	r3, [pc, #24]	; (8004eac <MX_SPI3_Init+0xa8>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004e96:	4805      	ldr	r0, [pc, #20]	; (8004eac <MX_SPI3_Init+0xa8>)
 8004e98:	f007 fd9c 	bl	800c9d4 <HAL_SPI_Init>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8004ea2:	f7ff fec3 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004ea6:	bf00      	nop
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	24000c14 	.word	0x24000c14
 8004eb0:	40003c00 	.word	0x40003c00

08004eb4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b0b8      	sub	sp, #224	; 0xe0
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ebc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	605a      	str	r2, [r3, #4]
 8004ec6:	609a      	str	r2, [r3, #8]
 8004ec8:	60da      	str	r2, [r3, #12]
 8004eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ecc:	f107 0310 	add.w	r3, r7, #16
 8004ed0:	22bc      	movs	r2, #188	; 0xbc
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f00d f9a3 	bl	8012220 <memset>
  if(spiHandle->Instance==SPI3)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a56      	ldr	r2, [pc, #344]	; (8005038 <HAL_SPI_MspInit+0x184>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	f040 80a5 	bne.w	8005030 <HAL_SPI_MspInit+0x17c>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eea:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004eec:	2300      	movs	r3, #0
 8004eee:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ef0:	f107 0310 	add.w	r3, r7, #16
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f006 fa0b 	bl	800b310 <HAL_RCCEx_PeriphCLKConfig>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8004f00:	f7ff fe94 	bl	8004c2c <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004f04:	4b4d      	ldr	r3, [pc, #308]	; (800503c <HAL_SPI_MspInit+0x188>)
 8004f06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f0a:	4a4c      	ldr	r2, [pc, #304]	; (800503c <HAL_SPI_MspInit+0x188>)
 8004f0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004f14:	4b49      	ldr	r3, [pc, #292]	; (800503c <HAL_SPI_MspInit+0x188>)
 8004f16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f22:	4b46      	ldr	r3, [pc, #280]	; (800503c <HAL_SPI_MspInit+0x188>)
 8004f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f28:	4a44      	ldr	r2, [pc, #272]	; (800503c <HAL_SPI_MspInit+0x188>)
 8004f2a:	f043 0304 	orr.w	r3, r3, #4
 8004f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f32:	4b42      	ldr	r3, [pc, #264]	; (800503c <HAL_SPI_MspInit+0x188>)
 8004f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	60bb      	str	r3, [r7, #8]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004f40:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004f44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f48:	2302      	movs	r3, #2
 8004f4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f54:	2300      	movs	r3, #0
 8004f56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004f5a:	2306      	movs	r3, #6
 8004f5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004f64:	4619      	mov	r1, r3
 8004f66:	4836      	ldr	r0, [pc, #216]	; (8005040 <HAL_SPI_MspInit+0x18c>)
 8004f68:	f004 fffc 	bl	8009f64 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8004f6c:	4b35      	ldr	r3, [pc, #212]	; (8005044 <HAL_SPI_MspInit+0x190>)
 8004f6e:	4a36      	ldr	r2, [pc, #216]	; (8005048 <HAL_SPI_MspInit+0x194>)
 8004f70:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8004f72:	4b34      	ldr	r3, [pc, #208]	; (8005044 <HAL_SPI_MspInit+0x190>)
 8004f74:	223e      	movs	r2, #62	; 0x3e
 8004f76:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f78:	4b32      	ldr	r3, [pc, #200]	; (8005044 <HAL_SPI_MspInit+0x190>)
 8004f7a:	2240      	movs	r2, #64	; 0x40
 8004f7c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f7e:	4b31      	ldr	r3, [pc, #196]	; (8005044 <HAL_SPI_MspInit+0x190>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f84:	4b2f      	ldr	r3, [pc, #188]	; (8005044 <HAL_SPI_MspInit+0x190>)
 8004f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f8a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f8c:	4b2d      	ldr	r3, [pc, #180]	; (8005044 <HAL_SPI_MspInit+0x190>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f92:	4b2c      	ldr	r3, [pc, #176]	; (8005044 <HAL_SPI_MspInit+0x190>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8004f98:	4b2a      	ldr	r3, [pc, #168]	; (8005044 <HAL_SPI_MspInit+0x190>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004f9e:	4b29      	ldr	r3, [pc, #164]	; (8005044 <HAL_SPI_MspInit+0x190>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004fa4:	4b27      	ldr	r3, [pc, #156]	; (8005044 <HAL_SPI_MspInit+0x190>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8004faa:	4826      	ldr	r0, [pc, #152]	; (8005044 <HAL_SPI_MspInit+0x190>)
 8004fac:	f002 f9a0 	bl	80072f0 <HAL_DMA_Init>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8004fb6:	f7ff fe39 	bl	8004c2c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a21      	ldr	r2, [pc, #132]	; (8005044 <HAL_SPI_MspInit+0x190>)
 8004fbe:	679a      	str	r2, [r3, #120]	; 0x78
 8004fc0:	4a20      	ldr	r2, [pc, #128]	; (8005044 <HAL_SPI_MspInit+0x190>)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA2_Stream0;
 8004fc6:	4b21      	ldr	r3, [pc, #132]	; (800504c <HAL_SPI_MspInit+0x198>)
 8004fc8:	4a21      	ldr	r2, [pc, #132]	; (8005050 <HAL_SPI_MspInit+0x19c>)
 8004fca:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8004fcc:	4b1f      	ldr	r3, [pc, #124]	; (800504c <HAL_SPI_MspInit+0x198>)
 8004fce:	223d      	movs	r2, #61	; 0x3d
 8004fd0:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004fd2:	4b1e      	ldr	r3, [pc, #120]	; (800504c <HAL_SPI_MspInit+0x198>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fd8:	4b1c      	ldr	r3, [pc, #112]	; (800504c <HAL_SPI_MspInit+0x198>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004fde:	4b1b      	ldr	r3, [pc, #108]	; (800504c <HAL_SPI_MspInit+0x198>)
 8004fe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fe4:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004fe6:	4b19      	ldr	r3, [pc, #100]	; (800504c <HAL_SPI_MspInit+0x198>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004fec:	4b17      	ldr	r3, [pc, #92]	; (800504c <HAL_SPI_MspInit+0x198>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8004ff2:	4b16      	ldr	r3, [pc, #88]	; (800504c <HAL_SPI_MspInit+0x198>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004ff8:	4b14      	ldr	r3, [pc, #80]	; (800504c <HAL_SPI_MspInit+0x198>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ffe:	4b13      	ldr	r3, [pc, #76]	; (800504c <HAL_SPI_MspInit+0x198>)
 8005000:	2200      	movs	r2, #0
 8005002:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8005004:	4811      	ldr	r0, [pc, #68]	; (800504c <HAL_SPI_MspInit+0x198>)
 8005006:	f002 f973 	bl	80072f0 <HAL_DMA_Init>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <HAL_SPI_MspInit+0x160>
    {
      Error_Handler();
 8005010:	f7ff fe0c 	bl	8004c2c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a0d      	ldr	r2, [pc, #52]	; (800504c <HAL_SPI_MspInit+0x198>)
 8005018:	67da      	str	r2, [r3, #124]	; 0x7c
 800501a:	4a0c      	ldr	r2, [pc, #48]	; (800504c <HAL_SPI_MspInit+0x198>)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8005020:	2200      	movs	r2, #0
 8005022:	2100      	movs	r1, #0
 8005024:	2033      	movs	r0, #51	; 0x33
 8005026:	f001 ff24 	bl	8006e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800502a:	2033      	movs	r0, #51	; 0x33
 800502c:	f001 ff3b 	bl	8006ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005030:	bf00      	nop
 8005032:	37e0      	adds	r7, #224	; 0xe0
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40003c00 	.word	0x40003c00
 800503c:	58024400 	.word	0x58024400
 8005040:	58020800 	.word	0x58020800
 8005044:	24000c9c 	.word	0x24000c9c
 8005048:	400200b8 	.word	0x400200b8
 800504c:	24000d14 	.word	0x24000d14
 8005050:	40020410 	.word	0x40020410

08005054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800505a:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <HAL_MspInit+0x30>)
 800505c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005060:	4a08      	ldr	r2, [pc, #32]	; (8005084 <HAL_MspInit+0x30>)
 8005062:	f043 0302 	orr.w	r3, r3, #2
 8005066:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800506a:	4b06      	ldr	r3, [pc, #24]	; (8005084 <HAL_MspInit+0x30>)
 800506c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	607b      	str	r3, [r7, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	58024400 	.word	0x58024400

08005088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800508c:	e7fe      	b.n	800508c <NMI_Handler+0x4>

0800508e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800508e:	b480      	push	{r7}
 8005090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005092:	e7fe      	b.n	8005092 <HardFault_Handler+0x4>

08005094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005098:	e7fe      	b.n	8005098 <MemManage_Handler+0x4>

0800509a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800509a:	b480      	push	{r7}
 800509c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800509e:	e7fe      	b.n	800509e <BusFault_Handler+0x4>

080050a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050a0:	b480      	push	{r7}
 80050a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050a4:	e7fe      	b.n	80050a4 <UsageFault_Handler+0x4>

080050a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80050a6:	b480      	push	{r7}
 80050a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80050aa:	bf00      	nop
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050b8:	bf00      	nop
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80050c2:	b480      	push	{r7}
 80050c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80050c6:	bf00      	nop
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80050d4:	f001 fda2 	bl	8006c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80050d8:	f001 feff 	bl	8006eda <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80050dc:	bf00      	nop
 80050de:	bd80      	pop	{r7, pc}

080050e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 80050e4:	4802      	ldr	r0, [pc, #8]	; (80050f0 <DMA1_Stream0_IRQHandler+0x10>)
 80050e6:	f003 fc2b 	bl	8008940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80050ea:	bf00      	nop
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	24001468 	.word	0x24001468

080050f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80050f8:	4802      	ldr	r0, [pc, #8]	; (8005104 <DMA1_Stream1_IRQHandler+0x10>)
 80050fa:	f003 fc21 	bl	8008940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80050fe:	bf00      	nop
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	240012e8 	.word	0x240012e8

08005108 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800510c:	4802      	ldr	r0, [pc, #8]	; (8005118 <DMA1_Stream2_IRQHandler+0x10>)
 800510e:	f003 fc17 	bl	8008940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005112:	bf00      	nop
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	240013f0 	.word	0x240013f0

0800511c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8005120:	4802      	ldr	r0, [pc, #8]	; (800512c <DMA1_Stream3_IRQHandler+0x10>)
 8005122:	f003 fc0d 	bl	8008940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005126:	bf00      	nop
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	24001168 	.word	0x24001168

08005130 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8005134:	4802      	ldr	r0, [pc, #8]	; (8005140 <DMA1_Stream4_IRQHandler+0x10>)
 8005136:	f003 fc03 	bl	8008940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800513a:	bf00      	nop
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	24001678 	.word	0x24001678

08005144 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005148:	4802      	ldr	r0, [pc, #8]	; (8005154 <DMA1_Stream5_IRQHandler+0x10>)
 800514a:	f003 fbf9 	bl	8008940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800514e:	bf00      	nop
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	240011e0 	.word	0x240011e0

08005158 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800515c:	4802      	ldr	r0, [pc, #8]	; (8005168 <DMA1_Stream6_IRQHandler+0x10>)
 800515e:	f003 fbef 	bl	8008940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005162:	bf00      	nop
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	240014e0 	.word	0x240014e0

0800516c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8005170:	2040      	movs	r0, #64	; 0x40
 8005172:	f005 f8c0 	bl	800a2f6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_SERVO_Pin);
 8005176:	2080      	movs	r0, #128	; 0x80
 8005178:	f005 f8bd 	bl	800a2f6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800517c:	bf00      	nop
 800517e:	bd80      	pop	{r7, pc}

08005180 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005184:	4802      	ldr	r0, [pc, #8]	; (8005190 <USART2_IRQHandler+0x10>)
 8005186:	f009 fd73 	bl	800ec70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800518a:	bf00      	nop
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	240015e8 	.word	0x240015e8

08005194 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005198:	4802      	ldr	r0, [pc, #8]	; (80051a4 <USART3_IRQHandler+0x10>)
 800519a:	f009 fd69 	bl	800ec70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800519e:	bf00      	nop
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	24001360 	.word	0x24001360

080051a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 80051ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80051b0:	f005 f8a1 	bl	800a2f6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 80051b4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80051b8:	f005 f89d 	bl	800a2f6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_Z_BOTTOM_Pin);
 80051bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80051c0:	f005 f899 	bl	800a2f6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 80051c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80051c8:	f005 f895 	bl	800a2f6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80051cc:	bf00      	nop
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80051d4:	4802      	ldr	r0, [pc, #8]	; (80051e0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80051d6:	f008 fa4d 	bl	800d674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80051da:	bf00      	nop
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	24001084 	.word	0x24001084

080051e4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80051e8:	4802      	ldr	r0, [pc, #8]	; (80051f4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80051ea:	f008 fa43 	bl	800d674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80051ee:	bf00      	nop
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	24000f08 	.word	0x24000f08

080051f8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80051fc:	4802      	ldr	r0, [pc, #8]	; (8005208 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80051fe:	f008 fa39 	bl	800d674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8005202:	bf00      	nop
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	24001038 	.word	0x24001038

0800520c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8005210:	4802      	ldr	r0, [pc, #8]	; (800521c <DMA1_Stream7_IRQHandler+0x10>)
 8005212:	f003 fb95 	bl	8008940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8005216:	bf00      	nop
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	24000c9c 	.word	0x24000c9c

08005220 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005224:	4802      	ldr	r0, [pc, #8]	; (8005230 <TIM5_IRQHandler+0x10>)
 8005226:	f008 fa25 	bl	800d674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800522a:	bf00      	nop
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	24000e70 	.word	0x24000e70

08005234 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8005238:	4802      	ldr	r0, [pc, #8]	; (8005244 <SPI3_IRQHandler+0x10>)
 800523a:	f007 fcd1 	bl	800cbe0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800523e:	bf00      	nop
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	24000c14 	.word	0x24000c14

08005248 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800524c:	4802      	ldr	r0, [pc, #8]	; (8005258 <UART4_IRQHandler+0x10>)
 800524e:	f009 fd0f 	bl	800ec70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005252:	bf00      	nop
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	24001558 	.word	0x24001558

0800525c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005260:	4802      	ldr	r0, [pc, #8]	; (800526c <TIM6_DAC_IRQHandler+0x10>)
 8005262:	f008 fa07 	bl	800d674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005266:	bf00      	nop
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	24000f54 	.word	0x24000f54

08005270 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005274:	4802      	ldr	r0, [pc, #8]	; (8005280 <TIM7_IRQHandler+0x10>)
 8005276:	f008 f9fd 	bl	800d674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800527a:	bf00      	nop
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	2400111c 	.word	0x2400111c

08005284 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8005288:	4802      	ldr	r0, [pc, #8]	; (8005294 <DMA2_Stream0_IRQHandler+0x10>)
 800528a:	f003 fb59 	bl	8008940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800528e:	bf00      	nop
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	24000d14 	.word	0x24000d14

08005298 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800529c:	4802      	ldr	r0, [pc, #8]	; (80052a8 <UART7_IRQHandler+0x10>)
 800529e:	f009 fce7 	bl	800ec70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80052a2:	bf00      	nop
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	24001258 	.word	0x24001258

080052ac <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80052b0:	4802      	ldr	r0, [pc, #8]	; (80052bc <TIM16_IRQHandler+0x10>)
 80052b2:	f008 f9df 	bl	800d674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80052b6:	bf00      	nop
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	240010d0 	.word	0x240010d0

080052c0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80052c4:	4802      	ldr	r0, [pc, #8]	; (80052d0 <TIM17_IRQHandler+0x10>)
 80052c6:	f008 f9d5 	bl	800d674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80052ca:	bf00      	nop
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	24000e24 	.word	0x24000e24

080052d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
	return 1;
 80052d8:	2301      	movs	r3, #1
}
 80052da:	4618      	mov	r0, r3
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <_kill>:

int _kill(int pid, int sig)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80052ee:	f00c ff6d 	bl	80121cc <__errno>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2216      	movs	r2, #22
 80052f6:	601a      	str	r2, [r3, #0]
	return -1;
 80052f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <_exit>:

void _exit (int status)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800530c:	f04f 31ff 	mov.w	r1, #4294967295
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7ff ffe7 	bl	80052e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005316:	e7fe      	b.n	8005316 <_exit+0x12>

08005318 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005324:	2300      	movs	r3, #0
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	e00a      	b.n	8005340 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800532a:	f3af 8000 	nop.w
 800532e:	4601      	mov	r1, r0
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	60ba      	str	r2, [r7, #8]
 8005336:	b2ca      	uxtb	r2, r1
 8005338:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	3301      	adds	r3, #1
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	429a      	cmp	r2, r3
 8005346:	dbf0      	blt.n	800532a <_read+0x12>
	}

return len;
 8005348:	687b      	ldr	r3, [r7, #4]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b086      	sub	sp, #24
 8005356:	af00      	add	r7, sp, #0
 8005358:	60f8      	str	r0, [r7, #12]
 800535a:	60b9      	str	r1, [r7, #8]
 800535c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800535e:	2300      	movs	r3, #0
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	e009      	b.n	8005378 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	1c5a      	adds	r2, r3, #1
 8005368:	60ba      	str	r2, [r7, #8]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	4618      	mov	r0, r3
 800536e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	3301      	adds	r3, #1
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	429a      	cmp	r2, r3
 800537e:	dbf1      	blt.n	8005364 <_write+0x12>
	}
	return len;
 8005380:	687b      	ldr	r3, [r7, #4]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3718      	adds	r7, #24
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <_close>:

int _close(int file)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
	return -1;
 8005392:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005396:	4618      	mov	r0, r3
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053b2:	605a      	str	r2, [r3, #4]
	return 0;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <_isatty>:

int _isatty(int file)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
	return 1;
 80053ca:	2301      	movs	r3, #1
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
	return 0;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
	...

080053f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053fc:	4a14      	ldr	r2, [pc, #80]	; (8005450 <_sbrk+0x5c>)
 80053fe:	4b15      	ldr	r3, [pc, #84]	; (8005454 <_sbrk+0x60>)
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005408:	4b13      	ldr	r3, [pc, #76]	; (8005458 <_sbrk+0x64>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d102      	bne.n	8005416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005410:	4b11      	ldr	r3, [pc, #68]	; (8005458 <_sbrk+0x64>)
 8005412:	4a12      	ldr	r2, [pc, #72]	; (800545c <_sbrk+0x68>)
 8005414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005416:	4b10      	ldr	r3, [pc, #64]	; (8005458 <_sbrk+0x64>)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4413      	add	r3, r2
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	429a      	cmp	r2, r3
 8005422:	d207      	bcs.n	8005434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005424:	f00c fed2 	bl	80121cc <__errno>
 8005428:	4603      	mov	r3, r0
 800542a:	220c      	movs	r2, #12
 800542c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800542e:	f04f 33ff 	mov.w	r3, #4294967295
 8005432:	e009      	b.n	8005448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005434:	4b08      	ldr	r3, [pc, #32]	; (8005458 <_sbrk+0x64>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800543a:	4b07      	ldr	r3, [pc, #28]	; (8005458 <_sbrk+0x64>)
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4413      	add	r3, r2
 8005442:	4a05      	ldr	r2, [pc, #20]	; (8005458 <_sbrk+0x64>)
 8005444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005446:	68fb      	ldr	r3, [r7, #12]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	24001d08 	.word	0x24001d08
 8005454:	00000400 	.word	0x00000400
 8005458:	24000be4 	.word	0x24000be4
 800545c:	24001708 	.word	0x24001708

08005460 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005464:	4b39      	ldr	r3, [pc, #228]	; (800554c <SystemInit+0xec>)
 8005466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546a:	4a38      	ldr	r2, [pc, #224]	; (800554c <SystemInit+0xec>)
 800546c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005474:	4b36      	ldr	r3, [pc, #216]	; (8005550 <SystemInit+0xf0>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 030f 	and.w	r3, r3, #15
 800547c:	2b06      	cmp	r3, #6
 800547e:	d807      	bhi.n	8005490 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005480:	4b33      	ldr	r3, [pc, #204]	; (8005550 <SystemInit+0xf0>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f023 030f 	bic.w	r3, r3, #15
 8005488:	4a31      	ldr	r2, [pc, #196]	; (8005550 <SystemInit+0xf0>)
 800548a:	f043 0307 	orr.w	r3, r3, #7
 800548e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005490:	4b30      	ldr	r3, [pc, #192]	; (8005554 <SystemInit+0xf4>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a2f      	ldr	r2, [pc, #188]	; (8005554 <SystemInit+0xf4>)
 8005496:	f043 0301 	orr.w	r3, r3, #1
 800549a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800549c:	4b2d      	ldr	r3, [pc, #180]	; (8005554 <SystemInit+0xf4>)
 800549e:	2200      	movs	r2, #0
 80054a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80054a2:	4b2c      	ldr	r3, [pc, #176]	; (8005554 <SystemInit+0xf4>)
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	492b      	ldr	r1, [pc, #172]	; (8005554 <SystemInit+0xf4>)
 80054a8:	4b2b      	ldr	r3, [pc, #172]	; (8005558 <SystemInit+0xf8>)
 80054aa:	4013      	ands	r3, r2
 80054ac:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80054ae:	4b28      	ldr	r3, [pc, #160]	; (8005550 <SystemInit+0xf0>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0308 	and.w	r3, r3, #8
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d007      	beq.n	80054ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80054ba:	4b25      	ldr	r3, [pc, #148]	; (8005550 <SystemInit+0xf0>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f023 030f 	bic.w	r3, r3, #15
 80054c2:	4a23      	ldr	r2, [pc, #140]	; (8005550 <SystemInit+0xf0>)
 80054c4:	f043 0307 	orr.w	r3, r3, #7
 80054c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80054ca:	4b22      	ldr	r3, [pc, #136]	; (8005554 <SystemInit+0xf4>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80054d0:	4b20      	ldr	r3, [pc, #128]	; (8005554 <SystemInit+0xf4>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80054d6:	4b1f      	ldr	r3, [pc, #124]	; (8005554 <SystemInit+0xf4>)
 80054d8:	2200      	movs	r2, #0
 80054da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80054dc:	4b1d      	ldr	r3, [pc, #116]	; (8005554 <SystemInit+0xf4>)
 80054de:	4a1f      	ldr	r2, [pc, #124]	; (800555c <SystemInit+0xfc>)
 80054e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80054e2:	4b1c      	ldr	r3, [pc, #112]	; (8005554 <SystemInit+0xf4>)
 80054e4:	4a1e      	ldr	r2, [pc, #120]	; (8005560 <SystemInit+0x100>)
 80054e6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80054e8:	4b1a      	ldr	r3, [pc, #104]	; (8005554 <SystemInit+0xf4>)
 80054ea:	4a1e      	ldr	r2, [pc, #120]	; (8005564 <SystemInit+0x104>)
 80054ec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80054ee:	4b19      	ldr	r3, [pc, #100]	; (8005554 <SystemInit+0xf4>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80054f4:	4b17      	ldr	r3, [pc, #92]	; (8005554 <SystemInit+0xf4>)
 80054f6:	4a1b      	ldr	r2, [pc, #108]	; (8005564 <SystemInit+0x104>)
 80054f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80054fa:	4b16      	ldr	r3, [pc, #88]	; (8005554 <SystemInit+0xf4>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005500:	4b14      	ldr	r3, [pc, #80]	; (8005554 <SystemInit+0xf4>)
 8005502:	4a18      	ldr	r2, [pc, #96]	; (8005564 <SystemInit+0x104>)
 8005504:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005506:	4b13      	ldr	r3, [pc, #76]	; (8005554 <SystemInit+0xf4>)
 8005508:	2200      	movs	r2, #0
 800550a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800550c:	4b11      	ldr	r3, [pc, #68]	; (8005554 <SystemInit+0xf4>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a10      	ldr	r2, [pc, #64]	; (8005554 <SystemInit+0xf4>)
 8005512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005516:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005518:	4b0e      	ldr	r3, [pc, #56]	; (8005554 <SystemInit+0xf4>)
 800551a:	2200      	movs	r2, #0
 800551c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800551e:	4b12      	ldr	r3, [pc, #72]	; (8005568 <SystemInit+0x108>)
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4b12      	ldr	r3, [pc, #72]	; (800556c <SystemInit+0x10c>)
 8005524:	4013      	ands	r3, r2
 8005526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800552a:	d202      	bcs.n	8005532 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800552c:	4b10      	ldr	r3, [pc, #64]	; (8005570 <SystemInit+0x110>)
 800552e:	2201      	movs	r2, #1
 8005530:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005532:	4b10      	ldr	r3, [pc, #64]	; (8005574 <SystemInit+0x114>)
 8005534:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005538:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800553a:	4b04      	ldr	r3, [pc, #16]	; (800554c <SystemInit+0xec>)
 800553c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005540:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8005542:	bf00      	nop
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	e000ed00 	.word	0xe000ed00
 8005550:	52002000 	.word	0x52002000
 8005554:	58024400 	.word	0x58024400
 8005558:	eaf6ed7f 	.word	0xeaf6ed7f
 800555c:	02020200 	.word	0x02020200
 8005560:	01ff0000 	.word	0x01ff0000
 8005564:	01010280 	.word	0x01010280
 8005568:	5c001000 	.word	0x5c001000
 800556c:	ffff0000 	.word	0xffff0000
 8005570:	51008108 	.word	0x51008108
 8005574:	52004000 	.word	0x52004000

08005578 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b09a      	sub	sp, #104	; 0x68
 800557c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800557e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	605a      	str	r2, [r3, #4]
 8005588:	609a      	str	r2, [r3, #8]
 800558a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800558c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	605a      	str	r2, [r3, #4]
 8005596:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005598:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	605a      	str	r2, [r3, #4]
 80055a2:	609a      	str	r2, [r3, #8]
 80055a4:	60da      	str	r2, [r3, #12]
 80055a6:	611a      	str	r2, [r3, #16]
 80055a8:	615a      	str	r2, [r3, #20]
 80055aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80055ac:	1d3b      	adds	r3, r7, #4
 80055ae:	222c      	movs	r2, #44	; 0x2c
 80055b0:	2100      	movs	r1, #0
 80055b2:	4618      	mov	r0, r3
 80055b4:	f00c fe34 	bl	8012220 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80055b8:	4b44      	ldr	r3, [pc, #272]	; (80056cc <MX_TIM1_Init+0x154>)
 80055ba:	4a45      	ldr	r2, [pc, #276]	; (80056d0 <MX_TIM1_Init+0x158>)
 80055bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 80055be:	4b43      	ldr	r3, [pc, #268]	; (80056cc <MX_TIM1_Init+0x154>)
 80055c0:	22c7      	movs	r2, #199	; 0xc7
 80055c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055c4:	4b41      	ldr	r3, [pc, #260]	; (80056cc <MX_TIM1_Init+0x154>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 80055ca:	4b40      	ldr	r3, [pc, #256]	; (80056cc <MX_TIM1_Init+0x154>)
 80055cc:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80055d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055d2:	4b3e      	ldr	r3, [pc, #248]	; (80056cc <MX_TIM1_Init+0x154>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80055d8:	4b3c      	ldr	r3, [pc, #240]	; (80056cc <MX_TIM1_Init+0x154>)
 80055da:	2200      	movs	r2, #0
 80055dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80055de:	4b3b      	ldr	r3, [pc, #236]	; (80056cc <MX_TIM1_Init+0x154>)
 80055e0:	2280      	movs	r2, #128	; 0x80
 80055e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80055e4:	4839      	ldr	r0, [pc, #228]	; (80056cc <MX_TIM1_Init+0x154>)
 80055e6:	f007 fdd8 	bl	800d19a <HAL_TIM_Base_Init>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80055f0:	f7ff fb1c 	bl	8004c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80055f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055f8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80055fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80055fe:	4619      	mov	r1, r3
 8005600:	4832      	ldr	r0, [pc, #200]	; (80056cc <MX_TIM1_Init+0x154>)
 8005602:	f008 fa6b 	bl	800dadc <HAL_TIM_ConfigClockSource>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800560c:	f7ff fb0e 	bl	8004c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005610:	482e      	ldr	r0, [pc, #184]	; (80056cc <MX_TIM1_Init+0x154>)
 8005612:	f007 fec0 	bl	800d396 <HAL_TIM_PWM_Init>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800561c:	f7ff fb06 	bl	8004c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005620:	2300      	movs	r3, #0
 8005622:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005624:	2300      	movs	r3, #0
 8005626:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005628:	2300      	movs	r3, #0
 800562a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800562c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005630:	4619      	mov	r1, r3
 8005632:	4826      	ldr	r0, [pc, #152]	; (80056cc <MX_TIM1_Init+0x154>)
 8005634:	f008 ffa6 	bl	800e584 <HAL_TIMEx_MasterConfigSynchronization>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800563e:	f7ff faf5 	bl	8004c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005642:	2360      	movs	r3, #96	; 0x60
 8005644:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8005646:	f240 1339 	movw	r3, #313	; 0x139
 800564a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800564c:	2300      	movs	r3, #0
 800564e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005650:	2300      	movs	r3, #0
 8005652:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005654:	2300      	movs	r3, #0
 8005656:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005658:	2300      	movs	r3, #0
 800565a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800565c:	2300      	movs	r3, #0
 800565e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005660:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005664:	2204      	movs	r2, #4
 8005666:	4619      	mov	r1, r3
 8005668:	4818      	ldr	r0, [pc, #96]	; (80056cc <MX_TIM1_Init+0x154>)
 800566a:	f008 f923 	bl	800d8b4 <HAL_TIM_PWM_ConfigChannel>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8005674:	f7ff fada 	bl	8004c2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005678:	2300      	movs	r3, #0
 800567a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800567c:	2300      	movs	r3, #0
 800567e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005680:	2300      	movs	r3, #0
 8005682:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005684:	2300      	movs	r3, #0
 8005686:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800568c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005690:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005692:	2300      	movs	r3, #0
 8005694:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005696:	2300      	movs	r3, #0
 8005698:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800569a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800569e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80056a0:	2300      	movs	r3, #0
 80056a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80056a4:	2300      	movs	r3, #0
 80056a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80056a8:	1d3b      	adds	r3, r7, #4
 80056aa:	4619      	mov	r1, r3
 80056ac:	4807      	ldr	r0, [pc, #28]	; (80056cc <MX_TIM1_Init+0x154>)
 80056ae:	f008 fff7 	bl	800e6a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80056b8:	f7ff fab8 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80056bc:	4803      	ldr	r0, [pc, #12]	; (80056cc <MX_TIM1_Init+0x154>)
 80056be:	f000 fd0f 	bl	80060e0 <HAL_TIM_MspPostInit>

}
 80056c2:	bf00      	nop
 80056c4:	3768      	adds	r7, #104	; 0x68
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	24000fa0 	.word	0x24000fa0
 80056d0:	40010000 	.word	0x40010000

080056d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08e      	sub	sp, #56	; 0x38
 80056d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	605a      	str	r2, [r3, #4]
 80056e4:	609a      	str	r2, [r3, #8]
 80056e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056e8:	f107 031c 	add.w	r3, r7, #28
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	605a      	str	r2, [r3, #4]
 80056f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80056f4:	463b      	mov	r3, r7
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	605a      	str	r2, [r3, #4]
 80056fc:	609a      	str	r2, [r3, #8]
 80056fe:	60da      	str	r2, [r3, #12]
 8005700:	611a      	str	r2, [r3, #16]
 8005702:	615a      	str	r2, [r3, #20]
 8005704:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005706:	4b2e      	ldr	r3, [pc, #184]	; (80057c0 <MX_TIM2_Init+0xec>)
 8005708:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800570c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 800570e:	4b2c      	ldr	r3, [pc, #176]	; (80057c0 <MX_TIM2_Init+0xec>)
 8005710:	22c7      	movs	r2, #199	; 0xc7
 8005712:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005714:	4b2a      	ldr	r3, [pc, #168]	; (80057c0 <MX_TIM2_Init+0xec>)
 8005716:	2200      	movs	r2, #0
 8005718:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 800571a:	4b29      	ldr	r3, [pc, #164]	; (80057c0 <MX_TIM2_Init+0xec>)
 800571c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005720:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005722:	4b27      	ldr	r3, [pc, #156]	; (80057c0 <MX_TIM2_Init+0xec>)
 8005724:	2200      	movs	r2, #0
 8005726:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005728:	4b25      	ldr	r3, [pc, #148]	; (80057c0 <MX_TIM2_Init+0xec>)
 800572a:	2280      	movs	r2, #128	; 0x80
 800572c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800572e:	4824      	ldr	r0, [pc, #144]	; (80057c0 <MX_TIM2_Init+0xec>)
 8005730:	f007 fd33 	bl	800d19a <HAL_TIM_Base_Init>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800573a:	f7ff fa77 	bl	8004c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800573e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005742:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005744:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005748:	4619      	mov	r1, r3
 800574a:	481d      	ldr	r0, [pc, #116]	; (80057c0 <MX_TIM2_Init+0xec>)
 800574c:	f008 f9c6 	bl	800dadc <HAL_TIM_ConfigClockSource>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8005756:	f7ff fa69 	bl	8004c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800575a:	4819      	ldr	r0, [pc, #100]	; (80057c0 <MX_TIM2_Init+0xec>)
 800575c:	f007 fe1b 	bl	800d396 <HAL_TIM_PWM_Init>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8005766:	f7ff fa61 	bl	8004c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800576a:	2300      	movs	r3, #0
 800576c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800576e:	2300      	movs	r3, #0
 8005770:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005772:	f107 031c 	add.w	r3, r7, #28
 8005776:	4619      	mov	r1, r3
 8005778:	4811      	ldr	r0, [pc, #68]	; (80057c0 <MX_TIM2_Init+0xec>)
 800577a:	f008 ff03 	bl	800e584 <HAL_TIMEx_MasterConfigSynchronization>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005784:	f7ff fa52 	bl	8004c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005788:	2360      	movs	r3, #96	; 0x60
 800578a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 800578c:	f240 1339 	movw	r3, #313	; 0x139
 8005790:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005792:	2300      	movs	r3, #0
 8005794:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005796:	2300      	movs	r3, #0
 8005798:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800579a:	463b      	mov	r3, r7
 800579c:	2208      	movs	r2, #8
 800579e:	4619      	mov	r1, r3
 80057a0:	4807      	ldr	r0, [pc, #28]	; (80057c0 <MX_TIM2_Init+0xec>)
 80057a2:	f008 f887 	bl	800d8b4 <HAL_TIM_PWM_ConfigChannel>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80057ac:	f7ff fa3e 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80057b0:	4803      	ldr	r0, [pc, #12]	; (80057c0 <MX_TIM2_Init+0xec>)
 80057b2:	f000 fc95 	bl	80060e0 <HAL_TIM_MspPostInit>

}
 80057b6:	bf00      	nop
 80057b8:	3738      	adds	r7, #56	; 0x38
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	24000fec 	.word	0x24000fec

080057c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08e      	sub	sp, #56	; 0x38
 80057c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80057ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	605a      	str	r2, [r3, #4]
 80057d4:	609a      	str	r2, [r3, #8]
 80057d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057d8:	f107 031c 	add.w	r3, r7, #28
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	605a      	str	r2, [r3, #4]
 80057e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80057e4:	463b      	mov	r3, r7
 80057e6:	2200      	movs	r2, #0
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	605a      	str	r2, [r3, #4]
 80057ec:	609a      	str	r2, [r3, #8]
 80057ee:	60da      	str	r2, [r3, #12]
 80057f0:	611a      	str	r2, [r3, #16]
 80057f2:	615a      	str	r2, [r3, #20]
 80057f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80057f6:	4b2d      	ldr	r3, [pc, #180]	; (80058ac <MX_TIM3_Init+0xe8>)
 80057f8:	4a2d      	ldr	r2, [pc, #180]	; (80058b0 <MX_TIM3_Init+0xec>)
 80057fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 80057fc:	4b2b      	ldr	r3, [pc, #172]	; (80058ac <MX_TIM3_Init+0xe8>)
 80057fe:	22c7      	movs	r2, #199	; 0xc7
 8005800:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005802:	4b2a      	ldr	r3, [pc, #168]	; (80058ac <MX_TIM3_Init+0xe8>)
 8005804:	2200      	movs	r2, #0
 8005806:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 8005808:	4b28      	ldr	r3, [pc, #160]	; (80058ac <MX_TIM3_Init+0xe8>)
 800580a:	f640 125f 	movw	r2, #2399	; 0x95f
 800580e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005810:	4b26      	ldr	r3, [pc, #152]	; (80058ac <MX_TIM3_Init+0xe8>)
 8005812:	2200      	movs	r2, #0
 8005814:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005816:	4b25      	ldr	r3, [pc, #148]	; (80058ac <MX_TIM3_Init+0xe8>)
 8005818:	2280      	movs	r2, #128	; 0x80
 800581a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800581c:	4823      	ldr	r0, [pc, #140]	; (80058ac <MX_TIM3_Init+0xe8>)
 800581e:	f007 fcbc 	bl	800d19a <HAL_TIM_Base_Init>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8005828:	f7ff fa00 	bl	8004c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800582c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005830:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005836:	4619      	mov	r1, r3
 8005838:	481c      	ldr	r0, [pc, #112]	; (80058ac <MX_TIM3_Init+0xe8>)
 800583a:	f008 f94f 	bl	800dadc <HAL_TIM_ConfigClockSource>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005844:	f7ff f9f2 	bl	8004c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005848:	4818      	ldr	r0, [pc, #96]	; (80058ac <MX_TIM3_Init+0xe8>)
 800584a:	f007 fda4 	bl	800d396 <HAL_TIM_PWM_Init>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005854:	f7ff f9ea 	bl	8004c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005858:	2300      	movs	r3, #0
 800585a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800585c:	2300      	movs	r3, #0
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005860:	f107 031c 	add.w	r3, r7, #28
 8005864:	4619      	mov	r1, r3
 8005866:	4811      	ldr	r0, [pc, #68]	; (80058ac <MX_TIM3_Init+0xe8>)
 8005868:	f008 fe8c 	bl	800e584 <HAL_TIMEx_MasterConfigSynchronization>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005872:	f7ff f9db 	bl	8004c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005876:	2360      	movs	r3, #96	; 0x60
 8005878:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800587e:	2300      	movs	r3, #0
 8005880:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005882:	2300      	movs	r3, #0
 8005884:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005886:	463b      	mov	r3, r7
 8005888:	2200      	movs	r2, #0
 800588a:	4619      	mov	r1, r3
 800588c:	4807      	ldr	r0, [pc, #28]	; (80058ac <MX_TIM3_Init+0xe8>)
 800588e:	f008 f811 	bl	800d8b4 <HAL_TIM_PWM_ConfigChannel>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8005898:	f7ff f9c8 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800589c:	4803      	ldr	r0, [pc, #12]	; (80058ac <MX_TIM3_Init+0xe8>)
 800589e:	f000 fc1f 	bl	80060e0 <HAL_TIM_MspPostInit>

}
 80058a2:	bf00      	nop
 80058a4:	3738      	adds	r7, #56	; 0x38
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	24000ebc 	.word	0x24000ebc
 80058b0:	40000400 	.word	0x40000400

080058b4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08e      	sub	sp, #56	; 0x38
 80058b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80058ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	605a      	str	r2, [r3, #4]
 80058c4:	609a      	str	r2, [r3, #8]
 80058c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058c8:	f107 031c 	add.w	r3, r7, #28
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	605a      	str	r2, [r3, #4]
 80058d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80058d4:	463b      	mov	r3, r7
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	605a      	str	r2, [r3, #4]
 80058dc:	609a      	str	r2, [r3, #8]
 80058de:	60da      	str	r2, [r3, #12]
 80058e0:	611a      	str	r2, [r3, #16]
 80058e2:	615a      	str	r2, [r3, #20]
 80058e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80058e6:	4b2d      	ldr	r3, [pc, #180]	; (800599c <MX_TIM4_Init+0xe8>)
 80058e8:	4a2d      	ldr	r2, [pc, #180]	; (80059a0 <MX_TIM4_Init+0xec>)
 80058ea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 80058ec:	4b2b      	ldr	r3, [pc, #172]	; (800599c <MX_TIM4_Init+0xe8>)
 80058ee:	22ef      	movs	r2, #239	; 0xef
 80058f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058f2:	4b2a      	ldr	r3, [pc, #168]	; (800599c <MX_TIM4_Init+0xe8>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 80058f8:	4b28      	ldr	r3, [pc, #160]	; (800599c <MX_TIM4_Init+0xe8>)
 80058fa:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80058fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005900:	4b26      	ldr	r3, [pc, #152]	; (800599c <MX_TIM4_Init+0xe8>)
 8005902:	2200      	movs	r2, #0
 8005904:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005906:	4b25      	ldr	r3, [pc, #148]	; (800599c <MX_TIM4_Init+0xe8>)
 8005908:	2280      	movs	r2, #128	; 0x80
 800590a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800590c:	4823      	ldr	r0, [pc, #140]	; (800599c <MX_TIM4_Init+0xe8>)
 800590e:	f007 fc44 	bl	800d19a <HAL_TIM_Base_Init>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8005918:	f7ff f988 	bl	8004c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800591c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005920:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005926:	4619      	mov	r1, r3
 8005928:	481c      	ldr	r0, [pc, #112]	; (800599c <MX_TIM4_Init+0xe8>)
 800592a:	f008 f8d7 	bl	800dadc <HAL_TIM_ConfigClockSource>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8005934:	f7ff f97a 	bl	8004c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005938:	4818      	ldr	r0, [pc, #96]	; (800599c <MX_TIM4_Init+0xe8>)
 800593a:	f007 fd2c 	bl	800d396 <HAL_TIM_PWM_Init>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8005944:	f7ff f972 	bl	8004c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005948:	2300      	movs	r3, #0
 800594a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800594c:	2300      	movs	r3, #0
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005950:	f107 031c 	add.w	r3, r7, #28
 8005954:	4619      	mov	r1, r3
 8005956:	4811      	ldr	r0, [pc, #68]	; (800599c <MX_TIM4_Init+0xe8>)
 8005958:	f008 fe14 	bl	800e584 <HAL_TIMEx_MasterConfigSynchronization>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005962:	f7ff f963 	bl	8004c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005966:	2360      	movs	r3, #96	; 0x60
 8005968:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800596a:	2300      	movs	r3, #0
 800596c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800596e:	2300      	movs	r3, #0
 8005970:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005972:	2300      	movs	r3, #0
 8005974:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005976:	463b      	mov	r3, r7
 8005978:	2208      	movs	r2, #8
 800597a:	4619      	mov	r1, r3
 800597c:	4807      	ldr	r0, [pc, #28]	; (800599c <MX_TIM4_Init+0xe8>)
 800597e:	f007 ff99 	bl	800d8b4 <HAL_TIM_PWM_ConfigChannel>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8005988:	f7ff f950 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800598c:	4803      	ldr	r0, [pc, #12]	; (800599c <MX_TIM4_Init+0xe8>)
 800598e:	f000 fba7 	bl	80060e0 <HAL_TIM_MspPostInit>

}
 8005992:	bf00      	nop
 8005994:	3738      	adds	r7, #56	; 0x38
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	24000d8c 	.word	0x24000d8c
 80059a0:	40000800 	.word	0x40000800

080059a4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059aa:	f107 0310 	add.w	r3, r7, #16
 80059ae:	2200      	movs	r2, #0
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	605a      	str	r2, [r3, #4]
 80059b4:	609a      	str	r2, [r3, #8]
 80059b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059b8:	1d3b      	adds	r3, r7, #4
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	605a      	str	r2, [r3, #4]
 80059c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80059c2:	4b1d      	ldr	r3, [pc, #116]	; (8005a38 <MX_TIM5_Init+0x94>)
 80059c4:	4a1d      	ldr	r2, [pc, #116]	; (8005a3c <MX_TIM5_Init+0x98>)
 80059c6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 80059c8:	4b1b      	ldr	r3, [pc, #108]	; (8005a38 <MX_TIM5_Init+0x94>)
 80059ca:	22c7      	movs	r2, #199	; 0xc7
 80059cc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059ce:	4b1a      	ldr	r3, [pc, #104]	; (8005a38 <MX_TIM5_Init+0x94>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 80059d4:	4b18      	ldr	r3, [pc, #96]	; (8005a38 <MX_TIM5_Init+0x94>)
 80059d6:	f642 62df 	movw	r2, #11999	; 0x2edf
 80059da:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059dc:	4b16      	ldr	r3, [pc, #88]	; (8005a38 <MX_TIM5_Init+0x94>)
 80059de:	2200      	movs	r2, #0
 80059e0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80059e2:	4b15      	ldr	r3, [pc, #84]	; (8005a38 <MX_TIM5_Init+0x94>)
 80059e4:	2280      	movs	r2, #128	; 0x80
 80059e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80059e8:	4813      	ldr	r0, [pc, #76]	; (8005a38 <MX_TIM5_Init+0x94>)
 80059ea:	f007 fbd6 	bl	800d19a <HAL_TIM_Base_Init>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80059f4:	f7ff f91a 	bl	8004c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80059f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80059fe:	f107 0310 	add.w	r3, r7, #16
 8005a02:	4619      	mov	r1, r3
 8005a04:	480c      	ldr	r0, [pc, #48]	; (8005a38 <MX_TIM5_Init+0x94>)
 8005a06:	f008 f869 	bl	800dadc <HAL_TIM_ConfigClockSource>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005a10:	f7ff f90c 	bl	8004c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a14:	2300      	movs	r3, #0
 8005a16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005a1c:	1d3b      	adds	r3, r7, #4
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4805      	ldr	r0, [pc, #20]	; (8005a38 <MX_TIM5_Init+0x94>)
 8005a22:	f008 fdaf 	bl	800e584 <HAL_TIMEx_MasterConfigSynchronization>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005a2c:	f7ff f8fe 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005a30:	bf00      	nop
 8005a32:	3720      	adds	r7, #32
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	24000e70 	.word	0x24000e70
 8005a3c:	40000c00 	.word	0x40000c00

08005a40 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a46:	1d3b      	adds	r3, r7, #4
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	605a      	str	r2, [r3, #4]
 8005a4e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005a50:	4b14      	ldr	r3, [pc, #80]	; (8005aa4 <MX_TIM6_Init+0x64>)
 8005a52:	4a15      	ldr	r2, [pc, #84]	; (8005aa8 <MX_TIM6_Init+0x68>)
 8005a54:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 8005a56:	4b13      	ldr	r3, [pc, #76]	; (8005aa4 <MX_TIM6_Init+0x64>)
 8005a58:	22c7      	movs	r2, #199	; 0xc7
 8005a5a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a5c:	4b11      	ldr	r3, [pc, #68]	; (8005aa4 <MX_TIM6_Init+0x64>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 8005a62:	4b10      	ldr	r3, [pc, #64]	; (8005aa4 <MX_TIM6_Init+0x64>)
 8005a64:	f241 726f 	movw	r2, #5999	; 0x176f
 8005a68:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005a6a:	4b0e      	ldr	r3, [pc, #56]	; (8005aa4 <MX_TIM6_Init+0x64>)
 8005a6c:	2280      	movs	r2, #128	; 0x80
 8005a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005a70:	480c      	ldr	r0, [pc, #48]	; (8005aa4 <MX_TIM6_Init+0x64>)
 8005a72:	f007 fb92 	bl	800d19a <HAL_TIM_Base_Init>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8005a7c:	f7ff f8d6 	bl	8004c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a80:	2300      	movs	r3, #0
 8005a82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005a88:	1d3b      	adds	r3, r7, #4
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	4805      	ldr	r0, [pc, #20]	; (8005aa4 <MX_TIM6_Init+0x64>)
 8005a8e:	f008 fd79 	bl	800e584 <HAL_TIMEx_MasterConfigSynchronization>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8005a98:	f7ff f8c8 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005a9c:	bf00      	nop
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	24000f54 	.word	0x24000f54
 8005aa8:	40001000 	.word	0x40001000

08005aac <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ab2:	1d3b      	adds	r3, r7, #4
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	605a      	str	r2, [r3, #4]
 8005aba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005abc:	4b14      	ldr	r3, [pc, #80]	; (8005b10 <MX_TIM7_Init+0x64>)
 8005abe:	4a15      	ldr	r2, [pc, #84]	; (8005b14 <MX_TIM7_Init+0x68>)
 8005ac0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8005ac2:	4b13      	ldr	r3, [pc, #76]	; (8005b10 <MX_TIM7_Init+0x64>)
 8005ac4:	22c7      	movs	r2, #199	; 0xc7
 8005ac6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ac8:	4b11      	ldr	r3, [pc, #68]	; (8005b10 <MX_TIM7_Init+0x64>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8005ace:	4b10      	ldr	r3, [pc, #64]	; (8005b10 <MX_TIM7_Init+0x64>)
 8005ad0:	f240 42af 	movw	r2, #1199	; 0x4af
 8005ad4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005ad6:	4b0e      	ldr	r3, [pc, #56]	; (8005b10 <MX_TIM7_Init+0x64>)
 8005ad8:	2280      	movs	r2, #128	; 0x80
 8005ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005adc:	480c      	ldr	r0, [pc, #48]	; (8005b10 <MX_TIM7_Init+0x64>)
 8005ade:	f007 fb5c 	bl	800d19a <HAL_TIM_Base_Init>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005ae8:	f7ff f8a0 	bl	8004c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005aec:	2300      	movs	r3, #0
 8005aee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005af0:	2300      	movs	r3, #0
 8005af2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005af4:	1d3b      	adds	r3, r7, #4
 8005af6:	4619      	mov	r1, r3
 8005af8:	4805      	ldr	r0, [pc, #20]	; (8005b10 <MX_TIM7_Init+0x64>)
 8005afa:	f008 fd43 	bl	800e584 <HAL_TIMEx_MasterConfigSynchronization>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005b04:	f7ff f892 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005b08:	bf00      	nop
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	2400111c 	.word	0x2400111c
 8005b14:	40001400 	.word	0x40001400

08005b18 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b1e:	463b      	mov	r3, r7
 8005b20:	2200      	movs	r2, #0
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	605a      	str	r2, [r3, #4]
 8005b26:	609a      	str	r2, [r3, #8]
 8005b28:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8005b2a:	4b16      	ldr	r3, [pc, #88]	; (8005b84 <MX_TIM12_Init+0x6c>)
 8005b2c:	4a16      	ldr	r2, [pc, #88]	; (8005b88 <MX_TIM12_Init+0x70>)
 8005b2e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8005b30:	4b14      	ldr	r3, [pc, #80]	; (8005b84 <MX_TIM12_Init+0x6c>)
 8005b32:	22c7      	movs	r2, #199	; 0xc7
 8005b34:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b36:	4b13      	ldr	r3, [pc, #76]	; (8005b84 <MX_TIM12_Init+0x6c>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8005b3c:	4b11      	ldr	r3, [pc, #68]	; (8005b84 <MX_TIM12_Init+0x6c>)
 8005b3e:	f240 2257 	movw	r2, #599	; 0x257
 8005b42:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b44:	4b0f      	ldr	r3, [pc, #60]	; (8005b84 <MX_TIM12_Init+0x6c>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005b4a:	4b0e      	ldr	r3, [pc, #56]	; (8005b84 <MX_TIM12_Init+0x6c>)
 8005b4c:	2280      	movs	r2, #128	; 0x80
 8005b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8005b50:	480c      	ldr	r0, [pc, #48]	; (8005b84 <MX_TIM12_Init+0x6c>)
 8005b52:	f007 fb22 	bl	800d19a <HAL_TIM_Base_Init>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8005b5c:	f7ff f866 	bl	8004c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b64:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8005b66:	463b      	mov	r3, r7
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4806      	ldr	r0, [pc, #24]	; (8005b84 <MX_TIM12_Init+0x6c>)
 8005b6c:	f007 ffb6 	bl	800dadc <HAL_TIM_ConfigClockSource>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8005b76:	f7ff f859 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8005b7a:	bf00      	nop
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	24001084 	.word	0x24001084
 8005b88:	40001800 	.word	0x40001800

08005b8c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005b90:	4b0e      	ldr	r3, [pc, #56]	; (8005bcc <MX_TIM13_Init+0x40>)
 8005b92:	4a0f      	ldr	r2, [pc, #60]	; (8005bd0 <MX_TIM13_Init+0x44>)
 8005b94:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 8005b96:	4b0d      	ldr	r3, [pc, #52]	; (8005bcc <MX_TIM13_Init+0x40>)
 8005b98:	22c7      	movs	r2, #199	; 0xc7
 8005b9a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <MX_TIM13_Init+0x40>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <MX_TIM13_Init+0x40>)
 8005ba4:	f240 2257 	movw	r2, #599	; 0x257
 8005ba8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005baa:	4b08      	ldr	r3, [pc, #32]	; (8005bcc <MX_TIM13_Init+0x40>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005bb0:	4b06      	ldr	r3, [pc, #24]	; (8005bcc <MX_TIM13_Init+0x40>)
 8005bb2:	2280      	movs	r2, #128	; 0x80
 8005bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005bb6:	4805      	ldr	r0, [pc, #20]	; (8005bcc <MX_TIM13_Init+0x40>)
 8005bb8:	f007 faef 	bl	800d19a <HAL_TIM_Base_Init>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8005bc2:	f7ff f833 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8005bc6:	bf00      	nop
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	24000f08 	.word	0x24000f08
 8005bd0:	40001c00 	.word	0x40001c00

08005bd4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8005bd8:	4b0e      	ldr	r3, [pc, #56]	; (8005c14 <MX_TIM14_Init+0x40>)
 8005bda:	4a0f      	ldr	r2, [pc, #60]	; (8005c18 <MX_TIM14_Init+0x44>)
 8005bdc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8005bde:	4b0d      	ldr	r3, [pc, #52]	; (8005c14 <MX_TIM14_Init+0x40>)
 8005be0:	22c7      	movs	r2, #199	; 0xc7
 8005be2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005be4:	4b0b      	ldr	r3, [pc, #44]	; (8005c14 <MX_TIM14_Init+0x40>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 8005bea:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <MX_TIM14_Init+0x40>)
 8005bec:	f640 125f 	movw	r2, #2399	; 0x95f
 8005bf0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bf2:	4b08      	ldr	r3, [pc, #32]	; (8005c14 <MX_TIM14_Init+0x40>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005bf8:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <MX_TIM14_Init+0x40>)
 8005bfa:	2280      	movs	r2, #128	; 0x80
 8005bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005bfe:	4805      	ldr	r0, [pc, #20]	; (8005c14 <MX_TIM14_Init+0x40>)
 8005c00:	f007 facb 	bl	800d19a <HAL_TIM_Base_Init>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8005c0a:	f7ff f80f 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8005c0e:	bf00      	nop
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	24001038 	.word	0x24001038
 8005c18:	40002000 	.word	0x40002000

08005c1c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b09a      	sub	sp, #104	; 0x68
 8005c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c26:	2200      	movs	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	605a      	str	r2, [r3, #4]
 8005c2c:	609a      	str	r2, [r3, #8]
 8005c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	605a      	str	r2, [r3, #4]
 8005c3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c40:	2200      	movs	r2, #0
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	605a      	str	r2, [r3, #4]
 8005c46:	609a      	str	r2, [r3, #8]
 8005c48:	60da      	str	r2, [r3, #12]
 8005c4a:	611a      	str	r2, [r3, #16]
 8005c4c:	615a      	str	r2, [r3, #20]
 8005c4e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005c50:	1d3b      	adds	r3, r7, #4
 8005c52:	222c      	movs	r2, #44	; 0x2c
 8005c54:	2100      	movs	r1, #0
 8005c56:	4618      	mov	r0, r3
 8005c58:	f00c fae2 	bl	8012220 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005c5c:	4b3f      	ldr	r3, [pc, #252]	; (8005d5c <MX_TIM15_Init+0x140>)
 8005c5e:	4a40      	ldr	r2, [pc, #256]	; (8005d60 <MX_TIM15_Init+0x144>)
 8005c60:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8005c62:	4b3e      	ldr	r3, [pc, #248]	; (8005d5c <MX_TIM15_Init+0x140>)
 8005c64:	22ef      	movs	r2, #239	; 0xef
 8005c66:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c68:	4b3c      	ldr	r3, [pc, #240]	; (8005d5c <MX_TIM15_Init+0x140>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8005c6e:	4b3b      	ldr	r3, [pc, #236]	; (8005d5c <MX_TIM15_Init+0x140>)
 8005c70:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005c74:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c76:	4b39      	ldr	r3, [pc, #228]	; (8005d5c <MX_TIM15_Init+0x140>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005c7c:	4b37      	ldr	r3, [pc, #220]	; (8005d5c <MX_TIM15_Init+0x140>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c82:	4b36      	ldr	r3, [pc, #216]	; (8005d5c <MX_TIM15_Init+0x140>)
 8005c84:	2280      	movs	r2, #128	; 0x80
 8005c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005c88:	4834      	ldr	r0, [pc, #208]	; (8005d5c <MX_TIM15_Init+0x140>)
 8005c8a:	f007 fa86 	bl	800d19a <HAL_TIM_Base_Init>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8005c94:	f7fe ffca 	bl	8004c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c9c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005c9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	482d      	ldr	r0, [pc, #180]	; (8005d5c <MX_TIM15_Init+0x140>)
 8005ca6:	f007 ff19 	bl	800dadc <HAL_TIM_ConfigClockSource>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8005cb0:	f7fe ffbc 	bl	8004c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8005cb4:	4829      	ldr	r0, [pc, #164]	; (8005d5c <MX_TIM15_Init+0x140>)
 8005cb6:	f007 fb6e 	bl	800d396 <HAL_TIM_PWM_Init>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8005cc0:	f7fe ffb4 	bl	8004c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005ccc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4822      	ldr	r0, [pc, #136]	; (8005d5c <MX_TIM15_Init+0x140>)
 8005cd4:	f008 fc56 	bl	800e584 <HAL_TIMEx_MasterConfigSynchronization>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8005cde:	f7fe ffa5 	bl	8004c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ce2:	2360      	movs	r3, #96	; 0x60
 8005ce4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8005ce6:	f240 1339 	movw	r3, #313	; 0x139
 8005cea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005cec:	2300      	movs	r3, #0
 8005cee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005d00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d04:	2204      	movs	r2, #4
 8005d06:	4619      	mov	r1, r3
 8005d08:	4814      	ldr	r0, [pc, #80]	; (8005d5c <MX_TIM15_Init+0x140>)
 8005d0a:	f007 fdd3 	bl	800d8b4 <HAL_TIM_PWM_ConfigChannel>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8005d14:	f7fe ff8a 	bl	8004c2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005d20:	2300      	movs	r3, #0
 8005d22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005d24:	2300      	movs	r3, #0
 8005d26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005d2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005d32:	2300      	movs	r3, #0
 8005d34:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005d36:	2300      	movs	r3, #0
 8005d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8005d3a:	1d3b      	adds	r3, r7, #4
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4807      	ldr	r0, [pc, #28]	; (8005d5c <MX_TIM15_Init+0x140>)
 8005d40:	f008 fcae 	bl	800e6a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8005d4a:	f7fe ff6f 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8005d4e:	4803      	ldr	r0, [pc, #12]	; (8005d5c <MX_TIM15_Init+0x140>)
 8005d50:	f000 f9c6 	bl	80060e0 <HAL_TIM_MspPostInit>

}
 8005d54:	bf00      	nop
 8005d56:	3768      	adds	r7, #104	; 0x68
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	24000dd8 	.word	0x24000dd8
 8005d60:	40014000 	.word	0x40014000

08005d64 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8005d68:	4b0f      	ldr	r3, [pc, #60]	; (8005da8 <MX_TIM16_Init+0x44>)
 8005d6a:	4a10      	ldr	r2, [pc, #64]	; (8005dac <MX_TIM16_Init+0x48>)
 8005d6c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 240-1;
 8005d6e:	4b0e      	ldr	r3, [pc, #56]	; (8005da8 <MX_TIM16_Init+0x44>)
 8005d70:	22ef      	movs	r2, #239	; 0xef
 8005d72:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d74:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <MX_TIM16_Init+0x44>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8005d7a:	4b0b      	ldr	r3, [pc, #44]	; (8005da8 <MX_TIM16_Init+0x44>)
 8005d7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005d80:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d82:	4b09      	ldr	r3, [pc, #36]	; (8005da8 <MX_TIM16_Init+0x44>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005d88:	4b07      	ldr	r3, [pc, #28]	; (8005da8 <MX_TIM16_Init+0x44>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005d8e:	4b06      	ldr	r3, [pc, #24]	; (8005da8 <MX_TIM16_Init+0x44>)
 8005d90:	2280      	movs	r2, #128	; 0x80
 8005d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005d94:	4804      	ldr	r0, [pc, #16]	; (8005da8 <MX_TIM16_Init+0x44>)
 8005d96:	f007 fa00 	bl	800d19a <HAL_TIM_Base_Init>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005da0:	f7fe ff44 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8005da4:	bf00      	nop
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	240010d0 	.word	0x240010d0
 8005dac:	40014400 	.word	0x40014400

08005db0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8005db4:	4b0f      	ldr	r3, [pc, #60]	; (8005df4 <MX_TIM17_Init+0x44>)
 8005db6:	4a10      	ldr	r2, [pc, #64]	; (8005df8 <MX_TIM17_Init+0x48>)
 8005db8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 240-1;
 8005dba:	4b0e      	ldr	r3, [pc, #56]	; (8005df4 <MX_TIM17_Init+0x44>)
 8005dbc:	22ef      	movs	r2, #239	; 0xef
 8005dbe:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dc0:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <MX_TIM17_Init+0x44>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 20000-1;
 8005dc6:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <MX_TIM17_Init+0x44>)
 8005dc8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005dcc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005dce:	4b09      	ldr	r3, [pc, #36]	; (8005df4 <MX_TIM17_Init+0x44>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8005dd4:	4b07      	ldr	r3, [pc, #28]	; (8005df4 <MX_TIM17_Init+0x44>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005dda:	4b06      	ldr	r3, [pc, #24]	; (8005df4 <MX_TIM17_Init+0x44>)
 8005ddc:	2280      	movs	r2, #128	; 0x80
 8005dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005de0:	4804      	ldr	r0, [pc, #16]	; (8005df4 <MX_TIM17_Init+0x44>)
 8005de2:	f007 f9da 	bl	800d19a <HAL_TIM_Base_Init>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8005dec:	f7fe ff1e 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8005df0:	bf00      	nop
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	24000e24 	.word	0x24000e24
 8005df8:	40014800 	.word	0x40014800

08005dfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b090      	sub	sp, #64	; 0x40
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4aa8      	ldr	r2, [pc, #672]	; (80060ac <HAL_TIM_Base_MspInit+0x2b0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d10f      	bne.n	8005e2e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005e0e:	4ba8      	ldr	r3, [pc, #672]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005e10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e14:	4aa6      	ldr	r2, [pc, #664]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005e16:	f043 0301 	orr.w	r3, r3, #1
 8005e1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005e1e:	4ba4      	ldr	r3, [pc, #656]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8005e2c:	e13a      	b.n	80060a4 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM2)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e36:	d10f      	bne.n	8005e58 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005e38:	4b9d      	ldr	r3, [pc, #628]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005e3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e3e:	4a9c      	ldr	r2, [pc, #624]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005e40:	f043 0301 	orr.w	r3, r3, #1
 8005e44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e48:	4b99      	ldr	r3, [pc, #612]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005e4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005e56:	e125      	b.n	80060a4 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM3)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a95      	ldr	r2, [pc, #596]	; (80060b4 <HAL_TIM_Base_MspInit+0x2b8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d10f      	bne.n	8005e82 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005e62:	4b93      	ldr	r3, [pc, #588]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e68:	4a91      	ldr	r2, [pc, #580]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005e6a:	f043 0302 	orr.w	r3, r3, #2
 8005e6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e72:	4b8f      	ldr	r3, [pc, #572]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005e74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e80:	e110      	b.n	80060a4 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM4)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a8c      	ldr	r2, [pc, #560]	; (80060b8 <HAL_TIM_Base_MspInit+0x2bc>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d10f      	bne.n	8005eac <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005e8c:	4b88      	ldr	r3, [pc, #544]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005e8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e92:	4a87      	ldr	r2, [pc, #540]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005e94:	f043 0304 	orr.w	r3, r3, #4
 8005e98:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e9c:	4b84      	ldr	r3, [pc, #528]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005e9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	633b      	str	r3, [r7, #48]	; 0x30
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005eaa:	e0fb      	b.n	80060a4 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM5)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a82      	ldr	r2, [pc, #520]	; (80060bc <HAL_TIM_Base_MspInit+0x2c0>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d117      	bne.n	8005ee6 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005eb6:	4b7e      	ldr	r3, [pc, #504]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005eb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ebc:	4a7c      	ldr	r2, [pc, #496]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005ebe:	f043 0308 	orr.w	r3, r3, #8
 8005ec2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005ec6:	4b7a      	ldr	r3, [pc, #488]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005ec8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	2032      	movs	r0, #50	; 0x32
 8005eda:	f000 ffca 	bl	8006e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005ede:	2032      	movs	r0, #50	; 0x32
 8005ee0:	f000 ffe1 	bl	8006ea6 <HAL_NVIC_EnableIRQ>
}
 8005ee4:	e0de      	b.n	80060a4 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM6)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a75      	ldr	r2, [pc, #468]	; (80060c0 <HAL_TIM_Base_MspInit+0x2c4>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d117      	bne.n	8005f20 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005ef0:	4b6f      	ldr	r3, [pc, #444]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005ef2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ef6:	4a6e      	ldr	r2, [pc, #440]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005ef8:	f043 0310 	orr.w	r3, r3, #16
 8005efc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005f00:	4b6b      	ldr	r3, [pc, #428]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005f02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f06:	f003 0310 	and.w	r3, r3, #16
 8005f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005f0e:	2200      	movs	r2, #0
 8005f10:	2100      	movs	r1, #0
 8005f12:	2036      	movs	r0, #54	; 0x36
 8005f14:	f000 ffad 	bl	8006e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005f18:	2036      	movs	r0, #54	; 0x36
 8005f1a:	f000 ffc4 	bl	8006ea6 <HAL_NVIC_EnableIRQ>
}
 8005f1e:	e0c1      	b.n	80060a4 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM7)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a67      	ldr	r2, [pc, #412]	; (80060c4 <HAL_TIM_Base_MspInit+0x2c8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d117      	bne.n	8005f5a <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005f2a:	4b61      	ldr	r3, [pc, #388]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005f2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f30:	4a5f      	ldr	r2, [pc, #380]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005f32:	f043 0320 	orr.w	r3, r3, #32
 8005f36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005f3a:	4b5d      	ldr	r3, [pc, #372]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005f3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f40:	f003 0320 	and.w	r3, r3, #32
 8005f44:	627b      	str	r3, [r7, #36]	; 0x24
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005f48:	2200      	movs	r2, #0
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	2037      	movs	r0, #55	; 0x37
 8005f4e:	f000 ff90 	bl	8006e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005f52:	2037      	movs	r0, #55	; 0x37
 8005f54:	f000 ffa7 	bl	8006ea6 <HAL_NVIC_EnableIRQ>
}
 8005f58:	e0a4      	b.n	80060a4 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM12)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a5a      	ldr	r2, [pc, #360]	; (80060c8 <HAL_TIM_Base_MspInit+0x2cc>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d117      	bne.n	8005f94 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8005f64:	4b52      	ldr	r3, [pc, #328]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005f66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f6a:	4a51      	ldr	r2, [pc, #324]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f70:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005f74:	4b4e      	ldr	r3, [pc, #312]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005f76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7e:	623b      	str	r3, [r7, #32]
 8005f80:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005f82:	2200      	movs	r2, #0
 8005f84:	2100      	movs	r1, #0
 8005f86:	202b      	movs	r0, #43	; 0x2b
 8005f88:	f000 ff73 	bl	8006e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005f8c:	202b      	movs	r0, #43	; 0x2b
 8005f8e:	f000 ff8a 	bl	8006ea6 <HAL_NVIC_EnableIRQ>
}
 8005f92:	e087      	b.n	80060a4 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM13)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a4c      	ldr	r2, [pc, #304]	; (80060cc <HAL_TIM_Base_MspInit+0x2d0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d117      	bne.n	8005fce <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005f9e:	4b44      	ldr	r3, [pc, #272]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005fa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fa4:	4a42      	ldr	r2, [pc, #264]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005faa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005fae:	4b40      	ldr	r3, [pc, #256]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005fb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb8:	61fb      	str	r3, [r7, #28]
 8005fba:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	202c      	movs	r0, #44	; 0x2c
 8005fc2:	f000 ff56 	bl	8006e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005fc6:	202c      	movs	r0, #44	; 0x2c
 8005fc8:	f000 ff6d 	bl	8006ea6 <HAL_NVIC_EnableIRQ>
}
 8005fcc:	e06a      	b.n	80060a4 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM14)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a3f      	ldr	r2, [pc, #252]	; (80060d0 <HAL_TIM_Base_MspInit+0x2d4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d117      	bne.n	8006008 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005fd8:	4b35      	ldr	r3, [pc, #212]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005fda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fde:	4a34      	ldr	r2, [pc, #208]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005fe8:	4b31      	ldr	r3, [pc, #196]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8005fea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff2:	61bb      	str	r3, [r7, #24]
 8005ff4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	202d      	movs	r0, #45	; 0x2d
 8005ffc:	f000 ff39 	bl	8006e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8006000:	202d      	movs	r0, #45	; 0x2d
 8006002:	f000 ff50 	bl	8006ea6 <HAL_NVIC_EnableIRQ>
}
 8006006:	e04d      	b.n	80060a4 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM15)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a31      	ldr	r2, [pc, #196]	; (80060d4 <HAL_TIM_Base_MspInit+0x2d8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d10f      	bne.n	8006032 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006012:	4b27      	ldr	r3, [pc, #156]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8006014:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006018:	4a25      	ldr	r2, [pc, #148]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 800601a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800601e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006022:	4b23      	ldr	r3, [pc, #140]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8006024:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	697b      	ldr	r3, [r7, #20]
}
 8006030:	e038      	b.n	80060a4 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM16)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a28      	ldr	r2, [pc, #160]	; (80060d8 <HAL_TIM_Base_MspInit+0x2dc>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d117      	bne.n	800606c <HAL_TIM_Base_MspInit+0x270>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800603c:	4b1c      	ldr	r3, [pc, #112]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 800603e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006042:	4a1b      	ldr	r2, [pc, #108]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8006044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006048:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800604c:	4b18      	ldr	r3, [pc, #96]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 800604e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006056:	613b      	str	r3, [r7, #16]
 8006058:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800605a:	2200      	movs	r2, #0
 800605c:	2100      	movs	r1, #0
 800605e:	2075      	movs	r0, #117	; 0x75
 8006060:	f000 ff07 	bl	8006e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8006064:	2075      	movs	r0, #117	; 0x75
 8006066:	f000 ff1e 	bl	8006ea6 <HAL_NVIC_EnableIRQ>
}
 800606a:	e01b      	b.n	80060a4 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM17)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a1a      	ldr	r2, [pc, #104]	; (80060dc <HAL_TIM_Base_MspInit+0x2e0>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d116      	bne.n	80060a4 <HAL_TIM_Base_MspInit+0x2a8>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8006076:	4b0e      	ldr	r3, [pc, #56]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8006078:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800607c:	4a0c      	ldr	r2, [pc, #48]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 800607e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006082:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006086:	4b0a      	ldr	r3, [pc, #40]	; (80060b0 <HAL_TIM_Base_MspInit+0x2b4>)
 8006088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800608c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8006094:	2200      	movs	r2, #0
 8006096:	2100      	movs	r1, #0
 8006098:	2076      	movs	r0, #118	; 0x76
 800609a:	f000 feea 	bl	8006e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800609e:	2076      	movs	r0, #118	; 0x76
 80060a0:	f000 ff01 	bl	8006ea6 <HAL_NVIC_EnableIRQ>
}
 80060a4:	bf00      	nop
 80060a6:	3740      	adds	r7, #64	; 0x40
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	40010000 	.word	0x40010000
 80060b0:	58024400 	.word	0x58024400
 80060b4:	40000400 	.word	0x40000400
 80060b8:	40000800 	.word	0x40000800
 80060bc:	40000c00 	.word	0x40000c00
 80060c0:	40001000 	.word	0x40001000
 80060c4:	40001400 	.word	0x40001400
 80060c8:	40001800 	.word	0x40001800
 80060cc:	40001c00 	.word	0x40001c00
 80060d0:	40002000 	.word	0x40002000
 80060d4:	40014000 	.word	0x40014000
 80060d8:	40014400 	.word	0x40014400
 80060dc:	40014800 	.word	0x40014800

080060e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b08c      	sub	sp, #48	; 0x30
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060e8:	f107 031c 	add.w	r3, r7, #28
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	605a      	str	r2, [r3, #4]
 80060f2:	609a      	str	r2, [r3, #8]
 80060f4:	60da      	str	r2, [r3, #12]
 80060f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a5e      	ldr	r2, [pc, #376]	; (8006278 <HAL_TIM_MspPostInit+0x198>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d120      	bne.n	8006144 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006102:	4b5e      	ldr	r3, [pc, #376]	; (800627c <HAL_TIM_MspPostInit+0x19c>)
 8006104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006108:	4a5c      	ldr	r2, [pc, #368]	; (800627c <HAL_TIM_MspPostInit+0x19c>)
 800610a:	f043 0310 	orr.w	r3, r3, #16
 800610e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006112:	4b5a      	ldr	r3, [pc, #360]	; (800627c <HAL_TIM_MspPostInit+0x19c>)
 8006114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006118:	f003 0310 	and.w	r3, r3, #16
 800611c:	61bb      	str	r3, [r7, #24]
 800611e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8006120:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006126:	2302      	movs	r3, #2
 8006128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800612a:	2300      	movs	r3, #0
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800612e:	2300      	movs	r3, #0
 8006130:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006132:	2301      	movs	r3, #1
 8006134:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8006136:	f107 031c 	add.w	r3, r7, #28
 800613a:	4619      	mov	r1, r3
 800613c:	4850      	ldr	r0, [pc, #320]	; (8006280 <HAL_TIM_MspPostInit+0x1a0>)
 800613e:	f003 ff11 	bl	8009f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8006142:	e094      	b.n	800626e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614c:	d120      	bne.n	8006190 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800614e:	4b4b      	ldr	r3, [pc, #300]	; (800627c <HAL_TIM_MspPostInit+0x19c>)
 8006150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006154:	4a49      	ldr	r2, [pc, #292]	; (800627c <HAL_TIM_MspPostInit+0x19c>)
 8006156:	f043 0302 	orr.w	r3, r3, #2
 800615a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800615e:	4b47      	ldr	r3, [pc, #284]	; (800627c <HAL_TIM_MspPostInit+0x19c>)
 8006160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	617b      	str	r3, [r7, #20]
 800616a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 800616c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006172:	2302      	movs	r3, #2
 8006174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006176:	2300      	movs	r3, #0
 8006178:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800617a:	2300      	movs	r3, #0
 800617c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800617e:	2301      	movs	r3, #1
 8006180:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8006182:	f107 031c 	add.w	r3, r7, #28
 8006186:	4619      	mov	r1, r3
 8006188:	483e      	ldr	r0, [pc, #248]	; (8006284 <HAL_TIM_MspPostInit+0x1a4>)
 800618a:	f003 feeb 	bl	8009f64 <HAL_GPIO_Init>
}
 800618e:	e06e      	b.n	800626e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a3c      	ldr	r2, [pc, #240]	; (8006288 <HAL_TIM_MspPostInit+0x1a8>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d11f      	bne.n	80061da <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800619a:	4b38      	ldr	r3, [pc, #224]	; (800627c <HAL_TIM_MspPostInit+0x19c>)
 800619c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061a0:	4a36      	ldr	r2, [pc, #216]	; (800627c <HAL_TIM_MspPostInit+0x19c>)
 80061a2:	f043 0301 	orr.w	r3, r3, #1
 80061a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80061aa:	4b34      	ldr	r3, [pc, #208]	; (800627c <HAL_TIM_MspPostInit+0x19c>)
 80061ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	613b      	str	r3, [r7, #16]
 80061b6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 80061b8:	2340      	movs	r3, #64	; 0x40
 80061ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061bc:	2302      	movs	r3, #2
 80061be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061c0:	2300      	movs	r3, #0
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061c4:	2300      	movs	r3, #0
 80061c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80061c8:	2302      	movs	r3, #2
 80061ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 80061cc:	f107 031c 	add.w	r3, r7, #28
 80061d0:	4619      	mov	r1, r3
 80061d2:	482e      	ldr	r0, [pc, #184]	; (800628c <HAL_TIM_MspPostInit+0x1ac>)
 80061d4:	f003 fec6 	bl	8009f64 <HAL_GPIO_Init>
}
 80061d8:	e049      	b.n	800626e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a2c      	ldr	r2, [pc, #176]	; (8006290 <HAL_TIM_MspPostInit+0x1b0>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d120      	bne.n	8006226 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061e4:	4b25      	ldr	r3, [pc, #148]	; (800627c <HAL_TIM_MspPostInit+0x19c>)
 80061e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061ea:	4a24      	ldr	r2, [pc, #144]	; (800627c <HAL_TIM_MspPostInit+0x19c>)
 80061ec:	f043 0302 	orr.w	r3, r3, #2
 80061f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80061f4:	4b21      	ldr	r3, [pc, #132]	; (800627c <HAL_TIM_MspPostInit+0x19c>)
 80061f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8006202:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006208:	2302      	movs	r3, #2
 800620a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800620c:	2300      	movs	r3, #0
 800620e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006210:	2300      	movs	r3, #0
 8006212:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006214:	2302      	movs	r3, #2
 8006216:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8006218:	f107 031c 	add.w	r3, r7, #28
 800621c:	4619      	mov	r1, r3
 800621e:	4819      	ldr	r0, [pc, #100]	; (8006284 <HAL_TIM_MspPostInit+0x1a4>)
 8006220:	f003 fea0 	bl	8009f64 <HAL_GPIO_Init>
}
 8006224:	e023      	b.n	800626e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a1a      	ldr	r2, [pc, #104]	; (8006294 <HAL_TIM_MspPostInit+0x1b4>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d11e      	bne.n	800626e <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006230:	4b12      	ldr	r3, [pc, #72]	; (800627c <HAL_TIM_MspPostInit+0x19c>)
 8006232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006236:	4a11      	ldr	r2, [pc, #68]	; (800627c <HAL_TIM_MspPostInit+0x19c>)
 8006238:	f043 0310 	orr.w	r3, r3, #16
 800623c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006240:	4b0e      	ldr	r3, [pc, #56]	; (800627c <HAL_TIM_MspPostInit+0x19c>)
 8006242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006246:	f003 0310 	and.w	r3, r3, #16
 800624a:	60bb      	str	r3, [r7, #8]
 800624c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 800624e:	2340      	movs	r3, #64	; 0x40
 8006250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006252:	2302      	movs	r3, #2
 8006254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006256:	2300      	movs	r3, #0
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800625a:	2300      	movs	r3, #0
 800625c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800625e:	2304      	movs	r3, #4
 8006260:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8006262:	f107 031c 	add.w	r3, r7, #28
 8006266:	4619      	mov	r1, r3
 8006268:	4805      	ldr	r0, [pc, #20]	; (8006280 <HAL_TIM_MspPostInit+0x1a0>)
 800626a:	f003 fe7b 	bl	8009f64 <HAL_GPIO_Init>
}
 800626e:	bf00      	nop
 8006270:	3730      	adds	r7, #48	; 0x30
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	40010000 	.word	0x40010000
 800627c:	58024400 	.word	0x58024400
 8006280:	58021000 	.word	0x58021000
 8006284:	58020400 	.word	0x58020400
 8006288:	40000400 	.word	0x40000400
 800628c:	58020000 	.word	0x58020000
 8006290:	40000800 	.word	0x40000800
 8006294:	40014000 	.word	0x40014000

08006298 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800629c:	4b25      	ldr	r3, [pc, #148]	; (8006334 <MX_UART4_Init+0x9c>)
 800629e:	4a26      	ldr	r2, [pc, #152]	; (8006338 <MX_UART4_Init+0xa0>)
 80062a0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 80062a2:	4b24      	ldr	r3, [pc, #144]	; (8006334 <MX_UART4_Init+0x9c>)
 80062a4:	4a25      	ldr	r2, [pc, #148]	; (800633c <MX_UART4_Init+0xa4>)
 80062a6:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80062a8:	4b22      	ldr	r3, [pc, #136]	; (8006334 <MX_UART4_Init+0x9c>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80062ae:	4b21      	ldr	r3, [pc, #132]	; (8006334 <MX_UART4_Init+0x9c>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80062b4:	4b1f      	ldr	r3, [pc, #124]	; (8006334 <MX_UART4_Init+0x9c>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80062ba:	4b1e      	ldr	r3, [pc, #120]	; (8006334 <MX_UART4_Init+0x9c>)
 80062bc:	220c      	movs	r2, #12
 80062be:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062c0:	4b1c      	ldr	r3, [pc, #112]	; (8006334 <MX_UART4_Init+0x9c>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80062c6:	4b1b      	ldr	r3, [pc, #108]	; (8006334 <MX_UART4_Init+0x9c>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80062cc:	4b19      	ldr	r3, [pc, #100]	; (8006334 <MX_UART4_Init+0x9c>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80062d2:	4b18      	ldr	r3, [pc, #96]	; (8006334 <MX_UART4_Init+0x9c>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80062d8:	4b16      	ldr	r3, [pc, #88]	; (8006334 <MX_UART4_Init+0x9c>)
 80062da:	2208      	movs	r2, #8
 80062dc:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80062de:	4b15      	ldr	r3, [pc, #84]	; (8006334 <MX_UART4_Init+0x9c>)
 80062e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80062e4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80062e6:	4813      	ldr	r0, [pc, #76]	; (8006334 <MX_UART4_Init+0x9c>)
 80062e8:	f008 fa76 	bl	800e7d8 <HAL_UART_Init>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 80062f2:	f7fe fc9b 	bl	8004c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 80062f6:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80062fa:	480e      	ldr	r0, [pc, #56]	; (8006334 <MX_UART4_Init+0x9c>)
 80062fc:	f00a fb07 	bl	801090e <HAL_UARTEx_SetTxFifoThreshold>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8006306:	f7fe fc91 	bl	8004c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800630a:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800630e:	4809      	ldr	r0, [pc, #36]	; (8006334 <MX_UART4_Init+0x9c>)
 8006310:	f00a fb3b 	bl	801098a <HAL_UARTEx_SetRxFifoThreshold>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <MX_UART4_Init+0x86>
  {
    Error_Handler();
 800631a:	f7fe fc87 	bl	8004c2c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 800631e:	4805      	ldr	r0, [pc, #20]	; (8006334 <MX_UART4_Init+0x9c>)
 8006320:	f00a fa81 	bl	8010826 <HAL_UARTEx_EnableFifoMode>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <MX_UART4_Init+0x96>
  {
    Error_Handler();
 800632a:	f7fe fc7f 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800632e:	bf00      	nop
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	24001558 	.word	0x24001558
 8006338:	40004c00 	.word	0x40004c00
 800633c:	001e8480 	.word	0x001e8480

08006340 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8006344:	4b23      	ldr	r3, [pc, #140]	; (80063d4 <MX_UART7_Init+0x94>)
 8006346:	4a24      	ldr	r2, [pc, #144]	; (80063d8 <MX_UART7_Init+0x98>)
 8006348:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800634a:	4b22      	ldr	r3, [pc, #136]	; (80063d4 <MX_UART7_Init+0x94>)
 800634c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006350:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8006352:	4b20      	ldr	r3, [pc, #128]	; (80063d4 <MX_UART7_Init+0x94>)
 8006354:	2200      	movs	r2, #0
 8006356:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8006358:	4b1e      	ldr	r3, [pc, #120]	; (80063d4 <MX_UART7_Init+0x94>)
 800635a:	2200      	movs	r2, #0
 800635c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800635e:	4b1d      	ldr	r3, [pc, #116]	; (80063d4 <MX_UART7_Init+0x94>)
 8006360:	2200      	movs	r2, #0
 8006362:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8006364:	4b1b      	ldr	r3, [pc, #108]	; (80063d4 <MX_UART7_Init+0x94>)
 8006366:	220c      	movs	r2, #12
 8006368:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800636a:	4b1a      	ldr	r3, [pc, #104]	; (80063d4 <MX_UART7_Init+0x94>)
 800636c:	2200      	movs	r2, #0
 800636e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8006370:	4b18      	ldr	r3, [pc, #96]	; (80063d4 <MX_UART7_Init+0x94>)
 8006372:	2200      	movs	r2, #0
 8006374:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006376:	4b17      	ldr	r3, [pc, #92]	; (80063d4 <MX_UART7_Init+0x94>)
 8006378:	2200      	movs	r2, #0
 800637a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800637c:	4b15      	ldr	r3, [pc, #84]	; (80063d4 <MX_UART7_Init+0x94>)
 800637e:	2200      	movs	r2, #0
 8006380:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006382:	4b14      	ldr	r3, [pc, #80]	; (80063d4 <MX_UART7_Init+0x94>)
 8006384:	2200      	movs	r2, #0
 8006386:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8006388:	4812      	ldr	r0, [pc, #72]	; (80063d4 <MX_UART7_Init+0x94>)
 800638a:	f008 fa25 	bl	800e7d8 <HAL_UART_Init>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8006394:	f7fe fc4a 	bl	8004c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8006398:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800639c:	480d      	ldr	r0, [pc, #52]	; (80063d4 <MX_UART7_Init+0x94>)
 800639e:	f00a fab6 	bl	801090e <HAL_UARTEx_SetTxFifoThreshold>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 80063a8:	f7fe fc40 	bl	8004c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80063ac:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 80063b0:	4808      	ldr	r0, [pc, #32]	; (80063d4 <MX_UART7_Init+0x94>)
 80063b2:	f00a faea 	bl	801098a <HAL_UARTEx_SetRxFifoThreshold>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 80063bc:	f7fe fc36 	bl	8004c2c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 80063c0:	4804      	ldr	r0, [pc, #16]	; (80063d4 <MX_UART7_Init+0x94>)
 80063c2:	f00a fa30 	bl	8010826 <HAL_UARTEx_EnableFifoMode>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 80063cc:	f7fe fc2e 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80063d0:	bf00      	nop
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	24001258 	.word	0x24001258
 80063d8:	40007800 	.word	0x40007800

080063dc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80063e0:	4b22      	ldr	r3, [pc, #136]	; (800646c <MX_USART2_UART_Init+0x90>)
 80063e2:	4a23      	ldr	r2, [pc, #140]	; (8006470 <MX_USART2_UART_Init+0x94>)
 80063e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80063e6:	4b21      	ldr	r3, [pc, #132]	; (800646c <MX_USART2_UART_Init+0x90>)
 80063e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80063ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80063ee:	4b1f      	ldr	r3, [pc, #124]	; (800646c <MX_USART2_UART_Init+0x90>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80063f4:	4b1d      	ldr	r3, [pc, #116]	; (800646c <MX_USART2_UART_Init+0x90>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80063fa:	4b1c      	ldr	r3, [pc, #112]	; (800646c <MX_USART2_UART_Init+0x90>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006400:	4b1a      	ldr	r3, [pc, #104]	; (800646c <MX_USART2_UART_Init+0x90>)
 8006402:	220c      	movs	r2, #12
 8006404:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006406:	4b19      	ldr	r3, [pc, #100]	; (800646c <MX_USART2_UART_Init+0x90>)
 8006408:	2200      	movs	r2, #0
 800640a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800640c:	4b17      	ldr	r3, [pc, #92]	; (800646c <MX_USART2_UART_Init+0x90>)
 800640e:	2200      	movs	r2, #0
 8006410:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006412:	4b16      	ldr	r3, [pc, #88]	; (800646c <MX_USART2_UART_Init+0x90>)
 8006414:	2200      	movs	r2, #0
 8006416:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006418:	4b14      	ldr	r3, [pc, #80]	; (800646c <MX_USART2_UART_Init+0x90>)
 800641a:	2200      	movs	r2, #0
 800641c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800641e:	4b13      	ldr	r3, [pc, #76]	; (800646c <MX_USART2_UART_Init+0x90>)
 8006420:	2200      	movs	r2, #0
 8006422:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006424:	4811      	ldr	r0, [pc, #68]	; (800646c <MX_USART2_UART_Init+0x90>)
 8006426:	f008 f9d7 	bl	800e7d8 <HAL_UART_Init>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006430:	f7fe fbfc 	bl	8004c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006434:	2100      	movs	r1, #0
 8006436:	480d      	ldr	r0, [pc, #52]	; (800646c <MX_USART2_UART_Init+0x90>)
 8006438:	f00a fa69 	bl	801090e <HAL_UARTEx_SetTxFifoThreshold>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8006442:	f7fe fbf3 	bl	8004c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006446:	2100      	movs	r1, #0
 8006448:	4808      	ldr	r0, [pc, #32]	; (800646c <MX_USART2_UART_Init+0x90>)
 800644a:	f00a fa9e 	bl	801098a <HAL_UARTEx_SetRxFifoThreshold>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006454:	f7fe fbea 	bl	8004c2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006458:	4804      	ldr	r0, [pc, #16]	; (800646c <MX_USART2_UART_Init+0x90>)
 800645a:	f00a fa1f 	bl	801089c <HAL_UARTEx_DisableFifoMode>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006464:	f7fe fbe2 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006468:	bf00      	nop
 800646a:	bd80      	pop	{r7, pc}
 800646c:	240015e8 	.word	0x240015e8
 8006470:	40004400 	.word	0x40004400

08006474 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006478:	4b22      	ldr	r3, [pc, #136]	; (8006504 <MX_USART3_UART_Init+0x90>)
 800647a:	4a23      	ldr	r2, [pc, #140]	; (8006508 <MX_USART3_UART_Init+0x94>)
 800647c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800647e:	4b21      	ldr	r3, [pc, #132]	; (8006504 <MX_USART3_UART_Init+0x90>)
 8006480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006484:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006486:	4b1f      	ldr	r3, [pc, #124]	; (8006504 <MX_USART3_UART_Init+0x90>)
 8006488:	2200      	movs	r2, #0
 800648a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800648c:	4b1d      	ldr	r3, [pc, #116]	; (8006504 <MX_USART3_UART_Init+0x90>)
 800648e:	2200      	movs	r2, #0
 8006490:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006492:	4b1c      	ldr	r3, [pc, #112]	; (8006504 <MX_USART3_UART_Init+0x90>)
 8006494:	2200      	movs	r2, #0
 8006496:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006498:	4b1a      	ldr	r3, [pc, #104]	; (8006504 <MX_USART3_UART_Init+0x90>)
 800649a:	220c      	movs	r2, #12
 800649c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800649e:	4b19      	ldr	r3, [pc, #100]	; (8006504 <MX_USART3_UART_Init+0x90>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80064a4:	4b17      	ldr	r3, [pc, #92]	; (8006504 <MX_USART3_UART_Init+0x90>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80064aa:	4b16      	ldr	r3, [pc, #88]	; (8006504 <MX_USART3_UART_Init+0x90>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80064b0:	4b14      	ldr	r3, [pc, #80]	; (8006504 <MX_USART3_UART_Init+0x90>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80064b6:	4b13      	ldr	r3, [pc, #76]	; (8006504 <MX_USART3_UART_Init+0x90>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80064bc:	4811      	ldr	r0, [pc, #68]	; (8006504 <MX_USART3_UART_Init+0x90>)
 80064be:	f008 f98b 	bl	800e7d8 <HAL_UART_Init>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80064c8:	f7fe fbb0 	bl	8004c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80064cc:	2100      	movs	r1, #0
 80064ce:	480d      	ldr	r0, [pc, #52]	; (8006504 <MX_USART3_UART_Init+0x90>)
 80064d0:	f00a fa1d 	bl	801090e <HAL_UARTEx_SetTxFifoThreshold>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80064da:	f7fe fba7 	bl	8004c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80064de:	2100      	movs	r1, #0
 80064e0:	4808      	ldr	r0, [pc, #32]	; (8006504 <MX_USART3_UART_Init+0x90>)
 80064e2:	f00a fa52 	bl	801098a <HAL_UARTEx_SetRxFifoThreshold>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80064ec:	f7fe fb9e 	bl	8004c2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80064f0:	4804      	ldr	r0, [pc, #16]	; (8006504 <MX_USART3_UART_Init+0x90>)
 80064f2:	f00a f9d3 	bl	801089c <HAL_UARTEx_DisableFifoMode>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80064fc:	f7fe fb96 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006500:	bf00      	nop
 8006502:	bd80      	pop	{r7, pc}
 8006504:	24001360 	.word	0x24001360
 8006508:	40004800 	.word	0x40004800

0800650c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b0be      	sub	sp, #248	; 0xf8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006514:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006518:	2200      	movs	r2, #0
 800651a:	601a      	str	r2, [r3, #0]
 800651c:	605a      	str	r2, [r3, #4]
 800651e:	609a      	str	r2, [r3, #8]
 8006520:	60da      	str	r2, [r3, #12]
 8006522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006524:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006528:	22bc      	movs	r2, #188	; 0xbc
 800652a:	2100      	movs	r1, #0
 800652c:	4618      	mov	r0, r3
 800652e:	f00b fe77 	bl	8012220 <memset>
  if(uartHandle->Instance==UART4)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4aa1      	ldr	r2, [pc, #644]	; (80067bc <HAL_UART_MspInit+0x2b0>)
 8006538:	4293      	cmp	r3, r2
 800653a:	f040 80b7 	bne.w	80066ac <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800653e:	2302      	movs	r3, #2
 8006540:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006542:	2300      	movs	r3, #0
 8006544:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006548:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800654c:	4618      	mov	r0, r3
 800654e:	f004 fedf 	bl	800b310 <HAL_RCCEx_PeriphCLKConfig>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8006558:	f7fe fb68 	bl	8004c2c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800655c:	4b98      	ldr	r3, [pc, #608]	; (80067c0 <HAL_UART_MspInit+0x2b4>)
 800655e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006562:	4a97      	ldr	r2, [pc, #604]	; (80067c0 <HAL_UART_MspInit+0x2b4>)
 8006564:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006568:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800656c:	4b94      	ldr	r3, [pc, #592]	; (80067c0 <HAL_UART_MspInit+0x2b4>)
 800656e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006576:	627b      	str	r3, [r7, #36]	; 0x24
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800657a:	4b91      	ldr	r3, [pc, #580]	; (80067c0 <HAL_UART_MspInit+0x2b4>)
 800657c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006580:	4a8f      	ldr	r2, [pc, #572]	; (80067c0 <HAL_UART_MspInit+0x2b4>)
 8006582:	f043 0308 	orr.w	r3, r3, #8
 8006586:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800658a:	4b8d      	ldr	r3, [pc, #564]	; (80067c0 <HAL_UART_MspInit+0x2b4>)
 800658c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006590:	f003 0308 	and.w	r3, r3, #8
 8006594:	623b      	str	r3, [r7, #32]
 8006596:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006598:	2303      	movs	r3, #3
 800659a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800659e:	2302      	movs	r3, #2
 80065a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065a4:	2300      	movs	r3, #0
 80065a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065aa:	2300      	movs	r3, #0
 80065ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80065b0:	2308      	movs	r3, #8
 80065b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80065b6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80065ba:	4619      	mov	r1, r3
 80065bc:	4881      	ldr	r0, [pc, #516]	; (80067c4 <HAL_UART_MspInit+0x2b8>)
 80065be:	f003 fcd1 	bl	8009f64 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 80065c2:	4b81      	ldr	r3, [pc, #516]	; (80067c8 <HAL_UART_MspInit+0x2bc>)
 80065c4:	4a81      	ldr	r2, [pc, #516]	; (80067cc <HAL_UART_MspInit+0x2c0>)
 80065c6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80065c8:	4b7f      	ldr	r3, [pc, #508]	; (80067c8 <HAL_UART_MspInit+0x2bc>)
 80065ca:	223f      	movs	r2, #63	; 0x3f
 80065cc:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80065ce:	4b7e      	ldr	r3, [pc, #504]	; (80067c8 <HAL_UART_MspInit+0x2bc>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80065d4:	4b7c      	ldr	r3, [pc, #496]	; (80067c8 <HAL_UART_MspInit+0x2bc>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80065da:	4b7b      	ldr	r3, [pc, #492]	; (80067c8 <HAL_UART_MspInit+0x2bc>)
 80065dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065e0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80065e2:	4b79      	ldr	r3, [pc, #484]	; (80067c8 <HAL_UART_MspInit+0x2bc>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80065e8:	4b77      	ldr	r3, [pc, #476]	; (80067c8 <HAL_UART_MspInit+0x2bc>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80065ee:	4b76      	ldr	r3, [pc, #472]	; (80067c8 <HAL_UART_MspInit+0x2bc>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80065f4:	4b74      	ldr	r3, [pc, #464]	; (80067c8 <HAL_UART_MspInit+0x2bc>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80065fa:	4b73      	ldr	r3, [pc, #460]	; (80067c8 <HAL_UART_MspInit+0x2bc>)
 80065fc:	2204      	movs	r2, #4
 80065fe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006600:	4b71      	ldr	r3, [pc, #452]	; (80067c8 <HAL_UART_MspInit+0x2bc>)
 8006602:	2203      	movs	r2, #3
 8006604:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006606:	4b70      	ldr	r3, [pc, #448]	; (80067c8 <HAL_UART_MspInit+0x2bc>)
 8006608:	2200      	movs	r2, #0
 800660a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800660c:	4b6e      	ldr	r3, [pc, #440]	; (80067c8 <HAL_UART_MspInit+0x2bc>)
 800660e:	2200      	movs	r2, #0
 8006610:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8006612:	486d      	ldr	r0, [pc, #436]	; (80067c8 <HAL_UART_MspInit+0x2bc>)
 8006614:	f000 fe6c 	bl	80072f0 <HAL_DMA_Init>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 800661e:	f7fe fb05 	bl	8004c2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a68      	ldr	r2, [pc, #416]	; (80067c8 <HAL_UART_MspInit+0x2bc>)
 8006626:	67da      	str	r2, [r3, #124]	; 0x7c
 8006628:	4a67      	ldr	r2, [pc, #412]	; (80067c8 <HAL_UART_MspInit+0x2bc>)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800662e:	4b68      	ldr	r3, [pc, #416]	; (80067d0 <HAL_UART_MspInit+0x2c4>)
 8006630:	4a68      	ldr	r2, [pc, #416]	; (80067d4 <HAL_UART_MspInit+0x2c8>)
 8006632:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8006634:	4b66      	ldr	r3, [pc, #408]	; (80067d0 <HAL_UART_MspInit+0x2c4>)
 8006636:	2240      	movs	r2, #64	; 0x40
 8006638:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800663a:	4b65      	ldr	r3, [pc, #404]	; (80067d0 <HAL_UART_MspInit+0x2c4>)
 800663c:	2240      	movs	r2, #64	; 0x40
 800663e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006640:	4b63      	ldr	r3, [pc, #396]	; (80067d0 <HAL_UART_MspInit+0x2c4>)
 8006642:	2200      	movs	r2, #0
 8006644:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006646:	4b62      	ldr	r3, [pc, #392]	; (80067d0 <HAL_UART_MspInit+0x2c4>)
 8006648:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800664c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800664e:	4b60      	ldr	r3, [pc, #384]	; (80067d0 <HAL_UART_MspInit+0x2c4>)
 8006650:	2200      	movs	r2, #0
 8006652:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006654:	4b5e      	ldr	r3, [pc, #376]	; (80067d0 <HAL_UART_MspInit+0x2c4>)
 8006656:	2200      	movs	r2, #0
 8006658:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800665a:	4b5d      	ldr	r3, [pc, #372]	; (80067d0 <HAL_UART_MspInit+0x2c4>)
 800665c:	2200      	movs	r2, #0
 800665e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006660:	4b5b      	ldr	r3, [pc, #364]	; (80067d0 <HAL_UART_MspInit+0x2c4>)
 8006662:	2200      	movs	r2, #0
 8006664:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006666:	4b5a      	ldr	r3, [pc, #360]	; (80067d0 <HAL_UART_MspInit+0x2c4>)
 8006668:	2204      	movs	r2, #4
 800666a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800666c:	4b58      	ldr	r3, [pc, #352]	; (80067d0 <HAL_UART_MspInit+0x2c4>)
 800666e:	2203      	movs	r2, #3
 8006670:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006672:	4b57      	ldr	r3, [pc, #348]	; (80067d0 <HAL_UART_MspInit+0x2c4>)
 8006674:	2200      	movs	r2, #0
 8006676:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006678:	4b55      	ldr	r3, [pc, #340]	; (80067d0 <HAL_UART_MspInit+0x2c4>)
 800667a:	2200      	movs	r2, #0
 800667c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800667e:	4854      	ldr	r0, [pc, #336]	; (80067d0 <HAL_UART_MspInit+0x2c4>)
 8006680:	f000 fe36 	bl	80072f0 <HAL_DMA_Init>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 800668a:	f7fe facf 	bl	8004c2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a4f      	ldr	r2, [pc, #316]	; (80067d0 <HAL_UART_MspInit+0x2c4>)
 8006692:	679a      	str	r2, [r3, #120]	; 0x78
 8006694:	4a4e      	ldr	r2, [pc, #312]	; (80067d0 <HAL_UART_MspInit+0x2c4>)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800669a:	2200      	movs	r2, #0
 800669c:	2100      	movs	r1, #0
 800669e:	2034      	movs	r0, #52	; 0x34
 80066a0:	f000 fbe7 	bl	8006e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80066a4:	2034      	movs	r0, #52	; 0x34
 80066a6:	f000 fbfe 	bl	8006ea6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80066aa:	e1fe      	b.n	8006aaa <HAL_UART_MspInit+0x59e>
  else if(uartHandle->Instance==UART7)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a49      	ldr	r2, [pc, #292]	; (80067d8 <HAL_UART_MspInit+0x2cc>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	f040 8098 	bne.w	80067e8 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80066b8:	2302      	movs	r3, #2
 80066ba:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80066bc:	2300      	movs	r3, #0
 80066be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80066c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80066c6:	4618      	mov	r0, r3
 80066c8:	f004 fe22 	bl	800b310 <HAL_RCCEx_PeriphCLKConfig>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 80066d2:	f7fe faab 	bl	8004c2c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80066d6:	4b3a      	ldr	r3, [pc, #232]	; (80067c0 <HAL_UART_MspInit+0x2b4>)
 80066d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066dc:	4a38      	ldr	r2, [pc, #224]	; (80067c0 <HAL_UART_MspInit+0x2b4>)
 80066de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80066e6:	4b36      	ldr	r3, [pc, #216]	; (80067c0 <HAL_UART_MspInit+0x2b4>)
 80066e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066f0:	61fb      	str	r3, [r7, #28]
 80066f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80066f4:	4b32      	ldr	r3, [pc, #200]	; (80067c0 <HAL_UART_MspInit+0x2b4>)
 80066f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066fa:	4a31      	ldr	r2, [pc, #196]	; (80067c0 <HAL_UART_MspInit+0x2b4>)
 80066fc:	f043 0310 	orr.w	r3, r3, #16
 8006700:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006704:	4b2e      	ldr	r3, [pc, #184]	; (80067c0 <HAL_UART_MspInit+0x2b4>)
 8006706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800670a:	f003 0310 	and.w	r3, r3, #16
 800670e:	61bb      	str	r3, [r7, #24]
 8006710:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006712:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006716:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800671a:	2302      	movs	r3, #2
 800671c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006720:	2300      	movs	r3, #0
 8006722:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006726:	2300      	movs	r3, #0
 8006728:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800672c:	2307      	movs	r3, #7
 800672e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006732:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006736:	4619      	mov	r1, r3
 8006738:	4828      	ldr	r0, [pc, #160]	; (80067dc <HAL_UART_MspInit+0x2d0>)
 800673a:	f003 fc13 	bl	8009f64 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 800673e:	4b28      	ldr	r3, [pc, #160]	; (80067e0 <HAL_UART_MspInit+0x2d4>)
 8006740:	4a28      	ldr	r2, [pc, #160]	; (80067e4 <HAL_UART_MspInit+0x2d8>)
 8006742:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8006744:	4b26      	ldr	r3, [pc, #152]	; (80067e0 <HAL_UART_MspInit+0x2d4>)
 8006746:	2250      	movs	r2, #80	; 0x50
 8006748:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800674a:	4b25      	ldr	r3, [pc, #148]	; (80067e0 <HAL_UART_MspInit+0x2d4>)
 800674c:	2240      	movs	r2, #64	; 0x40
 800674e:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006750:	4b23      	ldr	r3, [pc, #140]	; (80067e0 <HAL_UART_MspInit+0x2d4>)
 8006752:	2200      	movs	r2, #0
 8006754:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006756:	4b22      	ldr	r3, [pc, #136]	; (80067e0 <HAL_UART_MspInit+0x2d4>)
 8006758:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800675c:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800675e:	4b20      	ldr	r3, [pc, #128]	; (80067e0 <HAL_UART_MspInit+0x2d4>)
 8006760:	2200      	movs	r2, #0
 8006762:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006764:	4b1e      	ldr	r3, [pc, #120]	; (80067e0 <HAL_UART_MspInit+0x2d4>)
 8006766:	2200      	movs	r2, #0
 8006768:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 800676a:	4b1d      	ldr	r3, [pc, #116]	; (80067e0 <HAL_UART_MspInit+0x2d4>)
 800676c:	2200      	movs	r2, #0
 800676e:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006770:	4b1b      	ldr	r3, [pc, #108]	; (80067e0 <HAL_UART_MspInit+0x2d4>)
 8006772:	2200      	movs	r2, #0
 8006774:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006776:	4b1a      	ldr	r3, [pc, #104]	; (80067e0 <HAL_UART_MspInit+0x2d4>)
 8006778:	2204      	movs	r2, #4
 800677a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800677c:	4b18      	ldr	r3, [pc, #96]	; (80067e0 <HAL_UART_MspInit+0x2d4>)
 800677e:	2203      	movs	r2, #3
 8006780:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006782:	4b17      	ldr	r3, [pc, #92]	; (80067e0 <HAL_UART_MspInit+0x2d4>)
 8006784:	2200      	movs	r2, #0
 8006786:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006788:	4b15      	ldr	r3, [pc, #84]	; (80067e0 <HAL_UART_MspInit+0x2d4>)
 800678a:	2200      	movs	r2, #0
 800678c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 800678e:	4814      	ldr	r0, [pc, #80]	; (80067e0 <HAL_UART_MspInit+0x2d4>)
 8006790:	f000 fdae 	bl	80072f0 <HAL_DMA_Init>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <HAL_UART_MspInit+0x292>
      Error_Handler();
 800679a:	f7fe fa47 	bl	8004c2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a0f      	ldr	r2, [pc, #60]	; (80067e0 <HAL_UART_MspInit+0x2d4>)
 80067a2:	679a      	str	r2, [r3, #120]	; 0x78
 80067a4:	4a0e      	ldr	r2, [pc, #56]	; (80067e0 <HAL_UART_MspInit+0x2d4>)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80067aa:	2200      	movs	r2, #0
 80067ac:	2100      	movs	r1, #0
 80067ae:	2052      	movs	r0, #82	; 0x52
 80067b0:	f000 fb5f 	bl	8006e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80067b4:	2052      	movs	r0, #82	; 0x52
 80067b6:	f000 fb76 	bl	8006ea6 <HAL_NVIC_EnableIRQ>
}
 80067ba:	e176      	b.n	8006aaa <HAL_UART_MspInit+0x59e>
 80067bc:	40004c00 	.word	0x40004c00
 80067c0:	58024400 	.word	0x58024400
 80067c4:	58020c00 	.word	0x58020c00
 80067c8:	24001168 	.word	0x24001168
 80067cc:	40020058 	.word	0x40020058
 80067d0:	24001678 	.word	0x24001678
 80067d4:	40020070 	.word	0x40020070
 80067d8:	40007800 	.word	0x40007800
 80067dc:	58021000 	.word	0x58021000
 80067e0:	24001468 	.word	0x24001468
 80067e4:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART2)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4ab1      	ldr	r2, [pc, #708]	; (8006ab4 <HAL_UART_MspInit+0x5a8>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	f040 80a5 	bne.w	800693e <HAL_UART_MspInit+0x432>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80067f4:	2302      	movs	r3, #2
 80067f6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80067f8:	2300      	movs	r3, #0
 80067fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80067fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006802:	4618      	mov	r0, r3
 8006804:	f004 fd84 	bl	800b310 <HAL_RCCEx_PeriphCLKConfig>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <HAL_UART_MspInit+0x306>
      Error_Handler();
 800680e:	f7fe fa0d 	bl	8004c2c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006812:	4ba9      	ldr	r3, [pc, #676]	; (8006ab8 <HAL_UART_MspInit+0x5ac>)
 8006814:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006818:	4aa7      	ldr	r2, [pc, #668]	; (8006ab8 <HAL_UART_MspInit+0x5ac>)
 800681a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800681e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006822:	4ba5      	ldr	r3, [pc, #660]	; (8006ab8 <HAL_UART_MspInit+0x5ac>)
 8006824:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682c:	617b      	str	r3, [r7, #20]
 800682e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006830:	4ba1      	ldr	r3, [pc, #644]	; (8006ab8 <HAL_UART_MspInit+0x5ac>)
 8006832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006836:	4aa0      	ldr	r2, [pc, #640]	; (8006ab8 <HAL_UART_MspInit+0x5ac>)
 8006838:	f043 0308 	orr.w	r3, r3, #8
 800683c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006840:	4b9d      	ldr	r3, [pc, #628]	; (8006ab8 <HAL_UART_MspInit+0x5ac>)
 8006842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006846:	f003 0308 	and.w	r3, r3, #8
 800684a:	613b      	str	r3, [r7, #16]
 800684c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800684e:	2360      	movs	r3, #96	; 0x60
 8006850:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006854:	2302      	movs	r3, #2
 8006856:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800685a:	2300      	movs	r3, #0
 800685c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006860:	2300      	movs	r3, #0
 8006862:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006866:	2307      	movs	r3, #7
 8006868:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800686c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006870:	4619      	mov	r1, r3
 8006872:	4892      	ldr	r0, [pc, #584]	; (8006abc <HAL_UART_MspInit+0x5b0>)
 8006874:	f003 fb76 	bl	8009f64 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006878:	4b91      	ldr	r3, [pc, #580]	; (8006ac0 <HAL_UART_MspInit+0x5b4>)
 800687a:	4a92      	ldr	r2, [pc, #584]	; (8006ac4 <HAL_UART_MspInit+0x5b8>)
 800687c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800687e:	4b90      	ldr	r3, [pc, #576]	; (8006ac0 <HAL_UART_MspInit+0x5b4>)
 8006880:	222b      	movs	r2, #43	; 0x2b
 8006882:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006884:	4b8e      	ldr	r3, [pc, #568]	; (8006ac0 <HAL_UART_MspInit+0x5b4>)
 8006886:	2200      	movs	r2, #0
 8006888:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800688a:	4b8d      	ldr	r3, [pc, #564]	; (8006ac0 <HAL_UART_MspInit+0x5b4>)
 800688c:	2200      	movs	r2, #0
 800688e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006890:	4b8b      	ldr	r3, [pc, #556]	; (8006ac0 <HAL_UART_MspInit+0x5b4>)
 8006892:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006896:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006898:	4b89      	ldr	r3, [pc, #548]	; (8006ac0 <HAL_UART_MspInit+0x5b4>)
 800689a:	2200      	movs	r2, #0
 800689c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800689e:	4b88      	ldr	r3, [pc, #544]	; (8006ac0 <HAL_UART_MspInit+0x5b4>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80068a4:	4b86      	ldr	r3, [pc, #536]	; (8006ac0 <HAL_UART_MspInit+0x5b4>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80068aa:	4b85      	ldr	r3, [pc, #532]	; (8006ac0 <HAL_UART_MspInit+0x5b4>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80068b0:	4b83      	ldr	r3, [pc, #524]	; (8006ac0 <HAL_UART_MspInit+0x5b4>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80068b6:	4882      	ldr	r0, [pc, #520]	; (8006ac0 <HAL_UART_MspInit+0x5b4>)
 80068b8:	f000 fd1a 	bl	80072f0 <HAL_DMA_Init>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 80068c2:	f7fe f9b3 	bl	8004c2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a7d      	ldr	r2, [pc, #500]	; (8006ac0 <HAL_UART_MspInit+0x5b4>)
 80068ca:	67da      	str	r2, [r3, #124]	; 0x7c
 80068cc:	4a7c      	ldr	r2, [pc, #496]	; (8006ac0 <HAL_UART_MspInit+0x5b4>)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80068d2:	4b7d      	ldr	r3, [pc, #500]	; (8006ac8 <HAL_UART_MspInit+0x5bc>)
 80068d4:	4a7d      	ldr	r2, [pc, #500]	; (8006acc <HAL_UART_MspInit+0x5c0>)
 80068d6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80068d8:	4b7b      	ldr	r3, [pc, #492]	; (8006ac8 <HAL_UART_MspInit+0x5bc>)
 80068da:	222c      	movs	r2, #44	; 0x2c
 80068dc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80068de:	4b7a      	ldr	r3, [pc, #488]	; (8006ac8 <HAL_UART_MspInit+0x5bc>)
 80068e0:	2240      	movs	r2, #64	; 0x40
 80068e2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80068e4:	4b78      	ldr	r3, [pc, #480]	; (8006ac8 <HAL_UART_MspInit+0x5bc>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80068ea:	4b77      	ldr	r3, [pc, #476]	; (8006ac8 <HAL_UART_MspInit+0x5bc>)
 80068ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068f0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80068f2:	4b75      	ldr	r3, [pc, #468]	; (8006ac8 <HAL_UART_MspInit+0x5bc>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80068f8:	4b73      	ldr	r3, [pc, #460]	; (8006ac8 <HAL_UART_MspInit+0x5bc>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80068fe:	4b72      	ldr	r3, [pc, #456]	; (8006ac8 <HAL_UART_MspInit+0x5bc>)
 8006900:	2200      	movs	r2, #0
 8006902:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006904:	4b70      	ldr	r3, [pc, #448]	; (8006ac8 <HAL_UART_MspInit+0x5bc>)
 8006906:	2200      	movs	r2, #0
 8006908:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800690a:	4b6f      	ldr	r3, [pc, #444]	; (8006ac8 <HAL_UART_MspInit+0x5bc>)
 800690c:	2200      	movs	r2, #0
 800690e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006910:	486d      	ldr	r0, [pc, #436]	; (8006ac8 <HAL_UART_MspInit+0x5bc>)
 8006912:	f000 fced 	bl	80072f0 <HAL_DMA_Init>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <HAL_UART_MspInit+0x414>
      Error_Handler();
 800691c:	f7fe f986 	bl	8004c2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a69      	ldr	r2, [pc, #420]	; (8006ac8 <HAL_UART_MspInit+0x5bc>)
 8006924:	679a      	str	r2, [r3, #120]	; 0x78
 8006926:	4a68      	ldr	r2, [pc, #416]	; (8006ac8 <HAL_UART_MspInit+0x5bc>)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800692c:	2200      	movs	r2, #0
 800692e:	2100      	movs	r1, #0
 8006930:	2026      	movs	r0, #38	; 0x26
 8006932:	f000 fa9e 	bl	8006e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006936:	2026      	movs	r0, #38	; 0x26
 8006938:	f000 fab5 	bl	8006ea6 <HAL_NVIC_EnableIRQ>
}
 800693c:	e0b5      	b.n	8006aaa <HAL_UART_MspInit+0x59e>
  else if(uartHandle->Instance==USART3)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a63      	ldr	r2, [pc, #396]	; (8006ad0 <HAL_UART_MspInit+0x5c4>)
 8006944:	4293      	cmp	r3, r2
 8006946:	f040 80b0 	bne.w	8006aaa <HAL_UART_MspInit+0x59e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800694a:	2302      	movs	r3, #2
 800694c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800694e:	2300      	movs	r3, #0
 8006950:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006954:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006958:	4618      	mov	r0, r3
 800695a:	f004 fcd9 	bl	800b310 <HAL_RCCEx_PeriphCLKConfig>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <HAL_UART_MspInit+0x45c>
      Error_Handler();
 8006964:	f7fe f962 	bl	8004c2c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006968:	4b53      	ldr	r3, [pc, #332]	; (8006ab8 <HAL_UART_MspInit+0x5ac>)
 800696a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800696e:	4a52      	ldr	r2, [pc, #328]	; (8006ab8 <HAL_UART_MspInit+0x5ac>)
 8006970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006974:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006978:	4b4f      	ldr	r3, [pc, #316]	; (8006ab8 <HAL_UART_MspInit+0x5ac>)
 800697a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800697e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006986:	4b4c      	ldr	r3, [pc, #304]	; (8006ab8 <HAL_UART_MspInit+0x5ac>)
 8006988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800698c:	4a4a      	ldr	r2, [pc, #296]	; (8006ab8 <HAL_UART_MspInit+0x5ac>)
 800698e:	f043 0308 	orr.w	r3, r3, #8
 8006992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006996:	4b48      	ldr	r3, [pc, #288]	; (8006ab8 <HAL_UART_MspInit+0x5ac>)
 8006998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800699c:	f003 0308 	and.w	r3, r3, #8
 80069a0:	60bb      	str	r3, [r7, #8]
 80069a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80069a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80069a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ac:	2302      	movs	r3, #2
 80069ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069b2:	2300      	movs	r3, #0
 80069b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069b8:	2300      	movs	r3, #0
 80069ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80069be:	2307      	movs	r3, #7
 80069c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80069c8:	4619      	mov	r1, r3
 80069ca:	483c      	ldr	r0, [pc, #240]	; (8006abc <HAL_UART_MspInit+0x5b0>)
 80069cc:	f003 faca 	bl	8009f64 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80069d0:	4b40      	ldr	r3, [pc, #256]	; (8006ad4 <HAL_UART_MspInit+0x5c8>)
 80069d2:	4a41      	ldr	r2, [pc, #260]	; (8006ad8 <HAL_UART_MspInit+0x5cc>)
 80069d4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80069d6:	4b3f      	ldr	r3, [pc, #252]	; (8006ad4 <HAL_UART_MspInit+0x5c8>)
 80069d8:	222d      	movs	r2, #45	; 0x2d
 80069da:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80069dc:	4b3d      	ldr	r3, [pc, #244]	; (8006ad4 <HAL_UART_MspInit+0x5c8>)
 80069de:	2200      	movs	r2, #0
 80069e0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069e2:	4b3c      	ldr	r3, [pc, #240]	; (8006ad4 <HAL_UART_MspInit+0x5c8>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80069e8:	4b3a      	ldr	r3, [pc, #232]	; (8006ad4 <HAL_UART_MspInit+0x5c8>)
 80069ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069ee:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80069f0:	4b38      	ldr	r3, [pc, #224]	; (8006ad4 <HAL_UART_MspInit+0x5c8>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80069f6:	4b37      	ldr	r3, [pc, #220]	; (8006ad4 <HAL_UART_MspInit+0x5c8>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80069fc:	4b35      	ldr	r3, [pc, #212]	; (8006ad4 <HAL_UART_MspInit+0x5c8>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006a02:	4b34      	ldr	r3, [pc, #208]	; (8006ad4 <HAL_UART_MspInit+0x5c8>)
 8006a04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006a08:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006a0a:	4b32      	ldr	r3, [pc, #200]	; (8006ad4 <HAL_UART_MspInit+0x5c8>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006a10:	4830      	ldr	r0, [pc, #192]	; (8006ad4 <HAL_UART_MspInit+0x5c8>)
 8006a12:	f000 fc6d 	bl	80072f0 <HAL_DMA_Init>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <HAL_UART_MspInit+0x514>
      Error_Handler();
 8006a1c:	f7fe f906 	bl	8004c2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a2c      	ldr	r2, [pc, #176]	; (8006ad4 <HAL_UART_MspInit+0x5c8>)
 8006a24:	67da      	str	r2, [r3, #124]	; 0x7c
 8006a26:	4a2b      	ldr	r2, [pc, #172]	; (8006ad4 <HAL_UART_MspInit+0x5c8>)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8006a2c:	4b2b      	ldr	r3, [pc, #172]	; (8006adc <HAL_UART_MspInit+0x5d0>)
 8006a2e:	4a2c      	ldr	r2, [pc, #176]	; (8006ae0 <HAL_UART_MspInit+0x5d4>)
 8006a30:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8006a32:	4b2a      	ldr	r3, [pc, #168]	; (8006adc <HAL_UART_MspInit+0x5d0>)
 8006a34:	222e      	movs	r2, #46	; 0x2e
 8006a36:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a38:	4b28      	ldr	r3, [pc, #160]	; (8006adc <HAL_UART_MspInit+0x5d0>)
 8006a3a:	2240      	movs	r2, #64	; 0x40
 8006a3c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a3e:	4b27      	ldr	r3, [pc, #156]	; (8006adc <HAL_UART_MspInit+0x5d0>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006a44:	4b25      	ldr	r3, [pc, #148]	; (8006adc <HAL_UART_MspInit+0x5d0>)
 8006a46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a4a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a4c:	4b23      	ldr	r3, [pc, #140]	; (8006adc <HAL_UART_MspInit+0x5d0>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a52:	4b22      	ldr	r3, [pc, #136]	; (8006adc <HAL_UART_MspInit+0x5d0>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006a58:	4b20      	ldr	r3, [pc, #128]	; (8006adc <HAL_UART_MspInit+0x5d0>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006a5e:	4b1f      	ldr	r3, [pc, #124]	; (8006adc <HAL_UART_MspInit+0x5d0>)
 8006a60:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006a64:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006a66:	4b1d      	ldr	r3, [pc, #116]	; (8006adc <HAL_UART_MspInit+0x5d0>)
 8006a68:	2204      	movs	r2, #4
 8006a6a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006a6c:	4b1b      	ldr	r3, [pc, #108]	; (8006adc <HAL_UART_MspInit+0x5d0>)
 8006a6e:	2203      	movs	r2, #3
 8006a70:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006a72:	4b1a      	ldr	r3, [pc, #104]	; (8006adc <HAL_UART_MspInit+0x5d0>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006a78:	4b18      	ldr	r3, [pc, #96]	; (8006adc <HAL_UART_MspInit+0x5d0>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006a7e:	4817      	ldr	r0, [pc, #92]	; (8006adc <HAL_UART_MspInit+0x5d0>)
 8006a80:	f000 fc36 	bl	80072f0 <HAL_DMA_Init>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <HAL_UART_MspInit+0x582>
      Error_Handler();
 8006a8a:	f7fe f8cf 	bl	8004c2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a12      	ldr	r2, [pc, #72]	; (8006adc <HAL_UART_MspInit+0x5d0>)
 8006a92:	679a      	str	r2, [r3, #120]	; 0x78
 8006a94:	4a11      	ldr	r2, [pc, #68]	; (8006adc <HAL_UART_MspInit+0x5d0>)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	2027      	movs	r0, #39	; 0x27
 8006aa0:	f000 f9e7 	bl	8006e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006aa4:	2027      	movs	r0, #39	; 0x27
 8006aa6:	f000 f9fe 	bl	8006ea6 <HAL_NVIC_EnableIRQ>
}
 8006aaa:	bf00      	nop
 8006aac:	37f8      	adds	r7, #248	; 0xf8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	40004400 	.word	0x40004400
 8006ab8:	58024400 	.word	0x58024400
 8006abc:	58020c00 	.word	0x58020c00
 8006ac0:	240011e0 	.word	0x240011e0
 8006ac4:	40020088 	.word	0x40020088
 8006ac8:	240014e0 	.word	0x240014e0
 8006acc:	400200a0 	.word	0x400200a0
 8006ad0:	40004800 	.word	0x40004800
 8006ad4:	240012e8 	.word	0x240012e8
 8006ad8:	40020028 	.word	0x40020028
 8006adc:	240013f0 	.word	0x240013f0
 8006ae0:	40020040 	.word	0x40020040

08006ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 8006ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006ae8:	f7fe fcba 	bl	8005460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006aec:	480c      	ldr	r0, [pc, #48]	; (8006b20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006aee:	490d      	ldr	r1, [pc, #52]	; (8006b24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006af0:	4a0d      	ldr	r2, [pc, #52]	; (8006b28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006af4:	e002      	b.n	8006afc <LoopCopyDataInit>

08006af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006afa:	3304      	adds	r3, #4

08006afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b00:	d3f9      	bcc.n	8006af6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b02:	4a0a      	ldr	r2, [pc, #40]	; (8006b2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006b04:	4c0a      	ldr	r4, [pc, #40]	; (8006b30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b08:	e001      	b.n	8006b0e <LoopFillZerobss>

08006b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b0c:	3204      	adds	r2, #4

08006b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b10:	d3fb      	bcc.n	8006b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006b12:	f00b fb61 	bl	80121d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b16:	f7fd fd27 	bl	8004568 <main>
  bx  lr
 8006b1a:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8006b1c:	24001d08 	.word	0x24001d08
  ldr r0, =_sdata
 8006b20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006b24:	24000410 	.word	0x24000410
  ldr r2, =_sidata
 8006b28:	08016b0c 	.word	0x08016b0c
  ldr r2, =_sbss
 8006b2c:	24000410 	.word	0x24000410
  ldr r4, =_ebss
 8006b30:	24001704 	.word	0x24001704

08006b34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006b34:	e7fe      	b.n	8006b34 <ADC3_IRQHandler>
	...

08006b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b3e:	2003      	movs	r0, #3
 8006b40:	f000 f98c 	bl	8006e5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b44:	f004 fa0e 	bl	800af64 <HAL_RCC_GetSysClockFreq>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	4b15      	ldr	r3, [pc, #84]	; (8006ba0 <HAL_Init+0x68>)
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	0a1b      	lsrs	r3, r3, #8
 8006b50:	f003 030f 	and.w	r3, r3, #15
 8006b54:	4913      	ldr	r1, [pc, #76]	; (8006ba4 <HAL_Init+0x6c>)
 8006b56:	5ccb      	ldrb	r3, [r1, r3]
 8006b58:	f003 031f 	and.w	r3, r3, #31
 8006b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b62:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <HAL_Init+0x68>)
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	f003 030f 	and.w	r3, r3, #15
 8006b6a:	4a0e      	ldr	r2, [pc, #56]	; (8006ba4 <HAL_Init+0x6c>)
 8006b6c:	5cd3      	ldrb	r3, [r2, r3]
 8006b6e:	f003 031f 	and.w	r3, r3, #31
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	fa22 f303 	lsr.w	r3, r2, r3
 8006b78:	4a0b      	ldr	r2, [pc, #44]	; (8006ba8 <HAL_Init+0x70>)
 8006b7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b7c:	4a0b      	ldr	r2, [pc, #44]	; (8006bac <HAL_Init+0x74>)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006b82:	2000      	movs	r0, #0
 8006b84:	f000 f814 	bl	8006bb0 <HAL_InitTick>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e002      	b.n	8006b98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006b92:	f7fe fa5f 	bl	8005054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	58024400 	.word	0x58024400
 8006ba4:	08014c04 	.word	0x08014c04
 8006ba8:	24000234 	.word	0x24000234
 8006bac:	24000230 	.word	0x24000230

08006bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006bb8:	4b15      	ldr	r3, [pc, #84]	; (8006c10 <HAL_InitTick+0x60>)
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e021      	b.n	8006c08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006bc4:	4b13      	ldr	r3, [pc, #76]	; (8006c14 <HAL_InitTick+0x64>)
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	4b11      	ldr	r3, [pc, #68]	; (8006c10 <HAL_InitTick+0x60>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	4619      	mov	r1, r3
 8006bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 f971 	bl	8006ec2 <HAL_SYSTICK_Config>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d001      	beq.n	8006bea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e00e      	b.n	8006c08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b0f      	cmp	r3, #15
 8006bee:	d80a      	bhi.n	8006c06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	6879      	ldr	r1, [r7, #4]
 8006bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf8:	f000 f93b 	bl	8006e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006bfc:	4a06      	ldr	r2, [pc, #24]	; (8006c18 <HAL_InitTick+0x68>)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
 8006c04:	e000      	b.n	8006c08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	2400023c 	.word	0x2400023c
 8006c14:	24000230 	.word	0x24000230
 8006c18:	24000238 	.word	0x24000238

08006c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006c20:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <HAL_IncTick+0x20>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	461a      	mov	r2, r3
 8006c26:	4b06      	ldr	r3, [pc, #24]	; (8006c40 <HAL_IncTick+0x24>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	4a04      	ldr	r2, [pc, #16]	; (8006c40 <HAL_IncTick+0x24>)
 8006c2e:	6013      	str	r3, [r2, #0]
}
 8006c30:	bf00      	nop
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	2400023c 	.word	0x2400023c
 8006c40:	240016f0 	.word	0x240016f0

08006c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c44:	b480      	push	{r7}
 8006c46:	af00      	add	r7, sp, #0
  return uwTick;
 8006c48:	4b03      	ldr	r3, [pc, #12]	; (8006c58 <HAL_GetTick+0x14>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	240016f0 	.word	0x240016f0

08006c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c64:	f7ff ffee 	bl	8006c44 <HAL_GetTick>
 8006c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c74:	d005      	beq.n	8006c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c76:	4b0a      	ldr	r3, [pc, #40]	; (8006ca0 <HAL_Delay+0x44>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4413      	add	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006c82:	bf00      	nop
 8006c84:	f7ff ffde 	bl	8006c44 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d8f7      	bhi.n	8006c84 <HAL_Delay+0x28>
  {
  }
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	2400023c 	.word	0x2400023c

08006ca4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006ca8:	4b03      	ldr	r3, [pc, #12]	; (8006cb8 <HAL_GetREVID+0x14>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	0c1b      	lsrs	r3, r3, #16
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	5c001000 	.word	0x5c001000

08006cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f003 0307 	and.w	r3, r3, #7
 8006cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ccc:	4b0b      	ldr	r3, [pc, #44]	; (8006cfc <__NVIC_SetPriorityGrouping+0x40>)
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006cd8:	4013      	ands	r3, r2
 8006cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006ce4:	4b06      	ldr	r3, [pc, #24]	; (8006d00 <__NVIC_SetPriorityGrouping+0x44>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006cea:	4a04      	ldr	r2, [pc, #16]	; (8006cfc <__NVIC_SetPriorityGrouping+0x40>)
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	60d3      	str	r3, [r2, #12]
}
 8006cf0:	bf00      	nop
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	e000ed00 	.word	0xe000ed00
 8006d00:	05fa0000 	.word	0x05fa0000

08006d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d04:	b480      	push	{r7}
 8006d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d08:	4b04      	ldr	r3, [pc, #16]	; (8006d1c <__NVIC_GetPriorityGrouping+0x18>)
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	0a1b      	lsrs	r3, r3, #8
 8006d0e:	f003 0307 	and.w	r3, r3, #7
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr
 8006d1c:	e000ed00 	.word	0xe000ed00

08006d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	4603      	mov	r3, r0
 8006d28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	db0b      	blt.n	8006d4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d32:	88fb      	ldrh	r3, [r7, #6]
 8006d34:	f003 021f 	and.w	r2, r3, #31
 8006d38:	4907      	ldr	r1, [pc, #28]	; (8006d58 <__NVIC_EnableIRQ+0x38>)
 8006d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d3e:	095b      	lsrs	r3, r3, #5
 8006d40:	2001      	movs	r0, #1
 8006d42:	fa00 f202 	lsl.w	r2, r0, r2
 8006d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	e000e100 	.word	0xe000e100

08006d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	4603      	mov	r3, r0
 8006d64:	6039      	str	r1, [r7, #0]
 8006d66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006d68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	db0a      	blt.n	8006d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	490c      	ldr	r1, [pc, #48]	; (8006da8 <__NVIC_SetPriority+0x4c>)
 8006d76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d7a:	0112      	lsls	r2, r2, #4
 8006d7c:	b2d2      	uxtb	r2, r2
 8006d7e:	440b      	add	r3, r1
 8006d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d84:	e00a      	b.n	8006d9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	4908      	ldr	r1, [pc, #32]	; (8006dac <__NVIC_SetPriority+0x50>)
 8006d8c:	88fb      	ldrh	r3, [r7, #6]
 8006d8e:	f003 030f 	and.w	r3, r3, #15
 8006d92:	3b04      	subs	r3, #4
 8006d94:	0112      	lsls	r2, r2, #4
 8006d96:	b2d2      	uxtb	r2, r2
 8006d98:	440b      	add	r3, r1
 8006d9a:	761a      	strb	r2, [r3, #24]
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	e000e100 	.word	0xe000e100
 8006dac:	e000ed00 	.word	0xe000ed00

08006db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b089      	sub	sp, #36	; 0x24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f003 0307 	and.w	r3, r3, #7
 8006dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	f1c3 0307 	rsb	r3, r3, #7
 8006dca:	2b04      	cmp	r3, #4
 8006dcc:	bf28      	it	cs
 8006dce:	2304      	movcs	r3, #4
 8006dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	2b06      	cmp	r3, #6
 8006dd8:	d902      	bls.n	8006de0 <NVIC_EncodePriority+0x30>
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	3b03      	subs	r3, #3
 8006dde:	e000      	b.n	8006de2 <NVIC_EncodePriority+0x32>
 8006de0:	2300      	movs	r3, #0
 8006de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006de4:	f04f 32ff 	mov.w	r2, #4294967295
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	fa02 f303 	lsl.w	r3, r2, r3
 8006dee:	43da      	mvns	r2, r3
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	401a      	ands	r2, r3
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006df8:	f04f 31ff 	mov.w	r1, #4294967295
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8006e02:	43d9      	mvns	r1, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e08:	4313      	orrs	r3, r2
         );
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3724      	adds	r7, #36	; 0x24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
	...

08006e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e28:	d301      	bcc.n	8006e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e00f      	b.n	8006e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e2e:	4a0a      	ldr	r2, [pc, #40]	; (8006e58 <SysTick_Config+0x40>)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e36:	210f      	movs	r1, #15
 8006e38:	f04f 30ff 	mov.w	r0, #4294967295
 8006e3c:	f7ff ff8e 	bl	8006d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e40:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <SysTick_Config+0x40>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e46:	4b04      	ldr	r3, [pc, #16]	; (8006e58 <SysTick_Config+0x40>)
 8006e48:	2207      	movs	r2, #7
 8006e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	e000e010 	.word	0xe000e010

08006e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff ff29 	bl	8006cbc <__NVIC_SetPriorityGrouping>
}
 8006e6a:	bf00      	nop
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b086      	sub	sp, #24
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	4603      	mov	r3, r0
 8006e7a:	60b9      	str	r1, [r7, #8]
 8006e7c:	607a      	str	r2, [r7, #4]
 8006e7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006e80:	f7ff ff40 	bl	8006d04 <__NVIC_GetPriorityGrouping>
 8006e84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	6978      	ldr	r0, [r7, #20]
 8006e8c:	f7ff ff90 	bl	8006db0 <NVIC_EncodePriority>
 8006e90:	4602      	mov	r2, r0
 8006e92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e96:	4611      	mov	r1, r2
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7ff ff5f 	bl	8006d5c <__NVIC_SetPriority>
}
 8006e9e:	bf00      	nop
 8006ea0:	3718      	adds	r7, #24
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b082      	sub	sp, #8
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	4603      	mov	r3, r0
 8006eae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006eb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7ff ff33 	bl	8006d20 <__NVIC_EnableIRQ>
}
 8006eba:	bf00      	nop
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7ff ffa4 	bl	8006e18 <SysTick_Config>
 8006ed0:	4603      	mov	r3, r0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8006ede:	f000 f802 	bl	8006ee6 <HAL_SYSTICK_Callback>
}
 8006ee2:	bf00      	nop
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8006eea:	bf00      	nop
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e054      	b.n	8006fb0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	7f5b      	ldrb	r3, [r3, #29]
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d105      	bne.n	8006f1c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7fb fa38 	bl	800238c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2202      	movs	r2, #2
 8006f20:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	791b      	ldrb	r3, [r3, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10c      	bne.n	8006f44 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a22      	ldr	r2, [pc, #136]	; (8006fb8 <HAL_CRC_Init+0xc4>)
 8006f30:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	689a      	ldr	r2, [r3, #8]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0218 	bic.w	r2, r2, #24
 8006f40:	609a      	str	r2, [r3, #8]
 8006f42:	e00c      	b.n	8006f5e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6899      	ldr	r1, [r3, #8]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f948 	bl	80071e4 <HAL_CRCEx_Polynomial_Set>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e028      	b.n	8006fb0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	795b      	ldrb	r3, [r3, #5]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d105      	bne.n	8006f72 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f6e:	611a      	str	r2, [r3, #16]
 8006f70:	e004      	b.n	8006f7c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	6912      	ldr	r2, [r2, #16]
 8006f7a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	695a      	ldr	r2, [r3, #20]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	699a      	ldr	r2, [r3, #24]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	430a      	orrs	r2, r1
 8006fa6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	04c11db7 	.word	0x04c11db7

08006fbc <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8006fc8:	2300      	movs	r3, #0
 8006fca:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2202      	movs	r2, #2
 8006fd0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	689a      	ldr	r2, [r3, #8]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f042 0201 	orr.w	r2, r2, #1
 8006fe0:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d006      	beq.n	8006ff8 <HAL_CRC_Calculate+0x3c>
 8006fea:	2b03      	cmp	r3, #3
 8006fec:	d829      	bhi.n	8007042 <HAL_CRC_Calculate+0x86>
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d019      	beq.n	8007026 <HAL_CRC_Calculate+0x6a>
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d01e      	beq.n	8007034 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8006ff6:	e024      	b.n	8007042 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	e00a      	b.n	8007014 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	441a      	add	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6812      	ldr	r2, [r2, #0]
 800700c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	3301      	adds	r3, #1
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	429a      	cmp	r2, r3
 800701a:	d3f0      	bcc.n	8006ffe <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	613b      	str	r3, [r7, #16]
      break;
 8007024:	e00e      	b.n	8007044 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	68b9      	ldr	r1, [r7, #8]
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f000 f812 	bl	8007054 <CRC_Handle_8>
 8007030:	6138      	str	r0, [r7, #16]
      break;
 8007032:	e007      	b.n	8007044 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	68b9      	ldr	r1, [r7, #8]
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 f899 	bl	8007170 <CRC_Handle_16>
 800703e:	6138      	str	r0, [r7, #16]
      break;
 8007040:	e000      	b.n	8007044 <HAL_CRC_Calculate+0x88>
      break;
 8007042:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2201      	movs	r2, #1
 8007048:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800704a:	693b      	ldr	r3, [r7, #16]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8007054:	b480      	push	{r7}
 8007056:	b089      	sub	sp, #36	; 0x24
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007060:	2300      	movs	r3, #0
 8007062:	61fb      	str	r3, [r7, #28]
 8007064:	e023      	b.n	80070ae <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	4413      	add	r3, r2
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	3301      	adds	r3, #1
 8007078:	68b9      	ldr	r1, [r7, #8]
 800707a:	440b      	add	r3, r1
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007080:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	3302      	adds	r3, #2
 8007088:	68b9      	ldr	r1, [r7, #8]
 800708a:	440b      	add	r3, r1
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8007090:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	3303      	adds	r3, #3
 8007098:	68b9      	ldr	r1, [r7, #8]
 800709a:	440b      	add	r3, r1
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80070a4:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80070a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	3301      	adds	r3, #1
 80070ac:	61fb      	str	r3, [r7, #28]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	089b      	lsrs	r3, r3, #2
 80070b2:	69fa      	ldr	r2, [r7, #28]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d3d6      	bcc.n	8007066 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f003 0303 	and.w	r3, r3, #3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d04d      	beq.n	800715e <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f003 0303 	and.w	r3, r3, #3
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d107      	bne.n	80070dc <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	4413      	add	r3, r2
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	6812      	ldr	r2, [r2, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d116      	bne.n	8007114 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	4413      	add	r3, r2
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	021b      	lsls	r3, r3, #8
 80070f2:	b21a      	sxth	r2, r3
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	3301      	adds	r3, #1
 80070fa:	68b9      	ldr	r1, [r7, #8]
 80070fc:	440b      	add	r3, r1
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	b21b      	sxth	r3, r3
 8007102:	4313      	orrs	r3, r2
 8007104:	b21b      	sxth	r3, r3
 8007106:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	8b7a      	ldrh	r2, [r7, #26]
 8007112:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	2b03      	cmp	r3, #3
 800711c:	d11f      	bne.n	800715e <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	4413      	add	r3, r2
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	021b      	lsls	r3, r3, #8
 800712a:	b21a      	sxth	r2, r3
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	3301      	adds	r3, #1
 8007132:	68b9      	ldr	r1, [r7, #8]
 8007134:	440b      	add	r3, r1
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	b21b      	sxth	r3, r3
 800713a:	4313      	orrs	r3, r2
 800713c:	b21b      	sxth	r3, r3
 800713e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	8b7a      	ldrh	r2, [r7, #26]
 800714a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	3302      	adds	r3, #2
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	4413      	add	r3, r2
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	6812      	ldr	r2, [r2, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3724      	adds	r7, #36	; 0x24
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8007170:	b480      	push	{r7}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800717c:	2300      	movs	r3, #0
 800717e:	617b      	str	r3, [r7, #20]
 8007180:	e013      	b.n	80071aa <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	4413      	add	r3, r2
 800718a:	881b      	ldrh	r3, [r3, #0]
 800718c:	041a      	lsls	r2, r3, #16
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	3302      	adds	r3, #2
 8007194:	68b9      	ldr	r1, [r7, #8]
 8007196:	440b      	add	r3, r1
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	4619      	mov	r1, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	3301      	adds	r3, #1
 80071a8:	617b      	str	r3, [r7, #20]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	085b      	lsrs	r3, r3, #1
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d3e6      	bcc.n	8007182 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d009      	beq.n	80071d2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	4413      	add	r3, r2
 80071cc:	881a      	ldrh	r2, [r3, #0]
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	371c      	adds	r7, #28
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80071f4:	231f      	movs	r3, #31
 80071f6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80071f8:	bf00      	nop
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	1e5a      	subs	r2, r3, #1
 80071fe:	613a      	str	r2, [r7, #16]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d009      	beq.n	8007218 <HAL_CRCEx_Polynomial_Set+0x34>
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f003 031f 	and.w	r3, r3, #31
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	fa22 f303 	lsr.w	r3, r2, r3
 8007210:	f003 0301 	and.w	r3, r3, #1
 8007214:	2b00      	cmp	r3, #0
 8007216:	d0f0      	beq.n	80071fa <HAL_CRCEx_Polynomial_Set+0x16>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b18      	cmp	r3, #24
 800721c:	d846      	bhi.n	80072ac <HAL_CRCEx_Polynomial_Set+0xc8>
 800721e:	a201      	add	r2, pc, #4	; (adr r2, 8007224 <HAL_CRCEx_Polynomial_Set+0x40>)
 8007220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007224:	080072b3 	.word	0x080072b3
 8007228:	080072ad 	.word	0x080072ad
 800722c:	080072ad 	.word	0x080072ad
 8007230:	080072ad 	.word	0x080072ad
 8007234:	080072ad 	.word	0x080072ad
 8007238:	080072ad 	.word	0x080072ad
 800723c:	080072ad 	.word	0x080072ad
 8007240:	080072ad 	.word	0x080072ad
 8007244:	080072a1 	.word	0x080072a1
 8007248:	080072ad 	.word	0x080072ad
 800724c:	080072ad 	.word	0x080072ad
 8007250:	080072ad 	.word	0x080072ad
 8007254:	080072ad 	.word	0x080072ad
 8007258:	080072ad 	.word	0x080072ad
 800725c:	080072ad 	.word	0x080072ad
 8007260:	080072ad 	.word	0x080072ad
 8007264:	08007295 	.word	0x08007295
 8007268:	080072ad 	.word	0x080072ad
 800726c:	080072ad 	.word	0x080072ad
 8007270:	080072ad 	.word	0x080072ad
 8007274:	080072ad 	.word	0x080072ad
 8007278:	080072ad 	.word	0x080072ad
 800727c:	080072ad 	.word	0x080072ad
 8007280:	080072ad 	.word	0x080072ad
 8007284:	08007289 	.word	0x08007289
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	2b06      	cmp	r3, #6
 800728c:	d913      	bls.n	80072b6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007292:	e010      	b.n	80072b6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	2b07      	cmp	r3, #7
 8007298:	d90f      	bls.n	80072ba <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800729e:	e00c      	b.n	80072ba <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	2b0f      	cmp	r3, #15
 80072a4:	d90b      	bls.n	80072be <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80072aa:	e008      	b.n	80072be <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	75fb      	strb	r3, [r7, #23]
      break;
 80072b0:	e006      	b.n	80072c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80072b2:	bf00      	nop
 80072b4:	e004      	b.n	80072c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80072b6:	bf00      	nop
 80072b8:	e002      	b.n	80072c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80072ba:	bf00      	nop
 80072bc:	e000      	b.n	80072c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80072be:	bf00      	nop
  }
  if (status == HAL_OK)
 80072c0:	7dfb      	ldrb	r3, [r7, #23]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10d      	bne.n	80072e2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f023 0118 	bic.w	r1, r3, #24
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	430a      	orrs	r2, r1
 80072e0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80072e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	371c      	adds	r7, #28
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80072f8:	f7ff fca4 	bl	8006c44 <HAL_GetTick>
 80072fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e316      	b.n	8007936 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a66      	ldr	r2, [pc, #408]	; (80074a8 <HAL_DMA_Init+0x1b8>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d04a      	beq.n	80073a8 <HAL_DMA_Init+0xb8>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a65      	ldr	r2, [pc, #404]	; (80074ac <HAL_DMA_Init+0x1bc>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d045      	beq.n	80073a8 <HAL_DMA_Init+0xb8>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a63      	ldr	r2, [pc, #396]	; (80074b0 <HAL_DMA_Init+0x1c0>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d040      	beq.n	80073a8 <HAL_DMA_Init+0xb8>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a62      	ldr	r2, [pc, #392]	; (80074b4 <HAL_DMA_Init+0x1c4>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d03b      	beq.n	80073a8 <HAL_DMA_Init+0xb8>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a60      	ldr	r2, [pc, #384]	; (80074b8 <HAL_DMA_Init+0x1c8>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d036      	beq.n	80073a8 <HAL_DMA_Init+0xb8>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a5f      	ldr	r2, [pc, #380]	; (80074bc <HAL_DMA_Init+0x1cc>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d031      	beq.n	80073a8 <HAL_DMA_Init+0xb8>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a5d      	ldr	r2, [pc, #372]	; (80074c0 <HAL_DMA_Init+0x1d0>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d02c      	beq.n	80073a8 <HAL_DMA_Init+0xb8>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a5c      	ldr	r2, [pc, #368]	; (80074c4 <HAL_DMA_Init+0x1d4>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d027      	beq.n	80073a8 <HAL_DMA_Init+0xb8>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a5a      	ldr	r2, [pc, #360]	; (80074c8 <HAL_DMA_Init+0x1d8>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d022      	beq.n	80073a8 <HAL_DMA_Init+0xb8>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a59      	ldr	r2, [pc, #356]	; (80074cc <HAL_DMA_Init+0x1dc>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d01d      	beq.n	80073a8 <HAL_DMA_Init+0xb8>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a57      	ldr	r2, [pc, #348]	; (80074d0 <HAL_DMA_Init+0x1e0>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d018      	beq.n	80073a8 <HAL_DMA_Init+0xb8>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a56      	ldr	r2, [pc, #344]	; (80074d4 <HAL_DMA_Init+0x1e4>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d013      	beq.n	80073a8 <HAL_DMA_Init+0xb8>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a54      	ldr	r2, [pc, #336]	; (80074d8 <HAL_DMA_Init+0x1e8>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d00e      	beq.n	80073a8 <HAL_DMA_Init+0xb8>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a53      	ldr	r2, [pc, #332]	; (80074dc <HAL_DMA_Init+0x1ec>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d009      	beq.n	80073a8 <HAL_DMA_Init+0xb8>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a51      	ldr	r2, [pc, #324]	; (80074e0 <HAL_DMA_Init+0x1f0>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d004      	beq.n	80073a8 <HAL_DMA_Init+0xb8>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a50      	ldr	r2, [pc, #320]	; (80074e4 <HAL_DMA_Init+0x1f4>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d101      	bne.n	80073ac <HAL_DMA_Init+0xbc>
 80073a8:	2301      	movs	r3, #1
 80073aa:	e000      	b.n	80073ae <HAL_DMA_Init+0xbe>
 80073ac:	2300      	movs	r3, #0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 813b 	beq.w	800762a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2202      	movs	r2, #2
 80073b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a37      	ldr	r2, [pc, #220]	; (80074a8 <HAL_DMA_Init+0x1b8>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d04a      	beq.n	8007464 <HAL_DMA_Init+0x174>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a36      	ldr	r2, [pc, #216]	; (80074ac <HAL_DMA_Init+0x1bc>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d045      	beq.n	8007464 <HAL_DMA_Init+0x174>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a34      	ldr	r2, [pc, #208]	; (80074b0 <HAL_DMA_Init+0x1c0>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d040      	beq.n	8007464 <HAL_DMA_Init+0x174>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a33      	ldr	r2, [pc, #204]	; (80074b4 <HAL_DMA_Init+0x1c4>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d03b      	beq.n	8007464 <HAL_DMA_Init+0x174>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a31      	ldr	r2, [pc, #196]	; (80074b8 <HAL_DMA_Init+0x1c8>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d036      	beq.n	8007464 <HAL_DMA_Init+0x174>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a30      	ldr	r2, [pc, #192]	; (80074bc <HAL_DMA_Init+0x1cc>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d031      	beq.n	8007464 <HAL_DMA_Init+0x174>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a2e      	ldr	r2, [pc, #184]	; (80074c0 <HAL_DMA_Init+0x1d0>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d02c      	beq.n	8007464 <HAL_DMA_Init+0x174>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a2d      	ldr	r2, [pc, #180]	; (80074c4 <HAL_DMA_Init+0x1d4>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d027      	beq.n	8007464 <HAL_DMA_Init+0x174>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a2b      	ldr	r2, [pc, #172]	; (80074c8 <HAL_DMA_Init+0x1d8>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d022      	beq.n	8007464 <HAL_DMA_Init+0x174>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a2a      	ldr	r2, [pc, #168]	; (80074cc <HAL_DMA_Init+0x1dc>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d01d      	beq.n	8007464 <HAL_DMA_Init+0x174>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a28      	ldr	r2, [pc, #160]	; (80074d0 <HAL_DMA_Init+0x1e0>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d018      	beq.n	8007464 <HAL_DMA_Init+0x174>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a27      	ldr	r2, [pc, #156]	; (80074d4 <HAL_DMA_Init+0x1e4>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d013      	beq.n	8007464 <HAL_DMA_Init+0x174>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a25      	ldr	r2, [pc, #148]	; (80074d8 <HAL_DMA_Init+0x1e8>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d00e      	beq.n	8007464 <HAL_DMA_Init+0x174>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a24      	ldr	r2, [pc, #144]	; (80074dc <HAL_DMA_Init+0x1ec>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d009      	beq.n	8007464 <HAL_DMA_Init+0x174>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a22      	ldr	r2, [pc, #136]	; (80074e0 <HAL_DMA_Init+0x1f0>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d004      	beq.n	8007464 <HAL_DMA_Init+0x174>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a21      	ldr	r2, [pc, #132]	; (80074e4 <HAL_DMA_Init+0x1f4>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d108      	bne.n	8007476 <HAL_DMA_Init+0x186>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0201 	bic.w	r2, r2, #1
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	e007      	b.n	8007486 <HAL_DMA_Init+0x196>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0201 	bic.w	r2, r2, #1
 8007484:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007486:	e02f      	b.n	80074e8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007488:	f7ff fbdc 	bl	8006c44 <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	2b05      	cmp	r3, #5
 8007494:	d928      	bls.n	80074e8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2220      	movs	r2, #32
 800749a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2203      	movs	r2, #3
 80074a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e246      	b.n	8007936 <HAL_DMA_Init+0x646>
 80074a8:	40020010 	.word	0x40020010
 80074ac:	40020028 	.word	0x40020028
 80074b0:	40020040 	.word	0x40020040
 80074b4:	40020058 	.word	0x40020058
 80074b8:	40020070 	.word	0x40020070
 80074bc:	40020088 	.word	0x40020088
 80074c0:	400200a0 	.word	0x400200a0
 80074c4:	400200b8 	.word	0x400200b8
 80074c8:	40020410 	.word	0x40020410
 80074cc:	40020428 	.word	0x40020428
 80074d0:	40020440 	.word	0x40020440
 80074d4:	40020458 	.word	0x40020458
 80074d8:	40020470 	.word	0x40020470
 80074dc:	40020488 	.word	0x40020488
 80074e0:	400204a0 	.word	0x400204a0
 80074e4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1c8      	bne.n	8007488 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	4b83      	ldr	r3, [pc, #524]	; (8007710 <HAL_DMA_Init+0x420>)
 8007502:	4013      	ands	r3, r2
 8007504:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800750e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800751a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007526:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a1b      	ldr	r3, [r3, #32]
 800752c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	4313      	orrs	r3, r2
 8007532:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007538:	2b04      	cmp	r3, #4
 800753a:	d107      	bne.n	800754c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007544:	4313      	orrs	r3, r2
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	4313      	orrs	r3, r2
 800754a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800754c:	4b71      	ldr	r3, [pc, #452]	; (8007714 <HAL_DMA_Init+0x424>)
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	4b71      	ldr	r3, [pc, #452]	; (8007718 <HAL_DMA_Init+0x428>)
 8007552:	4013      	ands	r3, r2
 8007554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007558:	d328      	bcc.n	80075ac <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	2b28      	cmp	r3, #40	; 0x28
 8007560:	d903      	bls.n	800756a <HAL_DMA_Init+0x27a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	2b2e      	cmp	r3, #46	; 0x2e
 8007568:	d917      	bls.n	800759a <HAL_DMA_Init+0x2aa>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	2b3e      	cmp	r3, #62	; 0x3e
 8007570:	d903      	bls.n	800757a <HAL_DMA_Init+0x28a>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	2b42      	cmp	r3, #66	; 0x42
 8007578:	d90f      	bls.n	800759a <HAL_DMA_Init+0x2aa>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	2b46      	cmp	r3, #70	; 0x46
 8007580:	d903      	bls.n	800758a <HAL_DMA_Init+0x29a>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	2b48      	cmp	r3, #72	; 0x48
 8007588:	d907      	bls.n	800759a <HAL_DMA_Init+0x2aa>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	2b4e      	cmp	r3, #78	; 0x4e
 8007590:	d905      	bls.n	800759e <HAL_DMA_Init+0x2ae>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	2b52      	cmp	r3, #82	; 0x52
 8007598:	d801      	bhi.n	800759e <HAL_DMA_Init+0x2ae>
 800759a:	2301      	movs	r3, #1
 800759c:	e000      	b.n	80075a0 <HAL_DMA_Init+0x2b0>
 800759e:	2300      	movs	r3, #0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d003      	beq.n	80075ac <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075aa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f023 0307 	bic.w	r3, r3, #7
 80075c2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d2:	2b04      	cmp	r3, #4
 80075d4:	d117      	bne.n	8007606 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	4313      	orrs	r3, r2
 80075de:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00e      	beq.n	8007606 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f002 fb31 	bl	8009c50 <DMA_CheckFifoParam>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d008      	beq.n	8007606 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2240      	movs	r2, #64	; 0x40
 80075f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e197      	b.n	8007936 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f002 fa6c 	bl	8009aec <DMA_CalcBaseAndBitshift>
 8007614:	4603      	mov	r3, r0
 8007616:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800761c:	f003 031f 	and.w	r3, r3, #31
 8007620:	223f      	movs	r2, #63	; 0x3f
 8007622:	409a      	lsls	r2, r3
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	609a      	str	r2, [r3, #8]
 8007628:	e0cd      	b.n	80077c6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a3b      	ldr	r2, [pc, #236]	; (800771c <HAL_DMA_Init+0x42c>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d022      	beq.n	800767a <HAL_DMA_Init+0x38a>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a39      	ldr	r2, [pc, #228]	; (8007720 <HAL_DMA_Init+0x430>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d01d      	beq.n	800767a <HAL_DMA_Init+0x38a>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a38      	ldr	r2, [pc, #224]	; (8007724 <HAL_DMA_Init+0x434>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d018      	beq.n	800767a <HAL_DMA_Init+0x38a>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a36      	ldr	r2, [pc, #216]	; (8007728 <HAL_DMA_Init+0x438>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d013      	beq.n	800767a <HAL_DMA_Init+0x38a>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a35      	ldr	r2, [pc, #212]	; (800772c <HAL_DMA_Init+0x43c>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d00e      	beq.n	800767a <HAL_DMA_Init+0x38a>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a33      	ldr	r2, [pc, #204]	; (8007730 <HAL_DMA_Init+0x440>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d009      	beq.n	800767a <HAL_DMA_Init+0x38a>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a32      	ldr	r2, [pc, #200]	; (8007734 <HAL_DMA_Init+0x444>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d004      	beq.n	800767a <HAL_DMA_Init+0x38a>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a30      	ldr	r2, [pc, #192]	; (8007738 <HAL_DMA_Init+0x448>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d101      	bne.n	800767e <HAL_DMA_Init+0x38e>
 800767a:	2301      	movs	r3, #1
 800767c:	e000      	b.n	8007680 <HAL_DMA_Init+0x390>
 800767e:	2300      	movs	r3, #0
 8007680:	2b00      	cmp	r3, #0
 8007682:	f000 8097 	beq.w	80077b4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a24      	ldr	r2, [pc, #144]	; (800771c <HAL_DMA_Init+0x42c>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d021      	beq.n	80076d4 <HAL_DMA_Init+0x3e4>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a22      	ldr	r2, [pc, #136]	; (8007720 <HAL_DMA_Init+0x430>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d01c      	beq.n	80076d4 <HAL_DMA_Init+0x3e4>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a21      	ldr	r2, [pc, #132]	; (8007724 <HAL_DMA_Init+0x434>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d017      	beq.n	80076d4 <HAL_DMA_Init+0x3e4>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a1f      	ldr	r2, [pc, #124]	; (8007728 <HAL_DMA_Init+0x438>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d012      	beq.n	80076d4 <HAL_DMA_Init+0x3e4>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a1e      	ldr	r2, [pc, #120]	; (800772c <HAL_DMA_Init+0x43c>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d00d      	beq.n	80076d4 <HAL_DMA_Init+0x3e4>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a1c      	ldr	r2, [pc, #112]	; (8007730 <HAL_DMA_Init+0x440>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d008      	beq.n	80076d4 <HAL_DMA_Init+0x3e4>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a1b      	ldr	r2, [pc, #108]	; (8007734 <HAL_DMA_Init+0x444>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d003      	beq.n	80076d4 <HAL_DMA_Init+0x3e4>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a19      	ldr	r2, [pc, #100]	; (8007738 <HAL_DMA_Init+0x448>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2202      	movs	r2, #2
 80076da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	4b12      	ldr	r3, [pc, #72]	; (800773c <HAL_DMA_Init+0x44c>)
 80076f2:	4013      	ands	r3, r2
 80076f4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	2b40      	cmp	r3, #64	; 0x40
 80076fc:	d020      	beq.n	8007740 <HAL_DMA_Init+0x450>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	2b80      	cmp	r3, #128	; 0x80
 8007704:	d102      	bne.n	800770c <HAL_DMA_Init+0x41c>
 8007706:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800770a:	e01a      	b.n	8007742 <HAL_DMA_Init+0x452>
 800770c:	2300      	movs	r3, #0
 800770e:	e018      	b.n	8007742 <HAL_DMA_Init+0x452>
 8007710:	fe10803f 	.word	0xfe10803f
 8007714:	5c001000 	.word	0x5c001000
 8007718:	ffff0000 	.word	0xffff0000
 800771c:	58025408 	.word	0x58025408
 8007720:	5802541c 	.word	0x5802541c
 8007724:	58025430 	.word	0x58025430
 8007728:	58025444 	.word	0x58025444
 800772c:	58025458 	.word	0x58025458
 8007730:	5802546c 	.word	0x5802546c
 8007734:	58025480 	.word	0x58025480
 8007738:	58025494 	.word	0x58025494
 800773c:	fffe000f 	.word	0xfffe000f
 8007740:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	68d2      	ldr	r2, [r2, #12]
 8007746:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007748:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007750:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007758:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007760:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007768:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007770:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	4313      	orrs	r3, r2
 8007776:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	461a      	mov	r2, r3
 8007786:	4b6e      	ldr	r3, [pc, #440]	; (8007940 <HAL_DMA_Init+0x650>)
 8007788:	4413      	add	r3, r2
 800778a:	4a6e      	ldr	r2, [pc, #440]	; (8007944 <HAL_DMA_Init+0x654>)
 800778c:	fba2 2303 	umull	r2, r3, r2, r3
 8007790:	091b      	lsrs	r3, r3, #4
 8007792:	009a      	lsls	r2, r3, #2
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f002 f9a7 	bl	8009aec <DMA_CalcBaseAndBitshift>
 800779e:	4603      	mov	r3, r0
 80077a0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077a6:	f003 031f 	and.w	r3, r3, #31
 80077aa:	2201      	movs	r2, #1
 80077ac:	409a      	lsls	r2, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	605a      	str	r2, [r3, #4]
 80077b2:	e008      	b.n	80077c6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2240      	movs	r2, #64	; 0x40
 80077b8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2203      	movs	r2, #3
 80077be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e0b7      	b.n	8007936 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a5f      	ldr	r2, [pc, #380]	; (8007948 <HAL_DMA_Init+0x658>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d072      	beq.n	80078b6 <HAL_DMA_Init+0x5c6>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a5d      	ldr	r2, [pc, #372]	; (800794c <HAL_DMA_Init+0x65c>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d06d      	beq.n	80078b6 <HAL_DMA_Init+0x5c6>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a5c      	ldr	r2, [pc, #368]	; (8007950 <HAL_DMA_Init+0x660>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d068      	beq.n	80078b6 <HAL_DMA_Init+0x5c6>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a5a      	ldr	r2, [pc, #360]	; (8007954 <HAL_DMA_Init+0x664>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d063      	beq.n	80078b6 <HAL_DMA_Init+0x5c6>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a59      	ldr	r2, [pc, #356]	; (8007958 <HAL_DMA_Init+0x668>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d05e      	beq.n	80078b6 <HAL_DMA_Init+0x5c6>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a57      	ldr	r2, [pc, #348]	; (800795c <HAL_DMA_Init+0x66c>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d059      	beq.n	80078b6 <HAL_DMA_Init+0x5c6>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a56      	ldr	r2, [pc, #344]	; (8007960 <HAL_DMA_Init+0x670>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d054      	beq.n	80078b6 <HAL_DMA_Init+0x5c6>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a54      	ldr	r2, [pc, #336]	; (8007964 <HAL_DMA_Init+0x674>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d04f      	beq.n	80078b6 <HAL_DMA_Init+0x5c6>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a53      	ldr	r2, [pc, #332]	; (8007968 <HAL_DMA_Init+0x678>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d04a      	beq.n	80078b6 <HAL_DMA_Init+0x5c6>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a51      	ldr	r2, [pc, #324]	; (800796c <HAL_DMA_Init+0x67c>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d045      	beq.n	80078b6 <HAL_DMA_Init+0x5c6>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a50      	ldr	r2, [pc, #320]	; (8007970 <HAL_DMA_Init+0x680>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d040      	beq.n	80078b6 <HAL_DMA_Init+0x5c6>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a4e      	ldr	r2, [pc, #312]	; (8007974 <HAL_DMA_Init+0x684>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d03b      	beq.n	80078b6 <HAL_DMA_Init+0x5c6>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a4d      	ldr	r2, [pc, #308]	; (8007978 <HAL_DMA_Init+0x688>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d036      	beq.n	80078b6 <HAL_DMA_Init+0x5c6>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a4b      	ldr	r2, [pc, #300]	; (800797c <HAL_DMA_Init+0x68c>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d031      	beq.n	80078b6 <HAL_DMA_Init+0x5c6>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a4a      	ldr	r2, [pc, #296]	; (8007980 <HAL_DMA_Init+0x690>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d02c      	beq.n	80078b6 <HAL_DMA_Init+0x5c6>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a48      	ldr	r2, [pc, #288]	; (8007984 <HAL_DMA_Init+0x694>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d027      	beq.n	80078b6 <HAL_DMA_Init+0x5c6>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a47      	ldr	r2, [pc, #284]	; (8007988 <HAL_DMA_Init+0x698>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d022      	beq.n	80078b6 <HAL_DMA_Init+0x5c6>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a45      	ldr	r2, [pc, #276]	; (800798c <HAL_DMA_Init+0x69c>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d01d      	beq.n	80078b6 <HAL_DMA_Init+0x5c6>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a44      	ldr	r2, [pc, #272]	; (8007990 <HAL_DMA_Init+0x6a0>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d018      	beq.n	80078b6 <HAL_DMA_Init+0x5c6>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a42      	ldr	r2, [pc, #264]	; (8007994 <HAL_DMA_Init+0x6a4>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d013      	beq.n	80078b6 <HAL_DMA_Init+0x5c6>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a41      	ldr	r2, [pc, #260]	; (8007998 <HAL_DMA_Init+0x6a8>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d00e      	beq.n	80078b6 <HAL_DMA_Init+0x5c6>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a3f      	ldr	r2, [pc, #252]	; (800799c <HAL_DMA_Init+0x6ac>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d009      	beq.n	80078b6 <HAL_DMA_Init+0x5c6>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a3e      	ldr	r2, [pc, #248]	; (80079a0 <HAL_DMA_Init+0x6b0>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d004      	beq.n	80078b6 <HAL_DMA_Init+0x5c6>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a3c      	ldr	r2, [pc, #240]	; (80079a4 <HAL_DMA_Init+0x6b4>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d101      	bne.n	80078ba <HAL_DMA_Init+0x5ca>
 80078b6:	2301      	movs	r3, #1
 80078b8:	e000      	b.n	80078bc <HAL_DMA_Init+0x5cc>
 80078ba:	2300      	movs	r3, #0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d032      	beq.n	8007926 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f002 fa41 	bl	8009d48 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	2b80      	cmp	r3, #128	; 0x80
 80078cc:	d102      	bne.n	80078d4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078dc:	b2d2      	uxtb	r2, r2
 80078de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80078e8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d010      	beq.n	8007914 <HAL_DMA_Init+0x624>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	2b08      	cmp	r3, #8
 80078f8:	d80c      	bhi.n	8007914 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f002 fabe 	bl	8009e7c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007904:	2200      	movs	r2, #0
 8007906:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007910:	605a      	str	r2, [r3, #4]
 8007912:	e008      	b.n	8007926 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3718      	adds	r7, #24
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	a7fdabf8 	.word	0xa7fdabf8
 8007944:	cccccccd 	.word	0xcccccccd
 8007948:	40020010 	.word	0x40020010
 800794c:	40020028 	.word	0x40020028
 8007950:	40020040 	.word	0x40020040
 8007954:	40020058 	.word	0x40020058
 8007958:	40020070 	.word	0x40020070
 800795c:	40020088 	.word	0x40020088
 8007960:	400200a0 	.word	0x400200a0
 8007964:	400200b8 	.word	0x400200b8
 8007968:	40020410 	.word	0x40020410
 800796c:	40020428 	.word	0x40020428
 8007970:	40020440 	.word	0x40020440
 8007974:	40020458 	.word	0x40020458
 8007978:	40020470 	.word	0x40020470
 800797c:	40020488 	.word	0x40020488
 8007980:	400204a0 	.word	0x400204a0
 8007984:	400204b8 	.word	0x400204b8
 8007988:	58025408 	.word	0x58025408
 800798c:	5802541c 	.word	0x5802541c
 8007990:	58025430 	.word	0x58025430
 8007994:	58025444 	.word	0x58025444
 8007998:	58025458 	.word	0x58025458
 800799c:	5802546c 	.word	0x5802546c
 80079a0:	58025480 	.word	0x58025480
 80079a4:	58025494 	.word	0x58025494

080079a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e226      	b.n	8007e12 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d101      	bne.n	80079d2 <HAL_DMA_Start_IT+0x2a>
 80079ce:	2302      	movs	r3, #2
 80079d0:	e21f      	b.n	8007e12 <HAL_DMA_Start_IT+0x46a>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	f040 820a 	bne.w	8007dfc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2202      	movs	r2, #2
 80079ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a68      	ldr	r2, [pc, #416]	; (8007b9c <HAL_DMA_Start_IT+0x1f4>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d04a      	beq.n	8007a96 <HAL_DMA_Start_IT+0xee>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a66      	ldr	r2, [pc, #408]	; (8007ba0 <HAL_DMA_Start_IT+0x1f8>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d045      	beq.n	8007a96 <HAL_DMA_Start_IT+0xee>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a65      	ldr	r2, [pc, #404]	; (8007ba4 <HAL_DMA_Start_IT+0x1fc>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d040      	beq.n	8007a96 <HAL_DMA_Start_IT+0xee>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a63      	ldr	r2, [pc, #396]	; (8007ba8 <HAL_DMA_Start_IT+0x200>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d03b      	beq.n	8007a96 <HAL_DMA_Start_IT+0xee>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a62      	ldr	r2, [pc, #392]	; (8007bac <HAL_DMA_Start_IT+0x204>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d036      	beq.n	8007a96 <HAL_DMA_Start_IT+0xee>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a60      	ldr	r2, [pc, #384]	; (8007bb0 <HAL_DMA_Start_IT+0x208>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d031      	beq.n	8007a96 <HAL_DMA_Start_IT+0xee>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a5f      	ldr	r2, [pc, #380]	; (8007bb4 <HAL_DMA_Start_IT+0x20c>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d02c      	beq.n	8007a96 <HAL_DMA_Start_IT+0xee>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a5d      	ldr	r2, [pc, #372]	; (8007bb8 <HAL_DMA_Start_IT+0x210>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d027      	beq.n	8007a96 <HAL_DMA_Start_IT+0xee>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a5c      	ldr	r2, [pc, #368]	; (8007bbc <HAL_DMA_Start_IT+0x214>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d022      	beq.n	8007a96 <HAL_DMA_Start_IT+0xee>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a5a      	ldr	r2, [pc, #360]	; (8007bc0 <HAL_DMA_Start_IT+0x218>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d01d      	beq.n	8007a96 <HAL_DMA_Start_IT+0xee>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a59      	ldr	r2, [pc, #356]	; (8007bc4 <HAL_DMA_Start_IT+0x21c>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d018      	beq.n	8007a96 <HAL_DMA_Start_IT+0xee>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a57      	ldr	r2, [pc, #348]	; (8007bc8 <HAL_DMA_Start_IT+0x220>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d013      	beq.n	8007a96 <HAL_DMA_Start_IT+0xee>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a56      	ldr	r2, [pc, #344]	; (8007bcc <HAL_DMA_Start_IT+0x224>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d00e      	beq.n	8007a96 <HAL_DMA_Start_IT+0xee>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a54      	ldr	r2, [pc, #336]	; (8007bd0 <HAL_DMA_Start_IT+0x228>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d009      	beq.n	8007a96 <HAL_DMA_Start_IT+0xee>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a53      	ldr	r2, [pc, #332]	; (8007bd4 <HAL_DMA_Start_IT+0x22c>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d004      	beq.n	8007a96 <HAL_DMA_Start_IT+0xee>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a51      	ldr	r2, [pc, #324]	; (8007bd8 <HAL_DMA_Start_IT+0x230>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d108      	bne.n	8007aa8 <HAL_DMA_Start_IT+0x100>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f022 0201 	bic.w	r2, r2, #1
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	e007      	b.n	8007ab8 <HAL_DMA_Start_IT+0x110>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f022 0201 	bic.w	r2, r2, #1
 8007ab6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	68b9      	ldr	r1, [r7, #8]
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f001 fe68 	bl	8009794 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a34      	ldr	r2, [pc, #208]	; (8007b9c <HAL_DMA_Start_IT+0x1f4>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d04a      	beq.n	8007b64 <HAL_DMA_Start_IT+0x1bc>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a33      	ldr	r2, [pc, #204]	; (8007ba0 <HAL_DMA_Start_IT+0x1f8>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d045      	beq.n	8007b64 <HAL_DMA_Start_IT+0x1bc>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a31      	ldr	r2, [pc, #196]	; (8007ba4 <HAL_DMA_Start_IT+0x1fc>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d040      	beq.n	8007b64 <HAL_DMA_Start_IT+0x1bc>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a30      	ldr	r2, [pc, #192]	; (8007ba8 <HAL_DMA_Start_IT+0x200>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d03b      	beq.n	8007b64 <HAL_DMA_Start_IT+0x1bc>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a2e      	ldr	r2, [pc, #184]	; (8007bac <HAL_DMA_Start_IT+0x204>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d036      	beq.n	8007b64 <HAL_DMA_Start_IT+0x1bc>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a2d      	ldr	r2, [pc, #180]	; (8007bb0 <HAL_DMA_Start_IT+0x208>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d031      	beq.n	8007b64 <HAL_DMA_Start_IT+0x1bc>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a2b      	ldr	r2, [pc, #172]	; (8007bb4 <HAL_DMA_Start_IT+0x20c>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d02c      	beq.n	8007b64 <HAL_DMA_Start_IT+0x1bc>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a2a      	ldr	r2, [pc, #168]	; (8007bb8 <HAL_DMA_Start_IT+0x210>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d027      	beq.n	8007b64 <HAL_DMA_Start_IT+0x1bc>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a28      	ldr	r2, [pc, #160]	; (8007bbc <HAL_DMA_Start_IT+0x214>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d022      	beq.n	8007b64 <HAL_DMA_Start_IT+0x1bc>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a27      	ldr	r2, [pc, #156]	; (8007bc0 <HAL_DMA_Start_IT+0x218>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d01d      	beq.n	8007b64 <HAL_DMA_Start_IT+0x1bc>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a25      	ldr	r2, [pc, #148]	; (8007bc4 <HAL_DMA_Start_IT+0x21c>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d018      	beq.n	8007b64 <HAL_DMA_Start_IT+0x1bc>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a24      	ldr	r2, [pc, #144]	; (8007bc8 <HAL_DMA_Start_IT+0x220>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d013      	beq.n	8007b64 <HAL_DMA_Start_IT+0x1bc>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a22      	ldr	r2, [pc, #136]	; (8007bcc <HAL_DMA_Start_IT+0x224>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d00e      	beq.n	8007b64 <HAL_DMA_Start_IT+0x1bc>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a21      	ldr	r2, [pc, #132]	; (8007bd0 <HAL_DMA_Start_IT+0x228>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d009      	beq.n	8007b64 <HAL_DMA_Start_IT+0x1bc>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a1f      	ldr	r2, [pc, #124]	; (8007bd4 <HAL_DMA_Start_IT+0x22c>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d004      	beq.n	8007b64 <HAL_DMA_Start_IT+0x1bc>
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a1e      	ldr	r2, [pc, #120]	; (8007bd8 <HAL_DMA_Start_IT+0x230>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d101      	bne.n	8007b68 <HAL_DMA_Start_IT+0x1c0>
 8007b64:	2301      	movs	r3, #1
 8007b66:	e000      	b.n	8007b6a <HAL_DMA_Start_IT+0x1c2>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d036      	beq.n	8007bdc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f023 021e 	bic.w	r2, r3, #30
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f042 0216 	orr.w	r2, r2, #22
 8007b80:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d03e      	beq.n	8007c08 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f042 0208 	orr.w	r2, r2, #8
 8007b98:	601a      	str	r2, [r3, #0]
 8007b9a:	e035      	b.n	8007c08 <HAL_DMA_Start_IT+0x260>
 8007b9c:	40020010 	.word	0x40020010
 8007ba0:	40020028 	.word	0x40020028
 8007ba4:	40020040 	.word	0x40020040
 8007ba8:	40020058 	.word	0x40020058
 8007bac:	40020070 	.word	0x40020070
 8007bb0:	40020088 	.word	0x40020088
 8007bb4:	400200a0 	.word	0x400200a0
 8007bb8:	400200b8 	.word	0x400200b8
 8007bbc:	40020410 	.word	0x40020410
 8007bc0:	40020428 	.word	0x40020428
 8007bc4:	40020440 	.word	0x40020440
 8007bc8:	40020458 	.word	0x40020458
 8007bcc:	40020470 	.word	0x40020470
 8007bd0:	40020488 	.word	0x40020488
 8007bd4:	400204a0 	.word	0x400204a0
 8007bd8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f023 020e 	bic.w	r2, r3, #14
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f042 020a 	orr.w	r2, r2, #10
 8007bee:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d007      	beq.n	8007c08 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f042 0204 	orr.w	r2, r2, #4
 8007c06:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a83      	ldr	r2, [pc, #524]	; (8007e1c <HAL_DMA_Start_IT+0x474>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d072      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x350>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a82      	ldr	r2, [pc, #520]	; (8007e20 <HAL_DMA_Start_IT+0x478>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d06d      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x350>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a80      	ldr	r2, [pc, #512]	; (8007e24 <HAL_DMA_Start_IT+0x47c>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d068      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x350>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a7f      	ldr	r2, [pc, #508]	; (8007e28 <HAL_DMA_Start_IT+0x480>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d063      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x350>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a7d      	ldr	r2, [pc, #500]	; (8007e2c <HAL_DMA_Start_IT+0x484>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d05e      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x350>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a7c      	ldr	r2, [pc, #496]	; (8007e30 <HAL_DMA_Start_IT+0x488>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d059      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x350>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a7a      	ldr	r2, [pc, #488]	; (8007e34 <HAL_DMA_Start_IT+0x48c>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d054      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x350>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a79      	ldr	r2, [pc, #484]	; (8007e38 <HAL_DMA_Start_IT+0x490>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d04f      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x350>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a77      	ldr	r2, [pc, #476]	; (8007e3c <HAL_DMA_Start_IT+0x494>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d04a      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x350>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a76      	ldr	r2, [pc, #472]	; (8007e40 <HAL_DMA_Start_IT+0x498>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d045      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x350>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a74      	ldr	r2, [pc, #464]	; (8007e44 <HAL_DMA_Start_IT+0x49c>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d040      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x350>
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a73      	ldr	r2, [pc, #460]	; (8007e48 <HAL_DMA_Start_IT+0x4a0>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d03b      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x350>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a71      	ldr	r2, [pc, #452]	; (8007e4c <HAL_DMA_Start_IT+0x4a4>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d036      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x350>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a70      	ldr	r2, [pc, #448]	; (8007e50 <HAL_DMA_Start_IT+0x4a8>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d031      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x350>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a6e      	ldr	r2, [pc, #440]	; (8007e54 <HAL_DMA_Start_IT+0x4ac>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d02c      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x350>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a6d      	ldr	r2, [pc, #436]	; (8007e58 <HAL_DMA_Start_IT+0x4b0>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d027      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x350>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a6b      	ldr	r2, [pc, #428]	; (8007e5c <HAL_DMA_Start_IT+0x4b4>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d022      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x350>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a6a      	ldr	r2, [pc, #424]	; (8007e60 <HAL_DMA_Start_IT+0x4b8>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d01d      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x350>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a68      	ldr	r2, [pc, #416]	; (8007e64 <HAL_DMA_Start_IT+0x4bc>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d018      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x350>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a67      	ldr	r2, [pc, #412]	; (8007e68 <HAL_DMA_Start_IT+0x4c0>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d013      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x350>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a65      	ldr	r2, [pc, #404]	; (8007e6c <HAL_DMA_Start_IT+0x4c4>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d00e      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x350>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a64      	ldr	r2, [pc, #400]	; (8007e70 <HAL_DMA_Start_IT+0x4c8>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d009      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x350>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a62      	ldr	r2, [pc, #392]	; (8007e74 <HAL_DMA_Start_IT+0x4cc>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d004      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x350>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a61      	ldr	r2, [pc, #388]	; (8007e78 <HAL_DMA_Start_IT+0x4d0>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d101      	bne.n	8007cfc <HAL_DMA_Start_IT+0x354>
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e000      	b.n	8007cfe <HAL_DMA_Start_IT+0x356>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d01a      	beq.n	8007d38 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d007      	beq.n	8007d20 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d1e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d007      	beq.n	8007d38 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d36:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a37      	ldr	r2, [pc, #220]	; (8007e1c <HAL_DMA_Start_IT+0x474>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d04a      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x430>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a36      	ldr	r2, [pc, #216]	; (8007e20 <HAL_DMA_Start_IT+0x478>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d045      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x430>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a34      	ldr	r2, [pc, #208]	; (8007e24 <HAL_DMA_Start_IT+0x47c>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d040      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x430>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a33      	ldr	r2, [pc, #204]	; (8007e28 <HAL_DMA_Start_IT+0x480>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d03b      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x430>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a31      	ldr	r2, [pc, #196]	; (8007e2c <HAL_DMA_Start_IT+0x484>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d036      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x430>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a30      	ldr	r2, [pc, #192]	; (8007e30 <HAL_DMA_Start_IT+0x488>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d031      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x430>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a2e      	ldr	r2, [pc, #184]	; (8007e34 <HAL_DMA_Start_IT+0x48c>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d02c      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x430>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a2d      	ldr	r2, [pc, #180]	; (8007e38 <HAL_DMA_Start_IT+0x490>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d027      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x430>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a2b      	ldr	r2, [pc, #172]	; (8007e3c <HAL_DMA_Start_IT+0x494>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d022      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x430>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a2a      	ldr	r2, [pc, #168]	; (8007e40 <HAL_DMA_Start_IT+0x498>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d01d      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x430>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a28      	ldr	r2, [pc, #160]	; (8007e44 <HAL_DMA_Start_IT+0x49c>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d018      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x430>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a27      	ldr	r2, [pc, #156]	; (8007e48 <HAL_DMA_Start_IT+0x4a0>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d013      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x430>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a25      	ldr	r2, [pc, #148]	; (8007e4c <HAL_DMA_Start_IT+0x4a4>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d00e      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x430>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a24      	ldr	r2, [pc, #144]	; (8007e50 <HAL_DMA_Start_IT+0x4a8>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d009      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x430>
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a22      	ldr	r2, [pc, #136]	; (8007e54 <HAL_DMA_Start_IT+0x4ac>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d004      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x430>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a21      	ldr	r2, [pc, #132]	; (8007e58 <HAL_DMA_Start_IT+0x4b0>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d108      	bne.n	8007dea <HAL_DMA_Start_IT+0x442>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f042 0201 	orr.w	r2, r2, #1
 8007de6:	601a      	str	r2, [r3, #0]
 8007de8:	e012      	b.n	8007e10 <HAL_DMA_Start_IT+0x468>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f042 0201 	orr.w	r2, r2, #1
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	e009      	b.n	8007e10 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3718      	adds	r7, #24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	40020010 	.word	0x40020010
 8007e20:	40020028 	.word	0x40020028
 8007e24:	40020040 	.word	0x40020040
 8007e28:	40020058 	.word	0x40020058
 8007e2c:	40020070 	.word	0x40020070
 8007e30:	40020088 	.word	0x40020088
 8007e34:	400200a0 	.word	0x400200a0
 8007e38:	400200b8 	.word	0x400200b8
 8007e3c:	40020410 	.word	0x40020410
 8007e40:	40020428 	.word	0x40020428
 8007e44:	40020440 	.word	0x40020440
 8007e48:	40020458 	.word	0x40020458
 8007e4c:	40020470 	.word	0x40020470
 8007e50:	40020488 	.word	0x40020488
 8007e54:	400204a0 	.word	0x400204a0
 8007e58:	400204b8 	.word	0x400204b8
 8007e5c:	58025408 	.word	0x58025408
 8007e60:	5802541c 	.word	0x5802541c
 8007e64:	58025430 	.word	0x58025430
 8007e68:	58025444 	.word	0x58025444
 8007e6c:	58025458 	.word	0x58025458
 8007e70:	5802546c 	.word	0x5802546c
 8007e74:	58025480 	.word	0x58025480
 8007e78:	58025494 	.word	0x58025494

08007e7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007e84:	f7fe fede 	bl	8006c44 <HAL_GetTick>
 8007e88:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e2dc      	b.n	800844e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d008      	beq.n	8007eb2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2280      	movs	r2, #128	; 0x80
 8007ea4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e2cd      	b.n	800844e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a76      	ldr	r2, [pc, #472]	; (8008090 <HAL_DMA_Abort+0x214>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d04a      	beq.n	8007f52 <HAL_DMA_Abort+0xd6>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a74      	ldr	r2, [pc, #464]	; (8008094 <HAL_DMA_Abort+0x218>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d045      	beq.n	8007f52 <HAL_DMA_Abort+0xd6>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a73      	ldr	r2, [pc, #460]	; (8008098 <HAL_DMA_Abort+0x21c>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d040      	beq.n	8007f52 <HAL_DMA_Abort+0xd6>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a71      	ldr	r2, [pc, #452]	; (800809c <HAL_DMA_Abort+0x220>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d03b      	beq.n	8007f52 <HAL_DMA_Abort+0xd6>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a70      	ldr	r2, [pc, #448]	; (80080a0 <HAL_DMA_Abort+0x224>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d036      	beq.n	8007f52 <HAL_DMA_Abort+0xd6>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a6e      	ldr	r2, [pc, #440]	; (80080a4 <HAL_DMA_Abort+0x228>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d031      	beq.n	8007f52 <HAL_DMA_Abort+0xd6>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a6d      	ldr	r2, [pc, #436]	; (80080a8 <HAL_DMA_Abort+0x22c>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d02c      	beq.n	8007f52 <HAL_DMA_Abort+0xd6>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a6b      	ldr	r2, [pc, #428]	; (80080ac <HAL_DMA_Abort+0x230>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d027      	beq.n	8007f52 <HAL_DMA_Abort+0xd6>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a6a      	ldr	r2, [pc, #424]	; (80080b0 <HAL_DMA_Abort+0x234>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d022      	beq.n	8007f52 <HAL_DMA_Abort+0xd6>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a68      	ldr	r2, [pc, #416]	; (80080b4 <HAL_DMA_Abort+0x238>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d01d      	beq.n	8007f52 <HAL_DMA_Abort+0xd6>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a67      	ldr	r2, [pc, #412]	; (80080b8 <HAL_DMA_Abort+0x23c>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d018      	beq.n	8007f52 <HAL_DMA_Abort+0xd6>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a65      	ldr	r2, [pc, #404]	; (80080bc <HAL_DMA_Abort+0x240>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d013      	beq.n	8007f52 <HAL_DMA_Abort+0xd6>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a64      	ldr	r2, [pc, #400]	; (80080c0 <HAL_DMA_Abort+0x244>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d00e      	beq.n	8007f52 <HAL_DMA_Abort+0xd6>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a62      	ldr	r2, [pc, #392]	; (80080c4 <HAL_DMA_Abort+0x248>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d009      	beq.n	8007f52 <HAL_DMA_Abort+0xd6>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a61      	ldr	r2, [pc, #388]	; (80080c8 <HAL_DMA_Abort+0x24c>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d004      	beq.n	8007f52 <HAL_DMA_Abort+0xd6>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a5f      	ldr	r2, [pc, #380]	; (80080cc <HAL_DMA_Abort+0x250>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d101      	bne.n	8007f56 <HAL_DMA_Abort+0xda>
 8007f52:	2301      	movs	r3, #1
 8007f54:	e000      	b.n	8007f58 <HAL_DMA_Abort+0xdc>
 8007f56:	2300      	movs	r3, #0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d013      	beq.n	8007f84 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f022 021e 	bic.w	r2, r2, #30
 8007f6a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	695a      	ldr	r2, [r3, #20]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f7a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	617b      	str	r3, [r7, #20]
 8007f82:	e00a      	b.n	8007f9a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f022 020e 	bic.w	r2, r2, #14
 8007f92:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a3c      	ldr	r2, [pc, #240]	; (8008090 <HAL_DMA_Abort+0x214>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d072      	beq.n	800808a <HAL_DMA_Abort+0x20e>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a3a      	ldr	r2, [pc, #232]	; (8008094 <HAL_DMA_Abort+0x218>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d06d      	beq.n	800808a <HAL_DMA_Abort+0x20e>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a39      	ldr	r2, [pc, #228]	; (8008098 <HAL_DMA_Abort+0x21c>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d068      	beq.n	800808a <HAL_DMA_Abort+0x20e>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a37      	ldr	r2, [pc, #220]	; (800809c <HAL_DMA_Abort+0x220>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d063      	beq.n	800808a <HAL_DMA_Abort+0x20e>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a36      	ldr	r2, [pc, #216]	; (80080a0 <HAL_DMA_Abort+0x224>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d05e      	beq.n	800808a <HAL_DMA_Abort+0x20e>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a34      	ldr	r2, [pc, #208]	; (80080a4 <HAL_DMA_Abort+0x228>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d059      	beq.n	800808a <HAL_DMA_Abort+0x20e>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a33      	ldr	r2, [pc, #204]	; (80080a8 <HAL_DMA_Abort+0x22c>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d054      	beq.n	800808a <HAL_DMA_Abort+0x20e>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a31      	ldr	r2, [pc, #196]	; (80080ac <HAL_DMA_Abort+0x230>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d04f      	beq.n	800808a <HAL_DMA_Abort+0x20e>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a30      	ldr	r2, [pc, #192]	; (80080b0 <HAL_DMA_Abort+0x234>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d04a      	beq.n	800808a <HAL_DMA_Abort+0x20e>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a2e      	ldr	r2, [pc, #184]	; (80080b4 <HAL_DMA_Abort+0x238>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d045      	beq.n	800808a <HAL_DMA_Abort+0x20e>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a2d      	ldr	r2, [pc, #180]	; (80080b8 <HAL_DMA_Abort+0x23c>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d040      	beq.n	800808a <HAL_DMA_Abort+0x20e>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a2b      	ldr	r2, [pc, #172]	; (80080bc <HAL_DMA_Abort+0x240>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d03b      	beq.n	800808a <HAL_DMA_Abort+0x20e>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a2a      	ldr	r2, [pc, #168]	; (80080c0 <HAL_DMA_Abort+0x244>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d036      	beq.n	800808a <HAL_DMA_Abort+0x20e>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a28      	ldr	r2, [pc, #160]	; (80080c4 <HAL_DMA_Abort+0x248>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d031      	beq.n	800808a <HAL_DMA_Abort+0x20e>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a27      	ldr	r2, [pc, #156]	; (80080c8 <HAL_DMA_Abort+0x24c>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d02c      	beq.n	800808a <HAL_DMA_Abort+0x20e>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a25      	ldr	r2, [pc, #148]	; (80080cc <HAL_DMA_Abort+0x250>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d027      	beq.n	800808a <HAL_DMA_Abort+0x20e>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a24      	ldr	r2, [pc, #144]	; (80080d0 <HAL_DMA_Abort+0x254>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d022      	beq.n	800808a <HAL_DMA_Abort+0x20e>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a22      	ldr	r2, [pc, #136]	; (80080d4 <HAL_DMA_Abort+0x258>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d01d      	beq.n	800808a <HAL_DMA_Abort+0x20e>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a21      	ldr	r2, [pc, #132]	; (80080d8 <HAL_DMA_Abort+0x25c>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d018      	beq.n	800808a <HAL_DMA_Abort+0x20e>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a1f      	ldr	r2, [pc, #124]	; (80080dc <HAL_DMA_Abort+0x260>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d013      	beq.n	800808a <HAL_DMA_Abort+0x20e>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a1e      	ldr	r2, [pc, #120]	; (80080e0 <HAL_DMA_Abort+0x264>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d00e      	beq.n	800808a <HAL_DMA_Abort+0x20e>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a1c      	ldr	r2, [pc, #112]	; (80080e4 <HAL_DMA_Abort+0x268>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d009      	beq.n	800808a <HAL_DMA_Abort+0x20e>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a1b      	ldr	r2, [pc, #108]	; (80080e8 <HAL_DMA_Abort+0x26c>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d004      	beq.n	800808a <HAL_DMA_Abort+0x20e>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a19      	ldr	r2, [pc, #100]	; (80080ec <HAL_DMA_Abort+0x270>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d132      	bne.n	80080f0 <HAL_DMA_Abort+0x274>
 800808a:	2301      	movs	r3, #1
 800808c:	e031      	b.n	80080f2 <HAL_DMA_Abort+0x276>
 800808e:	bf00      	nop
 8008090:	40020010 	.word	0x40020010
 8008094:	40020028 	.word	0x40020028
 8008098:	40020040 	.word	0x40020040
 800809c:	40020058 	.word	0x40020058
 80080a0:	40020070 	.word	0x40020070
 80080a4:	40020088 	.word	0x40020088
 80080a8:	400200a0 	.word	0x400200a0
 80080ac:	400200b8 	.word	0x400200b8
 80080b0:	40020410 	.word	0x40020410
 80080b4:	40020428 	.word	0x40020428
 80080b8:	40020440 	.word	0x40020440
 80080bc:	40020458 	.word	0x40020458
 80080c0:	40020470 	.word	0x40020470
 80080c4:	40020488 	.word	0x40020488
 80080c8:	400204a0 	.word	0x400204a0
 80080cc:	400204b8 	.word	0x400204b8
 80080d0:	58025408 	.word	0x58025408
 80080d4:	5802541c 	.word	0x5802541c
 80080d8:	58025430 	.word	0x58025430
 80080dc:	58025444 	.word	0x58025444
 80080e0:	58025458 	.word	0x58025458
 80080e4:	5802546c 	.word	0x5802546c
 80080e8:	58025480 	.word	0x58025480
 80080ec:	58025494 	.word	0x58025494
 80080f0:	2300      	movs	r3, #0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d007      	beq.n	8008106 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008104:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a6d      	ldr	r2, [pc, #436]	; (80082c0 <HAL_DMA_Abort+0x444>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d04a      	beq.n	80081a6 <HAL_DMA_Abort+0x32a>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a6b      	ldr	r2, [pc, #428]	; (80082c4 <HAL_DMA_Abort+0x448>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d045      	beq.n	80081a6 <HAL_DMA_Abort+0x32a>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a6a      	ldr	r2, [pc, #424]	; (80082c8 <HAL_DMA_Abort+0x44c>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d040      	beq.n	80081a6 <HAL_DMA_Abort+0x32a>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a68      	ldr	r2, [pc, #416]	; (80082cc <HAL_DMA_Abort+0x450>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d03b      	beq.n	80081a6 <HAL_DMA_Abort+0x32a>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a67      	ldr	r2, [pc, #412]	; (80082d0 <HAL_DMA_Abort+0x454>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d036      	beq.n	80081a6 <HAL_DMA_Abort+0x32a>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a65      	ldr	r2, [pc, #404]	; (80082d4 <HAL_DMA_Abort+0x458>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d031      	beq.n	80081a6 <HAL_DMA_Abort+0x32a>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a64      	ldr	r2, [pc, #400]	; (80082d8 <HAL_DMA_Abort+0x45c>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d02c      	beq.n	80081a6 <HAL_DMA_Abort+0x32a>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a62      	ldr	r2, [pc, #392]	; (80082dc <HAL_DMA_Abort+0x460>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d027      	beq.n	80081a6 <HAL_DMA_Abort+0x32a>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a61      	ldr	r2, [pc, #388]	; (80082e0 <HAL_DMA_Abort+0x464>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d022      	beq.n	80081a6 <HAL_DMA_Abort+0x32a>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a5f      	ldr	r2, [pc, #380]	; (80082e4 <HAL_DMA_Abort+0x468>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d01d      	beq.n	80081a6 <HAL_DMA_Abort+0x32a>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a5e      	ldr	r2, [pc, #376]	; (80082e8 <HAL_DMA_Abort+0x46c>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d018      	beq.n	80081a6 <HAL_DMA_Abort+0x32a>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a5c      	ldr	r2, [pc, #368]	; (80082ec <HAL_DMA_Abort+0x470>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d013      	beq.n	80081a6 <HAL_DMA_Abort+0x32a>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a5b      	ldr	r2, [pc, #364]	; (80082f0 <HAL_DMA_Abort+0x474>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d00e      	beq.n	80081a6 <HAL_DMA_Abort+0x32a>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a59      	ldr	r2, [pc, #356]	; (80082f4 <HAL_DMA_Abort+0x478>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d009      	beq.n	80081a6 <HAL_DMA_Abort+0x32a>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a58      	ldr	r2, [pc, #352]	; (80082f8 <HAL_DMA_Abort+0x47c>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d004      	beq.n	80081a6 <HAL_DMA_Abort+0x32a>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a56      	ldr	r2, [pc, #344]	; (80082fc <HAL_DMA_Abort+0x480>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d108      	bne.n	80081b8 <HAL_DMA_Abort+0x33c>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f022 0201 	bic.w	r2, r2, #1
 80081b4:	601a      	str	r2, [r3, #0]
 80081b6:	e007      	b.n	80081c8 <HAL_DMA_Abort+0x34c>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f022 0201 	bic.w	r2, r2, #1
 80081c6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80081c8:	e013      	b.n	80081f2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80081ca:	f7fe fd3b 	bl	8006c44 <HAL_GetTick>
 80081ce:	4602      	mov	r2, r0
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	2b05      	cmp	r3, #5
 80081d6:	d90c      	bls.n	80081f2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2220      	movs	r2, #32
 80081dc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2203      	movs	r2, #3
 80081e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e12d      	b.n	800844e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1e5      	bne.n	80081ca <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a2f      	ldr	r2, [pc, #188]	; (80082c0 <HAL_DMA_Abort+0x444>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d04a      	beq.n	800829e <HAL_DMA_Abort+0x422>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a2d      	ldr	r2, [pc, #180]	; (80082c4 <HAL_DMA_Abort+0x448>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d045      	beq.n	800829e <HAL_DMA_Abort+0x422>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a2c      	ldr	r2, [pc, #176]	; (80082c8 <HAL_DMA_Abort+0x44c>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d040      	beq.n	800829e <HAL_DMA_Abort+0x422>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a2a      	ldr	r2, [pc, #168]	; (80082cc <HAL_DMA_Abort+0x450>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d03b      	beq.n	800829e <HAL_DMA_Abort+0x422>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a29      	ldr	r2, [pc, #164]	; (80082d0 <HAL_DMA_Abort+0x454>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d036      	beq.n	800829e <HAL_DMA_Abort+0x422>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a27      	ldr	r2, [pc, #156]	; (80082d4 <HAL_DMA_Abort+0x458>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d031      	beq.n	800829e <HAL_DMA_Abort+0x422>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a26      	ldr	r2, [pc, #152]	; (80082d8 <HAL_DMA_Abort+0x45c>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d02c      	beq.n	800829e <HAL_DMA_Abort+0x422>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a24      	ldr	r2, [pc, #144]	; (80082dc <HAL_DMA_Abort+0x460>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d027      	beq.n	800829e <HAL_DMA_Abort+0x422>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a23      	ldr	r2, [pc, #140]	; (80082e0 <HAL_DMA_Abort+0x464>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d022      	beq.n	800829e <HAL_DMA_Abort+0x422>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a21      	ldr	r2, [pc, #132]	; (80082e4 <HAL_DMA_Abort+0x468>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d01d      	beq.n	800829e <HAL_DMA_Abort+0x422>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a20      	ldr	r2, [pc, #128]	; (80082e8 <HAL_DMA_Abort+0x46c>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d018      	beq.n	800829e <HAL_DMA_Abort+0x422>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a1e      	ldr	r2, [pc, #120]	; (80082ec <HAL_DMA_Abort+0x470>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d013      	beq.n	800829e <HAL_DMA_Abort+0x422>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a1d      	ldr	r2, [pc, #116]	; (80082f0 <HAL_DMA_Abort+0x474>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d00e      	beq.n	800829e <HAL_DMA_Abort+0x422>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a1b      	ldr	r2, [pc, #108]	; (80082f4 <HAL_DMA_Abort+0x478>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d009      	beq.n	800829e <HAL_DMA_Abort+0x422>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a1a      	ldr	r2, [pc, #104]	; (80082f8 <HAL_DMA_Abort+0x47c>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d004      	beq.n	800829e <HAL_DMA_Abort+0x422>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a18      	ldr	r2, [pc, #96]	; (80082fc <HAL_DMA_Abort+0x480>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d101      	bne.n	80082a2 <HAL_DMA_Abort+0x426>
 800829e:	2301      	movs	r3, #1
 80082a0:	e000      	b.n	80082a4 <HAL_DMA_Abort+0x428>
 80082a2:	2300      	movs	r3, #0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d02b      	beq.n	8008300 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ac:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082b2:	f003 031f 	and.w	r3, r3, #31
 80082b6:	223f      	movs	r2, #63	; 0x3f
 80082b8:	409a      	lsls	r2, r3
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	609a      	str	r2, [r3, #8]
 80082be:	e02a      	b.n	8008316 <HAL_DMA_Abort+0x49a>
 80082c0:	40020010 	.word	0x40020010
 80082c4:	40020028 	.word	0x40020028
 80082c8:	40020040 	.word	0x40020040
 80082cc:	40020058 	.word	0x40020058
 80082d0:	40020070 	.word	0x40020070
 80082d4:	40020088 	.word	0x40020088
 80082d8:	400200a0 	.word	0x400200a0
 80082dc:	400200b8 	.word	0x400200b8
 80082e0:	40020410 	.word	0x40020410
 80082e4:	40020428 	.word	0x40020428
 80082e8:	40020440 	.word	0x40020440
 80082ec:	40020458 	.word	0x40020458
 80082f0:	40020470 	.word	0x40020470
 80082f4:	40020488 	.word	0x40020488
 80082f8:	400204a0 	.word	0x400204a0
 80082fc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008304:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800830a:	f003 031f 	and.w	r3, r3, #31
 800830e:	2201      	movs	r2, #1
 8008310:	409a      	lsls	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a4f      	ldr	r2, [pc, #316]	; (8008458 <HAL_DMA_Abort+0x5dc>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d072      	beq.n	8008406 <HAL_DMA_Abort+0x58a>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a4d      	ldr	r2, [pc, #308]	; (800845c <HAL_DMA_Abort+0x5e0>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d06d      	beq.n	8008406 <HAL_DMA_Abort+0x58a>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a4c      	ldr	r2, [pc, #304]	; (8008460 <HAL_DMA_Abort+0x5e4>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d068      	beq.n	8008406 <HAL_DMA_Abort+0x58a>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a4a      	ldr	r2, [pc, #296]	; (8008464 <HAL_DMA_Abort+0x5e8>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d063      	beq.n	8008406 <HAL_DMA_Abort+0x58a>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a49      	ldr	r2, [pc, #292]	; (8008468 <HAL_DMA_Abort+0x5ec>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d05e      	beq.n	8008406 <HAL_DMA_Abort+0x58a>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a47      	ldr	r2, [pc, #284]	; (800846c <HAL_DMA_Abort+0x5f0>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d059      	beq.n	8008406 <HAL_DMA_Abort+0x58a>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a46      	ldr	r2, [pc, #280]	; (8008470 <HAL_DMA_Abort+0x5f4>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d054      	beq.n	8008406 <HAL_DMA_Abort+0x58a>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a44      	ldr	r2, [pc, #272]	; (8008474 <HAL_DMA_Abort+0x5f8>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d04f      	beq.n	8008406 <HAL_DMA_Abort+0x58a>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a43      	ldr	r2, [pc, #268]	; (8008478 <HAL_DMA_Abort+0x5fc>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d04a      	beq.n	8008406 <HAL_DMA_Abort+0x58a>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a41      	ldr	r2, [pc, #260]	; (800847c <HAL_DMA_Abort+0x600>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d045      	beq.n	8008406 <HAL_DMA_Abort+0x58a>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a40      	ldr	r2, [pc, #256]	; (8008480 <HAL_DMA_Abort+0x604>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d040      	beq.n	8008406 <HAL_DMA_Abort+0x58a>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a3e      	ldr	r2, [pc, #248]	; (8008484 <HAL_DMA_Abort+0x608>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d03b      	beq.n	8008406 <HAL_DMA_Abort+0x58a>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a3d      	ldr	r2, [pc, #244]	; (8008488 <HAL_DMA_Abort+0x60c>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d036      	beq.n	8008406 <HAL_DMA_Abort+0x58a>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a3b      	ldr	r2, [pc, #236]	; (800848c <HAL_DMA_Abort+0x610>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d031      	beq.n	8008406 <HAL_DMA_Abort+0x58a>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a3a      	ldr	r2, [pc, #232]	; (8008490 <HAL_DMA_Abort+0x614>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d02c      	beq.n	8008406 <HAL_DMA_Abort+0x58a>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a38      	ldr	r2, [pc, #224]	; (8008494 <HAL_DMA_Abort+0x618>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d027      	beq.n	8008406 <HAL_DMA_Abort+0x58a>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a37      	ldr	r2, [pc, #220]	; (8008498 <HAL_DMA_Abort+0x61c>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d022      	beq.n	8008406 <HAL_DMA_Abort+0x58a>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a35      	ldr	r2, [pc, #212]	; (800849c <HAL_DMA_Abort+0x620>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d01d      	beq.n	8008406 <HAL_DMA_Abort+0x58a>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a34      	ldr	r2, [pc, #208]	; (80084a0 <HAL_DMA_Abort+0x624>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d018      	beq.n	8008406 <HAL_DMA_Abort+0x58a>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a32      	ldr	r2, [pc, #200]	; (80084a4 <HAL_DMA_Abort+0x628>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d013      	beq.n	8008406 <HAL_DMA_Abort+0x58a>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a31      	ldr	r2, [pc, #196]	; (80084a8 <HAL_DMA_Abort+0x62c>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d00e      	beq.n	8008406 <HAL_DMA_Abort+0x58a>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a2f      	ldr	r2, [pc, #188]	; (80084ac <HAL_DMA_Abort+0x630>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d009      	beq.n	8008406 <HAL_DMA_Abort+0x58a>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a2e      	ldr	r2, [pc, #184]	; (80084b0 <HAL_DMA_Abort+0x634>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d004      	beq.n	8008406 <HAL_DMA_Abort+0x58a>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a2c      	ldr	r2, [pc, #176]	; (80084b4 <HAL_DMA_Abort+0x638>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d101      	bne.n	800840a <HAL_DMA_Abort+0x58e>
 8008406:	2301      	movs	r3, #1
 8008408:	e000      	b.n	800840c <HAL_DMA_Abort+0x590>
 800840a:	2300      	movs	r3, #0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d015      	beq.n	800843c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008418:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00c      	beq.n	800843c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800842c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008430:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800843a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3718      	adds	r7, #24
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	40020010 	.word	0x40020010
 800845c:	40020028 	.word	0x40020028
 8008460:	40020040 	.word	0x40020040
 8008464:	40020058 	.word	0x40020058
 8008468:	40020070 	.word	0x40020070
 800846c:	40020088 	.word	0x40020088
 8008470:	400200a0 	.word	0x400200a0
 8008474:	400200b8 	.word	0x400200b8
 8008478:	40020410 	.word	0x40020410
 800847c:	40020428 	.word	0x40020428
 8008480:	40020440 	.word	0x40020440
 8008484:	40020458 	.word	0x40020458
 8008488:	40020470 	.word	0x40020470
 800848c:	40020488 	.word	0x40020488
 8008490:	400204a0 	.word	0x400204a0
 8008494:	400204b8 	.word	0x400204b8
 8008498:	58025408 	.word	0x58025408
 800849c:	5802541c 	.word	0x5802541c
 80084a0:	58025430 	.word	0x58025430
 80084a4:	58025444 	.word	0x58025444
 80084a8:	58025458 	.word	0x58025458
 80084ac:	5802546c 	.word	0x5802546c
 80084b0:	58025480 	.word	0x58025480
 80084b4:	58025494 	.word	0x58025494

080084b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e205      	b.n	80088d6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d004      	beq.n	80084e0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2280      	movs	r2, #128	; 0x80
 80084da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e1fa      	b.n	80088d6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a8c      	ldr	r2, [pc, #560]	; (8008718 <HAL_DMA_Abort_IT+0x260>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d04a      	beq.n	8008580 <HAL_DMA_Abort_IT+0xc8>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a8b      	ldr	r2, [pc, #556]	; (800871c <HAL_DMA_Abort_IT+0x264>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d045      	beq.n	8008580 <HAL_DMA_Abort_IT+0xc8>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a89      	ldr	r2, [pc, #548]	; (8008720 <HAL_DMA_Abort_IT+0x268>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d040      	beq.n	8008580 <HAL_DMA_Abort_IT+0xc8>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a88      	ldr	r2, [pc, #544]	; (8008724 <HAL_DMA_Abort_IT+0x26c>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d03b      	beq.n	8008580 <HAL_DMA_Abort_IT+0xc8>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a86      	ldr	r2, [pc, #536]	; (8008728 <HAL_DMA_Abort_IT+0x270>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d036      	beq.n	8008580 <HAL_DMA_Abort_IT+0xc8>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a85      	ldr	r2, [pc, #532]	; (800872c <HAL_DMA_Abort_IT+0x274>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d031      	beq.n	8008580 <HAL_DMA_Abort_IT+0xc8>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a83      	ldr	r2, [pc, #524]	; (8008730 <HAL_DMA_Abort_IT+0x278>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d02c      	beq.n	8008580 <HAL_DMA_Abort_IT+0xc8>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a82      	ldr	r2, [pc, #520]	; (8008734 <HAL_DMA_Abort_IT+0x27c>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d027      	beq.n	8008580 <HAL_DMA_Abort_IT+0xc8>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a80      	ldr	r2, [pc, #512]	; (8008738 <HAL_DMA_Abort_IT+0x280>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d022      	beq.n	8008580 <HAL_DMA_Abort_IT+0xc8>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a7f      	ldr	r2, [pc, #508]	; (800873c <HAL_DMA_Abort_IT+0x284>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d01d      	beq.n	8008580 <HAL_DMA_Abort_IT+0xc8>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a7d      	ldr	r2, [pc, #500]	; (8008740 <HAL_DMA_Abort_IT+0x288>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d018      	beq.n	8008580 <HAL_DMA_Abort_IT+0xc8>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a7c      	ldr	r2, [pc, #496]	; (8008744 <HAL_DMA_Abort_IT+0x28c>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d013      	beq.n	8008580 <HAL_DMA_Abort_IT+0xc8>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a7a      	ldr	r2, [pc, #488]	; (8008748 <HAL_DMA_Abort_IT+0x290>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d00e      	beq.n	8008580 <HAL_DMA_Abort_IT+0xc8>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a79      	ldr	r2, [pc, #484]	; (800874c <HAL_DMA_Abort_IT+0x294>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d009      	beq.n	8008580 <HAL_DMA_Abort_IT+0xc8>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a77      	ldr	r2, [pc, #476]	; (8008750 <HAL_DMA_Abort_IT+0x298>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d004      	beq.n	8008580 <HAL_DMA_Abort_IT+0xc8>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a76      	ldr	r2, [pc, #472]	; (8008754 <HAL_DMA_Abort_IT+0x29c>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d101      	bne.n	8008584 <HAL_DMA_Abort_IT+0xcc>
 8008580:	2301      	movs	r3, #1
 8008582:	e000      	b.n	8008586 <HAL_DMA_Abort_IT+0xce>
 8008584:	2300      	movs	r3, #0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d065      	beq.n	8008656 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2204      	movs	r2, #4
 800858e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a60      	ldr	r2, [pc, #384]	; (8008718 <HAL_DMA_Abort_IT+0x260>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d04a      	beq.n	8008632 <HAL_DMA_Abort_IT+0x17a>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a5e      	ldr	r2, [pc, #376]	; (800871c <HAL_DMA_Abort_IT+0x264>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d045      	beq.n	8008632 <HAL_DMA_Abort_IT+0x17a>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a5d      	ldr	r2, [pc, #372]	; (8008720 <HAL_DMA_Abort_IT+0x268>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d040      	beq.n	8008632 <HAL_DMA_Abort_IT+0x17a>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a5b      	ldr	r2, [pc, #364]	; (8008724 <HAL_DMA_Abort_IT+0x26c>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d03b      	beq.n	8008632 <HAL_DMA_Abort_IT+0x17a>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a5a      	ldr	r2, [pc, #360]	; (8008728 <HAL_DMA_Abort_IT+0x270>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d036      	beq.n	8008632 <HAL_DMA_Abort_IT+0x17a>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a58      	ldr	r2, [pc, #352]	; (800872c <HAL_DMA_Abort_IT+0x274>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d031      	beq.n	8008632 <HAL_DMA_Abort_IT+0x17a>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a57      	ldr	r2, [pc, #348]	; (8008730 <HAL_DMA_Abort_IT+0x278>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d02c      	beq.n	8008632 <HAL_DMA_Abort_IT+0x17a>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a55      	ldr	r2, [pc, #340]	; (8008734 <HAL_DMA_Abort_IT+0x27c>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d027      	beq.n	8008632 <HAL_DMA_Abort_IT+0x17a>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a54      	ldr	r2, [pc, #336]	; (8008738 <HAL_DMA_Abort_IT+0x280>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d022      	beq.n	8008632 <HAL_DMA_Abort_IT+0x17a>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a52      	ldr	r2, [pc, #328]	; (800873c <HAL_DMA_Abort_IT+0x284>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d01d      	beq.n	8008632 <HAL_DMA_Abort_IT+0x17a>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a51      	ldr	r2, [pc, #324]	; (8008740 <HAL_DMA_Abort_IT+0x288>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d018      	beq.n	8008632 <HAL_DMA_Abort_IT+0x17a>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a4f      	ldr	r2, [pc, #316]	; (8008744 <HAL_DMA_Abort_IT+0x28c>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d013      	beq.n	8008632 <HAL_DMA_Abort_IT+0x17a>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a4e      	ldr	r2, [pc, #312]	; (8008748 <HAL_DMA_Abort_IT+0x290>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d00e      	beq.n	8008632 <HAL_DMA_Abort_IT+0x17a>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a4c      	ldr	r2, [pc, #304]	; (800874c <HAL_DMA_Abort_IT+0x294>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d009      	beq.n	8008632 <HAL_DMA_Abort_IT+0x17a>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a4b      	ldr	r2, [pc, #300]	; (8008750 <HAL_DMA_Abort_IT+0x298>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d004      	beq.n	8008632 <HAL_DMA_Abort_IT+0x17a>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a49      	ldr	r2, [pc, #292]	; (8008754 <HAL_DMA_Abort_IT+0x29c>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d108      	bne.n	8008644 <HAL_DMA_Abort_IT+0x18c>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f022 0201 	bic.w	r2, r2, #1
 8008640:	601a      	str	r2, [r3, #0]
 8008642:	e147      	b.n	80088d4 <HAL_DMA_Abort_IT+0x41c>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f022 0201 	bic.w	r2, r2, #1
 8008652:	601a      	str	r2, [r3, #0]
 8008654:	e13e      	b.n	80088d4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f022 020e 	bic.w	r2, r2, #14
 8008664:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a2b      	ldr	r2, [pc, #172]	; (8008718 <HAL_DMA_Abort_IT+0x260>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d04a      	beq.n	8008706 <HAL_DMA_Abort_IT+0x24e>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a29      	ldr	r2, [pc, #164]	; (800871c <HAL_DMA_Abort_IT+0x264>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d045      	beq.n	8008706 <HAL_DMA_Abort_IT+0x24e>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a28      	ldr	r2, [pc, #160]	; (8008720 <HAL_DMA_Abort_IT+0x268>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d040      	beq.n	8008706 <HAL_DMA_Abort_IT+0x24e>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a26      	ldr	r2, [pc, #152]	; (8008724 <HAL_DMA_Abort_IT+0x26c>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d03b      	beq.n	8008706 <HAL_DMA_Abort_IT+0x24e>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a25      	ldr	r2, [pc, #148]	; (8008728 <HAL_DMA_Abort_IT+0x270>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d036      	beq.n	8008706 <HAL_DMA_Abort_IT+0x24e>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a23      	ldr	r2, [pc, #140]	; (800872c <HAL_DMA_Abort_IT+0x274>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d031      	beq.n	8008706 <HAL_DMA_Abort_IT+0x24e>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a22      	ldr	r2, [pc, #136]	; (8008730 <HAL_DMA_Abort_IT+0x278>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d02c      	beq.n	8008706 <HAL_DMA_Abort_IT+0x24e>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a20      	ldr	r2, [pc, #128]	; (8008734 <HAL_DMA_Abort_IT+0x27c>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d027      	beq.n	8008706 <HAL_DMA_Abort_IT+0x24e>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a1f      	ldr	r2, [pc, #124]	; (8008738 <HAL_DMA_Abort_IT+0x280>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d022      	beq.n	8008706 <HAL_DMA_Abort_IT+0x24e>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a1d      	ldr	r2, [pc, #116]	; (800873c <HAL_DMA_Abort_IT+0x284>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d01d      	beq.n	8008706 <HAL_DMA_Abort_IT+0x24e>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a1c      	ldr	r2, [pc, #112]	; (8008740 <HAL_DMA_Abort_IT+0x288>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d018      	beq.n	8008706 <HAL_DMA_Abort_IT+0x24e>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a1a      	ldr	r2, [pc, #104]	; (8008744 <HAL_DMA_Abort_IT+0x28c>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d013      	beq.n	8008706 <HAL_DMA_Abort_IT+0x24e>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a19      	ldr	r2, [pc, #100]	; (8008748 <HAL_DMA_Abort_IT+0x290>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d00e      	beq.n	8008706 <HAL_DMA_Abort_IT+0x24e>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a17      	ldr	r2, [pc, #92]	; (800874c <HAL_DMA_Abort_IT+0x294>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d009      	beq.n	8008706 <HAL_DMA_Abort_IT+0x24e>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a16      	ldr	r2, [pc, #88]	; (8008750 <HAL_DMA_Abort_IT+0x298>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d004      	beq.n	8008706 <HAL_DMA_Abort_IT+0x24e>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a14      	ldr	r2, [pc, #80]	; (8008754 <HAL_DMA_Abort_IT+0x29c>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d128      	bne.n	8008758 <HAL_DMA_Abort_IT+0x2a0>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f022 0201 	bic.w	r2, r2, #1
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	e027      	b.n	8008768 <HAL_DMA_Abort_IT+0x2b0>
 8008718:	40020010 	.word	0x40020010
 800871c:	40020028 	.word	0x40020028
 8008720:	40020040 	.word	0x40020040
 8008724:	40020058 	.word	0x40020058
 8008728:	40020070 	.word	0x40020070
 800872c:	40020088 	.word	0x40020088
 8008730:	400200a0 	.word	0x400200a0
 8008734:	400200b8 	.word	0x400200b8
 8008738:	40020410 	.word	0x40020410
 800873c:	40020428 	.word	0x40020428
 8008740:	40020440 	.word	0x40020440
 8008744:	40020458 	.word	0x40020458
 8008748:	40020470 	.word	0x40020470
 800874c:	40020488 	.word	0x40020488
 8008750:	400204a0 	.word	0x400204a0
 8008754:	400204b8 	.word	0x400204b8
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f022 0201 	bic.w	r2, r2, #1
 8008766:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a5c      	ldr	r2, [pc, #368]	; (80088e0 <HAL_DMA_Abort_IT+0x428>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d072      	beq.n	8008858 <HAL_DMA_Abort_IT+0x3a0>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a5b      	ldr	r2, [pc, #364]	; (80088e4 <HAL_DMA_Abort_IT+0x42c>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d06d      	beq.n	8008858 <HAL_DMA_Abort_IT+0x3a0>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a59      	ldr	r2, [pc, #356]	; (80088e8 <HAL_DMA_Abort_IT+0x430>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d068      	beq.n	8008858 <HAL_DMA_Abort_IT+0x3a0>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a58      	ldr	r2, [pc, #352]	; (80088ec <HAL_DMA_Abort_IT+0x434>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d063      	beq.n	8008858 <HAL_DMA_Abort_IT+0x3a0>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a56      	ldr	r2, [pc, #344]	; (80088f0 <HAL_DMA_Abort_IT+0x438>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d05e      	beq.n	8008858 <HAL_DMA_Abort_IT+0x3a0>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a55      	ldr	r2, [pc, #340]	; (80088f4 <HAL_DMA_Abort_IT+0x43c>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d059      	beq.n	8008858 <HAL_DMA_Abort_IT+0x3a0>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a53      	ldr	r2, [pc, #332]	; (80088f8 <HAL_DMA_Abort_IT+0x440>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d054      	beq.n	8008858 <HAL_DMA_Abort_IT+0x3a0>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a52      	ldr	r2, [pc, #328]	; (80088fc <HAL_DMA_Abort_IT+0x444>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d04f      	beq.n	8008858 <HAL_DMA_Abort_IT+0x3a0>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a50      	ldr	r2, [pc, #320]	; (8008900 <HAL_DMA_Abort_IT+0x448>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d04a      	beq.n	8008858 <HAL_DMA_Abort_IT+0x3a0>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a4f      	ldr	r2, [pc, #316]	; (8008904 <HAL_DMA_Abort_IT+0x44c>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d045      	beq.n	8008858 <HAL_DMA_Abort_IT+0x3a0>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a4d      	ldr	r2, [pc, #308]	; (8008908 <HAL_DMA_Abort_IT+0x450>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d040      	beq.n	8008858 <HAL_DMA_Abort_IT+0x3a0>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a4c      	ldr	r2, [pc, #304]	; (800890c <HAL_DMA_Abort_IT+0x454>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d03b      	beq.n	8008858 <HAL_DMA_Abort_IT+0x3a0>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a4a      	ldr	r2, [pc, #296]	; (8008910 <HAL_DMA_Abort_IT+0x458>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d036      	beq.n	8008858 <HAL_DMA_Abort_IT+0x3a0>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a49      	ldr	r2, [pc, #292]	; (8008914 <HAL_DMA_Abort_IT+0x45c>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d031      	beq.n	8008858 <HAL_DMA_Abort_IT+0x3a0>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a47      	ldr	r2, [pc, #284]	; (8008918 <HAL_DMA_Abort_IT+0x460>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d02c      	beq.n	8008858 <HAL_DMA_Abort_IT+0x3a0>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a46      	ldr	r2, [pc, #280]	; (800891c <HAL_DMA_Abort_IT+0x464>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d027      	beq.n	8008858 <HAL_DMA_Abort_IT+0x3a0>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a44      	ldr	r2, [pc, #272]	; (8008920 <HAL_DMA_Abort_IT+0x468>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d022      	beq.n	8008858 <HAL_DMA_Abort_IT+0x3a0>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a43      	ldr	r2, [pc, #268]	; (8008924 <HAL_DMA_Abort_IT+0x46c>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d01d      	beq.n	8008858 <HAL_DMA_Abort_IT+0x3a0>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a41      	ldr	r2, [pc, #260]	; (8008928 <HAL_DMA_Abort_IT+0x470>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d018      	beq.n	8008858 <HAL_DMA_Abort_IT+0x3a0>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a40      	ldr	r2, [pc, #256]	; (800892c <HAL_DMA_Abort_IT+0x474>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d013      	beq.n	8008858 <HAL_DMA_Abort_IT+0x3a0>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a3e      	ldr	r2, [pc, #248]	; (8008930 <HAL_DMA_Abort_IT+0x478>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d00e      	beq.n	8008858 <HAL_DMA_Abort_IT+0x3a0>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a3d      	ldr	r2, [pc, #244]	; (8008934 <HAL_DMA_Abort_IT+0x47c>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d009      	beq.n	8008858 <HAL_DMA_Abort_IT+0x3a0>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a3b      	ldr	r2, [pc, #236]	; (8008938 <HAL_DMA_Abort_IT+0x480>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d004      	beq.n	8008858 <HAL_DMA_Abort_IT+0x3a0>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a3a      	ldr	r2, [pc, #232]	; (800893c <HAL_DMA_Abort_IT+0x484>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d101      	bne.n	800885c <HAL_DMA_Abort_IT+0x3a4>
 8008858:	2301      	movs	r3, #1
 800885a:	e000      	b.n	800885e <HAL_DMA_Abort_IT+0x3a6>
 800885c:	2300      	movs	r3, #0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d028      	beq.n	80088b4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800886c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008870:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008876:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800887c:	f003 031f 	and.w	r3, r3, #31
 8008880:	2201      	movs	r2, #1
 8008882:	409a      	lsls	r2, r3
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008890:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00c      	beq.n	80088b4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80088b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d003      	beq.n	80088d4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	40020010 	.word	0x40020010
 80088e4:	40020028 	.word	0x40020028
 80088e8:	40020040 	.word	0x40020040
 80088ec:	40020058 	.word	0x40020058
 80088f0:	40020070 	.word	0x40020070
 80088f4:	40020088 	.word	0x40020088
 80088f8:	400200a0 	.word	0x400200a0
 80088fc:	400200b8 	.word	0x400200b8
 8008900:	40020410 	.word	0x40020410
 8008904:	40020428 	.word	0x40020428
 8008908:	40020440 	.word	0x40020440
 800890c:	40020458 	.word	0x40020458
 8008910:	40020470 	.word	0x40020470
 8008914:	40020488 	.word	0x40020488
 8008918:	400204a0 	.word	0x400204a0
 800891c:	400204b8 	.word	0x400204b8
 8008920:	58025408 	.word	0x58025408
 8008924:	5802541c 	.word	0x5802541c
 8008928:	58025430 	.word	0x58025430
 800892c:	58025444 	.word	0x58025444
 8008930:	58025458 	.word	0x58025458
 8008934:	5802546c 	.word	0x5802546c
 8008938:	58025480 	.word	0x58025480
 800893c:	58025494 	.word	0x58025494

08008940 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b08a      	sub	sp, #40	; 0x28
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008948:	2300      	movs	r3, #0
 800894a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800894c:	4b67      	ldr	r3, [pc, #412]	; (8008aec <HAL_DMA_IRQHandler+0x1ac>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a67      	ldr	r2, [pc, #412]	; (8008af0 <HAL_DMA_IRQHandler+0x1b0>)
 8008952:	fba2 2303 	umull	r2, r3, r2, r3
 8008956:	0a9b      	lsrs	r3, r3, #10
 8008958:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800895e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008964:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a5f      	ldr	r2, [pc, #380]	; (8008af4 <HAL_DMA_IRQHandler+0x1b4>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d04a      	beq.n	8008a12 <HAL_DMA_IRQHandler+0xd2>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a5d      	ldr	r2, [pc, #372]	; (8008af8 <HAL_DMA_IRQHandler+0x1b8>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d045      	beq.n	8008a12 <HAL_DMA_IRQHandler+0xd2>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a5c      	ldr	r2, [pc, #368]	; (8008afc <HAL_DMA_IRQHandler+0x1bc>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d040      	beq.n	8008a12 <HAL_DMA_IRQHandler+0xd2>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a5a      	ldr	r2, [pc, #360]	; (8008b00 <HAL_DMA_IRQHandler+0x1c0>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d03b      	beq.n	8008a12 <HAL_DMA_IRQHandler+0xd2>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a59      	ldr	r2, [pc, #356]	; (8008b04 <HAL_DMA_IRQHandler+0x1c4>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d036      	beq.n	8008a12 <HAL_DMA_IRQHandler+0xd2>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a57      	ldr	r2, [pc, #348]	; (8008b08 <HAL_DMA_IRQHandler+0x1c8>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d031      	beq.n	8008a12 <HAL_DMA_IRQHandler+0xd2>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a56      	ldr	r2, [pc, #344]	; (8008b0c <HAL_DMA_IRQHandler+0x1cc>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d02c      	beq.n	8008a12 <HAL_DMA_IRQHandler+0xd2>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a54      	ldr	r2, [pc, #336]	; (8008b10 <HAL_DMA_IRQHandler+0x1d0>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d027      	beq.n	8008a12 <HAL_DMA_IRQHandler+0xd2>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a53      	ldr	r2, [pc, #332]	; (8008b14 <HAL_DMA_IRQHandler+0x1d4>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d022      	beq.n	8008a12 <HAL_DMA_IRQHandler+0xd2>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a51      	ldr	r2, [pc, #324]	; (8008b18 <HAL_DMA_IRQHandler+0x1d8>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d01d      	beq.n	8008a12 <HAL_DMA_IRQHandler+0xd2>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a50      	ldr	r2, [pc, #320]	; (8008b1c <HAL_DMA_IRQHandler+0x1dc>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d018      	beq.n	8008a12 <HAL_DMA_IRQHandler+0xd2>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a4e      	ldr	r2, [pc, #312]	; (8008b20 <HAL_DMA_IRQHandler+0x1e0>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d013      	beq.n	8008a12 <HAL_DMA_IRQHandler+0xd2>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a4d      	ldr	r2, [pc, #308]	; (8008b24 <HAL_DMA_IRQHandler+0x1e4>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d00e      	beq.n	8008a12 <HAL_DMA_IRQHandler+0xd2>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a4b      	ldr	r2, [pc, #300]	; (8008b28 <HAL_DMA_IRQHandler+0x1e8>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d009      	beq.n	8008a12 <HAL_DMA_IRQHandler+0xd2>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a4a      	ldr	r2, [pc, #296]	; (8008b2c <HAL_DMA_IRQHandler+0x1ec>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d004      	beq.n	8008a12 <HAL_DMA_IRQHandler+0xd2>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a48      	ldr	r2, [pc, #288]	; (8008b30 <HAL_DMA_IRQHandler+0x1f0>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d101      	bne.n	8008a16 <HAL_DMA_IRQHandler+0xd6>
 8008a12:	2301      	movs	r3, #1
 8008a14:	e000      	b.n	8008a18 <HAL_DMA_IRQHandler+0xd8>
 8008a16:	2300      	movs	r3, #0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f000 842b 	beq.w	8009274 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a22:	f003 031f 	and.w	r3, r3, #31
 8008a26:	2208      	movs	r2, #8
 8008a28:	409a      	lsls	r2, r3
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f000 80a2 	beq.w	8008b78 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a2e      	ldr	r2, [pc, #184]	; (8008af4 <HAL_DMA_IRQHandler+0x1b4>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d04a      	beq.n	8008ad4 <HAL_DMA_IRQHandler+0x194>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a2d      	ldr	r2, [pc, #180]	; (8008af8 <HAL_DMA_IRQHandler+0x1b8>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d045      	beq.n	8008ad4 <HAL_DMA_IRQHandler+0x194>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a2b      	ldr	r2, [pc, #172]	; (8008afc <HAL_DMA_IRQHandler+0x1bc>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d040      	beq.n	8008ad4 <HAL_DMA_IRQHandler+0x194>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a2a      	ldr	r2, [pc, #168]	; (8008b00 <HAL_DMA_IRQHandler+0x1c0>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d03b      	beq.n	8008ad4 <HAL_DMA_IRQHandler+0x194>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a28      	ldr	r2, [pc, #160]	; (8008b04 <HAL_DMA_IRQHandler+0x1c4>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d036      	beq.n	8008ad4 <HAL_DMA_IRQHandler+0x194>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a27      	ldr	r2, [pc, #156]	; (8008b08 <HAL_DMA_IRQHandler+0x1c8>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d031      	beq.n	8008ad4 <HAL_DMA_IRQHandler+0x194>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a25      	ldr	r2, [pc, #148]	; (8008b0c <HAL_DMA_IRQHandler+0x1cc>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d02c      	beq.n	8008ad4 <HAL_DMA_IRQHandler+0x194>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a24      	ldr	r2, [pc, #144]	; (8008b10 <HAL_DMA_IRQHandler+0x1d0>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d027      	beq.n	8008ad4 <HAL_DMA_IRQHandler+0x194>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a22      	ldr	r2, [pc, #136]	; (8008b14 <HAL_DMA_IRQHandler+0x1d4>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d022      	beq.n	8008ad4 <HAL_DMA_IRQHandler+0x194>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a21      	ldr	r2, [pc, #132]	; (8008b18 <HAL_DMA_IRQHandler+0x1d8>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d01d      	beq.n	8008ad4 <HAL_DMA_IRQHandler+0x194>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a1f      	ldr	r2, [pc, #124]	; (8008b1c <HAL_DMA_IRQHandler+0x1dc>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d018      	beq.n	8008ad4 <HAL_DMA_IRQHandler+0x194>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a1e      	ldr	r2, [pc, #120]	; (8008b20 <HAL_DMA_IRQHandler+0x1e0>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d013      	beq.n	8008ad4 <HAL_DMA_IRQHandler+0x194>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a1c      	ldr	r2, [pc, #112]	; (8008b24 <HAL_DMA_IRQHandler+0x1e4>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d00e      	beq.n	8008ad4 <HAL_DMA_IRQHandler+0x194>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a1b      	ldr	r2, [pc, #108]	; (8008b28 <HAL_DMA_IRQHandler+0x1e8>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d009      	beq.n	8008ad4 <HAL_DMA_IRQHandler+0x194>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a19      	ldr	r2, [pc, #100]	; (8008b2c <HAL_DMA_IRQHandler+0x1ec>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d004      	beq.n	8008ad4 <HAL_DMA_IRQHandler+0x194>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a18      	ldr	r2, [pc, #96]	; (8008b30 <HAL_DMA_IRQHandler+0x1f0>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d12f      	bne.n	8008b34 <HAL_DMA_IRQHandler+0x1f4>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 0304 	and.w	r3, r3, #4
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	bf14      	ite	ne
 8008ae2:	2301      	movne	r3, #1
 8008ae4:	2300      	moveq	r3, #0
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	e02e      	b.n	8008b48 <HAL_DMA_IRQHandler+0x208>
 8008aea:	bf00      	nop
 8008aec:	24000230 	.word	0x24000230
 8008af0:	1b4e81b5 	.word	0x1b4e81b5
 8008af4:	40020010 	.word	0x40020010
 8008af8:	40020028 	.word	0x40020028
 8008afc:	40020040 	.word	0x40020040
 8008b00:	40020058 	.word	0x40020058
 8008b04:	40020070 	.word	0x40020070
 8008b08:	40020088 	.word	0x40020088
 8008b0c:	400200a0 	.word	0x400200a0
 8008b10:	400200b8 	.word	0x400200b8
 8008b14:	40020410 	.word	0x40020410
 8008b18:	40020428 	.word	0x40020428
 8008b1c:	40020440 	.word	0x40020440
 8008b20:	40020458 	.word	0x40020458
 8008b24:	40020470 	.word	0x40020470
 8008b28:	40020488 	.word	0x40020488
 8008b2c:	400204a0 	.word	0x400204a0
 8008b30:	400204b8 	.word	0x400204b8
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 0308 	and.w	r3, r3, #8
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	bf14      	ite	ne
 8008b42:	2301      	movne	r3, #1
 8008b44:	2300      	moveq	r3, #0
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d015      	beq.n	8008b78 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f022 0204 	bic.w	r2, r2, #4
 8008b5a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b60:	f003 031f 	and.w	r3, r3, #31
 8008b64:	2208      	movs	r2, #8
 8008b66:	409a      	lsls	r2, r3
 8008b68:	6a3b      	ldr	r3, [r7, #32]
 8008b6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b70:	f043 0201 	orr.w	r2, r3, #1
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b7c:	f003 031f 	and.w	r3, r3, #31
 8008b80:	69ba      	ldr	r2, [r7, #24]
 8008b82:	fa22 f303 	lsr.w	r3, r2, r3
 8008b86:	f003 0301 	and.w	r3, r3, #1
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d06e      	beq.n	8008c6c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a69      	ldr	r2, [pc, #420]	; (8008d38 <HAL_DMA_IRQHandler+0x3f8>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d04a      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x2ee>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a67      	ldr	r2, [pc, #412]	; (8008d3c <HAL_DMA_IRQHandler+0x3fc>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d045      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x2ee>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a66      	ldr	r2, [pc, #408]	; (8008d40 <HAL_DMA_IRQHandler+0x400>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d040      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x2ee>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a64      	ldr	r2, [pc, #400]	; (8008d44 <HAL_DMA_IRQHandler+0x404>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d03b      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x2ee>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a63      	ldr	r2, [pc, #396]	; (8008d48 <HAL_DMA_IRQHandler+0x408>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d036      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x2ee>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a61      	ldr	r2, [pc, #388]	; (8008d4c <HAL_DMA_IRQHandler+0x40c>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d031      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x2ee>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a60      	ldr	r2, [pc, #384]	; (8008d50 <HAL_DMA_IRQHandler+0x410>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d02c      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x2ee>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a5e      	ldr	r2, [pc, #376]	; (8008d54 <HAL_DMA_IRQHandler+0x414>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d027      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x2ee>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a5d      	ldr	r2, [pc, #372]	; (8008d58 <HAL_DMA_IRQHandler+0x418>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d022      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x2ee>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a5b      	ldr	r2, [pc, #364]	; (8008d5c <HAL_DMA_IRQHandler+0x41c>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d01d      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x2ee>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a5a      	ldr	r2, [pc, #360]	; (8008d60 <HAL_DMA_IRQHandler+0x420>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d018      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x2ee>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a58      	ldr	r2, [pc, #352]	; (8008d64 <HAL_DMA_IRQHandler+0x424>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d013      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x2ee>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a57      	ldr	r2, [pc, #348]	; (8008d68 <HAL_DMA_IRQHandler+0x428>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d00e      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x2ee>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a55      	ldr	r2, [pc, #340]	; (8008d6c <HAL_DMA_IRQHandler+0x42c>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d009      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x2ee>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a54      	ldr	r2, [pc, #336]	; (8008d70 <HAL_DMA_IRQHandler+0x430>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d004      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x2ee>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a52      	ldr	r2, [pc, #328]	; (8008d74 <HAL_DMA_IRQHandler+0x434>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d10a      	bne.n	8008c44 <HAL_DMA_IRQHandler+0x304>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	695b      	ldr	r3, [r3, #20]
 8008c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	bf14      	ite	ne
 8008c3c:	2301      	movne	r3, #1
 8008c3e:	2300      	moveq	r3, #0
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	e003      	b.n	8008c4c <HAL_DMA_IRQHandler+0x30c>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00d      	beq.n	8008c6c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c54:	f003 031f 	and.w	r3, r3, #31
 8008c58:	2201      	movs	r2, #1
 8008c5a:	409a      	lsls	r2, r3
 8008c5c:	6a3b      	ldr	r3, [r7, #32]
 8008c5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c64:	f043 0202 	orr.w	r2, r3, #2
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c70:	f003 031f 	and.w	r3, r3, #31
 8008c74:	2204      	movs	r2, #4
 8008c76:	409a      	lsls	r2, r3
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 808f 	beq.w	8008da0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a2c      	ldr	r2, [pc, #176]	; (8008d38 <HAL_DMA_IRQHandler+0x3f8>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d04a      	beq.n	8008d22 <HAL_DMA_IRQHandler+0x3e2>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a2a      	ldr	r2, [pc, #168]	; (8008d3c <HAL_DMA_IRQHandler+0x3fc>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d045      	beq.n	8008d22 <HAL_DMA_IRQHandler+0x3e2>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a29      	ldr	r2, [pc, #164]	; (8008d40 <HAL_DMA_IRQHandler+0x400>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d040      	beq.n	8008d22 <HAL_DMA_IRQHandler+0x3e2>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a27      	ldr	r2, [pc, #156]	; (8008d44 <HAL_DMA_IRQHandler+0x404>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d03b      	beq.n	8008d22 <HAL_DMA_IRQHandler+0x3e2>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a26      	ldr	r2, [pc, #152]	; (8008d48 <HAL_DMA_IRQHandler+0x408>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d036      	beq.n	8008d22 <HAL_DMA_IRQHandler+0x3e2>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a24      	ldr	r2, [pc, #144]	; (8008d4c <HAL_DMA_IRQHandler+0x40c>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d031      	beq.n	8008d22 <HAL_DMA_IRQHandler+0x3e2>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a23      	ldr	r2, [pc, #140]	; (8008d50 <HAL_DMA_IRQHandler+0x410>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d02c      	beq.n	8008d22 <HAL_DMA_IRQHandler+0x3e2>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a21      	ldr	r2, [pc, #132]	; (8008d54 <HAL_DMA_IRQHandler+0x414>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d027      	beq.n	8008d22 <HAL_DMA_IRQHandler+0x3e2>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a20      	ldr	r2, [pc, #128]	; (8008d58 <HAL_DMA_IRQHandler+0x418>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d022      	beq.n	8008d22 <HAL_DMA_IRQHandler+0x3e2>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a1e      	ldr	r2, [pc, #120]	; (8008d5c <HAL_DMA_IRQHandler+0x41c>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d01d      	beq.n	8008d22 <HAL_DMA_IRQHandler+0x3e2>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a1d      	ldr	r2, [pc, #116]	; (8008d60 <HAL_DMA_IRQHandler+0x420>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d018      	beq.n	8008d22 <HAL_DMA_IRQHandler+0x3e2>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a1b      	ldr	r2, [pc, #108]	; (8008d64 <HAL_DMA_IRQHandler+0x424>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d013      	beq.n	8008d22 <HAL_DMA_IRQHandler+0x3e2>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a1a      	ldr	r2, [pc, #104]	; (8008d68 <HAL_DMA_IRQHandler+0x428>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d00e      	beq.n	8008d22 <HAL_DMA_IRQHandler+0x3e2>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a18      	ldr	r2, [pc, #96]	; (8008d6c <HAL_DMA_IRQHandler+0x42c>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d009      	beq.n	8008d22 <HAL_DMA_IRQHandler+0x3e2>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a17      	ldr	r2, [pc, #92]	; (8008d70 <HAL_DMA_IRQHandler+0x430>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d004      	beq.n	8008d22 <HAL_DMA_IRQHandler+0x3e2>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a15      	ldr	r2, [pc, #84]	; (8008d74 <HAL_DMA_IRQHandler+0x434>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d12a      	bne.n	8008d78 <HAL_DMA_IRQHandler+0x438>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 0302 	and.w	r3, r3, #2
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	bf14      	ite	ne
 8008d30:	2301      	movne	r3, #1
 8008d32:	2300      	moveq	r3, #0
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	e023      	b.n	8008d80 <HAL_DMA_IRQHandler+0x440>
 8008d38:	40020010 	.word	0x40020010
 8008d3c:	40020028 	.word	0x40020028
 8008d40:	40020040 	.word	0x40020040
 8008d44:	40020058 	.word	0x40020058
 8008d48:	40020070 	.word	0x40020070
 8008d4c:	40020088 	.word	0x40020088
 8008d50:	400200a0 	.word	0x400200a0
 8008d54:	400200b8 	.word	0x400200b8
 8008d58:	40020410 	.word	0x40020410
 8008d5c:	40020428 	.word	0x40020428
 8008d60:	40020440 	.word	0x40020440
 8008d64:	40020458 	.word	0x40020458
 8008d68:	40020470 	.word	0x40020470
 8008d6c:	40020488 	.word	0x40020488
 8008d70:	400204a0 	.word	0x400204a0
 8008d74:	400204b8 	.word	0x400204b8
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2300      	movs	r3, #0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d00d      	beq.n	8008da0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d88:	f003 031f 	and.w	r3, r3, #31
 8008d8c:	2204      	movs	r2, #4
 8008d8e:	409a      	lsls	r2, r3
 8008d90:	6a3b      	ldr	r3, [r7, #32]
 8008d92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d98:	f043 0204 	orr.w	r2, r3, #4
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008da4:	f003 031f 	and.w	r3, r3, #31
 8008da8:	2210      	movs	r2, #16
 8008daa:	409a      	lsls	r2, r3
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	4013      	ands	r3, r2
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f000 80a6 	beq.w	8008f02 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a85      	ldr	r2, [pc, #532]	; (8008fd0 <HAL_DMA_IRQHandler+0x690>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d04a      	beq.n	8008e56 <HAL_DMA_IRQHandler+0x516>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a83      	ldr	r2, [pc, #524]	; (8008fd4 <HAL_DMA_IRQHandler+0x694>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d045      	beq.n	8008e56 <HAL_DMA_IRQHandler+0x516>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a82      	ldr	r2, [pc, #520]	; (8008fd8 <HAL_DMA_IRQHandler+0x698>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d040      	beq.n	8008e56 <HAL_DMA_IRQHandler+0x516>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a80      	ldr	r2, [pc, #512]	; (8008fdc <HAL_DMA_IRQHandler+0x69c>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d03b      	beq.n	8008e56 <HAL_DMA_IRQHandler+0x516>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a7f      	ldr	r2, [pc, #508]	; (8008fe0 <HAL_DMA_IRQHandler+0x6a0>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d036      	beq.n	8008e56 <HAL_DMA_IRQHandler+0x516>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a7d      	ldr	r2, [pc, #500]	; (8008fe4 <HAL_DMA_IRQHandler+0x6a4>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d031      	beq.n	8008e56 <HAL_DMA_IRQHandler+0x516>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a7c      	ldr	r2, [pc, #496]	; (8008fe8 <HAL_DMA_IRQHandler+0x6a8>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d02c      	beq.n	8008e56 <HAL_DMA_IRQHandler+0x516>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a7a      	ldr	r2, [pc, #488]	; (8008fec <HAL_DMA_IRQHandler+0x6ac>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d027      	beq.n	8008e56 <HAL_DMA_IRQHandler+0x516>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a79      	ldr	r2, [pc, #484]	; (8008ff0 <HAL_DMA_IRQHandler+0x6b0>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d022      	beq.n	8008e56 <HAL_DMA_IRQHandler+0x516>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a77      	ldr	r2, [pc, #476]	; (8008ff4 <HAL_DMA_IRQHandler+0x6b4>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d01d      	beq.n	8008e56 <HAL_DMA_IRQHandler+0x516>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a76      	ldr	r2, [pc, #472]	; (8008ff8 <HAL_DMA_IRQHandler+0x6b8>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d018      	beq.n	8008e56 <HAL_DMA_IRQHandler+0x516>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a74      	ldr	r2, [pc, #464]	; (8008ffc <HAL_DMA_IRQHandler+0x6bc>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d013      	beq.n	8008e56 <HAL_DMA_IRQHandler+0x516>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a73      	ldr	r2, [pc, #460]	; (8009000 <HAL_DMA_IRQHandler+0x6c0>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d00e      	beq.n	8008e56 <HAL_DMA_IRQHandler+0x516>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a71      	ldr	r2, [pc, #452]	; (8009004 <HAL_DMA_IRQHandler+0x6c4>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d009      	beq.n	8008e56 <HAL_DMA_IRQHandler+0x516>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a70      	ldr	r2, [pc, #448]	; (8009008 <HAL_DMA_IRQHandler+0x6c8>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d004      	beq.n	8008e56 <HAL_DMA_IRQHandler+0x516>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a6e      	ldr	r2, [pc, #440]	; (800900c <HAL_DMA_IRQHandler+0x6cc>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d10a      	bne.n	8008e6c <HAL_DMA_IRQHandler+0x52c>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 0308 	and.w	r3, r3, #8
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	bf14      	ite	ne
 8008e64:	2301      	movne	r3, #1
 8008e66:	2300      	moveq	r3, #0
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	e009      	b.n	8008e80 <HAL_DMA_IRQHandler+0x540>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 0304 	and.w	r3, r3, #4
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	bf14      	ite	ne
 8008e7a:	2301      	movne	r3, #1
 8008e7c:	2300      	moveq	r3, #0
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d03e      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e88:	f003 031f 	and.w	r3, r3, #31
 8008e8c:	2210      	movs	r2, #16
 8008e8e:	409a      	lsls	r2, r3
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d018      	beq.n	8008ed4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d108      	bne.n	8008ec2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d024      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	4798      	blx	r3
 8008ec0:	e01f      	b.n	8008f02 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d01b      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	4798      	blx	r3
 8008ed2:	e016      	b.n	8008f02 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d107      	bne.n	8008ef2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f022 0208 	bic.w	r2, r2, #8
 8008ef0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f06:	f003 031f 	and.w	r3, r3, #31
 8008f0a:	2220      	movs	r2, #32
 8008f0c:	409a      	lsls	r2, r3
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	4013      	ands	r3, r2
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f000 8110 	beq.w	8009138 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a2c      	ldr	r2, [pc, #176]	; (8008fd0 <HAL_DMA_IRQHandler+0x690>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d04a      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x678>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a2b      	ldr	r2, [pc, #172]	; (8008fd4 <HAL_DMA_IRQHandler+0x694>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d045      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x678>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a29      	ldr	r2, [pc, #164]	; (8008fd8 <HAL_DMA_IRQHandler+0x698>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d040      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x678>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a28      	ldr	r2, [pc, #160]	; (8008fdc <HAL_DMA_IRQHandler+0x69c>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d03b      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x678>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a26      	ldr	r2, [pc, #152]	; (8008fe0 <HAL_DMA_IRQHandler+0x6a0>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d036      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x678>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a25      	ldr	r2, [pc, #148]	; (8008fe4 <HAL_DMA_IRQHandler+0x6a4>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d031      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x678>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a23      	ldr	r2, [pc, #140]	; (8008fe8 <HAL_DMA_IRQHandler+0x6a8>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d02c      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x678>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a22      	ldr	r2, [pc, #136]	; (8008fec <HAL_DMA_IRQHandler+0x6ac>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d027      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x678>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a20      	ldr	r2, [pc, #128]	; (8008ff0 <HAL_DMA_IRQHandler+0x6b0>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d022      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x678>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a1f      	ldr	r2, [pc, #124]	; (8008ff4 <HAL_DMA_IRQHandler+0x6b4>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d01d      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x678>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a1d      	ldr	r2, [pc, #116]	; (8008ff8 <HAL_DMA_IRQHandler+0x6b8>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d018      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x678>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a1c      	ldr	r2, [pc, #112]	; (8008ffc <HAL_DMA_IRQHandler+0x6bc>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d013      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x678>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a1a      	ldr	r2, [pc, #104]	; (8009000 <HAL_DMA_IRQHandler+0x6c0>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d00e      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x678>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a19      	ldr	r2, [pc, #100]	; (8009004 <HAL_DMA_IRQHandler+0x6c4>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d009      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x678>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a17      	ldr	r2, [pc, #92]	; (8009008 <HAL_DMA_IRQHandler+0x6c8>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d004      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x678>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a16      	ldr	r2, [pc, #88]	; (800900c <HAL_DMA_IRQHandler+0x6cc>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d12b      	bne.n	8009010 <HAL_DMA_IRQHandler+0x6d0>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 0310 	and.w	r3, r3, #16
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	bf14      	ite	ne
 8008fc6:	2301      	movne	r3, #1
 8008fc8:	2300      	moveq	r3, #0
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	e02a      	b.n	8009024 <HAL_DMA_IRQHandler+0x6e4>
 8008fce:	bf00      	nop
 8008fd0:	40020010 	.word	0x40020010
 8008fd4:	40020028 	.word	0x40020028
 8008fd8:	40020040 	.word	0x40020040
 8008fdc:	40020058 	.word	0x40020058
 8008fe0:	40020070 	.word	0x40020070
 8008fe4:	40020088 	.word	0x40020088
 8008fe8:	400200a0 	.word	0x400200a0
 8008fec:	400200b8 	.word	0x400200b8
 8008ff0:	40020410 	.word	0x40020410
 8008ff4:	40020428 	.word	0x40020428
 8008ff8:	40020440 	.word	0x40020440
 8008ffc:	40020458 	.word	0x40020458
 8009000:	40020470 	.word	0x40020470
 8009004:	40020488 	.word	0x40020488
 8009008:	400204a0 	.word	0x400204a0
 800900c:	400204b8 	.word	0x400204b8
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 0302 	and.w	r3, r3, #2
 800901a:	2b00      	cmp	r3, #0
 800901c:	bf14      	ite	ne
 800901e:	2301      	movne	r3, #1
 8009020:	2300      	moveq	r3, #0
 8009022:	b2db      	uxtb	r3, r3
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 8087 	beq.w	8009138 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800902e:	f003 031f 	and.w	r3, r3, #31
 8009032:	2220      	movs	r2, #32
 8009034:	409a      	lsls	r2, r3
 8009036:	6a3b      	ldr	r3, [r7, #32]
 8009038:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009040:	b2db      	uxtb	r3, r3
 8009042:	2b04      	cmp	r3, #4
 8009044:	d139      	bne.n	80090ba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f022 0216 	bic.w	r2, r2, #22
 8009054:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	695a      	ldr	r2, [r3, #20]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009064:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906a:	2b00      	cmp	r3, #0
 800906c:	d103      	bne.n	8009076 <HAL_DMA_IRQHandler+0x736>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009072:	2b00      	cmp	r3, #0
 8009074:	d007      	beq.n	8009086 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f022 0208 	bic.w	r2, r2, #8
 8009084:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800908a:	f003 031f 	and.w	r3, r3, #31
 800908e:	223f      	movs	r2, #63	; 0x3f
 8009090:	409a      	lsls	r2, r3
 8009092:	6a3b      	ldr	r3, [r7, #32]
 8009094:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	f000 834a 	beq.w	8009744 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	4798      	blx	r3
          }
          return;
 80090b8:	e344      	b.n	8009744 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d018      	beq.n	80090fa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d108      	bne.n	80090e8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d02c      	beq.n	8009138 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	4798      	blx	r3
 80090e6:	e027      	b.n	8009138 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d023      	beq.n	8009138 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	4798      	blx	r3
 80090f8:	e01e      	b.n	8009138 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10f      	bne.n	8009128 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f022 0210 	bic.w	r2, r2, #16
 8009116:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800912c:	2b00      	cmp	r3, #0
 800912e:	d003      	beq.n	8009138 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 8306 	beq.w	800974e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	2b00      	cmp	r3, #0
 800914c:	f000 8088 	beq.w	8009260 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2204      	movs	r2, #4
 8009154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a7a      	ldr	r2, [pc, #488]	; (8009348 <HAL_DMA_IRQHandler+0xa08>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d04a      	beq.n	80091f8 <HAL_DMA_IRQHandler+0x8b8>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a79      	ldr	r2, [pc, #484]	; (800934c <HAL_DMA_IRQHandler+0xa0c>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d045      	beq.n	80091f8 <HAL_DMA_IRQHandler+0x8b8>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a77      	ldr	r2, [pc, #476]	; (8009350 <HAL_DMA_IRQHandler+0xa10>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d040      	beq.n	80091f8 <HAL_DMA_IRQHandler+0x8b8>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a76      	ldr	r2, [pc, #472]	; (8009354 <HAL_DMA_IRQHandler+0xa14>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d03b      	beq.n	80091f8 <HAL_DMA_IRQHandler+0x8b8>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a74      	ldr	r2, [pc, #464]	; (8009358 <HAL_DMA_IRQHandler+0xa18>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d036      	beq.n	80091f8 <HAL_DMA_IRQHandler+0x8b8>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a73      	ldr	r2, [pc, #460]	; (800935c <HAL_DMA_IRQHandler+0xa1c>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d031      	beq.n	80091f8 <HAL_DMA_IRQHandler+0x8b8>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a71      	ldr	r2, [pc, #452]	; (8009360 <HAL_DMA_IRQHandler+0xa20>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d02c      	beq.n	80091f8 <HAL_DMA_IRQHandler+0x8b8>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a70      	ldr	r2, [pc, #448]	; (8009364 <HAL_DMA_IRQHandler+0xa24>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d027      	beq.n	80091f8 <HAL_DMA_IRQHandler+0x8b8>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a6e      	ldr	r2, [pc, #440]	; (8009368 <HAL_DMA_IRQHandler+0xa28>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d022      	beq.n	80091f8 <HAL_DMA_IRQHandler+0x8b8>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a6d      	ldr	r2, [pc, #436]	; (800936c <HAL_DMA_IRQHandler+0xa2c>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d01d      	beq.n	80091f8 <HAL_DMA_IRQHandler+0x8b8>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a6b      	ldr	r2, [pc, #428]	; (8009370 <HAL_DMA_IRQHandler+0xa30>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d018      	beq.n	80091f8 <HAL_DMA_IRQHandler+0x8b8>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a6a      	ldr	r2, [pc, #424]	; (8009374 <HAL_DMA_IRQHandler+0xa34>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d013      	beq.n	80091f8 <HAL_DMA_IRQHandler+0x8b8>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a68      	ldr	r2, [pc, #416]	; (8009378 <HAL_DMA_IRQHandler+0xa38>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d00e      	beq.n	80091f8 <HAL_DMA_IRQHandler+0x8b8>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a67      	ldr	r2, [pc, #412]	; (800937c <HAL_DMA_IRQHandler+0xa3c>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d009      	beq.n	80091f8 <HAL_DMA_IRQHandler+0x8b8>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a65      	ldr	r2, [pc, #404]	; (8009380 <HAL_DMA_IRQHandler+0xa40>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d004      	beq.n	80091f8 <HAL_DMA_IRQHandler+0x8b8>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a64      	ldr	r2, [pc, #400]	; (8009384 <HAL_DMA_IRQHandler+0xa44>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d108      	bne.n	800920a <HAL_DMA_IRQHandler+0x8ca>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f022 0201 	bic.w	r2, r2, #1
 8009206:	601a      	str	r2, [r3, #0]
 8009208:	e007      	b.n	800921a <HAL_DMA_IRQHandler+0x8da>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f022 0201 	bic.w	r2, r2, #1
 8009218:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	3301      	adds	r3, #1
 800921e:	60fb      	str	r3, [r7, #12]
 8009220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009222:	429a      	cmp	r2, r3
 8009224:	d307      	bcc.n	8009236 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 0301 	and.w	r3, r3, #1
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1f2      	bne.n	800921a <HAL_DMA_IRQHandler+0x8da>
 8009234:	e000      	b.n	8009238 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009236:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0301 	and.w	r3, r3, #1
 8009242:	2b00      	cmp	r3, #0
 8009244:	d004      	beq.n	8009250 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2203      	movs	r2, #3
 800924a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800924e:	e003      	b.n	8009258 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009264:	2b00      	cmp	r3, #0
 8009266:	f000 8272 	beq.w	800974e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	4798      	blx	r3
 8009272:	e26c      	b.n	800974e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a43      	ldr	r2, [pc, #268]	; (8009388 <HAL_DMA_IRQHandler+0xa48>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d022      	beq.n	80092c4 <HAL_DMA_IRQHandler+0x984>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a42      	ldr	r2, [pc, #264]	; (800938c <HAL_DMA_IRQHandler+0xa4c>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d01d      	beq.n	80092c4 <HAL_DMA_IRQHandler+0x984>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a40      	ldr	r2, [pc, #256]	; (8009390 <HAL_DMA_IRQHandler+0xa50>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d018      	beq.n	80092c4 <HAL_DMA_IRQHandler+0x984>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a3f      	ldr	r2, [pc, #252]	; (8009394 <HAL_DMA_IRQHandler+0xa54>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d013      	beq.n	80092c4 <HAL_DMA_IRQHandler+0x984>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a3d      	ldr	r2, [pc, #244]	; (8009398 <HAL_DMA_IRQHandler+0xa58>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d00e      	beq.n	80092c4 <HAL_DMA_IRQHandler+0x984>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a3c      	ldr	r2, [pc, #240]	; (800939c <HAL_DMA_IRQHandler+0xa5c>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d009      	beq.n	80092c4 <HAL_DMA_IRQHandler+0x984>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a3a      	ldr	r2, [pc, #232]	; (80093a0 <HAL_DMA_IRQHandler+0xa60>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d004      	beq.n	80092c4 <HAL_DMA_IRQHandler+0x984>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a39      	ldr	r2, [pc, #228]	; (80093a4 <HAL_DMA_IRQHandler+0xa64>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d101      	bne.n	80092c8 <HAL_DMA_IRQHandler+0x988>
 80092c4:	2301      	movs	r3, #1
 80092c6:	e000      	b.n	80092ca <HAL_DMA_IRQHandler+0x98a>
 80092c8:	2300      	movs	r3, #0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f000 823f 	beq.w	800974e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092dc:	f003 031f 	and.w	r3, r3, #31
 80092e0:	2204      	movs	r2, #4
 80092e2:	409a      	lsls	r2, r3
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	4013      	ands	r3, r2
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f000 80cd 	beq.w	8009488 <HAL_DMA_IRQHandler+0xb48>
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	f003 0304 	and.w	r3, r3, #4
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f000 80c7 	beq.w	8009488 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092fe:	f003 031f 	and.w	r3, r3, #31
 8009302:	2204      	movs	r2, #4
 8009304:	409a      	lsls	r2, r3
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d049      	beq.n	80093a8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800931a:	2b00      	cmp	r3, #0
 800931c:	d109      	bne.n	8009332 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009322:	2b00      	cmp	r3, #0
 8009324:	f000 8210 	beq.w	8009748 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009330:	e20a      	b.n	8009748 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009336:	2b00      	cmp	r3, #0
 8009338:	f000 8206 	beq.w	8009748 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009344:	e200      	b.n	8009748 <HAL_DMA_IRQHandler+0xe08>
 8009346:	bf00      	nop
 8009348:	40020010 	.word	0x40020010
 800934c:	40020028 	.word	0x40020028
 8009350:	40020040 	.word	0x40020040
 8009354:	40020058 	.word	0x40020058
 8009358:	40020070 	.word	0x40020070
 800935c:	40020088 	.word	0x40020088
 8009360:	400200a0 	.word	0x400200a0
 8009364:	400200b8 	.word	0x400200b8
 8009368:	40020410 	.word	0x40020410
 800936c:	40020428 	.word	0x40020428
 8009370:	40020440 	.word	0x40020440
 8009374:	40020458 	.word	0x40020458
 8009378:	40020470 	.word	0x40020470
 800937c:	40020488 	.word	0x40020488
 8009380:	400204a0 	.word	0x400204a0
 8009384:	400204b8 	.word	0x400204b8
 8009388:	58025408 	.word	0x58025408
 800938c:	5802541c 	.word	0x5802541c
 8009390:	58025430 	.word	0x58025430
 8009394:	58025444 	.word	0x58025444
 8009398:	58025458 	.word	0x58025458
 800939c:	5802546c 	.word	0x5802546c
 80093a0:	58025480 	.word	0x58025480
 80093a4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	f003 0320 	and.w	r3, r3, #32
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d160      	bne.n	8009474 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a8c      	ldr	r2, [pc, #560]	; (80095e8 <HAL_DMA_IRQHandler+0xca8>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d04a      	beq.n	8009452 <HAL_DMA_IRQHandler+0xb12>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a8a      	ldr	r2, [pc, #552]	; (80095ec <HAL_DMA_IRQHandler+0xcac>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d045      	beq.n	8009452 <HAL_DMA_IRQHandler+0xb12>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a89      	ldr	r2, [pc, #548]	; (80095f0 <HAL_DMA_IRQHandler+0xcb0>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d040      	beq.n	8009452 <HAL_DMA_IRQHandler+0xb12>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a87      	ldr	r2, [pc, #540]	; (80095f4 <HAL_DMA_IRQHandler+0xcb4>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d03b      	beq.n	8009452 <HAL_DMA_IRQHandler+0xb12>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a86      	ldr	r2, [pc, #536]	; (80095f8 <HAL_DMA_IRQHandler+0xcb8>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d036      	beq.n	8009452 <HAL_DMA_IRQHandler+0xb12>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a84      	ldr	r2, [pc, #528]	; (80095fc <HAL_DMA_IRQHandler+0xcbc>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d031      	beq.n	8009452 <HAL_DMA_IRQHandler+0xb12>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a83      	ldr	r2, [pc, #524]	; (8009600 <HAL_DMA_IRQHandler+0xcc0>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d02c      	beq.n	8009452 <HAL_DMA_IRQHandler+0xb12>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a81      	ldr	r2, [pc, #516]	; (8009604 <HAL_DMA_IRQHandler+0xcc4>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d027      	beq.n	8009452 <HAL_DMA_IRQHandler+0xb12>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a80      	ldr	r2, [pc, #512]	; (8009608 <HAL_DMA_IRQHandler+0xcc8>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d022      	beq.n	8009452 <HAL_DMA_IRQHandler+0xb12>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a7e      	ldr	r2, [pc, #504]	; (800960c <HAL_DMA_IRQHandler+0xccc>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d01d      	beq.n	8009452 <HAL_DMA_IRQHandler+0xb12>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a7d      	ldr	r2, [pc, #500]	; (8009610 <HAL_DMA_IRQHandler+0xcd0>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d018      	beq.n	8009452 <HAL_DMA_IRQHandler+0xb12>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a7b      	ldr	r2, [pc, #492]	; (8009614 <HAL_DMA_IRQHandler+0xcd4>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d013      	beq.n	8009452 <HAL_DMA_IRQHandler+0xb12>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a7a      	ldr	r2, [pc, #488]	; (8009618 <HAL_DMA_IRQHandler+0xcd8>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d00e      	beq.n	8009452 <HAL_DMA_IRQHandler+0xb12>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a78      	ldr	r2, [pc, #480]	; (800961c <HAL_DMA_IRQHandler+0xcdc>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d009      	beq.n	8009452 <HAL_DMA_IRQHandler+0xb12>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a77      	ldr	r2, [pc, #476]	; (8009620 <HAL_DMA_IRQHandler+0xce0>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d004      	beq.n	8009452 <HAL_DMA_IRQHandler+0xb12>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a75      	ldr	r2, [pc, #468]	; (8009624 <HAL_DMA_IRQHandler+0xce4>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d108      	bne.n	8009464 <HAL_DMA_IRQHandler+0xb24>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f022 0208 	bic.w	r2, r2, #8
 8009460:	601a      	str	r2, [r3, #0]
 8009462:	e007      	b.n	8009474 <HAL_DMA_IRQHandler+0xb34>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f022 0204 	bic.w	r2, r2, #4
 8009472:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009478:	2b00      	cmp	r3, #0
 800947a:	f000 8165 	beq.w	8009748 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009486:	e15f      	b.n	8009748 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800948c:	f003 031f 	and.w	r3, r3, #31
 8009490:	2202      	movs	r2, #2
 8009492:	409a      	lsls	r2, r3
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	4013      	ands	r3, r2
 8009498:	2b00      	cmp	r3, #0
 800949a:	f000 80c5 	beq.w	8009628 <HAL_DMA_IRQHandler+0xce8>
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	f003 0302 	and.w	r3, r3, #2
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f000 80bf 	beq.w	8009628 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094ae:	f003 031f 	and.w	r3, r3, #31
 80094b2:	2202      	movs	r2, #2
 80094b4:	409a      	lsls	r2, r3
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d018      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d109      	bne.n	80094e2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f000 813a 	beq.w	800974c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80094e0:	e134      	b.n	800974c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	f000 8130 	beq.w	800974c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80094f4:	e12a      	b.n	800974c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	f003 0320 	and.w	r3, r3, #32
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d168      	bne.n	80095d2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a38      	ldr	r2, [pc, #224]	; (80095e8 <HAL_DMA_IRQHandler+0xca8>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d04a      	beq.n	80095a0 <HAL_DMA_IRQHandler+0xc60>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a37      	ldr	r2, [pc, #220]	; (80095ec <HAL_DMA_IRQHandler+0xcac>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d045      	beq.n	80095a0 <HAL_DMA_IRQHandler+0xc60>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a35      	ldr	r2, [pc, #212]	; (80095f0 <HAL_DMA_IRQHandler+0xcb0>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d040      	beq.n	80095a0 <HAL_DMA_IRQHandler+0xc60>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a34      	ldr	r2, [pc, #208]	; (80095f4 <HAL_DMA_IRQHandler+0xcb4>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d03b      	beq.n	80095a0 <HAL_DMA_IRQHandler+0xc60>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a32      	ldr	r2, [pc, #200]	; (80095f8 <HAL_DMA_IRQHandler+0xcb8>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d036      	beq.n	80095a0 <HAL_DMA_IRQHandler+0xc60>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a31      	ldr	r2, [pc, #196]	; (80095fc <HAL_DMA_IRQHandler+0xcbc>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d031      	beq.n	80095a0 <HAL_DMA_IRQHandler+0xc60>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a2f      	ldr	r2, [pc, #188]	; (8009600 <HAL_DMA_IRQHandler+0xcc0>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d02c      	beq.n	80095a0 <HAL_DMA_IRQHandler+0xc60>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a2e      	ldr	r2, [pc, #184]	; (8009604 <HAL_DMA_IRQHandler+0xcc4>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d027      	beq.n	80095a0 <HAL_DMA_IRQHandler+0xc60>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a2c      	ldr	r2, [pc, #176]	; (8009608 <HAL_DMA_IRQHandler+0xcc8>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d022      	beq.n	80095a0 <HAL_DMA_IRQHandler+0xc60>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a2b      	ldr	r2, [pc, #172]	; (800960c <HAL_DMA_IRQHandler+0xccc>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d01d      	beq.n	80095a0 <HAL_DMA_IRQHandler+0xc60>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a29      	ldr	r2, [pc, #164]	; (8009610 <HAL_DMA_IRQHandler+0xcd0>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d018      	beq.n	80095a0 <HAL_DMA_IRQHandler+0xc60>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a28      	ldr	r2, [pc, #160]	; (8009614 <HAL_DMA_IRQHandler+0xcd4>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d013      	beq.n	80095a0 <HAL_DMA_IRQHandler+0xc60>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a26      	ldr	r2, [pc, #152]	; (8009618 <HAL_DMA_IRQHandler+0xcd8>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d00e      	beq.n	80095a0 <HAL_DMA_IRQHandler+0xc60>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a25      	ldr	r2, [pc, #148]	; (800961c <HAL_DMA_IRQHandler+0xcdc>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d009      	beq.n	80095a0 <HAL_DMA_IRQHandler+0xc60>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a23      	ldr	r2, [pc, #140]	; (8009620 <HAL_DMA_IRQHandler+0xce0>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d004      	beq.n	80095a0 <HAL_DMA_IRQHandler+0xc60>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a22      	ldr	r2, [pc, #136]	; (8009624 <HAL_DMA_IRQHandler+0xce4>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d108      	bne.n	80095b2 <HAL_DMA_IRQHandler+0xc72>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f022 0214 	bic.w	r2, r2, #20
 80095ae:	601a      	str	r2, [r3, #0]
 80095b0:	e007      	b.n	80095c2 <HAL_DMA_IRQHandler+0xc82>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f022 020a 	bic.w	r2, r2, #10
 80095c0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f000 80b8 	beq.w	800974c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80095e4:	e0b2      	b.n	800974c <HAL_DMA_IRQHandler+0xe0c>
 80095e6:	bf00      	nop
 80095e8:	40020010 	.word	0x40020010
 80095ec:	40020028 	.word	0x40020028
 80095f0:	40020040 	.word	0x40020040
 80095f4:	40020058 	.word	0x40020058
 80095f8:	40020070 	.word	0x40020070
 80095fc:	40020088 	.word	0x40020088
 8009600:	400200a0 	.word	0x400200a0
 8009604:	400200b8 	.word	0x400200b8
 8009608:	40020410 	.word	0x40020410
 800960c:	40020428 	.word	0x40020428
 8009610:	40020440 	.word	0x40020440
 8009614:	40020458 	.word	0x40020458
 8009618:	40020470 	.word	0x40020470
 800961c:	40020488 	.word	0x40020488
 8009620:	400204a0 	.word	0x400204a0
 8009624:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800962c:	f003 031f 	and.w	r3, r3, #31
 8009630:	2208      	movs	r2, #8
 8009632:	409a      	lsls	r2, r3
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	4013      	ands	r3, r2
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 8088 	beq.w	800974e <HAL_DMA_IRQHandler+0xe0e>
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	f003 0308 	and.w	r3, r3, #8
 8009644:	2b00      	cmp	r3, #0
 8009646:	f000 8082 	beq.w	800974e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a41      	ldr	r2, [pc, #260]	; (8009754 <HAL_DMA_IRQHandler+0xe14>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d04a      	beq.n	80096ea <HAL_DMA_IRQHandler+0xdaa>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a3f      	ldr	r2, [pc, #252]	; (8009758 <HAL_DMA_IRQHandler+0xe18>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d045      	beq.n	80096ea <HAL_DMA_IRQHandler+0xdaa>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a3e      	ldr	r2, [pc, #248]	; (800975c <HAL_DMA_IRQHandler+0xe1c>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d040      	beq.n	80096ea <HAL_DMA_IRQHandler+0xdaa>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a3c      	ldr	r2, [pc, #240]	; (8009760 <HAL_DMA_IRQHandler+0xe20>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d03b      	beq.n	80096ea <HAL_DMA_IRQHandler+0xdaa>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a3b      	ldr	r2, [pc, #236]	; (8009764 <HAL_DMA_IRQHandler+0xe24>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d036      	beq.n	80096ea <HAL_DMA_IRQHandler+0xdaa>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a39      	ldr	r2, [pc, #228]	; (8009768 <HAL_DMA_IRQHandler+0xe28>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d031      	beq.n	80096ea <HAL_DMA_IRQHandler+0xdaa>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a38      	ldr	r2, [pc, #224]	; (800976c <HAL_DMA_IRQHandler+0xe2c>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d02c      	beq.n	80096ea <HAL_DMA_IRQHandler+0xdaa>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a36      	ldr	r2, [pc, #216]	; (8009770 <HAL_DMA_IRQHandler+0xe30>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d027      	beq.n	80096ea <HAL_DMA_IRQHandler+0xdaa>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a35      	ldr	r2, [pc, #212]	; (8009774 <HAL_DMA_IRQHandler+0xe34>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d022      	beq.n	80096ea <HAL_DMA_IRQHandler+0xdaa>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a33      	ldr	r2, [pc, #204]	; (8009778 <HAL_DMA_IRQHandler+0xe38>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d01d      	beq.n	80096ea <HAL_DMA_IRQHandler+0xdaa>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a32      	ldr	r2, [pc, #200]	; (800977c <HAL_DMA_IRQHandler+0xe3c>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d018      	beq.n	80096ea <HAL_DMA_IRQHandler+0xdaa>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a30      	ldr	r2, [pc, #192]	; (8009780 <HAL_DMA_IRQHandler+0xe40>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d013      	beq.n	80096ea <HAL_DMA_IRQHandler+0xdaa>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a2f      	ldr	r2, [pc, #188]	; (8009784 <HAL_DMA_IRQHandler+0xe44>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d00e      	beq.n	80096ea <HAL_DMA_IRQHandler+0xdaa>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a2d      	ldr	r2, [pc, #180]	; (8009788 <HAL_DMA_IRQHandler+0xe48>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d009      	beq.n	80096ea <HAL_DMA_IRQHandler+0xdaa>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a2c      	ldr	r2, [pc, #176]	; (800978c <HAL_DMA_IRQHandler+0xe4c>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d004      	beq.n	80096ea <HAL_DMA_IRQHandler+0xdaa>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a2a      	ldr	r2, [pc, #168]	; (8009790 <HAL_DMA_IRQHandler+0xe50>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d108      	bne.n	80096fc <HAL_DMA_IRQHandler+0xdbc>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f022 021c 	bic.w	r2, r2, #28
 80096f8:	601a      	str	r2, [r3, #0]
 80096fa:	e007      	b.n	800970c <HAL_DMA_IRQHandler+0xdcc>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f022 020e 	bic.w	r2, r2, #14
 800970a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009710:	f003 031f 	and.w	r3, r3, #31
 8009714:	2201      	movs	r2, #1
 8009716:	409a      	lsls	r2, r3
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009736:	2b00      	cmp	r3, #0
 8009738:	d009      	beq.n	800974e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	4798      	blx	r3
 8009742:	e004      	b.n	800974e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009744:	bf00      	nop
 8009746:	e002      	b.n	800974e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009748:	bf00      	nop
 800974a:	e000      	b.n	800974e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800974c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800974e:	3728      	adds	r7, #40	; 0x28
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	40020010 	.word	0x40020010
 8009758:	40020028 	.word	0x40020028
 800975c:	40020040 	.word	0x40020040
 8009760:	40020058 	.word	0x40020058
 8009764:	40020070 	.word	0x40020070
 8009768:	40020088 	.word	0x40020088
 800976c:	400200a0 	.word	0x400200a0
 8009770:	400200b8 	.word	0x400200b8
 8009774:	40020410 	.word	0x40020410
 8009778:	40020428 	.word	0x40020428
 800977c:	40020440 	.word	0x40020440
 8009780:	40020458 	.word	0x40020458
 8009784:	40020470 	.word	0x40020470
 8009788:	40020488 	.word	0x40020488
 800978c:	400204a0 	.word	0x400204a0
 8009790:	400204b8 	.word	0x400204b8

08009794 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009794:	b480      	push	{r7}
 8009796:	b087      	sub	sp, #28
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
 80097a0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ac:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a84      	ldr	r2, [pc, #528]	; (80099c4 <DMA_SetConfig+0x230>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d072      	beq.n	800989e <DMA_SetConfig+0x10a>
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a82      	ldr	r2, [pc, #520]	; (80099c8 <DMA_SetConfig+0x234>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d06d      	beq.n	800989e <DMA_SetConfig+0x10a>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a81      	ldr	r2, [pc, #516]	; (80099cc <DMA_SetConfig+0x238>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d068      	beq.n	800989e <DMA_SetConfig+0x10a>
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a7f      	ldr	r2, [pc, #508]	; (80099d0 <DMA_SetConfig+0x23c>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d063      	beq.n	800989e <DMA_SetConfig+0x10a>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a7e      	ldr	r2, [pc, #504]	; (80099d4 <DMA_SetConfig+0x240>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d05e      	beq.n	800989e <DMA_SetConfig+0x10a>
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a7c      	ldr	r2, [pc, #496]	; (80099d8 <DMA_SetConfig+0x244>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d059      	beq.n	800989e <DMA_SetConfig+0x10a>
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a7b      	ldr	r2, [pc, #492]	; (80099dc <DMA_SetConfig+0x248>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d054      	beq.n	800989e <DMA_SetConfig+0x10a>
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a79      	ldr	r2, [pc, #484]	; (80099e0 <DMA_SetConfig+0x24c>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d04f      	beq.n	800989e <DMA_SetConfig+0x10a>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a78      	ldr	r2, [pc, #480]	; (80099e4 <DMA_SetConfig+0x250>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d04a      	beq.n	800989e <DMA_SetConfig+0x10a>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a76      	ldr	r2, [pc, #472]	; (80099e8 <DMA_SetConfig+0x254>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d045      	beq.n	800989e <DMA_SetConfig+0x10a>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a75      	ldr	r2, [pc, #468]	; (80099ec <DMA_SetConfig+0x258>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d040      	beq.n	800989e <DMA_SetConfig+0x10a>
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a73      	ldr	r2, [pc, #460]	; (80099f0 <DMA_SetConfig+0x25c>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d03b      	beq.n	800989e <DMA_SetConfig+0x10a>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a72      	ldr	r2, [pc, #456]	; (80099f4 <DMA_SetConfig+0x260>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d036      	beq.n	800989e <DMA_SetConfig+0x10a>
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a70      	ldr	r2, [pc, #448]	; (80099f8 <DMA_SetConfig+0x264>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d031      	beq.n	800989e <DMA_SetConfig+0x10a>
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a6f      	ldr	r2, [pc, #444]	; (80099fc <DMA_SetConfig+0x268>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d02c      	beq.n	800989e <DMA_SetConfig+0x10a>
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a6d      	ldr	r2, [pc, #436]	; (8009a00 <DMA_SetConfig+0x26c>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d027      	beq.n	800989e <DMA_SetConfig+0x10a>
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a6c      	ldr	r2, [pc, #432]	; (8009a04 <DMA_SetConfig+0x270>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d022      	beq.n	800989e <DMA_SetConfig+0x10a>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a6a      	ldr	r2, [pc, #424]	; (8009a08 <DMA_SetConfig+0x274>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d01d      	beq.n	800989e <DMA_SetConfig+0x10a>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a69      	ldr	r2, [pc, #420]	; (8009a0c <DMA_SetConfig+0x278>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d018      	beq.n	800989e <DMA_SetConfig+0x10a>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a67      	ldr	r2, [pc, #412]	; (8009a10 <DMA_SetConfig+0x27c>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d013      	beq.n	800989e <DMA_SetConfig+0x10a>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a66      	ldr	r2, [pc, #408]	; (8009a14 <DMA_SetConfig+0x280>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d00e      	beq.n	800989e <DMA_SetConfig+0x10a>
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a64      	ldr	r2, [pc, #400]	; (8009a18 <DMA_SetConfig+0x284>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d009      	beq.n	800989e <DMA_SetConfig+0x10a>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a63      	ldr	r2, [pc, #396]	; (8009a1c <DMA_SetConfig+0x288>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d004      	beq.n	800989e <DMA_SetConfig+0x10a>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a61      	ldr	r2, [pc, #388]	; (8009a20 <DMA_SetConfig+0x28c>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d101      	bne.n	80098a2 <DMA_SetConfig+0x10e>
 800989e:	2301      	movs	r3, #1
 80098a0:	e000      	b.n	80098a4 <DMA_SetConfig+0x110>
 80098a2:	2300      	movs	r3, #0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00d      	beq.n	80098c4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80098b0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d004      	beq.n	80098c4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80098c2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a3e      	ldr	r2, [pc, #248]	; (80099c4 <DMA_SetConfig+0x230>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d04a      	beq.n	8009964 <DMA_SetConfig+0x1d0>
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a3d      	ldr	r2, [pc, #244]	; (80099c8 <DMA_SetConfig+0x234>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d045      	beq.n	8009964 <DMA_SetConfig+0x1d0>
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a3b      	ldr	r2, [pc, #236]	; (80099cc <DMA_SetConfig+0x238>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d040      	beq.n	8009964 <DMA_SetConfig+0x1d0>
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a3a      	ldr	r2, [pc, #232]	; (80099d0 <DMA_SetConfig+0x23c>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d03b      	beq.n	8009964 <DMA_SetConfig+0x1d0>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a38      	ldr	r2, [pc, #224]	; (80099d4 <DMA_SetConfig+0x240>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d036      	beq.n	8009964 <DMA_SetConfig+0x1d0>
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a37      	ldr	r2, [pc, #220]	; (80099d8 <DMA_SetConfig+0x244>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d031      	beq.n	8009964 <DMA_SetConfig+0x1d0>
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a35      	ldr	r2, [pc, #212]	; (80099dc <DMA_SetConfig+0x248>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d02c      	beq.n	8009964 <DMA_SetConfig+0x1d0>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a34      	ldr	r2, [pc, #208]	; (80099e0 <DMA_SetConfig+0x24c>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d027      	beq.n	8009964 <DMA_SetConfig+0x1d0>
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a32      	ldr	r2, [pc, #200]	; (80099e4 <DMA_SetConfig+0x250>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d022      	beq.n	8009964 <DMA_SetConfig+0x1d0>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a31      	ldr	r2, [pc, #196]	; (80099e8 <DMA_SetConfig+0x254>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d01d      	beq.n	8009964 <DMA_SetConfig+0x1d0>
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a2f      	ldr	r2, [pc, #188]	; (80099ec <DMA_SetConfig+0x258>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d018      	beq.n	8009964 <DMA_SetConfig+0x1d0>
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a2e      	ldr	r2, [pc, #184]	; (80099f0 <DMA_SetConfig+0x25c>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d013      	beq.n	8009964 <DMA_SetConfig+0x1d0>
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a2c      	ldr	r2, [pc, #176]	; (80099f4 <DMA_SetConfig+0x260>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d00e      	beq.n	8009964 <DMA_SetConfig+0x1d0>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a2b      	ldr	r2, [pc, #172]	; (80099f8 <DMA_SetConfig+0x264>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d009      	beq.n	8009964 <DMA_SetConfig+0x1d0>
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a29      	ldr	r2, [pc, #164]	; (80099fc <DMA_SetConfig+0x268>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d004      	beq.n	8009964 <DMA_SetConfig+0x1d0>
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a28      	ldr	r2, [pc, #160]	; (8009a00 <DMA_SetConfig+0x26c>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d101      	bne.n	8009968 <DMA_SetConfig+0x1d4>
 8009964:	2301      	movs	r3, #1
 8009966:	e000      	b.n	800996a <DMA_SetConfig+0x1d6>
 8009968:	2300      	movs	r3, #0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d05a      	beq.n	8009a24 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009972:	f003 031f 	and.w	r3, r3, #31
 8009976:	223f      	movs	r2, #63	; 0x3f
 8009978:	409a      	lsls	r2, r3
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800998c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	2b40      	cmp	r3, #64	; 0x40
 800999c:	d108      	bne.n	80099b0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80099ae:	e087      	b.n	8009ac0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	68ba      	ldr	r2, [r7, #8]
 80099b6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	60da      	str	r2, [r3, #12]
}
 80099c0:	e07e      	b.n	8009ac0 <DMA_SetConfig+0x32c>
 80099c2:	bf00      	nop
 80099c4:	40020010 	.word	0x40020010
 80099c8:	40020028 	.word	0x40020028
 80099cc:	40020040 	.word	0x40020040
 80099d0:	40020058 	.word	0x40020058
 80099d4:	40020070 	.word	0x40020070
 80099d8:	40020088 	.word	0x40020088
 80099dc:	400200a0 	.word	0x400200a0
 80099e0:	400200b8 	.word	0x400200b8
 80099e4:	40020410 	.word	0x40020410
 80099e8:	40020428 	.word	0x40020428
 80099ec:	40020440 	.word	0x40020440
 80099f0:	40020458 	.word	0x40020458
 80099f4:	40020470 	.word	0x40020470
 80099f8:	40020488 	.word	0x40020488
 80099fc:	400204a0 	.word	0x400204a0
 8009a00:	400204b8 	.word	0x400204b8
 8009a04:	58025408 	.word	0x58025408
 8009a08:	5802541c 	.word	0x5802541c
 8009a0c:	58025430 	.word	0x58025430
 8009a10:	58025444 	.word	0x58025444
 8009a14:	58025458 	.word	0x58025458
 8009a18:	5802546c 	.word	0x5802546c
 8009a1c:	58025480 	.word	0x58025480
 8009a20:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a28      	ldr	r2, [pc, #160]	; (8009acc <DMA_SetConfig+0x338>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d022      	beq.n	8009a74 <DMA_SetConfig+0x2e0>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a27      	ldr	r2, [pc, #156]	; (8009ad0 <DMA_SetConfig+0x33c>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d01d      	beq.n	8009a74 <DMA_SetConfig+0x2e0>
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a25      	ldr	r2, [pc, #148]	; (8009ad4 <DMA_SetConfig+0x340>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d018      	beq.n	8009a74 <DMA_SetConfig+0x2e0>
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a24      	ldr	r2, [pc, #144]	; (8009ad8 <DMA_SetConfig+0x344>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d013      	beq.n	8009a74 <DMA_SetConfig+0x2e0>
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a22      	ldr	r2, [pc, #136]	; (8009adc <DMA_SetConfig+0x348>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d00e      	beq.n	8009a74 <DMA_SetConfig+0x2e0>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a21      	ldr	r2, [pc, #132]	; (8009ae0 <DMA_SetConfig+0x34c>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d009      	beq.n	8009a74 <DMA_SetConfig+0x2e0>
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a1f      	ldr	r2, [pc, #124]	; (8009ae4 <DMA_SetConfig+0x350>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d004      	beq.n	8009a74 <DMA_SetConfig+0x2e0>
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a1e      	ldr	r2, [pc, #120]	; (8009ae8 <DMA_SetConfig+0x354>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d101      	bne.n	8009a78 <DMA_SetConfig+0x2e4>
 8009a74:	2301      	movs	r3, #1
 8009a76:	e000      	b.n	8009a7a <DMA_SetConfig+0x2e6>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d020      	beq.n	8009ac0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a82:	f003 031f 	and.w	r3, r3, #31
 8009a86:	2201      	movs	r2, #1
 8009a88:	409a      	lsls	r2, r3
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	2b40      	cmp	r3, #64	; 0x40
 8009a9c:	d108      	bne.n	8009ab0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	68ba      	ldr	r2, [r7, #8]
 8009aac:	60da      	str	r2, [r3, #12]
}
 8009aae:	e007      	b.n	8009ac0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68ba      	ldr	r2, [r7, #8]
 8009ab6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	60da      	str	r2, [r3, #12]
}
 8009ac0:	bf00      	nop
 8009ac2:	371c      	adds	r7, #28
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr
 8009acc:	58025408 	.word	0x58025408
 8009ad0:	5802541c 	.word	0x5802541c
 8009ad4:	58025430 	.word	0x58025430
 8009ad8:	58025444 	.word	0x58025444
 8009adc:	58025458 	.word	0x58025458
 8009ae0:	5802546c 	.word	0x5802546c
 8009ae4:	58025480 	.word	0x58025480
 8009ae8:	58025494 	.word	0x58025494

08009aec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a42      	ldr	r2, [pc, #264]	; (8009c04 <DMA_CalcBaseAndBitshift+0x118>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d04a      	beq.n	8009b94 <DMA_CalcBaseAndBitshift+0xa8>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a41      	ldr	r2, [pc, #260]	; (8009c08 <DMA_CalcBaseAndBitshift+0x11c>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d045      	beq.n	8009b94 <DMA_CalcBaseAndBitshift+0xa8>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a3f      	ldr	r2, [pc, #252]	; (8009c0c <DMA_CalcBaseAndBitshift+0x120>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d040      	beq.n	8009b94 <DMA_CalcBaseAndBitshift+0xa8>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a3e      	ldr	r2, [pc, #248]	; (8009c10 <DMA_CalcBaseAndBitshift+0x124>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d03b      	beq.n	8009b94 <DMA_CalcBaseAndBitshift+0xa8>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a3c      	ldr	r2, [pc, #240]	; (8009c14 <DMA_CalcBaseAndBitshift+0x128>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d036      	beq.n	8009b94 <DMA_CalcBaseAndBitshift+0xa8>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a3b      	ldr	r2, [pc, #236]	; (8009c18 <DMA_CalcBaseAndBitshift+0x12c>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d031      	beq.n	8009b94 <DMA_CalcBaseAndBitshift+0xa8>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a39      	ldr	r2, [pc, #228]	; (8009c1c <DMA_CalcBaseAndBitshift+0x130>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d02c      	beq.n	8009b94 <DMA_CalcBaseAndBitshift+0xa8>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a38      	ldr	r2, [pc, #224]	; (8009c20 <DMA_CalcBaseAndBitshift+0x134>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d027      	beq.n	8009b94 <DMA_CalcBaseAndBitshift+0xa8>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a36      	ldr	r2, [pc, #216]	; (8009c24 <DMA_CalcBaseAndBitshift+0x138>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d022      	beq.n	8009b94 <DMA_CalcBaseAndBitshift+0xa8>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a35      	ldr	r2, [pc, #212]	; (8009c28 <DMA_CalcBaseAndBitshift+0x13c>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d01d      	beq.n	8009b94 <DMA_CalcBaseAndBitshift+0xa8>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a33      	ldr	r2, [pc, #204]	; (8009c2c <DMA_CalcBaseAndBitshift+0x140>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d018      	beq.n	8009b94 <DMA_CalcBaseAndBitshift+0xa8>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a32      	ldr	r2, [pc, #200]	; (8009c30 <DMA_CalcBaseAndBitshift+0x144>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d013      	beq.n	8009b94 <DMA_CalcBaseAndBitshift+0xa8>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a30      	ldr	r2, [pc, #192]	; (8009c34 <DMA_CalcBaseAndBitshift+0x148>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d00e      	beq.n	8009b94 <DMA_CalcBaseAndBitshift+0xa8>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a2f      	ldr	r2, [pc, #188]	; (8009c38 <DMA_CalcBaseAndBitshift+0x14c>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d009      	beq.n	8009b94 <DMA_CalcBaseAndBitshift+0xa8>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a2d      	ldr	r2, [pc, #180]	; (8009c3c <DMA_CalcBaseAndBitshift+0x150>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d004      	beq.n	8009b94 <DMA_CalcBaseAndBitshift+0xa8>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a2c      	ldr	r2, [pc, #176]	; (8009c40 <DMA_CalcBaseAndBitshift+0x154>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d101      	bne.n	8009b98 <DMA_CalcBaseAndBitshift+0xac>
 8009b94:	2301      	movs	r3, #1
 8009b96:	e000      	b.n	8009b9a <DMA_CalcBaseAndBitshift+0xae>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d024      	beq.n	8009be8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	3b10      	subs	r3, #16
 8009ba6:	4a27      	ldr	r2, [pc, #156]	; (8009c44 <DMA_CalcBaseAndBitshift+0x158>)
 8009ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8009bac:	091b      	lsrs	r3, r3, #4
 8009bae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f003 0307 	and.w	r3, r3, #7
 8009bb6:	4a24      	ldr	r2, [pc, #144]	; (8009c48 <DMA_CalcBaseAndBitshift+0x15c>)
 8009bb8:	5cd3      	ldrb	r3, [r2, r3]
 8009bba:	461a      	mov	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2b03      	cmp	r3, #3
 8009bc4:	d908      	bls.n	8009bd8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	4b1f      	ldr	r3, [pc, #124]	; (8009c4c <DMA_CalcBaseAndBitshift+0x160>)
 8009bce:	4013      	ands	r3, r2
 8009bd0:	1d1a      	adds	r2, r3, #4
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	659a      	str	r2, [r3, #88]	; 0x58
 8009bd6:	e00d      	b.n	8009bf4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	4b1b      	ldr	r3, [pc, #108]	; (8009c4c <DMA_CalcBaseAndBitshift+0x160>)
 8009be0:	4013      	ands	r3, r2
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	6593      	str	r3, [r2, #88]	; 0x58
 8009be6:	e005      	b.n	8009bf4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3714      	adds	r7, #20
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr
 8009c04:	40020010 	.word	0x40020010
 8009c08:	40020028 	.word	0x40020028
 8009c0c:	40020040 	.word	0x40020040
 8009c10:	40020058 	.word	0x40020058
 8009c14:	40020070 	.word	0x40020070
 8009c18:	40020088 	.word	0x40020088
 8009c1c:	400200a0 	.word	0x400200a0
 8009c20:	400200b8 	.word	0x400200b8
 8009c24:	40020410 	.word	0x40020410
 8009c28:	40020428 	.word	0x40020428
 8009c2c:	40020440 	.word	0x40020440
 8009c30:	40020458 	.word	0x40020458
 8009c34:	40020470 	.word	0x40020470
 8009c38:	40020488 	.word	0x40020488
 8009c3c:	400204a0 	.word	0x400204a0
 8009c40:	400204b8 	.word	0x400204b8
 8009c44:	aaaaaaab 	.word	0xaaaaaaab
 8009c48:	08014c14 	.word	0x08014c14
 8009c4c:	fffffc00 	.word	0xfffffc00

08009c50 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	699b      	ldr	r3, [r3, #24]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d120      	bne.n	8009ca6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c68:	2b03      	cmp	r3, #3
 8009c6a:	d858      	bhi.n	8009d1e <DMA_CheckFifoParam+0xce>
 8009c6c:	a201      	add	r2, pc, #4	; (adr r2, 8009c74 <DMA_CheckFifoParam+0x24>)
 8009c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c72:	bf00      	nop
 8009c74:	08009c85 	.word	0x08009c85
 8009c78:	08009c97 	.word	0x08009c97
 8009c7c:	08009c85 	.word	0x08009c85
 8009c80:	08009d1f 	.word	0x08009d1f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d048      	beq.n	8009d22 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009c94:	e045      	b.n	8009d22 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009c9e:	d142      	bne.n	8009d26 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009ca4:	e03f      	b.n	8009d26 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cae:	d123      	bne.n	8009cf8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb4:	2b03      	cmp	r3, #3
 8009cb6:	d838      	bhi.n	8009d2a <DMA_CheckFifoParam+0xda>
 8009cb8:	a201      	add	r2, pc, #4	; (adr r2, 8009cc0 <DMA_CheckFifoParam+0x70>)
 8009cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cbe:	bf00      	nop
 8009cc0:	08009cd1 	.word	0x08009cd1
 8009cc4:	08009cd7 	.word	0x08009cd7
 8009cc8:	08009cd1 	.word	0x08009cd1
 8009ccc:	08009ce9 	.word	0x08009ce9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	73fb      	strb	r3, [r7, #15]
        break;
 8009cd4:	e030      	b.n	8009d38 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d025      	beq.n	8009d2e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009ce6:	e022      	b.n	8009d2e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009cf0:	d11f      	bne.n	8009d32 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009cf6:	e01c      	b.n	8009d32 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d902      	bls.n	8009d06 <DMA_CheckFifoParam+0xb6>
 8009d00:	2b03      	cmp	r3, #3
 8009d02:	d003      	beq.n	8009d0c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009d04:	e018      	b.n	8009d38 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	73fb      	strb	r3, [r7, #15]
        break;
 8009d0a:	e015      	b.n	8009d38 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d00e      	beq.n	8009d36 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d1c:	e00b      	b.n	8009d36 <DMA_CheckFifoParam+0xe6>
        break;
 8009d1e:	bf00      	nop
 8009d20:	e00a      	b.n	8009d38 <DMA_CheckFifoParam+0xe8>
        break;
 8009d22:	bf00      	nop
 8009d24:	e008      	b.n	8009d38 <DMA_CheckFifoParam+0xe8>
        break;
 8009d26:	bf00      	nop
 8009d28:	e006      	b.n	8009d38 <DMA_CheckFifoParam+0xe8>
        break;
 8009d2a:	bf00      	nop
 8009d2c:	e004      	b.n	8009d38 <DMA_CheckFifoParam+0xe8>
        break;
 8009d2e:	bf00      	nop
 8009d30:	e002      	b.n	8009d38 <DMA_CheckFifoParam+0xe8>
        break;
 8009d32:	bf00      	nop
 8009d34:	e000      	b.n	8009d38 <DMA_CheckFifoParam+0xe8>
    break;
 8009d36:	bf00      	nop
    }
  }

  return status;
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3714      	adds	r7, #20
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop

08009d48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a38      	ldr	r2, [pc, #224]	; (8009e3c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d022      	beq.n	8009da6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a36      	ldr	r2, [pc, #216]	; (8009e40 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d01d      	beq.n	8009da6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a35      	ldr	r2, [pc, #212]	; (8009e44 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d018      	beq.n	8009da6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a33      	ldr	r2, [pc, #204]	; (8009e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d013      	beq.n	8009da6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a32      	ldr	r2, [pc, #200]	; (8009e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d00e      	beq.n	8009da6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a30      	ldr	r2, [pc, #192]	; (8009e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d009      	beq.n	8009da6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a2f      	ldr	r2, [pc, #188]	; (8009e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d004      	beq.n	8009da6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a2d      	ldr	r2, [pc, #180]	; (8009e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d101      	bne.n	8009daa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009da6:	2301      	movs	r3, #1
 8009da8:	e000      	b.n	8009dac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009daa:	2300      	movs	r3, #0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d01a      	beq.n	8009de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	3b08      	subs	r3, #8
 8009db8:	4a28      	ldr	r2, [pc, #160]	; (8009e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009dba:	fba2 2303 	umull	r2, r3, r2, r3
 8009dbe:	091b      	lsrs	r3, r3, #4
 8009dc0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	4b26      	ldr	r3, [pc, #152]	; (8009e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009dc6:	4413      	add	r3, r2
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	461a      	mov	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a24      	ldr	r2, [pc, #144]	; (8009e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009dd4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f003 031f 	and.w	r3, r3, #31
 8009ddc:	2201      	movs	r2, #1
 8009dde:	409a      	lsls	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009de4:	e024      	b.n	8009e30 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	3b10      	subs	r3, #16
 8009dee:	4a1e      	ldr	r2, [pc, #120]	; (8009e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009df0:	fba2 2303 	umull	r2, r3, r2, r3
 8009df4:	091b      	lsrs	r3, r3, #4
 8009df6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	4a1c      	ldr	r2, [pc, #112]	; (8009e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d806      	bhi.n	8009e0e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	4a1b      	ldr	r2, [pc, #108]	; (8009e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d902      	bls.n	8009e0e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	3308      	adds	r3, #8
 8009e0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	4b18      	ldr	r3, [pc, #96]	; (8009e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009e12:	4413      	add	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	461a      	mov	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a16      	ldr	r2, [pc, #88]	; (8009e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009e20:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f003 031f 	and.w	r3, r3, #31
 8009e28:	2201      	movs	r2, #1
 8009e2a:	409a      	lsls	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009e30:	bf00      	nop
 8009e32:	3714      	adds	r7, #20
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr
 8009e3c:	58025408 	.word	0x58025408
 8009e40:	5802541c 	.word	0x5802541c
 8009e44:	58025430 	.word	0x58025430
 8009e48:	58025444 	.word	0x58025444
 8009e4c:	58025458 	.word	0x58025458
 8009e50:	5802546c 	.word	0x5802546c
 8009e54:	58025480 	.word	0x58025480
 8009e58:	58025494 	.word	0x58025494
 8009e5c:	cccccccd 	.word	0xcccccccd
 8009e60:	16009600 	.word	0x16009600
 8009e64:	58025880 	.word	0x58025880
 8009e68:	aaaaaaab 	.word	0xaaaaaaab
 8009e6c:	400204b8 	.word	0x400204b8
 8009e70:	4002040f 	.word	0x4002040f
 8009e74:	10008200 	.word	0x10008200
 8009e78:	40020880 	.word	0x40020880

08009e7c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d04a      	beq.n	8009f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2b08      	cmp	r3, #8
 8009e96:	d847      	bhi.n	8009f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a25      	ldr	r2, [pc, #148]	; (8009f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d022      	beq.n	8009ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a24      	ldr	r2, [pc, #144]	; (8009f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d01d      	beq.n	8009ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a22      	ldr	r2, [pc, #136]	; (8009f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d018      	beq.n	8009ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a21      	ldr	r2, [pc, #132]	; (8009f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d013      	beq.n	8009ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a1f      	ldr	r2, [pc, #124]	; (8009f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d00e      	beq.n	8009ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a1e      	ldr	r2, [pc, #120]	; (8009f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d009      	beq.n	8009ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a1c      	ldr	r2, [pc, #112]	; (8009f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d004      	beq.n	8009ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a1b      	ldr	r2, [pc, #108]	; (8009f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d101      	bne.n	8009eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e000      	b.n	8009eee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009eec:	2300      	movs	r3, #0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00a      	beq.n	8009f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	4b17      	ldr	r3, [pc, #92]	; (8009f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009ef6:	4413      	add	r3, r2
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	461a      	mov	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a15      	ldr	r2, [pc, #84]	; (8009f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009f04:	671a      	str	r2, [r3, #112]	; 0x70
 8009f06:	e009      	b.n	8009f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	4b14      	ldr	r3, [pc, #80]	; (8009f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009f0c:	4413      	add	r3, r2
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	461a      	mov	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a11      	ldr	r2, [pc, #68]	; (8009f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009f1a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	2201      	movs	r2, #1
 8009f22:	409a      	lsls	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009f28:	bf00      	nop
 8009f2a:	3714      	adds	r7, #20
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr
 8009f34:	58025408 	.word	0x58025408
 8009f38:	5802541c 	.word	0x5802541c
 8009f3c:	58025430 	.word	0x58025430
 8009f40:	58025444 	.word	0x58025444
 8009f44:	58025458 	.word	0x58025458
 8009f48:	5802546c 	.word	0x5802546c
 8009f4c:	58025480 	.word	0x58025480
 8009f50:	58025494 	.word	0x58025494
 8009f54:	1600963f 	.word	0x1600963f
 8009f58:	58025940 	.word	0x58025940
 8009f5c:	1000823f 	.word	0x1000823f
 8009f60:	40020940 	.word	0x40020940

08009f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b089      	sub	sp, #36	; 0x24
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009f72:	4b89      	ldr	r3, [pc, #548]	; (800a198 <HAL_GPIO_Init+0x234>)
 8009f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009f76:	e194      	b.n	800a2a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	2101      	movs	r1, #1
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	fa01 f303 	lsl.w	r3, r1, r3
 8009f84:	4013      	ands	r3, r2
 8009f86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f000 8186 	beq.w	800a29c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	f003 0303 	and.w	r3, r3, #3
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d005      	beq.n	8009fa8 <HAL_GPIO_Init+0x44>
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	f003 0303 	and.w	r3, r3, #3
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d130      	bne.n	800a00a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009fae:	69fb      	ldr	r3, [r7, #28]
 8009fb0:	005b      	lsls	r3, r3, #1
 8009fb2:	2203      	movs	r2, #3
 8009fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb8:	43db      	mvns	r3, r3
 8009fba:	69ba      	ldr	r2, [r7, #24]
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	68da      	ldr	r2, [r3, #12]
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	005b      	lsls	r3, r3, #1
 8009fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fcc:	69ba      	ldr	r2, [r7, #24]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	69ba      	ldr	r2, [r7, #24]
 8009fd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009fde:	2201      	movs	r2, #1
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe6:	43db      	mvns	r3, r3
 8009fe8:	69ba      	ldr	r2, [r7, #24]
 8009fea:	4013      	ands	r3, r2
 8009fec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	091b      	lsrs	r3, r3, #4
 8009ff4:	f003 0201 	and.w	r2, r3, #1
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8009ffe:	69ba      	ldr	r2, [r7, #24]
 800a000:	4313      	orrs	r3, r2
 800a002:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	69ba      	ldr	r2, [r7, #24]
 800a008:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	f003 0303 	and.w	r3, r3, #3
 800a012:	2b03      	cmp	r3, #3
 800a014:	d017      	beq.n	800a046 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	005b      	lsls	r3, r3, #1
 800a020:	2203      	movs	r2, #3
 800a022:	fa02 f303 	lsl.w	r3, r2, r3
 800a026:	43db      	mvns	r3, r3
 800a028:	69ba      	ldr	r2, [r7, #24]
 800a02a:	4013      	ands	r3, r2
 800a02c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	689a      	ldr	r2, [r3, #8]
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	005b      	lsls	r3, r3, #1
 800a036:	fa02 f303 	lsl.w	r3, r2, r3
 800a03a:	69ba      	ldr	r2, [r7, #24]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	69ba      	ldr	r2, [r7, #24]
 800a044:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f003 0303 	and.w	r3, r3, #3
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d123      	bne.n	800a09a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	08da      	lsrs	r2, r3, #3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	3208      	adds	r2, #8
 800a05a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a05e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	f003 0307 	and.w	r3, r3, #7
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	220f      	movs	r2, #15
 800a06a:	fa02 f303 	lsl.w	r3, r2, r3
 800a06e:	43db      	mvns	r3, r3
 800a070:	69ba      	ldr	r2, [r7, #24]
 800a072:	4013      	ands	r3, r2
 800a074:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	691a      	ldr	r2, [r3, #16]
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	f003 0307 	and.w	r3, r3, #7
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	fa02 f303 	lsl.w	r3, r2, r3
 800a086:	69ba      	ldr	r2, [r7, #24]
 800a088:	4313      	orrs	r3, r2
 800a08a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	08da      	lsrs	r2, r3, #3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	3208      	adds	r2, #8
 800a094:	69b9      	ldr	r1, [r7, #24]
 800a096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	005b      	lsls	r3, r3, #1
 800a0a4:	2203      	movs	r2, #3
 800a0a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0aa:	43db      	mvns	r3, r3
 800a0ac:	69ba      	ldr	r2, [r7, #24]
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	f003 0203 	and.w	r2, r3, #3
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	005b      	lsls	r3, r3, #1
 800a0be:	fa02 f303 	lsl.w	r3, r2, r3
 800a0c2:	69ba      	ldr	r2, [r7, #24]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	69ba      	ldr	r2, [r7, #24]
 800a0cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f000 80e0 	beq.w	800a29c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a0dc:	4b2f      	ldr	r3, [pc, #188]	; (800a19c <HAL_GPIO_Init+0x238>)
 800a0de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a0e2:	4a2e      	ldr	r2, [pc, #184]	; (800a19c <HAL_GPIO_Init+0x238>)
 800a0e4:	f043 0302 	orr.w	r3, r3, #2
 800a0e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a0ec:	4b2b      	ldr	r3, [pc, #172]	; (800a19c <HAL_GPIO_Init+0x238>)
 800a0ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a0f2:	f003 0302 	and.w	r3, r3, #2
 800a0f6:	60fb      	str	r3, [r7, #12]
 800a0f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a0fa:	4a29      	ldr	r2, [pc, #164]	; (800a1a0 <HAL_GPIO_Init+0x23c>)
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	089b      	lsrs	r3, r3, #2
 800a100:	3302      	adds	r3, #2
 800a102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	f003 0303 	and.w	r3, r3, #3
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	220f      	movs	r2, #15
 800a112:	fa02 f303 	lsl.w	r3, r2, r3
 800a116:	43db      	mvns	r3, r3
 800a118:	69ba      	ldr	r2, [r7, #24]
 800a11a:	4013      	ands	r3, r2
 800a11c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a20      	ldr	r2, [pc, #128]	; (800a1a4 <HAL_GPIO_Init+0x240>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d052      	beq.n	800a1cc <HAL_GPIO_Init+0x268>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a1f      	ldr	r2, [pc, #124]	; (800a1a8 <HAL_GPIO_Init+0x244>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d031      	beq.n	800a192 <HAL_GPIO_Init+0x22e>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a1e      	ldr	r2, [pc, #120]	; (800a1ac <HAL_GPIO_Init+0x248>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d02b      	beq.n	800a18e <HAL_GPIO_Init+0x22a>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a1d      	ldr	r2, [pc, #116]	; (800a1b0 <HAL_GPIO_Init+0x24c>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d025      	beq.n	800a18a <HAL_GPIO_Init+0x226>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a1c      	ldr	r2, [pc, #112]	; (800a1b4 <HAL_GPIO_Init+0x250>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d01f      	beq.n	800a186 <HAL_GPIO_Init+0x222>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4a1b      	ldr	r2, [pc, #108]	; (800a1b8 <HAL_GPIO_Init+0x254>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d019      	beq.n	800a182 <HAL_GPIO_Init+0x21e>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a1a      	ldr	r2, [pc, #104]	; (800a1bc <HAL_GPIO_Init+0x258>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d013      	beq.n	800a17e <HAL_GPIO_Init+0x21a>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a19      	ldr	r2, [pc, #100]	; (800a1c0 <HAL_GPIO_Init+0x25c>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d00d      	beq.n	800a17a <HAL_GPIO_Init+0x216>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a18      	ldr	r2, [pc, #96]	; (800a1c4 <HAL_GPIO_Init+0x260>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d007      	beq.n	800a176 <HAL_GPIO_Init+0x212>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a17      	ldr	r2, [pc, #92]	; (800a1c8 <HAL_GPIO_Init+0x264>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d101      	bne.n	800a172 <HAL_GPIO_Init+0x20e>
 800a16e:	2309      	movs	r3, #9
 800a170:	e02d      	b.n	800a1ce <HAL_GPIO_Init+0x26a>
 800a172:	230a      	movs	r3, #10
 800a174:	e02b      	b.n	800a1ce <HAL_GPIO_Init+0x26a>
 800a176:	2308      	movs	r3, #8
 800a178:	e029      	b.n	800a1ce <HAL_GPIO_Init+0x26a>
 800a17a:	2307      	movs	r3, #7
 800a17c:	e027      	b.n	800a1ce <HAL_GPIO_Init+0x26a>
 800a17e:	2306      	movs	r3, #6
 800a180:	e025      	b.n	800a1ce <HAL_GPIO_Init+0x26a>
 800a182:	2305      	movs	r3, #5
 800a184:	e023      	b.n	800a1ce <HAL_GPIO_Init+0x26a>
 800a186:	2304      	movs	r3, #4
 800a188:	e021      	b.n	800a1ce <HAL_GPIO_Init+0x26a>
 800a18a:	2303      	movs	r3, #3
 800a18c:	e01f      	b.n	800a1ce <HAL_GPIO_Init+0x26a>
 800a18e:	2302      	movs	r3, #2
 800a190:	e01d      	b.n	800a1ce <HAL_GPIO_Init+0x26a>
 800a192:	2301      	movs	r3, #1
 800a194:	e01b      	b.n	800a1ce <HAL_GPIO_Init+0x26a>
 800a196:	bf00      	nop
 800a198:	58000080 	.word	0x58000080
 800a19c:	58024400 	.word	0x58024400
 800a1a0:	58000400 	.word	0x58000400
 800a1a4:	58020000 	.word	0x58020000
 800a1a8:	58020400 	.word	0x58020400
 800a1ac:	58020800 	.word	0x58020800
 800a1b0:	58020c00 	.word	0x58020c00
 800a1b4:	58021000 	.word	0x58021000
 800a1b8:	58021400 	.word	0x58021400
 800a1bc:	58021800 	.word	0x58021800
 800a1c0:	58021c00 	.word	0x58021c00
 800a1c4:	58022000 	.word	0x58022000
 800a1c8:	58022400 	.word	0x58022400
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	69fa      	ldr	r2, [r7, #28]
 800a1d0:	f002 0203 	and.w	r2, r2, #3
 800a1d4:	0092      	lsls	r2, r2, #2
 800a1d6:	4093      	lsls	r3, r2
 800a1d8:	69ba      	ldr	r2, [r7, #24]
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a1de:	4938      	ldr	r1, [pc, #224]	; (800a2c0 <HAL_GPIO_Init+0x35c>)
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	089b      	lsrs	r3, r3, #2
 800a1e4:	3302      	adds	r3, #2
 800a1e6:	69ba      	ldr	r2, [r7, #24]
 800a1e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a1ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	43db      	mvns	r3, r3
 800a1f8:	69ba      	ldr	r2, [r7, #24]
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a206:	2b00      	cmp	r3, #0
 800a208:	d003      	beq.n	800a212 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a20a:	69ba      	ldr	r2, [r7, #24]
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	4313      	orrs	r3, r2
 800a210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a212:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a21a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	43db      	mvns	r3, r3
 800a226:	69ba      	ldr	r2, [r7, #24]
 800a228:	4013      	ands	r3, r2
 800a22a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a234:	2b00      	cmp	r3, #0
 800a236:	d003      	beq.n	800a240 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a238:	69ba      	ldr	r2, [r7, #24]
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	4313      	orrs	r3, r2
 800a23e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a240:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	43db      	mvns	r3, r3
 800a252:	69ba      	ldr	r2, [r7, #24]
 800a254:	4013      	ands	r3, r2
 800a256:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a260:	2b00      	cmp	r3, #0
 800a262:	d003      	beq.n	800a26c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a264:	69ba      	ldr	r2, [r7, #24]
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	4313      	orrs	r3, r2
 800a26a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	69ba      	ldr	r2, [r7, #24]
 800a270:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	43db      	mvns	r3, r3
 800a27c:	69ba      	ldr	r2, [r7, #24]
 800a27e:	4013      	ands	r3, r2
 800a280:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d003      	beq.n	800a296 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a28e:	69ba      	ldr	r2, [r7, #24]
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	4313      	orrs	r3, r2
 800a294:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	69ba      	ldr	r2, [r7, #24]
 800a29a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	f47f ae63 	bne.w	8009f78 <HAL_GPIO_Init+0x14>
  }
}
 800a2b2:	bf00      	nop
 800a2b4:	bf00      	nop
 800a2b6:	3724      	adds	r7, #36	; 0x24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr
 800a2c0:	58000400 	.word	0x58000400

0800a2c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	807b      	strh	r3, [r7, #2]
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a2d4:	787b      	ldrb	r3, [r7, #1]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d003      	beq.n	800a2e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a2da:	887a      	ldrh	r2, [r7, #2]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a2e0:	e003      	b.n	800a2ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a2e2:	887b      	ldrh	r3, [r7, #2]
 800a2e4:	041a      	lsls	r2, r3, #16
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	619a      	str	r2, [r3, #24]
}
 800a2ea:	bf00      	nop
 800a2ec:	370c      	adds	r7, #12
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b082      	sub	sp, #8
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a304:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a308:	88fb      	ldrh	r3, [r7, #6]
 800a30a:	4013      	ands	r3, r2
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d008      	beq.n	800a322 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a314:	88fb      	ldrh	r3, [r7, #6]
 800a316:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a31a:	88fb      	ldrh	r3, [r7, #6]
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7fa fc57 	bl	8004bd0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a322:	bf00      	nop
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
	...

0800a32c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a334:	4b19      	ldr	r3, [pc, #100]	; (800a39c <HAL_PWREx_ConfigSupply+0x70>)
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	f003 0304 	and.w	r3, r3, #4
 800a33c:	2b04      	cmp	r3, #4
 800a33e:	d00a      	beq.n	800a356 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a340:	4b16      	ldr	r3, [pc, #88]	; (800a39c <HAL_PWREx_ConfigSupply+0x70>)
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	f003 0307 	and.w	r3, r3, #7
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d001      	beq.n	800a352 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	e01f      	b.n	800a392 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	e01d      	b.n	800a392 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a356:	4b11      	ldr	r3, [pc, #68]	; (800a39c <HAL_PWREx_ConfigSupply+0x70>)
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	f023 0207 	bic.w	r2, r3, #7
 800a35e:	490f      	ldr	r1, [pc, #60]	; (800a39c <HAL_PWREx_ConfigSupply+0x70>)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4313      	orrs	r3, r2
 800a364:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a366:	f7fc fc6d 	bl	8006c44 <HAL_GetTick>
 800a36a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a36c:	e009      	b.n	800a382 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a36e:	f7fc fc69 	bl	8006c44 <HAL_GetTick>
 800a372:	4602      	mov	r2, r0
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	1ad3      	subs	r3, r2, r3
 800a378:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a37c:	d901      	bls.n	800a382 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e007      	b.n	800a392 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a382:	4b06      	ldr	r3, [pc, #24]	; (800a39c <HAL_PWREx_ConfigSupply+0x70>)
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a38a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a38e:	d1ee      	bne.n	800a36e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3710      	adds	r7, #16
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	58024800 	.word	0x58024800

0800a3a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b08c      	sub	sp, #48	; 0x30
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d102      	bne.n	800a3b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	f000 bc1c 	b.w	800abec <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f003 0301 	and.w	r3, r3, #1
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f000 8087 	beq.w	800a4d0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a3c2:	4b9e      	ldr	r3, [pc, #632]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a3c4:	691b      	ldr	r3, [r3, #16]
 800a3c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a3cc:	4b9b      	ldr	r3, [pc, #620]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d4:	2b10      	cmp	r3, #16
 800a3d6:	d007      	beq.n	800a3e8 <HAL_RCC_OscConfig+0x48>
 800a3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3da:	2b18      	cmp	r3, #24
 800a3dc:	d110      	bne.n	800a400 <HAL_RCC_OscConfig+0x60>
 800a3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e0:	f003 0303 	and.w	r3, r3, #3
 800a3e4:	2b02      	cmp	r3, #2
 800a3e6:	d10b      	bne.n	800a400 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3e8:	4b94      	ldr	r3, [pc, #592]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d06c      	beq.n	800a4ce <HAL_RCC_OscConfig+0x12e>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d168      	bne.n	800a4ce <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e3f5      	b.n	800abec <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a408:	d106      	bne.n	800a418 <HAL_RCC_OscConfig+0x78>
 800a40a:	4b8c      	ldr	r3, [pc, #560]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a8b      	ldr	r2, [pc, #556]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a414:	6013      	str	r3, [r2, #0]
 800a416:	e02e      	b.n	800a476 <HAL_RCC_OscConfig+0xd6>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d10c      	bne.n	800a43a <HAL_RCC_OscConfig+0x9a>
 800a420:	4b86      	ldr	r3, [pc, #536]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a85      	ldr	r2, [pc, #532]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a42a:	6013      	str	r3, [r2, #0]
 800a42c:	4b83      	ldr	r3, [pc, #524]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a82      	ldr	r2, [pc, #520]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a436:	6013      	str	r3, [r2, #0]
 800a438:	e01d      	b.n	800a476 <HAL_RCC_OscConfig+0xd6>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a442:	d10c      	bne.n	800a45e <HAL_RCC_OscConfig+0xbe>
 800a444:	4b7d      	ldr	r3, [pc, #500]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a7c      	ldr	r2, [pc, #496]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a44a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a44e:	6013      	str	r3, [r2, #0]
 800a450:	4b7a      	ldr	r3, [pc, #488]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a79      	ldr	r2, [pc, #484]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a45a:	6013      	str	r3, [r2, #0]
 800a45c:	e00b      	b.n	800a476 <HAL_RCC_OscConfig+0xd6>
 800a45e:	4b77      	ldr	r3, [pc, #476]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a76      	ldr	r2, [pc, #472]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a468:	6013      	str	r3, [r2, #0]
 800a46a:	4b74      	ldr	r3, [pc, #464]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a73      	ldr	r2, [pc, #460]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a470:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a474:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d013      	beq.n	800a4a6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a47e:	f7fc fbe1 	bl	8006c44 <HAL_GetTick>
 800a482:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a484:	e008      	b.n	800a498 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a486:	f7fc fbdd 	bl	8006c44 <HAL_GetTick>
 800a48a:	4602      	mov	r2, r0
 800a48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48e:	1ad3      	subs	r3, r2, r3
 800a490:	2b64      	cmp	r3, #100	; 0x64
 800a492:	d901      	bls.n	800a498 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800a494:	2303      	movs	r3, #3
 800a496:	e3a9      	b.n	800abec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a498:	4b68      	ldr	r3, [pc, #416]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d0f0      	beq.n	800a486 <HAL_RCC_OscConfig+0xe6>
 800a4a4:	e014      	b.n	800a4d0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4a6:	f7fc fbcd 	bl	8006c44 <HAL_GetTick>
 800a4aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a4ac:	e008      	b.n	800a4c0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a4ae:	f7fc fbc9 	bl	8006c44 <HAL_GetTick>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b6:	1ad3      	subs	r3, r2, r3
 800a4b8:	2b64      	cmp	r3, #100	; 0x64
 800a4ba:	d901      	bls.n	800a4c0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	e395      	b.n	800abec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a4c0:	4b5e      	ldr	r3, [pc, #376]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d1f0      	bne.n	800a4ae <HAL_RCC_OscConfig+0x10e>
 800a4cc:	e000      	b.n	800a4d0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4ce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 0302 	and.w	r3, r3, #2
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f000 80ca 	beq.w	800a672 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a4de:	4b57      	ldr	r3, [pc, #348]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4e6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a4e8:	4b54      	ldr	r3, [pc, #336]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a4ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ec:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a4ee:	6a3b      	ldr	r3, [r7, #32]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d007      	beq.n	800a504 <HAL_RCC_OscConfig+0x164>
 800a4f4:	6a3b      	ldr	r3, [r7, #32]
 800a4f6:	2b18      	cmp	r3, #24
 800a4f8:	d156      	bne.n	800a5a8 <HAL_RCC_OscConfig+0x208>
 800a4fa:	69fb      	ldr	r3, [r7, #28]
 800a4fc:	f003 0303 	and.w	r3, r3, #3
 800a500:	2b00      	cmp	r3, #0
 800a502:	d151      	bne.n	800a5a8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a504:	4b4d      	ldr	r3, [pc, #308]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f003 0304 	and.w	r3, r3, #4
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d005      	beq.n	800a51c <HAL_RCC_OscConfig+0x17c>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d101      	bne.n	800a51c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	e367      	b.n	800abec <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a51c:	4b47      	ldr	r3, [pc, #284]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f023 0219 	bic.w	r2, r3, #25
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	4944      	ldr	r1, [pc, #272]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a52a:	4313      	orrs	r3, r2
 800a52c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a52e:	f7fc fb89 	bl	8006c44 <HAL_GetTick>
 800a532:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a534:	e008      	b.n	800a548 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a536:	f7fc fb85 	bl	8006c44 <HAL_GetTick>
 800a53a:	4602      	mov	r2, r0
 800a53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	2b02      	cmp	r3, #2
 800a542:	d901      	bls.n	800a548 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800a544:	2303      	movs	r3, #3
 800a546:	e351      	b.n	800abec <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a548:	4b3c      	ldr	r3, [pc, #240]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f003 0304 	and.w	r3, r3, #4
 800a550:	2b00      	cmp	r3, #0
 800a552:	d0f0      	beq.n	800a536 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a554:	f7fc fba6 	bl	8006ca4 <HAL_GetREVID>
 800a558:	4603      	mov	r3, r0
 800a55a:	f241 0203 	movw	r2, #4099	; 0x1003
 800a55e:	4293      	cmp	r3, r2
 800a560:	d817      	bhi.n	800a592 <HAL_RCC_OscConfig+0x1f2>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	2b40      	cmp	r3, #64	; 0x40
 800a568:	d108      	bne.n	800a57c <HAL_RCC_OscConfig+0x1dc>
 800a56a:	4b34      	ldr	r3, [pc, #208]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a572:	4a32      	ldr	r2, [pc, #200]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a578:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a57a:	e07a      	b.n	800a672 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a57c:	4b2f      	ldr	r3, [pc, #188]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	031b      	lsls	r3, r3, #12
 800a58a:	492c      	ldr	r1, [pc, #176]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a58c:	4313      	orrs	r3, r2
 800a58e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a590:	e06f      	b.n	800a672 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a592:	4b2a      	ldr	r3, [pc, #168]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	061b      	lsls	r3, r3, #24
 800a5a0:	4926      	ldr	r1, [pc, #152]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a5a6:	e064      	b.n	800a672 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d047      	beq.n	800a640 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a5b0:	4b22      	ldr	r3, [pc, #136]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f023 0219 	bic.w	r2, r3, #25
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	491f      	ldr	r1, [pc, #124]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5c2:	f7fc fb3f 	bl	8006c44 <HAL_GetTick>
 800a5c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a5c8:	e008      	b.n	800a5dc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a5ca:	f7fc fb3b 	bl	8006c44 <HAL_GetTick>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d2:	1ad3      	subs	r3, r2, r3
 800a5d4:	2b02      	cmp	r3, #2
 800a5d6:	d901      	bls.n	800a5dc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	e307      	b.n	800abec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a5dc:	4b17      	ldr	r3, [pc, #92]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f003 0304 	and.w	r3, r3, #4
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d0f0      	beq.n	800a5ca <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5e8:	f7fc fb5c 	bl	8006ca4 <HAL_GetREVID>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	f241 0203 	movw	r2, #4099	; 0x1003
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d817      	bhi.n	800a626 <HAL_RCC_OscConfig+0x286>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	691b      	ldr	r3, [r3, #16]
 800a5fa:	2b40      	cmp	r3, #64	; 0x40
 800a5fc:	d108      	bne.n	800a610 <HAL_RCC_OscConfig+0x270>
 800a5fe:	4b0f      	ldr	r3, [pc, #60]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a606:	4a0d      	ldr	r2, [pc, #52]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a60c:	6053      	str	r3, [r2, #4]
 800a60e:	e030      	b.n	800a672 <HAL_RCC_OscConfig+0x2d2>
 800a610:	4b0a      	ldr	r3, [pc, #40]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	691b      	ldr	r3, [r3, #16]
 800a61c:	031b      	lsls	r3, r3, #12
 800a61e:	4907      	ldr	r1, [pc, #28]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a620:	4313      	orrs	r3, r2
 800a622:	604b      	str	r3, [r1, #4]
 800a624:	e025      	b.n	800a672 <HAL_RCC_OscConfig+0x2d2>
 800a626:	4b05      	ldr	r3, [pc, #20]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	061b      	lsls	r3, r3, #24
 800a634:	4901      	ldr	r1, [pc, #4]	; (800a63c <HAL_RCC_OscConfig+0x29c>)
 800a636:	4313      	orrs	r3, r2
 800a638:	604b      	str	r3, [r1, #4]
 800a63a:	e01a      	b.n	800a672 <HAL_RCC_OscConfig+0x2d2>
 800a63c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a640:	4b9e      	ldr	r3, [pc, #632]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a9d      	ldr	r2, [pc, #628]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a646:	f023 0301 	bic.w	r3, r3, #1
 800a64a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a64c:	f7fc fafa 	bl	8006c44 <HAL_GetTick>
 800a650:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a652:	e008      	b.n	800a666 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a654:	f7fc faf6 	bl	8006c44 <HAL_GetTick>
 800a658:	4602      	mov	r2, r0
 800a65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	2b02      	cmp	r3, #2
 800a660:	d901      	bls.n	800a666 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800a662:	2303      	movs	r3, #3
 800a664:	e2c2      	b.n	800abec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a666:	4b95      	ldr	r3, [pc, #596]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f003 0304 	and.w	r3, r3, #4
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1f0      	bne.n	800a654 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f003 0310 	and.w	r3, r3, #16
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	f000 80a9 	beq.w	800a7d2 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a680:	4b8e      	ldr	r3, [pc, #568]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a682:	691b      	ldr	r3, [r3, #16]
 800a684:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a688:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a68a:	4b8c      	ldr	r3, [pc, #560]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a68c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a68e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	2b08      	cmp	r3, #8
 800a694:	d007      	beq.n	800a6a6 <HAL_RCC_OscConfig+0x306>
 800a696:	69bb      	ldr	r3, [r7, #24]
 800a698:	2b18      	cmp	r3, #24
 800a69a:	d13a      	bne.n	800a712 <HAL_RCC_OscConfig+0x372>
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	f003 0303 	and.w	r3, r3, #3
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d135      	bne.n	800a712 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a6a6:	4b85      	ldr	r3, [pc, #532]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d005      	beq.n	800a6be <HAL_RCC_OscConfig+0x31e>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	69db      	ldr	r3, [r3, #28]
 800a6b6:	2b80      	cmp	r3, #128	; 0x80
 800a6b8:	d001      	beq.n	800a6be <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e296      	b.n	800abec <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a6be:	f7fc faf1 	bl	8006ca4 <HAL_GetREVID>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	f241 0203 	movw	r2, #4099	; 0x1003
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d817      	bhi.n	800a6fc <HAL_RCC_OscConfig+0x35c>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6a1b      	ldr	r3, [r3, #32]
 800a6d0:	2b20      	cmp	r3, #32
 800a6d2:	d108      	bne.n	800a6e6 <HAL_RCC_OscConfig+0x346>
 800a6d4:	4b79      	ldr	r3, [pc, #484]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a6dc:	4a77      	ldr	r2, [pc, #476]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a6de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6e2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a6e4:	e075      	b.n	800a7d2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a6e6:	4b75      	ldr	r3, [pc, #468]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6a1b      	ldr	r3, [r3, #32]
 800a6f2:	069b      	lsls	r3, r3, #26
 800a6f4:	4971      	ldr	r1, [pc, #452]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a6fa:	e06a      	b.n	800a7d2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a6fc:	4b6f      	ldr	r3, [pc, #444]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6a1b      	ldr	r3, [r3, #32]
 800a708:	061b      	lsls	r3, r3, #24
 800a70a:	496c      	ldr	r1, [pc, #432]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a70c:	4313      	orrs	r3, r2
 800a70e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a710:	e05f      	b.n	800a7d2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	69db      	ldr	r3, [r3, #28]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d042      	beq.n	800a7a0 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a71a:	4b68      	ldr	r3, [pc, #416]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4a67      	ldr	r2, [pc, #412]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a726:	f7fc fa8d 	bl	8006c44 <HAL_GetTick>
 800a72a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a72c:	e008      	b.n	800a740 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a72e:	f7fc fa89 	bl	8006c44 <HAL_GetTick>
 800a732:	4602      	mov	r2, r0
 800a734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a736:	1ad3      	subs	r3, r2, r3
 800a738:	2b02      	cmp	r3, #2
 800a73a:	d901      	bls.n	800a740 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 800a73c:	2303      	movs	r3, #3
 800a73e:	e255      	b.n	800abec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a740:	4b5e      	ldr	r3, [pc, #376]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d0f0      	beq.n	800a72e <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a74c:	f7fc faaa 	bl	8006ca4 <HAL_GetREVID>
 800a750:	4603      	mov	r3, r0
 800a752:	f241 0203 	movw	r2, #4099	; 0x1003
 800a756:	4293      	cmp	r3, r2
 800a758:	d817      	bhi.n	800a78a <HAL_RCC_OscConfig+0x3ea>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a1b      	ldr	r3, [r3, #32]
 800a75e:	2b20      	cmp	r3, #32
 800a760:	d108      	bne.n	800a774 <HAL_RCC_OscConfig+0x3d4>
 800a762:	4b56      	ldr	r3, [pc, #344]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a76a:	4a54      	ldr	r2, [pc, #336]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a76c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a770:	6053      	str	r3, [r2, #4]
 800a772:	e02e      	b.n	800a7d2 <HAL_RCC_OscConfig+0x432>
 800a774:	4b51      	ldr	r3, [pc, #324]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6a1b      	ldr	r3, [r3, #32]
 800a780:	069b      	lsls	r3, r3, #26
 800a782:	494e      	ldr	r1, [pc, #312]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a784:	4313      	orrs	r3, r2
 800a786:	604b      	str	r3, [r1, #4]
 800a788:	e023      	b.n	800a7d2 <HAL_RCC_OscConfig+0x432>
 800a78a:	4b4c      	ldr	r3, [pc, #304]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a1b      	ldr	r3, [r3, #32]
 800a796:	061b      	lsls	r3, r3, #24
 800a798:	4948      	ldr	r1, [pc, #288]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a79a:	4313      	orrs	r3, r2
 800a79c:	60cb      	str	r3, [r1, #12]
 800a79e:	e018      	b.n	800a7d2 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a7a0:	4b46      	ldr	r3, [pc, #280]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a45      	ldr	r2, [pc, #276]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a7a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7ac:	f7fc fa4a 	bl	8006c44 <HAL_GetTick>
 800a7b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a7b2:	e008      	b.n	800a7c6 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a7b4:	f7fc fa46 	bl	8006c44 <HAL_GetTick>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d901      	bls.n	800a7c6 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	e212      	b.n	800abec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a7c6:	4b3d      	ldr	r3, [pc, #244]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1f0      	bne.n	800a7b4 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f003 0308 	and.w	r3, r3, #8
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d036      	beq.n	800a84c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	695b      	ldr	r3, [r3, #20]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d019      	beq.n	800a81a <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a7e6:	4b35      	ldr	r3, [pc, #212]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a7e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7ea:	4a34      	ldr	r2, [pc, #208]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a7ec:	f043 0301 	orr.w	r3, r3, #1
 800a7f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7f2:	f7fc fa27 	bl	8006c44 <HAL_GetTick>
 800a7f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a7f8:	e008      	b.n	800a80c <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a7fa:	f7fc fa23 	bl	8006c44 <HAL_GetTick>
 800a7fe:	4602      	mov	r2, r0
 800a800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a802:	1ad3      	subs	r3, r2, r3
 800a804:	2b02      	cmp	r3, #2
 800a806:	d901      	bls.n	800a80c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800a808:	2303      	movs	r3, #3
 800a80a:	e1ef      	b.n	800abec <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a80c:	4b2b      	ldr	r3, [pc, #172]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a80e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a810:	f003 0302 	and.w	r3, r3, #2
 800a814:	2b00      	cmp	r3, #0
 800a816:	d0f0      	beq.n	800a7fa <HAL_RCC_OscConfig+0x45a>
 800a818:	e018      	b.n	800a84c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a81a:	4b28      	ldr	r3, [pc, #160]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a81c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a81e:	4a27      	ldr	r2, [pc, #156]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a820:	f023 0301 	bic.w	r3, r3, #1
 800a824:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a826:	f7fc fa0d 	bl	8006c44 <HAL_GetTick>
 800a82a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a82c:	e008      	b.n	800a840 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a82e:	f7fc fa09 	bl	8006c44 <HAL_GetTick>
 800a832:	4602      	mov	r2, r0
 800a834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a836:	1ad3      	subs	r3, r2, r3
 800a838:	2b02      	cmp	r3, #2
 800a83a:	d901      	bls.n	800a840 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800a83c:	2303      	movs	r3, #3
 800a83e:	e1d5      	b.n	800abec <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a840:	4b1e      	ldr	r3, [pc, #120]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a844:	f003 0302 	and.w	r3, r3, #2
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1f0      	bne.n	800a82e <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f003 0320 	and.w	r3, r3, #32
 800a854:	2b00      	cmp	r3, #0
 800a856:	d039      	beq.n	800a8cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d019      	beq.n	800a894 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a860:	4b16      	ldr	r3, [pc, #88]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a15      	ldr	r2, [pc, #84]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a866:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a86a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a86c:	f7fc f9ea 	bl	8006c44 <HAL_GetTick>
 800a870:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a872:	e008      	b.n	800a886 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a874:	f7fc f9e6 	bl	8006c44 <HAL_GetTick>
 800a878:	4602      	mov	r2, r0
 800a87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87c:	1ad3      	subs	r3, r2, r3
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d901      	bls.n	800a886 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800a882:	2303      	movs	r3, #3
 800a884:	e1b2      	b.n	800abec <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a886:	4b0d      	ldr	r3, [pc, #52]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d0f0      	beq.n	800a874 <HAL_RCC_OscConfig+0x4d4>
 800a892:	e01b      	b.n	800a8cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a894:	4b09      	ldr	r3, [pc, #36]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a08      	ldr	r2, [pc, #32]	; (800a8bc <HAL_RCC_OscConfig+0x51c>)
 800a89a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a89e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a8a0:	f7fc f9d0 	bl	8006c44 <HAL_GetTick>
 800a8a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a8a6:	e00b      	b.n	800a8c0 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a8a8:	f7fc f9cc 	bl	8006c44 <HAL_GetTick>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d904      	bls.n	800a8c0 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800a8b6:	2303      	movs	r3, #3
 800a8b8:	e198      	b.n	800abec <HAL_RCC_OscConfig+0x84c>
 800a8ba:	bf00      	nop
 800a8bc:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a8c0:	4ba3      	ldr	r3, [pc, #652]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1ed      	bne.n	800a8a8 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f003 0304 	and.w	r3, r3, #4
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f000 8081 	beq.w	800a9dc <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a8da:	4b9e      	ldr	r3, [pc, #632]	; (800ab54 <HAL_RCC_OscConfig+0x7b4>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a9d      	ldr	r2, [pc, #628]	; (800ab54 <HAL_RCC_OscConfig+0x7b4>)
 800a8e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a8e6:	f7fc f9ad 	bl	8006c44 <HAL_GetTick>
 800a8ea:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a8ec:	e008      	b.n	800a900 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a8ee:	f7fc f9a9 	bl	8006c44 <HAL_GetTick>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f6:	1ad3      	subs	r3, r2, r3
 800a8f8:	2b64      	cmp	r3, #100	; 0x64
 800a8fa:	d901      	bls.n	800a900 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 800a8fc:	2303      	movs	r3, #3
 800a8fe:	e175      	b.n	800abec <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a900:	4b94      	ldr	r3, [pc, #592]	; (800ab54 <HAL_RCC_OscConfig+0x7b4>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d0f0      	beq.n	800a8ee <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	2b01      	cmp	r3, #1
 800a912:	d106      	bne.n	800a922 <HAL_RCC_OscConfig+0x582>
 800a914:	4b8e      	ldr	r3, [pc, #568]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800a916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a918:	4a8d      	ldr	r2, [pc, #564]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800a91a:	f043 0301 	orr.w	r3, r3, #1
 800a91e:	6713      	str	r3, [r2, #112]	; 0x70
 800a920:	e02d      	b.n	800a97e <HAL_RCC_OscConfig+0x5de>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d10c      	bne.n	800a944 <HAL_RCC_OscConfig+0x5a4>
 800a92a:	4b89      	ldr	r3, [pc, #548]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800a92c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a92e:	4a88      	ldr	r2, [pc, #544]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800a930:	f023 0301 	bic.w	r3, r3, #1
 800a934:	6713      	str	r3, [r2, #112]	; 0x70
 800a936:	4b86      	ldr	r3, [pc, #536]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800a938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a93a:	4a85      	ldr	r2, [pc, #532]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800a93c:	f023 0304 	bic.w	r3, r3, #4
 800a940:	6713      	str	r3, [r2, #112]	; 0x70
 800a942:	e01c      	b.n	800a97e <HAL_RCC_OscConfig+0x5de>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	2b05      	cmp	r3, #5
 800a94a:	d10c      	bne.n	800a966 <HAL_RCC_OscConfig+0x5c6>
 800a94c:	4b80      	ldr	r3, [pc, #512]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800a94e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a950:	4a7f      	ldr	r2, [pc, #508]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800a952:	f043 0304 	orr.w	r3, r3, #4
 800a956:	6713      	str	r3, [r2, #112]	; 0x70
 800a958:	4b7d      	ldr	r3, [pc, #500]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800a95a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a95c:	4a7c      	ldr	r2, [pc, #496]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800a95e:	f043 0301 	orr.w	r3, r3, #1
 800a962:	6713      	str	r3, [r2, #112]	; 0x70
 800a964:	e00b      	b.n	800a97e <HAL_RCC_OscConfig+0x5de>
 800a966:	4b7a      	ldr	r3, [pc, #488]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800a968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a96a:	4a79      	ldr	r2, [pc, #484]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800a96c:	f023 0301 	bic.w	r3, r3, #1
 800a970:	6713      	str	r3, [r2, #112]	; 0x70
 800a972:	4b77      	ldr	r3, [pc, #476]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800a974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a976:	4a76      	ldr	r2, [pc, #472]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800a978:	f023 0304 	bic.w	r3, r3, #4
 800a97c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d015      	beq.n	800a9b2 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a986:	f7fc f95d 	bl	8006c44 <HAL_GetTick>
 800a98a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a98c:	e00a      	b.n	800a9a4 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a98e:	f7fc f959 	bl	8006c44 <HAL_GetTick>
 800a992:	4602      	mov	r2, r0
 800a994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a996:	1ad3      	subs	r3, r2, r3
 800a998:	f241 3288 	movw	r2, #5000	; 0x1388
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d901      	bls.n	800a9a4 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 800a9a0:	2303      	movs	r3, #3
 800a9a2:	e123      	b.n	800abec <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a9a4:	4b6a      	ldr	r3, [pc, #424]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800a9a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9a8:	f003 0302 	and.w	r3, r3, #2
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d0ee      	beq.n	800a98e <HAL_RCC_OscConfig+0x5ee>
 800a9b0:	e014      	b.n	800a9dc <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9b2:	f7fc f947 	bl	8006c44 <HAL_GetTick>
 800a9b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a9b8:	e00a      	b.n	800a9d0 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a9ba:	f7fc f943 	bl	8006c44 <HAL_GetTick>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c2:	1ad3      	subs	r3, r2, r3
 800a9c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d901      	bls.n	800a9d0 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 800a9cc:	2303      	movs	r3, #3
 800a9ce:	e10d      	b.n	800abec <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a9d0:	4b5f      	ldr	r3, [pc, #380]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800a9d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9d4:	f003 0302 	and.w	r3, r3, #2
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1ee      	bne.n	800a9ba <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f000 8102 	beq.w	800abea <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a9e6:	4b5a      	ldr	r3, [pc, #360]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800a9e8:	691b      	ldr	r3, [r3, #16]
 800a9ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9ee:	2b18      	cmp	r3, #24
 800a9f0:	f000 80bd 	beq.w	800ab6e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f8:	2b02      	cmp	r3, #2
 800a9fa:	f040 8095 	bne.w	800ab28 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9fe:	4b54      	ldr	r3, [pc, #336]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a53      	ldr	r2, [pc, #332]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aa04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa0a:	f7fc f91b 	bl	8006c44 <HAL_GetTick>
 800aa0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa10:	e008      	b.n	800aa24 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aa12:	f7fc f917 	bl	8006c44 <HAL_GetTick>
 800aa16:	4602      	mov	r2, r0
 800aa18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1a:	1ad3      	subs	r3, r2, r3
 800aa1c:	2b02      	cmp	r3, #2
 800aa1e:	d901      	bls.n	800aa24 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 800aa20:	2303      	movs	r3, #3
 800aa22:	e0e3      	b.n	800abec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa24:	4b4a      	ldr	r3, [pc, #296]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d1f0      	bne.n	800aa12 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aa30:	4b47      	ldr	r3, [pc, #284]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aa32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa34:	4b48      	ldr	r3, [pc, #288]	; (800ab58 <HAL_RCC_OscConfig+0x7b8>)
 800aa36:	4013      	ands	r3, r2
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800aa40:	0112      	lsls	r2, r2, #4
 800aa42:	430a      	orrs	r2, r1
 800aa44:	4942      	ldr	r1, [pc, #264]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aa46:	4313      	orrs	r3, r2
 800aa48:	628b      	str	r3, [r1, #40]	; 0x28
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	025b      	lsls	r3, r3, #9
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	431a      	orrs	r2, r3
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa64:	3b01      	subs	r3, #1
 800aa66:	041b      	lsls	r3, r3, #16
 800aa68:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aa6c:	431a      	orrs	r2, r3
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa72:	3b01      	subs	r3, #1
 800aa74:	061b      	lsls	r3, r3, #24
 800aa76:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aa7a:	4935      	ldr	r1, [pc, #212]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800aa80:	4b33      	ldr	r3, [pc, #204]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aa82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa84:	4a32      	ldr	r2, [pc, #200]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aa86:	f023 0301 	bic.w	r3, r3, #1
 800aa8a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aa8c:	4b30      	ldr	r3, [pc, #192]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aa8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa90:	4b32      	ldr	r3, [pc, #200]	; (800ab5c <HAL_RCC_OscConfig+0x7bc>)
 800aa92:	4013      	ands	r3, r2
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800aa98:	00d2      	lsls	r2, r2, #3
 800aa9a:	492d      	ldr	r1, [pc, #180]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800aaa0:	4b2b      	ldr	r3, [pc, #172]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aaa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa4:	f023 020c 	bic.w	r2, r3, #12
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaac:	4928      	ldr	r1, [pc, #160]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aaae:	4313      	orrs	r3, r2
 800aab0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800aab2:	4b27      	ldr	r3, [pc, #156]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab6:	f023 0202 	bic.w	r2, r3, #2
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aabe:	4924      	ldr	r1, [pc, #144]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aac0:	4313      	orrs	r3, r2
 800aac2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aac4:	4b22      	ldr	r3, [pc, #136]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac8:	4a21      	ldr	r2, [pc, #132]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aaca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aace:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aad0:	4b1f      	ldr	r3, [pc, #124]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad4:	4a1e      	ldr	r2, [pc, #120]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aada:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800aadc:	4b1c      	ldr	r3, [pc, #112]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae0:	4a1b      	ldr	r2, [pc, #108]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aae2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aae6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800aae8:	4b19      	ldr	r3, [pc, #100]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aaea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaec:	4a18      	ldr	r2, [pc, #96]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aaee:	f043 0301 	orr.w	r3, r3, #1
 800aaf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aaf4:	4b16      	ldr	r3, [pc, #88]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a15      	ldr	r2, [pc, #84]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800aafa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aafe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab00:	f7fc f8a0 	bl	8006c44 <HAL_GetTick>
 800ab04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ab06:	e008      	b.n	800ab1a <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab08:	f7fc f89c 	bl	8006c44 <HAL_GetTick>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	2b02      	cmp	r3, #2
 800ab14:	d901      	bls.n	800ab1a <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800ab16:	2303      	movs	r3, #3
 800ab18:	e068      	b.n	800abec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ab1a:	4b0d      	ldr	r3, [pc, #52]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d0f0      	beq.n	800ab08 <HAL_RCC_OscConfig+0x768>
 800ab26:	e060      	b.n	800abea <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab28:	4b09      	ldr	r3, [pc, #36]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a08      	ldr	r2, [pc, #32]	; (800ab50 <HAL_RCC_OscConfig+0x7b0>)
 800ab2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab34:	f7fc f886 	bl	8006c44 <HAL_GetTick>
 800ab38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab3a:	e011      	b.n	800ab60 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab3c:	f7fc f882 	bl	8006c44 <HAL_GetTick>
 800ab40:	4602      	mov	r2, r0
 800ab42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab44:	1ad3      	subs	r3, r2, r3
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	d90a      	bls.n	800ab60 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800ab4a:	2303      	movs	r3, #3
 800ab4c:	e04e      	b.n	800abec <HAL_RCC_OscConfig+0x84c>
 800ab4e:	bf00      	nop
 800ab50:	58024400 	.word	0x58024400
 800ab54:	58024800 	.word	0x58024800
 800ab58:	fffffc0c 	.word	0xfffffc0c
 800ab5c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab60:	4b24      	ldr	r3, [pc, #144]	; (800abf4 <HAL_RCC_OscConfig+0x854>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1e7      	bne.n	800ab3c <HAL_RCC_OscConfig+0x79c>
 800ab6c:	e03d      	b.n	800abea <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ab6e:	4b21      	ldr	r3, [pc, #132]	; (800abf4 <HAL_RCC_OscConfig+0x854>)
 800ab70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab72:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ab74:	4b1f      	ldr	r3, [pc, #124]	; (800abf4 <HAL_RCC_OscConfig+0x854>)
 800ab76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab78:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d031      	beq.n	800abe6 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	f003 0203 	and.w	r2, r3, #3
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d12a      	bne.n	800abe6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	091b      	lsrs	r3, r3, #4
 800ab94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d122      	bne.n	800abe6 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abaa:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800abac:	429a      	cmp	r2, r3
 800abae:	d11a      	bne.n	800abe6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	0a5b      	lsrs	r3, r3, #9
 800abb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abbc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d111      	bne.n	800abe6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	0c1b      	lsrs	r3, r3, #16
 800abc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abce:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d108      	bne.n	800abe6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	0e1b      	lsrs	r3, r3, #24
 800abd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abe0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d001      	beq.n	800abea <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	e000      	b.n	800abec <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800abea:	2300      	movs	r3, #0
}
 800abec:	4618      	mov	r0, r3
 800abee:	3730      	adds	r7, #48	; 0x30
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}
 800abf4:	58024400 	.word	0x58024400

0800abf8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b086      	sub	sp, #24
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d101      	bne.n	800ac0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e19c      	b.n	800af46 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ac0c:	4b8a      	ldr	r3, [pc, #552]	; (800ae38 <HAL_RCC_ClockConfig+0x240>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f003 030f 	and.w	r3, r3, #15
 800ac14:	683a      	ldr	r2, [r7, #0]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d910      	bls.n	800ac3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac1a:	4b87      	ldr	r3, [pc, #540]	; (800ae38 <HAL_RCC_ClockConfig+0x240>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f023 020f 	bic.w	r2, r3, #15
 800ac22:	4985      	ldr	r1, [pc, #532]	; (800ae38 <HAL_RCC_ClockConfig+0x240>)
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac2a:	4b83      	ldr	r3, [pc, #524]	; (800ae38 <HAL_RCC_ClockConfig+0x240>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f003 030f 	and.w	r3, r3, #15
 800ac32:	683a      	ldr	r2, [r7, #0]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d001      	beq.n	800ac3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e184      	b.n	800af46 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f003 0304 	and.w	r3, r3, #4
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d010      	beq.n	800ac6a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	691a      	ldr	r2, [r3, #16]
 800ac4c:	4b7b      	ldr	r3, [pc, #492]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800ac4e:	699b      	ldr	r3, [r3, #24]
 800ac50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d908      	bls.n	800ac6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ac58:	4b78      	ldr	r3, [pc, #480]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800ac5a:	699b      	ldr	r3, [r3, #24]
 800ac5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	4975      	ldr	r1, [pc, #468]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800ac66:	4313      	orrs	r3, r2
 800ac68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f003 0308 	and.w	r3, r3, #8
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d010      	beq.n	800ac98 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	695a      	ldr	r2, [r3, #20]
 800ac7a:	4b70      	ldr	r3, [pc, #448]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800ac7c:	69db      	ldr	r3, [r3, #28]
 800ac7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d908      	bls.n	800ac98 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ac86:	4b6d      	ldr	r3, [pc, #436]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800ac88:	69db      	ldr	r3, [r3, #28]
 800ac8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	695b      	ldr	r3, [r3, #20]
 800ac92:	496a      	ldr	r1, [pc, #424]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800ac94:	4313      	orrs	r3, r2
 800ac96:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f003 0310 	and.w	r3, r3, #16
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d010      	beq.n	800acc6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	699a      	ldr	r2, [r3, #24]
 800aca8:	4b64      	ldr	r3, [pc, #400]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800acaa:	69db      	ldr	r3, [r3, #28]
 800acac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d908      	bls.n	800acc6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800acb4:	4b61      	ldr	r3, [pc, #388]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800acb6:	69db      	ldr	r3, [r3, #28]
 800acb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	699b      	ldr	r3, [r3, #24]
 800acc0:	495e      	ldr	r1, [pc, #376]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800acc2:	4313      	orrs	r3, r2
 800acc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f003 0320 	and.w	r3, r3, #32
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d010      	beq.n	800acf4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	69da      	ldr	r2, [r3, #28]
 800acd6:	4b59      	ldr	r3, [pc, #356]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800acd8:	6a1b      	ldr	r3, [r3, #32]
 800acda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800acde:	429a      	cmp	r2, r3
 800ace0:	d908      	bls.n	800acf4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800ace2:	4b56      	ldr	r3, [pc, #344]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800ace4:	6a1b      	ldr	r3, [r3, #32]
 800ace6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	69db      	ldr	r3, [r3, #28]
 800acee:	4953      	ldr	r1, [pc, #332]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800acf0:	4313      	orrs	r3, r2
 800acf2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f003 0302 	and.w	r3, r3, #2
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d010      	beq.n	800ad22 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	68da      	ldr	r2, [r3, #12]
 800ad04:	4b4d      	ldr	r3, [pc, #308]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800ad06:	699b      	ldr	r3, [r3, #24]
 800ad08:	f003 030f 	and.w	r3, r3, #15
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d908      	bls.n	800ad22 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad10:	4b4a      	ldr	r3, [pc, #296]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800ad12:	699b      	ldr	r3, [r3, #24]
 800ad14:	f023 020f 	bic.w	r2, r3, #15
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	4947      	ldr	r1, [pc, #284]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f003 0301 	and.w	r3, r3, #1
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d055      	beq.n	800adda <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ad2e:	4b43      	ldr	r3, [pc, #268]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800ad30:	699b      	ldr	r3, [r3, #24]
 800ad32:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	4940      	ldr	r1, [pc, #256]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d107      	bne.n	800ad58 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ad48:	4b3c      	ldr	r3, [pc, #240]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d121      	bne.n	800ad98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ad54:	2301      	movs	r3, #1
 800ad56:	e0f6      	b.n	800af46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	2b03      	cmp	r3, #3
 800ad5e:	d107      	bne.n	800ad70 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad60:	4b36      	ldr	r3, [pc, #216]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d115      	bne.n	800ad98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e0ea      	b.n	800af46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d107      	bne.n	800ad88 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ad78:	4b30      	ldr	r3, [pc, #192]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d109      	bne.n	800ad98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ad84:	2301      	movs	r3, #1
 800ad86:	e0de      	b.n	800af46 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad88:	4b2c      	ldr	r3, [pc, #176]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f003 0304 	and.w	r3, r3, #4
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d101      	bne.n	800ad98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ad94:	2301      	movs	r3, #1
 800ad96:	e0d6      	b.n	800af46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ad98:	4b28      	ldr	r3, [pc, #160]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	f023 0207 	bic.w	r2, r3, #7
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	4925      	ldr	r1, [pc, #148]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800ada6:	4313      	orrs	r3, r2
 800ada8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adaa:	f7fb ff4b 	bl	8006c44 <HAL_GetTick>
 800adae:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adb0:	e00a      	b.n	800adc8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adb2:	f7fb ff47 	bl	8006c44 <HAL_GetTick>
 800adb6:	4602      	mov	r2, r0
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d901      	bls.n	800adc8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800adc4:	2303      	movs	r3, #3
 800adc6:	e0be      	b.n	800af46 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adc8:	4b1c      	ldr	r3, [pc, #112]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800adca:	691b      	ldr	r3, [r3, #16]
 800adcc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	00db      	lsls	r3, r3, #3
 800add6:	429a      	cmp	r2, r3
 800add8:	d1eb      	bne.n	800adb2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f003 0302 	and.w	r3, r3, #2
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d010      	beq.n	800ae08 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	68da      	ldr	r2, [r3, #12]
 800adea:	4b14      	ldr	r3, [pc, #80]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800adec:	699b      	ldr	r3, [r3, #24]
 800adee:	f003 030f 	and.w	r3, r3, #15
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d208      	bcs.n	800ae08 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800adf6:	4b11      	ldr	r3, [pc, #68]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800adf8:	699b      	ldr	r3, [r3, #24]
 800adfa:	f023 020f 	bic.w	r2, r3, #15
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	490e      	ldr	r1, [pc, #56]	; (800ae3c <HAL_RCC_ClockConfig+0x244>)
 800ae04:	4313      	orrs	r3, r2
 800ae06:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ae08:	4b0b      	ldr	r3, [pc, #44]	; (800ae38 <HAL_RCC_ClockConfig+0x240>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f003 030f 	and.w	r3, r3, #15
 800ae10:	683a      	ldr	r2, [r7, #0]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d214      	bcs.n	800ae40 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae16:	4b08      	ldr	r3, [pc, #32]	; (800ae38 <HAL_RCC_ClockConfig+0x240>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f023 020f 	bic.w	r2, r3, #15
 800ae1e:	4906      	ldr	r1, [pc, #24]	; (800ae38 <HAL_RCC_ClockConfig+0x240>)
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae26:	4b04      	ldr	r3, [pc, #16]	; (800ae38 <HAL_RCC_ClockConfig+0x240>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f003 030f 	and.w	r3, r3, #15
 800ae2e:	683a      	ldr	r2, [r7, #0]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d005      	beq.n	800ae40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ae34:	2301      	movs	r3, #1
 800ae36:	e086      	b.n	800af46 <HAL_RCC_ClockConfig+0x34e>
 800ae38:	52002000 	.word	0x52002000
 800ae3c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f003 0304 	and.w	r3, r3, #4
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d010      	beq.n	800ae6e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	691a      	ldr	r2, [r3, #16]
 800ae50:	4b3f      	ldr	r3, [pc, #252]	; (800af50 <HAL_RCC_ClockConfig+0x358>)
 800ae52:	699b      	ldr	r3, [r3, #24]
 800ae54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d208      	bcs.n	800ae6e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ae5c:	4b3c      	ldr	r3, [pc, #240]	; (800af50 <HAL_RCC_ClockConfig+0x358>)
 800ae5e:	699b      	ldr	r3, [r3, #24]
 800ae60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	691b      	ldr	r3, [r3, #16]
 800ae68:	4939      	ldr	r1, [pc, #228]	; (800af50 <HAL_RCC_ClockConfig+0x358>)
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f003 0308 	and.w	r3, r3, #8
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d010      	beq.n	800ae9c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	695a      	ldr	r2, [r3, #20]
 800ae7e:	4b34      	ldr	r3, [pc, #208]	; (800af50 <HAL_RCC_ClockConfig+0x358>)
 800ae80:	69db      	ldr	r3, [r3, #28]
 800ae82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d208      	bcs.n	800ae9c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ae8a:	4b31      	ldr	r3, [pc, #196]	; (800af50 <HAL_RCC_ClockConfig+0x358>)
 800ae8c:	69db      	ldr	r3, [r3, #28]
 800ae8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	695b      	ldr	r3, [r3, #20]
 800ae96:	492e      	ldr	r1, [pc, #184]	; (800af50 <HAL_RCC_ClockConfig+0x358>)
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f003 0310 	and.w	r3, r3, #16
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d010      	beq.n	800aeca <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	699a      	ldr	r2, [r3, #24]
 800aeac:	4b28      	ldr	r3, [pc, #160]	; (800af50 <HAL_RCC_ClockConfig+0x358>)
 800aeae:	69db      	ldr	r3, [r3, #28]
 800aeb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d208      	bcs.n	800aeca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aeb8:	4b25      	ldr	r3, [pc, #148]	; (800af50 <HAL_RCC_ClockConfig+0x358>)
 800aeba:	69db      	ldr	r3, [r3, #28]
 800aebc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	699b      	ldr	r3, [r3, #24]
 800aec4:	4922      	ldr	r1, [pc, #136]	; (800af50 <HAL_RCC_ClockConfig+0x358>)
 800aec6:	4313      	orrs	r3, r2
 800aec8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f003 0320 	and.w	r3, r3, #32
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d010      	beq.n	800aef8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	69da      	ldr	r2, [r3, #28]
 800aeda:	4b1d      	ldr	r3, [pc, #116]	; (800af50 <HAL_RCC_ClockConfig+0x358>)
 800aedc:	6a1b      	ldr	r3, [r3, #32]
 800aede:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d208      	bcs.n	800aef8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800aee6:	4b1a      	ldr	r3, [pc, #104]	; (800af50 <HAL_RCC_ClockConfig+0x358>)
 800aee8:	6a1b      	ldr	r3, [r3, #32]
 800aeea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	69db      	ldr	r3, [r3, #28]
 800aef2:	4917      	ldr	r1, [pc, #92]	; (800af50 <HAL_RCC_ClockConfig+0x358>)
 800aef4:	4313      	orrs	r3, r2
 800aef6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aef8:	f000 f834 	bl	800af64 <HAL_RCC_GetSysClockFreq>
 800aefc:	4602      	mov	r2, r0
 800aefe:	4b14      	ldr	r3, [pc, #80]	; (800af50 <HAL_RCC_ClockConfig+0x358>)
 800af00:	699b      	ldr	r3, [r3, #24]
 800af02:	0a1b      	lsrs	r3, r3, #8
 800af04:	f003 030f 	and.w	r3, r3, #15
 800af08:	4912      	ldr	r1, [pc, #72]	; (800af54 <HAL_RCC_ClockConfig+0x35c>)
 800af0a:	5ccb      	ldrb	r3, [r1, r3]
 800af0c:	f003 031f 	and.w	r3, r3, #31
 800af10:	fa22 f303 	lsr.w	r3, r2, r3
 800af14:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800af16:	4b0e      	ldr	r3, [pc, #56]	; (800af50 <HAL_RCC_ClockConfig+0x358>)
 800af18:	699b      	ldr	r3, [r3, #24]
 800af1a:	f003 030f 	and.w	r3, r3, #15
 800af1e:	4a0d      	ldr	r2, [pc, #52]	; (800af54 <HAL_RCC_ClockConfig+0x35c>)
 800af20:	5cd3      	ldrb	r3, [r2, r3]
 800af22:	f003 031f 	and.w	r3, r3, #31
 800af26:	693a      	ldr	r2, [r7, #16]
 800af28:	fa22 f303 	lsr.w	r3, r2, r3
 800af2c:	4a0a      	ldr	r2, [pc, #40]	; (800af58 <HAL_RCC_ClockConfig+0x360>)
 800af2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800af30:	4a0a      	ldr	r2, [pc, #40]	; (800af5c <HAL_RCC_ClockConfig+0x364>)
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800af36:	4b0a      	ldr	r3, [pc, #40]	; (800af60 <HAL_RCC_ClockConfig+0x368>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7fb fe38 	bl	8006bb0 <HAL_InitTick>
 800af40:	4603      	mov	r3, r0
 800af42:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800af44:	7bfb      	ldrb	r3, [r7, #15]
}
 800af46:	4618      	mov	r0, r3
 800af48:	3718      	adds	r7, #24
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	58024400 	.word	0x58024400
 800af54:	08014c04 	.word	0x08014c04
 800af58:	24000234 	.word	0x24000234
 800af5c:	24000230 	.word	0x24000230
 800af60:	24000238 	.word	0x24000238

0800af64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af64:	b480      	push	{r7}
 800af66:	b089      	sub	sp, #36	; 0x24
 800af68:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800af6a:	4bb3      	ldr	r3, [pc, #716]	; (800b238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af6c:	691b      	ldr	r3, [r3, #16]
 800af6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af72:	2b18      	cmp	r3, #24
 800af74:	f200 8155 	bhi.w	800b222 <HAL_RCC_GetSysClockFreq+0x2be>
 800af78:	a201      	add	r2, pc, #4	; (adr r2, 800af80 <HAL_RCC_GetSysClockFreq+0x1c>)
 800af7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af7e:	bf00      	nop
 800af80:	0800afe5 	.word	0x0800afe5
 800af84:	0800b223 	.word	0x0800b223
 800af88:	0800b223 	.word	0x0800b223
 800af8c:	0800b223 	.word	0x0800b223
 800af90:	0800b223 	.word	0x0800b223
 800af94:	0800b223 	.word	0x0800b223
 800af98:	0800b223 	.word	0x0800b223
 800af9c:	0800b223 	.word	0x0800b223
 800afa0:	0800b00b 	.word	0x0800b00b
 800afa4:	0800b223 	.word	0x0800b223
 800afa8:	0800b223 	.word	0x0800b223
 800afac:	0800b223 	.word	0x0800b223
 800afb0:	0800b223 	.word	0x0800b223
 800afb4:	0800b223 	.word	0x0800b223
 800afb8:	0800b223 	.word	0x0800b223
 800afbc:	0800b223 	.word	0x0800b223
 800afc0:	0800b011 	.word	0x0800b011
 800afc4:	0800b223 	.word	0x0800b223
 800afc8:	0800b223 	.word	0x0800b223
 800afcc:	0800b223 	.word	0x0800b223
 800afd0:	0800b223 	.word	0x0800b223
 800afd4:	0800b223 	.word	0x0800b223
 800afd8:	0800b223 	.word	0x0800b223
 800afdc:	0800b223 	.word	0x0800b223
 800afe0:	0800b017 	.word	0x0800b017
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afe4:	4b94      	ldr	r3, [pc, #592]	; (800b238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f003 0320 	and.w	r3, r3, #32
 800afec:	2b00      	cmp	r3, #0
 800afee:	d009      	beq.n	800b004 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aff0:	4b91      	ldr	r3, [pc, #580]	; (800b238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	08db      	lsrs	r3, r3, #3
 800aff6:	f003 0303 	and.w	r3, r3, #3
 800affa:	4a90      	ldr	r2, [pc, #576]	; (800b23c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800affc:	fa22 f303 	lsr.w	r3, r2, r3
 800b000:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b002:	e111      	b.n	800b228 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b004:	4b8d      	ldr	r3, [pc, #564]	; (800b23c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b006:	61bb      	str	r3, [r7, #24]
    break;
 800b008:	e10e      	b.n	800b228 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800b00a:	4b8d      	ldr	r3, [pc, #564]	; (800b240 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b00c:	61bb      	str	r3, [r7, #24]
    break;
 800b00e:	e10b      	b.n	800b228 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800b010:	4b8c      	ldr	r3, [pc, #560]	; (800b244 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b012:	61bb      	str	r3, [r7, #24]
    break;
 800b014:	e108      	b.n	800b228 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b016:	4b88      	ldr	r3, [pc, #544]	; (800b238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b01a:	f003 0303 	and.w	r3, r3, #3
 800b01e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800b020:	4b85      	ldr	r3, [pc, #532]	; (800b238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b024:	091b      	lsrs	r3, r3, #4
 800b026:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b02a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b02c:	4b82      	ldr	r3, [pc, #520]	; (800b238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b030:	f003 0301 	and.w	r3, r3, #1
 800b034:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b036:	4b80      	ldr	r3, [pc, #512]	; (800b238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b03a:	08db      	lsrs	r3, r3, #3
 800b03c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	fb02 f303 	mul.w	r3, r2, r3
 800b046:	ee07 3a90 	vmov	s15, r3
 800b04a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b04e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	2b00      	cmp	r3, #0
 800b056:	f000 80e1 	beq.w	800b21c <HAL_RCC_GetSysClockFreq+0x2b8>
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	2b02      	cmp	r3, #2
 800b05e:	f000 8083 	beq.w	800b168 <HAL_RCC_GetSysClockFreq+0x204>
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	2b02      	cmp	r3, #2
 800b066:	f200 80a1 	bhi.w	800b1ac <HAL_RCC_GetSysClockFreq+0x248>
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d003      	beq.n	800b078 <HAL_RCC_GetSysClockFreq+0x114>
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	2b01      	cmp	r3, #1
 800b074:	d056      	beq.n	800b124 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b076:	e099      	b.n	800b1ac <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b078:	4b6f      	ldr	r3, [pc, #444]	; (800b238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f003 0320 	and.w	r3, r3, #32
 800b080:	2b00      	cmp	r3, #0
 800b082:	d02d      	beq.n	800b0e0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b084:	4b6c      	ldr	r3, [pc, #432]	; (800b238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	08db      	lsrs	r3, r3, #3
 800b08a:	f003 0303 	and.w	r3, r3, #3
 800b08e:	4a6b      	ldr	r2, [pc, #428]	; (800b23c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b090:	fa22 f303 	lsr.w	r3, r2, r3
 800b094:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	ee07 3a90 	vmov	s15, r3
 800b09c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	ee07 3a90 	vmov	s15, r3
 800b0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0ae:	4b62      	ldr	r3, [pc, #392]	; (800b238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0b6:	ee07 3a90 	vmov	s15, r3
 800b0ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0be:	ed97 6a02 	vldr	s12, [r7, #8]
 800b0c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b248 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b0c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800b0de:	e087      	b.n	800b1f0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	ee07 3a90 	vmov	s15, r3
 800b0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b24c <HAL_RCC_GetSysClockFreq+0x2e8>
 800b0ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0f2:	4b51      	ldr	r3, [pc, #324]	; (800b238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0fa:	ee07 3a90 	vmov	s15, r3
 800b0fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b102:	ed97 6a02 	vldr	s12, [r7, #8]
 800b106:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b248 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b10a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b10e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b11a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b11e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b122:	e065      	b.n	800b1f0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	ee07 3a90 	vmov	s15, r3
 800b12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b12e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b250 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b136:	4b40      	ldr	r3, [pc, #256]	; (800b238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b13a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b13e:	ee07 3a90 	vmov	s15, r3
 800b142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b146:	ed97 6a02 	vldr	s12, [r7, #8]
 800b14a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b248 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b14e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b15a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b15e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b166:	e043      	b.n	800b1f0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	ee07 3a90 	vmov	s15, r3
 800b16e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b172:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b254 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b17a:	4b2f      	ldr	r3, [pc, #188]	; (800b238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b17e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b182:	ee07 3a90 	vmov	s15, r3
 800b186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b18a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b18e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b248 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b19a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b19e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1aa:	e021      	b.n	800b1f0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	ee07 3a90 	vmov	s15, r3
 800b1b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b250 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b1ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1be:	4b1e      	ldr	r3, [pc, #120]	; (800b238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1c6:	ee07 3a90 	vmov	s15, r3
 800b1ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800b1d2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b248 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b1d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1ee:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b1f0:	4b11      	ldr	r3, [pc, #68]	; (800b238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f4:	0a5b      	lsrs	r3, r3, #9
 800b1f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	ee07 3a90 	vmov	s15, r3
 800b204:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b208:	edd7 6a07 	vldr	s13, [r7, #28]
 800b20c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b214:	ee17 3a90 	vmov	r3, s15
 800b218:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b21a:	e005      	b.n	800b228 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b21c:	2300      	movs	r3, #0
 800b21e:	61bb      	str	r3, [r7, #24]
    break;
 800b220:	e002      	b.n	800b228 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b222:	4b07      	ldr	r3, [pc, #28]	; (800b240 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b224:	61bb      	str	r3, [r7, #24]
    break;
 800b226:	bf00      	nop
  }

  return sysclockfreq;
 800b228:	69bb      	ldr	r3, [r7, #24]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3724      	adds	r7, #36	; 0x24
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	58024400 	.word	0x58024400
 800b23c:	03d09000 	.word	0x03d09000
 800b240:	003d0900 	.word	0x003d0900
 800b244:	02dc6c00 	.word	0x02dc6c00
 800b248:	46000000 	.word	0x46000000
 800b24c:	4c742400 	.word	0x4c742400
 800b250:	4a742400 	.word	0x4a742400
 800b254:	4c371b00 	.word	0x4c371b00

0800b258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b25e:	f7ff fe81 	bl	800af64 <HAL_RCC_GetSysClockFreq>
 800b262:	4602      	mov	r2, r0
 800b264:	4b10      	ldr	r3, [pc, #64]	; (800b2a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800b266:	699b      	ldr	r3, [r3, #24]
 800b268:	0a1b      	lsrs	r3, r3, #8
 800b26a:	f003 030f 	and.w	r3, r3, #15
 800b26e:	490f      	ldr	r1, [pc, #60]	; (800b2ac <HAL_RCC_GetHCLKFreq+0x54>)
 800b270:	5ccb      	ldrb	r3, [r1, r3]
 800b272:	f003 031f 	and.w	r3, r3, #31
 800b276:	fa22 f303 	lsr.w	r3, r2, r3
 800b27a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b27c:	4b0a      	ldr	r3, [pc, #40]	; (800b2a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800b27e:	699b      	ldr	r3, [r3, #24]
 800b280:	f003 030f 	and.w	r3, r3, #15
 800b284:	4a09      	ldr	r2, [pc, #36]	; (800b2ac <HAL_RCC_GetHCLKFreq+0x54>)
 800b286:	5cd3      	ldrb	r3, [r2, r3]
 800b288:	f003 031f 	and.w	r3, r3, #31
 800b28c:	687a      	ldr	r2, [r7, #4]
 800b28e:	fa22 f303 	lsr.w	r3, r2, r3
 800b292:	4a07      	ldr	r2, [pc, #28]	; (800b2b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800b294:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b296:	4a07      	ldr	r2, [pc, #28]	; (800b2b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b29c:	4b04      	ldr	r3, [pc, #16]	; (800b2b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800b29e:	681b      	ldr	r3, [r3, #0]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3708      	adds	r7, #8
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}
 800b2a8:	58024400 	.word	0x58024400
 800b2ac:	08014c04 	.word	0x08014c04
 800b2b0:	24000234 	.word	0x24000234
 800b2b4:	24000230 	.word	0x24000230

0800b2b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b2bc:	f7ff ffcc 	bl	800b258 <HAL_RCC_GetHCLKFreq>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	4b06      	ldr	r3, [pc, #24]	; (800b2dc <HAL_RCC_GetPCLK1Freq+0x24>)
 800b2c4:	69db      	ldr	r3, [r3, #28]
 800b2c6:	091b      	lsrs	r3, r3, #4
 800b2c8:	f003 0307 	and.w	r3, r3, #7
 800b2cc:	4904      	ldr	r1, [pc, #16]	; (800b2e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b2ce:	5ccb      	ldrb	r3, [r1, r3]
 800b2d0:	f003 031f 	and.w	r3, r3, #31
 800b2d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	58024400 	.word	0x58024400
 800b2e0:	08014c04 	.word	0x08014c04

0800b2e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b2e8:	f7ff ffb6 	bl	800b258 <HAL_RCC_GetHCLKFreq>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	4b06      	ldr	r3, [pc, #24]	; (800b308 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b2f0:	69db      	ldr	r3, [r3, #28]
 800b2f2:	0a1b      	lsrs	r3, r3, #8
 800b2f4:	f003 0307 	and.w	r3, r3, #7
 800b2f8:	4904      	ldr	r1, [pc, #16]	; (800b30c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b2fa:	5ccb      	ldrb	r3, [r1, r3]
 800b2fc:	f003 031f 	and.w	r3, r3, #31
 800b300:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b304:	4618      	mov	r0, r3
 800b306:	bd80      	pop	{r7, pc}
 800b308:	58024400 	.word	0x58024400
 800b30c:	08014c04 	.word	0x08014c04

0800b310 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b086      	sub	sp, #24
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b318:	2300      	movs	r3, #0
 800b31a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b31c:	2300      	movs	r3, #0
 800b31e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d03f      	beq.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b330:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b334:	d02a      	beq.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b336:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b33a:	d824      	bhi.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b33c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b340:	d018      	beq.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b342:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b346:	d81e      	bhi.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d003      	beq.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b34c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b350:	d007      	beq.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b352:	e018      	b.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b354:	4bab      	ldr	r3, [pc, #684]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b358:	4aaa      	ldr	r2, [pc, #680]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b35a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b35e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b360:	e015      	b.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	3304      	adds	r3, #4
 800b366:	2102      	movs	r1, #2
 800b368:	4618      	mov	r0, r3
 800b36a:	f001 f9cf 	bl	800c70c <RCCEx_PLL2_Config>
 800b36e:	4603      	mov	r3, r0
 800b370:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b372:	e00c      	b.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	3324      	adds	r3, #36	; 0x24
 800b378:	2102      	movs	r1, #2
 800b37a:	4618      	mov	r0, r3
 800b37c:	f001 fa78 	bl	800c870 <RCCEx_PLL3_Config>
 800b380:	4603      	mov	r3, r0
 800b382:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b384:	e003      	b.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b386:	2301      	movs	r3, #1
 800b388:	75fb      	strb	r3, [r7, #23]
      break;
 800b38a:	e000      	b.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b38c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b38e:	7dfb      	ldrb	r3, [r7, #23]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d109      	bne.n	800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b394:	4b9b      	ldr	r3, [pc, #620]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b398:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3a0:	4998      	ldr	r1, [pc, #608]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	650b      	str	r3, [r1, #80]	; 0x50
 800b3a6:	e001      	b.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3a8:	7dfb      	ldrb	r3, [r7, #23]
 800b3aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d03d      	beq.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3bc:	2b04      	cmp	r3, #4
 800b3be:	d826      	bhi.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b3c0:	a201      	add	r2, pc, #4	; (adr r2, 800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c6:	bf00      	nop
 800b3c8:	0800b3dd 	.word	0x0800b3dd
 800b3cc:	0800b3eb 	.word	0x0800b3eb
 800b3d0:	0800b3fd 	.word	0x0800b3fd
 800b3d4:	0800b415 	.word	0x0800b415
 800b3d8:	0800b415 	.word	0x0800b415
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3dc:	4b89      	ldr	r3, [pc, #548]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e0:	4a88      	ldr	r2, [pc, #544]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b3e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b3e8:	e015      	b.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	3304      	adds	r3, #4
 800b3ee:	2100      	movs	r1, #0
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f001 f98b 	bl	800c70c <RCCEx_PLL2_Config>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b3fa:	e00c      	b.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	3324      	adds	r3, #36	; 0x24
 800b400:	2100      	movs	r1, #0
 800b402:	4618      	mov	r0, r3
 800b404:	f001 fa34 	bl	800c870 <RCCEx_PLL3_Config>
 800b408:	4603      	mov	r3, r0
 800b40a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b40c:	e003      	b.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b40e:	2301      	movs	r3, #1
 800b410:	75fb      	strb	r3, [r7, #23]
      break;
 800b412:	e000      	b.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b414:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b416:	7dfb      	ldrb	r3, [r7, #23]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d109      	bne.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b41c:	4b79      	ldr	r3, [pc, #484]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b41e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b420:	f023 0207 	bic.w	r2, r3, #7
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b428:	4976      	ldr	r1, [pc, #472]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b42a:	4313      	orrs	r3, r2
 800b42c:	650b      	str	r3, [r1, #80]	; 0x50
 800b42e:	e001      	b.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b430:	7dfb      	ldrb	r3, [r7, #23]
 800b432:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d042      	beq.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b448:	d02b      	beq.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b44a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b44e:	d825      	bhi.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b450:	2bc0      	cmp	r3, #192	; 0xc0
 800b452:	d028      	beq.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b454:	2bc0      	cmp	r3, #192	; 0xc0
 800b456:	d821      	bhi.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b458:	2b80      	cmp	r3, #128	; 0x80
 800b45a:	d016      	beq.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800b45c:	2b80      	cmp	r3, #128	; 0x80
 800b45e:	d81d      	bhi.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b460:	2b00      	cmp	r3, #0
 800b462:	d002      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800b464:	2b40      	cmp	r3, #64	; 0x40
 800b466:	d007      	beq.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b468:	e018      	b.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b46a:	4b66      	ldr	r3, [pc, #408]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46e:	4a65      	ldr	r2, [pc, #404]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b474:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b476:	e017      	b.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	3304      	adds	r3, #4
 800b47c:	2100      	movs	r1, #0
 800b47e:	4618      	mov	r0, r3
 800b480:	f001 f944 	bl	800c70c <RCCEx_PLL2_Config>
 800b484:	4603      	mov	r3, r0
 800b486:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b488:	e00e      	b.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	3324      	adds	r3, #36	; 0x24
 800b48e:	2100      	movs	r1, #0
 800b490:	4618      	mov	r0, r3
 800b492:	f001 f9ed 	bl	800c870 <RCCEx_PLL3_Config>
 800b496:	4603      	mov	r3, r0
 800b498:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b49a:	e005      	b.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	75fb      	strb	r3, [r7, #23]
      break;
 800b4a0:	e002      	b.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b4a2:	bf00      	nop
 800b4a4:	e000      	b.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b4a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4a8:	7dfb      	ldrb	r3, [r7, #23]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d109      	bne.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b4ae:	4b55      	ldr	r3, [pc, #340]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b4b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4b2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ba:	4952      	ldr	r1, [pc, #328]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	650b      	str	r3, [r1, #80]	; 0x50
 800b4c0:	e001      	b.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4c2:	7dfb      	ldrb	r3, [r7, #23]
 800b4c4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d049      	beq.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b4d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b4dc:	d030      	beq.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b4de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b4e2:	d82a      	bhi.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b4e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b4e8:	d02c      	beq.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800b4ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b4ee:	d824      	bhi.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b4f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b4f4:	d018      	beq.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800b4f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b4fa:	d81e      	bhi.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d003      	beq.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b500:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b504:	d007      	beq.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b506:	e018      	b.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b508:	4b3e      	ldr	r3, [pc, #248]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b50c:	4a3d      	ldr	r2, [pc, #244]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b50e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b512:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b514:	e017      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	3304      	adds	r3, #4
 800b51a:	2100      	movs	r1, #0
 800b51c:	4618      	mov	r0, r3
 800b51e:	f001 f8f5 	bl	800c70c <RCCEx_PLL2_Config>
 800b522:	4603      	mov	r3, r0
 800b524:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b526:	e00e      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	3324      	adds	r3, #36	; 0x24
 800b52c:	2100      	movs	r1, #0
 800b52e:	4618      	mov	r0, r3
 800b530:	f001 f99e 	bl	800c870 <RCCEx_PLL3_Config>
 800b534:	4603      	mov	r3, r0
 800b536:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b538:	e005      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	75fb      	strb	r3, [r7, #23]
      break;
 800b53e:	e002      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b540:	bf00      	nop
 800b542:	e000      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b544:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b546:	7dfb      	ldrb	r3, [r7, #23]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d10a      	bne.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b54c:	4b2d      	ldr	r3, [pc, #180]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b54e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b550:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b55a:	492a      	ldr	r1, [pc, #168]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b55c:	4313      	orrs	r3, r2
 800b55e:	658b      	str	r3, [r1, #88]	; 0x58
 800b560:	e001      	b.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b562:	7dfb      	ldrb	r3, [r7, #23]
 800b564:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d04c      	beq.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b578:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b57c:	d030      	beq.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800b57e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b582:	d82a      	bhi.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b584:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b588:	d02c      	beq.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800b58a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b58e:	d824      	bhi.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b590:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b594:	d018      	beq.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800b596:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b59a:	d81e      	bhi.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d003      	beq.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b5a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b5a4:	d007      	beq.n	800b5b6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b5a6:	e018      	b.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5a8:	4b16      	ldr	r3, [pc, #88]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ac:	4a15      	ldr	r2, [pc, #84]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b5b4:	e017      	b.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	3304      	adds	r3, #4
 800b5ba:	2100      	movs	r1, #0
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f001 f8a5 	bl	800c70c <RCCEx_PLL2_Config>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b5c6:	e00e      	b.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	3324      	adds	r3, #36	; 0x24
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f001 f94e 	bl	800c870 <RCCEx_PLL3_Config>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b5d8:	e005      	b.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	75fb      	strb	r3, [r7, #23]
      break;
 800b5de:	e002      	b.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800b5e0:	bf00      	nop
 800b5e2:	e000      	b.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800b5e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b5e6:	7dfb      	ldrb	r3, [r7, #23]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d10d      	bne.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b5ec:	4b05      	ldr	r3, [pc, #20]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5f0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b5fa:	4902      	ldr	r1, [pc, #8]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	658b      	str	r3, [r1, #88]	; 0x58
 800b600:	e004      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800b602:	bf00      	nop
 800b604:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b608:	7dfb      	ldrb	r3, [r7, #23]
 800b60a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b614:	2b00      	cmp	r3, #0
 800b616:	d032      	beq.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b61c:	2b30      	cmp	r3, #48	; 0x30
 800b61e:	d01c      	beq.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b620:	2b30      	cmp	r3, #48	; 0x30
 800b622:	d817      	bhi.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800b624:	2b20      	cmp	r3, #32
 800b626:	d00c      	beq.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800b628:	2b20      	cmp	r3, #32
 800b62a:	d813      	bhi.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d016      	beq.n	800b65e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b630:	2b10      	cmp	r3, #16
 800b632:	d10f      	bne.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b634:	4baf      	ldr	r3, [pc, #700]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b638:	4aae      	ldr	r2, [pc, #696]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b63a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b63e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b640:	e00e      	b.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	3304      	adds	r3, #4
 800b646:	2102      	movs	r1, #2
 800b648:	4618      	mov	r0, r3
 800b64a:	f001 f85f 	bl	800c70c <RCCEx_PLL2_Config>
 800b64e:	4603      	mov	r3, r0
 800b650:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b652:	e005      	b.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b654:	2301      	movs	r3, #1
 800b656:	75fb      	strb	r3, [r7, #23]
      break;
 800b658:	e002      	b.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800b65a:	bf00      	nop
 800b65c:	e000      	b.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800b65e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b660:	7dfb      	ldrb	r3, [r7, #23]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d109      	bne.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b666:	4ba3      	ldr	r3, [pc, #652]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b66a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b672:	49a0      	ldr	r1, [pc, #640]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b674:	4313      	orrs	r3, r2
 800b676:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b678:	e001      	b.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b67a:	7dfb      	ldrb	r3, [r7, #23]
 800b67c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b686:	2b00      	cmp	r3, #0
 800b688:	d047      	beq.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b68e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b692:	d030      	beq.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800b694:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b698:	d82a      	bhi.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b69a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b69e:	d02c      	beq.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800b6a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b6a4:	d824      	bhi.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b6a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6aa:	d018      	beq.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800b6ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6b0:	d81e      	bhi.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d003      	beq.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800b6b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6ba:	d007      	beq.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800b6bc:	e018      	b.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6be:	4b8d      	ldr	r3, [pc, #564]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c2:	4a8c      	ldr	r2, [pc, #560]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b6c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b6ca:	e017      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	3304      	adds	r3, #4
 800b6d0:	2100      	movs	r1, #0
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f001 f81a 	bl	800c70c <RCCEx_PLL2_Config>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b6dc:	e00e      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	3324      	adds	r3, #36	; 0x24
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f001 f8c3 	bl	800c870 <RCCEx_PLL3_Config>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b6ee:	e005      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	75fb      	strb	r3, [r7, #23]
      break;
 800b6f4:	e002      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b6f6:	bf00      	nop
 800b6f8:	e000      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b6fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6fc:	7dfb      	ldrb	r3, [r7, #23]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d109      	bne.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b702:	4b7c      	ldr	r3, [pc, #496]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b706:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b70e:	4979      	ldr	r1, [pc, #484]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b710:	4313      	orrs	r3, r2
 800b712:	650b      	str	r3, [r1, #80]	; 0x50
 800b714:	e001      	b.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b716:	7dfb      	ldrb	r3, [r7, #23]
 800b718:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b722:	2b00      	cmp	r3, #0
 800b724:	d049      	beq.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b72a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b72e:	d02e      	beq.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800b730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b734:	d828      	bhi.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b736:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b73a:	d02a      	beq.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800b73c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b740:	d822      	bhi.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b742:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b746:	d026      	beq.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800b748:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b74c:	d81c      	bhi.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b74e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b752:	d010      	beq.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800b754:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b758:	d816      	bhi.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d01d      	beq.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800b75e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b762:	d111      	bne.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	3304      	adds	r3, #4
 800b768:	2101      	movs	r1, #1
 800b76a:	4618      	mov	r0, r3
 800b76c:	f000 ffce 	bl	800c70c <RCCEx_PLL2_Config>
 800b770:	4603      	mov	r3, r0
 800b772:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b774:	e012      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	3324      	adds	r3, #36	; 0x24
 800b77a:	2101      	movs	r1, #1
 800b77c:	4618      	mov	r0, r3
 800b77e:	f001 f877 	bl	800c870 <RCCEx_PLL3_Config>
 800b782:	4603      	mov	r3, r0
 800b784:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b786:	e009      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b788:	2301      	movs	r3, #1
 800b78a:	75fb      	strb	r3, [r7, #23]
      break;
 800b78c:	e006      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b78e:	bf00      	nop
 800b790:	e004      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b792:	bf00      	nop
 800b794:	e002      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b796:	bf00      	nop
 800b798:	e000      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b79a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b79c:	7dfb      	ldrb	r3, [r7, #23]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d109      	bne.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b7a2:	4b54      	ldr	r3, [pc, #336]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b7a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7a6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7ae:	4951      	ldr	r1, [pc, #324]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	650b      	str	r3, [r1, #80]	; 0x50
 800b7b4:	e001      	b.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7b6:	7dfb      	ldrb	r3, [r7, #23]
 800b7b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d04b      	beq.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b7cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7d0:	d02e      	beq.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800b7d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7d6:	d828      	bhi.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b7d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7dc:	d02a      	beq.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800b7de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7e2:	d822      	bhi.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b7e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b7e8:	d026      	beq.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800b7ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b7ee:	d81c      	bhi.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b7f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7f4:	d010      	beq.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800b7f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7fa:	d816      	bhi.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d01d      	beq.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800b800:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b804:	d111      	bne.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	3304      	adds	r3, #4
 800b80a:	2101      	movs	r1, #1
 800b80c:	4618      	mov	r0, r3
 800b80e:	f000 ff7d 	bl	800c70c <RCCEx_PLL2_Config>
 800b812:	4603      	mov	r3, r0
 800b814:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b816:	e012      	b.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	3324      	adds	r3, #36	; 0x24
 800b81c:	2101      	movs	r1, #1
 800b81e:	4618      	mov	r0, r3
 800b820:	f001 f826 	bl	800c870 <RCCEx_PLL3_Config>
 800b824:	4603      	mov	r3, r0
 800b826:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b828:	e009      	b.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	75fb      	strb	r3, [r7, #23]
      break;
 800b82e:	e006      	b.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b830:	bf00      	nop
 800b832:	e004      	b.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b834:	bf00      	nop
 800b836:	e002      	b.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b838:	bf00      	nop
 800b83a:	e000      	b.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b83c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b83e:	7dfb      	ldrb	r3, [r7, #23]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d10a      	bne.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b844:	4b2b      	ldr	r3, [pc, #172]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b848:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b852:	4928      	ldr	r1, [pc, #160]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b854:	4313      	orrs	r3, r2
 800b856:	658b      	str	r3, [r1, #88]	; 0x58
 800b858:	e001      	b.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b85a:	7dfb      	ldrb	r3, [r7, #23]
 800b85c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b866:	2b00      	cmp	r3, #0
 800b868:	d02f      	beq.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b86e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b872:	d00e      	beq.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b878:	d814      	bhi.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d015      	beq.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b87e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b882:	d10f      	bne.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b884:	4b1b      	ldr	r3, [pc, #108]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b888:	4a1a      	ldr	r2, [pc, #104]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b88a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b88e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b890:	e00c      	b.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	3304      	adds	r3, #4
 800b896:	2101      	movs	r1, #1
 800b898:	4618      	mov	r0, r3
 800b89a:	f000 ff37 	bl	800c70c <RCCEx_PLL2_Config>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b8a2:	e003      	b.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	75fb      	strb	r3, [r7, #23]
      break;
 800b8a8:	e000      	b.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800b8aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8ac:	7dfb      	ldrb	r3, [r7, #23]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d109      	bne.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b8b2:	4b10      	ldr	r3, [pc, #64]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b8b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8be:	490d      	ldr	r1, [pc, #52]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	650b      	str	r3, [r1, #80]	; 0x50
 800b8c4:	e001      	b.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8c6:	7dfb      	ldrb	r3, [r7, #23]
 800b8c8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d033      	beq.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8da:	2b03      	cmp	r3, #3
 800b8dc:	d81c      	bhi.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800b8de:	a201      	add	r2, pc, #4	; (adr r2, 800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800b8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e4:	0800b91f 	.word	0x0800b91f
 800b8e8:	0800b8f9 	.word	0x0800b8f9
 800b8ec:	0800b907 	.word	0x0800b907
 800b8f0:	0800b91f 	.word	0x0800b91f
 800b8f4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8f8:	4bb8      	ldr	r3, [pc, #736]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8fc:	4ab7      	ldr	r2, [pc, #732]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b8fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b902:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b904:	e00c      	b.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	3304      	adds	r3, #4
 800b90a:	2102      	movs	r1, #2
 800b90c:	4618      	mov	r0, r3
 800b90e:	f000 fefd 	bl	800c70c <RCCEx_PLL2_Config>
 800b912:	4603      	mov	r3, r0
 800b914:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b916:	e003      	b.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b918:	2301      	movs	r3, #1
 800b91a:	75fb      	strb	r3, [r7, #23]
      break;
 800b91c:	e000      	b.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b91e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b920:	7dfb      	ldrb	r3, [r7, #23]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d109      	bne.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b926:	4bad      	ldr	r3, [pc, #692]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b92a:	f023 0203 	bic.w	r2, r3, #3
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b932:	49aa      	ldr	r1, [pc, #680]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b934:	4313      	orrs	r3, r2
 800b936:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b938:	e001      	b.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b93a:	7dfb      	ldrb	r3, [r7, #23]
 800b93c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b946:	2b00      	cmp	r3, #0
 800b948:	f000 8086 	beq.w	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b94c:	4ba4      	ldr	r3, [pc, #656]	; (800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4aa3      	ldr	r2, [pc, #652]	; (800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b956:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b958:	f7fb f974 	bl	8006c44 <HAL_GetTick>
 800b95c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b95e:	e009      	b.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b960:	f7fb f970 	bl	8006c44 <HAL_GetTick>
 800b964:	4602      	mov	r2, r0
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	1ad3      	subs	r3, r2, r3
 800b96a:	2b64      	cmp	r3, #100	; 0x64
 800b96c:	d902      	bls.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b96e:	2303      	movs	r3, #3
 800b970:	75fb      	strb	r3, [r7, #23]
        break;
 800b972:	e005      	b.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b974:	4b9a      	ldr	r3, [pc, #616]	; (800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d0ef      	beq.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b980:	7dfb      	ldrb	r3, [r7, #23]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d166      	bne.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b986:	4b95      	ldr	r3, [pc, #596]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b988:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b990:	4053      	eors	r3, r2
 800b992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b996:	2b00      	cmp	r3, #0
 800b998:	d013      	beq.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b99a:	4b90      	ldr	r3, [pc, #576]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b99c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b99e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9a2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b9a4:	4b8d      	ldr	r3, [pc, #564]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b9a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9a8:	4a8c      	ldr	r2, [pc, #560]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b9aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9ae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b9b0:	4b8a      	ldr	r3, [pc, #552]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b9b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9b4:	4a89      	ldr	r2, [pc, #548]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b9b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9ba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b9bc:	4a87      	ldr	r2, [pc, #540]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b9c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9cc:	d115      	bne.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9ce:	f7fb f939 	bl	8006c44 <HAL_GetTick>
 800b9d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b9d4:	e00b      	b.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9d6:	f7fb f935 	bl	8006c44 <HAL_GetTick>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	1ad3      	subs	r3, r2, r3
 800b9e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d902      	bls.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800b9e8:	2303      	movs	r3, #3
 800b9ea:	75fb      	strb	r3, [r7, #23]
            break;
 800b9ec:	e005      	b.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b9ee:	4b7b      	ldr	r3, [pc, #492]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b9f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9f2:	f003 0302 	and.w	r3, r3, #2
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d0ed      	beq.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800b9fa:	7dfb      	ldrb	r3, [r7, #23]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d126      	bne.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ba06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba0e:	d10d      	bne.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800ba10:	4b72      	ldr	r3, [pc, #456]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ba12:	691b      	ldr	r3, [r3, #16]
 800ba14:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ba1e:	0919      	lsrs	r1, r3, #4
 800ba20:	4b70      	ldr	r3, [pc, #448]	; (800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800ba22:	400b      	ands	r3, r1
 800ba24:	496d      	ldr	r1, [pc, #436]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ba26:	4313      	orrs	r3, r2
 800ba28:	610b      	str	r3, [r1, #16]
 800ba2a:	e005      	b.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800ba2c:	4b6b      	ldr	r3, [pc, #428]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ba2e:	691b      	ldr	r3, [r3, #16]
 800ba30:	4a6a      	ldr	r2, [pc, #424]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ba32:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ba36:	6113      	str	r3, [r2, #16]
 800ba38:	4b68      	ldr	r3, [pc, #416]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ba3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ba42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba46:	4965      	ldr	r1, [pc, #404]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	670b      	str	r3, [r1, #112]	; 0x70
 800ba4c:	e004      	b.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ba4e:	7dfb      	ldrb	r3, [r7, #23]
 800ba50:	75bb      	strb	r3, [r7, #22]
 800ba52:	e001      	b.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba54:	7dfb      	ldrb	r3, [r7, #23]
 800ba56:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f003 0301 	and.w	r3, r3, #1
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d07e      	beq.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba68:	2b28      	cmp	r3, #40	; 0x28
 800ba6a:	d867      	bhi.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800ba6c:	a201      	add	r2, pc, #4	; (adr r2, 800ba74 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800ba6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba72:	bf00      	nop
 800ba74:	0800bb43 	.word	0x0800bb43
 800ba78:	0800bb3d 	.word	0x0800bb3d
 800ba7c:	0800bb3d 	.word	0x0800bb3d
 800ba80:	0800bb3d 	.word	0x0800bb3d
 800ba84:	0800bb3d 	.word	0x0800bb3d
 800ba88:	0800bb3d 	.word	0x0800bb3d
 800ba8c:	0800bb3d 	.word	0x0800bb3d
 800ba90:	0800bb3d 	.word	0x0800bb3d
 800ba94:	0800bb19 	.word	0x0800bb19
 800ba98:	0800bb3d 	.word	0x0800bb3d
 800ba9c:	0800bb3d 	.word	0x0800bb3d
 800baa0:	0800bb3d 	.word	0x0800bb3d
 800baa4:	0800bb3d 	.word	0x0800bb3d
 800baa8:	0800bb3d 	.word	0x0800bb3d
 800baac:	0800bb3d 	.word	0x0800bb3d
 800bab0:	0800bb3d 	.word	0x0800bb3d
 800bab4:	0800bb2b 	.word	0x0800bb2b
 800bab8:	0800bb3d 	.word	0x0800bb3d
 800babc:	0800bb3d 	.word	0x0800bb3d
 800bac0:	0800bb3d 	.word	0x0800bb3d
 800bac4:	0800bb3d 	.word	0x0800bb3d
 800bac8:	0800bb3d 	.word	0x0800bb3d
 800bacc:	0800bb3d 	.word	0x0800bb3d
 800bad0:	0800bb3d 	.word	0x0800bb3d
 800bad4:	0800bb43 	.word	0x0800bb43
 800bad8:	0800bb3d 	.word	0x0800bb3d
 800badc:	0800bb3d 	.word	0x0800bb3d
 800bae0:	0800bb3d 	.word	0x0800bb3d
 800bae4:	0800bb3d 	.word	0x0800bb3d
 800bae8:	0800bb3d 	.word	0x0800bb3d
 800baec:	0800bb3d 	.word	0x0800bb3d
 800baf0:	0800bb3d 	.word	0x0800bb3d
 800baf4:	0800bb43 	.word	0x0800bb43
 800baf8:	0800bb3d 	.word	0x0800bb3d
 800bafc:	0800bb3d 	.word	0x0800bb3d
 800bb00:	0800bb3d 	.word	0x0800bb3d
 800bb04:	0800bb3d 	.word	0x0800bb3d
 800bb08:	0800bb3d 	.word	0x0800bb3d
 800bb0c:	0800bb3d 	.word	0x0800bb3d
 800bb10:	0800bb3d 	.word	0x0800bb3d
 800bb14:	0800bb43 	.word	0x0800bb43
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	3304      	adds	r3, #4
 800bb1c:	2101      	movs	r1, #1
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f000 fdf4 	bl	800c70c <RCCEx_PLL2_Config>
 800bb24:	4603      	mov	r3, r0
 800bb26:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bb28:	e00c      	b.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	3324      	adds	r3, #36	; 0x24
 800bb2e:	2101      	movs	r1, #1
 800bb30:	4618      	mov	r0, r3
 800bb32:	f000 fe9d 	bl	800c870 <RCCEx_PLL3_Config>
 800bb36:	4603      	mov	r3, r0
 800bb38:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bb3a:	e003      	b.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	75fb      	strb	r3, [r7, #23]
      break;
 800bb40:	e000      	b.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800bb42:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb44:	7dfb      	ldrb	r3, [r7, #23]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d109      	bne.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bb4a:	4b24      	ldr	r3, [pc, #144]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bb4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb4e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb56:	4921      	ldr	r1, [pc, #132]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	654b      	str	r3, [r1, #84]	; 0x54
 800bb5c:	e001      	b.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb5e:	7dfb      	ldrb	r3, [r7, #23]
 800bb60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f003 0302 	and.w	r3, r3, #2
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d03e      	beq.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb72:	2b05      	cmp	r3, #5
 800bb74:	d820      	bhi.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800bb76:	a201      	add	r2, pc, #4	; (adr r2, 800bb7c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800bb78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb7c:	0800bbbf 	.word	0x0800bbbf
 800bb80:	0800bb95 	.word	0x0800bb95
 800bb84:	0800bba7 	.word	0x0800bba7
 800bb88:	0800bbbf 	.word	0x0800bbbf
 800bb8c:	0800bbbf 	.word	0x0800bbbf
 800bb90:	0800bbbf 	.word	0x0800bbbf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	3304      	adds	r3, #4
 800bb98:	2101      	movs	r1, #1
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f000 fdb6 	bl	800c70c <RCCEx_PLL2_Config>
 800bba0:	4603      	mov	r3, r0
 800bba2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800bba4:	e00c      	b.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	3324      	adds	r3, #36	; 0x24
 800bbaa:	2101      	movs	r1, #1
 800bbac:	4618      	mov	r0, r3
 800bbae:	f000 fe5f 	bl	800c870 <RCCEx_PLL3_Config>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800bbb6:	e003      	b.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	75fb      	strb	r3, [r7, #23]
      break;
 800bbbc:	e000      	b.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800bbbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bbc0:	7dfb      	ldrb	r3, [r7, #23]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d110      	bne.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bbc6:	4b05      	ldr	r3, [pc, #20]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bbc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbca:	f023 0207 	bic.w	r2, r3, #7
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbd2:	4902      	ldr	r1, [pc, #8]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	654b      	str	r3, [r1, #84]	; 0x54
 800bbd8:	e008      	b.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800bbda:	bf00      	nop
 800bbdc:	58024400 	.word	0x58024400
 800bbe0:	58024800 	.word	0x58024800
 800bbe4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbe8:	7dfb      	ldrb	r3, [r7, #23]
 800bbea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f003 0304 	and.w	r3, r3, #4
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d039      	beq.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbfe:	2b05      	cmp	r3, #5
 800bc00:	d820      	bhi.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800bc02:	a201      	add	r2, pc, #4	; (adr r2, 800bc08 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800bc04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc08:	0800bc4b 	.word	0x0800bc4b
 800bc0c:	0800bc21 	.word	0x0800bc21
 800bc10:	0800bc33 	.word	0x0800bc33
 800bc14:	0800bc4b 	.word	0x0800bc4b
 800bc18:	0800bc4b 	.word	0x0800bc4b
 800bc1c:	0800bc4b 	.word	0x0800bc4b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	3304      	adds	r3, #4
 800bc24:	2101      	movs	r1, #1
 800bc26:	4618      	mov	r0, r3
 800bc28:	f000 fd70 	bl	800c70c <RCCEx_PLL2_Config>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800bc30:	e00c      	b.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	3324      	adds	r3, #36	; 0x24
 800bc36:	2101      	movs	r1, #1
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f000 fe19 	bl	800c870 <RCCEx_PLL3_Config>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800bc42:	e003      	b.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bc44:	2301      	movs	r3, #1
 800bc46:	75fb      	strb	r3, [r7, #23]
      break;
 800bc48:	e000      	b.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800bc4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc4c:	7dfb      	ldrb	r3, [r7, #23]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d10a      	bne.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bc52:	4bb7      	ldr	r3, [pc, #732]	; (800bf30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bc54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc56:	f023 0207 	bic.w	r2, r3, #7
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc60:	49b3      	ldr	r1, [pc, #716]	; (800bf30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bc62:	4313      	orrs	r3, r2
 800bc64:	658b      	str	r3, [r1, #88]	; 0x58
 800bc66:	e001      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc68:	7dfb      	ldrb	r3, [r7, #23]
 800bc6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f003 0320 	and.w	r3, r3, #32
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d04b      	beq.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc82:	d02e      	beq.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800bc84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc88:	d828      	bhi.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bc8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc8e:	d02a      	beq.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800bc90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc94:	d822      	bhi.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bc96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc9a:	d026      	beq.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800bc9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bca0:	d81c      	bhi.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bca6:	d010      	beq.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800bca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcac:	d816      	bhi.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d01d      	beq.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800bcb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcb6:	d111      	bne.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	3304      	adds	r3, #4
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f000 fd24 	bl	800c70c <RCCEx_PLL2_Config>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bcc8:	e012      	b.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	3324      	adds	r3, #36	; 0x24
 800bcce:	2102      	movs	r1, #2
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f000 fdcd 	bl	800c870 <RCCEx_PLL3_Config>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bcda:	e009      	b.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	75fb      	strb	r3, [r7, #23]
      break;
 800bce0:	e006      	b.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bce2:	bf00      	nop
 800bce4:	e004      	b.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bce6:	bf00      	nop
 800bce8:	e002      	b.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bcea:	bf00      	nop
 800bcec:	e000      	b.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bcee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bcf0:	7dfb      	ldrb	r3, [r7, #23]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d10a      	bne.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bcf6:	4b8e      	ldr	r3, [pc, #568]	; (800bf30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bcf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcfa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd04:	498a      	ldr	r1, [pc, #552]	; (800bf30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bd06:	4313      	orrs	r3, r2
 800bd08:	654b      	str	r3, [r1, #84]	; 0x54
 800bd0a:	e001      	b.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd0c:	7dfb      	ldrb	r3, [r7, #23]
 800bd0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d04b      	beq.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bd26:	d02e      	beq.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800bd28:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bd2c:	d828      	bhi.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bd2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd32:	d02a      	beq.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800bd34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd38:	d822      	bhi.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bd3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd3e:	d026      	beq.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800bd40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd44:	d81c      	bhi.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bd46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd4a:	d010      	beq.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800bd4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd50:	d816      	bhi.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d01d      	beq.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800bd56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd5a:	d111      	bne.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	3304      	adds	r3, #4
 800bd60:	2100      	movs	r1, #0
 800bd62:	4618      	mov	r0, r3
 800bd64:	f000 fcd2 	bl	800c70c <RCCEx_PLL2_Config>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bd6c:	e012      	b.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	3324      	adds	r3, #36	; 0x24
 800bd72:	2102      	movs	r1, #2
 800bd74:	4618      	mov	r0, r3
 800bd76:	f000 fd7b 	bl	800c870 <RCCEx_PLL3_Config>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bd7e:	e009      	b.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bd80:	2301      	movs	r3, #1
 800bd82:	75fb      	strb	r3, [r7, #23]
      break;
 800bd84:	e006      	b.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800bd86:	bf00      	nop
 800bd88:	e004      	b.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800bd8a:	bf00      	nop
 800bd8c:	e002      	b.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800bd8e:	bf00      	nop
 800bd90:	e000      	b.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800bd92:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd94:	7dfb      	ldrb	r3, [r7, #23]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d10a      	bne.n	800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bd9a:	4b65      	ldr	r3, [pc, #404]	; (800bf30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bd9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd9e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bda8:	4961      	ldr	r1, [pc, #388]	; (800bf30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	658b      	str	r3, [r1, #88]	; 0x58
 800bdae:	e001      	b.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdb0:	7dfb      	ldrb	r3, [r7, #23]
 800bdb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d04b      	beq.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bdc6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bdca:	d02e      	beq.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800bdcc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bdd0:	d828      	bhi.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800bdd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdd6:	d02a      	beq.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800bdd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bddc:	d822      	bhi.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800bdde:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bde2:	d026      	beq.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800bde4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bde8:	d81c      	bhi.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800bdea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdee:	d010      	beq.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800bdf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdf4:	d816      	bhi.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d01d      	beq.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800bdfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdfe:	d111      	bne.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	3304      	adds	r3, #4
 800be04:	2100      	movs	r1, #0
 800be06:	4618      	mov	r0, r3
 800be08:	f000 fc80 	bl	800c70c <RCCEx_PLL2_Config>
 800be0c:	4603      	mov	r3, r0
 800be0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800be10:	e012      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	3324      	adds	r3, #36	; 0x24
 800be16:	2102      	movs	r1, #2
 800be18:	4618      	mov	r0, r3
 800be1a:	f000 fd29 	bl	800c870 <RCCEx_PLL3_Config>
 800be1e:	4603      	mov	r3, r0
 800be20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800be22:	e009      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be24:	2301      	movs	r3, #1
 800be26:	75fb      	strb	r3, [r7, #23]
      break;
 800be28:	e006      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800be2a:	bf00      	nop
 800be2c:	e004      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800be2e:	bf00      	nop
 800be30:	e002      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800be32:	bf00      	nop
 800be34:	e000      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800be36:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be38:	7dfb      	ldrb	r3, [r7, #23]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d10a      	bne.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800be3e:	4b3c      	ldr	r3, [pc, #240]	; (800bf30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800be40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be4c:	4938      	ldr	r1, [pc, #224]	; (800bf30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800be4e:	4313      	orrs	r3, r2
 800be50:	658b      	str	r3, [r1, #88]	; 0x58
 800be52:	e001      	b.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be54:	7dfb      	ldrb	r3, [r7, #23]
 800be56:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f003 0308 	and.w	r3, r3, #8
 800be60:	2b00      	cmp	r3, #0
 800be62:	d01a      	beq.n	800be9a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be6e:	d10a      	bne.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	3324      	adds	r3, #36	; 0x24
 800be74:	2102      	movs	r1, #2
 800be76:	4618      	mov	r0, r3
 800be78:	f000 fcfa 	bl	800c870 <RCCEx_PLL3_Config>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d001      	beq.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800be82:	2301      	movs	r3, #1
 800be84:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800be86:	4b2a      	ldr	r3, [pc, #168]	; (800bf30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800be88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be94:	4926      	ldr	r1, [pc, #152]	; (800bf30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800be96:	4313      	orrs	r3, r2
 800be98:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f003 0310 	and.w	r3, r3, #16
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d01a      	beq.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800beac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beb0:	d10a      	bne.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	3324      	adds	r3, #36	; 0x24
 800beb6:	2102      	movs	r1, #2
 800beb8:	4618      	mov	r0, r3
 800beba:	f000 fcd9 	bl	800c870 <RCCEx_PLL3_Config>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d001      	beq.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800bec4:	2301      	movs	r3, #1
 800bec6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bec8:	4b19      	ldr	r3, [pc, #100]	; (800bf30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800beca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800becc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bed6:	4916      	ldr	r1, [pc, #88]	; (800bf30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bed8:	4313      	orrs	r3, r2
 800beda:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d036      	beq.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800beee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bef2:	d01f      	beq.n	800bf34 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800bef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bef8:	d817      	bhi.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800befa:	2b00      	cmp	r3, #0
 800befc:	d003      	beq.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800befe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf02:	d009      	beq.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800bf04:	e011      	b.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	3304      	adds	r3, #4
 800bf0a:	2100      	movs	r1, #0
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f000 fbfd 	bl	800c70c <RCCEx_PLL2_Config>
 800bf12:	4603      	mov	r3, r0
 800bf14:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800bf16:	e00e      	b.n	800bf36 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	3324      	adds	r3, #36	; 0x24
 800bf1c:	2102      	movs	r1, #2
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f000 fca6 	bl	800c870 <RCCEx_PLL3_Config>
 800bf24:	4603      	mov	r3, r0
 800bf26:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800bf28:	e005      	b.n	800bf36 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	75fb      	strb	r3, [r7, #23]
      break;
 800bf2e:	e002      	b.n	800bf36 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800bf30:	58024400 	.word	0x58024400
      break;
 800bf34:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf36:	7dfb      	ldrb	r3, [r7, #23]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d10a      	bne.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bf3c:	4b93      	ldr	r3, [pc, #588]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf4a:	4990      	ldr	r1, [pc, #576]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	658b      	str	r3, [r1, #88]	; 0x58
 800bf50:	e001      	b.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf52:	7dfb      	ldrb	r3, [r7, #23]
 800bf54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d033      	beq.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bf6c:	d01c      	beq.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800bf6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bf72:	d816      	bhi.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800bf74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf78:	d003      	beq.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800bf7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bf7e:	d007      	beq.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800bf80:	e00f      	b.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf82:	4b82      	ldr	r3, [pc, #520]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf86:	4a81      	ldr	r2, [pc, #516]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800bf8e:	e00c      	b.n	800bfaa <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	3324      	adds	r3, #36	; 0x24
 800bf94:	2101      	movs	r1, #1
 800bf96:	4618      	mov	r0, r3
 800bf98:	f000 fc6a 	bl	800c870 <RCCEx_PLL3_Config>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800bfa0:	e003      	b.n	800bfaa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	75fb      	strb	r3, [r7, #23]
      break;
 800bfa6:	e000      	b.n	800bfaa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800bfa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bfaa:	7dfb      	ldrb	r3, [r7, #23]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d10a      	bne.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bfb0:	4b76      	ldr	r3, [pc, #472]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bfb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfbe:	4973      	ldr	r1, [pc, #460]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bfc0:	4313      	orrs	r3, r2
 800bfc2:	654b      	str	r3, [r1, #84]	; 0x54
 800bfc4:	e001      	b.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfc6:	7dfb      	ldrb	r3, [r7, #23]
 800bfc8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d029      	beq.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d003      	beq.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800bfde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfe2:	d007      	beq.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800bfe4:	e00f      	b.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfe6:	4b69      	ldr	r3, [pc, #420]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfea:	4a68      	ldr	r2, [pc, #416]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bfec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bff0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bff2:	e00b      	b.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	3304      	adds	r3, #4
 800bff8:	2102      	movs	r1, #2
 800bffa:	4618      	mov	r0, r3
 800bffc:	f000 fb86 	bl	800c70c <RCCEx_PLL2_Config>
 800c000:	4603      	mov	r3, r0
 800c002:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c004:	e002      	b.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800c006:	2301      	movs	r3, #1
 800c008:	75fb      	strb	r3, [r7, #23]
      break;
 800c00a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c00c:	7dfb      	ldrb	r3, [r7, #23]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d109      	bne.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c012:	4b5e      	ldr	r3, [pc, #376]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c016:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c01e:	495b      	ldr	r1, [pc, #364]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c020:	4313      	orrs	r3, r2
 800c022:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c024:	e001      	b.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c026:	7dfb      	ldrb	r3, [r7, #23]
 800c028:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00a      	beq.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	3324      	adds	r3, #36	; 0x24
 800c03a:	2102      	movs	r1, #2
 800c03c:	4618      	mov	r0, r3
 800c03e:	f000 fc17 	bl	800c870 <RCCEx_PLL3_Config>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d001      	beq.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800c048:	2301      	movs	r3, #1
 800c04a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c054:	2b00      	cmp	r3, #0
 800c056:	d030      	beq.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c05c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c060:	d017      	beq.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800c062:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c066:	d811      	bhi.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800c068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c06c:	d013      	beq.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800c06e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c072:	d80b      	bhi.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800c074:	2b00      	cmp	r3, #0
 800c076:	d010      	beq.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800c078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c07c:	d106      	bne.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c07e:	4b43      	ldr	r3, [pc, #268]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c082:	4a42      	ldr	r2, [pc, #264]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c088:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800c08a:	e007      	b.n	800c09c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c08c:	2301      	movs	r3, #1
 800c08e:	75fb      	strb	r3, [r7, #23]
      break;
 800c090:	e004      	b.n	800c09c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c092:	bf00      	nop
 800c094:	e002      	b.n	800c09c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c096:	bf00      	nop
 800c098:	e000      	b.n	800c09c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c09a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c09c:	7dfb      	ldrb	r3, [r7, #23]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d109      	bne.n	800c0b6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c0a2:	4b3a      	ldr	r3, [pc, #232]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c0a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0ae:	4937      	ldr	r1, [pc, #220]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	654b      	str	r3, [r1, #84]	; 0x54
 800c0b4:	e001      	b.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0b6:	7dfb      	ldrb	r3, [r7, #23]
 800c0b8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d008      	beq.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c0c6:	4b31      	ldr	r3, [pc, #196]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c0c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0d2:	492e      	ldr	r1, [pc, #184]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d009      	beq.n	800c0f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c0e4:	4b29      	ldr	r3, [pc, #164]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c0e6:	691b      	ldr	r3, [r3, #16]
 800c0e8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c0f2:	4926      	ldr	r1, [pc, #152]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c100:	2b00      	cmp	r3, #0
 800c102:	d008      	beq.n	800c116 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c104:	4b21      	ldr	r3, [pc, #132]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c108:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c110:	491e      	ldr	r1, [pc, #120]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c112:	4313      	orrs	r3, r2
 800c114:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d00d      	beq.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c122:	4b1a      	ldr	r3, [pc, #104]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c124:	691b      	ldr	r3, [r3, #16]
 800c126:	4a19      	ldr	r2, [pc, #100]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c128:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c12c:	6113      	str	r3, [r2, #16]
 800c12e:	4b17      	ldr	r3, [pc, #92]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c130:	691a      	ldr	r2, [r3, #16]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c138:	4914      	ldr	r1, [pc, #80]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c13a:	4313      	orrs	r3, r2
 800c13c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	da08      	bge.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c146:	4b11      	ldr	r3, [pc, #68]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c14a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c152:	490e      	ldr	r1, [pc, #56]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c154:	4313      	orrs	r3, r2
 800c156:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c160:	2b00      	cmp	r3, #0
 800c162:	d009      	beq.n	800c178 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c164:	4b09      	ldr	r3, [pc, #36]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c168:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c172:	4906      	ldr	r1, [pc, #24]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c174:	4313      	orrs	r3, r2
 800c176:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c178:	7dbb      	ldrb	r3, [r7, #22]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d101      	bne.n	800c182 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800c17e:	2300      	movs	r3, #0
 800c180:	e000      	b.n	800c184 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800c182:	2301      	movs	r3, #1
}
 800c184:	4618      	mov	r0, r3
 800c186:	3718      	adds	r7, #24
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}
 800c18c:	58024400 	.word	0x58024400

0800c190 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c194:	f7ff f860 	bl	800b258 <HAL_RCC_GetHCLKFreq>
 800c198:	4602      	mov	r2, r0
 800c19a:	4b06      	ldr	r3, [pc, #24]	; (800c1b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c19c:	6a1b      	ldr	r3, [r3, #32]
 800c19e:	091b      	lsrs	r3, r3, #4
 800c1a0:	f003 0307 	and.w	r3, r3, #7
 800c1a4:	4904      	ldr	r1, [pc, #16]	; (800c1b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c1a6:	5ccb      	ldrb	r3, [r1, r3]
 800c1a8:	f003 031f 	and.w	r3, r3, #31
 800c1ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	bd80      	pop	{r7, pc}
 800c1b4:	58024400 	.word	0x58024400
 800c1b8:	08014c04 	.word	0x08014c04

0800c1bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b089      	sub	sp, #36	; 0x24
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c1c4:	4ba1      	ldr	r3, [pc, #644]	; (800c44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1c8:	f003 0303 	and.w	r3, r3, #3
 800c1cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c1ce:	4b9f      	ldr	r3, [pc, #636]	; (800c44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1d2:	0b1b      	lsrs	r3, r3, #12
 800c1d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c1da:	4b9c      	ldr	r3, [pc, #624]	; (800c44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1de:	091b      	lsrs	r3, r3, #4
 800c1e0:	f003 0301 	and.w	r3, r3, #1
 800c1e4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c1e6:	4b99      	ldr	r3, [pc, #612]	; (800c44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ea:	08db      	lsrs	r3, r3, #3
 800c1ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c1f0:	693a      	ldr	r2, [r7, #16]
 800c1f2:	fb02 f303 	mul.w	r3, r2, r3
 800c1f6:	ee07 3a90 	vmov	s15, r3
 800c1fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	2b00      	cmp	r3, #0
 800c206:	f000 8111 	beq.w	800c42c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c20a:	69bb      	ldr	r3, [r7, #24]
 800c20c:	2b02      	cmp	r3, #2
 800c20e:	f000 8083 	beq.w	800c318 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c212:	69bb      	ldr	r3, [r7, #24]
 800c214:	2b02      	cmp	r3, #2
 800c216:	f200 80a1 	bhi.w	800c35c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d003      	beq.n	800c228 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c220:	69bb      	ldr	r3, [r7, #24]
 800c222:	2b01      	cmp	r3, #1
 800c224:	d056      	beq.n	800c2d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c226:	e099      	b.n	800c35c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c228:	4b88      	ldr	r3, [pc, #544]	; (800c44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f003 0320 	and.w	r3, r3, #32
 800c230:	2b00      	cmp	r3, #0
 800c232:	d02d      	beq.n	800c290 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c234:	4b85      	ldr	r3, [pc, #532]	; (800c44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	08db      	lsrs	r3, r3, #3
 800c23a:	f003 0303 	and.w	r3, r3, #3
 800c23e:	4a84      	ldr	r2, [pc, #528]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c240:	fa22 f303 	lsr.w	r3, r2, r3
 800c244:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	ee07 3a90 	vmov	s15, r3
 800c24c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	ee07 3a90 	vmov	s15, r3
 800c256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c25a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c25e:	4b7b      	ldr	r3, [pc, #492]	; (800c44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c266:	ee07 3a90 	vmov	s15, r3
 800c26a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c26e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c272:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c454 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c27a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c27e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c28a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c28e:	e087      	b.n	800c3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	ee07 3a90 	vmov	s15, r3
 800c296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c29a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c458 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c29e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2a2:	4b6a      	ldr	r3, [pc, #424]	; (800c44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2aa:	ee07 3a90 	vmov	s15, r3
 800c2ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c454 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c2ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c2d2:	e065      	b.n	800c3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	ee07 3a90 	vmov	s15, r3
 800c2da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c45c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c2e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2e6:	4b59      	ldr	r3, [pc, #356]	; (800c44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2ee:	ee07 3a90 	vmov	s15, r3
 800c2f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c454 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c2fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c30a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c30e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c312:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c316:	e043      	b.n	800c3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	ee07 3a90 	vmov	s15, r3
 800c31e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c322:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c460 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c32a:	4b48      	ldr	r3, [pc, #288]	; (800c44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c32e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c332:	ee07 3a90 	vmov	s15, r3
 800c336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c33a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c33e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c454 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c34a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c34e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c352:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c356:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c35a:	e021      	b.n	800c3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	ee07 3a90 	vmov	s15, r3
 800c362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c366:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c45c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c36a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c36e:	4b37      	ldr	r3, [pc, #220]	; (800c44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c376:	ee07 3a90 	vmov	s15, r3
 800c37a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c37e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c382:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c454 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c38a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c38e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c39a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c39e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c3a0:	4b2a      	ldr	r3, [pc, #168]	; (800c44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3a4:	0a5b      	lsrs	r3, r3, #9
 800c3a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3aa:	ee07 3a90 	vmov	s15, r3
 800c3ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3c6:	ee17 2a90 	vmov	r2, s15
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c3ce:	4b1f      	ldr	r3, [pc, #124]	; (800c44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3d2:	0c1b      	lsrs	r3, r3, #16
 800c3d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3d8:	ee07 3a90 	vmov	s15, r3
 800c3dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3f4:	ee17 2a90 	vmov	r2, s15
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c3fc:	4b13      	ldr	r3, [pc, #76]	; (800c44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c400:	0e1b      	lsrs	r3, r3, #24
 800c402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c406:	ee07 3a90 	vmov	s15, r3
 800c40a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c40e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c412:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c416:	edd7 6a07 	vldr	s13, [r7, #28]
 800c41a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c41e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c422:	ee17 2a90 	vmov	r2, s15
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c42a:	e008      	b.n	800c43e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2200      	movs	r2, #0
 800c430:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2200      	movs	r2, #0
 800c436:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2200      	movs	r2, #0
 800c43c:	609a      	str	r2, [r3, #8]
}
 800c43e:	bf00      	nop
 800c440:	3724      	adds	r7, #36	; 0x24
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop
 800c44c:	58024400 	.word	0x58024400
 800c450:	03d09000 	.word	0x03d09000
 800c454:	46000000 	.word	0x46000000
 800c458:	4c742400 	.word	0x4c742400
 800c45c:	4a742400 	.word	0x4a742400
 800c460:	4c371b00 	.word	0x4c371b00

0800c464 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c464:	b480      	push	{r7}
 800c466:	b089      	sub	sp, #36	; 0x24
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c46c:	4ba1      	ldr	r3, [pc, #644]	; (800c6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c470:	f003 0303 	and.w	r3, r3, #3
 800c474:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c476:	4b9f      	ldr	r3, [pc, #636]	; (800c6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c47a:	0d1b      	lsrs	r3, r3, #20
 800c47c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c480:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c482:	4b9c      	ldr	r3, [pc, #624]	; (800c6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c486:	0a1b      	lsrs	r3, r3, #8
 800c488:	f003 0301 	and.w	r3, r3, #1
 800c48c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c48e:	4b99      	ldr	r3, [pc, #612]	; (800c6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c492:	08db      	lsrs	r3, r3, #3
 800c494:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c498:	693a      	ldr	r2, [r7, #16]
 800c49a:	fb02 f303 	mul.w	r3, r2, r3
 800c49e:	ee07 3a90 	vmov	s15, r3
 800c4a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	f000 8111 	beq.w	800c6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c4b2:	69bb      	ldr	r3, [r7, #24]
 800c4b4:	2b02      	cmp	r3, #2
 800c4b6:	f000 8083 	beq.w	800c5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c4ba:	69bb      	ldr	r3, [r7, #24]
 800c4bc:	2b02      	cmp	r3, #2
 800c4be:	f200 80a1 	bhi.w	800c604 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d003      	beq.n	800c4d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d056      	beq.n	800c57c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c4ce:	e099      	b.n	800c604 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4d0:	4b88      	ldr	r3, [pc, #544]	; (800c6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f003 0320 	and.w	r3, r3, #32
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d02d      	beq.n	800c538 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c4dc:	4b85      	ldr	r3, [pc, #532]	; (800c6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	08db      	lsrs	r3, r3, #3
 800c4e2:	f003 0303 	and.w	r3, r3, #3
 800c4e6:	4a84      	ldr	r2, [pc, #528]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c4e8:	fa22 f303 	lsr.w	r3, r2, r3
 800c4ec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	ee07 3a90 	vmov	s15, r3
 800c4f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	ee07 3a90 	vmov	s15, r3
 800c4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c506:	4b7b      	ldr	r3, [pc, #492]	; (800c6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c50a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c50e:	ee07 3a90 	vmov	s15, r3
 800c512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c516:	ed97 6a03 	vldr	s12, [r7, #12]
 800c51a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c6fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c51e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c52a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c52e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c532:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c536:	e087      	b.n	800c648 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	ee07 3a90 	vmov	s15, r3
 800c53e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c542:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c700 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c54a:	4b6a      	ldr	r3, [pc, #424]	; (800c6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c54e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c552:	ee07 3a90 	vmov	s15, r3
 800c556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c55a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c55e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c6fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c56a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c56e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c572:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c576:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c57a:	e065      	b.n	800c648 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	ee07 3a90 	vmov	s15, r3
 800c582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c586:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c58a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c58e:	4b59      	ldr	r3, [pc, #356]	; (800c6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c596:	ee07 3a90 	vmov	s15, r3
 800c59a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c59e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c6fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c5a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c5be:	e043      	b.n	800c648 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	ee07 3a90 	vmov	s15, r3
 800c5c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c708 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c5ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5d2:	4b48      	ldr	r3, [pc, #288]	; (800c6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5da:	ee07 3a90 	vmov	s15, r3
 800c5de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c6fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c5ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c602:	e021      	b.n	800c648 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	ee07 3a90 	vmov	s15, r3
 800c60a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c60e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c616:	4b37      	ldr	r3, [pc, #220]	; (800c6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c61a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c61e:	ee07 3a90 	vmov	s15, r3
 800c622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c626:	ed97 6a03 	vldr	s12, [r7, #12]
 800c62a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c6fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c62e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c63a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c63e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c642:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c646:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c648:	4b2a      	ldr	r3, [pc, #168]	; (800c6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c64a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c64c:	0a5b      	lsrs	r3, r3, #9
 800c64e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c652:	ee07 3a90 	vmov	s15, r3
 800c656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c65a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c65e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c662:	edd7 6a07 	vldr	s13, [r7, #28]
 800c666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c66a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c66e:	ee17 2a90 	vmov	r2, s15
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c676:	4b1f      	ldr	r3, [pc, #124]	; (800c6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c67a:	0c1b      	lsrs	r3, r3, #16
 800c67c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c680:	ee07 3a90 	vmov	s15, r3
 800c684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c688:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c68c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c690:	edd7 6a07 	vldr	s13, [r7, #28]
 800c694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c69c:	ee17 2a90 	vmov	r2, s15
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c6a4:	4b13      	ldr	r3, [pc, #76]	; (800c6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6a8:	0e1b      	lsrs	r3, r3, #24
 800c6aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6ae:	ee07 3a90 	vmov	s15, r3
 800c6b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6be:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6ca:	ee17 2a90 	vmov	r2, s15
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c6d2:	e008      	b.n	800c6e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	609a      	str	r2, [r3, #8]
}
 800c6e6:	bf00      	nop
 800c6e8:	3724      	adds	r7, #36	; 0x24
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop
 800c6f4:	58024400 	.word	0x58024400
 800c6f8:	03d09000 	.word	0x03d09000
 800c6fc:	46000000 	.word	0x46000000
 800c700:	4c742400 	.word	0x4c742400
 800c704:	4a742400 	.word	0x4a742400
 800c708:	4c371b00 	.word	0x4c371b00

0800c70c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b084      	sub	sp, #16
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c716:	2300      	movs	r3, #0
 800c718:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c71a:	4b53      	ldr	r3, [pc, #332]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c71e:	f003 0303 	and.w	r3, r3, #3
 800c722:	2b03      	cmp	r3, #3
 800c724:	d101      	bne.n	800c72a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c726:	2301      	movs	r3, #1
 800c728:	e099      	b.n	800c85e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c72a:	4b4f      	ldr	r3, [pc, #316]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4a4e      	ldr	r2, [pc, #312]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c730:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c734:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c736:	f7fa fa85 	bl	8006c44 <HAL_GetTick>
 800c73a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c73c:	e008      	b.n	800c750 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c73e:	f7fa fa81 	bl	8006c44 <HAL_GetTick>
 800c742:	4602      	mov	r2, r0
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	1ad3      	subs	r3, r2, r3
 800c748:	2b02      	cmp	r3, #2
 800c74a:	d901      	bls.n	800c750 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c74c:	2303      	movs	r3, #3
 800c74e:	e086      	b.n	800c85e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c750:	4b45      	ldr	r3, [pc, #276]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d1f0      	bne.n	800c73e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c75c:	4b42      	ldr	r3, [pc, #264]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c760:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	031b      	lsls	r3, r3, #12
 800c76a:	493f      	ldr	r1, [pc, #252]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c76c:	4313      	orrs	r3, r2
 800c76e:	628b      	str	r3, [r1, #40]	; 0x28
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	685b      	ldr	r3, [r3, #4]
 800c774:	3b01      	subs	r3, #1
 800c776:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	3b01      	subs	r3, #1
 800c780:	025b      	lsls	r3, r3, #9
 800c782:	b29b      	uxth	r3, r3
 800c784:	431a      	orrs	r2, r3
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	3b01      	subs	r3, #1
 800c78c:	041b      	lsls	r3, r3, #16
 800c78e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c792:	431a      	orrs	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	3b01      	subs	r3, #1
 800c79a:	061b      	lsls	r3, r3, #24
 800c79c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c7a0:	4931      	ldr	r1, [pc, #196]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c7a6:	4b30      	ldr	r3, [pc, #192]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	695b      	ldr	r3, [r3, #20]
 800c7b2:	492d      	ldr	r1, [pc, #180]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c7b8:	4b2b      	ldr	r3, [pc, #172]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7bc:	f023 0220 	bic.w	r2, r3, #32
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	699b      	ldr	r3, [r3, #24]
 800c7c4:	4928      	ldr	r1, [pc, #160]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c7ca:	4b27      	ldr	r3, [pc, #156]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ce:	4a26      	ldr	r2, [pc, #152]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c7d0:	f023 0310 	bic.w	r3, r3, #16
 800c7d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c7d6:	4b24      	ldr	r3, [pc, #144]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c7d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c7da:	4b24      	ldr	r3, [pc, #144]	; (800c86c <RCCEx_PLL2_Config+0x160>)
 800c7dc:	4013      	ands	r3, r2
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	69d2      	ldr	r2, [r2, #28]
 800c7e2:	00d2      	lsls	r2, r2, #3
 800c7e4:	4920      	ldr	r1, [pc, #128]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c7ea:	4b1f      	ldr	r3, [pc, #124]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ee:	4a1e      	ldr	r2, [pc, #120]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c7f0:	f043 0310 	orr.w	r3, r3, #16
 800c7f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d106      	bne.n	800c80a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c7fc:	4b1a      	ldr	r3, [pc, #104]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c800:	4a19      	ldr	r2, [pc, #100]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c802:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c806:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c808:	e00f      	b.n	800c82a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d106      	bne.n	800c81e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c810:	4b15      	ldr	r3, [pc, #84]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c814:	4a14      	ldr	r2, [pc, #80]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c81a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c81c:	e005      	b.n	800c82a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c81e:	4b12      	ldr	r3, [pc, #72]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c822:	4a11      	ldr	r2, [pc, #68]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c828:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c82a:	4b0f      	ldr	r3, [pc, #60]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4a0e      	ldr	r2, [pc, #56]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c830:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c836:	f7fa fa05 	bl	8006c44 <HAL_GetTick>
 800c83a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c83c:	e008      	b.n	800c850 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c83e:	f7fa fa01 	bl	8006c44 <HAL_GetTick>
 800c842:	4602      	mov	r2, r0
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	1ad3      	subs	r3, r2, r3
 800c848:	2b02      	cmp	r3, #2
 800c84a:	d901      	bls.n	800c850 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c84c:	2303      	movs	r3, #3
 800c84e:	e006      	b.n	800c85e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c850:	4b05      	ldr	r3, [pc, #20]	; (800c868 <RCCEx_PLL2_Config+0x15c>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d0f0      	beq.n	800c83e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3710      	adds	r7, #16
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	58024400 	.word	0x58024400
 800c86c:	ffff0007 	.word	0xffff0007

0800c870 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b084      	sub	sp, #16
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c87a:	2300      	movs	r3, #0
 800c87c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c87e:	4b53      	ldr	r3, [pc, #332]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c882:	f003 0303 	and.w	r3, r3, #3
 800c886:	2b03      	cmp	r3, #3
 800c888:	d101      	bne.n	800c88e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c88a:	2301      	movs	r3, #1
 800c88c:	e099      	b.n	800c9c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c88e:	4b4f      	ldr	r3, [pc, #316]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4a4e      	ldr	r2, [pc, #312]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c898:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c89a:	f7fa f9d3 	bl	8006c44 <HAL_GetTick>
 800c89e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c8a0:	e008      	b.n	800c8b4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c8a2:	f7fa f9cf 	bl	8006c44 <HAL_GetTick>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	1ad3      	subs	r3, r2, r3
 800c8ac:	2b02      	cmp	r3, #2
 800c8ae:	d901      	bls.n	800c8b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c8b0:	2303      	movs	r3, #3
 800c8b2:	e086      	b.n	800c9c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c8b4:	4b45      	ldr	r3, [pc, #276]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d1f0      	bne.n	800c8a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c8c0:	4b42      	ldr	r3, [pc, #264]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	051b      	lsls	r3, r3, #20
 800c8ce:	493f      	ldr	r1, [pc, #252]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	628b      	str	r3, [r1, #40]	; 0x28
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	689b      	ldr	r3, [r3, #8]
 800c8e2:	3b01      	subs	r3, #1
 800c8e4:	025b      	lsls	r3, r3, #9
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	431a      	orrs	r2, r3
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	3b01      	subs	r3, #1
 800c8f0:	041b      	lsls	r3, r3, #16
 800c8f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c8f6:	431a      	orrs	r2, r3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	691b      	ldr	r3, [r3, #16]
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	061b      	lsls	r3, r3, #24
 800c900:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c904:	4931      	ldr	r1, [pc, #196]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c906:	4313      	orrs	r3, r2
 800c908:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c90a:	4b30      	ldr	r3, [pc, #192]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c90e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	695b      	ldr	r3, [r3, #20]
 800c916:	492d      	ldr	r1, [pc, #180]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c918:	4313      	orrs	r3, r2
 800c91a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c91c:	4b2b      	ldr	r3, [pc, #172]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c920:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	699b      	ldr	r3, [r3, #24]
 800c928:	4928      	ldr	r1, [pc, #160]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c92a:	4313      	orrs	r3, r2
 800c92c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c92e:	4b27      	ldr	r3, [pc, #156]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c932:	4a26      	ldr	r2, [pc, #152]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c938:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c93a:	4b24      	ldr	r3, [pc, #144]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c93c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c93e:	4b24      	ldr	r3, [pc, #144]	; (800c9d0 <RCCEx_PLL3_Config+0x160>)
 800c940:	4013      	ands	r3, r2
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	69d2      	ldr	r2, [r2, #28]
 800c946:	00d2      	lsls	r2, r2, #3
 800c948:	4920      	ldr	r1, [pc, #128]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c94a:	4313      	orrs	r3, r2
 800c94c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c94e:	4b1f      	ldr	r3, [pc, #124]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c952:	4a1e      	ldr	r2, [pc, #120]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c958:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d106      	bne.n	800c96e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c960:	4b1a      	ldr	r3, [pc, #104]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c964:	4a19      	ldr	r2, [pc, #100]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c966:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c96a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c96c:	e00f      	b.n	800c98e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	2b01      	cmp	r3, #1
 800c972:	d106      	bne.n	800c982 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c974:	4b15      	ldr	r3, [pc, #84]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c978:	4a14      	ldr	r2, [pc, #80]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c97a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c97e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c980:	e005      	b.n	800c98e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c982:	4b12      	ldr	r3, [pc, #72]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c986:	4a11      	ldr	r2, [pc, #68]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c988:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c98c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c98e:	4b0f      	ldr	r3, [pc, #60]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4a0e      	ldr	r2, [pc, #56]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c998:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c99a:	f7fa f953 	bl	8006c44 <HAL_GetTick>
 800c99e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c9a0:	e008      	b.n	800c9b4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c9a2:	f7fa f94f 	bl	8006c44 <HAL_GetTick>
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	1ad3      	subs	r3, r2, r3
 800c9ac:	2b02      	cmp	r3, #2
 800c9ae:	d901      	bls.n	800c9b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c9b0:	2303      	movs	r3, #3
 800c9b2:	e006      	b.n	800c9c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c9b4:	4b05      	ldr	r3, [pc, #20]	; (800c9cc <RCCEx_PLL3_Config+0x15c>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d0f0      	beq.n	800c9a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3710      	adds	r7, #16
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
 800c9ca:	bf00      	nop
 800c9cc:	58024400 	.word	0x58024400
 800c9d0:	ffff0007 	.word	0xffff0007

0800c9d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d101      	bne.n	800c9e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e0f1      	b.n	800cbca <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a78      	ldr	r2, [pc, #480]	; (800cbd4 <HAL_SPI_Init+0x200>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d00f      	beq.n	800ca16 <HAL_SPI_Init+0x42>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4a77      	ldr	r2, [pc, #476]	; (800cbd8 <HAL_SPI_Init+0x204>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d00a      	beq.n	800ca16 <HAL_SPI_Init+0x42>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4a75      	ldr	r2, [pc, #468]	; (800cbdc <HAL_SPI_Init+0x208>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d005      	beq.n	800ca16 <HAL_SPI_Init+0x42>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	68db      	ldr	r3, [r3, #12]
 800ca0e:	2b0f      	cmp	r3, #15
 800ca10:	d901      	bls.n	800ca16 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ca12:	2301      	movs	r3, #1
 800ca14:	e0d9      	b.n	800cbca <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 fba4 	bl	800d164 <SPI_GetPacketSize>
 800ca1c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a6c      	ldr	r2, [pc, #432]	; (800cbd4 <HAL_SPI_Init+0x200>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d00c      	beq.n	800ca42 <HAL_SPI_Init+0x6e>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4a6a      	ldr	r2, [pc, #424]	; (800cbd8 <HAL_SPI_Init+0x204>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d007      	beq.n	800ca42 <HAL_SPI_Init+0x6e>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4a69      	ldr	r2, [pc, #420]	; (800cbdc <HAL_SPI_Init+0x208>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d002      	beq.n	800ca42 <HAL_SPI_Init+0x6e>
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2b08      	cmp	r3, #8
 800ca40:	d811      	bhi.n	800ca66 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ca46:	4a63      	ldr	r2, [pc, #396]	; (800cbd4 <HAL_SPI_Init+0x200>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d009      	beq.n	800ca60 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4a61      	ldr	r2, [pc, #388]	; (800cbd8 <HAL_SPI_Init+0x204>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d004      	beq.n	800ca60 <HAL_SPI_Init+0x8c>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4a60      	ldr	r2, [pc, #384]	; (800cbdc <HAL_SPI_Init+0x208>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d104      	bne.n	800ca6a <HAL_SPI_Init+0x96>
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2b10      	cmp	r3, #16
 800ca64:	d901      	bls.n	800ca6a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ca66:	2301      	movs	r3, #1
 800ca68:	e0af      	b.n	800cbca <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d106      	bne.n	800ca84 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f7f8 fa18 	bl	8004eb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2202      	movs	r2, #2
 800ca88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f022 0201 	bic.w	r2, r2, #1
 800ca9a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	689b      	ldr	r3, [r3, #8]
 800caa2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800caa6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	699b      	ldr	r3, [r3, #24]
 800caac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cab0:	d119      	bne.n	800cae6 <HAL_SPI_Init+0x112>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800caba:	d103      	bne.n	800cac4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d008      	beq.n	800cad6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d10c      	bne.n	800cae6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cad0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cad4:	d107      	bne.n	800cae6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cae4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	69da      	ldr	r2, [r3, #28]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caee:	431a      	orrs	r2, r3
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	431a      	orrs	r2, r3
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caf8:	ea42 0103 	orr.w	r1, r2, r3
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	68da      	ldr	r2, [r3, #12]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	430a      	orrs	r2, r1
 800cb06:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb10:	431a      	orrs	r2, r3
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb16:	431a      	orrs	r2, r3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	699b      	ldr	r3, [r3, #24]
 800cb1c:	431a      	orrs	r2, r3
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	691b      	ldr	r3, [r3, #16]
 800cb22:	431a      	orrs	r2, r3
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	695b      	ldr	r3, [r3, #20]
 800cb28:	431a      	orrs	r2, r3
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6a1b      	ldr	r3, [r3, #32]
 800cb2e:	431a      	orrs	r2, r3
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	431a      	orrs	r2, r3
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb3a:	431a      	orrs	r2, r3
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	431a      	orrs	r2, r3
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb46:	ea42 0103 	orr.w	r1, r2, r3
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	430a      	orrs	r2, r1
 800cb54:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d113      	bne.n	800cb86 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	689b      	ldr	r3, [r3, #8]
 800cb64:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb70:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	689b      	ldr	r3, [r3, #8]
 800cb78:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cb84:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f022 0201 	bic.w	r2, r2, #1
 800cb94:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d00a      	beq.n	800cbb8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	430a      	orrs	r2, r1
 800cbb6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800cbc8:	2300      	movs	r3, #0
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3710      	adds	r7, #16
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	40013000 	.word	0x40013000
 800cbd8:	40003800 	.word	0x40003800
 800cbdc:	40003c00 	.word	0x40003c00

0800cbe0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b08a      	sub	sp, #40	; 0x28
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	691b      	ldr	r3, [r3, #16]
 800cbee:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	695b      	ldr	r3, [r3, #20]
 800cbf6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800cbf8:	6a3a      	ldr	r2, [r7, #32]
 800cbfa:	69fb      	ldr	r3, [r7, #28]
 800cbfc:	4013      	ands	r3, r2
 800cbfe:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	689b      	ldr	r3, [r3, #8]
 800cc06:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cc12:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	3330      	adds	r3, #48	; 0x30
 800cc1a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800cc1c:	69bb      	ldr	r3, [r7, #24]
 800cc1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d113      	bne.n	800cc4e <HAL_SPI_IRQHandler+0x6e>
 800cc26:	69bb      	ldr	r3, [r7, #24]
 800cc28:	f003 0320 	and.w	r3, r3, #32
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d10e      	bne.n	800cc4e <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800cc30:	69bb      	ldr	r3, [r7, #24]
 800cc32:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d009      	beq.n	800cc4e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	4798      	blx	r3
    hspi->RxISR(hspi);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	4798      	blx	r3
    handled = 1UL;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800cc4e:	69bb      	ldr	r3, [r7, #24]
 800cc50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d10f      	bne.n	800cc78 <HAL_SPI_IRQHandler+0x98>
 800cc58:	69bb      	ldr	r3, [r7, #24]
 800cc5a:	f003 0301 	and.w	r3, r3, #1
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d00a      	beq.n	800cc78 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800cc62:	69bb      	ldr	r3, [r7, #24]
 800cc64:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d105      	bne.n	800cc78 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	4798      	blx	r3
    handled = 1UL;
 800cc74:	2301      	movs	r3, #1
 800cc76:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	f003 0320 	and.w	r3, r3, #32
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d10f      	bne.n	800cca2 <HAL_SPI_IRQHandler+0xc2>
 800cc82:	69bb      	ldr	r3, [r7, #24]
 800cc84:	f003 0302 	and.w	r3, r3, #2
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d00a      	beq.n	800cca2 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800cc8c:	69bb      	ldr	r3, [r7, #24]
 800cc8e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d105      	bne.n	800cca2 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	4798      	blx	r3
    handled = 1UL;
 800cc9e:	2301      	movs	r3, #1
 800cca0:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800cca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	f040 816f 	bne.w	800cf88 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800ccaa:	69bb      	ldr	r3, [r7, #24]
 800ccac:	f003 0308 	and.w	r3, r3, #8
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	f000 80a0 	beq.w	800cdf6 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	699a      	ldr	r2, [r3, #24]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f042 0208 	orr.w	r2, r2, #8
 800ccc4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	699a      	ldr	r2, [r3, #24]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f042 0210 	orr.w	r2, r2, #16
 800ccd4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	699a      	ldr	r2, [r3, #24]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cce4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	691a      	ldr	r2, [r3, #16]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f022 0208 	bic.w	r2, r2, #8
 800ccf4:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d00f      	beq.n	800cd20 <HAL_SPI_IRQHandler+0x140>
 800cd00:	7cfb      	ldrb	r3, [r7, #19]
 800cd02:	2b04      	cmp	r3, #4
 800cd04:	d004      	beq.n	800cd10 <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd0a:	69db      	ldr	r3, [r3, #28]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d007      	beq.n	800cd20 <HAL_SPI_IRQHandler+0x140>
 800cd10:	7cfb      	ldrb	r3, [r7, #19]
 800cd12:	2b03      	cmp	r3, #3
 800cd14:	d059      	beq.n	800cdca <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd1a:	69db      	ldr	r3, [r3, #28]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d154      	bne.n	800cdca <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	689b      	ldr	r3, [r3, #8]
 800cd26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d13d      	bne.n	800cdaa <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800cd2e:	e036      	b.n	800cd9e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	2b0f      	cmp	r3, #15
 800cd36:	d90b      	bls.n	800cd50 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cd42:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd48:	1d1a      	adds	r2, r3, #4
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	665a      	str	r2, [r3, #100]	; 0x64
 800cd4e:	e01d      	b.n	800cd8c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	2b07      	cmp	r3, #7
 800cd56:	d90b      	bls.n	800cd70 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	8812      	ldrh	r2, [r2, #0]
 800cd60:	b292      	uxth	r2, r2
 800cd62:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd68:	1c9a      	adds	r2, r3, #2
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	665a      	str	r2, [r3, #100]	; 0x64
 800cd6e:	e00d      	b.n	800cd8c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd7c:	7812      	ldrb	r2, [r2, #0]
 800cd7e:	b2d2      	uxtb	r2, r2
 800cd80:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd86:	1c5a      	adds	r2, r3, #1
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cd92:	b29b      	uxth	r3, r3
 800cd94:	3b01      	subs	r3, #1
 800cd96:	b29a      	uxth	r2, r3
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cda4:	b29b      	uxth	r3, r3
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d1c2      	bne.n	800cd30 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f000 f93a 	bl	800d024 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d003      	beq.n	800cdca <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 f90a 	bl	800cfdc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800cdc8:	e0e3      	b.n	800cf92 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800cdca:	7cfb      	ldrb	r3, [r7, #19]
 800cdcc:	2b05      	cmp	r3, #5
 800cdce:	d103      	bne.n	800cdd8 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f000 f8f9 	bl	800cfc8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800cdd6:	e0d9      	b.n	800cf8c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800cdd8:	7cfb      	ldrb	r3, [r7, #19]
 800cdda:	2b04      	cmp	r3, #4
 800cddc:	d103      	bne.n	800cde6 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 f8e8 	bl	800cfb4 <HAL_SPI_RxCpltCallback>
    return;
 800cde4:	e0d2      	b.n	800cf8c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800cde6:	7cfb      	ldrb	r3, [r7, #19]
 800cde8:	2b03      	cmp	r3, #3
 800cdea:	f040 80cf 	bne.w	800cf8c <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f000 f8d6 	bl	800cfa0 <HAL_SPI_TxCpltCallback>
    return;
 800cdf4:	e0ca      	b.n	800cf8c <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800cdf6:	69fb      	ldr	r3, [r7, #28]
 800cdf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d00d      	beq.n	800ce1c <HAL_SPI_IRQHandler+0x23c>
 800ce00:	6a3b      	ldr	r3, [r7, #32]
 800ce02:	f003 0308 	and.w	r3, r3, #8
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d008      	beq.n	800ce1c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	699a      	ldr	r2, [r3, #24]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce18:	619a      	str	r2, [r3, #24]

    return;
 800ce1a:	e0ba      	b.n	800cf92 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800ce1c:	69bb      	ldr	r3, [r7, #24]
 800ce1e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	f000 80b5 	beq.w	800cf92 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800ce28:	69bb      	ldr	r3, [r7, #24]
 800ce2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d00f      	beq.n	800ce52 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce38:	f043 0204 	orr.w	r2, r3, #4
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	699a      	ldr	r2, [r3, #24]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce50:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800ce52:	69bb      	ldr	r3, [r7, #24]
 800ce54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d00f      	beq.n	800ce7c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce62:	f043 0201 	orr.w	r2, r3, #1
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	699a      	ldr	r2, [r3, #24]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce7a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800ce7c:	69bb      	ldr	r3, [r7, #24]
 800ce7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d00f      	beq.n	800cea6 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce8c:	f043 0208 	orr.w	r2, r3, #8
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	699a      	ldr	r2, [r3, #24]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cea4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800cea6:	69bb      	ldr	r3, [r7, #24]
 800cea8:	f003 0320 	and.w	r3, r3, #32
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d00f      	beq.n	800ced0 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ceb6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	699a      	ldr	r2, [r3, #24]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	f042 0220 	orr.w	r2, r2, #32
 800cece:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d05a      	beq.n	800cf90 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	681a      	ldr	r2, [r3, #0]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f022 0201 	bic.w	r2, r2, #1
 800cee8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	6919      	ldr	r1, [r3, #16]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	4b28      	ldr	r3, [pc, #160]	; (800cf98 <HAL_SPI_IRQHandler+0x3b8>)
 800cef6:	400b      	ands	r3, r1
 800cef8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cf00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cf04:	d138      	bne.n	800cf78 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	689a      	ldr	r2, [r3, #8]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800cf14:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d013      	beq.n	800cf46 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf22:	4a1e      	ldr	r2, [pc, #120]	; (800cf9c <HAL_SPI_IRQHandler+0x3bc>)
 800cf24:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7fb fac4 	bl	80084b8 <HAL_DMA_Abort_IT>
 800cf30:	4603      	mov	r3, r0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d007      	beq.n	800cf46 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d020      	beq.n	800cf90 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf52:	4a12      	ldr	r2, [pc, #72]	; (800cf9c <HAL_SPI_IRQHandler+0x3bc>)
 800cf54:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7fb faac 	bl	80084b8 <HAL_DMA_Abort_IT>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d014      	beq.n	800cf90 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800cf76:	e00b      	b.n	800cf90 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 f82b 	bl	800cfdc <HAL_SPI_ErrorCallback>
    return;
 800cf86:	e003      	b.n	800cf90 <HAL_SPI_IRQHandler+0x3b0>
    return;
 800cf88:	bf00      	nop
 800cf8a:	e002      	b.n	800cf92 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800cf8c:	bf00      	nop
 800cf8e:	e000      	b.n	800cf92 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800cf90:	bf00      	nop
  }
}
 800cf92:	3728      	adds	r7, #40	; 0x28
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}
 800cf98:	fffffc94 	.word	0xfffffc94
 800cf9c:	0800cff1 	.word	0x0800cff1

0800cfa0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b083      	sub	sp, #12
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800cfa8:	bf00      	nop
 800cfaa:	370c      	adds	r7, #12
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr

0800cfb4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800cfbc:	bf00      	nop
 800cfbe:	370c      	adds	r7, #12
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr

0800cfc8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b083      	sub	sp, #12
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800cfd0:	bf00      	nop
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cfe4:	bf00      	nop
 800cfe6:	370c      	adds	r7, #12
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cffc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2200      	movs	r2, #0
 800d002:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2200      	movs	r2, #0
 800d00a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2201      	movs	r2, #1
 800d012:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d016:	68f8      	ldr	r0, [r7, #12]
 800d018:	f7ff ffe0 	bl	800cfdc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d01c:	bf00      	nop
 800d01e:	3710      	adds	r7, #16
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d024:	b480      	push	{r7}
 800d026:	b085      	sub	sp, #20
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	695b      	ldr	r3, [r3, #20]
 800d032:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	699a      	ldr	r2, [r3, #24]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f042 0208 	orr.w	r2, r2, #8
 800d042:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	699a      	ldr	r2, [r3, #24]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f042 0210 	orr.w	r2, r2, #16
 800d052:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f022 0201 	bic.w	r2, r2, #1
 800d062:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	6919      	ldr	r1, [r3, #16]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681a      	ldr	r2, [r3, #0]
 800d06e:	4b3c      	ldr	r3, [pc, #240]	; (800d160 <SPI_CloseTransfer+0x13c>)
 800d070:	400b      	ands	r3, r1
 800d072:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	689a      	ldr	r2, [r3, #8]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d082:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	2b04      	cmp	r3, #4
 800d08e:	d014      	beq.n	800d0ba <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f003 0320 	and.w	r3, r3, #32
 800d096:	2b00      	cmp	r3, #0
 800d098:	d00f      	beq.n	800d0ba <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	699a      	ldr	r2, [r3, #24]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f042 0220 	orr.w	r2, r2, #32
 800d0b8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d0c0:	b2db      	uxtb	r3, r3
 800d0c2:	2b03      	cmp	r3, #3
 800d0c4:	d014      	beq.n	800d0f0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d00f      	beq.n	800d0f0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0d6:	f043 0204 	orr.w	r2, r3, #4
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	699a      	ldr	r2, [r3, #24]
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d0ee:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d00f      	beq.n	800d11a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d100:	f043 0201 	orr.w	r2, r3, #1
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	699a      	ldr	r2, [r3, #24]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d118:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d120:	2b00      	cmp	r3, #0
 800d122:	d00f      	beq.n	800d144 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d12a:	f043 0208 	orr.w	r2, r3, #8
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	699a      	ldr	r2, [r3, #24]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d142:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2200      	movs	r2, #0
 800d148:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2200      	movs	r2, #0
 800d150:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d154:	bf00      	nop
 800d156:	3714      	adds	r7, #20
 800d158:	46bd      	mov	sp, r7
 800d15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15e:	4770      	bx	lr
 800d160:	fffffc90 	.word	0xfffffc90

0800d164 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d164:	b480      	push	{r7}
 800d166:	b085      	sub	sp, #20
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d170:	095b      	lsrs	r3, r3, #5
 800d172:	3301      	adds	r3, #1
 800d174:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	68db      	ldr	r3, [r3, #12]
 800d17a:	3301      	adds	r3, #1
 800d17c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	3307      	adds	r3, #7
 800d182:	08db      	lsrs	r3, r3, #3
 800d184:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	68fa      	ldr	r2, [r7, #12]
 800d18a:	fb02 f303 	mul.w	r3, r2, r3
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3714      	adds	r7, #20
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr

0800d19a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d19a:	b580      	push	{r7, lr}
 800d19c:	b082      	sub	sp, #8
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d101      	bne.n	800d1ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e049      	b.n	800d240 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d106      	bne.n	800d1c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f7f8 fe1b 	bl	8005dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2202      	movs	r2, #2
 800d1ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	3304      	adds	r3, #4
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	4610      	mov	r0, r2
 800d1da:	f000 fd9f 	bl	800dd1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2201      	movs	r2, #1
 800d202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2201      	movs	r2, #1
 800d20a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2201      	movs	r2, #1
 800d212:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2201      	movs	r2, #1
 800d21a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2201      	movs	r2, #1
 800d222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2201      	movs	r2, #1
 800d22a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2201      	movs	r2, #1
 800d232:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2201      	movs	r2, #1
 800d23a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d23e:	2300      	movs	r3, #0
}
 800d240:	4618      	mov	r0, r3
 800d242:	3708      	adds	r7, #8
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d256:	b2db      	uxtb	r3, r3
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d001      	beq.n	800d260 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d25c:	2301      	movs	r3, #1
 800d25e:	e054      	b.n	800d30a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2202      	movs	r2, #2
 800d264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	68da      	ldr	r2, [r3, #12]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f042 0201 	orr.w	r2, r2, #1
 800d276:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4a26      	ldr	r2, [pc, #152]	; (800d318 <HAL_TIM_Base_Start_IT+0xd0>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d022      	beq.n	800d2c8 <HAL_TIM_Base_Start_IT+0x80>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d28a:	d01d      	beq.n	800d2c8 <HAL_TIM_Base_Start_IT+0x80>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4a22      	ldr	r2, [pc, #136]	; (800d31c <HAL_TIM_Base_Start_IT+0xd4>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d018      	beq.n	800d2c8 <HAL_TIM_Base_Start_IT+0x80>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	4a21      	ldr	r2, [pc, #132]	; (800d320 <HAL_TIM_Base_Start_IT+0xd8>)
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d013      	beq.n	800d2c8 <HAL_TIM_Base_Start_IT+0x80>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4a1f      	ldr	r2, [pc, #124]	; (800d324 <HAL_TIM_Base_Start_IT+0xdc>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d00e      	beq.n	800d2c8 <HAL_TIM_Base_Start_IT+0x80>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4a1e      	ldr	r2, [pc, #120]	; (800d328 <HAL_TIM_Base_Start_IT+0xe0>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d009      	beq.n	800d2c8 <HAL_TIM_Base_Start_IT+0x80>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4a1c      	ldr	r2, [pc, #112]	; (800d32c <HAL_TIM_Base_Start_IT+0xe4>)
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d004      	beq.n	800d2c8 <HAL_TIM_Base_Start_IT+0x80>
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	4a1b      	ldr	r2, [pc, #108]	; (800d330 <HAL_TIM_Base_Start_IT+0xe8>)
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d115      	bne.n	800d2f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	689a      	ldr	r2, [r3, #8]
 800d2ce:	4b19      	ldr	r3, [pc, #100]	; (800d334 <HAL_TIM_Base_Start_IT+0xec>)
 800d2d0:	4013      	ands	r3, r2
 800d2d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2b06      	cmp	r3, #6
 800d2d8:	d015      	beq.n	800d306 <HAL_TIM_Base_Start_IT+0xbe>
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2e0:	d011      	beq.n	800d306 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	681a      	ldr	r2, [r3, #0]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f042 0201 	orr.w	r2, r2, #1
 800d2f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2f2:	e008      	b.n	800d306 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f042 0201 	orr.w	r2, r2, #1
 800d302:	601a      	str	r2, [r3, #0]
 800d304:	e000      	b.n	800d308 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d306:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d308:	2300      	movs	r3, #0
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3714      	adds	r7, #20
 800d30e:	46bd      	mov	sp, r7
 800d310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d314:	4770      	bx	lr
 800d316:	bf00      	nop
 800d318:	40010000 	.word	0x40010000
 800d31c:	40000400 	.word	0x40000400
 800d320:	40000800 	.word	0x40000800
 800d324:	40000c00 	.word	0x40000c00
 800d328:	40010400 	.word	0x40010400
 800d32c:	40001800 	.word	0x40001800
 800d330:	40014000 	.word	0x40014000
 800d334:	00010007 	.word	0x00010007

0800d338 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d338:	b480      	push	{r7}
 800d33a:	b083      	sub	sp, #12
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	68da      	ldr	r2, [r3, #12]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f022 0201 	bic.w	r2, r2, #1
 800d34e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	6a1a      	ldr	r2, [r3, #32]
 800d356:	f241 1311 	movw	r3, #4369	; 0x1111
 800d35a:	4013      	ands	r3, r2
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d10f      	bne.n	800d380 <HAL_TIM_Base_Stop_IT+0x48>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	6a1a      	ldr	r2, [r3, #32]
 800d366:	f240 4344 	movw	r3, #1092	; 0x444
 800d36a:	4013      	ands	r3, r2
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d107      	bne.n	800d380 <HAL_TIM_Base_Stop_IT+0x48>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	681a      	ldr	r2, [r3, #0]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f022 0201 	bic.w	r2, r2, #1
 800d37e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2201      	movs	r2, #1
 800d384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d388:	2300      	movs	r3, #0
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	370c      	adds	r7, #12
 800d38e:	46bd      	mov	sp, r7
 800d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d394:	4770      	bx	lr

0800d396 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d396:	b580      	push	{r7, lr}
 800d398:	b082      	sub	sp, #8
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d101      	bne.n	800d3a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	e049      	b.n	800d43c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3ae:	b2db      	uxtb	r3, r3
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d106      	bne.n	800d3c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 f841 	bl	800d444 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2202      	movs	r2, #2
 800d3c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	3304      	adds	r3, #4
 800d3d2:	4619      	mov	r1, r3
 800d3d4:	4610      	mov	r0, r2
 800d3d6:	f000 fca1 	bl	800dd1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2201      	movs	r2, #1
 800d3de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2201      	movs	r2, #1
 800d406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2201      	movs	r2, #1
 800d40e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2201      	movs	r2, #1
 800d416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2201      	movs	r2, #1
 800d41e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2201      	movs	r2, #1
 800d426:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2201      	movs	r2, #1
 800d42e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2201      	movs	r2, #1
 800d436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d43a:	2300      	movs	r3, #0
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3708      	adds	r7, #8
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d444:	b480      	push	{r7}
 800d446:	b083      	sub	sp, #12
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d44c:	bf00      	nop
 800d44e:	370c      	adds	r7, #12
 800d450:	46bd      	mov	sp, r7
 800d452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d456:	4770      	bx	lr

0800d458 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b084      	sub	sp, #16
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d109      	bne.n	800d47c <HAL_TIM_PWM_Start+0x24>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	2b01      	cmp	r3, #1
 800d472:	bf14      	ite	ne
 800d474:	2301      	movne	r3, #1
 800d476:	2300      	moveq	r3, #0
 800d478:	b2db      	uxtb	r3, r3
 800d47a:	e03c      	b.n	800d4f6 <HAL_TIM_PWM_Start+0x9e>
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	2b04      	cmp	r3, #4
 800d480:	d109      	bne.n	800d496 <HAL_TIM_PWM_Start+0x3e>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	bf14      	ite	ne
 800d48e:	2301      	movne	r3, #1
 800d490:	2300      	moveq	r3, #0
 800d492:	b2db      	uxtb	r3, r3
 800d494:	e02f      	b.n	800d4f6 <HAL_TIM_PWM_Start+0x9e>
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	2b08      	cmp	r3, #8
 800d49a:	d109      	bne.n	800d4b0 <HAL_TIM_PWM_Start+0x58>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d4a2:	b2db      	uxtb	r3, r3
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	bf14      	ite	ne
 800d4a8:	2301      	movne	r3, #1
 800d4aa:	2300      	moveq	r3, #0
 800d4ac:	b2db      	uxtb	r3, r3
 800d4ae:	e022      	b.n	800d4f6 <HAL_TIM_PWM_Start+0x9e>
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	2b0c      	cmp	r3, #12
 800d4b4:	d109      	bne.n	800d4ca <HAL_TIM_PWM_Start+0x72>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4bc:	b2db      	uxtb	r3, r3
 800d4be:	2b01      	cmp	r3, #1
 800d4c0:	bf14      	ite	ne
 800d4c2:	2301      	movne	r3, #1
 800d4c4:	2300      	moveq	r3, #0
 800d4c6:	b2db      	uxtb	r3, r3
 800d4c8:	e015      	b.n	800d4f6 <HAL_TIM_PWM_Start+0x9e>
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	2b10      	cmp	r3, #16
 800d4ce:	d109      	bne.n	800d4e4 <HAL_TIM_PWM_Start+0x8c>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	bf14      	ite	ne
 800d4dc:	2301      	movne	r3, #1
 800d4de:	2300      	moveq	r3, #0
 800d4e0:	b2db      	uxtb	r3, r3
 800d4e2:	e008      	b.n	800d4f6 <HAL_TIM_PWM_Start+0x9e>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d4ea:	b2db      	uxtb	r3, r3
 800d4ec:	2b01      	cmp	r3, #1
 800d4ee:	bf14      	ite	ne
 800d4f0:	2301      	movne	r3, #1
 800d4f2:	2300      	moveq	r3, #0
 800d4f4:	b2db      	uxtb	r3, r3
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d001      	beq.n	800d4fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	e0a1      	b.n	800d642 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d104      	bne.n	800d50e <HAL_TIM_PWM_Start+0xb6>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2202      	movs	r2, #2
 800d508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d50c:	e023      	b.n	800d556 <HAL_TIM_PWM_Start+0xfe>
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	2b04      	cmp	r3, #4
 800d512:	d104      	bne.n	800d51e <HAL_TIM_PWM_Start+0xc6>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2202      	movs	r2, #2
 800d518:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d51c:	e01b      	b.n	800d556 <HAL_TIM_PWM_Start+0xfe>
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	2b08      	cmp	r3, #8
 800d522:	d104      	bne.n	800d52e <HAL_TIM_PWM_Start+0xd6>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2202      	movs	r2, #2
 800d528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d52c:	e013      	b.n	800d556 <HAL_TIM_PWM_Start+0xfe>
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	2b0c      	cmp	r3, #12
 800d532:	d104      	bne.n	800d53e <HAL_TIM_PWM_Start+0xe6>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2202      	movs	r2, #2
 800d538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d53c:	e00b      	b.n	800d556 <HAL_TIM_PWM_Start+0xfe>
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	2b10      	cmp	r3, #16
 800d542:	d104      	bne.n	800d54e <HAL_TIM_PWM_Start+0xf6>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2202      	movs	r2, #2
 800d548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d54c:	e003      	b.n	800d556 <HAL_TIM_PWM_Start+0xfe>
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2202      	movs	r2, #2
 800d552:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	2201      	movs	r2, #1
 800d55c:	6839      	ldr	r1, [r7, #0]
 800d55e:	4618      	mov	r0, r3
 800d560:	f000 ffea 	bl	800e538 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4a38      	ldr	r2, [pc, #224]	; (800d64c <HAL_TIM_PWM_Start+0x1f4>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d013      	beq.n	800d596 <HAL_TIM_PWM_Start+0x13e>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	4a37      	ldr	r2, [pc, #220]	; (800d650 <HAL_TIM_PWM_Start+0x1f8>)
 800d574:	4293      	cmp	r3, r2
 800d576:	d00e      	beq.n	800d596 <HAL_TIM_PWM_Start+0x13e>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	4a35      	ldr	r2, [pc, #212]	; (800d654 <HAL_TIM_PWM_Start+0x1fc>)
 800d57e:	4293      	cmp	r3, r2
 800d580:	d009      	beq.n	800d596 <HAL_TIM_PWM_Start+0x13e>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	4a34      	ldr	r2, [pc, #208]	; (800d658 <HAL_TIM_PWM_Start+0x200>)
 800d588:	4293      	cmp	r3, r2
 800d58a:	d004      	beq.n	800d596 <HAL_TIM_PWM_Start+0x13e>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	4a32      	ldr	r2, [pc, #200]	; (800d65c <HAL_TIM_PWM_Start+0x204>)
 800d592:	4293      	cmp	r3, r2
 800d594:	d101      	bne.n	800d59a <HAL_TIM_PWM_Start+0x142>
 800d596:	2301      	movs	r3, #1
 800d598:	e000      	b.n	800d59c <HAL_TIM_PWM_Start+0x144>
 800d59a:	2300      	movs	r3, #0
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d007      	beq.n	800d5b0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d5ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4a25      	ldr	r2, [pc, #148]	; (800d64c <HAL_TIM_PWM_Start+0x1f4>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d022      	beq.n	800d600 <HAL_TIM_PWM_Start+0x1a8>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5c2:	d01d      	beq.n	800d600 <HAL_TIM_PWM_Start+0x1a8>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	4a25      	ldr	r2, [pc, #148]	; (800d660 <HAL_TIM_PWM_Start+0x208>)
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	d018      	beq.n	800d600 <HAL_TIM_PWM_Start+0x1a8>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	4a24      	ldr	r2, [pc, #144]	; (800d664 <HAL_TIM_PWM_Start+0x20c>)
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	d013      	beq.n	800d600 <HAL_TIM_PWM_Start+0x1a8>
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	4a22      	ldr	r2, [pc, #136]	; (800d668 <HAL_TIM_PWM_Start+0x210>)
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	d00e      	beq.n	800d600 <HAL_TIM_PWM_Start+0x1a8>
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	4a1a      	ldr	r2, [pc, #104]	; (800d650 <HAL_TIM_PWM_Start+0x1f8>)
 800d5e8:	4293      	cmp	r3, r2
 800d5ea:	d009      	beq.n	800d600 <HAL_TIM_PWM_Start+0x1a8>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	4a1e      	ldr	r2, [pc, #120]	; (800d66c <HAL_TIM_PWM_Start+0x214>)
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d004      	beq.n	800d600 <HAL_TIM_PWM_Start+0x1a8>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	4a16      	ldr	r2, [pc, #88]	; (800d654 <HAL_TIM_PWM_Start+0x1fc>)
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	d115      	bne.n	800d62c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	689a      	ldr	r2, [r3, #8]
 800d606:	4b1a      	ldr	r3, [pc, #104]	; (800d670 <HAL_TIM_PWM_Start+0x218>)
 800d608:	4013      	ands	r3, r2
 800d60a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	2b06      	cmp	r3, #6
 800d610:	d015      	beq.n	800d63e <HAL_TIM_PWM_Start+0x1e6>
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d618:	d011      	beq.n	800d63e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	681a      	ldr	r2, [r3, #0]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f042 0201 	orr.w	r2, r2, #1
 800d628:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d62a:	e008      	b.n	800d63e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	681a      	ldr	r2, [r3, #0]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f042 0201 	orr.w	r2, r2, #1
 800d63a:	601a      	str	r2, [r3, #0]
 800d63c:	e000      	b.n	800d640 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d63e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d640:	2300      	movs	r3, #0
}
 800d642:	4618      	mov	r0, r3
 800d644:	3710      	adds	r7, #16
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
 800d64a:	bf00      	nop
 800d64c:	40010000 	.word	0x40010000
 800d650:	40010400 	.word	0x40010400
 800d654:	40014000 	.word	0x40014000
 800d658:	40014400 	.word	0x40014400
 800d65c:	40014800 	.word	0x40014800
 800d660:	40000400 	.word	0x40000400
 800d664:	40000800 	.word	0x40000800
 800d668:	40000c00 	.word	0x40000c00
 800d66c:	40001800 	.word	0x40001800
 800d670:	00010007 	.word	0x00010007

0800d674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b082      	sub	sp, #8
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	691b      	ldr	r3, [r3, #16]
 800d682:	f003 0302 	and.w	r3, r3, #2
 800d686:	2b02      	cmp	r3, #2
 800d688:	d122      	bne.n	800d6d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	68db      	ldr	r3, [r3, #12]
 800d690:	f003 0302 	and.w	r3, r3, #2
 800d694:	2b02      	cmp	r3, #2
 800d696:	d11b      	bne.n	800d6d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f06f 0202 	mvn.w	r2, #2
 800d6a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2201      	movs	r2, #1
 800d6a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	699b      	ldr	r3, [r3, #24]
 800d6ae:	f003 0303 	and.w	r3, r3, #3
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d003      	beq.n	800d6be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f000 fb12 	bl	800dce0 <HAL_TIM_IC_CaptureCallback>
 800d6bc:	e005      	b.n	800d6ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 fb04 	bl	800dccc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 fb15 	bl	800dcf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	691b      	ldr	r3, [r3, #16]
 800d6d6:	f003 0304 	and.w	r3, r3, #4
 800d6da:	2b04      	cmp	r3, #4
 800d6dc:	d122      	bne.n	800d724 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	68db      	ldr	r3, [r3, #12]
 800d6e4:	f003 0304 	and.w	r3, r3, #4
 800d6e8:	2b04      	cmp	r3, #4
 800d6ea:	d11b      	bne.n	800d724 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f06f 0204 	mvn.w	r2, #4
 800d6f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2202      	movs	r2, #2
 800d6fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	699b      	ldr	r3, [r3, #24]
 800d702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d706:	2b00      	cmp	r3, #0
 800d708:	d003      	beq.n	800d712 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f000 fae8 	bl	800dce0 <HAL_TIM_IC_CaptureCallback>
 800d710:	e005      	b.n	800d71e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f000 fada 	bl	800dccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f000 faeb 	bl	800dcf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2200      	movs	r2, #0
 800d722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	691b      	ldr	r3, [r3, #16]
 800d72a:	f003 0308 	and.w	r3, r3, #8
 800d72e:	2b08      	cmp	r3, #8
 800d730:	d122      	bne.n	800d778 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	68db      	ldr	r3, [r3, #12]
 800d738:	f003 0308 	and.w	r3, r3, #8
 800d73c:	2b08      	cmp	r3, #8
 800d73e:	d11b      	bne.n	800d778 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	f06f 0208 	mvn.w	r2, #8
 800d748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2204      	movs	r2, #4
 800d74e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	69db      	ldr	r3, [r3, #28]
 800d756:	f003 0303 	and.w	r3, r3, #3
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d003      	beq.n	800d766 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 fabe 	bl	800dce0 <HAL_TIM_IC_CaptureCallback>
 800d764:	e005      	b.n	800d772 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f000 fab0 	bl	800dccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f000 fac1 	bl	800dcf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2200      	movs	r2, #0
 800d776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	691b      	ldr	r3, [r3, #16]
 800d77e:	f003 0310 	and.w	r3, r3, #16
 800d782:	2b10      	cmp	r3, #16
 800d784:	d122      	bne.n	800d7cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	68db      	ldr	r3, [r3, #12]
 800d78c:	f003 0310 	and.w	r3, r3, #16
 800d790:	2b10      	cmp	r3, #16
 800d792:	d11b      	bne.n	800d7cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f06f 0210 	mvn.w	r2, #16
 800d79c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2208      	movs	r2, #8
 800d7a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	69db      	ldr	r3, [r3, #28]
 800d7aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d003      	beq.n	800d7ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f000 fa94 	bl	800dce0 <HAL_TIM_IC_CaptureCallback>
 800d7b8:	e005      	b.n	800d7c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f000 fa86 	bl	800dccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f000 fa97 	bl	800dcf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	691b      	ldr	r3, [r3, #16]
 800d7d2:	f003 0301 	and.w	r3, r3, #1
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d10e      	bne.n	800d7f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	68db      	ldr	r3, [r3, #12]
 800d7e0:	f003 0301 	and.w	r3, r3, #1
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d107      	bne.n	800d7f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f06f 0201 	mvn.w	r2, #1
 800d7f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f7f5 ff28 	bl	8003648 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	691b      	ldr	r3, [r3, #16]
 800d7fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d802:	2b80      	cmp	r3, #128	; 0x80
 800d804:	d10e      	bne.n	800d824 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	68db      	ldr	r3, [r3, #12]
 800d80c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d810:	2b80      	cmp	r3, #128	; 0x80
 800d812:	d107      	bne.n	800d824 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d81c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 ffc6 	bl	800e7b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	691b      	ldr	r3, [r3, #16]
 800d82a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d82e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d832:	d10e      	bne.n	800d852 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	68db      	ldr	r3, [r3, #12]
 800d83a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d83e:	2b80      	cmp	r3, #128	; 0x80
 800d840:	d107      	bne.n	800d852 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d84a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f000 ffb9 	bl	800e7c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	691b      	ldr	r3, [r3, #16]
 800d858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d85c:	2b40      	cmp	r3, #64	; 0x40
 800d85e:	d10e      	bne.n	800d87e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	68db      	ldr	r3, [r3, #12]
 800d866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d86a:	2b40      	cmp	r3, #64	; 0x40
 800d86c:	d107      	bne.n	800d87e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f000 fa45 	bl	800dd08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	691b      	ldr	r3, [r3, #16]
 800d884:	f003 0320 	and.w	r3, r3, #32
 800d888:	2b20      	cmp	r3, #32
 800d88a:	d10e      	bne.n	800d8aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	68db      	ldr	r3, [r3, #12]
 800d892:	f003 0320 	and.w	r3, r3, #32
 800d896:	2b20      	cmp	r3, #32
 800d898:	d107      	bne.n	800d8aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f06f 0220 	mvn.w	r2, #32
 800d8a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f000 ff79 	bl	800e79c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d8aa:	bf00      	nop
 800d8ac:	3708      	adds	r7, #8
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}
	...

0800d8b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b086      	sub	sp, #24
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	d101      	bne.n	800d8d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d8ce:	2302      	movs	r3, #2
 800d8d0:	e0ff      	b.n	800dad2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2b14      	cmp	r3, #20
 800d8de:	f200 80f0 	bhi.w	800dac2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d8e2:	a201      	add	r2, pc, #4	; (adr r2, 800d8e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8e8:	0800d93d 	.word	0x0800d93d
 800d8ec:	0800dac3 	.word	0x0800dac3
 800d8f0:	0800dac3 	.word	0x0800dac3
 800d8f4:	0800dac3 	.word	0x0800dac3
 800d8f8:	0800d97d 	.word	0x0800d97d
 800d8fc:	0800dac3 	.word	0x0800dac3
 800d900:	0800dac3 	.word	0x0800dac3
 800d904:	0800dac3 	.word	0x0800dac3
 800d908:	0800d9bf 	.word	0x0800d9bf
 800d90c:	0800dac3 	.word	0x0800dac3
 800d910:	0800dac3 	.word	0x0800dac3
 800d914:	0800dac3 	.word	0x0800dac3
 800d918:	0800d9ff 	.word	0x0800d9ff
 800d91c:	0800dac3 	.word	0x0800dac3
 800d920:	0800dac3 	.word	0x0800dac3
 800d924:	0800dac3 	.word	0x0800dac3
 800d928:	0800da41 	.word	0x0800da41
 800d92c:	0800dac3 	.word	0x0800dac3
 800d930:	0800dac3 	.word	0x0800dac3
 800d934:	0800dac3 	.word	0x0800dac3
 800d938:	0800da81 	.word	0x0800da81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	68b9      	ldr	r1, [r7, #8]
 800d942:	4618      	mov	r0, r3
 800d944:	f000 fa84 	bl	800de50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	699a      	ldr	r2, [r3, #24]
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f042 0208 	orr.w	r2, r2, #8
 800d956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	699a      	ldr	r2, [r3, #24]
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f022 0204 	bic.w	r2, r2, #4
 800d966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	6999      	ldr	r1, [r3, #24]
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	691a      	ldr	r2, [r3, #16]
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	430a      	orrs	r2, r1
 800d978:	619a      	str	r2, [r3, #24]
      break;
 800d97a:	e0a5      	b.n	800dac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	68b9      	ldr	r1, [r7, #8]
 800d982:	4618      	mov	r0, r3
 800d984:	f000 faf4 	bl	800df70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	699a      	ldr	r2, [r3, #24]
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	699a      	ldr	r2, [r3, #24]
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	6999      	ldr	r1, [r3, #24]
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	691b      	ldr	r3, [r3, #16]
 800d9b2:	021a      	lsls	r2, r3, #8
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	430a      	orrs	r2, r1
 800d9ba:	619a      	str	r2, [r3, #24]
      break;
 800d9bc:	e084      	b.n	800dac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	68b9      	ldr	r1, [r7, #8]
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f000 fb5d 	bl	800e084 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	69da      	ldr	r2, [r3, #28]
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f042 0208 	orr.w	r2, r2, #8
 800d9d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	69da      	ldr	r2, [r3, #28]
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f022 0204 	bic.w	r2, r2, #4
 800d9e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	69d9      	ldr	r1, [r3, #28]
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	691a      	ldr	r2, [r3, #16]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	430a      	orrs	r2, r1
 800d9fa:	61da      	str	r2, [r3, #28]
      break;
 800d9fc:	e064      	b.n	800dac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	68b9      	ldr	r1, [r7, #8]
 800da04:	4618      	mov	r0, r3
 800da06:	f000 fbc5 	bl	800e194 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	69da      	ldr	r2, [r3, #28]
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	69da      	ldr	r2, [r3, #28]
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	69d9      	ldr	r1, [r3, #28]
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	691b      	ldr	r3, [r3, #16]
 800da34:	021a      	lsls	r2, r3, #8
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	430a      	orrs	r2, r1
 800da3c:	61da      	str	r2, [r3, #28]
      break;
 800da3e:	e043      	b.n	800dac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	68b9      	ldr	r1, [r7, #8]
 800da46:	4618      	mov	r0, r3
 800da48:	f000 fc0e 	bl	800e268 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f042 0208 	orr.w	r2, r2, #8
 800da5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f022 0204 	bic.w	r2, r2, #4
 800da6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	691a      	ldr	r2, [r3, #16]
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	430a      	orrs	r2, r1
 800da7c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800da7e:	e023      	b.n	800dac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	68b9      	ldr	r1, [r7, #8]
 800da86:	4618      	mov	r0, r3
 800da88:	f000 fc52 	bl	800e330 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800daaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	691b      	ldr	r3, [r3, #16]
 800dab6:	021a      	lsls	r2, r3, #8
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	430a      	orrs	r2, r1
 800dabe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dac0:	e002      	b.n	800dac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dac2:	2301      	movs	r3, #1
 800dac4:	75fb      	strb	r3, [r7, #23]
      break;
 800dac6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2200      	movs	r2, #0
 800dacc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dad0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3718      	adds	r7, #24
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop

0800dadc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b084      	sub	sp, #16
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dae6:	2300      	movs	r3, #0
 800dae8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d101      	bne.n	800daf8 <HAL_TIM_ConfigClockSource+0x1c>
 800daf4:	2302      	movs	r3, #2
 800daf6:	e0dc      	b.n	800dcb2 <HAL_TIM_ConfigClockSource+0x1d6>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2201      	movs	r2, #1
 800dafc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2202      	movs	r2, #2
 800db04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	689b      	ldr	r3, [r3, #8]
 800db0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800db10:	68ba      	ldr	r2, [r7, #8]
 800db12:	4b6a      	ldr	r3, [pc, #424]	; (800dcbc <HAL_TIM_ConfigClockSource+0x1e0>)
 800db14:	4013      	ands	r3, r2
 800db16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800db1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	68ba      	ldr	r2, [r7, #8]
 800db26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	4a64      	ldr	r2, [pc, #400]	; (800dcc0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800db2e:	4293      	cmp	r3, r2
 800db30:	f000 80a9 	beq.w	800dc86 <HAL_TIM_ConfigClockSource+0x1aa>
 800db34:	4a62      	ldr	r2, [pc, #392]	; (800dcc0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800db36:	4293      	cmp	r3, r2
 800db38:	f200 80ae 	bhi.w	800dc98 <HAL_TIM_ConfigClockSource+0x1bc>
 800db3c:	4a61      	ldr	r2, [pc, #388]	; (800dcc4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	f000 80a1 	beq.w	800dc86 <HAL_TIM_ConfigClockSource+0x1aa>
 800db44:	4a5f      	ldr	r2, [pc, #380]	; (800dcc4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800db46:	4293      	cmp	r3, r2
 800db48:	f200 80a6 	bhi.w	800dc98 <HAL_TIM_ConfigClockSource+0x1bc>
 800db4c:	4a5e      	ldr	r2, [pc, #376]	; (800dcc8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	f000 8099 	beq.w	800dc86 <HAL_TIM_ConfigClockSource+0x1aa>
 800db54:	4a5c      	ldr	r2, [pc, #368]	; (800dcc8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800db56:	4293      	cmp	r3, r2
 800db58:	f200 809e 	bhi.w	800dc98 <HAL_TIM_ConfigClockSource+0x1bc>
 800db5c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800db60:	f000 8091 	beq.w	800dc86 <HAL_TIM_ConfigClockSource+0x1aa>
 800db64:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800db68:	f200 8096 	bhi.w	800dc98 <HAL_TIM_ConfigClockSource+0x1bc>
 800db6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db70:	f000 8089 	beq.w	800dc86 <HAL_TIM_ConfigClockSource+0x1aa>
 800db74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db78:	f200 808e 	bhi.w	800dc98 <HAL_TIM_ConfigClockSource+0x1bc>
 800db7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db80:	d03e      	beq.n	800dc00 <HAL_TIM_ConfigClockSource+0x124>
 800db82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db86:	f200 8087 	bhi.w	800dc98 <HAL_TIM_ConfigClockSource+0x1bc>
 800db8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db8e:	f000 8086 	beq.w	800dc9e <HAL_TIM_ConfigClockSource+0x1c2>
 800db92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db96:	d87f      	bhi.n	800dc98 <HAL_TIM_ConfigClockSource+0x1bc>
 800db98:	2b70      	cmp	r3, #112	; 0x70
 800db9a:	d01a      	beq.n	800dbd2 <HAL_TIM_ConfigClockSource+0xf6>
 800db9c:	2b70      	cmp	r3, #112	; 0x70
 800db9e:	d87b      	bhi.n	800dc98 <HAL_TIM_ConfigClockSource+0x1bc>
 800dba0:	2b60      	cmp	r3, #96	; 0x60
 800dba2:	d050      	beq.n	800dc46 <HAL_TIM_ConfigClockSource+0x16a>
 800dba4:	2b60      	cmp	r3, #96	; 0x60
 800dba6:	d877      	bhi.n	800dc98 <HAL_TIM_ConfigClockSource+0x1bc>
 800dba8:	2b50      	cmp	r3, #80	; 0x50
 800dbaa:	d03c      	beq.n	800dc26 <HAL_TIM_ConfigClockSource+0x14a>
 800dbac:	2b50      	cmp	r3, #80	; 0x50
 800dbae:	d873      	bhi.n	800dc98 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbb0:	2b40      	cmp	r3, #64	; 0x40
 800dbb2:	d058      	beq.n	800dc66 <HAL_TIM_ConfigClockSource+0x18a>
 800dbb4:	2b40      	cmp	r3, #64	; 0x40
 800dbb6:	d86f      	bhi.n	800dc98 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbb8:	2b30      	cmp	r3, #48	; 0x30
 800dbba:	d064      	beq.n	800dc86 <HAL_TIM_ConfigClockSource+0x1aa>
 800dbbc:	2b30      	cmp	r3, #48	; 0x30
 800dbbe:	d86b      	bhi.n	800dc98 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbc0:	2b20      	cmp	r3, #32
 800dbc2:	d060      	beq.n	800dc86 <HAL_TIM_ConfigClockSource+0x1aa>
 800dbc4:	2b20      	cmp	r3, #32
 800dbc6:	d867      	bhi.n	800dc98 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d05c      	beq.n	800dc86 <HAL_TIM_ConfigClockSource+0x1aa>
 800dbcc:	2b10      	cmp	r3, #16
 800dbce:	d05a      	beq.n	800dc86 <HAL_TIM_ConfigClockSource+0x1aa>
 800dbd0:	e062      	b.n	800dc98 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6818      	ldr	r0, [r3, #0]
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	6899      	ldr	r1, [r3, #8]
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	685a      	ldr	r2, [r3, #4]
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	68db      	ldr	r3, [r3, #12]
 800dbe2:	f000 fc89 	bl	800e4f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	689b      	ldr	r3, [r3, #8]
 800dbec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dbf4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	68ba      	ldr	r2, [r7, #8]
 800dbfc:	609a      	str	r2, [r3, #8]
      break;
 800dbfe:	e04f      	b.n	800dca0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6818      	ldr	r0, [r3, #0]
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	6899      	ldr	r1, [r3, #8]
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	685a      	ldr	r2, [r3, #4]
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	f000 fc72 	bl	800e4f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	689a      	ldr	r2, [r3, #8]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dc22:	609a      	str	r2, [r3, #8]
      break;
 800dc24:	e03c      	b.n	800dca0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6818      	ldr	r0, [r3, #0]
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	6859      	ldr	r1, [r3, #4]
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	68db      	ldr	r3, [r3, #12]
 800dc32:	461a      	mov	r2, r3
 800dc34:	f000 fbe2 	bl	800e3fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	2150      	movs	r1, #80	; 0x50
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f000 fc3c 	bl	800e4bc <TIM_ITRx_SetConfig>
      break;
 800dc44:	e02c      	b.n	800dca0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6818      	ldr	r0, [r3, #0]
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	6859      	ldr	r1, [r3, #4]
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	68db      	ldr	r3, [r3, #12]
 800dc52:	461a      	mov	r2, r3
 800dc54:	f000 fc01 	bl	800e45a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2160      	movs	r1, #96	; 0x60
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f000 fc2c 	bl	800e4bc <TIM_ITRx_SetConfig>
      break;
 800dc64:	e01c      	b.n	800dca0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6818      	ldr	r0, [r3, #0]
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	6859      	ldr	r1, [r3, #4]
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	68db      	ldr	r3, [r3, #12]
 800dc72:	461a      	mov	r2, r3
 800dc74:	f000 fbc2 	bl	800e3fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	2140      	movs	r1, #64	; 0x40
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f000 fc1c 	bl	800e4bc <TIM_ITRx_SetConfig>
      break;
 800dc84:	e00c      	b.n	800dca0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681a      	ldr	r2, [r3, #0]
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	4619      	mov	r1, r3
 800dc90:	4610      	mov	r0, r2
 800dc92:	f000 fc13 	bl	800e4bc <TIM_ITRx_SetConfig>
      break;
 800dc96:	e003      	b.n	800dca0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dc98:	2301      	movs	r3, #1
 800dc9a:	73fb      	strb	r3, [r7, #15]
      break;
 800dc9c:	e000      	b.n	800dca0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800dc9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2201      	movs	r2, #1
 800dca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dcb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3710      	adds	r7, #16
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}
 800dcba:	bf00      	nop
 800dcbc:	ffceff88 	.word	0xffceff88
 800dcc0:	00100040 	.word	0x00100040
 800dcc4:	00100030 	.word	0x00100030
 800dcc8:	00100020 	.word	0x00100020

0800dccc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b083      	sub	sp, #12
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dcd4:	bf00      	nop
 800dcd6:	370c      	adds	r7, #12
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcde:	4770      	bx	lr

0800dce0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b083      	sub	sp, #12
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dce8:	bf00      	nop
 800dcea:	370c      	adds	r7, #12
 800dcec:	46bd      	mov	sp, r7
 800dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf2:	4770      	bx	lr

0800dcf4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b083      	sub	sp, #12
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dcfc:	bf00      	nop
 800dcfe:	370c      	adds	r7, #12
 800dd00:	46bd      	mov	sp, r7
 800dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd06:	4770      	bx	lr

0800dd08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b083      	sub	sp, #12
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dd10:	bf00      	nop
 800dd12:	370c      	adds	r7, #12
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr

0800dd1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b085      	sub	sp, #20
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	4a40      	ldr	r2, [pc, #256]	; (800de30 <TIM_Base_SetConfig+0x114>)
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d013      	beq.n	800dd5c <TIM_Base_SetConfig+0x40>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd3a:	d00f      	beq.n	800dd5c <TIM_Base_SetConfig+0x40>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	4a3d      	ldr	r2, [pc, #244]	; (800de34 <TIM_Base_SetConfig+0x118>)
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d00b      	beq.n	800dd5c <TIM_Base_SetConfig+0x40>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	4a3c      	ldr	r2, [pc, #240]	; (800de38 <TIM_Base_SetConfig+0x11c>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d007      	beq.n	800dd5c <TIM_Base_SetConfig+0x40>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	4a3b      	ldr	r2, [pc, #236]	; (800de3c <TIM_Base_SetConfig+0x120>)
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d003      	beq.n	800dd5c <TIM_Base_SetConfig+0x40>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	4a3a      	ldr	r2, [pc, #232]	; (800de40 <TIM_Base_SetConfig+0x124>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d108      	bne.n	800dd6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	68fa      	ldr	r2, [r7, #12]
 800dd6a:	4313      	orrs	r3, r2
 800dd6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	4a2f      	ldr	r2, [pc, #188]	; (800de30 <TIM_Base_SetConfig+0x114>)
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d01f      	beq.n	800ddb6 <TIM_Base_SetConfig+0x9a>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd7c:	d01b      	beq.n	800ddb6 <TIM_Base_SetConfig+0x9a>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	4a2c      	ldr	r2, [pc, #176]	; (800de34 <TIM_Base_SetConfig+0x118>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d017      	beq.n	800ddb6 <TIM_Base_SetConfig+0x9a>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	4a2b      	ldr	r2, [pc, #172]	; (800de38 <TIM_Base_SetConfig+0x11c>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d013      	beq.n	800ddb6 <TIM_Base_SetConfig+0x9a>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	4a2a      	ldr	r2, [pc, #168]	; (800de3c <TIM_Base_SetConfig+0x120>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d00f      	beq.n	800ddb6 <TIM_Base_SetConfig+0x9a>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	4a29      	ldr	r2, [pc, #164]	; (800de40 <TIM_Base_SetConfig+0x124>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d00b      	beq.n	800ddb6 <TIM_Base_SetConfig+0x9a>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	4a28      	ldr	r2, [pc, #160]	; (800de44 <TIM_Base_SetConfig+0x128>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d007      	beq.n	800ddb6 <TIM_Base_SetConfig+0x9a>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	4a27      	ldr	r2, [pc, #156]	; (800de48 <TIM_Base_SetConfig+0x12c>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d003      	beq.n	800ddb6 <TIM_Base_SetConfig+0x9a>
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	4a26      	ldr	r2, [pc, #152]	; (800de4c <TIM_Base_SetConfig+0x130>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d108      	bne.n	800ddc8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ddbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	68db      	ldr	r3, [r3, #12]
 800ddc2:	68fa      	ldr	r2, [r7, #12]
 800ddc4:	4313      	orrs	r3, r2
 800ddc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	695b      	ldr	r3, [r3, #20]
 800ddd2:	4313      	orrs	r3, r2
 800ddd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	68fa      	ldr	r2, [r7, #12]
 800ddda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	689a      	ldr	r2, [r3, #8]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	681a      	ldr	r2, [r3, #0]
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	4a10      	ldr	r2, [pc, #64]	; (800de30 <TIM_Base_SetConfig+0x114>)
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	d00f      	beq.n	800de14 <TIM_Base_SetConfig+0xf8>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	4a12      	ldr	r2, [pc, #72]	; (800de40 <TIM_Base_SetConfig+0x124>)
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d00b      	beq.n	800de14 <TIM_Base_SetConfig+0xf8>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	4a11      	ldr	r2, [pc, #68]	; (800de44 <TIM_Base_SetConfig+0x128>)
 800de00:	4293      	cmp	r3, r2
 800de02:	d007      	beq.n	800de14 <TIM_Base_SetConfig+0xf8>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	4a10      	ldr	r2, [pc, #64]	; (800de48 <TIM_Base_SetConfig+0x12c>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d003      	beq.n	800de14 <TIM_Base_SetConfig+0xf8>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	4a0f      	ldr	r2, [pc, #60]	; (800de4c <TIM_Base_SetConfig+0x130>)
 800de10:	4293      	cmp	r3, r2
 800de12:	d103      	bne.n	800de1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	691a      	ldr	r2, [r3, #16]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2201      	movs	r2, #1
 800de20:	615a      	str	r2, [r3, #20]
}
 800de22:	bf00      	nop
 800de24:	3714      	adds	r7, #20
 800de26:	46bd      	mov	sp, r7
 800de28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2c:	4770      	bx	lr
 800de2e:	bf00      	nop
 800de30:	40010000 	.word	0x40010000
 800de34:	40000400 	.word	0x40000400
 800de38:	40000800 	.word	0x40000800
 800de3c:	40000c00 	.word	0x40000c00
 800de40:	40010400 	.word	0x40010400
 800de44:	40014000 	.word	0x40014000
 800de48:	40014400 	.word	0x40014400
 800de4c:	40014800 	.word	0x40014800

0800de50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800de50:	b480      	push	{r7}
 800de52:	b087      	sub	sp, #28
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6a1b      	ldr	r3, [r3, #32]
 800de5e:	f023 0201 	bic.w	r2, r3, #1
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6a1b      	ldr	r3, [r3, #32]
 800de6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	685b      	ldr	r3, [r3, #4]
 800de70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	699b      	ldr	r3, [r3, #24]
 800de76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800de78:	68fa      	ldr	r2, [r7, #12]
 800de7a:	4b37      	ldr	r3, [pc, #220]	; (800df58 <TIM_OC1_SetConfig+0x108>)
 800de7c:	4013      	ands	r3, r2
 800de7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f023 0303 	bic.w	r3, r3, #3
 800de86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	68fa      	ldr	r2, [r7, #12]
 800de8e:	4313      	orrs	r3, r2
 800de90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	f023 0302 	bic.w	r3, r3, #2
 800de98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	689b      	ldr	r3, [r3, #8]
 800de9e:	697a      	ldr	r2, [r7, #20]
 800dea0:	4313      	orrs	r3, r2
 800dea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	4a2d      	ldr	r2, [pc, #180]	; (800df5c <TIM_OC1_SetConfig+0x10c>)
 800dea8:	4293      	cmp	r3, r2
 800deaa:	d00f      	beq.n	800decc <TIM_OC1_SetConfig+0x7c>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	4a2c      	ldr	r2, [pc, #176]	; (800df60 <TIM_OC1_SetConfig+0x110>)
 800deb0:	4293      	cmp	r3, r2
 800deb2:	d00b      	beq.n	800decc <TIM_OC1_SetConfig+0x7c>
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	4a2b      	ldr	r2, [pc, #172]	; (800df64 <TIM_OC1_SetConfig+0x114>)
 800deb8:	4293      	cmp	r3, r2
 800deba:	d007      	beq.n	800decc <TIM_OC1_SetConfig+0x7c>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	4a2a      	ldr	r2, [pc, #168]	; (800df68 <TIM_OC1_SetConfig+0x118>)
 800dec0:	4293      	cmp	r3, r2
 800dec2:	d003      	beq.n	800decc <TIM_OC1_SetConfig+0x7c>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	4a29      	ldr	r2, [pc, #164]	; (800df6c <TIM_OC1_SetConfig+0x11c>)
 800dec8:	4293      	cmp	r3, r2
 800deca:	d10c      	bne.n	800dee6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	f023 0308 	bic.w	r3, r3, #8
 800ded2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	68db      	ldr	r3, [r3, #12]
 800ded8:	697a      	ldr	r2, [r7, #20]
 800deda:	4313      	orrs	r3, r2
 800dedc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	f023 0304 	bic.w	r3, r3, #4
 800dee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	4a1c      	ldr	r2, [pc, #112]	; (800df5c <TIM_OC1_SetConfig+0x10c>)
 800deea:	4293      	cmp	r3, r2
 800deec:	d00f      	beq.n	800df0e <TIM_OC1_SetConfig+0xbe>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	4a1b      	ldr	r2, [pc, #108]	; (800df60 <TIM_OC1_SetConfig+0x110>)
 800def2:	4293      	cmp	r3, r2
 800def4:	d00b      	beq.n	800df0e <TIM_OC1_SetConfig+0xbe>
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	4a1a      	ldr	r2, [pc, #104]	; (800df64 <TIM_OC1_SetConfig+0x114>)
 800defa:	4293      	cmp	r3, r2
 800defc:	d007      	beq.n	800df0e <TIM_OC1_SetConfig+0xbe>
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	4a19      	ldr	r2, [pc, #100]	; (800df68 <TIM_OC1_SetConfig+0x118>)
 800df02:	4293      	cmp	r3, r2
 800df04:	d003      	beq.n	800df0e <TIM_OC1_SetConfig+0xbe>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	4a18      	ldr	r2, [pc, #96]	; (800df6c <TIM_OC1_SetConfig+0x11c>)
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d111      	bne.n	800df32 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800df14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800df1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	695b      	ldr	r3, [r3, #20]
 800df22:	693a      	ldr	r2, [r7, #16]
 800df24:	4313      	orrs	r3, r2
 800df26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	699b      	ldr	r3, [r3, #24]
 800df2c:	693a      	ldr	r2, [r7, #16]
 800df2e:	4313      	orrs	r3, r2
 800df30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	693a      	ldr	r2, [r7, #16]
 800df36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	68fa      	ldr	r2, [r7, #12]
 800df3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	685a      	ldr	r2, [r3, #4]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	697a      	ldr	r2, [r7, #20]
 800df4a:	621a      	str	r2, [r3, #32]
}
 800df4c:	bf00      	nop
 800df4e:	371c      	adds	r7, #28
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr
 800df58:	fffeff8f 	.word	0xfffeff8f
 800df5c:	40010000 	.word	0x40010000
 800df60:	40010400 	.word	0x40010400
 800df64:	40014000 	.word	0x40014000
 800df68:	40014400 	.word	0x40014400
 800df6c:	40014800 	.word	0x40014800

0800df70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800df70:	b480      	push	{r7}
 800df72:	b087      	sub	sp, #28
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6a1b      	ldr	r3, [r3, #32]
 800df7e:	f023 0210 	bic.w	r2, r3, #16
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6a1b      	ldr	r3, [r3, #32]
 800df8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	699b      	ldr	r3, [r3, #24]
 800df96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	4b34      	ldr	r3, [pc, #208]	; (800e06c <TIM_OC2_SetConfig+0xfc>)
 800df9c:	4013      	ands	r3, r2
 800df9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dfa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	021b      	lsls	r3, r3, #8
 800dfae:	68fa      	ldr	r2, [r7, #12]
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	f023 0320 	bic.w	r3, r3, #32
 800dfba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	689b      	ldr	r3, [r3, #8]
 800dfc0:	011b      	lsls	r3, r3, #4
 800dfc2:	697a      	ldr	r2, [r7, #20]
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	4a29      	ldr	r2, [pc, #164]	; (800e070 <TIM_OC2_SetConfig+0x100>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d003      	beq.n	800dfd8 <TIM_OC2_SetConfig+0x68>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	4a28      	ldr	r2, [pc, #160]	; (800e074 <TIM_OC2_SetConfig+0x104>)
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d10d      	bne.n	800dff4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dfde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	68db      	ldr	r3, [r3, #12]
 800dfe4:	011b      	lsls	r3, r3, #4
 800dfe6:	697a      	ldr	r2, [r7, #20]
 800dfe8:	4313      	orrs	r3, r2
 800dfea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dff2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	4a1e      	ldr	r2, [pc, #120]	; (800e070 <TIM_OC2_SetConfig+0x100>)
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d00f      	beq.n	800e01c <TIM_OC2_SetConfig+0xac>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	4a1d      	ldr	r2, [pc, #116]	; (800e074 <TIM_OC2_SetConfig+0x104>)
 800e000:	4293      	cmp	r3, r2
 800e002:	d00b      	beq.n	800e01c <TIM_OC2_SetConfig+0xac>
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	4a1c      	ldr	r2, [pc, #112]	; (800e078 <TIM_OC2_SetConfig+0x108>)
 800e008:	4293      	cmp	r3, r2
 800e00a:	d007      	beq.n	800e01c <TIM_OC2_SetConfig+0xac>
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	4a1b      	ldr	r2, [pc, #108]	; (800e07c <TIM_OC2_SetConfig+0x10c>)
 800e010:	4293      	cmp	r3, r2
 800e012:	d003      	beq.n	800e01c <TIM_OC2_SetConfig+0xac>
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	4a1a      	ldr	r2, [pc, #104]	; (800e080 <TIM_OC2_SetConfig+0x110>)
 800e018:	4293      	cmp	r3, r2
 800e01a:	d113      	bne.n	800e044 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e022:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e02a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	695b      	ldr	r3, [r3, #20]
 800e030:	009b      	lsls	r3, r3, #2
 800e032:	693a      	ldr	r2, [r7, #16]
 800e034:	4313      	orrs	r3, r2
 800e036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	699b      	ldr	r3, [r3, #24]
 800e03c:	009b      	lsls	r3, r3, #2
 800e03e:	693a      	ldr	r2, [r7, #16]
 800e040:	4313      	orrs	r3, r2
 800e042:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	693a      	ldr	r2, [r7, #16]
 800e048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	68fa      	ldr	r2, [r7, #12]
 800e04e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	685a      	ldr	r2, [r3, #4]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	697a      	ldr	r2, [r7, #20]
 800e05c:	621a      	str	r2, [r3, #32]
}
 800e05e:	bf00      	nop
 800e060:	371c      	adds	r7, #28
 800e062:	46bd      	mov	sp, r7
 800e064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e068:	4770      	bx	lr
 800e06a:	bf00      	nop
 800e06c:	feff8fff 	.word	0xfeff8fff
 800e070:	40010000 	.word	0x40010000
 800e074:	40010400 	.word	0x40010400
 800e078:	40014000 	.word	0x40014000
 800e07c:	40014400 	.word	0x40014400
 800e080:	40014800 	.word	0x40014800

0800e084 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e084:	b480      	push	{r7}
 800e086:	b087      	sub	sp, #28
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6a1b      	ldr	r3, [r3, #32]
 800e092:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6a1b      	ldr	r3, [r3, #32]
 800e09e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	685b      	ldr	r3, [r3, #4]
 800e0a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	69db      	ldr	r3, [r3, #28]
 800e0aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e0ac:	68fa      	ldr	r2, [r7, #12]
 800e0ae:	4b33      	ldr	r3, [pc, #204]	; (800e17c <TIM_OC3_SetConfig+0xf8>)
 800e0b0:	4013      	ands	r3, r2
 800e0b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	f023 0303 	bic.w	r3, r3, #3
 800e0ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	68fa      	ldr	r2, [r7, #12]
 800e0c2:	4313      	orrs	r3, r2
 800e0c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e0cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	689b      	ldr	r3, [r3, #8]
 800e0d2:	021b      	lsls	r3, r3, #8
 800e0d4:	697a      	ldr	r2, [r7, #20]
 800e0d6:	4313      	orrs	r3, r2
 800e0d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	4a28      	ldr	r2, [pc, #160]	; (800e180 <TIM_OC3_SetConfig+0xfc>)
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	d003      	beq.n	800e0ea <TIM_OC3_SetConfig+0x66>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	4a27      	ldr	r2, [pc, #156]	; (800e184 <TIM_OC3_SetConfig+0x100>)
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	d10d      	bne.n	800e106 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e0f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	68db      	ldr	r3, [r3, #12]
 800e0f6:	021b      	lsls	r3, r3, #8
 800e0f8:	697a      	ldr	r2, [r7, #20]
 800e0fa:	4313      	orrs	r3, r2
 800e0fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	4a1d      	ldr	r2, [pc, #116]	; (800e180 <TIM_OC3_SetConfig+0xfc>)
 800e10a:	4293      	cmp	r3, r2
 800e10c:	d00f      	beq.n	800e12e <TIM_OC3_SetConfig+0xaa>
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	4a1c      	ldr	r2, [pc, #112]	; (800e184 <TIM_OC3_SetConfig+0x100>)
 800e112:	4293      	cmp	r3, r2
 800e114:	d00b      	beq.n	800e12e <TIM_OC3_SetConfig+0xaa>
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	4a1b      	ldr	r2, [pc, #108]	; (800e188 <TIM_OC3_SetConfig+0x104>)
 800e11a:	4293      	cmp	r3, r2
 800e11c:	d007      	beq.n	800e12e <TIM_OC3_SetConfig+0xaa>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	4a1a      	ldr	r2, [pc, #104]	; (800e18c <TIM_OC3_SetConfig+0x108>)
 800e122:	4293      	cmp	r3, r2
 800e124:	d003      	beq.n	800e12e <TIM_OC3_SetConfig+0xaa>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	4a19      	ldr	r2, [pc, #100]	; (800e190 <TIM_OC3_SetConfig+0x10c>)
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d113      	bne.n	800e156 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e13c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	695b      	ldr	r3, [r3, #20]
 800e142:	011b      	lsls	r3, r3, #4
 800e144:	693a      	ldr	r2, [r7, #16]
 800e146:	4313      	orrs	r3, r2
 800e148:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	699b      	ldr	r3, [r3, #24]
 800e14e:	011b      	lsls	r3, r3, #4
 800e150:	693a      	ldr	r2, [r7, #16]
 800e152:	4313      	orrs	r3, r2
 800e154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	693a      	ldr	r2, [r7, #16]
 800e15a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	68fa      	ldr	r2, [r7, #12]
 800e160:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	685a      	ldr	r2, [r3, #4]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	697a      	ldr	r2, [r7, #20]
 800e16e:	621a      	str	r2, [r3, #32]
}
 800e170:	bf00      	nop
 800e172:	371c      	adds	r7, #28
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr
 800e17c:	fffeff8f 	.word	0xfffeff8f
 800e180:	40010000 	.word	0x40010000
 800e184:	40010400 	.word	0x40010400
 800e188:	40014000 	.word	0x40014000
 800e18c:	40014400 	.word	0x40014400
 800e190:	40014800 	.word	0x40014800

0800e194 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e194:	b480      	push	{r7}
 800e196:	b087      	sub	sp, #28
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6a1b      	ldr	r3, [r3, #32]
 800e1a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6a1b      	ldr	r3, [r3, #32]
 800e1ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	685b      	ldr	r3, [r3, #4]
 800e1b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	69db      	ldr	r3, [r3, #28]
 800e1ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e1bc:	68fa      	ldr	r2, [r7, #12]
 800e1be:	4b24      	ldr	r3, [pc, #144]	; (800e250 <TIM_OC4_SetConfig+0xbc>)
 800e1c0:	4013      	ands	r3, r2
 800e1c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e1ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	021b      	lsls	r3, r3, #8
 800e1d2:	68fa      	ldr	r2, [r7, #12]
 800e1d4:	4313      	orrs	r3, r2
 800e1d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e1de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	689b      	ldr	r3, [r3, #8]
 800e1e4:	031b      	lsls	r3, r3, #12
 800e1e6:	693a      	ldr	r2, [r7, #16]
 800e1e8:	4313      	orrs	r3, r2
 800e1ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	4a19      	ldr	r2, [pc, #100]	; (800e254 <TIM_OC4_SetConfig+0xc0>)
 800e1f0:	4293      	cmp	r3, r2
 800e1f2:	d00f      	beq.n	800e214 <TIM_OC4_SetConfig+0x80>
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	4a18      	ldr	r2, [pc, #96]	; (800e258 <TIM_OC4_SetConfig+0xc4>)
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	d00b      	beq.n	800e214 <TIM_OC4_SetConfig+0x80>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	4a17      	ldr	r2, [pc, #92]	; (800e25c <TIM_OC4_SetConfig+0xc8>)
 800e200:	4293      	cmp	r3, r2
 800e202:	d007      	beq.n	800e214 <TIM_OC4_SetConfig+0x80>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	4a16      	ldr	r2, [pc, #88]	; (800e260 <TIM_OC4_SetConfig+0xcc>)
 800e208:	4293      	cmp	r3, r2
 800e20a:	d003      	beq.n	800e214 <TIM_OC4_SetConfig+0x80>
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	4a15      	ldr	r2, [pc, #84]	; (800e264 <TIM_OC4_SetConfig+0xd0>)
 800e210:	4293      	cmp	r3, r2
 800e212:	d109      	bne.n	800e228 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e21a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	695b      	ldr	r3, [r3, #20]
 800e220:	019b      	lsls	r3, r3, #6
 800e222:	697a      	ldr	r2, [r7, #20]
 800e224:	4313      	orrs	r3, r2
 800e226:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	697a      	ldr	r2, [r7, #20]
 800e22c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	68fa      	ldr	r2, [r7, #12]
 800e232:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	685a      	ldr	r2, [r3, #4]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	693a      	ldr	r2, [r7, #16]
 800e240:	621a      	str	r2, [r3, #32]
}
 800e242:	bf00      	nop
 800e244:	371c      	adds	r7, #28
 800e246:	46bd      	mov	sp, r7
 800e248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24c:	4770      	bx	lr
 800e24e:	bf00      	nop
 800e250:	feff8fff 	.word	0xfeff8fff
 800e254:	40010000 	.word	0x40010000
 800e258:	40010400 	.word	0x40010400
 800e25c:	40014000 	.word	0x40014000
 800e260:	40014400 	.word	0x40014400
 800e264:	40014800 	.word	0x40014800

0800e268 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e268:	b480      	push	{r7}
 800e26a:	b087      	sub	sp, #28
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6a1b      	ldr	r3, [r3, #32]
 800e276:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6a1b      	ldr	r3, [r3, #32]
 800e282:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	685b      	ldr	r3, [r3, #4]
 800e288:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e290:	68fa      	ldr	r2, [r7, #12]
 800e292:	4b21      	ldr	r3, [pc, #132]	; (800e318 <TIM_OC5_SetConfig+0xb0>)
 800e294:	4013      	ands	r3, r2
 800e296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	68fa      	ldr	r2, [r7, #12]
 800e29e:	4313      	orrs	r3, r2
 800e2a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e2a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	689b      	ldr	r3, [r3, #8]
 800e2ae:	041b      	lsls	r3, r3, #16
 800e2b0:	693a      	ldr	r2, [r7, #16]
 800e2b2:	4313      	orrs	r3, r2
 800e2b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	4a18      	ldr	r2, [pc, #96]	; (800e31c <TIM_OC5_SetConfig+0xb4>)
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	d00f      	beq.n	800e2de <TIM_OC5_SetConfig+0x76>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	4a17      	ldr	r2, [pc, #92]	; (800e320 <TIM_OC5_SetConfig+0xb8>)
 800e2c2:	4293      	cmp	r3, r2
 800e2c4:	d00b      	beq.n	800e2de <TIM_OC5_SetConfig+0x76>
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	4a16      	ldr	r2, [pc, #88]	; (800e324 <TIM_OC5_SetConfig+0xbc>)
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d007      	beq.n	800e2de <TIM_OC5_SetConfig+0x76>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	4a15      	ldr	r2, [pc, #84]	; (800e328 <TIM_OC5_SetConfig+0xc0>)
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d003      	beq.n	800e2de <TIM_OC5_SetConfig+0x76>
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	4a14      	ldr	r2, [pc, #80]	; (800e32c <TIM_OC5_SetConfig+0xc4>)
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	d109      	bne.n	800e2f2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e2de:	697b      	ldr	r3, [r7, #20]
 800e2e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e2e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	695b      	ldr	r3, [r3, #20]
 800e2ea:	021b      	lsls	r3, r3, #8
 800e2ec:	697a      	ldr	r2, [r7, #20]
 800e2ee:	4313      	orrs	r3, r2
 800e2f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	697a      	ldr	r2, [r7, #20]
 800e2f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	68fa      	ldr	r2, [r7, #12]
 800e2fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	685a      	ldr	r2, [r3, #4]
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	693a      	ldr	r2, [r7, #16]
 800e30a:	621a      	str	r2, [r3, #32]
}
 800e30c:	bf00      	nop
 800e30e:	371c      	adds	r7, #28
 800e310:	46bd      	mov	sp, r7
 800e312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e316:	4770      	bx	lr
 800e318:	fffeff8f 	.word	0xfffeff8f
 800e31c:	40010000 	.word	0x40010000
 800e320:	40010400 	.word	0x40010400
 800e324:	40014000 	.word	0x40014000
 800e328:	40014400 	.word	0x40014400
 800e32c:	40014800 	.word	0x40014800

0800e330 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e330:	b480      	push	{r7}
 800e332:	b087      	sub	sp, #28
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6a1b      	ldr	r3, [r3, #32]
 800e33e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6a1b      	ldr	r3, [r3, #32]
 800e34a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e358:	68fa      	ldr	r2, [r7, #12]
 800e35a:	4b22      	ldr	r3, [pc, #136]	; (800e3e4 <TIM_OC6_SetConfig+0xb4>)
 800e35c:	4013      	ands	r3, r2
 800e35e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	021b      	lsls	r3, r3, #8
 800e366:	68fa      	ldr	r2, [r7, #12]
 800e368:	4313      	orrs	r3, r2
 800e36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e372:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	689b      	ldr	r3, [r3, #8]
 800e378:	051b      	lsls	r3, r3, #20
 800e37a:	693a      	ldr	r2, [r7, #16]
 800e37c:	4313      	orrs	r3, r2
 800e37e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	4a19      	ldr	r2, [pc, #100]	; (800e3e8 <TIM_OC6_SetConfig+0xb8>)
 800e384:	4293      	cmp	r3, r2
 800e386:	d00f      	beq.n	800e3a8 <TIM_OC6_SetConfig+0x78>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	4a18      	ldr	r2, [pc, #96]	; (800e3ec <TIM_OC6_SetConfig+0xbc>)
 800e38c:	4293      	cmp	r3, r2
 800e38e:	d00b      	beq.n	800e3a8 <TIM_OC6_SetConfig+0x78>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	4a17      	ldr	r2, [pc, #92]	; (800e3f0 <TIM_OC6_SetConfig+0xc0>)
 800e394:	4293      	cmp	r3, r2
 800e396:	d007      	beq.n	800e3a8 <TIM_OC6_SetConfig+0x78>
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	4a16      	ldr	r2, [pc, #88]	; (800e3f4 <TIM_OC6_SetConfig+0xc4>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d003      	beq.n	800e3a8 <TIM_OC6_SetConfig+0x78>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	4a15      	ldr	r2, [pc, #84]	; (800e3f8 <TIM_OC6_SetConfig+0xc8>)
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	d109      	bne.n	800e3bc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e3ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	695b      	ldr	r3, [r3, #20]
 800e3b4:	029b      	lsls	r3, r3, #10
 800e3b6:	697a      	ldr	r2, [r7, #20]
 800e3b8:	4313      	orrs	r3, r2
 800e3ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	697a      	ldr	r2, [r7, #20]
 800e3c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	68fa      	ldr	r2, [r7, #12]
 800e3c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	685a      	ldr	r2, [r3, #4]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	693a      	ldr	r2, [r7, #16]
 800e3d4:	621a      	str	r2, [r3, #32]
}
 800e3d6:	bf00      	nop
 800e3d8:	371c      	adds	r7, #28
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e0:	4770      	bx	lr
 800e3e2:	bf00      	nop
 800e3e4:	feff8fff 	.word	0xfeff8fff
 800e3e8:	40010000 	.word	0x40010000
 800e3ec:	40010400 	.word	0x40010400
 800e3f0:	40014000 	.word	0x40014000
 800e3f4:	40014400 	.word	0x40014400
 800e3f8:	40014800 	.word	0x40014800

0800e3fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b087      	sub	sp, #28
 800e400:	af00      	add	r7, sp, #0
 800e402:	60f8      	str	r0, [r7, #12]
 800e404:	60b9      	str	r1, [r7, #8]
 800e406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	6a1b      	ldr	r3, [r3, #32]
 800e40c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	6a1b      	ldr	r3, [r3, #32]
 800e412:	f023 0201 	bic.w	r2, r3, #1
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	699b      	ldr	r3, [r3, #24]
 800e41e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	011b      	lsls	r3, r3, #4
 800e42c:	693a      	ldr	r2, [r7, #16]
 800e42e:	4313      	orrs	r3, r2
 800e430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e432:	697b      	ldr	r3, [r7, #20]
 800e434:	f023 030a 	bic.w	r3, r3, #10
 800e438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e43a:	697a      	ldr	r2, [r7, #20]
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	4313      	orrs	r3, r2
 800e440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	693a      	ldr	r2, [r7, #16]
 800e446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	697a      	ldr	r2, [r7, #20]
 800e44c:	621a      	str	r2, [r3, #32]
}
 800e44e:	bf00      	nop
 800e450:	371c      	adds	r7, #28
 800e452:	46bd      	mov	sp, r7
 800e454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e458:	4770      	bx	lr

0800e45a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e45a:	b480      	push	{r7}
 800e45c:	b087      	sub	sp, #28
 800e45e:	af00      	add	r7, sp, #0
 800e460:	60f8      	str	r0, [r7, #12]
 800e462:	60b9      	str	r1, [r7, #8]
 800e464:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	6a1b      	ldr	r3, [r3, #32]
 800e46a:	f023 0210 	bic.w	r2, r3, #16
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	699b      	ldr	r3, [r3, #24]
 800e476:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	6a1b      	ldr	r3, [r3, #32]
 800e47c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e484:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	031b      	lsls	r3, r3, #12
 800e48a:	697a      	ldr	r2, [r7, #20]
 800e48c:	4313      	orrs	r3, r2
 800e48e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e496:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	011b      	lsls	r3, r3, #4
 800e49c:	693a      	ldr	r2, [r7, #16]
 800e49e:	4313      	orrs	r3, r2
 800e4a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	697a      	ldr	r2, [r7, #20]
 800e4a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	693a      	ldr	r2, [r7, #16]
 800e4ac:	621a      	str	r2, [r3, #32]
}
 800e4ae:	bf00      	nop
 800e4b0:	371c      	adds	r7, #28
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b8:	4770      	bx	lr
	...

0800e4bc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b085      	sub	sp, #20
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
 800e4c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	689b      	ldr	r3, [r3, #8]
 800e4ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e4cc:	68fa      	ldr	r2, [r7, #12]
 800e4ce:	4b09      	ldr	r3, [pc, #36]	; (800e4f4 <TIM_ITRx_SetConfig+0x38>)
 800e4d0:	4013      	ands	r3, r2
 800e4d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e4d4:	683a      	ldr	r2, [r7, #0]
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	4313      	orrs	r3, r2
 800e4da:	f043 0307 	orr.w	r3, r3, #7
 800e4de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	68fa      	ldr	r2, [r7, #12]
 800e4e4:	609a      	str	r2, [r3, #8]
}
 800e4e6:	bf00      	nop
 800e4e8:	3714      	adds	r7, #20
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f0:	4770      	bx	lr
 800e4f2:	bf00      	nop
 800e4f4:	ffcfff8f 	.word	0xffcfff8f

0800e4f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b087      	sub	sp, #28
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	60f8      	str	r0, [r7, #12]
 800e500:	60b9      	str	r1, [r7, #8]
 800e502:	607a      	str	r2, [r7, #4]
 800e504:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	689b      	ldr	r3, [r3, #8]
 800e50a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e512:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	021a      	lsls	r2, r3, #8
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	431a      	orrs	r2, r3
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	4313      	orrs	r3, r2
 800e520:	697a      	ldr	r2, [r7, #20]
 800e522:	4313      	orrs	r3, r2
 800e524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	697a      	ldr	r2, [r7, #20]
 800e52a:	609a      	str	r2, [r3, #8]
}
 800e52c:	bf00      	nop
 800e52e:	371c      	adds	r7, #28
 800e530:	46bd      	mov	sp, r7
 800e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e536:	4770      	bx	lr

0800e538 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e538:	b480      	push	{r7}
 800e53a:	b087      	sub	sp, #28
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	60f8      	str	r0, [r7, #12]
 800e540:	60b9      	str	r1, [r7, #8]
 800e542:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	f003 031f 	and.w	r3, r3, #31
 800e54a:	2201      	movs	r2, #1
 800e54c:	fa02 f303 	lsl.w	r3, r2, r3
 800e550:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	6a1a      	ldr	r2, [r3, #32]
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	43db      	mvns	r3, r3
 800e55a:	401a      	ands	r2, r3
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	6a1a      	ldr	r2, [r3, #32]
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	f003 031f 	and.w	r3, r3, #31
 800e56a:	6879      	ldr	r1, [r7, #4]
 800e56c:	fa01 f303 	lsl.w	r3, r1, r3
 800e570:	431a      	orrs	r2, r3
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	621a      	str	r2, [r3, #32]
}
 800e576:	bf00      	nop
 800e578:	371c      	adds	r7, #28
 800e57a:	46bd      	mov	sp, r7
 800e57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e580:	4770      	bx	lr
	...

0800e584 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e584:	b480      	push	{r7}
 800e586:	b085      	sub	sp, #20
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e594:	2b01      	cmp	r3, #1
 800e596:	d101      	bne.n	800e59c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e598:	2302      	movs	r3, #2
 800e59a:	e06d      	b.n	800e678 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2201      	movs	r2, #1
 800e5a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2202      	movs	r2, #2
 800e5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	689b      	ldr	r3, [r3, #8]
 800e5ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4a30      	ldr	r2, [pc, #192]	; (800e684 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d004      	beq.n	800e5d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	4a2f      	ldr	r2, [pc, #188]	; (800e688 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e5cc:	4293      	cmp	r3, r2
 800e5ce:	d108      	bne.n	800e5e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e5d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	685b      	ldr	r3, [r3, #4]
 800e5dc:	68fa      	ldr	r2, [r7, #12]
 800e5de:	4313      	orrs	r3, r2
 800e5e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e5e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	68fa      	ldr	r2, [r7, #12]
 800e5f0:	4313      	orrs	r3, r2
 800e5f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	68fa      	ldr	r2, [r7, #12]
 800e5fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	4a20      	ldr	r2, [pc, #128]	; (800e684 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e602:	4293      	cmp	r3, r2
 800e604:	d022      	beq.n	800e64c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e60e:	d01d      	beq.n	800e64c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	4a1d      	ldr	r2, [pc, #116]	; (800e68c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e616:	4293      	cmp	r3, r2
 800e618:	d018      	beq.n	800e64c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	4a1c      	ldr	r2, [pc, #112]	; (800e690 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e620:	4293      	cmp	r3, r2
 800e622:	d013      	beq.n	800e64c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	4a1a      	ldr	r2, [pc, #104]	; (800e694 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d00e      	beq.n	800e64c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	4a15      	ldr	r2, [pc, #84]	; (800e688 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e634:	4293      	cmp	r3, r2
 800e636:	d009      	beq.n	800e64c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4a16      	ldr	r2, [pc, #88]	; (800e698 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e63e:	4293      	cmp	r3, r2
 800e640:	d004      	beq.n	800e64c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	4a15      	ldr	r2, [pc, #84]	; (800e69c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e648:	4293      	cmp	r3, r2
 800e64a:	d10c      	bne.n	800e666 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e652:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	689b      	ldr	r3, [r3, #8]
 800e658:	68ba      	ldr	r2, [r7, #8]
 800e65a:	4313      	orrs	r3, r2
 800e65c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	68ba      	ldr	r2, [r7, #8]
 800e664:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2201      	movs	r2, #1
 800e66a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2200      	movs	r2, #0
 800e672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e676:	2300      	movs	r3, #0
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3714      	adds	r7, #20
 800e67c:	46bd      	mov	sp, r7
 800e67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e682:	4770      	bx	lr
 800e684:	40010000 	.word	0x40010000
 800e688:	40010400 	.word	0x40010400
 800e68c:	40000400 	.word	0x40000400
 800e690:	40000800 	.word	0x40000800
 800e694:	40000c00 	.word	0x40000c00
 800e698:	40001800 	.word	0x40001800
 800e69c:	40014000 	.word	0x40014000

0800e6a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e6a0:	b480      	push	{r7}
 800e6a2:	b085      	sub	sp, #20
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e6b4:	2b01      	cmp	r3, #1
 800e6b6:	d101      	bne.n	800e6bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e6b8:	2302      	movs	r3, #2
 800e6ba:	e065      	b.n	800e788 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2201      	movs	r2, #1
 800e6c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	68db      	ldr	r3, [r3, #12]
 800e6ce:	4313      	orrs	r3, r2
 800e6d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	689b      	ldr	r3, [r3, #8]
 800e6dc:	4313      	orrs	r3, r2
 800e6de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	685b      	ldr	r3, [r3, #4]
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	4313      	orrs	r3, r2
 800e6fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	691b      	ldr	r3, [r3, #16]
 800e706:	4313      	orrs	r3, r2
 800e708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	695b      	ldr	r3, [r3, #20]
 800e714:	4313      	orrs	r3, r2
 800e716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e722:	4313      	orrs	r3, r2
 800e724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	699b      	ldr	r3, [r3, #24]
 800e730:	041b      	lsls	r3, r3, #16
 800e732:	4313      	orrs	r3, r2
 800e734:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	4a16      	ldr	r2, [pc, #88]	; (800e794 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d004      	beq.n	800e74a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	4a14      	ldr	r2, [pc, #80]	; (800e798 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e746:	4293      	cmp	r3, r2
 800e748:	d115      	bne.n	800e776 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e754:	051b      	lsls	r3, r3, #20
 800e756:	4313      	orrs	r3, r2
 800e758:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	69db      	ldr	r3, [r3, #28]
 800e764:	4313      	orrs	r3, r2
 800e766:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	6a1b      	ldr	r3, [r3, #32]
 800e772:	4313      	orrs	r3, r2
 800e774:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	68fa      	ldr	r2, [r7, #12]
 800e77c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2200      	movs	r2, #0
 800e782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e786:	2300      	movs	r3, #0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3714      	adds	r7, #20
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr
 800e794:	40010000 	.word	0x40010000
 800e798:	40010400 	.word	0x40010400

0800e79c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e79c:	b480      	push	{r7}
 800e79e:	b083      	sub	sp, #12
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e7a4:	bf00      	nop
 800e7a6:	370c      	adds	r7, #12
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ae:	4770      	bx	lr

0800e7b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b083      	sub	sp, #12
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e7b8:	bf00      	nop
 800e7ba:	370c      	adds	r7, #12
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c2:	4770      	bx	lr

0800e7c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b083      	sub	sp, #12
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e7cc:	bf00      	nop
 800e7ce:	370c      	adds	r7, #12
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d6:	4770      	bx	lr

0800e7d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d101      	bne.n	800e7ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	e042      	b.n	800e870 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d106      	bne.n	800e802 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f7f7 fe85 	bl	800650c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2224      	movs	r2, #36	; 0x24
 800e806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	681a      	ldr	r2, [r3, #0]
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f022 0201 	bic.w	r2, r2, #1
 800e818:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f000 fdf8 	bl	800f410 <UART_SetConfig>
 800e820:	4603      	mov	r3, r0
 800e822:	2b01      	cmp	r3, #1
 800e824:	d101      	bne.n	800e82a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e826:	2301      	movs	r3, #1
 800e828:	e022      	b.n	800e870 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d002      	beq.n	800e838 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f001 fb4c 	bl	800fed0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	685a      	ldr	r2, [r3, #4]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e846:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	689a      	ldr	r2, [r3, #8]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e856:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	681a      	ldr	r2, [r3, #0]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	f042 0201 	orr.w	r2, r2, #1
 800e866:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f001 fbd3 	bl	8010014 <UART_CheckIdleState>
 800e86e:	4603      	mov	r3, r0
}
 800e870:	4618      	mov	r0, r3
 800e872:	3708      	adds	r7, #8
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}

0800e878 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b08a      	sub	sp, #40	; 0x28
 800e87c:	af02      	add	r7, sp, #8
 800e87e:	60f8      	str	r0, [r7, #12]
 800e880:	60b9      	str	r1, [r7, #8]
 800e882:	603b      	str	r3, [r7, #0]
 800e884:	4613      	mov	r3, r2
 800e886:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e88e:	2b20      	cmp	r3, #32
 800e890:	f040 8083 	bne.w	800e99a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d002      	beq.n	800e8a0 <HAL_UART_Transmit+0x28>
 800e89a:	88fb      	ldrh	r3, [r7, #6]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d101      	bne.n	800e8a4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	e07b      	b.n	800e99c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e8aa:	2b01      	cmp	r3, #1
 800e8ac:	d101      	bne.n	800e8b2 <HAL_UART_Transmit+0x3a>
 800e8ae:	2302      	movs	r3, #2
 800e8b0:	e074      	b.n	800e99c <HAL_UART_Transmit+0x124>
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2201      	movs	r2, #1
 800e8b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2200      	movs	r2, #0
 800e8be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2221      	movs	r2, #33	; 0x21
 800e8c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e8ca:	f7f8 f9bb 	bl	8006c44 <HAL_GetTick>
 800e8ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	88fa      	ldrh	r2, [r7, #6]
 800e8d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	88fa      	ldrh	r2, [r7, #6]
 800e8dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	689b      	ldr	r3, [r3, #8]
 800e8e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8e8:	d108      	bne.n	800e8fc <HAL_UART_Transmit+0x84>
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	691b      	ldr	r3, [r3, #16]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d104      	bne.n	800e8fc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	61bb      	str	r3, [r7, #24]
 800e8fa:	e003      	b.n	800e904 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e900:	2300      	movs	r3, #0
 800e902:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2200      	movs	r2, #0
 800e908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800e90c:	e02c      	b.n	800e968 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	9300      	str	r3, [sp, #0]
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	2200      	movs	r2, #0
 800e916:	2180      	movs	r1, #128	; 0x80
 800e918:	68f8      	ldr	r0, [r7, #12]
 800e91a:	f001 fbc6 	bl	80100aa <UART_WaitOnFlagUntilTimeout>
 800e91e:	4603      	mov	r3, r0
 800e920:	2b00      	cmp	r3, #0
 800e922:	d001      	beq.n	800e928 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800e924:	2303      	movs	r3, #3
 800e926:	e039      	b.n	800e99c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800e928:	69fb      	ldr	r3, [r7, #28]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d10b      	bne.n	800e946 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e92e:	69bb      	ldr	r3, [r7, #24]
 800e930:	881b      	ldrh	r3, [r3, #0]
 800e932:	461a      	mov	r2, r3
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e93c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e93e:	69bb      	ldr	r3, [r7, #24]
 800e940:	3302      	adds	r3, #2
 800e942:	61bb      	str	r3, [r7, #24]
 800e944:	e007      	b.n	800e956 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e946:	69fb      	ldr	r3, [r7, #28]
 800e948:	781a      	ldrb	r2, [r3, #0]
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e950:	69fb      	ldr	r3, [r7, #28]
 800e952:	3301      	adds	r3, #1
 800e954:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e95c:	b29b      	uxth	r3, r3
 800e95e:	3b01      	subs	r3, #1
 800e960:	b29a      	uxth	r2, r3
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e96e:	b29b      	uxth	r3, r3
 800e970:	2b00      	cmp	r3, #0
 800e972:	d1cc      	bne.n	800e90e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	9300      	str	r3, [sp, #0]
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	2200      	movs	r2, #0
 800e97c:	2140      	movs	r1, #64	; 0x40
 800e97e:	68f8      	ldr	r0, [r7, #12]
 800e980:	f001 fb93 	bl	80100aa <UART_WaitOnFlagUntilTimeout>
 800e984:	4603      	mov	r3, r0
 800e986:	2b00      	cmp	r3, #0
 800e988:	d001      	beq.n	800e98e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800e98a:	2303      	movs	r3, #3
 800e98c:	e006      	b.n	800e99c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2220      	movs	r2, #32
 800e992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800e996:	2300      	movs	r3, #0
 800e998:	e000      	b.n	800e99c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800e99a:	2302      	movs	r3, #2
  }
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3720      	adds	r7, #32
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b08a      	sub	sp, #40	; 0x28
 800e9a8:	af02      	add	r7, sp, #8
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	603b      	str	r3, [r7, #0]
 800e9b0:	4613      	mov	r3, r2
 800e9b2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9ba:	2b20      	cmp	r3, #32
 800e9bc:	f040 80c0 	bne.w	800eb40 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d002      	beq.n	800e9cc <HAL_UART_Receive+0x28>
 800e9c6:	88fb      	ldrh	r3, [r7, #6]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d101      	bne.n	800e9d0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	e0b8      	b.n	800eb42 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e9d6:	2b01      	cmp	r3, #1
 800e9d8:	d101      	bne.n	800e9de <HAL_UART_Receive+0x3a>
 800e9da:	2302      	movs	r3, #2
 800e9dc:	e0b1      	b.n	800eb42 <HAL_UART_Receive+0x19e>
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	2201      	movs	r2, #1
 800e9e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2222      	movs	r2, #34	; 0x22
 800e9f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e9fc:	f7f8 f922 	bl	8006c44 <HAL_GetTick>
 800ea00:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	88fa      	ldrh	r2, [r7, #6]
 800ea06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	88fa      	ldrh	r2, [r7, #6]
 800ea0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	689b      	ldr	r3, [r3, #8]
 800ea16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea1a:	d10e      	bne.n	800ea3a <HAL_UART_Receive+0x96>
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	691b      	ldr	r3, [r3, #16]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d105      	bne.n	800ea30 <HAL_UART_Receive+0x8c>
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ea2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea2e:	e02d      	b.n	800ea8c <HAL_UART_Receive+0xe8>
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	22ff      	movs	r2, #255	; 0xff
 800ea34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea38:	e028      	b.n	800ea8c <HAL_UART_Receive+0xe8>
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	689b      	ldr	r3, [r3, #8]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d10d      	bne.n	800ea5e <HAL_UART_Receive+0xba>
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	691b      	ldr	r3, [r3, #16]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d104      	bne.n	800ea54 <HAL_UART_Receive+0xb0>
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	22ff      	movs	r2, #255	; 0xff
 800ea4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea52:	e01b      	b.n	800ea8c <HAL_UART_Receive+0xe8>
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	227f      	movs	r2, #127	; 0x7f
 800ea58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea5c:	e016      	b.n	800ea8c <HAL_UART_Receive+0xe8>
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	689b      	ldr	r3, [r3, #8]
 800ea62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ea66:	d10d      	bne.n	800ea84 <HAL_UART_Receive+0xe0>
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	691b      	ldr	r3, [r3, #16]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d104      	bne.n	800ea7a <HAL_UART_Receive+0xd6>
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	227f      	movs	r2, #127	; 0x7f
 800ea74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea78:	e008      	b.n	800ea8c <HAL_UART_Receive+0xe8>
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	223f      	movs	r2, #63	; 0x3f
 800ea7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea82:	e003      	b.n	800ea8c <HAL_UART_Receive+0xe8>
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	2200      	movs	r2, #0
 800ea88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ea92:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	689b      	ldr	r3, [r3, #8]
 800ea98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea9c:	d108      	bne.n	800eab0 <HAL_UART_Receive+0x10c>
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	691b      	ldr	r3, [r3, #16]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d104      	bne.n	800eab0 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	61bb      	str	r3, [r7, #24]
 800eaae:	e003      	b.n	800eab8 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eab4:	2300      	movs	r3, #0
 800eab6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2200      	movs	r2, #0
 800eabc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800eac0:	e032      	b.n	800eb28 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	9300      	str	r3, [sp, #0]
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	2200      	movs	r2, #0
 800eaca:	2120      	movs	r1, #32
 800eacc:	68f8      	ldr	r0, [r7, #12]
 800eace:	f001 faec 	bl	80100aa <UART_WaitOnFlagUntilTimeout>
 800ead2:	4603      	mov	r3, r0
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d001      	beq.n	800eadc <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800ead8:	2303      	movs	r3, #3
 800eada:	e032      	b.n	800eb42 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800eadc:	69fb      	ldr	r3, [r7, #28]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d10c      	bne.n	800eafc <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eae8:	b29a      	uxth	r2, r3
 800eaea:	8a7b      	ldrh	r3, [r7, #18]
 800eaec:	4013      	ands	r3, r2
 800eaee:	b29a      	uxth	r2, r3
 800eaf0:	69bb      	ldr	r3, [r7, #24]
 800eaf2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800eaf4:	69bb      	ldr	r3, [r7, #24]
 800eaf6:	3302      	adds	r3, #2
 800eaf8:	61bb      	str	r3, [r7, #24]
 800eafa:	e00c      	b.n	800eb16 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb02:	b2da      	uxtb	r2, r3
 800eb04:	8a7b      	ldrh	r3, [r7, #18]
 800eb06:	b2db      	uxtb	r3, r3
 800eb08:	4013      	ands	r3, r2
 800eb0a:	b2da      	uxtb	r2, r3
 800eb0c:	69fb      	ldr	r3, [r7, #28]
 800eb0e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800eb10:	69fb      	ldr	r3, [r7, #28]
 800eb12:	3301      	adds	r3, #1
 800eb14:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb1c:	b29b      	uxth	r3, r3
 800eb1e:	3b01      	subs	r3, #1
 800eb20:	b29a      	uxth	r2, r3
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb2e:	b29b      	uxth	r3, r3
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d1c6      	bne.n	800eac2 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	2220      	movs	r2, #32
 800eb38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	e000      	b.n	800eb42 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800eb40:	2302      	movs	r3, #2
  }
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3720      	adds	r7, #32
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
	...

0800eb4c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b08a      	sub	sp, #40	; 0x28
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	60f8      	str	r0, [r7, #12]
 800eb54:	60b9      	str	r1, [r7, #8]
 800eb56:	4613      	mov	r3, r2
 800eb58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb60:	2b20      	cmp	r3, #32
 800eb62:	d17a      	bne.n	800ec5a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d002      	beq.n	800eb70 <HAL_UART_Transmit_DMA+0x24>
 800eb6a:	88fb      	ldrh	r3, [r7, #6]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d101      	bne.n	800eb74 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800eb70:	2301      	movs	r3, #1
 800eb72:	e073      	b.n	800ec5c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb7a:	2b01      	cmp	r3, #1
 800eb7c:	d101      	bne.n	800eb82 <HAL_UART_Transmit_DMA+0x36>
 800eb7e:	2302      	movs	r3, #2
 800eb80:	e06c      	b.n	800ec5c <HAL_UART_Transmit_DMA+0x110>
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	2201      	movs	r2, #1
 800eb86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	68ba      	ldr	r2, [r7, #8]
 800eb8e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	88fa      	ldrh	r2, [r7, #6]
 800eb94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	88fa      	ldrh	r2, [r7, #6]
 800eb9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	2200      	movs	r2, #0
 800eba4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	2221      	movs	r2, #33	; 0x21
 800ebac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d02c      	beq.n	800ec12 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebbc:	4a29      	ldr	r2, [pc, #164]	; (800ec64 <HAL_UART_Transmit_DMA+0x118>)
 800ebbe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebc4:	4a28      	ldr	r2, [pc, #160]	; (800ec68 <HAL_UART_Transmit_DMA+0x11c>)
 800ebc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebcc:	4a27      	ldr	r2, [pc, #156]	; (800ec6c <HAL_UART_Transmit_DMA+0x120>)
 800ebce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebe0:	4619      	mov	r1, r3
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	3328      	adds	r3, #40	; 0x28
 800ebe8:	461a      	mov	r2, r3
 800ebea:	88fb      	ldrh	r3, [r7, #6]
 800ebec:	f7f8 fedc 	bl	80079a8 <HAL_DMA_Start_IT>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d00d      	beq.n	800ec12 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	2210      	movs	r2, #16
 800ebfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	2200      	movs	r2, #0
 800ec02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	2220      	movs	r2, #32
 800ec0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800ec0e:	2301      	movs	r3, #1
 800ec10:	e024      	b.n	800ec5c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	2240      	movs	r2, #64	; 0x40
 800ec18:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	3308      	adds	r3, #8
 800ec28:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	e853 3f00 	ldrex	r3, [r3]
 800ec30:	613b      	str	r3, [r7, #16]
   return(result);
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec38:	627b      	str	r3, [r7, #36]	; 0x24
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	3308      	adds	r3, #8
 800ec40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec42:	623a      	str	r2, [r7, #32]
 800ec44:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec46:	69f9      	ldr	r1, [r7, #28]
 800ec48:	6a3a      	ldr	r2, [r7, #32]
 800ec4a:	e841 2300 	strex	r3, r2, [r1]
 800ec4e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ec50:	69bb      	ldr	r3, [r7, #24]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d1e5      	bne.n	800ec22 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800ec56:	2300      	movs	r3, #0
 800ec58:	e000      	b.n	800ec5c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800ec5a:	2302      	movs	r3, #2
  }
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3728      	adds	r7, #40	; 0x28
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}
 800ec64:	080104dd 	.word	0x080104dd
 800ec68:	08010573 	.word	0x08010573
 800ec6c:	080106e9 	.word	0x080106e9

0800ec70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b0ba      	sub	sp, #232	; 0xe8
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	69db      	ldr	r3, [r3, #28]
 800ec7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	689b      	ldr	r3, [r3, #8]
 800ec92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ec96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ec9a:	f640 030f 	movw	r3, #2063	; 0x80f
 800ec9e:	4013      	ands	r3, r2
 800eca0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800eca4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d11b      	bne.n	800ece4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ecac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecb0:	f003 0320 	and.w	r3, r3, #32
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d015      	beq.n	800ece4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ecb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ecbc:	f003 0320 	and.w	r3, r3, #32
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d105      	bne.n	800ecd0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ecc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ecc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d009      	beq.n	800ece4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	f000 835a 	beq.w	800f38e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	4798      	blx	r3
      }
      return;
 800ece2:	e354      	b.n	800f38e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ece4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	f000 811f 	beq.w	800ef2c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ecee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ecf2:	4b8b      	ldr	r3, [pc, #556]	; (800ef20 <HAL_UART_IRQHandler+0x2b0>)
 800ecf4:	4013      	ands	r3, r2
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d106      	bne.n	800ed08 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ecfa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ecfe:	4b89      	ldr	r3, [pc, #548]	; (800ef24 <HAL_UART_IRQHandler+0x2b4>)
 800ed00:	4013      	ands	r3, r2
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	f000 8112 	beq.w	800ef2c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ed08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed0c:	f003 0301 	and.w	r3, r3, #1
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d011      	beq.n	800ed38 <HAL_UART_IRQHandler+0xc8>
 800ed14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d00b      	beq.n	800ed38 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	2201      	movs	r2, #1
 800ed26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed2e:	f043 0201 	orr.w	r2, r3, #1
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed3c:	f003 0302 	and.w	r3, r3, #2
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d011      	beq.n	800ed68 <HAL_UART_IRQHandler+0xf8>
 800ed44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed48:	f003 0301 	and.w	r3, r3, #1
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d00b      	beq.n	800ed68 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	2202      	movs	r2, #2
 800ed56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed5e:	f043 0204 	orr.w	r2, r3, #4
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed6c:	f003 0304 	and.w	r3, r3, #4
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d011      	beq.n	800ed98 <HAL_UART_IRQHandler+0x128>
 800ed74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed78:	f003 0301 	and.w	r3, r3, #1
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d00b      	beq.n	800ed98 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	2204      	movs	r2, #4
 800ed86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed8e:	f043 0202 	orr.w	r2, r3, #2
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ed98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed9c:	f003 0308 	and.w	r3, r3, #8
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d017      	beq.n	800edd4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eda4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eda8:	f003 0320 	and.w	r3, r3, #32
 800edac:	2b00      	cmp	r3, #0
 800edae:	d105      	bne.n	800edbc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800edb0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800edb4:	4b5a      	ldr	r3, [pc, #360]	; (800ef20 <HAL_UART_IRQHandler+0x2b0>)
 800edb6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d00b      	beq.n	800edd4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	2208      	movs	r2, #8
 800edc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800edca:	f043 0208 	orr.w	r2, r3, #8
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800edd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d012      	beq.n	800ee06 <HAL_UART_IRQHandler+0x196>
 800ede0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ede4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d00c      	beq.n	800ee06 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800edf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800edfc:	f043 0220 	orr.w	r2, r3, #32
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	f000 82c0 	beq.w	800f392 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ee12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee16:	f003 0320 	and.w	r3, r3, #32
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d013      	beq.n	800ee46 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ee1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee22:	f003 0320 	and.w	r3, r3, #32
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d105      	bne.n	800ee36 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ee2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d007      	beq.n	800ee46 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d003      	beq.n	800ee46 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	689b      	ldr	r3, [r3, #8]
 800ee56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee5a:	2b40      	cmp	r3, #64	; 0x40
 800ee5c:	d005      	beq.n	800ee6a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ee5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ee62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d04f      	beq.n	800ef0a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f001 fad0 	bl	8010410 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	689b      	ldr	r3, [r3, #8]
 800ee76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee7a:	2b40      	cmp	r3, #64	; 0x40
 800ee7c:	d141      	bne.n	800ef02 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	3308      	adds	r3, #8
 800ee84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ee8c:	e853 3f00 	ldrex	r3, [r3]
 800ee90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ee94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ee98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	3308      	adds	r3, #8
 800eea6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800eeaa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800eeae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800eeb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800eeba:	e841 2300 	strex	r3, r2, [r1]
 800eebe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800eec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d1d9      	bne.n	800ee7e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d013      	beq.n	800eefa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eed6:	4a14      	ldr	r2, [pc, #80]	; (800ef28 <HAL_UART_IRQHandler+0x2b8>)
 800eed8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eede:	4618      	mov	r0, r3
 800eee0:	f7f9 faea 	bl	80084b8 <HAL_DMA_Abort_IT>
 800eee4:	4603      	mov	r3, r0
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d017      	beq.n	800ef1a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eeee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eef0:	687a      	ldr	r2, [r7, #4]
 800eef2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800eef4:	4610      	mov	r0, r2
 800eef6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eef8:	e00f      	b.n	800ef1a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f000 fa7e 	bl	800f3fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef00:	e00b      	b.n	800ef1a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f000 fa7a 	bl	800f3fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef08:	e007      	b.n	800ef1a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f000 fa76 	bl	800f3fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2200      	movs	r2, #0
 800ef14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800ef18:	e23b      	b.n	800f392 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef1a:	bf00      	nop
    return;
 800ef1c:	e239      	b.n	800f392 <HAL_UART_IRQHandler+0x722>
 800ef1e:	bf00      	nop
 800ef20:	10000001 	.word	0x10000001
 800ef24:	04000120 	.word	0x04000120
 800ef28:	08010769 	.word	0x08010769

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef30:	2b01      	cmp	r3, #1
 800ef32:	f040 81ce 	bne.w	800f2d2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ef36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef3a:	f003 0310 	and.w	r3, r3, #16
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	f000 81c7 	beq.w	800f2d2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ef44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef48:	f003 0310 	and.w	r3, r3, #16
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	f000 81c0 	beq.w	800f2d2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	2210      	movs	r2, #16
 800ef58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	689b      	ldr	r3, [r3, #8]
 800ef60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef64:	2b40      	cmp	r3, #64	; 0x40
 800ef66:	f040 813b 	bne.w	800f1e0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4a8b      	ldr	r2, [pc, #556]	; (800f1a0 <HAL_UART_IRQHandler+0x530>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d059      	beq.n	800f02a <HAL_UART_IRQHandler+0x3ba>
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	4a89      	ldr	r2, [pc, #548]	; (800f1a4 <HAL_UART_IRQHandler+0x534>)
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d053      	beq.n	800f02a <HAL_UART_IRQHandler+0x3ba>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	4a87      	ldr	r2, [pc, #540]	; (800f1a8 <HAL_UART_IRQHandler+0x538>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d04d      	beq.n	800f02a <HAL_UART_IRQHandler+0x3ba>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	4a85      	ldr	r2, [pc, #532]	; (800f1ac <HAL_UART_IRQHandler+0x53c>)
 800ef96:	4293      	cmp	r3, r2
 800ef98:	d047      	beq.n	800f02a <HAL_UART_IRQHandler+0x3ba>
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	4a83      	ldr	r2, [pc, #524]	; (800f1b0 <HAL_UART_IRQHandler+0x540>)
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d041      	beq.n	800f02a <HAL_UART_IRQHandler+0x3ba>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	4a81      	ldr	r2, [pc, #516]	; (800f1b4 <HAL_UART_IRQHandler+0x544>)
 800efae:	4293      	cmp	r3, r2
 800efb0:	d03b      	beq.n	800f02a <HAL_UART_IRQHandler+0x3ba>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	4a7f      	ldr	r2, [pc, #508]	; (800f1b8 <HAL_UART_IRQHandler+0x548>)
 800efba:	4293      	cmp	r3, r2
 800efbc:	d035      	beq.n	800f02a <HAL_UART_IRQHandler+0x3ba>
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	4a7d      	ldr	r2, [pc, #500]	; (800f1bc <HAL_UART_IRQHandler+0x54c>)
 800efc6:	4293      	cmp	r3, r2
 800efc8:	d02f      	beq.n	800f02a <HAL_UART_IRQHandler+0x3ba>
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	4a7b      	ldr	r2, [pc, #492]	; (800f1c0 <HAL_UART_IRQHandler+0x550>)
 800efd2:	4293      	cmp	r3, r2
 800efd4:	d029      	beq.n	800f02a <HAL_UART_IRQHandler+0x3ba>
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	4a79      	ldr	r2, [pc, #484]	; (800f1c4 <HAL_UART_IRQHandler+0x554>)
 800efde:	4293      	cmp	r3, r2
 800efe0:	d023      	beq.n	800f02a <HAL_UART_IRQHandler+0x3ba>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	4a77      	ldr	r2, [pc, #476]	; (800f1c8 <HAL_UART_IRQHandler+0x558>)
 800efea:	4293      	cmp	r3, r2
 800efec:	d01d      	beq.n	800f02a <HAL_UART_IRQHandler+0x3ba>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	4a75      	ldr	r2, [pc, #468]	; (800f1cc <HAL_UART_IRQHandler+0x55c>)
 800eff6:	4293      	cmp	r3, r2
 800eff8:	d017      	beq.n	800f02a <HAL_UART_IRQHandler+0x3ba>
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4a73      	ldr	r2, [pc, #460]	; (800f1d0 <HAL_UART_IRQHandler+0x560>)
 800f002:	4293      	cmp	r3, r2
 800f004:	d011      	beq.n	800f02a <HAL_UART_IRQHandler+0x3ba>
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	4a71      	ldr	r2, [pc, #452]	; (800f1d4 <HAL_UART_IRQHandler+0x564>)
 800f00e:	4293      	cmp	r3, r2
 800f010:	d00b      	beq.n	800f02a <HAL_UART_IRQHandler+0x3ba>
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	4a6f      	ldr	r2, [pc, #444]	; (800f1d8 <HAL_UART_IRQHandler+0x568>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d005      	beq.n	800f02a <HAL_UART_IRQHandler+0x3ba>
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	4a6d      	ldr	r2, [pc, #436]	; (800f1dc <HAL_UART_IRQHandler+0x56c>)
 800f026:	4293      	cmp	r3, r2
 800f028:	d105      	bne.n	800f036 <HAL_UART_IRQHandler+0x3c6>
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	685b      	ldr	r3, [r3, #4]
 800f032:	b29b      	uxth	r3, r3
 800f034:	e004      	b.n	800f040 <HAL_UART_IRQHandler+0x3d0>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	b29b      	uxth	r3, r3
 800f040:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f044:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f048:	2b00      	cmp	r3, #0
 800f04a:	f000 81a4 	beq.w	800f396 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f054:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f058:	429a      	cmp	r2, r3
 800f05a:	f080 819c 	bcs.w	800f396 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f064:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f06c:	69db      	ldr	r3, [r3, #28]
 800f06e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f072:	f000 8086 	beq.w	800f182 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f07e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f082:	e853 3f00 	ldrex	r3, [r3]
 800f086:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f08a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f08e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f092:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	461a      	mov	r2, r3
 800f09c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f0a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f0a4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f0ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f0b0:	e841 2300 	strex	r3, r2, [r1]
 800f0b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f0b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d1da      	bne.n	800f076 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	3308      	adds	r3, #8
 800f0c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f0ca:	e853 3f00 	ldrex	r3, [r3]
 800f0ce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f0d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f0d2:	f023 0301 	bic.w	r3, r3, #1
 800f0d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	3308      	adds	r3, #8
 800f0e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f0e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f0e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0ea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f0ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f0f0:	e841 2300 	strex	r3, r2, [r1]
 800f0f4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f0f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d1e1      	bne.n	800f0c0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	3308      	adds	r3, #8
 800f102:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f104:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f106:	e853 3f00 	ldrex	r3, [r3]
 800f10a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f10c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f10e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f112:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	3308      	adds	r3, #8
 800f11c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f120:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f122:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f124:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f126:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f128:	e841 2300 	strex	r3, r2, [r1]
 800f12c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f12e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f130:	2b00      	cmp	r3, #0
 800f132:	d1e3      	bne.n	800f0fc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2220      	movs	r2, #32
 800f138:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2200      	movs	r2, #0
 800f140:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f14a:	e853 3f00 	ldrex	r3, [r3]
 800f14e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f152:	f023 0310 	bic.w	r3, r3, #16
 800f156:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	461a      	mov	r2, r3
 800f160:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f164:	65bb      	str	r3, [r7, #88]	; 0x58
 800f166:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f168:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f16a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f16c:	e841 2300 	strex	r3, r2, [r1]
 800f170:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f174:	2b00      	cmp	r3, #0
 800f176:	d1e4      	bne.n	800f142 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f17c:	4618      	mov	r0, r3
 800f17e:	f7f8 fe7d 	bl	8007e7c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f18e:	b29b      	uxth	r3, r3
 800f190:	1ad3      	subs	r3, r2, r3
 800f192:	b29b      	uxth	r3, r3
 800f194:	4619      	mov	r1, r3
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f7f4 f80e 	bl	80031b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f19c:	e0fb      	b.n	800f396 <HAL_UART_IRQHandler+0x726>
 800f19e:	bf00      	nop
 800f1a0:	40020010 	.word	0x40020010
 800f1a4:	40020028 	.word	0x40020028
 800f1a8:	40020040 	.word	0x40020040
 800f1ac:	40020058 	.word	0x40020058
 800f1b0:	40020070 	.word	0x40020070
 800f1b4:	40020088 	.word	0x40020088
 800f1b8:	400200a0 	.word	0x400200a0
 800f1bc:	400200b8 	.word	0x400200b8
 800f1c0:	40020410 	.word	0x40020410
 800f1c4:	40020428 	.word	0x40020428
 800f1c8:	40020440 	.word	0x40020440
 800f1cc:	40020458 	.word	0x40020458
 800f1d0:	40020470 	.word	0x40020470
 800f1d4:	40020488 	.word	0x40020488
 800f1d8:	400204a0 	.word	0x400204a0
 800f1dc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f1ec:	b29b      	uxth	r3, r3
 800f1ee:	1ad3      	subs	r3, r2, r3
 800f1f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f1fa:	b29b      	uxth	r3, r3
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	f000 80cc 	beq.w	800f39a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800f202:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f206:	2b00      	cmp	r3, #0
 800f208:	f000 80c7 	beq.w	800f39a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f214:	e853 3f00 	ldrex	r3, [r3]
 800f218:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f21a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f21c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f220:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	461a      	mov	r2, r3
 800f22a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f22e:	647b      	str	r3, [r7, #68]	; 0x44
 800f230:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f232:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f234:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f236:	e841 2300 	strex	r3, r2, [r1]
 800f23a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f23c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d1e4      	bne.n	800f20c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	3308      	adds	r3, #8
 800f248:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f24c:	e853 3f00 	ldrex	r3, [r3]
 800f250:	623b      	str	r3, [r7, #32]
   return(result);
 800f252:	6a3a      	ldr	r2, [r7, #32]
 800f254:	4b54      	ldr	r3, [pc, #336]	; (800f3a8 <HAL_UART_IRQHandler+0x738>)
 800f256:	4013      	ands	r3, r2
 800f258:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	3308      	adds	r3, #8
 800f262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f266:	633a      	str	r2, [r7, #48]	; 0x30
 800f268:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f26a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f26c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f26e:	e841 2300 	strex	r3, r2, [r1]
 800f272:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f276:	2b00      	cmp	r3, #0
 800f278:	d1e3      	bne.n	800f242 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2220      	movs	r2, #32
 800f27e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2200      	movs	r2, #0
 800f286:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2200      	movs	r2, #0
 800f28c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	e853 3f00 	ldrex	r3, [r3]
 800f29a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f023 0310 	bic.w	r3, r3, #16
 800f2a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	461a      	mov	r2, r3
 800f2ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f2b0:	61fb      	str	r3, [r7, #28]
 800f2b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2b4:	69b9      	ldr	r1, [r7, #24]
 800f2b6:	69fa      	ldr	r2, [r7, #28]
 800f2b8:	e841 2300 	strex	r3, r2, [r1]
 800f2bc:	617b      	str	r3, [r7, #20]
   return(result);
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d1e4      	bne.n	800f28e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f2c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f2c8:	4619      	mov	r1, r3
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f7f3 ff74 	bl	80031b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f2d0:	e063      	b.n	800f39a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f2d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d00e      	beq.n	800f2fc <HAL_UART_IRQHandler+0x68c>
 800f2de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f2e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d008      	beq.n	800f2fc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f2f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f001 fa78 	bl	80107ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f2fa:	e051      	b.n	800f3a0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f2fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f304:	2b00      	cmp	r3, #0
 800f306:	d014      	beq.n	800f332 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f30c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f310:	2b00      	cmp	r3, #0
 800f312:	d105      	bne.n	800f320 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f318:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d008      	beq.n	800f332 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f324:	2b00      	cmp	r3, #0
 800f326:	d03a      	beq.n	800f39e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	4798      	blx	r3
    }
    return;
 800f330:	e035      	b.n	800f39e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d009      	beq.n	800f352 <HAL_UART_IRQHandler+0x6e2>
 800f33e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f346:	2b00      	cmp	r3, #0
 800f348:	d003      	beq.n	800f352 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f001 fa22 	bl	8010794 <UART_EndTransmit_IT>
    return;
 800f350:	e026      	b.n	800f3a0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f356:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d009      	beq.n	800f372 <HAL_UART_IRQHandler+0x702>
 800f35e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f362:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f366:	2b00      	cmp	r3, #0
 800f368:	d003      	beq.n	800f372 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f001 fa51 	bl	8010812 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f370:	e016      	b.n	800f3a0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f376:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d010      	beq.n	800f3a0 <HAL_UART_IRQHandler+0x730>
 800f37e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f382:	2b00      	cmp	r3, #0
 800f384:	da0c      	bge.n	800f3a0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f001 fa39 	bl	80107fe <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f38c:	e008      	b.n	800f3a0 <HAL_UART_IRQHandler+0x730>
      return;
 800f38e:	bf00      	nop
 800f390:	e006      	b.n	800f3a0 <HAL_UART_IRQHandler+0x730>
    return;
 800f392:	bf00      	nop
 800f394:	e004      	b.n	800f3a0 <HAL_UART_IRQHandler+0x730>
      return;
 800f396:	bf00      	nop
 800f398:	e002      	b.n	800f3a0 <HAL_UART_IRQHandler+0x730>
      return;
 800f39a:	bf00      	nop
 800f39c:	e000      	b.n	800f3a0 <HAL_UART_IRQHandler+0x730>
    return;
 800f39e:	bf00      	nop
  }
}
 800f3a0:	37e8      	adds	r7, #232	; 0xe8
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}
 800f3a6:	bf00      	nop
 800f3a8:	effffffe 	.word	0xeffffffe

0800f3ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f3b4:	bf00      	nop
 800f3b6:	370c      	adds	r7, #12
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3be:	4770      	bx	lr

0800f3c0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f3c0:	b480      	push	{r7}
 800f3c2:	b083      	sub	sp, #12
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800f3c8:	bf00      	nop
 800f3ca:	370c      	adds	r7, #12
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d2:	4770      	bx	lr

0800f3d4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f3d4:	b480      	push	{r7}
 800f3d6:	b083      	sub	sp, #12
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f3dc:	bf00      	nop
 800f3de:	370c      	adds	r7, #12
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e6:	4770      	bx	lr

0800f3e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b083      	sub	sp, #12
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f3f0:	bf00      	nop
 800f3f2:	370c      	adds	r7, #12
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fa:	4770      	bx	lr

0800f3fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b083      	sub	sp, #12
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f404:	bf00      	nop
 800f406:	370c      	adds	r7, #12
 800f408:	46bd      	mov	sp, r7
 800f40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40e:	4770      	bx	lr

0800f410 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f410:	b5b0      	push	{r4, r5, r7, lr}
 800f412:	b08e      	sub	sp, #56	; 0x38
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f418:	2300      	movs	r3, #0
 800f41a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	689a      	ldr	r2, [r3, #8]
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	691b      	ldr	r3, [r3, #16]
 800f426:	431a      	orrs	r2, r3
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	695b      	ldr	r3, [r3, #20]
 800f42c:	431a      	orrs	r2, r3
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	69db      	ldr	r3, [r3, #28]
 800f432:	4313      	orrs	r3, r2
 800f434:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	681a      	ldr	r2, [r3, #0]
 800f43c:	4bbf      	ldr	r3, [pc, #764]	; (800f73c <UART_SetConfig+0x32c>)
 800f43e:	4013      	ands	r3, r2
 800f440:	687a      	ldr	r2, [r7, #4]
 800f442:	6812      	ldr	r2, [r2, #0]
 800f444:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f446:	430b      	orrs	r3, r1
 800f448:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	68da      	ldr	r2, [r3, #12]
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	430a      	orrs	r2, r1
 800f45e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	699b      	ldr	r3, [r3, #24]
 800f464:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	4ab5      	ldr	r2, [pc, #724]	; (800f740 <UART_SetConfig+0x330>)
 800f46c:	4293      	cmp	r3, r2
 800f46e:	d004      	beq.n	800f47a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	6a1b      	ldr	r3, [r3, #32]
 800f474:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f476:	4313      	orrs	r3, r2
 800f478:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	689a      	ldr	r2, [r3, #8]
 800f480:	4bb0      	ldr	r3, [pc, #704]	; (800f744 <UART_SetConfig+0x334>)
 800f482:	4013      	ands	r3, r2
 800f484:	687a      	ldr	r2, [r7, #4]
 800f486:	6812      	ldr	r2, [r2, #0]
 800f488:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f48a:	430b      	orrs	r3, r1
 800f48c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f494:	f023 010f 	bic.w	r1, r3, #15
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	430a      	orrs	r2, r1
 800f4a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	4aa7      	ldr	r2, [pc, #668]	; (800f748 <UART_SetConfig+0x338>)
 800f4aa:	4293      	cmp	r3, r2
 800f4ac:	d176      	bne.n	800f59c <UART_SetConfig+0x18c>
 800f4ae:	4ba7      	ldr	r3, [pc, #668]	; (800f74c <UART_SetConfig+0x33c>)
 800f4b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f4b6:	2b28      	cmp	r3, #40	; 0x28
 800f4b8:	d86c      	bhi.n	800f594 <UART_SetConfig+0x184>
 800f4ba:	a201      	add	r2, pc, #4	; (adr r2, 800f4c0 <UART_SetConfig+0xb0>)
 800f4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4c0:	0800f565 	.word	0x0800f565
 800f4c4:	0800f595 	.word	0x0800f595
 800f4c8:	0800f595 	.word	0x0800f595
 800f4cc:	0800f595 	.word	0x0800f595
 800f4d0:	0800f595 	.word	0x0800f595
 800f4d4:	0800f595 	.word	0x0800f595
 800f4d8:	0800f595 	.word	0x0800f595
 800f4dc:	0800f595 	.word	0x0800f595
 800f4e0:	0800f56d 	.word	0x0800f56d
 800f4e4:	0800f595 	.word	0x0800f595
 800f4e8:	0800f595 	.word	0x0800f595
 800f4ec:	0800f595 	.word	0x0800f595
 800f4f0:	0800f595 	.word	0x0800f595
 800f4f4:	0800f595 	.word	0x0800f595
 800f4f8:	0800f595 	.word	0x0800f595
 800f4fc:	0800f595 	.word	0x0800f595
 800f500:	0800f575 	.word	0x0800f575
 800f504:	0800f595 	.word	0x0800f595
 800f508:	0800f595 	.word	0x0800f595
 800f50c:	0800f595 	.word	0x0800f595
 800f510:	0800f595 	.word	0x0800f595
 800f514:	0800f595 	.word	0x0800f595
 800f518:	0800f595 	.word	0x0800f595
 800f51c:	0800f595 	.word	0x0800f595
 800f520:	0800f57d 	.word	0x0800f57d
 800f524:	0800f595 	.word	0x0800f595
 800f528:	0800f595 	.word	0x0800f595
 800f52c:	0800f595 	.word	0x0800f595
 800f530:	0800f595 	.word	0x0800f595
 800f534:	0800f595 	.word	0x0800f595
 800f538:	0800f595 	.word	0x0800f595
 800f53c:	0800f595 	.word	0x0800f595
 800f540:	0800f585 	.word	0x0800f585
 800f544:	0800f595 	.word	0x0800f595
 800f548:	0800f595 	.word	0x0800f595
 800f54c:	0800f595 	.word	0x0800f595
 800f550:	0800f595 	.word	0x0800f595
 800f554:	0800f595 	.word	0x0800f595
 800f558:	0800f595 	.word	0x0800f595
 800f55c:	0800f595 	.word	0x0800f595
 800f560:	0800f58d 	.word	0x0800f58d
 800f564:	2301      	movs	r3, #1
 800f566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f56a:	e222      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f56c:	2304      	movs	r3, #4
 800f56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f572:	e21e      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f574:	2308      	movs	r3, #8
 800f576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f57a:	e21a      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f57c:	2310      	movs	r3, #16
 800f57e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f582:	e216      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f584:	2320      	movs	r3, #32
 800f586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f58a:	e212      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f58c:	2340      	movs	r3, #64	; 0x40
 800f58e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f592:	e20e      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f594:	2380      	movs	r3, #128	; 0x80
 800f596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f59a:	e20a      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	4a6b      	ldr	r2, [pc, #428]	; (800f750 <UART_SetConfig+0x340>)
 800f5a2:	4293      	cmp	r3, r2
 800f5a4:	d130      	bne.n	800f608 <UART_SetConfig+0x1f8>
 800f5a6:	4b69      	ldr	r3, [pc, #420]	; (800f74c <UART_SetConfig+0x33c>)
 800f5a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5aa:	f003 0307 	and.w	r3, r3, #7
 800f5ae:	2b05      	cmp	r3, #5
 800f5b0:	d826      	bhi.n	800f600 <UART_SetConfig+0x1f0>
 800f5b2:	a201      	add	r2, pc, #4	; (adr r2, 800f5b8 <UART_SetConfig+0x1a8>)
 800f5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5b8:	0800f5d1 	.word	0x0800f5d1
 800f5bc:	0800f5d9 	.word	0x0800f5d9
 800f5c0:	0800f5e1 	.word	0x0800f5e1
 800f5c4:	0800f5e9 	.word	0x0800f5e9
 800f5c8:	0800f5f1 	.word	0x0800f5f1
 800f5cc:	0800f5f9 	.word	0x0800f5f9
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f5d6:	e1ec      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f5d8:	2304      	movs	r3, #4
 800f5da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f5de:	e1e8      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f5e0:	2308      	movs	r3, #8
 800f5e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f5e6:	e1e4      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f5e8:	2310      	movs	r3, #16
 800f5ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f5ee:	e1e0      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f5f0:	2320      	movs	r3, #32
 800f5f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f5f6:	e1dc      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f5f8:	2340      	movs	r3, #64	; 0x40
 800f5fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f5fe:	e1d8      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f600:	2380      	movs	r3, #128	; 0x80
 800f602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f606:	e1d4      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	4a51      	ldr	r2, [pc, #324]	; (800f754 <UART_SetConfig+0x344>)
 800f60e:	4293      	cmp	r3, r2
 800f610:	d130      	bne.n	800f674 <UART_SetConfig+0x264>
 800f612:	4b4e      	ldr	r3, [pc, #312]	; (800f74c <UART_SetConfig+0x33c>)
 800f614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f616:	f003 0307 	and.w	r3, r3, #7
 800f61a:	2b05      	cmp	r3, #5
 800f61c:	d826      	bhi.n	800f66c <UART_SetConfig+0x25c>
 800f61e:	a201      	add	r2, pc, #4	; (adr r2, 800f624 <UART_SetConfig+0x214>)
 800f620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f624:	0800f63d 	.word	0x0800f63d
 800f628:	0800f645 	.word	0x0800f645
 800f62c:	0800f64d 	.word	0x0800f64d
 800f630:	0800f655 	.word	0x0800f655
 800f634:	0800f65d 	.word	0x0800f65d
 800f638:	0800f665 	.word	0x0800f665
 800f63c:	2300      	movs	r3, #0
 800f63e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f642:	e1b6      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f644:	2304      	movs	r3, #4
 800f646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f64a:	e1b2      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f64c:	2308      	movs	r3, #8
 800f64e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f652:	e1ae      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f654:	2310      	movs	r3, #16
 800f656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f65a:	e1aa      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f65c:	2320      	movs	r3, #32
 800f65e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f662:	e1a6      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f664:	2340      	movs	r3, #64	; 0x40
 800f666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f66a:	e1a2      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f66c:	2380      	movs	r3, #128	; 0x80
 800f66e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f672:	e19e      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	4a37      	ldr	r2, [pc, #220]	; (800f758 <UART_SetConfig+0x348>)
 800f67a:	4293      	cmp	r3, r2
 800f67c:	d130      	bne.n	800f6e0 <UART_SetConfig+0x2d0>
 800f67e:	4b33      	ldr	r3, [pc, #204]	; (800f74c <UART_SetConfig+0x33c>)
 800f680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f682:	f003 0307 	and.w	r3, r3, #7
 800f686:	2b05      	cmp	r3, #5
 800f688:	d826      	bhi.n	800f6d8 <UART_SetConfig+0x2c8>
 800f68a:	a201      	add	r2, pc, #4	; (adr r2, 800f690 <UART_SetConfig+0x280>)
 800f68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f690:	0800f6a9 	.word	0x0800f6a9
 800f694:	0800f6b1 	.word	0x0800f6b1
 800f698:	0800f6b9 	.word	0x0800f6b9
 800f69c:	0800f6c1 	.word	0x0800f6c1
 800f6a0:	0800f6c9 	.word	0x0800f6c9
 800f6a4:	0800f6d1 	.word	0x0800f6d1
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f6ae:	e180      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f6b0:	2304      	movs	r3, #4
 800f6b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f6b6:	e17c      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f6b8:	2308      	movs	r3, #8
 800f6ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f6be:	e178      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f6c0:	2310      	movs	r3, #16
 800f6c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f6c6:	e174      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f6c8:	2320      	movs	r3, #32
 800f6ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f6ce:	e170      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f6d0:	2340      	movs	r3, #64	; 0x40
 800f6d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f6d6:	e16c      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f6d8:	2380      	movs	r3, #128	; 0x80
 800f6da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f6de:	e168      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	4a1d      	ldr	r2, [pc, #116]	; (800f75c <UART_SetConfig+0x34c>)
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	d142      	bne.n	800f770 <UART_SetConfig+0x360>
 800f6ea:	4b18      	ldr	r3, [pc, #96]	; (800f74c <UART_SetConfig+0x33c>)
 800f6ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6ee:	f003 0307 	and.w	r3, r3, #7
 800f6f2:	2b05      	cmp	r3, #5
 800f6f4:	d838      	bhi.n	800f768 <UART_SetConfig+0x358>
 800f6f6:	a201      	add	r2, pc, #4	; (adr r2, 800f6fc <UART_SetConfig+0x2ec>)
 800f6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6fc:	0800f715 	.word	0x0800f715
 800f700:	0800f71d 	.word	0x0800f71d
 800f704:	0800f725 	.word	0x0800f725
 800f708:	0800f72d 	.word	0x0800f72d
 800f70c:	0800f735 	.word	0x0800f735
 800f710:	0800f761 	.word	0x0800f761
 800f714:	2300      	movs	r3, #0
 800f716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f71a:	e14a      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f71c:	2304      	movs	r3, #4
 800f71e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f722:	e146      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f724:	2308      	movs	r3, #8
 800f726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f72a:	e142      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f72c:	2310      	movs	r3, #16
 800f72e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f732:	e13e      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f734:	2320      	movs	r3, #32
 800f736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f73a:	e13a      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f73c:	cfff69f3 	.word	0xcfff69f3
 800f740:	58000c00 	.word	0x58000c00
 800f744:	11fff4ff 	.word	0x11fff4ff
 800f748:	40011000 	.word	0x40011000
 800f74c:	58024400 	.word	0x58024400
 800f750:	40004400 	.word	0x40004400
 800f754:	40004800 	.word	0x40004800
 800f758:	40004c00 	.word	0x40004c00
 800f75c:	40005000 	.word	0x40005000
 800f760:	2340      	movs	r3, #64	; 0x40
 800f762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f766:	e124      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f768:	2380      	movs	r3, #128	; 0x80
 800f76a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f76e:	e120      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	4acc      	ldr	r2, [pc, #816]	; (800faa8 <UART_SetConfig+0x698>)
 800f776:	4293      	cmp	r3, r2
 800f778:	d176      	bne.n	800f868 <UART_SetConfig+0x458>
 800f77a:	4bcc      	ldr	r3, [pc, #816]	; (800faac <UART_SetConfig+0x69c>)
 800f77c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f77e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f782:	2b28      	cmp	r3, #40	; 0x28
 800f784:	d86c      	bhi.n	800f860 <UART_SetConfig+0x450>
 800f786:	a201      	add	r2, pc, #4	; (adr r2, 800f78c <UART_SetConfig+0x37c>)
 800f788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f78c:	0800f831 	.word	0x0800f831
 800f790:	0800f861 	.word	0x0800f861
 800f794:	0800f861 	.word	0x0800f861
 800f798:	0800f861 	.word	0x0800f861
 800f79c:	0800f861 	.word	0x0800f861
 800f7a0:	0800f861 	.word	0x0800f861
 800f7a4:	0800f861 	.word	0x0800f861
 800f7a8:	0800f861 	.word	0x0800f861
 800f7ac:	0800f839 	.word	0x0800f839
 800f7b0:	0800f861 	.word	0x0800f861
 800f7b4:	0800f861 	.word	0x0800f861
 800f7b8:	0800f861 	.word	0x0800f861
 800f7bc:	0800f861 	.word	0x0800f861
 800f7c0:	0800f861 	.word	0x0800f861
 800f7c4:	0800f861 	.word	0x0800f861
 800f7c8:	0800f861 	.word	0x0800f861
 800f7cc:	0800f841 	.word	0x0800f841
 800f7d0:	0800f861 	.word	0x0800f861
 800f7d4:	0800f861 	.word	0x0800f861
 800f7d8:	0800f861 	.word	0x0800f861
 800f7dc:	0800f861 	.word	0x0800f861
 800f7e0:	0800f861 	.word	0x0800f861
 800f7e4:	0800f861 	.word	0x0800f861
 800f7e8:	0800f861 	.word	0x0800f861
 800f7ec:	0800f849 	.word	0x0800f849
 800f7f0:	0800f861 	.word	0x0800f861
 800f7f4:	0800f861 	.word	0x0800f861
 800f7f8:	0800f861 	.word	0x0800f861
 800f7fc:	0800f861 	.word	0x0800f861
 800f800:	0800f861 	.word	0x0800f861
 800f804:	0800f861 	.word	0x0800f861
 800f808:	0800f861 	.word	0x0800f861
 800f80c:	0800f851 	.word	0x0800f851
 800f810:	0800f861 	.word	0x0800f861
 800f814:	0800f861 	.word	0x0800f861
 800f818:	0800f861 	.word	0x0800f861
 800f81c:	0800f861 	.word	0x0800f861
 800f820:	0800f861 	.word	0x0800f861
 800f824:	0800f861 	.word	0x0800f861
 800f828:	0800f861 	.word	0x0800f861
 800f82c:	0800f859 	.word	0x0800f859
 800f830:	2301      	movs	r3, #1
 800f832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f836:	e0bc      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f838:	2304      	movs	r3, #4
 800f83a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f83e:	e0b8      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f840:	2308      	movs	r3, #8
 800f842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f846:	e0b4      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f848:	2310      	movs	r3, #16
 800f84a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f84e:	e0b0      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f850:	2320      	movs	r3, #32
 800f852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f856:	e0ac      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f858:	2340      	movs	r3, #64	; 0x40
 800f85a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f85e:	e0a8      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f860:	2380      	movs	r3, #128	; 0x80
 800f862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f866:	e0a4      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	4a90      	ldr	r2, [pc, #576]	; (800fab0 <UART_SetConfig+0x6a0>)
 800f86e:	4293      	cmp	r3, r2
 800f870:	d130      	bne.n	800f8d4 <UART_SetConfig+0x4c4>
 800f872:	4b8e      	ldr	r3, [pc, #568]	; (800faac <UART_SetConfig+0x69c>)
 800f874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f876:	f003 0307 	and.w	r3, r3, #7
 800f87a:	2b05      	cmp	r3, #5
 800f87c:	d826      	bhi.n	800f8cc <UART_SetConfig+0x4bc>
 800f87e:	a201      	add	r2, pc, #4	; (adr r2, 800f884 <UART_SetConfig+0x474>)
 800f880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f884:	0800f89d 	.word	0x0800f89d
 800f888:	0800f8a5 	.word	0x0800f8a5
 800f88c:	0800f8ad 	.word	0x0800f8ad
 800f890:	0800f8b5 	.word	0x0800f8b5
 800f894:	0800f8bd 	.word	0x0800f8bd
 800f898:	0800f8c5 	.word	0x0800f8c5
 800f89c:	2300      	movs	r3, #0
 800f89e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8a2:	e086      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f8a4:	2304      	movs	r3, #4
 800f8a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8aa:	e082      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f8ac:	2308      	movs	r3, #8
 800f8ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8b2:	e07e      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f8b4:	2310      	movs	r3, #16
 800f8b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8ba:	e07a      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f8bc:	2320      	movs	r3, #32
 800f8be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8c2:	e076      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f8c4:	2340      	movs	r3, #64	; 0x40
 800f8c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8ca:	e072      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f8cc:	2380      	movs	r3, #128	; 0x80
 800f8ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8d2:	e06e      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	4a76      	ldr	r2, [pc, #472]	; (800fab4 <UART_SetConfig+0x6a4>)
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	d130      	bne.n	800f940 <UART_SetConfig+0x530>
 800f8de:	4b73      	ldr	r3, [pc, #460]	; (800faac <UART_SetConfig+0x69c>)
 800f8e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8e2:	f003 0307 	and.w	r3, r3, #7
 800f8e6:	2b05      	cmp	r3, #5
 800f8e8:	d826      	bhi.n	800f938 <UART_SetConfig+0x528>
 800f8ea:	a201      	add	r2, pc, #4	; (adr r2, 800f8f0 <UART_SetConfig+0x4e0>)
 800f8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8f0:	0800f909 	.word	0x0800f909
 800f8f4:	0800f911 	.word	0x0800f911
 800f8f8:	0800f919 	.word	0x0800f919
 800f8fc:	0800f921 	.word	0x0800f921
 800f900:	0800f929 	.word	0x0800f929
 800f904:	0800f931 	.word	0x0800f931
 800f908:	2300      	movs	r3, #0
 800f90a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f90e:	e050      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f910:	2304      	movs	r3, #4
 800f912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f916:	e04c      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f918:	2308      	movs	r3, #8
 800f91a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f91e:	e048      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f920:	2310      	movs	r3, #16
 800f922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f926:	e044      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f928:	2320      	movs	r3, #32
 800f92a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f92e:	e040      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f930:	2340      	movs	r3, #64	; 0x40
 800f932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f936:	e03c      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f938:	2380      	movs	r3, #128	; 0x80
 800f93a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f93e:	e038      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	4a5c      	ldr	r2, [pc, #368]	; (800fab8 <UART_SetConfig+0x6a8>)
 800f946:	4293      	cmp	r3, r2
 800f948:	d130      	bne.n	800f9ac <UART_SetConfig+0x59c>
 800f94a:	4b58      	ldr	r3, [pc, #352]	; (800faac <UART_SetConfig+0x69c>)
 800f94c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f94e:	f003 0307 	and.w	r3, r3, #7
 800f952:	2b05      	cmp	r3, #5
 800f954:	d826      	bhi.n	800f9a4 <UART_SetConfig+0x594>
 800f956:	a201      	add	r2, pc, #4	; (adr r2, 800f95c <UART_SetConfig+0x54c>)
 800f958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f95c:	0800f975 	.word	0x0800f975
 800f960:	0800f97d 	.word	0x0800f97d
 800f964:	0800f985 	.word	0x0800f985
 800f968:	0800f98d 	.word	0x0800f98d
 800f96c:	0800f995 	.word	0x0800f995
 800f970:	0800f99d 	.word	0x0800f99d
 800f974:	2302      	movs	r3, #2
 800f976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f97a:	e01a      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f97c:	2304      	movs	r3, #4
 800f97e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f982:	e016      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f984:	2308      	movs	r3, #8
 800f986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f98a:	e012      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f98c:	2310      	movs	r3, #16
 800f98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f992:	e00e      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f994:	2320      	movs	r3, #32
 800f996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f99a:	e00a      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f99c:	2340      	movs	r3, #64	; 0x40
 800f99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9a2:	e006      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f9a4:	2380      	movs	r3, #128	; 0x80
 800f9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9aa:	e002      	b.n	800f9b2 <UART_SetConfig+0x5a2>
 800f9ac:	2380      	movs	r3, #128	; 0x80
 800f9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	4a40      	ldr	r2, [pc, #256]	; (800fab8 <UART_SetConfig+0x6a8>)
 800f9b8:	4293      	cmp	r3, r2
 800f9ba:	f040 80ef 	bne.w	800fb9c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f9be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f9c2:	2b20      	cmp	r3, #32
 800f9c4:	dc46      	bgt.n	800fa54 <UART_SetConfig+0x644>
 800f9c6:	2b02      	cmp	r3, #2
 800f9c8:	f2c0 8081 	blt.w	800face <UART_SetConfig+0x6be>
 800f9cc:	3b02      	subs	r3, #2
 800f9ce:	2b1e      	cmp	r3, #30
 800f9d0:	d87d      	bhi.n	800face <UART_SetConfig+0x6be>
 800f9d2:	a201      	add	r2, pc, #4	; (adr r2, 800f9d8 <UART_SetConfig+0x5c8>)
 800f9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9d8:	0800fa5b 	.word	0x0800fa5b
 800f9dc:	0800facf 	.word	0x0800facf
 800f9e0:	0800fa63 	.word	0x0800fa63
 800f9e4:	0800facf 	.word	0x0800facf
 800f9e8:	0800facf 	.word	0x0800facf
 800f9ec:	0800facf 	.word	0x0800facf
 800f9f0:	0800fa73 	.word	0x0800fa73
 800f9f4:	0800facf 	.word	0x0800facf
 800f9f8:	0800facf 	.word	0x0800facf
 800f9fc:	0800facf 	.word	0x0800facf
 800fa00:	0800facf 	.word	0x0800facf
 800fa04:	0800facf 	.word	0x0800facf
 800fa08:	0800facf 	.word	0x0800facf
 800fa0c:	0800facf 	.word	0x0800facf
 800fa10:	0800fa83 	.word	0x0800fa83
 800fa14:	0800facf 	.word	0x0800facf
 800fa18:	0800facf 	.word	0x0800facf
 800fa1c:	0800facf 	.word	0x0800facf
 800fa20:	0800facf 	.word	0x0800facf
 800fa24:	0800facf 	.word	0x0800facf
 800fa28:	0800facf 	.word	0x0800facf
 800fa2c:	0800facf 	.word	0x0800facf
 800fa30:	0800facf 	.word	0x0800facf
 800fa34:	0800facf 	.word	0x0800facf
 800fa38:	0800facf 	.word	0x0800facf
 800fa3c:	0800facf 	.word	0x0800facf
 800fa40:	0800facf 	.word	0x0800facf
 800fa44:	0800facf 	.word	0x0800facf
 800fa48:	0800facf 	.word	0x0800facf
 800fa4c:	0800facf 	.word	0x0800facf
 800fa50:	0800fac1 	.word	0x0800fac1
 800fa54:	2b40      	cmp	r3, #64	; 0x40
 800fa56:	d036      	beq.n	800fac6 <UART_SetConfig+0x6b6>
 800fa58:	e039      	b.n	800face <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fa5a:	f7fc fb99 	bl	800c190 <HAL_RCCEx_GetD3PCLK1Freq>
 800fa5e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800fa60:	e03b      	b.n	800fada <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa62:	f107 0314 	add.w	r3, r7, #20
 800fa66:	4618      	mov	r0, r3
 800fa68:	f7fc fba8 	bl	800c1bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fa6c:	69bb      	ldr	r3, [r7, #24]
 800fa6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fa70:	e033      	b.n	800fada <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa72:	f107 0308 	add.w	r3, r7, #8
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7fc fcf4 	bl	800c464 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fa80:	e02b      	b.n	800fada <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fa82:	4b0a      	ldr	r3, [pc, #40]	; (800faac <UART_SetConfig+0x69c>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	f003 0320 	and.w	r3, r3, #32
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d009      	beq.n	800faa2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fa8e:	4b07      	ldr	r3, [pc, #28]	; (800faac <UART_SetConfig+0x69c>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	08db      	lsrs	r3, r3, #3
 800fa94:	f003 0303 	and.w	r3, r3, #3
 800fa98:	4a08      	ldr	r2, [pc, #32]	; (800fabc <UART_SetConfig+0x6ac>)
 800fa9a:	fa22 f303 	lsr.w	r3, r2, r3
 800fa9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800faa0:	e01b      	b.n	800fada <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800faa2:	4b06      	ldr	r3, [pc, #24]	; (800fabc <UART_SetConfig+0x6ac>)
 800faa4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800faa6:	e018      	b.n	800fada <UART_SetConfig+0x6ca>
 800faa8:	40011400 	.word	0x40011400
 800faac:	58024400 	.word	0x58024400
 800fab0:	40007800 	.word	0x40007800
 800fab4:	40007c00 	.word	0x40007c00
 800fab8:	58000c00 	.word	0x58000c00
 800fabc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fac0:	4bc4      	ldr	r3, [pc, #784]	; (800fdd4 <UART_SetConfig+0x9c4>)
 800fac2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fac4:	e009      	b.n	800fada <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800faca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800facc:	e005      	b.n	800fada <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800face:	2300      	movs	r3, #0
 800fad0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800fad2:	2301      	movs	r3, #1
 800fad4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800fad8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fadc:	2b00      	cmp	r3, #0
 800fade:	f000 81da 	beq.w	800fe96 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fae6:	4abc      	ldr	r2, [pc, #752]	; (800fdd8 <UART_SetConfig+0x9c8>)
 800fae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800faec:	461a      	mov	r2, r3
 800faee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf0:	fbb3 f3f2 	udiv	r3, r3, r2
 800faf4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	685a      	ldr	r2, [r3, #4]
 800fafa:	4613      	mov	r3, r2
 800fafc:	005b      	lsls	r3, r3, #1
 800fafe:	4413      	add	r3, r2
 800fb00:	6a3a      	ldr	r2, [r7, #32]
 800fb02:	429a      	cmp	r2, r3
 800fb04:	d305      	bcc.n	800fb12 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	685b      	ldr	r3, [r3, #4]
 800fb0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fb0c:	6a3a      	ldr	r2, [r7, #32]
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	d903      	bls.n	800fb1a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800fb12:	2301      	movs	r3, #1
 800fb14:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800fb18:	e1bd      	b.n	800fe96 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f04f 0100 	mov.w	r1, #0
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb26:	4aac      	ldr	r2, [pc, #688]	; (800fdd8 <UART_SetConfig+0x9c8>)
 800fb28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb2c:	b29a      	uxth	r2, r3
 800fb2e:	f04f 0300 	mov.w	r3, #0
 800fb32:	f7f0 fc2d 	bl	8000390 <__aeabi_uldivmod>
 800fb36:	4602      	mov	r2, r0
 800fb38:	460b      	mov	r3, r1
 800fb3a:	4610      	mov	r0, r2
 800fb3c:	4619      	mov	r1, r3
 800fb3e:	f04f 0200 	mov.w	r2, #0
 800fb42:	f04f 0300 	mov.w	r3, #0
 800fb46:	020b      	lsls	r3, r1, #8
 800fb48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fb4c:	0202      	lsls	r2, r0, #8
 800fb4e:	6879      	ldr	r1, [r7, #4]
 800fb50:	6849      	ldr	r1, [r1, #4]
 800fb52:	0849      	lsrs	r1, r1, #1
 800fb54:	4608      	mov	r0, r1
 800fb56:	f04f 0100 	mov.w	r1, #0
 800fb5a:	1814      	adds	r4, r2, r0
 800fb5c:	eb43 0501 	adc.w	r5, r3, r1
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	685b      	ldr	r3, [r3, #4]
 800fb64:	461a      	mov	r2, r3
 800fb66:	f04f 0300 	mov.w	r3, #0
 800fb6a:	4620      	mov	r0, r4
 800fb6c:	4629      	mov	r1, r5
 800fb6e:	f7f0 fc0f 	bl	8000390 <__aeabi_uldivmod>
 800fb72:	4602      	mov	r2, r0
 800fb74:	460b      	mov	r3, r1
 800fb76:	4613      	mov	r3, r2
 800fb78:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fb80:	d308      	bcc.n	800fb94 <UART_SetConfig+0x784>
 800fb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb88:	d204      	bcs.n	800fb94 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb90:	60da      	str	r2, [r3, #12]
 800fb92:	e180      	b.n	800fe96 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800fb94:	2301      	movs	r3, #1
 800fb96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800fb9a:	e17c      	b.n	800fe96 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	69db      	ldr	r3, [r3, #28]
 800fba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fba4:	f040 80be 	bne.w	800fd24 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800fba8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fbac:	2b20      	cmp	r3, #32
 800fbae:	dc49      	bgt.n	800fc44 <UART_SetConfig+0x834>
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	db7c      	blt.n	800fcae <UART_SetConfig+0x89e>
 800fbb4:	2b20      	cmp	r3, #32
 800fbb6:	d87a      	bhi.n	800fcae <UART_SetConfig+0x89e>
 800fbb8:	a201      	add	r2, pc, #4	; (adr r2, 800fbc0 <UART_SetConfig+0x7b0>)
 800fbba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbbe:	bf00      	nop
 800fbc0:	0800fc4b 	.word	0x0800fc4b
 800fbc4:	0800fc53 	.word	0x0800fc53
 800fbc8:	0800fcaf 	.word	0x0800fcaf
 800fbcc:	0800fcaf 	.word	0x0800fcaf
 800fbd0:	0800fc5b 	.word	0x0800fc5b
 800fbd4:	0800fcaf 	.word	0x0800fcaf
 800fbd8:	0800fcaf 	.word	0x0800fcaf
 800fbdc:	0800fcaf 	.word	0x0800fcaf
 800fbe0:	0800fc6b 	.word	0x0800fc6b
 800fbe4:	0800fcaf 	.word	0x0800fcaf
 800fbe8:	0800fcaf 	.word	0x0800fcaf
 800fbec:	0800fcaf 	.word	0x0800fcaf
 800fbf0:	0800fcaf 	.word	0x0800fcaf
 800fbf4:	0800fcaf 	.word	0x0800fcaf
 800fbf8:	0800fcaf 	.word	0x0800fcaf
 800fbfc:	0800fcaf 	.word	0x0800fcaf
 800fc00:	0800fc7b 	.word	0x0800fc7b
 800fc04:	0800fcaf 	.word	0x0800fcaf
 800fc08:	0800fcaf 	.word	0x0800fcaf
 800fc0c:	0800fcaf 	.word	0x0800fcaf
 800fc10:	0800fcaf 	.word	0x0800fcaf
 800fc14:	0800fcaf 	.word	0x0800fcaf
 800fc18:	0800fcaf 	.word	0x0800fcaf
 800fc1c:	0800fcaf 	.word	0x0800fcaf
 800fc20:	0800fcaf 	.word	0x0800fcaf
 800fc24:	0800fcaf 	.word	0x0800fcaf
 800fc28:	0800fcaf 	.word	0x0800fcaf
 800fc2c:	0800fcaf 	.word	0x0800fcaf
 800fc30:	0800fcaf 	.word	0x0800fcaf
 800fc34:	0800fcaf 	.word	0x0800fcaf
 800fc38:	0800fcaf 	.word	0x0800fcaf
 800fc3c:	0800fcaf 	.word	0x0800fcaf
 800fc40:	0800fca1 	.word	0x0800fca1
 800fc44:	2b40      	cmp	r3, #64	; 0x40
 800fc46:	d02e      	beq.n	800fca6 <UART_SetConfig+0x896>
 800fc48:	e031      	b.n	800fcae <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fc4a:	f7fb fb35 	bl	800b2b8 <HAL_RCC_GetPCLK1Freq>
 800fc4e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800fc50:	e033      	b.n	800fcba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fc52:	f7fb fb47 	bl	800b2e4 <HAL_RCC_GetPCLK2Freq>
 800fc56:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800fc58:	e02f      	b.n	800fcba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc5a:	f107 0314 	add.w	r3, r7, #20
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7fc faac 	bl	800c1bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fc64:	69bb      	ldr	r3, [r7, #24]
 800fc66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fc68:	e027      	b.n	800fcba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc6a:	f107 0308 	add.w	r3, r7, #8
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7fc fbf8 	bl	800c464 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fc78:	e01f      	b.n	800fcba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fc7a:	4b58      	ldr	r3, [pc, #352]	; (800fddc <UART_SetConfig+0x9cc>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	f003 0320 	and.w	r3, r3, #32
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d009      	beq.n	800fc9a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fc86:	4b55      	ldr	r3, [pc, #340]	; (800fddc <UART_SetConfig+0x9cc>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	08db      	lsrs	r3, r3, #3
 800fc8c:	f003 0303 	and.w	r3, r3, #3
 800fc90:	4a53      	ldr	r2, [pc, #332]	; (800fde0 <UART_SetConfig+0x9d0>)
 800fc92:	fa22 f303 	lsr.w	r3, r2, r3
 800fc96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fc98:	e00f      	b.n	800fcba <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800fc9a:	4b51      	ldr	r3, [pc, #324]	; (800fde0 <UART_SetConfig+0x9d0>)
 800fc9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fc9e:	e00c      	b.n	800fcba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fca0:	4b4c      	ldr	r3, [pc, #304]	; (800fdd4 <UART_SetConfig+0x9c4>)
 800fca2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fca4:	e009      	b.n	800fcba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fcaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fcac:	e005      	b.n	800fcba <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800fcb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	f000 80ea 	beq.w	800fe96 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcc6:	4a44      	ldr	r2, [pc, #272]	; (800fdd8 <UART_SetConfig+0x9c8>)
 800fcc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fccc:	461a      	mov	r2, r3
 800fcce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd0:	fbb3 f3f2 	udiv	r3, r3, r2
 800fcd4:	005a      	lsls	r2, r3, #1
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	685b      	ldr	r3, [r3, #4]
 800fcda:	085b      	lsrs	r3, r3, #1
 800fcdc:	441a      	add	r2, r3
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	685b      	ldr	r3, [r3, #4]
 800fce2:	fbb2 f3f3 	udiv	r3, r2, r3
 800fce6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcea:	2b0f      	cmp	r3, #15
 800fcec:	d916      	bls.n	800fd1c <UART_SetConfig+0x90c>
 800fcee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fcf4:	d212      	bcs.n	800fd1c <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcf8:	b29b      	uxth	r3, r3
 800fcfa:	f023 030f 	bic.w	r3, r3, #15
 800fcfe:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd02:	085b      	lsrs	r3, r3, #1
 800fd04:	b29b      	uxth	r3, r3
 800fd06:	f003 0307 	and.w	r3, r3, #7
 800fd0a:	b29a      	uxth	r2, r3
 800fd0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd0e:	4313      	orrs	r3, r2
 800fd10:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fd18:	60da      	str	r2, [r3, #12]
 800fd1a:	e0bc      	b.n	800fe96 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800fd1c:	2301      	movs	r3, #1
 800fd1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800fd22:	e0b8      	b.n	800fe96 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fd24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fd28:	2b20      	cmp	r3, #32
 800fd2a:	dc4b      	bgt.n	800fdc4 <UART_SetConfig+0x9b4>
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	f2c0 8087 	blt.w	800fe40 <UART_SetConfig+0xa30>
 800fd32:	2b20      	cmp	r3, #32
 800fd34:	f200 8084 	bhi.w	800fe40 <UART_SetConfig+0xa30>
 800fd38:	a201      	add	r2, pc, #4	; (adr r2, 800fd40 <UART_SetConfig+0x930>)
 800fd3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd3e:	bf00      	nop
 800fd40:	0800fdcb 	.word	0x0800fdcb
 800fd44:	0800fde5 	.word	0x0800fde5
 800fd48:	0800fe41 	.word	0x0800fe41
 800fd4c:	0800fe41 	.word	0x0800fe41
 800fd50:	0800fded 	.word	0x0800fded
 800fd54:	0800fe41 	.word	0x0800fe41
 800fd58:	0800fe41 	.word	0x0800fe41
 800fd5c:	0800fe41 	.word	0x0800fe41
 800fd60:	0800fdfd 	.word	0x0800fdfd
 800fd64:	0800fe41 	.word	0x0800fe41
 800fd68:	0800fe41 	.word	0x0800fe41
 800fd6c:	0800fe41 	.word	0x0800fe41
 800fd70:	0800fe41 	.word	0x0800fe41
 800fd74:	0800fe41 	.word	0x0800fe41
 800fd78:	0800fe41 	.word	0x0800fe41
 800fd7c:	0800fe41 	.word	0x0800fe41
 800fd80:	0800fe0d 	.word	0x0800fe0d
 800fd84:	0800fe41 	.word	0x0800fe41
 800fd88:	0800fe41 	.word	0x0800fe41
 800fd8c:	0800fe41 	.word	0x0800fe41
 800fd90:	0800fe41 	.word	0x0800fe41
 800fd94:	0800fe41 	.word	0x0800fe41
 800fd98:	0800fe41 	.word	0x0800fe41
 800fd9c:	0800fe41 	.word	0x0800fe41
 800fda0:	0800fe41 	.word	0x0800fe41
 800fda4:	0800fe41 	.word	0x0800fe41
 800fda8:	0800fe41 	.word	0x0800fe41
 800fdac:	0800fe41 	.word	0x0800fe41
 800fdb0:	0800fe41 	.word	0x0800fe41
 800fdb4:	0800fe41 	.word	0x0800fe41
 800fdb8:	0800fe41 	.word	0x0800fe41
 800fdbc:	0800fe41 	.word	0x0800fe41
 800fdc0:	0800fe33 	.word	0x0800fe33
 800fdc4:	2b40      	cmp	r3, #64	; 0x40
 800fdc6:	d037      	beq.n	800fe38 <UART_SetConfig+0xa28>
 800fdc8:	e03a      	b.n	800fe40 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fdca:	f7fb fa75 	bl	800b2b8 <HAL_RCC_GetPCLK1Freq>
 800fdce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800fdd0:	e03c      	b.n	800fe4c <UART_SetConfig+0xa3c>
 800fdd2:	bf00      	nop
 800fdd4:	003d0900 	.word	0x003d0900
 800fdd8:	08014c1c 	.word	0x08014c1c
 800fddc:	58024400 	.word	0x58024400
 800fde0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fde4:	f7fb fa7e 	bl	800b2e4 <HAL_RCC_GetPCLK2Freq>
 800fde8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800fdea:	e02f      	b.n	800fe4c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fdec:	f107 0314 	add.w	r3, r7, #20
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7fc f9e3 	bl	800c1bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fdf6:	69bb      	ldr	r3, [r7, #24]
 800fdf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fdfa:	e027      	b.n	800fe4c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fdfc:	f107 0308 	add.w	r3, r7, #8
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7fc fb2f 	bl	800c464 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fe0a:	e01f      	b.n	800fe4c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe0c:	4b2c      	ldr	r3, [pc, #176]	; (800fec0 <UART_SetConfig+0xab0>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	f003 0320 	and.w	r3, r3, #32
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d009      	beq.n	800fe2c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fe18:	4b29      	ldr	r3, [pc, #164]	; (800fec0 <UART_SetConfig+0xab0>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	08db      	lsrs	r3, r3, #3
 800fe1e:	f003 0303 	and.w	r3, r3, #3
 800fe22:	4a28      	ldr	r2, [pc, #160]	; (800fec4 <UART_SetConfig+0xab4>)
 800fe24:	fa22 f303 	lsr.w	r3, r2, r3
 800fe28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fe2a:	e00f      	b.n	800fe4c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800fe2c:	4b25      	ldr	r3, [pc, #148]	; (800fec4 <UART_SetConfig+0xab4>)
 800fe2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fe30:	e00c      	b.n	800fe4c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fe32:	4b25      	ldr	r3, [pc, #148]	; (800fec8 <UART_SetConfig+0xab8>)
 800fe34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fe36:	e009      	b.n	800fe4c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fe38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fe3e:	e005      	b.n	800fe4c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800fe40:	2300      	movs	r3, #0
 800fe42:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800fe44:	2301      	movs	r3, #1
 800fe46:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800fe4a:	bf00      	nop
    }

    if (pclk != 0U)
 800fe4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d021      	beq.n	800fe96 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe56:	4a1d      	ldr	r2, [pc, #116]	; (800fecc <UART_SetConfig+0xabc>)
 800fe58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe5c:	461a      	mov	r2, r3
 800fe5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe60:	fbb3 f2f2 	udiv	r2, r3, r2
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	685b      	ldr	r3, [r3, #4]
 800fe68:	085b      	lsrs	r3, r3, #1
 800fe6a:	441a      	add	r2, r3
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	685b      	ldr	r3, [r3, #4]
 800fe70:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe74:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe78:	2b0f      	cmp	r3, #15
 800fe7a:	d909      	bls.n	800fe90 <UART_SetConfig+0xa80>
 800fe7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe82:	d205      	bcs.n	800fe90 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fe84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe86:	b29a      	uxth	r2, r3
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	60da      	str	r2, [r3, #12]
 800fe8e:	e002      	b.n	800fe96 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800fe90:	2301      	movs	r3, #1
 800fe92:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2201      	movs	r2, #1
 800fe9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2201      	movs	r2, #1
 800fea2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2200      	movs	r2, #0
 800feaa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2200      	movs	r2, #0
 800feb0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800feb2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3738      	adds	r7, #56	; 0x38
 800feba:	46bd      	mov	sp, r7
 800febc:	bdb0      	pop	{r4, r5, r7, pc}
 800febe:	bf00      	nop
 800fec0:	58024400 	.word	0x58024400
 800fec4:	03d09000 	.word	0x03d09000
 800fec8:	003d0900 	.word	0x003d0900
 800fecc:	08014c1c 	.word	0x08014c1c

0800fed0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fed0:	b480      	push	{r7}
 800fed2:	b083      	sub	sp, #12
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fedc:	f003 0301 	and.w	r3, r3, #1
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d00a      	beq.n	800fefa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	685b      	ldr	r3, [r3, #4]
 800feea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	430a      	orrs	r2, r1
 800fef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fefe:	f003 0302 	and.w	r3, r3, #2
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d00a      	beq.n	800ff1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	685b      	ldr	r3, [r3, #4]
 800ff0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	430a      	orrs	r2, r1
 800ff1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff20:	f003 0304 	and.w	r3, r3, #4
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d00a      	beq.n	800ff3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	685b      	ldr	r3, [r3, #4]
 800ff2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	430a      	orrs	r2, r1
 800ff3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff42:	f003 0308 	and.w	r3, r3, #8
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d00a      	beq.n	800ff60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	685b      	ldr	r3, [r3, #4]
 800ff50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	430a      	orrs	r2, r1
 800ff5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff64:	f003 0310 	and.w	r3, r3, #16
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d00a      	beq.n	800ff82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	689b      	ldr	r3, [r3, #8]
 800ff72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	430a      	orrs	r2, r1
 800ff80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff86:	f003 0320 	and.w	r3, r3, #32
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d00a      	beq.n	800ffa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	689b      	ldr	r3, [r3, #8]
 800ff94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	430a      	orrs	r2, r1
 800ffa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d01a      	beq.n	800ffe6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	430a      	orrs	r2, r1
 800ffc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ffce:	d10a      	bne.n	800ffe6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	685b      	ldr	r3, [r3, #4]
 800ffd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	430a      	orrs	r2, r1
 800ffe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d00a      	beq.n	8010008 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	685b      	ldr	r3, [r3, #4]
 800fff8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	430a      	orrs	r2, r1
 8010006:	605a      	str	r2, [r3, #4]
  }
}
 8010008:	bf00      	nop
 801000a:	370c      	adds	r7, #12
 801000c:	46bd      	mov	sp, r7
 801000e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010012:	4770      	bx	lr

08010014 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b086      	sub	sp, #24
 8010018:	af02      	add	r7, sp, #8
 801001a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2200      	movs	r2, #0
 8010020:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010024:	f7f6 fe0e 	bl	8006c44 <HAL_GetTick>
 8010028:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	f003 0308 	and.w	r3, r3, #8
 8010034:	2b08      	cmp	r3, #8
 8010036:	d10e      	bne.n	8010056 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010038:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801003c:	9300      	str	r3, [sp, #0]
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	2200      	movs	r2, #0
 8010042:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f000 f82f 	bl	80100aa <UART_WaitOnFlagUntilTimeout>
 801004c:	4603      	mov	r3, r0
 801004e:	2b00      	cmp	r3, #0
 8010050:	d001      	beq.n	8010056 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010052:	2303      	movs	r3, #3
 8010054:	e025      	b.n	80100a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	f003 0304 	and.w	r3, r3, #4
 8010060:	2b04      	cmp	r3, #4
 8010062:	d10e      	bne.n	8010082 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010064:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010068:	9300      	str	r3, [sp, #0]
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	2200      	movs	r2, #0
 801006e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f000 f819 	bl	80100aa <UART_WaitOnFlagUntilTimeout>
 8010078:	4603      	mov	r3, r0
 801007a:	2b00      	cmp	r3, #0
 801007c:	d001      	beq.n	8010082 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801007e:	2303      	movs	r3, #3
 8010080:	e00f      	b.n	80100a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2220      	movs	r2, #32
 8010086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	2220      	movs	r2, #32
 801008e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	2200      	movs	r2, #0
 8010096:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2200      	movs	r2, #0
 801009c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80100a0:	2300      	movs	r3, #0
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	3710      	adds	r7, #16
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}

080100aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80100aa:	b580      	push	{r7, lr}
 80100ac:	b09c      	sub	sp, #112	; 0x70
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	60f8      	str	r0, [r7, #12]
 80100b2:	60b9      	str	r1, [r7, #8]
 80100b4:	603b      	str	r3, [r7, #0]
 80100b6:	4613      	mov	r3, r2
 80100b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80100ba:	e0a9      	b.n	8010210 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80100bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80100be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100c2:	f000 80a5 	beq.w	8010210 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80100c6:	f7f6 fdbd 	bl	8006c44 <HAL_GetTick>
 80100ca:	4602      	mov	r2, r0
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	1ad3      	subs	r3, r2, r3
 80100d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80100d2:	429a      	cmp	r2, r3
 80100d4:	d302      	bcc.n	80100dc <UART_WaitOnFlagUntilTimeout+0x32>
 80100d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d140      	bne.n	801015e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100e4:	e853 3f00 	ldrex	r3, [r3]
 80100e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80100ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80100f0:	667b      	str	r3, [r7, #100]	; 0x64
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	461a      	mov	r2, r3
 80100f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80100fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80100fc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010100:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010102:	e841 2300 	strex	r3, r2, [r1]
 8010106:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801010a:	2b00      	cmp	r3, #0
 801010c:	d1e6      	bne.n	80100dc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	3308      	adds	r3, #8
 8010114:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010118:	e853 3f00 	ldrex	r3, [r3]
 801011c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801011e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010120:	f023 0301 	bic.w	r3, r3, #1
 8010124:	663b      	str	r3, [r7, #96]	; 0x60
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	3308      	adds	r3, #8
 801012c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801012e:	64ba      	str	r2, [r7, #72]	; 0x48
 8010130:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010132:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010134:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010136:	e841 2300 	strex	r3, r2, [r1]
 801013a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801013c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801013e:	2b00      	cmp	r3, #0
 8010140:	d1e5      	bne.n	801010e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	2220      	movs	r2, #32
 8010146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	2220      	movs	r2, #32
 801014e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	2200      	movs	r2, #0
 8010156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801015a:	2303      	movs	r3, #3
 801015c:	e069      	b.n	8010232 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	f003 0304 	and.w	r3, r3, #4
 8010168:	2b00      	cmp	r3, #0
 801016a:	d051      	beq.n	8010210 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	69db      	ldr	r3, [r3, #28]
 8010172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801017a:	d149      	bne.n	8010210 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010184:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801018c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801018e:	e853 3f00 	ldrex	r3, [r3]
 8010192:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010196:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801019a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	461a      	mov	r2, r3
 80101a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101a4:	637b      	str	r3, [r7, #52]	; 0x34
 80101a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80101aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101ac:	e841 2300 	strex	r3, r2, [r1]
 80101b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80101b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d1e6      	bne.n	8010186 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	3308      	adds	r3, #8
 80101be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	e853 3f00 	ldrex	r3, [r3]
 80101c6:	613b      	str	r3, [r7, #16]
   return(result);
 80101c8:	693b      	ldr	r3, [r7, #16]
 80101ca:	f023 0301 	bic.w	r3, r3, #1
 80101ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	3308      	adds	r3, #8
 80101d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80101d8:	623a      	str	r2, [r7, #32]
 80101da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101dc:	69f9      	ldr	r1, [r7, #28]
 80101de:	6a3a      	ldr	r2, [r7, #32]
 80101e0:	e841 2300 	strex	r3, r2, [r1]
 80101e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80101e6:	69bb      	ldr	r3, [r7, #24]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d1e5      	bne.n	80101b8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	2220      	movs	r2, #32
 80101f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	2220      	movs	r2, #32
 80101f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	2220      	movs	r2, #32
 8010200:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	2200      	movs	r2, #0
 8010208:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 801020c:	2303      	movs	r3, #3
 801020e:	e010      	b.n	8010232 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	69da      	ldr	r2, [r3, #28]
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	4013      	ands	r3, r2
 801021a:	68ba      	ldr	r2, [r7, #8]
 801021c:	429a      	cmp	r2, r3
 801021e:	bf0c      	ite	eq
 8010220:	2301      	moveq	r3, #1
 8010222:	2300      	movne	r3, #0
 8010224:	b2db      	uxtb	r3, r3
 8010226:	461a      	mov	r2, r3
 8010228:	79fb      	ldrb	r3, [r7, #7]
 801022a:	429a      	cmp	r2, r3
 801022c:	f43f af46 	beq.w	80100bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010230:	2300      	movs	r3, #0
}
 8010232:	4618      	mov	r0, r3
 8010234:	3770      	adds	r7, #112	; 0x70
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}
	...

0801023c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b096      	sub	sp, #88	; 0x58
 8010240:	af00      	add	r7, sp, #0
 8010242:	60f8      	str	r0, [r7, #12]
 8010244:	60b9      	str	r1, [r7, #8]
 8010246:	4613      	mov	r3, r2
 8010248:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	68ba      	ldr	r2, [r7, #8]
 801024e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	88fa      	ldrh	r2, [r7, #6]
 8010254:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	2200      	movs	r2, #0
 801025c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	2222      	movs	r2, #34	; 0x22
 8010264:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801026c:	2b00      	cmp	r3, #0
 801026e:	d02c      	beq.n	80102ca <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010274:	4a42      	ldr	r2, [pc, #264]	; (8010380 <UART_Start_Receive_DMA+0x144>)
 8010276:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801027c:	4a41      	ldr	r2, [pc, #260]	; (8010384 <UART_Start_Receive_DMA+0x148>)
 801027e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010284:	4a40      	ldr	r2, [pc, #256]	; (8010388 <UART_Start_Receive_DMA+0x14c>)
 8010286:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801028c:	2200      	movs	r2, #0
 801028e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	3324      	adds	r3, #36	; 0x24
 801029a:	4619      	mov	r1, r3
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102a0:	461a      	mov	r2, r3
 80102a2:	88fb      	ldrh	r3, [r7, #6]
 80102a4:	f7f7 fb80 	bl	80079a8 <HAL_DMA_Start_IT>
 80102a8:	4603      	mov	r3, r0
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d00d      	beq.n	80102ca <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	2210      	movs	r2, #16
 80102b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	2200      	movs	r2, #0
 80102ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	2220      	movs	r2, #32
 80102c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 80102c6:	2301      	movs	r3, #1
 80102c8:	e055      	b.n	8010376 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	2200      	movs	r2, #0
 80102ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	691b      	ldr	r3, [r3, #16]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d018      	beq.n	801030c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102e2:	e853 3f00 	ldrex	r3, [r3]
 80102e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80102e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80102ee:	657b      	str	r3, [r7, #84]	; 0x54
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	461a      	mov	r2, r3
 80102f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80102fa:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80102fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010300:	e841 2300 	strex	r3, r2, [r1]
 8010304:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010308:	2b00      	cmp	r3, #0
 801030a:	d1e6      	bne.n	80102da <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	3308      	adds	r3, #8
 8010312:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010316:	e853 3f00 	ldrex	r3, [r3]
 801031a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801031c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801031e:	f043 0301 	orr.w	r3, r3, #1
 8010322:	653b      	str	r3, [r7, #80]	; 0x50
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	3308      	adds	r3, #8
 801032a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801032c:	637a      	str	r2, [r7, #52]	; 0x34
 801032e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010330:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010334:	e841 2300 	strex	r3, r2, [r1]
 8010338:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801033a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801033c:	2b00      	cmp	r3, #0
 801033e:	d1e5      	bne.n	801030c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	3308      	adds	r3, #8
 8010346:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010348:	697b      	ldr	r3, [r7, #20]
 801034a:	e853 3f00 	ldrex	r3, [r3]
 801034e:	613b      	str	r3, [r7, #16]
   return(result);
 8010350:	693b      	ldr	r3, [r7, #16]
 8010352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	3308      	adds	r3, #8
 801035e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010360:	623a      	str	r2, [r7, #32]
 8010362:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010364:	69f9      	ldr	r1, [r7, #28]
 8010366:	6a3a      	ldr	r2, [r7, #32]
 8010368:	e841 2300 	strex	r3, r2, [r1]
 801036c:	61bb      	str	r3, [r7, #24]
   return(result);
 801036e:	69bb      	ldr	r3, [r7, #24]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d1e5      	bne.n	8010340 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8010374:	2300      	movs	r3, #0
}
 8010376:	4618      	mov	r0, r3
 8010378:	3758      	adds	r7, #88	; 0x58
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}
 801037e:	bf00      	nop
 8010380:	0801058f 	.word	0x0801058f
 8010384:	080106b1 	.word	0x080106b1
 8010388:	080106e9 	.word	0x080106e9

0801038c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801038c:	b480      	push	{r7}
 801038e:	b08f      	sub	sp, #60	; 0x3c
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801039a:	6a3b      	ldr	r3, [r7, #32]
 801039c:	e853 3f00 	ldrex	r3, [r3]
 80103a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80103a2:	69fb      	ldr	r3, [r7, #28]
 80103a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80103a8:	637b      	str	r3, [r7, #52]	; 0x34
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	461a      	mov	r2, r3
 80103b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80103b4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80103b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103ba:	e841 2300 	strex	r3, r2, [r1]
 80103be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80103c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d1e6      	bne.n	8010394 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	3308      	adds	r3, #8
 80103cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	e853 3f00 	ldrex	r3, [r3]
 80103d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80103dc:	633b      	str	r3, [r7, #48]	; 0x30
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	3308      	adds	r3, #8
 80103e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103e6:	61ba      	str	r2, [r7, #24]
 80103e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ea:	6979      	ldr	r1, [r7, #20]
 80103ec:	69ba      	ldr	r2, [r7, #24]
 80103ee:	e841 2300 	strex	r3, r2, [r1]
 80103f2:	613b      	str	r3, [r7, #16]
   return(result);
 80103f4:	693b      	ldr	r3, [r7, #16]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d1e5      	bne.n	80103c6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2220      	movs	r2, #32
 80103fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8010402:	bf00      	nop
 8010404:	373c      	adds	r7, #60	; 0x3c
 8010406:	46bd      	mov	sp, r7
 8010408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040c:	4770      	bx	lr
	...

08010410 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010410:	b480      	push	{r7}
 8010412:	b095      	sub	sp, #84	; 0x54
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801041e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010420:	e853 3f00 	ldrex	r3, [r3]
 8010424:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010428:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801042c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	461a      	mov	r2, r3
 8010434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010436:	643b      	str	r3, [r7, #64]	; 0x40
 8010438:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801043a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801043c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801043e:	e841 2300 	strex	r3, r2, [r1]
 8010442:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010446:	2b00      	cmp	r3, #0
 8010448:	d1e6      	bne.n	8010418 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	3308      	adds	r3, #8
 8010450:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010452:	6a3b      	ldr	r3, [r7, #32]
 8010454:	e853 3f00 	ldrex	r3, [r3]
 8010458:	61fb      	str	r3, [r7, #28]
   return(result);
 801045a:	69fa      	ldr	r2, [r7, #28]
 801045c:	4b1e      	ldr	r3, [pc, #120]	; (80104d8 <UART_EndRxTransfer+0xc8>)
 801045e:	4013      	ands	r3, r2
 8010460:	64bb      	str	r3, [r7, #72]	; 0x48
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	3308      	adds	r3, #8
 8010468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801046a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801046c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801046e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010472:	e841 2300 	strex	r3, r2, [r1]
 8010476:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801047a:	2b00      	cmp	r3, #0
 801047c:	d1e5      	bne.n	801044a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010482:	2b01      	cmp	r3, #1
 8010484:	d118      	bne.n	80104b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	e853 3f00 	ldrex	r3, [r3]
 8010492:	60bb      	str	r3, [r7, #8]
   return(result);
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	f023 0310 	bic.w	r3, r3, #16
 801049a:	647b      	str	r3, [r7, #68]	; 0x44
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	461a      	mov	r2, r3
 80104a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104a4:	61bb      	str	r3, [r7, #24]
 80104a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104a8:	6979      	ldr	r1, [r7, #20]
 80104aa:	69ba      	ldr	r2, [r7, #24]
 80104ac:	e841 2300 	strex	r3, r2, [r1]
 80104b0:	613b      	str	r3, [r7, #16]
   return(result);
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d1e6      	bne.n	8010486 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2220      	movs	r2, #32
 80104bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2200      	movs	r2, #0
 80104c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2200      	movs	r2, #0
 80104ca:	671a      	str	r2, [r3, #112]	; 0x70
}
 80104cc:	bf00      	nop
 80104ce:	3754      	adds	r7, #84	; 0x54
 80104d0:	46bd      	mov	sp, r7
 80104d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d6:	4770      	bx	lr
 80104d8:	effffffe 	.word	0xeffffffe

080104dc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b090      	sub	sp, #64	; 0x40
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104e8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	69db      	ldr	r3, [r3, #28]
 80104ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104f2:	d037      	beq.n	8010564 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80104f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104f6:	2200      	movs	r2, #0
 80104f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80104fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	3308      	adds	r3, #8
 8010502:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010506:	e853 3f00 	ldrex	r3, [r3]
 801050a:	623b      	str	r3, [r7, #32]
   return(result);
 801050c:	6a3b      	ldr	r3, [r7, #32]
 801050e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010512:	63bb      	str	r3, [r7, #56]	; 0x38
 8010514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	3308      	adds	r3, #8
 801051a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801051c:	633a      	str	r2, [r7, #48]	; 0x30
 801051e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010520:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010524:	e841 2300 	strex	r3, r2, [r1]
 8010528:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801052a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801052c:	2b00      	cmp	r3, #0
 801052e:	d1e5      	bne.n	80104fc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	e853 3f00 	ldrex	r3, [r3]
 801053c:	60fb      	str	r3, [r7, #12]
   return(result);
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010544:	637b      	str	r3, [r7, #52]	; 0x34
 8010546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	461a      	mov	r2, r3
 801054c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801054e:	61fb      	str	r3, [r7, #28]
 8010550:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010552:	69b9      	ldr	r1, [r7, #24]
 8010554:	69fa      	ldr	r2, [r7, #28]
 8010556:	e841 2300 	strex	r3, r2, [r1]
 801055a:	617b      	str	r3, [r7, #20]
   return(result);
 801055c:	697b      	ldr	r3, [r7, #20]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d1e6      	bne.n	8010530 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010562:	e002      	b.n	801056a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8010564:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010566:	f7fe ff21 	bl	800f3ac <HAL_UART_TxCpltCallback>
}
 801056a:	bf00      	nop
 801056c:	3740      	adds	r7, #64	; 0x40
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}

08010572 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010572:	b580      	push	{r7, lr}
 8010574:	b084      	sub	sp, #16
 8010576:	af00      	add	r7, sp, #0
 8010578:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801057e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010580:	68f8      	ldr	r0, [r7, #12]
 8010582:	f7fe ff1d 	bl	800f3c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010586:	bf00      	nop
 8010588:	3710      	adds	r7, #16
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}

0801058e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801058e:	b580      	push	{r7, lr}
 8010590:	b09c      	sub	sp, #112	; 0x70
 8010592:	af00      	add	r7, sp, #0
 8010594:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801059a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	69db      	ldr	r3, [r3, #28]
 80105a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105a4:	d071      	beq.n	801068a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80105a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105a8:	2200      	movs	r2, #0
 80105aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80105ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105b6:	e853 3f00 	ldrex	r3, [r3]
 80105ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80105bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80105c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80105c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	461a      	mov	r2, r3
 80105ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80105cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80105ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80105d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80105d4:	e841 2300 	strex	r3, r2, [r1]
 80105d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80105da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d1e6      	bne.n	80105ae <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	3308      	adds	r3, #8
 80105e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ea:	e853 3f00 	ldrex	r3, [r3]
 80105ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80105f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105f2:	f023 0301 	bic.w	r3, r3, #1
 80105f6:	667b      	str	r3, [r7, #100]	; 0x64
 80105f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	3308      	adds	r3, #8
 80105fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010600:	647a      	str	r2, [r7, #68]	; 0x44
 8010602:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010604:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010608:	e841 2300 	strex	r3, r2, [r1]
 801060c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801060e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010610:	2b00      	cmp	r3, #0
 8010612:	d1e5      	bne.n	80105e0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	3308      	adds	r3, #8
 801061a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061e:	e853 3f00 	ldrex	r3, [r3]
 8010622:	623b      	str	r3, [r7, #32]
   return(result);
 8010624:	6a3b      	ldr	r3, [r7, #32]
 8010626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801062a:	663b      	str	r3, [r7, #96]	; 0x60
 801062c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	3308      	adds	r3, #8
 8010632:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010634:	633a      	str	r2, [r7, #48]	; 0x30
 8010636:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010638:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801063a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801063c:	e841 2300 	strex	r3, r2, [r1]
 8010640:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010644:	2b00      	cmp	r3, #0
 8010646:	d1e5      	bne.n	8010614 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801064a:	2220      	movs	r2, #32
 801064c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010654:	2b01      	cmp	r3, #1
 8010656:	d118      	bne.n	801068a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801065e:	693b      	ldr	r3, [r7, #16]
 8010660:	e853 3f00 	ldrex	r3, [r3]
 8010664:	60fb      	str	r3, [r7, #12]
   return(result);
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	f023 0310 	bic.w	r3, r3, #16
 801066c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801066e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	461a      	mov	r2, r3
 8010674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010676:	61fb      	str	r3, [r7, #28]
 8010678:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801067a:	69b9      	ldr	r1, [r7, #24]
 801067c:	69fa      	ldr	r2, [r7, #28]
 801067e:	e841 2300 	strex	r3, r2, [r1]
 8010682:	617b      	str	r3, [r7, #20]
   return(result);
 8010684:	697b      	ldr	r3, [r7, #20]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d1e6      	bne.n	8010658 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801068a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801068c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801068e:	2b01      	cmp	r3, #1
 8010690:	d107      	bne.n	80106a2 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010694:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010698:	4619      	mov	r1, r3
 801069a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801069c:	f7f2 fd8c 	bl	80031b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80106a0:	e002      	b.n	80106a8 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 80106a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80106a4:	f7fe fe96 	bl	800f3d4 <HAL_UART_RxCpltCallback>
}
 80106a8:	bf00      	nop
 80106aa:	3770      	adds	r7, #112	; 0x70
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}

080106b0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b084      	sub	sp, #16
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106bc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106c2:	2b01      	cmp	r3, #1
 80106c4:	d109      	bne.n	80106da <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80106cc:	085b      	lsrs	r3, r3, #1
 80106ce:	b29b      	uxth	r3, r3
 80106d0:	4619      	mov	r1, r3
 80106d2:	68f8      	ldr	r0, [r7, #12]
 80106d4:	f7f2 fd70 	bl	80031b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80106d8:	e002      	b.n	80106e0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80106da:	68f8      	ldr	r0, [r7, #12]
 80106dc:	f7fe fe84 	bl	800f3e8 <HAL_UART_RxHalfCpltCallback>
}
 80106e0:	bf00      	nop
 80106e2:	3710      	adds	r7, #16
 80106e4:	46bd      	mov	sp, r7
 80106e6:	bd80      	pop	{r7, pc}

080106e8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b086      	sub	sp, #24
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106f4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106fc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80106fe:	697b      	ldr	r3, [r7, #20]
 8010700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010704:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	689b      	ldr	r3, [r3, #8]
 801070c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010710:	2b80      	cmp	r3, #128	; 0x80
 8010712:	d109      	bne.n	8010728 <UART_DMAError+0x40>
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	2b21      	cmp	r3, #33	; 0x21
 8010718:	d106      	bne.n	8010728 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801071a:	697b      	ldr	r3, [r7, #20]
 801071c:	2200      	movs	r2, #0
 801071e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010722:	6978      	ldr	r0, [r7, #20]
 8010724:	f7ff fe32 	bl	801038c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	689b      	ldr	r3, [r3, #8]
 801072e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010732:	2b40      	cmp	r3, #64	; 0x40
 8010734:	d109      	bne.n	801074a <UART_DMAError+0x62>
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	2b22      	cmp	r3, #34	; 0x22
 801073a:	d106      	bne.n	801074a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801073c:	697b      	ldr	r3, [r7, #20]
 801073e:	2200      	movs	r2, #0
 8010740:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010744:	6978      	ldr	r0, [r7, #20]
 8010746:	f7ff fe63 	bl	8010410 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010750:	f043 0210 	orr.w	r2, r3, #16
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801075a:	6978      	ldr	r0, [r7, #20]
 801075c:	f7fe fe4e 	bl	800f3fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010760:	bf00      	nop
 8010762:	3718      	adds	r7, #24
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}

08010768 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b084      	sub	sp, #16
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010774:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	2200      	movs	r2, #0
 801077a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	2200      	movs	r2, #0
 8010782:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010786:	68f8      	ldr	r0, [r7, #12]
 8010788:	f7fe fe38 	bl	800f3fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801078c:	bf00      	nop
 801078e:	3710      	adds	r7, #16
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}

08010794 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b088      	sub	sp, #32
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	e853 3f00 	ldrex	r3, [r3]
 80107a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107b0:	61fb      	str	r3, [r7, #28]
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	461a      	mov	r2, r3
 80107b8:	69fb      	ldr	r3, [r7, #28]
 80107ba:	61bb      	str	r3, [r7, #24]
 80107bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107be:	6979      	ldr	r1, [r7, #20]
 80107c0:	69ba      	ldr	r2, [r7, #24]
 80107c2:	e841 2300 	strex	r3, r2, [r1]
 80107c6:	613b      	str	r3, [r7, #16]
   return(result);
 80107c8:	693b      	ldr	r3, [r7, #16]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d1e6      	bne.n	801079c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2220      	movs	r2, #32
 80107d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2200      	movs	r2, #0
 80107da:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80107dc:	6878      	ldr	r0, [r7, #4]
 80107de:	f7fe fde5 	bl	800f3ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80107e2:	bf00      	nop
 80107e4:	3720      	adds	r7, #32
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}

080107ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80107ea:	b480      	push	{r7}
 80107ec:	b083      	sub	sp, #12
 80107ee:	af00      	add	r7, sp, #0
 80107f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80107f2:	bf00      	nop
 80107f4:	370c      	adds	r7, #12
 80107f6:	46bd      	mov	sp, r7
 80107f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fc:	4770      	bx	lr

080107fe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80107fe:	b480      	push	{r7}
 8010800:	b083      	sub	sp, #12
 8010802:	af00      	add	r7, sp, #0
 8010804:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010806:	bf00      	nop
 8010808:	370c      	adds	r7, #12
 801080a:	46bd      	mov	sp, r7
 801080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010810:	4770      	bx	lr

08010812 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010812:	b480      	push	{r7}
 8010814:	b083      	sub	sp, #12
 8010816:	af00      	add	r7, sp, #0
 8010818:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801081a:	bf00      	nop
 801081c:	370c      	adds	r7, #12
 801081e:	46bd      	mov	sp, r7
 8010820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010824:	4770      	bx	lr

08010826 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8010826:	b580      	push	{r7, lr}
 8010828:	b084      	sub	sp, #16
 801082a:	af00      	add	r7, sp, #0
 801082c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010834:	2b01      	cmp	r3, #1
 8010836:	d101      	bne.n	801083c <HAL_UARTEx_EnableFifoMode+0x16>
 8010838:	2302      	movs	r3, #2
 801083a:	e02b      	b.n	8010894 <HAL_UARTEx_EnableFifoMode+0x6e>
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2201      	movs	r2, #1
 8010840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2224      	movs	r2, #36	; 0x24
 8010848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	681a      	ldr	r2, [r3, #0]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	f022 0201 	bic.w	r2, r2, #1
 8010862:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801086a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8010872:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	68fa      	ldr	r2, [r7, #12]
 801087a:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	f000 f91f 	bl	8010ac0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2220      	movs	r2, #32
 8010886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2200      	movs	r2, #0
 801088e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010892:	2300      	movs	r3, #0
}
 8010894:	4618      	mov	r0, r3
 8010896:	3710      	adds	r7, #16
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}

0801089c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801089c:	b480      	push	{r7}
 801089e:	b085      	sub	sp, #20
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80108aa:	2b01      	cmp	r3, #1
 80108ac:	d101      	bne.n	80108b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80108ae:	2302      	movs	r3, #2
 80108b0:	e027      	b.n	8010902 <HAL_UARTEx_DisableFifoMode+0x66>
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2201      	movs	r2, #1
 80108b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	2224      	movs	r2, #36	; 0x24
 80108be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	681a      	ldr	r2, [r3, #0]
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	f022 0201 	bic.w	r2, r2, #1
 80108d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80108e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	2200      	movs	r2, #0
 80108e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	68fa      	ldr	r2, [r7, #12]
 80108ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2220      	movs	r2, #32
 80108f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2200      	movs	r2, #0
 80108fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010900:	2300      	movs	r3, #0
}
 8010902:	4618      	mov	r0, r3
 8010904:	3714      	adds	r7, #20
 8010906:	46bd      	mov	sp, r7
 8010908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090c:	4770      	bx	lr

0801090e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801090e:	b580      	push	{r7, lr}
 8010910:	b084      	sub	sp, #16
 8010912:	af00      	add	r7, sp, #0
 8010914:	6078      	str	r0, [r7, #4]
 8010916:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801091e:	2b01      	cmp	r3, #1
 8010920:	d101      	bne.n	8010926 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010922:	2302      	movs	r3, #2
 8010924:	e02d      	b.n	8010982 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	2201      	movs	r2, #1
 801092a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2224      	movs	r2, #36	; 0x24
 8010932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	681a      	ldr	r2, [r3, #0]
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	f022 0201 	bic.w	r2, r2, #1
 801094c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	689b      	ldr	r3, [r3, #8]
 8010954:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	683a      	ldr	r2, [r7, #0]
 801095e:	430a      	orrs	r2, r1
 8010960:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f000 f8ac 	bl	8010ac0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	68fa      	ldr	r2, [r7, #12]
 801096e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2220      	movs	r2, #32
 8010974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2200      	movs	r2, #0
 801097c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010980:	2300      	movs	r3, #0
}
 8010982:	4618      	mov	r0, r3
 8010984:	3710      	adds	r7, #16
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}

0801098a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801098a:	b580      	push	{r7, lr}
 801098c:	b084      	sub	sp, #16
 801098e:	af00      	add	r7, sp, #0
 8010990:	6078      	str	r0, [r7, #4]
 8010992:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801099a:	2b01      	cmp	r3, #1
 801099c:	d101      	bne.n	80109a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801099e:	2302      	movs	r3, #2
 80109a0:	e02d      	b.n	80109fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	2201      	movs	r2, #1
 80109a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2224      	movs	r2, #36	; 0x24
 80109ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	681a      	ldr	r2, [r3, #0]
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	f022 0201 	bic.w	r2, r2, #1
 80109c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	689b      	ldr	r3, [r3, #8]
 80109d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	683a      	ldr	r2, [r7, #0]
 80109da:	430a      	orrs	r2, r1
 80109dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80109de:	6878      	ldr	r0, [r7, #4]
 80109e0:	f000 f86e 	bl	8010ac0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	68fa      	ldr	r2, [r7, #12]
 80109ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2220      	movs	r2, #32
 80109f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2200      	movs	r2, #0
 80109f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80109fc:	2300      	movs	r3, #0
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3710      	adds	r7, #16
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}

08010a06 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010a06:	b580      	push	{r7, lr}
 8010a08:	b08c      	sub	sp, #48	; 0x30
 8010a0a:	af00      	add	r7, sp, #0
 8010a0c:	60f8      	str	r0, [r7, #12]
 8010a0e:	60b9      	str	r1, [r7, #8]
 8010a10:	4613      	mov	r3, r2
 8010a12:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a1a:	2b20      	cmp	r3, #32
 8010a1c:	d14a      	bne.n	8010ab4 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8010a1e:	68bb      	ldr	r3, [r7, #8]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d002      	beq.n	8010a2a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8010a24:	88fb      	ldrh	r3, [r7, #6]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d101      	bne.n	8010a2e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	e043      	b.n	8010ab6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010a34:	2b01      	cmp	r3, #1
 8010a36:	d101      	bne.n	8010a3c <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 8010a38:	2302      	movs	r3, #2
 8010a3a:	e03c      	b.n	8010ab6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	2201      	movs	r2, #1
 8010a40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	2201      	movs	r2, #1
 8010a48:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8010a4a:	88fb      	ldrh	r3, [r7, #6]
 8010a4c:	461a      	mov	r2, r3
 8010a4e:	68b9      	ldr	r1, [r7, #8]
 8010a50:	68f8      	ldr	r0, [r7, #12]
 8010a52:	f7ff fbf3 	bl	801023c <UART_Start_Receive_DMA>
 8010a56:	4603      	mov	r3, r0
 8010a58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8010a5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d124      	bne.n	8010aae <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a68:	2b01      	cmp	r3, #1
 8010a6a:	d11d      	bne.n	8010aa8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	2210      	movs	r2, #16
 8010a72:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a7a:	69bb      	ldr	r3, [r7, #24]
 8010a7c:	e853 3f00 	ldrex	r3, [r3]
 8010a80:	617b      	str	r3, [r7, #20]
   return(result);
 8010a82:	697b      	ldr	r3, [r7, #20]
 8010a84:	f043 0310 	orr.w	r3, r3, #16
 8010a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	461a      	mov	r2, r3
 8010a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a92:	627b      	str	r3, [r7, #36]	; 0x24
 8010a94:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a96:	6a39      	ldr	r1, [r7, #32]
 8010a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a9a:	e841 2300 	strex	r3, r2, [r1]
 8010a9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010aa0:	69fb      	ldr	r3, [r7, #28]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d1e6      	bne.n	8010a74 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8010aa6:	e002      	b.n	8010aae <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8010aae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ab2:	e000      	b.n	8010ab6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8010ab4:	2302      	movs	r3, #2
  }
}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3730      	adds	r7, #48	; 0x30
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd80      	pop	{r7, pc}
	...

08010ac0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010ac0:	b480      	push	{r7}
 8010ac2:	b085      	sub	sp, #20
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d108      	bne.n	8010ae2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2201      	movs	r2, #1
 8010ad4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2201      	movs	r2, #1
 8010adc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010ae0:	e031      	b.n	8010b46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010ae2:	2310      	movs	r3, #16
 8010ae4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010ae6:	2310      	movs	r3, #16
 8010ae8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	689b      	ldr	r3, [r3, #8]
 8010af0:	0e5b      	lsrs	r3, r3, #25
 8010af2:	b2db      	uxtb	r3, r3
 8010af4:	f003 0307 	and.w	r3, r3, #7
 8010af8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	689b      	ldr	r3, [r3, #8]
 8010b00:	0f5b      	lsrs	r3, r3, #29
 8010b02:	b2db      	uxtb	r3, r3
 8010b04:	f003 0307 	and.w	r3, r3, #7
 8010b08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010b0a:	7bbb      	ldrb	r3, [r7, #14]
 8010b0c:	7b3a      	ldrb	r2, [r7, #12]
 8010b0e:	4911      	ldr	r1, [pc, #68]	; (8010b54 <UARTEx_SetNbDataToProcess+0x94>)
 8010b10:	5c8a      	ldrb	r2, [r1, r2]
 8010b12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010b16:	7b3a      	ldrb	r2, [r7, #12]
 8010b18:	490f      	ldr	r1, [pc, #60]	; (8010b58 <UARTEx_SetNbDataToProcess+0x98>)
 8010b1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010b1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b20:	b29a      	uxth	r2, r3
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010b28:	7bfb      	ldrb	r3, [r7, #15]
 8010b2a:	7b7a      	ldrb	r2, [r7, #13]
 8010b2c:	4909      	ldr	r1, [pc, #36]	; (8010b54 <UARTEx_SetNbDataToProcess+0x94>)
 8010b2e:	5c8a      	ldrb	r2, [r1, r2]
 8010b30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010b34:	7b7a      	ldrb	r2, [r7, #13]
 8010b36:	4908      	ldr	r1, [pc, #32]	; (8010b58 <UARTEx_SetNbDataToProcess+0x98>)
 8010b38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010b3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b3e:	b29a      	uxth	r2, r3
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010b46:	bf00      	nop
 8010b48:	3714      	adds	r7, #20
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b50:	4770      	bx	lr
 8010b52:	bf00      	nop
 8010b54:	08014c34 	.word	0x08014c34
 8010b58:	08014c3c 	.word	0x08014c3c

08010b5c <checkint>:
 8010b5c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010b60:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8010b64:	429a      	cmp	r2, r3
 8010b66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b68:	dd2b      	ble.n	8010bc2 <checkint+0x66>
 8010b6a:	f240 4333 	movw	r3, #1075	; 0x433
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	dc25      	bgt.n	8010bbe <checkint+0x62>
 8010b72:	1a9b      	subs	r3, r3, r2
 8010b74:	f1a3 0620 	sub.w	r6, r3, #32
 8010b78:	f04f 32ff 	mov.w	r2, #4294967295
 8010b7c:	fa02 f606 	lsl.w	r6, r2, r6
 8010b80:	fa02 f403 	lsl.w	r4, r2, r3
 8010b84:	f1c3 0520 	rsb	r5, r3, #32
 8010b88:	4334      	orrs	r4, r6
 8010b8a:	fa22 f505 	lsr.w	r5, r2, r5
 8010b8e:	432c      	orrs	r4, r5
 8010b90:	409a      	lsls	r2, r3
 8010b92:	ea20 0602 	bic.w	r6, r0, r2
 8010b96:	ea21 0704 	bic.w	r7, r1, r4
 8010b9a:	ea56 0207 	orrs.w	r2, r6, r7
 8010b9e:	f1a3 0420 	sub.w	r4, r3, #32
 8010ba2:	f1c3 0220 	rsb	r2, r3, #32
 8010ba6:	d10c      	bne.n	8010bc2 <checkint+0x66>
 8010ba8:	40d8      	lsrs	r0, r3
 8010baa:	fa01 f302 	lsl.w	r3, r1, r2
 8010bae:	4318      	orrs	r0, r3
 8010bb0:	40e1      	lsrs	r1, r4
 8010bb2:	4308      	orrs	r0, r1
 8010bb4:	f000 0301 	and.w	r3, r0, #1
 8010bb8:	f1c3 0002 	rsb	r0, r3, #2
 8010bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bbe:	2002      	movs	r0, #2
 8010bc0:	e7fc      	b.n	8010bbc <checkint+0x60>
 8010bc2:	2000      	movs	r0, #0
 8010bc4:	e7fa      	b.n	8010bbc <checkint+0x60>
	...

08010bc8 <pow>:
 8010bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bcc:	ed2d 8b0a 	vpush	{d8-d12}
 8010bd0:	b09b      	sub	sp, #108	; 0x6c
 8010bd2:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010bd6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010bda:	ed8d 1b00 	vstr	d1, [sp]
 8010bde:	ea4f 5915 	mov.w	r9, r5, lsr #20
 8010be2:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010be6:	f109 30ff 	add.w	r0, r9, #4294967295
 8010bea:	f240 71fd 	movw	r1, #2045	; 0x7fd
 8010bee:	4288      	cmp	r0, r1
 8010bf0:	46cc      	mov	ip, r9
 8010bf2:	ea4f 5817 	mov.w	r8, r7, lsr #20
 8010bf6:	d806      	bhi.n	8010c06 <pow+0x3e>
 8010bf8:	f3c8 010a 	ubfx	r1, r8, #0, #11
 8010bfc:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 8010c00:	297f      	cmp	r1, #127	; 0x7f
 8010c02:	f240 81ab 	bls.w	8010f5c <pow+0x394>
 8010c06:	19b1      	adds	r1, r6, r6
 8010c08:	9104      	str	r1, [sp, #16]
 8010c0a:	eb47 0107 	adc.w	r1, r7, r7
 8010c0e:	9105      	str	r1, [sp, #20]
 8010c10:	9904      	ldr	r1, [sp, #16]
 8010c12:	f111 31ff 	adds.w	r1, r1, #4294967295
 8010c16:	460a      	mov	r2, r1
 8010c18:	9905      	ldr	r1, [sp, #20]
 8010c1a:	f141 31ff 	adc.w	r1, r1, #4294967295
 8010c1e:	460b      	mov	r3, r1
 8010c20:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 8010c24:	f06f 0001 	mvn.w	r0, #1
 8010c28:	4299      	cmp	r1, r3
 8010c2a:	bf08      	it	eq
 8010c2c:	4290      	cmpeq	r0, r2
 8010c2e:	d260      	bcs.n	8010cf2 <pow+0x12a>
 8010c30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c34:	4313      	orrs	r3, r2
 8010c36:	d11a      	bne.n	8010c6e <pow+0xa6>
 8010c38:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 8010c3c:	1923      	adds	r3, r4, r4
 8010c3e:	930c      	str	r3, [sp, #48]	; 0x30
 8010c40:	eb42 0302 	adc.w	r3, r2, r2
 8010c44:	930d      	str	r3, [sp, #52]	; 0x34
 8010c46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010c4a:	4bcf      	ldr	r3, [pc, #828]	; (8010f88 <pow+0x3c0>)
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	428b      	cmp	r3, r1
 8010c50:	bf08      	it	eq
 8010c52:	4282      	cmpeq	r2, r0
 8010c54:	f080 8265 	bcs.w	8011122 <pow+0x55a>
 8010c58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010c5c:	ed9d 6b00 	vldr	d6, [sp]
 8010c60:	ee37 0b06 	vadd.f64	d0, d7, d6
 8010c64:	b01b      	add	sp, #108	; 0x6c
 8010c66:	ecbd 8b0a 	vpop	{d8-d12}
 8010c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c6e:	49c7      	ldr	r1, [pc, #796]	; (8010f8c <pow+0x3c4>)
 8010c70:	2000      	movs	r0, #0
 8010c72:	428d      	cmp	r5, r1
 8010c74:	bf08      	it	eq
 8010c76:	4284      	cmpeq	r4, r0
 8010c78:	d10b      	bne.n	8010c92 <pow+0xca>
 8010c7a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010c7e:	19b3      	adds	r3, r6, r6
 8010c80:	930e      	str	r3, [sp, #56]	; 0x38
 8010c82:	eb42 0302 	adc.w	r3, r2, r2
 8010c86:	930f      	str	r3, [sp, #60]	; 0x3c
 8010c88:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010c8c:	4bbe      	ldr	r3, [pc, #760]	; (8010f88 <pow+0x3c0>)
 8010c8e:	2200      	movs	r2, #0
 8010c90:	e7dd      	b.n	8010c4e <pow+0x86>
 8010c92:	1921      	adds	r1, r4, r4
 8010c94:	9106      	str	r1, [sp, #24]
 8010c96:	eb45 0105 	adc.w	r1, r5, r5
 8010c9a:	9107      	str	r1, [sp, #28]
 8010c9c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8010ca0:	49bb      	ldr	r1, [pc, #748]	; (8010f90 <pow+0x3c8>)
 8010ca2:	2000      	movs	r0, #0
 8010ca4:	42a1      	cmp	r1, r4
 8010ca6:	bf08      	it	eq
 8010ca8:	4298      	cmpeq	r0, r3
 8010caa:	d3d5      	bcc.n	8010c58 <pow+0x90>
 8010cac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010cb0:	428c      	cmp	r4, r1
 8010cb2:	bf08      	it	eq
 8010cb4:	4283      	cmpeq	r3, r0
 8010cb6:	d1cf      	bne.n	8010c58 <pow+0x90>
 8010cb8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8010cbc:	49b5      	ldr	r1, [pc, #724]	; (8010f94 <pow+0x3cc>)
 8010cbe:	2000      	movs	r0, #0
 8010cc0:	428c      	cmp	r4, r1
 8010cc2:	bf08      	it	eq
 8010cc4:	4283      	cmpeq	r3, r0
 8010cc6:	f000 822c 	beq.w	8011122 <pow+0x55a>
 8010cca:	49b3      	ldr	r1, [pc, #716]	; (8010f98 <pow+0x3d0>)
 8010ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8010cd0:	42a1      	cmp	r1, r4
 8010cd2:	bf08      	it	eq
 8010cd4:	4298      	cmpeq	r0, r3
 8010cd6:	ea6f 0307 	mvn.w	r3, r7
 8010cda:	bf34      	ite	cc
 8010cdc:	2201      	movcc	r2, #1
 8010cde:	2200      	movcs	r2, #0
 8010ce0:	0fdb      	lsrs	r3, r3, #31
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	f040 821a 	bne.w	801111c <pow+0x554>
 8010ce8:	ed9d 7b00 	vldr	d7, [sp]
 8010cec:	ee27 0b07 	vmul.f64	d0, d7, d7
 8010cf0:	e7b8      	b.n	8010c64 <pow+0x9c>
 8010cf2:	1923      	adds	r3, r4, r4
 8010cf4:	9308      	str	r3, [sp, #32]
 8010cf6:	eb45 0305 	adc.w	r3, r5, r5
 8010cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8010cfc:	9b08      	ldr	r3, [sp, #32]
 8010cfe:	f113 33ff 	adds.w	r3, r3, #4294967295
 8010d02:	9310      	str	r3, [sp, #64]	; 0x40
 8010d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d06:	f143 33ff 	adc.w	r3, r3, #4294967295
 8010d0a:	9311      	str	r3, [sp, #68]	; 0x44
 8010d0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010d10:	4299      	cmp	r1, r3
 8010d12:	bf08      	it	eq
 8010d14:	4290      	cmpeq	r0, r2
 8010d16:	d22d      	bcs.n	8010d74 <pow+0x1ac>
 8010d18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d1c:	2c00      	cmp	r4, #0
 8010d1e:	f175 0300 	sbcs.w	r3, r5, #0
 8010d22:	ee27 0b07 	vmul.f64	d0, d7, d7
 8010d26:	da16      	bge.n	8010d56 <pow+0x18e>
 8010d28:	4630      	mov	r0, r6
 8010d2a:	4639      	mov	r1, r7
 8010d2c:	f7ff ff16 	bl	8010b5c <checkint>
 8010d30:	2801      	cmp	r0, #1
 8010d32:	d110      	bne.n	8010d56 <pow+0x18e>
 8010d34:	eeb1 0b40 	vneg.f64	d0, d0
 8010d38:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8010d3c:	4323      	orrs	r3, r4
 8010d3e:	d10c      	bne.n	8010d5a <pow+0x192>
 8010d40:	2e00      	cmp	r6, #0
 8010d42:	f177 0300 	sbcs.w	r3, r7, #0
 8010d46:	da8d      	bge.n	8010c64 <pow+0x9c>
 8010d48:	b01b      	add	sp, #108	; 0x6c
 8010d4a:	ecbd 8b0a 	vpop	{d8-d12}
 8010d4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d52:	f001 b809 	b.w	8011d68 <__math_divzero>
 8010d56:	2000      	movs	r0, #0
 8010d58:	e7ee      	b.n	8010d38 <pow+0x170>
 8010d5a:	2e00      	cmp	r6, #0
 8010d5c:	f177 0300 	sbcs.w	r3, r7, #0
 8010d60:	da80      	bge.n	8010c64 <pow+0x9c>
 8010d62:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010d66:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010d6a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8010d6e:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8010d72:	e777      	b.n	8010c64 <pow+0x9c>
 8010d74:	2c00      	cmp	r4, #0
 8010d76:	f175 0300 	sbcs.w	r3, r5, #0
 8010d7a:	da35      	bge.n	8010de8 <pow+0x220>
 8010d7c:	4630      	mov	r0, r6
 8010d7e:	4639      	mov	r1, r7
 8010d80:	f7ff feec 	bl	8010b5c <checkint>
 8010d84:	b940      	cbnz	r0, 8010d98 <pow+0x1d0>
 8010d86:	ed9d 0b02 	vldr	d0, [sp, #8]
 8010d8a:	b01b      	add	sp, #108	; 0x6c
 8010d8c:	ecbd 8b0a 	vpop	{d8-d12}
 8010d90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d94:	f001 b800 	b.w	8011d98 <__math_invalid>
 8010d98:	2801      	cmp	r0, #1
 8010d9a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010d9e:	bf14      	ite	ne
 8010da0:	2000      	movne	r0, #0
 8010da2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8010da6:	461d      	mov	r5, r3
 8010da8:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 8010dac:	f3c8 030a 	ubfx	r3, r8, #0, #11
 8010db0:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 8010db4:	2a7f      	cmp	r2, #127	; 0x7f
 8010db6:	d933      	bls.n	8010e20 <pow+0x258>
 8010db8:	4974      	ldr	r1, [pc, #464]	; (8010f8c <pow+0x3c4>)
 8010dba:	2000      	movs	r0, #0
 8010dbc:	428d      	cmp	r5, r1
 8010dbe:	bf08      	it	eq
 8010dc0:	4284      	cmpeq	r4, r0
 8010dc2:	f000 81ae 	beq.w	8011122 <pow+0x55a>
 8010dc6:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010dca:	4293      	cmp	r3, r2
 8010dcc:	d80e      	bhi.n	8010dec <pow+0x224>
 8010dce:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010dd2:	ed9d 7b00 	vldr	d7, [sp]
 8010dd6:	42a9      	cmp	r1, r5
 8010dd8:	bf08      	it	eq
 8010dda:	42a0      	cmpeq	r0, r4
 8010ddc:	bf34      	ite	cc
 8010dde:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 8010de2:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 8010de6:	e73d      	b.n	8010c64 <pow+0x9c>
 8010de8:	2000      	movs	r0, #0
 8010dea:	e7df      	b.n	8010dac <pow+0x1e4>
 8010dec:	42a9      	cmp	r1, r5
 8010dee:	bf08      	it	eq
 8010df0:	42a0      	cmpeq	r0, r4
 8010df2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010df6:	bf2c      	ite	cs
 8010df8:	2301      	movcs	r3, #1
 8010dfa:	2300      	movcc	r3, #0
 8010dfc:	4590      	cmp	r8, r2
 8010dfe:	bf8c      	ite	hi
 8010e00:	f04f 0800 	movhi.w	r8, #0
 8010e04:	f04f 0801 	movls.w	r8, #1
 8010e08:	4543      	cmp	r3, r8
 8010e0a:	f04f 0000 	mov.w	r0, #0
 8010e0e:	f000 80af 	beq.w	8010f70 <pow+0x3a8>
 8010e12:	b01b      	add	sp, #108	; 0x6c
 8010e14:	ecbd 8b0a 	vpop	{d8-d12}
 8010e18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e1c:	f000 bf9c 	b.w	8011d58 <__math_oflow>
 8010e20:	f1bc 0f00 	cmp.w	ip, #0
 8010e24:	d10e      	bne.n	8010e44 <pow+0x27c>
 8010e26:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8010f80 <pow+0x3b8>
 8010e2a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010e2e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010e32:	ec57 6b17 	vmov	r6, r7, d7
 8010e36:	4b59      	ldr	r3, [pc, #356]	; (8010f9c <pow+0x3d4>)
 8010e38:	2100      	movs	r1, #0
 8010e3a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010e3e:	1874      	adds	r4, r6, r1
 8010e40:	eb42 0503 	adc.w	r5, r2, r3
 8010e44:	2300      	movs	r3, #0
 8010e46:	18e3      	adds	r3, r4, r3
 8010e48:	4b55      	ldr	r3, [pc, #340]	; (8010fa0 <pow+0x3d8>)
 8010e4a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010e4e:	eb45 0303 	adc.w	r3, r5, r3
 8010e52:	1519      	asrs	r1, r3, #20
 8010e54:	ee03 1a10 	vmov	s6, r1
 8010e58:	0d1e      	lsrs	r6, r3, #20
 8010e5a:	2100      	movs	r1, #0
 8010e5c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8010e60:	0536      	lsls	r6, r6, #20
 8010e62:	1a63      	subs	r3, r4, r1
 8010e64:	9312      	str	r3, [sp, #72]	; 0x48
 8010e66:	eb65 0306 	sbc.w	r3, r5, r6
 8010e6a:	9313      	str	r3, [sp, #76]	; 0x4c
 8010e6c:	4b4d      	ldr	r3, [pc, #308]	; (8010fa4 <pow+0x3dc>)
 8010e6e:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 8010e72:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010e76:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 8010e7a:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010e7e:	ed93 7b00 	vldr	d7, [r3]
 8010e82:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 8010e86:	ed93 4b02 	vldr	d4, [r3, #8]
 8010e8a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8010e8e:	eea3 5b07 	vfma.f64	d5, d3, d7
 8010e92:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 8010e96:	ee36 9b05 	vadd.f64	d9, d6, d5
 8010e9a:	ee35 5b49 	vsub.f64	d5, d5, d9
 8010e9e:	eea3 7b04 	vfma.f64	d7, d3, d4
 8010ea2:	ed93 4b04 	vldr	d4, [r3, #16]
 8010ea6:	ee35 5b06 	vadd.f64	d5, d5, d6
 8010eaa:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010eae:	ee26 4b04 	vmul.f64	d4, d6, d4
 8010eb2:	ed93 3b08 	vldr	d3, [r3, #32]
 8010eb6:	ee26 0b04 	vmul.f64	d0, d6, d4
 8010eba:	eeb0 8b40 	vmov.f64	d8, d0
 8010ebe:	ee94 8b06 	vfnms.f64	d8, d4, d6
 8010ec2:	ed93 4b06 	vldr	d4, [r3, #24]
 8010ec6:	ee26 ab00 	vmul.f64	d10, d6, d0
 8010eca:	ee39 1b00 	vadd.f64	d1, d9, d0
 8010ece:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8010ed2:	eea6 4b03 	vfma.f64	d4, d6, d3
 8010ed6:	ee39 9b41 	vsub.f64	d9, d9, d1
 8010eda:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 8010ede:	ee37 8b08 	vadd.f64	d8, d7, d8
 8010ee2:	ee39 9b00 	vadd.f64	d9, d9, d0
 8010ee6:	eea6 3b02 	vfma.f64	d3, d6, d2
 8010eea:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8010eee:	ee38 9b09 	vadd.f64	d9, d8, d9
 8010ef2:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 8010ef6:	eea6 2b0c 	vfma.f64	d2, d6, d12
 8010efa:	ed9d 6b00 	vldr	d6, [sp]
 8010efe:	eea0 3b02 	vfma.f64	d3, d0, d2
 8010f02:	eea0 4b03 	vfma.f64	d4, d0, d3
 8010f06:	eeaa 9b04 	vfma.f64	d9, d10, d4
 8010f0a:	ee31 7b09 	vadd.f64	d7, d1, d9
 8010f0e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010f12:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010f16:	eeb0 3b46 	vmov.f64	d3, d6
 8010f1a:	ee31 1b47 	vsub.f64	d1, d1, d7
 8010f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010f22:	ee31 9b09 	vadd.f64	d9, d1, d9
 8010f26:	ed9d 6b00 	vldr	d6, [sp]
 8010f2a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 8010f2e:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 8010f32:	193c      	adds	r4, r7, r4
 8010f34:	2c3e      	cmp	r4, #62	; 0x3e
 8010f36:	ee96 3b07 	vfnms.f64	d3, d6, d7
 8010f3a:	eea6 3b09 	vfma.f64	d3, d6, d9
 8010f3e:	d934      	bls.n	8010faa <pow+0x3e2>
 8010f40:	428c      	cmp	r4, r1
 8010f42:	da0d      	bge.n	8010f60 <pow+0x398>
 8010f44:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010f48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010f4c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010f50:	2800      	cmp	r0, #0
 8010f52:	f43f ae87 	beq.w	8010c64 <pow+0x9c>
 8010f56:	eeb1 0b40 	vneg.f64	d0, d0
 8010f5a:	e683      	b.n	8010c64 <pow+0x9c>
 8010f5c:	2000      	movs	r0, #0
 8010f5e:	e771      	b.n	8010e44 <pow+0x27c>
 8010f60:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 8010f64:	d920      	bls.n	8010fa8 <pow+0x3e0>
 8010f66:	2a00      	cmp	r2, #0
 8010f68:	f173 0300 	sbcs.w	r3, r3, #0
 8010f6c:	f6bf af51 	bge.w	8010e12 <pow+0x24a>
 8010f70:	b01b      	add	sp, #108	; 0x6c
 8010f72:	ecbd 8b0a 	vpop	{d8-d12}
 8010f76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f7a:	f000 bee5 	b.w	8011d48 <__math_uflow>
 8010f7e:	bf00      	nop
 8010f80:	00000000 	.word	0x00000000
 8010f84:	43300000 	.word	0x43300000
 8010f88:	fff00000 	.word	0xfff00000
 8010f8c:	3ff00000 	.word	0x3ff00000
 8010f90:	ffe00000 	.word	0xffe00000
 8010f94:	7fe00000 	.word	0x7fe00000
 8010f98:	7fdfffff 	.word	0x7fdfffff
 8010f9c:	fcc00000 	.word	0xfcc00000
 8010fa0:	c0196aab 	.word	0xc0196aab
 8010fa4:	08014c48 	.word	0x08014c48
 8010fa8:	460f      	mov	r7, r1
 8010faa:	4e65      	ldr	r6, [pc, #404]	; (8011140 <pow+0x578>)
 8010fac:	ed9d 4b02 	vldr	d4, [sp, #8]
 8010fb0:	ed96 6b02 	vldr	d6, [r6, #8]
 8010fb4:	ed96 7b00 	vldr	d7, [r6]
 8010fb8:	eeb0 5b46 	vmov.f64	d5, d6
 8010fbc:	eea4 5b07 	vfma.f64	d5, d4, d7
 8010fc0:	ed8d 5b00 	vstr	d5, [sp]
 8010fc4:	ee35 6b46 	vsub.f64	d6, d5, d6
 8010fc8:	eeb0 5b44 	vmov.f64	d5, d4
 8010fcc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010fd0:	ed96 7b04 	vldr	d7, [r6, #16]
 8010fd4:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8010fd8:	eea6 5b07 	vfma.f64	d5, d6, d7
 8010fdc:	eeb0 7b45 	vmov.f64	d7, d5
 8010fe0:	ed96 5b06 	vldr	d5, [r6, #24]
 8010fe4:	1849      	adds	r1, r1, r1
 8010fe6:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 8010fea:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8010fee:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010ff2:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 8010ff6:	ee33 3b07 	vadd.f64	d3, d3, d7
 8010ffa:	ee23 6b03 	vmul.f64	d6, d3, d3
 8010ffe:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 8011002:	ed96 5b08 	vldr	d5, [r6, #32]
 8011006:	ee33 7b07 	vadd.f64	d7, d3, d7
 801100a:	1814      	adds	r4, r2, r0
 801100c:	0365      	lsls	r5, r4, #13
 801100e:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 8011012:	eea3 5b04 	vfma.f64	d5, d3, d4
 8011016:	eea6 7b05 	vfma.f64	d7, d6, d5
 801101a:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 801101e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8011022:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 8011026:	2000      	movs	r0, #0
 8011028:	eb10 0a04 	adds.w	sl, r0, r4
 801102c:	eea3 5b04 	vfma.f64	d5, d3, d4
 8011030:	eb45 0b0c 	adc.w	fp, r5, ip
 8011034:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011038:	2f00      	cmp	r7, #0
 801103a:	d16a      	bne.n	8011112 <pow+0x54a>
 801103c:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 8011040:	4639      	mov	r1, r7
 8011042:	ea50 0301 	orrs.w	r3, r0, r1
 8011046:	f04f 0300 	mov.w	r3, #0
 801104a:	d115      	bne.n	8011078 <pow+0x4b0>
 801104c:	eb1a 0303 	adds.w	r3, sl, r3
 8011050:	ee0b 3a10 	vmov	s22, r3
 8011054:	4b3b      	ldr	r3, [pc, #236]	; (8011144 <pow+0x57c>)
 8011056:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8011128 <pow+0x560>
 801105a:	eb4b 0303 	adc.w	r3, fp, r3
 801105e:	ee0b 3a90 	vmov	s23, r3
 8011062:	eea7 bb0b 	vfma.f64	d11, d7, d11
 8011066:	ee2b 0b00 	vmul.f64	d0, d11, d0
 801106a:	b01b      	add	sp, #108	; 0x6c
 801106c:	ecbd 8b0a 	vpop	{d8-d12}
 8011070:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011074:	f000 bea8 	b.w	8011dc8 <__math_check_oflow>
 8011078:	eb1a 0303 	adds.w	r3, sl, r3
 801107c:	930a      	str	r3, [sp, #40]	; 0x28
 801107e:	4b32      	ldr	r3, [pc, #200]	; (8011148 <pow+0x580>)
 8011080:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011084:	eb4b 0303 	adc.w	r3, fp, r3
 8011088:	930b      	str	r3, [sp, #44]	; 0x2c
 801108a:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 801108e:	ee27 6b05 	vmul.f64	d6, d7, d5
 8011092:	ee35 7b06 	vadd.f64	d7, d5, d6
 8011096:	eeb0 3bc7 	vabs.f64	d3, d7
 801109a:	eeb4 3bc4 	vcmpe.f64	d3, d4
 801109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110a2:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8011130 <pow+0x568>
 80110a6:	d52b      	bpl.n	8011100 <pow+0x538>
 80110a8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80110ac:	ee35 5b47 	vsub.f64	d5, d5, d7
 80110b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110b4:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 80110b8:	ee35 6b06 	vadd.f64	d6, d5, d6
 80110bc:	bf48      	it	mi
 80110be:	eeb0 4b43 	vmovmi.f64	d4, d3
 80110c2:	ee37 3b04 	vadd.f64	d3, d7, d4
 80110c6:	ee34 5b43 	vsub.f64	d5, d4, d3
 80110ca:	ee35 7b07 	vadd.f64	d7, d5, d7
 80110ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 80110d2:	ee37 7b03 	vadd.f64	d7, d7, d3
 80110d6:	ee37 7b44 	vsub.f64	d7, d7, d4
 80110da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80110de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110e2:	d105      	bne.n	80110f0 <pow+0x528>
 80110e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80110e6:	463a      	mov	r2, r7
 80110e8:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80110ec:	ec43 2b17 	vmov	d7, r2, r3
 80110f0:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 80110f4:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 80110f8:	ee26 6b00 	vmul.f64	d6, d6, d0
 80110fc:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 8011100:	ee27 0b00 	vmul.f64	d0, d7, d0
 8011104:	b01b      	add	sp, #108	; 0x6c
 8011106:	ecbd 8b0a 	vpop	{d8-d12}
 801110a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801110e:	f000 be52 	b.w	8011db6 <__math_check_uflow>
 8011112:	ec4b ab10 	vmov	d0, sl, fp
 8011116:	eea7 0b00 	vfma.f64	d0, d7, d0
 801111a:	e5a3      	b.n	8010c64 <pow+0x9c>
 801111c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8011138 <pow+0x570>
 8011120:	e5a0      	b.n	8010c64 <pow+0x9c>
 8011122:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011126:	e59d      	b.n	8010c64 <pow+0x9c>
 8011128:	00000000 	.word	0x00000000
 801112c:	7f000000 	.word	0x7f000000
 8011130:	00000000 	.word	0x00000000
 8011134:	00100000 	.word	0x00100000
	...
 8011140:	08015e30 	.word	0x08015e30
 8011144:	c0f00000 	.word	0xc0f00000
 8011148:	3fe00000 	.word	0x3fe00000
 801114c:	00000000 	.word	0x00000000

08011150 <cos>:
 8011150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011152:	eeb0 7b40 	vmov.f64	d7, d0
 8011156:	ee17 3a90 	vmov	r3, s15
 801115a:	4a1f      	ldr	r2, [pc, #124]	; (80111d8 <cos+0x88>)
 801115c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011160:	4293      	cmp	r3, r2
 8011162:	dc04      	bgt.n	801116e <cos+0x1e>
 8011164:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80111d0 <cos+0x80>
 8011168:	f000 fa8e 	bl	8011688 <__kernel_cos>
 801116c:	e004      	b.n	8011178 <cos+0x28>
 801116e:	4a1b      	ldr	r2, [pc, #108]	; (80111dc <cos+0x8c>)
 8011170:	4293      	cmp	r3, r2
 8011172:	dd04      	ble.n	801117e <cos+0x2e>
 8011174:	ee30 0b40 	vsub.f64	d0, d0, d0
 8011178:	b005      	add	sp, #20
 801117a:	f85d fb04 	ldr.w	pc, [sp], #4
 801117e:	4668      	mov	r0, sp
 8011180:	f000 f89e 	bl	80112c0 <__ieee754_rem_pio2>
 8011184:	f000 0003 	and.w	r0, r0, #3
 8011188:	2801      	cmp	r0, #1
 801118a:	d007      	beq.n	801119c <cos+0x4c>
 801118c:	2802      	cmp	r0, #2
 801118e:	d00e      	beq.n	80111ae <cos+0x5e>
 8011190:	b9a0      	cbnz	r0, 80111bc <cos+0x6c>
 8011192:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011196:	ed9d 0b00 	vldr	d0, [sp]
 801119a:	e7e5      	b.n	8011168 <cos+0x18>
 801119c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80111a0:	ed9d 0b00 	vldr	d0, [sp]
 80111a4:	f000 fd5c 	bl	8011c60 <__kernel_sin>
 80111a8:	eeb1 0b40 	vneg.f64	d0, d0
 80111ac:	e7e4      	b.n	8011178 <cos+0x28>
 80111ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80111b2:	ed9d 0b00 	vldr	d0, [sp]
 80111b6:	f000 fa67 	bl	8011688 <__kernel_cos>
 80111ba:	e7f5      	b.n	80111a8 <cos+0x58>
 80111bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80111c0:	ed9d 0b00 	vldr	d0, [sp]
 80111c4:	2001      	movs	r0, #1
 80111c6:	f000 fd4b 	bl	8011c60 <__kernel_sin>
 80111ca:	e7d5      	b.n	8011178 <cos+0x28>
 80111cc:	f3af 8000 	nop.w
	...
 80111d8:	3fe921fb 	.word	0x3fe921fb
 80111dc:	7fefffff 	.word	0x7fefffff

080111e0 <sin>:
 80111e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111e2:	eeb0 7b40 	vmov.f64	d7, d0
 80111e6:	ee17 3a90 	vmov	r3, s15
 80111ea:	4a1f      	ldr	r2, [pc, #124]	; (8011268 <sin+0x88>)
 80111ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80111f0:	4293      	cmp	r3, r2
 80111f2:	dc05      	bgt.n	8011200 <sin+0x20>
 80111f4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8011260 <sin+0x80>
 80111f8:	2000      	movs	r0, #0
 80111fa:	f000 fd31 	bl	8011c60 <__kernel_sin>
 80111fe:	e004      	b.n	801120a <sin+0x2a>
 8011200:	4a1a      	ldr	r2, [pc, #104]	; (801126c <sin+0x8c>)
 8011202:	4293      	cmp	r3, r2
 8011204:	dd04      	ble.n	8011210 <sin+0x30>
 8011206:	ee30 0b40 	vsub.f64	d0, d0, d0
 801120a:	b005      	add	sp, #20
 801120c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011210:	4668      	mov	r0, sp
 8011212:	f000 f855 	bl	80112c0 <__ieee754_rem_pio2>
 8011216:	f000 0003 	and.w	r0, r0, #3
 801121a:	2801      	cmp	r0, #1
 801121c:	d008      	beq.n	8011230 <sin+0x50>
 801121e:	2802      	cmp	r0, #2
 8011220:	d00d      	beq.n	801123e <sin+0x5e>
 8011222:	b9b0      	cbnz	r0, 8011252 <sin+0x72>
 8011224:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011228:	ed9d 0b00 	vldr	d0, [sp]
 801122c:	2001      	movs	r0, #1
 801122e:	e7e4      	b.n	80111fa <sin+0x1a>
 8011230:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011234:	ed9d 0b00 	vldr	d0, [sp]
 8011238:	f000 fa26 	bl	8011688 <__kernel_cos>
 801123c:	e7e5      	b.n	801120a <sin+0x2a>
 801123e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011242:	ed9d 0b00 	vldr	d0, [sp]
 8011246:	2001      	movs	r0, #1
 8011248:	f000 fd0a 	bl	8011c60 <__kernel_sin>
 801124c:	eeb1 0b40 	vneg.f64	d0, d0
 8011250:	e7db      	b.n	801120a <sin+0x2a>
 8011252:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011256:	ed9d 0b00 	vldr	d0, [sp]
 801125a:	f000 fa15 	bl	8011688 <__kernel_cos>
 801125e:	e7f5      	b.n	801124c <sin+0x6c>
	...
 8011268:	3fe921fb 	.word	0x3fe921fb
 801126c:	7fefffff 	.word	0x7fefffff

08011270 <atan2f>:
 8011270:	f000 b966 	b.w	8011540 <__ieee754_atan2f>

08011274 <sqrtf>:
 8011274:	b508      	push	{r3, lr}
 8011276:	ed2d 8b02 	vpush	{d8}
 801127a:	eeb0 8a40 	vmov.f32	s16, s0
 801127e:	f000 f9fd 	bl	801167c <__ieee754_sqrtf>
 8011282:	4b0d      	ldr	r3, [pc, #52]	; (80112b8 <sqrtf+0x44>)
 8011284:	f993 3000 	ldrsb.w	r3, [r3]
 8011288:	3301      	adds	r3, #1
 801128a:	d011      	beq.n	80112b0 <sqrtf+0x3c>
 801128c:	eeb4 8a48 	vcmp.f32	s16, s16
 8011290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011294:	d60c      	bvs.n	80112b0 <sqrtf+0x3c>
 8011296:	eddf 8a09 	vldr	s17, [pc, #36]	; 80112bc <sqrtf+0x48>
 801129a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112a2:	d505      	bpl.n	80112b0 <sqrtf+0x3c>
 80112a4:	f000 ff92 	bl	80121cc <__errno>
 80112a8:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80112ac:	2321      	movs	r3, #33	; 0x21
 80112ae:	6003      	str	r3, [r0, #0]
 80112b0:	ecbd 8b02 	vpop	{d8}
 80112b4:	bd08      	pop	{r3, pc}
 80112b6:	bf00      	nop
 80112b8:	2400023d 	.word	0x2400023d
 80112bc:	00000000 	.word	0x00000000

080112c0 <__ieee754_rem_pio2>:
 80112c0:	b570      	push	{r4, r5, r6, lr}
 80112c2:	eeb0 7b40 	vmov.f64	d7, d0
 80112c6:	ee17 5a90 	vmov	r5, s15
 80112ca:	4b97      	ldr	r3, [pc, #604]	; (8011528 <__ieee754_rem_pio2+0x268>)
 80112cc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80112d0:	429e      	cmp	r6, r3
 80112d2:	b088      	sub	sp, #32
 80112d4:	4604      	mov	r4, r0
 80112d6:	dc07      	bgt.n	80112e8 <__ieee754_rem_pio2+0x28>
 80112d8:	2200      	movs	r2, #0
 80112da:	2300      	movs	r3, #0
 80112dc:	ed84 0b00 	vstr	d0, [r4]
 80112e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80112e4:	2000      	movs	r0, #0
 80112e6:	e01b      	b.n	8011320 <__ieee754_rem_pio2+0x60>
 80112e8:	4b90      	ldr	r3, [pc, #576]	; (801152c <__ieee754_rem_pio2+0x26c>)
 80112ea:	429e      	cmp	r6, r3
 80112ec:	dc3b      	bgt.n	8011366 <__ieee754_rem_pio2+0xa6>
 80112ee:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80112f2:	2d00      	cmp	r5, #0
 80112f4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80114e8 <__ieee754_rem_pio2+0x228>
 80112f8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80112fc:	dd19      	ble.n	8011332 <__ieee754_rem_pio2+0x72>
 80112fe:	ee30 7b46 	vsub.f64	d7, d0, d6
 8011302:	429e      	cmp	r6, r3
 8011304:	d00e      	beq.n	8011324 <__ieee754_rem_pio2+0x64>
 8011306:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80114f0 <__ieee754_rem_pio2+0x230>
 801130a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801130e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011312:	ed84 5b00 	vstr	d5, [r4]
 8011316:	ee37 7b46 	vsub.f64	d7, d7, d6
 801131a:	ed84 7b02 	vstr	d7, [r4, #8]
 801131e:	2001      	movs	r0, #1
 8011320:	b008      	add	sp, #32
 8011322:	bd70      	pop	{r4, r5, r6, pc}
 8011324:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80114f8 <__ieee754_rem_pio2+0x238>
 8011328:	ee37 7b46 	vsub.f64	d7, d7, d6
 801132c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8011500 <__ieee754_rem_pio2+0x240>
 8011330:	e7eb      	b.n	801130a <__ieee754_rem_pio2+0x4a>
 8011332:	429e      	cmp	r6, r3
 8011334:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011338:	d00e      	beq.n	8011358 <__ieee754_rem_pio2+0x98>
 801133a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 80114f0 <__ieee754_rem_pio2+0x230>
 801133e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8011342:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011346:	ed84 5b00 	vstr	d5, [r4]
 801134a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801134e:	f04f 30ff 	mov.w	r0, #4294967295
 8011352:	ed84 7b02 	vstr	d7, [r4, #8]
 8011356:	e7e3      	b.n	8011320 <__ieee754_rem_pio2+0x60>
 8011358:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80114f8 <__ieee754_rem_pio2+0x238>
 801135c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011360:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8011500 <__ieee754_rem_pio2+0x240>
 8011364:	e7eb      	b.n	801133e <__ieee754_rem_pio2+0x7e>
 8011366:	4b72      	ldr	r3, [pc, #456]	; (8011530 <__ieee754_rem_pio2+0x270>)
 8011368:	429e      	cmp	r6, r3
 801136a:	dc6e      	bgt.n	801144a <__ieee754_rem_pio2+0x18a>
 801136c:	f000 fd40 	bl	8011df0 <fabs>
 8011370:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011374:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8011508 <__ieee754_rem_pio2+0x248>
 8011378:	eea0 7b06 	vfma.f64	d7, d0, d6
 801137c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011380:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8011384:	ee17 0a90 	vmov	r0, s15
 8011388:	eeb1 4b45 	vneg.f64	d4, d5
 801138c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80114e8 <__ieee754_rem_pio2+0x228>
 8011390:	eea5 0b47 	vfms.f64	d0, d5, d7
 8011394:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80114f0 <__ieee754_rem_pio2+0x230>
 8011398:	281f      	cmp	r0, #31
 801139a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801139e:	ee30 6b47 	vsub.f64	d6, d0, d7
 80113a2:	dc08      	bgt.n	80113b6 <__ieee754_rem_pio2+0xf6>
 80113a4:	4b63      	ldr	r3, [pc, #396]	; (8011534 <__ieee754_rem_pio2+0x274>)
 80113a6:	1e42      	subs	r2, r0, #1
 80113a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113ac:	42b3      	cmp	r3, r6
 80113ae:	d002      	beq.n	80113b6 <__ieee754_rem_pio2+0xf6>
 80113b0:	ed84 6b00 	vstr	d6, [r4]
 80113b4:	e024      	b.n	8011400 <__ieee754_rem_pio2+0x140>
 80113b6:	ee16 3a90 	vmov	r3, s13
 80113ba:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80113be:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80113c2:	2b10      	cmp	r3, #16
 80113c4:	ea4f 5226 	mov.w	r2, r6, asr #20
 80113c8:	ddf2      	ble.n	80113b0 <__ieee754_rem_pio2+0xf0>
 80113ca:	eeb0 6b40 	vmov.f64	d6, d0
 80113ce:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80114f8 <__ieee754_rem_pio2+0x238>
 80113d2:	eea4 6b03 	vfma.f64	d6, d4, d3
 80113d6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80113da:	eea4 7b03 	vfma.f64	d7, d4, d3
 80113de:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8011500 <__ieee754_rem_pio2+0x240>
 80113e2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80113e6:	ee36 3b47 	vsub.f64	d3, d6, d7
 80113ea:	ee13 3a90 	vmov	r3, s7
 80113ee:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80113f2:	1ad3      	subs	r3, r2, r3
 80113f4:	2b31      	cmp	r3, #49	; 0x31
 80113f6:	dc17      	bgt.n	8011428 <__ieee754_rem_pio2+0x168>
 80113f8:	eeb0 0b46 	vmov.f64	d0, d6
 80113fc:	ed84 3b00 	vstr	d3, [r4]
 8011400:	ed94 6b00 	vldr	d6, [r4]
 8011404:	2d00      	cmp	r5, #0
 8011406:	ee30 0b46 	vsub.f64	d0, d0, d6
 801140a:	ee30 7b47 	vsub.f64	d7, d0, d7
 801140e:	ed84 7b02 	vstr	d7, [r4, #8]
 8011412:	da85      	bge.n	8011320 <__ieee754_rem_pio2+0x60>
 8011414:	eeb1 6b46 	vneg.f64	d6, d6
 8011418:	ed84 6b00 	vstr	d6, [r4]
 801141c:	eeb1 7b47 	vneg.f64	d7, d7
 8011420:	4240      	negs	r0, r0
 8011422:	ed84 7b02 	vstr	d7, [r4, #8]
 8011426:	e77b      	b.n	8011320 <__ieee754_rem_pio2+0x60>
 8011428:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8011510 <__ieee754_rem_pio2+0x250>
 801142c:	eeb0 0b46 	vmov.f64	d0, d6
 8011430:	eea4 0b03 	vfma.f64	d0, d4, d3
 8011434:	ee36 7b40 	vsub.f64	d7, d6, d0
 8011438:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8011518 <__ieee754_rem_pio2+0x258>
 801143c:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011440:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8011444:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011448:	e7b2      	b.n	80113b0 <__ieee754_rem_pio2+0xf0>
 801144a:	4b3b      	ldr	r3, [pc, #236]	; (8011538 <__ieee754_rem_pio2+0x278>)
 801144c:	429e      	cmp	r6, r3
 801144e:	dd06      	ble.n	801145e <__ieee754_rem_pio2+0x19e>
 8011450:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011454:	ed80 7b02 	vstr	d7, [r0, #8]
 8011458:	ed80 7b00 	vstr	d7, [r0]
 801145c:	e742      	b.n	80112e4 <__ieee754_rem_pio2+0x24>
 801145e:	1532      	asrs	r2, r6, #20
 8011460:	ee10 0a10 	vmov	r0, s0
 8011464:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8011468:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801146c:	ec41 0b17 	vmov	d7, r0, r1
 8011470:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011474:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8011520 <__ieee754_rem_pio2+0x260>
 8011478:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801147c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011480:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011484:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011488:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801148c:	a902      	add	r1, sp, #8
 801148e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011492:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011496:	ed8d 6b04 	vstr	d6, [sp, #16]
 801149a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801149e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80114a2:	2603      	movs	r6, #3
 80114a4:	4608      	mov	r0, r1
 80114a6:	ed91 7b04 	vldr	d7, [r1, #16]
 80114aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80114ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114b2:	4633      	mov	r3, r6
 80114b4:	f1a1 0108 	sub.w	r1, r1, #8
 80114b8:	f106 36ff 	add.w	r6, r6, #4294967295
 80114bc:	d0f3      	beq.n	80114a6 <__ieee754_rem_pio2+0x1e6>
 80114be:	491f      	ldr	r1, [pc, #124]	; (801153c <__ieee754_rem_pio2+0x27c>)
 80114c0:	9101      	str	r1, [sp, #4]
 80114c2:	2102      	movs	r1, #2
 80114c4:	9100      	str	r1, [sp, #0]
 80114c6:	4621      	mov	r1, r4
 80114c8:	f000 f94a 	bl	8011760 <__kernel_rem_pio2>
 80114cc:	2d00      	cmp	r5, #0
 80114ce:	f6bf af27 	bge.w	8011320 <__ieee754_rem_pio2+0x60>
 80114d2:	ed94 7b00 	vldr	d7, [r4]
 80114d6:	eeb1 7b47 	vneg.f64	d7, d7
 80114da:	ed84 7b00 	vstr	d7, [r4]
 80114de:	ed94 7b02 	vldr	d7, [r4, #8]
 80114e2:	e79b      	b.n	801141c <__ieee754_rem_pio2+0x15c>
 80114e4:	f3af 8000 	nop.w
 80114e8:	54400000 	.word	0x54400000
 80114ec:	3ff921fb 	.word	0x3ff921fb
 80114f0:	1a626331 	.word	0x1a626331
 80114f4:	3dd0b461 	.word	0x3dd0b461
 80114f8:	1a600000 	.word	0x1a600000
 80114fc:	3dd0b461 	.word	0x3dd0b461
 8011500:	2e037073 	.word	0x2e037073
 8011504:	3ba3198a 	.word	0x3ba3198a
 8011508:	6dc9c883 	.word	0x6dc9c883
 801150c:	3fe45f30 	.word	0x3fe45f30
 8011510:	2e000000 	.word	0x2e000000
 8011514:	3ba3198a 	.word	0x3ba3198a
 8011518:	252049c1 	.word	0x252049c1
 801151c:	397b839a 	.word	0x397b839a
 8011520:	00000000 	.word	0x00000000
 8011524:	41700000 	.word	0x41700000
 8011528:	3fe921fb 	.word	0x3fe921fb
 801152c:	4002d97b 	.word	0x4002d97b
 8011530:	413921fb 	.word	0x413921fb
 8011534:	08015c90 	.word	0x08015c90
 8011538:	7fefffff 	.word	0x7fefffff
 801153c:	08015d10 	.word	0x08015d10

08011540 <__ieee754_atan2f>:
 8011540:	ee10 2a90 	vmov	r2, s1
 8011544:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8011548:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801154c:	b510      	push	{r4, lr}
 801154e:	eef0 7a40 	vmov.f32	s15, s0
 8011552:	dc06      	bgt.n	8011562 <__ieee754_atan2f+0x22>
 8011554:	ee10 0a10 	vmov	r0, s0
 8011558:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801155c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011560:	dd04      	ble.n	801156c <__ieee754_atan2f+0x2c>
 8011562:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011566:	eeb0 0a67 	vmov.f32	s0, s15
 801156a:	bd10      	pop	{r4, pc}
 801156c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8011570:	d103      	bne.n	801157a <__ieee754_atan2f+0x3a>
 8011572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011576:	f000 bd4d 	b.w	8012014 <atanf>
 801157a:	1794      	asrs	r4, r2, #30
 801157c:	f004 0402 	and.w	r4, r4, #2
 8011580:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011584:	b93b      	cbnz	r3, 8011596 <__ieee754_atan2f+0x56>
 8011586:	2c02      	cmp	r4, #2
 8011588:	d05c      	beq.n	8011644 <__ieee754_atan2f+0x104>
 801158a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8011658 <__ieee754_atan2f+0x118>
 801158e:	2c03      	cmp	r4, #3
 8011590:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8011594:	e7e7      	b.n	8011566 <__ieee754_atan2f+0x26>
 8011596:	b939      	cbnz	r1, 80115a8 <__ieee754_atan2f+0x68>
 8011598:	eddf 7a30 	vldr	s15, [pc, #192]	; 801165c <__ieee754_atan2f+0x11c>
 801159c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8011660 <__ieee754_atan2f+0x120>
 80115a0:	2800      	cmp	r0, #0
 80115a2:	fe67 7a80 	vselge.f32	s15, s15, s0
 80115a6:	e7de      	b.n	8011566 <__ieee754_atan2f+0x26>
 80115a8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80115ac:	d110      	bne.n	80115d0 <__ieee754_atan2f+0x90>
 80115ae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80115b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80115b6:	d107      	bne.n	80115c8 <__ieee754_atan2f+0x88>
 80115b8:	2c02      	cmp	r4, #2
 80115ba:	d846      	bhi.n	801164a <__ieee754_atan2f+0x10a>
 80115bc:	4b29      	ldr	r3, [pc, #164]	; (8011664 <__ieee754_atan2f+0x124>)
 80115be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80115c2:	edd4 7a00 	vldr	s15, [r4]
 80115c6:	e7ce      	b.n	8011566 <__ieee754_atan2f+0x26>
 80115c8:	2c02      	cmp	r4, #2
 80115ca:	d841      	bhi.n	8011650 <__ieee754_atan2f+0x110>
 80115cc:	4b26      	ldr	r3, [pc, #152]	; (8011668 <__ieee754_atan2f+0x128>)
 80115ce:	e7f6      	b.n	80115be <__ieee754_atan2f+0x7e>
 80115d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80115d4:	d0e0      	beq.n	8011598 <__ieee754_atan2f+0x58>
 80115d6:	1a5b      	subs	r3, r3, r1
 80115d8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80115dc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80115e0:	da1a      	bge.n	8011618 <__ieee754_atan2f+0xd8>
 80115e2:	2a00      	cmp	r2, #0
 80115e4:	da01      	bge.n	80115ea <__ieee754_atan2f+0xaa>
 80115e6:	313c      	adds	r1, #60	; 0x3c
 80115e8:	db19      	blt.n	801161e <__ieee754_atan2f+0xde>
 80115ea:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80115ee:	f000 fde5 	bl	80121bc <fabsf>
 80115f2:	f000 fd0f 	bl	8012014 <atanf>
 80115f6:	eef0 7a40 	vmov.f32	s15, s0
 80115fa:	2c01      	cmp	r4, #1
 80115fc:	d012      	beq.n	8011624 <__ieee754_atan2f+0xe4>
 80115fe:	2c02      	cmp	r4, #2
 8011600:	d017      	beq.n	8011632 <__ieee754_atan2f+0xf2>
 8011602:	2c00      	cmp	r4, #0
 8011604:	d0af      	beq.n	8011566 <__ieee754_atan2f+0x26>
 8011606:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801166c <__ieee754_atan2f+0x12c>
 801160a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801160e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8011670 <__ieee754_atan2f+0x130>
 8011612:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011616:	e7a6      	b.n	8011566 <__ieee754_atan2f+0x26>
 8011618:	eddf 7a10 	vldr	s15, [pc, #64]	; 801165c <__ieee754_atan2f+0x11c>
 801161c:	e7ed      	b.n	80115fa <__ieee754_atan2f+0xba>
 801161e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8011674 <__ieee754_atan2f+0x134>
 8011622:	e7ea      	b.n	80115fa <__ieee754_atan2f+0xba>
 8011624:	ee17 3a90 	vmov	r3, s15
 8011628:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801162c:	ee07 3a90 	vmov	s15, r3
 8011630:	e799      	b.n	8011566 <__ieee754_atan2f+0x26>
 8011632:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801166c <__ieee754_atan2f+0x12c>
 8011636:	ee77 7a80 	vadd.f32	s15, s15, s0
 801163a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8011670 <__ieee754_atan2f+0x130>
 801163e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011642:	e790      	b.n	8011566 <__ieee754_atan2f+0x26>
 8011644:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8011670 <__ieee754_atan2f+0x130>
 8011648:	e78d      	b.n	8011566 <__ieee754_atan2f+0x26>
 801164a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8011678 <__ieee754_atan2f+0x138>
 801164e:	e78a      	b.n	8011566 <__ieee754_atan2f+0x26>
 8011650:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011674 <__ieee754_atan2f+0x134>
 8011654:	e787      	b.n	8011566 <__ieee754_atan2f+0x26>
 8011656:	bf00      	nop
 8011658:	c0490fdb 	.word	0xc0490fdb
 801165c:	3fc90fdb 	.word	0x3fc90fdb
 8011660:	bfc90fdb 	.word	0xbfc90fdb
 8011664:	08015e18 	.word	0x08015e18
 8011668:	08015e24 	.word	0x08015e24
 801166c:	33bbbd2e 	.word	0x33bbbd2e
 8011670:	40490fdb 	.word	0x40490fdb
 8011674:	00000000 	.word	0x00000000
 8011678:	3f490fdb 	.word	0x3f490fdb

0801167c <__ieee754_sqrtf>:
 801167c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011680:	4770      	bx	lr
 8011682:	0000      	movs	r0, r0
 8011684:	0000      	movs	r0, r0
	...

08011688 <__kernel_cos>:
 8011688:	ee10 1a90 	vmov	r1, s1
 801168c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011694:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8011698:	da05      	bge.n	80116a6 <__kernel_cos+0x1e>
 801169a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801169e:	ee17 3a90 	vmov	r3, s15
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d03d      	beq.n	8011722 <__kernel_cos+0x9a>
 80116a6:	ee20 3b00 	vmul.f64	d3, d0, d0
 80116aa:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8011728 <__kernel_cos+0xa0>
 80116ae:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011730 <__kernel_cos+0xa8>
 80116b2:	eea3 6b07 	vfma.f64	d6, d3, d7
 80116b6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011738 <__kernel_cos+0xb0>
 80116ba:	eea6 7b03 	vfma.f64	d7, d6, d3
 80116be:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011740 <__kernel_cos+0xb8>
 80116c2:	eea7 6b03 	vfma.f64	d6, d7, d3
 80116c6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011748 <__kernel_cos+0xc0>
 80116ca:	4b23      	ldr	r3, [pc, #140]	; (8011758 <__kernel_cos+0xd0>)
 80116cc:	eea6 7b03 	vfma.f64	d7, d6, d3
 80116d0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8011750 <__kernel_cos+0xc8>
 80116d4:	4299      	cmp	r1, r3
 80116d6:	eea7 6b03 	vfma.f64	d6, d7, d3
 80116da:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80116de:	ee26 5b03 	vmul.f64	d5, d6, d3
 80116e2:	ee23 7b07 	vmul.f64	d7, d3, d7
 80116e6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80116ea:	eea3 6b05 	vfma.f64	d6, d3, d5
 80116ee:	dc04      	bgt.n	80116fa <__kernel_cos+0x72>
 80116f0:	ee37 6b46 	vsub.f64	d6, d7, d6
 80116f4:	ee34 0b46 	vsub.f64	d0, d4, d6
 80116f8:	4770      	bx	lr
 80116fa:	4b18      	ldr	r3, [pc, #96]	; (801175c <__kernel_cos+0xd4>)
 80116fc:	4299      	cmp	r1, r3
 80116fe:	dc0d      	bgt.n	801171c <__kernel_cos+0x94>
 8011700:	2200      	movs	r2, #0
 8011702:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8011706:	ec43 2b15 	vmov	d5, r2, r3
 801170a:	ee34 0b45 	vsub.f64	d0, d4, d5
 801170e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011712:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011716:	ee30 0b47 	vsub.f64	d0, d0, d7
 801171a:	4770      	bx	lr
 801171c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8011720:	e7f3      	b.n	801170a <__kernel_cos+0x82>
 8011722:	eeb0 0b44 	vmov.f64	d0, d4
 8011726:	4770      	bx	lr
 8011728:	be8838d4 	.word	0xbe8838d4
 801172c:	bda8fae9 	.word	0xbda8fae9
 8011730:	bdb4b1c4 	.word	0xbdb4b1c4
 8011734:	3e21ee9e 	.word	0x3e21ee9e
 8011738:	809c52ad 	.word	0x809c52ad
 801173c:	be927e4f 	.word	0xbe927e4f
 8011740:	19cb1590 	.word	0x19cb1590
 8011744:	3efa01a0 	.word	0x3efa01a0
 8011748:	16c15177 	.word	0x16c15177
 801174c:	bf56c16c 	.word	0xbf56c16c
 8011750:	5555554c 	.word	0x5555554c
 8011754:	3fa55555 	.word	0x3fa55555
 8011758:	3fd33332 	.word	0x3fd33332
 801175c:	3fe90000 	.word	0x3fe90000

08011760 <__kernel_rem_pio2>:
 8011760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011764:	ed2d 8b06 	vpush	{d8-d10}
 8011768:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 801176c:	469b      	mov	fp, r3
 801176e:	460f      	mov	r7, r1
 8011770:	4bcf      	ldr	r3, [pc, #828]	; (8011ab0 <__kernel_rem_pio2+0x350>)
 8011772:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8011774:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8011778:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 801177c:	9000      	str	r0, [sp, #0]
 801177e:	f112 0f14 	cmn.w	r2, #20
 8011782:	bfa8      	it	ge
 8011784:	2318      	movge	r3, #24
 8011786:	f10b 31ff 	add.w	r1, fp, #4294967295
 801178a:	bfb8      	it	lt
 801178c:	2300      	movlt	r3, #0
 801178e:	f06f 0417 	mvn.w	r4, #23
 8011792:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8011a98 <__kernel_rem_pio2+0x338>
 8011796:	bfa4      	itt	ge
 8011798:	f1a2 0a03 	subge.w	sl, r2, #3
 801179c:	fb9a f3f3 	sdivge	r3, sl, r3
 80117a0:	fb03 4404 	mla	r4, r3, r4, r4
 80117a4:	1a5d      	subs	r5, r3, r1
 80117a6:	4414      	add	r4, r2
 80117a8:	eb09 0601 	add.w	r6, r9, r1
 80117ac:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 80117b0:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 80117b4:	2200      	movs	r2, #0
 80117b6:	42b2      	cmp	r2, r6
 80117b8:	dd12      	ble.n	80117e0 <__kernel_rem_pio2+0x80>
 80117ba:	aa18      	add	r2, sp, #96	; 0x60
 80117bc:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80117c0:	460e      	mov	r6, r1
 80117c2:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 80117c6:	f1cb 0a01 	rsb	sl, fp, #1
 80117ca:	eb0a 0006 	add.w	r0, sl, r6
 80117ce:	4581      	cmp	r9, r0
 80117d0:	db25      	blt.n	801181e <__kernel_rem_pio2+0xbe>
 80117d2:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8011a98 <__kernel_rem_pio2+0x338>
 80117d6:	f8dd e000 	ldr.w	lr, [sp]
 80117da:	4615      	mov	r5, r2
 80117dc:	2000      	movs	r0, #0
 80117de:	e015      	b.n	801180c <__kernel_rem_pio2+0xac>
 80117e0:	42d5      	cmn	r5, r2
 80117e2:	d409      	bmi.n	80117f8 <__kernel_rem_pio2+0x98>
 80117e4:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 80117e8:	ee07 0a90 	vmov	s15, r0
 80117ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80117f0:	eca8 7b02 	vstmia	r8!, {d7}
 80117f4:	3201      	adds	r2, #1
 80117f6:	e7de      	b.n	80117b6 <__kernel_rem_pio2+0x56>
 80117f8:	eeb0 7b46 	vmov.f64	d7, d6
 80117fc:	e7f8      	b.n	80117f0 <__kernel_rem_pio2+0x90>
 80117fe:	ecbe 5b02 	vldmia	lr!, {d5}
 8011802:	ed95 6b00 	vldr	d6, [r5]
 8011806:	3001      	adds	r0, #1
 8011808:	eea5 7b06 	vfma.f64	d7, d5, d6
 801180c:	4288      	cmp	r0, r1
 801180e:	f1a5 0508 	sub.w	r5, r5, #8
 8011812:	ddf4      	ble.n	80117fe <__kernel_rem_pio2+0x9e>
 8011814:	eca8 7b02 	vstmia	r8!, {d7}
 8011818:	3208      	adds	r2, #8
 801181a:	3601      	adds	r6, #1
 801181c:	e7d5      	b.n	80117ca <__kernel_rem_pio2+0x6a>
 801181e:	aa04      	add	r2, sp, #16
 8011820:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8011aa0 <__kernel_rem_pio2+0x340>
 8011824:	ed9f aba0 	vldr	d10, [pc, #640]	; 8011aa8 <__kernel_rem_pio2+0x348>
 8011828:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801182c:	9201      	str	r2, [sp, #4]
 801182e:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8011832:	464e      	mov	r6, r9
 8011834:	ab90      	add	r3, sp, #576	; 0x240
 8011836:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801183a:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 801183e:	ab04      	add	r3, sp, #16
 8011840:	4618      	mov	r0, r3
 8011842:	4632      	mov	r2, r6
 8011844:	2a00      	cmp	r2, #0
 8011846:	dc4e      	bgt.n	80118e6 <__kernel_rem_pio2+0x186>
 8011848:	4620      	mov	r0, r4
 801184a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 801184e:	f000 fb4f 	bl	8011ef0 <scalbn>
 8011852:	eeb0 8b40 	vmov.f64	d8, d0
 8011856:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801185a:	ee28 0b00 	vmul.f64	d0, d8, d0
 801185e:	f000 fad3 	bl	8011e08 <floor>
 8011862:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8011866:	eea0 8b47 	vfms.f64	d8, d0, d7
 801186a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801186e:	2c00      	cmp	r4, #0
 8011870:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8011874:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8011878:	ee38 8b40 	vsub.f64	d8, d8, d0
 801187c:	ee17 8a90 	vmov	r8, s15
 8011880:	dd46      	ble.n	8011910 <__kernel_rem_pio2+0x1b0>
 8011882:	1e70      	subs	r0, r6, #1
 8011884:	aa04      	add	r2, sp, #16
 8011886:	f1c4 0c18 	rsb	ip, r4, #24
 801188a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 801188e:	fa45 f20c 	asr.w	r2, r5, ip
 8011892:	4490      	add	r8, r2
 8011894:	fa02 f20c 	lsl.w	r2, r2, ip
 8011898:	1aad      	subs	r5, r5, r2
 801189a:	aa04      	add	r2, sp, #16
 801189c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 80118a0:	f1c4 0217 	rsb	r2, r4, #23
 80118a4:	4115      	asrs	r5, r2
 80118a6:	2d00      	cmp	r5, #0
 80118a8:	dd41      	ble.n	801192e <__kernel_rem_pio2+0x1ce>
 80118aa:	f04f 0c00 	mov.w	ip, #0
 80118ae:	f108 0801 	add.w	r8, r8, #1
 80118b2:	4660      	mov	r0, ip
 80118b4:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80118b8:	4566      	cmp	r6, ip
 80118ba:	dc69      	bgt.n	8011990 <__kernel_rem_pio2+0x230>
 80118bc:	2c00      	cmp	r4, #0
 80118be:	dd03      	ble.n	80118c8 <__kernel_rem_pio2+0x168>
 80118c0:	2c01      	cmp	r4, #1
 80118c2:	d076      	beq.n	80119b2 <__kernel_rem_pio2+0x252>
 80118c4:	2c02      	cmp	r4, #2
 80118c6:	d07f      	beq.n	80119c8 <__kernel_rem_pio2+0x268>
 80118c8:	2d02      	cmp	r5, #2
 80118ca:	d130      	bne.n	801192e <__kernel_rem_pio2+0x1ce>
 80118cc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80118d0:	ee30 8b48 	vsub.f64	d8, d0, d8
 80118d4:	b358      	cbz	r0, 801192e <__kernel_rem_pio2+0x1ce>
 80118d6:	4620      	mov	r0, r4
 80118d8:	9102      	str	r1, [sp, #8]
 80118da:	f000 fb09 	bl	8011ef0 <scalbn>
 80118de:	9902      	ldr	r1, [sp, #8]
 80118e0:	ee38 8b40 	vsub.f64	d8, d8, d0
 80118e4:	e023      	b.n	801192e <__kernel_rem_pio2+0x1ce>
 80118e6:	ee20 7b09 	vmul.f64	d7, d0, d9
 80118ea:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80118ee:	3a01      	subs	r2, #1
 80118f0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80118f4:	ad68      	add	r5, sp, #416	; 0x1a0
 80118f6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80118fa:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80118fe:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8011902:	eca0 0a01 	vstmia	r0!, {s0}
 8011906:	ed95 0b00 	vldr	d0, [r5]
 801190a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801190e:	e799      	b.n	8011844 <__kernel_rem_pio2+0xe4>
 8011910:	d105      	bne.n	801191e <__kernel_rem_pio2+0x1be>
 8011912:	1e72      	subs	r2, r6, #1
 8011914:	a804      	add	r0, sp, #16
 8011916:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 801191a:	15ed      	asrs	r5, r5, #23
 801191c:	e7c3      	b.n	80118a6 <__kernel_rem_pio2+0x146>
 801191e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011922:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801192a:	da2f      	bge.n	801198c <__kernel_rem_pio2+0x22c>
 801192c:	2500      	movs	r5, #0
 801192e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011936:	f040 8087 	bne.w	8011a48 <__kernel_rem_pio2+0x2e8>
 801193a:	1e73      	subs	r3, r6, #1
 801193c:	4618      	mov	r0, r3
 801193e:	f04f 0c00 	mov.w	ip, #0
 8011942:	4548      	cmp	r0, r9
 8011944:	da47      	bge.n	80119d6 <__kernel_rem_pio2+0x276>
 8011946:	f1bc 0f00 	cmp.w	ip, #0
 801194a:	d070      	beq.n	8011a2e <__kernel_rem_pio2+0x2ce>
 801194c:	aa04      	add	r2, sp, #16
 801194e:	3c18      	subs	r4, #24
 8011950:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011954:	2a00      	cmp	r2, #0
 8011956:	d075      	beq.n	8011a44 <__kernel_rem_pio2+0x2e4>
 8011958:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801195c:	4620      	mov	r0, r4
 801195e:	9300      	str	r3, [sp, #0]
 8011960:	f000 fac6 	bl	8011ef0 <scalbn>
 8011964:	9b00      	ldr	r3, [sp, #0]
 8011966:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011aa0 <__kernel_rem_pio2+0x340>
 801196a:	461a      	mov	r2, r3
 801196c:	2a00      	cmp	r2, #0
 801196e:	f280 80ac 	bge.w	8011aca <__kernel_rem_pio2+0x36a>
 8011972:	4619      	mov	r1, r3
 8011974:	2000      	movs	r0, #0
 8011976:	2900      	cmp	r1, #0
 8011978:	f2c0 80cd 	blt.w	8011b16 <__kernel_rem_pio2+0x3b6>
 801197c:	aa68      	add	r2, sp, #416	; 0x1a0
 801197e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8011982:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8011a98 <__kernel_rem_pio2+0x338>
 8011986:	4e4b      	ldr	r6, [pc, #300]	; (8011ab4 <__kernel_rem_pio2+0x354>)
 8011988:	2200      	movs	r2, #0
 801198a:	e0b8      	b.n	8011afe <__kernel_rem_pio2+0x39e>
 801198c:	2502      	movs	r5, #2
 801198e:	e78c      	b.n	80118aa <__kernel_rem_pio2+0x14a>
 8011990:	681a      	ldr	r2, [r3, #0]
 8011992:	b948      	cbnz	r0, 80119a8 <__kernel_rem_pio2+0x248>
 8011994:	b11a      	cbz	r2, 801199e <__kernel_rem_pio2+0x23e>
 8011996:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801199a:	601a      	str	r2, [r3, #0]
 801199c:	2201      	movs	r2, #1
 801199e:	f10c 0c01 	add.w	ip, ip, #1
 80119a2:	3304      	adds	r3, #4
 80119a4:	4610      	mov	r0, r2
 80119a6:	e787      	b.n	80118b8 <__kernel_rem_pio2+0x158>
 80119a8:	ebae 0202 	sub.w	r2, lr, r2
 80119ac:	601a      	str	r2, [r3, #0]
 80119ae:	4602      	mov	r2, r0
 80119b0:	e7f5      	b.n	801199e <__kernel_rem_pio2+0x23e>
 80119b2:	1e72      	subs	r2, r6, #1
 80119b4:	ab04      	add	r3, sp, #16
 80119b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119ba:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80119be:	f10d 0c10 	add.w	ip, sp, #16
 80119c2:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 80119c6:	e77f      	b.n	80118c8 <__kernel_rem_pio2+0x168>
 80119c8:	1e72      	subs	r2, r6, #1
 80119ca:	ab04      	add	r3, sp, #16
 80119cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80119d4:	e7f3      	b.n	80119be <__kernel_rem_pio2+0x25e>
 80119d6:	aa04      	add	r2, sp, #16
 80119d8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80119dc:	3801      	subs	r0, #1
 80119de:	ea4c 0c02 	orr.w	ip, ip, r2
 80119e2:	e7ae      	b.n	8011942 <__kernel_rem_pio2+0x1e2>
 80119e4:	3001      	adds	r0, #1
 80119e6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80119ea:	2a00      	cmp	r2, #0
 80119ec:	d0fa      	beq.n	80119e4 <__kernel_rem_pio2+0x284>
 80119ee:	eb06 020b 	add.w	r2, r6, fp
 80119f2:	ad18      	add	r5, sp, #96	; 0x60
 80119f4:	1c73      	adds	r3, r6, #1
 80119f6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80119fa:	4406      	add	r6, r0
 80119fc:	429e      	cmp	r6, r3
 80119fe:	f6ff af19 	blt.w	8011834 <__kernel_rem_pio2+0xd4>
 8011a02:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8011a06:	9d00      	ldr	r5, [sp, #0]
 8011a08:	ee07 0a90 	vmov	s15, r0
 8011a0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011a10:	2000      	movs	r0, #0
 8011a12:	eca2 7b02 	vstmia	r2!, {d7}
 8011a16:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011a98 <__kernel_rem_pio2+0x338>
 8011a1a:	4694      	mov	ip, r2
 8011a1c:	4288      	cmp	r0, r1
 8011a1e:	dd09      	ble.n	8011a34 <__kernel_rem_pio2+0x2d4>
 8011a20:	a868      	add	r0, sp, #416	; 0x1a0
 8011a22:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8011a26:	ed80 7b00 	vstr	d7, [r0]
 8011a2a:	3301      	adds	r3, #1
 8011a2c:	e7e6      	b.n	80119fc <__kernel_rem_pio2+0x29c>
 8011a2e:	9b01      	ldr	r3, [sp, #4]
 8011a30:	2001      	movs	r0, #1
 8011a32:	e7d8      	b.n	80119e6 <__kernel_rem_pio2+0x286>
 8011a34:	ecb5 5b02 	vldmia	r5!, {d5}
 8011a38:	ed3c 6b02 	vldmdb	ip!, {d6}
 8011a3c:	3001      	adds	r0, #1
 8011a3e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011a42:	e7eb      	b.n	8011a1c <__kernel_rem_pio2+0x2bc>
 8011a44:	3b01      	subs	r3, #1
 8011a46:	e781      	b.n	801194c <__kernel_rem_pio2+0x1ec>
 8011a48:	4260      	negs	r0, r4
 8011a4a:	eeb0 0b48 	vmov.f64	d0, d8
 8011a4e:	f000 fa4f 	bl	8011ef0 <scalbn>
 8011a52:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8011aa8 <__kernel_rem_pio2+0x348>
 8011a56:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8011a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a5e:	db2b      	blt.n	8011ab8 <__kernel_rem_pio2+0x358>
 8011a60:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8011aa0 <__kernel_rem_pio2+0x340>
 8011a64:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011a68:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011a6c:	aa04      	add	r2, sp, #16
 8011a6e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8011a72:	eea5 0b46 	vfms.f64	d0, d5, d6
 8011a76:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011a7a:	a904      	add	r1, sp, #16
 8011a7c:	ee10 3a10 	vmov	r3, s0
 8011a80:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8011a84:	ee17 2a10 	vmov	r2, s14
 8011a88:	1c73      	adds	r3, r6, #1
 8011a8a:	3418      	adds	r4, #24
 8011a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011a90:	e762      	b.n	8011958 <__kernel_rem_pio2+0x1f8>
 8011a92:	bf00      	nop
 8011a94:	f3af 8000 	nop.w
	...
 8011aa4:	3e700000 	.word	0x3e700000
 8011aa8:	00000000 	.word	0x00000000
 8011aac:	41700000 	.word	0x41700000
 8011ab0:	080166e0 	.word	0x080166e0
 8011ab4:	080166a0 	.word	0x080166a0
 8011ab8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011abc:	aa04      	add	r2, sp, #16
 8011abe:	ee10 3a10 	vmov	r3, s0
 8011ac2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8011ac6:	4633      	mov	r3, r6
 8011ac8:	e746      	b.n	8011958 <__kernel_rem_pio2+0x1f8>
 8011aca:	a804      	add	r0, sp, #16
 8011acc:	a968      	add	r1, sp, #416	; 0x1a0
 8011ace:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8011ad2:	9000      	str	r0, [sp, #0]
 8011ad4:	ee07 0a90 	vmov	s15, r0
 8011ad8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011adc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011ae0:	3a01      	subs	r2, #1
 8011ae2:	ee27 7b00 	vmul.f64	d7, d7, d0
 8011ae6:	ee20 0b06 	vmul.f64	d0, d0, d6
 8011aea:	ed81 7b00 	vstr	d7, [r1]
 8011aee:	e73d      	b.n	801196c <__kernel_rem_pio2+0x20c>
 8011af0:	ecb6 5b02 	vldmia	r6!, {d5}
 8011af4:	ecb4 6b02 	vldmia	r4!, {d6}
 8011af8:	3201      	adds	r2, #1
 8011afa:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011afe:	454a      	cmp	r2, r9
 8011b00:	dc01      	bgt.n	8011b06 <__kernel_rem_pio2+0x3a6>
 8011b02:	4290      	cmp	r0, r2
 8011b04:	daf4      	bge.n	8011af0 <__kernel_rem_pio2+0x390>
 8011b06:	aa40      	add	r2, sp, #256	; 0x100
 8011b08:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011b0c:	ed82 7b00 	vstr	d7, [r2]
 8011b10:	3901      	subs	r1, #1
 8011b12:	3001      	adds	r0, #1
 8011b14:	e72f      	b.n	8011976 <__kernel_rem_pio2+0x216>
 8011b16:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8011b18:	2a02      	cmp	r2, #2
 8011b1a:	dc0a      	bgt.n	8011b32 <__kernel_rem_pio2+0x3d2>
 8011b1c:	2a00      	cmp	r2, #0
 8011b1e:	dc5a      	bgt.n	8011bd6 <__kernel_rem_pio2+0x476>
 8011b20:	d039      	beq.n	8011b96 <__kernel_rem_pio2+0x436>
 8011b22:	f008 0007 	and.w	r0, r8, #7
 8011b26:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8011b2a:	ecbd 8b06 	vpop	{d8-d10}
 8011b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b32:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8011b34:	2a03      	cmp	r2, #3
 8011b36:	d1f4      	bne.n	8011b22 <__kernel_rem_pio2+0x3c2>
 8011b38:	aa40      	add	r2, sp, #256	; 0x100
 8011b3a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011b3e:	4611      	mov	r1, r2
 8011b40:	4618      	mov	r0, r3
 8011b42:	2800      	cmp	r0, #0
 8011b44:	f1a1 0108 	sub.w	r1, r1, #8
 8011b48:	dc52      	bgt.n	8011bf0 <__kernel_rem_pio2+0x490>
 8011b4a:	4619      	mov	r1, r3
 8011b4c:	2901      	cmp	r1, #1
 8011b4e:	f1a2 0208 	sub.w	r2, r2, #8
 8011b52:	dc5d      	bgt.n	8011c10 <__kernel_rem_pio2+0x4b0>
 8011b54:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8011c58 <__kernel_rem_pio2+0x4f8>
 8011b58:	2b01      	cmp	r3, #1
 8011b5a:	dc69      	bgt.n	8011c30 <__kernel_rem_pio2+0x4d0>
 8011b5c:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8011b60:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8011b64:	2d00      	cmp	r5, #0
 8011b66:	d16c      	bne.n	8011c42 <__kernel_rem_pio2+0x4e2>
 8011b68:	ed87 5b00 	vstr	d5, [r7]
 8011b6c:	ed87 6b02 	vstr	d6, [r7, #8]
 8011b70:	ed87 7b04 	vstr	d7, [r7, #16]
 8011b74:	e7d5      	b.n	8011b22 <__kernel_rem_pio2+0x3c2>
 8011b76:	aa40      	add	r2, sp, #256	; 0x100
 8011b78:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011b7c:	ed92 6b00 	vldr	d6, [r2]
 8011b80:	3b01      	subs	r3, #1
 8011b82:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	daf5      	bge.n	8011b76 <__kernel_rem_pio2+0x416>
 8011b8a:	b10d      	cbz	r5, 8011b90 <__kernel_rem_pio2+0x430>
 8011b8c:	eeb1 7b47 	vneg.f64	d7, d7
 8011b90:	ed87 7b00 	vstr	d7, [r7]
 8011b94:	e7c5      	b.n	8011b22 <__kernel_rem_pio2+0x3c2>
 8011b96:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8011c58 <__kernel_rem_pio2+0x4f8>
 8011b9a:	e7f4      	b.n	8011b86 <__kernel_rem_pio2+0x426>
 8011b9c:	a940      	add	r1, sp, #256	; 0x100
 8011b9e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011ba2:	ed91 7b00 	vldr	d7, [r1]
 8011ba6:	3a01      	subs	r2, #1
 8011ba8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011bac:	2a00      	cmp	r2, #0
 8011bae:	daf5      	bge.n	8011b9c <__kernel_rem_pio2+0x43c>
 8011bb0:	b1ad      	cbz	r5, 8011bde <__kernel_rem_pio2+0x47e>
 8011bb2:	eeb1 7b46 	vneg.f64	d7, d6
 8011bb6:	ed87 7b00 	vstr	d7, [r7]
 8011bba:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8011bbe:	a942      	add	r1, sp, #264	; 0x108
 8011bc0:	2201      	movs	r2, #1
 8011bc2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011bc6:	4293      	cmp	r3, r2
 8011bc8:	da0c      	bge.n	8011be4 <__kernel_rem_pio2+0x484>
 8011bca:	b10d      	cbz	r5, 8011bd0 <__kernel_rem_pio2+0x470>
 8011bcc:	eeb1 7b47 	vneg.f64	d7, d7
 8011bd0:	ed87 7b02 	vstr	d7, [r7, #8]
 8011bd4:	e7a5      	b.n	8011b22 <__kernel_rem_pio2+0x3c2>
 8011bd6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011c58 <__kernel_rem_pio2+0x4f8>
 8011bda:	461a      	mov	r2, r3
 8011bdc:	e7e6      	b.n	8011bac <__kernel_rem_pio2+0x44c>
 8011bde:	eeb0 7b46 	vmov.f64	d7, d6
 8011be2:	e7e8      	b.n	8011bb6 <__kernel_rem_pio2+0x456>
 8011be4:	ecb1 6b02 	vldmia	r1!, {d6}
 8011be8:	3201      	adds	r2, #1
 8011bea:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011bee:	e7ea      	b.n	8011bc6 <__kernel_rem_pio2+0x466>
 8011bf0:	ed91 7b00 	vldr	d7, [r1]
 8011bf4:	ed91 5b02 	vldr	d5, [r1, #8]
 8011bf8:	3801      	subs	r0, #1
 8011bfa:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011bfe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011c02:	ed81 6b00 	vstr	d6, [r1]
 8011c06:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011c0a:	ed81 7b02 	vstr	d7, [r1, #8]
 8011c0e:	e798      	b.n	8011b42 <__kernel_rem_pio2+0x3e2>
 8011c10:	ed92 7b00 	vldr	d7, [r2]
 8011c14:	ed92 5b02 	vldr	d5, [r2, #8]
 8011c18:	3901      	subs	r1, #1
 8011c1a:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011c1e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011c22:	ed82 6b00 	vstr	d6, [r2]
 8011c26:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011c2a:	ed82 7b02 	vstr	d7, [r2, #8]
 8011c2e:	e78d      	b.n	8011b4c <__kernel_rem_pio2+0x3ec>
 8011c30:	aa40      	add	r2, sp, #256	; 0x100
 8011c32:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011c36:	ed92 6b00 	vldr	d6, [r2]
 8011c3a:	3b01      	subs	r3, #1
 8011c3c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011c40:	e78a      	b.n	8011b58 <__kernel_rem_pio2+0x3f8>
 8011c42:	eeb1 5b45 	vneg.f64	d5, d5
 8011c46:	eeb1 6b46 	vneg.f64	d6, d6
 8011c4a:	ed87 5b00 	vstr	d5, [r7]
 8011c4e:	eeb1 7b47 	vneg.f64	d7, d7
 8011c52:	ed87 6b02 	vstr	d6, [r7, #8]
 8011c56:	e78b      	b.n	8011b70 <__kernel_rem_pio2+0x410>
	...

08011c60 <__kernel_sin>:
 8011c60:	ee10 3a90 	vmov	r3, s1
 8011c64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011c68:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011c6c:	da04      	bge.n	8011c78 <__kernel_sin+0x18>
 8011c6e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011c72:	ee17 3a90 	vmov	r3, s15
 8011c76:	b35b      	cbz	r3, 8011cd0 <__kernel_sin+0x70>
 8011c78:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011c7c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8011c80:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011cd8 <__kernel_sin+0x78>
 8011c84:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011ce0 <__kernel_sin+0x80>
 8011c88:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011c8c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011ce8 <__kernel_sin+0x88>
 8011c90:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011c94:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011cf0 <__kernel_sin+0x90>
 8011c98:	eea7 4b06 	vfma.f64	d4, d7, d6
 8011c9c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011cf8 <__kernel_sin+0x98>
 8011ca0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011ca4:	b930      	cbnz	r0, 8011cb4 <__kernel_sin+0x54>
 8011ca6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011d00 <__kernel_sin+0xa0>
 8011caa:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011cae:	eea4 0b05 	vfma.f64	d0, d4, d5
 8011cb2:	4770      	bx	lr
 8011cb4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8011cb8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8011cbc:	eea1 7b04 	vfma.f64	d7, d1, d4
 8011cc0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8011cc4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011d08 <__kernel_sin+0xa8>
 8011cc8:	eea5 1b07 	vfma.f64	d1, d5, d7
 8011ccc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011cd0:	4770      	bx	lr
 8011cd2:	bf00      	nop
 8011cd4:	f3af 8000 	nop.w
 8011cd8:	5acfd57c 	.word	0x5acfd57c
 8011cdc:	3de5d93a 	.word	0x3de5d93a
 8011ce0:	8a2b9ceb 	.word	0x8a2b9ceb
 8011ce4:	be5ae5e6 	.word	0xbe5ae5e6
 8011ce8:	57b1fe7d 	.word	0x57b1fe7d
 8011cec:	3ec71de3 	.word	0x3ec71de3
 8011cf0:	19c161d5 	.word	0x19c161d5
 8011cf4:	bf2a01a0 	.word	0xbf2a01a0
 8011cf8:	1110f8a6 	.word	0x1110f8a6
 8011cfc:	3f811111 	.word	0x3f811111
 8011d00:	55555549 	.word	0x55555549
 8011d04:	bfc55555 	.word	0xbfc55555
 8011d08:	55555549 	.word	0x55555549
 8011d0c:	3fc55555 	.word	0x3fc55555

08011d10 <with_errno>:
 8011d10:	b513      	push	{r0, r1, r4, lr}
 8011d12:	4604      	mov	r4, r0
 8011d14:	ed8d 0b00 	vstr	d0, [sp]
 8011d18:	f000 fa58 	bl	80121cc <__errno>
 8011d1c:	ed9d 0b00 	vldr	d0, [sp]
 8011d20:	6004      	str	r4, [r0, #0]
 8011d22:	b002      	add	sp, #8
 8011d24:	bd10      	pop	{r4, pc}

08011d26 <xflow>:
 8011d26:	b082      	sub	sp, #8
 8011d28:	b158      	cbz	r0, 8011d42 <xflow+0x1c>
 8011d2a:	eeb1 7b40 	vneg.f64	d7, d0
 8011d2e:	ed8d 7b00 	vstr	d7, [sp]
 8011d32:	ed9d 7b00 	vldr	d7, [sp]
 8011d36:	2022      	movs	r0, #34	; 0x22
 8011d38:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011d3c:	b002      	add	sp, #8
 8011d3e:	f7ff bfe7 	b.w	8011d10 <with_errno>
 8011d42:	eeb0 7b40 	vmov.f64	d7, d0
 8011d46:	e7f2      	b.n	8011d2e <xflow+0x8>

08011d48 <__math_uflow>:
 8011d48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011d50 <__math_uflow+0x8>
 8011d4c:	f7ff bfeb 	b.w	8011d26 <xflow>
 8011d50:	00000000 	.word	0x00000000
 8011d54:	10000000 	.word	0x10000000

08011d58 <__math_oflow>:
 8011d58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011d60 <__math_oflow+0x8>
 8011d5c:	f7ff bfe3 	b.w	8011d26 <xflow>
 8011d60:	00000000 	.word	0x00000000
 8011d64:	70000000 	.word	0x70000000

08011d68 <__math_divzero>:
 8011d68:	b082      	sub	sp, #8
 8011d6a:	2800      	cmp	r0, #0
 8011d6c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011d70:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8011d74:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8011d78:	ed8d 7b00 	vstr	d7, [sp]
 8011d7c:	ed9d 0b00 	vldr	d0, [sp]
 8011d80:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8011d90 <__math_divzero+0x28>
 8011d84:	2022      	movs	r0, #34	; 0x22
 8011d86:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8011d8a:	b002      	add	sp, #8
 8011d8c:	f7ff bfc0 	b.w	8011d10 <with_errno>
	...

08011d98 <__math_invalid>:
 8011d98:	eeb0 7b40 	vmov.f64	d7, d0
 8011d9c:	eeb4 7b47 	vcmp.f64	d7, d7
 8011da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011da4:	ee30 6b40 	vsub.f64	d6, d0, d0
 8011da8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8011dac:	d602      	bvs.n	8011db4 <__math_invalid+0x1c>
 8011dae:	2021      	movs	r0, #33	; 0x21
 8011db0:	f7ff bfae 	b.w	8011d10 <with_errno>
 8011db4:	4770      	bx	lr

08011db6 <__math_check_uflow>:
 8011db6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dbe:	d102      	bne.n	8011dc6 <__math_check_uflow+0x10>
 8011dc0:	2022      	movs	r0, #34	; 0x22
 8011dc2:	f7ff bfa5 	b.w	8011d10 <with_errno>
 8011dc6:	4770      	bx	lr

08011dc8 <__math_check_oflow>:
 8011dc8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011de8 <__math_check_oflow+0x20>
 8011dcc:	eeb0 7bc0 	vabs.f64	d7, d0
 8011dd0:	eeb4 7b46 	vcmp.f64	d7, d6
 8011dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dd8:	dd02      	ble.n	8011de0 <__math_check_oflow+0x18>
 8011dda:	2022      	movs	r0, #34	; 0x22
 8011ddc:	f7ff bf98 	b.w	8011d10 <with_errno>
 8011de0:	4770      	bx	lr
 8011de2:	bf00      	nop
 8011de4:	f3af 8000 	nop.w
 8011de8:	ffffffff 	.word	0xffffffff
 8011dec:	7fefffff 	.word	0x7fefffff

08011df0 <fabs>:
 8011df0:	ec51 0b10 	vmov	r0, r1, d0
 8011df4:	ee10 2a10 	vmov	r2, s0
 8011df8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011dfc:	ec43 2b10 	vmov	d0, r2, r3
 8011e00:	4770      	bx	lr
 8011e02:	0000      	movs	r0, r0
 8011e04:	0000      	movs	r0, r0
	...

08011e08 <floor>:
 8011e08:	ee10 1a90 	vmov	r1, s1
 8011e0c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011e10:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8011e14:	2b13      	cmp	r3, #19
 8011e16:	b530      	push	{r4, r5, lr}
 8011e18:	ee10 0a10 	vmov	r0, s0
 8011e1c:	ee10 5a10 	vmov	r5, s0
 8011e20:	dc31      	bgt.n	8011e86 <floor+0x7e>
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	da15      	bge.n	8011e52 <floor+0x4a>
 8011e26:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011ee0 <floor+0xd8>
 8011e2a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011e2e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e36:	dd07      	ble.n	8011e48 <floor+0x40>
 8011e38:	2900      	cmp	r1, #0
 8011e3a:	da4e      	bge.n	8011eda <floor+0xd2>
 8011e3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011e40:	4318      	orrs	r0, r3
 8011e42:	d001      	beq.n	8011e48 <floor+0x40>
 8011e44:	4928      	ldr	r1, [pc, #160]	; (8011ee8 <floor+0xe0>)
 8011e46:	2000      	movs	r0, #0
 8011e48:	460b      	mov	r3, r1
 8011e4a:	4602      	mov	r2, r0
 8011e4c:	ec43 2b10 	vmov	d0, r2, r3
 8011e50:	e020      	b.n	8011e94 <floor+0x8c>
 8011e52:	4a26      	ldr	r2, [pc, #152]	; (8011eec <floor+0xe4>)
 8011e54:	411a      	asrs	r2, r3
 8011e56:	ea01 0402 	and.w	r4, r1, r2
 8011e5a:	4304      	orrs	r4, r0
 8011e5c:	d01a      	beq.n	8011e94 <floor+0x8c>
 8011e5e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011ee0 <floor+0xd8>
 8011e62:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011e66:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e6e:	ddeb      	ble.n	8011e48 <floor+0x40>
 8011e70:	2900      	cmp	r1, #0
 8011e72:	bfbe      	ittt	lt
 8011e74:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011e78:	fa40 f303 	asrlt.w	r3, r0, r3
 8011e7c:	18c9      	addlt	r1, r1, r3
 8011e7e:	ea21 0102 	bic.w	r1, r1, r2
 8011e82:	2000      	movs	r0, #0
 8011e84:	e7e0      	b.n	8011e48 <floor+0x40>
 8011e86:	2b33      	cmp	r3, #51	; 0x33
 8011e88:	dd05      	ble.n	8011e96 <floor+0x8e>
 8011e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011e8e:	d101      	bne.n	8011e94 <floor+0x8c>
 8011e90:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011e94:	bd30      	pop	{r4, r5, pc}
 8011e96:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8011e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8011e9e:	40e2      	lsrs	r2, r4
 8011ea0:	4202      	tst	r2, r0
 8011ea2:	d0f7      	beq.n	8011e94 <floor+0x8c>
 8011ea4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011ee0 <floor+0xd8>
 8011ea8:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011eac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eb4:	ddc8      	ble.n	8011e48 <floor+0x40>
 8011eb6:	2900      	cmp	r1, #0
 8011eb8:	da02      	bge.n	8011ec0 <floor+0xb8>
 8011eba:	2b14      	cmp	r3, #20
 8011ebc:	d103      	bne.n	8011ec6 <floor+0xbe>
 8011ebe:	3101      	adds	r1, #1
 8011ec0:	ea20 0002 	bic.w	r0, r0, r2
 8011ec4:	e7c0      	b.n	8011e48 <floor+0x40>
 8011ec6:	2401      	movs	r4, #1
 8011ec8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011ecc:	fa04 f303 	lsl.w	r3, r4, r3
 8011ed0:	4418      	add	r0, r3
 8011ed2:	42a8      	cmp	r0, r5
 8011ed4:	bf38      	it	cc
 8011ed6:	1909      	addcc	r1, r1, r4
 8011ed8:	e7f2      	b.n	8011ec0 <floor+0xb8>
 8011eda:	2000      	movs	r0, #0
 8011edc:	4601      	mov	r1, r0
 8011ede:	e7b3      	b.n	8011e48 <floor+0x40>
 8011ee0:	8800759c 	.word	0x8800759c
 8011ee4:	7e37e43c 	.word	0x7e37e43c
 8011ee8:	bff00000 	.word	0xbff00000
 8011eec:	000fffff 	.word	0x000fffff

08011ef0 <scalbn>:
 8011ef0:	b082      	sub	sp, #8
 8011ef2:	ed8d 0b00 	vstr	d0, [sp]
 8011ef6:	9b01      	ldr	r3, [sp, #4]
 8011ef8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011efc:	b9a2      	cbnz	r2, 8011f28 <scalbn+0x38>
 8011efe:	9a00      	ldr	r2, [sp, #0]
 8011f00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011f04:	4313      	orrs	r3, r2
 8011f06:	d03a      	beq.n	8011f7e <scalbn+0x8e>
 8011f08:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8011fe0 <scalbn+0xf0>
 8011f0c:	4b40      	ldr	r3, [pc, #256]	; (8012010 <scalbn+0x120>)
 8011f0e:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011f12:	4298      	cmp	r0, r3
 8011f14:	ed8d 7b00 	vstr	d7, [sp]
 8011f18:	da11      	bge.n	8011f3e <scalbn+0x4e>
 8011f1a:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8011fe8 <scalbn+0xf8>
 8011f1e:	ed9d 6b00 	vldr	d6, [sp]
 8011f22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011f26:	e007      	b.n	8011f38 <scalbn+0x48>
 8011f28:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011f2c:	428a      	cmp	r2, r1
 8011f2e:	d10a      	bne.n	8011f46 <scalbn+0x56>
 8011f30:	ed9d 7b00 	vldr	d7, [sp]
 8011f34:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011f38:	ed8d 7b00 	vstr	d7, [sp]
 8011f3c:	e01f      	b.n	8011f7e <scalbn+0x8e>
 8011f3e:	9b01      	ldr	r3, [sp, #4]
 8011f40:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011f44:	3a36      	subs	r2, #54	; 0x36
 8011f46:	4402      	add	r2, r0
 8011f48:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011f4c:	428a      	cmp	r2, r1
 8011f4e:	dd0a      	ble.n	8011f66 <scalbn+0x76>
 8011f50:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8011ff0 <scalbn+0x100>
 8011f54:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8011ff8 <scalbn+0x108>
 8011f58:	eeb0 6b47 	vmov.f64	d6, d7
 8011f5c:	9b01      	ldr	r3, [sp, #4]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011f64:	e7dd      	b.n	8011f22 <scalbn+0x32>
 8011f66:	2a00      	cmp	r2, #0
 8011f68:	dd0d      	ble.n	8011f86 <scalbn+0x96>
 8011f6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011f6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011f72:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011f76:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011f7a:	e9cd 0100 	strd	r0, r1, [sp]
 8011f7e:	ed9d 0b00 	vldr	d0, [sp]
 8011f82:	b002      	add	sp, #8
 8011f84:	4770      	bx	lr
 8011f86:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011f8a:	da18      	bge.n	8011fbe <scalbn+0xce>
 8011f8c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011f90:	4298      	cmp	r0, r3
 8011f92:	9b01      	ldr	r3, [sp, #4]
 8011f94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011f98:	dd09      	ble.n	8011fae <scalbn+0xbe>
 8011f9a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011ff0 <scalbn+0x100>
 8011f9e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8011ff8 <scalbn+0x108>
 8011fa2:	eeb0 6b47 	vmov.f64	d6, d7
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8011fac:	e7b9      	b.n	8011f22 <scalbn+0x32>
 8011fae:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011fe8 <scalbn+0xf8>
 8011fb2:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8012000 <scalbn+0x110>
 8011fb6:	eeb0 6b47 	vmov.f64	d6, d7
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	e7f4      	b.n	8011fa8 <scalbn+0xb8>
 8011fbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011fc2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011fc6:	3236      	adds	r2, #54	; 0x36
 8011fc8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011fcc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011fd0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8012008 <scalbn+0x118>
 8011fd4:	ec41 0b17 	vmov	d7, r0, r1
 8011fd8:	e7a3      	b.n	8011f22 <scalbn+0x32>
 8011fda:	bf00      	nop
 8011fdc:	f3af 8000 	nop.w
 8011fe0:	00000000 	.word	0x00000000
 8011fe4:	43500000 	.word	0x43500000
 8011fe8:	c2f8f359 	.word	0xc2f8f359
 8011fec:	01a56e1f 	.word	0x01a56e1f
 8011ff0:	8800759c 	.word	0x8800759c
 8011ff4:	7e37e43c 	.word	0x7e37e43c
 8011ff8:	8800759c 	.word	0x8800759c
 8011ffc:	fe37e43c 	.word	0xfe37e43c
 8012000:	c2f8f359 	.word	0xc2f8f359
 8012004:	81a56e1f 	.word	0x81a56e1f
 8012008:	00000000 	.word	0x00000000
 801200c:	3c900000 	.word	0x3c900000
 8012010:	ffff3cb0 	.word	0xffff3cb0

08012014 <atanf>:
 8012014:	b538      	push	{r3, r4, r5, lr}
 8012016:	ee10 5a10 	vmov	r5, s0
 801201a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801201e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8012022:	eef0 7a40 	vmov.f32	s15, s0
 8012026:	db0f      	blt.n	8012048 <atanf+0x34>
 8012028:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801202c:	dd04      	ble.n	8012038 <atanf+0x24>
 801202e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012032:	eeb0 0a67 	vmov.f32	s0, s15
 8012036:	bd38      	pop	{r3, r4, r5, pc}
 8012038:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8012170 <atanf+0x15c>
 801203c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8012174 <atanf+0x160>
 8012040:	2d00      	cmp	r5, #0
 8012042:	fe77 7a80 	vselgt.f32	s15, s15, s0
 8012046:	e7f4      	b.n	8012032 <atanf+0x1e>
 8012048:	4b4b      	ldr	r3, [pc, #300]	; (8012178 <atanf+0x164>)
 801204a:	429c      	cmp	r4, r3
 801204c:	dc10      	bgt.n	8012070 <atanf+0x5c>
 801204e:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8012052:	da0a      	bge.n	801206a <atanf+0x56>
 8012054:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801217c <atanf+0x168>
 8012058:	ee30 7a07 	vadd.f32	s14, s0, s14
 801205c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012060:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012068:	dce3      	bgt.n	8012032 <atanf+0x1e>
 801206a:	f04f 33ff 	mov.w	r3, #4294967295
 801206e:	e013      	b.n	8012098 <atanf+0x84>
 8012070:	f000 f8a4 	bl	80121bc <fabsf>
 8012074:	4b42      	ldr	r3, [pc, #264]	; (8012180 <atanf+0x16c>)
 8012076:	429c      	cmp	r4, r3
 8012078:	dc4f      	bgt.n	801211a <atanf+0x106>
 801207a:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801207e:	429c      	cmp	r4, r3
 8012080:	dc41      	bgt.n	8012106 <atanf+0xf2>
 8012082:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012086:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801208a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801208e:	2300      	movs	r3, #0
 8012090:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012094:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012098:	1c5a      	adds	r2, r3, #1
 801209a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801209e:	eddf 5a39 	vldr	s11, [pc, #228]	; 8012184 <atanf+0x170>
 80120a2:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8012188 <atanf+0x174>
 80120a6:	ed9f 5a39 	vldr	s10, [pc, #228]	; 801218c <atanf+0x178>
 80120aa:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8012190 <atanf+0x17c>
 80120ae:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80120b2:	eea7 6a25 	vfma.f32	s12, s14, s11
 80120b6:	eddf 5a37 	vldr	s11, [pc, #220]	; 8012194 <atanf+0x180>
 80120ba:	eee6 5a07 	vfma.f32	s11, s12, s14
 80120be:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8012198 <atanf+0x184>
 80120c2:	eea5 6a87 	vfma.f32	s12, s11, s14
 80120c6:	eddf 5a35 	vldr	s11, [pc, #212]	; 801219c <atanf+0x188>
 80120ca:	eee6 5a07 	vfma.f32	s11, s12, s14
 80120ce:	ed9f 6a34 	vldr	s12, [pc, #208]	; 80121a0 <atanf+0x18c>
 80120d2:	eea5 6a87 	vfma.f32	s12, s11, s14
 80120d6:	eddf 5a33 	vldr	s11, [pc, #204]	; 80121a4 <atanf+0x190>
 80120da:	eee7 5a05 	vfma.f32	s11, s14, s10
 80120de:	ed9f 5a32 	vldr	s10, [pc, #200]	; 80121a8 <atanf+0x194>
 80120e2:	eea5 5a87 	vfma.f32	s10, s11, s14
 80120e6:	eddf 5a31 	vldr	s11, [pc, #196]	; 80121ac <atanf+0x198>
 80120ea:	eee5 5a07 	vfma.f32	s11, s10, s14
 80120ee:	eea5 0a87 	vfma.f32	s0, s11, s14
 80120f2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80120f6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80120fa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80120fe:	d121      	bne.n	8012144 <atanf+0x130>
 8012100:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012104:	e795      	b.n	8012032 <atanf+0x1e>
 8012106:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801210a:	ee30 7a67 	vsub.f32	s14, s0, s15
 801210e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012112:	2301      	movs	r3, #1
 8012114:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012118:	e7be      	b.n	8012098 <atanf+0x84>
 801211a:	4b25      	ldr	r3, [pc, #148]	; (80121b0 <atanf+0x19c>)
 801211c:	429c      	cmp	r4, r3
 801211e:	dc0b      	bgt.n	8012138 <atanf+0x124>
 8012120:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8012124:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012128:	eea0 7a27 	vfma.f32	s14, s0, s15
 801212c:	2302      	movs	r3, #2
 801212e:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012136:	e7af      	b.n	8012098 <atanf+0x84>
 8012138:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801213c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012140:	2303      	movs	r3, #3
 8012142:	e7a9      	b.n	8012098 <atanf+0x84>
 8012144:	4a1b      	ldr	r2, [pc, #108]	; (80121b4 <atanf+0x1a0>)
 8012146:	491c      	ldr	r1, [pc, #112]	; (80121b8 <atanf+0x1a4>)
 8012148:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801214c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012150:	ed93 7a00 	vldr	s14, [r3]
 8012154:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012158:	2d00      	cmp	r5, #0
 801215a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801215e:	ed92 0a00 	vldr	s0, [r2]
 8012162:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012166:	bfb8      	it	lt
 8012168:	eef1 7a67 	vneglt.f32	s15, s15
 801216c:	e761      	b.n	8012032 <atanf+0x1e>
 801216e:	bf00      	nop
 8012170:	3fc90fdb 	.word	0x3fc90fdb
 8012174:	bfc90fdb 	.word	0xbfc90fdb
 8012178:	3edfffff 	.word	0x3edfffff
 801217c:	7149f2ca 	.word	0x7149f2ca
 8012180:	3f97ffff 	.word	0x3f97ffff
 8012184:	3c8569d7 	.word	0x3c8569d7
 8012188:	3d4bda59 	.word	0x3d4bda59
 801218c:	bd15a221 	.word	0xbd15a221
 8012190:	be4ccccd 	.word	0xbe4ccccd
 8012194:	3d886b35 	.word	0x3d886b35
 8012198:	3dba2e6e 	.word	0x3dba2e6e
 801219c:	3e124925 	.word	0x3e124925
 80121a0:	3eaaaaab 	.word	0x3eaaaaab
 80121a4:	bd6ef16b 	.word	0xbd6ef16b
 80121a8:	bd9d8795 	.word	0xbd9d8795
 80121ac:	bde38e38 	.word	0xbde38e38
 80121b0:	401bffff 	.word	0x401bffff
 80121b4:	080166f0 	.word	0x080166f0
 80121b8:	08016700 	.word	0x08016700

080121bc <fabsf>:
 80121bc:	ee10 3a10 	vmov	r3, s0
 80121c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80121c4:	ee00 3a10 	vmov	s0, r3
 80121c8:	4770      	bx	lr
	...

080121cc <__errno>:
 80121cc:	4b01      	ldr	r3, [pc, #4]	; (80121d4 <__errno+0x8>)
 80121ce:	6818      	ldr	r0, [r3, #0]
 80121d0:	4770      	bx	lr
 80121d2:	bf00      	nop
 80121d4:	24000240 	.word	0x24000240

080121d8 <__libc_init_array>:
 80121d8:	b570      	push	{r4, r5, r6, lr}
 80121da:	4d0d      	ldr	r5, [pc, #52]	; (8012210 <__libc_init_array+0x38>)
 80121dc:	4c0d      	ldr	r4, [pc, #52]	; (8012214 <__libc_init_array+0x3c>)
 80121de:	1b64      	subs	r4, r4, r5
 80121e0:	10a4      	asrs	r4, r4, #2
 80121e2:	2600      	movs	r6, #0
 80121e4:	42a6      	cmp	r6, r4
 80121e6:	d109      	bne.n	80121fc <__libc_init_array+0x24>
 80121e8:	4d0b      	ldr	r5, [pc, #44]	; (8012218 <__libc_init_array+0x40>)
 80121ea:	4c0c      	ldr	r4, [pc, #48]	; (801221c <__libc_init_array+0x44>)
 80121ec:	f002 fcd4 	bl	8014b98 <_init>
 80121f0:	1b64      	subs	r4, r4, r5
 80121f2:	10a4      	asrs	r4, r4, #2
 80121f4:	2600      	movs	r6, #0
 80121f6:	42a6      	cmp	r6, r4
 80121f8:	d105      	bne.n	8012206 <__libc_init_array+0x2e>
 80121fa:	bd70      	pop	{r4, r5, r6, pc}
 80121fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8012200:	4798      	blx	r3
 8012202:	3601      	adds	r6, #1
 8012204:	e7ee      	b.n	80121e4 <__libc_init_array+0xc>
 8012206:	f855 3b04 	ldr.w	r3, [r5], #4
 801220a:	4798      	blx	r3
 801220c:	3601      	adds	r6, #1
 801220e:	e7f2      	b.n	80121f6 <__libc_init_array+0x1e>
 8012210:	08016afc 	.word	0x08016afc
 8012214:	08016afc 	.word	0x08016afc
 8012218:	08016afc 	.word	0x08016afc
 801221c:	08016b04 	.word	0x08016b04

08012220 <memset>:
 8012220:	4402      	add	r2, r0
 8012222:	4603      	mov	r3, r0
 8012224:	4293      	cmp	r3, r2
 8012226:	d100      	bne.n	801222a <memset+0xa>
 8012228:	4770      	bx	lr
 801222a:	f803 1b01 	strb.w	r1, [r3], #1
 801222e:	e7f9      	b.n	8012224 <memset+0x4>

08012230 <__cvt>:
 8012230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012232:	ed2d 8b02 	vpush	{d8}
 8012236:	eeb0 8b40 	vmov.f64	d8, d0
 801223a:	b085      	sub	sp, #20
 801223c:	4617      	mov	r7, r2
 801223e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012240:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012242:	ee18 2a90 	vmov	r2, s17
 8012246:	f025 0520 	bic.w	r5, r5, #32
 801224a:	2a00      	cmp	r2, #0
 801224c:	bfb6      	itet	lt
 801224e:	222d      	movlt	r2, #45	; 0x2d
 8012250:	2200      	movge	r2, #0
 8012252:	eeb1 8b40 	vneglt.f64	d8, d0
 8012256:	2d46      	cmp	r5, #70	; 0x46
 8012258:	460c      	mov	r4, r1
 801225a:	701a      	strb	r2, [r3, #0]
 801225c:	d004      	beq.n	8012268 <__cvt+0x38>
 801225e:	2d45      	cmp	r5, #69	; 0x45
 8012260:	d100      	bne.n	8012264 <__cvt+0x34>
 8012262:	3401      	adds	r4, #1
 8012264:	2102      	movs	r1, #2
 8012266:	e000      	b.n	801226a <__cvt+0x3a>
 8012268:	2103      	movs	r1, #3
 801226a:	ab03      	add	r3, sp, #12
 801226c:	9301      	str	r3, [sp, #4]
 801226e:	ab02      	add	r3, sp, #8
 8012270:	9300      	str	r3, [sp, #0]
 8012272:	4622      	mov	r2, r4
 8012274:	4633      	mov	r3, r6
 8012276:	eeb0 0b48 	vmov.f64	d0, d8
 801227a:	f000 fddd 	bl	8012e38 <_dtoa_r>
 801227e:	2d47      	cmp	r5, #71	; 0x47
 8012280:	d109      	bne.n	8012296 <__cvt+0x66>
 8012282:	07fb      	lsls	r3, r7, #31
 8012284:	d407      	bmi.n	8012296 <__cvt+0x66>
 8012286:	9b03      	ldr	r3, [sp, #12]
 8012288:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801228a:	1a1b      	subs	r3, r3, r0
 801228c:	6013      	str	r3, [r2, #0]
 801228e:	b005      	add	sp, #20
 8012290:	ecbd 8b02 	vpop	{d8}
 8012294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012296:	2d46      	cmp	r5, #70	; 0x46
 8012298:	eb00 0204 	add.w	r2, r0, r4
 801229c:	d10c      	bne.n	80122b8 <__cvt+0x88>
 801229e:	7803      	ldrb	r3, [r0, #0]
 80122a0:	2b30      	cmp	r3, #48	; 0x30
 80122a2:	d107      	bne.n	80122b4 <__cvt+0x84>
 80122a4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80122a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122ac:	bf1c      	itt	ne
 80122ae:	f1c4 0401 	rsbne	r4, r4, #1
 80122b2:	6034      	strne	r4, [r6, #0]
 80122b4:	6833      	ldr	r3, [r6, #0]
 80122b6:	441a      	add	r2, r3
 80122b8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80122bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122c0:	bf08      	it	eq
 80122c2:	9203      	streq	r2, [sp, #12]
 80122c4:	2130      	movs	r1, #48	; 0x30
 80122c6:	9b03      	ldr	r3, [sp, #12]
 80122c8:	4293      	cmp	r3, r2
 80122ca:	d2dc      	bcs.n	8012286 <__cvt+0x56>
 80122cc:	1c5c      	adds	r4, r3, #1
 80122ce:	9403      	str	r4, [sp, #12]
 80122d0:	7019      	strb	r1, [r3, #0]
 80122d2:	e7f8      	b.n	80122c6 <__cvt+0x96>

080122d4 <__exponent>:
 80122d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122d6:	4603      	mov	r3, r0
 80122d8:	2900      	cmp	r1, #0
 80122da:	bfb8      	it	lt
 80122dc:	4249      	neglt	r1, r1
 80122de:	f803 2b02 	strb.w	r2, [r3], #2
 80122e2:	bfb4      	ite	lt
 80122e4:	222d      	movlt	r2, #45	; 0x2d
 80122e6:	222b      	movge	r2, #43	; 0x2b
 80122e8:	2909      	cmp	r1, #9
 80122ea:	7042      	strb	r2, [r0, #1]
 80122ec:	dd2a      	ble.n	8012344 <__exponent+0x70>
 80122ee:	f10d 0407 	add.w	r4, sp, #7
 80122f2:	46a4      	mov	ip, r4
 80122f4:	270a      	movs	r7, #10
 80122f6:	46a6      	mov	lr, r4
 80122f8:	460a      	mov	r2, r1
 80122fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80122fe:	fb07 1516 	mls	r5, r7, r6, r1
 8012302:	3530      	adds	r5, #48	; 0x30
 8012304:	2a63      	cmp	r2, #99	; 0x63
 8012306:	f104 34ff 	add.w	r4, r4, #4294967295
 801230a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801230e:	4631      	mov	r1, r6
 8012310:	dcf1      	bgt.n	80122f6 <__exponent+0x22>
 8012312:	3130      	adds	r1, #48	; 0x30
 8012314:	f1ae 0502 	sub.w	r5, lr, #2
 8012318:	f804 1c01 	strb.w	r1, [r4, #-1]
 801231c:	1c44      	adds	r4, r0, #1
 801231e:	4629      	mov	r1, r5
 8012320:	4561      	cmp	r1, ip
 8012322:	d30a      	bcc.n	801233a <__exponent+0x66>
 8012324:	f10d 0209 	add.w	r2, sp, #9
 8012328:	eba2 020e 	sub.w	r2, r2, lr
 801232c:	4565      	cmp	r5, ip
 801232e:	bf88      	it	hi
 8012330:	2200      	movhi	r2, #0
 8012332:	4413      	add	r3, r2
 8012334:	1a18      	subs	r0, r3, r0
 8012336:	b003      	add	sp, #12
 8012338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801233a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801233e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012342:	e7ed      	b.n	8012320 <__exponent+0x4c>
 8012344:	2330      	movs	r3, #48	; 0x30
 8012346:	3130      	adds	r1, #48	; 0x30
 8012348:	7083      	strb	r3, [r0, #2]
 801234a:	70c1      	strb	r1, [r0, #3]
 801234c:	1d03      	adds	r3, r0, #4
 801234e:	e7f1      	b.n	8012334 <__exponent+0x60>

08012350 <_printf_float>:
 8012350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012354:	b08b      	sub	sp, #44	; 0x2c
 8012356:	460c      	mov	r4, r1
 8012358:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801235c:	4616      	mov	r6, r2
 801235e:	461f      	mov	r7, r3
 8012360:	4605      	mov	r5, r0
 8012362:	f001 fca3 	bl	8013cac <_localeconv_r>
 8012366:	f8d0 b000 	ldr.w	fp, [r0]
 801236a:	4658      	mov	r0, fp
 801236c:	f7ed ffb8 	bl	80002e0 <strlen>
 8012370:	2300      	movs	r3, #0
 8012372:	9308      	str	r3, [sp, #32]
 8012374:	f8d8 3000 	ldr.w	r3, [r8]
 8012378:	f894 9018 	ldrb.w	r9, [r4, #24]
 801237c:	6822      	ldr	r2, [r4, #0]
 801237e:	3307      	adds	r3, #7
 8012380:	f023 0307 	bic.w	r3, r3, #7
 8012384:	f103 0108 	add.w	r1, r3, #8
 8012388:	f8c8 1000 	str.w	r1, [r8]
 801238c:	4682      	mov	sl, r0
 801238e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012392:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8012396:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80125f8 <_printf_float+0x2a8>
 801239a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801239e:	eeb0 6bc0 	vabs.f64	d6, d0
 80123a2:	eeb4 6b47 	vcmp.f64	d6, d7
 80123a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123aa:	dd24      	ble.n	80123f6 <_printf_float+0xa6>
 80123ac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80123b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123b4:	d502      	bpl.n	80123bc <_printf_float+0x6c>
 80123b6:	232d      	movs	r3, #45	; 0x2d
 80123b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80123bc:	4b90      	ldr	r3, [pc, #576]	; (8012600 <_printf_float+0x2b0>)
 80123be:	4891      	ldr	r0, [pc, #580]	; (8012604 <_printf_float+0x2b4>)
 80123c0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80123c4:	bf94      	ite	ls
 80123c6:	4698      	movls	r8, r3
 80123c8:	4680      	movhi	r8, r0
 80123ca:	2303      	movs	r3, #3
 80123cc:	6123      	str	r3, [r4, #16]
 80123ce:	f022 0204 	bic.w	r2, r2, #4
 80123d2:	2300      	movs	r3, #0
 80123d4:	6022      	str	r2, [r4, #0]
 80123d6:	9304      	str	r3, [sp, #16]
 80123d8:	9700      	str	r7, [sp, #0]
 80123da:	4633      	mov	r3, r6
 80123dc:	aa09      	add	r2, sp, #36	; 0x24
 80123de:	4621      	mov	r1, r4
 80123e0:	4628      	mov	r0, r5
 80123e2:	f000 f9d3 	bl	801278c <_printf_common>
 80123e6:	3001      	adds	r0, #1
 80123e8:	f040 808a 	bne.w	8012500 <_printf_float+0x1b0>
 80123ec:	f04f 30ff 	mov.w	r0, #4294967295
 80123f0:	b00b      	add	sp, #44	; 0x2c
 80123f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123f6:	eeb4 0b40 	vcmp.f64	d0, d0
 80123fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123fe:	d709      	bvc.n	8012414 <_printf_float+0xc4>
 8012400:	ee10 3a90 	vmov	r3, s1
 8012404:	2b00      	cmp	r3, #0
 8012406:	bfbc      	itt	lt
 8012408:	232d      	movlt	r3, #45	; 0x2d
 801240a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801240e:	487e      	ldr	r0, [pc, #504]	; (8012608 <_printf_float+0x2b8>)
 8012410:	4b7e      	ldr	r3, [pc, #504]	; (801260c <_printf_float+0x2bc>)
 8012412:	e7d5      	b.n	80123c0 <_printf_float+0x70>
 8012414:	6863      	ldr	r3, [r4, #4]
 8012416:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801241a:	9104      	str	r1, [sp, #16]
 801241c:	1c59      	adds	r1, r3, #1
 801241e:	d13c      	bne.n	801249a <_printf_float+0x14a>
 8012420:	2306      	movs	r3, #6
 8012422:	6063      	str	r3, [r4, #4]
 8012424:	2300      	movs	r3, #0
 8012426:	9303      	str	r3, [sp, #12]
 8012428:	ab08      	add	r3, sp, #32
 801242a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801242e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012432:	ab07      	add	r3, sp, #28
 8012434:	6861      	ldr	r1, [r4, #4]
 8012436:	9300      	str	r3, [sp, #0]
 8012438:	6022      	str	r2, [r4, #0]
 801243a:	f10d 031b 	add.w	r3, sp, #27
 801243e:	4628      	mov	r0, r5
 8012440:	f7ff fef6 	bl	8012230 <__cvt>
 8012444:	9b04      	ldr	r3, [sp, #16]
 8012446:	9907      	ldr	r1, [sp, #28]
 8012448:	2b47      	cmp	r3, #71	; 0x47
 801244a:	4680      	mov	r8, r0
 801244c:	d108      	bne.n	8012460 <_printf_float+0x110>
 801244e:	1cc8      	adds	r0, r1, #3
 8012450:	db02      	blt.n	8012458 <_printf_float+0x108>
 8012452:	6863      	ldr	r3, [r4, #4]
 8012454:	4299      	cmp	r1, r3
 8012456:	dd41      	ble.n	80124dc <_printf_float+0x18c>
 8012458:	f1a9 0902 	sub.w	r9, r9, #2
 801245c:	fa5f f989 	uxtb.w	r9, r9
 8012460:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012464:	d820      	bhi.n	80124a8 <_printf_float+0x158>
 8012466:	3901      	subs	r1, #1
 8012468:	464a      	mov	r2, r9
 801246a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801246e:	9107      	str	r1, [sp, #28]
 8012470:	f7ff ff30 	bl	80122d4 <__exponent>
 8012474:	9a08      	ldr	r2, [sp, #32]
 8012476:	9004      	str	r0, [sp, #16]
 8012478:	1813      	adds	r3, r2, r0
 801247a:	2a01      	cmp	r2, #1
 801247c:	6123      	str	r3, [r4, #16]
 801247e:	dc02      	bgt.n	8012486 <_printf_float+0x136>
 8012480:	6822      	ldr	r2, [r4, #0]
 8012482:	07d2      	lsls	r2, r2, #31
 8012484:	d501      	bpl.n	801248a <_printf_float+0x13a>
 8012486:	3301      	adds	r3, #1
 8012488:	6123      	str	r3, [r4, #16]
 801248a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d0a2      	beq.n	80123d8 <_printf_float+0x88>
 8012492:	232d      	movs	r3, #45	; 0x2d
 8012494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012498:	e79e      	b.n	80123d8 <_printf_float+0x88>
 801249a:	9904      	ldr	r1, [sp, #16]
 801249c:	2947      	cmp	r1, #71	; 0x47
 801249e:	d1c1      	bne.n	8012424 <_printf_float+0xd4>
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d1bf      	bne.n	8012424 <_printf_float+0xd4>
 80124a4:	2301      	movs	r3, #1
 80124a6:	e7bc      	b.n	8012422 <_printf_float+0xd2>
 80124a8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80124ac:	d118      	bne.n	80124e0 <_printf_float+0x190>
 80124ae:	2900      	cmp	r1, #0
 80124b0:	6863      	ldr	r3, [r4, #4]
 80124b2:	dd0b      	ble.n	80124cc <_printf_float+0x17c>
 80124b4:	6121      	str	r1, [r4, #16]
 80124b6:	b913      	cbnz	r3, 80124be <_printf_float+0x16e>
 80124b8:	6822      	ldr	r2, [r4, #0]
 80124ba:	07d0      	lsls	r0, r2, #31
 80124bc:	d502      	bpl.n	80124c4 <_printf_float+0x174>
 80124be:	3301      	adds	r3, #1
 80124c0:	440b      	add	r3, r1
 80124c2:	6123      	str	r3, [r4, #16]
 80124c4:	2300      	movs	r3, #0
 80124c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80124c8:	9304      	str	r3, [sp, #16]
 80124ca:	e7de      	b.n	801248a <_printf_float+0x13a>
 80124cc:	b913      	cbnz	r3, 80124d4 <_printf_float+0x184>
 80124ce:	6822      	ldr	r2, [r4, #0]
 80124d0:	07d2      	lsls	r2, r2, #31
 80124d2:	d501      	bpl.n	80124d8 <_printf_float+0x188>
 80124d4:	3302      	adds	r3, #2
 80124d6:	e7f4      	b.n	80124c2 <_printf_float+0x172>
 80124d8:	2301      	movs	r3, #1
 80124da:	e7f2      	b.n	80124c2 <_printf_float+0x172>
 80124dc:	f04f 0967 	mov.w	r9, #103	; 0x67
 80124e0:	9b08      	ldr	r3, [sp, #32]
 80124e2:	4299      	cmp	r1, r3
 80124e4:	db05      	blt.n	80124f2 <_printf_float+0x1a2>
 80124e6:	6823      	ldr	r3, [r4, #0]
 80124e8:	6121      	str	r1, [r4, #16]
 80124ea:	07d8      	lsls	r0, r3, #31
 80124ec:	d5ea      	bpl.n	80124c4 <_printf_float+0x174>
 80124ee:	1c4b      	adds	r3, r1, #1
 80124f0:	e7e7      	b.n	80124c2 <_printf_float+0x172>
 80124f2:	2900      	cmp	r1, #0
 80124f4:	bfd4      	ite	le
 80124f6:	f1c1 0202 	rsble	r2, r1, #2
 80124fa:	2201      	movgt	r2, #1
 80124fc:	4413      	add	r3, r2
 80124fe:	e7e0      	b.n	80124c2 <_printf_float+0x172>
 8012500:	6823      	ldr	r3, [r4, #0]
 8012502:	055a      	lsls	r2, r3, #21
 8012504:	d407      	bmi.n	8012516 <_printf_float+0x1c6>
 8012506:	6923      	ldr	r3, [r4, #16]
 8012508:	4642      	mov	r2, r8
 801250a:	4631      	mov	r1, r6
 801250c:	4628      	mov	r0, r5
 801250e:	47b8      	blx	r7
 8012510:	3001      	adds	r0, #1
 8012512:	d12a      	bne.n	801256a <_printf_float+0x21a>
 8012514:	e76a      	b.n	80123ec <_printf_float+0x9c>
 8012516:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801251a:	f240 80e2 	bls.w	80126e2 <_printf_float+0x392>
 801251e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012522:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801252a:	d133      	bne.n	8012594 <_printf_float+0x244>
 801252c:	4a38      	ldr	r2, [pc, #224]	; (8012610 <_printf_float+0x2c0>)
 801252e:	2301      	movs	r3, #1
 8012530:	4631      	mov	r1, r6
 8012532:	4628      	mov	r0, r5
 8012534:	47b8      	blx	r7
 8012536:	3001      	adds	r0, #1
 8012538:	f43f af58 	beq.w	80123ec <_printf_float+0x9c>
 801253c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012540:	429a      	cmp	r2, r3
 8012542:	db02      	blt.n	801254a <_printf_float+0x1fa>
 8012544:	6823      	ldr	r3, [r4, #0]
 8012546:	07d8      	lsls	r0, r3, #31
 8012548:	d50f      	bpl.n	801256a <_printf_float+0x21a>
 801254a:	4653      	mov	r3, sl
 801254c:	465a      	mov	r2, fp
 801254e:	4631      	mov	r1, r6
 8012550:	4628      	mov	r0, r5
 8012552:	47b8      	blx	r7
 8012554:	3001      	adds	r0, #1
 8012556:	f43f af49 	beq.w	80123ec <_printf_float+0x9c>
 801255a:	f04f 0800 	mov.w	r8, #0
 801255e:	f104 091a 	add.w	r9, r4, #26
 8012562:	9b08      	ldr	r3, [sp, #32]
 8012564:	3b01      	subs	r3, #1
 8012566:	4543      	cmp	r3, r8
 8012568:	dc09      	bgt.n	801257e <_printf_float+0x22e>
 801256a:	6823      	ldr	r3, [r4, #0]
 801256c:	079b      	lsls	r3, r3, #30
 801256e:	f100 8108 	bmi.w	8012782 <_printf_float+0x432>
 8012572:	68e0      	ldr	r0, [r4, #12]
 8012574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012576:	4298      	cmp	r0, r3
 8012578:	bfb8      	it	lt
 801257a:	4618      	movlt	r0, r3
 801257c:	e738      	b.n	80123f0 <_printf_float+0xa0>
 801257e:	2301      	movs	r3, #1
 8012580:	464a      	mov	r2, r9
 8012582:	4631      	mov	r1, r6
 8012584:	4628      	mov	r0, r5
 8012586:	47b8      	blx	r7
 8012588:	3001      	adds	r0, #1
 801258a:	f43f af2f 	beq.w	80123ec <_printf_float+0x9c>
 801258e:	f108 0801 	add.w	r8, r8, #1
 8012592:	e7e6      	b.n	8012562 <_printf_float+0x212>
 8012594:	9b07      	ldr	r3, [sp, #28]
 8012596:	2b00      	cmp	r3, #0
 8012598:	dc3c      	bgt.n	8012614 <_printf_float+0x2c4>
 801259a:	4a1d      	ldr	r2, [pc, #116]	; (8012610 <_printf_float+0x2c0>)
 801259c:	2301      	movs	r3, #1
 801259e:	4631      	mov	r1, r6
 80125a0:	4628      	mov	r0, r5
 80125a2:	47b8      	blx	r7
 80125a4:	3001      	adds	r0, #1
 80125a6:	f43f af21 	beq.w	80123ec <_printf_float+0x9c>
 80125aa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80125ae:	4313      	orrs	r3, r2
 80125b0:	d102      	bne.n	80125b8 <_printf_float+0x268>
 80125b2:	6823      	ldr	r3, [r4, #0]
 80125b4:	07d9      	lsls	r1, r3, #31
 80125b6:	d5d8      	bpl.n	801256a <_printf_float+0x21a>
 80125b8:	4653      	mov	r3, sl
 80125ba:	465a      	mov	r2, fp
 80125bc:	4631      	mov	r1, r6
 80125be:	4628      	mov	r0, r5
 80125c0:	47b8      	blx	r7
 80125c2:	3001      	adds	r0, #1
 80125c4:	f43f af12 	beq.w	80123ec <_printf_float+0x9c>
 80125c8:	f04f 0900 	mov.w	r9, #0
 80125cc:	f104 0a1a 	add.w	sl, r4, #26
 80125d0:	9b07      	ldr	r3, [sp, #28]
 80125d2:	425b      	negs	r3, r3
 80125d4:	454b      	cmp	r3, r9
 80125d6:	dc01      	bgt.n	80125dc <_printf_float+0x28c>
 80125d8:	9b08      	ldr	r3, [sp, #32]
 80125da:	e795      	b.n	8012508 <_printf_float+0x1b8>
 80125dc:	2301      	movs	r3, #1
 80125de:	4652      	mov	r2, sl
 80125e0:	4631      	mov	r1, r6
 80125e2:	4628      	mov	r0, r5
 80125e4:	47b8      	blx	r7
 80125e6:	3001      	adds	r0, #1
 80125e8:	f43f af00 	beq.w	80123ec <_printf_float+0x9c>
 80125ec:	f109 0901 	add.w	r9, r9, #1
 80125f0:	e7ee      	b.n	80125d0 <_printf_float+0x280>
 80125f2:	bf00      	nop
 80125f4:	f3af 8000 	nop.w
 80125f8:	ffffffff 	.word	0xffffffff
 80125fc:	7fefffff 	.word	0x7fefffff
 8012600:	08016714 	.word	0x08016714
 8012604:	08016718 	.word	0x08016718
 8012608:	08016720 	.word	0x08016720
 801260c:	0801671c 	.word	0x0801671c
 8012610:	08016724 	.word	0x08016724
 8012614:	9a08      	ldr	r2, [sp, #32]
 8012616:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012618:	429a      	cmp	r2, r3
 801261a:	bfa8      	it	ge
 801261c:	461a      	movge	r2, r3
 801261e:	2a00      	cmp	r2, #0
 8012620:	4691      	mov	r9, r2
 8012622:	dc38      	bgt.n	8012696 <_printf_float+0x346>
 8012624:	2300      	movs	r3, #0
 8012626:	9305      	str	r3, [sp, #20]
 8012628:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801262c:	f104 021a 	add.w	r2, r4, #26
 8012630:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012632:	9905      	ldr	r1, [sp, #20]
 8012634:	9304      	str	r3, [sp, #16]
 8012636:	eba3 0309 	sub.w	r3, r3, r9
 801263a:	428b      	cmp	r3, r1
 801263c:	dc33      	bgt.n	80126a6 <_printf_float+0x356>
 801263e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012642:	429a      	cmp	r2, r3
 8012644:	db3c      	blt.n	80126c0 <_printf_float+0x370>
 8012646:	6823      	ldr	r3, [r4, #0]
 8012648:	07da      	lsls	r2, r3, #31
 801264a:	d439      	bmi.n	80126c0 <_printf_float+0x370>
 801264c:	9a08      	ldr	r2, [sp, #32]
 801264e:	9b04      	ldr	r3, [sp, #16]
 8012650:	9907      	ldr	r1, [sp, #28]
 8012652:	1ad3      	subs	r3, r2, r3
 8012654:	eba2 0901 	sub.w	r9, r2, r1
 8012658:	4599      	cmp	r9, r3
 801265a:	bfa8      	it	ge
 801265c:	4699      	movge	r9, r3
 801265e:	f1b9 0f00 	cmp.w	r9, #0
 8012662:	dc35      	bgt.n	80126d0 <_printf_float+0x380>
 8012664:	f04f 0800 	mov.w	r8, #0
 8012668:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801266c:	f104 0a1a 	add.w	sl, r4, #26
 8012670:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012674:	1a9b      	subs	r3, r3, r2
 8012676:	eba3 0309 	sub.w	r3, r3, r9
 801267a:	4543      	cmp	r3, r8
 801267c:	f77f af75 	ble.w	801256a <_printf_float+0x21a>
 8012680:	2301      	movs	r3, #1
 8012682:	4652      	mov	r2, sl
 8012684:	4631      	mov	r1, r6
 8012686:	4628      	mov	r0, r5
 8012688:	47b8      	blx	r7
 801268a:	3001      	adds	r0, #1
 801268c:	f43f aeae 	beq.w	80123ec <_printf_float+0x9c>
 8012690:	f108 0801 	add.w	r8, r8, #1
 8012694:	e7ec      	b.n	8012670 <_printf_float+0x320>
 8012696:	4613      	mov	r3, r2
 8012698:	4631      	mov	r1, r6
 801269a:	4642      	mov	r2, r8
 801269c:	4628      	mov	r0, r5
 801269e:	47b8      	blx	r7
 80126a0:	3001      	adds	r0, #1
 80126a2:	d1bf      	bne.n	8012624 <_printf_float+0x2d4>
 80126a4:	e6a2      	b.n	80123ec <_printf_float+0x9c>
 80126a6:	2301      	movs	r3, #1
 80126a8:	4631      	mov	r1, r6
 80126aa:	4628      	mov	r0, r5
 80126ac:	9204      	str	r2, [sp, #16]
 80126ae:	47b8      	blx	r7
 80126b0:	3001      	adds	r0, #1
 80126b2:	f43f ae9b 	beq.w	80123ec <_printf_float+0x9c>
 80126b6:	9b05      	ldr	r3, [sp, #20]
 80126b8:	9a04      	ldr	r2, [sp, #16]
 80126ba:	3301      	adds	r3, #1
 80126bc:	9305      	str	r3, [sp, #20]
 80126be:	e7b7      	b.n	8012630 <_printf_float+0x2e0>
 80126c0:	4653      	mov	r3, sl
 80126c2:	465a      	mov	r2, fp
 80126c4:	4631      	mov	r1, r6
 80126c6:	4628      	mov	r0, r5
 80126c8:	47b8      	blx	r7
 80126ca:	3001      	adds	r0, #1
 80126cc:	d1be      	bne.n	801264c <_printf_float+0x2fc>
 80126ce:	e68d      	b.n	80123ec <_printf_float+0x9c>
 80126d0:	9a04      	ldr	r2, [sp, #16]
 80126d2:	464b      	mov	r3, r9
 80126d4:	4442      	add	r2, r8
 80126d6:	4631      	mov	r1, r6
 80126d8:	4628      	mov	r0, r5
 80126da:	47b8      	blx	r7
 80126dc:	3001      	adds	r0, #1
 80126de:	d1c1      	bne.n	8012664 <_printf_float+0x314>
 80126e0:	e684      	b.n	80123ec <_printf_float+0x9c>
 80126e2:	9a08      	ldr	r2, [sp, #32]
 80126e4:	2a01      	cmp	r2, #1
 80126e6:	dc01      	bgt.n	80126ec <_printf_float+0x39c>
 80126e8:	07db      	lsls	r3, r3, #31
 80126ea:	d537      	bpl.n	801275c <_printf_float+0x40c>
 80126ec:	2301      	movs	r3, #1
 80126ee:	4642      	mov	r2, r8
 80126f0:	4631      	mov	r1, r6
 80126f2:	4628      	mov	r0, r5
 80126f4:	47b8      	blx	r7
 80126f6:	3001      	adds	r0, #1
 80126f8:	f43f ae78 	beq.w	80123ec <_printf_float+0x9c>
 80126fc:	4653      	mov	r3, sl
 80126fe:	465a      	mov	r2, fp
 8012700:	4631      	mov	r1, r6
 8012702:	4628      	mov	r0, r5
 8012704:	47b8      	blx	r7
 8012706:	3001      	adds	r0, #1
 8012708:	f43f ae70 	beq.w	80123ec <_printf_float+0x9c>
 801270c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012710:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012718:	d01b      	beq.n	8012752 <_printf_float+0x402>
 801271a:	9b08      	ldr	r3, [sp, #32]
 801271c:	f108 0201 	add.w	r2, r8, #1
 8012720:	3b01      	subs	r3, #1
 8012722:	4631      	mov	r1, r6
 8012724:	4628      	mov	r0, r5
 8012726:	47b8      	blx	r7
 8012728:	3001      	adds	r0, #1
 801272a:	d10e      	bne.n	801274a <_printf_float+0x3fa>
 801272c:	e65e      	b.n	80123ec <_printf_float+0x9c>
 801272e:	2301      	movs	r3, #1
 8012730:	464a      	mov	r2, r9
 8012732:	4631      	mov	r1, r6
 8012734:	4628      	mov	r0, r5
 8012736:	47b8      	blx	r7
 8012738:	3001      	adds	r0, #1
 801273a:	f43f ae57 	beq.w	80123ec <_printf_float+0x9c>
 801273e:	f108 0801 	add.w	r8, r8, #1
 8012742:	9b08      	ldr	r3, [sp, #32]
 8012744:	3b01      	subs	r3, #1
 8012746:	4543      	cmp	r3, r8
 8012748:	dcf1      	bgt.n	801272e <_printf_float+0x3de>
 801274a:	9b04      	ldr	r3, [sp, #16]
 801274c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012750:	e6db      	b.n	801250a <_printf_float+0x1ba>
 8012752:	f04f 0800 	mov.w	r8, #0
 8012756:	f104 091a 	add.w	r9, r4, #26
 801275a:	e7f2      	b.n	8012742 <_printf_float+0x3f2>
 801275c:	2301      	movs	r3, #1
 801275e:	4642      	mov	r2, r8
 8012760:	e7df      	b.n	8012722 <_printf_float+0x3d2>
 8012762:	2301      	movs	r3, #1
 8012764:	464a      	mov	r2, r9
 8012766:	4631      	mov	r1, r6
 8012768:	4628      	mov	r0, r5
 801276a:	47b8      	blx	r7
 801276c:	3001      	adds	r0, #1
 801276e:	f43f ae3d 	beq.w	80123ec <_printf_float+0x9c>
 8012772:	f108 0801 	add.w	r8, r8, #1
 8012776:	68e3      	ldr	r3, [r4, #12]
 8012778:	9909      	ldr	r1, [sp, #36]	; 0x24
 801277a:	1a5b      	subs	r3, r3, r1
 801277c:	4543      	cmp	r3, r8
 801277e:	dcf0      	bgt.n	8012762 <_printf_float+0x412>
 8012780:	e6f7      	b.n	8012572 <_printf_float+0x222>
 8012782:	f04f 0800 	mov.w	r8, #0
 8012786:	f104 0919 	add.w	r9, r4, #25
 801278a:	e7f4      	b.n	8012776 <_printf_float+0x426>

0801278c <_printf_common>:
 801278c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012790:	4616      	mov	r6, r2
 8012792:	4699      	mov	r9, r3
 8012794:	688a      	ldr	r2, [r1, #8]
 8012796:	690b      	ldr	r3, [r1, #16]
 8012798:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801279c:	4293      	cmp	r3, r2
 801279e:	bfb8      	it	lt
 80127a0:	4613      	movlt	r3, r2
 80127a2:	6033      	str	r3, [r6, #0]
 80127a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80127a8:	4607      	mov	r7, r0
 80127aa:	460c      	mov	r4, r1
 80127ac:	b10a      	cbz	r2, 80127b2 <_printf_common+0x26>
 80127ae:	3301      	adds	r3, #1
 80127b0:	6033      	str	r3, [r6, #0]
 80127b2:	6823      	ldr	r3, [r4, #0]
 80127b4:	0699      	lsls	r1, r3, #26
 80127b6:	bf42      	ittt	mi
 80127b8:	6833      	ldrmi	r3, [r6, #0]
 80127ba:	3302      	addmi	r3, #2
 80127bc:	6033      	strmi	r3, [r6, #0]
 80127be:	6825      	ldr	r5, [r4, #0]
 80127c0:	f015 0506 	ands.w	r5, r5, #6
 80127c4:	d106      	bne.n	80127d4 <_printf_common+0x48>
 80127c6:	f104 0a19 	add.w	sl, r4, #25
 80127ca:	68e3      	ldr	r3, [r4, #12]
 80127cc:	6832      	ldr	r2, [r6, #0]
 80127ce:	1a9b      	subs	r3, r3, r2
 80127d0:	42ab      	cmp	r3, r5
 80127d2:	dc26      	bgt.n	8012822 <_printf_common+0x96>
 80127d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80127d8:	1e13      	subs	r3, r2, #0
 80127da:	6822      	ldr	r2, [r4, #0]
 80127dc:	bf18      	it	ne
 80127de:	2301      	movne	r3, #1
 80127e0:	0692      	lsls	r2, r2, #26
 80127e2:	d42b      	bmi.n	801283c <_printf_common+0xb0>
 80127e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80127e8:	4649      	mov	r1, r9
 80127ea:	4638      	mov	r0, r7
 80127ec:	47c0      	blx	r8
 80127ee:	3001      	adds	r0, #1
 80127f0:	d01e      	beq.n	8012830 <_printf_common+0xa4>
 80127f2:	6823      	ldr	r3, [r4, #0]
 80127f4:	68e5      	ldr	r5, [r4, #12]
 80127f6:	6832      	ldr	r2, [r6, #0]
 80127f8:	f003 0306 	and.w	r3, r3, #6
 80127fc:	2b04      	cmp	r3, #4
 80127fe:	bf08      	it	eq
 8012800:	1aad      	subeq	r5, r5, r2
 8012802:	68a3      	ldr	r3, [r4, #8]
 8012804:	6922      	ldr	r2, [r4, #16]
 8012806:	bf0c      	ite	eq
 8012808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801280c:	2500      	movne	r5, #0
 801280e:	4293      	cmp	r3, r2
 8012810:	bfc4      	itt	gt
 8012812:	1a9b      	subgt	r3, r3, r2
 8012814:	18ed      	addgt	r5, r5, r3
 8012816:	2600      	movs	r6, #0
 8012818:	341a      	adds	r4, #26
 801281a:	42b5      	cmp	r5, r6
 801281c:	d11a      	bne.n	8012854 <_printf_common+0xc8>
 801281e:	2000      	movs	r0, #0
 8012820:	e008      	b.n	8012834 <_printf_common+0xa8>
 8012822:	2301      	movs	r3, #1
 8012824:	4652      	mov	r2, sl
 8012826:	4649      	mov	r1, r9
 8012828:	4638      	mov	r0, r7
 801282a:	47c0      	blx	r8
 801282c:	3001      	adds	r0, #1
 801282e:	d103      	bne.n	8012838 <_printf_common+0xac>
 8012830:	f04f 30ff 	mov.w	r0, #4294967295
 8012834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012838:	3501      	adds	r5, #1
 801283a:	e7c6      	b.n	80127ca <_printf_common+0x3e>
 801283c:	18e1      	adds	r1, r4, r3
 801283e:	1c5a      	adds	r2, r3, #1
 8012840:	2030      	movs	r0, #48	; 0x30
 8012842:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012846:	4422      	add	r2, r4
 8012848:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801284c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012850:	3302      	adds	r3, #2
 8012852:	e7c7      	b.n	80127e4 <_printf_common+0x58>
 8012854:	2301      	movs	r3, #1
 8012856:	4622      	mov	r2, r4
 8012858:	4649      	mov	r1, r9
 801285a:	4638      	mov	r0, r7
 801285c:	47c0      	blx	r8
 801285e:	3001      	adds	r0, #1
 8012860:	d0e6      	beq.n	8012830 <_printf_common+0xa4>
 8012862:	3601      	adds	r6, #1
 8012864:	e7d9      	b.n	801281a <_printf_common+0x8e>
	...

08012868 <_printf_i>:
 8012868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801286c:	460c      	mov	r4, r1
 801286e:	4691      	mov	r9, r2
 8012870:	7e27      	ldrb	r7, [r4, #24]
 8012872:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012874:	2f78      	cmp	r7, #120	; 0x78
 8012876:	4680      	mov	r8, r0
 8012878:	469a      	mov	sl, r3
 801287a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801287e:	d807      	bhi.n	8012890 <_printf_i+0x28>
 8012880:	2f62      	cmp	r7, #98	; 0x62
 8012882:	d80a      	bhi.n	801289a <_printf_i+0x32>
 8012884:	2f00      	cmp	r7, #0
 8012886:	f000 80d8 	beq.w	8012a3a <_printf_i+0x1d2>
 801288a:	2f58      	cmp	r7, #88	; 0x58
 801288c:	f000 80a3 	beq.w	80129d6 <_printf_i+0x16e>
 8012890:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012894:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012898:	e03a      	b.n	8012910 <_printf_i+0xa8>
 801289a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801289e:	2b15      	cmp	r3, #21
 80128a0:	d8f6      	bhi.n	8012890 <_printf_i+0x28>
 80128a2:	a001      	add	r0, pc, #4	; (adr r0, 80128a8 <_printf_i+0x40>)
 80128a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80128a8:	08012901 	.word	0x08012901
 80128ac:	08012915 	.word	0x08012915
 80128b0:	08012891 	.word	0x08012891
 80128b4:	08012891 	.word	0x08012891
 80128b8:	08012891 	.word	0x08012891
 80128bc:	08012891 	.word	0x08012891
 80128c0:	08012915 	.word	0x08012915
 80128c4:	08012891 	.word	0x08012891
 80128c8:	08012891 	.word	0x08012891
 80128cc:	08012891 	.word	0x08012891
 80128d0:	08012891 	.word	0x08012891
 80128d4:	08012a21 	.word	0x08012a21
 80128d8:	08012945 	.word	0x08012945
 80128dc:	08012a03 	.word	0x08012a03
 80128e0:	08012891 	.word	0x08012891
 80128e4:	08012891 	.word	0x08012891
 80128e8:	08012a43 	.word	0x08012a43
 80128ec:	08012891 	.word	0x08012891
 80128f0:	08012945 	.word	0x08012945
 80128f4:	08012891 	.word	0x08012891
 80128f8:	08012891 	.word	0x08012891
 80128fc:	08012a0b 	.word	0x08012a0b
 8012900:	680b      	ldr	r3, [r1, #0]
 8012902:	1d1a      	adds	r2, r3, #4
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	600a      	str	r2, [r1, #0]
 8012908:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801290c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012910:	2301      	movs	r3, #1
 8012912:	e0a3      	b.n	8012a5c <_printf_i+0x1f4>
 8012914:	6825      	ldr	r5, [r4, #0]
 8012916:	6808      	ldr	r0, [r1, #0]
 8012918:	062e      	lsls	r6, r5, #24
 801291a:	f100 0304 	add.w	r3, r0, #4
 801291e:	d50a      	bpl.n	8012936 <_printf_i+0xce>
 8012920:	6805      	ldr	r5, [r0, #0]
 8012922:	600b      	str	r3, [r1, #0]
 8012924:	2d00      	cmp	r5, #0
 8012926:	da03      	bge.n	8012930 <_printf_i+0xc8>
 8012928:	232d      	movs	r3, #45	; 0x2d
 801292a:	426d      	negs	r5, r5
 801292c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012930:	485e      	ldr	r0, [pc, #376]	; (8012aac <_printf_i+0x244>)
 8012932:	230a      	movs	r3, #10
 8012934:	e019      	b.n	801296a <_printf_i+0x102>
 8012936:	f015 0f40 	tst.w	r5, #64	; 0x40
 801293a:	6805      	ldr	r5, [r0, #0]
 801293c:	600b      	str	r3, [r1, #0]
 801293e:	bf18      	it	ne
 8012940:	b22d      	sxthne	r5, r5
 8012942:	e7ef      	b.n	8012924 <_printf_i+0xbc>
 8012944:	680b      	ldr	r3, [r1, #0]
 8012946:	6825      	ldr	r5, [r4, #0]
 8012948:	1d18      	adds	r0, r3, #4
 801294a:	6008      	str	r0, [r1, #0]
 801294c:	0628      	lsls	r0, r5, #24
 801294e:	d501      	bpl.n	8012954 <_printf_i+0xec>
 8012950:	681d      	ldr	r5, [r3, #0]
 8012952:	e002      	b.n	801295a <_printf_i+0xf2>
 8012954:	0669      	lsls	r1, r5, #25
 8012956:	d5fb      	bpl.n	8012950 <_printf_i+0xe8>
 8012958:	881d      	ldrh	r5, [r3, #0]
 801295a:	4854      	ldr	r0, [pc, #336]	; (8012aac <_printf_i+0x244>)
 801295c:	2f6f      	cmp	r7, #111	; 0x6f
 801295e:	bf0c      	ite	eq
 8012960:	2308      	moveq	r3, #8
 8012962:	230a      	movne	r3, #10
 8012964:	2100      	movs	r1, #0
 8012966:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801296a:	6866      	ldr	r6, [r4, #4]
 801296c:	60a6      	str	r6, [r4, #8]
 801296e:	2e00      	cmp	r6, #0
 8012970:	bfa2      	ittt	ge
 8012972:	6821      	ldrge	r1, [r4, #0]
 8012974:	f021 0104 	bicge.w	r1, r1, #4
 8012978:	6021      	strge	r1, [r4, #0]
 801297a:	b90d      	cbnz	r5, 8012980 <_printf_i+0x118>
 801297c:	2e00      	cmp	r6, #0
 801297e:	d04d      	beq.n	8012a1c <_printf_i+0x1b4>
 8012980:	4616      	mov	r6, r2
 8012982:	fbb5 f1f3 	udiv	r1, r5, r3
 8012986:	fb03 5711 	mls	r7, r3, r1, r5
 801298a:	5dc7      	ldrb	r7, [r0, r7]
 801298c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012990:	462f      	mov	r7, r5
 8012992:	42bb      	cmp	r3, r7
 8012994:	460d      	mov	r5, r1
 8012996:	d9f4      	bls.n	8012982 <_printf_i+0x11a>
 8012998:	2b08      	cmp	r3, #8
 801299a:	d10b      	bne.n	80129b4 <_printf_i+0x14c>
 801299c:	6823      	ldr	r3, [r4, #0]
 801299e:	07df      	lsls	r7, r3, #31
 80129a0:	d508      	bpl.n	80129b4 <_printf_i+0x14c>
 80129a2:	6923      	ldr	r3, [r4, #16]
 80129a4:	6861      	ldr	r1, [r4, #4]
 80129a6:	4299      	cmp	r1, r3
 80129a8:	bfde      	ittt	le
 80129aa:	2330      	movle	r3, #48	; 0x30
 80129ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80129b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80129b4:	1b92      	subs	r2, r2, r6
 80129b6:	6122      	str	r2, [r4, #16]
 80129b8:	f8cd a000 	str.w	sl, [sp]
 80129bc:	464b      	mov	r3, r9
 80129be:	aa03      	add	r2, sp, #12
 80129c0:	4621      	mov	r1, r4
 80129c2:	4640      	mov	r0, r8
 80129c4:	f7ff fee2 	bl	801278c <_printf_common>
 80129c8:	3001      	adds	r0, #1
 80129ca:	d14c      	bne.n	8012a66 <_printf_i+0x1fe>
 80129cc:	f04f 30ff 	mov.w	r0, #4294967295
 80129d0:	b004      	add	sp, #16
 80129d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129d6:	4835      	ldr	r0, [pc, #212]	; (8012aac <_printf_i+0x244>)
 80129d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80129dc:	6823      	ldr	r3, [r4, #0]
 80129de:	680e      	ldr	r6, [r1, #0]
 80129e0:	061f      	lsls	r7, r3, #24
 80129e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80129e6:	600e      	str	r6, [r1, #0]
 80129e8:	d514      	bpl.n	8012a14 <_printf_i+0x1ac>
 80129ea:	07d9      	lsls	r1, r3, #31
 80129ec:	bf44      	itt	mi
 80129ee:	f043 0320 	orrmi.w	r3, r3, #32
 80129f2:	6023      	strmi	r3, [r4, #0]
 80129f4:	b91d      	cbnz	r5, 80129fe <_printf_i+0x196>
 80129f6:	6823      	ldr	r3, [r4, #0]
 80129f8:	f023 0320 	bic.w	r3, r3, #32
 80129fc:	6023      	str	r3, [r4, #0]
 80129fe:	2310      	movs	r3, #16
 8012a00:	e7b0      	b.n	8012964 <_printf_i+0xfc>
 8012a02:	6823      	ldr	r3, [r4, #0]
 8012a04:	f043 0320 	orr.w	r3, r3, #32
 8012a08:	6023      	str	r3, [r4, #0]
 8012a0a:	2378      	movs	r3, #120	; 0x78
 8012a0c:	4828      	ldr	r0, [pc, #160]	; (8012ab0 <_printf_i+0x248>)
 8012a0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012a12:	e7e3      	b.n	80129dc <_printf_i+0x174>
 8012a14:	065e      	lsls	r6, r3, #25
 8012a16:	bf48      	it	mi
 8012a18:	b2ad      	uxthmi	r5, r5
 8012a1a:	e7e6      	b.n	80129ea <_printf_i+0x182>
 8012a1c:	4616      	mov	r6, r2
 8012a1e:	e7bb      	b.n	8012998 <_printf_i+0x130>
 8012a20:	680b      	ldr	r3, [r1, #0]
 8012a22:	6826      	ldr	r6, [r4, #0]
 8012a24:	6960      	ldr	r0, [r4, #20]
 8012a26:	1d1d      	adds	r5, r3, #4
 8012a28:	600d      	str	r5, [r1, #0]
 8012a2a:	0635      	lsls	r5, r6, #24
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	d501      	bpl.n	8012a34 <_printf_i+0x1cc>
 8012a30:	6018      	str	r0, [r3, #0]
 8012a32:	e002      	b.n	8012a3a <_printf_i+0x1d2>
 8012a34:	0671      	lsls	r1, r6, #25
 8012a36:	d5fb      	bpl.n	8012a30 <_printf_i+0x1c8>
 8012a38:	8018      	strh	r0, [r3, #0]
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	6123      	str	r3, [r4, #16]
 8012a3e:	4616      	mov	r6, r2
 8012a40:	e7ba      	b.n	80129b8 <_printf_i+0x150>
 8012a42:	680b      	ldr	r3, [r1, #0]
 8012a44:	1d1a      	adds	r2, r3, #4
 8012a46:	600a      	str	r2, [r1, #0]
 8012a48:	681e      	ldr	r6, [r3, #0]
 8012a4a:	6862      	ldr	r2, [r4, #4]
 8012a4c:	2100      	movs	r1, #0
 8012a4e:	4630      	mov	r0, r6
 8012a50:	f7ed fc4e 	bl	80002f0 <memchr>
 8012a54:	b108      	cbz	r0, 8012a5a <_printf_i+0x1f2>
 8012a56:	1b80      	subs	r0, r0, r6
 8012a58:	6060      	str	r0, [r4, #4]
 8012a5a:	6863      	ldr	r3, [r4, #4]
 8012a5c:	6123      	str	r3, [r4, #16]
 8012a5e:	2300      	movs	r3, #0
 8012a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a64:	e7a8      	b.n	80129b8 <_printf_i+0x150>
 8012a66:	6923      	ldr	r3, [r4, #16]
 8012a68:	4632      	mov	r2, r6
 8012a6a:	4649      	mov	r1, r9
 8012a6c:	4640      	mov	r0, r8
 8012a6e:	47d0      	blx	sl
 8012a70:	3001      	adds	r0, #1
 8012a72:	d0ab      	beq.n	80129cc <_printf_i+0x164>
 8012a74:	6823      	ldr	r3, [r4, #0]
 8012a76:	079b      	lsls	r3, r3, #30
 8012a78:	d413      	bmi.n	8012aa2 <_printf_i+0x23a>
 8012a7a:	68e0      	ldr	r0, [r4, #12]
 8012a7c:	9b03      	ldr	r3, [sp, #12]
 8012a7e:	4298      	cmp	r0, r3
 8012a80:	bfb8      	it	lt
 8012a82:	4618      	movlt	r0, r3
 8012a84:	e7a4      	b.n	80129d0 <_printf_i+0x168>
 8012a86:	2301      	movs	r3, #1
 8012a88:	4632      	mov	r2, r6
 8012a8a:	4649      	mov	r1, r9
 8012a8c:	4640      	mov	r0, r8
 8012a8e:	47d0      	blx	sl
 8012a90:	3001      	adds	r0, #1
 8012a92:	d09b      	beq.n	80129cc <_printf_i+0x164>
 8012a94:	3501      	adds	r5, #1
 8012a96:	68e3      	ldr	r3, [r4, #12]
 8012a98:	9903      	ldr	r1, [sp, #12]
 8012a9a:	1a5b      	subs	r3, r3, r1
 8012a9c:	42ab      	cmp	r3, r5
 8012a9e:	dcf2      	bgt.n	8012a86 <_printf_i+0x21e>
 8012aa0:	e7eb      	b.n	8012a7a <_printf_i+0x212>
 8012aa2:	2500      	movs	r5, #0
 8012aa4:	f104 0619 	add.w	r6, r4, #25
 8012aa8:	e7f5      	b.n	8012a96 <_printf_i+0x22e>
 8012aaa:	bf00      	nop
 8012aac:	08016726 	.word	0x08016726
 8012ab0:	08016737 	.word	0x08016737

08012ab4 <_puts_r>:
 8012ab4:	b570      	push	{r4, r5, r6, lr}
 8012ab6:	460e      	mov	r6, r1
 8012ab8:	4605      	mov	r5, r0
 8012aba:	b118      	cbz	r0, 8012ac4 <_puts_r+0x10>
 8012abc:	6983      	ldr	r3, [r0, #24]
 8012abe:	b90b      	cbnz	r3, 8012ac4 <_puts_r+0x10>
 8012ac0:	f001 f856 	bl	8013b70 <__sinit>
 8012ac4:	69ab      	ldr	r3, [r5, #24]
 8012ac6:	68ac      	ldr	r4, [r5, #8]
 8012ac8:	b913      	cbnz	r3, 8012ad0 <_puts_r+0x1c>
 8012aca:	4628      	mov	r0, r5
 8012acc:	f001 f850 	bl	8013b70 <__sinit>
 8012ad0:	4b2c      	ldr	r3, [pc, #176]	; (8012b84 <_puts_r+0xd0>)
 8012ad2:	429c      	cmp	r4, r3
 8012ad4:	d120      	bne.n	8012b18 <_puts_r+0x64>
 8012ad6:	686c      	ldr	r4, [r5, #4]
 8012ad8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012ada:	07db      	lsls	r3, r3, #31
 8012adc:	d405      	bmi.n	8012aea <_puts_r+0x36>
 8012ade:	89a3      	ldrh	r3, [r4, #12]
 8012ae0:	0598      	lsls	r0, r3, #22
 8012ae2:	d402      	bmi.n	8012aea <_puts_r+0x36>
 8012ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012ae6:	f001 f8e6 	bl	8013cb6 <__retarget_lock_acquire_recursive>
 8012aea:	89a3      	ldrh	r3, [r4, #12]
 8012aec:	0719      	lsls	r1, r3, #28
 8012aee:	d51d      	bpl.n	8012b2c <_puts_r+0x78>
 8012af0:	6923      	ldr	r3, [r4, #16]
 8012af2:	b1db      	cbz	r3, 8012b2c <_puts_r+0x78>
 8012af4:	3e01      	subs	r6, #1
 8012af6:	68a3      	ldr	r3, [r4, #8]
 8012af8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012afc:	3b01      	subs	r3, #1
 8012afe:	60a3      	str	r3, [r4, #8]
 8012b00:	bb39      	cbnz	r1, 8012b52 <_puts_r+0x9e>
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	da38      	bge.n	8012b78 <_puts_r+0xc4>
 8012b06:	4622      	mov	r2, r4
 8012b08:	210a      	movs	r1, #10
 8012b0a:	4628      	mov	r0, r5
 8012b0c:	f000 f848 	bl	8012ba0 <__swbuf_r>
 8012b10:	3001      	adds	r0, #1
 8012b12:	d011      	beq.n	8012b38 <_puts_r+0x84>
 8012b14:	250a      	movs	r5, #10
 8012b16:	e011      	b.n	8012b3c <_puts_r+0x88>
 8012b18:	4b1b      	ldr	r3, [pc, #108]	; (8012b88 <_puts_r+0xd4>)
 8012b1a:	429c      	cmp	r4, r3
 8012b1c:	d101      	bne.n	8012b22 <_puts_r+0x6e>
 8012b1e:	68ac      	ldr	r4, [r5, #8]
 8012b20:	e7da      	b.n	8012ad8 <_puts_r+0x24>
 8012b22:	4b1a      	ldr	r3, [pc, #104]	; (8012b8c <_puts_r+0xd8>)
 8012b24:	429c      	cmp	r4, r3
 8012b26:	bf08      	it	eq
 8012b28:	68ec      	ldreq	r4, [r5, #12]
 8012b2a:	e7d5      	b.n	8012ad8 <_puts_r+0x24>
 8012b2c:	4621      	mov	r1, r4
 8012b2e:	4628      	mov	r0, r5
 8012b30:	f000 f888 	bl	8012c44 <__swsetup_r>
 8012b34:	2800      	cmp	r0, #0
 8012b36:	d0dd      	beq.n	8012af4 <_puts_r+0x40>
 8012b38:	f04f 35ff 	mov.w	r5, #4294967295
 8012b3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012b3e:	07da      	lsls	r2, r3, #31
 8012b40:	d405      	bmi.n	8012b4e <_puts_r+0x9a>
 8012b42:	89a3      	ldrh	r3, [r4, #12]
 8012b44:	059b      	lsls	r3, r3, #22
 8012b46:	d402      	bmi.n	8012b4e <_puts_r+0x9a>
 8012b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012b4a:	f001 f8b5 	bl	8013cb8 <__retarget_lock_release_recursive>
 8012b4e:	4628      	mov	r0, r5
 8012b50:	bd70      	pop	{r4, r5, r6, pc}
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	da04      	bge.n	8012b60 <_puts_r+0xac>
 8012b56:	69a2      	ldr	r2, [r4, #24]
 8012b58:	429a      	cmp	r2, r3
 8012b5a:	dc06      	bgt.n	8012b6a <_puts_r+0xb6>
 8012b5c:	290a      	cmp	r1, #10
 8012b5e:	d004      	beq.n	8012b6a <_puts_r+0xb6>
 8012b60:	6823      	ldr	r3, [r4, #0]
 8012b62:	1c5a      	adds	r2, r3, #1
 8012b64:	6022      	str	r2, [r4, #0]
 8012b66:	7019      	strb	r1, [r3, #0]
 8012b68:	e7c5      	b.n	8012af6 <_puts_r+0x42>
 8012b6a:	4622      	mov	r2, r4
 8012b6c:	4628      	mov	r0, r5
 8012b6e:	f000 f817 	bl	8012ba0 <__swbuf_r>
 8012b72:	3001      	adds	r0, #1
 8012b74:	d1bf      	bne.n	8012af6 <_puts_r+0x42>
 8012b76:	e7df      	b.n	8012b38 <_puts_r+0x84>
 8012b78:	6823      	ldr	r3, [r4, #0]
 8012b7a:	250a      	movs	r5, #10
 8012b7c:	1c5a      	adds	r2, r3, #1
 8012b7e:	6022      	str	r2, [r4, #0]
 8012b80:	701d      	strb	r5, [r3, #0]
 8012b82:	e7db      	b.n	8012b3c <_puts_r+0x88>
 8012b84:	080167fc 	.word	0x080167fc
 8012b88:	0801681c 	.word	0x0801681c
 8012b8c:	080167dc 	.word	0x080167dc

08012b90 <puts>:
 8012b90:	4b02      	ldr	r3, [pc, #8]	; (8012b9c <puts+0xc>)
 8012b92:	4601      	mov	r1, r0
 8012b94:	6818      	ldr	r0, [r3, #0]
 8012b96:	f7ff bf8d 	b.w	8012ab4 <_puts_r>
 8012b9a:	bf00      	nop
 8012b9c:	24000240 	.word	0x24000240

08012ba0 <__swbuf_r>:
 8012ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ba2:	460e      	mov	r6, r1
 8012ba4:	4614      	mov	r4, r2
 8012ba6:	4605      	mov	r5, r0
 8012ba8:	b118      	cbz	r0, 8012bb2 <__swbuf_r+0x12>
 8012baa:	6983      	ldr	r3, [r0, #24]
 8012bac:	b90b      	cbnz	r3, 8012bb2 <__swbuf_r+0x12>
 8012bae:	f000 ffdf 	bl	8013b70 <__sinit>
 8012bb2:	4b21      	ldr	r3, [pc, #132]	; (8012c38 <__swbuf_r+0x98>)
 8012bb4:	429c      	cmp	r4, r3
 8012bb6:	d12b      	bne.n	8012c10 <__swbuf_r+0x70>
 8012bb8:	686c      	ldr	r4, [r5, #4]
 8012bba:	69a3      	ldr	r3, [r4, #24]
 8012bbc:	60a3      	str	r3, [r4, #8]
 8012bbe:	89a3      	ldrh	r3, [r4, #12]
 8012bc0:	071a      	lsls	r2, r3, #28
 8012bc2:	d52f      	bpl.n	8012c24 <__swbuf_r+0x84>
 8012bc4:	6923      	ldr	r3, [r4, #16]
 8012bc6:	b36b      	cbz	r3, 8012c24 <__swbuf_r+0x84>
 8012bc8:	6923      	ldr	r3, [r4, #16]
 8012bca:	6820      	ldr	r0, [r4, #0]
 8012bcc:	1ac0      	subs	r0, r0, r3
 8012bce:	6963      	ldr	r3, [r4, #20]
 8012bd0:	b2f6      	uxtb	r6, r6
 8012bd2:	4283      	cmp	r3, r0
 8012bd4:	4637      	mov	r7, r6
 8012bd6:	dc04      	bgt.n	8012be2 <__swbuf_r+0x42>
 8012bd8:	4621      	mov	r1, r4
 8012bda:	4628      	mov	r0, r5
 8012bdc:	f000 ff34 	bl	8013a48 <_fflush_r>
 8012be0:	bb30      	cbnz	r0, 8012c30 <__swbuf_r+0x90>
 8012be2:	68a3      	ldr	r3, [r4, #8]
 8012be4:	3b01      	subs	r3, #1
 8012be6:	60a3      	str	r3, [r4, #8]
 8012be8:	6823      	ldr	r3, [r4, #0]
 8012bea:	1c5a      	adds	r2, r3, #1
 8012bec:	6022      	str	r2, [r4, #0]
 8012bee:	701e      	strb	r6, [r3, #0]
 8012bf0:	6963      	ldr	r3, [r4, #20]
 8012bf2:	3001      	adds	r0, #1
 8012bf4:	4283      	cmp	r3, r0
 8012bf6:	d004      	beq.n	8012c02 <__swbuf_r+0x62>
 8012bf8:	89a3      	ldrh	r3, [r4, #12]
 8012bfa:	07db      	lsls	r3, r3, #31
 8012bfc:	d506      	bpl.n	8012c0c <__swbuf_r+0x6c>
 8012bfe:	2e0a      	cmp	r6, #10
 8012c00:	d104      	bne.n	8012c0c <__swbuf_r+0x6c>
 8012c02:	4621      	mov	r1, r4
 8012c04:	4628      	mov	r0, r5
 8012c06:	f000 ff1f 	bl	8013a48 <_fflush_r>
 8012c0a:	b988      	cbnz	r0, 8012c30 <__swbuf_r+0x90>
 8012c0c:	4638      	mov	r0, r7
 8012c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c10:	4b0a      	ldr	r3, [pc, #40]	; (8012c3c <__swbuf_r+0x9c>)
 8012c12:	429c      	cmp	r4, r3
 8012c14:	d101      	bne.n	8012c1a <__swbuf_r+0x7a>
 8012c16:	68ac      	ldr	r4, [r5, #8]
 8012c18:	e7cf      	b.n	8012bba <__swbuf_r+0x1a>
 8012c1a:	4b09      	ldr	r3, [pc, #36]	; (8012c40 <__swbuf_r+0xa0>)
 8012c1c:	429c      	cmp	r4, r3
 8012c1e:	bf08      	it	eq
 8012c20:	68ec      	ldreq	r4, [r5, #12]
 8012c22:	e7ca      	b.n	8012bba <__swbuf_r+0x1a>
 8012c24:	4621      	mov	r1, r4
 8012c26:	4628      	mov	r0, r5
 8012c28:	f000 f80c 	bl	8012c44 <__swsetup_r>
 8012c2c:	2800      	cmp	r0, #0
 8012c2e:	d0cb      	beq.n	8012bc8 <__swbuf_r+0x28>
 8012c30:	f04f 37ff 	mov.w	r7, #4294967295
 8012c34:	e7ea      	b.n	8012c0c <__swbuf_r+0x6c>
 8012c36:	bf00      	nop
 8012c38:	080167fc 	.word	0x080167fc
 8012c3c:	0801681c 	.word	0x0801681c
 8012c40:	080167dc 	.word	0x080167dc

08012c44 <__swsetup_r>:
 8012c44:	4b32      	ldr	r3, [pc, #200]	; (8012d10 <__swsetup_r+0xcc>)
 8012c46:	b570      	push	{r4, r5, r6, lr}
 8012c48:	681d      	ldr	r5, [r3, #0]
 8012c4a:	4606      	mov	r6, r0
 8012c4c:	460c      	mov	r4, r1
 8012c4e:	b125      	cbz	r5, 8012c5a <__swsetup_r+0x16>
 8012c50:	69ab      	ldr	r3, [r5, #24]
 8012c52:	b913      	cbnz	r3, 8012c5a <__swsetup_r+0x16>
 8012c54:	4628      	mov	r0, r5
 8012c56:	f000 ff8b 	bl	8013b70 <__sinit>
 8012c5a:	4b2e      	ldr	r3, [pc, #184]	; (8012d14 <__swsetup_r+0xd0>)
 8012c5c:	429c      	cmp	r4, r3
 8012c5e:	d10f      	bne.n	8012c80 <__swsetup_r+0x3c>
 8012c60:	686c      	ldr	r4, [r5, #4]
 8012c62:	89a3      	ldrh	r3, [r4, #12]
 8012c64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012c68:	0719      	lsls	r1, r3, #28
 8012c6a:	d42c      	bmi.n	8012cc6 <__swsetup_r+0x82>
 8012c6c:	06dd      	lsls	r5, r3, #27
 8012c6e:	d411      	bmi.n	8012c94 <__swsetup_r+0x50>
 8012c70:	2309      	movs	r3, #9
 8012c72:	6033      	str	r3, [r6, #0]
 8012c74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012c78:	81a3      	strh	r3, [r4, #12]
 8012c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8012c7e:	e03e      	b.n	8012cfe <__swsetup_r+0xba>
 8012c80:	4b25      	ldr	r3, [pc, #148]	; (8012d18 <__swsetup_r+0xd4>)
 8012c82:	429c      	cmp	r4, r3
 8012c84:	d101      	bne.n	8012c8a <__swsetup_r+0x46>
 8012c86:	68ac      	ldr	r4, [r5, #8]
 8012c88:	e7eb      	b.n	8012c62 <__swsetup_r+0x1e>
 8012c8a:	4b24      	ldr	r3, [pc, #144]	; (8012d1c <__swsetup_r+0xd8>)
 8012c8c:	429c      	cmp	r4, r3
 8012c8e:	bf08      	it	eq
 8012c90:	68ec      	ldreq	r4, [r5, #12]
 8012c92:	e7e6      	b.n	8012c62 <__swsetup_r+0x1e>
 8012c94:	0758      	lsls	r0, r3, #29
 8012c96:	d512      	bpl.n	8012cbe <__swsetup_r+0x7a>
 8012c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c9a:	b141      	cbz	r1, 8012cae <__swsetup_r+0x6a>
 8012c9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012ca0:	4299      	cmp	r1, r3
 8012ca2:	d002      	beq.n	8012caa <__swsetup_r+0x66>
 8012ca4:	4630      	mov	r0, r6
 8012ca6:	f001 fc11 	bl	80144cc <_free_r>
 8012caa:	2300      	movs	r3, #0
 8012cac:	6363      	str	r3, [r4, #52]	; 0x34
 8012cae:	89a3      	ldrh	r3, [r4, #12]
 8012cb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012cb4:	81a3      	strh	r3, [r4, #12]
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	6063      	str	r3, [r4, #4]
 8012cba:	6923      	ldr	r3, [r4, #16]
 8012cbc:	6023      	str	r3, [r4, #0]
 8012cbe:	89a3      	ldrh	r3, [r4, #12]
 8012cc0:	f043 0308 	orr.w	r3, r3, #8
 8012cc4:	81a3      	strh	r3, [r4, #12]
 8012cc6:	6923      	ldr	r3, [r4, #16]
 8012cc8:	b94b      	cbnz	r3, 8012cde <__swsetup_r+0x9a>
 8012cca:	89a3      	ldrh	r3, [r4, #12]
 8012ccc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012cd4:	d003      	beq.n	8012cde <__swsetup_r+0x9a>
 8012cd6:	4621      	mov	r1, r4
 8012cd8:	4630      	mov	r0, r6
 8012cda:	f001 f813 	bl	8013d04 <__smakebuf_r>
 8012cde:	89a0      	ldrh	r0, [r4, #12]
 8012ce0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012ce4:	f010 0301 	ands.w	r3, r0, #1
 8012ce8:	d00a      	beq.n	8012d00 <__swsetup_r+0xbc>
 8012cea:	2300      	movs	r3, #0
 8012cec:	60a3      	str	r3, [r4, #8]
 8012cee:	6963      	ldr	r3, [r4, #20]
 8012cf0:	425b      	negs	r3, r3
 8012cf2:	61a3      	str	r3, [r4, #24]
 8012cf4:	6923      	ldr	r3, [r4, #16]
 8012cf6:	b943      	cbnz	r3, 8012d0a <__swsetup_r+0xc6>
 8012cf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012cfc:	d1ba      	bne.n	8012c74 <__swsetup_r+0x30>
 8012cfe:	bd70      	pop	{r4, r5, r6, pc}
 8012d00:	0781      	lsls	r1, r0, #30
 8012d02:	bf58      	it	pl
 8012d04:	6963      	ldrpl	r3, [r4, #20]
 8012d06:	60a3      	str	r3, [r4, #8]
 8012d08:	e7f4      	b.n	8012cf4 <__swsetup_r+0xb0>
 8012d0a:	2000      	movs	r0, #0
 8012d0c:	e7f7      	b.n	8012cfe <__swsetup_r+0xba>
 8012d0e:	bf00      	nop
 8012d10:	24000240 	.word	0x24000240
 8012d14:	080167fc 	.word	0x080167fc
 8012d18:	0801681c 	.word	0x0801681c
 8012d1c:	080167dc 	.word	0x080167dc

08012d20 <quorem>:
 8012d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d24:	6903      	ldr	r3, [r0, #16]
 8012d26:	690c      	ldr	r4, [r1, #16]
 8012d28:	42a3      	cmp	r3, r4
 8012d2a:	4607      	mov	r7, r0
 8012d2c:	f2c0 8081 	blt.w	8012e32 <quorem+0x112>
 8012d30:	3c01      	subs	r4, #1
 8012d32:	f101 0814 	add.w	r8, r1, #20
 8012d36:	f100 0514 	add.w	r5, r0, #20
 8012d3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012d3e:	9301      	str	r3, [sp, #4]
 8012d40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012d44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012d48:	3301      	adds	r3, #1
 8012d4a:	429a      	cmp	r2, r3
 8012d4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012d50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012d54:	fbb2 f6f3 	udiv	r6, r2, r3
 8012d58:	d331      	bcc.n	8012dbe <quorem+0x9e>
 8012d5a:	f04f 0e00 	mov.w	lr, #0
 8012d5e:	4640      	mov	r0, r8
 8012d60:	46ac      	mov	ip, r5
 8012d62:	46f2      	mov	sl, lr
 8012d64:	f850 2b04 	ldr.w	r2, [r0], #4
 8012d68:	b293      	uxth	r3, r2
 8012d6a:	fb06 e303 	mla	r3, r6, r3, lr
 8012d6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012d72:	b29b      	uxth	r3, r3
 8012d74:	ebaa 0303 	sub.w	r3, sl, r3
 8012d78:	0c12      	lsrs	r2, r2, #16
 8012d7a:	f8dc a000 	ldr.w	sl, [ip]
 8012d7e:	fb06 e202 	mla	r2, r6, r2, lr
 8012d82:	fa13 f38a 	uxtah	r3, r3, sl
 8012d86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012d8a:	fa1f fa82 	uxth.w	sl, r2
 8012d8e:	f8dc 2000 	ldr.w	r2, [ip]
 8012d92:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8012d96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012d9a:	b29b      	uxth	r3, r3
 8012d9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012da0:	4581      	cmp	r9, r0
 8012da2:	f84c 3b04 	str.w	r3, [ip], #4
 8012da6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012daa:	d2db      	bcs.n	8012d64 <quorem+0x44>
 8012dac:	f855 300b 	ldr.w	r3, [r5, fp]
 8012db0:	b92b      	cbnz	r3, 8012dbe <quorem+0x9e>
 8012db2:	9b01      	ldr	r3, [sp, #4]
 8012db4:	3b04      	subs	r3, #4
 8012db6:	429d      	cmp	r5, r3
 8012db8:	461a      	mov	r2, r3
 8012dba:	d32e      	bcc.n	8012e1a <quorem+0xfa>
 8012dbc:	613c      	str	r4, [r7, #16]
 8012dbe:	4638      	mov	r0, r7
 8012dc0:	f001 fa74 	bl	80142ac <__mcmp>
 8012dc4:	2800      	cmp	r0, #0
 8012dc6:	db24      	blt.n	8012e12 <quorem+0xf2>
 8012dc8:	3601      	adds	r6, #1
 8012dca:	4628      	mov	r0, r5
 8012dcc:	f04f 0c00 	mov.w	ip, #0
 8012dd0:	f858 2b04 	ldr.w	r2, [r8], #4
 8012dd4:	f8d0 e000 	ldr.w	lr, [r0]
 8012dd8:	b293      	uxth	r3, r2
 8012dda:	ebac 0303 	sub.w	r3, ip, r3
 8012dde:	0c12      	lsrs	r2, r2, #16
 8012de0:	fa13 f38e 	uxtah	r3, r3, lr
 8012de4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012de8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012dec:	b29b      	uxth	r3, r3
 8012dee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012df2:	45c1      	cmp	r9, r8
 8012df4:	f840 3b04 	str.w	r3, [r0], #4
 8012df8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012dfc:	d2e8      	bcs.n	8012dd0 <quorem+0xb0>
 8012dfe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012e02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012e06:	b922      	cbnz	r2, 8012e12 <quorem+0xf2>
 8012e08:	3b04      	subs	r3, #4
 8012e0a:	429d      	cmp	r5, r3
 8012e0c:	461a      	mov	r2, r3
 8012e0e:	d30a      	bcc.n	8012e26 <quorem+0x106>
 8012e10:	613c      	str	r4, [r7, #16]
 8012e12:	4630      	mov	r0, r6
 8012e14:	b003      	add	sp, #12
 8012e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e1a:	6812      	ldr	r2, [r2, #0]
 8012e1c:	3b04      	subs	r3, #4
 8012e1e:	2a00      	cmp	r2, #0
 8012e20:	d1cc      	bne.n	8012dbc <quorem+0x9c>
 8012e22:	3c01      	subs	r4, #1
 8012e24:	e7c7      	b.n	8012db6 <quorem+0x96>
 8012e26:	6812      	ldr	r2, [r2, #0]
 8012e28:	3b04      	subs	r3, #4
 8012e2a:	2a00      	cmp	r2, #0
 8012e2c:	d1f0      	bne.n	8012e10 <quorem+0xf0>
 8012e2e:	3c01      	subs	r4, #1
 8012e30:	e7eb      	b.n	8012e0a <quorem+0xea>
 8012e32:	2000      	movs	r0, #0
 8012e34:	e7ee      	b.n	8012e14 <quorem+0xf4>
	...

08012e38 <_dtoa_r>:
 8012e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e3c:	ec59 8b10 	vmov	r8, r9, d0
 8012e40:	b095      	sub	sp, #84	; 0x54
 8012e42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012e44:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8012e46:	9107      	str	r1, [sp, #28]
 8012e48:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8012e4c:	4606      	mov	r6, r0
 8012e4e:	9209      	str	r2, [sp, #36]	; 0x24
 8012e50:	9310      	str	r3, [sp, #64]	; 0x40
 8012e52:	b975      	cbnz	r5, 8012e72 <_dtoa_r+0x3a>
 8012e54:	2010      	movs	r0, #16
 8012e56:	f000 ff95 	bl	8013d84 <malloc>
 8012e5a:	4602      	mov	r2, r0
 8012e5c:	6270      	str	r0, [r6, #36]	; 0x24
 8012e5e:	b920      	cbnz	r0, 8012e6a <_dtoa_r+0x32>
 8012e60:	4bab      	ldr	r3, [pc, #684]	; (8013110 <_dtoa_r+0x2d8>)
 8012e62:	21ea      	movs	r1, #234	; 0xea
 8012e64:	48ab      	ldr	r0, [pc, #684]	; (8013114 <_dtoa_r+0x2dc>)
 8012e66:	f001 fc41 	bl	80146ec <__assert_func>
 8012e6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012e6e:	6005      	str	r5, [r0, #0]
 8012e70:	60c5      	str	r5, [r0, #12]
 8012e72:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012e74:	6819      	ldr	r1, [r3, #0]
 8012e76:	b151      	cbz	r1, 8012e8e <_dtoa_r+0x56>
 8012e78:	685a      	ldr	r2, [r3, #4]
 8012e7a:	604a      	str	r2, [r1, #4]
 8012e7c:	2301      	movs	r3, #1
 8012e7e:	4093      	lsls	r3, r2
 8012e80:	608b      	str	r3, [r1, #8]
 8012e82:	4630      	mov	r0, r6
 8012e84:	f000 ffd4 	bl	8013e30 <_Bfree>
 8012e88:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	601a      	str	r2, [r3, #0]
 8012e8e:	f1b9 0300 	subs.w	r3, r9, #0
 8012e92:	bfbb      	ittet	lt
 8012e94:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012e98:	9303      	strlt	r3, [sp, #12]
 8012e9a:	2300      	movge	r3, #0
 8012e9c:	2201      	movlt	r2, #1
 8012e9e:	bfac      	ite	ge
 8012ea0:	6023      	strge	r3, [r4, #0]
 8012ea2:	6022      	strlt	r2, [r4, #0]
 8012ea4:	4b9c      	ldr	r3, [pc, #624]	; (8013118 <_dtoa_r+0x2e0>)
 8012ea6:	9c03      	ldr	r4, [sp, #12]
 8012ea8:	43a3      	bics	r3, r4
 8012eaa:	d11a      	bne.n	8012ee2 <_dtoa_r+0xaa>
 8012eac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012eae:	f242 730f 	movw	r3, #9999	; 0x270f
 8012eb2:	6013      	str	r3, [r2, #0]
 8012eb4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8012eb8:	ea53 0308 	orrs.w	r3, r3, r8
 8012ebc:	f000 8512 	beq.w	80138e4 <_dtoa_r+0xaac>
 8012ec0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012ec2:	b953      	cbnz	r3, 8012eda <_dtoa_r+0xa2>
 8012ec4:	4b95      	ldr	r3, [pc, #596]	; (801311c <_dtoa_r+0x2e4>)
 8012ec6:	e01f      	b.n	8012f08 <_dtoa_r+0xd0>
 8012ec8:	4b95      	ldr	r3, [pc, #596]	; (8013120 <_dtoa_r+0x2e8>)
 8012eca:	9300      	str	r3, [sp, #0]
 8012ecc:	3308      	adds	r3, #8
 8012ece:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012ed0:	6013      	str	r3, [r2, #0]
 8012ed2:	9800      	ldr	r0, [sp, #0]
 8012ed4:	b015      	add	sp, #84	; 0x54
 8012ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eda:	4b90      	ldr	r3, [pc, #576]	; (801311c <_dtoa_r+0x2e4>)
 8012edc:	9300      	str	r3, [sp, #0]
 8012ede:	3303      	adds	r3, #3
 8012ee0:	e7f5      	b.n	8012ece <_dtoa_r+0x96>
 8012ee2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012ee6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eee:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012ef2:	d10b      	bne.n	8012f0c <_dtoa_r+0xd4>
 8012ef4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012ef6:	2301      	movs	r3, #1
 8012ef8:	6013      	str	r3, [r2, #0]
 8012efa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	f000 84ee 	beq.w	80138de <_dtoa_r+0xaa6>
 8012f02:	4888      	ldr	r0, [pc, #544]	; (8013124 <_dtoa_r+0x2ec>)
 8012f04:	6018      	str	r0, [r3, #0]
 8012f06:	1e43      	subs	r3, r0, #1
 8012f08:	9300      	str	r3, [sp, #0]
 8012f0a:	e7e2      	b.n	8012ed2 <_dtoa_r+0x9a>
 8012f0c:	a913      	add	r1, sp, #76	; 0x4c
 8012f0e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012f12:	aa12      	add	r2, sp, #72	; 0x48
 8012f14:	4630      	mov	r0, r6
 8012f16:	f001 fa6d 	bl	80143f4 <__d2b>
 8012f1a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8012f1e:	4605      	mov	r5, r0
 8012f20:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012f22:	2900      	cmp	r1, #0
 8012f24:	d047      	beq.n	8012fb6 <_dtoa_r+0x17e>
 8012f26:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012f28:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012f2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012f30:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8012f34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012f38:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012f3c:	2400      	movs	r4, #0
 8012f3e:	ec43 2b16 	vmov	d6, r2, r3
 8012f42:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8012f46:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80130f8 <_dtoa_r+0x2c0>
 8012f4a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012f4e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8013100 <_dtoa_r+0x2c8>
 8012f52:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012f56:	eeb0 7b46 	vmov.f64	d7, d6
 8012f5a:	ee06 1a90 	vmov	s13, r1
 8012f5e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8012f62:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8013108 <_dtoa_r+0x2d0>
 8012f66:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012f6a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012f6e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f76:	ee16 ba90 	vmov	fp, s13
 8012f7a:	9411      	str	r4, [sp, #68]	; 0x44
 8012f7c:	d508      	bpl.n	8012f90 <_dtoa_r+0x158>
 8012f7e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012f82:	eeb4 6b47 	vcmp.f64	d6, d7
 8012f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f8a:	bf18      	it	ne
 8012f8c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012f90:	f1bb 0f16 	cmp.w	fp, #22
 8012f94:	d832      	bhi.n	8012ffc <_dtoa_r+0x1c4>
 8012f96:	4b64      	ldr	r3, [pc, #400]	; (8013128 <_dtoa_r+0x2f0>)
 8012f98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012f9c:	ed93 7b00 	vldr	d7, [r3]
 8012fa0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8012fa4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fac:	d501      	bpl.n	8012fb2 <_dtoa_r+0x17a>
 8012fae:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	e023      	b.n	8012ffe <_dtoa_r+0x1c6>
 8012fb6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012fb8:	4401      	add	r1, r0
 8012fba:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8012fbe:	2b20      	cmp	r3, #32
 8012fc0:	bfc3      	ittte	gt
 8012fc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012fc6:	fa04 f303 	lslgt.w	r3, r4, r3
 8012fca:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8012fce:	f1c3 0320 	rsble	r3, r3, #32
 8012fd2:	bfc6      	itte	gt
 8012fd4:	fa28 f804 	lsrgt.w	r8, r8, r4
 8012fd8:	ea43 0308 	orrgt.w	r3, r3, r8
 8012fdc:	fa08 f303 	lslle.w	r3, r8, r3
 8012fe0:	ee07 3a90 	vmov	s15, r3
 8012fe4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012fe8:	3901      	subs	r1, #1
 8012fea:	ed8d 7b00 	vstr	d7, [sp]
 8012fee:	9c01      	ldr	r4, [sp, #4]
 8012ff0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ff4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8012ff8:	2401      	movs	r4, #1
 8012ffa:	e7a0      	b.n	8012f3e <_dtoa_r+0x106>
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	930f      	str	r3, [sp, #60]	; 0x3c
 8013000:	1a43      	subs	r3, r0, r1
 8013002:	1e5a      	subs	r2, r3, #1
 8013004:	bf45      	ittet	mi
 8013006:	f1c3 0301 	rsbmi	r3, r3, #1
 801300a:	9305      	strmi	r3, [sp, #20]
 801300c:	2300      	movpl	r3, #0
 801300e:	2300      	movmi	r3, #0
 8013010:	9206      	str	r2, [sp, #24]
 8013012:	bf54      	ite	pl
 8013014:	9305      	strpl	r3, [sp, #20]
 8013016:	9306      	strmi	r3, [sp, #24]
 8013018:	f1bb 0f00 	cmp.w	fp, #0
 801301c:	db18      	blt.n	8013050 <_dtoa_r+0x218>
 801301e:	9b06      	ldr	r3, [sp, #24]
 8013020:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8013024:	445b      	add	r3, fp
 8013026:	9306      	str	r3, [sp, #24]
 8013028:	2300      	movs	r3, #0
 801302a:	9a07      	ldr	r2, [sp, #28]
 801302c:	2a09      	cmp	r2, #9
 801302e:	d849      	bhi.n	80130c4 <_dtoa_r+0x28c>
 8013030:	2a05      	cmp	r2, #5
 8013032:	bfc4      	itt	gt
 8013034:	3a04      	subgt	r2, #4
 8013036:	9207      	strgt	r2, [sp, #28]
 8013038:	9a07      	ldr	r2, [sp, #28]
 801303a:	f1a2 0202 	sub.w	r2, r2, #2
 801303e:	bfcc      	ite	gt
 8013040:	2400      	movgt	r4, #0
 8013042:	2401      	movle	r4, #1
 8013044:	2a03      	cmp	r2, #3
 8013046:	d848      	bhi.n	80130da <_dtoa_r+0x2a2>
 8013048:	e8df f002 	tbb	[pc, r2]
 801304c:	3a2c2e0b 	.word	0x3a2c2e0b
 8013050:	9b05      	ldr	r3, [sp, #20]
 8013052:	2200      	movs	r2, #0
 8013054:	eba3 030b 	sub.w	r3, r3, fp
 8013058:	9305      	str	r3, [sp, #20]
 801305a:	920e      	str	r2, [sp, #56]	; 0x38
 801305c:	f1cb 0300 	rsb	r3, fp, #0
 8013060:	e7e3      	b.n	801302a <_dtoa_r+0x1f2>
 8013062:	2200      	movs	r2, #0
 8013064:	9208      	str	r2, [sp, #32]
 8013066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013068:	2a00      	cmp	r2, #0
 801306a:	dc39      	bgt.n	80130e0 <_dtoa_r+0x2a8>
 801306c:	f04f 0a01 	mov.w	sl, #1
 8013070:	46d1      	mov	r9, sl
 8013072:	4652      	mov	r2, sl
 8013074:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8013078:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801307a:	2100      	movs	r1, #0
 801307c:	6079      	str	r1, [r7, #4]
 801307e:	2004      	movs	r0, #4
 8013080:	f100 0c14 	add.w	ip, r0, #20
 8013084:	4594      	cmp	ip, r2
 8013086:	6879      	ldr	r1, [r7, #4]
 8013088:	d92f      	bls.n	80130ea <_dtoa_r+0x2b2>
 801308a:	4630      	mov	r0, r6
 801308c:	930c      	str	r3, [sp, #48]	; 0x30
 801308e:	f000 fe8f 	bl	8013db0 <_Balloc>
 8013092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013094:	9000      	str	r0, [sp, #0]
 8013096:	4602      	mov	r2, r0
 8013098:	2800      	cmp	r0, #0
 801309a:	d149      	bne.n	8013130 <_dtoa_r+0x2f8>
 801309c:	4b23      	ldr	r3, [pc, #140]	; (801312c <_dtoa_r+0x2f4>)
 801309e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80130a2:	e6df      	b.n	8012e64 <_dtoa_r+0x2c>
 80130a4:	2201      	movs	r2, #1
 80130a6:	e7dd      	b.n	8013064 <_dtoa_r+0x22c>
 80130a8:	2200      	movs	r2, #0
 80130aa:	9208      	str	r2, [sp, #32]
 80130ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80130ae:	eb0b 0a02 	add.w	sl, fp, r2
 80130b2:	f10a 0901 	add.w	r9, sl, #1
 80130b6:	464a      	mov	r2, r9
 80130b8:	2a01      	cmp	r2, #1
 80130ba:	bfb8      	it	lt
 80130bc:	2201      	movlt	r2, #1
 80130be:	e7db      	b.n	8013078 <_dtoa_r+0x240>
 80130c0:	2201      	movs	r2, #1
 80130c2:	e7f2      	b.n	80130aa <_dtoa_r+0x272>
 80130c4:	2401      	movs	r4, #1
 80130c6:	2200      	movs	r2, #0
 80130c8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80130cc:	f04f 3aff 	mov.w	sl, #4294967295
 80130d0:	2100      	movs	r1, #0
 80130d2:	46d1      	mov	r9, sl
 80130d4:	2212      	movs	r2, #18
 80130d6:	9109      	str	r1, [sp, #36]	; 0x24
 80130d8:	e7ce      	b.n	8013078 <_dtoa_r+0x240>
 80130da:	2201      	movs	r2, #1
 80130dc:	9208      	str	r2, [sp, #32]
 80130de:	e7f5      	b.n	80130cc <_dtoa_r+0x294>
 80130e0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80130e4:	46d1      	mov	r9, sl
 80130e6:	4652      	mov	r2, sl
 80130e8:	e7c6      	b.n	8013078 <_dtoa_r+0x240>
 80130ea:	3101      	adds	r1, #1
 80130ec:	6079      	str	r1, [r7, #4]
 80130ee:	0040      	lsls	r0, r0, #1
 80130f0:	e7c6      	b.n	8013080 <_dtoa_r+0x248>
 80130f2:	bf00      	nop
 80130f4:	f3af 8000 	nop.w
 80130f8:	636f4361 	.word	0x636f4361
 80130fc:	3fd287a7 	.word	0x3fd287a7
 8013100:	8b60c8b3 	.word	0x8b60c8b3
 8013104:	3fc68a28 	.word	0x3fc68a28
 8013108:	509f79fb 	.word	0x509f79fb
 801310c:	3fd34413 	.word	0x3fd34413
 8013110:	08016755 	.word	0x08016755
 8013114:	0801676c 	.word	0x0801676c
 8013118:	7ff00000 	.word	0x7ff00000
 801311c:	08016751 	.word	0x08016751
 8013120:	08016748 	.word	0x08016748
 8013124:	08016725 	.word	0x08016725
 8013128:	080168c8 	.word	0x080168c8
 801312c:	080167cb 	.word	0x080167cb
 8013130:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8013132:	9900      	ldr	r1, [sp, #0]
 8013134:	6011      	str	r1, [r2, #0]
 8013136:	f1b9 0f0e 	cmp.w	r9, #14
 801313a:	d872      	bhi.n	8013222 <_dtoa_r+0x3ea>
 801313c:	2c00      	cmp	r4, #0
 801313e:	d070      	beq.n	8013222 <_dtoa_r+0x3ea>
 8013140:	f1bb 0f00 	cmp.w	fp, #0
 8013144:	f340 80a6 	ble.w	8013294 <_dtoa_r+0x45c>
 8013148:	49ca      	ldr	r1, [pc, #808]	; (8013474 <_dtoa_r+0x63c>)
 801314a:	f00b 020f 	and.w	r2, fp, #15
 801314e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8013152:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013156:	ed92 7b00 	vldr	d7, [r2]
 801315a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801315e:	f000 808d 	beq.w	801327c <_dtoa_r+0x444>
 8013162:	4ac5      	ldr	r2, [pc, #788]	; (8013478 <_dtoa_r+0x640>)
 8013164:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8013168:	ed92 6b08 	vldr	d6, [r2, #32]
 801316c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8013170:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013174:	f001 010f 	and.w	r1, r1, #15
 8013178:	2203      	movs	r2, #3
 801317a:	48bf      	ldr	r0, [pc, #764]	; (8013478 <_dtoa_r+0x640>)
 801317c:	2900      	cmp	r1, #0
 801317e:	d17f      	bne.n	8013280 <_dtoa_r+0x448>
 8013180:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013184:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013188:	ed8d 7b02 	vstr	d7, [sp, #8]
 801318c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801318e:	2900      	cmp	r1, #0
 8013190:	f000 80b2 	beq.w	80132f8 <_dtoa_r+0x4c0>
 8013194:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013198:	ed9d 7b02 	vldr	d7, [sp, #8]
 801319c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80131a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131a4:	f140 80a8 	bpl.w	80132f8 <_dtoa_r+0x4c0>
 80131a8:	f1b9 0f00 	cmp.w	r9, #0
 80131ac:	f000 80a4 	beq.w	80132f8 <_dtoa_r+0x4c0>
 80131b0:	f1ba 0f00 	cmp.w	sl, #0
 80131b4:	dd31      	ble.n	801321a <_dtoa_r+0x3e2>
 80131b6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80131ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80131be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80131c2:	f10b 37ff 	add.w	r7, fp, #4294967295
 80131c6:	3201      	adds	r2, #1
 80131c8:	4650      	mov	r0, sl
 80131ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 80131ce:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80131d2:	ee07 2a90 	vmov	s15, r2
 80131d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80131da:	eea7 5b06 	vfma.f64	d5, d7, d6
 80131de:	ed8d 5b02 	vstr	d5, [sp, #8]
 80131e2:	9c03      	ldr	r4, [sp, #12]
 80131e4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80131e8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80131ec:	2800      	cmp	r0, #0
 80131ee:	f040 8086 	bne.w	80132fe <_dtoa_r+0x4c6>
 80131f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80131f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80131fa:	ec42 1b17 	vmov	d7, r1, r2
 80131fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013206:	f300 8272 	bgt.w	80136ee <_dtoa_r+0x8b6>
 801320a:	eeb1 7b47 	vneg.f64	d7, d7
 801320e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013216:	f100 8267 	bmi.w	80136e8 <_dtoa_r+0x8b0>
 801321a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801321e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8013222:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013224:	2a00      	cmp	r2, #0
 8013226:	f2c0 8129 	blt.w	801347c <_dtoa_r+0x644>
 801322a:	f1bb 0f0e 	cmp.w	fp, #14
 801322e:	f300 8125 	bgt.w	801347c <_dtoa_r+0x644>
 8013232:	4b90      	ldr	r3, [pc, #576]	; (8013474 <_dtoa_r+0x63c>)
 8013234:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013238:	ed93 6b00 	vldr	d6, [r3]
 801323c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801323e:	2b00      	cmp	r3, #0
 8013240:	f280 80c3 	bge.w	80133ca <_dtoa_r+0x592>
 8013244:	f1b9 0f00 	cmp.w	r9, #0
 8013248:	f300 80bf 	bgt.w	80133ca <_dtoa_r+0x592>
 801324c:	f040 824c 	bne.w	80136e8 <_dtoa_r+0x8b0>
 8013250:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013254:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013258:	ed9d 7b02 	vldr	d7, [sp, #8]
 801325c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013264:	464c      	mov	r4, r9
 8013266:	464f      	mov	r7, r9
 8013268:	f280 8222 	bge.w	80136b0 <_dtoa_r+0x878>
 801326c:	f8dd 8000 	ldr.w	r8, [sp]
 8013270:	2331      	movs	r3, #49	; 0x31
 8013272:	f808 3b01 	strb.w	r3, [r8], #1
 8013276:	f10b 0b01 	add.w	fp, fp, #1
 801327a:	e21e      	b.n	80136ba <_dtoa_r+0x882>
 801327c:	2202      	movs	r2, #2
 801327e:	e77c      	b.n	801317a <_dtoa_r+0x342>
 8013280:	07cc      	lsls	r4, r1, #31
 8013282:	d504      	bpl.n	801328e <_dtoa_r+0x456>
 8013284:	ed90 6b00 	vldr	d6, [r0]
 8013288:	3201      	adds	r2, #1
 801328a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801328e:	1049      	asrs	r1, r1, #1
 8013290:	3008      	adds	r0, #8
 8013292:	e773      	b.n	801317c <_dtoa_r+0x344>
 8013294:	d02e      	beq.n	80132f4 <_dtoa_r+0x4bc>
 8013296:	f1cb 0100 	rsb	r1, fp, #0
 801329a:	4a76      	ldr	r2, [pc, #472]	; (8013474 <_dtoa_r+0x63c>)
 801329c:	f001 000f 	and.w	r0, r1, #15
 80132a0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80132a4:	ed92 7b00 	vldr	d7, [r2]
 80132a8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80132ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80132b0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80132b4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80132b8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80132bc:	486e      	ldr	r0, [pc, #440]	; (8013478 <_dtoa_r+0x640>)
 80132be:	1109      	asrs	r1, r1, #4
 80132c0:	2400      	movs	r4, #0
 80132c2:	2202      	movs	r2, #2
 80132c4:	b939      	cbnz	r1, 80132d6 <_dtoa_r+0x49e>
 80132c6:	2c00      	cmp	r4, #0
 80132c8:	f43f af60 	beq.w	801318c <_dtoa_r+0x354>
 80132cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80132d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132d4:	e75a      	b.n	801318c <_dtoa_r+0x354>
 80132d6:	07cf      	lsls	r7, r1, #31
 80132d8:	d509      	bpl.n	80132ee <_dtoa_r+0x4b6>
 80132da:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80132de:	ed90 7b00 	vldr	d7, [r0]
 80132e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80132e6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80132ea:	3201      	adds	r2, #1
 80132ec:	2401      	movs	r4, #1
 80132ee:	1049      	asrs	r1, r1, #1
 80132f0:	3008      	adds	r0, #8
 80132f2:	e7e7      	b.n	80132c4 <_dtoa_r+0x48c>
 80132f4:	2202      	movs	r2, #2
 80132f6:	e749      	b.n	801318c <_dtoa_r+0x354>
 80132f8:	465f      	mov	r7, fp
 80132fa:	4648      	mov	r0, r9
 80132fc:	e765      	b.n	80131ca <_dtoa_r+0x392>
 80132fe:	ec42 1b17 	vmov	d7, r1, r2
 8013302:	4a5c      	ldr	r2, [pc, #368]	; (8013474 <_dtoa_r+0x63c>)
 8013304:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013308:	ed12 4b02 	vldr	d4, [r2, #-8]
 801330c:	9a00      	ldr	r2, [sp, #0]
 801330e:	1814      	adds	r4, r2, r0
 8013310:	9a08      	ldr	r2, [sp, #32]
 8013312:	b352      	cbz	r2, 801336a <_dtoa_r+0x532>
 8013314:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8013318:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801331c:	f8dd 8000 	ldr.w	r8, [sp]
 8013320:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013324:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013328:	ee35 7b47 	vsub.f64	d7, d5, d7
 801332c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013330:	ee14 2a90 	vmov	r2, s9
 8013334:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013338:	3230      	adds	r2, #48	; 0x30
 801333a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801333e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013346:	f808 2b01 	strb.w	r2, [r8], #1
 801334a:	d439      	bmi.n	80133c0 <_dtoa_r+0x588>
 801334c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013350:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013358:	d472      	bmi.n	8013440 <_dtoa_r+0x608>
 801335a:	45a0      	cmp	r8, r4
 801335c:	f43f af5d 	beq.w	801321a <_dtoa_r+0x3e2>
 8013360:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013364:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013368:	e7e0      	b.n	801332c <_dtoa_r+0x4f4>
 801336a:	f8dd 8000 	ldr.w	r8, [sp]
 801336e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013372:	4621      	mov	r1, r4
 8013374:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013378:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801337c:	ee14 2a90 	vmov	r2, s9
 8013380:	3230      	adds	r2, #48	; 0x30
 8013382:	f808 2b01 	strb.w	r2, [r8], #1
 8013386:	45a0      	cmp	r8, r4
 8013388:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801338c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013390:	d118      	bne.n	80133c4 <_dtoa_r+0x58c>
 8013392:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8013396:	ee37 4b05 	vadd.f64	d4, d7, d5
 801339a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801339e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133a2:	dc4d      	bgt.n	8013440 <_dtoa_r+0x608>
 80133a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80133a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80133ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133b0:	f57f af33 	bpl.w	801321a <_dtoa_r+0x3e2>
 80133b4:	4688      	mov	r8, r1
 80133b6:	3901      	subs	r1, #1
 80133b8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80133bc:	2b30      	cmp	r3, #48	; 0x30
 80133be:	d0f9      	beq.n	80133b4 <_dtoa_r+0x57c>
 80133c0:	46bb      	mov	fp, r7
 80133c2:	e02a      	b.n	801341a <_dtoa_r+0x5e2>
 80133c4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80133c8:	e7d6      	b.n	8013378 <_dtoa_r+0x540>
 80133ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80133ce:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80133d2:	f8dd 8000 	ldr.w	r8, [sp]
 80133d6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80133da:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80133de:	ee15 3a10 	vmov	r3, s10
 80133e2:	3330      	adds	r3, #48	; 0x30
 80133e4:	f808 3b01 	strb.w	r3, [r8], #1
 80133e8:	9b00      	ldr	r3, [sp, #0]
 80133ea:	eba8 0303 	sub.w	r3, r8, r3
 80133ee:	4599      	cmp	r9, r3
 80133f0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80133f4:	eea3 7b46 	vfms.f64	d7, d3, d6
 80133f8:	d133      	bne.n	8013462 <_dtoa_r+0x62a>
 80133fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80133fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013406:	dc1a      	bgt.n	801343e <_dtoa_r+0x606>
 8013408:	eeb4 7b46 	vcmp.f64	d7, d6
 801340c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013410:	d103      	bne.n	801341a <_dtoa_r+0x5e2>
 8013412:	ee15 3a10 	vmov	r3, s10
 8013416:	07d9      	lsls	r1, r3, #31
 8013418:	d411      	bmi.n	801343e <_dtoa_r+0x606>
 801341a:	4629      	mov	r1, r5
 801341c:	4630      	mov	r0, r6
 801341e:	f000 fd07 	bl	8013e30 <_Bfree>
 8013422:	2300      	movs	r3, #0
 8013424:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013426:	f888 3000 	strb.w	r3, [r8]
 801342a:	f10b 0301 	add.w	r3, fp, #1
 801342e:	6013      	str	r3, [r2, #0]
 8013430:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013432:	2b00      	cmp	r3, #0
 8013434:	f43f ad4d 	beq.w	8012ed2 <_dtoa_r+0x9a>
 8013438:	f8c3 8000 	str.w	r8, [r3]
 801343c:	e549      	b.n	8012ed2 <_dtoa_r+0x9a>
 801343e:	465f      	mov	r7, fp
 8013440:	4643      	mov	r3, r8
 8013442:	4698      	mov	r8, r3
 8013444:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013448:	2a39      	cmp	r2, #57	; 0x39
 801344a:	d106      	bne.n	801345a <_dtoa_r+0x622>
 801344c:	9a00      	ldr	r2, [sp, #0]
 801344e:	429a      	cmp	r2, r3
 8013450:	d1f7      	bne.n	8013442 <_dtoa_r+0x60a>
 8013452:	9900      	ldr	r1, [sp, #0]
 8013454:	2230      	movs	r2, #48	; 0x30
 8013456:	3701      	adds	r7, #1
 8013458:	700a      	strb	r2, [r1, #0]
 801345a:	781a      	ldrb	r2, [r3, #0]
 801345c:	3201      	adds	r2, #1
 801345e:	701a      	strb	r2, [r3, #0]
 8013460:	e7ae      	b.n	80133c0 <_dtoa_r+0x588>
 8013462:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013466:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801346a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801346e:	d1b2      	bne.n	80133d6 <_dtoa_r+0x59e>
 8013470:	e7d3      	b.n	801341a <_dtoa_r+0x5e2>
 8013472:	bf00      	nop
 8013474:	080168c8 	.word	0x080168c8
 8013478:	080168a0 	.word	0x080168a0
 801347c:	9908      	ldr	r1, [sp, #32]
 801347e:	2900      	cmp	r1, #0
 8013480:	f000 80d1 	beq.w	8013626 <_dtoa_r+0x7ee>
 8013484:	9907      	ldr	r1, [sp, #28]
 8013486:	2901      	cmp	r1, #1
 8013488:	f300 80b4 	bgt.w	80135f4 <_dtoa_r+0x7bc>
 801348c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801348e:	2900      	cmp	r1, #0
 8013490:	f000 80ac 	beq.w	80135ec <_dtoa_r+0x7b4>
 8013494:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013498:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801349c:	461c      	mov	r4, r3
 801349e:	930a      	str	r3, [sp, #40]	; 0x28
 80134a0:	9b05      	ldr	r3, [sp, #20]
 80134a2:	4413      	add	r3, r2
 80134a4:	9305      	str	r3, [sp, #20]
 80134a6:	9b06      	ldr	r3, [sp, #24]
 80134a8:	2101      	movs	r1, #1
 80134aa:	4413      	add	r3, r2
 80134ac:	4630      	mov	r0, r6
 80134ae:	9306      	str	r3, [sp, #24]
 80134b0:	f000 fd7a 	bl	8013fa8 <__i2b>
 80134b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134b6:	4607      	mov	r7, r0
 80134b8:	f1b8 0f00 	cmp.w	r8, #0
 80134bc:	dd0d      	ble.n	80134da <_dtoa_r+0x6a2>
 80134be:	9a06      	ldr	r2, [sp, #24]
 80134c0:	2a00      	cmp	r2, #0
 80134c2:	dd0a      	ble.n	80134da <_dtoa_r+0x6a2>
 80134c4:	4542      	cmp	r2, r8
 80134c6:	9905      	ldr	r1, [sp, #20]
 80134c8:	bfa8      	it	ge
 80134ca:	4642      	movge	r2, r8
 80134cc:	1a89      	subs	r1, r1, r2
 80134ce:	9105      	str	r1, [sp, #20]
 80134d0:	9906      	ldr	r1, [sp, #24]
 80134d2:	eba8 0802 	sub.w	r8, r8, r2
 80134d6:	1a8a      	subs	r2, r1, r2
 80134d8:	9206      	str	r2, [sp, #24]
 80134da:	b303      	cbz	r3, 801351e <_dtoa_r+0x6e6>
 80134dc:	9a08      	ldr	r2, [sp, #32]
 80134de:	2a00      	cmp	r2, #0
 80134e0:	f000 80a6 	beq.w	8013630 <_dtoa_r+0x7f8>
 80134e4:	2c00      	cmp	r4, #0
 80134e6:	dd13      	ble.n	8013510 <_dtoa_r+0x6d8>
 80134e8:	4639      	mov	r1, r7
 80134ea:	4622      	mov	r2, r4
 80134ec:	4630      	mov	r0, r6
 80134ee:	930c      	str	r3, [sp, #48]	; 0x30
 80134f0:	f000 fe16 	bl	8014120 <__pow5mult>
 80134f4:	462a      	mov	r2, r5
 80134f6:	4601      	mov	r1, r0
 80134f8:	4607      	mov	r7, r0
 80134fa:	4630      	mov	r0, r6
 80134fc:	f000 fd6a 	bl	8013fd4 <__multiply>
 8013500:	4629      	mov	r1, r5
 8013502:	900a      	str	r0, [sp, #40]	; 0x28
 8013504:	4630      	mov	r0, r6
 8013506:	f000 fc93 	bl	8013e30 <_Bfree>
 801350a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801350c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801350e:	4615      	mov	r5, r2
 8013510:	1b1a      	subs	r2, r3, r4
 8013512:	d004      	beq.n	801351e <_dtoa_r+0x6e6>
 8013514:	4629      	mov	r1, r5
 8013516:	4630      	mov	r0, r6
 8013518:	f000 fe02 	bl	8014120 <__pow5mult>
 801351c:	4605      	mov	r5, r0
 801351e:	2101      	movs	r1, #1
 8013520:	4630      	mov	r0, r6
 8013522:	f000 fd41 	bl	8013fa8 <__i2b>
 8013526:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013528:	2b00      	cmp	r3, #0
 801352a:	4604      	mov	r4, r0
 801352c:	f340 8082 	ble.w	8013634 <_dtoa_r+0x7fc>
 8013530:	461a      	mov	r2, r3
 8013532:	4601      	mov	r1, r0
 8013534:	4630      	mov	r0, r6
 8013536:	f000 fdf3 	bl	8014120 <__pow5mult>
 801353a:	9b07      	ldr	r3, [sp, #28]
 801353c:	2b01      	cmp	r3, #1
 801353e:	4604      	mov	r4, r0
 8013540:	dd7b      	ble.n	801363a <_dtoa_r+0x802>
 8013542:	2300      	movs	r3, #0
 8013544:	930a      	str	r3, [sp, #40]	; 0x28
 8013546:	6922      	ldr	r2, [r4, #16]
 8013548:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801354c:	6910      	ldr	r0, [r2, #16]
 801354e:	f000 fcdb 	bl	8013f08 <__hi0bits>
 8013552:	f1c0 0020 	rsb	r0, r0, #32
 8013556:	9b06      	ldr	r3, [sp, #24]
 8013558:	4418      	add	r0, r3
 801355a:	f010 001f 	ands.w	r0, r0, #31
 801355e:	f000 808d 	beq.w	801367c <_dtoa_r+0x844>
 8013562:	f1c0 0220 	rsb	r2, r0, #32
 8013566:	2a04      	cmp	r2, #4
 8013568:	f340 8086 	ble.w	8013678 <_dtoa_r+0x840>
 801356c:	f1c0 001c 	rsb	r0, r0, #28
 8013570:	9b05      	ldr	r3, [sp, #20]
 8013572:	4403      	add	r3, r0
 8013574:	9305      	str	r3, [sp, #20]
 8013576:	9b06      	ldr	r3, [sp, #24]
 8013578:	4403      	add	r3, r0
 801357a:	4480      	add	r8, r0
 801357c:	9306      	str	r3, [sp, #24]
 801357e:	9b05      	ldr	r3, [sp, #20]
 8013580:	2b00      	cmp	r3, #0
 8013582:	dd05      	ble.n	8013590 <_dtoa_r+0x758>
 8013584:	4629      	mov	r1, r5
 8013586:	461a      	mov	r2, r3
 8013588:	4630      	mov	r0, r6
 801358a:	f000 fe23 	bl	80141d4 <__lshift>
 801358e:	4605      	mov	r5, r0
 8013590:	9b06      	ldr	r3, [sp, #24]
 8013592:	2b00      	cmp	r3, #0
 8013594:	dd05      	ble.n	80135a2 <_dtoa_r+0x76a>
 8013596:	4621      	mov	r1, r4
 8013598:	461a      	mov	r2, r3
 801359a:	4630      	mov	r0, r6
 801359c:	f000 fe1a 	bl	80141d4 <__lshift>
 80135a0:	4604      	mov	r4, r0
 80135a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d06b      	beq.n	8013680 <_dtoa_r+0x848>
 80135a8:	4621      	mov	r1, r4
 80135aa:	4628      	mov	r0, r5
 80135ac:	f000 fe7e 	bl	80142ac <__mcmp>
 80135b0:	2800      	cmp	r0, #0
 80135b2:	da65      	bge.n	8013680 <_dtoa_r+0x848>
 80135b4:	2300      	movs	r3, #0
 80135b6:	4629      	mov	r1, r5
 80135b8:	220a      	movs	r2, #10
 80135ba:	4630      	mov	r0, r6
 80135bc:	f000 fc5a 	bl	8013e74 <__multadd>
 80135c0:	9b08      	ldr	r3, [sp, #32]
 80135c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80135c6:	4605      	mov	r5, r0
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	f000 8192 	beq.w	80138f2 <_dtoa_r+0xaba>
 80135ce:	4639      	mov	r1, r7
 80135d0:	2300      	movs	r3, #0
 80135d2:	220a      	movs	r2, #10
 80135d4:	4630      	mov	r0, r6
 80135d6:	f000 fc4d 	bl	8013e74 <__multadd>
 80135da:	f1ba 0f00 	cmp.w	sl, #0
 80135de:	4607      	mov	r7, r0
 80135e0:	f300 808e 	bgt.w	8013700 <_dtoa_r+0x8c8>
 80135e4:	9b07      	ldr	r3, [sp, #28]
 80135e6:	2b02      	cmp	r3, #2
 80135e8:	dc51      	bgt.n	801368e <_dtoa_r+0x856>
 80135ea:	e089      	b.n	8013700 <_dtoa_r+0x8c8>
 80135ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80135ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80135f2:	e751      	b.n	8013498 <_dtoa_r+0x660>
 80135f4:	f109 34ff 	add.w	r4, r9, #4294967295
 80135f8:	42a3      	cmp	r3, r4
 80135fa:	bfbf      	itttt	lt
 80135fc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80135fe:	1ae3      	sublt	r3, r4, r3
 8013600:	18d2      	addlt	r2, r2, r3
 8013602:	4613      	movlt	r3, r2
 8013604:	bfb7      	itett	lt
 8013606:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013608:	1b1c      	subge	r4, r3, r4
 801360a:	4623      	movlt	r3, r4
 801360c:	2400      	movlt	r4, #0
 801360e:	f1b9 0f00 	cmp.w	r9, #0
 8013612:	bfb5      	itete	lt
 8013614:	9a05      	ldrlt	r2, [sp, #20]
 8013616:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801361a:	eba2 0809 	sublt.w	r8, r2, r9
 801361e:	464a      	movge	r2, r9
 8013620:	bfb8      	it	lt
 8013622:	2200      	movlt	r2, #0
 8013624:	e73b      	b.n	801349e <_dtoa_r+0x666>
 8013626:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801362a:	9f08      	ldr	r7, [sp, #32]
 801362c:	461c      	mov	r4, r3
 801362e:	e743      	b.n	80134b8 <_dtoa_r+0x680>
 8013630:	461a      	mov	r2, r3
 8013632:	e76f      	b.n	8013514 <_dtoa_r+0x6dc>
 8013634:	9b07      	ldr	r3, [sp, #28]
 8013636:	2b01      	cmp	r3, #1
 8013638:	dc18      	bgt.n	801366c <_dtoa_r+0x834>
 801363a:	9b02      	ldr	r3, [sp, #8]
 801363c:	b9b3      	cbnz	r3, 801366c <_dtoa_r+0x834>
 801363e:	9b03      	ldr	r3, [sp, #12]
 8013640:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013644:	b9a2      	cbnz	r2, 8013670 <_dtoa_r+0x838>
 8013646:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801364a:	0d12      	lsrs	r2, r2, #20
 801364c:	0512      	lsls	r2, r2, #20
 801364e:	b18a      	cbz	r2, 8013674 <_dtoa_r+0x83c>
 8013650:	9b05      	ldr	r3, [sp, #20]
 8013652:	3301      	adds	r3, #1
 8013654:	9305      	str	r3, [sp, #20]
 8013656:	9b06      	ldr	r3, [sp, #24]
 8013658:	3301      	adds	r3, #1
 801365a:	9306      	str	r3, [sp, #24]
 801365c:	2301      	movs	r3, #1
 801365e:	930a      	str	r3, [sp, #40]	; 0x28
 8013660:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013662:	2b00      	cmp	r3, #0
 8013664:	f47f af6f 	bne.w	8013546 <_dtoa_r+0x70e>
 8013668:	2001      	movs	r0, #1
 801366a:	e774      	b.n	8013556 <_dtoa_r+0x71e>
 801366c:	2300      	movs	r3, #0
 801366e:	e7f6      	b.n	801365e <_dtoa_r+0x826>
 8013670:	9b02      	ldr	r3, [sp, #8]
 8013672:	e7f4      	b.n	801365e <_dtoa_r+0x826>
 8013674:	920a      	str	r2, [sp, #40]	; 0x28
 8013676:	e7f3      	b.n	8013660 <_dtoa_r+0x828>
 8013678:	d081      	beq.n	801357e <_dtoa_r+0x746>
 801367a:	4610      	mov	r0, r2
 801367c:	301c      	adds	r0, #28
 801367e:	e777      	b.n	8013570 <_dtoa_r+0x738>
 8013680:	f1b9 0f00 	cmp.w	r9, #0
 8013684:	dc37      	bgt.n	80136f6 <_dtoa_r+0x8be>
 8013686:	9b07      	ldr	r3, [sp, #28]
 8013688:	2b02      	cmp	r3, #2
 801368a:	dd34      	ble.n	80136f6 <_dtoa_r+0x8be>
 801368c:	46ca      	mov	sl, r9
 801368e:	f1ba 0f00 	cmp.w	sl, #0
 8013692:	d10d      	bne.n	80136b0 <_dtoa_r+0x878>
 8013694:	4621      	mov	r1, r4
 8013696:	4653      	mov	r3, sl
 8013698:	2205      	movs	r2, #5
 801369a:	4630      	mov	r0, r6
 801369c:	f000 fbea 	bl	8013e74 <__multadd>
 80136a0:	4601      	mov	r1, r0
 80136a2:	4604      	mov	r4, r0
 80136a4:	4628      	mov	r0, r5
 80136a6:	f000 fe01 	bl	80142ac <__mcmp>
 80136aa:	2800      	cmp	r0, #0
 80136ac:	f73f adde 	bgt.w	801326c <_dtoa_r+0x434>
 80136b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136b2:	f8dd 8000 	ldr.w	r8, [sp]
 80136b6:	ea6f 0b03 	mvn.w	fp, r3
 80136ba:	f04f 0900 	mov.w	r9, #0
 80136be:	4621      	mov	r1, r4
 80136c0:	4630      	mov	r0, r6
 80136c2:	f000 fbb5 	bl	8013e30 <_Bfree>
 80136c6:	2f00      	cmp	r7, #0
 80136c8:	f43f aea7 	beq.w	801341a <_dtoa_r+0x5e2>
 80136cc:	f1b9 0f00 	cmp.w	r9, #0
 80136d0:	d005      	beq.n	80136de <_dtoa_r+0x8a6>
 80136d2:	45b9      	cmp	r9, r7
 80136d4:	d003      	beq.n	80136de <_dtoa_r+0x8a6>
 80136d6:	4649      	mov	r1, r9
 80136d8:	4630      	mov	r0, r6
 80136da:	f000 fba9 	bl	8013e30 <_Bfree>
 80136de:	4639      	mov	r1, r7
 80136e0:	4630      	mov	r0, r6
 80136e2:	f000 fba5 	bl	8013e30 <_Bfree>
 80136e6:	e698      	b.n	801341a <_dtoa_r+0x5e2>
 80136e8:	2400      	movs	r4, #0
 80136ea:	4627      	mov	r7, r4
 80136ec:	e7e0      	b.n	80136b0 <_dtoa_r+0x878>
 80136ee:	46bb      	mov	fp, r7
 80136f0:	4604      	mov	r4, r0
 80136f2:	4607      	mov	r7, r0
 80136f4:	e5ba      	b.n	801326c <_dtoa_r+0x434>
 80136f6:	9b08      	ldr	r3, [sp, #32]
 80136f8:	46ca      	mov	sl, r9
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	f000 8100 	beq.w	8013900 <_dtoa_r+0xac8>
 8013700:	f1b8 0f00 	cmp.w	r8, #0
 8013704:	dd05      	ble.n	8013712 <_dtoa_r+0x8da>
 8013706:	4639      	mov	r1, r7
 8013708:	4642      	mov	r2, r8
 801370a:	4630      	mov	r0, r6
 801370c:	f000 fd62 	bl	80141d4 <__lshift>
 8013710:	4607      	mov	r7, r0
 8013712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013714:	2b00      	cmp	r3, #0
 8013716:	d05d      	beq.n	80137d4 <_dtoa_r+0x99c>
 8013718:	6879      	ldr	r1, [r7, #4]
 801371a:	4630      	mov	r0, r6
 801371c:	f000 fb48 	bl	8013db0 <_Balloc>
 8013720:	4680      	mov	r8, r0
 8013722:	b928      	cbnz	r0, 8013730 <_dtoa_r+0x8f8>
 8013724:	4b82      	ldr	r3, [pc, #520]	; (8013930 <_dtoa_r+0xaf8>)
 8013726:	4602      	mov	r2, r0
 8013728:	f240 21ea 	movw	r1, #746	; 0x2ea
 801372c:	f7ff bb9a 	b.w	8012e64 <_dtoa_r+0x2c>
 8013730:	693a      	ldr	r2, [r7, #16]
 8013732:	3202      	adds	r2, #2
 8013734:	0092      	lsls	r2, r2, #2
 8013736:	f107 010c 	add.w	r1, r7, #12
 801373a:	300c      	adds	r0, #12
 801373c:	f000 fb2a 	bl	8013d94 <memcpy>
 8013740:	2201      	movs	r2, #1
 8013742:	4641      	mov	r1, r8
 8013744:	4630      	mov	r0, r6
 8013746:	f000 fd45 	bl	80141d4 <__lshift>
 801374a:	9b00      	ldr	r3, [sp, #0]
 801374c:	3301      	adds	r3, #1
 801374e:	9305      	str	r3, [sp, #20]
 8013750:	9b00      	ldr	r3, [sp, #0]
 8013752:	4453      	add	r3, sl
 8013754:	9309      	str	r3, [sp, #36]	; 0x24
 8013756:	9b02      	ldr	r3, [sp, #8]
 8013758:	f003 0301 	and.w	r3, r3, #1
 801375c:	46b9      	mov	r9, r7
 801375e:	9308      	str	r3, [sp, #32]
 8013760:	4607      	mov	r7, r0
 8013762:	9b05      	ldr	r3, [sp, #20]
 8013764:	4621      	mov	r1, r4
 8013766:	3b01      	subs	r3, #1
 8013768:	4628      	mov	r0, r5
 801376a:	9302      	str	r3, [sp, #8]
 801376c:	f7ff fad8 	bl	8012d20 <quorem>
 8013770:	4603      	mov	r3, r0
 8013772:	3330      	adds	r3, #48	; 0x30
 8013774:	9006      	str	r0, [sp, #24]
 8013776:	4649      	mov	r1, r9
 8013778:	4628      	mov	r0, r5
 801377a:	930a      	str	r3, [sp, #40]	; 0x28
 801377c:	f000 fd96 	bl	80142ac <__mcmp>
 8013780:	463a      	mov	r2, r7
 8013782:	4682      	mov	sl, r0
 8013784:	4621      	mov	r1, r4
 8013786:	4630      	mov	r0, r6
 8013788:	f000 fdac 	bl	80142e4 <__mdiff>
 801378c:	68c2      	ldr	r2, [r0, #12]
 801378e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013790:	4680      	mov	r8, r0
 8013792:	bb0a      	cbnz	r2, 80137d8 <_dtoa_r+0x9a0>
 8013794:	4601      	mov	r1, r0
 8013796:	4628      	mov	r0, r5
 8013798:	f000 fd88 	bl	80142ac <__mcmp>
 801379c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801379e:	4602      	mov	r2, r0
 80137a0:	4641      	mov	r1, r8
 80137a2:	4630      	mov	r0, r6
 80137a4:	920e      	str	r2, [sp, #56]	; 0x38
 80137a6:	930a      	str	r3, [sp, #40]	; 0x28
 80137a8:	f000 fb42 	bl	8013e30 <_Bfree>
 80137ac:	9b07      	ldr	r3, [sp, #28]
 80137ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80137b0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80137b4:	ea43 0102 	orr.w	r1, r3, r2
 80137b8:	9b08      	ldr	r3, [sp, #32]
 80137ba:	430b      	orrs	r3, r1
 80137bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137be:	d10d      	bne.n	80137dc <_dtoa_r+0x9a4>
 80137c0:	2b39      	cmp	r3, #57	; 0x39
 80137c2:	d029      	beq.n	8013818 <_dtoa_r+0x9e0>
 80137c4:	f1ba 0f00 	cmp.w	sl, #0
 80137c8:	dd01      	ble.n	80137ce <_dtoa_r+0x996>
 80137ca:	9b06      	ldr	r3, [sp, #24]
 80137cc:	3331      	adds	r3, #49	; 0x31
 80137ce:	9a02      	ldr	r2, [sp, #8]
 80137d0:	7013      	strb	r3, [r2, #0]
 80137d2:	e774      	b.n	80136be <_dtoa_r+0x886>
 80137d4:	4638      	mov	r0, r7
 80137d6:	e7b8      	b.n	801374a <_dtoa_r+0x912>
 80137d8:	2201      	movs	r2, #1
 80137da:	e7e1      	b.n	80137a0 <_dtoa_r+0x968>
 80137dc:	f1ba 0f00 	cmp.w	sl, #0
 80137e0:	db06      	blt.n	80137f0 <_dtoa_r+0x9b8>
 80137e2:	9907      	ldr	r1, [sp, #28]
 80137e4:	ea41 0a0a 	orr.w	sl, r1, sl
 80137e8:	9908      	ldr	r1, [sp, #32]
 80137ea:	ea5a 0101 	orrs.w	r1, sl, r1
 80137ee:	d120      	bne.n	8013832 <_dtoa_r+0x9fa>
 80137f0:	2a00      	cmp	r2, #0
 80137f2:	ddec      	ble.n	80137ce <_dtoa_r+0x996>
 80137f4:	4629      	mov	r1, r5
 80137f6:	2201      	movs	r2, #1
 80137f8:	4630      	mov	r0, r6
 80137fa:	9305      	str	r3, [sp, #20]
 80137fc:	f000 fcea 	bl	80141d4 <__lshift>
 8013800:	4621      	mov	r1, r4
 8013802:	4605      	mov	r5, r0
 8013804:	f000 fd52 	bl	80142ac <__mcmp>
 8013808:	2800      	cmp	r0, #0
 801380a:	9b05      	ldr	r3, [sp, #20]
 801380c:	dc02      	bgt.n	8013814 <_dtoa_r+0x9dc>
 801380e:	d1de      	bne.n	80137ce <_dtoa_r+0x996>
 8013810:	07da      	lsls	r2, r3, #31
 8013812:	d5dc      	bpl.n	80137ce <_dtoa_r+0x996>
 8013814:	2b39      	cmp	r3, #57	; 0x39
 8013816:	d1d8      	bne.n	80137ca <_dtoa_r+0x992>
 8013818:	9a02      	ldr	r2, [sp, #8]
 801381a:	2339      	movs	r3, #57	; 0x39
 801381c:	7013      	strb	r3, [r2, #0]
 801381e:	4643      	mov	r3, r8
 8013820:	4698      	mov	r8, r3
 8013822:	3b01      	subs	r3, #1
 8013824:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8013828:	2a39      	cmp	r2, #57	; 0x39
 801382a:	d051      	beq.n	80138d0 <_dtoa_r+0xa98>
 801382c:	3201      	adds	r2, #1
 801382e:	701a      	strb	r2, [r3, #0]
 8013830:	e745      	b.n	80136be <_dtoa_r+0x886>
 8013832:	2a00      	cmp	r2, #0
 8013834:	dd03      	ble.n	801383e <_dtoa_r+0xa06>
 8013836:	2b39      	cmp	r3, #57	; 0x39
 8013838:	d0ee      	beq.n	8013818 <_dtoa_r+0x9e0>
 801383a:	3301      	adds	r3, #1
 801383c:	e7c7      	b.n	80137ce <_dtoa_r+0x996>
 801383e:	9a05      	ldr	r2, [sp, #20]
 8013840:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013842:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013846:	428a      	cmp	r2, r1
 8013848:	d02b      	beq.n	80138a2 <_dtoa_r+0xa6a>
 801384a:	4629      	mov	r1, r5
 801384c:	2300      	movs	r3, #0
 801384e:	220a      	movs	r2, #10
 8013850:	4630      	mov	r0, r6
 8013852:	f000 fb0f 	bl	8013e74 <__multadd>
 8013856:	45b9      	cmp	r9, r7
 8013858:	4605      	mov	r5, r0
 801385a:	f04f 0300 	mov.w	r3, #0
 801385e:	f04f 020a 	mov.w	r2, #10
 8013862:	4649      	mov	r1, r9
 8013864:	4630      	mov	r0, r6
 8013866:	d107      	bne.n	8013878 <_dtoa_r+0xa40>
 8013868:	f000 fb04 	bl	8013e74 <__multadd>
 801386c:	4681      	mov	r9, r0
 801386e:	4607      	mov	r7, r0
 8013870:	9b05      	ldr	r3, [sp, #20]
 8013872:	3301      	adds	r3, #1
 8013874:	9305      	str	r3, [sp, #20]
 8013876:	e774      	b.n	8013762 <_dtoa_r+0x92a>
 8013878:	f000 fafc 	bl	8013e74 <__multadd>
 801387c:	4639      	mov	r1, r7
 801387e:	4681      	mov	r9, r0
 8013880:	2300      	movs	r3, #0
 8013882:	220a      	movs	r2, #10
 8013884:	4630      	mov	r0, r6
 8013886:	f000 faf5 	bl	8013e74 <__multadd>
 801388a:	4607      	mov	r7, r0
 801388c:	e7f0      	b.n	8013870 <_dtoa_r+0xa38>
 801388e:	f1ba 0f00 	cmp.w	sl, #0
 8013892:	9a00      	ldr	r2, [sp, #0]
 8013894:	bfcc      	ite	gt
 8013896:	46d0      	movgt	r8, sl
 8013898:	f04f 0801 	movle.w	r8, #1
 801389c:	4490      	add	r8, r2
 801389e:	f04f 0900 	mov.w	r9, #0
 80138a2:	4629      	mov	r1, r5
 80138a4:	2201      	movs	r2, #1
 80138a6:	4630      	mov	r0, r6
 80138a8:	9302      	str	r3, [sp, #8]
 80138aa:	f000 fc93 	bl	80141d4 <__lshift>
 80138ae:	4621      	mov	r1, r4
 80138b0:	4605      	mov	r5, r0
 80138b2:	f000 fcfb 	bl	80142ac <__mcmp>
 80138b6:	2800      	cmp	r0, #0
 80138b8:	dcb1      	bgt.n	801381e <_dtoa_r+0x9e6>
 80138ba:	d102      	bne.n	80138c2 <_dtoa_r+0xa8a>
 80138bc:	9b02      	ldr	r3, [sp, #8]
 80138be:	07db      	lsls	r3, r3, #31
 80138c0:	d4ad      	bmi.n	801381e <_dtoa_r+0x9e6>
 80138c2:	4643      	mov	r3, r8
 80138c4:	4698      	mov	r8, r3
 80138c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80138ca:	2a30      	cmp	r2, #48	; 0x30
 80138cc:	d0fa      	beq.n	80138c4 <_dtoa_r+0xa8c>
 80138ce:	e6f6      	b.n	80136be <_dtoa_r+0x886>
 80138d0:	9a00      	ldr	r2, [sp, #0]
 80138d2:	429a      	cmp	r2, r3
 80138d4:	d1a4      	bne.n	8013820 <_dtoa_r+0x9e8>
 80138d6:	f10b 0b01 	add.w	fp, fp, #1
 80138da:	2331      	movs	r3, #49	; 0x31
 80138dc:	e778      	b.n	80137d0 <_dtoa_r+0x998>
 80138de:	4b15      	ldr	r3, [pc, #84]	; (8013934 <_dtoa_r+0xafc>)
 80138e0:	f7ff bb12 	b.w	8012f08 <_dtoa_r+0xd0>
 80138e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	f47f aaee 	bne.w	8012ec8 <_dtoa_r+0x90>
 80138ec:	4b12      	ldr	r3, [pc, #72]	; (8013938 <_dtoa_r+0xb00>)
 80138ee:	f7ff bb0b 	b.w	8012f08 <_dtoa_r+0xd0>
 80138f2:	f1ba 0f00 	cmp.w	sl, #0
 80138f6:	dc03      	bgt.n	8013900 <_dtoa_r+0xac8>
 80138f8:	9b07      	ldr	r3, [sp, #28]
 80138fa:	2b02      	cmp	r3, #2
 80138fc:	f73f aec7 	bgt.w	801368e <_dtoa_r+0x856>
 8013900:	f8dd 8000 	ldr.w	r8, [sp]
 8013904:	4621      	mov	r1, r4
 8013906:	4628      	mov	r0, r5
 8013908:	f7ff fa0a 	bl	8012d20 <quorem>
 801390c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013910:	f808 3b01 	strb.w	r3, [r8], #1
 8013914:	9a00      	ldr	r2, [sp, #0]
 8013916:	eba8 0202 	sub.w	r2, r8, r2
 801391a:	4592      	cmp	sl, r2
 801391c:	ddb7      	ble.n	801388e <_dtoa_r+0xa56>
 801391e:	4629      	mov	r1, r5
 8013920:	2300      	movs	r3, #0
 8013922:	220a      	movs	r2, #10
 8013924:	4630      	mov	r0, r6
 8013926:	f000 faa5 	bl	8013e74 <__multadd>
 801392a:	4605      	mov	r5, r0
 801392c:	e7ea      	b.n	8013904 <_dtoa_r+0xacc>
 801392e:	bf00      	nop
 8013930:	080167cb 	.word	0x080167cb
 8013934:	08016724 	.word	0x08016724
 8013938:	08016748 	.word	0x08016748

0801393c <__sflush_r>:
 801393c:	898a      	ldrh	r2, [r1, #12]
 801393e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013942:	4605      	mov	r5, r0
 8013944:	0710      	lsls	r0, r2, #28
 8013946:	460c      	mov	r4, r1
 8013948:	d458      	bmi.n	80139fc <__sflush_r+0xc0>
 801394a:	684b      	ldr	r3, [r1, #4]
 801394c:	2b00      	cmp	r3, #0
 801394e:	dc05      	bgt.n	801395c <__sflush_r+0x20>
 8013950:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013952:	2b00      	cmp	r3, #0
 8013954:	dc02      	bgt.n	801395c <__sflush_r+0x20>
 8013956:	2000      	movs	r0, #0
 8013958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801395c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801395e:	2e00      	cmp	r6, #0
 8013960:	d0f9      	beq.n	8013956 <__sflush_r+0x1a>
 8013962:	2300      	movs	r3, #0
 8013964:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013968:	682f      	ldr	r7, [r5, #0]
 801396a:	602b      	str	r3, [r5, #0]
 801396c:	d032      	beq.n	80139d4 <__sflush_r+0x98>
 801396e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013970:	89a3      	ldrh	r3, [r4, #12]
 8013972:	075a      	lsls	r2, r3, #29
 8013974:	d505      	bpl.n	8013982 <__sflush_r+0x46>
 8013976:	6863      	ldr	r3, [r4, #4]
 8013978:	1ac0      	subs	r0, r0, r3
 801397a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801397c:	b10b      	cbz	r3, 8013982 <__sflush_r+0x46>
 801397e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013980:	1ac0      	subs	r0, r0, r3
 8013982:	2300      	movs	r3, #0
 8013984:	4602      	mov	r2, r0
 8013986:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013988:	6a21      	ldr	r1, [r4, #32]
 801398a:	4628      	mov	r0, r5
 801398c:	47b0      	blx	r6
 801398e:	1c43      	adds	r3, r0, #1
 8013990:	89a3      	ldrh	r3, [r4, #12]
 8013992:	d106      	bne.n	80139a2 <__sflush_r+0x66>
 8013994:	6829      	ldr	r1, [r5, #0]
 8013996:	291d      	cmp	r1, #29
 8013998:	d82c      	bhi.n	80139f4 <__sflush_r+0xb8>
 801399a:	4a2a      	ldr	r2, [pc, #168]	; (8013a44 <__sflush_r+0x108>)
 801399c:	40ca      	lsrs	r2, r1
 801399e:	07d6      	lsls	r6, r2, #31
 80139a0:	d528      	bpl.n	80139f4 <__sflush_r+0xb8>
 80139a2:	2200      	movs	r2, #0
 80139a4:	6062      	str	r2, [r4, #4]
 80139a6:	04d9      	lsls	r1, r3, #19
 80139a8:	6922      	ldr	r2, [r4, #16]
 80139aa:	6022      	str	r2, [r4, #0]
 80139ac:	d504      	bpl.n	80139b8 <__sflush_r+0x7c>
 80139ae:	1c42      	adds	r2, r0, #1
 80139b0:	d101      	bne.n	80139b6 <__sflush_r+0x7a>
 80139b2:	682b      	ldr	r3, [r5, #0]
 80139b4:	b903      	cbnz	r3, 80139b8 <__sflush_r+0x7c>
 80139b6:	6560      	str	r0, [r4, #84]	; 0x54
 80139b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80139ba:	602f      	str	r7, [r5, #0]
 80139bc:	2900      	cmp	r1, #0
 80139be:	d0ca      	beq.n	8013956 <__sflush_r+0x1a>
 80139c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80139c4:	4299      	cmp	r1, r3
 80139c6:	d002      	beq.n	80139ce <__sflush_r+0x92>
 80139c8:	4628      	mov	r0, r5
 80139ca:	f000 fd7f 	bl	80144cc <_free_r>
 80139ce:	2000      	movs	r0, #0
 80139d0:	6360      	str	r0, [r4, #52]	; 0x34
 80139d2:	e7c1      	b.n	8013958 <__sflush_r+0x1c>
 80139d4:	6a21      	ldr	r1, [r4, #32]
 80139d6:	2301      	movs	r3, #1
 80139d8:	4628      	mov	r0, r5
 80139da:	47b0      	blx	r6
 80139dc:	1c41      	adds	r1, r0, #1
 80139de:	d1c7      	bne.n	8013970 <__sflush_r+0x34>
 80139e0:	682b      	ldr	r3, [r5, #0]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d0c4      	beq.n	8013970 <__sflush_r+0x34>
 80139e6:	2b1d      	cmp	r3, #29
 80139e8:	d001      	beq.n	80139ee <__sflush_r+0xb2>
 80139ea:	2b16      	cmp	r3, #22
 80139ec:	d101      	bne.n	80139f2 <__sflush_r+0xb6>
 80139ee:	602f      	str	r7, [r5, #0]
 80139f0:	e7b1      	b.n	8013956 <__sflush_r+0x1a>
 80139f2:	89a3      	ldrh	r3, [r4, #12]
 80139f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139f8:	81a3      	strh	r3, [r4, #12]
 80139fa:	e7ad      	b.n	8013958 <__sflush_r+0x1c>
 80139fc:	690f      	ldr	r7, [r1, #16]
 80139fe:	2f00      	cmp	r7, #0
 8013a00:	d0a9      	beq.n	8013956 <__sflush_r+0x1a>
 8013a02:	0793      	lsls	r3, r2, #30
 8013a04:	680e      	ldr	r6, [r1, #0]
 8013a06:	bf08      	it	eq
 8013a08:	694b      	ldreq	r3, [r1, #20]
 8013a0a:	600f      	str	r7, [r1, #0]
 8013a0c:	bf18      	it	ne
 8013a0e:	2300      	movne	r3, #0
 8013a10:	eba6 0807 	sub.w	r8, r6, r7
 8013a14:	608b      	str	r3, [r1, #8]
 8013a16:	f1b8 0f00 	cmp.w	r8, #0
 8013a1a:	dd9c      	ble.n	8013956 <__sflush_r+0x1a>
 8013a1c:	6a21      	ldr	r1, [r4, #32]
 8013a1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013a20:	4643      	mov	r3, r8
 8013a22:	463a      	mov	r2, r7
 8013a24:	4628      	mov	r0, r5
 8013a26:	47b0      	blx	r6
 8013a28:	2800      	cmp	r0, #0
 8013a2a:	dc06      	bgt.n	8013a3a <__sflush_r+0xfe>
 8013a2c:	89a3      	ldrh	r3, [r4, #12]
 8013a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a32:	81a3      	strh	r3, [r4, #12]
 8013a34:	f04f 30ff 	mov.w	r0, #4294967295
 8013a38:	e78e      	b.n	8013958 <__sflush_r+0x1c>
 8013a3a:	4407      	add	r7, r0
 8013a3c:	eba8 0800 	sub.w	r8, r8, r0
 8013a40:	e7e9      	b.n	8013a16 <__sflush_r+0xda>
 8013a42:	bf00      	nop
 8013a44:	20400001 	.word	0x20400001

08013a48 <_fflush_r>:
 8013a48:	b538      	push	{r3, r4, r5, lr}
 8013a4a:	690b      	ldr	r3, [r1, #16]
 8013a4c:	4605      	mov	r5, r0
 8013a4e:	460c      	mov	r4, r1
 8013a50:	b913      	cbnz	r3, 8013a58 <_fflush_r+0x10>
 8013a52:	2500      	movs	r5, #0
 8013a54:	4628      	mov	r0, r5
 8013a56:	bd38      	pop	{r3, r4, r5, pc}
 8013a58:	b118      	cbz	r0, 8013a62 <_fflush_r+0x1a>
 8013a5a:	6983      	ldr	r3, [r0, #24]
 8013a5c:	b90b      	cbnz	r3, 8013a62 <_fflush_r+0x1a>
 8013a5e:	f000 f887 	bl	8013b70 <__sinit>
 8013a62:	4b14      	ldr	r3, [pc, #80]	; (8013ab4 <_fflush_r+0x6c>)
 8013a64:	429c      	cmp	r4, r3
 8013a66:	d11b      	bne.n	8013aa0 <_fflush_r+0x58>
 8013a68:	686c      	ldr	r4, [r5, #4]
 8013a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d0ef      	beq.n	8013a52 <_fflush_r+0xa>
 8013a72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013a74:	07d0      	lsls	r0, r2, #31
 8013a76:	d404      	bmi.n	8013a82 <_fflush_r+0x3a>
 8013a78:	0599      	lsls	r1, r3, #22
 8013a7a:	d402      	bmi.n	8013a82 <_fflush_r+0x3a>
 8013a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a7e:	f000 f91a 	bl	8013cb6 <__retarget_lock_acquire_recursive>
 8013a82:	4628      	mov	r0, r5
 8013a84:	4621      	mov	r1, r4
 8013a86:	f7ff ff59 	bl	801393c <__sflush_r>
 8013a8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013a8c:	07da      	lsls	r2, r3, #31
 8013a8e:	4605      	mov	r5, r0
 8013a90:	d4e0      	bmi.n	8013a54 <_fflush_r+0xc>
 8013a92:	89a3      	ldrh	r3, [r4, #12]
 8013a94:	059b      	lsls	r3, r3, #22
 8013a96:	d4dd      	bmi.n	8013a54 <_fflush_r+0xc>
 8013a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a9a:	f000 f90d 	bl	8013cb8 <__retarget_lock_release_recursive>
 8013a9e:	e7d9      	b.n	8013a54 <_fflush_r+0xc>
 8013aa0:	4b05      	ldr	r3, [pc, #20]	; (8013ab8 <_fflush_r+0x70>)
 8013aa2:	429c      	cmp	r4, r3
 8013aa4:	d101      	bne.n	8013aaa <_fflush_r+0x62>
 8013aa6:	68ac      	ldr	r4, [r5, #8]
 8013aa8:	e7df      	b.n	8013a6a <_fflush_r+0x22>
 8013aaa:	4b04      	ldr	r3, [pc, #16]	; (8013abc <_fflush_r+0x74>)
 8013aac:	429c      	cmp	r4, r3
 8013aae:	bf08      	it	eq
 8013ab0:	68ec      	ldreq	r4, [r5, #12]
 8013ab2:	e7da      	b.n	8013a6a <_fflush_r+0x22>
 8013ab4:	080167fc 	.word	0x080167fc
 8013ab8:	0801681c 	.word	0x0801681c
 8013abc:	080167dc 	.word	0x080167dc

08013ac0 <std>:
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	b510      	push	{r4, lr}
 8013ac4:	4604      	mov	r4, r0
 8013ac6:	e9c0 3300 	strd	r3, r3, [r0]
 8013aca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013ace:	6083      	str	r3, [r0, #8]
 8013ad0:	8181      	strh	r1, [r0, #12]
 8013ad2:	6643      	str	r3, [r0, #100]	; 0x64
 8013ad4:	81c2      	strh	r2, [r0, #14]
 8013ad6:	6183      	str	r3, [r0, #24]
 8013ad8:	4619      	mov	r1, r3
 8013ada:	2208      	movs	r2, #8
 8013adc:	305c      	adds	r0, #92	; 0x5c
 8013ade:	f7fe fb9f 	bl	8012220 <memset>
 8013ae2:	4b05      	ldr	r3, [pc, #20]	; (8013af8 <std+0x38>)
 8013ae4:	6263      	str	r3, [r4, #36]	; 0x24
 8013ae6:	4b05      	ldr	r3, [pc, #20]	; (8013afc <std+0x3c>)
 8013ae8:	62a3      	str	r3, [r4, #40]	; 0x28
 8013aea:	4b05      	ldr	r3, [pc, #20]	; (8013b00 <std+0x40>)
 8013aec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013aee:	4b05      	ldr	r3, [pc, #20]	; (8013b04 <std+0x44>)
 8013af0:	6224      	str	r4, [r4, #32]
 8013af2:	6323      	str	r3, [r4, #48]	; 0x30
 8013af4:	bd10      	pop	{r4, pc}
 8013af6:	bf00      	nop
 8013af8:	08014641 	.word	0x08014641
 8013afc:	08014663 	.word	0x08014663
 8013b00:	0801469b 	.word	0x0801469b
 8013b04:	080146bf 	.word	0x080146bf

08013b08 <_cleanup_r>:
 8013b08:	4901      	ldr	r1, [pc, #4]	; (8013b10 <_cleanup_r+0x8>)
 8013b0a:	f000 b8af 	b.w	8013c6c <_fwalk_reent>
 8013b0e:	bf00      	nop
 8013b10:	08013a49 	.word	0x08013a49

08013b14 <__sfmoreglue>:
 8013b14:	b570      	push	{r4, r5, r6, lr}
 8013b16:	1e4a      	subs	r2, r1, #1
 8013b18:	2568      	movs	r5, #104	; 0x68
 8013b1a:	4355      	muls	r5, r2
 8013b1c:	460e      	mov	r6, r1
 8013b1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013b22:	f000 fd23 	bl	801456c <_malloc_r>
 8013b26:	4604      	mov	r4, r0
 8013b28:	b140      	cbz	r0, 8013b3c <__sfmoreglue+0x28>
 8013b2a:	2100      	movs	r1, #0
 8013b2c:	e9c0 1600 	strd	r1, r6, [r0]
 8013b30:	300c      	adds	r0, #12
 8013b32:	60a0      	str	r0, [r4, #8]
 8013b34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013b38:	f7fe fb72 	bl	8012220 <memset>
 8013b3c:	4620      	mov	r0, r4
 8013b3e:	bd70      	pop	{r4, r5, r6, pc}

08013b40 <__sfp_lock_acquire>:
 8013b40:	4801      	ldr	r0, [pc, #4]	; (8013b48 <__sfp_lock_acquire+0x8>)
 8013b42:	f000 b8b8 	b.w	8013cb6 <__retarget_lock_acquire_recursive>
 8013b46:	bf00      	nop
 8013b48:	240016fc 	.word	0x240016fc

08013b4c <__sfp_lock_release>:
 8013b4c:	4801      	ldr	r0, [pc, #4]	; (8013b54 <__sfp_lock_release+0x8>)
 8013b4e:	f000 b8b3 	b.w	8013cb8 <__retarget_lock_release_recursive>
 8013b52:	bf00      	nop
 8013b54:	240016fc 	.word	0x240016fc

08013b58 <__sinit_lock_acquire>:
 8013b58:	4801      	ldr	r0, [pc, #4]	; (8013b60 <__sinit_lock_acquire+0x8>)
 8013b5a:	f000 b8ac 	b.w	8013cb6 <__retarget_lock_acquire_recursive>
 8013b5e:	bf00      	nop
 8013b60:	240016f7 	.word	0x240016f7

08013b64 <__sinit_lock_release>:
 8013b64:	4801      	ldr	r0, [pc, #4]	; (8013b6c <__sinit_lock_release+0x8>)
 8013b66:	f000 b8a7 	b.w	8013cb8 <__retarget_lock_release_recursive>
 8013b6a:	bf00      	nop
 8013b6c:	240016f7 	.word	0x240016f7

08013b70 <__sinit>:
 8013b70:	b510      	push	{r4, lr}
 8013b72:	4604      	mov	r4, r0
 8013b74:	f7ff fff0 	bl	8013b58 <__sinit_lock_acquire>
 8013b78:	69a3      	ldr	r3, [r4, #24]
 8013b7a:	b11b      	cbz	r3, 8013b84 <__sinit+0x14>
 8013b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b80:	f7ff bff0 	b.w	8013b64 <__sinit_lock_release>
 8013b84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013b88:	6523      	str	r3, [r4, #80]	; 0x50
 8013b8a:	4b13      	ldr	r3, [pc, #76]	; (8013bd8 <__sinit+0x68>)
 8013b8c:	4a13      	ldr	r2, [pc, #76]	; (8013bdc <__sinit+0x6c>)
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	62a2      	str	r2, [r4, #40]	; 0x28
 8013b92:	42a3      	cmp	r3, r4
 8013b94:	bf04      	itt	eq
 8013b96:	2301      	moveq	r3, #1
 8013b98:	61a3      	streq	r3, [r4, #24]
 8013b9a:	4620      	mov	r0, r4
 8013b9c:	f000 f820 	bl	8013be0 <__sfp>
 8013ba0:	6060      	str	r0, [r4, #4]
 8013ba2:	4620      	mov	r0, r4
 8013ba4:	f000 f81c 	bl	8013be0 <__sfp>
 8013ba8:	60a0      	str	r0, [r4, #8]
 8013baa:	4620      	mov	r0, r4
 8013bac:	f000 f818 	bl	8013be0 <__sfp>
 8013bb0:	2200      	movs	r2, #0
 8013bb2:	60e0      	str	r0, [r4, #12]
 8013bb4:	2104      	movs	r1, #4
 8013bb6:	6860      	ldr	r0, [r4, #4]
 8013bb8:	f7ff ff82 	bl	8013ac0 <std>
 8013bbc:	68a0      	ldr	r0, [r4, #8]
 8013bbe:	2201      	movs	r2, #1
 8013bc0:	2109      	movs	r1, #9
 8013bc2:	f7ff ff7d 	bl	8013ac0 <std>
 8013bc6:	68e0      	ldr	r0, [r4, #12]
 8013bc8:	2202      	movs	r2, #2
 8013bca:	2112      	movs	r1, #18
 8013bcc:	f7ff ff78 	bl	8013ac0 <std>
 8013bd0:	2301      	movs	r3, #1
 8013bd2:	61a3      	str	r3, [r4, #24]
 8013bd4:	e7d2      	b.n	8013b7c <__sinit+0xc>
 8013bd6:	bf00      	nop
 8013bd8:	08016710 	.word	0x08016710
 8013bdc:	08013b09 	.word	0x08013b09

08013be0 <__sfp>:
 8013be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013be2:	4607      	mov	r7, r0
 8013be4:	f7ff ffac 	bl	8013b40 <__sfp_lock_acquire>
 8013be8:	4b1e      	ldr	r3, [pc, #120]	; (8013c64 <__sfp+0x84>)
 8013bea:	681e      	ldr	r6, [r3, #0]
 8013bec:	69b3      	ldr	r3, [r6, #24]
 8013bee:	b913      	cbnz	r3, 8013bf6 <__sfp+0x16>
 8013bf0:	4630      	mov	r0, r6
 8013bf2:	f7ff ffbd 	bl	8013b70 <__sinit>
 8013bf6:	3648      	adds	r6, #72	; 0x48
 8013bf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013bfc:	3b01      	subs	r3, #1
 8013bfe:	d503      	bpl.n	8013c08 <__sfp+0x28>
 8013c00:	6833      	ldr	r3, [r6, #0]
 8013c02:	b30b      	cbz	r3, 8013c48 <__sfp+0x68>
 8013c04:	6836      	ldr	r6, [r6, #0]
 8013c06:	e7f7      	b.n	8013bf8 <__sfp+0x18>
 8013c08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013c0c:	b9d5      	cbnz	r5, 8013c44 <__sfp+0x64>
 8013c0e:	4b16      	ldr	r3, [pc, #88]	; (8013c68 <__sfp+0x88>)
 8013c10:	60e3      	str	r3, [r4, #12]
 8013c12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013c16:	6665      	str	r5, [r4, #100]	; 0x64
 8013c18:	f000 f84c 	bl	8013cb4 <__retarget_lock_init_recursive>
 8013c1c:	f7ff ff96 	bl	8013b4c <__sfp_lock_release>
 8013c20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013c24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013c28:	6025      	str	r5, [r4, #0]
 8013c2a:	61a5      	str	r5, [r4, #24]
 8013c2c:	2208      	movs	r2, #8
 8013c2e:	4629      	mov	r1, r5
 8013c30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013c34:	f7fe faf4 	bl	8012220 <memset>
 8013c38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013c3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013c40:	4620      	mov	r0, r4
 8013c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c44:	3468      	adds	r4, #104	; 0x68
 8013c46:	e7d9      	b.n	8013bfc <__sfp+0x1c>
 8013c48:	2104      	movs	r1, #4
 8013c4a:	4638      	mov	r0, r7
 8013c4c:	f7ff ff62 	bl	8013b14 <__sfmoreglue>
 8013c50:	4604      	mov	r4, r0
 8013c52:	6030      	str	r0, [r6, #0]
 8013c54:	2800      	cmp	r0, #0
 8013c56:	d1d5      	bne.n	8013c04 <__sfp+0x24>
 8013c58:	f7ff ff78 	bl	8013b4c <__sfp_lock_release>
 8013c5c:	230c      	movs	r3, #12
 8013c5e:	603b      	str	r3, [r7, #0]
 8013c60:	e7ee      	b.n	8013c40 <__sfp+0x60>
 8013c62:	bf00      	nop
 8013c64:	08016710 	.word	0x08016710
 8013c68:	ffff0001 	.word	0xffff0001

08013c6c <_fwalk_reent>:
 8013c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c70:	4606      	mov	r6, r0
 8013c72:	4688      	mov	r8, r1
 8013c74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013c78:	2700      	movs	r7, #0
 8013c7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013c7e:	f1b9 0901 	subs.w	r9, r9, #1
 8013c82:	d505      	bpl.n	8013c90 <_fwalk_reent+0x24>
 8013c84:	6824      	ldr	r4, [r4, #0]
 8013c86:	2c00      	cmp	r4, #0
 8013c88:	d1f7      	bne.n	8013c7a <_fwalk_reent+0xe>
 8013c8a:	4638      	mov	r0, r7
 8013c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c90:	89ab      	ldrh	r3, [r5, #12]
 8013c92:	2b01      	cmp	r3, #1
 8013c94:	d907      	bls.n	8013ca6 <_fwalk_reent+0x3a>
 8013c96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013c9a:	3301      	adds	r3, #1
 8013c9c:	d003      	beq.n	8013ca6 <_fwalk_reent+0x3a>
 8013c9e:	4629      	mov	r1, r5
 8013ca0:	4630      	mov	r0, r6
 8013ca2:	47c0      	blx	r8
 8013ca4:	4307      	orrs	r7, r0
 8013ca6:	3568      	adds	r5, #104	; 0x68
 8013ca8:	e7e9      	b.n	8013c7e <_fwalk_reent+0x12>
	...

08013cac <_localeconv_r>:
 8013cac:	4800      	ldr	r0, [pc, #0]	; (8013cb0 <_localeconv_r+0x4>)
 8013cae:	4770      	bx	lr
 8013cb0:	24000394 	.word	0x24000394

08013cb4 <__retarget_lock_init_recursive>:
 8013cb4:	4770      	bx	lr

08013cb6 <__retarget_lock_acquire_recursive>:
 8013cb6:	4770      	bx	lr

08013cb8 <__retarget_lock_release_recursive>:
 8013cb8:	4770      	bx	lr

08013cba <__swhatbuf_r>:
 8013cba:	b570      	push	{r4, r5, r6, lr}
 8013cbc:	460e      	mov	r6, r1
 8013cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013cc2:	2900      	cmp	r1, #0
 8013cc4:	b096      	sub	sp, #88	; 0x58
 8013cc6:	4614      	mov	r4, r2
 8013cc8:	461d      	mov	r5, r3
 8013cca:	da07      	bge.n	8013cdc <__swhatbuf_r+0x22>
 8013ccc:	2300      	movs	r3, #0
 8013cce:	602b      	str	r3, [r5, #0]
 8013cd0:	89b3      	ldrh	r3, [r6, #12]
 8013cd2:	061a      	lsls	r2, r3, #24
 8013cd4:	d410      	bmi.n	8013cf8 <__swhatbuf_r+0x3e>
 8013cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013cda:	e00e      	b.n	8013cfa <__swhatbuf_r+0x40>
 8013cdc:	466a      	mov	r2, sp
 8013cde:	f000 fd45 	bl	801476c <_fstat_r>
 8013ce2:	2800      	cmp	r0, #0
 8013ce4:	dbf2      	blt.n	8013ccc <__swhatbuf_r+0x12>
 8013ce6:	9a01      	ldr	r2, [sp, #4]
 8013ce8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013cec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013cf0:	425a      	negs	r2, r3
 8013cf2:	415a      	adcs	r2, r3
 8013cf4:	602a      	str	r2, [r5, #0]
 8013cf6:	e7ee      	b.n	8013cd6 <__swhatbuf_r+0x1c>
 8013cf8:	2340      	movs	r3, #64	; 0x40
 8013cfa:	2000      	movs	r0, #0
 8013cfc:	6023      	str	r3, [r4, #0]
 8013cfe:	b016      	add	sp, #88	; 0x58
 8013d00:	bd70      	pop	{r4, r5, r6, pc}
	...

08013d04 <__smakebuf_r>:
 8013d04:	898b      	ldrh	r3, [r1, #12]
 8013d06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013d08:	079d      	lsls	r5, r3, #30
 8013d0a:	4606      	mov	r6, r0
 8013d0c:	460c      	mov	r4, r1
 8013d0e:	d507      	bpl.n	8013d20 <__smakebuf_r+0x1c>
 8013d10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013d14:	6023      	str	r3, [r4, #0]
 8013d16:	6123      	str	r3, [r4, #16]
 8013d18:	2301      	movs	r3, #1
 8013d1a:	6163      	str	r3, [r4, #20]
 8013d1c:	b002      	add	sp, #8
 8013d1e:	bd70      	pop	{r4, r5, r6, pc}
 8013d20:	ab01      	add	r3, sp, #4
 8013d22:	466a      	mov	r2, sp
 8013d24:	f7ff ffc9 	bl	8013cba <__swhatbuf_r>
 8013d28:	9900      	ldr	r1, [sp, #0]
 8013d2a:	4605      	mov	r5, r0
 8013d2c:	4630      	mov	r0, r6
 8013d2e:	f000 fc1d 	bl	801456c <_malloc_r>
 8013d32:	b948      	cbnz	r0, 8013d48 <__smakebuf_r+0x44>
 8013d34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d38:	059a      	lsls	r2, r3, #22
 8013d3a:	d4ef      	bmi.n	8013d1c <__smakebuf_r+0x18>
 8013d3c:	f023 0303 	bic.w	r3, r3, #3
 8013d40:	f043 0302 	orr.w	r3, r3, #2
 8013d44:	81a3      	strh	r3, [r4, #12]
 8013d46:	e7e3      	b.n	8013d10 <__smakebuf_r+0xc>
 8013d48:	4b0d      	ldr	r3, [pc, #52]	; (8013d80 <__smakebuf_r+0x7c>)
 8013d4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8013d4c:	89a3      	ldrh	r3, [r4, #12]
 8013d4e:	6020      	str	r0, [r4, #0]
 8013d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d54:	81a3      	strh	r3, [r4, #12]
 8013d56:	9b00      	ldr	r3, [sp, #0]
 8013d58:	6163      	str	r3, [r4, #20]
 8013d5a:	9b01      	ldr	r3, [sp, #4]
 8013d5c:	6120      	str	r0, [r4, #16]
 8013d5e:	b15b      	cbz	r3, 8013d78 <__smakebuf_r+0x74>
 8013d60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d64:	4630      	mov	r0, r6
 8013d66:	f000 fd13 	bl	8014790 <_isatty_r>
 8013d6a:	b128      	cbz	r0, 8013d78 <__smakebuf_r+0x74>
 8013d6c:	89a3      	ldrh	r3, [r4, #12]
 8013d6e:	f023 0303 	bic.w	r3, r3, #3
 8013d72:	f043 0301 	orr.w	r3, r3, #1
 8013d76:	81a3      	strh	r3, [r4, #12]
 8013d78:	89a0      	ldrh	r0, [r4, #12]
 8013d7a:	4305      	orrs	r5, r0
 8013d7c:	81a5      	strh	r5, [r4, #12]
 8013d7e:	e7cd      	b.n	8013d1c <__smakebuf_r+0x18>
 8013d80:	08013b09 	.word	0x08013b09

08013d84 <malloc>:
 8013d84:	4b02      	ldr	r3, [pc, #8]	; (8013d90 <malloc+0xc>)
 8013d86:	4601      	mov	r1, r0
 8013d88:	6818      	ldr	r0, [r3, #0]
 8013d8a:	f000 bbef 	b.w	801456c <_malloc_r>
 8013d8e:	bf00      	nop
 8013d90:	24000240 	.word	0x24000240

08013d94 <memcpy>:
 8013d94:	440a      	add	r2, r1
 8013d96:	4291      	cmp	r1, r2
 8013d98:	f100 33ff 	add.w	r3, r0, #4294967295
 8013d9c:	d100      	bne.n	8013da0 <memcpy+0xc>
 8013d9e:	4770      	bx	lr
 8013da0:	b510      	push	{r4, lr}
 8013da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013da6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013daa:	4291      	cmp	r1, r2
 8013dac:	d1f9      	bne.n	8013da2 <memcpy+0xe>
 8013dae:	bd10      	pop	{r4, pc}

08013db0 <_Balloc>:
 8013db0:	b570      	push	{r4, r5, r6, lr}
 8013db2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013db4:	4604      	mov	r4, r0
 8013db6:	460d      	mov	r5, r1
 8013db8:	b976      	cbnz	r6, 8013dd8 <_Balloc+0x28>
 8013dba:	2010      	movs	r0, #16
 8013dbc:	f7ff ffe2 	bl	8013d84 <malloc>
 8013dc0:	4602      	mov	r2, r0
 8013dc2:	6260      	str	r0, [r4, #36]	; 0x24
 8013dc4:	b920      	cbnz	r0, 8013dd0 <_Balloc+0x20>
 8013dc6:	4b18      	ldr	r3, [pc, #96]	; (8013e28 <_Balloc+0x78>)
 8013dc8:	4818      	ldr	r0, [pc, #96]	; (8013e2c <_Balloc+0x7c>)
 8013dca:	2166      	movs	r1, #102	; 0x66
 8013dcc:	f000 fc8e 	bl	80146ec <__assert_func>
 8013dd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013dd4:	6006      	str	r6, [r0, #0]
 8013dd6:	60c6      	str	r6, [r0, #12]
 8013dd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013dda:	68f3      	ldr	r3, [r6, #12]
 8013ddc:	b183      	cbz	r3, 8013e00 <_Balloc+0x50>
 8013dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013de0:	68db      	ldr	r3, [r3, #12]
 8013de2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013de6:	b9b8      	cbnz	r0, 8013e18 <_Balloc+0x68>
 8013de8:	2101      	movs	r1, #1
 8013dea:	fa01 f605 	lsl.w	r6, r1, r5
 8013dee:	1d72      	adds	r2, r6, #5
 8013df0:	0092      	lsls	r2, r2, #2
 8013df2:	4620      	mov	r0, r4
 8013df4:	f000 fb5a 	bl	80144ac <_calloc_r>
 8013df8:	b160      	cbz	r0, 8013e14 <_Balloc+0x64>
 8013dfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013dfe:	e00e      	b.n	8013e1e <_Balloc+0x6e>
 8013e00:	2221      	movs	r2, #33	; 0x21
 8013e02:	2104      	movs	r1, #4
 8013e04:	4620      	mov	r0, r4
 8013e06:	f000 fb51 	bl	80144ac <_calloc_r>
 8013e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e0c:	60f0      	str	r0, [r6, #12]
 8013e0e:	68db      	ldr	r3, [r3, #12]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d1e4      	bne.n	8013dde <_Balloc+0x2e>
 8013e14:	2000      	movs	r0, #0
 8013e16:	bd70      	pop	{r4, r5, r6, pc}
 8013e18:	6802      	ldr	r2, [r0, #0]
 8013e1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013e1e:	2300      	movs	r3, #0
 8013e20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013e24:	e7f7      	b.n	8013e16 <_Balloc+0x66>
 8013e26:	bf00      	nop
 8013e28:	08016755 	.word	0x08016755
 8013e2c:	0801683c 	.word	0x0801683c

08013e30 <_Bfree>:
 8013e30:	b570      	push	{r4, r5, r6, lr}
 8013e32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013e34:	4605      	mov	r5, r0
 8013e36:	460c      	mov	r4, r1
 8013e38:	b976      	cbnz	r6, 8013e58 <_Bfree+0x28>
 8013e3a:	2010      	movs	r0, #16
 8013e3c:	f7ff ffa2 	bl	8013d84 <malloc>
 8013e40:	4602      	mov	r2, r0
 8013e42:	6268      	str	r0, [r5, #36]	; 0x24
 8013e44:	b920      	cbnz	r0, 8013e50 <_Bfree+0x20>
 8013e46:	4b09      	ldr	r3, [pc, #36]	; (8013e6c <_Bfree+0x3c>)
 8013e48:	4809      	ldr	r0, [pc, #36]	; (8013e70 <_Bfree+0x40>)
 8013e4a:	218a      	movs	r1, #138	; 0x8a
 8013e4c:	f000 fc4e 	bl	80146ec <__assert_func>
 8013e50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013e54:	6006      	str	r6, [r0, #0]
 8013e56:	60c6      	str	r6, [r0, #12]
 8013e58:	b13c      	cbz	r4, 8013e6a <_Bfree+0x3a>
 8013e5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013e5c:	6862      	ldr	r2, [r4, #4]
 8013e5e:	68db      	ldr	r3, [r3, #12]
 8013e60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013e64:	6021      	str	r1, [r4, #0]
 8013e66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013e6a:	bd70      	pop	{r4, r5, r6, pc}
 8013e6c:	08016755 	.word	0x08016755
 8013e70:	0801683c 	.word	0x0801683c

08013e74 <__multadd>:
 8013e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e78:	690e      	ldr	r6, [r1, #16]
 8013e7a:	4607      	mov	r7, r0
 8013e7c:	4698      	mov	r8, r3
 8013e7e:	460c      	mov	r4, r1
 8013e80:	f101 0014 	add.w	r0, r1, #20
 8013e84:	2300      	movs	r3, #0
 8013e86:	6805      	ldr	r5, [r0, #0]
 8013e88:	b2a9      	uxth	r1, r5
 8013e8a:	fb02 8101 	mla	r1, r2, r1, r8
 8013e8e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013e92:	0c2d      	lsrs	r5, r5, #16
 8013e94:	fb02 c505 	mla	r5, r2, r5, ip
 8013e98:	b289      	uxth	r1, r1
 8013e9a:	3301      	adds	r3, #1
 8013e9c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013ea0:	429e      	cmp	r6, r3
 8013ea2:	f840 1b04 	str.w	r1, [r0], #4
 8013ea6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8013eaa:	dcec      	bgt.n	8013e86 <__multadd+0x12>
 8013eac:	f1b8 0f00 	cmp.w	r8, #0
 8013eb0:	d022      	beq.n	8013ef8 <__multadd+0x84>
 8013eb2:	68a3      	ldr	r3, [r4, #8]
 8013eb4:	42b3      	cmp	r3, r6
 8013eb6:	dc19      	bgt.n	8013eec <__multadd+0x78>
 8013eb8:	6861      	ldr	r1, [r4, #4]
 8013eba:	4638      	mov	r0, r7
 8013ebc:	3101      	adds	r1, #1
 8013ebe:	f7ff ff77 	bl	8013db0 <_Balloc>
 8013ec2:	4605      	mov	r5, r0
 8013ec4:	b928      	cbnz	r0, 8013ed2 <__multadd+0x5e>
 8013ec6:	4602      	mov	r2, r0
 8013ec8:	4b0d      	ldr	r3, [pc, #52]	; (8013f00 <__multadd+0x8c>)
 8013eca:	480e      	ldr	r0, [pc, #56]	; (8013f04 <__multadd+0x90>)
 8013ecc:	21b5      	movs	r1, #181	; 0xb5
 8013ece:	f000 fc0d 	bl	80146ec <__assert_func>
 8013ed2:	6922      	ldr	r2, [r4, #16]
 8013ed4:	3202      	adds	r2, #2
 8013ed6:	f104 010c 	add.w	r1, r4, #12
 8013eda:	0092      	lsls	r2, r2, #2
 8013edc:	300c      	adds	r0, #12
 8013ede:	f7ff ff59 	bl	8013d94 <memcpy>
 8013ee2:	4621      	mov	r1, r4
 8013ee4:	4638      	mov	r0, r7
 8013ee6:	f7ff ffa3 	bl	8013e30 <_Bfree>
 8013eea:	462c      	mov	r4, r5
 8013eec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013ef0:	3601      	adds	r6, #1
 8013ef2:	f8c3 8014 	str.w	r8, [r3, #20]
 8013ef6:	6126      	str	r6, [r4, #16]
 8013ef8:	4620      	mov	r0, r4
 8013efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013efe:	bf00      	nop
 8013f00:	080167cb 	.word	0x080167cb
 8013f04:	0801683c 	.word	0x0801683c

08013f08 <__hi0bits>:
 8013f08:	0c03      	lsrs	r3, r0, #16
 8013f0a:	041b      	lsls	r3, r3, #16
 8013f0c:	b9d3      	cbnz	r3, 8013f44 <__hi0bits+0x3c>
 8013f0e:	0400      	lsls	r0, r0, #16
 8013f10:	2310      	movs	r3, #16
 8013f12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013f16:	bf04      	itt	eq
 8013f18:	0200      	lsleq	r0, r0, #8
 8013f1a:	3308      	addeq	r3, #8
 8013f1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013f20:	bf04      	itt	eq
 8013f22:	0100      	lsleq	r0, r0, #4
 8013f24:	3304      	addeq	r3, #4
 8013f26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013f2a:	bf04      	itt	eq
 8013f2c:	0080      	lsleq	r0, r0, #2
 8013f2e:	3302      	addeq	r3, #2
 8013f30:	2800      	cmp	r0, #0
 8013f32:	db05      	blt.n	8013f40 <__hi0bits+0x38>
 8013f34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013f38:	f103 0301 	add.w	r3, r3, #1
 8013f3c:	bf08      	it	eq
 8013f3e:	2320      	moveq	r3, #32
 8013f40:	4618      	mov	r0, r3
 8013f42:	4770      	bx	lr
 8013f44:	2300      	movs	r3, #0
 8013f46:	e7e4      	b.n	8013f12 <__hi0bits+0xa>

08013f48 <__lo0bits>:
 8013f48:	6803      	ldr	r3, [r0, #0]
 8013f4a:	f013 0207 	ands.w	r2, r3, #7
 8013f4e:	4601      	mov	r1, r0
 8013f50:	d00b      	beq.n	8013f6a <__lo0bits+0x22>
 8013f52:	07da      	lsls	r2, r3, #31
 8013f54:	d424      	bmi.n	8013fa0 <__lo0bits+0x58>
 8013f56:	0798      	lsls	r0, r3, #30
 8013f58:	bf49      	itett	mi
 8013f5a:	085b      	lsrmi	r3, r3, #1
 8013f5c:	089b      	lsrpl	r3, r3, #2
 8013f5e:	2001      	movmi	r0, #1
 8013f60:	600b      	strmi	r3, [r1, #0]
 8013f62:	bf5c      	itt	pl
 8013f64:	600b      	strpl	r3, [r1, #0]
 8013f66:	2002      	movpl	r0, #2
 8013f68:	4770      	bx	lr
 8013f6a:	b298      	uxth	r0, r3
 8013f6c:	b9b0      	cbnz	r0, 8013f9c <__lo0bits+0x54>
 8013f6e:	0c1b      	lsrs	r3, r3, #16
 8013f70:	2010      	movs	r0, #16
 8013f72:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013f76:	bf04      	itt	eq
 8013f78:	0a1b      	lsreq	r3, r3, #8
 8013f7a:	3008      	addeq	r0, #8
 8013f7c:	071a      	lsls	r2, r3, #28
 8013f7e:	bf04      	itt	eq
 8013f80:	091b      	lsreq	r3, r3, #4
 8013f82:	3004      	addeq	r0, #4
 8013f84:	079a      	lsls	r2, r3, #30
 8013f86:	bf04      	itt	eq
 8013f88:	089b      	lsreq	r3, r3, #2
 8013f8a:	3002      	addeq	r0, #2
 8013f8c:	07da      	lsls	r2, r3, #31
 8013f8e:	d403      	bmi.n	8013f98 <__lo0bits+0x50>
 8013f90:	085b      	lsrs	r3, r3, #1
 8013f92:	f100 0001 	add.w	r0, r0, #1
 8013f96:	d005      	beq.n	8013fa4 <__lo0bits+0x5c>
 8013f98:	600b      	str	r3, [r1, #0]
 8013f9a:	4770      	bx	lr
 8013f9c:	4610      	mov	r0, r2
 8013f9e:	e7e8      	b.n	8013f72 <__lo0bits+0x2a>
 8013fa0:	2000      	movs	r0, #0
 8013fa2:	4770      	bx	lr
 8013fa4:	2020      	movs	r0, #32
 8013fa6:	4770      	bx	lr

08013fa8 <__i2b>:
 8013fa8:	b510      	push	{r4, lr}
 8013faa:	460c      	mov	r4, r1
 8013fac:	2101      	movs	r1, #1
 8013fae:	f7ff feff 	bl	8013db0 <_Balloc>
 8013fb2:	4602      	mov	r2, r0
 8013fb4:	b928      	cbnz	r0, 8013fc2 <__i2b+0x1a>
 8013fb6:	4b05      	ldr	r3, [pc, #20]	; (8013fcc <__i2b+0x24>)
 8013fb8:	4805      	ldr	r0, [pc, #20]	; (8013fd0 <__i2b+0x28>)
 8013fba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013fbe:	f000 fb95 	bl	80146ec <__assert_func>
 8013fc2:	2301      	movs	r3, #1
 8013fc4:	6144      	str	r4, [r0, #20]
 8013fc6:	6103      	str	r3, [r0, #16]
 8013fc8:	bd10      	pop	{r4, pc}
 8013fca:	bf00      	nop
 8013fcc:	080167cb 	.word	0x080167cb
 8013fd0:	0801683c 	.word	0x0801683c

08013fd4 <__multiply>:
 8013fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fd8:	4614      	mov	r4, r2
 8013fda:	690a      	ldr	r2, [r1, #16]
 8013fdc:	6923      	ldr	r3, [r4, #16]
 8013fde:	429a      	cmp	r2, r3
 8013fe0:	bfb8      	it	lt
 8013fe2:	460b      	movlt	r3, r1
 8013fe4:	460d      	mov	r5, r1
 8013fe6:	bfbc      	itt	lt
 8013fe8:	4625      	movlt	r5, r4
 8013fea:	461c      	movlt	r4, r3
 8013fec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013ff0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013ff4:	68ab      	ldr	r3, [r5, #8]
 8013ff6:	6869      	ldr	r1, [r5, #4]
 8013ff8:	eb0a 0709 	add.w	r7, sl, r9
 8013ffc:	42bb      	cmp	r3, r7
 8013ffe:	b085      	sub	sp, #20
 8014000:	bfb8      	it	lt
 8014002:	3101      	addlt	r1, #1
 8014004:	f7ff fed4 	bl	8013db0 <_Balloc>
 8014008:	b930      	cbnz	r0, 8014018 <__multiply+0x44>
 801400a:	4602      	mov	r2, r0
 801400c:	4b42      	ldr	r3, [pc, #264]	; (8014118 <__multiply+0x144>)
 801400e:	4843      	ldr	r0, [pc, #268]	; (801411c <__multiply+0x148>)
 8014010:	f240 115d 	movw	r1, #349	; 0x15d
 8014014:	f000 fb6a 	bl	80146ec <__assert_func>
 8014018:	f100 0614 	add.w	r6, r0, #20
 801401c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014020:	4633      	mov	r3, r6
 8014022:	2200      	movs	r2, #0
 8014024:	4543      	cmp	r3, r8
 8014026:	d31e      	bcc.n	8014066 <__multiply+0x92>
 8014028:	f105 0c14 	add.w	ip, r5, #20
 801402c:	f104 0314 	add.w	r3, r4, #20
 8014030:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8014034:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014038:	9202      	str	r2, [sp, #8]
 801403a:	ebac 0205 	sub.w	r2, ip, r5
 801403e:	3a15      	subs	r2, #21
 8014040:	f022 0203 	bic.w	r2, r2, #3
 8014044:	3204      	adds	r2, #4
 8014046:	f105 0115 	add.w	r1, r5, #21
 801404a:	458c      	cmp	ip, r1
 801404c:	bf38      	it	cc
 801404e:	2204      	movcc	r2, #4
 8014050:	9201      	str	r2, [sp, #4]
 8014052:	9a02      	ldr	r2, [sp, #8]
 8014054:	9303      	str	r3, [sp, #12]
 8014056:	429a      	cmp	r2, r3
 8014058:	d808      	bhi.n	801406c <__multiply+0x98>
 801405a:	2f00      	cmp	r7, #0
 801405c:	dc55      	bgt.n	801410a <__multiply+0x136>
 801405e:	6107      	str	r7, [r0, #16]
 8014060:	b005      	add	sp, #20
 8014062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014066:	f843 2b04 	str.w	r2, [r3], #4
 801406a:	e7db      	b.n	8014024 <__multiply+0x50>
 801406c:	f8b3 a000 	ldrh.w	sl, [r3]
 8014070:	f1ba 0f00 	cmp.w	sl, #0
 8014074:	d020      	beq.n	80140b8 <__multiply+0xe4>
 8014076:	f105 0e14 	add.w	lr, r5, #20
 801407a:	46b1      	mov	r9, r6
 801407c:	2200      	movs	r2, #0
 801407e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8014082:	f8d9 b000 	ldr.w	fp, [r9]
 8014086:	b2a1      	uxth	r1, r4
 8014088:	fa1f fb8b 	uxth.w	fp, fp
 801408c:	fb0a b101 	mla	r1, sl, r1, fp
 8014090:	4411      	add	r1, r2
 8014092:	f8d9 2000 	ldr.w	r2, [r9]
 8014096:	0c24      	lsrs	r4, r4, #16
 8014098:	0c12      	lsrs	r2, r2, #16
 801409a:	fb0a 2404 	mla	r4, sl, r4, r2
 801409e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80140a2:	b289      	uxth	r1, r1
 80140a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80140a8:	45f4      	cmp	ip, lr
 80140aa:	f849 1b04 	str.w	r1, [r9], #4
 80140ae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80140b2:	d8e4      	bhi.n	801407e <__multiply+0xaa>
 80140b4:	9901      	ldr	r1, [sp, #4]
 80140b6:	5072      	str	r2, [r6, r1]
 80140b8:	9a03      	ldr	r2, [sp, #12]
 80140ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80140be:	3304      	adds	r3, #4
 80140c0:	f1b9 0f00 	cmp.w	r9, #0
 80140c4:	d01f      	beq.n	8014106 <__multiply+0x132>
 80140c6:	6834      	ldr	r4, [r6, #0]
 80140c8:	f105 0114 	add.w	r1, r5, #20
 80140cc:	46b6      	mov	lr, r6
 80140ce:	f04f 0a00 	mov.w	sl, #0
 80140d2:	880a      	ldrh	r2, [r1, #0]
 80140d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80140d8:	fb09 b202 	mla	r2, r9, r2, fp
 80140dc:	4492      	add	sl, r2
 80140de:	b2a4      	uxth	r4, r4
 80140e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80140e4:	f84e 4b04 	str.w	r4, [lr], #4
 80140e8:	f851 4b04 	ldr.w	r4, [r1], #4
 80140ec:	f8be 2000 	ldrh.w	r2, [lr]
 80140f0:	0c24      	lsrs	r4, r4, #16
 80140f2:	fb09 2404 	mla	r4, r9, r4, r2
 80140f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80140fa:	458c      	cmp	ip, r1
 80140fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014100:	d8e7      	bhi.n	80140d2 <__multiply+0xfe>
 8014102:	9a01      	ldr	r2, [sp, #4]
 8014104:	50b4      	str	r4, [r6, r2]
 8014106:	3604      	adds	r6, #4
 8014108:	e7a3      	b.n	8014052 <__multiply+0x7e>
 801410a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801410e:	2b00      	cmp	r3, #0
 8014110:	d1a5      	bne.n	801405e <__multiply+0x8a>
 8014112:	3f01      	subs	r7, #1
 8014114:	e7a1      	b.n	801405a <__multiply+0x86>
 8014116:	bf00      	nop
 8014118:	080167cb 	.word	0x080167cb
 801411c:	0801683c 	.word	0x0801683c

08014120 <__pow5mult>:
 8014120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014124:	4615      	mov	r5, r2
 8014126:	f012 0203 	ands.w	r2, r2, #3
 801412a:	4606      	mov	r6, r0
 801412c:	460f      	mov	r7, r1
 801412e:	d007      	beq.n	8014140 <__pow5mult+0x20>
 8014130:	4c25      	ldr	r4, [pc, #148]	; (80141c8 <__pow5mult+0xa8>)
 8014132:	3a01      	subs	r2, #1
 8014134:	2300      	movs	r3, #0
 8014136:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801413a:	f7ff fe9b 	bl	8013e74 <__multadd>
 801413e:	4607      	mov	r7, r0
 8014140:	10ad      	asrs	r5, r5, #2
 8014142:	d03d      	beq.n	80141c0 <__pow5mult+0xa0>
 8014144:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014146:	b97c      	cbnz	r4, 8014168 <__pow5mult+0x48>
 8014148:	2010      	movs	r0, #16
 801414a:	f7ff fe1b 	bl	8013d84 <malloc>
 801414e:	4602      	mov	r2, r0
 8014150:	6270      	str	r0, [r6, #36]	; 0x24
 8014152:	b928      	cbnz	r0, 8014160 <__pow5mult+0x40>
 8014154:	4b1d      	ldr	r3, [pc, #116]	; (80141cc <__pow5mult+0xac>)
 8014156:	481e      	ldr	r0, [pc, #120]	; (80141d0 <__pow5mult+0xb0>)
 8014158:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801415c:	f000 fac6 	bl	80146ec <__assert_func>
 8014160:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014164:	6004      	str	r4, [r0, #0]
 8014166:	60c4      	str	r4, [r0, #12]
 8014168:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801416c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014170:	b94c      	cbnz	r4, 8014186 <__pow5mult+0x66>
 8014172:	f240 2171 	movw	r1, #625	; 0x271
 8014176:	4630      	mov	r0, r6
 8014178:	f7ff ff16 	bl	8013fa8 <__i2b>
 801417c:	2300      	movs	r3, #0
 801417e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014182:	4604      	mov	r4, r0
 8014184:	6003      	str	r3, [r0, #0]
 8014186:	f04f 0900 	mov.w	r9, #0
 801418a:	07eb      	lsls	r3, r5, #31
 801418c:	d50a      	bpl.n	80141a4 <__pow5mult+0x84>
 801418e:	4639      	mov	r1, r7
 8014190:	4622      	mov	r2, r4
 8014192:	4630      	mov	r0, r6
 8014194:	f7ff ff1e 	bl	8013fd4 <__multiply>
 8014198:	4639      	mov	r1, r7
 801419a:	4680      	mov	r8, r0
 801419c:	4630      	mov	r0, r6
 801419e:	f7ff fe47 	bl	8013e30 <_Bfree>
 80141a2:	4647      	mov	r7, r8
 80141a4:	106d      	asrs	r5, r5, #1
 80141a6:	d00b      	beq.n	80141c0 <__pow5mult+0xa0>
 80141a8:	6820      	ldr	r0, [r4, #0]
 80141aa:	b938      	cbnz	r0, 80141bc <__pow5mult+0x9c>
 80141ac:	4622      	mov	r2, r4
 80141ae:	4621      	mov	r1, r4
 80141b0:	4630      	mov	r0, r6
 80141b2:	f7ff ff0f 	bl	8013fd4 <__multiply>
 80141b6:	6020      	str	r0, [r4, #0]
 80141b8:	f8c0 9000 	str.w	r9, [r0]
 80141bc:	4604      	mov	r4, r0
 80141be:	e7e4      	b.n	801418a <__pow5mult+0x6a>
 80141c0:	4638      	mov	r0, r7
 80141c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141c6:	bf00      	nop
 80141c8:	08016990 	.word	0x08016990
 80141cc:	08016755 	.word	0x08016755
 80141d0:	0801683c 	.word	0x0801683c

080141d4 <__lshift>:
 80141d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141d8:	460c      	mov	r4, r1
 80141da:	6849      	ldr	r1, [r1, #4]
 80141dc:	6923      	ldr	r3, [r4, #16]
 80141de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80141e2:	68a3      	ldr	r3, [r4, #8]
 80141e4:	4607      	mov	r7, r0
 80141e6:	4691      	mov	r9, r2
 80141e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80141ec:	f108 0601 	add.w	r6, r8, #1
 80141f0:	42b3      	cmp	r3, r6
 80141f2:	db0b      	blt.n	801420c <__lshift+0x38>
 80141f4:	4638      	mov	r0, r7
 80141f6:	f7ff fddb 	bl	8013db0 <_Balloc>
 80141fa:	4605      	mov	r5, r0
 80141fc:	b948      	cbnz	r0, 8014212 <__lshift+0x3e>
 80141fe:	4602      	mov	r2, r0
 8014200:	4b28      	ldr	r3, [pc, #160]	; (80142a4 <__lshift+0xd0>)
 8014202:	4829      	ldr	r0, [pc, #164]	; (80142a8 <__lshift+0xd4>)
 8014204:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014208:	f000 fa70 	bl	80146ec <__assert_func>
 801420c:	3101      	adds	r1, #1
 801420e:	005b      	lsls	r3, r3, #1
 8014210:	e7ee      	b.n	80141f0 <__lshift+0x1c>
 8014212:	2300      	movs	r3, #0
 8014214:	f100 0114 	add.w	r1, r0, #20
 8014218:	f100 0210 	add.w	r2, r0, #16
 801421c:	4618      	mov	r0, r3
 801421e:	4553      	cmp	r3, sl
 8014220:	db33      	blt.n	801428a <__lshift+0xb6>
 8014222:	6920      	ldr	r0, [r4, #16]
 8014224:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014228:	f104 0314 	add.w	r3, r4, #20
 801422c:	f019 091f 	ands.w	r9, r9, #31
 8014230:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014234:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014238:	d02b      	beq.n	8014292 <__lshift+0xbe>
 801423a:	f1c9 0e20 	rsb	lr, r9, #32
 801423e:	468a      	mov	sl, r1
 8014240:	2200      	movs	r2, #0
 8014242:	6818      	ldr	r0, [r3, #0]
 8014244:	fa00 f009 	lsl.w	r0, r0, r9
 8014248:	4302      	orrs	r2, r0
 801424a:	f84a 2b04 	str.w	r2, [sl], #4
 801424e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014252:	459c      	cmp	ip, r3
 8014254:	fa22 f20e 	lsr.w	r2, r2, lr
 8014258:	d8f3      	bhi.n	8014242 <__lshift+0x6e>
 801425a:	ebac 0304 	sub.w	r3, ip, r4
 801425e:	3b15      	subs	r3, #21
 8014260:	f023 0303 	bic.w	r3, r3, #3
 8014264:	3304      	adds	r3, #4
 8014266:	f104 0015 	add.w	r0, r4, #21
 801426a:	4584      	cmp	ip, r0
 801426c:	bf38      	it	cc
 801426e:	2304      	movcc	r3, #4
 8014270:	50ca      	str	r2, [r1, r3]
 8014272:	b10a      	cbz	r2, 8014278 <__lshift+0xa4>
 8014274:	f108 0602 	add.w	r6, r8, #2
 8014278:	3e01      	subs	r6, #1
 801427a:	4638      	mov	r0, r7
 801427c:	612e      	str	r6, [r5, #16]
 801427e:	4621      	mov	r1, r4
 8014280:	f7ff fdd6 	bl	8013e30 <_Bfree>
 8014284:	4628      	mov	r0, r5
 8014286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801428a:	f842 0f04 	str.w	r0, [r2, #4]!
 801428e:	3301      	adds	r3, #1
 8014290:	e7c5      	b.n	801421e <__lshift+0x4a>
 8014292:	3904      	subs	r1, #4
 8014294:	f853 2b04 	ldr.w	r2, [r3], #4
 8014298:	f841 2f04 	str.w	r2, [r1, #4]!
 801429c:	459c      	cmp	ip, r3
 801429e:	d8f9      	bhi.n	8014294 <__lshift+0xc0>
 80142a0:	e7ea      	b.n	8014278 <__lshift+0xa4>
 80142a2:	bf00      	nop
 80142a4:	080167cb 	.word	0x080167cb
 80142a8:	0801683c 	.word	0x0801683c

080142ac <__mcmp>:
 80142ac:	b530      	push	{r4, r5, lr}
 80142ae:	6902      	ldr	r2, [r0, #16]
 80142b0:	690c      	ldr	r4, [r1, #16]
 80142b2:	1b12      	subs	r2, r2, r4
 80142b4:	d10e      	bne.n	80142d4 <__mcmp+0x28>
 80142b6:	f100 0314 	add.w	r3, r0, #20
 80142ba:	3114      	adds	r1, #20
 80142bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80142c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80142c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80142c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80142cc:	42a5      	cmp	r5, r4
 80142ce:	d003      	beq.n	80142d8 <__mcmp+0x2c>
 80142d0:	d305      	bcc.n	80142de <__mcmp+0x32>
 80142d2:	2201      	movs	r2, #1
 80142d4:	4610      	mov	r0, r2
 80142d6:	bd30      	pop	{r4, r5, pc}
 80142d8:	4283      	cmp	r3, r0
 80142da:	d3f3      	bcc.n	80142c4 <__mcmp+0x18>
 80142dc:	e7fa      	b.n	80142d4 <__mcmp+0x28>
 80142de:	f04f 32ff 	mov.w	r2, #4294967295
 80142e2:	e7f7      	b.n	80142d4 <__mcmp+0x28>

080142e4 <__mdiff>:
 80142e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142e8:	460c      	mov	r4, r1
 80142ea:	4606      	mov	r6, r0
 80142ec:	4611      	mov	r1, r2
 80142ee:	4620      	mov	r0, r4
 80142f0:	4617      	mov	r7, r2
 80142f2:	f7ff ffdb 	bl	80142ac <__mcmp>
 80142f6:	1e05      	subs	r5, r0, #0
 80142f8:	d110      	bne.n	801431c <__mdiff+0x38>
 80142fa:	4629      	mov	r1, r5
 80142fc:	4630      	mov	r0, r6
 80142fe:	f7ff fd57 	bl	8013db0 <_Balloc>
 8014302:	b930      	cbnz	r0, 8014312 <__mdiff+0x2e>
 8014304:	4b39      	ldr	r3, [pc, #228]	; (80143ec <__mdiff+0x108>)
 8014306:	4602      	mov	r2, r0
 8014308:	f240 2132 	movw	r1, #562	; 0x232
 801430c:	4838      	ldr	r0, [pc, #224]	; (80143f0 <__mdiff+0x10c>)
 801430e:	f000 f9ed 	bl	80146ec <__assert_func>
 8014312:	2301      	movs	r3, #1
 8014314:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014318:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801431c:	bfa4      	itt	ge
 801431e:	463b      	movge	r3, r7
 8014320:	4627      	movge	r7, r4
 8014322:	4630      	mov	r0, r6
 8014324:	6879      	ldr	r1, [r7, #4]
 8014326:	bfa6      	itte	ge
 8014328:	461c      	movge	r4, r3
 801432a:	2500      	movge	r5, #0
 801432c:	2501      	movlt	r5, #1
 801432e:	f7ff fd3f 	bl	8013db0 <_Balloc>
 8014332:	b920      	cbnz	r0, 801433e <__mdiff+0x5a>
 8014334:	4b2d      	ldr	r3, [pc, #180]	; (80143ec <__mdiff+0x108>)
 8014336:	4602      	mov	r2, r0
 8014338:	f44f 7110 	mov.w	r1, #576	; 0x240
 801433c:	e7e6      	b.n	801430c <__mdiff+0x28>
 801433e:	693e      	ldr	r6, [r7, #16]
 8014340:	60c5      	str	r5, [r0, #12]
 8014342:	6925      	ldr	r5, [r4, #16]
 8014344:	f107 0114 	add.w	r1, r7, #20
 8014348:	f104 0914 	add.w	r9, r4, #20
 801434c:	f100 0e14 	add.w	lr, r0, #20
 8014350:	f107 0210 	add.w	r2, r7, #16
 8014354:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8014358:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801435c:	46f2      	mov	sl, lr
 801435e:	2700      	movs	r7, #0
 8014360:	f859 3b04 	ldr.w	r3, [r9], #4
 8014364:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014368:	fa1f f883 	uxth.w	r8, r3
 801436c:	fa17 f78b 	uxtah	r7, r7, fp
 8014370:	0c1b      	lsrs	r3, r3, #16
 8014372:	eba7 0808 	sub.w	r8, r7, r8
 8014376:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801437a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801437e:	fa1f f888 	uxth.w	r8, r8
 8014382:	141f      	asrs	r7, r3, #16
 8014384:	454d      	cmp	r5, r9
 8014386:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801438a:	f84a 3b04 	str.w	r3, [sl], #4
 801438e:	d8e7      	bhi.n	8014360 <__mdiff+0x7c>
 8014390:	1b2b      	subs	r3, r5, r4
 8014392:	3b15      	subs	r3, #21
 8014394:	f023 0303 	bic.w	r3, r3, #3
 8014398:	3304      	adds	r3, #4
 801439a:	3415      	adds	r4, #21
 801439c:	42a5      	cmp	r5, r4
 801439e:	bf38      	it	cc
 80143a0:	2304      	movcc	r3, #4
 80143a2:	4419      	add	r1, r3
 80143a4:	4473      	add	r3, lr
 80143a6:	469e      	mov	lr, r3
 80143a8:	460d      	mov	r5, r1
 80143aa:	4565      	cmp	r5, ip
 80143ac:	d30e      	bcc.n	80143cc <__mdiff+0xe8>
 80143ae:	f10c 0203 	add.w	r2, ip, #3
 80143b2:	1a52      	subs	r2, r2, r1
 80143b4:	f022 0203 	bic.w	r2, r2, #3
 80143b8:	3903      	subs	r1, #3
 80143ba:	458c      	cmp	ip, r1
 80143bc:	bf38      	it	cc
 80143be:	2200      	movcc	r2, #0
 80143c0:	441a      	add	r2, r3
 80143c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80143c6:	b17b      	cbz	r3, 80143e8 <__mdiff+0x104>
 80143c8:	6106      	str	r6, [r0, #16]
 80143ca:	e7a5      	b.n	8014318 <__mdiff+0x34>
 80143cc:	f855 8b04 	ldr.w	r8, [r5], #4
 80143d0:	fa17 f488 	uxtah	r4, r7, r8
 80143d4:	1422      	asrs	r2, r4, #16
 80143d6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80143da:	b2a4      	uxth	r4, r4
 80143dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80143e0:	f84e 4b04 	str.w	r4, [lr], #4
 80143e4:	1417      	asrs	r7, r2, #16
 80143e6:	e7e0      	b.n	80143aa <__mdiff+0xc6>
 80143e8:	3e01      	subs	r6, #1
 80143ea:	e7ea      	b.n	80143c2 <__mdiff+0xde>
 80143ec:	080167cb 	.word	0x080167cb
 80143f0:	0801683c 	.word	0x0801683c

080143f4 <__d2b>:
 80143f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80143f8:	4689      	mov	r9, r1
 80143fa:	2101      	movs	r1, #1
 80143fc:	ec57 6b10 	vmov	r6, r7, d0
 8014400:	4690      	mov	r8, r2
 8014402:	f7ff fcd5 	bl	8013db0 <_Balloc>
 8014406:	4604      	mov	r4, r0
 8014408:	b930      	cbnz	r0, 8014418 <__d2b+0x24>
 801440a:	4602      	mov	r2, r0
 801440c:	4b25      	ldr	r3, [pc, #148]	; (80144a4 <__d2b+0xb0>)
 801440e:	4826      	ldr	r0, [pc, #152]	; (80144a8 <__d2b+0xb4>)
 8014410:	f240 310a 	movw	r1, #778	; 0x30a
 8014414:	f000 f96a 	bl	80146ec <__assert_func>
 8014418:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801441c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014420:	bb35      	cbnz	r5, 8014470 <__d2b+0x7c>
 8014422:	2e00      	cmp	r6, #0
 8014424:	9301      	str	r3, [sp, #4]
 8014426:	d028      	beq.n	801447a <__d2b+0x86>
 8014428:	4668      	mov	r0, sp
 801442a:	9600      	str	r6, [sp, #0]
 801442c:	f7ff fd8c 	bl	8013f48 <__lo0bits>
 8014430:	9900      	ldr	r1, [sp, #0]
 8014432:	b300      	cbz	r0, 8014476 <__d2b+0x82>
 8014434:	9a01      	ldr	r2, [sp, #4]
 8014436:	f1c0 0320 	rsb	r3, r0, #32
 801443a:	fa02 f303 	lsl.w	r3, r2, r3
 801443e:	430b      	orrs	r3, r1
 8014440:	40c2      	lsrs	r2, r0
 8014442:	6163      	str	r3, [r4, #20]
 8014444:	9201      	str	r2, [sp, #4]
 8014446:	9b01      	ldr	r3, [sp, #4]
 8014448:	61a3      	str	r3, [r4, #24]
 801444a:	2b00      	cmp	r3, #0
 801444c:	bf14      	ite	ne
 801444e:	2202      	movne	r2, #2
 8014450:	2201      	moveq	r2, #1
 8014452:	6122      	str	r2, [r4, #16]
 8014454:	b1d5      	cbz	r5, 801448c <__d2b+0x98>
 8014456:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801445a:	4405      	add	r5, r0
 801445c:	f8c9 5000 	str.w	r5, [r9]
 8014460:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014464:	f8c8 0000 	str.w	r0, [r8]
 8014468:	4620      	mov	r0, r4
 801446a:	b003      	add	sp, #12
 801446c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014470:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014474:	e7d5      	b.n	8014422 <__d2b+0x2e>
 8014476:	6161      	str	r1, [r4, #20]
 8014478:	e7e5      	b.n	8014446 <__d2b+0x52>
 801447a:	a801      	add	r0, sp, #4
 801447c:	f7ff fd64 	bl	8013f48 <__lo0bits>
 8014480:	9b01      	ldr	r3, [sp, #4]
 8014482:	6163      	str	r3, [r4, #20]
 8014484:	2201      	movs	r2, #1
 8014486:	6122      	str	r2, [r4, #16]
 8014488:	3020      	adds	r0, #32
 801448a:	e7e3      	b.n	8014454 <__d2b+0x60>
 801448c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014490:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014494:	f8c9 0000 	str.w	r0, [r9]
 8014498:	6918      	ldr	r0, [r3, #16]
 801449a:	f7ff fd35 	bl	8013f08 <__hi0bits>
 801449e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80144a2:	e7df      	b.n	8014464 <__d2b+0x70>
 80144a4:	080167cb 	.word	0x080167cb
 80144a8:	0801683c 	.word	0x0801683c

080144ac <_calloc_r>:
 80144ac:	b513      	push	{r0, r1, r4, lr}
 80144ae:	434a      	muls	r2, r1
 80144b0:	4611      	mov	r1, r2
 80144b2:	9201      	str	r2, [sp, #4]
 80144b4:	f000 f85a 	bl	801456c <_malloc_r>
 80144b8:	4604      	mov	r4, r0
 80144ba:	b118      	cbz	r0, 80144c4 <_calloc_r+0x18>
 80144bc:	9a01      	ldr	r2, [sp, #4]
 80144be:	2100      	movs	r1, #0
 80144c0:	f7fd feae 	bl	8012220 <memset>
 80144c4:	4620      	mov	r0, r4
 80144c6:	b002      	add	sp, #8
 80144c8:	bd10      	pop	{r4, pc}
	...

080144cc <_free_r>:
 80144cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80144ce:	2900      	cmp	r1, #0
 80144d0:	d048      	beq.n	8014564 <_free_r+0x98>
 80144d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80144d6:	9001      	str	r0, [sp, #4]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	f1a1 0404 	sub.w	r4, r1, #4
 80144de:	bfb8      	it	lt
 80144e0:	18e4      	addlt	r4, r4, r3
 80144e2:	f000 f989 	bl	80147f8 <__malloc_lock>
 80144e6:	4a20      	ldr	r2, [pc, #128]	; (8014568 <_free_r+0x9c>)
 80144e8:	9801      	ldr	r0, [sp, #4]
 80144ea:	6813      	ldr	r3, [r2, #0]
 80144ec:	4615      	mov	r5, r2
 80144ee:	b933      	cbnz	r3, 80144fe <_free_r+0x32>
 80144f0:	6063      	str	r3, [r4, #4]
 80144f2:	6014      	str	r4, [r2, #0]
 80144f4:	b003      	add	sp, #12
 80144f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80144fa:	f000 b983 	b.w	8014804 <__malloc_unlock>
 80144fe:	42a3      	cmp	r3, r4
 8014500:	d90b      	bls.n	801451a <_free_r+0x4e>
 8014502:	6821      	ldr	r1, [r4, #0]
 8014504:	1862      	adds	r2, r4, r1
 8014506:	4293      	cmp	r3, r2
 8014508:	bf04      	itt	eq
 801450a:	681a      	ldreq	r2, [r3, #0]
 801450c:	685b      	ldreq	r3, [r3, #4]
 801450e:	6063      	str	r3, [r4, #4]
 8014510:	bf04      	itt	eq
 8014512:	1852      	addeq	r2, r2, r1
 8014514:	6022      	streq	r2, [r4, #0]
 8014516:	602c      	str	r4, [r5, #0]
 8014518:	e7ec      	b.n	80144f4 <_free_r+0x28>
 801451a:	461a      	mov	r2, r3
 801451c:	685b      	ldr	r3, [r3, #4]
 801451e:	b10b      	cbz	r3, 8014524 <_free_r+0x58>
 8014520:	42a3      	cmp	r3, r4
 8014522:	d9fa      	bls.n	801451a <_free_r+0x4e>
 8014524:	6811      	ldr	r1, [r2, #0]
 8014526:	1855      	adds	r5, r2, r1
 8014528:	42a5      	cmp	r5, r4
 801452a:	d10b      	bne.n	8014544 <_free_r+0x78>
 801452c:	6824      	ldr	r4, [r4, #0]
 801452e:	4421      	add	r1, r4
 8014530:	1854      	adds	r4, r2, r1
 8014532:	42a3      	cmp	r3, r4
 8014534:	6011      	str	r1, [r2, #0]
 8014536:	d1dd      	bne.n	80144f4 <_free_r+0x28>
 8014538:	681c      	ldr	r4, [r3, #0]
 801453a:	685b      	ldr	r3, [r3, #4]
 801453c:	6053      	str	r3, [r2, #4]
 801453e:	4421      	add	r1, r4
 8014540:	6011      	str	r1, [r2, #0]
 8014542:	e7d7      	b.n	80144f4 <_free_r+0x28>
 8014544:	d902      	bls.n	801454c <_free_r+0x80>
 8014546:	230c      	movs	r3, #12
 8014548:	6003      	str	r3, [r0, #0]
 801454a:	e7d3      	b.n	80144f4 <_free_r+0x28>
 801454c:	6825      	ldr	r5, [r4, #0]
 801454e:	1961      	adds	r1, r4, r5
 8014550:	428b      	cmp	r3, r1
 8014552:	bf04      	itt	eq
 8014554:	6819      	ldreq	r1, [r3, #0]
 8014556:	685b      	ldreq	r3, [r3, #4]
 8014558:	6063      	str	r3, [r4, #4]
 801455a:	bf04      	itt	eq
 801455c:	1949      	addeq	r1, r1, r5
 801455e:	6021      	streq	r1, [r4, #0]
 8014560:	6054      	str	r4, [r2, #4]
 8014562:	e7c7      	b.n	80144f4 <_free_r+0x28>
 8014564:	b003      	add	sp, #12
 8014566:	bd30      	pop	{r4, r5, pc}
 8014568:	24000be8 	.word	0x24000be8

0801456c <_malloc_r>:
 801456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801456e:	1ccd      	adds	r5, r1, #3
 8014570:	f025 0503 	bic.w	r5, r5, #3
 8014574:	3508      	adds	r5, #8
 8014576:	2d0c      	cmp	r5, #12
 8014578:	bf38      	it	cc
 801457a:	250c      	movcc	r5, #12
 801457c:	2d00      	cmp	r5, #0
 801457e:	4606      	mov	r6, r0
 8014580:	db01      	blt.n	8014586 <_malloc_r+0x1a>
 8014582:	42a9      	cmp	r1, r5
 8014584:	d903      	bls.n	801458e <_malloc_r+0x22>
 8014586:	230c      	movs	r3, #12
 8014588:	6033      	str	r3, [r6, #0]
 801458a:	2000      	movs	r0, #0
 801458c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801458e:	f000 f933 	bl	80147f8 <__malloc_lock>
 8014592:	4921      	ldr	r1, [pc, #132]	; (8014618 <_malloc_r+0xac>)
 8014594:	680a      	ldr	r2, [r1, #0]
 8014596:	4614      	mov	r4, r2
 8014598:	b99c      	cbnz	r4, 80145c2 <_malloc_r+0x56>
 801459a:	4f20      	ldr	r7, [pc, #128]	; (801461c <_malloc_r+0xb0>)
 801459c:	683b      	ldr	r3, [r7, #0]
 801459e:	b923      	cbnz	r3, 80145aa <_malloc_r+0x3e>
 80145a0:	4621      	mov	r1, r4
 80145a2:	4630      	mov	r0, r6
 80145a4:	f000 f83c 	bl	8014620 <_sbrk_r>
 80145a8:	6038      	str	r0, [r7, #0]
 80145aa:	4629      	mov	r1, r5
 80145ac:	4630      	mov	r0, r6
 80145ae:	f000 f837 	bl	8014620 <_sbrk_r>
 80145b2:	1c43      	adds	r3, r0, #1
 80145b4:	d123      	bne.n	80145fe <_malloc_r+0x92>
 80145b6:	230c      	movs	r3, #12
 80145b8:	6033      	str	r3, [r6, #0]
 80145ba:	4630      	mov	r0, r6
 80145bc:	f000 f922 	bl	8014804 <__malloc_unlock>
 80145c0:	e7e3      	b.n	801458a <_malloc_r+0x1e>
 80145c2:	6823      	ldr	r3, [r4, #0]
 80145c4:	1b5b      	subs	r3, r3, r5
 80145c6:	d417      	bmi.n	80145f8 <_malloc_r+0x8c>
 80145c8:	2b0b      	cmp	r3, #11
 80145ca:	d903      	bls.n	80145d4 <_malloc_r+0x68>
 80145cc:	6023      	str	r3, [r4, #0]
 80145ce:	441c      	add	r4, r3
 80145d0:	6025      	str	r5, [r4, #0]
 80145d2:	e004      	b.n	80145de <_malloc_r+0x72>
 80145d4:	6863      	ldr	r3, [r4, #4]
 80145d6:	42a2      	cmp	r2, r4
 80145d8:	bf0c      	ite	eq
 80145da:	600b      	streq	r3, [r1, #0]
 80145dc:	6053      	strne	r3, [r2, #4]
 80145de:	4630      	mov	r0, r6
 80145e0:	f000 f910 	bl	8014804 <__malloc_unlock>
 80145e4:	f104 000b 	add.w	r0, r4, #11
 80145e8:	1d23      	adds	r3, r4, #4
 80145ea:	f020 0007 	bic.w	r0, r0, #7
 80145ee:	1ac2      	subs	r2, r0, r3
 80145f0:	d0cc      	beq.n	801458c <_malloc_r+0x20>
 80145f2:	1a1b      	subs	r3, r3, r0
 80145f4:	50a3      	str	r3, [r4, r2]
 80145f6:	e7c9      	b.n	801458c <_malloc_r+0x20>
 80145f8:	4622      	mov	r2, r4
 80145fa:	6864      	ldr	r4, [r4, #4]
 80145fc:	e7cc      	b.n	8014598 <_malloc_r+0x2c>
 80145fe:	1cc4      	adds	r4, r0, #3
 8014600:	f024 0403 	bic.w	r4, r4, #3
 8014604:	42a0      	cmp	r0, r4
 8014606:	d0e3      	beq.n	80145d0 <_malloc_r+0x64>
 8014608:	1a21      	subs	r1, r4, r0
 801460a:	4630      	mov	r0, r6
 801460c:	f000 f808 	bl	8014620 <_sbrk_r>
 8014610:	3001      	adds	r0, #1
 8014612:	d1dd      	bne.n	80145d0 <_malloc_r+0x64>
 8014614:	e7cf      	b.n	80145b6 <_malloc_r+0x4a>
 8014616:	bf00      	nop
 8014618:	24000be8 	.word	0x24000be8
 801461c:	24000bec 	.word	0x24000bec

08014620 <_sbrk_r>:
 8014620:	b538      	push	{r3, r4, r5, lr}
 8014622:	4d06      	ldr	r5, [pc, #24]	; (801463c <_sbrk_r+0x1c>)
 8014624:	2300      	movs	r3, #0
 8014626:	4604      	mov	r4, r0
 8014628:	4608      	mov	r0, r1
 801462a:	602b      	str	r3, [r5, #0]
 801462c:	f7f0 fee2 	bl	80053f4 <_sbrk>
 8014630:	1c43      	adds	r3, r0, #1
 8014632:	d102      	bne.n	801463a <_sbrk_r+0x1a>
 8014634:	682b      	ldr	r3, [r5, #0]
 8014636:	b103      	cbz	r3, 801463a <_sbrk_r+0x1a>
 8014638:	6023      	str	r3, [r4, #0]
 801463a:	bd38      	pop	{r3, r4, r5, pc}
 801463c:	24001700 	.word	0x24001700

08014640 <__sread>:
 8014640:	b510      	push	{r4, lr}
 8014642:	460c      	mov	r4, r1
 8014644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014648:	f000 fa3c 	bl	8014ac4 <_read_r>
 801464c:	2800      	cmp	r0, #0
 801464e:	bfab      	itete	ge
 8014650:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014652:	89a3      	ldrhlt	r3, [r4, #12]
 8014654:	181b      	addge	r3, r3, r0
 8014656:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801465a:	bfac      	ite	ge
 801465c:	6563      	strge	r3, [r4, #84]	; 0x54
 801465e:	81a3      	strhlt	r3, [r4, #12]
 8014660:	bd10      	pop	{r4, pc}

08014662 <__swrite>:
 8014662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014666:	461f      	mov	r7, r3
 8014668:	898b      	ldrh	r3, [r1, #12]
 801466a:	05db      	lsls	r3, r3, #23
 801466c:	4605      	mov	r5, r0
 801466e:	460c      	mov	r4, r1
 8014670:	4616      	mov	r6, r2
 8014672:	d505      	bpl.n	8014680 <__swrite+0x1e>
 8014674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014678:	2302      	movs	r3, #2
 801467a:	2200      	movs	r2, #0
 801467c:	f000 f898 	bl	80147b0 <_lseek_r>
 8014680:	89a3      	ldrh	r3, [r4, #12]
 8014682:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014686:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801468a:	81a3      	strh	r3, [r4, #12]
 801468c:	4632      	mov	r2, r6
 801468e:	463b      	mov	r3, r7
 8014690:	4628      	mov	r0, r5
 8014692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014696:	f000 b817 	b.w	80146c8 <_write_r>

0801469a <__sseek>:
 801469a:	b510      	push	{r4, lr}
 801469c:	460c      	mov	r4, r1
 801469e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146a2:	f000 f885 	bl	80147b0 <_lseek_r>
 80146a6:	1c43      	adds	r3, r0, #1
 80146a8:	89a3      	ldrh	r3, [r4, #12]
 80146aa:	bf15      	itete	ne
 80146ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80146ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80146b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80146b6:	81a3      	strheq	r3, [r4, #12]
 80146b8:	bf18      	it	ne
 80146ba:	81a3      	strhne	r3, [r4, #12]
 80146bc:	bd10      	pop	{r4, pc}

080146be <__sclose>:
 80146be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146c2:	f000 b831 	b.w	8014728 <_close_r>
	...

080146c8 <_write_r>:
 80146c8:	b538      	push	{r3, r4, r5, lr}
 80146ca:	4d07      	ldr	r5, [pc, #28]	; (80146e8 <_write_r+0x20>)
 80146cc:	4604      	mov	r4, r0
 80146ce:	4608      	mov	r0, r1
 80146d0:	4611      	mov	r1, r2
 80146d2:	2200      	movs	r2, #0
 80146d4:	602a      	str	r2, [r5, #0]
 80146d6:	461a      	mov	r2, r3
 80146d8:	f7f0 fe3b 	bl	8005352 <_write>
 80146dc:	1c43      	adds	r3, r0, #1
 80146de:	d102      	bne.n	80146e6 <_write_r+0x1e>
 80146e0:	682b      	ldr	r3, [r5, #0]
 80146e2:	b103      	cbz	r3, 80146e6 <_write_r+0x1e>
 80146e4:	6023      	str	r3, [r4, #0]
 80146e6:	bd38      	pop	{r3, r4, r5, pc}
 80146e8:	24001700 	.word	0x24001700

080146ec <__assert_func>:
 80146ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80146ee:	4614      	mov	r4, r2
 80146f0:	461a      	mov	r2, r3
 80146f2:	4b09      	ldr	r3, [pc, #36]	; (8014718 <__assert_func+0x2c>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	4605      	mov	r5, r0
 80146f8:	68d8      	ldr	r0, [r3, #12]
 80146fa:	b14c      	cbz	r4, 8014710 <__assert_func+0x24>
 80146fc:	4b07      	ldr	r3, [pc, #28]	; (801471c <__assert_func+0x30>)
 80146fe:	9100      	str	r1, [sp, #0]
 8014700:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014704:	4906      	ldr	r1, [pc, #24]	; (8014720 <__assert_func+0x34>)
 8014706:	462b      	mov	r3, r5
 8014708:	f000 f81e 	bl	8014748 <fiprintf>
 801470c:	f000 f9f9 	bl	8014b02 <abort>
 8014710:	4b04      	ldr	r3, [pc, #16]	; (8014724 <__assert_func+0x38>)
 8014712:	461c      	mov	r4, r3
 8014714:	e7f3      	b.n	80146fe <__assert_func+0x12>
 8014716:	bf00      	nop
 8014718:	24000240 	.word	0x24000240
 801471c:	0801699c 	.word	0x0801699c
 8014720:	080169a9 	.word	0x080169a9
 8014724:	080169d7 	.word	0x080169d7

08014728 <_close_r>:
 8014728:	b538      	push	{r3, r4, r5, lr}
 801472a:	4d06      	ldr	r5, [pc, #24]	; (8014744 <_close_r+0x1c>)
 801472c:	2300      	movs	r3, #0
 801472e:	4604      	mov	r4, r0
 8014730:	4608      	mov	r0, r1
 8014732:	602b      	str	r3, [r5, #0]
 8014734:	f7f0 fe29 	bl	800538a <_close>
 8014738:	1c43      	adds	r3, r0, #1
 801473a:	d102      	bne.n	8014742 <_close_r+0x1a>
 801473c:	682b      	ldr	r3, [r5, #0]
 801473e:	b103      	cbz	r3, 8014742 <_close_r+0x1a>
 8014740:	6023      	str	r3, [r4, #0]
 8014742:	bd38      	pop	{r3, r4, r5, pc}
 8014744:	24001700 	.word	0x24001700

08014748 <fiprintf>:
 8014748:	b40e      	push	{r1, r2, r3}
 801474a:	b503      	push	{r0, r1, lr}
 801474c:	4601      	mov	r1, r0
 801474e:	ab03      	add	r3, sp, #12
 8014750:	4805      	ldr	r0, [pc, #20]	; (8014768 <fiprintf+0x20>)
 8014752:	f853 2b04 	ldr.w	r2, [r3], #4
 8014756:	6800      	ldr	r0, [r0, #0]
 8014758:	9301      	str	r3, [sp, #4]
 801475a:	f000 f883 	bl	8014864 <_vfiprintf_r>
 801475e:	b002      	add	sp, #8
 8014760:	f85d eb04 	ldr.w	lr, [sp], #4
 8014764:	b003      	add	sp, #12
 8014766:	4770      	bx	lr
 8014768:	24000240 	.word	0x24000240

0801476c <_fstat_r>:
 801476c:	b538      	push	{r3, r4, r5, lr}
 801476e:	4d07      	ldr	r5, [pc, #28]	; (801478c <_fstat_r+0x20>)
 8014770:	2300      	movs	r3, #0
 8014772:	4604      	mov	r4, r0
 8014774:	4608      	mov	r0, r1
 8014776:	4611      	mov	r1, r2
 8014778:	602b      	str	r3, [r5, #0]
 801477a:	f7f0 fe12 	bl	80053a2 <_fstat>
 801477e:	1c43      	adds	r3, r0, #1
 8014780:	d102      	bne.n	8014788 <_fstat_r+0x1c>
 8014782:	682b      	ldr	r3, [r5, #0]
 8014784:	b103      	cbz	r3, 8014788 <_fstat_r+0x1c>
 8014786:	6023      	str	r3, [r4, #0]
 8014788:	bd38      	pop	{r3, r4, r5, pc}
 801478a:	bf00      	nop
 801478c:	24001700 	.word	0x24001700

08014790 <_isatty_r>:
 8014790:	b538      	push	{r3, r4, r5, lr}
 8014792:	4d06      	ldr	r5, [pc, #24]	; (80147ac <_isatty_r+0x1c>)
 8014794:	2300      	movs	r3, #0
 8014796:	4604      	mov	r4, r0
 8014798:	4608      	mov	r0, r1
 801479a:	602b      	str	r3, [r5, #0]
 801479c:	f7f0 fe11 	bl	80053c2 <_isatty>
 80147a0:	1c43      	adds	r3, r0, #1
 80147a2:	d102      	bne.n	80147aa <_isatty_r+0x1a>
 80147a4:	682b      	ldr	r3, [r5, #0]
 80147a6:	b103      	cbz	r3, 80147aa <_isatty_r+0x1a>
 80147a8:	6023      	str	r3, [r4, #0]
 80147aa:	bd38      	pop	{r3, r4, r5, pc}
 80147ac:	24001700 	.word	0x24001700

080147b0 <_lseek_r>:
 80147b0:	b538      	push	{r3, r4, r5, lr}
 80147b2:	4d07      	ldr	r5, [pc, #28]	; (80147d0 <_lseek_r+0x20>)
 80147b4:	4604      	mov	r4, r0
 80147b6:	4608      	mov	r0, r1
 80147b8:	4611      	mov	r1, r2
 80147ba:	2200      	movs	r2, #0
 80147bc:	602a      	str	r2, [r5, #0]
 80147be:	461a      	mov	r2, r3
 80147c0:	f7f0 fe0a 	bl	80053d8 <_lseek>
 80147c4:	1c43      	adds	r3, r0, #1
 80147c6:	d102      	bne.n	80147ce <_lseek_r+0x1e>
 80147c8:	682b      	ldr	r3, [r5, #0]
 80147ca:	b103      	cbz	r3, 80147ce <_lseek_r+0x1e>
 80147cc:	6023      	str	r3, [r4, #0]
 80147ce:	bd38      	pop	{r3, r4, r5, pc}
 80147d0:	24001700 	.word	0x24001700

080147d4 <__ascii_mbtowc>:
 80147d4:	b082      	sub	sp, #8
 80147d6:	b901      	cbnz	r1, 80147da <__ascii_mbtowc+0x6>
 80147d8:	a901      	add	r1, sp, #4
 80147da:	b142      	cbz	r2, 80147ee <__ascii_mbtowc+0x1a>
 80147dc:	b14b      	cbz	r3, 80147f2 <__ascii_mbtowc+0x1e>
 80147de:	7813      	ldrb	r3, [r2, #0]
 80147e0:	600b      	str	r3, [r1, #0]
 80147e2:	7812      	ldrb	r2, [r2, #0]
 80147e4:	1e10      	subs	r0, r2, #0
 80147e6:	bf18      	it	ne
 80147e8:	2001      	movne	r0, #1
 80147ea:	b002      	add	sp, #8
 80147ec:	4770      	bx	lr
 80147ee:	4610      	mov	r0, r2
 80147f0:	e7fb      	b.n	80147ea <__ascii_mbtowc+0x16>
 80147f2:	f06f 0001 	mvn.w	r0, #1
 80147f6:	e7f8      	b.n	80147ea <__ascii_mbtowc+0x16>

080147f8 <__malloc_lock>:
 80147f8:	4801      	ldr	r0, [pc, #4]	; (8014800 <__malloc_lock+0x8>)
 80147fa:	f7ff ba5c 	b.w	8013cb6 <__retarget_lock_acquire_recursive>
 80147fe:	bf00      	nop
 8014800:	240016f8 	.word	0x240016f8

08014804 <__malloc_unlock>:
 8014804:	4801      	ldr	r0, [pc, #4]	; (801480c <__malloc_unlock+0x8>)
 8014806:	f7ff ba57 	b.w	8013cb8 <__retarget_lock_release_recursive>
 801480a:	bf00      	nop
 801480c:	240016f8 	.word	0x240016f8

08014810 <__sfputc_r>:
 8014810:	6893      	ldr	r3, [r2, #8]
 8014812:	3b01      	subs	r3, #1
 8014814:	2b00      	cmp	r3, #0
 8014816:	b410      	push	{r4}
 8014818:	6093      	str	r3, [r2, #8]
 801481a:	da08      	bge.n	801482e <__sfputc_r+0x1e>
 801481c:	6994      	ldr	r4, [r2, #24]
 801481e:	42a3      	cmp	r3, r4
 8014820:	db01      	blt.n	8014826 <__sfputc_r+0x16>
 8014822:	290a      	cmp	r1, #10
 8014824:	d103      	bne.n	801482e <__sfputc_r+0x1e>
 8014826:	f85d 4b04 	ldr.w	r4, [sp], #4
 801482a:	f7fe b9b9 	b.w	8012ba0 <__swbuf_r>
 801482e:	6813      	ldr	r3, [r2, #0]
 8014830:	1c58      	adds	r0, r3, #1
 8014832:	6010      	str	r0, [r2, #0]
 8014834:	7019      	strb	r1, [r3, #0]
 8014836:	4608      	mov	r0, r1
 8014838:	f85d 4b04 	ldr.w	r4, [sp], #4
 801483c:	4770      	bx	lr

0801483e <__sfputs_r>:
 801483e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014840:	4606      	mov	r6, r0
 8014842:	460f      	mov	r7, r1
 8014844:	4614      	mov	r4, r2
 8014846:	18d5      	adds	r5, r2, r3
 8014848:	42ac      	cmp	r4, r5
 801484a:	d101      	bne.n	8014850 <__sfputs_r+0x12>
 801484c:	2000      	movs	r0, #0
 801484e:	e007      	b.n	8014860 <__sfputs_r+0x22>
 8014850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014854:	463a      	mov	r2, r7
 8014856:	4630      	mov	r0, r6
 8014858:	f7ff ffda 	bl	8014810 <__sfputc_r>
 801485c:	1c43      	adds	r3, r0, #1
 801485e:	d1f3      	bne.n	8014848 <__sfputs_r+0xa>
 8014860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014864 <_vfiprintf_r>:
 8014864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014868:	460d      	mov	r5, r1
 801486a:	b09d      	sub	sp, #116	; 0x74
 801486c:	4614      	mov	r4, r2
 801486e:	4698      	mov	r8, r3
 8014870:	4606      	mov	r6, r0
 8014872:	b118      	cbz	r0, 801487c <_vfiprintf_r+0x18>
 8014874:	6983      	ldr	r3, [r0, #24]
 8014876:	b90b      	cbnz	r3, 801487c <_vfiprintf_r+0x18>
 8014878:	f7ff f97a 	bl	8013b70 <__sinit>
 801487c:	4b89      	ldr	r3, [pc, #548]	; (8014aa4 <_vfiprintf_r+0x240>)
 801487e:	429d      	cmp	r5, r3
 8014880:	d11b      	bne.n	80148ba <_vfiprintf_r+0x56>
 8014882:	6875      	ldr	r5, [r6, #4]
 8014884:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014886:	07d9      	lsls	r1, r3, #31
 8014888:	d405      	bmi.n	8014896 <_vfiprintf_r+0x32>
 801488a:	89ab      	ldrh	r3, [r5, #12]
 801488c:	059a      	lsls	r2, r3, #22
 801488e:	d402      	bmi.n	8014896 <_vfiprintf_r+0x32>
 8014890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014892:	f7ff fa10 	bl	8013cb6 <__retarget_lock_acquire_recursive>
 8014896:	89ab      	ldrh	r3, [r5, #12]
 8014898:	071b      	lsls	r3, r3, #28
 801489a:	d501      	bpl.n	80148a0 <_vfiprintf_r+0x3c>
 801489c:	692b      	ldr	r3, [r5, #16]
 801489e:	b9eb      	cbnz	r3, 80148dc <_vfiprintf_r+0x78>
 80148a0:	4629      	mov	r1, r5
 80148a2:	4630      	mov	r0, r6
 80148a4:	f7fe f9ce 	bl	8012c44 <__swsetup_r>
 80148a8:	b1c0      	cbz	r0, 80148dc <_vfiprintf_r+0x78>
 80148aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80148ac:	07dc      	lsls	r4, r3, #31
 80148ae:	d50e      	bpl.n	80148ce <_vfiprintf_r+0x6a>
 80148b0:	f04f 30ff 	mov.w	r0, #4294967295
 80148b4:	b01d      	add	sp, #116	; 0x74
 80148b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ba:	4b7b      	ldr	r3, [pc, #492]	; (8014aa8 <_vfiprintf_r+0x244>)
 80148bc:	429d      	cmp	r5, r3
 80148be:	d101      	bne.n	80148c4 <_vfiprintf_r+0x60>
 80148c0:	68b5      	ldr	r5, [r6, #8]
 80148c2:	e7df      	b.n	8014884 <_vfiprintf_r+0x20>
 80148c4:	4b79      	ldr	r3, [pc, #484]	; (8014aac <_vfiprintf_r+0x248>)
 80148c6:	429d      	cmp	r5, r3
 80148c8:	bf08      	it	eq
 80148ca:	68f5      	ldreq	r5, [r6, #12]
 80148cc:	e7da      	b.n	8014884 <_vfiprintf_r+0x20>
 80148ce:	89ab      	ldrh	r3, [r5, #12]
 80148d0:	0598      	lsls	r0, r3, #22
 80148d2:	d4ed      	bmi.n	80148b0 <_vfiprintf_r+0x4c>
 80148d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80148d6:	f7ff f9ef 	bl	8013cb8 <__retarget_lock_release_recursive>
 80148da:	e7e9      	b.n	80148b0 <_vfiprintf_r+0x4c>
 80148dc:	2300      	movs	r3, #0
 80148de:	9309      	str	r3, [sp, #36]	; 0x24
 80148e0:	2320      	movs	r3, #32
 80148e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80148e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80148ea:	2330      	movs	r3, #48	; 0x30
 80148ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014ab0 <_vfiprintf_r+0x24c>
 80148f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80148f4:	f04f 0901 	mov.w	r9, #1
 80148f8:	4623      	mov	r3, r4
 80148fa:	469a      	mov	sl, r3
 80148fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014900:	b10a      	cbz	r2, 8014906 <_vfiprintf_r+0xa2>
 8014902:	2a25      	cmp	r2, #37	; 0x25
 8014904:	d1f9      	bne.n	80148fa <_vfiprintf_r+0x96>
 8014906:	ebba 0b04 	subs.w	fp, sl, r4
 801490a:	d00b      	beq.n	8014924 <_vfiprintf_r+0xc0>
 801490c:	465b      	mov	r3, fp
 801490e:	4622      	mov	r2, r4
 8014910:	4629      	mov	r1, r5
 8014912:	4630      	mov	r0, r6
 8014914:	f7ff ff93 	bl	801483e <__sfputs_r>
 8014918:	3001      	adds	r0, #1
 801491a:	f000 80aa 	beq.w	8014a72 <_vfiprintf_r+0x20e>
 801491e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014920:	445a      	add	r2, fp
 8014922:	9209      	str	r2, [sp, #36]	; 0x24
 8014924:	f89a 3000 	ldrb.w	r3, [sl]
 8014928:	2b00      	cmp	r3, #0
 801492a:	f000 80a2 	beq.w	8014a72 <_vfiprintf_r+0x20e>
 801492e:	2300      	movs	r3, #0
 8014930:	f04f 32ff 	mov.w	r2, #4294967295
 8014934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014938:	f10a 0a01 	add.w	sl, sl, #1
 801493c:	9304      	str	r3, [sp, #16]
 801493e:	9307      	str	r3, [sp, #28]
 8014940:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014944:	931a      	str	r3, [sp, #104]	; 0x68
 8014946:	4654      	mov	r4, sl
 8014948:	2205      	movs	r2, #5
 801494a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801494e:	4858      	ldr	r0, [pc, #352]	; (8014ab0 <_vfiprintf_r+0x24c>)
 8014950:	f7eb fcce 	bl	80002f0 <memchr>
 8014954:	9a04      	ldr	r2, [sp, #16]
 8014956:	b9d8      	cbnz	r0, 8014990 <_vfiprintf_r+0x12c>
 8014958:	06d1      	lsls	r1, r2, #27
 801495a:	bf44      	itt	mi
 801495c:	2320      	movmi	r3, #32
 801495e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014962:	0713      	lsls	r3, r2, #28
 8014964:	bf44      	itt	mi
 8014966:	232b      	movmi	r3, #43	; 0x2b
 8014968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801496c:	f89a 3000 	ldrb.w	r3, [sl]
 8014970:	2b2a      	cmp	r3, #42	; 0x2a
 8014972:	d015      	beq.n	80149a0 <_vfiprintf_r+0x13c>
 8014974:	9a07      	ldr	r2, [sp, #28]
 8014976:	4654      	mov	r4, sl
 8014978:	2000      	movs	r0, #0
 801497a:	f04f 0c0a 	mov.w	ip, #10
 801497e:	4621      	mov	r1, r4
 8014980:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014984:	3b30      	subs	r3, #48	; 0x30
 8014986:	2b09      	cmp	r3, #9
 8014988:	d94e      	bls.n	8014a28 <_vfiprintf_r+0x1c4>
 801498a:	b1b0      	cbz	r0, 80149ba <_vfiprintf_r+0x156>
 801498c:	9207      	str	r2, [sp, #28]
 801498e:	e014      	b.n	80149ba <_vfiprintf_r+0x156>
 8014990:	eba0 0308 	sub.w	r3, r0, r8
 8014994:	fa09 f303 	lsl.w	r3, r9, r3
 8014998:	4313      	orrs	r3, r2
 801499a:	9304      	str	r3, [sp, #16]
 801499c:	46a2      	mov	sl, r4
 801499e:	e7d2      	b.n	8014946 <_vfiprintf_r+0xe2>
 80149a0:	9b03      	ldr	r3, [sp, #12]
 80149a2:	1d19      	adds	r1, r3, #4
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	9103      	str	r1, [sp, #12]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	bfbb      	ittet	lt
 80149ac:	425b      	neglt	r3, r3
 80149ae:	f042 0202 	orrlt.w	r2, r2, #2
 80149b2:	9307      	strge	r3, [sp, #28]
 80149b4:	9307      	strlt	r3, [sp, #28]
 80149b6:	bfb8      	it	lt
 80149b8:	9204      	strlt	r2, [sp, #16]
 80149ba:	7823      	ldrb	r3, [r4, #0]
 80149bc:	2b2e      	cmp	r3, #46	; 0x2e
 80149be:	d10c      	bne.n	80149da <_vfiprintf_r+0x176>
 80149c0:	7863      	ldrb	r3, [r4, #1]
 80149c2:	2b2a      	cmp	r3, #42	; 0x2a
 80149c4:	d135      	bne.n	8014a32 <_vfiprintf_r+0x1ce>
 80149c6:	9b03      	ldr	r3, [sp, #12]
 80149c8:	1d1a      	adds	r2, r3, #4
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	9203      	str	r2, [sp, #12]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	bfb8      	it	lt
 80149d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80149d6:	3402      	adds	r4, #2
 80149d8:	9305      	str	r3, [sp, #20]
 80149da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014ac0 <_vfiprintf_r+0x25c>
 80149de:	7821      	ldrb	r1, [r4, #0]
 80149e0:	2203      	movs	r2, #3
 80149e2:	4650      	mov	r0, sl
 80149e4:	f7eb fc84 	bl	80002f0 <memchr>
 80149e8:	b140      	cbz	r0, 80149fc <_vfiprintf_r+0x198>
 80149ea:	2340      	movs	r3, #64	; 0x40
 80149ec:	eba0 000a 	sub.w	r0, r0, sl
 80149f0:	fa03 f000 	lsl.w	r0, r3, r0
 80149f4:	9b04      	ldr	r3, [sp, #16]
 80149f6:	4303      	orrs	r3, r0
 80149f8:	3401      	adds	r4, #1
 80149fa:	9304      	str	r3, [sp, #16]
 80149fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a00:	482c      	ldr	r0, [pc, #176]	; (8014ab4 <_vfiprintf_r+0x250>)
 8014a02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014a06:	2206      	movs	r2, #6
 8014a08:	f7eb fc72 	bl	80002f0 <memchr>
 8014a0c:	2800      	cmp	r0, #0
 8014a0e:	d03f      	beq.n	8014a90 <_vfiprintf_r+0x22c>
 8014a10:	4b29      	ldr	r3, [pc, #164]	; (8014ab8 <_vfiprintf_r+0x254>)
 8014a12:	bb1b      	cbnz	r3, 8014a5c <_vfiprintf_r+0x1f8>
 8014a14:	9b03      	ldr	r3, [sp, #12]
 8014a16:	3307      	adds	r3, #7
 8014a18:	f023 0307 	bic.w	r3, r3, #7
 8014a1c:	3308      	adds	r3, #8
 8014a1e:	9303      	str	r3, [sp, #12]
 8014a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a22:	443b      	add	r3, r7
 8014a24:	9309      	str	r3, [sp, #36]	; 0x24
 8014a26:	e767      	b.n	80148f8 <_vfiprintf_r+0x94>
 8014a28:	fb0c 3202 	mla	r2, ip, r2, r3
 8014a2c:	460c      	mov	r4, r1
 8014a2e:	2001      	movs	r0, #1
 8014a30:	e7a5      	b.n	801497e <_vfiprintf_r+0x11a>
 8014a32:	2300      	movs	r3, #0
 8014a34:	3401      	adds	r4, #1
 8014a36:	9305      	str	r3, [sp, #20]
 8014a38:	4619      	mov	r1, r3
 8014a3a:	f04f 0c0a 	mov.w	ip, #10
 8014a3e:	4620      	mov	r0, r4
 8014a40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a44:	3a30      	subs	r2, #48	; 0x30
 8014a46:	2a09      	cmp	r2, #9
 8014a48:	d903      	bls.n	8014a52 <_vfiprintf_r+0x1ee>
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d0c5      	beq.n	80149da <_vfiprintf_r+0x176>
 8014a4e:	9105      	str	r1, [sp, #20]
 8014a50:	e7c3      	b.n	80149da <_vfiprintf_r+0x176>
 8014a52:	fb0c 2101 	mla	r1, ip, r1, r2
 8014a56:	4604      	mov	r4, r0
 8014a58:	2301      	movs	r3, #1
 8014a5a:	e7f0      	b.n	8014a3e <_vfiprintf_r+0x1da>
 8014a5c:	ab03      	add	r3, sp, #12
 8014a5e:	9300      	str	r3, [sp, #0]
 8014a60:	462a      	mov	r2, r5
 8014a62:	4b16      	ldr	r3, [pc, #88]	; (8014abc <_vfiprintf_r+0x258>)
 8014a64:	a904      	add	r1, sp, #16
 8014a66:	4630      	mov	r0, r6
 8014a68:	f7fd fc72 	bl	8012350 <_printf_float>
 8014a6c:	4607      	mov	r7, r0
 8014a6e:	1c78      	adds	r0, r7, #1
 8014a70:	d1d6      	bne.n	8014a20 <_vfiprintf_r+0x1bc>
 8014a72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a74:	07d9      	lsls	r1, r3, #31
 8014a76:	d405      	bmi.n	8014a84 <_vfiprintf_r+0x220>
 8014a78:	89ab      	ldrh	r3, [r5, #12]
 8014a7a:	059a      	lsls	r2, r3, #22
 8014a7c:	d402      	bmi.n	8014a84 <_vfiprintf_r+0x220>
 8014a7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a80:	f7ff f91a 	bl	8013cb8 <__retarget_lock_release_recursive>
 8014a84:	89ab      	ldrh	r3, [r5, #12]
 8014a86:	065b      	lsls	r3, r3, #25
 8014a88:	f53f af12 	bmi.w	80148b0 <_vfiprintf_r+0x4c>
 8014a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a8e:	e711      	b.n	80148b4 <_vfiprintf_r+0x50>
 8014a90:	ab03      	add	r3, sp, #12
 8014a92:	9300      	str	r3, [sp, #0]
 8014a94:	462a      	mov	r2, r5
 8014a96:	4b09      	ldr	r3, [pc, #36]	; (8014abc <_vfiprintf_r+0x258>)
 8014a98:	a904      	add	r1, sp, #16
 8014a9a:	4630      	mov	r0, r6
 8014a9c:	f7fd fee4 	bl	8012868 <_printf_i>
 8014aa0:	e7e4      	b.n	8014a6c <_vfiprintf_r+0x208>
 8014aa2:	bf00      	nop
 8014aa4:	080167fc 	.word	0x080167fc
 8014aa8:	0801681c 	.word	0x0801681c
 8014aac:	080167dc 	.word	0x080167dc
 8014ab0:	080169e2 	.word	0x080169e2
 8014ab4:	080169ec 	.word	0x080169ec
 8014ab8:	08012351 	.word	0x08012351
 8014abc:	0801483f 	.word	0x0801483f
 8014ac0:	080169e8 	.word	0x080169e8

08014ac4 <_read_r>:
 8014ac4:	b538      	push	{r3, r4, r5, lr}
 8014ac6:	4d07      	ldr	r5, [pc, #28]	; (8014ae4 <_read_r+0x20>)
 8014ac8:	4604      	mov	r4, r0
 8014aca:	4608      	mov	r0, r1
 8014acc:	4611      	mov	r1, r2
 8014ace:	2200      	movs	r2, #0
 8014ad0:	602a      	str	r2, [r5, #0]
 8014ad2:	461a      	mov	r2, r3
 8014ad4:	f7f0 fc20 	bl	8005318 <_read>
 8014ad8:	1c43      	adds	r3, r0, #1
 8014ada:	d102      	bne.n	8014ae2 <_read_r+0x1e>
 8014adc:	682b      	ldr	r3, [r5, #0]
 8014ade:	b103      	cbz	r3, 8014ae2 <_read_r+0x1e>
 8014ae0:	6023      	str	r3, [r4, #0]
 8014ae2:	bd38      	pop	{r3, r4, r5, pc}
 8014ae4:	24001700 	.word	0x24001700

08014ae8 <__ascii_wctomb>:
 8014ae8:	b149      	cbz	r1, 8014afe <__ascii_wctomb+0x16>
 8014aea:	2aff      	cmp	r2, #255	; 0xff
 8014aec:	bf85      	ittet	hi
 8014aee:	238a      	movhi	r3, #138	; 0x8a
 8014af0:	6003      	strhi	r3, [r0, #0]
 8014af2:	700a      	strbls	r2, [r1, #0]
 8014af4:	f04f 30ff 	movhi.w	r0, #4294967295
 8014af8:	bf98      	it	ls
 8014afa:	2001      	movls	r0, #1
 8014afc:	4770      	bx	lr
 8014afe:	4608      	mov	r0, r1
 8014b00:	4770      	bx	lr

08014b02 <abort>:
 8014b02:	b508      	push	{r3, lr}
 8014b04:	2006      	movs	r0, #6
 8014b06:	f000 f82b 	bl	8014b60 <raise>
 8014b0a:	2001      	movs	r0, #1
 8014b0c:	f7f0 fbfa 	bl	8005304 <_exit>

08014b10 <_raise_r>:
 8014b10:	291f      	cmp	r1, #31
 8014b12:	b538      	push	{r3, r4, r5, lr}
 8014b14:	4604      	mov	r4, r0
 8014b16:	460d      	mov	r5, r1
 8014b18:	d904      	bls.n	8014b24 <_raise_r+0x14>
 8014b1a:	2316      	movs	r3, #22
 8014b1c:	6003      	str	r3, [r0, #0]
 8014b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8014b22:	bd38      	pop	{r3, r4, r5, pc}
 8014b24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014b26:	b112      	cbz	r2, 8014b2e <_raise_r+0x1e>
 8014b28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014b2c:	b94b      	cbnz	r3, 8014b42 <_raise_r+0x32>
 8014b2e:	4620      	mov	r0, r4
 8014b30:	f000 f830 	bl	8014b94 <_getpid_r>
 8014b34:	462a      	mov	r2, r5
 8014b36:	4601      	mov	r1, r0
 8014b38:	4620      	mov	r0, r4
 8014b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b3e:	f000 b817 	b.w	8014b70 <_kill_r>
 8014b42:	2b01      	cmp	r3, #1
 8014b44:	d00a      	beq.n	8014b5c <_raise_r+0x4c>
 8014b46:	1c59      	adds	r1, r3, #1
 8014b48:	d103      	bne.n	8014b52 <_raise_r+0x42>
 8014b4a:	2316      	movs	r3, #22
 8014b4c:	6003      	str	r3, [r0, #0]
 8014b4e:	2001      	movs	r0, #1
 8014b50:	e7e7      	b.n	8014b22 <_raise_r+0x12>
 8014b52:	2400      	movs	r4, #0
 8014b54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014b58:	4628      	mov	r0, r5
 8014b5a:	4798      	blx	r3
 8014b5c:	2000      	movs	r0, #0
 8014b5e:	e7e0      	b.n	8014b22 <_raise_r+0x12>

08014b60 <raise>:
 8014b60:	4b02      	ldr	r3, [pc, #8]	; (8014b6c <raise+0xc>)
 8014b62:	4601      	mov	r1, r0
 8014b64:	6818      	ldr	r0, [r3, #0]
 8014b66:	f7ff bfd3 	b.w	8014b10 <_raise_r>
 8014b6a:	bf00      	nop
 8014b6c:	24000240 	.word	0x24000240

08014b70 <_kill_r>:
 8014b70:	b538      	push	{r3, r4, r5, lr}
 8014b72:	4d07      	ldr	r5, [pc, #28]	; (8014b90 <_kill_r+0x20>)
 8014b74:	2300      	movs	r3, #0
 8014b76:	4604      	mov	r4, r0
 8014b78:	4608      	mov	r0, r1
 8014b7a:	4611      	mov	r1, r2
 8014b7c:	602b      	str	r3, [r5, #0]
 8014b7e:	f7f0 fbb1 	bl	80052e4 <_kill>
 8014b82:	1c43      	adds	r3, r0, #1
 8014b84:	d102      	bne.n	8014b8c <_kill_r+0x1c>
 8014b86:	682b      	ldr	r3, [r5, #0]
 8014b88:	b103      	cbz	r3, 8014b8c <_kill_r+0x1c>
 8014b8a:	6023      	str	r3, [r4, #0]
 8014b8c:	bd38      	pop	{r3, r4, r5, pc}
 8014b8e:	bf00      	nop
 8014b90:	24001700 	.word	0x24001700

08014b94 <_getpid_r>:
 8014b94:	f7f0 bb9e 	b.w	80052d4 <_getpid>

08014b98 <_init>:
 8014b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b9a:	bf00      	nop
 8014b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b9e:	bc08      	pop	{r3}
 8014ba0:	469e      	mov	lr, r3
 8014ba2:	4770      	bx	lr

08014ba4 <_fini>:
 8014ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ba6:	bf00      	nop
 8014ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014baa:	bc08      	pop	{r3}
 8014bac:	469e      	mov	lr, r3
 8014bae:	4770      	bx	lr
