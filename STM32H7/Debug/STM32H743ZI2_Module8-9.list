
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efe0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  0800f280  0800f280  0001f280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f81c  0800f81c  0001f81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f824  0800f824  0001f824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0800f82c  0800f82c  0001f82c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000208  24000000  0800f834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000008d8  24000208  0800fa3c  00020208  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000ae0  0800fa3c  00020ae0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030264  00000000  00000000  00020236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000044cf  00000000  00000000  0005049a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001548  00000000  00000000  00054970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001410  00000000  00000000  00055eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cc28  00000000  00000000  000572c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001db5e  00000000  00000000  00093ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016d257  00000000  00000000  000b1a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0021eca5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006ac4  00000000  00000000  0021ecf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000208 	.word	0x24000208
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f268 	.word	0x0800f268

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400020c 	.word	0x2400020c
 80002dc:	0800f268 	.word	0x0800f268

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b96e 	b.w	80009fc <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	468c      	mov	ip, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	f040 8083 	bne.w	800084e <__udivmoddi4+0x116>
 8000748:	428a      	cmp	r2, r1
 800074a:	4617      	mov	r7, r2
 800074c:	d947      	bls.n	80007de <__udivmoddi4+0xa6>
 800074e:	fab2 f282 	clz	r2, r2
 8000752:	b142      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000754:	f1c2 0020 	rsb	r0, r2, #32
 8000758:	fa24 f000 	lsr.w	r0, r4, r0
 800075c:	4091      	lsls	r1, r2
 800075e:	4097      	lsls	r7, r2
 8000760:	ea40 0c01 	orr.w	ip, r0, r1
 8000764:	4094      	lsls	r4, r2
 8000766:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fbbc f6f8 	udiv	r6, ip, r8
 8000770:	fa1f fe87 	uxth.w	lr, r7
 8000774:	fb08 c116 	mls	r1, r8, r6, ip
 8000778:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077c:	fb06 f10e 	mul.w	r1, r6, lr
 8000780:	4299      	cmp	r1, r3
 8000782:	d909      	bls.n	8000798 <__udivmoddi4+0x60>
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	f106 30ff 	add.w	r0, r6, #4294967295
 800078a:	f080 8119 	bcs.w	80009c0 <__udivmoddi4+0x288>
 800078e:	4299      	cmp	r1, r3
 8000790:	f240 8116 	bls.w	80009c0 <__udivmoddi4+0x288>
 8000794:	3e02      	subs	r6, #2
 8000796:	443b      	add	r3, r7
 8000798:	1a5b      	subs	r3, r3, r1
 800079a:	b2a4      	uxth	r4, r4
 800079c:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a0:	fb08 3310 	mls	r3, r8, r0, r3
 80007a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007ac:	45a6      	cmp	lr, r4
 80007ae:	d909      	bls.n	80007c4 <__udivmoddi4+0x8c>
 80007b0:	193c      	adds	r4, r7, r4
 80007b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007b6:	f080 8105 	bcs.w	80009c4 <__udivmoddi4+0x28c>
 80007ba:	45a6      	cmp	lr, r4
 80007bc:	f240 8102 	bls.w	80009c4 <__udivmoddi4+0x28c>
 80007c0:	3802      	subs	r0, #2
 80007c2:	443c      	add	r4, r7
 80007c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c8:	eba4 040e 	sub.w	r4, r4, lr
 80007cc:	2600      	movs	r6, #0
 80007ce:	b11d      	cbz	r5, 80007d8 <__udivmoddi4+0xa0>
 80007d0:	40d4      	lsrs	r4, r2
 80007d2:	2300      	movs	r3, #0
 80007d4:	e9c5 4300 	strd	r4, r3, [r5]
 80007d8:	4631      	mov	r1, r6
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	b902      	cbnz	r2, 80007e2 <__udivmoddi4+0xaa>
 80007e0:	deff      	udf	#255	; 0xff
 80007e2:	fab2 f282 	clz	r2, r2
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d150      	bne.n	800088c <__udivmoddi4+0x154>
 80007ea:	1bcb      	subs	r3, r1, r7
 80007ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007f0:	fa1f f887 	uxth.w	r8, r7
 80007f4:	2601      	movs	r6, #1
 80007f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007fa:	0c21      	lsrs	r1, r4, #16
 80007fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000800:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000804:	fb08 f30c 	mul.w	r3, r8, ip
 8000808:	428b      	cmp	r3, r1
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0xe4>
 800080c:	1879      	adds	r1, r7, r1
 800080e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0xe2>
 8000814:	428b      	cmp	r3, r1
 8000816:	f200 80e9 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 800081a:	4684      	mov	ip, r0
 800081c:	1ac9      	subs	r1, r1, r3
 800081e:	b2a3      	uxth	r3, r4
 8000820:	fbb1 f0fe 	udiv	r0, r1, lr
 8000824:	fb0e 1110 	mls	r1, lr, r0, r1
 8000828:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800082c:	fb08 f800 	mul.w	r8, r8, r0
 8000830:	45a0      	cmp	r8, r4
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0x10c>
 8000834:	193c      	adds	r4, r7, r4
 8000836:	f100 33ff 	add.w	r3, r0, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x10a>
 800083c:	45a0      	cmp	r8, r4
 800083e:	f200 80d9 	bhi.w	80009f4 <__udivmoddi4+0x2bc>
 8000842:	4618      	mov	r0, r3
 8000844:	eba4 0408 	sub.w	r4, r4, r8
 8000848:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800084c:	e7bf      	b.n	80007ce <__udivmoddi4+0x96>
 800084e:	428b      	cmp	r3, r1
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x12e>
 8000852:	2d00      	cmp	r5, #0
 8000854:	f000 80b1 	beq.w	80009ba <__udivmoddi4+0x282>
 8000858:	2600      	movs	r6, #0
 800085a:	e9c5 0100 	strd	r0, r1, [r5]
 800085e:	4630      	mov	r0, r6
 8000860:	4631      	mov	r1, r6
 8000862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000866:	fab3 f683 	clz	r6, r3
 800086a:	2e00      	cmp	r6, #0
 800086c:	d14a      	bne.n	8000904 <__udivmoddi4+0x1cc>
 800086e:	428b      	cmp	r3, r1
 8000870:	d302      	bcc.n	8000878 <__udivmoddi4+0x140>
 8000872:	4282      	cmp	r2, r0
 8000874:	f200 80b8 	bhi.w	80009e8 <__udivmoddi4+0x2b0>
 8000878:	1a84      	subs	r4, r0, r2
 800087a:	eb61 0103 	sbc.w	r1, r1, r3
 800087e:	2001      	movs	r0, #1
 8000880:	468c      	mov	ip, r1
 8000882:	2d00      	cmp	r5, #0
 8000884:	d0a8      	beq.n	80007d8 <__udivmoddi4+0xa0>
 8000886:	e9c5 4c00 	strd	r4, ip, [r5]
 800088a:	e7a5      	b.n	80007d8 <__udivmoddi4+0xa0>
 800088c:	f1c2 0320 	rsb	r3, r2, #32
 8000890:	fa20 f603 	lsr.w	r6, r0, r3
 8000894:	4097      	lsls	r7, r2
 8000896:	fa01 f002 	lsl.w	r0, r1, r2
 800089a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089e:	40d9      	lsrs	r1, r3
 80008a0:	4330      	orrs	r0, r6
 80008a2:	0c03      	lsrs	r3, r0, #16
 80008a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80008a8:	fa1f f887 	uxth.w	r8, r7
 80008ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80008b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008b4:	fb06 f108 	mul.w	r1, r6, r8
 80008b8:	4299      	cmp	r1, r3
 80008ba:	fa04 f402 	lsl.w	r4, r4, r2
 80008be:	d909      	bls.n	80008d4 <__udivmoddi4+0x19c>
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008c6:	f080 808d 	bcs.w	80009e4 <__udivmoddi4+0x2ac>
 80008ca:	4299      	cmp	r1, r3
 80008cc:	f240 808a 	bls.w	80009e4 <__udivmoddi4+0x2ac>
 80008d0:	3e02      	subs	r6, #2
 80008d2:	443b      	add	r3, r7
 80008d4:	1a5b      	subs	r3, r3, r1
 80008d6:	b281      	uxth	r1, r0
 80008d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e4:	fb00 f308 	mul.w	r3, r0, r8
 80008e8:	428b      	cmp	r3, r1
 80008ea:	d907      	bls.n	80008fc <__udivmoddi4+0x1c4>
 80008ec:	1879      	adds	r1, r7, r1
 80008ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80008f2:	d273      	bcs.n	80009dc <__udivmoddi4+0x2a4>
 80008f4:	428b      	cmp	r3, r1
 80008f6:	d971      	bls.n	80009dc <__udivmoddi4+0x2a4>
 80008f8:	3802      	subs	r0, #2
 80008fa:	4439      	add	r1, r7
 80008fc:	1acb      	subs	r3, r1, r3
 80008fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000902:	e778      	b.n	80007f6 <__udivmoddi4+0xbe>
 8000904:	f1c6 0c20 	rsb	ip, r6, #32
 8000908:	fa03 f406 	lsl.w	r4, r3, r6
 800090c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000910:	431c      	orrs	r4, r3
 8000912:	fa20 f70c 	lsr.w	r7, r0, ip
 8000916:	fa01 f306 	lsl.w	r3, r1, r6
 800091a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800091e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000922:	431f      	orrs	r7, r3
 8000924:	0c3b      	lsrs	r3, r7, #16
 8000926:	fbb1 f9fe 	udiv	r9, r1, lr
 800092a:	fa1f f884 	uxth.w	r8, r4
 800092e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000932:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000936:	fb09 fa08 	mul.w	sl, r9, r8
 800093a:	458a      	cmp	sl, r1
 800093c:	fa02 f206 	lsl.w	r2, r2, r6
 8000940:	fa00 f306 	lsl.w	r3, r0, r6
 8000944:	d908      	bls.n	8000958 <__udivmoddi4+0x220>
 8000946:	1861      	adds	r1, r4, r1
 8000948:	f109 30ff 	add.w	r0, r9, #4294967295
 800094c:	d248      	bcs.n	80009e0 <__udivmoddi4+0x2a8>
 800094e:	458a      	cmp	sl, r1
 8000950:	d946      	bls.n	80009e0 <__udivmoddi4+0x2a8>
 8000952:	f1a9 0902 	sub.w	r9, r9, #2
 8000956:	4421      	add	r1, r4
 8000958:	eba1 010a 	sub.w	r1, r1, sl
 800095c:	b2bf      	uxth	r7, r7
 800095e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000962:	fb0e 1110 	mls	r1, lr, r0, r1
 8000966:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800096a:	fb00 f808 	mul.w	r8, r0, r8
 800096e:	45b8      	cmp	r8, r7
 8000970:	d907      	bls.n	8000982 <__udivmoddi4+0x24a>
 8000972:	19e7      	adds	r7, r4, r7
 8000974:	f100 31ff 	add.w	r1, r0, #4294967295
 8000978:	d22e      	bcs.n	80009d8 <__udivmoddi4+0x2a0>
 800097a:	45b8      	cmp	r8, r7
 800097c:	d92c      	bls.n	80009d8 <__udivmoddi4+0x2a0>
 800097e:	3802      	subs	r0, #2
 8000980:	4427      	add	r7, r4
 8000982:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000986:	eba7 0708 	sub.w	r7, r7, r8
 800098a:	fba0 8902 	umull	r8, r9, r0, r2
 800098e:	454f      	cmp	r7, r9
 8000990:	46c6      	mov	lr, r8
 8000992:	4649      	mov	r1, r9
 8000994:	d31a      	bcc.n	80009cc <__udivmoddi4+0x294>
 8000996:	d017      	beq.n	80009c8 <__udivmoddi4+0x290>
 8000998:	b15d      	cbz	r5, 80009b2 <__udivmoddi4+0x27a>
 800099a:	ebb3 020e 	subs.w	r2, r3, lr
 800099e:	eb67 0701 	sbc.w	r7, r7, r1
 80009a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80009a6:	40f2      	lsrs	r2, r6
 80009a8:	ea4c 0202 	orr.w	r2, ip, r2
 80009ac:	40f7      	lsrs	r7, r6
 80009ae:	e9c5 2700 	strd	r2, r7, [r5]
 80009b2:	2600      	movs	r6, #0
 80009b4:	4631      	mov	r1, r6
 80009b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ba:	462e      	mov	r6, r5
 80009bc:	4628      	mov	r0, r5
 80009be:	e70b      	b.n	80007d8 <__udivmoddi4+0xa0>
 80009c0:	4606      	mov	r6, r0
 80009c2:	e6e9      	b.n	8000798 <__udivmoddi4+0x60>
 80009c4:	4618      	mov	r0, r3
 80009c6:	e6fd      	b.n	80007c4 <__udivmoddi4+0x8c>
 80009c8:	4543      	cmp	r3, r8
 80009ca:	d2e5      	bcs.n	8000998 <__udivmoddi4+0x260>
 80009cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009d0:	eb69 0104 	sbc.w	r1, r9, r4
 80009d4:	3801      	subs	r0, #1
 80009d6:	e7df      	b.n	8000998 <__udivmoddi4+0x260>
 80009d8:	4608      	mov	r0, r1
 80009da:	e7d2      	b.n	8000982 <__udivmoddi4+0x24a>
 80009dc:	4660      	mov	r0, ip
 80009de:	e78d      	b.n	80008fc <__udivmoddi4+0x1c4>
 80009e0:	4681      	mov	r9, r0
 80009e2:	e7b9      	b.n	8000958 <__udivmoddi4+0x220>
 80009e4:	4666      	mov	r6, ip
 80009e6:	e775      	b.n	80008d4 <__udivmoddi4+0x19c>
 80009e8:	4630      	mov	r0, r6
 80009ea:	e74a      	b.n	8000882 <__udivmoddi4+0x14a>
 80009ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80009f0:	4439      	add	r1, r7
 80009f2:	e713      	b.n	800081c <__udivmoddi4+0xe4>
 80009f4:	3802      	subs	r0, #2
 80009f6:	443c      	add	r4, r7
 80009f8:	e724      	b.n	8000844 <__udivmoddi4+0x10c>
 80009fa:	bf00      	nop

080009fc <__aeabi_idiv0>:
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address){
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	601a      	str	r2, [r3, #0]
	this->address = _address;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	729a      	strb	r2, [r3, #10]
}
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_ZN5AMT21D1Ev>:

AMT21::~AMT21(){
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

}
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read(){
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f103 010a 	add.w	r1, r3, #10
 8000a50:	2364      	movs	r3, #100	; 0x64
 8000a52:	2201      	movs	r2, #1
 8000a54:	f009 fe0c 	bl	800a670 <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f103 010c 	add.w	r1, r3, #12
 8000a62:	2364      	movs	r3, #100	; 0x64
 8000a64:	2202      	movs	r2, #2
 8000a66:	f009 fe99 	bl	800a79c <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	899b      	ldrh	r3, [r3, #12]
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bf14      	ite	ne
 8000a76:	2301      	movne	r3, #1
 8000a78:	2300      	moveq	r3, #0
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	749a      	strb	r2, [r3, #18]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	899b      	ldrh	r3, [r3, #12]
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	0bdb      	lsrs	r3, r3, #15
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	461a      	mov	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	74da      	strb	r2, [r3, #19]
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <_ZN5AMT2117AMT21_Check_ValueEv>:

HAL_StatusTypeDef AMT21::AMT21_Check_Value(){
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	899b      	ldrh	r3, [r3, #12]
 8000aa8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000aac:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	899b      	ldrh	r3, [r3, #12]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	899b      	ldrh	r3, [r3, #12]
 8000abe:	105b      	asrs	r3, r3, #1
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000ac8:	2300      	movs	r3, #0
 8000aca:	737b      	strb	r3, [r7, #13]
 8000acc:	7b7b      	ldrb	r3, [r7, #13]
 8000ace:	2b05      	cmp	r3, #5
 8000ad0:	d820      	bhi.n	8000b14 <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	899b      	ldrh	r3, [r3, #12]
 8000ad6:	109b      	asrs	r3, r3, #2
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	899b      	ldrh	r3, [r3, #12]
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	b25a      	sxtb	r2, r3
 8000aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aee:	4053      	eors	r3, r2
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	899b      	ldrh	r3, [r3, #12]
 8000af8:	105b      	asrs	r3, r3, #1
 8000afa:	b25b      	sxtb	r3, r3
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	b25a      	sxtb	r2, r3
 8000b02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b06:	4053      	eors	r3, r2
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000b0c:	7b7b      	ldrb	r3, [r7, #13]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	737b      	strb	r3, [r7, #13]
 8000b12:	e7db      	b.n	8000acc <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	bf0c      	ite	eq
 8000b1a:	2301      	moveq	r3, #1
 8000b1c:	2300      	movne	r3, #0
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 8000b22:	7bbb      	ldrb	r3, [r7, #14]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf0c      	ite	eq
 8000b28:	2301      	moveq	r3, #1
 8000b2a:	2300      	movne	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7c9b      	ldrb	r3, [r3, #18]
 8000b34:	7bfa      	ldrb	r2, [r7, #15]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d10a      	bne.n	8000b50 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	7cdb      	ldrb	r3, [r3, #19]
 8000b3e:	7bba      	ldrb	r2, [r7, #14]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d105      	bne.n	8000b50 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 8000b44:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	e003      	b.n	8000b58 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
	}
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <_ZN5AMT2112getAngPos180Ev>:
{
	return this->raw_value;
}

int16_t AMT21::getAngPos180()
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
//	uint8_t iii =  (this->raw_value & 0x1FFF);
	return ((((this->raw_value & 0x2000) >> 13) * (-16383)) + (this->raw_value & 0x3FFF) ) * -1;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	135b      	asrs	r3, r3, #13
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	461a      	mov	r2, r3
 8000b80:	0392      	lsls	r2, r2, #14
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	b21b      	sxth	r3, r3
//	return this->raw_value;
//	this->value =
//	return iii;
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bb4:	eef0 7ae7 	vabs.f32	s15, s15
 8000bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bd4:	fef8 7a67 	vrinta.f32	s15, s15
 8000bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
 8000bf4:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8000bfa:	615a      	str	r2, [r3, #20]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4a18      	ldr	r2, [pc, #96]	; (8000c60 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8000c00:	619a      	str	r2, [r3, #24]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000c08:	61da      	str	r2, [r3, #28]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	4a15      	ldr	r2, [pc, #84]	; (8000c64 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8000c0e:	621a      	str	r2, [r3, #32]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000c16:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	22c7      	movs	r2, #199	; 0xc7
 8000c2c:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 1.0f;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000c34:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	4a09      	ldr	r2, [pc, #36]	; (8000c60 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8000c3a:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 8000c3c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000c68 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>
 8000c40:	68f8      	ldr	r0, [r7, #12]
 8000c42:	f000 f82f 	bl	8000ca4 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	683a      	ldr	r2, [r7, #0]
 8000c4a:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	60da      	str	r2, [r3, #12]
}
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4618      	mov	r0, r3
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	41a00000 	.word	0x41a00000
 8000c60:	469c4000 	.word	0x469c4000
 8000c64:	43480000 	.word	0x43480000
 8000c68:	00000000 	.word	0x00000000

08000c6c <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
}
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	4619      	mov	r1, r3
 8000c94:	4610      	mov	r0, r2
 8000c96:	f008 fadb 	bl	8009250 <HAL_TIM_PWM_Start>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	ed2d 8b02 	vpush	{d8}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	edd3 7a04 	vldr	s15, [r3, #16]
 8000cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cc4:	f7ff ff6f 	bl	8000ba6 <_ZSt4fabsf>
 8000cc8:	eeb0 7a40 	vmov.f32	s14, s0
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	edd3 7a05 	vldr	s15, [r3, #20]
 8000cd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cda:	bf94      	ite	ls
 8000cdc:	2301      	movls	r3, #1
 8000cde:	2300      	movhi	r3, #0
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	e01b      	b.n	8000d26 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	edd3 7a04 	vldr	s15, [r3, #16]
 8000cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8000cf8:	f7ff ff55 	bl	8000ba6 <_ZSt4fabsf>
 8000cfc:	eeb0 7a40 	vmov.f32	s14, s0
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	edd3 7a06 	vldr	s15, [r3, #24]
 8000d06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d0e:	bfac      	ite	ge
 8000d10:	2301      	movge	r3, #1
 8000d12:	2300      	movlt	r3, #0
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d003      	beq.n	8000d22 <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	e001      	b.n	8000d26 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	60fb      	str	r3, [r7, #12]

	if (this->frequency > 0.001f && this->frequency != 0.0f) {
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d2c:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8000fec <_ZN7Stepper19StepperSetFrequencyEf+0x348>
 8000d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d38:	f340 80e4 	ble.w	8000f04 <_ZN7Stepper19StepperSetFrequencyEf+0x260>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d42:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d4a:	f000 80db 	beq.w	8000f04 <_ZN7Stepper19StepperSetFrequencyEf+0x260>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6898      	ldr	r0, [r3, #8]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f005 fc9e 	bl	800669c <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * f)) - 1U);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d68:	3301      	adds	r3, #1
 8000d6a:	ee07 3a90 	vmov	s15, r3
 8000d6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d72:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d7a:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8000ff0 <_ZN7Stepper19StepperSetFrequencyEf+0x34c>
 8000d7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8000d82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d8e:	f7ff ff1a 	bl	8000bc6 <_ZSt5roundf>
 8000d92:	eef0 7a40 	vmov.f32	s15, s0
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000da0:	ee17 2a90 	vmov	r2, s15
 8000da4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d113      	bne.n	8000dd6 <_ZN7Stepper19StepperSetFrequencyEf+0x132>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db6:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000db8:	085b      	lsrs	r3, r3, #1
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fa33 	bl	8001226 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000dc0:	eeb0 7b40 	vmov.f64	d7, d0
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000dce:	ee17 2a90 	vmov	r2, s15
 8000dd2:	635a      	str	r2, [r3, #52]	; 0x34
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000dd4:	e1e8      	b.n	80011a8 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	d113      	bne.n	8000e06 <_ZN7Stepper19StepperSetFrequencyEf+0x162>
			this->stepper_htim->Instance->CCR2 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de6:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000de8:	085b      	lsrs	r3, r3, #1
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 fa1b 	bl	8001226 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000df0:	eeb0 7b40 	vmov.f64	d7, d0
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000dfe:	ee17 2a90 	vmov	r2, s15
 8000e02:	639a      	str	r2, [r3, #56]	; 0x38
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000e04:	e1d0      	b.n	80011a8 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b08      	cmp	r3, #8
 8000e0c:	d113      	bne.n	8000e36 <_ZN7Stepper19StepperSetFrequencyEf+0x192>
			this->stepper_htim->Instance->CCR3 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e16:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000e18:	085b      	lsrs	r3, r3, #1
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 fa03 	bl	8001226 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e20:	eeb0 7b40 	vmov.f64	d7, d0
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e2e:	ee17 2a90 	vmov	r2, s15
 8000e32:	63da      	str	r2, [r3, #60]	; 0x3c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000e34:	e1b8      	b.n	80011a8 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b0c      	cmp	r3, #12
 8000e3c:	d113      	bne.n	8000e66 <_ZN7Stepper19StepperSetFrequencyEf+0x1c2>
			this->stepper_htim->Instance->CCR4 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e46:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8000e48:	085b      	lsrs	r3, r3, #1
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f9eb 	bl	8001226 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e50:	eeb0 7b40 	vmov.f64	d7, d0
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e5e:	ee17 2a90 	vmov	r2, s15
 8000e62:	641a      	str	r2, [r3, #64]	; 0x40
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000e64:	e1a0      	b.n	80011a8 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	2b10      	cmp	r3, #16
 8000e6c:	d113      	bne.n	8000e96 <_ZN7Stepper19StepperSetFrequencyEf+0x1f2>
			this->stepper_htim->Instance->CCR5 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e76:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8000e78:	085b      	lsrs	r3, r3, #1
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f9d3 	bl	8001226 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e80:	eeb0 7b40 	vmov.f64	d7, d0
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e8e:	ee17 2a90 	vmov	r2, s15
 8000e92:	659a      	str	r2, [r3, #88]	; 0x58
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000e94:	e188      	b.n	80011a8 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b14      	cmp	r3, #20
 8000e9c:	d113      	bne.n	8000ec6 <_ZN7Stepper19StepperSetFrequencyEf+0x222>
			this->stepper_htim->Instance->CCR6 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea6:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8000ea8:	085b      	lsrs	r3, r3, #1
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f9bb 	bl	8001226 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000eb0:	eeb0 7b40 	vmov.f64	d7, d0
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ebe:	ee17 2a90 	vmov	r2, s15
 8000ec2:	65da      	str	r2, [r3, #92]	; 0x5c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000ec4:	e170      	b.n	80011a8 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else {
			this->stepper_htim->Instance->CCR1 = 0;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2200      	movs	r2, #0
 8000eec:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2200      	movs	r2, #0
 8000f00:	65da      	str	r2, [r3, #92]	; 0x5c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000f02:	e151      	b.n	80011a8 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

	} else if (this->frequency < 0.001f && this->frequency != 0.0f) {
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f0a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8000fec <_ZN7Stepper19StepperSetFrequencyEf+0x348>
 8000f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f16:	f140 80ec 	bpl.w	80010f2 <_ZN7Stepper19StepperSetFrequencyEf+0x44e>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f20:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f28:	f000 80e3 	beq.w	80010f2 <_ZN7Stepper19StepperSetFrequencyEf+0x44e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6898      	ldr	r0, [r3, #8]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	2200      	movs	r2, #0
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f005 fbaf 	bl	800669c <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f46:	3301      	adds	r3, #1
 8000f48:	ee07 3a90 	vmov	s15, r3
 8000f4c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000f50:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f54:	f7ff fe27 	bl	8000ba6 <_ZSt4fabsf>
 8000f58:	eef0 7a40 	vmov.f32	s15, s0
 8000f5c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000f60:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000ff0 <_ZN7Stepper19StepperSetFrequencyEf+0x34c>
 8000f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8000f68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f70:	eeb0 0a67 	vmov.f32	s0, s15
 8000f74:	f7ff fe27 	bl	8000bc6 <_ZSt5roundf>
 8000f78:	eef0 7a40 	vmov.f32	s15, s0
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f86:	ee17 2a90 	vmov	r2, s15
 8000f8a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d113      	bne.n	8000fbc <_ZN7Stepper19StepperSetFrequencyEf+0x318>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000f9e:	085b      	lsrs	r3, r3, #1
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 f940 	bl	8001226 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000fa6:	eeb0 7b40 	vmov.f64	d7, d0
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fb4:	ee17 2a90 	vmov	r2, s15
 8000fb8:	635a      	str	r2, [r3, #52]	; 0x34
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000fba:	e0f5      	b.n	80011a8 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b04      	cmp	r3, #4
 8000fc2:	d117      	bne.n	8000ff4 <_ZN7Stepper19StepperSetFrequencyEf+0x350>
			this->stepper_htim->Instance->CCR2 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fcc:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000fce:	085b      	lsrs	r3, r3, #1
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f928 	bl	8001226 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000fd6:	eeb0 7b40 	vmov.f64	d7, d0
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fe4:	ee17 2a90 	vmov	r2, s15
 8000fe8:	639a      	str	r2, [r3, #56]	; 0x38
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000fea:	e0dd      	b.n	80011a8 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
 8000fec:	3a83126f 	.word	0x3a83126f
 8000ff0:	4d64e1c0 	.word	0x4d64e1c0
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d113      	bne.n	8001024 <_ZN7Stepper19StepperSetFrequencyEf+0x380>
			this->stepper_htim->Instance->CCR3 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001004:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8001006:	085b      	lsrs	r3, r3, #1
 8001008:	4618      	mov	r0, r3
 800100a:	f000 f90c 	bl	8001226 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800100e:	eeb0 7b40 	vmov.f64	d7, d0
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800101c:	ee17 2a90 	vmov	r2, s15
 8001020:	63da      	str	r2, [r3, #60]	; 0x3c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001022:	e0c1      	b.n	80011a8 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b0c      	cmp	r3, #12
 800102a:	d113      	bne.n	8001054 <_ZN7Stepper19StepperSetFrequencyEf+0x3b0>
			this->stepper_htim->Instance->CCR4 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001034:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8001036:	085b      	lsrs	r3, r3, #1
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f8f4 	bl	8001226 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800103e:	eeb0 7b40 	vmov.f64	d7, d0
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800104c:	ee17 2a90 	vmov	r2, s15
 8001050:	641a      	str	r2, [r3, #64]	; 0x40
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001052:	e0a9      	b.n	80011a8 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b10      	cmp	r3, #16
 800105a:	d113      	bne.n	8001084 <_ZN7Stepper19StepperSetFrequencyEf+0x3e0>
			this->stepper_htim->Instance->CCR5 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001064:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8001066:	085b      	lsrs	r3, r3, #1
 8001068:	4618      	mov	r0, r3
 800106a:	f000 f8dc 	bl	8001226 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800106e:	eeb0 7b40 	vmov.f64	d7, d0
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800107c:	ee17 2a90 	vmov	r2, s15
 8001080:	659a      	str	r2, [r3, #88]	; 0x58
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001082:	e091      	b.n	80011a8 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b14      	cmp	r3, #20
 800108a:	d113      	bne.n	80010b4 <_ZN7Stepper19StepperSetFrequencyEf+0x410>
			this->stepper_htim->Instance->CCR6 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001094:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8001096:	085b      	lsrs	r3, r3, #1
 8001098:	4618      	mov	r0, r3
 800109a:	f000 f8c4 	bl	8001226 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800109e:	eeb0 7b40 	vmov.f64	d7, d0
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010ac:	ee17 2a90 	vmov	r2, s15
 80010b0:	65da      	str	r2, [r3, #92]	; 0x5c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 80010b2:	e079      	b.n	80011a8 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else {
			this->stepper_htim->Instance->CCR1 = 0;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2200      	movs	r2, #0
 80010bc:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2200      	movs	r2, #0
 80010c6:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2200      	movs	r2, #0
 80010d0:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2200      	movs	r2, #0
 80010da:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2200      	movs	r2, #0
 80010e4:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2200      	movs	r2, #0
 80010ee:	65da      	str	r2, [r3, #92]	; 0x5c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 80010f0:	e05a      	b.n	80011a8 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}
	} else {
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d105      	bne.n	8001106 <_ZN7Stepper19StepperSetFrequencyEf+0x462>
			this->stepper_htim->Instance->CCR1 = 0;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2200      	movs	r2, #0
 8001102:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8001104:	e050      	b.n	80011a8 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b04      	cmp	r3, #4
 800110c:	d105      	bne.n	800111a <_ZN7Stepper19StepperSetFrequencyEf+0x476>
			this->stepper_htim->Instance->CCR2 = 0;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2200      	movs	r2, #0
 8001116:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001118:	e046      	b.n	80011a8 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b08      	cmp	r3, #8
 8001120:	d105      	bne.n	800112e <_ZN7Stepper19StepperSetFrequencyEf+0x48a>
			this->stepper_htim->Instance->CCR3 = 0;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2200      	movs	r2, #0
 800112a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800112c:	e03c      	b.n	80011a8 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b0c      	cmp	r3, #12
 8001134:	d105      	bne.n	8001142 <_ZN7Stepper19StepperSetFrequencyEf+0x49e>
			this->stepper_htim->Instance->CCR4 = 0;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2200      	movs	r2, #0
 800113e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001140:	e032      	b.n	80011a8 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b10      	cmp	r3, #16
 8001148:	d105      	bne.n	8001156 <_ZN7Stepper19StepperSetFrequencyEf+0x4b2>
			this->stepper_htim->Instance->CCR5 = 0;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2200      	movs	r2, #0
 8001152:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001154:	e028      	b.n	80011a8 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b14      	cmp	r3, #20
 800115c:	d105      	bne.n	800116a <_ZN7Stepper19StepperSetFrequencyEf+0x4c6>
			this->stepper_htim->Instance->CCR6 = 0;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2200      	movs	r2, #0
 8001166:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001168:	e01e      	b.n	80011a8 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
			this->stepper_htim->Instance->CCR1 = 0;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2200      	movs	r2, #0
 8001172:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2200      	movs	r2, #0
 800117c:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2200      	movs	r2, #0
 8001186:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2200      	movs	r2, #0
 8001190:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2200      	movs	r2, #0
 800119a:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2200      	movs	r2, #0
 80011a4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80011a6:	e7ff      	b.n	80011a8 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	ecbd 8b02 	vpop	{d8}
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 80011c0:	ed97 0a00 	vldr	s0, [r7]
 80011c4:	f7ff fcef 	bl	8000ba6 <_ZSt4fabsf>
 80011c8:	eef0 7a40 	vmov.f32	s15, s0
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80011ee:	eeb0 0b47 	vmov.f64	d0, d7
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ffe5 	bl	80011da <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001210:	eeb0 7b40 	vmov.f64	d7, d0
 8001214:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	edc3 7a07 	vstr	s15, [r3, #28]
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	ee07 3a90 	vmov	s15, r3
 8001234:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001238:	eeb0 0b47 	vmov.f64	d0, d7
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	ed87 0a01 	vstr	s0, [r7, #4]
 8001250:	edc7 0a00 	vstr	s1, [r7]
 8001254:	edd7 0a00 	vldr	s1, [r7]
 8001258:	ed97 0a01 	vldr	s0, [r7, #4]
 800125c:	f00b f9ec 	bl	800c638 <atan2f>
 8001260:	eef0 7a40 	vmov.f32	s15, s0
 8001264:	eeb0 0a67 	vmov.f32	s0, s15
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	ed87 0a01 	vstr	s0, [r7, #4]
 8001278:	ed97 0a01 	vldr	s0, [r7, #4]
 800127c:	f00b f864 	bl	800c348 <cosf>
 8001280:	eef0 7a40 	vmov.f32	s15, s0
 8001284:	eeb0 0a67 	vmov.f32	s0, s15
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	ed87 0a01 	vstr	s0, [r7, #4]
 8001298:	ed97 0a01 	vldr	s0, [r7, #4]
 800129c:	f00b f92c 	bl	800c4f8 <sinf>
 80012a0:	eef0 7a40 	vmov.f32	s15, s0
 80012a4:	eeb0 0a67 	vmov.f32	s0, s15
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <_ZSt4sqrtf>:
  { return __builtin_sqrtf(__x); }
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	ed87 0a01 	vstr	s0, [r7, #4]
 80012b8:	ed97 0a01 	vldr	s0, [r7, #4]
 80012bc:	f00b f9be 	bl	800c63c <sqrtf>
 80012c0:	eef0 7a40 	vmov.f32	s15, s0
 80012c4:	eeb0 0a67 	vmov.f32	s0, s15
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <_Z7find_IKffff>:
};
typedef struct joint_state joint_config;
#endif

joint_config find_IK(float gripper_linear_x, float gripper_linear_y, float gripper_linear_z, float gripper_angular_yaw)
{
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b095      	sub	sp, #84	; 0x54
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	ed87 0a07 	vstr	s0, [r7, #28]
 80012da:	edc7 0a06 	vstr	s1, [r7, #24]
 80012de:	ed87 1a05 	vstr	s2, [r7, #20]
 80012e2:	edc7 1a04 	vstr	s3, [r7, #16]
	bug1 = gripper_linear_x*gripper_linear_x;
 80012e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80012ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012ee:	4b86      	ldr	r3, [pc, #536]	; (8001508 <_Z7find_IKffff+0x238>)
 80012f0:	edc3 7a00 	vstr	s15, [r3]
	bug2 = gripper_linear_y*gripper_linear_y;
 80012f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80012f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012fc:	4b83      	ldr	r3, [pc, #524]	; (800150c <_Z7find_IKffff+0x23c>)
 80012fe:	edc3 7a00 	vstr	s15, [r3]
	bug3 = L12*L12;
 8001302:	4b83      	ldr	r3, [pc, #524]	; (8001510 <_Z7find_IKffff+0x240>)
 8001304:	ed93 7a00 	vldr	s14, [r3]
 8001308:	4b81      	ldr	r3, [pc, #516]	; (8001510 <_Z7find_IKffff+0x240>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001312:	4b80      	ldr	r3, [pc, #512]	; (8001514 <_Z7find_IKffff+0x244>)
 8001314:	edc3 7a00 	vstr	s15, [r3]
	bug4 = L3*L3 ;
 8001318:	4b7f      	ldr	r3, [pc, #508]	; (8001518 <_Z7find_IKffff+0x248>)
 800131a:	ed93 7a00 	vldr	s14, [r3]
 800131e:	4b7e      	ldr	r3, [pc, #504]	; (8001518 <_Z7find_IKffff+0x248>)
 8001320:	edd3 7a00 	vldr	s15, [r3]
 8001324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001328:	4b7c      	ldr	r3, [pc, #496]	; (800151c <_Z7find_IKffff+0x24c>)
 800132a:	edc3 7a00 	vstr	s15, [r3]
	C3 = ((gripper_linear_x*gripper_linear_x)+(gripper_linear_y*gripper_linear_y)-(L12*L12)-(L3*L3)) / (2*L12*L3);
 800132e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001332:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001336:	edd7 7a06 	vldr	s15, [r7, #24]
 800133a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800133e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001342:	4b73      	ldr	r3, [pc, #460]	; (8001510 <_Z7find_IKffff+0x240>)
 8001344:	edd3 6a00 	vldr	s13, [r3]
 8001348:	4b71      	ldr	r3, [pc, #452]	; (8001510 <_Z7find_IKffff+0x240>)
 800134a:	edd3 7a00 	vldr	s15, [r3]
 800134e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001352:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001356:	4b70      	ldr	r3, [pc, #448]	; (8001518 <_Z7find_IKffff+0x248>)
 8001358:	edd3 6a00 	vldr	s13, [r3]
 800135c:	4b6e      	ldr	r3, [pc, #440]	; (8001518 <_Z7find_IKffff+0x248>)
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001366:	ee77 6a67 	vsub.f32	s13, s14, s15
 800136a:	4b69      	ldr	r3, [pc, #420]	; (8001510 <_Z7find_IKffff+0x240>)
 800136c:	edd3 7a00 	vldr	s15, [r3]
 8001370:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001374:	4b68      	ldr	r3, [pc, #416]	; (8001518 <_Z7find_IKffff+0x248>)
 8001376:	edd3 7a00 	vldr	s15, [r3]
 800137a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800137e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001382:	4b67      	ldr	r3, [pc, #412]	; (8001520 <_Z7find_IKffff+0x250>)
 8001384:	edc3 7a00 	vstr	s15, [r3]
	S3 = sqrt(1-(C3*C3));
 8001388:	4b65      	ldr	r3, [pc, #404]	; (8001520 <_Z7find_IKffff+0x250>)
 800138a:	ed93 7a00 	vldr	s14, [r3]
 800138e:	4b64      	ldr	r3, [pc, #400]	; (8001520 <_Z7find_IKffff+0x250>)
 8001390:	edd3 7a00 	vldr	s15, [r3]
 8001394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001398:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800139c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a0:	eeb0 0a67 	vmov.f32	s0, s15
 80013a4:	f7ff ff83 	bl	80012ae <_ZSt4sqrtf>
 80013a8:	eef0 7a40 	vmov.f32	s15, s0
 80013ac:	4b5d      	ldr	r3, [pc, #372]	; (8001524 <_Z7find_IKffff+0x254>)
 80013ae:	edc3 7a00 	vstr	s15, [r3]
	q3 = atan2(S3,C3);
 80013b2:	4b5c      	ldr	r3, [pc, #368]	; (8001524 <_Z7find_IKffff+0x254>)
 80013b4:	edd3 7a00 	vldr	s15, [r3]
 80013b8:	4b59      	ldr	r3, [pc, #356]	; (8001520 <_Z7find_IKffff+0x250>)
 80013ba:	ed93 7a00 	vldr	s14, [r3]
 80013be:	eef0 0a47 	vmov.f32	s1, s14
 80013c2:	eeb0 0a67 	vmov.f32	s0, s15
 80013c6:	f7ff ff3e 	bl	8001246 <_ZSt5atan2ff>
 80013ca:	eef0 7a40 	vmov.f32	s15, s0
 80013ce:	4b56      	ldr	r3, [pc, #344]	; (8001528 <_Z7find_IKffff+0x258>)
 80013d0:	edc3 7a00 	vstr	s15, [r3]

	float L3S3 = L3*S3;
 80013d4:	4b50      	ldr	r3, [pc, #320]	; (8001518 <_Z7find_IKffff+0x248>)
 80013d6:	ed93 7a00 	vldr	s14, [r3]
 80013da:	4b52      	ldr	r3, [pc, #328]	; (8001524 <_Z7find_IKffff+0x254>)
 80013dc:	edd3 7a00 	vldr	s15, [r3]
 80013e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	float L123C3 = L12 + (L3*C3);
 80013e8:	4b4b      	ldr	r3, [pc, #300]	; (8001518 <_Z7find_IKffff+0x248>)
 80013ea:	ed93 7a00 	vldr	s14, [r3]
 80013ee:	4b4c      	ldr	r3, [pc, #304]	; (8001520 <_Z7find_IKffff+0x250>)
 80013f0:	edd3 7a00 	vldr	s15, [r3]
 80013f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013f8:	4b45      	ldr	r3, [pc, #276]	; (8001510 <_Z7find_IKffff+0x240>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001402:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

	S1 = (-L3S3*gripper_linear_x) + (L123C3*gripper_linear_y);
 8001406:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800140a:	eeb1 7a67 	vneg.f32	s14, s15
 800140e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001412:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001416:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800141a:	edd7 7a06 	vldr	s15, [r7, #24]
 800141e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001426:	4b41      	ldr	r3, [pc, #260]	; (800152c <_Z7find_IKffff+0x25c>)
 8001428:	edc3 7a00 	vstr	s15, [r3]
	C1 = (L3S3*gripper_linear_y) + (L123C3*gripper_linear_x);
 800142c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001430:	edd7 7a06 	vldr	s15, [r7, #24]
 8001434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001438:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800143c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001448:	4b39      	ldr	r3, [pc, #228]	; (8001530 <_Z7find_IKffff+0x260>)
 800144a:	edc3 7a00 	vstr	s15, [r3]
	q1 = atan2(S1,C1);
 800144e:	4b37      	ldr	r3, [pc, #220]	; (800152c <_Z7find_IKffff+0x25c>)
 8001450:	edd3 7a00 	vldr	s15, [r3]
 8001454:	4b36      	ldr	r3, [pc, #216]	; (8001530 <_Z7find_IKffff+0x260>)
 8001456:	ed93 7a00 	vldr	s14, [r3]
 800145a:	eef0 0a47 	vmov.f32	s1, s14
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	f7ff fef0 	bl	8001246 <_ZSt5atan2ff>
 8001466:	eef0 7a40 	vmov.f32	s15, s0
 800146a:	4b32      	ldr	r3, [pc, #200]	; (8001534 <_Z7find_IKffff+0x264>)
 800146c:	edc3 7a00 	vstr	s15, [r3]
	float q4 = gripper_angular_yaw - q1 - q3;
 8001470:	4b30      	ldr	r3, [pc, #192]	; (8001534 <_Z7find_IKffff+0x264>)
 8001472:	edd3 7a00 	vldr	s15, [r3]
 8001476:	ed97 7a04 	vldr	s14, [r7, #16]
 800147a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800147e:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <_Z7find_IKffff+0x258>)
 8001480:	edd3 7a00 	vldr	s15, [r3]
 8001484:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001488:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float q2 = gripper_linear_z + H4 - H3 - H1;
 800148c:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <_Z7find_IKffff+0x268>)
 800148e:	ed93 7a00 	vldr	s14, [r3]
 8001492:	edd7 7a05 	vldr	s15, [r7, #20]
 8001496:	ee37 7a27 	vadd.f32	s14, s14, s15
 800149a:	4b28      	ldr	r3, [pc, #160]	; (800153c <_Z7find_IKffff+0x26c>)
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014a4:	4b26      	ldr	r3, [pc, #152]	; (8001540 <_Z7find_IKffff+0x270>)
 80014a6:	edd3 7a00 	vldr	s15, [r3]
 80014aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ae:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	joint_config buff;
	buff.q1 = q1;
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <_Z7find_IKffff+0x264>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	623b      	str	r3, [r7, #32]
	buff.q2 = C3;
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <_Z7find_IKffff+0x250>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
	buff.q3 = q3;
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <_Z7find_IKffff+0x258>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
	buff.q4 = S3;
 80014c4:	4b17      	ldr	r3, [pc, #92]	; (8001524 <_Z7find_IKffff+0x254>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c

    return buff;
 80014ca:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80014ce:	f107 0320 	add.w	r3, r7, #32
 80014d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80014d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80014dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014e0:	ee06 0a10 	vmov	s12, r0
 80014e4:	ee06 1a90 	vmov	s13, r1
 80014e8:	ee07 2a10 	vmov	s14, r2
 80014ec:	ee07 3a90 	vmov	s15, r3
}
 80014f0:	eeb0 0a46 	vmov.f32	s0, s12
 80014f4:	eef0 0a66 	vmov.f32	s1, s13
 80014f8:	eeb0 1a47 	vmov.f32	s2, s14
 80014fc:	eef0 1a67 	vmov.f32	s3, s15
 8001500:	3754      	adds	r7, #84	; 0x54
 8001502:	46bd      	mov	sp, r7
 8001504:	bd90      	pop	{r4, r7, pc}
 8001506:	bf00      	nop
 8001508:	24000ab0 	.word	0x24000ab0
 800150c:	24000ab4 	.word	0x24000ab4
 8001510:	24000004 	.word	0x24000004
 8001514:	24000ab8 	.word	0x24000ab8
 8001518:	24000000 	.word	0x24000000
 800151c:	24000abc 	.word	0x24000abc
 8001520:	24000a8c 	.word	0x24000a8c
 8001524:	24000a90 	.word	0x24000a90
 8001528:	24000a98 	.word	0x24000a98
 800152c:	24000a88 	.word	0x24000a88
 8001530:	24000a84 	.word	0x24000a84
 8001534:	24000a94 	.word	0x24000a94
 8001538:	24000010 	.word	0x24000010
 800153c:	2400000c 	.word	0x2400000c
 8001540:	24000008 	.word	0x24000008
 8001544:	00000000 	.word	0x00000000

08001548 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	if (htim == &htim12){	//
	}
	if (htim == &htim7){	//

	}
	if (htim == &htim6) { 	//
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a8f      	ldr	r2, [pc, #572]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001554:	4293      	cmp	r3, r2
 8001556:	f040 810b 	bne.w	8001770 <HAL_TIM_PeriodElapsedCallback+0x228>
		encoderJ1.AMT21_Read();
 800155a:	488e      	ldr	r0, [pc, #568]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800155c:	f7ff fa6f 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8001560:	488c      	ldr	r0, [pc, #560]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001562:	f7ff fa9b 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	4b8b      	ldr	r3, [pc, #556]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800156c:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 800156e:	4b8a      	ldr	r3, [pc, #552]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d106      	bne.n	8001584 <HAL_TIM_PeriodElapsedCallback+0x3c>
			posJ1 = encoderJ1.getAngPos180();
 8001576:	4887      	ldr	r0, [pc, #540]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001578:	f7ff faf4 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	4b86      	ldr	r3, [pc, #536]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001582:	801a      	strh	r2, [r3, #0]
		}
		encoderJ3.AMT21_Read();
 8001584:	4886      	ldr	r0, [pc, #536]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001586:	f7ff fa5a 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 800158a:	4885      	ldr	r0, [pc, #532]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800158c:	f7ff fa86 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	4b83      	ldr	r3, [pc, #524]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001596:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8001598:	4b82      	ldr	r3, [pc, #520]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d106      	bne.n	80015ae <HAL_TIM_PeriodElapsedCallback+0x66>
			posJ3 = encoderJ3.getAngPos180();
 80015a0:	487f      	ldr	r0, [pc, #508]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80015a2:	f7ff fadf 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 80015a6:	4603      	mov	r3, r0
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b7f      	ldr	r3, [pc, #508]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80015ac:	801a      	strh	r2, [r3, #0]

//
//		Goal_velocity_q1 = sin(0.314 * 2 * t) * 2000;
//		Goal_velocity_q3 = sin(0.314 * 2 * t) * 4000;

		const float KP_J1 = 2;
 80015ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015b2:	61fb      	str	r3, [r7, #28]
		const float Kp_J3 = 4;
 80015b4:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80015b8:	61bb      	str	r3, [r7, #24]
//		const float KP_J1 = 1.0;
//		const float Kp_J3 = 2.0;

		joint_config findchessbot_joint_state;
	//	findchessbot_joint_state = find_IK(0.4, 0, 0, 0);
		chess_board_ang = chessboard_angular_velocity * t;
 80015ba:	4b7c      	ldr	r3, [pc, #496]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x264>)
 80015bc:	ed93 7a00 	vldr	s14, [r3]
 80015c0:	4b7b      	ldr	r3, [pc, #492]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ca:	4b7a      	ldr	r3, [pc, #488]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80015cc:	edc3 7a00 	vstr	s15, [r3]
		debug_pos_x = 0.247*cos(chess_board_ang)+0.42744;
 80015d0:	4b78      	ldr	r3, [pc, #480]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	eeb0 0a67 	vmov.f32	s0, s15
 80015da:	f7ff fe48 	bl	800126e <_ZSt3cosf>
 80015de:	eef0 7a40 	vmov.f32	s15, s0
 80015e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015e6:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8001778 <HAL_TIM_PeriodElapsedCallback+0x230>
 80015ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015ee:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8001780 <HAL_TIM_PeriodElapsedCallback+0x238>
 80015f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80015f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015fa:	4b6f      	ldr	r3, [pc, #444]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80015fc:	edc3 7a00 	vstr	s15, [r3]
		debug_pos_y = 0.247*sin(chess_board_ang)+0.00059371;
 8001600:	4b6c      	ldr	r3, [pc, #432]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	eeb0 0a67 	vmov.f32	s0, s15
 800160a:	f7ff fe40 	bl	800128e <_ZSt3sinf>
 800160e:	eef0 7a40 	vmov.f32	s15, s0
 8001612:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001616:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8001778 <HAL_TIM_PeriodElapsedCallback+0x230>
 800161a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800161e:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8001788 <HAL_TIM_PeriodElapsedCallback+0x240>
 8001622:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001626:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800162a:	4b64      	ldr	r3, [pc, #400]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x274>)
 800162c:	edc3 7a00 	vstr	s15, [r3]
		findchessbot_joint_state = find_IK(
				debug_pos_x,
				debug_pos_y,
				0,
				0);
 8001630:	4b61      	ldr	r3, [pc, #388]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001632:	edd3 7a00 	vldr	s15, [r3]
 8001636:	4b61      	ldr	r3, [pc, #388]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001638:	ed93 7a00 	vldr	s14, [r3]
 800163c:	eddf 1a60 	vldr	s3, [pc, #384]	; 80017c0 <HAL_TIM_PeriodElapsedCallback+0x278>
 8001640:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 80017c0 <HAL_TIM_PeriodElapsedCallback+0x278>
 8001644:	eef0 0a47 	vmov.f32	s1, s14
 8001648:	eeb0 0a67 	vmov.f32	s0, s15
 800164c:	f7ff fe40 	bl	80012d0 <_Z7find_IKffff>
 8001650:	eeb0 6a40 	vmov.f32	s12, s0
 8001654:	eef0 6a60 	vmov.f32	s13, s1
 8001658:	eeb0 7a41 	vmov.f32	s14, s2
 800165c:	eef0 7a61 	vmov.f32	s15, s3
 8001660:	ed87 6a02 	vstr	s12, [r7, #8]
 8001664:	edc7 6a03 	vstr	s13, [r7, #12]
 8001668:	ed87 7a04 	vstr	s14, [r7, #16]
 800166c:	edc7 7a05 	vstr	s15, [r7, #20]
//		chess_board_ang = (chess_board_ang + 0.000261) ;
//		chess_board_ang = (chess_board_ang + 0.00522) ;
	//	printf("%f\t%f\n",findchessbot_joint_state.q1,findchessbot_joint_state.q3);
		setpointJ1 = findchessbot_joint_state.q1 * 2607;
 8001670:	edd7 7a02 	vldr	s15, [r7, #8]
 8001674:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80017c4 <HAL_TIM_PeriodElapsedCallback+0x27c>
 8001678:	ee67 7a87 	vmul.f32	s15, s15, s14
 800167c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001680:	ee17 2a90 	vmov	r2, s15
 8001684:	4b50      	ldr	r3, [pc, #320]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001686:	601a      	str	r2, [r3, #0]
		setpointJ3 = findchessbot_joint_state.q3 * 2607;
 8001688:	edd7 7a04 	vldr	s15, [r7, #16]
 800168c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80017c4 <HAL_TIM_PeriodElapsedCallback+0x27c>
 8001690:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001698:	ee17 2a90 	vmov	r2, s15
 800169c:	4b4b      	ldr	r3, [pc, #300]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 800169e:	601a      	str	r2, [r3, #0]
		b1 = findchessbot_joint_state.q1;
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	4a4b      	ldr	r2, [pc, #300]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80016a4:	6013      	str	r3, [r2, #0]
		b2 = findchessbot_joint_state.q2;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4a4a      	ldr	r2, [pc, #296]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80016aa:	6013      	str	r3, [r2, #0]
		b3 = findchessbot_joint_state.q3;
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4a4a      	ldr	r2, [pc, #296]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80016b0:	6013      	str	r3, [r2, #0]
		b4 = findchessbot_joint_state.q4;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	4a49      	ldr	r2, [pc, #292]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x294>)
 80016b6:	6013      	str	r3, [r2, #0]
//		setpointJ1 = Goal_velocity_q1;
//		setpointJ3 = Goal_velocity_q3;
		errorJ1 = posJ1 - setpointJ1;
 80016b8:	4b38      	ldr	r3, [pc, #224]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	b21b      	sxth	r3, r3
 80016be:	461a      	mov	r2, r3
 80016c0:	4b41      	ldr	r3, [pc, #260]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	ee07 3a90 	vmov	s15, r3
 80016ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ce:	4b44      	ldr	r3, [pc, #272]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80016d0:	edc3 7a00 	vstr	s15, [r3]
		errorJ3 = posJ3 - setpointJ3 ;
 80016d4:	4b34      	ldr	r3, [pc, #208]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	b21b      	sxth	r3, r3
 80016da:	461a      	mov	r2, r3
 80016dc:	4b3b      	ldr	r3, [pc, #236]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	ee07 3a90 	vmov	s15, r3
 80016e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ea:	4b3e      	ldr	r3, [pc, #248]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80016ec:	edc3 7a00 	vstr	s15, [r3]
//
		uJ1 = (KP_J1 * errorJ1);
 80016f0:	4b3b      	ldr	r3, [pc, #236]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80016f2:	edd3 7a00 	vldr	s15, [r3]
 80016f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016fa:	4b3b      	ldr	r3, [pc, #236]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80016fc:	edc3 7a00 	vstr	s15, [r3]
		uJ3 = (Kp_J3 * errorJ3);
 8001700:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001702:	edd3 7a00 	vldr	s15, [r3]
 8001706:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800170a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800170e:	4b37      	ldr	r3, [pc, #220]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001710:	edc3 7a00 	vstr	s15, [r3]
//	//	stepperJ3.StepperSetFrequency(-1200.0f);
//
		#ifdef __cplusplus
//		stepperJ1.StepperSetFrequency(300.0f);

		stepperJ1.StepperSetFrequency(uJ1);
 8001714:	4b34      	ldr	r3, [pc, #208]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001716:	edd3 7a00 	vldr	s15, [r3]
 800171a:	eeb0 0a67 	vmov.f32	s0, s15
 800171e:	4834      	ldr	r0, [pc, #208]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001720:	f7ff fac0 	bl	8000ca4 <_ZN7Stepper19StepperSetFrequencyEf>
		stepperJ3.StepperSetFrequency(uJ3);
 8001724:	4b31      	ldr	r3, [pc, #196]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001726:	edd3 7a00 	vldr	s15, [r3]
 800172a:	eeb0 0a67 	vmov.f32	s0, s15
 800172e:	4831      	ldr	r0, [pc, #196]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001730:	f7ff fab8 	bl	8000ca4 <_ZN7Stepper19StepperSetFrequencyEf>
//		else
//		{
//		stepperJ3.StepperSetFrequency(0);
//		}

		t = t + sample_time_200;
 8001734:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001736:	ed93 7a00 	vldr	s14, [r3]
 800173a:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001744:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001746:	edc3 7a00 	vstr	s15, [r3]
		if (t>=30.0)
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800174c:	edd3 7a00 	vldr	s15, [r3]
 8001750:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001754:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175c:	bfac      	ite	ge
 800175e:	2301      	movge	r3, #1
 8001760:	2300      	movlt	r3, #0
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_TIM_PeriodElapsedCallback+0x228>
		{
			t = 0.0;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
		}

		#endif
	}
}
 8001770:	bf00      	nop
 8001772:	3720      	adds	r7, #32
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	2d0e5604 	.word	0x2d0e5604
 800177c:	3fcf9db2 	.word	0x3fcf9db2
 8001780:	4d4024b3 	.word	0x4d4024b3
 8001784:	3fdb5b2d 	.word	0x3fdb5b2d
 8001788:	84437119 	.word	0x84437119
 800178c:	3f437466 	.word	0x3f437466
 8001790:	2400044c 	.word	0x2400044c
 8001794:	240009d0 	.word	0x240009d0
 8001798:	24000a48 	.word	0x24000a48
 800179c:	24000a5c 	.word	0x24000a5c
 80017a0:	240009e4 	.word	0x240009e4
 80017a4:	24000a49 	.word	0x24000a49
 80017a8:	24000a5e 	.word	0x24000a5e
 80017ac:	24000024 	.word	0x24000024
 80017b0:	24000a9c 	.word	0x24000a9c
 80017b4:	24000a78 	.word	0x24000a78
 80017b8:	24000a7c 	.word	0x24000a7c
 80017bc:	24000a80 	.word	0x24000a80
 80017c0:	00000000 	.word	0x00000000
 80017c4:	4522f000 	.word	0x4522f000
 80017c8:	24000a60 	.word	0x24000a60
 80017cc:	24000a64 	.word	0x24000a64
 80017d0:	24000a4c 	.word	0x24000a4c
 80017d4:	24000a50 	.word	0x24000a50
 80017d8:	24000a54 	.word	0x24000a54
 80017dc:	24000a58 	.word	0x24000a58
 80017e0:	24000a68 	.word	0x24000a68
 80017e4:	24000a6c 	.word	0x24000a6c
 80017e8:	24000a70 	.word	0x24000a70
 80017ec:	24000a74 	.word	0x24000a74
 80017f0:	240009f8 	.word	0x240009f8
 80017f4:	24000a20 	.word	0x24000a20
 80017f8:	24000020 	.word	0x24000020

080017fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001800:	f002 f8d4 	bl	80039ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001804:	f000 f874 	bl	80018f0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001808:	f000 ff74 	bl	80026f4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800180c:	f000 ff32 	bl	8002674 <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 8001810:	f000 fed0 	bl	80025b4 <_ZL19MX_USART3_UART_Initv>
  MX_TIM2_Init();
 8001814:	f000 fa44 	bl	8001ca0 <_ZL12MX_TIM2_Initv>
  MX_UART4_Init();
 8001818:	f000 fe02 	bl	8002420 <_ZL13MX_UART4_Initv>
  MX_TIM4_Init();
 800181c:	f000 fb62 	bl	8001ee4 <_ZL12MX_TIM4_Initv>
  MX_SPI3_Init();
 8001820:	f000 f918 	bl	8001a54 <_ZL12MX_SPI3_Initv>
  MX_TIM1_Init();
 8001824:	f000 f970 	bl	8001b08 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8001828:	f000 faca 	bl	8001dc0 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 800182c:	f000 fbec 	bl	8002008 <_ZL12MX_TIM5_Initv>
  MX_TIM15_Init();
 8001830:	f000 fd34 	bl	800229c <_ZL13MX_TIM15_Initv>
  MX_CRC_Init();
 8001834:	f000 f8e6 	bl	8001a04 <_ZL11MX_CRC_Initv>
  MX_UART7_Init();
 8001838:	f000 fe5a 	bl	80024f0 <_ZL13MX_UART7_Initv>
  MX_TIM6_Init();
 800183c:	f000 fc42 	bl	80020c4 <_ZL12MX_TIM6_Initv>
  MX_TIM7_Init();
 8001840:	f000 fc80 	bl	8002144 <_ZL12MX_TIM7_Initv>
  MX_TIM12_Init();
 8001844:	f000 fcbe 	bl	80021c4 <_ZL13MX_TIM12_Initv>
  MX_TIM13_Init();
 8001848:	f000 fd00 	bl	800224c <_ZL13MX_TIM13_Initv>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800184c:	2201      	movs	r2, #1
 800184e:	2101      	movs	r1, #1
 8001850:	481e      	ldr	r0, [pc, #120]	; (80018cc <main+0xd0>)
 8001852:	f004 ff23 	bl	800669c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001856:	2201      	movs	r2, #1
 8001858:	2102      	movs	r1, #2
 800185a:	481d      	ldr	r0, [pc, #116]	; (80018d0 <main+0xd4>)
 800185c:	f004 ff1e 	bl	800669c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001866:	4819      	ldr	r0, [pc, #100]	; (80018cc <main+0xd0>)
 8001868:	f004 ff18 	bl	800669c <HAL_GPIO_WritePin>

#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0);
 800186c:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80018d4 <main+0xd8>
 8001870:	4819      	ldr	r0, [pc, #100]	; (80018d8 <main+0xdc>)
 8001872:	f7ff fa17 	bl	8000ca4 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(16);
 8001876:	2110      	movs	r1, #16
 8001878:	4817      	ldr	r0, [pc, #92]	; (80018d8 <main+0xdc>)
 800187a:	f7ff fcbf 	bl	80011fc <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(1);
 800187e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001882:	4815      	ldr	r0, [pc, #84]	; (80018d8 <main+0xdc>)
 8001884:	f7ff fc96 	bl	80011b4 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 8001888:	4813      	ldr	r0, [pc, #76]	; (80018d8 <main+0xdc>)
 800188a:	f7ff f9fa 	bl	8000c82 <_ZN7Stepper13StepperEnableEv>
//	stepperJ2.StepperSetMicrostep(1);
//	stepperJ2.StepperSetRatio(1);
//	stepperJ1.StepperSetFrequency(15842.0f);
	stepperJ3.StepperSetFrequency(0);
 800188e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80018d4 <main+0xd8>
 8001892:	4812      	ldr	r0, [pc, #72]	; (80018dc <main+0xe0>)
 8001894:	f7ff fa06 	bl	8000ca4 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(16);
 8001898:	2110      	movs	r1, #16
 800189a:	4810      	ldr	r0, [pc, #64]	; (80018dc <main+0xe0>)
 800189c:	f7ff fcae 	bl	80011fc <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(1);
 80018a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80018a4:	480d      	ldr	r0, [pc, #52]	; (80018dc <main+0xe0>)
 80018a6:	f7ff fc85 	bl	80011b4 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 80018aa:	480c      	ldr	r0, [pc, #48]	; (80018dc <main+0xe0>)
 80018ac:	f7ff f9e9 	bl	8000c82 <_ZN7Stepper13StepperEnableEv>

//	stepperJ4.StepperSetMicrostep(1);
//	stepperJ4.StepperSetRatio(1);
#endif

	HAL_TIM_Base_Start_IT(&htim5);
 80018b0:	480b      	ldr	r0, [pc, #44]	; (80018e0 <main+0xe4>)
 80018b2:	f007 fbf3 	bl	800909c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 80018b6:	480b      	ldr	r0, [pc, #44]	; (80018e4 <main+0xe8>)
 80018b8:	f007 fbf0 	bl	800909c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80018bc:	480a      	ldr	r0, [pc, #40]	; (80018e8 <main+0xec>)
 80018be:	f007 fbed 	bl	800909c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim12);
 80018c2:	480a      	ldr	r0, [pc, #40]	; (80018ec <main+0xf0>)
 80018c4:	f007 fbea 	bl	800909c <HAL_TIM_Base_Start_IT>
//	__HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80018c8:	e7fe      	b.n	80018c8 <main+0xcc>
 80018ca:	bf00      	nop
 80018cc:	58020400 	.word	0x58020400
 80018d0:	58021000 	.word	0x58021000
 80018d4:	00000000 	.word	0x00000000
 80018d8:	240009f8 	.word	0x240009f8
 80018dc:	24000a20 	.word	0x24000a20
 80018e0:	24000400 	.word	0x24000400
 80018e4:	2400044c 	.word	0x2400044c
 80018e8:	24000498 	.word	0x24000498
 80018ec:	240004e4 	.word	0x240004e4

080018f0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b09c      	sub	sp, #112	; 0x70
 80018f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fa:	224c      	movs	r2, #76	; 0x4c
 80018fc:	2100      	movs	r1, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f00b f86a 	bl	800c9d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	2220      	movs	r2, #32
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f00b f864 	bl	800c9d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001910:	2002      	movs	r0, #2
 8001912:	f004 fef7 	bl	8006704 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001916:	2300      	movs	r3, #0
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	4b38      	ldr	r3, [pc, #224]	; (80019fc <_Z18SystemClock_Configv+0x10c>)
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	4a37      	ldr	r2, [pc, #220]	; (80019fc <_Z18SystemClock_Configv+0x10c>)
 8001920:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001924:	6193      	str	r3, [r2, #24]
 8001926:	4b35      	ldr	r3, [pc, #212]	; (80019fc <_Z18SystemClock_Configv+0x10c>)
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	4b33      	ldr	r3, [pc, #204]	; (8001a00 <_Z18SystemClock_Configv+0x110>)
 8001932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001934:	4a32      	ldr	r2, [pc, #200]	; (8001a00 <_Z18SystemClock_Configv+0x110>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800193c:	4b30      	ldr	r3, [pc, #192]	; (8001a00 <_Z18SystemClock_Configv+0x110>)
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	603b      	str	r3, [r7, #0]
 8001946:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001948:	4b2c      	ldr	r3, [pc, #176]	; (80019fc <_Z18SystemClock_Configv+0x10c>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001954:	bf14      	ite	ne
 8001956:	2301      	movne	r3, #1
 8001958:	2300      	moveq	r3, #0
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d000      	beq.n	8001962 <_Z18SystemClock_Configv+0x72>
 8001960:	e7f2      	b.n	8001948 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001962:	2302      	movs	r3, #2
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001966:	2301      	movs	r3, #1
 8001968:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800196a:	2340      	movs	r3, #64	; 0x40
 800196c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800196e:	2302      	movs	r3, #2
 8001970:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001972:	2300      	movs	r3, #0
 8001974:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001976:	2304      	movs	r3, #4
 8001978:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800197a:	233c      	movs	r3, #60	; 0x3c
 800197c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800197e:	2302      	movs	r3, #2
 8001980:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001982:	2306      	movs	r3, #6
 8001984:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001986:	2302      	movs	r3, #2
 8001988:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800198a:	230c      	movs	r3, #12
 800198c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800198e:	2300      	movs	r3, #0
 8001990:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199a:	4618      	mov	r0, r3
 800199c:	f004 feec 	bl	8006778 <HAL_RCC_OscConfig>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	bf14      	ite	ne
 80019a6:	2301      	movne	r3, #1
 80019a8:	2300      	moveq	r3, #0
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 80019b0:	f000 ffe2 	bl	8002978 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b4:	233f      	movs	r3, #63	; 0x3f
 80019b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b8:	2303      	movs	r3, #3
 80019ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80019c0:	2308      	movs	r3, #8
 80019c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80019c4:	2340      	movs	r3, #64	; 0x40
 80019c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80019c8:	2340      	movs	r3, #64	; 0x40
 80019ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80019cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80019d2:	2340      	movs	r3, #64	; 0x40
 80019d4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2104      	movs	r1, #4
 80019da:	4618      	mov	r0, r3
 80019dc:	f005 faf8 	bl	8006fd0 <HAL_RCC_ClockConfig>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	bf14      	ite	ne
 80019e6:	2301      	movne	r3, #1
 80019e8:	2300      	moveq	r3, #0
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 80019f0:	f000 ffc2 	bl	8002978 <Error_Handler>
  }
}
 80019f4:	bf00      	nop
 80019f6:	3770      	adds	r7, #112	; 0x70
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	58024800 	.word	0x58024800
 8001a00:	58000400 	.word	0x58000400

08001a04 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001a08:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <_ZL11MX_CRC_Initv+0x48>)
 8001a0a:	4a11      	ldr	r2, [pc, #68]	; (8001a50 <_ZL11MX_CRC_Initv+0x4c>)
 8001a0c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <_ZL11MX_CRC_Initv+0x48>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001a14:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <_ZL11MX_CRC_Initv+0x48>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <_ZL11MX_CRC_Initv+0x48>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <_ZL11MX_CRC_Initv+0x48>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <_ZL11MX_CRC_Initv+0x48>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001a2c:	4807      	ldr	r0, [pc, #28]	; (8001a4c <_ZL11MX_CRC_Initv+0x48>)
 8001a2e:	f002 f977 	bl	8003d20 <HAL_CRC_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bf14      	ite	ne
 8001a38:	2301      	movne	r3, #1
 8001a3a:	2300      	moveq	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 8001a42:	f000 ff99 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	24000224 	.word	0x24000224
 8001a50:	58024c00 	.word	0x58024c00

08001a54 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001a58:	4b29      	ldr	r3, [pc, #164]	; (8001b00 <_ZL12MX_SPI3_Initv+0xac>)
 8001a5a:	4a2a      	ldr	r2, [pc, #168]	; (8001b04 <_ZL12MX_SPI3_Initv+0xb0>)
 8001a5c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a5e:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <_ZL12MX_SPI3_Initv+0xac>)
 8001a60:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001a64:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a66:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <_ZL12MX_SPI3_Initv+0xac>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001a6c:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <_ZL12MX_SPI3_Initv+0xac>)
 8001a6e:	2203      	movs	r2, #3
 8001a70:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a72:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <_ZL12MX_SPI3_Initv+0xac>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a78:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <_ZL12MX_SPI3_Initv+0xac>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <_ZL12MX_SPI3_Initv+0xac>)
 8001a80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a84:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a86:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <_ZL12MX_SPI3_Initv+0xac>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a8c:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <_ZL12MX_SPI3_Initv+0xac>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a92:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <_ZL12MX_SPI3_Initv+0xac>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <_ZL12MX_SPI3_Initv+0xac>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001a9e:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <_ZL12MX_SPI3_Initv+0xac>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001aa4:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <_ZL12MX_SPI3_Initv+0xac>)
 8001aa6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aaa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <_ZL12MX_SPI3_Initv+0xac>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <_ZL12MX_SPI3_Initv+0xac>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <_ZL12MX_SPI3_Initv+0xac>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <_ZL12MX_SPI3_Initv+0xac>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <_ZL12MX_SPI3_Initv+0xac>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <_ZL12MX_SPI3_Initv+0xac>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <_ZL12MX_SPI3_Initv+0xac>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <_ZL12MX_SPI3_Initv+0xac>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <_ZL12MX_SPI3_Initv+0xac>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ae2:	4807      	ldr	r0, [pc, #28]	; (8001b00 <_ZL12MX_SPI3_Initv+0xac>)
 8001ae4:	f007 f962 	bl	8008dac <HAL_SPI_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	bf14      	ite	ne
 8001aee:	2301      	movne	r3, #1
 8001af0:	2300      	moveq	r3, #0
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <_ZL12MX_SPI3_Initv+0xa8>
  {
    Error_Handler();
 8001af8:	f000 ff3e 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	24000248 	.word	0x24000248
 8001b04:	40003c00 	.word	0x40003c00

08001b08 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b09a      	sub	sp, #104	; 0x68
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
 8001b38:	615a      	str	r2, [r3, #20]
 8001b3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	222c      	movs	r2, #44	; 0x2c
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f00a ff48 	bl	800c9d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b48:	4b53      	ldr	r3, [pc, #332]	; (8001c98 <_ZL12MX_TIM1_Initv+0x190>)
 8001b4a:	4a54      	ldr	r2, [pc, #336]	; (8001c9c <_ZL12MX_TIM1_Initv+0x194>)
 8001b4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8001b4e:	4b52      	ldr	r3, [pc, #328]	; (8001c98 <_ZL12MX_TIM1_Initv+0x190>)
 8001b50:	22c7      	movs	r2, #199	; 0xc7
 8001b52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b54:	4b50      	ldr	r3, [pc, #320]	; (8001c98 <_ZL12MX_TIM1_Initv+0x190>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8001b5a:	4b4f      	ldr	r3, [pc, #316]	; (8001c98 <_ZL12MX_TIM1_Initv+0x190>)
 8001b5c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001b60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b62:	4b4d      	ldr	r3, [pc, #308]	; (8001c98 <_ZL12MX_TIM1_Initv+0x190>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b68:	4b4b      	ldr	r3, [pc, #300]	; (8001c98 <_ZL12MX_TIM1_Initv+0x190>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b6e:	4b4a      	ldr	r3, [pc, #296]	; (8001c98 <_ZL12MX_TIM1_Initv+0x190>)
 8001b70:	2280      	movs	r2, #128	; 0x80
 8001b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b74:	4848      	ldr	r0, [pc, #288]	; (8001c98 <_ZL12MX_TIM1_Initv+0x190>)
 8001b76:	f007 fa3a 	bl	8008fee <HAL_TIM_Base_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bf14      	ite	ne
 8001b80:	2301      	movne	r3, #1
 8001b82:	2300      	moveq	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 8001b8a:	f000 fef5 	bl	8002978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b92:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b94:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b98:	4619      	mov	r1, r3
 8001b9a:	483f      	ldr	r0, [pc, #252]	; (8001c98 <_ZL12MX_TIM1_Initv+0x190>)
 8001b9c:	f007 fe9a 	bl	80098d4 <HAL_TIM_ConfigClockSource>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	bf14      	ite	ne
 8001ba6:	2301      	movne	r3, #1
 8001ba8:	2300      	moveq	r3, #0
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 8001bb0:	f000 fee2 	bl	8002978 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bb4:	4838      	ldr	r0, [pc, #224]	; (8001c98 <_ZL12MX_TIM1_Initv+0x190>)
 8001bb6:	f007 fae9 	bl	800918c <HAL_TIM_PWM_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf14      	ite	ne
 8001bc0:	2301      	movne	r3, #1
 8001bc2:	2300      	moveq	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 8001bca:	f000 fed5 	bl	8002978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bda:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bde:	4619      	mov	r1, r3
 8001be0:	482d      	ldr	r0, [pc, #180]	; (8001c98 <_ZL12MX_TIM1_Initv+0x190>)
 8001be2:	f008 fbcb 	bl	800a37c <HAL_TIMEx_MasterConfigSynchronization>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bf14      	ite	ne
 8001bec:	2301      	movne	r3, #1
 8001bee:	2300      	moveq	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <_ZL12MX_TIM1_Initv+0xf2>
  {
    Error_Handler();
 8001bf6:	f000 febf 	bl	8002978 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bfa:	2360      	movs	r3, #96	; 0x60
 8001bfc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8001bfe:	f240 1339 	movw	r3, #313	; 0x139
 8001c02:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c04:	2300      	movs	r3, #0
 8001c06:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c10:	2300      	movs	r3, #0
 8001c12:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c14:	2300      	movs	r3, #0
 8001c16:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	4619      	mov	r1, r3
 8001c20:	481d      	ldr	r0, [pc, #116]	; (8001c98 <_ZL12MX_TIM1_Initv+0x190>)
 8001c22:	f007 fd43 	bl	80096ac <HAL_TIM_PWM_ConfigChannel>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	bf14      	ite	ne
 8001c2c:	2301      	movne	r3, #1
 8001c2e:	2300      	moveq	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <_ZL12MX_TIM1_Initv+0x132>
  {
    Error_Handler();
 8001c36:	f000 fe9f 	bl	8002978 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	480a      	ldr	r0, [pc, #40]	; (8001c98 <_ZL12MX_TIM1_Initv+0x190>)
 8001c70:	f008 fc12 	bl	800a498 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	bf14      	ite	ne
 8001c7a:	2301      	movne	r3, #1
 8001c7c:	2300      	moveq	r3, #0
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <_ZL12MX_TIM1_Initv+0x180>
  {
    Error_Handler();
 8001c84:	f000 fe78 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c88:	4803      	ldr	r0, [pc, #12]	; (8001c98 <_ZL12MX_TIM1_Initv+0x190>)
 8001c8a:	f001 f933 	bl	8002ef4 <HAL_TIM_MspPostInit>

}
 8001c8e:	bf00      	nop
 8001c90:	3768      	adds	r7, #104	; 0x68
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	240002d0 	.word	0x240002d0
 8001c9c:	40010000 	.word	0x40010000

08001ca0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08e      	sub	sp, #56	; 0x38
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb4:	f107 031c 	add.w	r3, r7, #28
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cc0:	463b      	mov	r3, r7
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
 8001ccc:	611a      	str	r2, [r3, #16]
 8001cce:	615a      	str	r2, [r3, #20]
 8001cd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cd2:	4b3a      	ldr	r3, [pc, #232]	; (8001dbc <_ZL12MX_TIM2_Initv+0x11c>)
 8001cd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cd8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8001cda:	4b38      	ldr	r3, [pc, #224]	; (8001dbc <_ZL12MX_TIM2_Initv+0x11c>)
 8001cdc:	22c7      	movs	r2, #199	; 0xc7
 8001cde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce0:	4b36      	ldr	r3, [pc, #216]	; (8001dbc <_ZL12MX_TIM2_Initv+0x11c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 8001ce6:	4b35      	ldr	r3, [pc, #212]	; (8001dbc <_ZL12MX_TIM2_Initv+0x11c>)
 8001ce8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001cec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cee:	4b33      	ldr	r3, [pc, #204]	; (8001dbc <_ZL12MX_TIM2_Initv+0x11c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cf4:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <_ZL12MX_TIM2_Initv+0x11c>)
 8001cf6:	2280      	movs	r2, #128	; 0x80
 8001cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cfa:	4830      	ldr	r0, [pc, #192]	; (8001dbc <_ZL12MX_TIM2_Initv+0x11c>)
 8001cfc:	f007 f977 	bl	8008fee <HAL_TIM_Base_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	bf14      	ite	ne
 8001d06:	2301      	movne	r3, #1
 8001d08:	2300      	moveq	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 8001d10:	f000 fe32 	bl	8002978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4826      	ldr	r0, [pc, #152]	; (8001dbc <_ZL12MX_TIM2_Initv+0x11c>)
 8001d22:	f007 fdd7 	bl	80098d4 <HAL_TIM_ConfigClockSource>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	bf14      	ite	ne
 8001d2c:	2301      	movne	r3, #1
 8001d2e:	2300      	moveq	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 8001d36:	f000 fe1f 	bl	8002978 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d3a:	4820      	ldr	r0, [pc, #128]	; (8001dbc <_ZL12MX_TIM2_Initv+0x11c>)
 8001d3c:	f007 fa26 	bl	800918c <HAL_TIM_PWM_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	bf14      	ite	ne
 8001d46:	2301      	movne	r3, #1
 8001d48:	2300      	moveq	r3, #0
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 8001d50:	f000 fe12 	bl	8002978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	4619      	mov	r1, r3
 8001d62:	4816      	ldr	r0, [pc, #88]	; (8001dbc <_ZL12MX_TIM2_Initv+0x11c>)
 8001d64:	f008 fb0a 	bl	800a37c <HAL_TIMEx_MasterConfigSynchronization>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	bf14      	ite	ne
 8001d6e:	2301      	movne	r3, #1
 8001d70:	2300      	moveq	r3, #0
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8001d78:	f000 fdfe 	bl	8002978 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d7c:	2360      	movs	r3, #96	; 0x60
 8001d7e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8001d80:	f240 1339 	movw	r3, #313	; 0x139
 8001d84:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d8e:	463b      	mov	r3, r7
 8001d90:	2208      	movs	r2, #8
 8001d92:	4619      	mov	r1, r3
 8001d94:	4809      	ldr	r0, [pc, #36]	; (8001dbc <_ZL12MX_TIM2_Initv+0x11c>)
 8001d96:	f007 fc89 	bl	80096ac <HAL_TIM_PWM_ConfigChannel>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	bf14      	ite	ne
 8001da0:	2301      	movne	r3, #1
 8001da2:	2300      	moveq	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 8001daa:	f000 fde5 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001dae:	4803      	ldr	r0, [pc, #12]	; (8001dbc <_ZL12MX_TIM2_Initv+0x11c>)
 8001db0:	f001 f8a0 	bl	8002ef4 <HAL_TIM_MspPostInit>

}
 8001db4:	bf00      	nop
 8001db6:	3738      	adds	r7, #56	; 0x38
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	2400031c 	.word	0x2400031c

08001dc0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08e      	sub	sp, #56	; 0x38
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd4:	f107 031c 	add.w	r3, r7, #28
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001de0:	463b      	mov	r3, r7
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	611a      	str	r2, [r3, #16]
 8001dee:	615a      	str	r2, [r3, #20]
 8001df0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001df2:	4b3a      	ldr	r3, [pc, #232]	; (8001edc <_ZL12MX_TIM3_Initv+0x11c>)
 8001df4:	4a3a      	ldr	r2, [pc, #232]	; (8001ee0 <_ZL12MX_TIM3_Initv+0x120>)
 8001df6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8001df8:	4b38      	ldr	r3, [pc, #224]	; (8001edc <_ZL12MX_TIM3_Initv+0x11c>)
 8001dfa:	22c7      	movs	r2, #199	; 0xc7
 8001dfc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfe:	4b37      	ldr	r3, [pc, #220]	; (8001edc <_ZL12MX_TIM3_Initv+0x11c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8001e04:	4b35      	ldr	r3, [pc, #212]	; (8001edc <_ZL12MX_TIM3_Initv+0x11c>)
 8001e06:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001e0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0c:	4b33      	ldr	r3, [pc, #204]	; (8001edc <_ZL12MX_TIM3_Initv+0x11c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e12:	4b32      	ldr	r3, [pc, #200]	; (8001edc <_ZL12MX_TIM3_Initv+0x11c>)
 8001e14:	2280      	movs	r2, #128	; 0x80
 8001e16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e18:	4830      	ldr	r0, [pc, #192]	; (8001edc <_ZL12MX_TIM3_Initv+0x11c>)
 8001e1a:	f007 f8e8 	bl	8008fee <HAL_TIM_Base_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bf14      	ite	ne
 8001e24:	2301      	movne	r3, #1
 8001e26:	2300      	moveq	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 8001e2e:	f000 fda3 	bl	8002978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4827      	ldr	r0, [pc, #156]	; (8001edc <_ZL12MX_TIM3_Initv+0x11c>)
 8001e40:	f007 fd48 	bl	80098d4 <HAL_TIM_ConfigClockSource>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf14      	ite	ne
 8001e4a:	2301      	movne	r3, #1
 8001e4c:	2300      	moveq	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 8001e54:	f000 fd90 	bl	8002978 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e58:	4820      	ldr	r0, [pc, #128]	; (8001edc <_ZL12MX_TIM3_Initv+0x11c>)
 8001e5a:	f007 f997 	bl	800918c <HAL_TIM_PWM_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bf14      	ite	ne
 8001e64:	2301      	movne	r3, #1
 8001e66:	2300      	moveq	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 8001e6e:	f000 fd83 	bl	8002978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4816      	ldr	r0, [pc, #88]	; (8001edc <_ZL12MX_TIM3_Initv+0x11c>)
 8001e82:	f008 fa7b 	bl	800a37c <HAL_TIMEx_MasterConfigSynchronization>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf14      	ite	ne
 8001e8c:	2301      	movne	r3, #1
 8001e8e:	2300      	moveq	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8001e96:	f000 fd6f 	bl	8002978 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e9a:	2360      	movs	r3, #96	; 0x60
 8001e9c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8001e9e:	f240 1339 	movw	r3, #313	; 0x139
 8001ea2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eac:	463b      	mov	r3, r7
 8001eae:	2200      	movs	r2, #0
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	480a      	ldr	r0, [pc, #40]	; (8001edc <_ZL12MX_TIM3_Initv+0x11c>)
 8001eb4:	f007 fbfa 	bl	80096ac <HAL_TIM_PWM_ConfigChannel>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	bf14      	ite	ne
 8001ebe:	2301      	movne	r3, #1
 8001ec0:	2300      	moveq	r3, #0
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <_ZL12MX_TIM3_Initv+0x10c>
  {
    Error_Handler();
 8001ec8:	f000 fd56 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ecc:	4803      	ldr	r0, [pc, #12]	; (8001edc <_ZL12MX_TIM3_Initv+0x11c>)
 8001ece:	f001 f811 	bl	8002ef4 <HAL_TIM_MspPostInit>

}
 8001ed2:	bf00      	nop
 8001ed4:	3738      	adds	r7, #56	; 0x38
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	24000368 	.word	0x24000368
 8001ee0:	40000400 	.word	0x40000400

08001ee4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08e      	sub	sp, #56	; 0x38
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
 8001ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef8:	f107 031c 	add.w	r3, r7, #28
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f04:	463b      	mov	r3, r7
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	60da      	str	r2, [r3, #12]
 8001f10:	611a      	str	r2, [r3, #16]
 8001f12:	615a      	str	r2, [r3, #20]
 8001f14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f16:	4b3a      	ldr	r3, [pc, #232]	; (8002000 <_ZL12MX_TIM4_Initv+0x11c>)
 8001f18:	4a3a      	ldr	r2, [pc, #232]	; (8002004 <_ZL12MX_TIM4_Initv+0x120>)
 8001f1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 8001f1c:	4b38      	ldr	r3, [pc, #224]	; (8002000 <_ZL12MX_TIM4_Initv+0x11c>)
 8001f1e:	22c7      	movs	r2, #199	; 0xc7
 8001f20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f22:	4b37      	ldr	r3, [pc, #220]	; (8002000 <_ZL12MX_TIM4_Initv+0x11c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 8001f28:	4b35      	ldr	r3, [pc, #212]	; (8002000 <_ZL12MX_TIM4_Initv+0x11c>)
 8001f2a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001f2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f30:	4b33      	ldr	r3, [pc, #204]	; (8002000 <_ZL12MX_TIM4_Initv+0x11c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f36:	4b32      	ldr	r3, [pc, #200]	; (8002000 <_ZL12MX_TIM4_Initv+0x11c>)
 8001f38:	2280      	movs	r2, #128	; 0x80
 8001f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f3c:	4830      	ldr	r0, [pc, #192]	; (8002000 <_ZL12MX_TIM4_Initv+0x11c>)
 8001f3e:	f007 f856 	bl	8008fee <HAL_TIM_Base_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	bf14      	ite	ne
 8001f48:	2301      	movne	r3, #1
 8001f4a:	2300      	moveq	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 8001f52:	f000 fd11 	bl	8002978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f60:	4619      	mov	r1, r3
 8001f62:	4827      	ldr	r0, [pc, #156]	; (8002000 <_ZL12MX_TIM4_Initv+0x11c>)
 8001f64:	f007 fcb6 	bl	80098d4 <HAL_TIM_ConfigClockSource>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	bf14      	ite	ne
 8001f6e:	2301      	movne	r3, #1
 8001f70:	2300      	moveq	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 8001f78:	f000 fcfe 	bl	8002978 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f7c:	4820      	ldr	r0, [pc, #128]	; (8002000 <_ZL12MX_TIM4_Initv+0x11c>)
 8001f7e:	f007 f905 	bl	800918c <HAL_TIM_PWM_Init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	bf14      	ite	ne
 8001f88:	2301      	movne	r3, #1
 8001f8a:	2300      	moveq	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 8001f92:	f000 fcf1 	bl	8002978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f9e:	f107 031c 	add.w	r3, r7, #28
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4816      	ldr	r0, [pc, #88]	; (8002000 <_ZL12MX_TIM4_Initv+0x11c>)
 8001fa6:	f008 f9e9 	bl	800a37c <HAL_TIMEx_MasterConfigSynchronization>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	bf14      	ite	ne
 8001fb0:	2301      	movne	r3, #1
 8001fb2:	2300      	moveq	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 8001fba:	f000 fcdd 	bl	8002978 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fbe:	2360      	movs	r3, #96	; 0x60
 8001fc0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8001fc2:	f240 1339 	movw	r3, #313	; 0x139
 8001fc6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fd0:	463b      	mov	r3, r7
 8001fd2:	2208      	movs	r2, #8
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	480a      	ldr	r0, [pc, #40]	; (8002000 <_ZL12MX_TIM4_Initv+0x11c>)
 8001fd8:	f007 fb68 	bl	80096ac <HAL_TIM_PWM_ConfigChannel>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	bf14      	ite	ne
 8001fe2:	2301      	movne	r3, #1
 8001fe4:	2300      	moveq	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <_ZL12MX_TIM4_Initv+0x10c>
  {
    Error_Handler();
 8001fec:	f000 fcc4 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ff0:	4803      	ldr	r0, [pc, #12]	; (8002000 <_ZL12MX_TIM4_Initv+0x11c>)
 8001ff2:	f000 ff7f 	bl	8002ef4 <HAL_TIM_MspPostInit>

}
 8001ff6:	bf00      	nop
 8001ff8:	3738      	adds	r7, #56	; 0x38
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	240003b4 	.word	0x240003b4
 8002004:	40000800 	.word	0x40000800

08002008 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800200e:	f107 0310 	add.w	r3, r7, #16
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002026:	4b25      	ldr	r3, [pc, #148]	; (80020bc <_ZL12MX_TIM5_Initv+0xb4>)
 8002028:	4a25      	ldr	r2, [pc, #148]	; (80020c0 <_ZL12MX_TIM5_Initv+0xb8>)
 800202a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 800202c:	4b23      	ldr	r3, [pc, #140]	; (80020bc <_ZL12MX_TIM5_Initv+0xb4>)
 800202e:	22c7      	movs	r2, #199	; 0xc7
 8002030:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002032:	4b22      	ldr	r3, [pc, #136]	; (80020bc <_ZL12MX_TIM5_Initv+0xb4>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8002038:	4b20      	ldr	r3, [pc, #128]	; (80020bc <_ZL12MX_TIM5_Initv+0xb4>)
 800203a:	f642 62df 	movw	r2, #11999	; 0x2edf
 800203e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002040:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <_ZL12MX_TIM5_Initv+0xb4>)
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <_ZL12MX_TIM5_Initv+0xb4>)
 8002048:	2280      	movs	r2, #128	; 0x80
 800204a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800204c:	481b      	ldr	r0, [pc, #108]	; (80020bc <_ZL12MX_TIM5_Initv+0xb4>)
 800204e:	f006 ffce 	bl	8008fee <HAL_TIM_Base_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	bf14      	ite	ne
 8002058:	2301      	movne	r3, #1
 800205a:	2300      	moveq	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <_ZL12MX_TIM5_Initv+0x5e>
  {
    Error_Handler();
 8002062:	f000 fc89 	bl	8002978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800206a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800206c:	f107 0310 	add.w	r3, r7, #16
 8002070:	4619      	mov	r1, r3
 8002072:	4812      	ldr	r0, [pc, #72]	; (80020bc <_ZL12MX_TIM5_Initv+0xb4>)
 8002074:	f007 fc2e 	bl	80098d4 <HAL_TIM_ConfigClockSource>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	bf14      	ite	ne
 800207e:	2301      	movne	r3, #1
 8002080:	2300      	moveq	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <_ZL12MX_TIM5_Initv+0x84>
  {
    Error_Handler();
 8002088:	f000 fc76 	bl	8002978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800208c:	2300      	movs	r3, #0
 800208e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	4619      	mov	r1, r3
 8002098:	4808      	ldr	r0, [pc, #32]	; (80020bc <_ZL12MX_TIM5_Initv+0xb4>)
 800209a:	f008 f96f 	bl	800a37c <HAL_TIMEx_MasterConfigSynchronization>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bf14      	ite	ne
 80020a4:	2301      	movne	r3, #1
 80020a6:	2300      	moveq	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <_ZL12MX_TIM5_Initv+0xaa>
  {
    Error_Handler();
 80020ae:	f000 fc63 	bl	8002978 <Error_Handler>
  /* USER CODE BEGIN TIM5_Init 2 */
//  HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
//    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE END TIM5_Init 2 */

}
 80020b2:	bf00      	nop
 80020b4:	3720      	adds	r7, #32
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	24000400 	.word	0x24000400
 80020c0:	40000c00 	.word	0x40000c00

080020c4 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80020d4:	4b19      	ldr	r3, [pc, #100]	; (800213c <_ZL12MX_TIM6_Initv+0x78>)
 80020d6:	4a1a      	ldr	r2, [pc, #104]	; (8002140 <_ZL12MX_TIM6_Initv+0x7c>)
 80020d8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 80020da:	4b18      	ldr	r3, [pc, #96]	; (800213c <_ZL12MX_TIM6_Initv+0x78>)
 80020dc:	22c7      	movs	r2, #199	; 0xc7
 80020de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e0:	4b16      	ldr	r3, [pc, #88]	; (800213c <_ZL12MX_TIM6_Initv+0x78>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <_ZL12MX_TIM6_Initv+0x78>)
 80020e8:	f241 726f 	movw	r2, #5999	; 0x176f
 80020ec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020ee:	4b13      	ldr	r3, [pc, #76]	; (800213c <_ZL12MX_TIM6_Initv+0x78>)
 80020f0:	2280      	movs	r2, #128	; 0x80
 80020f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80020f4:	4811      	ldr	r0, [pc, #68]	; (800213c <_ZL12MX_TIM6_Initv+0x78>)
 80020f6:	f006 ff7a 	bl	8008fee <HAL_TIM_Base_Init>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf14      	ite	ne
 8002100:	2301      	movne	r3, #1
 8002102:	2300      	moveq	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 800210a:	f000 fc35 	bl	8002978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	4619      	mov	r1, r3
 800211a:	4808      	ldr	r0, [pc, #32]	; (800213c <_ZL12MX_TIM6_Initv+0x78>)
 800211c:	f008 f92e 	bl	800a37c <HAL_TIMEx_MasterConfigSynchronization>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	bf14      	ite	ne
 8002126:	2301      	movne	r3, #1
 8002128:	2300      	moveq	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8002130:	f000 fc22 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002134:	bf00      	nop
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	2400044c 	.word	0x2400044c
 8002140:	40001000 	.word	0x40001000

08002144 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002154:	4b19      	ldr	r3, [pc, #100]	; (80021bc <_ZL12MX_TIM7_Initv+0x78>)
 8002156:	4a1a      	ldr	r2, [pc, #104]	; (80021c0 <_ZL12MX_TIM7_Initv+0x7c>)
 8002158:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 800215a:	4b18      	ldr	r3, [pc, #96]	; (80021bc <_ZL12MX_TIM7_Initv+0x78>)
 800215c:	22c7      	movs	r2, #199	; 0xc7
 800215e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002160:	4b16      	ldr	r3, [pc, #88]	; (80021bc <_ZL12MX_TIM7_Initv+0x78>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <_ZL12MX_TIM7_Initv+0x78>)
 8002168:	f240 42af 	movw	r2, #1199	; 0x4af
 800216c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800216e:	4b13      	ldr	r3, [pc, #76]	; (80021bc <_ZL12MX_TIM7_Initv+0x78>)
 8002170:	2280      	movs	r2, #128	; 0x80
 8002172:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002174:	4811      	ldr	r0, [pc, #68]	; (80021bc <_ZL12MX_TIM7_Initv+0x78>)
 8002176:	f006 ff3a 	bl	8008fee <HAL_TIM_Base_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	bf14      	ite	ne
 8002180:	2301      	movne	r3, #1
 8002182:	2300      	moveq	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 800218a:	f000 fbf5 	bl	8002978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	4619      	mov	r1, r3
 800219a:	4808      	ldr	r0, [pc, #32]	; (80021bc <_ZL12MX_TIM7_Initv+0x78>)
 800219c:	f008 f8ee 	bl	800a37c <HAL_TIMEx_MasterConfigSynchronization>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	bf14      	ite	ne
 80021a6:	2301      	movne	r3, #1
 80021a8:	2300      	moveq	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 80021b0:	f000 fbe2 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80021b4:	bf00      	nop
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	24000498 	.word	0x24000498
 80021c0:	40001400 	.word	0x40001400

080021c4 <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ca:	463b      	mov	r3, r7
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80021d6:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <_ZL13MX_TIM12_Initv+0x80>)
 80021d8:	4a1b      	ldr	r2, [pc, #108]	; (8002248 <_ZL13MX_TIM12_Initv+0x84>)
 80021da:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <_ZL13MX_TIM12_Initv+0x80>)
 80021de:	22c7      	movs	r2, #199	; 0xc7
 80021e0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e2:	4b18      	ldr	r3, [pc, #96]	; (8002244 <_ZL13MX_TIM12_Initv+0x80>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 80021e8:	4b16      	ldr	r3, [pc, #88]	; (8002244 <_ZL13MX_TIM12_Initv+0x80>)
 80021ea:	f240 2257 	movw	r2, #599	; 0x257
 80021ee:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <_ZL13MX_TIM12_Initv+0x80>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <_ZL13MX_TIM12_Initv+0x80>)
 80021f8:	2280      	movs	r2, #128	; 0x80
 80021fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80021fc:	4811      	ldr	r0, [pc, #68]	; (8002244 <_ZL13MX_TIM12_Initv+0x80>)
 80021fe:	f006 fef6 	bl	8008fee <HAL_TIM_Base_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf14      	ite	ne
 8002208:	2301      	movne	r3, #1
 800220a:	2300      	moveq	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <_ZL13MX_TIM12_Initv+0x52>
  {
    Error_Handler();
 8002212:	f000 fbb1 	bl	8002978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800221a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800221c:	463b      	mov	r3, r7
 800221e:	4619      	mov	r1, r3
 8002220:	4808      	ldr	r0, [pc, #32]	; (8002244 <_ZL13MX_TIM12_Initv+0x80>)
 8002222:	f007 fb57 	bl	80098d4 <HAL_TIM_ConfigClockSource>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	bf14      	ite	ne
 800222c:	2301      	movne	r3, #1
 800222e:	2300      	moveq	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <_ZL13MX_TIM12_Initv+0x76>
  {
    Error_Handler();
 8002236:	f000 fb9f 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	240004e4 	.word	0x240004e4
 8002248:	40001800 	.word	0x40001800

0800224c <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002250:	4b10      	ldr	r3, [pc, #64]	; (8002294 <_ZL13MX_TIM13_Initv+0x48>)
 8002252:	4a11      	ldr	r2, [pc, #68]	; (8002298 <_ZL13MX_TIM13_Initv+0x4c>)
 8002254:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 8002256:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <_ZL13MX_TIM13_Initv+0x48>)
 8002258:	22c7      	movs	r2, #199	; 0xc7
 800225a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225c:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <_ZL13MX_TIM13_Initv+0x48>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8002262:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <_ZL13MX_TIM13_Initv+0x48>)
 8002264:	f240 2257 	movw	r2, #599	; 0x257
 8002268:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800226a:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <_ZL13MX_TIM13_Initv+0x48>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <_ZL13MX_TIM13_Initv+0x48>)
 8002272:	2280      	movs	r2, #128	; 0x80
 8002274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002276:	4807      	ldr	r0, [pc, #28]	; (8002294 <_ZL13MX_TIM13_Initv+0x48>)
 8002278:	f006 feb9 	bl	8008fee <HAL_TIM_Base_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	bf14      	ite	ne
 8002282:	2301      	movne	r3, #1
 8002284:	2300      	moveq	r3, #0
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <_ZL13MX_TIM13_Initv+0x44>
  {
    Error_Handler();
 800228c:	f000 fb74 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	24000530 	.word	0x24000530
 8002298:	40001c00 	.word	0x40001c00

0800229c <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b09a      	sub	sp, #104	; 0x68
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
 80022cc:	615a      	str	r2, [r3, #20]
 80022ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	222c      	movs	r2, #44	; 0x2c
 80022d4:	2100      	movs	r1, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f00a fb7e 	bl	800c9d8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80022dc:	4b4e      	ldr	r3, [pc, #312]	; (8002418 <_ZL13MX_TIM15_Initv+0x17c>)
 80022de:	4a4f      	ldr	r2, [pc, #316]	; (800241c <_ZL13MX_TIM15_Initv+0x180>)
 80022e0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 80022e2:	4b4d      	ldr	r3, [pc, #308]	; (8002418 <_ZL13MX_TIM15_Initv+0x17c>)
 80022e4:	22ef      	movs	r2, #239	; 0xef
 80022e6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e8:	4b4b      	ldr	r3, [pc, #300]	; (8002418 <_ZL13MX_TIM15_Initv+0x17c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 80022ee:	4b4a      	ldr	r3, [pc, #296]	; (8002418 <_ZL13MX_TIM15_Initv+0x17c>)
 80022f0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80022f4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f6:	4b48      	ldr	r3, [pc, #288]	; (8002418 <_ZL13MX_TIM15_Initv+0x17c>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80022fc:	4b46      	ldr	r3, [pc, #280]	; (8002418 <_ZL13MX_TIM15_Initv+0x17c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002302:	4b45      	ldr	r3, [pc, #276]	; (8002418 <_ZL13MX_TIM15_Initv+0x17c>)
 8002304:	2280      	movs	r2, #128	; 0x80
 8002306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002308:	4843      	ldr	r0, [pc, #268]	; (8002418 <_ZL13MX_TIM15_Initv+0x17c>)
 800230a:	f006 fe70 	bl	8008fee <HAL_TIM_Base_Init>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	bf14      	ite	ne
 8002314:	2301      	movne	r3, #1
 8002316:	2300      	moveq	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <_ZL13MX_TIM15_Initv+0x86>
  {
    Error_Handler();
 800231e:	f000 fb2b 	bl	8002978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002326:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002328:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800232c:	4619      	mov	r1, r3
 800232e:	483a      	ldr	r0, [pc, #232]	; (8002418 <_ZL13MX_TIM15_Initv+0x17c>)
 8002330:	f007 fad0 	bl	80098d4 <HAL_TIM_ConfigClockSource>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	bf14      	ite	ne
 800233a:	2301      	movne	r3, #1
 800233c:	2300      	moveq	r3, #0
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <_ZL13MX_TIM15_Initv+0xac>
  {
    Error_Handler();
 8002344:	f000 fb18 	bl	8002978 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002348:	4833      	ldr	r0, [pc, #204]	; (8002418 <_ZL13MX_TIM15_Initv+0x17c>)
 800234a:	f006 ff1f 	bl	800918c <HAL_TIM_PWM_Init>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf14      	ite	ne
 8002354:	2301      	movne	r3, #1
 8002356:	2300      	moveq	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <_ZL13MX_TIM15_Initv+0xc6>
  {
    Error_Handler();
 800235e:	f000 fb0b 	bl	8002978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002366:	2300      	movs	r3, #0
 8002368:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800236a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800236e:	4619      	mov	r1, r3
 8002370:	4829      	ldr	r0, [pc, #164]	; (8002418 <_ZL13MX_TIM15_Initv+0x17c>)
 8002372:	f008 f803 	bl	800a37c <HAL_TIMEx_MasterConfigSynchronization>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	bf14      	ite	ne
 800237c:	2301      	movne	r3, #1
 800237e:	2300      	moveq	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <_ZL13MX_TIM15_Initv+0xee>
  {
    Error_Handler();
 8002386:	f000 faf7 	bl	8002978 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800238a:	2360      	movs	r3, #96	; 0x60
 800238c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800238e:	f240 1339 	movw	r3, #313	; 0x139
 8002392:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002394:	2300      	movs	r3, #0
 8002396:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002398:	2300      	movs	r3, #0
 800239a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800239c:	2300      	movs	r3, #0
 800239e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023a0:	2300      	movs	r3, #0
 80023a2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023a4:	2300      	movs	r3, #0
 80023a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023ac:	2204      	movs	r2, #4
 80023ae:	4619      	mov	r1, r3
 80023b0:	4819      	ldr	r0, [pc, #100]	; (8002418 <_ZL13MX_TIM15_Initv+0x17c>)
 80023b2:	f007 f97b 	bl	80096ac <HAL_TIM_PWM_ConfigChannel>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf14      	ite	ne
 80023bc:	2301      	movne	r3, #1
 80023be:	2300      	moveq	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <_ZL13MX_TIM15_Initv+0x12e>
  {
    Error_Handler();
 80023c6:	f000 fad7 	bl	8002978 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023e8:	2300      	movs	r3, #0
 80023ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	4619      	mov	r1, r3
 80023f0:	4809      	ldr	r0, [pc, #36]	; (8002418 <_ZL13MX_TIM15_Initv+0x17c>)
 80023f2:	f008 f851 	bl	800a498 <HAL_TIMEx_ConfigBreakDeadTime>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf14      	ite	ne
 80023fc:	2301      	movne	r3, #1
 80023fe:	2300      	moveq	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <_ZL13MX_TIM15_Initv+0x16e>
  {
    Error_Handler();
 8002406:	f000 fab7 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800240a:	4803      	ldr	r0, [pc, #12]	; (8002418 <_ZL13MX_TIM15_Initv+0x17c>)
 800240c:	f000 fd72 	bl	8002ef4 <HAL_TIM_MspPostInit>

}
 8002410:	bf00      	nop
 8002412:	3768      	adds	r7, #104	; 0x68
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	2400057c 	.word	0x2400057c
 800241c:	40014000 	.word	0x40014000

08002420 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002424:	4b2f      	ldr	r3, [pc, #188]	; (80024e4 <_ZL13MX_UART4_Initv+0xc4>)
 8002426:	4a30      	ldr	r2, [pc, #192]	; (80024e8 <_ZL13MX_UART4_Initv+0xc8>)
 8002428:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 800242a:	4b2e      	ldr	r3, [pc, #184]	; (80024e4 <_ZL13MX_UART4_Initv+0xc4>)
 800242c:	4a2f      	ldr	r2, [pc, #188]	; (80024ec <_ZL13MX_UART4_Initv+0xcc>)
 800242e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002430:	4b2c      	ldr	r3, [pc, #176]	; (80024e4 <_ZL13MX_UART4_Initv+0xc4>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002436:	4b2b      	ldr	r3, [pc, #172]	; (80024e4 <_ZL13MX_UART4_Initv+0xc4>)
 8002438:	2200      	movs	r2, #0
 800243a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800243c:	4b29      	ldr	r3, [pc, #164]	; (80024e4 <_ZL13MX_UART4_Initv+0xc4>)
 800243e:	2200      	movs	r2, #0
 8002440:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002442:	4b28      	ldr	r3, [pc, #160]	; (80024e4 <_ZL13MX_UART4_Initv+0xc4>)
 8002444:	220c      	movs	r2, #12
 8002446:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002448:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <_ZL13MX_UART4_Initv+0xc4>)
 800244a:	2200      	movs	r2, #0
 800244c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800244e:	4b25      	ldr	r3, [pc, #148]	; (80024e4 <_ZL13MX_UART4_Initv+0xc4>)
 8002450:	2200      	movs	r2, #0
 8002452:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <_ZL13MX_UART4_Initv+0xc4>)
 8002456:	2200      	movs	r2, #0
 8002458:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800245a:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <_ZL13MX_UART4_Initv+0xc4>)
 800245c:	2200      	movs	r2, #0
 800245e:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <_ZL13MX_UART4_Initv+0xc4>)
 8002462:	2208      	movs	r2, #8
 8002464:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8002466:	4b1f      	ldr	r3, [pc, #124]	; (80024e4 <_ZL13MX_UART4_Initv+0xc4>)
 8002468:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800246c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800246e:	481d      	ldr	r0, [pc, #116]	; (80024e4 <_ZL13MX_UART4_Initv+0xc4>)
 8002470:	f008 f8ae 	bl	800a5d0 <HAL_UART_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	bf14      	ite	ne
 800247a:	2301      	movne	r3, #1
 800247c:	2300      	moveq	r3, #0
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <_ZL13MX_UART4_Initv+0x68>
  {
    Error_Handler();
 8002484:	f000 fa78 	bl	8002978 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8002488:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800248c:	4815      	ldr	r0, [pc, #84]	; (80024e4 <_ZL13MX_UART4_Initv+0xc4>)
 800248e:	f009 fe66 	bl	800c15e <HAL_UARTEx_SetTxFifoThreshold>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	bf14      	ite	ne
 8002498:	2301      	movne	r3, #1
 800249a:	2300      	moveq	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <_ZL13MX_UART4_Initv+0x86>
  {
    Error_Handler();
 80024a2:	f000 fa69 	bl	8002978 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80024a6:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 80024aa:	480e      	ldr	r0, [pc, #56]	; (80024e4 <_ZL13MX_UART4_Initv+0xc4>)
 80024ac:	f009 fe95 	bl	800c1da <HAL_UARTEx_SetRxFifoThreshold>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	bf14      	ite	ne
 80024b6:	2301      	movne	r3, #1
 80024b8:	2300      	moveq	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <_ZL13MX_UART4_Initv+0xa4>
  {
    Error_Handler();
 80024c0:	f000 fa5a 	bl	8002978 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 80024c4:	4807      	ldr	r0, [pc, #28]	; (80024e4 <_ZL13MX_UART4_Initv+0xc4>)
 80024c6:	f009 fdd6 	bl	800c076 <HAL_UARTEx_EnableFifoMode>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf14      	ite	ne
 80024d0:	2301      	movne	r3, #1
 80024d2:	2300      	moveq	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <_ZL13MX_UART4_Initv+0xbe>
  {
    Error_Handler();
 80024da:	f000 fa4d 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	240005c8 	.word	0x240005c8
 80024e8:	40004c00 	.word	0x40004c00
 80024ec:	001e8480 	.word	0x001e8480

080024f0 <_ZL13MX_UART7_Initv>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80024f4:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <_ZL13MX_UART7_Initv+0xbc>)
 80024f6:	4a2e      	ldr	r2, [pc, #184]	; (80025b0 <_ZL13MX_UART7_Initv+0xc0>)
 80024f8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80024fa:	4b2c      	ldr	r3, [pc, #176]	; (80025ac <_ZL13MX_UART7_Initv+0xbc>)
 80024fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002500:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002502:	4b2a      	ldr	r3, [pc, #168]	; (80025ac <_ZL13MX_UART7_Initv+0xbc>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002508:	4b28      	ldr	r3, [pc, #160]	; (80025ac <_ZL13MX_UART7_Initv+0xbc>)
 800250a:	2200      	movs	r2, #0
 800250c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800250e:	4b27      	ldr	r3, [pc, #156]	; (80025ac <_ZL13MX_UART7_Initv+0xbc>)
 8002510:	2200      	movs	r2, #0
 8002512:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002514:	4b25      	ldr	r3, [pc, #148]	; (80025ac <_ZL13MX_UART7_Initv+0xbc>)
 8002516:	220c      	movs	r2, #12
 8002518:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800251a:	4b24      	ldr	r3, [pc, #144]	; (80025ac <_ZL13MX_UART7_Initv+0xbc>)
 800251c:	2200      	movs	r2, #0
 800251e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002520:	4b22      	ldr	r3, [pc, #136]	; (80025ac <_ZL13MX_UART7_Initv+0xbc>)
 8002522:	2200      	movs	r2, #0
 8002524:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002526:	4b21      	ldr	r3, [pc, #132]	; (80025ac <_ZL13MX_UART7_Initv+0xbc>)
 8002528:	2200      	movs	r2, #0
 800252a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800252c:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <_ZL13MX_UART7_Initv+0xbc>)
 800252e:	2200      	movs	r2, #0
 8002530:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002532:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <_ZL13MX_UART7_Initv+0xbc>)
 8002534:	2200      	movs	r2, #0
 8002536:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002538:	481c      	ldr	r0, [pc, #112]	; (80025ac <_ZL13MX_UART7_Initv+0xbc>)
 800253a:	f008 f849 	bl	800a5d0 <HAL_UART_Init>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	bf14      	ite	ne
 8002544:	2301      	movne	r3, #1
 8002546:	2300      	moveq	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <_ZL13MX_UART7_Initv+0x62>
  {
    Error_Handler();
 800254e:	f000 fa13 	bl	8002978 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8002552:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8002556:	4815      	ldr	r0, [pc, #84]	; (80025ac <_ZL13MX_UART7_Initv+0xbc>)
 8002558:	f009 fe01 	bl	800c15e <HAL_UARTEx_SetTxFifoThreshold>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	bf14      	ite	ne
 8002562:	2301      	movne	r3, #1
 8002564:	2300      	moveq	r3, #0
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <_ZL13MX_UART7_Initv+0x80>
  {
    Error_Handler();
 800256c:	f000 fa04 	bl	8002978 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8002570:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8002574:	480d      	ldr	r0, [pc, #52]	; (80025ac <_ZL13MX_UART7_Initv+0xbc>)
 8002576:	f009 fe30 	bl	800c1da <HAL_UARTEx_SetRxFifoThreshold>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	bf14      	ite	ne
 8002580:	2301      	movne	r3, #1
 8002582:	2300      	moveq	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <_ZL13MX_UART7_Initv+0x9e>
  {
    Error_Handler();
 800258a:	f000 f9f5 	bl	8002978 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 800258e:	4807      	ldr	r0, [pc, #28]	; (80025ac <_ZL13MX_UART7_Initv+0xbc>)
 8002590:	f009 fd71 	bl	800c076 <HAL_UARTEx_EnableFifoMode>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	bf14      	ite	ne
 800259a:	2301      	movne	r3, #1
 800259c:	2300      	moveq	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <_ZL13MX_UART7_Initv+0xb8>
  {
    Error_Handler();
 80025a4:	f000 f9e8 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	24000658 	.word	0x24000658
 80025b0:	40007800 	.word	0x40007800

080025b4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80025b8:	4b2c      	ldr	r3, [pc, #176]	; (800266c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80025ba:	4a2d      	ldr	r2, [pc, #180]	; (8002670 <_ZL19MX_USART3_UART_Initv+0xbc>)
 80025bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80025be:	4b2b      	ldr	r3, [pc, #172]	; (800266c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80025c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025c6:	4b29      	ldr	r3, [pc, #164]	; (800266c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025cc:	4b27      	ldr	r3, [pc, #156]	; (800266c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025d2:	4b26      	ldr	r3, [pc, #152]	; (800266c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025d8:	4b24      	ldr	r3, [pc, #144]	; (800266c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80025da:	220c      	movs	r2, #12
 80025dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025de:	4b23      	ldr	r3, [pc, #140]	; (800266c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e4:	4b21      	ldr	r3, [pc, #132]	; (800266c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ea:	4b20      	ldr	r3, [pc, #128]	; (800266c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025f0:	4b1e      	ldr	r3, [pc, #120]	; (800266c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025f6:	4b1d      	ldr	r3, [pc, #116]	; (800266c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025fc:	481b      	ldr	r0, [pc, #108]	; (800266c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80025fe:	f007 ffe7 	bl	800a5d0 <HAL_UART_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	bf14      	ite	ne
 8002608:	2301      	movne	r3, #1
 800260a:	2300      	moveq	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8002612:	f000 f9b1 	bl	8002978 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002616:	2100      	movs	r1, #0
 8002618:	4814      	ldr	r0, [pc, #80]	; (800266c <_ZL19MX_USART3_UART_Initv+0xb8>)
 800261a:	f009 fda0 	bl	800c15e <HAL_UARTEx_SetTxFifoThreshold>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	bf14      	ite	ne
 8002624:	2301      	movne	r3, #1
 8002626:	2300      	moveq	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 800262e:	f000 f9a3 	bl	8002978 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002632:	2100      	movs	r1, #0
 8002634:	480d      	ldr	r0, [pc, #52]	; (800266c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002636:	f009 fdd0 	bl	800c1da <HAL_UARTEx_SetRxFifoThreshold>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	bf14      	ite	ne
 8002640:	2301      	movne	r3, #1
 8002642:	2300      	moveq	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 800264a:	f000 f995 	bl	8002978 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800264e:	4807      	ldr	r0, [pc, #28]	; (800266c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002650:	f009 fd4c 	bl	800c0ec <HAL_UARTEx_DisableFifoMode>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	bf14      	ite	ne
 800265a:	2301      	movne	r3, #1
 800265c:	2300      	moveq	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8002664:	f000 f988 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002668:	bf00      	nop
 800266a:	bd80      	pop	{r7, pc}
 800266c:	240006e8 	.word	0x240006e8
 8002670:	40004800 	.word	0x40004800

08002674 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800267a:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <_ZL11MX_DMA_Initv+0x7c>)
 800267c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002680:	4a1b      	ldr	r2, [pc, #108]	; (80026f0 <_ZL11MX_DMA_Initv+0x7c>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800268a:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <_ZL11MX_DMA_Initv+0x7c>)
 800268c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	607b      	str	r3, [r7, #4]
 8002696:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002698:	2200      	movs	r2, #0
 800269a:	2100      	movs	r1, #0
 800269c:	200b      	movs	r0, #11
 800269e:	f001 fafe 	bl	8003c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80026a2:	200b      	movs	r0, #11
 80026a4:	f001 fb15 	bl	8003cd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80026a8:	2200      	movs	r2, #0
 80026aa:	2100      	movs	r1, #0
 80026ac:	200c      	movs	r0, #12
 80026ae:	f001 faf6 	bl	8003c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80026b2:	200c      	movs	r0, #12
 80026b4:	f001 fb0d 	bl	8003cd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80026b8:	2200      	movs	r2, #0
 80026ba:	2100      	movs	r1, #0
 80026bc:	200d      	movs	r0, #13
 80026be:	f001 faee 	bl	8003c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80026c2:	200d      	movs	r0, #13
 80026c4:	f001 fb05 	bl	8003cd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80026c8:	2200      	movs	r2, #0
 80026ca:	2100      	movs	r1, #0
 80026cc:	200e      	movs	r0, #14
 80026ce:	f001 fae6 	bl	8003c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80026d2:	200e      	movs	r0, #14
 80026d4:	f001 fafd 	bl	8003cd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80026d8:	2200      	movs	r2, #0
 80026da:	2100      	movs	r1, #0
 80026dc:	200f      	movs	r0, #15
 80026de:	f001 fade 	bl	8003c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80026e2:	200f      	movs	r0, #15
 80026e4:	f001 faf5 	bl	8003cd2 <HAL_NVIC_EnableIRQ>

}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	58024400 	.word	0x58024400

080026f4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08c      	sub	sp, #48	; 0x30
 80026f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fa:	f107 031c 	add.w	r3, r7, #28
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	605a      	str	r2, [r3, #4]
 8002704:	609a      	str	r2, [r3, #8]
 8002706:	60da      	str	r2, [r3, #12]
 8002708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800270a:	4b8e      	ldr	r3, [pc, #568]	; (8002944 <_ZL12MX_GPIO_Initv+0x250>)
 800270c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002710:	4a8c      	ldr	r2, [pc, #560]	; (8002944 <_ZL12MX_GPIO_Initv+0x250>)
 8002712:	f043 0310 	orr.w	r3, r3, #16
 8002716:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800271a:	4b8a      	ldr	r3, [pc, #552]	; (8002944 <_ZL12MX_GPIO_Initv+0x250>)
 800271c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	61bb      	str	r3, [r7, #24]
 8002726:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002728:	4b86      	ldr	r3, [pc, #536]	; (8002944 <_ZL12MX_GPIO_Initv+0x250>)
 800272a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800272e:	4a85      	ldr	r2, [pc, #532]	; (8002944 <_ZL12MX_GPIO_Initv+0x250>)
 8002730:	f043 0304 	orr.w	r3, r3, #4
 8002734:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002738:	4b82      	ldr	r3, [pc, #520]	; (8002944 <_ZL12MX_GPIO_Initv+0x250>)
 800273a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002746:	4b7f      	ldr	r3, [pc, #508]	; (8002944 <_ZL12MX_GPIO_Initv+0x250>)
 8002748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800274c:	4a7d      	ldr	r2, [pc, #500]	; (8002944 <_ZL12MX_GPIO_Initv+0x250>)
 800274e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002756:	4b7b      	ldr	r3, [pc, #492]	; (8002944 <_ZL12MX_GPIO_Initv+0x250>)
 8002758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800275c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002764:	4b77      	ldr	r3, [pc, #476]	; (8002944 <_ZL12MX_GPIO_Initv+0x250>)
 8002766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800276a:	4a76      	ldr	r2, [pc, #472]	; (8002944 <_ZL12MX_GPIO_Initv+0x250>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002774:	4b73      	ldr	r3, [pc, #460]	; (8002944 <_ZL12MX_GPIO_Initv+0x250>)
 8002776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002782:	4b70      	ldr	r3, [pc, #448]	; (8002944 <_ZL12MX_GPIO_Initv+0x250>)
 8002784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002788:	4a6e      	ldr	r2, [pc, #440]	; (8002944 <_ZL12MX_GPIO_Initv+0x250>)
 800278a:	f043 0302 	orr.w	r3, r3, #2
 800278e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002792:	4b6c      	ldr	r3, [pc, #432]	; (8002944 <_ZL12MX_GPIO_Initv+0x250>)
 8002794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027a0:	4b68      	ldr	r3, [pc, #416]	; (8002944 <_ZL12MX_GPIO_Initv+0x250>)
 80027a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027a6:	4a67      	ldr	r2, [pc, #412]	; (8002944 <_ZL12MX_GPIO_Initv+0x250>)
 80027a8:	f043 0308 	orr.w	r3, r3, #8
 80027ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027b0:	4b64      	ldr	r3, [pc, #400]	; (8002944 <_ZL12MX_GPIO_Initv+0x250>)
 80027b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	607b      	str	r3, [r7, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027be:	4b61      	ldr	r3, [pc, #388]	; (8002944 <_ZL12MX_GPIO_Initv+0x250>)
 80027c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027c4:	4a5f      	ldr	r2, [pc, #380]	; (8002944 <_ZL12MX_GPIO_Initv+0x250>)
 80027c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027ce:	4b5d      	ldr	r3, [pc, #372]	; (8002944 <_ZL12MX_GPIO_Initv+0x250>)
 80027d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80027dc:	2200      	movs	r2, #0
 80027de:	f644 2121 	movw	r1, #18977	; 0x4a21
 80027e2:	4859      	ldr	r0, [pc, #356]	; (8002948 <_ZL12MX_GPIO_Initv+0x254>)
 80027e4:	f003 ff5a 	bl	800669c <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 80027e8:	2200      	movs	r2, #0
 80027ea:	f24c 0102 	movw	r1, #49154	; 0xc002
 80027ee:	4857      	ldr	r0, [pc, #348]	; (800294c <_ZL12MX_GPIO_Initv+0x258>)
 80027f0:	f003 ff54 	bl	800669c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80027f4:	2200      	movs	r2, #0
 80027f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027fa:	4855      	ldr	r0, [pc, #340]	; (8002950 <_ZL12MX_GPIO_Initv+0x25c>)
 80027fc:	f003 ff4e 	bl	800669c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8002800:	2200      	movs	r2, #0
 8002802:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002806:	4853      	ldr	r0, [pc, #332]	; (8002954 <_ZL12MX_GPIO_Initv+0x260>)
 8002808:	f003 ff48 	bl	800669c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 800280c:	2200      	movs	r2, #0
 800280e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002812:	4851      	ldr	r0, [pc, #324]	; (8002958 <_ZL12MX_GPIO_Initv+0x264>)
 8002814:	f003 ff42 	bl	800669c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 8002818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800281c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800281e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 8002828:	f107 031c 	add.w	r3, r7, #28
 800282c:	4619      	mov	r1, r3
 800282e:	4849      	ldr	r0, [pc, #292]	; (8002954 <_ZL12MX_GPIO_Initv+0x260>)
 8002830:	f003 fd84 	bl	800633c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8002834:	f644 2321 	movw	r3, #18977	; 0x4a21
 8002838:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283a:	2301      	movs	r3, #1
 800283c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002842:	2300      	movs	r3, #0
 8002844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002846:	f107 031c 	add.w	r3, r7, #28
 800284a:	4619      	mov	r1, r3
 800284c:	483e      	ldr	r0, [pc, #248]	; (8002948 <_ZL12MX_GPIO_Initv+0x254>)
 800284e:	f003 fd75 	bl	800633c <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 8002852:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002858:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800285c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002862:	f107 031c 	add.w	r3, r7, #28
 8002866:	4619      	mov	r1, r3
 8002868:	4838      	ldr	r0, [pc, #224]	; (800294c <_ZL12MX_GPIO_Initv+0x258>)
 800286a:	f003 fd67 	bl	800633c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 800286e:	f24c 0302 	movw	r3, #49154	; 0xc002
 8002872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002874:	2301      	movs	r3, #1
 8002876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287c:	2300      	movs	r3, #0
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002880:	f107 031c 	add.w	r3, r7, #28
 8002884:	4619      	mov	r1, r3
 8002886:	4831      	ldr	r0, [pc, #196]	; (800294c <_ZL12MX_GPIO_Initv+0x258>)
 8002888:	f003 fd58 	bl	800633c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800288c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002892:	2301      	movs	r3, #1
 8002894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289a:	2300      	movs	r3, #0
 800289c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800289e:	f107 031c 	add.w	r3, r7, #28
 80028a2:	4619      	mov	r1, r3
 80028a4:	482a      	ldr	r0, [pc, #168]	; (8002950 <_ZL12MX_GPIO_Initv+0x25c>)
 80028a6:	f003 fd49 	bl	800633c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80028aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b0:	2301      	movs	r3, #1
 80028b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80028bc:	f107 031c 	add.w	r3, r7, #28
 80028c0:	4619      	mov	r1, r3
 80028c2:	4824      	ldr	r0, [pc, #144]	; (8002954 <_ZL12MX_GPIO_Initv+0x260>)
 80028c4:	f003 fd3a 	bl	800633c <HAL_GPIO_Init>

  /*Configure GPIO pin : UART4_DE_Pin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 80028c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ce:	2301      	movs	r3, #1
 80028d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d6:	2300      	movs	r3, #0
 80028d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 80028da:	f107 031c 	add.w	r3, r7, #28
 80028de:	4619      	mov	r1, r3
 80028e0:	481d      	ldr	r0, [pc, #116]	; (8002958 <_ZL12MX_GPIO_Initv+0x264>)
 80028e2:	f003 fd2b 	bl	800633c <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 80028e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80028f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 80028f6:	f107 031c 	add.w	r3, r7, #28
 80028fa:	4619      	mov	r1, r3
 80028fc:	4817      	ldr	r0, [pc, #92]	; (800295c <_ZL12MX_GPIO_Initv+0x268>)
 80028fe:	f003 fd1d 	bl	800633c <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8002902:	23c0      	movs	r3, #192	; 0xc0
 8002904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002906:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800290a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002910:	f107 031c 	add.w	r3, r7, #28
 8002914:	4619      	mov	r1, r3
 8002916:	480c      	ldr	r0, [pc, #48]	; (8002948 <_ZL12MX_GPIO_Initv+0x254>)
 8002918:	f003 fd10 	bl	800633c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800291c:	2200      	movs	r2, #0
 800291e:	2100      	movs	r1, #0
 8002920:	2017      	movs	r0, #23
 8002922:	f001 f9bc 	bl	8003c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002926:	2017      	movs	r0, #23
 8002928:	f001 f9d3 	bl	8003cd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800292c:	2200      	movs	r2, #0
 800292e:	2100      	movs	r1, #0
 8002930:	2028      	movs	r0, #40	; 0x28
 8002932:	f001 f9b4 	bl	8003c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002936:	2028      	movs	r0, #40	; 0x28
 8002938:	f001 f9cb 	bl	8003cd2 <HAL_NVIC_EnableIRQ>

}
 800293c:	bf00      	nop
 800293e:	3730      	adds	r7, #48	; 0x30
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	58024400 	.word	0x58024400
 8002948:	58020400 	.word	0x58020400
 800294c:	58021000 	.word	0x58021000
 8002950:	58020c00 	.word	0x58020c00
 8002954:	58020800 	.word	0x58020800
 8002958:	58020000 	.word	0x58020000
 800295c:	58021800 	.word	0x58021800

08002960 <HAL_GPIO_EXTI_Callback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {

}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	80fb      	strh	r3, [r7, #6]

}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800297c:	2200      	movs	r2, #0
 800297e:	2101      	movs	r1, #1
 8002980:	4808      	ldr	r0, [pc, #32]	; (80029a4 <Error_Handler+0x2c>)
 8002982:	f003 fe8b 	bl	800669c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002986:	2200      	movs	r2, #0
 8002988:	2102      	movs	r1, #2
 800298a:	4807      	ldr	r0, [pc, #28]	; (80029a8 <Error_Handler+0x30>)
 800298c:	f003 fe86 	bl	800669c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002990:	2201      	movs	r2, #1
 8002992:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002996:	4803      	ldr	r0, [pc, #12]	; (80029a4 <Error_Handler+0x2c>)
 8002998:	f003 fe80 	bl	800669c <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800299c:	b672      	cpsid	i
}
 800299e:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80029a0:	e7fe      	b.n	80029a0 <Error_Handler+0x28>
 80029a2:	bf00      	nop
 80029a4:	58020400 	.word	0x58020400
 80029a8:	58021000 	.word	0x58021000

080029ac <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	f040 809b 	bne.w	8002af4 <_Z41__static_initialization_and_destruction_0ii+0x148>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029c4:	4293      	cmp	r3, r2
 80029c6:	f040 8095 	bne.w	8002af4 <_Z41__static_initialization_and_destruction_0ii+0x148>
AMT21 encoderJ1(&huart4, 0xD4);
 80029ca:	22d4      	movs	r2, #212	; 0xd4
 80029cc:	4955      	ldr	r1, [pc, #340]	; (8002b24 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 80029ce:	4856      	ldr	r0, [pc, #344]	; (8002b28 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 80029d0:	f7fe f816 	bl	8000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 80029d4:	22c4      	movs	r2, #196	; 0xc4
 80029d6:	4953      	ldr	r1, [pc, #332]	; (8002b24 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 80029d8:	4854      	ldr	r0, [pc, #336]	; (8002b2c <_Z41__static_initialization_and_destruction_0ii+0x180>)
 80029da:	f7fe f811 	bl	8000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 80029de:	2320      	movs	r3, #32
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	4b53      	ldr	r3, [pc, #332]	; (8002b30 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	4953      	ldr	r1, [pc, #332]	; (8002b34 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 80029e8:	4853      	ldr	r0, [pc, #332]	; (8002b38 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 80029ea:	f7fe f8fd 	bl	8000be8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 80029ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	4b51      	ldr	r3, [pc, #324]	; (8002b3c <_Z41__static_initialization_and_destruction_0ii+0x190>)
 80029f6:	2204      	movs	r2, #4
 80029f8:	4951      	ldr	r1, [pc, #324]	; (8002b40 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 80029fa:	4852      	ldr	r0, [pc, #328]	; (8002b44 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 80029fc:	f7fe f8f4 	bl	8000be8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
volatile const float C2_q1 = 3.0*C0_q1 / Time*Time;
 8002a00:	4b51      	ldr	r3, [pc, #324]	; (8002b48 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8002a02:	edd3 7a00 	vldr	s15, [r3]
 8002a06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a0a:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8002a0e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8002a12:	4b4e      	ldr	r3, [pc, #312]	; (8002b4c <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002a14:	edd3 7a00 	vldr	s15, [r3]
 8002a18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a1c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002a20:	4b4a      	ldr	r3, [pc, #296]	; (8002b4c <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002a22:	edd3 7a00 	vldr	s15, [r3]
 8002a26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a2a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002a2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a32:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8002a34:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q1 = 2.0*C0_q1 / Time*Time*Time;
 8002a38:	4b43      	ldr	r3, [pc, #268]	; (8002b48 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8002a3a:	edd3 7a00 	vldr	s15, [r3]
 8002a3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a42:	ee37 5b07 	vadd.f64	d5, d7, d7
 8002a46:	4b41      	ldr	r3, [pc, #260]	; (8002b4c <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002a48:	edd3 7a00 	vldr	s15, [r3]
 8002a4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a50:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002a54:	4b3d      	ldr	r3, [pc, #244]	; (8002b4c <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002a56:	edd3 7a00 	vldr	s15, [r3]
 8002a5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a5e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002a62:	4b3a      	ldr	r3, [pc, #232]	; (8002b4c <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002a64:	edd3 7a00 	vldr	s15, [r3]
 8002a68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a6c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002a70:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a74:	4b37      	ldr	r3, [pc, #220]	; (8002b54 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8002a76:	edc3 7a00 	vstr	s15, [r3]
volatile const float C2_q3 = 3.0*C0_q3 / Time*Time;
 8002a7a:	4b37      	ldr	r3, [pc, #220]	; (8002b58 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8002a7c:	edd3 7a00 	vldr	s15, [r3]
 8002a80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a84:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8002a88:	ee27 5b06 	vmul.f64	d5, d7, d6
 8002a8c:	4b2f      	ldr	r3, [pc, #188]	; (8002b4c <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002a8e:	edd3 7a00 	vldr	s15, [r3]
 8002a92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a96:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002a9a:	4b2c      	ldr	r3, [pc, #176]	; (8002b4c <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002a9c:	edd3 7a00 	vldr	s15, [r3]
 8002aa0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002aa4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002aa8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002aac:	4b2b      	ldr	r3, [pc, #172]	; (8002b5c <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8002aae:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q3 = 2.0*C0_q3 / Time*Time*Time;
 8002ab2:	4b29      	ldr	r3, [pc, #164]	; (8002b58 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8002ab4:	edd3 7a00 	vldr	s15, [r3]
 8002ab8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002abc:	ee37 5b07 	vadd.f64	d5, d7, d7
 8002ac0:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002ac2:	edd3 7a00 	vldr	s15, [r3]
 8002ac6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002aca:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002ace:	4b1f      	ldr	r3, [pc, #124]	; (8002b4c <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002ad0:	edd3 7a00 	vldr	s15, [r3]
 8002ad4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ad8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002adc:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002ade:	edd3 7a00 	vldr	s15, [r3]
 8002ae2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ae6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002aea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002aee:	4b1c      	ldr	r3, [pc, #112]	; (8002b60 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8002af0:	edc3 7a00 	vstr	s15, [r3]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d110      	bne.n	8002b1c <_Z41__static_initialization_and_destruction_0ii+0x170>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d10b      	bne.n	8002b1c <_Z41__static_initialization_and_destruction_0ii+0x170>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8002b04:	480f      	ldr	r0, [pc, #60]	; (8002b44 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8002b06:	f7fe f8b1 	bl	8000c6c <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8002b0a:	480b      	ldr	r0, [pc, #44]	; (8002b38 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8002b0c:	f7fe f8ae 	bl	8000c6c <_ZN7StepperD1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 8002b10:	4806      	ldr	r0, [pc, #24]	; (8002b2c <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8002b12:	f7fd ff89 	bl	8000a28 <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8002b16:	4804      	ldr	r0, [pc, #16]	; (8002b28 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8002b18:	f7fd ff86 	bl	8000a28 <_ZN5AMT21D1Ev>
}
 8002b1c:	bf00      	nop
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	240005c8 	.word	0x240005c8
 8002b28:	240009d0 	.word	0x240009d0
 8002b2c:	240009e4 	.word	0x240009e4
 8002b30:	58020400 	.word	0x58020400
 8002b34:	24000368 	.word	0x24000368
 8002b38:	240009f8 	.word	0x240009f8
 8002b3c:	58021000 	.word	0x58021000
 8002b40:	2400057c 	.word	0x2400057c
 8002b44:	24000a20 	.word	0x24000a20
 8002b48:	24000018 	.word	0x24000018
 8002b4c:	24000014 	.word	0x24000014
 8002b50:	24000aa0 	.word	0x24000aa0
 8002b54:	24000aa4 	.word	0x24000aa4
 8002b58:	2400001c 	.word	0x2400001c
 8002b5c:	24000aa8 	.word	0x24000aa8
 8002b60:	24000aac 	.word	0x24000aac

08002b64 <_GLOBAL__sub_I_hcrc>:
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	f7ff ff1d 	bl	80029ac <_Z41__static_initialization_and_destruction_0ii>
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <_GLOBAL__sub_D_hcrc>:
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f7ff ff15 	bl	80029ac <_Z41__static_initialization_and_destruction_0ii>
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <HAL_MspInit+0x30>)
 8002b8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b90:	4a08      	ldr	r2, [pc, #32]	; (8002bb4 <HAL_MspInit+0x30>)
 8002b92:	f043 0302 	orr.w	r3, r3, #2
 8002b96:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b9a:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_MspInit+0x30>)
 8002b9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	607b      	str	r3, [r7, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	58024400 	.word	0x58024400

08002bb8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0b      	ldr	r2, [pc, #44]	; (8002bf4 <HAL_CRC_MspInit+0x3c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d10e      	bne.n	8002be8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002bca:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_CRC_MspInit+0x40>)
 8002bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd0:	4a09      	ldr	r2, [pc, #36]	; (8002bf8 <HAL_CRC_MspInit+0x40>)
 8002bd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bda:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <HAL_CRC_MspInit+0x40>)
 8002bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002be0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	58024c00 	.word	0x58024c00
 8002bf8:	58024400 	.word	0x58024400

08002bfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b0b8      	sub	sp, #224	; 0xe0
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c14:	f107 0310 	add.w	r3, r7, #16
 8002c18:	22bc      	movs	r2, #188	; 0xbc
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f009 fedb 	bl	800c9d8 <memset>
  if(hspi->Instance==SPI3)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a25      	ldr	r2, [pc, #148]	; (8002cbc <HAL_SPI_MspInit+0xc0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d142      	bne.n	8002cb2 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c30:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c36:	f107 0310 	add.w	r3, r7, #16
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f004 fd54 	bl	80076e8 <HAL_RCCEx_PeriphCLKConfig>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002c46:	f7ff fe97 	bl	8002978 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c4a:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <HAL_SPI_MspInit+0xc4>)
 8002c4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c50:	4a1b      	ldr	r2, [pc, #108]	; (8002cc0 <HAL_SPI_MspInit+0xc4>)
 8002c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c5a:	4b19      	ldr	r3, [pc, #100]	; (8002cc0 <HAL_SPI_MspInit+0xc4>)
 8002c5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c68:	4b15      	ldr	r3, [pc, #84]	; (8002cc0 <HAL_SPI_MspInit+0xc4>)
 8002c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c6e:	4a14      	ldr	r2, [pc, #80]	; (8002cc0 <HAL_SPI_MspInit+0xc4>)
 8002c70:	f043 0304 	orr.w	r3, r3, #4
 8002c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c78:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <HAL_SPI_MspInit+0xc4>)
 8002c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002c86:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002c8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ca0:	2306      	movs	r3, #6
 8002ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ca6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002caa:	4619      	mov	r1, r3
 8002cac:	4805      	ldr	r0, [pc, #20]	; (8002cc4 <HAL_SPI_MspInit+0xc8>)
 8002cae:	f003 fb45 	bl	800633c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002cb2:	bf00      	nop
 8002cb4:	37e0      	adds	r7, #224	; 0xe0
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40003c00 	.word	0x40003c00
 8002cc0:	58024400 	.word	0x58024400
 8002cc4:	58020800 	.word	0x58020800

08002cc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08c      	sub	sp, #48	; 0x30
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a7d      	ldr	r2, [pc, #500]	; (8002ecc <HAL_TIM_Base_MspInit+0x204>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d10f      	bne.n	8002cfa <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cda:	4b7d      	ldr	r3, [pc, #500]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002cdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ce0:	4a7b      	ldr	r2, [pc, #492]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002cea:	4b79      	ldr	r3, [pc, #484]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002cec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002cf8:	e0e3      	b.n	8002ec2 <HAL_TIM_Base_MspInit+0x1fa>
  else if(htim_base->Instance==TIM2)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d02:	d10f      	bne.n	8002d24 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d04:	4b72      	ldr	r3, [pc, #456]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002d06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d0a:	4a71      	ldr	r2, [pc, #452]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d14:	4b6e      	ldr	r3, [pc, #440]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002d16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002d22:	e0ce      	b.n	8002ec2 <HAL_TIM_Base_MspInit+0x1fa>
  else if(htim_base->Instance==TIM3)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a6a      	ldr	r2, [pc, #424]	; (8002ed4 <HAL_TIM_Base_MspInit+0x20c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d10f      	bne.n	8002d4e <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d2e:	4b68      	ldr	r3, [pc, #416]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002d30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d34:	4a66      	ldr	r2, [pc, #408]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002d36:	f043 0302 	orr.w	r3, r3, #2
 8002d3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d3e:	4b64      	ldr	r3, [pc, #400]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d4c:	e0b9      	b.n	8002ec2 <HAL_TIM_Base_MspInit+0x1fa>
  else if(htim_base->Instance==TIM4)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a61      	ldr	r2, [pc, #388]	; (8002ed8 <HAL_TIM_Base_MspInit+0x210>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d10f      	bne.n	8002d78 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d58:	4b5d      	ldr	r3, [pc, #372]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002d5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d5e:	4a5c      	ldr	r2, [pc, #368]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002d60:	f043 0304 	orr.w	r3, r3, #4
 8002d64:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d68:	4b59      	ldr	r3, [pc, #356]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002d6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	623b      	str	r3, [r7, #32]
 8002d74:	6a3b      	ldr	r3, [r7, #32]
}
 8002d76:	e0a4      	b.n	8002ec2 <HAL_TIM_Base_MspInit+0x1fa>
  else if(htim_base->Instance==TIM5)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a57      	ldr	r2, [pc, #348]	; (8002edc <HAL_TIM_Base_MspInit+0x214>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d117      	bne.n	8002db2 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d82:	4b53      	ldr	r3, [pc, #332]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002d84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d88:	4a51      	ldr	r2, [pc, #324]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002d8a:	f043 0308 	orr.w	r3, r3, #8
 8002d8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d92:	4b4f      	ldr	r3, [pc, #316]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002d94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	61fb      	str	r3, [r7, #28]
 8002d9e:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002da0:	2200      	movs	r2, #0
 8002da2:	2100      	movs	r1, #0
 8002da4:	2032      	movs	r0, #50	; 0x32
 8002da6:	f000 ff7a 	bl	8003c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002daa:	2032      	movs	r0, #50	; 0x32
 8002dac:	f000 ff91 	bl	8003cd2 <HAL_NVIC_EnableIRQ>
}
 8002db0:	e087      	b.n	8002ec2 <HAL_TIM_Base_MspInit+0x1fa>
  else if(htim_base->Instance==TIM6)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a4a      	ldr	r2, [pc, #296]	; (8002ee0 <HAL_TIM_Base_MspInit+0x218>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d117      	bne.n	8002dec <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002dbc:	4b44      	ldr	r3, [pc, #272]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002dbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dc2:	4a43      	ldr	r2, [pc, #268]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002dc4:	f043 0310 	orr.w	r3, r3, #16
 8002dc8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dcc:	4b40      	ldr	r3, [pc, #256]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002dce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	61bb      	str	r3, [r7, #24]
 8002dd8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2100      	movs	r1, #0
 8002dde:	2036      	movs	r0, #54	; 0x36
 8002de0:	f000 ff5d 	bl	8003c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002de4:	2036      	movs	r0, #54	; 0x36
 8002de6:	f000 ff74 	bl	8003cd2 <HAL_NVIC_EnableIRQ>
}
 8002dea:	e06a      	b.n	8002ec2 <HAL_TIM_Base_MspInit+0x1fa>
  else if(htim_base->Instance==TIM7)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a3c      	ldr	r2, [pc, #240]	; (8002ee4 <HAL_TIM_Base_MspInit+0x21c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d117      	bne.n	8002e26 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002df6:	4b36      	ldr	r3, [pc, #216]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002df8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dfc:	4a34      	ldr	r2, [pc, #208]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002dfe:	f043 0320 	orr.w	r3, r3, #32
 8002e02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e06:	4b32      	ldr	r3, [pc, #200]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002e08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002e14:	2200      	movs	r2, #0
 8002e16:	2100      	movs	r1, #0
 8002e18:	2037      	movs	r0, #55	; 0x37
 8002e1a:	f000 ff40 	bl	8003c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002e1e:	2037      	movs	r0, #55	; 0x37
 8002e20:	f000 ff57 	bl	8003cd2 <HAL_NVIC_EnableIRQ>
}
 8002e24:	e04d      	b.n	8002ec2 <HAL_TIM_Base_MspInit+0x1fa>
  else if(htim_base->Instance==TIM12)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a2f      	ldr	r2, [pc, #188]	; (8002ee8 <HAL_TIM_Base_MspInit+0x220>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d117      	bne.n	8002e60 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002e30:	4b27      	ldr	r3, [pc, #156]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002e32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e36:	4a26      	ldr	r2, [pc, #152]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e3c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e40:	4b23      	ldr	r3, [pc, #140]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002e42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2100      	movs	r1, #0
 8002e52:	202b      	movs	r0, #43	; 0x2b
 8002e54:	f000 ff23 	bl	8003c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002e58:	202b      	movs	r0, #43	; 0x2b
 8002e5a:	f000 ff3a 	bl	8003cd2 <HAL_NVIC_EnableIRQ>
}
 8002e5e:	e030      	b.n	8002ec2 <HAL_TIM_Base_MspInit+0x1fa>
  else if(htim_base->Instance==TIM13)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a21      	ldr	r2, [pc, #132]	; (8002eec <HAL_TIM_Base_MspInit+0x224>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d117      	bne.n	8002e9a <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002e6a:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002e6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e70:	4a17      	ldr	r2, [pc, #92]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e7a:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002e7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	202c      	movs	r0, #44	; 0x2c
 8002e8e:	f000 ff06 	bl	8003c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002e92:	202c      	movs	r0, #44	; 0x2c
 8002e94:	f000 ff1d 	bl	8003cd2 <HAL_NVIC_EnableIRQ>
}
 8002e98:	e013      	b.n	8002ec2 <HAL_TIM_Base_MspInit+0x1fa>
  else if(htim_base->Instance==TIM15)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a14      	ldr	r2, [pc, #80]	; (8002ef0 <HAL_TIM_Base_MspInit+0x228>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d10e      	bne.n	8002ec2 <HAL_TIM_Base_MspInit+0x1fa>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002ea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002eaa:	4a09      	ldr	r2, [pc, #36]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_TIM_Base_MspInit+0x208>)
 8002eb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
}
 8002ec2:	bf00      	nop
 8002ec4:	3730      	adds	r7, #48	; 0x30
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40010000 	.word	0x40010000
 8002ed0:	58024400 	.word	0x58024400
 8002ed4:	40000400 	.word	0x40000400
 8002ed8:	40000800 	.word	0x40000800
 8002edc:	40000c00 	.word	0x40000c00
 8002ee0:	40001000 	.word	0x40001000
 8002ee4:	40001400 	.word	0x40001400
 8002ee8:	40001800 	.word	0x40001800
 8002eec:	40001c00 	.word	0x40001c00
 8002ef0:	40014000 	.word	0x40014000

08002ef4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08c      	sub	sp, #48	; 0x30
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002efc:	f107 031c 	add.w	r3, r7, #28
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	605a      	str	r2, [r3, #4]
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	60da      	str	r2, [r3, #12]
 8002f0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a5e      	ldr	r2, [pc, #376]	; (800308c <HAL_TIM_MspPostInit+0x198>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d120      	bne.n	8002f58 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f16:	4b5e      	ldr	r3, [pc, #376]	; (8003090 <HAL_TIM_MspPostInit+0x19c>)
 8002f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f1c:	4a5c      	ldr	r2, [pc, #368]	; (8003090 <HAL_TIM_MspPostInit+0x19c>)
 8002f1e:	f043 0310 	orr.w	r3, r3, #16
 8002f22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f26:	4b5a      	ldr	r3, [pc, #360]	; (8003090 <HAL_TIM_MspPostInit+0x19c>)
 8002f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f2c:	f003 0310 	and.w	r3, r3, #16
 8002f30:	61bb      	str	r3, [r7, #24]
 8002f32:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8002f34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f42:	2300      	movs	r3, #0
 8002f44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f46:	2301      	movs	r3, #1
 8002f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8002f4a:	f107 031c 	add.w	r3, r7, #28
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4850      	ldr	r0, [pc, #320]	; (8003094 <HAL_TIM_MspPostInit+0x1a0>)
 8002f52:	f003 f9f3 	bl	800633c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002f56:	e094      	b.n	8003082 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f60:	d120      	bne.n	8002fa4 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f62:	4b4b      	ldr	r3, [pc, #300]	; (8003090 <HAL_TIM_MspPostInit+0x19c>)
 8002f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f68:	4a49      	ldr	r2, [pc, #292]	; (8003090 <HAL_TIM_MspPostInit+0x19c>)
 8002f6a:	f043 0302 	orr.w	r3, r3, #2
 8002f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f72:	4b47      	ldr	r3, [pc, #284]	; (8003090 <HAL_TIM_MspPostInit+0x19c>)
 8002f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8002f80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f86:	2302      	movs	r3, #2
 8002f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f92:	2301      	movs	r3, #1
 8002f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8002f96:	f107 031c 	add.w	r3, r7, #28
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	483e      	ldr	r0, [pc, #248]	; (8003098 <HAL_TIM_MspPostInit+0x1a4>)
 8002f9e:	f003 f9cd 	bl	800633c <HAL_GPIO_Init>
}
 8002fa2:	e06e      	b.n	8003082 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a3c      	ldr	r2, [pc, #240]	; (800309c <HAL_TIM_MspPostInit+0x1a8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d11f      	bne.n	8002fee <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fae:	4b38      	ldr	r3, [pc, #224]	; (8003090 <HAL_TIM_MspPostInit+0x19c>)
 8002fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fb4:	4a36      	ldr	r2, [pc, #216]	; (8003090 <HAL_TIM_MspPostInit+0x19c>)
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fbe:	4b34      	ldr	r3, [pc, #208]	; (8003090 <HAL_TIM_MspPostInit+0x19c>)
 8002fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8002fcc:	2340      	movs	r3, #64	; 0x40
 8002fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8002fe0:	f107 031c 	add.w	r3, r7, #28
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	482e      	ldr	r0, [pc, #184]	; (80030a0 <HAL_TIM_MspPostInit+0x1ac>)
 8002fe8:	f003 f9a8 	bl	800633c <HAL_GPIO_Init>
}
 8002fec:	e049      	b.n	8003082 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a2c      	ldr	r2, [pc, #176]	; (80030a4 <HAL_TIM_MspPostInit+0x1b0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d120      	bne.n	800303a <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff8:	4b25      	ldr	r3, [pc, #148]	; (8003090 <HAL_TIM_MspPostInit+0x19c>)
 8002ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ffe:	4a24      	ldr	r2, [pc, #144]	; (8003090 <HAL_TIM_MspPostInit+0x19c>)
 8003000:	f043 0302 	orr.w	r3, r3, #2
 8003004:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003008:	4b21      	ldr	r3, [pc, #132]	; (8003090 <HAL_TIM_MspPostInit+0x19c>)
 800300a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8003016:	f44f 7380 	mov.w	r3, #256	; 0x100
 800301a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301c:	2302      	movs	r3, #2
 800301e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003020:	2300      	movs	r3, #0
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003024:	2300      	movs	r3, #0
 8003026:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003028:	2302      	movs	r3, #2
 800302a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 800302c:	f107 031c 	add.w	r3, r7, #28
 8003030:	4619      	mov	r1, r3
 8003032:	4819      	ldr	r0, [pc, #100]	; (8003098 <HAL_TIM_MspPostInit+0x1a4>)
 8003034:	f003 f982 	bl	800633c <HAL_GPIO_Init>
}
 8003038:	e023      	b.n	8003082 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a1a      	ldr	r2, [pc, #104]	; (80030a8 <HAL_TIM_MspPostInit+0x1b4>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d11e      	bne.n	8003082 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_TIM_MspPostInit+0x19c>)
 8003046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800304a:	4a11      	ldr	r2, [pc, #68]	; (8003090 <HAL_TIM_MspPostInit+0x19c>)
 800304c:	f043 0310 	orr.w	r3, r3, #16
 8003050:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003054:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <HAL_TIM_MspPostInit+0x19c>)
 8003056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8003062:	2340      	movs	r3, #64	; 0x40
 8003064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003066:	2302      	movs	r3, #2
 8003068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	2300      	movs	r3, #0
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306e:	2300      	movs	r3, #0
 8003070:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003072:	2304      	movs	r3, #4
 8003074:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8003076:	f107 031c 	add.w	r3, r7, #28
 800307a:	4619      	mov	r1, r3
 800307c:	4805      	ldr	r0, [pc, #20]	; (8003094 <HAL_TIM_MspPostInit+0x1a0>)
 800307e:	f003 f95d 	bl	800633c <HAL_GPIO_Init>
}
 8003082:	bf00      	nop
 8003084:	3730      	adds	r7, #48	; 0x30
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40010000 	.word	0x40010000
 8003090:	58024400 	.word	0x58024400
 8003094:	58021000 	.word	0x58021000
 8003098:	58020400 	.word	0x58020400
 800309c:	40000400 	.word	0x40000400
 80030a0:	58020000 	.word	0x58020000
 80030a4:	40000800 	.word	0x40000800
 80030a8:	40014000 	.word	0x40014000

080030ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b0bc      	sub	sp, #240	; 0xf0
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	60da      	str	r2, [r3, #12]
 80030c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030c4:	f107 0320 	add.w	r3, r7, #32
 80030c8:	22bc      	movs	r2, #188	; 0xbc
 80030ca:	2100      	movs	r1, #0
 80030cc:	4618      	mov	r0, r3
 80030ce:	f009 fc83 	bl	800c9d8 <memset>
  if(huart->Instance==UART4)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4aa1      	ldr	r2, [pc, #644]	; (800335c <HAL_UART_MspInit+0x2b0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	f040 80b7 	bne.w	800324c <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80030de:	2302      	movs	r3, #2
 80030e0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80030e2:	2300      	movs	r3, #0
 80030e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030e8:	f107 0320 	add.w	r3, r7, #32
 80030ec:	4618      	mov	r0, r3
 80030ee:	f004 fafb 	bl	80076e8 <HAL_RCCEx_PeriphCLKConfig>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80030f8:	f7ff fc3e 	bl	8002978 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80030fc:	4b98      	ldr	r3, [pc, #608]	; (8003360 <HAL_UART_MspInit+0x2b4>)
 80030fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003102:	4a97      	ldr	r2, [pc, #604]	; (8003360 <HAL_UART_MspInit+0x2b4>)
 8003104:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003108:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800310c:	4b94      	ldr	r3, [pc, #592]	; (8003360 <HAL_UART_MspInit+0x2b4>)
 800310e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003112:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003116:	61fb      	str	r3, [r7, #28]
 8003118:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800311a:	4b91      	ldr	r3, [pc, #580]	; (8003360 <HAL_UART_MspInit+0x2b4>)
 800311c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003120:	4a8f      	ldr	r2, [pc, #572]	; (8003360 <HAL_UART_MspInit+0x2b4>)
 8003122:	f043 0308 	orr.w	r3, r3, #8
 8003126:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800312a:	4b8d      	ldr	r3, [pc, #564]	; (8003360 <HAL_UART_MspInit+0x2b4>)
 800312c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003138:	2303      	movs	r3, #3
 800313a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313e:	2302      	movs	r3, #2
 8003140:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	2300      	movs	r3, #0
 8003146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314a:	2300      	movs	r3, #0
 800314c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003150:	2308      	movs	r3, #8
 8003152:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003156:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800315a:	4619      	mov	r1, r3
 800315c:	4881      	ldr	r0, [pc, #516]	; (8003364 <HAL_UART_MspInit+0x2b8>)
 800315e:	f003 f8ed 	bl	800633c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8003162:	4b81      	ldr	r3, [pc, #516]	; (8003368 <HAL_UART_MspInit+0x2bc>)
 8003164:	4a81      	ldr	r2, [pc, #516]	; (800336c <HAL_UART_MspInit+0x2c0>)
 8003166:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8003168:	4b7f      	ldr	r3, [pc, #508]	; (8003368 <HAL_UART_MspInit+0x2bc>)
 800316a:	223f      	movs	r2, #63	; 0x3f
 800316c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800316e:	4b7e      	ldr	r3, [pc, #504]	; (8003368 <HAL_UART_MspInit+0x2bc>)
 8003170:	2200      	movs	r2, #0
 8003172:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003174:	4b7c      	ldr	r3, [pc, #496]	; (8003368 <HAL_UART_MspInit+0x2bc>)
 8003176:	2200      	movs	r2, #0
 8003178:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800317a:	4b7b      	ldr	r3, [pc, #492]	; (8003368 <HAL_UART_MspInit+0x2bc>)
 800317c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003180:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003182:	4b79      	ldr	r3, [pc, #484]	; (8003368 <HAL_UART_MspInit+0x2bc>)
 8003184:	2200      	movs	r2, #0
 8003186:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003188:	4b77      	ldr	r3, [pc, #476]	; (8003368 <HAL_UART_MspInit+0x2bc>)
 800318a:	2200      	movs	r2, #0
 800318c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800318e:	4b76      	ldr	r3, [pc, #472]	; (8003368 <HAL_UART_MspInit+0x2bc>)
 8003190:	2200      	movs	r2, #0
 8003192:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003194:	4b74      	ldr	r3, [pc, #464]	; (8003368 <HAL_UART_MspInit+0x2bc>)
 8003196:	2200      	movs	r2, #0
 8003198:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800319a:	4b73      	ldr	r3, [pc, #460]	; (8003368 <HAL_UART_MspInit+0x2bc>)
 800319c:	2204      	movs	r2, #4
 800319e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80031a0:	4b71      	ldr	r3, [pc, #452]	; (8003368 <HAL_UART_MspInit+0x2bc>)
 80031a2:	2203      	movs	r2, #3
 80031a4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80031a6:	4b70      	ldr	r3, [pc, #448]	; (8003368 <HAL_UART_MspInit+0x2bc>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80031ac:	4b6e      	ldr	r3, [pc, #440]	; (8003368 <HAL_UART_MspInit+0x2bc>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80031b2:	486d      	ldr	r0, [pc, #436]	; (8003368 <HAL_UART_MspInit+0x2bc>)
 80031b4:	f000 fe9e 	bl	8003ef4 <HAL_DMA_Init>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 80031be:	f7ff fbdb 	bl	8002978 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a68      	ldr	r2, [pc, #416]	; (8003368 <HAL_UART_MspInit+0x2bc>)
 80031c6:	67da      	str	r2, [r3, #124]	; 0x7c
 80031c8:	4a67      	ldr	r2, [pc, #412]	; (8003368 <HAL_UART_MspInit+0x2bc>)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80031ce:	4b68      	ldr	r3, [pc, #416]	; (8003370 <HAL_UART_MspInit+0x2c4>)
 80031d0:	4a68      	ldr	r2, [pc, #416]	; (8003374 <HAL_UART_MspInit+0x2c8>)
 80031d2:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80031d4:	4b66      	ldr	r3, [pc, #408]	; (8003370 <HAL_UART_MspInit+0x2c4>)
 80031d6:	2240      	movs	r2, #64	; 0x40
 80031d8:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031da:	4b65      	ldr	r3, [pc, #404]	; (8003370 <HAL_UART_MspInit+0x2c4>)
 80031dc:	2240      	movs	r2, #64	; 0x40
 80031de:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031e0:	4b63      	ldr	r3, [pc, #396]	; (8003370 <HAL_UART_MspInit+0x2c4>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031e6:	4b62      	ldr	r3, [pc, #392]	; (8003370 <HAL_UART_MspInit+0x2c4>)
 80031e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031ec:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031ee:	4b60      	ldr	r3, [pc, #384]	; (8003370 <HAL_UART_MspInit+0x2c4>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031f4:	4b5e      	ldr	r3, [pc, #376]	; (8003370 <HAL_UART_MspInit+0x2c4>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80031fa:	4b5d      	ldr	r3, [pc, #372]	; (8003370 <HAL_UART_MspInit+0x2c4>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003200:	4b5b      	ldr	r3, [pc, #364]	; (8003370 <HAL_UART_MspInit+0x2c4>)
 8003202:	2200      	movs	r2, #0
 8003204:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003206:	4b5a      	ldr	r3, [pc, #360]	; (8003370 <HAL_UART_MspInit+0x2c4>)
 8003208:	2204      	movs	r2, #4
 800320a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800320c:	4b58      	ldr	r3, [pc, #352]	; (8003370 <HAL_UART_MspInit+0x2c4>)
 800320e:	2203      	movs	r2, #3
 8003210:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003212:	4b57      	ldr	r3, [pc, #348]	; (8003370 <HAL_UART_MspInit+0x2c4>)
 8003214:	2200      	movs	r2, #0
 8003216:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003218:	4b55      	ldr	r3, [pc, #340]	; (8003370 <HAL_UART_MspInit+0x2c4>)
 800321a:	2200      	movs	r2, #0
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800321e:	4854      	ldr	r0, [pc, #336]	; (8003370 <HAL_UART_MspInit+0x2c4>)
 8003220:	f000 fe68 	bl	8003ef4 <HAL_DMA_Init>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 800322a:	f7ff fba5 	bl	8002978 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a4f      	ldr	r2, [pc, #316]	; (8003370 <HAL_UART_MspInit+0x2c4>)
 8003232:	679a      	str	r2, [r3, #120]	; 0x78
 8003234:	4a4e      	ldr	r2, [pc, #312]	; (8003370 <HAL_UART_MspInit+0x2c4>)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800323a:	2200      	movs	r2, #0
 800323c:	2100      	movs	r1, #0
 800323e:	2034      	movs	r0, #52	; 0x34
 8003240:	f000 fd2d 	bl	8003c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003244:	2034      	movs	r0, #52	; 0x34
 8003246:	f000 fd44 	bl	8003cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800324a:	e154      	b.n	80034f6 <HAL_UART_MspInit+0x44a>
  else if(huart->Instance==UART7)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a49      	ldr	r2, [pc, #292]	; (8003378 <HAL_UART_MspInit+0x2cc>)
 8003252:	4293      	cmp	r3, r2
 8003254:	f040 8098 	bne.w	8003388 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003258:	2302      	movs	r3, #2
 800325a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800325c:	2300      	movs	r3, #0
 800325e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003262:	f107 0320 	add.w	r3, r7, #32
 8003266:	4618      	mov	r0, r3
 8003268:	f004 fa3e 	bl	80076e8 <HAL_RCCEx_PeriphCLKConfig>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8003272:	f7ff fb81 	bl	8002978 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8003276:	4b3a      	ldr	r3, [pc, #232]	; (8003360 <HAL_UART_MspInit+0x2b4>)
 8003278:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800327c:	4a38      	ldr	r2, [pc, #224]	; (8003360 <HAL_UART_MspInit+0x2b4>)
 800327e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003282:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003286:	4b36      	ldr	r3, [pc, #216]	; (8003360 <HAL_UART_MspInit+0x2b4>)
 8003288:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800328c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003290:	617b      	str	r3, [r7, #20]
 8003292:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003294:	4b32      	ldr	r3, [pc, #200]	; (8003360 <HAL_UART_MspInit+0x2b4>)
 8003296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800329a:	4a31      	ldr	r2, [pc, #196]	; (8003360 <HAL_UART_MspInit+0x2b4>)
 800329c:	f043 0310 	orr.w	r3, r3, #16
 80032a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032a4:	4b2e      	ldr	r3, [pc, #184]	; (8003360 <HAL_UART_MspInit+0x2b4>)
 80032a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80032b2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80032b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ba:	2302      	movs	r3, #2
 80032bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c6:	2300      	movs	r3, #0
 80032c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80032cc:	2307      	movs	r3, #7
 80032ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032d2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80032d6:	4619      	mov	r1, r3
 80032d8:	4828      	ldr	r0, [pc, #160]	; (800337c <HAL_UART_MspInit+0x2d0>)
 80032da:	f003 f82f 	bl	800633c <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 80032de:	4b28      	ldr	r3, [pc, #160]	; (8003380 <HAL_UART_MspInit+0x2d4>)
 80032e0:	4a28      	ldr	r2, [pc, #160]	; (8003384 <HAL_UART_MspInit+0x2d8>)
 80032e2:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 80032e4:	4b26      	ldr	r3, [pc, #152]	; (8003380 <HAL_UART_MspInit+0x2d4>)
 80032e6:	2250      	movs	r2, #80	; 0x50
 80032e8:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032ea:	4b25      	ldr	r3, [pc, #148]	; (8003380 <HAL_UART_MspInit+0x2d4>)
 80032ec:	2240      	movs	r2, #64	; 0x40
 80032ee:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032f0:	4b23      	ldr	r3, [pc, #140]	; (8003380 <HAL_UART_MspInit+0x2d4>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032f6:	4b22      	ldr	r3, [pc, #136]	; (8003380 <HAL_UART_MspInit+0x2d4>)
 80032f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032fc:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032fe:	4b20      	ldr	r3, [pc, #128]	; (8003380 <HAL_UART_MspInit+0x2d4>)
 8003300:	2200      	movs	r2, #0
 8003302:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003304:	4b1e      	ldr	r3, [pc, #120]	; (8003380 <HAL_UART_MspInit+0x2d4>)
 8003306:	2200      	movs	r2, #0
 8003308:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 800330a:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <HAL_UART_MspInit+0x2d4>)
 800330c:	2200      	movs	r2, #0
 800330e:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003310:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <HAL_UART_MspInit+0x2d4>)
 8003312:	2200      	movs	r2, #0
 8003314:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003316:	4b1a      	ldr	r3, [pc, #104]	; (8003380 <HAL_UART_MspInit+0x2d4>)
 8003318:	2204      	movs	r2, #4
 800331a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800331c:	4b18      	ldr	r3, [pc, #96]	; (8003380 <HAL_UART_MspInit+0x2d4>)
 800331e:	2203      	movs	r2, #3
 8003320:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003322:	4b17      	ldr	r3, [pc, #92]	; (8003380 <HAL_UART_MspInit+0x2d4>)
 8003324:	2200      	movs	r2, #0
 8003326:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003328:	4b15      	ldr	r3, [pc, #84]	; (8003380 <HAL_UART_MspInit+0x2d4>)
 800332a:	2200      	movs	r2, #0
 800332c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 800332e:	4814      	ldr	r0, [pc, #80]	; (8003380 <HAL_UART_MspInit+0x2d4>)
 8003330:	f000 fde0 	bl	8003ef4 <HAL_DMA_Init>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_UART_MspInit+0x292>
      Error_Handler();
 800333a:	f7ff fb1d 	bl	8002978 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a0f      	ldr	r2, [pc, #60]	; (8003380 <HAL_UART_MspInit+0x2d4>)
 8003342:	679a      	str	r2, [r3, #120]	; 0x78
 8003344:	4a0e      	ldr	r2, [pc, #56]	; (8003380 <HAL_UART_MspInit+0x2d4>)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800334a:	2200      	movs	r2, #0
 800334c:	2100      	movs	r1, #0
 800334e:	2052      	movs	r0, #82	; 0x52
 8003350:	f000 fca5 	bl	8003c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8003354:	2052      	movs	r0, #82	; 0x52
 8003356:	f000 fcbc 	bl	8003cd2 <HAL_NVIC_EnableIRQ>
}
 800335a:	e0cc      	b.n	80034f6 <HAL_UART_MspInit+0x44a>
 800335c:	40004c00 	.word	0x40004c00
 8003360:	58024400 	.word	0x58024400
 8003364:	58020c00 	.word	0x58020c00
 8003368:	24000778 	.word	0x24000778
 800336c:	40020058 	.word	0x40020058
 8003370:	240007f0 	.word	0x240007f0
 8003374:	40020070 	.word	0x40020070
 8003378:	40007800 	.word	0x40007800
 800337c:	58021000 	.word	0x58021000
 8003380:	24000868 	.word	0x24000868
 8003384:	40020010 	.word	0x40020010
  else if(huart->Instance==USART3)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a5c      	ldr	r2, [pc, #368]	; (8003500 <HAL_UART_MspInit+0x454>)
 800338e:	4293      	cmp	r3, r2
 8003390:	f040 80b1 	bne.w	80034f6 <HAL_UART_MspInit+0x44a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003394:	2302      	movs	r3, #2
 8003396:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003398:	2300      	movs	r3, #0
 800339a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800339e:	f107 0320 	add.w	r3, r7, #32
 80033a2:	4618      	mov	r0, r3
 80033a4:	f004 f9a0 	bl	80076e8 <HAL_RCCEx_PeriphCLKConfig>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_UART_MspInit+0x306>
      Error_Handler();
 80033ae:	f7ff fae3 	bl	8002978 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80033b2:	4b54      	ldr	r3, [pc, #336]	; (8003504 <HAL_UART_MspInit+0x458>)
 80033b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033b8:	4a52      	ldr	r2, [pc, #328]	; (8003504 <HAL_UART_MspInit+0x458>)
 80033ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033c2:	4b50      	ldr	r3, [pc, #320]	; (8003504 <HAL_UART_MspInit+0x458>)
 80033c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033d0:	4b4c      	ldr	r3, [pc, #304]	; (8003504 <HAL_UART_MspInit+0x458>)
 80033d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033d6:	4a4b      	ldr	r2, [pc, #300]	; (8003504 <HAL_UART_MspInit+0x458>)
 80033d8:	f043 0308 	orr.w	r3, r3, #8
 80033dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033e0:	4b48      	ldr	r3, [pc, #288]	; (8003504 <HAL_UART_MspInit+0x458>)
 80033e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	60bb      	str	r3, [r7, #8]
 80033ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80033ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f6:	2302      	movs	r3, #2
 80033f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003402:	2300      	movs	r3, #0
 8003404:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003408:	2307      	movs	r3, #7
 800340a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800340e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003412:	4619      	mov	r1, r3
 8003414:	483c      	ldr	r0, [pc, #240]	; (8003508 <HAL_UART_MspInit+0x45c>)
 8003416:	f002 ff91 	bl	800633c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800341a:	4b3c      	ldr	r3, [pc, #240]	; (800350c <HAL_UART_MspInit+0x460>)
 800341c:	4a3c      	ldr	r2, [pc, #240]	; (8003510 <HAL_UART_MspInit+0x464>)
 800341e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003420:	4b3a      	ldr	r3, [pc, #232]	; (800350c <HAL_UART_MspInit+0x460>)
 8003422:	222d      	movs	r2, #45	; 0x2d
 8003424:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003426:	4b39      	ldr	r3, [pc, #228]	; (800350c <HAL_UART_MspInit+0x460>)
 8003428:	2200      	movs	r2, #0
 800342a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800342c:	4b37      	ldr	r3, [pc, #220]	; (800350c <HAL_UART_MspInit+0x460>)
 800342e:	2200      	movs	r2, #0
 8003430:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003432:	4b36      	ldr	r3, [pc, #216]	; (800350c <HAL_UART_MspInit+0x460>)
 8003434:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003438:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800343a:	4b34      	ldr	r3, [pc, #208]	; (800350c <HAL_UART_MspInit+0x460>)
 800343c:	2200      	movs	r2, #0
 800343e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003440:	4b32      	ldr	r3, [pc, #200]	; (800350c <HAL_UART_MspInit+0x460>)
 8003442:	2200      	movs	r2, #0
 8003444:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003446:	4b31      	ldr	r3, [pc, #196]	; (800350c <HAL_UART_MspInit+0x460>)
 8003448:	f44f 7280 	mov.w	r2, #256	; 0x100
 800344c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800344e:	4b2f      	ldr	r3, [pc, #188]	; (800350c <HAL_UART_MspInit+0x460>)
 8003450:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003454:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003456:	4b2d      	ldr	r3, [pc, #180]	; (800350c <HAL_UART_MspInit+0x460>)
 8003458:	2200      	movs	r2, #0
 800345a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800345c:	482b      	ldr	r0, [pc, #172]	; (800350c <HAL_UART_MspInit+0x460>)
 800345e:	f000 fd49 	bl	8003ef4 <HAL_DMA_Init>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <HAL_UART_MspInit+0x3c0>
      Error_Handler();
 8003468:	f7ff fa86 	bl	8002978 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a27      	ldr	r2, [pc, #156]	; (800350c <HAL_UART_MspInit+0x460>)
 8003470:	67da      	str	r2, [r3, #124]	; 0x7c
 8003472:	4a26      	ldr	r2, [pc, #152]	; (800350c <HAL_UART_MspInit+0x460>)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8003478:	4b26      	ldr	r3, [pc, #152]	; (8003514 <HAL_UART_MspInit+0x468>)
 800347a:	4a27      	ldr	r2, [pc, #156]	; (8003518 <HAL_UART_MspInit+0x46c>)
 800347c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800347e:	4b25      	ldr	r3, [pc, #148]	; (8003514 <HAL_UART_MspInit+0x468>)
 8003480:	222e      	movs	r2, #46	; 0x2e
 8003482:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003484:	4b23      	ldr	r3, [pc, #140]	; (8003514 <HAL_UART_MspInit+0x468>)
 8003486:	2240      	movs	r2, #64	; 0x40
 8003488:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800348a:	4b22      	ldr	r3, [pc, #136]	; (8003514 <HAL_UART_MspInit+0x468>)
 800348c:	2200      	movs	r2, #0
 800348e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003490:	4b20      	ldr	r3, [pc, #128]	; (8003514 <HAL_UART_MspInit+0x468>)
 8003492:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003496:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003498:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <HAL_UART_MspInit+0x468>)
 800349a:	2200      	movs	r2, #0
 800349c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800349e:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <HAL_UART_MspInit+0x468>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80034a4:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <HAL_UART_MspInit+0x468>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80034aa:	4b1a      	ldr	r3, [pc, #104]	; (8003514 <HAL_UART_MspInit+0x468>)
 80034ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80034b0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80034b2:	4b18      	ldr	r3, [pc, #96]	; (8003514 <HAL_UART_MspInit+0x468>)
 80034b4:	2204      	movs	r2, #4
 80034b6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80034b8:	4b16      	ldr	r3, [pc, #88]	; (8003514 <HAL_UART_MspInit+0x468>)
 80034ba:	2203      	movs	r2, #3
 80034bc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80034be:	4b15      	ldr	r3, [pc, #84]	; (8003514 <HAL_UART_MspInit+0x468>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80034c4:	4b13      	ldr	r3, [pc, #76]	; (8003514 <HAL_UART_MspInit+0x468>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80034ca:	4812      	ldr	r0, [pc, #72]	; (8003514 <HAL_UART_MspInit+0x468>)
 80034cc:	f000 fd12 	bl	8003ef4 <HAL_DMA_Init>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_UART_MspInit+0x42e>
      Error_Handler();
 80034d6:	f7ff fa4f 	bl	8002978 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a0d      	ldr	r2, [pc, #52]	; (8003514 <HAL_UART_MspInit+0x468>)
 80034de:	679a      	str	r2, [r3, #120]	; 0x78
 80034e0:	4a0c      	ldr	r2, [pc, #48]	; (8003514 <HAL_UART_MspInit+0x468>)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80034e6:	2200      	movs	r2, #0
 80034e8:	2100      	movs	r1, #0
 80034ea:	2027      	movs	r0, #39	; 0x27
 80034ec:	f000 fbd7 	bl	8003c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80034f0:	2027      	movs	r0, #39	; 0x27
 80034f2:	f000 fbee 	bl	8003cd2 <HAL_NVIC_EnableIRQ>
}
 80034f6:	bf00      	nop
 80034f8:	37f0      	adds	r7, #240	; 0xf0
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40004800 	.word	0x40004800
 8003504:	58024400 	.word	0x58024400
 8003508:	58020c00 	.word	0x58020c00
 800350c:	240008e0 	.word	0x240008e0
 8003510:	40020028 	.word	0x40020028
 8003514:	24000958 	.word	0x24000958
 8003518:	40020040 	.word	0x40020040

0800351c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003520:	e7fe      	b.n	8003520 <NMI_Handler+0x4>

08003522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003522:	b480      	push	{r7}
 8003524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003526:	e7fe      	b.n	8003526 <HardFault_Handler+0x4>

08003528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800352c:	e7fe      	b.n	800352c <MemManage_Handler+0x4>

0800352e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800352e:	b480      	push	{r7}
 8003530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003532:	e7fe      	b.n	8003532 <BusFault_Handler+0x4>

08003534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003538:	e7fe      	b.n	8003538 <UsageFault_Handler+0x4>

0800353a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800353a:	b480      	push	{r7}
 800353c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800354c:	bf00      	nop
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003556:	b480      	push	{r7}
 8003558:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003568:	f000 fa92 	bl	8003a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 800356c:	f000 fbcb 	bl	8003d06 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003570:	bf00      	nop
 8003572:	bd80      	pop	{r7, pc}

08003574 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8003578:	4802      	ldr	r0, [pc, #8]	; (8003584 <DMA1_Stream0_IRQHandler+0x10>)
 800357a:	f001 fd79 	bl	8005070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800357e:	bf00      	nop
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	24000868 	.word	0x24000868

08003588 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800358c:	4802      	ldr	r0, [pc, #8]	; (8003598 <DMA1_Stream1_IRQHandler+0x10>)
 800358e:	f001 fd6f 	bl	8005070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	240008e0 	.word	0x240008e0

0800359c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80035a0:	4802      	ldr	r0, [pc, #8]	; (80035ac <DMA1_Stream2_IRQHandler+0x10>)
 80035a2:	f001 fd65 	bl	8005070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	24000958 	.word	0x24000958

080035b0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80035b4:	4802      	ldr	r0, [pc, #8]	; (80035c0 <DMA1_Stream3_IRQHandler+0x10>)
 80035b6:	f001 fd5b 	bl	8005070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	24000778 	.word	0x24000778

080035c4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <DMA1_Stream4_IRQHandler+0x10>)
 80035ca:	f001 fd51 	bl	8005070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	240007f0 	.word	0x240007f0

080035d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 80035dc:	2040      	movs	r0, #64	; 0x40
 80035de:	f003 f876 	bl	80066ce <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 80035e2:	2080      	movs	r0, #128	; 0x80
 80035e4:	f003 f873 	bl	80066ce <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80035e8:	bf00      	nop
 80035ea:	bd80      	pop	{r7, pc}

080035ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80035f0:	4802      	ldr	r0, [pc, #8]	; (80035fc <USART3_IRQHandler+0x10>)
 80035f2:	f007 f9a7 	bl	800a944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	240006e8 	.word	0x240006e8

08003600 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8003604:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003608:	f003 f861 	bl	80066ce <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 800360c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003610:	f003 f85d 	bl	80066ce <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 8003614:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003618:	f003 f859 	bl	80066ce <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 800361c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003620:	f003 f855 	bl	80066ce <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003624:	bf00      	nop
 8003626:	bd80      	pop	{r7, pc}

08003628 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 800362c:	4802      	ldr	r0, [pc, #8]	; (8003638 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800362e:	f005 ff1d 	bl	800946c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003632:	bf00      	nop
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	240004e4 	.word	0x240004e4

0800363c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003640:	4802      	ldr	r0, [pc, #8]	; (800364c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003642:	f005 ff13 	bl	800946c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	24000530 	.word	0x24000530

08003650 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003654:	4802      	ldr	r0, [pc, #8]	; (8003660 <TIM5_IRQHandler+0x10>)
 8003656:	f005 ff09 	bl	800946c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	24000400 	.word	0x24000400

08003664 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003668:	4802      	ldr	r0, [pc, #8]	; (8003674 <UART4_IRQHandler+0x10>)
 800366a:	f007 f96b 	bl	800a944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800366e:	bf00      	nop
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	240005c8 	.word	0x240005c8

08003678 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800367c:	4802      	ldr	r0, [pc, #8]	; (8003688 <TIM6_DAC_IRQHandler+0x10>)
 800367e:	f005 fef5 	bl	800946c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003682:	bf00      	nop
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	2400044c 	.word	0x2400044c

0800368c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003690:	4802      	ldr	r0, [pc, #8]	; (800369c <TIM7_IRQHandler+0x10>)
 8003692:	f005 feeb 	bl	800946c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003696:	bf00      	nop
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	24000498 	.word	0x24000498

080036a0 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80036a4:	4802      	ldr	r0, [pc, #8]	; (80036b0 <UART7_IRQHandler+0x10>)
 80036a6:	f007 f94d 	bl	800a944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	24000658 	.word	0x24000658

080036b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
	return 1;
 80036b8:	2301      	movs	r3, #1
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <_kill>:

int _kill(int pid, int sig)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80036ce:	f009 f959 	bl	800c984 <__errno>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2216      	movs	r2, #22
 80036d6:	601a      	str	r2, [r3, #0]
	return -1;
 80036d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <_exit>:

void _exit (int status)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80036ec:	f04f 31ff 	mov.w	r1, #4294967295
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff ffe7 	bl	80036c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80036f6:	e7fe      	b.n	80036f6 <_exit+0x12>

080036f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	e00a      	b.n	8003720 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800370a:	f3af 8000 	nop.w
 800370e:	4601      	mov	r1, r0
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	60ba      	str	r2, [r7, #8]
 8003716:	b2ca      	uxtb	r2, r1
 8003718:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	3301      	adds	r3, #1
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	429a      	cmp	r2, r3
 8003726:	dbf0      	blt.n	800370a <_read+0x12>
	}

return len;
 8003728:	687b      	ldr	r3, [r7, #4]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b086      	sub	sp, #24
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	e009      	b.n	8003758 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	60ba      	str	r2, [r7, #8]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	3301      	adds	r3, #1
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	429a      	cmp	r2, r3
 800375e:	dbf1      	blt.n	8003744 <_write+0x12>
	}
	return len;
 8003760:	687b      	ldr	r3, [r7, #4]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <_close>:

int _close(int file)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
	return -1;
 8003772:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003776:	4618      	mov	r0, r3
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003792:	605a      	str	r2, [r3, #4]
	return 0;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <_isatty>:

int _isatty(int file)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
	return 1;
 80037aa:	2301      	movs	r3, #1
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
	return 0;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
	...

080037d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037dc:	4a14      	ldr	r2, [pc, #80]	; (8003830 <_sbrk+0x5c>)
 80037de:	4b15      	ldr	r3, [pc, #84]	; (8003834 <_sbrk+0x60>)
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037e8:	4b13      	ldr	r3, [pc, #76]	; (8003838 <_sbrk+0x64>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d102      	bne.n	80037f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037f0:	4b11      	ldr	r3, [pc, #68]	; (8003838 <_sbrk+0x64>)
 80037f2:	4a12      	ldr	r2, [pc, #72]	; (800383c <_sbrk+0x68>)
 80037f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037f6:	4b10      	ldr	r3, [pc, #64]	; (8003838 <_sbrk+0x64>)
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4413      	add	r3, r2
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	429a      	cmp	r2, r3
 8003802:	d207      	bcs.n	8003814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003804:	f009 f8be 	bl	800c984 <__errno>
 8003808:	4603      	mov	r3, r0
 800380a:	220c      	movs	r2, #12
 800380c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800380e:	f04f 33ff 	mov.w	r3, #4294967295
 8003812:	e009      	b.n	8003828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003814:	4b08      	ldr	r3, [pc, #32]	; (8003838 <_sbrk+0x64>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800381a:	4b07      	ldr	r3, [pc, #28]	; (8003838 <_sbrk+0x64>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4413      	add	r3, r2
 8003822:	4a05      	ldr	r2, [pc, #20]	; (8003838 <_sbrk+0x64>)
 8003824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003826:	68fb      	ldr	r3, [r7, #12]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	240010e0 	.word	0x240010e0
 8003834:	00000400 	.word	0x00000400
 8003838:	24000ac0 	.word	0x24000ac0
 800383c:	24000ae0 	.word	0x24000ae0

08003840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003844:	4b39      	ldr	r3, [pc, #228]	; (800392c <SystemInit+0xec>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	4a38      	ldr	r2, [pc, #224]	; (800392c <SystemInit+0xec>)
 800384c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003854:	4b36      	ldr	r3, [pc, #216]	; (8003930 <SystemInit+0xf0>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	2b06      	cmp	r3, #6
 800385e:	d807      	bhi.n	8003870 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003860:	4b33      	ldr	r3, [pc, #204]	; (8003930 <SystemInit+0xf0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f023 030f 	bic.w	r3, r3, #15
 8003868:	4a31      	ldr	r2, [pc, #196]	; (8003930 <SystemInit+0xf0>)
 800386a:	f043 0307 	orr.w	r3, r3, #7
 800386e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003870:	4b30      	ldr	r3, [pc, #192]	; (8003934 <SystemInit+0xf4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a2f      	ldr	r2, [pc, #188]	; (8003934 <SystemInit+0xf4>)
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800387c:	4b2d      	ldr	r3, [pc, #180]	; (8003934 <SystemInit+0xf4>)
 800387e:	2200      	movs	r2, #0
 8003880:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003882:	4b2c      	ldr	r3, [pc, #176]	; (8003934 <SystemInit+0xf4>)
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	492b      	ldr	r1, [pc, #172]	; (8003934 <SystemInit+0xf4>)
 8003888:	4b2b      	ldr	r3, [pc, #172]	; (8003938 <SystemInit+0xf8>)
 800388a:	4013      	ands	r3, r2
 800388c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800388e:	4b28      	ldr	r3, [pc, #160]	; (8003930 <SystemInit+0xf0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d007      	beq.n	80038aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800389a:	4b25      	ldr	r3, [pc, #148]	; (8003930 <SystemInit+0xf0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 030f 	bic.w	r3, r3, #15
 80038a2:	4a23      	ldr	r2, [pc, #140]	; (8003930 <SystemInit+0xf0>)
 80038a4:	f043 0307 	orr.w	r3, r3, #7
 80038a8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80038aa:	4b22      	ldr	r3, [pc, #136]	; (8003934 <SystemInit+0xf4>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80038b0:	4b20      	ldr	r3, [pc, #128]	; (8003934 <SystemInit+0xf4>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80038b6:	4b1f      	ldr	r3, [pc, #124]	; (8003934 <SystemInit+0xf4>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80038bc:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <SystemInit+0xf4>)
 80038be:	4a1f      	ldr	r2, [pc, #124]	; (800393c <SystemInit+0xfc>)
 80038c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80038c2:	4b1c      	ldr	r3, [pc, #112]	; (8003934 <SystemInit+0xf4>)
 80038c4:	4a1e      	ldr	r2, [pc, #120]	; (8003940 <SystemInit+0x100>)
 80038c6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80038c8:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <SystemInit+0xf4>)
 80038ca:	4a1e      	ldr	r2, [pc, #120]	; (8003944 <SystemInit+0x104>)
 80038cc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80038ce:	4b19      	ldr	r3, [pc, #100]	; (8003934 <SystemInit+0xf4>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80038d4:	4b17      	ldr	r3, [pc, #92]	; (8003934 <SystemInit+0xf4>)
 80038d6:	4a1b      	ldr	r2, [pc, #108]	; (8003944 <SystemInit+0x104>)
 80038d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80038da:	4b16      	ldr	r3, [pc, #88]	; (8003934 <SystemInit+0xf4>)
 80038dc:	2200      	movs	r2, #0
 80038de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80038e0:	4b14      	ldr	r3, [pc, #80]	; (8003934 <SystemInit+0xf4>)
 80038e2:	4a18      	ldr	r2, [pc, #96]	; (8003944 <SystemInit+0x104>)
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80038e6:	4b13      	ldr	r3, [pc, #76]	; (8003934 <SystemInit+0xf4>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80038ec:	4b11      	ldr	r3, [pc, #68]	; (8003934 <SystemInit+0xf4>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a10      	ldr	r2, [pc, #64]	; (8003934 <SystemInit+0xf4>)
 80038f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80038f8:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <SystemInit+0xf4>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80038fe:	4b12      	ldr	r3, [pc, #72]	; (8003948 <SystemInit+0x108>)
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	4b12      	ldr	r3, [pc, #72]	; (800394c <SystemInit+0x10c>)
 8003904:	4013      	ands	r3, r2
 8003906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800390a:	d202      	bcs.n	8003912 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800390c:	4b10      	ldr	r3, [pc, #64]	; (8003950 <SystemInit+0x110>)
 800390e:	2201      	movs	r2, #1
 8003910:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003912:	4b10      	ldr	r3, [pc, #64]	; (8003954 <SystemInit+0x114>)
 8003914:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003918:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800391a:	4b04      	ldr	r3, [pc, #16]	; (800392c <SystemInit+0xec>)
 800391c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003920:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003922:	bf00      	nop
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	e000ed00 	.word	0xe000ed00
 8003930:	52002000 	.word	0x52002000
 8003934:	58024400 	.word	0x58024400
 8003938:	eaf6ed7f 	.word	0xeaf6ed7f
 800393c:	02020200 	.word	0x02020200
 8003940:	01ff0000 	.word	0x01ff0000
 8003944:	01010280 	.word	0x01010280
 8003948:	5c001000 	.word	0x5c001000
 800394c:	ffff0000 	.word	0xffff0000
 8003950:	51008108 	.word	0x51008108
 8003954:	52004000 	.word	0x52004000

08003958 <Reset_Handler>:
 8003958:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003990 <LoopFillZerobss+0xe>
 800395c:	f7ff ff70 	bl	8003840 <SystemInit>
 8003960:	480c      	ldr	r0, [pc, #48]	; (8003994 <LoopFillZerobss+0x12>)
 8003962:	490d      	ldr	r1, [pc, #52]	; (8003998 <LoopFillZerobss+0x16>)
 8003964:	4a0d      	ldr	r2, [pc, #52]	; (800399c <LoopFillZerobss+0x1a>)
 8003966:	2300      	movs	r3, #0
 8003968:	e002      	b.n	8003970 <LoopCopyDataInit>

0800396a <CopyDataInit>:
 800396a:	58d4      	ldr	r4, [r2, r3]
 800396c:	50c4      	str	r4, [r0, r3]
 800396e:	3304      	adds	r3, #4

08003970 <LoopCopyDataInit>:
 8003970:	18c4      	adds	r4, r0, r3
 8003972:	428c      	cmp	r4, r1
 8003974:	d3f9      	bcc.n	800396a <CopyDataInit>
 8003976:	4a0a      	ldr	r2, [pc, #40]	; (80039a0 <LoopFillZerobss+0x1e>)
 8003978:	4c0a      	ldr	r4, [pc, #40]	; (80039a4 <LoopFillZerobss+0x22>)
 800397a:	2300      	movs	r3, #0
 800397c:	e001      	b.n	8003982 <LoopFillZerobss>

0800397e <FillZerobss>:
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	3204      	adds	r2, #4

08003982 <LoopFillZerobss>:
 8003982:	42a2      	cmp	r2, r4
 8003984:	d3fb      	bcc.n	800397e <FillZerobss>
 8003986:	f009 f803 	bl	800c990 <__libc_init_array>
 800398a:	f7fd ff37 	bl	80017fc <main>
 800398e:	4770      	bx	lr
 8003990:	240010e0 	.word	0x240010e0
 8003994:	24000000 	.word	0x24000000
 8003998:	24000208 	.word	0x24000208
 800399c:	0800f834 	.word	0x0800f834
 80039a0:	24000208 	.word	0x24000208
 80039a4:	24000ae0 	.word	0x24000ae0

080039a8 <ADC3_IRQHandler>:
 80039a8:	e7fe      	b.n	80039a8 <ADC3_IRQHandler>
	...

080039ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039b2:	2003      	movs	r0, #3
 80039b4:	f000 f968 	bl	8003c88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039b8:	f003 fcc0 	bl	800733c <HAL_RCC_GetSysClockFreq>
 80039bc:	4602      	mov	r2, r0
 80039be:	4b15      	ldr	r3, [pc, #84]	; (8003a14 <HAL_Init+0x68>)
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	0a1b      	lsrs	r3, r3, #8
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	4913      	ldr	r1, [pc, #76]	; (8003a18 <HAL_Init+0x6c>)
 80039ca:	5ccb      	ldrb	r3, [r1, r3]
 80039cc:	f003 031f 	and.w	r3, r3, #31
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
 80039d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039d6:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <HAL_Init+0x68>)
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	4a0e      	ldr	r2, [pc, #56]	; (8003a18 <HAL_Init+0x6c>)
 80039e0:	5cd3      	ldrb	r3, [r2, r3]
 80039e2:	f003 031f 	and.w	r3, r3, #31
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
 80039ec:	4a0b      	ldr	r2, [pc, #44]	; (8003a1c <HAL_Init+0x70>)
 80039ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039f0:	4a0b      	ldr	r2, [pc, #44]	; (8003a20 <HAL_Init+0x74>)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039f6:	2000      	movs	r0, #0
 80039f8:	f000 f814 	bl	8003a24 <HAL_InitTick>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e002      	b.n	8003a0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003a06:	f7ff f8bd 	bl	8002b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	58024400 	.word	0x58024400
 8003a18:	0800f280 	.word	0x0800f280
 8003a1c:	2400002c 	.word	0x2400002c
 8003a20:	24000028 	.word	0x24000028

08003a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003a2c:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <HAL_InitTick+0x60>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e021      	b.n	8003a7c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003a38:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <HAL_InitTick+0x64>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <HAL_InitTick+0x60>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	4619      	mov	r1, r3
 8003a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f94d 	bl	8003cee <HAL_SYSTICK_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e00e      	b.n	8003a7c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b0f      	cmp	r3, #15
 8003a62:	d80a      	bhi.n	8003a7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a64:	2200      	movs	r2, #0
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6c:	f000 f917 	bl	8003c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a70:	4a06      	ldr	r2, [pc, #24]	; (8003a8c <HAL_InitTick+0x68>)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	e000      	b.n	8003a7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	24000034 	.word	0x24000034
 8003a88:	24000028 	.word	0x24000028
 8003a8c:	24000030 	.word	0x24000030

08003a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <HAL_IncTick+0x20>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_IncTick+0x24>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	4a04      	ldr	r2, [pc, #16]	; (8003ab4 <HAL_IncTick+0x24>)
 8003aa2:	6013      	str	r3, [r2, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	24000034 	.word	0x24000034
 8003ab4:	24000acc 	.word	0x24000acc

08003ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  return uwTick;
 8003abc:	4b03      	ldr	r3, [pc, #12]	; (8003acc <HAL_GetTick+0x14>)
 8003abe:	681b      	ldr	r3, [r3, #0]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	24000acc 	.word	0x24000acc

08003ad0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003ad4:	4b03      	ldr	r3, [pc, #12]	; (8003ae4 <HAL_GetREVID+0x14>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	0c1b      	lsrs	r3, r3, #16
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	5c001000 	.word	0x5c001000

08003ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <__NVIC_SetPriorityGrouping+0x40>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b04:	4013      	ands	r3, r2
 8003b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b10:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <__NVIC_SetPriorityGrouping+0x44>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b16:	4a04      	ldr	r2, [pc, #16]	; (8003b28 <__NVIC_SetPriorityGrouping+0x40>)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	60d3      	str	r3, [r2, #12]
}
 8003b1c:	bf00      	nop
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	e000ed00 	.word	0xe000ed00
 8003b2c:	05fa0000 	.word	0x05fa0000

08003b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b34:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <__NVIC_GetPriorityGrouping+0x18>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	0a1b      	lsrs	r3, r3, #8
 8003b3a:	f003 0307 	and.w	r3, r3, #7
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	e000ed00 	.word	0xe000ed00

08003b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	db0b      	blt.n	8003b76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	f003 021f 	and.w	r2, r3, #31
 8003b64:	4907      	ldr	r1, [pc, #28]	; (8003b84 <__NVIC_EnableIRQ+0x38>)
 8003b66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	e000e100 	.word	0xe000e100

08003b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	6039      	str	r1, [r7, #0]
 8003b92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	db0a      	blt.n	8003bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	490c      	ldr	r1, [pc, #48]	; (8003bd4 <__NVIC_SetPriority+0x4c>)
 8003ba2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ba6:	0112      	lsls	r2, r2, #4
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	440b      	add	r3, r1
 8003bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bb0:	e00a      	b.n	8003bc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	4908      	ldr	r1, [pc, #32]	; (8003bd8 <__NVIC_SetPriority+0x50>)
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	3b04      	subs	r3, #4
 8003bc0:	0112      	lsls	r2, r2, #4
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	761a      	strb	r2, [r3, #24]
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	e000e100 	.word	0xe000e100
 8003bd8:	e000ed00 	.word	0xe000ed00

08003bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b089      	sub	sp, #36	; 0x24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f1c3 0307 	rsb	r3, r3, #7
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	bf28      	it	cs
 8003bfa:	2304      	movcs	r3, #4
 8003bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	3304      	adds	r3, #4
 8003c02:	2b06      	cmp	r3, #6
 8003c04:	d902      	bls.n	8003c0c <NVIC_EncodePriority+0x30>
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	3b03      	subs	r3, #3
 8003c0a:	e000      	b.n	8003c0e <NVIC_EncodePriority+0x32>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c10:	f04f 32ff 	mov.w	r2, #4294967295
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43da      	mvns	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	401a      	ands	r2, r3
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c24:	f04f 31ff 	mov.w	r1, #4294967295
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2e:	43d9      	mvns	r1, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c34:	4313      	orrs	r3, r2
         );
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3724      	adds	r7, #36	; 0x24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c54:	d301      	bcc.n	8003c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c56:	2301      	movs	r3, #1
 8003c58:	e00f      	b.n	8003c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c5a:	4a0a      	ldr	r2, [pc, #40]	; (8003c84 <SysTick_Config+0x40>)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c62:	210f      	movs	r1, #15
 8003c64:	f04f 30ff 	mov.w	r0, #4294967295
 8003c68:	f7ff ff8e 	bl	8003b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <SysTick_Config+0x40>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c72:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <SysTick_Config+0x40>)
 8003c74:	2207      	movs	r2, #7
 8003c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	e000e010 	.word	0xe000e010

08003c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff ff29 	bl	8003ae8 <__NVIC_SetPriorityGrouping>
}
 8003c96:	bf00      	nop
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b086      	sub	sp, #24
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	607a      	str	r2, [r7, #4]
 8003caa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cac:	f7ff ff40 	bl	8003b30 <__NVIC_GetPriorityGrouping>
 8003cb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	68b9      	ldr	r1, [r7, #8]
 8003cb6:	6978      	ldr	r0, [r7, #20]
 8003cb8:	f7ff ff90 	bl	8003bdc <NVIC_EncodePriority>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff ff5f 	bl	8003b88 <__NVIC_SetPriority>
}
 8003cca:	bf00      	nop
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	4603      	mov	r3, r0
 8003cda:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff ff33 	bl	8003b4c <__NVIC_EnableIRQ>
}
 8003ce6:	bf00      	nop
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7ff ffa4 	bl	8003c44 <SysTick_Config>
 8003cfc:	4603      	mov	r3, r0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003d0a:	f000 f802 	bl	8003d12 <HAL_SYSTICK_Callback>
}
 8003d0e:	bf00      	nop
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8003d12:	b480      	push	{r7}
 8003d14:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003d16:	bf00      	nop
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e054      	b.n	8003ddc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	7f5b      	ldrb	r3, [r3, #29]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d105      	bne.n	8003d48 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fe ff38 	bl	8002bb8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	791b      	ldrb	r3, [r3, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10c      	bne.n	8003d70 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a22      	ldr	r2, [pc, #136]	; (8003de4 <HAL_CRC_Init+0xc4>)
 8003d5c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0218 	bic.w	r2, r2, #24
 8003d6c:	609a      	str	r2, [r3, #8]
 8003d6e:	e00c      	b.n	8003d8a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6899      	ldr	r1, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f834 	bl	8003de8 <HAL_CRCEx_Polynomial_Set>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e028      	b.n	8003ddc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	795b      	ldrb	r3, [r3, #5]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d105      	bne.n	8003d9e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f04f 32ff 	mov.w	r2, #4294967295
 8003d9a:	611a      	str	r2, [r3, #16]
 8003d9c:	e004      	b.n	8003da8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6912      	ldr	r2, [r2, #16]
 8003da6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699a      	ldr	r2, [r3, #24]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	04c11db7 	.word	0x04c11db7

08003de8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003df8:	231f      	movs	r3, #31
 8003dfa:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003dfc:	bf00      	nop
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1e5a      	subs	r2, r3, #1
 8003e02:	613a      	str	r2, [r7, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d009      	beq.n	8003e1c <HAL_CRCEx_Polynomial_Set+0x34>
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f003 031f 	and.w	r3, r3, #31
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	fa22 f303 	lsr.w	r3, r2, r3
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0f0      	beq.n	8003dfe <HAL_CRCEx_Polynomial_Set+0x16>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b18      	cmp	r3, #24
 8003e20:	d846      	bhi.n	8003eb0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003e22:	a201      	add	r2, pc, #4	; (adr r2, 8003e28 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e28:	08003eb7 	.word	0x08003eb7
 8003e2c:	08003eb1 	.word	0x08003eb1
 8003e30:	08003eb1 	.word	0x08003eb1
 8003e34:	08003eb1 	.word	0x08003eb1
 8003e38:	08003eb1 	.word	0x08003eb1
 8003e3c:	08003eb1 	.word	0x08003eb1
 8003e40:	08003eb1 	.word	0x08003eb1
 8003e44:	08003eb1 	.word	0x08003eb1
 8003e48:	08003ea5 	.word	0x08003ea5
 8003e4c:	08003eb1 	.word	0x08003eb1
 8003e50:	08003eb1 	.word	0x08003eb1
 8003e54:	08003eb1 	.word	0x08003eb1
 8003e58:	08003eb1 	.word	0x08003eb1
 8003e5c:	08003eb1 	.word	0x08003eb1
 8003e60:	08003eb1 	.word	0x08003eb1
 8003e64:	08003eb1 	.word	0x08003eb1
 8003e68:	08003e99 	.word	0x08003e99
 8003e6c:	08003eb1 	.word	0x08003eb1
 8003e70:	08003eb1 	.word	0x08003eb1
 8003e74:	08003eb1 	.word	0x08003eb1
 8003e78:	08003eb1 	.word	0x08003eb1
 8003e7c:	08003eb1 	.word	0x08003eb1
 8003e80:	08003eb1 	.word	0x08003eb1
 8003e84:	08003eb1 	.word	0x08003eb1
 8003e88:	08003e8d 	.word	0x08003e8d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	2b06      	cmp	r3, #6
 8003e90:	d913      	bls.n	8003eba <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003e96:	e010      	b.n	8003eba <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	2b07      	cmp	r3, #7
 8003e9c:	d90f      	bls.n	8003ebe <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003ea2:	e00c      	b.n	8003ebe <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	2b0f      	cmp	r3, #15
 8003ea8:	d90b      	bls.n	8003ec2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003eae:	e008      	b.n	8003ec2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb4:	e006      	b.n	8003ec4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003eb6:	bf00      	nop
 8003eb8:	e004      	b.n	8003ec4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003eba:	bf00      	nop
 8003ebc:	e002      	b.n	8003ec4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003ebe:	bf00      	nop
 8003ec0:	e000      	b.n	8003ec4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003ec2:	bf00      	nop
  }
  if (status == HAL_OK)
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10d      	bne.n	8003ee6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f023 0118 	bic.w	r1, r3, #24
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	371c      	adds	r7, #28
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003efc:	f7ff fddc 	bl	8003ab8 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e316      	b.n	800453a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a66      	ldr	r2, [pc, #408]	; (80040ac <HAL_DMA_Init+0x1b8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d04a      	beq.n	8003fac <HAL_DMA_Init+0xb8>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a65      	ldr	r2, [pc, #404]	; (80040b0 <HAL_DMA_Init+0x1bc>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d045      	beq.n	8003fac <HAL_DMA_Init+0xb8>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a63      	ldr	r2, [pc, #396]	; (80040b4 <HAL_DMA_Init+0x1c0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d040      	beq.n	8003fac <HAL_DMA_Init+0xb8>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a62      	ldr	r2, [pc, #392]	; (80040b8 <HAL_DMA_Init+0x1c4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d03b      	beq.n	8003fac <HAL_DMA_Init+0xb8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a60      	ldr	r2, [pc, #384]	; (80040bc <HAL_DMA_Init+0x1c8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d036      	beq.n	8003fac <HAL_DMA_Init+0xb8>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a5f      	ldr	r2, [pc, #380]	; (80040c0 <HAL_DMA_Init+0x1cc>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d031      	beq.n	8003fac <HAL_DMA_Init+0xb8>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a5d      	ldr	r2, [pc, #372]	; (80040c4 <HAL_DMA_Init+0x1d0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d02c      	beq.n	8003fac <HAL_DMA_Init+0xb8>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a5c      	ldr	r2, [pc, #368]	; (80040c8 <HAL_DMA_Init+0x1d4>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d027      	beq.n	8003fac <HAL_DMA_Init+0xb8>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a5a      	ldr	r2, [pc, #360]	; (80040cc <HAL_DMA_Init+0x1d8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d022      	beq.n	8003fac <HAL_DMA_Init+0xb8>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a59      	ldr	r2, [pc, #356]	; (80040d0 <HAL_DMA_Init+0x1dc>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d01d      	beq.n	8003fac <HAL_DMA_Init+0xb8>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a57      	ldr	r2, [pc, #348]	; (80040d4 <HAL_DMA_Init+0x1e0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d018      	beq.n	8003fac <HAL_DMA_Init+0xb8>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a56      	ldr	r2, [pc, #344]	; (80040d8 <HAL_DMA_Init+0x1e4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d013      	beq.n	8003fac <HAL_DMA_Init+0xb8>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a54      	ldr	r2, [pc, #336]	; (80040dc <HAL_DMA_Init+0x1e8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00e      	beq.n	8003fac <HAL_DMA_Init+0xb8>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a53      	ldr	r2, [pc, #332]	; (80040e0 <HAL_DMA_Init+0x1ec>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d009      	beq.n	8003fac <HAL_DMA_Init+0xb8>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a51      	ldr	r2, [pc, #324]	; (80040e4 <HAL_DMA_Init+0x1f0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d004      	beq.n	8003fac <HAL_DMA_Init+0xb8>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a50      	ldr	r2, [pc, #320]	; (80040e8 <HAL_DMA_Init+0x1f4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d101      	bne.n	8003fb0 <HAL_DMA_Init+0xbc>
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <HAL_DMA_Init+0xbe>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 813b 	beq.w	800422e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a37      	ldr	r2, [pc, #220]	; (80040ac <HAL_DMA_Init+0x1b8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d04a      	beq.n	8004068 <HAL_DMA_Init+0x174>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a36      	ldr	r2, [pc, #216]	; (80040b0 <HAL_DMA_Init+0x1bc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d045      	beq.n	8004068 <HAL_DMA_Init+0x174>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a34      	ldr	r2, [pc, #208]	; (80040b4 <HAL_DMA_Init+0x1c0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d040      	beq.n	8004068 <HAL_DMA_Init+0x174>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a33      	ldr	r2, [pc, #204]	; (80040b8 <HAL_DMA_Init+0x1c4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d03b      	beq.n	8004068 <HAL_DMA_Init+0x174>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a31      	ldr	r2, [pc, #196]	; (80040bc <HAL_DMA_Init+0x1c8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d036      	beq.n	8004068 <HAL_DMA_Init+0x174>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a30      	ldr	r2, [pc, #192]	; (80040c0 <HAL_DMA_Init+0x1cc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d031      	beq.n	8004068 <HAL_DMA_Init+0x174>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a2e      	ldr	r2, [pc, #184]	; (80040c4 <HAL_DMA_Init+0x1d0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d02c      	beq.n	8004068 <HAL_DMA_Init+0x174>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a2d      	ldr	r2, [pc, #180]	; (80040c8 <HAL_DMA_Init+0x1d4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d027      	beq.n	8004068 <HAL_DMA_Init+0x174>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a2b      	ldr	r2, [pc, #172]	; (80040cc <HAL_DMA_Init+0x1d8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d022      	beq.n	8004068 <HAL_DMA_Init+0x174>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a2a      	ldr	r2, [pc, #168]	; (80040d0 <HAL_DMA_Init+0x1dc>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d01d      	beq.n	8004068 <HAL_DMA_Init+0x174>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a28      	ldr	r2, [pc, #160]	; (80040d4 <HAL_DMA_Init+0x1e0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d018      	beq.n	8004068 <HAL_DMA_Init+0x174>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a27      	ldr	r2, [pc, #156]	; (80040d8 <HAL_DMA_Init+0x1e4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d013      	beq.n	8004068 <HAL_DMA_Init+0x174>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a25      	ldr	r2, [pc, #148]	; (80040dc <HAL_DMA_Init+0x1e8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00e      	beq.n	8004068 <HAL_DMA_Init+0x174>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a24      	ldr	r2, [pc, #144]	; (80040e0 <HAL_DMA_Init+0x1ec>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d009      	beq.n	8004068 <HAL_DMA_Init+0x174>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a22      	ldr	r2, [pc, #136]	; (80040e4 <HAL_DMA_Init+0x1f0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d004      	beq.n	8004068 <HAL_DMA_Init+0x174>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a21      	ldr	r2, [pc, #132]	; (80040e8 <HAL_DMA_Init+0x1f4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d108      	bne.n	800407a <HAL_DMA_Init+0x186>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0201 	bic.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	e007      	b.n	800408a <HAL_DMA_Init+0x196>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0201 	bic.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800408a:	e02f      	b.n	80040ec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800408c:	f7ff fd14 	bl	8003ab8 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b05      	cmp	r3, #5
 8004098:	d928      	bls.n	80040ec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2203      	movs	r2, #3
 80040a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e246      	b.n	800453a <HAL_DMA_Init+0x646>
 80040ac:	40020010 	.word	0x40020010
 80040b0:	40020028 	.word	0x40020028
 80040b4:	40020040 	.word	0x40020040
 80040b8:	40020058 	.word	0x40020058
 80040bc:	40020070 	.word	0x40020070
 80040c0:	40020088 	.word	0x40020088
 80040c4:	400200a0 	.word	0x400200a0
 80040c8:	400200b8 	.word	0x400200b8
 80040cc:	40020410 	.word	0x40020410
 80040d0:	40020428 	.word	0x40020428
 80040d4:	40020440 	.word	0x40020440
 80040d8:	40020458 	.word	0x40020458
 80040dc:	40020470 	.word	0x40020470
 80040e0:	40020488 	.word	0x40020488
 80040e4:	400204a0 	.word	0x400204a0
 80040e8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1c8      	bne.n	800408c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4b83      	ldr	r3, [pc, #524]	; (8004314 <HAL_DMA_Init+0x420>)
 8004106:	4013      	ands	r3, r2
 8004108:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004112:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800411e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800412a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	2b04      	cmp	r3, #4
 800413e:	d107      	bne.n	8004150 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	4313      	orrs	r3, r2
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004150:	4b71      	ldr	r3, [pc, #452]	; (8004318 <HAL_DMA_Init+0x424>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	4b71      	ldr	r3, [pc, #452]	; (800431c <HAL_DMA_Init+0x428>)
 8004156:	4013      	ands	r3, r2
 8004158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800415c:	d328      	bcc.n	80041b0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b28      	cmp	r3, #40	; 0x28
 8004164:	d903      	bls.n	800416e <HAL_DMA_Init+0x27a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b2e      	cmp	r3, #46	; 0x2e
 800416c:	d917      	bls.n	800419e <HAL_DMA_Init+0x2aa>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b3e      	cmp	r3, #62	; 0x3e
 8004174:	d903      	bls.n	800417e <HAL_DMA_Init+0x28a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b42      	cmp	r3, #66	; 0x42
 800417c:	d90f      	bls.n	800419e <HAL_DMA_Init+0x2aa>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b46      	cmp	r3, #70	; 0x46
 8004184:	d903      	bls.n	800418e <HAL_DMA_Init+0x29a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b48      	cmp	r3, #72	; 0x48
 800418c:	d907      	bls.n	800419e <HAL_DMA_Init+0x2aa>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b4e      	cmp	r3, #78	; 0x4e
 8004194:	d905      	bls.n	80041a2 <HAL_DMA_Init+0x2ae>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b52      	cmp	r3, #82	; 0x52
 800419c:	d801      	bhi.n	80041a2 <HAL_DMA_Init+0x2ae>
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <HAL_DMA_Init+0x2b0>
 80041a2:	2300      	movs	r3, #0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041ae:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f023 0307 	bic.w	r3, r3, #7
 80041c6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d117      	bne.n	800420a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00e      	beq.n	800420a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f001 ff1b 	bl	8006028 <DMA_CheckFifoParam>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d008      	beq.n	800420a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2240      	movs	r2, #64	; 0x40
 80041fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e197      	b.n	800453a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f001 fe56 	bl	8005ec4 <DMA_CalcBaseAndBitshift>
 8004218:	4603      	mov	r3, r0
 800421a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	223f      	movs	r2, #63	; 0x3f
 8004226:	409a      	lsls	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	609a      	str	r2, [r3, #8]
 800422c:	e0cd      	b.n	80043ca <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a3b      	ldr	r2, [pc, #236]	; (8004320 <HAL_DMA_Init+0x42c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d022      	beq.n	800427e <HAL_DMA_Init+0x38a>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a39      	ldr	r2, [pc, #228]	; (8004324 <HAL_DMA_Init+0x430>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d01d      	beq.n	800427e <HAL_DMA_Init+0x38a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a38      	ldr	r2, [pc, #224]	; (8004328 <HAL_DMA_Init+0x434>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d018      	beq.n	800427e <HAL_DMA_Init+0x38a>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a36      	ldr	r2, [pc, #216]	; (800432c <HAL_DMA_Init+0x438>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d013      	beq.n	800427e <HAL_DMA_Init+0x38a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a35      	ldr	r2, [pc, #212]	; (8004330 <HAL_DMA_Init+0x43c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00e      	beq.n	800427e <HAL_DMA_Init+0x38a>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a33      	ldr	r2, [pc, #204]	; (8004334 <HAL_DMA_Init+0x440>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d009      	beq.n	800427e <HAL_DMA_Init+0x38a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a32      	ldr	r2, [pc, #200]	; (8004338 <HAL_DMA_Init+0x444>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d004      	beq.n	800427e <HAL_DMA_Init+0x38a>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a30      	ldr	r2, [pc, #192]	; (800433c <HAL_DMA_Init+0x448>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d101      	bne.n	8004282 <HAL_DMA_Init+0x38e>
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <HAL_DMA_Init+0x390>
 8004282:	2300      	movs	r3, #0
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 8097 	beq.w	80043b8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a24      	ldr	r2, [pc, #144]	; (8004320 <HAL_DMA_Init+0x42c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d021      	beq.n	80042d8 <HAL_DMA_Init+0x3e4>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a22      	ldr	r2, [pc, #136]	; (8004324 <HAL_DMA_Init+0x430>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d01c      	beq.n	80042d8 <HAL_DMA_Init+0x3e4>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a21      	ldr	r2, [pc, #132]	; (8004328 <HAL_DMA_Init+0x434>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d017      	beq.n	80042d8 <HAL_DMA_Init+0x3e4>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1f      	ldr	r2, [pc, #124]	; (800432c <HAL_DMA_Init+0x438>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d012      	beq.n	80042d8 <HAL_DMA_Init+0x3e4>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1e      	ldr	r2, [pc, #120]	; (8004330 <HAL_DMA_Init+0x43c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00d      	beq.n	80042d8 <HAL_DMA_Init+0x3e4>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1c      	ldr	r2, [pc, #112]	; (8004334 <HAL_DMA_Init+0x440>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d008      	beq.n	80042d8 <HAL_DMA_Init+0x3e4>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1b      	ldr	r2, [pc, #108]	; (8004338 <HAL_DMA_Init+0x444>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d003      	beq.n	80042d8 <HAL_DMA_Init+0x3e4>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a19      	ldr	r2, [pc, #100]	; (800433c <HAL_DMA_Init+0x448>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2202      	movs	r2, #2
 80042de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4b12      	ldr	r3, [pc, #72]	; (8004340 <HAL_DMA_Init+0x44c>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b40      	cmp	r3, #64	; 0x40
 8004300:	d020      	beq.n	8004344 <HAL_DMA_Init+0x450>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	2b80      	cmp	r3, #128	; 0x80
 8004308:	d102      	bne.n	8004310 <HAL_DMA_Init+0x41c>
 800430a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800430e:	e01a      	b.n	8004346 <HAL_DMA_Init+0x452>
 8004310:	2300      	movs	r3, #0
 8004312:	e018      	b.n	8004346 <HAL_DMA_Init+0x452>
 8004314:	fe10803f 	.word	0xfe10803f
 8004318:	5c001000 	.word	0x5c001000
 800431c:	ffff0000 	.word	0xffff0000
 8004320:	58025408 	.word	0x58025408
 8004324:	5802541c 	.word	0x5802541c
 8004328:	58025430 	.word	0x58025430
 800432c:	58025444 	.word	0x58025444
 8004330:	58025458 	.word	0x58025458
 8004334:	5802546c 	.word	0x5802546c
 8004338:	58025480 	.word	0x58025480
 800433c:	58025494 	.word	0x58025494
 8004340:	fffe000f 	.word	0xfffe000f
 8004344:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	68d2      	ldr	r2, [r2, #12]
 800434a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800434c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004354:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800435c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004364:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800436c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004374:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	4313      	orrs	r3, r2
 800437a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	4b6e      	ldr	r3, [pc, #440]	; (8004544 <HAL_DMA_Init+0x650>)
 800438c:	4413      	add	r3, r2
 800438e:	4a6e      	ldr	r2, [pc, #440]	; (8004548 <HAL_DMA_Init+0x654>)
 8004390:	fba2 2303 	umull	r2, r3, r2, r3
 8004394:	091b      	lsrs	r3, r3, #4
 8004396:	009a      	lsls	r2, r3, #2
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f001 fd91 	bl	8005ec4 <DMA_CalcBaseAndBitshift>
 80043a2:	4603      	mov	r3, r0
 80043a4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043aa:	f003 031f 	and.w	r3, r3, #31
 80043ae:	2201      	movs	r2, #1
 80043b0:	409a      	lsls	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	605a      	str	r2, [r3, #4]
 80043b6:	e008      	b.n	80043ca <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2240      	movs	r2, #64	; 0x40
 80043bc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2203      	movs	r2, #3
 80043c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e0b7      	b.n	800453a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a5f      	ldr	r2, [pc, #380]	; (800454c <HAL_DMA_Init+0x658>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d072      	beq.n	80044ba <HAL_DMA_Init+0x5c6>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a5d      	ldr	r2, [pc, #372]	; (8004550 <HAL_DMA_Init+0x65c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d06d      	beq.n	80044ba <HAL_DMA_Init+0x5c6>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a5c      	ldr	r2, [pc, #368]	; (8004554 <HAL_DMA_Init+0x660>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d068      	beq.n	80044ba <HAL_DMA_Init+0x5c6>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a5a      	ldr	r2, [pc, #360]	; (8004558 <HAL_DMA_Init+0x664>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d063      	beq.n	80044ba <HAL_DMA_Init+0x5c6>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a59      	ldr	r2, [pc, #356]	; (800455c <HAL_DMA_Init+0x668>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d05e      	beq.n	80044ba <HAL_DMA_Init+0x5c6>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a57      	ldr	r2, [pc, #348]	; (8004560 <HAL_DMA_Init+0x66c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d059      	beq.n	80044ba <HAL_DMA_Init+0x5c6>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a56      	ldr	r2, [pc, #344]	; (8004564 <HAL_DMA_Init+0x670>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d054      	beq.n	80044ba <HAL_DMA_Init+0x5c6>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a54      	ldr	r2, [pc, #336]	; (8004568 <HAL_DMA_Init+0x674>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d04f      	beq.n	80044ba <HAL_DMA_Init+0x5c6>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a53      	ldr	r2, [pc, #332]	; (800456c <HAL_DMA_Init+0x678>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d04a      	beq.n	80044ba <HAL_DMA_Init+0x5c6>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a51      	ldr	r2, [pc, #324]	; (8004570 <HAL_DMA_Init+0x67c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d045      	beq.n	80044ba <HAL_DMA_Init+0x5c6>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a50      	ldr	r2, [pc, #320]	; (8004574 <HAL_DMA_Init+0x680>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d040      	beq.n	80044ba <HAL_DMA_Init+0x5c6>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a4e      	ldr	r2, [pc, #312]	; (8004578 <HAL_DMA_Init+0x684>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d03b      	beq.n	80044ba <HAL_DMA_Init+0x5c6>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a4d      	ldr	r2, [pc, #308]	; (800457c <HAL_DMA_Init+0x688>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d036      	beq.n	80044ba <HAL_DMA_Init+0x5c6>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a4b      	ldr	r2, [pc, #300]	; (8004580 <HAL_DMA_Init+0x68c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d031      	beq.n	80044ba <HAL_DMA_Init+0x5c6>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a4a      	ldr	r2, [pc, #296]	; (8004584 <HAL_DMA_Init+0x690>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d02c      	beq.n	80044ba <HAL_DMA_Init+0x5c6>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a48      	ldr	r2, [pc, #288]	; (8004588 <HAL_DMA_Init+0x694>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d027      	beq.n	80044ba <HAL_DMA_Init+0x5c6>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a47      	ldr	r2, [pc, #284]	; (800458c <HAL_DMA_Init+0x698>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d022      	beq.n	80044ba <HAL_DMA_Init+0x5c6>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a45      	ldr	r2, [pc, #276]	; (8004590 <HAL_DMA_Init+0x69c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d01d      	beq.n	80044ba <HAL_DMA_Init+0x5c6>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a44      	ldr	r2, [pc, #272]	; (8004594 <HAL_DMA_Init+0x6a0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d018      	beq.n	80044ba <HAL_DMA_Init+0x5c6>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a42      	ldr	r2, [pc, #264]	; (8004598 <HAL_DMA_Init+0x6a4>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d013      	beq.n	80044ba <HAL_DMA_Init+0x5c6>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a41      	ldr	r2, [pc, #260]	; (800459c <HAL_DMA_Init+0x6a8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00e      	beq.n	80044ba <HAL_DMA_Init+0x5c6>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a3f      	ldr	r2, [pc, #252]	; (80045a0 <HAL_DMA_Init+0x6ac>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d009      	beq.n	80044ba <HAL_DMA_Init+0x5c6>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a3e      	ldr	r2, [pc, #248]	; (80045a4 <HAL_DMA_Init+0x6b0>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d004      	beq.n	80044ba <HAL_DMA_Init+0x5c6>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a3c      	ldr	r2, [pc, #240]	; (80045a8 <HAL_DMA_Init+0x6b4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d101      	bne.n	80044be <HAL_DMA_Init+0x5ca>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <HAL_DMA_Init+0x5cc>
 80044be:	2300      	movs	r3, #0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d032      	beq.n	800452a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f001 fe2b 	bl	8006120 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b80      	cmp	r3, #128	; 0x80
 80044d0:	d102      	bne.n	80044d8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80044ec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d010      	beq.n	8004518 <HAL_DMA_Init+0x624>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d80c      	bhi.n	8004518 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f001 fea8 	bl	8006254 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004514:	605a      	str	r2, [r3, #4]
 8004516:	e008      	b.n	800452a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	a7fdabf8 	.word	0xa7fdabf8
 8004548:	cccccccd 	.word	0xcccccccd
 800454c:	40020010 	.word	0x40020010
 8004550:	40020028 	.word	0x40020028
 8004554:	40020040 	.word	0x40020040
 8004558:	40020058 	.word	0x40020058
 800455c:	40020070 	.word	0x40020070
 8004560:	40020088 	.word	0x40020088
 8004564:	400200a0 	.word	0x400200a0
 8004568:	400200b8 	.word	0x400200b8
 800456c:	40020410 	.word	0x40020410
 8004570:	40020428 	.word	0x40020428
 8004574:	40020440 	.word	0x40020440
 8004578:	40020458 	.word	0x40020458
 800457c:	40020470 	.word	0x40020470
 8004580:	40020488 	.word	0x40020488
 8004584:	400204a0 	.word	0x400204a0
 8004588:	400204b8 	.word	0x400204b8
 800458c:	58025408 	.word	0x58025408
 8004590:	5802541c 	.word	0x5802541c
 8004594:	58025430 	.word	0x58025430
 8004598:	58025444 	.word	0x58025444
 800459c:	58025458 	.word	0x58025458
 80045a0:	5802546c 	.word	0x5802546c
 80045a4:	58025480 	.word	0x58025480
 80045a8:	58025494 	.word	0x58025494

080045ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80045b4:	f7ff fa80 	bl	8003ab8 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e2dc      	b.n	8004b7e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d008      	beq.n	80045e2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2280      	movs	r2, #128	; 0x80
 80045d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e2cd      	b.n	8004b7e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a76      	ldr	r2, [pc, #472]	; (80047c0 <HAL_DMA_Abort+0x214>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d04a      	beq.n	8004682 <HAL_DMA_Abort+0xd6>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a74      	ldr	r2, [pc, #464]	; (80047c4 <HAL_DMA_Abort+0x218>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d045      	beq.n	8004682 <HAL_DMA_Abort+0xd6>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a73      	ldr	r2, [pc, #460]	; (80047c8 <HAL_DMA_Abort+0x21c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d040      	beq.n	8004682 <HAL_DMA_Abort+0xd6>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a71      	ldr	r2, [pc, #452]	; (80047cc <HAL_DMA_Abort+0x220>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d03b      	beq.n	8004682 <HAL_DMA_Abort+0xd6>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a70      	ldr	r2, [pc, #448]	; (80047d0 <HAL_DMA_Abort+0x224>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d036      	beq.n	8004682 <HAL_DMA_Abort+0xd6>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a6e      	ldr	r2, [pc, #440]	; (80047d4 <HAL_DMA_Abort+0x228>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d031      	beq.n	8004682 <HAL_DMA_Abort+0xd6>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a6d      	ldr	r2, [pc, #436]	; (80047d8 <HAL_DMA_Abort+0x22c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d02c      	beq.n	8004682 <HAL_DMA_Abort+0xd6>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a6b      	ldr	r2, [pc, #428]	; (80047dc <HAL_DMA_Abort+0x230>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d027      	beq.n	8004682 <HAL_DMA_Abort+0xd6>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a6a      	ldr	r2, [pc, #424]	; (80047e0 <HAL_DMA_Abort+0x234>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d022      	beq.n	8004682 <HAL_DMA_Abort+0xd6>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a68      	ldr	r2, [pc, #416]	; (80047e4 <HAL_DMA_Abort+0x238>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d01d      	beq.n	8004682 <HAL_DMA_Abort+0xd6>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a67      	ldr	r2, [pc, #412]	; (80047e8 <HAL_DMA_Abort+0x23c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d018      	beq.n	8004682 <HAL_DMA_Abort+0xd6>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a65      	ldr	r2, [pc, #404]	; (80047ec <HAL_DMA_Abort+0x240>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d013      	beq.n	8004682 <HAL_DMA_Abort+0xd6>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a64      	ldr	r2, [pc, #400]	; (80047f0 <HAL_DMA_Abort+0x244>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d00e      	beq.n	8004682 <HAL_DMA_Abort+0xd6>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a62      	ldr	r2, [pc, #392]	; (80047f4 <HAL_DMA_Abort+0x248>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d009      	beq.n	8004682 <HAL_DMA_Abort+0xd6>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a61      	ldr	r2, [pc, #388]	; (80047f8 <HAL_DMA_Abort+0x24c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d004      	beq.n	8004682 <HAL_DMA_Abort+0xd6>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a5f      	ldr	r2, [pc, #380]	; (80047fc <HAL_DMA_Abort+0x250>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d101      	bne.n	8004686 <HAL_DMA_Abort+0xda>
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <HAL_DMA_Abort+0xdc>
 8004686:	2300      	movs	r3, #0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d013      	beq.n	80046b4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 021e 	bic.w	r2, r2, #30
 800469a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695a      	ldr	r2, [r3, #20]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046aa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	617b      	str	r3, [r7, #20]
 80046b2:	e00a      	b.n	80046ca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 020e 	bic.w	r2, r2, #14
 80046c2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a3c      	ldr	r2, [pc, #240]	; (80047c0 <HAL_DMA_Abort+0x214>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d072      	beq.n	80047ba <HAL_DMA_Abort+0x20e>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a3a      	ldr	r2, [pc, #232]	; (80047c4 <HAL_DMA_Abort+0x218>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d06d      	beq.n	80047ba <HAL_DMA_Abort+0x20e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a39      	ldr	r2, [pc, #228]	; (80047c8 <HAL_DMA_Abort+0x21c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d068      	beq.n	80047ba <HAL_DMA_Abort+0x20e>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a37      	ldr	r2, [pc, #220]	; (80047cc <HAL_DMA_Abort+0x220>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d063      	beq.n	80047ba <HAL_DMA_Abort+0x20e>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a36      	ldr	r2, [pc, #216]	; (80047d0 <HAL_DMA_Abort+0x224>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d05e      	beq.n	80047ba <HAL_DMA_Abort+0x20e>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a34      	ldr	r2, [pc, #208]	; (80047d4 <HAL_DMA_Abort+0x228>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d059      	beq.n	80047ba <HAL_DMA_Abort+0x20e>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a33      	ldr	r2, [pc, #204]	; (80047d8 <HAL_DMA_Abort+0x22c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d054      	beq.n	80047ba <HAL_DMA_Abort+0x20e>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a31      	ldr	r2, [pc, #196]	; (80047dc <HAL_DMA_Abort+0x230>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d04f      	beq.n	80047ba <HAL_DMA_Abort+0x20e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a30      	ldr	r2, [pc, #192]	; (80047e0 <HAL_DMA_Abort+0x234>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d04a      	beq.n	80047ba <HAL_DMA_Abort+0x20e>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a2e      	ldr	r2, [pc, #184]	; (80047e4 <HAL_DMA_Abort+0x238>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d045      	beq.n	80047ba <HAL_DMA_Abort+0x20e>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a2d      	ldr	r2, [pc, #180]	; (80047e8 <HAL_DMA_Abort+0x23c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d040      	beq.n	80047ba <HAL_DMA_Abort+0x20e>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a2b      	ldr	r2, [pc, #172]	; (80047ec <HAL_DMA_Abort+0x240>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d03b      	beq.n	80047ba <HAL_DMA_Abort+0x20e>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a2a      	ldr	r2, [pc, #168]	; (80047f0 <HAL_DMA_Abort+0x244>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d036      	beq.n	80047ba <HAL_DMA_Abort+0x20e>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a28      	ldr	r2, [pc, #160]	; (80047f4 <HAL_DMA_Abort+0x248>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d031      	beq.n	80047ba <HAL_DMA_Abort+0x20e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a27      	ldr	r2, [pc, #156]	; (80047f8 <HAL_DMA_Abort+0x24c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d02c      	beq.n	80047ba <HAL_DMA_Abort+0x20e>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a25      	ldr	r2, [pc, #148]	; (80047fc <HAL_DMA_Abort+0x250>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d027      	beq.n	80047ba <HAL_DMA_Abort+0x20e>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a24      	ldr	r2, [pc, #144]	; (8004800 <HAL_DMA_Abort+0x254>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d022      	beq.n	80047ba <HAL_DMA_Abort+0x20e>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a22      	ldr	r2, [pc, #136]	; (8004804 <HAL_DMA_Abort+0x258>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d01d      	beq.n	80047ba <HAL_DMA_Abort+0x20e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a21      	ldr	r2, [pc, #132]	; (8004808 <HAL_DMA_Abort+0x25c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d018      	beq.n	80047ba <HAL_DMA_Abort+0x20e>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1f      	ldr	r2, [pc, #124]	; (800480c <HAL_DMA_Abort+0x260>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d013      	beq.n	80047ba <HAL_DMA_Abort+0x20e>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a1e      	ldr	r2, [pc, #120]	; (8004810 <HAL_DMA_Abort+0x264>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00e      	beq.n	80047ba <HAL_DMA_Abort+0x20e>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a1c      	ldr	r2, [pc, #112]	; (8004814 <HAL_DMA_Abort+0x268>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d009      	beq.n	80047ba <HAL_DMA_Abort+0x20e>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a1b      	ldr	r2, [pc, #108]	; (8004818 <HAL_DMA_Abort+0x26c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d004      	beq.n	80047ba <HAL_DMA_Abort+0x20e>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a19      	ldr	r2, [pc, #100]	; (800481c <HAL_DMA_Abort+0x270>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d132      	bne.n	8004820 <HAL_DMA_Abort+0x274>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e031      	b.n	8004822 <HAL_DMA_Abort+0x276>
 80047be:	bf00      	nop
 80047c0:	40020010 	.word	0x40020010
 80047c4:	40020028 	.word	0x40020028
 80047c8:	40020040 	.word	0x40020040
 80047cc:	40020058 	.word	0x40020058
 80047d0:	40020070 	.word	0x40020070
 80047d4:	40020088 	.word	0x40020088
 80047d8:	400200a0 	.word	0x400200a0
 80047dc:	400200b8 	.word	0x400200b8
 80047e0:	40020410 	.word	0x40020410
 80047e4:	40020428 	.word	0x40020428
 80047e8:	40020440 	.word	0x40020440
 80047ec:	40020458 	.word	0x40020458
 80047f0:	40020470 	.word	0x40020470
 80047f4:	40020488 	.word	0x40020488
 80047f8:	400204a0 	.word	0x400204a0
 80047fc:	400204b8 	.word	0x400204b8
 8004800:	58025408 	.word	0x58025408
 8004804:	5802541c 	.word	0x5802541c
 8004808:	58025430 	.word	0x58025430
 800480c:	58025444 	.word	0x58025444
 8004810:	58025458 	.word	0x58025458
 8004814:	5802546c 	.word	0x5802546c
 8004818:	58025480 	.word	0x58025480
 800481c:	58025494 	.word	0x58025494
 8004820:	2300      	movs	r3, #0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d007      	beq.n	8004836 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004830:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004834:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a6d      	ldr	r2, [pc, #436]	; (80049f0 <HAL_DMA_Abort+0x444>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d04a      	beq.n	80048d6 <HAL_DMA_Abort+0x32a>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a6b      	ldr	r2, [pc, #428]	; (80049f4 <HAL_DMA_Abort+0x448>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d045      	beq.n	80048d6 <HAL_DMA_Abort+0x32a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a6a      	ldr	r2, [pc, #424]	; (80049f8 <HAL_DMA_Abort+0x44c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d040      	beq.n	80048d6 <HAL_DMA_Abort+0x32a>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a68      	ldr	r2, [pc, #416]	; (80049fc <HAL_DMA_Abort+0x450>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d03b      	beq.n	80048d6 <HAL_DMA_Abort+0x32a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a67      	ldr	r2, [pc, #412]	; (8004a00 <HAL_DMA_Abort+0x454>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d036      	beq.n	80048d6 <HAL_DMA_Abort+0x32a>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a65      	ldr	r2, [pc, #404]	; (8004a04 <HAL_DMA_Abort+0x458>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d031      	beq.n	80048d6 <HAL_DMA_Abort+0x32a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a64      	ldr	r2, [pc, #400]	; (8004a08 <HAL_DMA_Abort+0x45c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d02c      	beq.n	80048d6 <HAL_DMA_Abort+0x32a>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a62      	ldr	r2, [pc, #392]	; (8004a0c <HAL_DMA_Abort+0x460>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d027      	beq.n	80048d6 <HAL_DMA_Abort+0x32a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a61      	ldr	r2, [pc, #388]	; (8004a10 <HAL_DMA_Abort+0x464>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d022      	beq.n	80048d6 <HAL_DMA_Abort+0x32a>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a5f      	ldr	r2, [pc, #380]	; (8004a14 <HAL_DMA_Abort+0x468>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d01d      	beq.n	80048d6 <HAL_DMA_Abort+0x32a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a5e      	ldr	r2, [pc, #376]	; (8004a18 <HAL_DMA_Abort+0x46c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d018      	beq.n	80048d6 <HAL_DMA_Abort+0x32a>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a5c      	ldr	r2, [pc, #368]	; (8004a1c <HAL_DMA_Abort+0x470>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <HAL_DMA_Abort+0x32a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a5b      	ldr	r2, [pc, #364]	; (8004a20 <HAL_DMA_Abort+0x474>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00e      	beq.n	80048d6 <HAL_DMA_Abort+0x32a>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a59      	ldr	r2, [pc, #356]	; (8004a24 <HAL_DMA_Abort+0x478>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d009      	beq.n	80048d6 <HAL_DMA_Abort+0x32a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a58      	ldr	r2, [pc, #352]	; (8004a28 <HAL_DMA_Abort+0x47c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d004      	beq.n	80048d6 <HAL_DMA_Abort+0x32a>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a56      	ldr	r2, [pc, #344]	; (8004a2c <HAL_DMA_Abort+0x480>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d108      	bne.n	80048e8 <HAL_DMA_Abort+0x33c>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0201 	bic.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	e007      	b.n	80048f8 <HAL_DMA_Abort+0x34c>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80048f8:	e013      	b.n	8004922 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048fa:	f7ff f8dd 	bl	8003ab8 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b05      	cmp	r3, #5
 8004906:	d90c      	bls.n	8004922 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2220      	movs	r2, #32
 800490c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2203      	movs	r2, #3
 8004912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e12d      	b.n	8004b7e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1e5      	bne.n	80048fa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a2f      	ldr	r2, [pc, #188]	; (80049f0 <HAL_DMA_Abort+0x444>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d04a      	beq.n	80049ce <HAL_DMA_Abort+0x422>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a2d      	ldr	r2, [pc, #180]	; (80049f4 <HAL_DMA_Abort+0x448>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d045      	beq.n	80049ce <HAL_DMA_Abort+0x422>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a2c      	ldr	r2, [pc, #176]	; (80049f8 <HAL_DMA_Abort+0x44c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d040      	beq.n	80049ce <HAL_DMA_Abort+0x422>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a2a      	ldr	r2, [pc, #168]	; (80049fc <HAL_DMA_Abort+0x450>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d03b      	beq.n	80049ce <HAL_DMA_Abort+0x422>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a29      	ldr	r2, [pc, #164]	; (8004a00 <HAL_DMA_Abort+0x454>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d036      	beq.n	80049ce <HAL_DMA_Abort+0x422>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a27      	ldr	r2, [pc, #156]	; (8004a04 <HAL_DMA_Abort+0x458>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d031      	beq.n	80049ce <HAL_DMA_Abort+0x422>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a26      	ldr	r2, [pc, #152]	; (8004a08 <HAL_DMA_Abort+0x45c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d02c      	beq.n	80049ce <HAL_DMA_Abort+0x422>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a24      	ldr	r2, [pc, #144]	; (8004a0c <HAL_DMA_Abort+0x460>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d027      	beq.n	80049ce <HAL_DMA_Abort+0x422>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a23      	ldr	r2, [pc, #140]	; (8004a10 <HAL_DMA_Abort+0x464>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d022      	beq.n	80049ce <HAL_DMA_Abort+0x422>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a21      	ldr	r2, [pc, #132]	; (8004a14 <HAL_DMA_Abort+0x468>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d01d      	beq.n	80049ce <HAL_DMA_Abort+0x422>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a20      	ldr	r2, [pc, #128]	; (8004a18 <HAL_DMA_Abort+0x46c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d018      	beq.n	80049ce <HAL_DMA_Abort+0x422>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a1e      	ldr	r2, [pc, #120]	; (8004a1c <HAL_DMA_Abort+0x470>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d013      	beq.n	80049ce <HAL_DMA_Abort+0x422>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a1d      	ldr	r2, [pc, #116]	; (8004a20 <HAL_DMA_Abort+0x474>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00e      	beq.n	80049ce <HAL_DMA_Abort+0x422>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1b      	ldr	r2, [pc, #108]	; (8004a24 <HAL_DMA_Abort+0x478>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d009      	beq.n	80049ce <HAL_DMA_Abort+0x422>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a1a      	ldr	r2, [pc, #104]	; (8004a28 <HAL_DMA_Abort+0x47c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d004      	beq.n	80049ce <HAL_DMA_Abort+0x422>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a18      	ldr	r2, [pc, #96]	; (8004a2c <HAL_DMA_Abort+0x480>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d101      	bne.n	80049d2 <HAL_DMA_Abort+0x426>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <HAL_DMA_Abort+0x428>
 80049d2:	2300      	movs	r3, #0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d02b      	beq.n	8004a30 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049dc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e2:	f003 031f 	and.w	r3, r3, #31
 80049e6:	223f      	movs	r2, #63	; 0x3f
 80049e8:	409a      	lsls	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	609a      	str	r2, [r3, #8]
 80049ee:	e02a      	b.n	8004a46 <HAL_DMA_Abort+0x49a>
 80049f0:	40020010 	.word	0x40020010
 80049f4:	40020028 	.word	0x40020028
 80049f8:	40020040 	.word	0x40020040
 80049fc:	40020058 	.word	0x40020058
 8004a00:	40020070 	.word	0x40020070
 8004a04:	40020088 	.word	0x40020088
 8004a08:	400200a0 	.word	0x400200a0
 8004a0c:	400200b8 	.word	0x400200b8
 8004a10:	40020410 	.word	0x40020410
 8004a14:	40020428 	.word	0x40020428
 8004a18:	40020440 	.word	0x40020440
 8004a1c:	40020458 	.word	0x40020458
 8004a20:	40020470 	.word	0x40020470
 8004a24:	40020488 	.word	0x40020488
 8004a28:	400204a0 	.word	0x400204a0
 8004a2c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a34:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a3a:	f003 031f 	and.w	r3, r3, #31
 8004a3e:	2201      	movs	r2, #1
 8004a40:	409a      	lsls	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a4f      	ldr	r2, [pc, #316]	; (8004b88 <HAL_DMA_Abort+0x5dc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d072      	beq.n	8004b36 <HAL_DMA_Abort+0x58a>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a4d      	ldr	r2, [pc, #308]	; (8004b8c <HAL_DMA_Abort+0x5e0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d06d      	beq.n	8004b36 <HAL_DMA_Abort+0x58a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a4c      	ldr	r2, [pc, #304]	; (8004b90 <HAL_DMA_Abort+0x5e4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d068      	beq.n	8004b36 <HAL_DMA_Abort+0x58a>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a4a      	ldr	r2, [pc, #296]	; (8004b94 <HAL_DMA_Abort+0x5e8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d063      	beq.n	8004b36 <HAL_DMA_Abort+0x58a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a49      	ldr	r2, [pc, #292]	; (8004b98 <HAL_DMA_Abort+0x5ec>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d05e      	beq.n	8004b36 <HAL_DMA_Abort+0x58a>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a47      	ldr	r2, [pc, #284]	; (8004b9c <HAL_DMA_Abort+0x5f0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d059      	beq.n	8004b36 <HAL_DMA_Abort+0x58a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a46      	ldr	r2, [pc, #280]	; (8004ba0 <HAL_DMA_Abort+0x5f4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d054      	beq.n	8004b36 <HAL_DMA_Abort+0x58a>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a44      	ldr	r2, [pc, #272]	; (8004ba4 <HAL_DMA_Abort+0x5f8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d04f      	beq.n	8004b36 <HAL_DMA_Abort+0x58a>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a43      	ldr	r2, [pc, #268]	; (8004ba8 <HAL_DMA_Abort+0x5fc>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d04a      	beq.n	8004b36 <HAL_DMA_Abort+0x58a>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a41      	ldr	r2, [pc, #260]	; (8004bac <HAL_DMA_Abort+0x600>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d045      	beq.n	8004b36 <HAL_DMA_Abort+0x58a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a40      	ldr	r2, [pc, #256]	; (8004bb0 <HAL_DMA_Abort+0x604>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d040      	beq.n	8004b36 <HAL_DMA_Abort+0x58a>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a3e      	ldr	r2, [pc, #248]	; (8004bb4 <HAL_DMA_Abort+0x608>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d03b      	beq.n	8004b36 <HAL_DMA_Abort+0x58a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a3d      	ldr	r2, [pc, #244]	; (8004bb8 <HAL_DMA_Abort+0x60c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d036      	beq.n	8004b36 <HAL_DMA_Abort+0x58a>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a3b      	ldr	r2, [pc, #236]	; (8004bbc <HAL_DMA_Abort+0x610>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d031      	beq.n	8004b36 <HAL_DMA_Abort+0x58a>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a3a      	ldr	r2, [pc, #232]	; (8004bc0 <HAL_DMA_Abort+0x614>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d02c      	beq.n	8004b36 <HAL_DMA_Abort+0x58a>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a38      	ldr	r2, [pc, #224]	; (8004bc4 <HAL_DMA_Abort+0x618>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d027      	beq.n	8004b36 <HAL_DMA_Abort+0x58a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a37      	ldr	r2, [pc, #220]	; (8004bc8 <HAL_DMA_Abort+0x61c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d022      	beq.n	8004b36 <HAL_DMA_Abort+0x58a>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a35      	ldr	r2, [pc, #212]	; (8004bcc <HAL_DMA_Abort+0x620>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d01d      	beq.n	8004b36 <HAL_DMA_Abort+0x58a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a34      	ldr	r2, [pc, #208]	; (8004bd0 <HAL_DMA_Abort+0x624>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d018      	beq.n	8004b36 <HAL_DMA_Abort+0x58a>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a32      	ldr	r2, [pc, #200]	; (8004bd4 <HAL_DMA_Abort+0x628>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d013      	beq.n	8004b36 <HAL_DMA_Abort+0x58a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a31      	ldr	r2, [pc, #196]	; (8004bd8 <HAL_DMA_Abort+0x62c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00e      	beq.n	8004b36 <HAL_DMA_Abort+0x58a>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a2f      	ldr	r2, [pc, #188]	; (8004bdc <HAL_DMA_Abort+0x630>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d009      	beq.n	8004b36 <HAL_DMA_Abort+0x58a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a2e      	ldr	r2, [pc, #184]	; (8004be0 <HAL_DMA_Abort+0x634>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d004      	beq.n	8004b36 <HAL_DMA_Abort+0x58a>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a2c      	ldr	r2, [pc, #176]	; (8004be4 <HAL_DMA_Abort+0x638>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d101      	bne.n	8004b3a <HAL_DMA_Abort+0x58e>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <HAL_DMA_Abort+0x590>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d015      	beq.n	8004b6c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004b48:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00c      	beq.n	8004b6c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b60:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004b6a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	40020010 	.word	0x40020010
 8004b8c:	40020028 	.word	0x40020028
 8004b90:	40020040 	.word	0x40020040
 8004b94:	40020058 	.word	0x40020058
 8004b98:	40020070 	.word	0x40020070
 8004b9c:	40020088 	.word	0x40020088
 8004ba0:	400200a0 	.word	0x400200a0
 8004ba4:	400200b8 	.word	0x400200b8
 8004ba8:	40020410 	.word	0x40020410
 8004bac:	40020428 	.word	0x40020428
 8004bb0:	40020440 	.word	0x40020440
 8004bb4:	40020458 	.word	0x40020458
 8004bb8:	40020470 	.word	0x40020470
 8004bbc:	40020488 	.word	0x40020488
 8004bc0:	400204a0 	.word	0x400204a0
 8004bc4:	400204b8 	.word	0x400204b8
 8004bc8:	58025408 	.word	0x58025408
 8004bcc:	5802541c 	.word	0x5802541c
 8004bd0:	58025430 	.word	0x58025430
 8004bd4:	58025444 	.word	0x58025444
 8004bd8:	58025458 	.word	0x58025458
 8004bdc:	5802546c 	.word	0x5802546c
 8004be0:	58025480 	.word	0x58025480
 8004be4:	58025494 	.word	0x58025494

08004be8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e205      	b.n	8005006 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d004      	beq.n	8004c10 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2280      	movs	r2, #128	; 0x80
 8004c0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e1fa      	b.n	8005006 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a8c      	ldr	r2, [pc, #560]	; (8004e48 <HAL_DMA_Abort_IT+0x260>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d04a      	beq.n	8004cb0 <HAL_DMA_Abort_IT+0xc8>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a8b      	ldr	r2, [pc, #556]	; (8004e4c <HAL_DMA_Abort_IT+0x264>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d045      	beq.n	8004cb0 <HAL_DMA_Abort_IT+0xc8>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a89      	ldr	r2, [pc, #548]	; (8004e50 <HAL_DMA_Abort_IT+0x268>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d040      	beq.n	8004cb0 <HAL_DMA_Abort_IT+0xc8>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a88      	ldr	r2, [pc, #544]	; (8004e54 <HAL_DMA_Abort_IT+0x26c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d03b      	beq.n	8004cb0 <HAL_DMA_Abort_IT+0xc8>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a86      	ldr	r2, [pc, #536]	; (8004e58 <HAL_DMA_Abort_IT+0x270>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d036      	beq.n	8004cb0 <HAL_DMA_Abort_IT+0xc8>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a85      	ldr	r2, [pc, #532]	; (8004e5c <HAL_DMA_Abort_IT+0x274>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d031      	beq.n	8004cb0 <HAL_DMA_Abort_IT+0xc8>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a83      	ldr	r2, [pc, #524]	; (8004e60 <HAL_DMA_Abort_IT+0x278>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d02c      	beq.n	8004cb0 <HAL_DMA_Abort_IT+0xc8>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a82      	ldr	r2, [pc, #520]	; (8004e64 <HAL_DMA_Abort_IT+0x27c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d027      	beq.n	8004cb0 <HAL_DMA_Abort_IT+0xc8>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a80      	ldr	r2, [pc, #512]	; (8004e68 <HAL_DMA_Abort_IT+0x280>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d022      	beq.n	8004cb0 <HAL_DMA_Abort_IT+0xc8>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a7f      	ldr	r2, [pc, #508]	; (8004e6c <HAL_DMA_Abort_IT+0x284>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d01d      	beq.n	8004cb0 <HAL_DMA_Abort_IT+0xc8>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a7d      	ldr	r2, [pc, #500]	; (8004e70 <HAL_DMA_Abort_IT+0x288>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d018      	beq.n	8004cb0 <HAL_DMA_Abort_IT+0xc8>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a7c      	ldr	r2, [pc, #496]	; (8004e74 <HAL_DMA_Abort_IT+0x28c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d013      	beq.n	8004cb0 <HAL_DMA_Abort_IT+0xc8>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a7a      	ldr	r2, [pc, #488]	; (8004e78 <HAL_DMA_Abort_IT+0x290>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00e      	beq.n	8004cb0 <HAL_DMA_Abort_IT+0xc8>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a79      	ldr	r2, [pc, #484]	; (8004e7c <HAL_DMA_Abort_IT+0x294>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d009      	beq.n	8004cb0 <HAL_DMA_Abort_IT+0xc8>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a77      	ldr	r2, [pc, #476]	; (8004e80 <HAL_DMA_Abort_IT+0x298>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d004      	beq.n	8004cb0 <HAL_DMA_Abort_IT+0xc8>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a76      	ldr	r2, [pc, #472]	; (8004e84 <HAL_DMA_Abort_IT+0x29c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d101      	bne.n	8004cb4 <HAL_DMA_Abort_IT+0xcc>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <HAL_DMA_Abort_IT+0xce>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d065      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2204      	movs	r2, #4
 8004cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a60      	ldr	r2, [pc, #384]	; (8004e48 <HAL_DMA_Abort_IT+0x260>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d04a      	beq.n	8004d62 <HAL_DMA_Abort_IT+0x17a>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a5e      	ldr	r2, [pc, #376]	; (8004e4c <HAL_DMA_Abort_IT+0x264>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d045      	beq.n	8004d62 <HAL_DMA_Abort_IT+0x17a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a5d      	ldr	r2, [pc, #372]	; (8004e50 <HAL_DMA_Abort_IT+0x268>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d040      	beq.n	8004d62 <HAL_DMA_Abort_IT+0x17a>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a5b      	ldr	r2, [pc, #364]	; (8004e54 <HAL_DMA_Abort_IT+0x26c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d03b      	beq.n	8004d62 <HAL_DMA_Abort_IT+0x17a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a5a      	ldr	r2, [pc, #360]	; (8004e58 <HAL_DMA_Abort_IT+0x270>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d036      	beq.n	8004d62 <HAL_DMA_Abort_IT+0x17a>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a58      	ldr	r2, [pc, #352]	; (8004e5c <HAL_DMA_Abort_IT+0x274>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d031      	beq.n	8004d62 <HAL_DMA_Abort_IT+0x17a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a57      	ldr	r2, [pc, #348]	; (8004e60 <HAL_DMA_Abort_IT+0x278>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d02c      	beq.n	8004d62 <HAL_DMA_Abort_IT+0x17a>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a55      	ldr	r2, [pc, #340]	; (8004e64 <HAL_DMA_Abort_IT+0x27c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d027      	beq.n	8004d62 <HAL_DMA_Abort_IT+0x17a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a54      	ldr	r2, [pc, #336]	; (8004e68 <HAL_DMA_Abort_IT+0x280>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d022      	beq.n	8004d62 <HAL_DMA_Abort_IT+0x17a>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a52      	ldr	r2, [pc, #328]	; (8004e6c <HAL_DMA_Abort_IT+0x284>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d01d      	beq.n	8004d62 <HAL_DMA_Abort_IT+0x17a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a51      	ldr	r2, [pc, #324]	; (8004e70 <HAL_DMA_Abort_IT+0x288>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d018      	beq.n	8004d62 <HAL_DMA_Abort_IT+0x17a>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a4f      	ldr	r2, [pc, #316]	; (8004e74 <HAL_DMA_Abort_IT+0x28c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d013      	beq.n	8004d62 <HAL_DMA_Abort_IT+0x17a>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a4e      	ldr	r2, [pc, #312]	; (8004e78 <HAL_DMA_Abort_IT+0x290>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00e      	beq.n	8004d62 <HAL_DMA_Abort_IT+0x17a>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a4c      	ldr	r2, [pc, #304]	; (8004e7c <HAL_DMA_Abort_IT+0x294>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d009      	beq.n	8004d62 <HAL_DMA_Abort_IT+0x17a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a4b      	ldr	r2, [pc, #300]	; (8004e80 <HAL_DMA_Abort_IT+0x298>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d004      	beq.n	8004d62 <HAL_DMA_Abort_IT+0x17a>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a49      	ldr	r2, [pc, #292]	; (8004e84 <HAL_DMA_Abort_IT+0x29c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d108      	bne.n	8004d74 <HAL_DMA_Abort_IT+0x18c>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0201 	bic.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	e147      	b.n	8005004 <HAL_DMA_Abort_IT+0x41c>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0201 	bic.w	r2, r2, #1
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	e13e      	b.n	8005004 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 020e 	bic.w	r2, r2, #14
 8004d94:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a2b      	ldr	r2, [pc, #172]	; (8004e48 <HAL_DMA_Abort_IT+0x260>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d04a      	beq.n	8004e36 <HAL_DMA_Abort_IT+0x24e>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a29      	ldr	r2, [pc, #164]	; (8004e4c <HAL_DMA_Abort_IT+0x264>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d045      	beq.n	8004e36 <HAL_DMA_Abort_IT+0x24e>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a28      	ldr	r2, [pc, #160]	; (8004e50 <HAL_DMA_Abort_IT+0x268>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d040      	beq.n	8004e36 <HAL_DMA_Abort_IT+0x24e>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a26      	ldr	r2, [pc, #152]	; (8004e54 <HAL_DMA_Abort_IT+0x26c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d03b      	beq.n	8004e36 <HAL_DMA_Abort_IT+0x24e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a25      	ldr	r2, [pc, #148]	; (8004e58 <HAL_DMA_Abort_IT+0x270>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d036      	beq.n	8004e36 <HAL_DMA_Abort_IT+0x24e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a23      	ldr	r2, [pc, #140]	; (8004e5c <HAL_DMA_Abort_IT+0x274>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d031      	beq.n	8004e36 <HAL_DMA_Abort_IT+0x24e>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a22      	ldr	r2, [pc, #136]	; (8004e60 <HAL_DMA_Abort_IT+0x278>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d02c      	beq.n	8004e36 <HAL_DMA_Abort_IT+0x24e>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a20      	ldr	r2, [pc, #128]	; (8004e64 <HAL_DMA_Abort_IT+0x27c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d027      	beq.n	8004e36 <HAL_DMA_Abort_IT+0x24e>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a1f      	ldr	r2, [pc, #124]	; (8004e68 <HAL_DMA_Abort_IT+0x280>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d022      	beq.n	8004e36 <HAL_DMA_Abort_IT+0x24e>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a1d      	ldr	r2, [pc, #116]	; (8004e6c <HAL_DMA_Abort_IT+0x284>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d01d      	beq.n	8004e36 <HAL_DMA_Abort_IT+0x24e>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a1c      	ldr	r2, [pc, #112]	; (8004e70 <HAL_DMA_Abort_IT+0x288>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d018      	beq.n	8004e36 <HAL_DMA_Abort_IT+0x24e>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a1a      	ldr	r2, [pc, #104]	; (8004e74 <HAL_DMA_Abort_IT+0x28c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d013      	beq.n	8004e36 <HAL_DMA_Abort_IT+0x24e>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a19      	ldr	r2, [pc, #100]	; (8004e78 <HAL_DMA_Abort_IT+0x290>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00e      	beq.n	8004e36 <HAL_DMA_Abort_IT+0x24e>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a17      	ldr	r2, [pc, #92]	; (8004e7c <HAL_DMA_Abort_IT+0x294>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d009      	beq.n	8004e36 <HAL_DMA_Abort_IT+0x24e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a16      	ldr	r2, [pc, #88]	; (8004e80 <HAL_DMA_Abort_IT+0x298>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d004      	beq.n	8004e36 <HAL_DMA_Abort_IT+0x24e>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a14      	ldr	r2, [pc, #80]	; (8004e84 <HAL_DMA_Abort_IT+0x29c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d128      	bne.n	8004e88 <HAL_DMA_Abort_IT+0x2a0>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0201 	bic.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	e027      	b.n	8004e98 <HAL_DMA_Abort_IT+0x2b0>
 8004e48:	40020010 	.word	0x40020010
 8004e4c:	40020028 	.word	0x40020028
 8004e50:	40020040 	.word	0x40020040
 8004e54:	40020058 	.word	0x40020058
 8004e58:	40020070 	.word	0x40020070
 8004e5c:	40020088 	.word	0x40020088
 8004e60:	400200a0 	.word	0x400200a0
 8004e64:	400200b8 	.word	0x400200b8
 8004e68:	40020410 	.word	0x40020410
 8004e6c:	40020428 	.word	0x40020428
 8004e70:	40020440 	.word	0x40020440
 8004e74:	40020458 	.word	0x40020458
 8004e78:	40020470 	.word	0x40020470
 8004e7c:	40020488 	.word	0x40020488
 8004e80:	400204a0 	.word	0x400204a0
 8004e84:	400204b8 	.word	0x400204b8
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0201 	bic.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a5c      	ldr	r2, [pc, #368]	; (8005010 <HAL_DMA_Abort_IT+0x428>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d072      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x3a0>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a5b      	ldr	r2, [pc, #364]	; (8005014 <HAL_DMA_Abort_IT+0x42c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d06d      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x3a0>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a59      	ldr	r2, [pc, #356]	; (8005018 <HAL_DMA_Abort_IT+0x430>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d068      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x3a0>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a58      	ldr	r2, [pc, #352]	; (800501c <HAL_DMA_Abort_IT+0x434>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d063      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x3a0>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a56      	ldr	r2, [pc, #344]	; (8005020 <HAL_DMA_Abort_IT+0x438>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d05e      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x3a0>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a55      	ldr	r2, [pc, #340]	; (8005024 <HAL_DMA_Abort_IT+0x43c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d059      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x3a0>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a53      	ldr	r2, [pc, #332]	; (8005028 <HAL_DMA_Abort_IT+0x440>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d054      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x3a0>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a52      	ldr	r2, [pc, #328]	; (800502c <HAL_DMA_Abort_IT+0x444>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d04f      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x3a0>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a50      	ldr	r2, [pc, #320]	; (8005030 <HAL_DMA_Abort_IT+0x448>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d04a      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x3a0>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a4f      	ldr	r2, [pc, #316]	; (8005034 <HAL_DMA_Abort_IT+0x44c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d045      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x3a0>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a4d      	ldr	r2, [pc, #308]	; (8005038 <HAL_DMA_Abort_IT+0x450>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d040      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x3a0>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a4c      	ldr	r2, [pc, #304]	; (800503c <HAL_DMA_Abort_IT+0x454>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d03b      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x3a0>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a4a      	ldr	r2, [pc, #296]	; (8005040 <HAL_DMA_Abort_IT+0x458>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d036      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x3a0>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a49      	ldr	r2, [pc, #292]	; (8005044 <HAL_DMA_Abort_IT+0x45c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d031      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x3a0>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a47      	ldr	r2, [pc, #284]	; (8005048 <HAL_DMA_Abort_IT+0x460>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d02c      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x3a0>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a46      	ldr	r2, [pc, #280]	; (800504c <HAL_DMA_Abort_IT+0x464>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d027      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x3a0>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a44      	ldr	r2, [pc, #272]	; (8005050 <HAL_DMA_Abort_IT+0x468>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d022      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x3a0>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a43      	ldr	r2, [pc, #268]	; (8005054 <HAL_DMA_Abort_IT+0x46c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d01d      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x3a0>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a41      	ldr	r2, [pc, #260]	; (8005058 <HAL_DMA_Abort_IT+0x470>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d018      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x3a0>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a40      	ldr	r2, [pc, #256]	; (800505c <HAL_DMA_Abort_IT+0x474>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d013      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x3a0>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a3e      	ldr	r2, [pc, #248]	; (8005060 <HAL_DMA_Abort_IT+0x478>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00e      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x3a0>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a3d      	ldr	r2, [pc, #244]	; (8005064 <HAL_DMA_Abort_IT+0x47c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d009      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x3a0>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a3b      	ldr	r2, [pc, #236]	; (8005068 <HAL_DMA_Abort_IT+0x480>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d004      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x3a0>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a3a      	ldr	r2, [pc, #232]	; (800506c <HAL_DMA_Abort_IT+0x484>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d101      	bne.n	8004f8c <HAL_DMA_Abort_IT+0x3a4>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <HAL_DMA_Abort_IT+0x3a6>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d028      	beq.n	8004fe4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fa0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fac:	f003 031f 	and.w	r3, r3, #31
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	409a      	lsls	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004fc0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00c      	beq.n	8004fe4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fd8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004fe2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	40020010 	.word	0x40020010
 8005014:	40020028 	.word	0x40020028
 8005018:	40020040 	.word	0x40020040
 800501c:	40020058 	.word	0x40020058
 8005020:	40020070 	.word	0x40020070
 8005024:	40020088 	.word	0x40020088
 8005028:	400200a0 	.word	0x400200a0
 800502c:	400200b8 	.word	0x400200b8
 8005030:	40020410 	.word	0x40020410
 8005034:	40020428 	.word	0x40020428
 8005038:	40020440 	.word	0x40020440
 800503c:	40020458 	.word	0x40020458
 8005040:	40020470 	.word	0x40020470
 8005044:	40020488 	.word	0x40020488
 8005048:	400204a0 	.word	0x400204a0
 800504c:	400204b8 	.word	0x400204b8
 8005050:	58025408 	.word	0x58025408
 8005054:	5802541c 	.word	0x5802541c
 8005058:	58025430 	.word	0x58025430
 800505c:	58025444 	.word	0x58025444
 8005060:	58025458 	.word	0x58025458
 8005064:	5802546c 	.word	0x5802546c
 8005068:	58025480 	.word	0x58025480
 800506c:	58025494 	.word	0x58025494

08005070 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08a      	sub	sp, #40	; 0x28
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800507c:	4b67      	ldr	r3, [pc, #412]	; (800521c <HAL_DMA_IRQHandler+0x1ac>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a67      	ldr	r2, [pc, #412]	; (8005220 <HAL_DMA_IRQHandler+0x1b0>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	0a9b      	lsrs	r3, r3, #10
 8005088:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005094:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a5f      	ldr	r2, [pc, #380]	; (8005224 <HAL_DMA_IRQHandler+0x1b4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d04a      	beq.n	8005142 <HAL_DMA_IRQHandler+0xd2>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a5d      	ldr	r2, [pc, #372]	; (8005228 <HAL_DMA_IRQHandler+0x1b8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d045      	beq.n	8005142 <HAL_DMA_IRQHandler+0xd2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a5c      	ldr	r2, [pc, #368]	; (800522c <HAL_DMA_IRQHandler+0x1bc>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d040      	beq.n	8005142 <HAL_DMA_IRQHandler+0xd2>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a5a      	ldr	r2, [pc, #360]	; (8005230 <HAL_DMA_IRQHandler+0x1c0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d03b      	beq.n	8005142 <HAL_DMA_IRQHandler+0xd2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a59      	ldr	r2, [pc, #356]	; (8005234 <HAL_DMA_IRQHandler+0x1c4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d036      	beq.n	8005142 <HAL_DMA_IRQHandler+0xd2>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a57      	ldr	r2, [pc, #348]	; (8005238 <HAL_DMA_IRQHandler+0x1c8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d031      	beq.n	8005142 <HAL_DMA_IRQHandler+0xd2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a56      	ldr	r2, [pc, #344]	; (800523c <HAL_DMA_IRQHandler+0x1cc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d02c      	beq.n	8005142 <HAL_DMA_IRQHandler+0xd2>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a54      	ldr	r2, [pc, #336]	; (8005240 <HAL_DMA_IRQHandler+0x1d0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d027      	beq.n	8005142 <HAL_DMA_IRQHandler+0xd2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a53      	ldr	r2, [pc, #332]	; (8005244 <HAL_DMA_IRQHandler+0x1d4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d022      	beq.n	8005142 <HAL_DMA_IRQHandler+0xd2>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a51      	ldr	r2, [pc, #324]	; (8005248 <HAL_DMA_IRQHandler+0x1d8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d01d      	beq.n	8005142 <HAL_DMA_IRQHandler+0xd2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a50      	ldr	r2, [pc, #320]	; (800524c <HAL_DMA_IRQHandler+0x1dc>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d018      	beq.n	8005142 <HAL_DMA_IRQHandler+0xd2>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a4e      	ldr	r2, [pc, #312]	; (8005250 <HAL_DMA_IRQHandler+0x1e0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d013      	beq.n	8005142 <HAL_DMA_IRQHandler+0xd2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a4d      	ldr	r2, [pc, #308]	; (8005254 <HAL_DMA_IRQHandler+0x1e4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d00e      	beq.n	8005142 <HAL_DMA_IRQHandler+0xd2>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a4b      	ldr	r2, [pc, #300]	; (8005258 <HAL_DMA_IRQHandler+0x1e8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d009      	beq.n	8005142 <HAL_DMA_IRQHandler+0xd2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a4a      	ldr	r2, [pc, #296]	; (800525c <HAL_DMA_IRQHandler+0x1ec>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d004      	beq.n	8005142 <HAL_DMA_IRQHandler+0xd2>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a48      	ldr	r2, [pc, #288]	; (8005260 <HAL_DMA_IRQHandler+0x1f0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d101      	bne.n	8005146 <HAL_DMA_IRQHandler+0xd6>
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <HAL_DMA_IRQHandler+0xd8>
 8005146:	2300      	movs	r3, #0
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 842b 	beq.w	80059a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005152:	f003 031f 	and.w	r3, r3, #31
 8005156:	2208      	movs	r2, #8
 8005158:	409a      	lsls	r2, r3
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	4013      	ands	r3, r2
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 80a2 	beq.w	80052a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a2e      	ldr	r2, [pc, #184]	; (8005224 <HAL_DMA_IRQHandler+0x1b4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d04a      	beq.n	8005204 <HAL_DMA_IRQHandler+0x194>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a2d      	ldr	r2, [pc, #180]	; (8005228 <HAL_DMA_IRQHandler+0x1b8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d045      	beq.n	8005204 <HAL_DMA_IRQHandler+0x194>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a2b      	ldr	r2, [pc, #172]	; (800522c <HAL_DMA_IRQHandler+0x1bc>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d040      	beq.n	8005204 <HAL_DMA_IRQHandler+0x194>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a2a      	ldr	r2, [pc, #168]	; (8005230 <HAL_DMA_IRQHandler+0x1c0>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d03b      	beq.n	8005204 <HAL_DMA_IRQHandler+0x194>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a28      	ldr	r2, [pc, #160]	; (8005234 <HAL_DMA_IRQHandler+0x1c4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d036      	beq.n	8005204 <HAL_DMA_IRQHandler+0x194>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a27      	ldr	r2, [pc, #156]	; (8005238 <HAL_DMA_IRQHandler+0x1c8>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d031      	beq.n	8005204 <HAL_DMA_IRQHandler+0x194>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a25      	ldr	r2, [pc, #148]	; (800523c <HAL_DMA_IRQHandler+0x1cc>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d02c      	beq.n	8005204 <HAL_DMA_IRQHandler+0x194>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a24      	ldr	r2, [pc, #144]	; (8005240 <HAL_DMA_IRQHandler+0x1d0>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d027      	beq.n	8005204 <HAL_DMA_IRQHandler+0x194>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a22      	ldr	r2, [pc, #136]	; (8005244 <HAL_DMA_IRQHandler+0x1d4>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d022      	beq.n	8005204 <HAL_DMA_IRQHandler+0x194>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a21      	ldr	r2, [pc, #132]	; (8005248 <HAL_DMA_IRQHandler+0x1d8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d01d      	beq.n	8005204 <HAL_DMA_IRQHandler+0x194>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a1f      	ldr	r2, [pc, #124]	; (800524c <HAL_DMA_IRQHandler+0x1dc>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d018      	beq.n	8005204 <HAL_DMA_IRQHandler+0x194>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a1e      	ldr	r2, [pc, #120]	; (8005250 <HAL_DMA_IRQHandler+0x1e0>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d013      	beq.n	8005204 <HAL_DMA_IRQHandler+0x194>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a1c      	ldr	r2, [pc, #112]	; (8005254 <HAL_DMA_IRQHandler+0x1e4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d00e      	beq.n	8005204 <HAL_DMA_IRQHandler+0x194>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a1b      	ldr	r2, [pc, #108]	; (8005258 <HAL_DMA_IRQHandler+0x1e8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d009      	beq.n	8005204 <HAL_DMA_IRQHandler+0x194>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a19      	ldr	r2, [pc, #100]	; (800525c <HAL_DMA_IRQHandler+0x1ec>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d004      	beq.n	8005204 <HAL_DMA_IRQHandler+0x194>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a18      	ldr	r2, [pc, #96]	; (8005260 <HAL_DMA_IRQHandler+0x1f0>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d12f      	bne.n	8005264 <HAL_DMA_IRQHandler+0x1f4>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0304 	and.w	r3, r3, #4
 800520e:	2b00      	cmp	r3, #0
 8005210:	bf14      	ite	ne
 8005212:	2301      	movne	r3, #1
 8005214:	2300      	moveq	r3, #0
 8005216:	b2db      	uxtb	r3, r3
 8005218:	e02e      	b.n	8005278 <HAL_DMA_IRQHandler+0x208>
 800521a:	bf00      	nop
 800521c:	24000028 	.word	0x24000028
 8005220:	1b4e81b5 	.word	0x1b4e81b5
 8005224:	40020010 	.word	0x40020010
 8005228:	40020028 	.word	0x40020028
 800522c:	40020040 	.word	0x40020040
 8005230:	40020058 	.word	0x40020058
 8005234:	40020070 	.word	0x40020070
 8005238:	40020088 	.word	0x40020088
 800523c:	400200a0 	.word	0x400200a0
 8005240:	400200b8 	.word	0x400200b8
 8005244:	40020410 	.word	0x40020410
 8005248:	40020428 	.word	0x40020428
 800524c:	40020440 	.word	0x40020440
 8005250:	40020458 	.word	0x40020458
 8005254:	40020470 	.word	0x40020470
 8005258:	40020488 	.word	0x40020488
 800525c:	400204a0 	.word	0x400204a0
 8005260:	400204b8 	.word	0x400204b8
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b00      	cmp	r3, #0
 8005270:	bf14      	ite	ne
 8005272:	2301      	movne	r3, #1
 8005274:	2300      	moveq	r3, #0
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	d015      	beq.n	80052a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0204 	bic.w	r2, r2, #4
 800528a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005290:	f003 031f 	and.w	r3, r3, #31
 8005294:	2208      	movs	r2, #8
 8005296:	409a      	lsls	r2, r3
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a0:	f043 0201 	orr.w	r2, r3, #1
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ac:	f003 031f 	and.w	r3, r3, #31
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	fa22 f303 	lsr.w	r3, r2, r3
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d06e      	beq.n	800539c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a69      	ldr	r2, [pc, #420]	; (8005468 <HAL_DMA_IRQHandler+0x3f8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d04a      	beq.n	800535e <HAL_DMA_IRQHandler+0x2ee>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a67      	ldr	r2, [pc, #412]	; (800546c <HAL_DMA_IRQHandler+0x3fc>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d045      	beq.n	800535e <HAL_DMA_IRQHandler+0x2ee>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a66      	ldr	r2, [pc, #408]	; (8005470 <HAL_DMA_IRQHandler+0x400>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d040      	beq.n	800535e <HAL_DMA_IRQHandler+0x2ee>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a64      	ldr	r2, [pc, #400]	; (8005474 <HAL_DMA_IRQHandler+0x404>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d03b      	beq.n	800535e <HAL_DMA_IRQHandler+0x2ee>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a63      	ldr	r2, [pc, #396]	; (8005478 <HAL_DMA_IRQHandler+0x408>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d036      	beq.n	800535e <HAL_DMA_IRQHandler+0x2ee>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a61      	ldr	r2, [pc, #388]	; (800547c <HAL_DMA_IRQHandler+0x40c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d031      	beq.n	800535e <HAL_DMA_IRQHandler+0x2ee>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a60      	ldr	r2, [pc, #384]	; (8005480 <HAL_DMA_IRQHandler+0x410>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d02c      	beq.n	800535e <HAL_DMA_IRQHandler+0x2ee>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a5e      	ldr	r2, [pc, #376]	; (8005484 <HAL_DMA_IRQHandler+0x414>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d027      	beq.n	800535e <HAL_DMA_IRQHandler+0x2ee>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a5d      	ldr	r2, [pc, #372]	; (8005488 <HAL_DMA_IRQHandler+0x418>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d022      	beq.n	800535e <HAL_DMA_IRQHandler+0x2ee>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a5b      	ldr	r2, [pc, #364]	; (800548c <HAL_DMA_IRQHandler+0x41c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d01d      	beq.n	800535e <HAL_DMA_IRQHandler+0x2ee>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a5a      	ldr	r2, [pc, #360]	; (8005490 <HAL_DMA_IRQHandler+0x420>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d018      	beq.n	800535e <HAL_DMA_IRQHandler+0x2ee>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a58      	ldr	r2, [pc, #352]	; (8005494 <HAL_DMA_IRQHandler+0x424>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d013      	beq.n	800535e <HAL_DMA_IRQHandler+0x2ee>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a57      	ldr	r2, [pc, #348]	; (8005498 <HAL_DMA_IRQHandler+0x428>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00e      	beq.n	800535e <HAL_DMA_IRQHandler+0x2ee>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a55      	ldr	r2, [pc, #340]	; (800549c <HAL_DMA_IRQHandler+0x42c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d009      	beq.n	800535e <HAL_DMA_IRQHandler+0x2ee>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a54      	ldr	r2, [pc, #336]	; (80054a0 <HAL_DMA_IRQHandler+0x430>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d004      	beq.n	800535e <HAL_DMA_IRQHandler+0x2ee>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a52      	ldr	r2, [pc, #328]	; (80054a4 <HAL_DMA_IRQHandler+0x434>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d10a      	bne.n	8005374 <HAL_DMA_IRQHandler+0x304>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005368:	2b00      	cmp	r3, #0
 800536a:	bf14      	ite	ne
 800536c:	2301      	movne	r3, #1
 800536e:	2300      	moveq	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	e003      	b.n	800537c <HAL_DMA_IRQHandler+0x30c>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2300      	movs	r3, #0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00d      	beq.n	800539c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005384:	f003 031f 	and.w	r3, r3, #31
 8005388:	2201      	movs	r2, #1
 800538a:	409a      	lsls	r2, r3
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005394:	f043 0202 	orr.w	r2, r3, #2
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a0:	f003 031f 	and.w	r3, r3, #31
 80053a4:	2204      	movs	r2, #4
 80053a6:	409a      	lsls	r2, r3
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	4013      	ands	r3, r2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 808f 	beq.w	80054d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a2c      	ldr	r2, [pc, #176]	; (8005468 <HAL_DMA_IRQHandler+0x3f8>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d04a      	beq.n	8005452 <HAL_DMA_IRQHandler+0x3e2>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a2a      	ldr	r2, [pc, #168]	; (800546c <HAL_DMA_IRQHandler+0x3fc>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d045      	beq.n	8005452 <HAL_DMA_IRQHandler+0x3e2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a29      	ldr	r2, [pc, #164]	; (8005470 <HAL_DMA_IRQHandler+0x400>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d040      	beq.n	8005452 <HAL_DMA_IRQHandler+0x3e2>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a27      	ldr	r2, [pc, #156]	; (8005474 <HAL_DMA_IRQHandler+0x404>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d03b      	beq.n	8005452 <HAL_DMA_IRQHandler+0x3e2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a26      	ldr	r2, [pc, #152]	; (8005478 <HAL_DMA_IRQHandler+0x408>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d036      	beq.n	8005452 <HAL_DMA_IRQHandler+0x3e2>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a24      	ldr	r2, [pc, #144]	; (800547c <HAL_DMA_IRQHandler+0x40c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d031      	beq.n	8005452 <HAL_DMA_IRQHandler+0x3e2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a23      	ldr	r2, [pc, #140]	; (8005480 <HAL_DMA_IRQHandler+0x410>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d02c      	beq.n	8005452 <HAL_DMA_IRQHandler+0x3e2>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a21      	ldr	r2, [pc, #132]	; (8005484 <HAL_DMA_IRQHandler+0x414>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d027      	beq.n	8005452 <HAL_DMA_IRQHandler+0x3e2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a20      	ldr	r2, [pc, #128]	; (8005488 <HAL_DMA_IRQHandler+0x418>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d022      	beq.n	8005452 <HAL_DMA_IRQHandler+0x3e2>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a1e      	ldr	r2, [pc, #120]	; (800548c <HAL_DMA_IRQHandler+0x41c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d01d      	beq.n	8005452 <HAL_DMA_IRQHandler+0x3e2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a1d      	ldr	r2, [pc, #116]	; (8005490 <HAL_DMA_IRQHandler+0x420>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d018      	beq.n	8005452 <HAL_DMA_IRQHandler+0x3e2>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1b      	ldr	r2, [pc, #108]	; (8005494 <HAL_DMA_IRQHandler+0x424>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d013      	beq.n	8005452 <HAL_DMA_IRQHandler+0x3e2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a1a      	ldr	r2, [pc, #104]	; (8005498 <HAL_DMA_IRQHandler+0x428>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00e      	beq.n	8005452 <HAL_DMA_IRQHandler+0x3e2>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a18      	ldr	r2, [pc, #96]	; (800549c <HAL_DMA_IRQHandler+0x42c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d009      	beq.n	8005452 <HAL_DMA_IRQHandler+0x3e2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a17      	ldr	r2, [pc, #92]	; (80054a0 <HAL_DMA_IRQHandler+0x430>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d004      	beq.n	8005452 <HAL_DMA_IRQHandler+0x3e2>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a15      	ldr	r2, [pc, #84]	; (80054a4 <HAL_DMA_IRQHandler+0x434>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d12a      	bne.n	80054a8 <HAL_DMA_IRQHandler+0x438>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	bf14      	ite	ne
 8005460:	2301      	movne	r3, #1
 8005462:	2300      	moveq	r3, #0
 8005464:	b2db      	uxtb	r3, r3
 8005466:	e023      	b.n	80054b0 <HAL_DMA_IRQHandler+0x440>
 8005468:	40020010 	.word	0x40020010
 800546c:	40020028 	.word	0x40020028
 8005470:	40020040 	.word	0x40020040
 8005474:	40020058 	.word	0x40020058
 8005478:	40020070 	.word	0x40020070
 800547c:	40020088 	.word	0x40020088
 8005480:	400200a0 	.word	0x400200a0
 8005484:	400200b8 	.word	0x400200b8
 8005488:	40020410 	.word	0x40020410
 800548c:	40020428 	.word	0x40020428
 8005490:	40020440 	.word	0x40020440
 8005494:	40020458 	.word	0x40020458
 8005498:	40020470 	.word	0x40020470
 800549c:	40020488 	.word	0x40020488
 80054a0:	400204a0 	.word	0x400204a0
 80054a4:	400204b8 	.word	0x400204b8
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2300      	movs	r3, #0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00d      	beq.n	80054d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b8:	f003 031f 	and.w	r3, r3, #31
 80054bc:	2204      	movs	r2, #4
 80054be:	409a      	lsls	r2, r3
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c8:	f043 0204 	orr.w	r2, r3, #4
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d4:	f003 031f 	and.w	r3, r3, #31
 80054d8:	2210      	movs	r2, #16
 80054da:	409a      	lsls	r2, r3
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	4013      	ands	r3, r2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 80a6 	beq.w	8005632 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a85      	ldr	r2, [pc, #532]	; (8005700 <HAL_DMA_IRQHandler+0x690>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d04a      	beq.n	8005586 <HAL_DMA_IRQHandler+0x516>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a83      	ldr	r2, [pc, #524]	; (8005704 <HAL_DMA_IRQHandler+0x694>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d045      	beq.n	8005586 <HAL_DMA_IRQHandler+0x516>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a82      	ldr	r2, [pc, #520]	; (8005708 <HAL_DMA_IRQHandler+0x698>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d040      	beq.n	8005586 <HAL_DMA_IRQHandler+0x516>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a80      	ldr	r2, [pc, #512]	; (800570c <HAL_DMA_IRQHandler+0x69c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d03b      	beq.n	8005586 <HAL_DMA_IRQHandler+0x516>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a7f      	ldr	r2, [pc, #508]	; (8005710 <HAL_DMA_IRQHandler+0x6a0>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d036      	beq.n	8005586 <HAL_DMA_IRQHandler+0x516>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a7d      	ldr	r2, [pc, #500]	; (8005714 <HAL_DMA_IRQHandler+0x6a4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d031      	beq.n	8005586 <HAL_DMA_IRQHandler+0x516>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a7c      	ldr	r2, [pc, #496]	; (8005718 <HAL_DMA_IRQHandler+0x6a8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d02c      	beq.n	8005586 <HAL_DMA_IRQHandler+0x516>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a7a      	ldr	r2, [pc, #488]	; (800571c <HAL_DMA_IRQHandler+0x6ac>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d027      	beq.n	8005586 <HAL_DMA_IRQHandler+0x516>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a79      	ldr	r2, [pc, #484]	; (8005720 <HAL_DMA_IRQHandler+0x6b0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d022      	beq.n	8005586 <HAL_DMA_IRQHandler+0x516>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a77      	ldr	r2, [pc, #476]	; (8005724 <HAL_DMA_IRQHandler+0x6b4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d01d      	beq.n	8005586 <HAL_DMA_IRQHandler+0x516>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a76      	ldr	r2, [pc, #472]	; (8005728 <HAL_DMA_IRQHandler+0x6b8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d018      	beq.n	8005586 <HAL_DMA_IRQHandler+0x516>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a74      	ldr	r2, [pc, #464]	; (800572c <HAL_DMA_IRQHandler+0x6bc>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <HAL_DMA_IRQHandler+0x516>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a73      	ldr	r2, [pc, #460]	; (8005730 <HAL_DMA_IRQHandler+0x6c0>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d00e      	beq.n	8005586 <HAL_DMA_IRQHandler+0x516>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a71      	ldr	r2, [pc, #452]	; (8005734 <HAL_DMA_IRQHandler+0x6c4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d009      	beq.n	8005586 <HAL_DMA_IRQHandler+0x516>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a70      	ldr	r2, [pc, #448]	; (8005738 <HAL_DMA_IRQHandler+0x6c8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d004      	beq.n	8005586 <HAL_DMA_IRQHandler+0x516>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a6e      	ldr	r2, [pc, #440]	; (800573c <HAL_DMA_IRQHandler+0x6cc>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d10a      	bne.n	800559c <HAL_DMA_IRQHandler+0x52c>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b00      	cmp	r3, #0
 8005592:	bf14      	ite	ne
 8005594:	2301      	movne	r3, #1
 8005596:	2300      	moveq	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	e009      	b.n	80055b0 <HAL_DMA_IRQHandler+0x540>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0304 	and.w	r3, r3, #4
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	bf14      	ite	ne
 80055aa:	2301      	movne	r3, #1
 80055ac:	2300      	moveq	r3, #0
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d03e      	beq.n	8005632 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b8:	f003 031f 	and.w	r3, r3, #31
 80055bc:	2210      	movs	r2, #16
 80055be:	409a      	lsls	r2, r3
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d018      	beq.n	8005604 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d108      	bne.n	80055f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d024      	beq.n	8005632 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	4798      	blx	r3
 80055f0:	e01f      	b.n	8005632 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d01b      	beq.n	8005632 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	4798      	blx	r3
 8005602:	e016      	b.n	8005632 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560e:	2b00      	cmp	r3, #0
 8005610:	d107      	bne.n	8005622 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0208 	bic.w	r2, r2, #8
 8005620:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005636:	f003 031f 	and.w	r3, r3, #31
 800563a:	2220      	movs	r2, #32
 800563c:	409a      	lsls	r2, r3
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	4013      	ands	r3, r2
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 8110 	beq.w	8005868 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a2c      	ldr	r2, [pc, #176]	; (8005700 <HAL_DMA_IRQHandler+0x690>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d04a      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x678>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a2b      	ldr	r2, [pc, #172]	; (8005704 <HAL_DMA_IRQHandler+0x694>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d045      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x678>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a29      	ldr	r2, [pc, #164]	; (8005708 <HAL_DMA_IRQHandler+0x698>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d040      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x678>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a28      	ldr	r2, [pc, #160]	; (800570c <HAL_DMA_IRQHandler+0x69c>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d03b      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x678>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a26      	ldr	r2, [pc, #152]	; (8005710 <HAL_DMA_IRQHandler+0x6a0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d036      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x678>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a25      	ldr	r2, [pc, #148]	; (8005714 <HAL_DMA_IRQHandler+0x6a4>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d031      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x678>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a23      	ldr	r2, [pc, #140]	; (8005718 <HAL_DMA_IRQHandler+0x6a8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d02c      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x678>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a22      	ldr	r2, [pc, #136]	; (800571c <HAL_DMA_IRQHandler+0x6ac>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d027      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x678>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a20      	ldr	r2, [pc, #128]	; (8005720 <HAL_DMA_IRQHandler+0x6b0>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d022      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x678>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a1f      	ldr	r2, [pc, #124]	; (8005724 <HAL_DMA_IRQHandler+0x6b4>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d01d      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x678>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a1d      	ldr	r2, [pc, #116]	; (8005728 <HAL_DMA_IRQHandler+0x6b8>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d018      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x678>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a1c      	ldr	r2, [pc, #112]	; (800572c <HAL_DMA_IRQHandler+0x6bc>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d013      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x678>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a1a      	ldr	r2, [pc, #104]	; (8005730 <HAL_DMA_IRQHandler+0x6c0>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d00e      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x678>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a19      	ldr	r2, [pc, #100]	; (8005734 <HAL_DMA_IRQHandler+0x6c4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d009      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x678>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a17      	ldr	r2, [pc, #92]	; (8005738 <HAL_DMA_IRQHandler+0x6c8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d004      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x678>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a16      	ldr	r2, [pc, #88]	; (800573c <HAL_DMA_IRQHandler+0x6cc>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d12b      	bne.n	8005740 <HAL_DMA_IRQHandler+0x6d0>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0310 	and.w	r3, r3, #16
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	bf14      	ite	ne
 80056f6:	2301      	movne	r3, #1
 80056f8:	2300      	moveq	r3, #0
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	e02a      	b.n	8005754 <HAL_DMA_IRQHandler+0x6e4>
 80056fe:	bf00      	nop
 8005700:	40020010 	.word	0x40020010
 8005704:	40020028 	.word	0x40020028
 8005708:	40020040 	.word	0x40020040
 800570c:	40020058 	.word	0x40020058
 8005710:	40020070 	.word	0x40020070
 8005714:	40020088 	.word	0x40020088
 8005718:	400200a0 	.word	0x400200a0
 800571c:	400200b8 	.word	0x400200b8
 8005720:	40020410 	.word	0x40020410
 8005724:	40020428 	.word	0x40020428
 8005728:	40020440 	.word	0x40020440
 800572c:	40020458 	.word	0x40020458
 8005730:	40020470 	.word	0x40020470
 8005734:	40020488 	.word	0x40020488
 8005738:	400204a0 	.word	0x400204a0
 800573c:	400204b8 	.word	0x400204b8
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	bf14      	ite	ne
 800574e:	2301      	movne	r3, #1
 8005750:	2300      	moveq	r3, #0
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 8087 	beq.w	8005868 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800575e:	f003 031f 	and.w	r3, r3, #31
 8005762:	2220      	movs	r2, #32
 8005764:	409a      	lsls	r2, r3
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b04      	cmp	r3, #4
 8005774:	d139      	bne.n	80057ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 0216 	bic.w	r2, r2, #22
 8005784:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	695a      	ldr	r2, [r3, #20]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005794:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	2b00      	cmp	r3, #0
 800579c:	d103      	bne.n	80057a6 <HAL_DMA_IRQHandler+0x736>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d007      	beq.n	80057b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0208 	bic.w	r2, r2, #8
 80057b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ba:	f003 031f 	and.w	r3, r3, #31
 80057be:	223f      	movs	r2, #63	; 0x3f
 80057c0:	409a      	lsls	r2, r3
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 834a 	beq.w	8005e74 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	4798      	blx	r3
          }
          return;
 80057e8:	e344      	b.n	8005e74 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d018      	beq.n	800582a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d108      	bne.n	8005818 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800580a:	2b00      	cmp	r3, #0
 800580c:	d02c      	beq.n	8005868 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	4798      	blx	r3
 8005816:	e027      	b.n	8005868 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d023      	beq.n	8005868 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	4798      	blx	r3
 8005828:	e01e      	b.n	8005868 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10f      	bne.n	8005858 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0210 	bic.w	r2, r2, #16
 8005846:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 8306 	beq.w	8005e7e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	f000 8088 	beq.w	8005990 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2204      	movs	r2, #4
 8005884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a7a      	ldr	r2, [pc, #488]	; (8005a78 <HAL_DMA_IRQHandler+0xa08>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d04a      	beq.n	8005928 <HAL_DMA_IRQHandler+0x8b8>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a79      	ldr	r2, [pc, #484]	; (8005a7c <HAL_DMA_IRQHandler+0xa0c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d045      	beq.n	8005928 <HAL_DMA_IRQHandler+0x8b8>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a77      	ldr	r2, [pc, #476]	; (8005a80 <HAL_DMA_IRQHandler+0xa10>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d040      	beq.n	8005928 <HAL_DMA_IRQHandler+0x8b8>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a76      	ldr	r2, [pc, #472]	; (8005a84 <HAL_DMA_IRQHandler+0xa14>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d03b      	beq.n	8005928 <HAL_DMA_IRQHandler+0x8b8>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a74      	ldr	r2, [pc, #464]	; (8005a88 <HAL_DMA_IRQHandler+0xa18>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d036      	beq.n	8005928 <HAL_DMA_IRQHandler+0x8b8>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a73      	ldr	r2, [pc, #460]	; (8005a8c <HAL_DMA_IRQHandler+0xa1c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d031      	beq.n	8005928 <HAL_DMA_IRQHandler+0x8b8>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a71      	ldr	r2, [pc, #452]	; (8005a90 <HAL_DMA_IRQHandler+0xa20>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d02c      	beq.n	8005928 <HAL_DMA_IRQHandler+0x8b8>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a70      	ldr	r2, [pc, #448]	; (8005a94 <HAL_DMA_IRQHandler+0xa24>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d027      	beq.n	8005928 <HAL_DMA_IRQHandler+0x8b8>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a6e      	ldr	r2, [pc, #440]	; (8005a98 <HAL_DMA_IRQHandler+0xa28>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d022      	beq.n	8005928 <HAL_DMA_IRQHandler+0x8b8>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a6d      	ldr	r2, [pc, #436]	; (8005a9c <HAL_DMA_IRQHandler+0xa2c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d01d      	beq.n	8005928 <HAL_DMA_IRQHandler+0x8b8>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a6b      	ldr	r2, [pc, #428]	; (8005aa0 <HAL_DMA_IRQHandler+0xa30>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d018      	beq.n	8005928 <HAL_DMA_IRQHandler+0x8b8>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a6a      	ldr	r2, [pc, #424]	; (8005aa4 <HAL_DMA_IRQHandler+0xa34>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d013      	beq.n	8005928 <HAL_DMA_IRQHandler+0x8b8>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a68      	ldr	r2, [pc, #416]	; (8005aa8 <HAL_DMA_IRQHandler+0xa38>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00e      	beq.n	8005928 <HAL_DMA_IRQHandler+0x8b8>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a67      	ldr	r2, [pc, #412]	; (8005aac <HAL_DMA_IRQHandler+0xa3c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d009      	beq.n	8005928 <HAL_DMA_IRQHandler+0x8b8>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a65      	ldr	r2, [pc, #404]	; (8005ab0 <HAL_DMA_IRQHandler+0xa40>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d004      	beq.n	8005928 <HAL_DMA_IRQHandler+0x8b8>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a64      	ldr	r2, [pc, #400]	; (8005ab4 <HAL_DMA_IRQHandler+0xa44>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d108      	bne.n	800593a <HAL_DMA_IRQHandler+0x8ca>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0201 	bic.w	r2, r2, #1
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	e007      	b.n	800594a <HAL_DMA_IRQHandler+0x8da>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0201 	bic.w	r2, r2, #1
 8005948:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	3301      	adds	r3, #1
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005952:	429a      	cmp	r2, r3
 8005954:	d307      	bcc.n	8005966 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1f2      	bne.n	800594a <HAL_DMA_IRQHandler+0x8da>
 8005964:	e000      	b.n	8005968 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005966:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d004      	beq.n	8005980 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2203      	movs	r2, #3
 800597a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800597e:	e003      	b.n	8005988 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 8272 	beq.w	8005e7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	4798      	blx	r3
 80059a2:	e26c      	b.n	8005e7e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a43      	ldr	r2, [pc, #268]	; (8005ab8 <HAL_DMA_IRQHandler+0xa48>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d022      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x984>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a42      	ldr	r2, [pc, #264]	; (8005abc <HAL_DMA_IRQHandler+0xa4c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d01d      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x984>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a40      	ldr	r2, [pc, #256]	; (8005ac0 <HAL_DMA_IRQHandler+0xa50>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d018      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x984>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a3f      	ldr	r2, [pc, #252]	; (8005ac4 <HAL_DMA_IRQHandler+0xa54>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d013      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x984>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a3d      	ldr	r2, [pc, #244]	; (8005ac8 <HAL_DMA_IRQHandler+0xa58>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00e      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x984>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a3c      	ldr	r2, [pc, #240]	; (8005acc <HAL_DMA_IRQHandler+0xa5c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d009      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x984>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a3a      	ldr	r2, [pc, #232]	; (8005ad0 <HAL_DMA_IRQHandler+0xa60>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d004      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x984>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a39      	ldr	r2, [pc, #228]	; (8005ad4 <HAL_DMA_IRQHandler+0xa64>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d101      	bne.n	80059f8 <HAL_DMA_IRQHandler+0x988>
 80059f4:	2301      	movs	r3, #1
 80059f6:	e000      	b.n	80059fa <HAL_DMA_IRQHandler+0x98a>
 80059f8:	2300      	movs	r3, #0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 823f 	beq.w	8005e7e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a0c:	f003 031f 	and.w	r3, r3, #31
 8005a10:	2204      	movs	r2, #4
 8005a12:	409a      	lsls	r2, r3
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	4013      	ands	r3, r2
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 80cd 	beq.w	8005bb8 <HAL_DMA_IRQHandler+0xb48>
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 80c7 	beq.w	8005bb8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a2e:	f003 031f 	and.w	r3, r3, #31
 8005a32:	2204      	movs	r2, #4
 8005a34:	409a      	lsls	r2, r3
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d049      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d109      	bne.n	8005a62 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 8210 	beq.w	8005e78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a60:	e20a      	b.n	8005e78 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 8206 	beq.w	8005e78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a74:	e200      	b.n	8005e78 <HAL_DMA_IRQHandler+0xe08>
 8005a76:	bf00      	nop
 8005a78:	40020010 	.word	0x40020010
 8005a7c:	40020028 	.word	0x40020028
 8005a80:	40020040 	.word	0x40020040
 8005a84:	40020058 	.word	0x40020058
 8005a88:	40020070 	.word	0x40020070
 8005a8c:	40020088 	.word	0x40020088
 8005a90:	400200a0 	.word	0x400200a0
 8005a94:	400200b8 	.word	0x400200b8
 8005a98:	40020410 	.word	0x40020410
 8005a9c:	40020428 	.word	0x40020428
 8005aa0:	40020440 	.word	0x40020440
 8005aa4:	40020458 	.word	0x40020458
 8005aa8:	40020470 	.word	0x40020470
 8005aac:	40020488 	.word	0x40020488
 8005ab0:	400204a0 	.word	0x400204a0
 8005ab4:	400204b8 	.word	0x400204b8
 8005ab8:	58025408 	.word	0x58025408
 8005abc:	5802541c 	.word	0x5802541c
 8005ac0:	58025430 	.word	0x58025430
 8005ac4:	58025444 	.word	0x58025444
 8005ac8:	58025458 	.word	0x58025458
 8005acc:	5802546c 	.word	0x5802546c
 8005ad0:	58025480 	.word	0x58025480
 8005ad4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f003 0320 	and.w	r3, r3, #32
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d160      	bne.n	8005ba4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a8c      	ldr	r2, [pc, #560]	; (8005d18 <HAL_DMA_IRQHandler+0xca8>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d04a      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xb12>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a8a      	ldr	r2, [pc, #552]	; (8005d1c <HAL_DMA_IRQHandler+0xcac>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d045      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xb12>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a89      	ldr	r2, [pc, #548]	; (8005d20 <HAL_DMA_IRQHandler+0xcb0>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d040      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xb12>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a87      	ldr	r2, [pc, #540]	; (8005d24 <HAL_DMA_IRQHandler+0xcb4>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d03b      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xb12>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a86      	ldr	r2, [pc, #536]	; (8005d28 <HAL_DMA_IRQHandler+0xcb8>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d036      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xb12>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a84      	ldr	r2, [pc, #528]	; (8005d2c <HAL_DMA_IRQHandler+0xcbc>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d031      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xb12>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a83      	ldr	r2, [pc, #524]	; (8005d30 <HAL_DMA_IRQHandler+0xcc0>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d02c      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xb12>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a81      	ldr	r2, [pc, #516]	; (8005d34 <HAL_DMA_IRQHandler+0xcc4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d027      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xb12>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a80      	ldr	r2, [pc, #512]	; (8005d38 <HAL_DMA_IRQHandler+0xcc8>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d022      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xb12>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a7e      	ldr	r2, [pc, #504]	; (8005d3c <HAL_DMA_IRQHandler+0xccc>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d01d      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xb12>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a7d      	ldr	r2, [pc, #500]	; (8005d40 <HAL_DMA_IRQHandler+0xcd0>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d018      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xb12>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a7b      	ldr	r2, [pc, #492]	; (8005d44 <HAL_DMA_IRQHandler+0xcd4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d013      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xb12>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a7a      	ldr	r2, [pc, #488]	; (8005d48 <HAL_DMA_IRQHandler+0xcd8>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00e      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xb12>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a78      	ldr	r2, [pc, #480]	; (8005d4c <HAL_DMA_IRQHandler+0xcdc>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d009      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xb12>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a77      	ldr	r2, [pc, #476]	; (8005d50 <HAL_DMA_IRQHandler+0xce0>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d004      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xb12>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a75      	ldr	r2, [pc, #468]	; (8005d54 <HAL_DMA_IRQHandler+0xce4>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d108      	bne.n	8005b94 <HAL_DMA_IRQHandler+0xb24>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 0208 	bic.w	r2, r2, #8
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	e007      	b.n	8005ba4 <HAL_DMA_IRQHandler+0xb34>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0204 	bic.w	r2, r2, #4
 8005ba2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 8165 	beq.w	8005e78 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bb6:	e15f      	b.n	8005e78 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bbc:	f003 031f 	and.w	r3, r3, #31
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	409a      	lsls	r2, r3
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 80c5 	beq.w	8005d58 <HAL_DMA_IRQHandler+0xce8>
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f003 0302 	and.w	r3, r3, #2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 80bf 	beq.w	8005d58 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bde:	f003 031f 	and.w	r3, r3, #31
 8005be2:	2202      	movs	r2, #2
 8005be4:	409a      	lsls	r2, r3
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d018      	beq.n	8005c26 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d109      	bne.n	8005c12 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 813a 	beq.w	8005e7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c10:	e134      	b.n	8005e7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 8130 	beq.w	8005e7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c24:	e12a      	b.n	8005e7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f003 0320 	and.w	r3, r3, #32
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d168      	bne.n	8005d02 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a38      	ldr	r2, [pc, #224]	; (8005d18 <HAL_DMA_IRQHandler+0xca8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d04a      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0xc60>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a37      	ldr	r2, [pc, #220]	; (8005d1c <HAL_DMA_IRQHandler+0xcac>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d045      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0xc60>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a35      	ldr	r2, [pc, #212]	; (8005d20 <HAL_DMA_IRQHandler+0xcb0>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d040      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0xc60>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a34      	ldr	r2, [pc, #208]	; (8005d24 <HAL_DMA_IRQHandler+0xcb4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d03b      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0xc60>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a32      	ldr	r2, [pc, #200]	; (8005d28 <HAL_DMA_IRQHandler+0xcb8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d036      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0xc60>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a31      	ldr	r2, [pc, #196]	; (8005d2c <HAL_DMA_IRQHandler+0xcbc>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d031      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0xc60>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a2f      	ldr	r2, [pc, #188]	; (8005d30 <HAL_DMA_IRQHandler+0xcc0>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d02c      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0xc60>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a2e      	ldr	r2, [pc, #184]	; (8005d34 <HAL_DMA_IRQHandler+0xcc4>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d027      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0xc60>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a2c      	ldr	r2, [pc, #176]	; (8005d38 <HAL_DMA_IRQHandler+0xcc8>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d022      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0xc60>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a2b      	ldr	r2, [pc, #172]	; (8005d3c <HAL_DMA_IRQHandler+0xccc>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d01d      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0xc60>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a29      	ldr	r2, [pc, #164]	; (8005d40 <HAL_DMA_IRQHandler+0xcd0>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d018      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0xc60>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a28      	ldr	r2, [pc, #160]	; (8005d44 <HAL_DMA_IRQHandler+0xcd4>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d013      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0xc60>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a26      	ldr	r2, [pc, #152]	; (8005d48 <HAL_DMA_IRQHandler+0xcd8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00e      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0xc60>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a25      	ldr	r2, [pc, #148]	; (8005d4c <HAL_DMA_IRQHandler+0xcdc>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d009      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0xc60>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a23      	ldr	r2, [pc, #140]	; (8005d50 <HAL_DMA_IRQHandler+0xce0>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d004      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0xc60>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a22      	ldr	r2, [pc, #136]	; (8005d54 <HAL_DMA_IRQHandler+0xce4>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d108      	bne.n	8005ce2 <HAL_DMA_IRQHandler+0xc72>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0214 	bic.w	r2, r2, #20
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	e007      	b.n	8005cf2 <HAL_DMA_IRQHandler+0xc82>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 020a 	bic.w	r2, r2, #10
 8005cf0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 80b8 	beq.w	8005e7c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d14:	e0b2      	b.n	8005e7c <HAL_DMA_IRQHandler+0xe0c>
 8005d16:	bf00      	nop
 8005d18:	40020010 	.word	0x40020010
 8005d1c:	40020028 	.word	0x40020028
 8005d20:	40020040 	.word	0x40020040
 8005d24:	40020058 	.word	0x40020058
 8005d28:	40020070 	.word	0x40020070
 8005d2c:	40020088 	.word	0x40020088
 8005d30:	400200a0 	.word	0x400200a0
 8005d34:	400200b8 	.word	0x400200b8
 8005d38:	40020410 	.word	0x40020410
 8005d3c:	40020428 	.word	0x40020428
 8005d40:	40020440 	.word	0x40020440
 8005d44:	40020458 	.word	0x40020458
 8005d48:	40020470 	.word	0x40020470
 8005d4c:	40020488 	.word	0x40020488
 8005d50:	400204a0 	.word	0x400204a0
 8005d54:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5c:	f003 031f 	and.w	r3, r3, #31
 8005d60:	2208      	movs	r2, #8
 8005d62:	409a      	lsls	r2, r3
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	4013      	ands	r3, r2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 8088 	beq.w	8005e7e <HAL_DMA_IRQHandler+0xe0e>
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f003 0308 	and.w	r3, r3, #8
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f000 8082 	beq.w	8005e7e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a41      	ldr	r2, [pc, #260]	; (8005e84 <HAL_DMA_IRQHandler+0xe14>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d04a      	beq.n	8005e1a <HAL_DMA_IRQHandler+0xdaa>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a3f      	ldr	r2, [pc, #252]	; (8005e88 <HAL_DMA_IRQHandler+0xe18>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d045      	beq.n	8005e1a <HAL_DMA_IRQHandler+0xdaa>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a3e      	ldr	r2, [pc, #248]	; (8005e8c <HAL_DMA_IRQHandler+0xe1c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d040      	beq.n	8005e1a <HAL_DMA_IRQHandler+0xdaa>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a3c      	ldr	r2, [pc, #240]	; (8005e90 <HAL_DMA_IRQHandler+0xe20>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d03b      	beq.n	8005e1a <HAL_DMA_IRQHandler+0xdaa>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a3b      	ldr	r2, [pc, #236]	; (8005e94 <HAL_DMA_IRQHandler+0xe24>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d036      	beq.n	8005e1a <HAL_DMA_IRQHandler+0xdaa>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a39      	ldr	r2, [pc, #228]	; (8005e98 <HAL_DMA_IRQHandler+0xe28>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d031      	beq.n	8005e1a <HAL_DMA_IRQHandler+0xdaa>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a38      	ldr	r2, [pc, #224]	; (8005e9c <HAL_DMA_IRQHandler+0xe2c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d02c      	beq.n	8005e1a <HAL_DMA_IRQHandler+0xdaa>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a36      	ldr	r2, [pc, #216]	; (8005ea0 <HAL_DMA_IRQHandler+0xe30>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d027      	beq.n	8005e1a <HAL_DMA_IRQHandler+0xdaa>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a35      	ldr	r2, [pc, #212]	; (8005ea4 <HAL_DMA_IRQHandler+0xe34>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d022      	beq.n	8005e1a <HAL_DMA_IRQHandler+0xdaa>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a33      	ldr	r2, [pc, #204]	; (8005ea8 <HAL_DMA_IRQHandler+0xe38>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d01d      	beq.n	8005e1a <HAL_DMA_IRQHandler+0xdaa>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a32      	ldr	r2, [pc, #200]	; (8005eac <HAL_DMA_IRQHandler+0xe3c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d018      	beq.n	8005e1a <HAL_DMA_IRQHandler+0xdaa>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a30      	ldr	r2, [pc, #192]	; (8005eb0 <HAL_DMA_IRQHandler+0xe40>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d013      	beq.n	8005e1a <HAL_DMA_IRQHandler+0xdaa>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a2f      	ldr	r2, [pc, #188]	; (8005eb4 <HAL_DMA_IRQHandler+0xe44>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00e      	beq.n	8005e1a <HAL_DMA_IRQHandler+0xdaa>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a2d      	ldr	r2, [pc, #180]	; (8005eb8 <HAL_DMA_IRQHandler+0xe48>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d009      	beq.n	8005e1a <HAL_DMA_IRQHandler+0xdaa>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a2c      	ldr	r2, [pc, #176]	; (8005ebc <HAL_DMA_IRQHandler+0xe4c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d004      	beq.n	8005e1a <HAL_DMA_IRQHandler+0xdaa>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a2a      	ldr	r2, [pc, #168]	; (8005ec0 <HAL_DMA_IRQHandler+0xe50>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d108      	bne.n	8005e2c <HAL_DMA_IRQHandler+0xdbc>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 021c 	bic.w	r2, r2, #28
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	e007      	b.n	8005e3c <HAL_DMA_IRQHandler+0xdcc>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 020e 	bic.w	r2, r2, #14
 8005e3a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e40:	f003 031f 	and.w	r3, r3, #31
 8005e44:	2201      	movs	r2, #1
 8005e46:	409a      	lsls	r2, r3
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d009      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	4798      	blx	r3
 8005e72:	e004      	b.n	8005e7e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005e74:	bf00      	nop
 8005e76:	e002      	b.n	8005e7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e78:	bf00      	nop
 8005e7a:	e000      	b.n	8005e7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e7c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005e7e:	3728      	adds	r7, #40	; 0x28
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	40020010 	.word	0x40020010
 8005e88:	40020028 	.word	0x40020028
 8005e8c:	40020040 	.word	0x40020040
 8005e90:	40020058 	.word	0x40020058
 8005e94:	40020070 	.word	0x40020070
 8005e98:	40020088 	.word	0x40020088
 8005e9c:	400200a0 	.word	0x400200a0
 8005ea0:	400200b8 	.word	0x400200b8
 8005ea4:	40020410 	.word	0x40020410
 8005ea8:	40020428 	.word	0x40020428
 8005eac:	40020440 	.word	0x40020440
 8005eb0:	40020458 	.word	0x40020458
 8005eb4:	40020470 	.word	0x40020470
 8005eb8:	40020488 	.word	0x40020488
 8005ebc:	400204a0 	.word	0x400204a0
 8005ec0:	400204b8 	.word	0x400204b8

08005ec4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a42      	ldr	r2, [pc, #264]	; (8005fdc <DMA_CalcBaseAndBitshift+0x118>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d04a      	beq.n	8005f6c <DMA_CalcBaseAndBitshift+0xa8>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a41      	ldr	r2, [pc, #260]	; (8005fe0 <DMA_CalcBaseAndBitshift+0x11c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d045      	beq.n	8005f6c <DMA_CalcBaseAndBitshift+0xa8>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a3f      	ldr	r2, [pc, #252]	; (8005fe4 <DMA_CalcBaseAndBitshift+0x120>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d040      	beq.n	8005f6c <DMA_CalcBaseAndBitshift+0xa8>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a3e      	ldr	r2, [pc, #248]	; (8005fe8 <DMA_CalcBaseAndBitshift+0x124>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d03b      	beq.n	8005f6c <DMA_CalcBaseAndBitshift+0xa8>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a3c      	ldr	r2, [pc, #240]	; (8005fec <DMA_CalcBaseAndBitshift+0x128>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d036      	beq.n	8005f6c <DMA_CalcBaseAndBitshift+0xa8>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a3b      	ldr	r2, [pc, #236]	; (8005ff0 <DMA_CalcBaseAndBitshift+0x12c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d031      	beq.n	8005f6c <DMA_CalcBaseAndBitshift+0xa8>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a39      	ldr	r2, [pc, #228]	; (8005ff4 <DMA_CalcBaseAndBitshift+0x130>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d02c      	beq.n	8005f6c <DMA_CalcBaseAndBitshift+0xa8>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a38      	ldr	r2, [pc, #224]	; (8005ff8 <DMA_CalcBaseAndBitshift+0x134>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d027      	beq.n	8005f6c <DMA_CalcBaseAndBitshift+0xa8>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a36      	ldr	r2, [pc, #216]	; (8005ffc <DMA_CalcBaseAndBitshift+0x138>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d022      	beq.n	8005f6c <DMA_CalcBaseAndBitshift+0xa8>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a35      	ldr	r2, [pc, #212]	; (8006000 <DMA_CalcBaseAndBitshift+0x13c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d01d      	beq.n	8005f6c <DMA_CalcBaseAndBitshift+0xa8>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a33      	ldr	r2, [pc, #204]	; (8006004 <DMA_CalcBaseAndBitshift+0x140>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d018      	beq.n	8005f6c <DMA_CalcBaseAndBitshift+0xa8>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a32      	ldr	r2, [pc, #200]	; (8006008 <DMA_CalcBaseAndBitshift+0x144>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d013      	beq.n	8005f6c <DMA_CalcBaseAndBitshift+0xa8>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a30      	ldr	r2, [pc, #192]	; (800600c <DMA_CalcBaseAndBitshift+0x148>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d00e      	beq.n	8005f6c <DMA_CalcBaseAndBitshift+0xa8>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a2f      	ldr	r2, [pc, #188]	; (8006010 <DMA_CalcBaseAndBitshift+0x14c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d009      	beq.n	8005f6c <DMA_CalcBaseAndBitshift+0xa8>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a2d      	ldr	r2, [pc, #180]	; (8006014 <DMA_CalcBaseAndBitshift+0x150>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d004      	beq.n	8005f6c <DMA_CalcBaseAndBitshift+0xa8>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a2c      	ldr	r2, [pc, #176]	; (8006018 <DMA_CalcBaseAndBitshift+0x154>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d101      	bne.n	8005f70 <DMA_CalcBaseAndBitshift+0xac>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e000      	b.n	8005f72 <DMA_CalcBaseAndBitshift+0xae>
 8005f70:	2300      	movs	r3, #0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d024      	beq.n	8005fc0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	3b10      	subs	r3, #16
 8005f7e:	4a27      	ldr	r2, [pc, #156]	; (800601c <DMA_CalcBaseAndBitshift+0x158>)
 8005f80:	fba2 2303 	umull	r2, r3, r2, r3
 8005f84:	091b      	lsrs	r3, r3, #4
 8005f86:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	4a24      	ldr	r2, [pc, #144]	; (8006020 <DMA_CalcBaseAndBitshift+0x15c>)
 8005f90:	5cd3      	ldrb	r3, [r2, r3]
 8005f92:	461a      	mov	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d908      	bls.n	8005fb0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	4b1f      	ldr	r3, [pc, #124]	; (8006024 <DMA_CalcBaseAndBitshift+0x160>)
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	1d1a      	adds	r2, r3, #4
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	659a      	str	r2, [r3, #88]	; 0x58
 8005fae:	e00d      	b.n	8005fcc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	4b1b      	ldr	r3, [pc, #108]	; (8006024 <DMA_CalcBaseAndBitshift+0x160>)
 8005fb8:	4013      	ands	r3, r2
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8005fbe:	e005      	b.n	8005fcc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	40020010 	.word	0x40020010
 8005fe0:	40020028 	.word	0x40020028
 8005fe4:	40020040 	.word	0x40020040
 8005fe8:	40020058 	.word	0x40020058
 8005fec:	40020070 	.word	0x40020070
 8005ff0:	40020088 	.word	0x40020088
 8005ff4:	400200a0 	.word	0x400200a0
 8005ff8:	400200b8 	.word	0x400200b8
 8005ffc:	40020410 	.word	0x40020410
 8006000:	40020428 	.word	0x40020428
 8006004:	40020440 	.word	0x40020440
 8006008:	40020458 	.word	0x40020458
 800600c:	40020470 	.word	0x40020470
 8006010:	40020488 	.word	0x40020488
 8006014:	400204a0 	.word	0x400204a0
 8006018:	400204b8 	.word	0x400204b8
 800601c:	aaaaaaab 	.word	0xaaaaaaab
 8006020:	0800f290 	.word	0x0800f290
 8006024:	fffffc00 	.word	0xfffffc00

08006028 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006030:	2300      	movs	r3, #0
 8006032:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d120      	bne.n	800607e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006040:	2b03      	cmp	r3, #3
 8006042:	d858      	bhi.n	80060f6 <DMA_CheckFifoParam+0xce>
 8006044:	a201      	add	r2, pc, #4	; (adr r2, 800604c <DMA_CheckFifoParam+0x24>)
 8006046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604a:	bf00      	nop
 800604c:	0800605d 	.word	0x0800605d
 8006050:	0800606f 	.word	0x0800606f
 8006054:	0800605d 	.word	0x0800605d
 8006058:	080060f7 	.word	0x080060f7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d048      	beq.n	80060fa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800606c:	e045      	b.n	80060fa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006072:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006076:	d142      	bne.n	80060fe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800607c:	e03f      	b.n	80060fe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006086:	d123      	bne.n	80060d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608c:	2b03      	cmp	r3, #3
 800608e:	d838      	bhi.n	8006102 <DMA_CheckFifoParam+0xda>
 8006090:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <DMA_CheckFifoParam+0x70>)
 8006092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006096:	bf00      	nop
 8006098:	080060a9 	.word	0x080060a9
 800609c:	080060af 	.word	0x080060af
 80060a0:	080060a9 	.word	0x080060a9
 80060a4:	080060c1 	.word	0x080060c1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	73fb      	strb	r3, [r7, #15]
        break;
 80060ac:	e030      	b.n	8006110 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d025      	beq.n	8006106 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80060be:	e022      	b.n	8006106 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80060c8:	d11f      	bne.n	800610a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80060ce:	e01c      	b.n	800610a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d902      	bls.n	80060de <DMA_CheckFifoParam+0xb6>
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d003      	beq.n	80060e4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80060dc:	e018      	b.n	8006110 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	73fb      	strb	r3, [r7, #15]
        break;
 80060e2:	e015      	b.n	8006110 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00e      	beq.n	800610e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	73fb      	strb	r3, [r7, #15]
    break;
 80060f4:	e00b      	b.n	800610e <DMA_CheckFifoParam+0xe6>
        break;
 80060f6:	bf00      	nop
 80060f8:	e00a      	b.n	8006110 <DMA_CheckFifoParam+0xe8>
        break;
 80060fa:	bf00      	nop
 80060fc:	e008      	b.n	8006110 <DMA_CheckFifoParam+0xe8>
        break;
 80060fe:	bf00      	nop
 8006100:	e006      	b.n	8006110 <DMA_CheckFifoParam+0xe8>
        break;
 8006102:	bf00      	nop
 8006104:	e004      	b.n	8006110 <DMA_CheckFifoParam+0xe8>
        break;
 8006106:	bf00      	nop
 8006108:	e002      	b.n	8006110 <DMA_CheckFifoParam+0xe8>
        break;
 800610a:	bf00      	nop
 800610c:	e000      	b.n	8006110 <DMA_CheckFifoParam+0xe8>
    break;
 800610e:	bf00      	nop
    }
  }

  return status;
 8006110:	7bfb      	ldrb	r3, [r7, #15]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop

08006120 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a38      	ldr	r2, [pc, #224]	; (8006214 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d022      	beq.n	800617e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a36      	ldr	r2, [pc, #216]	; (8006218 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d01d      	beq.n	800617e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a35      	ldr	r2, [pc, #212]	; (800621c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d018      	beq.n	800617e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a33      	ldr	r2, [pc, #204]	; (8006220 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d013      	beq.n	800617e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a32      	ldr	r2, [pc, #200]	; (8006224 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d00e      	beq.n	800617e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a30      	ldr	r2, [pc, #192]	; (8006228 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d009      	beq.n	800617e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a2f      	ldr	r2, [pc, #188]	; (800622c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d004      	beq.n	800617e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a2d      	ldr	r2, [pc, #180]	; (8006230 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d101      	bne.n	8006182 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800617e:	2301      	movs	r3, #1
 8006180:	e000      	b.n	8006184 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006182:	2300      	movs	r3, #0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d01a      	beq.n	80061be <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	b2db      	uxtb	r3, r3
 800618e:	3b08      	subs	r3, #8
 8006190:	4a28      	ldr	r2, [pc, #160]	; (8006234 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006192:	fba2 2303 	umull	r2, r3, r2, r3
 8006196:	091b      	lsrs	r3, r3, #4
 8006198:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4b26      	ldr	r3, [pc, #152]	; (8006238 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800619e:	4413      	add	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	461a      	mov	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a24      	ldr	r2, [pc, #144]	; (800623c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80061ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f003 031f 	and.w	r3, r3, #31
 80061b4:	2201      	movs	r2, #1
 80061b6:	409a      	lsls	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80061bc:	e024      	b.n	8006208 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	3b10      	subs	r3, #16
 80061c6:	4a1e      	ldr	r2, [pc, #120]	; (8006240 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80061c8:	fba2 2303 	umull	r2, r3, r2, r3
 80061cc:	091b      	lsrs	r3, r3, #4
 80061ce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	4a1c      	ldr	r2, [pc, #112]	; (8006244 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d806      	bhi.n	80061e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	4a1b      	ldr	r2, [pc, #108]	; (8006248 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d902      	bls.n	80061e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	3308      	adds	r3, #8
 80061e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4b18      	ldr	r3, [pc, #96]	; (800624c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	461a      	mov	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a16      	ldr	r2, [pc, #88]	; (8006250 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80061f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f003 031f 	and.w	r3, r3, #31
 8006200:	2201      	movs	r2, #1
 8006202:	409a      	lsls	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006208:	bf00      	nop
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	58025408 	.word	0x58025408
 8006218:	5802541c 	.word	0x5802541c
 800621c:	58025430 	.word	0x58025430
 8006220:	58025444 	.word	0x58025444
 8006224:	58025458 	.word	0x58025458
 8006228:	5802546c 	.word	0x5802546c
 800622c:	58025480 	.word	0x58025480
 8006230:	58025494 	.word	0x58025494
 8006234:	cccccccd 	.word	0xcccccccd
 8006238:	16009600 	.word	0x16009600
 800623c:	58025880 	.word	0x58025880
 8006240:	aaaaaaab 	.word	0xaaaaaaab
 8006244:	400204b8 	.word	0x400204b8
 8006248:	4002040f 	.word	0x4002040f
 800624c:	10008200 	.word	0x10008200
 8006250:	40020880 	.word	0x40020880

08006254 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	b2db      	uxtb	r3, r3
 8006262:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d04a      	beq.n	8006300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2b08      	cmp	r3, #8
 800626e:	d847      	bhi.n	8006300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a25      	ldr	r2, [pc, #148]	; (800630c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d022      	beq.n	80062c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a24      	ldr	r2, [pc, #144]	; (8006310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d01d      	beq.n	80062c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a22      	ldr	r2, [pc, #136]	; (8006314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d018      	beq.n	80062c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a21      	ldr	r2, [pc, #132]	; (8006318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d013      	beq.n	80062c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a1f      	ldr	r2, [pc, #124]	; (800631c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d00e      	beq.n	80062c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a1e      	ldr	r2, [pc, #120]	; (8006320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d009      	beq.n	80062c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a1c      	ldr	r2, [pc, #112]	; (8006324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d004      	beq.n	80062c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a1b      	ldr	r2, [pc, #108]	; (8006328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d101      	bne.n	80062c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80062c0:	2301      	movs	r3, #1
 80062c2:	e000      	b.n	80062c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80062c4:	2300      	movs	r3, #0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	4b17      	ldr	r3, [pc, #92]	; (800632c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80062ce:	4413      	add	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	461a      	mov	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a15      	ldr	r2, [pc, #84]	; (8006330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80062dc:	671a      	str	r2, [r3, #112]	; 0x70
 80062de:	e009      	b.n	80062f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	4b14      	ldr	r3, [pc, #80]	; (8006334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80062e4:	4413      	add	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	461a      	mov	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a11      	ldr	r2, [pc, #68]	; (8006338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80062f2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	3b01      	subs	r3, #1
 80062f8:	2201      	movs	r2, #1
 80062fa:	409a      	lsls	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006300:	bf00      	nop
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	58025408 	.word	0x58025408
 8006310:	5802541c 	.word	0x5802541c
 8006314:	58025430 	.word	0x58025430
 8006318:	58025444 	.word	0x58025444
 800631c:	58025458 	.word	0x58025458
 8006320:	5802546c 	.word	0x5802546c
 8006324:	58025480 	.word	0x58025480
 8006328:	58025494 	.word	0x58025494
 800632c:	1600963f 	.word	0x1600963f
 8006330:	58025940 	.word	0x58025940
 8006334:	1000823f 	.word	0x1000823f
 8006338:	40020940 	.word	0x40020940

0800633c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800633c:	b480      	push	{r7}
 800633e:	b089      	sub	sp, #36	; 0x24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006346:	2300      	movs	r3, #0
 8006348:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800634a:	4b89      	ldr	r3, [pc, #548]	; (8006570 <HAL_GPIO_Init+0x234>)
 800634c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800634e:	e194      	b.n	800667a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	2101      	movs	r1, #1
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	fa01 f303 	lsl.w	r3, r1, r3
 800635c:	4013      	ands	r3, r2
 800635e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 8186 	beq.w	8006674 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f003 0303 	and.w	r3, r3, #3
 8006370:	2b01      	cmp	r3, #1
 8006372:	d005      	beq.n	8006380 <HAL_GPIO_Init+0x44>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f003 0303 	and.w	r3, r3, #3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d130      	bne.n	80063e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	2203      	movs	r2, #3
 800638c:	fa02 f303 	lsl.w	r3, r2, r3
 8006390:	43db      	mvns	r3, r3
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	4013      	ands	r3, r2
 8006396:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	68da      	ldr	r2, [r3, #12]
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	fa02 f303 	lsl.w	r3, r2, r3
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80063b6:	2201      	movs	r2, #1
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	fa02 f303 	lsl.w	r3, r2, r3
 80063be:	43db      	mvns	r3, r3
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	4013      	ands	r3, r2
 80063c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	091b      	lsrs	r3, r3, #4
 80063cc:	f003 0201 	and.w	r2, r3, #1
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	fa02 f303 	lsl.w	r3, r2, r3
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	4313      	orrs	r3, r2
 80063da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f003 0303 	and.w	r3, r3, #3
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d017      	beq.n	800641e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	2203      	movs	r2, #3
 80063fa:	fa02 f303 	lsl.w	r3, r2, r3
 80063fe:	43db      	mvns	r3, r3
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	4013      	ands	r3, r2
 8006404:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	fa02 f303 	lsl.w	r3, r2, r3
 8006412:	69ba      	ldr	r2, [r7, #24]
 8006414:	4313      	orrs	r3, r2
 8006416:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	2b02      	cmp	r3, #2
 8006428:	d123      	bne.n	8006472 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	08da      	lsrs	r2, r3, #3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3208      	adds	r2, #8
 8006432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	f003 0307 	and.w	r3, r3, #7
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	220f      	movs	r2, #15
 8006442:	fa02 f303 	lsl.w	r3, r2, r3
 8006446:	43db      	mvns	r3, r3
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	4013      	ands	r3, r2
 800644c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	691a      	ldr	r2, [r3, #16]
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	f003 0307 	and.w	r3, r3, #7
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	fa02 f303 	lsl.w	r3, r2, r3
 800645e:	69ba      	ldr	r2, [r7, #24]
 8006460:	4313      	orrs	r3, r2
 8006462:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	08da      	lsrs	r2, r3, #3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3208      	adds	r2, #8
 800646c:	69b9      	ldr	r1, [r7, #24]
 800646e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	005b      	lsls	r3, r3, #1
 800647c:	2203      	movs	r2, #3
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	43db      	mvns	r3, r3
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	4013      	ands	r3, r2
 8006488:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f003 0203 	and.w	r2, r3, #3
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	005b      	lsls	r3, r3, #1
 8006496:	fa02 f303 	lsl.w	r3, r2, r3
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	4313      	orrs	r3, r2
 800649e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 80e0 	beq.w	8006674 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064b4:	4b2f      	ldr	r3, [pc, #188]	; (8006574 <HAL_GPIO_Init+0x238>)
 80064b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064ba:	4a2e      	ldr	r2, [pc, #184]	; (8006574 <HAL_GPIO_Init+0x238>)
 80064bc:	f043 0302 	orr.w	r3, r3, #2
 80064c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80064c4:	4b2b      	ldr	r3, [pc, #172]	; (8006574 <HAL_GPIO_Init+0x238>)
 80064c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064d2:	4a29      	ldr	r2, [pc, #164]	; (8006578 <HAL_GPIO_Init+0x23c>)
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	089b      	lsrs	r3, r3, #2
 80064d8:	3302      	adds	r3, #2
 80064da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	220f      	movs	r2, #15
 80064ea:	fa02 f303 	lsl.w	r3, r2, r3
 80064ee:	43db      	mvns	r3, r3
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	4013      	ands	r3, r2
 80064f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a20      	ldr	r2, [pc, #128]	; (800657c <HAL_GPIO_Init+0x240>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d052      	beq.n	80065a4 <HAL_GPIO_Init+0x268>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a1f      	ldr	r2, [pc, #124]	; (8006580 <HAL_GPIO_Init+0x244>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d031      	beq.n	800656a <HAL_GPIO_Init+0x22e>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a1e      	ldr	r2, [pc, #120]	; (8006584 <HAL_GPIO_Init+0x248>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d02b      	beq.n	8006566 <HAL_GPIO_Init+0x22a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a1d      	ldr	r2, [pc, #116]	; (8006588 <HAL_GPIO_Init+0x24c>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d025      	beq.n	8006562 <HAL_GPIO_Init+0x226>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a1c      	ldr	r2, [pc, #112]	; (800658c <HAL_GPIO_Init+0x250>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d01f      	beq.n	800655e <HAL_GPIO_Init+0x222>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a1b      	ldr	r2, [pc, #108]	; (8006590 <HAL_GPIO_Init+0x254>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d019      	beq.n	800655a <HAL_GPIO_Init+0x21e>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a1a      	ldr	r2, [pc, #104]	; (8006594 <HAL_GPIO_Init+0x258>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d013      	beq.n	8006556 <HAL_GPIO_Init+0x21a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a19      	ldr	r2, [pc, #100]	; (8006598 <HAL_GPIO_Init+0x25c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d00d      	beq.n	8006552 <HAL_GPIO_Init+0x216>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a18      	ldr	r2, [pc, #96]	; (800659c <HAL_GPIO_Init+0x260>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d007      	beq.n	800654e <HAL_GPIO_Init+0x212>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a17      	ldr	r2, [pc, #92]	; (80065a0 <HAL_GPIO_Init+0x264>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d101      	bne.n	800654a <HAL_GPIO_Init+0x20e>
 8006546:	2309      	movs	r3, #9
 8006548:	e02d      	b.n	80065a6 <HAL_GPIO_Init+0x26a>
 800654a:	230a      	movs	r3, #10
 800654c:	e02b      	b.n	80065a6 <HAL_GPIO_Init+0x26a>
 800654e:	2308      	movs	r3, #8
 8006550:	e029      	b.n	80065a6 <HAL_GPIO_Init+0x26a>
 8006552:	2307      	movs	r3, #7
 8006554:	e027      	b.n	80065a6 <HAL_GPIO_Init+0x26a>
 8006556:	2306      	movs	r3, #6
 8006558:	e025      	b.n	80065a6 <HAL_GPIO_Init+0x26a>
 800655a:	2305      	movs	r3, #5
 800655c:	e023      	b.n	80065a6 <HAL_GPIO_Init+0x26a>
 800655e:	2304      	movs	r3, #4
 8006560:	e021      	b.n	80065a6 <HAL_GPIO_Init+0x26a>
 8006562:	2303      	movs	r3, #3
 8006564:	e01f      	b.n	80065a6 <HAL_GPIO_Init+0x26a>
 8006566:	2302      	movs	r3, #2
 8006568:	e01d      	b.n	80065a6 <HAL_GPIO_Init+0x26a>
 800656a:	2301      	movs	r3, #1
 800656c:	e01b      	b.n	80065a6 <HAL_GPIO_Init+0x26a>
 800656e:	bf00      	nop
 8006570:	58000080 	.word	0x58000080
 8006574:	58024400 	.word	0x58024400
 8006578:	58000400 	.word	0x58000400
 800657c:	58020000 	.word	0x58020000
 8006580:	58020400 	.word	0x58020400
 8006584:	58020800 	.word	0x58020800
 8006588:	58020c00 	.word	0x58020c00
 800658c:	58021000 	.word	0x58021000
 8006590:	58021400 	.word	0x58021400
 8006594:	58021800 	.word	0x58021800
 8006598:	58021c00 	.word	0x58021c00
 800659c:	58022000 	.word	0x58022000
 80065a0:	58022400 	.word	0x58022400
 80065a4:	2300      	movs	r3, #0
 80065a6:	69fa      	ldr	r2, [r7, #28]
 80065a8:	f002 0203 	and.w	r2, r2, #3
 80065ac:	0092      	lsls	r2, r2, #2
 80065ae:	4093      	lsls	r3, r2
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80065b6:	4938      	ldr	r1, [pc, #224]	; (8006698 <HAL_GPIO_Init+0x35c>)
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	089b      	lsrs	r3, r3, #2
 80065bc:	3302      	adds	r3, #2
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80065c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	43db      	mvns	r3, r3
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	4013      	ands	r3, r2
 80065d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80065e2:	69ba      	ldr	r2, [r7, #24]
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80065ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80065f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	43db      	mvns	r3, r3
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	4013      	ands	r3, r2
 8006602:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d003      	beq.n	8006618 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	4313      	orrs	r3, r2
 8006616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006618:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	43db      	mvns	r3, r3
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	4013      	ands	r3, r2
 800662e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	4313      	orrs	r3, r2
 8006642:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	43db      	mvns	r3, r3
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	4013      	ands	r3, r2
 8006658:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	4313      	orrs	r3, r2
 800666c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	3301      	adds	r3, #1
 8006678:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	fa22 f303 	lsr.w	r3, r2, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	f47f ae63 	bne.w	8006350 <HAL_GPIO_Init+0x14>
  }
}
 800668a:	bf00      	nop
 800668c:	bf00      	nop
 800668e:	3724      	adds	r7, #36	; 0x24
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	58000400 	.word	0x58000400

0800669c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	807b      	strh	r3, [r7, #2]
 80066a8:	4613      	mov	r3, r2
 80066aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80066ac:	787b      	ldrb	r3, [r7, #1]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80066b2:	887a      	ldrh	r2, [r7, #2]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80066b8:	e003      	b.n	80066c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80066ba:	887b      	ldrh	r3, [r7, #2]
 80066bc:	041a      	lsls	r2, r3, #16
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	619a      	str	r2, [r3, #24]
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b082      	sub	sp, #8
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	4603      	mov	r3, r0
 80066d6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80066d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80066e0:	88fb      	ldrh	r3, [r7, #6]
 80066e2:	4013      	ands	r3, r2
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d008      	beq.n	80066fa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80066e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066ec:	88fb      	ldrh	r3, [r7, #6]
 80066ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80066f2:	88fb      	ldrh	r3, [r7, #6]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fc f933 	bl	8002960 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80066fa:	bf00      	nop
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
	...

08006704 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800670c:	4b19      	ldr	r3, [pc, #100]	; (8006774 <HAL_PWREx_ConfigSupply+0x70>)
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b04      	cmp	r3, #4
 8006716:	d00a      	beq.n	800672e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006718:	4b16      	ldr	r3, [pc, #88]	; (8006774 <HAL_PWREx_ConfigSupply+0x70>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	429a      	cmp	r2, r3
 8006724:	d001      	beq.n	800672a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e01f      	b.n	800676a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800672a:	2300      	movs	r3, #0
 800672c:	e01d      	b.n	800676a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800672e:	4b11      	ldr	r3, [pc, #68]	; (8006774 <HAL_PWREx_ConfigSupply+0x70>)
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f023 0207 	bic.w	r2, r3, #7
 8006736:	490f      	ldr	r1, [pc, #60]	; (8006774 <HAL_PWREx_ConfigSupply+0x70>)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4313      	orrs	r3, r2
 800673c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800673e:	f7fd f9bb 	bl	8003ab8 <HAL_GetTick>
 8006742:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006744:	e009      	b.n	800675a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006746:	f7fd f9b7 	bl	8003ab8 <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006754:	d901      	bls.n	800675a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e007      	b.n	800676a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800675a:	4b06      	ldr	r3, [pc, #24]	; (8006774 <HAL_PWREx_ConfigSupply+0x70>)
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006766:	d1ee      	bne.n	8006746 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	58024800 	.word	0x58024800

08006778 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b08c      	sub	sp, #48	; 0x30
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d102      	bne.n	800678c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	f000 bc1c 	b.w	8006fc4 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 8087 	beq.w	80068a8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800679a:	4b9e      	ldr	r3, [pc, #632]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067a4:	4b9b      	ldr	r3, [pc, #620]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80067aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ac:	2b10      	cmp	r3, #16
 80067ae:	d007      	beq.n	80067c0 <HAL_RCC_OscConfig+0x48>
 80067b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b2:	2b18      	cmp	r3, #24
 80067b4:	d110      	bne.n	80067d8 <HAL_RCC_OscConfig+0x60>
 80067b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b8:	f003 0303 	and.w	r3, r3, #3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d10b      	bne.n	80067d8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067c0:	4b94      	ldr	r3, [pc, #592]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d06c      	beq.n	80068a6 <HAL_RCC_OscConfig+0x12e>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d168      	bne.n	80068a6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e3f5      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067e0:	d106      	bne.n	80067f0 <HAL_RCC_OscConfig+0x78>
 80067e2:	4b8c      	ldr	r3, [pc, #560]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a8b      	ldr	r2, [pc, #556]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 80067e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067ec:	6013      	str	r3, [r2, #0]
 80067ee:	e02e      	b.n	800684e <HAL_RCC_OscConfig+0xd6>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10c      	bne.n	8006812 <HAL_RCC_OscConfig+0x9a>
 80067f8:	4b86      	ldr	r3, [pc, #536]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a85      	ldr	r2, [pc, #532]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 80067fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006802:	6013      	str	r3, [r2, #0]
 8006804:	4b83      	ldr	r3, [pc, #524]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a82      	ldr	r2, [pc, #520]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 800680a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	e01d      	b.n	800684e <HAL_RCC_OscConfig+0xd6>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800681a:	d10c      	bne.n	8006836 <HAL_RCC_OscConfig+0xbe>
 800681c:	4b7d      	ldr	r3, [pc, #500]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a7c      	ldr	r2, [pc, #496]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 8006822:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	4b7a      	ldr	r3, [pc, #488]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a79      	ldr	r2, [pc, #484]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 800682e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006832:	6013      	str	r3, [r2, #0]
 8006834:	e00b      	b.n	800684e <HAL_RCC_OscConfig+0xd6>
 8006836:	4b77      	ldr	r3, [pc, #476]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a76      	ldr	r2, [pc, #472]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 800683c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	4b74      	ldr	r3, [pc, #464]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a73      	ldr	r2, [pc, #460]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 8006848:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800684c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d013      	beq.n	800687e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006856:	f7fd f92f 	bl	8003ab8 <HAL_GetTick>
 800685a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800685c:	e008      	b.n	8006870 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800685e:	f7fd f92b 	bl	8003ab8 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b64      	cmp	r3, #100	; 0x64
 800686a:	d901      	bls.n	8006870 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e3a9      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006870:	4b68      	ldr	r3, [pc, #416]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0f0      	beq.n	800685e <HAL_RCC_OscConfig+0xe6>
 800687c:	e014      	b.n	80068a8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800687e:	f7fd f91b 	bl	8003ab8 <HAL_GetTick>
 8006882:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006884:	e008      	b.n	8006898 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006886:	f7fd f917 	bl	8003ab8 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	2b64      	cmp	r3, #100	; 0x64
 8006892:	d901      	bls.n	8006898 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e395      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006898:	4b5e      	ldr	r3, [pc, #376]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1f0      	bne.n	8006886 <HAL_RCC_OscConfig+0x10e>
 80068a4:	e000      	b.n	80068a8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 80ca 	beq.w	8006a4a <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068b6:	4b57      	ldr	r3, [pc, #348]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068be:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068c0:	4b54      	ldr	r3, [pc, #336]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 80068c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d007      	beq.n	80068dc <HAL_RCC_OscConfig+0x164>
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	2b18      	cmp	r3, #24
 80068d0:	d156      	bne.n	8006980 <HAL_RCC_OscConfig+0x208>
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	f003 0303 	and.w	r3, r3, #3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d151      	bne.n	8006980 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068dc:	4b4d      	ldr	r3, [pc, #308]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0304 	and.w	r3, r3, #4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d005      	beq.n	80068f4 <HAL_RCC_OscConfig+0x17c>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e367      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80068f4:	4b47      	ldr	r3, [pc, #284]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f023 0219 	bic.w	r2, r3, #25
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	4944      	ldr	r1, [pc, #272]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 8006902:	4313      	orrs	r3, r2
 8006904:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006906:	f7fd f8d7 	bl	8003ab8 <HAL_GetTick>
 800690a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800690c:	e008      	b.n	8006920 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800690e:	f7fd f8d3 	bl	8003ab8 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	2b02      	cmp	r3, #2
 800691a:	d901      	bls.n	8006920 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e351      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006920:	4b3c      	ldr	r3, [pc, #240]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	d0f0      	beq.n	800690e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800692c:	f7fd f8d0 	bl	8003ad0 <HAL_GetREVID>
 8006930:	4603      	mov	r3, r0
 8006932:	f241 0203 	movw	r2, #4099	; 0x1003
 8006936:	4293      	cmp	r3, r2
 8006938:	d817      	bhi.n	800696a <HAL_RCC_OscConfig+0x1f2>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	2b40      	cmp	r3, #64	; 0x40
 8006940:	d108      	bne.n	8006954 <HAL_RCC_OscConfig+0x1dc>
 8006942:	4b34      	ldr	r3, [pc, #208]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800694a:	4a32      	ldr	r2, [pc, #200]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 800694c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006950:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006952:	e07a      	b.n	8006a4a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006954:	4b2f      	ldr	r3, [pc, #188]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	031b      	lsls	r3, r3, #12
 8006962:	492c      	ldr	r1, [pc, #176]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 8006964:	4313      	orrs	r3, r2
 8006966:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006968:	e06f      	b.n	8006a4a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800696a:	4b2a      	ldr	r3, [pc, #168]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	061b      	lsls	r3, r3, #24
 8006978:	4926      	ldr	r1, [pc, #152]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 800697a:	4313      	orrs	r3, r2
 800697c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800697e:	e064      	b.n	8006a4a <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d047      	beq.n	8006a18 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006988:	4b22      	ldr	r3, [pc, #136]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f023 0219 	bic.w	r2, r3, #25
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	491f      	ldr	r1, [pc, #124]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 8006996:	4313      	orrs	r3, r2
 8006998:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699a:	f7fd f88d 	bl	8003ab8 <HAL_GetTick>
 800699e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069a0:	e008      	b.n	80069b4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069a2:	f7fd f889 	bl	8003ab8 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d901      	bls.n	80069b4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e307      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069b4:	4b17      	ldr	r3, [pc, #92]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d0f0      	beq.n	80069a2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069c0:	f7fd f886 	bl	8003ad0 <HAL_GetREVID>
 80069c4:	4603      	mov	r3, r0
 80069c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d817      	bhi.n	80069fe <HAL_RCC_OscConfig+0x286>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	2b40      	cmp	r3, #64	; 0x40
 80069d4:	d108      	bne.n	80069e8 <HAL_RCC_OscConfig+0x270>
 80069d6:	4b0f      	ldr	r3, [pc, #60]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80069de:	4a0d      	ldr	r2, [pc, #52]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 80069e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069e4:	6053      	str	r3, [r2, #4]
 80069e6:	e030      	b.n	8006a4a <HAL_RCC_OscConfig+0x2d2>
 80069e8:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	031b      	lsls	r3, r3, #12
 80069f6:	4907      	ldr	r1, [pc, #28]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	604b      	str	r3, [r1, #4]
 80069fc:	e025      	b.n	8006a4a <HAL_RCC_OscConfig+0x2d2>
 80069fe:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	061b      	lsls	r3, r3, #24
 8006a0c:	4901      	ldr	r1, [pc, #4]	; (8006a14 <HAL_RCC_OscConfig+0x29c>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	604b      	str	r3, [r1, #4]
 8006a12:	e01a      	b.n	8006a4a <HAL_RCC_OscConfig+0x2d2>
 8006a14:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a18:	4b9e      	ldr	r3, [pc, #632]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a9d      	ldr	r2, [pc, #628]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006a1e:	f023 0301 	bic.w	r3, r3, #1
 8006a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a24:	f7fd f848 	bl	8003ab8 <HAL_GetTick>
 8006a28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a2a:	e008      	b.n	8006a3e <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a2c:	f7fd f844 	bl	8003ab8 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e2c2      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a3e:	4b95      	ldr	r3, [pc, #596]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0304 	and.w	r3, r3, #4
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1f0      	bne.n	8006a2c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0310 	and.w	r3, r3, #16
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 80a9 	beq.w	8006baa <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a58:	4b8e      	ldr	r3, [pc, #568]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a60:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a62:	4b8c      	ldr	r3, [pc, #560]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a66:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	2b08      	cmp	r3, #8
 8006a6c:	d007      	beq.n	8006a7e <HAL_RCC_OscConfig+0x306>
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	2b18      	cmp	r3, #24
 8006a72:	d13a      	bne.n	8006aea <HAL_RCC_OscConfig+0x372>
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d135      	bne.n	8006aea <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a7e:	4b85      	ldr	r3, [pc, #532]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d005      	beq.n	8006a96 <HAL_RCC_OscConfig+0x31e>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	2b80      	cmp	r3, #128	; 0x80
 8006a90:	d001      	beq.n	8006a96 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e296      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a96:	f7fd f81b 	bl	8003ad0 <HAL_GetREVID>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d817      	bhi.n	8006ad4 <HAL_RCC_OscConfig+0x35c>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	2b20      	cmp	r3, #32
 8006aaa:	d108      	bne.n	8006abe <HAL_RCC_OscConfig+0x346>
 8006aac:	4b79      	ldr	r3, [pc, #484]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006ab4:	4a77      	ldr	r2, [pc, #476]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006ab6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aba:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006abc:	e075      	b.n	8006baa <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006abe:	4b75      	ldr	r3, [pc, #468]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	069b      	lsls	r3, r3, #26
 8006acc:	4971      	ldr	r1, [pc, #452]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ad2:	e06a      	b.n	8006baa <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ad4:	4b6f      	ldr	r3, [pc, #444]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	061b      	lsls	r3, r3, #24
 8006ae2:	496c      	ldr	r1, [pc, #432]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ae8:	e05f      	b.n	8006baa <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d042      	beq.n	8006b78 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006af2:	4b68      	ldr	r3, [pc, #416]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a67      	ldr	r2, [pc, #412]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afe:	f7fc ffdb 	bl	8003ab8 <HAL_GetTick>
 8006b02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b04:	e008      	b.n	8006b18 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006b06:	f7fc ffd7 	bl	8003ab8 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d901      	bls.n	8006b18 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e255      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b18:	4b5e      	ldr	r3, [pc, #376]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0f0      	beq.n	8006b06 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b24:	f7fc ffd4 	bl	8003ad0 <HAL_GetREVID>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d817      	bhi.n	8006b62 <HAL_RCC_OscConfig+0x3ea>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	d108      	bne.n	8006b4c <HAL_RCC_OscConfig+0x3d4>
 8006b3a:	4b56      	ldr	r3, [pc, #344]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006b42:	4a54      	ldr	r2, [pc, #336]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006b44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b48:	6053      	str	r3, [r2, #4]
 8006b4a:	e02e      	b.n	8006baa <HAL_RCC_OscConfig+0x432>
 8006b4c:	4b51      	ldr	r3, [pc, #324]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	069b      	lsls	r3, r3, #26
 8006b5a:	494e      	ldr	r1, [pc, #312]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	604b      	str	r3, [r1, #4]
 8006b60:	e023      	b.n	8006baa <HAL_RCC_OscConfig+0x432>
 8006b62:	4b4c      	ldr	r3, [pc, #304]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	061b      	lsls	r3, r3, #24
 8006b70:	4948      	ldr	r1, [pc, #288]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60cb      	str	r3, [r1, #12]
 8006b76:	e018      	b.n	8006baa <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006b78:	4b46      	ldr	r3, [pc, #280]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a45      	ldr	r2, [pc, #276]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006b7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b84:	f7fc ff98 	bl	8003ab8 <HAL_GetTick>
 8006b88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b8a:	e008      	b.n	8006b9e <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006b8c:	f7fc ff94 	bl	8003ab8 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e212      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b9e:	4b3d      	ldr	r3, [pc, #244]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1f0      	bne.n	8006b8c <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0308 	and.w	r3, r3, #8
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d036      	beq.n	8006c24 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d019      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bbe:	4b35      	ldr	r3, [pc, #212]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc2:	4a34      	ldr	r2, [pc, #208]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006bc4:	f043 0301 	orr.w	r3, r3, #1
 8006bc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bca:	f7fc ff75 	bl	8003ab8 <HAL_GetTick>
 8006bce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006bd0:	e008      	b.n	8006be4 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bd2:	f7fc ff71 	bl	8003ab8 <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d901      	bls.n	8006be4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e1ef      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006be4:	4b2b      	ldr	r3, [pc, #172]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d0f0      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x45a>
 8006bf0:	e018      	b.n	8006c24 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bf2:	4b28      	ldr	r3, [pc, #160]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bf6:	4a27      	ldr	r2, [pc, #156]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006bf8:	f023 0301 	bic.w	r3, r3, #1
 8006bfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bfe:	f7fc ff5b 	bl	8003ab8 <HAL_GetTick>
 8006c02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c04:	e008      	b.n	8006c18 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c06:	f7fc ff57 	bl	8003ab8 <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d901      	bls.n	8006c18 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e1d5      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c18:	4b1e      	ldr	r3, [pc, #120]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1f0      	bne.n	8006c06 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0320 	and.w	r3, r3, #32
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d039      	beq.n	8006ca4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d019      	beq.n	8006c6c <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c38:	4b16      	ldr	r3, [pc, #88]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a15      	ldr	r2, [pc, #84]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006c3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c44:	f7fc ff38 	bl	8003ab8 <HAL_GetTick>
 8006c48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c4a:	e008      	b.n	8006c5e <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006c4c:	f7fc ff34 	bl	8003ab8 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e1b2      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c5e:	4b0d      	ldr	r3, [pc, #52]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d0f0      	beq.n	8006c4c <HAL_RCC_OscConfig+0x4d4>
 8006c6a:	e01b      	b.n	8006ca4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c6c:	4b09      	ldr	r3, [pc, #36]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a08      	ldr	r2, [pc, #32]	; (8006c94 <HAL_RCC_OscConfig+0x51c>)
 8006c72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c78:	f7fc ff1e 	bl	8003ab8 <HAL_GetTick>
 8006c7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c7e:	e00b      	b.n	8006c98 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006c80:	f7fc ff1a 	bl	8003ab8 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d904      	bls.n	8006c98 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e198      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
 8006c92:	bf00      	nop
 8006c94:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c98:	4ba3      	ldr	r3, [pc, #652]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1ed      	bne.n	8006c80 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 8081 	beq.w	8006db4 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006cb2:	4b9e      	ldr	r3, [pc, #632]	; (8006f2c <HAL_RCC_OscConfig+0x7b4>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a9d      	ldr	r2, [pc, #628]	; (8006f2c <HAL_RCC_OscConfig+0x7b4>)
 8006cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cbe:	f7fc fefb 	bl	8003ab8 <HAL_GetTick>
 8006cc2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cc4:	e008      	b.n	8006cd8 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006cc6:	f7fc fef7 	bl	8003ab8 <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	2b64      	cmp	r3, #100	; 0x64
 8006cd2:	d901      	bls.n	8006cd8 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e175      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cd8:	4b94      	ldr	r3, [pc, #592]	; (8006f2c <HAL_RCC_OscConfig+0x7b4>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d0f0      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d106      	bne.n	8006cfa <HAL_RCC_OscConfig+0x582>
 8006cec:	4b8e      	ldr	r3, [pc, #568]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf0:	4a8d      	ldr	r2, [pc, #564]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006cf2:	f043 0301 	orr.w	r3, r3, #1
 8006cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8006cf8:	e02d      	b.n	8006d56 <HAL_RCC_OscConfig+0x5de>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10c      	bne.n	8006d1c <HAL_RCC_OscConfig+0x5a4>
 8006d02:	4b89      	ldr	r3, [pc, #548]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d06:	4a88      	ldr	r2, [pc, #544]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006d08:	f023 0301 	bic.w	r3, r3, #1
 8006d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d0e:	4b86      	ldr	r3, [pc, #536]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d12:	4a85      	ldr	r2, [pc, #532]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006d14:	f023 0304 	bic.w	r3, r3, #4
 8006d18:	6713      	str	r3, [r2, #112]	; 0x70
 8006d1a:	e01c      	b.n	8006d56 <HAL_RCC_OscConfig+0x5de>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	2b05      	cmp	r3, #5
 8006d22:	d10c      	bne.n	8006d3e <HAL_RCC_OscConfig+0x5c6>
 8006d24:	4b80      	ldr	r3, [pc, #512]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d28:	4a7f      	ldr	r2, [pc, #508]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006d2a:	f043 0304 	orr.w	r3, r3, #4
 8006d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d30:	4b7d      	ldr	r3, [pc, #500]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d34:	4a7c      	ldr	r2, [pc, #496]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006d36:	f043 0301 	orr.w	r3, r3, #1
 8006d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d3c:	e00b      	b.n	8006d56 <HAL_RCC_OscConfig+0x5de>
 8006d3e:	4b7a      	ldr	r3, [pc, #488]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d42:	4a79      	ldr	r2, [pc, #484]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006d44:	f023 0301 	bic.w	r3, r3, #1
 8006d48:	6713      	str	r3, [r2, #112]	; 0x70
 8006d4a:	4b77      	ldr	r3, [pc, #476]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4e:	4a76      	ldr	r2, [pc, #472]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006d50:	f023 0304 	bic.w	r3, r3, #4
 8006d54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d015      	beq.n	8006d8a <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d5e:	f7fc feab 	bl	8003ab8 <HAL_GetTick>
 8006d62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d64:	e00a      	b.n	8006d7c <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d66:	f7fc fea7 	bl	8003ab8 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d901      	bls.n	8006d7c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e123      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d7c:	4b6a      	ldr	r3, [pc, #424]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d80:	f003 0302 	and.w	r3, r3, #2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d0ee      	beq.n	8006d66 <HAL_RCC_OscConfig+0x5ee>
 8006d88:	e014      	b.n	8006db4 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d8a:	f7fc fe95 	bl	8003ab8 <HAL_GetTick>
 8006d8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d90:	e00a      	b.n	8006da8 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d92:	f7fc fe91 	bl	8003ab8 <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d901      	bls.n	8006da8 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e10d      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006da8:	4b5f      	ldr	r3, [pc, #380]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dac:	f003 0302 	and.w	r3, r3, #2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1ee      	bne.n	8006d92 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 8102 	beq.w	8006fc2 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006dbe:	4b5a      	ldr	r3, [pc, #360]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dc6:	2b18      	cmp	r3, #24
 8006dc8:	f000 80bd 	beq.w	8006f46 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	f040 8095 	bne.w	8006f00 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dd6:	4b54      	ldr	r3, [pc, #336]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a53      	ldr	r2, [pc, #332]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006ddc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de2:	f7fc fe69 	bl	8003ab8 <HAL_GetTick>
 8006de6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006de8:	e008      	b.n	8006dfc <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dea:	f7fc fe65 	bl	8003ab8 <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d901      	bls.n	8006dfc <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e0e3      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006dfc:	4b4a      	ldr	r3, [pc, #296]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1f0      	bne.n	8006dea <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e08:	4b47      	ldr	r3, [pc, #284]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006e0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e0c:	4b48      	ldr	r3, [pc, #288]	; (8006f30 <HAL_RCC_OscConfig+0x7b8>)
 8006e0e:	4013      	ands	r3, r2
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006e18:	0112      	lsls	r2, r2, #4
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	4942      	ldr	r1, [pc, #264]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	628b      	str	r3, [r1, #40]	; 0x28
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e26:	3b01      	subs	r3, #1
 8006e28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e30:	3b01      	subs	r3, #1
 8006e32:	025b      	lsls	r3, r3, #9
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	431a      	orrs	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	041b      	lsls	r3, r3, #16
 8006e40:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e44:	431a      	orrs	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	061b      	lsls	r3, r3, #24
 8006e4e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e52:	4935      	ldr	r1, [pc, #212]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006e58:	4b33      	ldr	r3, [pc, #204]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5c:	4a32      	ldr	r2, [pc, #200]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006e5e:	f023 0301 	bic.w	r3, r3, #1
 8006e62:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006e64:	4b30      	ldr	r3, [pc, #192]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e68:	4b32      	ldr	r3, [pc, #200]	; (8006f34 <HAL_RCC_OscConfig+0x7bc>)
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006e70:	00d2      	lsls	r2, r2, #3
 8006e72:	492d      	ldr	r1, [pc, #180]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006e74:	4313      	orrs	r3, r2
 8006e76:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006e78:	4b2b      	ldr	r3, [pc, #172]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7c:	f023 020c 	bic.w	r2, r3, #12
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e84:	4928      	ldr	r1, [pc, #160]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006e8a:	4b27      	ldr	r3, [pc, #156]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8e:	f023 0202 	bic.w	r2, r3, #2
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e96:	4924      	ldr	r1, [pc, #144]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006e9c:	4b22      	ldr	r3, [pc, #136]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea0:	4a21      	ldr	r2, [pc, #132]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ea8:	4b1f      	ldr	r3, [pc, #124]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eac:	4a1e      	ldr	r2, [pc, #120]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006eb4:	4b1c      	ldr	r3, [pc, #112]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	4a1b      	ldr	r2, [pc, #108]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006eba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ebe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006ec0:	4b19      	ldr	r3, [pc, #100]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec4:	4a18      	ldr	r2, [pc, #96]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006ec6:	f043 0301 	orr.w	r3, r3, #1
 8006eca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ecc:	4b16      	ldr	r3, [pc, #88]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a15      	ldr	r2, [pc, #84]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed8:	f7fc fdee 	bl	8003ab8 <HAL_GetTick>
 8006edc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ede:	e008      	b.n	8006ef2 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ee0:	f7fc fdea 	bl	8003ab8 <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e068      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ef2:	4b0d      	ldr	r3, [pc, #52]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0f0      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x768>
 8006efe:	e060      	b.n	8006fc2 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f00:	4b09      	ldr	r3, [pc, #36]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a08      	ldr	r2, [pc, #32]	; (8006f28 <HAL_RCC_OscConfig+0x7b0>)
 8006f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f0c:	f7fc fdd4 	bl	8003ab8 <HAL_GetTick>
 8006f10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f12:	e011      	b.n	8006f38 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f14:	f7fc fdd0 	bl	8003ab8 <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d90a      	bls.n	8006f38 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e04e      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
 8006f26:	bf00      	nop
 8006f28:	58024400 	.word	0x58024400
 8006f2c:	58024800 	.word	0x58024800
 8006f30:	fffffc0c 	.word	0xfffffc0c
 8006f34:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f38:	4b24      	ldr	r3, [pc, #144]	; (8006fcc <HAL_RCC_OscConfig+0x854>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e7      	bne.n	8006f14 <HAL_RCC_OscConfig+0x79c>
 8006f44:	e03d      	b.n	8006fc2 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006f46:	4b21      	ldr	r3, [pc, #132]	; (8006fcc <HAL_RCC_OscConfig+0x854>)
 8006f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006f4c:	4b1f      	ldr	r3, [pc, #124]	; (8006fcc <HAL_RCC_OscConfig+0x854>)
 8006f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f50:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d031      	beq.n	8006fbe <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f003 0203 	and.w	r2, r3, #3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d12a      	bne.n	8006fbe <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	091b      	lsrs	r3, r3, #4
 8006f6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d122      	bne.n	8006fbe <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f82:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d11a      	bne.n	8006fbe <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	0a5b      	lsrs	r3, r3, #9
 8006f8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f94:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d111      	bne.n	8006fbe <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	0c1b      	lsrs	r3, r3, #16
 8006f9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d108      	bne.n	8006fbe <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	0e1b      	lsrs	r3, r3, #24
 8006fb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d001      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e000      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3730      	adds	r7, #48	; 0x30
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	58024400 	.word	0x58024400

08006fd0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e19c      	b.n	800731e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fe4:	4b8a      	ldr	r3, [pc, #552]	; (8007210 <HAL_RCC_ClockConfig+0x240>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 030f 	and.w	r3, r3, #15
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d910      	bls.n	8007014 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ff2:	4b87      	ldr	r3, [pc, #540]	; (8007210 <HAL_RCC_ClockConfig+0x240>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f023 020f 	bic.w	r2, r3, #15
 8006ffa:	4985      	ldr	r1, [pc, #532]	; (8007210 <HAL_RCC_ClockConfig+0x240>)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007002:	4b83      	ldr	r3, [pc, #524]	; (8007210 <HAL_RCC_ClockConfig+0x240>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 030f 	and.w	r3, r3, #15
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	429a      	cmp	r2, r3
 800700e:	d001      	beq.n	8007014 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e184      	b.n	800731e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0304 	and.w	r3, r3, #4
 800701c:	2b00      	cmp	r3, #0
 800701e:	d010      	beq.n	8007042 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	691a      	ldr	r2, [r3, #16]
 8007024:	4b7b      	ldr	r3, [pc, #492]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800702c:	429a      	cmp	r2, r3
 800702e:	d908      	bls.n	8007042 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007030:	4b78      	ldr	r3, [pc, #480]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	4975      	ldr	r1, [pc, #468]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 800703e:	4313      	orrs	r3, r2
 8007040:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0308 	and.w	r3, r3, #8
 800704a:	2b00      	cmp	r3, #0
 800704c:	d010      	beq.n	8007070 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	695a      	ldr	r2, [r3, #20]
 8007052:	4b70      	ldr	r3, [pc, #448]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 8007054:	69db      	ldr	r3, [r3, #28]
 8007056:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800705a:	429a      	cmp	r2, r3
 800705c:	d908      	bls.n	8007070 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800705e:	4b6d      	ldr	r3, [pc, #436]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	496a      	ldr	r1, [pc, #424]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 800706c:	4313      	orrs	r3, r2
 800706e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0310 	and.w	r3, r3, #16
 8007078:	2b00      	cmp	r3, #0
 800707a:	d010      	beq.n	800709e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	699a      	ldr	r2, [r3, #24]
 8007080:	4b64      	ldr	r3, [pc, #400]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007088:	429a      	cmp	r2, r3
 800708a:	d908      	bls.n	800709e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800708c:	4b61      	ldr	r3, [pc, #388]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 800708e:	69db      	ldr	r3, [r3, #28]
 8007090:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	495e      	ldr	r1, [pc, #376]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 800709a:	4313      	orrs	r3, r2
 800709c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0320 	and.w	r3, r3, #32
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d010      	beq.n	80070cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	69da      	ldr	r2, [r3, #28]
 80070ae:	4b59      	ldr	r3, [pc, #356]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d908      	bls.n	80070cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80070ba:	4b56      	ldr	r3, [pc, #344]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	4953      	ldr	r1, [pc, #332]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d010      	beq.n	80070fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68da      	ldr	r2, [r3, #12]
 80070dc:	4b4d      	ldr	r3, [pc, #308]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	f003 030f 	and.w	r3, r3, #15
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d908      	bls.n	80070fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070e8:	4b4a      	ldr	r3, [pc, #296]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	f023 020f 	bic.w	r2, r3, #15
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	4947      	ldr	r1, [pc, #284]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	d055      	beq.n	80071b2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007106:	4b43      	ldr	r3, [pc, #268]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	4940      	ldr	r1, [pc, #256]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 8007114:	4313      	orrs	r3, r2
 8007116:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	2b02      	cmp	r3, #2
 800711e:	d107      	bne.n	8007130 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007120:	4b3c      	ldr	r3, [pc, #240]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d121      	bne.n	8007170 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e0f6      	b.n	800731e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	2b03      	cmp	r3, #3
 8007136:	d107      	bne.n	8007148 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007138:	4b36      	ldr	r3, [pc, #216]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d115      	bne.n	8007170 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e0ea      	b.n	800731e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d107      	bne.n	8007160 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007150:	4b30      	ldr	r3, [pc, #192]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007158:	2b00      	cmp	r3, #0
 800715a:	d109      	bne.n	8007170 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e0de      	b.n	800731e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007160:	4b2c      	ldr	r3, [pc, #176]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e0d6      	b.n	800731e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007170:	4b28      	ldr	r3, [pc, #160]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	f023 0207 	bic.w	r2, r3, #7
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	4925      	ldr	r1, [pc, #148]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 800717e:	4313      	orrs	r3, r2
 8007180:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007182:	f7fc fc99 	bl	8003ab8 <HAL_GetTick>
 8007186:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007188:	e00a      	b.n	80071a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800718a:	f7fc fc95 	bl	8003ab8 <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	f241 3288 	movw	r2, #5000	; 0x1388
 8007198:	4293      	cmp	r3, r2
 800719a:	d901      	bls.n	80071a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e0be      	b.n	800731e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071a0:	4b1c      	ldr	r3, [pc, #112]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	00db      	lsls	r3, r3, #3
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d1eb      	bne.n	800718a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d010      	beq.n	80071e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	4b14      	ldr	r3, [pc, #80]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	f003 030f 	and.w	r3, r3, #15
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d208      	bcs.n	80071e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071ce:	4b11      	ldr	r3, [pc, #68]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	f023 020f 	bic.w	r2, r3, #15
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	490e      	ldr	r1, [pc, #56]	; (8007214 <HAL_RCC_ClockConfig+0x244>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071e0:	4b0b      	ldr	r3, [pc, #44]	; (8007210 <HAL_RCC_ClockConfig+0x240>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 030f 	and.w	r3, r3, #15
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d214      	bcs.n	8007218 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ee:	4b08      	ldr	r3, [pc, #32]	; (8007210 <HAL_RCC_ClockConfig+0x240>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f023 020f 	bic.w	r2, r3, #15
 80071f6:	4906      	ldr	r1, [pc, #24]	; (8007210 <HAL_RCC_ClockConfig+0x240>)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071fe:	4b04      	ldr	r3, [pc, #16]	; (8007210 <HAL_RCC_ClockConfig+0x240>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 030f 	and.w	r3, r3, #15
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	429a      	cmp	r2, r3
 800720a:	d005      	beq.n	8007218 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e086      	b.n	800731e <HAL_RCC_ClockConfig+0x34e>
 8007210:	52002000 	.word	0x52002000
 8007214:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0304 	and.w	r3, r3, #4
 8007220:	2b00      	cmp	r3, #0
 8007222:	d010      	beq.n	8007246 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	691a      	ldr	r2, [r3, #16]
 8007228:	4b3f      	ldr	r3, [pc, #252]	; (8007328 <HAL_RCC_ClockConfig+0x358>)
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007230:	429a      	cmp	r2, r3
 8007232:	d208      	bcs.n	8007246 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007234:	4b3c      	ldr	r3, [pc, #240]	; (8007328 <HAL_RCC_ClockConfig+0x358>)
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	4939      	ldr	r1, [pc, #228]	; (8007328 <HAL_RCC_ClockConfig+0x358>)
 8007242:	4313      	orrs	r3, r2
 8007244:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 0308 	and.w	r3, r3, #8
 800724e:	2b00      	cmp	r3, #0
 8007250:	d010      	beq.n	8007274 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	695a      	ldr	r2, [r3, #20]
 8007256:	4b34      	ldr	r3, [pc, #208]	; (8007328 <HAL_RCC_ClockConfig+0x358>)
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800725e:	429a      	cmp	r2, r3
 8007260:	d208      	bcs.n	8007274 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007262:	4b31      	ldr	r3, [pc, #196]	; (8007328 <HAL_RCC_ClockConfig+0x358>)
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	492e      	ldr	r1, [pc, #184]	; (8007328 <HAL_RCC_ClockConfig+0x358>)
 8007270:	4313      	orrs	r3, r2
 8007272:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0310 	and.w	r3, r3, #16
 800727c:	2b00      	cmp	r3, #0
 800727e:	d010      	beq.n	80072a2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	699a      	ldr	r2, [r3, #24]
 8007284:	4b28      	ldr	r3, [pc, #160]	; (8007328 <HAL_RCC_ClockConfig+0x358>)
 8007286:	69db      	ldr	r3, [r3, #28]
 8007288:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800728c:	429a      	cmp	r2, r3
 800728e:	d208      	bcs.n	80072a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007290:	4b25      	ldr	r3, [pc, #148]	; (8007328 <HAL_RCC_ClockConfig+0x358>)
 8007292:	69db      	ldr	r3, [r3, #28]
 8007294:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	4922      	ldr	r1, [pc, #136]	; (8007328 <HAL_RCC_ClockConfig+0x358>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0320 	and.w	r3, r3, #32
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d010      	beq.n	80072d0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	69da      	ldr	r2, [r3, #28]
 80072b2:	4b1d      	ldr	r3, [pc, #116]	; (8007328 <HAL_RCC_ClockConfig+0x358>)
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d208      	bcs.n	80072d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80072be:	4b1a      	ldr	r3, [pc, #104]	; (8007328 <HAL_RCC_ClockConfig+0x358>)
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	4917      	ldr	r1, [pc, #92]	; (8007328 <HAL_RCC_ClockConfig+0x358>)
 80072cc:	4313      	orrs	r3, r2
 80072ce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80072d0:	f000 f834 	bl	800733c <HAL_RCC_GetSysClockFreq>
 80072d4:	4602      	mov	r2, r0
 80072d6:	4b14      	ldr	r3, [pc, #80]	; (8007328 <HAL_RCC_ClockConfig+0x358>)
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	0a1b      	lsrs	r3, r3, #8
 80072dc:	f003 030f 	and.w	r3, r3, #15
 80072e0:	4912      	ldr	r1, [pc, #72]	; (800732c <HAL_RCC_ClockConfig+0x35c>)
 80072e2:	5ccb      	ldrb	r3, [r1, r3]
 80072e4:	f003 031f 	and.w	r3, r3, #31
 80072e8:	fa22 f303 	lsr.w	r3, r2, r3
 80072ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072ee:	4b0e      	ldr	r3, [pc, #56]	; (8007328 <HAL_RCC_ClockConfig+0x358>)
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	f003 030f 	and.w	r3, r3, #15
 80072f6:	4a0d      	ldr	r2, [pc, #52]	; (800732c <HAL_RCC_ClockConfig+0x35c>)
 80072f8:	5cd3      	ldrb	r3, [r2, r3]
 80072fa:	f003 031f 	and.w	r3, r3, #31
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	fa22 f303 	lsr.w	r3, r2, r3
 8007304:	4a0a      	ldr	r2, [pc, #40]	; (8007330 <HAL_RCC_ClockConfig+0x360>)
 8007306:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007308:	4a0a      	ldr	r2, [pc, #40]	; (8007334 <HAL_RCC_ClockConfig+0x364>)
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800730e:	4b0a      	ldr	r3, [pc, #40]	; (8007338 <HAL_RCC_ClockConfig+0x368>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4618      	mov	r0, r3
 8007314:	f7fc fb86 	bl	8003a24 <HAL_InitTick>
 8007318:	4603      	mov	r3, r0
 800731a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800731c:	7bfb      	ldrb	r3, [r7, #15]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	58024400 	.word	0x58024400
 800732c:	0800f280 	.word	0x0800f280
 8007330:	2400002c 	.word	0x2400002c
 8007334:	24000028 	.word	0x24000028
 8007338:	24000030 	.word	0x24000030

0800733c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800733c:	b480      	push	{r7}
 800733e:	b089      	sub	sp, #36	; 0x24
 8007340:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007342:	4bb3      	ldr	r3, [pc, #716]	; (8007610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800734a:	2b18      	cmp	r3, #24
 800734c:	f200 8155 	bhi.w	80075fa <HAL_RCC_GetSysClockFreq+0x2be>
 8007350:	a201      	add	r2, pc, #4	; (adr r2, 8007358 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007356:	bf00      	nop
 8007358:	080073bd 	.word	0x080073bd
 800735c:	080075fb 	.word	0x080075fb
 8007360:	080075fb 	.word	0x080075fb
 8007364:	080075fb 	.word	0x080075fb
 8007368:	080075fb 	.word	0x080075fb
 800736c:	080075fb 	.word	0x080075fb
 8007370:	080075fb 	.word	0x080075fb
 8007374:	080075fb 	.word	0x080075fb
 8007378:	080073e3 	.word	0x080073e3
 800737c:	080075fb 	.word	0x080075fb
 8007380:	080075fb 	.word	0x080075fb
 8007384:	080075fb 	.word	0x080075fb
 8007388:	080075fb 	.word	0x080075fb
 800738c:	080075fb 	.word	0x080075fb
 8007390:	080075fb 	.word	0x080075fb
 8007394:	080075fb 	.word	0x080075fb
 8007398:	080073e9 	.word	0x080073e9
 800739c:	080075fb 	.word	0x080075fb
 80073a0:	080075fb 	.word	0x080075fb
 80073a4:	080075fb 	.word	0x080075fb
 80073a8:	080075fb 	.word	0x080075fb
 80073ac:	080075fb 	.word	0x080075fb
 80073b0:	080075fb 	.word	0x080075fb
 80073b4:	080075fb 	.word	0x080075fb
 80073b8:	080073ef 	.word	0x080073ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073bc:	4b94      	ldr	r3, [pc, #592]	; (8007610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0320 	and.w	r3, r3, #32
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d009      	beq.n	80073dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073c8:	4b91      	ldr	r3, [pc, #580]	; (8007610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	08db      	lsrs	r3, r3, #3
 80073ce:	f003 0303 	and.w	r3, r3, #3
 80073d2:	4a90      	ldr	r2, [pc, #576]	; (8007614 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073d4:	fa22 f303 	lsr.w	r3, r2, r3
 80073d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80073da:	e111      	b.n	8007600 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80073dc:	4b8d      	ldr	r3, [pc, #564]	; (8007614 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073de:	61bb      	str	r3, [r7, #24]
    break;
 80073e0:	e10e      	b.n	8007600 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80073e2:	4b8d      	ldr	r3, [pc, #564]	; (8007618 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80073e4:	61bb      	str	r3, [r7, #24]
    break;
 80073e6:	e10b      	b.n	8007600 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80073e8:	4b8c      	ldr	r3, [pc, #560]	; (800761c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80073ea:	61bb      	str	r3, [r7, #24]
    break;
 80073ec:	e108      	b.n	8007600 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073ee:	4b88      	ldr	r3, [pc, #544]	; (8007610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f2:	f003 0303 	and.w	r3, r3, #3
 80073f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80073f8:	4b85      	ldr	r3, [pc, #532]	; (8007610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fc:	091b      	lsrs	r3, r3, #4
 80073fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007402:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007404:	4b82      	ldr	r3, [pc, #520]	; (8007610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800740e:	4b80      	ldr	r3, [pc, #512]	; (8007610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007412:	08db      	lsrs	r3, r3, #3
 8007414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	fb02 f303 	mul.w	r3, r2, r3
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007426:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 80e1 	beq.w	80075f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2b02      	cmp	r3, #2
 8007436:	f000 8083 	beq.w	8007540 <HAL_RCC_GetSysClockFreq+0x204>
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2b02      	cmp	r3, #2
 800743e:	f200 80a1 	bhi.w	8007584 <HAL_RCC_GetSysClockFreq+0x248>
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d003      	beq.n	8007450 <HAL_RCC_GetSysClockFreq+0x114>
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d056      	beq.n	80074fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800744e:	e099      	b.n	8007584 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007450:	4b6f      	ldr	r3, [pc, #444]	; (8007610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0320 	and.w	r3, r3, #32
 8007458:	2b00      	cmp	r3, #0
 800745a:	d02d      	beq.n	80074b8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800745c:	4b6c      	ldr	r3, [pc, #432]	; (8007610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	08db      	lsrs	r3, r3, #3
 8007462:	f003 0303 	and.w	r3, r3, #3
 8007466:	4a6b      	ldr	r2, [pc, #428]	; (8007614 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007468:	fa22 f303 	lsr.w	r3, r2, r3
 800746c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	ee07 3a90 	vmov	s15, r3
 8007474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007486:	4b62      	ldr	r3, [pc, #392]	; (8007610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007496:	ed97 6a02 	vldr	s12, [r7, #8]
 800749a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007620 <HAL_RCC_GetSysClockFreq+0x2e4>
 800749e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80074b6:	e087      	b.n	80075c8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007624 <HAL_RCC_GetSysClockFreq+0x2e8>
 80074c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ca:	4b51      	ldr	r3, [pc, #324]	; (8007610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074da:	ed97 6a02 	vldr	s12, [r7, #8]
 80074de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007620 <HAL_RCC_GetSysClockFreq+0x2e4>
 80074e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074fa:	e065      	b.n	80075c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007506:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007628 <HAL_RCC_GetSysClockFreq+0x2ec>
 800750a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800750e:	4b40      	ldr	r3, [pc, #256]	; (8007610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007516:	ee07 3a90 	vmov	s15, r3
 800751a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007522:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007620 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800753e:	e043      	b.n	80075c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	ee07 3a90 	vmov	s15, r3
 8007546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800762c <HAL_RCC_GetSysClockFreq+0x2f0>
 800754e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007552:	4b2f      	ldr	r3, [pc, #188]	; (8007610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755a:	ee07 3a90 	vmov	s15, r3
 800755e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007562:	ed97 6a02 	vldr	s12, [r7, #8]
 8007566:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007620 <HAL_RCC_GetSysClockFreq+0x2e4>
 800756a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800756e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800757a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007582:	e021      	b.n	80075c8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007628 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007596:	4b1e      	ldr	r3, [pc, #120]	; (8007610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80075aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007620 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075c6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80075c8:	4b11      	ldr	r3, [pc, #68]	; (8007610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075cc:	0a5b      	lsrs	r3, r3, #9
 80075ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075d2:	3301      	adds	r3, #1
 80075d4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	ee07 3a90 	vmov	s15, r3
 80075dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80075e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80075e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ec:	ee17 3a90 	vmov	r3, s15
 80075f0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80075f2:	e005      	b.n	8007600 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	61bb      	str	r3, [r7, #24]
    break;
 80075f8:	e002      	b.n	8007600 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80075fa:	4b07      	ldr	r3, [pc, #28]	; (8007618 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80075fc:	61bb      	str	r3, [r7, #24]
    break;
 80075fe:	bf00      	nop
  }

  return sysclockfreq;
 8007600:	69bb      	ldr	r3, [r7, #24]
}
 8007602:	4618      	mov	r0, r3
 8007604:	3724      	adds	r7, #36	; 0x24
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	58024400 	.word	0x58024400
 8007614:	03d09000 	.word	0x03d09000
 8007618:	003d0900 	.word	0x003d0900
 800761c:	02dc6c00 	.word	0x02dc6c00
 8007620:	46000000 	.word	0x46000000
 8007624:	4c742400 	.word	0x4c742400
 8007628:	4a742400 	.word	0x4a742400
 800762c:	4c371b00 	.word	0x4c371b00

08007630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007636:	f7ff fe81 	bl	800733c <HAL_RCC_GetSysClockFreq>
 800763a:	4602      	mov	r2, r0
 800763c:	4b10      	ldr	r3, [pc, #64]	; (8007680 <HAL_RCC_GetHCLKFreq+0x50>)
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	0a1b      	lsrs	r3, r3, #8
 8007642:	f003 030f 	and.w	r3, r3, #15
 8007646:	490f      	ldr	r1, [pc, #60]	; (8007684 <HAL_RCC_GetHCLKFreq+0x54>)
 8007648:	5ccb      	ldrb	r3, [r1, r3]
 800764a:	f003 031f 	and.w	r3, r3, #31
 800764e:	fa22 f303 	lsr.w	r3, r2, r3
 8007652:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007654:	4b0a      	ldr	r3, [pc, #40]	; (8007680 <HAL_RCC_GetHCLKFreq+0x50>)
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	f003 030f 	and.w	r3, r3, #15
 800765c:	4a09      	ldr	r2, [pc, #36]	; (8007684 <HAL_RCC_GetHCLKFreq+0x54>)
 800765e:	5cd3      	ldrb	r3, [r2, r3]
 8007660:	f003 031f 	and.w	r3, r3, #31
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	fa22 f303 	lsr.w	r3, r2, r3
 800766a:	4a07      	ldr	r2, [pc, #28]	; (8007688 <HAL_RCC_GetHCLKFreq+0x58>)
 800766c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800766e:	4a07      	ldr	r2, [pc, #28]	; (800768c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007674:	4b04      	ldr	r3, [pc, #16]	; (8007688 <HAL_RCC_GetHCLKFreq+0x58>)
 8007676:	681b      	ldr	r3, [r3, #0]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	58024400 	.word	0x58024400
 8007684:	0800f280 	.word	0x0800f280
 8007688:	2400002c 	.word	0x2400002c
 800768c:	24000028 	.word	0x24000028

08007690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007694:	f7ff ffcc 	bl	8007630 <HAL_RCC_GetHCLKFreq>
 8007698:	4602      	mov	r2, r0
 800769a:	4b06      	ldr	r3, [pc, #24]	; (80076b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800769c:	69db      	ldr	r3, [r3, #28]
 800769e:	091b      	lsrs	r3, r3, #4
 80076a0:	f003 0307 	and.w	r3, r3, #7
 80076a4:	4904      	ldr	r1, [pc, #16]	; (80076b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80076a6:	5ccb      	ldrb	r3, [r1, r3]
 80076a8:	f003 031f 	and.w	r3, r3, #31
 80076ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	58024400 	.word	0x58024400
 80076b8:	0800f280 	.word	0x0800f280

080076bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80076c0:	f7ff ffb6 	bl	8007630 <HAL_RCC_GetHCLKFreq>
 80076c4:	4602      	mov	r2, r0
 80076c6:	4b06      	ldr	r3, [pc, #24]	; (80076e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076c8:	69db      	ldr	r3, [r3, #28]
 80076ca:	0a1b      	lsrs	r3, r3, #8
 80076cc:	f003 0307 	and.w	r3, r3, #7
 80076d0:	4904      	ldr	r1, [pc, #16]	; (80076e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80076d2:	5ccb      	ldrb	r3, [r1, r3]
 80076d4:	f003 031f 	and.w	r3, r3, #31
 80076d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80076dc:	4618      	mov	r0, r3
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	58024400 	.word	0x58024400
 80076e4:	0800f280 	.word	0x0800f280

080076e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80076f0:	2300      	movs	r3, #0
 80076f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80076f4:	2300      	movs	r3, #0
 80076f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d03f      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007708:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800770c:	d02a      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800770e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007712:	d824      	bhi.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007714:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007718:	d018      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800771a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800771e:	d81e      	bhi.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007720:	2b00      	cmp	r3, #0
 8007722:	d003      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007724:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007728:	d007      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800772a:	e018      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800772c:	4bab      	ldr	r3, [pc, #684]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800772e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007730:	4aaa      	ldr	r2, [pc, #680]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007736:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007738:	e015      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	3304      	adds	r3, #4
 800773e:	2102      	movs	r1, #2
 8007740:	4618      	mov	r0, r3
 8007742:	f001 f9cf 	bl	8008ae4 <RCCEx_PLL2_Config>
 8007746:	4603      	mov	r3, r0
 8007748:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800774a:	e00c      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	3324      	adds	r3, #36	; 0x24
 8007750:	2102      	movs	r1, #2
 8007752:	4618      	mov	r0, r3
 8007754:	f001 fa78 	bl	8008c48 <RCCEx_PLL3_Config>
 8007758:	4603      	mov	r3, r0
 800775a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800775c:	e003      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	75fb      	strb	r3, [r7, #23]
      break;
 8007762:	e000      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007766:	7dfb      	ldrb	r3, [r7, #23]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d109      	bne.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800776c:	4b9b      	ldr	r3, [pc, #620]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800776e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007770:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007778:	4998      	ldr	r1, [pc, #608]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800777a:	4313      	orrs	r3, r2
 800777c:	650b      	str	r3, [r1, #80]	; 0x50
 800777e:	e001      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007780:	7dfb      	ldrb	r3, [r7, #23]
 8007782:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800778c:	2b00      	cmp	r3, #0
 800778e:	d03d      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007794:	2b04      	cmp	r3, #4
 8007796:	d826      	bhi.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007798:	a201      	add	r2, pc, #4	; (adr r2, 80077a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800779a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779e:	bf00      	nop
 80077a0:	080077b5 	.word	0x080077b5
 80077a4:	080077c3 	.word	0x080077c3
 80077a8:	080077d5 	.word	0x080077d5
 80077ac:	080077ed 	.word	0x080077ed
 80077b0:	080077ed 	.word	0x080077ed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077b4:	4b89      	ldr	r3, [pc, #548]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b8:	4a88      	ldr	r2, [pc, #544]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80077c0:	e015      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	3304      	adds	r3, #4
 80077c6:	2100      	movs	r1, #0
 80077c8:	4618      	mov	r0, r3
 80077ca:	f001 f98b 	bl	8008ae4 <RCCEx_PLL2_Config>
 80077ce:	4603      	mov	r3, r0
 80077d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80077d2:	e00c      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3324      	adds	r3, #36	; 0x24
 80077d8:	2100      	movs	r1, #0
 80077da:	4618      	mov	r0, r3
 80077dc:	f001 fa34 	bl	8008c48 <RCCEx_PLL3_Config>
 80077e0:	4603      	mov	r3, r0
 80077e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80077e4:	e003      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	75fb      	strb	r3, [r7, #23]
      break;
 80077ea:	e000      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80077ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077ee:	7dfb      	ldrb	r3, [r7, #23]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d109      	bne.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80077f4:	4b79      	ldr	r3, [pc, #484]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f8:	f023 0207 	bic.w	r2, r3, #7
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007800:	4976      	ldr	r1, [pc, #472]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007802:	4313      	orrs	r3, r2
 8007804:	650b      	str	r3, [r1, #80]	; 0x50
 8007806:	e001      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007808:	7dfb      	ldrb	r3, [r7, #23]
 800780a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007814:	2b00      	cmp	r3, #0
 8007816:	d042      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800781c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007820:	d02b      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007826:	d825      	bhi.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007828:	2bc0      	cmp	r3, #192	; 0xc0
 800782a:	d028      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800782c:	2bc0      	cmp	r3, #192	; 0xc0
 800782e:	d821      	bhi.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007830:	2b80      	cmp	r3, #128	; 0x80
 8007832:	d016      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007834:	2b80      	cmp	r3, #128	; 0x80
 8007836:	d81d      	bhi.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007838:	2b00      	cmp	r3, #0
 800783a:	d002      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800783c:	2b40      	cmp	r3, #64	; 0x40
 800783e:	d007      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007840:	e018      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007842:	4b66      	ldr	r3, [pc, #408]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007846:	4a65      	ldr	r2, [pc, #404]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800784c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800784e:	e017      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	3304      	adds	r3, #4
 8007854:	2100      	movs	r1, #0
 8007856:	4618      	mov	r0, r3
 8007858:	f001 f944 	bl	8008ae4 <RCCEx_PLL2_Config>
 800785c:	4603      	mov	r3, r0
 800785e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007860:	e00e      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	3324      	adds	r3, #36	; 0x24
 8007866:	2100      	movs	r1, #0
 8007868:	4618      	mov	r0, r3
 800786a:	f001 f9ed 	bl	8008c48 <RCCEx_PLL3_Config>
 800786e:	4603      	mov	r3, r0
 8007870:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007872:	e005      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	75fb      	strb	r3, [r7, #23]
      break;
 8007878:	e002      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800787a:	bf00      	nop
 800787c:	e000      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800787e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007880:	7dfb      	ldrb	r3, [r7, #23]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d109      	bne.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007886:	4b55      	ldr	r3, [pc, #340]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800788a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007892:	4952      	ldr	r1, [pc, #328]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007894:	4313      	orrs	r3, r2
 8007896:	650b      	str	r3, [r1, #80]	; 0x50
 8007898:	e001      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789a:	7dfb      	ldrb	r3, [r7, #23]
 800789c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d049      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80078b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078b4:	d030      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80078b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078ba:	d82a      	bhi.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80078bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80078c0:	d02c      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80078c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80078c6:	d824      	bhi.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80078c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078cc:	d018      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80078ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078d2:	d81e      	bhi.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d003      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80078d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078dc:	d007      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 80078de:	e018      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078e0:	4b3e      	ldr	r3, [pc, #248]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e4:	4a3d      	ldr	r2, [pc, #244]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078ec:	e017      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	3304      	adds	r3, #4
 80078f2:	2100      	movs	r1, #0
 80078f4:	4618      	mov	r0, r3
 80078f6:	f001 f8f5 	bl	8008ae4 <RCCEx_PLL2_Config>
 80078fa:	4603      	mov	r3, r0
 80078fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80078fe:	e00e      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3324      	adds	r3, #36	; 0x24
 8007904:	2100      	movs	r1, #0
 8007906:	4618      	mov	r0, r3
 8007908:	f001 f99e 	bl	8008c48 <RCCEx_PLL3_Config>
 800790c:	4603      	mov	r3, r0
 800790e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007910:	e005      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	75fb      	strb	r3, [r7, #23]
      break;
 8007916:	e002      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007918:	bf00      	nop
 800791a:	e000      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800791c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800791e:	7dfb      	ldrb	r3, [r7, #23]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10a      	bne.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007924:	4b2d      	ldr	r3, [pc, #180]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007928:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007932:	492a      	ldr	r1, [pc, #168]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007934:	4313      	orrs	r3, r2
 8007936:	658b      	str	r3, [r1, #88]	; 0x58
 8007938:	e001      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800793a:	7dfb      	ldrb	r3, [r7, #23]
 800793c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007946:	2b00      	cmp	r3, #0
 8007948:	d04c      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007950:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007954:	d030      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007956:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800795a:	d82a      	bhi.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800795c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007960:	d02c      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007962:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007966:	d824      	bhi.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007968:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800796c:	d018      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800796e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007972:	d81e      	bhi.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800797c:	d007      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800797e:	e018      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007980:	4b16      	ldr	r3, [pc, #88]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007984:	4a15      	ldr	r2, [pc, #84]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800798a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800798c:	e017      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	3304      	adds	r3, #4
 8007992:	2100      	movs	r1, #0
 8007994:	4618      	mov	r0, r3
 8007996:	f001 f8a5 	bl	8008ae4 <RCCEx_PLL2_Config>
 800799a:	4603      	mov	r3, r0
 800799c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800799e:	e00e      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	3324      	adds	r3, #36	; 0x24
 80079a4:	2100      	movs	r1, #0
 80079a6:	4618      	mov	r0, r3
 80079a8:	f001 f94e 	bl	8008c48 <RCCEx_PLL3_Config>
 80079ac:	4603      	mov	r3, r0
 80079ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079b0:	e005      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	75fb      	strb	r3, [r7, #23]
      break;
 80079b6:	e002      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80079b8:	bf00      	nop
 80079ba:	e000      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80079bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079be:	7dfb      	ldrb	r3, [r7, #23]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10d      	bne.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80079c4:	4b05      	ldr	r3, [pc, #20]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079c8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80079d2:	4902      	ldr	r1, [pc, #8]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	658b      	str	r3, [r1, #88]	; 0x58
 80079d8:	e004      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80079da:	bf00      	nop
 80079dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e0:	7dfb      	ldrb	r3, [r7, #23]
 80079e2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d032      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079f4:	2b30      	cmp	r3, #48	; 0x30
 80079f6:	d01c      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80079f8:	2b30      	cmp	r3, #48	; 0x30
 80079fa:	d817      	bhi.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x344>
 80079fc:	2b20      	cmp	r3, #32
 80079fe:	d00c      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007a00:	2b20      	cmp	r3, #32
 8007a02:	d813      	bhi.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d016      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007a08:	2b10      	cmp	r3, #16
 8007a0a:	d10f      	bne.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a0c:	4baf      	ldr	r3, [pc, #700]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a10:	4aae      	ldr	r2, [pc, #696]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007a18:	e00e      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	2102      	movs	r1, #2
 8007a20:	4618      	mov	r0, r3
 8007a22:	f001 f85f 	bl	8008ae4 <RCCEx_PLL2_Config>
 8007a26:	4603      	mov	r3, r0
 8007a28:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007a2a:	e005      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a30:	e002      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007a32:	bf00      	nop
 8007a34:	e000      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007a36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a38:	7dfb      	ldrb	r3, [r7, #23]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d109      	bne.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007a3e:	4ba3      	ldr	r3, [pc, #652]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a4a:	49a0      	ldr	r1, [pc, #640]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a50:	e001      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a52:	7dfb      	ldrb	r3, [r7, #23]
 8007a54:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d047      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a6a:	d030      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007a6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a70:	d82a      	bhi.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007a72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a76:	d02c      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007a78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a7c:	d824      	bhi.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a82:	d018      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a88:	d81e      	bhi.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a92:	d007      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007a94:	e018      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a96:	4b8d      	ldr	r3, [pc, #564]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9a:	4a8c      	ldr	r2, [pc, #560]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aa0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007aa2:	e017      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	3304      	adds	r3, #4
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f001 f81a 	bl	8008ae4 <RCCEx_PLL2_Config>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ab4:	e00e      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	3324      	adds	r3, #36	; 0x24
 8007aba:	2100      	movs	r1, #0
 8007abc:	4618      	mov	r0, r3
 8007abe:	f001 f8c3 	bl	8008c48 <RCCEx_PLL3_Config>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ac6:	e005      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	75fb      	strb	r3, [r7, #23]
      break;
 8007acc:	e002      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007ace:	bf00      	nop
 8007ad0:	e000      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007ad2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ad4:	7dfb      	ldrb	r3, [r7, #23]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d109      	bne.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007ada:	4b7c      	ldr	r3, [pc, #496]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ade:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae6:	4979      	ldr	r1, [pc, #484]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	650b      	str	r3, [r1, #80]	; 0x50
 8007aec:	e001      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aee:	7dfb      	ldrb	r3, [r7, #23]
 8007af0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d049      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b06:	d02e      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b0c:	d828      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007b0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b12:	d02a      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007b14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b18:	d822      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007b1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b1e:	d026      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007b20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b24:	d81c      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007b26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b2a:	d010      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007b2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b30:	d816      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d01d      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b3a:	d111      	bne.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	2101      	movs	r1, #1
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 ffce 	bl	8008ae4 <RCCEx_PLL2_Config>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007b4c:	e012      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	3324      	adds	r3, #36	; 0x24
 8007b52:	2101      	movs	r1, #1
 8007b54:	4618      	mov	r0, r3
 8007b56:	f001 f877 	bl	8008c48 <RCCEx_PLL3_Config>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007b5e:	e009      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	75fb      	strb	r3, [r7, #23]
      break;
 8007b64:	e006      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007b66:	bf00      	nop
 8007b68:	e004      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007b6a:	bf00      	nop
 8007b6c:	e002      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007b6e:	bf00      	nop
 8007b70:	e000      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d109      	bne.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007b7a:	4b54      	ldr	r3, [pc, #336]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b7e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b86:	4951      	ldr	r1, [pc, #324]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	650b      	str	r3, [r1, #80]	; 0x50
 8007b8c:	e001      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b8e:	7dfb      	ldrb	r3, [r7, #23]
 8007b90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d04b      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ba8:	d02e      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007baa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bae:	d828      	bhi.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bb4:	d02a      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bba:	d822      	bhi.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007bbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007bc0:	d026      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007bc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007bc6:	d81c      	bhi.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bcc:	d010      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007bce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bd2:	d816      	bhi.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d01d      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007bd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bdc:	d111      	bne.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	3304      	adds	r3, #4
 8007be2:	2101      	movs	r1, #1
 8007be4:	4618      	mov	r0, r3
 8007be6:	f000 ff7d 	bl	8008ae4 <RCCEx_PLL2_Config>
 8007bea:	4603      	mov	r3, r0
 8007bec:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007bee:	e012      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	3324      	adds	r3, #36	; 0x24
 8007bf4:	2101      	movs	r1, #1
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f001 f826 	bl	8008c48 <RCCEx_PLL3_Config>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007c00:	e009      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	75fb      	strb	r3, [r7, #23]
      break;
 8007c06:	e006      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007c08:	bf00      	nop
 8007c0a:	e004      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007c0c:	bf00      	nop
 8007c0e:	e002      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007c10:	bf00      	nop
 8007c12:	e000      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10a      	bne.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007c1c:	4b2b      	ldr	r3, [pc, #172]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c20:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c2a:	4928      	ldr	r1, [pc, #160]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	658b      	str	r3, [r1, #88]	; 0x58
 8007c30:	e001      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c32:	7dfb      	ldrb	r3, [r7, #23]
 8007c34:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d02f      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c4a:	d00e      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007c4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c50:	d814      	bhi.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d015      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007c56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c5a:	d10f      	bne.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c5c:	4b1b      	ldr	r3, [pc, #108]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c60:	4a1a      	ldr	r2, [pc, #104]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007c68:	e00c      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	3304      	adds	r3, #4
 8007c6e:	2101      	movs	r1, #1
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 ff37 	bl	8008ae4 <RCCEx_PLL2_Config>
 8007c76:	4603      	mov	r3, r0
 8007c78:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007c7a:	e003      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c80:	e000      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007c82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d109      	bne.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c8a:	4b10      	ldr	r3, [pc, #64]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c96:	490d      	ldr	r1, [pc, #52]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	650b      	str	r3, [r1, #80]	; 0x50
 8007c9c:	e001      	b.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ca0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d033      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d81c      	bhi.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007cb6:	a201      	add	r2, pc, #4	; (adr r2, 8007cbc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cbc:	08007cf7 	.word	0x08007cf7
 8007cc0:	08007cd1 	.word	0x08007cd1
 8007cc4:	08007cdf 	.word	0x08007cdf
 8007cc8:	08007cf7 	.word	0x08007cf7
 8007ccc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cd0:	4bb8      	ldr	r3, [pc, #736]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd4:	4ab7      	ldr	r2, [pc, #732]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007cdc:	e00c      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	2102      	movs	r1, #2
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 fefd 	bl	8008ae4 <RCCEx_PLL2_Config>
 8007cea:	4603      	mov	r3, r0
 8007cec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007cee:	e003      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cf4:	e000      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007cf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cf8:	7dfb      	ldrb	r3, [r7, #23]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d109      	bne.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007cfe:	4bad      	ldr	r3, [pc, #692]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d02:	f023 0203 	bic.w	r2, r3, #3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d0a:	49aa      	ldr	r1, [pc, #680]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d10:	e001      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
 8007d14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f000 8086 	beq.w	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d24:	4ba4      	ldr	r3, [pc, #656]	; (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4aa3      	ldr	r2, [pc, #652]	; (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d30:	f7fb fec2 	bl	8003ab8 <HAL_GetTick>
 8007d34:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d36:	e009      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d38:	f7fb febe 	bl	8003ab8 <HAL_GetTick>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	2b64      	cmp	r3, #100	; 0x64
 8007d44:	d902      	bls.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	75fb      	strb	r3, [r7, #23]
        break;
 8007d4a:	e005      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d4c:	4b9a      	ldr	r3, [pc, #616]	; (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d0ef      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d166      	bne.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007d5e:	4b95      	ldr	r3, [pc, #596]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d68:	4053      	eors	r3, r2
 8007d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d013      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d72:	4b90      	ldr	r3, [pc, #576]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d7a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d7c:	4b8d      	ldr	r3, [pc, #564]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d80:	4a8c      	ldr	r2, [pc, #560]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d86:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d88:	4b8a      	ldr	r3, [pc, #552]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d8c:	4a89      	ldr	r2, [pc, #548]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d92:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007d94:	4a87      	ldr	r2, [pc, #540]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007da4:	d115      	bne.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da6:	f7fb fe87 	bl	8003ab8 <HAL_GetTick>
 8007daa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dac:	e00b      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dae:	f7fb fe83 	bl	8003ab8 <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d902      	bls.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	75fb      	strb	r3, [r7, #23]
            break;
 8007dc4:	e005      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dc6:	4b7b      	ldr	r3, [pc, #492]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dca:	f003 0302 	and.w	r3, r3, #2
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d0ed      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007dd2:	7dfb      	ldrb	r3, [r7, #23]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d126      	bne.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007de2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007de6:	d10d      	bne.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007de8:	4b72      	ldr	r3, [pc, #456]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007df6:	0919      	lsrs	r1, r3, #4
 8007df8:	4b70      	ldr	r3, [pc, #448]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007dfa:	400b      	ands	r3, r1
 8007dfc:	496d      	ldr	r1, [pc, #436]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	610b      	str	r3, [r1, #16]
 8007e02:	e005      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007e04:	4b6b      	ldr	r3, [pc, #428]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	4a6a      	ldr	r2, [pc, #424]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e0a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007e0e:	6113      	str	r3, [r2, #16]
 8007e10:	4b68      	ldr	r3, [pc, #416]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e1e:	4965      	ldr	r1, [pc, #404]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e20:	4313      	orrs	r3, r2
 8007e22:	670b      	str	r3, [r1, #112]	; 0x70
 8007e24:	e004      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e26:	7dfb      	ldrb	r3, [r7, #23]
 8007e28:	75bb      	strb	r3, [r7, #22]
 8007e2a:	e001      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e2c:	7dfb      	ldrb	r3, [r7, #23]
 8007e2e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d07e      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e40:	2b28      	cmp	r3, #40	; 0x28
 8007e42:	d867      	bhi.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007e44:	a201      	add	r2, pc, #4	; (adr r2, 8007e4c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4a:	bf00      	nop
 8007e4c:	08007f1b 	.word	0x08007f1b
 8007e50:	08007f15 	.word	0x08007f15
 8007e54:	08007f15 	.word	0x08007f15
 8007e58:	08007f15 	.word	0x08007f15
 8007e5c:	08007f15 	.word	0x08007f15
 8007e60:	08007f15 	.word	0x08007f15
 8007e64:	08007f15 	.word	0x08007f15
 8007e68:	08007f15 	.word	0x08007f15
 8007e6c:	08007ef1 	.word	0x08007ef1
 8007e70:	08007f15 	.word	0x08007f15
 8007e74:	08007f15 	.word	0x08007f15
 8007e78:	08007f15 	.word	0x08007f15
 8007e7c:	08007f15 	.word	0x08007f15
 8007e80:	08007f15 	.word	0x08007f15
 8007e84:	08007f15 	.word	0x08007f15
 8007e88:	08007f15 	.word	0x08007f15
 8007e8c:	08007f03 	.word	0x08007f03
 8007e90:	08007f15 	.word	0x08007f15
 8007e94:	08007f15 	.word	0x08007f15
 8007e98:	08007f15 	.word	0x08007f15
 8007e9c:	08007f15 	.word	0x08007f15
 8007ea0:	08007f15 	.word	0x08007f15
 8007ea4:	08007f15 	.word	0x08007f15
 8007ea8:	08007f15 	.word	0x08007f15
 8007eac:	08007f1b 	.word	0x08007f1b
 8007eb0:	08007f15 	.word	0x08007f15
 8007eb4:	08007f15 	.word	0x08007f15
 8007eb8:	08007f15 	.word	0x08007f15
 8007ebc:	08007f15 	.word	0x08007f15
 8007ec0:	08007f15 	.word	0x08007f15
 8007ec4:	08007f15 	.word	0x08007f15
 8007ec8:	08007f15 	.word	0x08007f15
 8007ecc:	08007f1b 	.word	0x08007f1b
 8007ed0:	08007f15 	.word	0x08007f15
 8007ed4:	08007f15 	.word	0x08007f15
 8007ed8:	08007f15 	.word	0x08007f15
 8007edc:	08007f15 	.word	0x08007f15
 8007ee0:	08007f15 	.word	0x08007f15
 8007ee4:	08007f15 	.word	0x08007f15
 8007ee8:	08007f15 	.word	0x08007f15
 8007eec:	08007f1b 	.word	0x08007f1b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	2101      	movs	r1, #1
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 fdf4 	bl	8008ae4 <RCCEx_PLL2_Config>
 8007efc:	4603      	mov	r3, r0
 8007efe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007f00:	e00c      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	3324      	adds	r3, #36	; 0x24
 8007f06:	2101      	movs	r1, #1
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f000 fe9d 	bl	8008c48 <RCCEx_PLL3_Config>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007f12:	e003      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	75fb      	strb	r3, [r7, #23]
      break;
 8007f18:	e000      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007f1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f1c:	7dfb      	ldrb	r3, [r7, #23]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d109      	bne.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007f22:	4b24      	ldr	r3, [pc, #144]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f26:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f2e:	4921      	ldr	r1, [pc, #132]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f30:	4313      	orrs	r3, r2
 8007f32:	654b      	str	r3, [r1, #84]	; 0x54
 8007f34:	e001      	b.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f36:	7dfb      	ldrb	r3, [r7, #23]
 8007f38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d03e      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f4a:	2b05      	cmp	r3, #5
 8007f4c:	d820      	bhi.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007f4e:	a201      	add	r2, pc, #4	; (adr r2, 8007f54 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f54:	08007f97 	.word	0x08007f97
 8007f58:	08007f6d 	.word	0x08007f6d
 8007f5c:	08007f7f 	.word	0x08007f7f
 8007f60:	08007f97 	.word	0x08007f97
 8007f64:	08007f97 	.word	0x08007f97
 8007f68:	08007f97 	.word	0x08007f97
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	3304      	adds	r3, #4
 8007f70:	2101      	movs	r1, #1
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 fdb6 	bl	8008ae4 <RCCEx_PLL2_Config>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007f7c:	e00c      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	3324      	adds	r3, #36	; 0x24
 8007f82:	2101      	movs	r1, #1
 8007f84:	4618      	mov	r0, r3
 8007f86:	f000 fe5f 	bl	8008c48 <RCCEx_PLL3_Config>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007f8e:	e003      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	75fb      	strb	r3, [r7, #23]
      break;
 8007f94:	e000      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007f96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f98:	7dfb      	ldrb	r3, [r7, #23]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d110      	bne.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007f9e:	4b05      	ldr	r3, [pc, #20]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa2:	f023 0207 	bic.w	r2, r3, #7
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007faa:	4902      	ldr	r1, [pc, #8]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007fac:	4313      	orrs	r3, r2
 8007fae:	654b      	str	r3, [r1, #84]	; 0x54
 8007fb0:	e008      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8007fb2:	bf00      	nop
 8007fb4:	58024400 	.word	0x58024400
 8007fb8:	58024800 	.word	0x58024800
 8007fbc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc0:	7dfb      	ldrb	r3, [r7, #23]
 8007fc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0304 	and.w	r3, r3, #4
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d039      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fd6:	2b05      	cmp	r3, #5
 8007fd8:	d820      	bhi.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007fda:	a201      	add	r2, pc, #4	; (adr r2, 8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe0:	08008023 	.word	0x08008023
 8007fe4:	08007ff9 	.word	0x08007ff9
 8007fe8:	0800800b 	.word	0x0800800b
 8007fec:	08008023 	.word	0x08008023
 8007ff0:	08008023 	.word	0x08008023
 8007ff4:	08008023 	.word	0x08008023
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	2101      	movs	r1, #1
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 fd70 	bl	8008ae4 <RCCEx_PLL2_Config>
 8008004:	4603      	mov	r3, r0
 8008006:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008008:	e00c      	b.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	3324      	adds	r3, #36	; 0x24
 800800e:	2101      	movs	r1, #1
 8008010:	4618      	mov	r0, r3
 8008012:	f000 fe19 	bl	8008c48 <RCCEx_PLL3_Config>
 8008016:	4603      	mov	r3, r0
 8008018:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800801a:	e003      	b.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	75fb      	strb	r3, [r7, #23]
      break;
 8008020:	e000      	b.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008022:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008024:	7dfb      	ldrb	r3, [r7, #23]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10a      	bne.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800802a:	4bb7      	ldr	r3, [pc, #732]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800802c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800802e:	f023 0207 	bic.w	r2, r3, #7
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008038:	49b3      	ldr	r1, [pc, #716]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800803a:	4313      	orrs	r3, r2
 800803c:	658b      	str	r3, [r1, #88]	; 0x58
 800803e:	e001      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008040:	7dfb      	ldrb	r3, [r7, #23]
 8008042:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0320 	and.w	r3, r3, #32
 800804c:	2b00      	cmp	r3, #0
 800804e:	d04b      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008056:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800805a:	d02e      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800805c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008060:	d828      	bhi.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008066:	d02a      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800806c:	d822      	bhi.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800806e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008072:	d026      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008074:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008078:	d81c      	bhi.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800807a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800807e:	d010      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008084:	d816      	bhi.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008086:	2b00      	cmp	r3, #0
 8008088:	d01d      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800808a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800808e:	d111      	bne.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	3304      	adds	r3, #4
 8008094:	2100      	movs	r1, #0
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fd24 	bl	8008ae4 <RCCEx_PLL2_Config>
 800809c:	4603      	mov	r3, r0
 800809e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80080a0:	e012      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	3324      	adds	r3, #36	; 0x24
 80080a6:	2102      	movs	r1, #2
 80080a8:	4618      	mov	r0, r3
 80080aa:	f000 fdcd 	bl	8008c48 <RCCEx_PLL3_Config>
 80080ae:	4603      	mov	r3, r0
 80080b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80080b2:	e009      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	75fb      	strb	r3, [r7, #23]
      break;
 80080b8:	e006      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80080ba:	bf00      	nop
 80080bc:	e004      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80080be:	bf00      	nop
 80080c0:	e002      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80080c2:	bf00      	nop
 80080c4:	e000      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80080c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080c8:	7dfb      	ldrb	r3, [r7, #23]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10a      	bne.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080ce:	4b8e      	ldr	r3, [pc, #568]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80080d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080d2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080dc:	498a      	ldr	r1, [pc, #552]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	654b      	str	r3, [r1, #84]	; 0x54
 80080e2:	e001      	b.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080e4:	7dfb      	ldrb	r3, [r7, #23]
 80080e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d04b      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80080fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80080fe:	d02e      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008100:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008104:	d828      	bhi.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800810a:	d02a      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800810c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008110:	d822      	bhi.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008112:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008116:	d026      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008118:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800811c:	d81c      	bhi.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800811e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008122:	d010      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008128:	d816      	bhi.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800812a:	2b00      	cmp	r3, #0
 800812c:	d01d      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800812e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008132:	d111      	bne.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	3304      	adds	r3, #4
 8008138:	2100      	movs	r1, #0
 800813a:	4618      	mov	r0, r3
 800813c:	f000 fcd2 	bl	8008ae4 <RCCEx_PLL2_Config>
 8008140:	4603      	mov	r3, r0
 8008142:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008144:	e012      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	3324      	adds	r3, #36	; 0x24
 800814a:	2102      	movs	r1, #2
 800814c:	4618      	mov	r0, r3
 800814e:	f000 fd7b 	bl	8008c48 <RCCEx_PLL3_Config>
 8008152:	4603      	mov	r3, r0
 8008154:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008156:	e009      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	75fb      	strb	r3, [r7, #23]
      break;
 800815c:	e006      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800815e:	bf00      	nop
 8008160:	e004      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008162:	bf00      	nop
 8008164:	e002      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008166:	bf00      	nop
 8008168:	e000      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800816a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800816c:	7dfb      	ldrb	r3, [r7, #23]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10a      	bne.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008172:	4b65      	ldr	r3, [pc, #404]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008176:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008180:	4961      	ldr	r1, [pc, #388]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008182:	4313      	orrs	r3, r2
 8008184:	658b      	str	r3, [r1, #88]	; 0x58
 8008186:	e001      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008188:	7dfb      	ldrb	r3, [r7, #23]
 800818a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008194:	2b00      	cmp	r3, #0
 8008196:	d04b      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800819e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80081a2:	d02e      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80081a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80081a8:	d828      	bhi.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80081aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081ae:	d02a      	beq.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80081b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081b4:	d822      	bhi.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80081b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80081ba:	d026      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80081bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80081c0:	d81c      	bhi.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80081c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081c6:	d010      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80081c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081cc:	d816      	bhi.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d01d      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80081d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081d6:	d111      	bne.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	3304      	adds	r3, #4
 80081dc:	2100      	movs	r1, #0
 80081de:	4618      	mov	r0, r3
 80081e0:	f000 fc80 	bl	8008ae4 <RCCEx_PLL2_Config>
 80081e4:	4603      	mov	r3, r0
 80081e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80081e8:	e012      	b.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3324      	adds	r3, #36	; 0x24
 80081ee:	2102      	movs	r1, #2
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 fd29 	bl	8008c48 <RCCEx_PLL3_Config>
 80081f6:	4603      	mov	r3, r0
 80081f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80081fa:	e009      	b.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008200:	e006      	b.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008202:	bf00      	nop
 8008204:	e004      	b.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008206:	bf00      	nop
 8008208:	e002      	b.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800820a:	bf00      	nop
 800820c:	e000      	b.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800820e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008210:	7dfb      	ldrb	r3, [r7, #23]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10a      	bne.n	800822c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008216:	4b3c      	ldr	r3, [pc, #240]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800821a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008224:	4938      	ldr	r1, [pc, #224]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008226:	4313      	orrs	r3, r2
 8008228:	658b      	str	r3, [r1, #88]	; 0x58
 800822a:	e001      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800822c:	7dfb      	ldrb	r3, [r7, #23]
 800822e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0308 	and.w	r3, r3, #8
 8008238:	2b00      	cmp	r3, #0
 800823a:	d01a      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008246:	d10a      	bne.n	800825e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3324      	adds	r3, #36	; 0x24
 800824c:	2102      	movs	r1, #2
 800824e:	4618      	mov	r0, r3
 8008250:	f000 fcfa 	bl	8008c48 <RCCEx_PLL3_Config>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800825e:	4b2a      	ldr	r3, [pc, #168]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008262:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800826c:	4926      	ldr	r1, [pc, #152]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800826e:	4313      	orrs	r3, r2
 8008270:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 0310 	and.w	r3, r3, #16
 800827a:	2b00      	cmp	r3, #0
 800827c:	d01a      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008288:	d10a      	bne.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	3324      	adds	r3, #36	; 0x24
 800828e:	2102      	movs	r1, #2
 8008290:	4618      	mov	r0, r3
 8008292:	f000 fcd9 	bl	8008c48 <RCCEx_PLL3_Config>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d001      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80082a0:	4b19      	ldr	r3, [pc, #100]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80082a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082ae:	4916      	ldr	r1, [pc, #88]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80082b0:	4313      	orrs	r3, r2
 80082b2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d036      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80082c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082ca:	d01f      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80082cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082d0:	d817      	bhi.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d003      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80082d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082da:	d009      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80082dc:	e011      	b.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	3304      	adds	r3, #4
 80082e2:	2100      	movs	r1, #0
 80082e4:	4618      	mov	r0, r3
 80082e6:	f000 fbfd 	bl	8008ae4 <RCCEx_PLL2_Config>
 80082ea:	4603      	mov	r3, r0
 80082ec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80082ee:	e00e      	b.n	800830e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3324      	adds	r3, #36	; 0x24
 80082f4:	2102      	movs	r1, #2
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 fca6 	bl	8008c48 <RCCEx_PLL3_Config>
 80082fc:	4603      	mov	r3, r0
 80082fe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008300:	e005      	b.n	800830e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	75fb      	strb	r3, [r7, #23]
      break;
 8008306:	e002      	b.n	800830e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008308:	58024400 	.word	0x58024400
      break;
 800830c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800830e:	7dfb      	ldrb	r3, [r7, #23]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d10a      	bne.n	800832a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008314:	4b93      	ldr	r3, [pc, #588]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008318:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008322:	4990      	ldr	r1, [pc, #576]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008324:	4313      	orrs	r3, r2
 8008326:	658b      	str	r3, [r1, #88]	; 0x58
 8008328:	e001      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800832a:	7dfb      	ldrb	r3, [r7, #23]
 800832c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d033      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008340:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008344:	d01c      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008346:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800834a:	d816      	bhi.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800834c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008350:	d003      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008352:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008356:	d007      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008358:	e00f      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800835a:	4b82      	ldr	r3, [pc, #520]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800835c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835e:	4a81      	ldr	r2, [pc, #516]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008364:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008366:	e00c      	b.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	3324      	adds	r3, #36	; 0x24
 800836c:	2101      	movs	r1, #1
 800836e:	4618      	mov	r0, r3
 8008370:	f000 fc6a 	bl	8008c48 <RCCEx_PLL3_Config>
 8008374:	4603      	mov	r3, r0
 8008376:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008378:	e003      	b.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	75fb      	strb	r3, [r7, #23]
      break;
 800837e:	e000      	b.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008380:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008382:	7dfb      	ldrb	r3, [r7, #23]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10a      	bne.n	800839e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008388:	4b76      	ldr	r3, [pc, #472]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800838a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800838c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008396:	4973      	ldr	r1, [pc, #460]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008398:	4313      	orrs	r3, r2
 800839a:	654b      	str	r3, [r1, #84]	; 0x54
 800839c:	e001      	b.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800839e:	7dfb      	ldrb	r3, [r7, #23]
 80083a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d029      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d003      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80083b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083ba:	d007      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80083bc:	e00f      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083be:	4b69      	ldr	r3, [pc, #420]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80083c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c2:	4a68      	ldr	r2, [pc, #416]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80083c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80083ca:	e00b      	b.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	3304      	adds	r3, #4
 80083d0:	2102      	movs	r1, #2
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 fb86 	bl	8008ae4 <RCCEx_PLL2_Config>
 80083d8:	4603      	mov	r3, r0
 80083da:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80083dc:	e002      	b.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	75fb      	strb	r3, [r7, #23]
      break;
 80083e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083e4:	7dfb      	ldrb	r3, [r7, #23]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d109      	bne.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80083ea:	4b5e      	ldr	r3, [pc, #376]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80083ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083f6:	495b      	ldr	r1, [pc, #364]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80083f8:	4313      	orrs	r3, r2
 80083fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80083fc:	e001      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
 8008400:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00a      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	3324      	adds	r3, #36	; 0x24
 8008412:	2102      	movs	r1, #2
 8008414:	4618      	mov	r0, r3
 8008416:	f000 fc17 	bl	8008c48 <RCCEx_PLL3_Config>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800842c:	2b00      	cmp	r3, #0
 800842e:	d030      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008434:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008438:	d017      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800843a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800843e:	d811      	bhi.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008444:	d013      	beq.n	800846e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800844a:	d80b      	bhi.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800844c:	2b00      	cmp	r3, #0
 800844e:	d010      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008454:	d106      	bne.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008456:	4b43      	ldr	r3, [pc, #268]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845a:	4a42      	ldr	r2, [pc, #264]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800845c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008460:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008462:	e007      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	75fb      	strb	r3, [r7, #23]
      break;
 8008468:	e004      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800846a:	bf00      	nop
 800846c:	e002      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800846e:	bf00      	nop
 8008470:	e000      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008472:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008474:	7dfb      	ldrb	r3, [r7, #23]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d109      	bne.n	800848e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800847a:	4b3a      	ldr	r3, [pc, #232]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800847c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800847e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008486:	4937      	ldr	r1, [pc, #220]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008488:	4313      	orrs	r3, r2
 800848a:	654b      	str	r3, [r1, #84]	; 0x54
 800848c:	e001      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800848e:	7dfb      	ldrb	r3, [r7, #23]
 8008490:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d008      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800849e:	4b31      	ldr	r3, [pc, #196]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084aa:	492e      	ldr	r1, [pc, #184]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084ac:	4313      	orrs	r3, r2
 80084ae:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d009      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80084bc:	4b29      	ldr	r3, [pc, #164]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80084ca:	4926      	ldr	r1, [pc, #152]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084cc:	4313      	orrs	r3, r2
 80084ce:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d008      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80084dc:	4b21      	ldr	r3, [pc, #132]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084e8:	491e      	ldr	r1, [pc, #120]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00d      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084fa:	4b1a      	ldr	r3, [pc, #104]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	4a19      	ldr	r2, [pc, #100]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008500:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008504:	6113      	str	r3, [r2, #16]
 8008506:	4b17      	ldr	r3, [pc, #92]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008508:	691a      	ldr	r2, [r3, #16]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008510:	4914      	ldr	r1, [pc, #80]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008512:	4313      	orrs	r3, r2
 8008514:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	da08      	bge.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800851e:	4b11      	ldr	r3, [pc, #68]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008522:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800852a:	490e      	ldr	r1, [pc, #56]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800852c:	4313      	orrs	r3, r2
 800852e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d009      	beq.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800853c:	4b09      	ldr	r3, [pc, #36]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800853e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008540:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800854a:	4906      	ldr	r1, [pc, #24]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800854c:	4313      	orrs	r3, r2
 800854e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008550:	7dbb      	ldrb	r3, [r7, #22]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d101      	bne.n	800855a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	e000      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
}
 800855c:	4618      	mov	r0, r3
 800855e:	3718      	adds	r7, #24
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	58024400 	.word	0x58024400

08008568 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800856c:	f7ff f860 	bl	8007630 <HAL_RCC_GetHCLKFreq>
 8008570:	4602      	mov	r2, r0
 8008572:	4b06      	ldr	r3, [pc, #24]	; (800858c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008574:	6a1b      	ldr	r3, [r3, #32]
 8008576:	091b      	lsrs	r3, r3, #4
 8008578:	f003 0307 	and.w	r3, r3, #7
 800857c:	4904      	ldr	r1, [pc, #16]	; (8008590 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800857e:	5ccb      	ldrb	r3, [r1, r3]
 8008580:	f003 031f 	and.w	r3, r3, #31
 8008584:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008588:	4618      	mov	r0, r3
 800858a:	bd80      	pop	{r7, pc}
 800858c:	58024400 	.word	0x58024400
 8008590:	0800f280 	.word	0x0800f280

08008594 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008594:	b480      	push	{r7}
 8008596:	b089      	sub	sp, #36	; 0x24
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800859c:	4ba1      	ldr	r3, [pc, #644]	; (8008824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800859e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a0:	f003 0303 	and.w	r3, r3, #3
 80085a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80085a6:	4b9f      	ldr	r3, [pc, #636]	; (8008824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085aa:	0b1b      	lsrs	r3, r3, #12
 80085ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80085b2:	4b9c      	ldr	r3, [pc, #624]	; (8008824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b6:	091b      	lsrs	r3, r3, #4
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80085be:	4b99      	ldr	r3, [pc, #612]	; (8008824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c2:	08db      	lsrs	r3, r3, #3
 80085c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	fb02 f303 	mul.w	r3, r2, r3
 80085ce:	ee07 3a90 	vmov	s15, r3
 80085d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 8111 	beq.w	8008804 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	f000 8083 	beq.w	80086f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	f200 80a1 	bhi.w	8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d003      	beq.n	8008600 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d056      	beq.n	80086ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80085fe:	e099      	b.n	8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008600:	4b88      	ldr	r3, [pc, #544]	; (8008824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0320 	and.w	r3, r3, #32
 8008608:	2b00      	cmp	r3, #0
 800860a:	d02d      	beq.n	8008668 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800860c:	4b85      	ldr	r3, [pc, #532]	; (8008824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	08db      	lsrs	r3, r3, #3
 8008612:	f003 0303 	and.w	r3, r3, #3
 8008616:	4a84      	ldr	r2, [pc, #528]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008618:	fa22 f303 	lsr.w	r3, r2, r3
 800861c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	ee07 3a90 	vmov	s15, r3
 8008624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	ee07 3a90 	vmov	s15, r3
 800862e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008636:	4b7b      	ldr	r3, [pc, #492]	; (8008824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800863e:	ee07 3a90 	vmov	s15, r3
 8008642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008646:	ed97 6a03 	vldr	s12, [r7, #12]
 800864a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800882c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800864e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800865a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800865e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008662:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008666:	e087      	b.n	8008778 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	ee07 3a90 	vmov	s15, r3
 800866e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008672:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008830 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800867a:	4b6a      	ldr	r3, [pc, #424]	; (8008824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800867c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800867e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008682:	ee07 3a90 	vmov	s15, r3
 8008686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800868a:	ed97 6a03 	vldr	s12, [r7, #12]
 800868e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800882c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800869a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800869e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086aa:	e065      	b.n	8008778 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	ee07 3a90 	vmov	s15, r3
 80086b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80086ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086be:	4b59      	ldr	r3, [pc, #356]	; (8008824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086c6:	ee07 3a90 	vmov	s15, r3
 80086ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80086d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800882c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086ee:	e043      	b.n	8008778 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	ee07 3a90 	vmov	s15, r3
 80086f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008838 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80086fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008702:	4b48      	ldr	r3, [pc, #288]	; (8008824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800870a:	ee07 3a90 	vmov	s15, r3
 800870e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008712:	ed97 6a03 	vldr	s12, [r7, #12]
 8008716:	eddf 5a45 	vldr	s11, [pc, #276]	; 800882c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800871a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800871e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800872a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800872e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008732:	e021      	b.n	8008778 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	ee07 3a90 	vmov	s15, r3
 800873a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800873e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008746:	4b37      	ldr	r3, [pc, #220]	; (8008824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800874e:	ee07 3a90 	vmov	s15, r3
 8008752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008756:	ed97 6a03 	vldr	s12, [r7, #12]
 800875a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800882c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800875e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800876a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800876e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008772:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008776:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008778:	4b2a      	ldr	r3, [pc, #168]	; (8008824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800877a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877c:	0a5b      	lsrs	r3, r3, #9
 800877e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008782:	ee07 3a90 	vmov	s15, r3
 8008786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800878a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800878e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008792:	edd7 6a07 	vldr	s13, [r7, #28]
 8008796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800879a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800879e:	ee17 2a90 	vmov	r2, s15
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80087a6:	4b1f      	ldr	r3, [pc, #124]	; (8008824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087aa:	0c1b      	lsrs	r3, r3, #16
 80087ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087b0:	ee07 3a90 	vmov	s15, r3
 80087b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80087c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087cc:	ee17 2a90 	vmov	r2, s15
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80087d4:	4b13      	ldr	r3, [pc, #76]	; (8008824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d8:	0e1b      	lsrs	r3, r3, #24
 80087da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087de:	ee07 3a90 	vmov	s15, r3
 80087e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80087f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087fa:	ee17 2a90 	vmov	r2, s15
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008802:	e008      	b.n	8008816 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	609a      	str	r2, [r3, #8]
}
 8008816:	bf00      	nop
 8008818:	3724      	adds	r7, #36	; 0x24
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	58024400 	.word	0x58024400
 8008828:	03d09000 	.word	0x03d09000
 800882c:	46000000 	.word	0x46000000
 8008830:	4c742400 	.word	0x4c742400
 8008834:	4a742400 	.word	0x4a742400
 8008838:	4c371b00 	.word	0x4c371b00

0800883c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800883c:	b480      	push	{r7}
 800883e:	b089      	sub	sp, #36	; 0x24
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008844:	4ba1      	ldr	r3, [pc, #644]	; (8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008848:	f003 0303 	and.w	r3, r3, #3
 800884c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800884e:	4b9f      	ldr	r3, [pc, #636]	; (8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008852:	0d1b      	lsrs	r3, r3, #20
 8008854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008858:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800885a:	4b9c      	ldr	r3, [pc, #624]	; (8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800885c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800885e:	0a1b      	lsrs	r3, r3, #8
 8008860:	f003 0301 	and.w	r3, r3, #1
 8008864:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008866:	4b99      	ldr	r3, [pc, #612]	; (8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800886a:	08db      	lsrs	r3, r3, #3
 800886c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	fb02 f303 	mul.w	r3, r2, r3
 8008876:	ee07 3a90 	vmov	s15, r3
 800887a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800887e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	2b00      	cmp	r3, #0
 8008886:	f000 8111 	beq.w	8008aac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	2b02      	cmp	r3, #2
 800888e:	f000 8083 	beq.w	8008998 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	2b02      	cmp	r3, #2
 8008896:	f200 80a1 	bhi.w	80089dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d003      	beq.n	80088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d056      	beq.n	8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80088a6:	e099      	b.n	80089dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088a8:	4b88      	ldr	r3, [pc, #544]	; (8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 0320 	and.w	r3, r3, #32
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d02d      	beq.n	8008910 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088b4:	4b85      	ldr	r3, [pc, #532]	; (8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	08db      	lsrs	r3, r3, #3
 80088ba:	f003 0303 	and.w	r3, r3, #3
 80088be:	4a84      	ldr	r2, [pc, #528]	; (8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80088c0:	fa22 f303 	lsr.w	r3, r2, r3
 80088c4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	ee07 3a90 	vmov	s15, r3
 80088cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	ee07 3a90 	vmov	s15, r3
 80088d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088de:	4b7b      	ldr	r3, [pc, #492]	; (8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088e6:	ee07 3a90 	vmov	s15, r3
 80088ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80088f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80088f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800890a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800890e:	e087      	b.n	8008a20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	ee07 3a90 	vmov	s15, r3
 8008916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800891a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800891e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008922:	4b6a      	ldr	r3, [pc, #424]	; (8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800892a:	ee07 3a90 	vmov	s15, r3
 800892e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008932:	ed97 6a03 	vldr	s12, [r7, #12]
 8008936:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800893a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800893e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800894a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800894e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008952:	e065      	b.n	8008a20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	ee07 3a90 	vmov	s15, r3
 800895a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800895e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008966:	4b59      	ldr	r3, [pc, #356]	; (8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800896e:	ee07 3a90 	vmov	s15, r3
 8008972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008976:	ed97 6a03 	vldr	s12, [r7, #12]
 800897a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800897e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800898a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800898e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008992:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008996:	e043      	b.n	8008a20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	ee07 3a90 	vmov	s15, r3
 800899e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80089a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089aa:	4b48      	ldr	r3, [pc, #288]	; (8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089b2:	ee07 3a90 	vmov	s15, r3
 80089b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80089be:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089da:	e021      	b.n	8008a20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	ee07 3a90 	vmov	s15, r3
 80089e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80089ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ee:	4b37      	ldr	r3, [pc, #220]	; (8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f6:	ee07 3a90 	vmov	s15, r3
 80089fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a1e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008a20:	4b2a      	ldr	r3, [pc, #168]	; (8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a24:	0a5b      	lsrs	r3, r3, #9
 8008a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a2a:	ee07 3a90 	vmov	s15, r3
 8008a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a46:	ee17 2a90 	vmov	r2, s15
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008a4e:	4b1f      	ldr	r3, [pc, #124]	; (8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a52:	0c1b      	lsrs	r3, r3, #16
 8008a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a58:	ee07 3a90 	vmov	s15, r3
 8008a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a68:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a74:	ee17 2a90 	vmov	r2, s15
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008a7c:	4b13      	ldr	r3, [pc, #76]	; (8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a80:	0e1b      	lsrs	r3, r3, #24
 8008a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a86:	ee07 3a90 	vmov	s15, r3
 8008a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a96:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aa2:	ee17 2a90 	vmov	r2, s15
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008aaa:	e008      	b.n	8008abe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	609a      	str	r2, [r3, #8]
}
 8008abe:	bf00      	nop
 8008ac0:	3724      	adds	r7, #36	; 0x24
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	58024400 	.word	0x58024400
 8008ad0:	03d09000 	.word	0x03d09000
 8008ad4:	46000000 	.word	0x46000000
 8008ad8:	4c742400 	.word	0x4c742400
 8008adc:	4a742400 	.word	0x4a742400
 8008ae0:	4c371b00 	.word	0x4c371b00

08008ae4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008af2:	4b53      	ldr	r3, [pc, #332]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af6:	f003 0303 	and.w	r3, r3, #3
 8008afa:	2b03      	cmp	r3, #3
 8008afc:	d101      	bne.n	8008b02 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e099      	b.n	8008c36 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008b02:	4b4f      	ldr	r3, [pc, #316]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a4e      	ldr	r2, [pc, #312]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008b08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b0e:	f7fa ffd3 	bl	8003ab8 <HAL_GetTick>
 8008b12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b14:	e008      	b.n	8008b28 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008b16:	f7fa ffcf 	bl	8003ab8 <HAL_GetTick>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d901      	bls.n	8008b28 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e086      	b.n	8008c36 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b28:	4b45      	ldr	r3, [pc, #276]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1f0      	bne.n	8008b16 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008b34:	4b42      	ldr	r3, [pc, #264]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b38:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	031b      	lsls	r3, r3, #12
 8008b42:	493f      	ldr	r1, [pc, #252]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008b44:	4313      	orrs	r3, r2
 8008b46:	628b      	str	r3, [r1, #40]	; 0x28
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	3b01      	subs	r3, #1
 8008b58:	025b      	lsls	r3, r3, #9
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	431a      	orrs	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	3b01      	subs	r3, #1
 8008b64:	041b      	lsls	r3, r3, #16
 8008b66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008b6a:	431a      	orrs	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	3b01      	subs	r3, #1
 8008b72:	061b      	lsls	r3, r3, #24
 8008b74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b78:	4931      	ldr	r1, [pc, #196]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008b7e:	4b30      	ldr	r3, [pc, #192]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	695b      	ldr	r3, [r3, #20]
 8008b8a:	492d      	ldr	r1, [pc, #180]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008b90:	4b2b      	ldr	r3, [pc, #172]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b94:	f023 0220 	bic.w	r2, r3, #32
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	4928      	ldr	r1, [pc, #160]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008ba2:	4b27      	ldr	r3, [pc, #156]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba6:	4a26      	ldr	r2, [pc, #152]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008ba8:	f023 0310 	bic.w	r3, r3, #16
 8008bac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008bae:	4b24      	ldr	r3, [pc, #144]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008bb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bb2:	4b24      	ldr	r3, [pc, #144]	; (8008c44 <RCCEx_PLL2_Config+0x160>)
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	69d2      	ldr	r2, [r2, #28]
 8008bba:	00d2      	lsls	r2, r2, #3
 8008bbc:	4920      	ldr	r1, [pc, #128]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008bc2:	4b1f      	ldr	r3, [pc, #124]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc6:	4a1e      	ldr	r2, [pc, #120]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008bc8:	f043 0310 	orr.w	r3, r3, #16
 8008bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d106      	bne.n	8008be2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008bd4:	4b1a      	ldr	r3, [pc, #104]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd8:	4a19      	ldr	r2, [pc, #100]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008bda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008bde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008be0:	e00f      	b.n	8008c02 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d106      	bne.n	8008bf6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008be8:	4b15      	ldr	r3, [pc, #84]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bec:	4a14      	ldr	r2, [pc, #80]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008bf4:	e005      	b.n	8008c02 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008bf6:	4b12      	ldr	r3, [pc, #72]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfa:	4a11      	ldr	r2, [pc, #68]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008bfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008c02:	4b0f      	ldr	r3, [pc, #60]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a0e      	ldr	r2, [pc, #56]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008c08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008c0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c0e:	f7fa ff53 	bl	8003ab8 <HAL_GetTick>
 8008c12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c14:	e008      	b.n	8008c28 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008c16:	f7fa ff4f 	bl	8003ab8 <HAL_GetTick>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	1ad3      	subs	r3, r2, r3
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d901      	bls.n	8008c28 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c24:	2303      	movs	r3, #3
 8008c26:	e006      	b.n	8008c36 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c28:	4b05      	ldr	r3, [pc, #20]	; (8008c40 <RCCEx_PLL2_Config+0x15c>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d0f0      	beq.n	8008c16 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	58024400 	.word	0x58024400
 8008c44:	ffff0007 	.word	0xffff0007

08008c48 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c56:	4b53      	ldr	r3, [pc, #332]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5a:	f003 0303 	and.w	r3, r3, #3
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	d101      	bne.n	8008c66 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e099      	b.n	8008d9a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008c66:	4b4f      	ldr	r3, [pc, #316]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a4e      	ldr	r2, [pc, #312]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c72:	f7fa ff21 	bl	8003ab8 <HAL_GetTick>
 8008c76:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c78:	e008      	b.n	8008c8c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008c7a:	f7fa ff1d 	bl	8003ab8 <HAL_GetTick>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d901      	bls.n	8008c8c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	e086      	b.n	8008d9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c8c:	4b45      	ldr	r3, [pc, #276]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1f0      	bne.n	8008c7a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c98:	4b42      	ldr	r3, [pc, #264]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	051b      	lsls	r3, r3, #20
 8008ca6:	493f      	ldr	r1, [pc, #252]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	628b      	str	r3, [r1, #40]	; 0x28
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	025b      	lsls	r3, r3, #9
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	431a      	orrs	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	041b      	lsls	r3, r3, #16
 8008cca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	061b      	lsls	r3, r3, #24
 8008cd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008cdc:	4931      	ldr	r1, [pc, #196]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008ce2:	4b30      	ldr	r3, [pc, #192]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	695b      	ldr	r3, [r3, #20]
 8008cee:	492d      	ldr	r1, [pc, #180]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008cf4:	4b2b      	ldr	r3, [pc, #172]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	4928      	ldr	r1, [pc, #160]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008d02:	4313      	orrs	r3, r2
 8008d04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008d06:	4b27      	ldr	r3, [pc, #156]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0a:	4a26      	ldr	r2, [pc, #152]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008d12:	4b24      	ldr	r3, [pc, #144]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d16:	4b24      	ldr	r3, [pc, #144]	; (8008da8 <RCCEx_PLL3_Config+0x160>)
 8008d18:	4013      	ands	r3, r2
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	69d2      	ldr	r2, [r2, #28]
 8008d1e:	00d2      	lsls	r2, r2, #3
 8008d20:	4920      	ldr	r1, [pc, #128]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008d26:	4b1f      	ldr	r3, [pc, #124]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2a:	4a1e      	ldr	r2, [pc, #120]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d106      	bne.n	8008d46 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d38:	4b1a      	ldr	r3, [pc, #104]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3c:	4a19      	ldr	r2, [pc, #100]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008d3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008d42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d44:	e00f      	b.n	8008d66 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d106      	bne.n	8008d5a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008d4c:	4b15      	ldr	r3, [pc, #84]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d50:	4a14      	ldr	r2, [pc, #80]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008d52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008d56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d58:	e005      	b.n	8008d66 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d5a:	4b12      	ldr	r3, [pc, #72]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5e:	4a11      	ldr	r2, [pc, #68]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008d60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d66:	4b0f      	ldr	r3, [pc, #60]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a0e      	ldr	r2, [pc, #56]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d72:	f7fa fea1 	bl	8003ab8 <HAL_GetTick>
 8008d76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d78:	e008      	b.n	8008d8c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008d7a:	f7fa fe9d 	bl	8003ab8 <HAL_GetTick>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d901      	bls.n	8008d8c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e006      	b.n	8008d9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d8c:	4b05      	ldr	r3, [pc, #20]	; (8008da4 <RCCEx_PLL3_Config+0x15c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d0f0      	beq.n	8008d7a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	58024400 	.word	0x58024400
 8008da8:	ffff0007 	.word	0xffff0007

08008dac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d101      	bne.n	8008dbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e0f1      	b.n	8008fa2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a78      	ldr	r2, [pc, #480]	; (8008fac <HAL_SPI_Init+0x200>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d00f      	beq.n	8008dee <HAL_SPI_Init+0x42>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a77      	ldr	r2, [pc, #476]	; (8008fb0 <HAL_SPI_Init+0x204>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d00a      	beq.n	8008dee <HAL_SPI_Init+0x42>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a75      	ldr	r2, [pc, #468]	; (8008fb4 <HAL_SPI_Init+0x208>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d005      	beq.n	8008dee <HAL_SPI_Init+0x42>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	2b0f      	cmp	r3, #15
 8008de8:	d901      	bls.n	8008dee <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e0d9      	b.n	8008fa2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f8e2 	bl	8008fb8 <SPI_GetPacketSize>
 8008df4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a6c      	ldr	r2, [pc, #432]	; (8008fac <HAL_SPI_Init+0x200>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d00c      	beq.n	8008e1a <HAL_SPI_Init+0x6e>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a6a      	ldr	r2, [pc, #424]	; (8008fb0 <HAL_SPI_Init+0x204>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d007      	beq.n	8008e1a <HAL_SPI_Init+0x6e>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a69      	ldr	r2, [pc, #420]	; (8008fb4 <HAL_SPI_Init+0x208>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d002      	beq.n	8008e1a <HAL_SPI_Init+0x6e>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2b08      	cmp	r3, #8
 8008e18:	d811      	bhi.n	8008e3e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008e1e:	4a63      	ldr	r2, [pc, #396]	; (8008fac <HAL_SPI_Init+0x200>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d009      	beq.n	8008e38 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a61      	ldr	r2, [pc, #388]	; (8008fb0 <HAL_SPI_Init+0x204>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d004      	beq.n	8008e38 <HAL_SPI_Init+0x8c>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a60      	ldr	r2, [pc, #384]	; (8008fb4 <HAL_SPI_Init+0x208>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d104      	bne.n	8008e42 <HAL_SPI_Init+0x96>
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2b10      	cmp	r3, #16
 8008e3c:	d901      	bls.n	8008e42 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e0af      	b.n	8008fa2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d106      	bne.n	8008e5c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f7f9 fed0 	bl	8002bfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2202      	movs	r2, #2
 8008e60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f022 0201 	bic.w	r2, r2, #1
 8008e72:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008e7e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	699b      	ldr	r3, [r3, #24]
 8008e84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e88:	d119      	bne.n	8008ebe <HAL_SPI_Init+0x112>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e92:	d103      	bne.n	8008e9c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d008      	beq.n	8008eae <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10c      	bne.n	8008ebe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008ea8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eac:	d107      	bne.n	8008ebe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ebc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	69da      	ldr	r2, [r3, #28]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec6:	431a      	orrs	r2, r3
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	431a      	orrs	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ed0:	ea42 0103 	orr.w	r1, r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	68da      	ldr	r2, [r3, #12]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	430a      	orrs	r2, r1
 8008ede:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee8:	431a      	orrs	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eee:	431a      	orrs	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	431a      	orrs	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	431a      	orrs	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	431a      	orrs	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	431a      	orrs	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	431a      	orrs	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f12:	431a      	orrs	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	431a      	orrs	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f1e:	ea42 0103 	orr.w	r1, r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d113      	bne.n	8008f5e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f48:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f5c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f022 0201 	bic.w	r2, r2, #1
 8008f6c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00a      	beq.n	8008f90 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	40013000 	.word	0x40013000
 8008fb0:	40003800 	.word	0x40003800
 8008fb4:	40003c00 	.word	0x40003c00

08008fb8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc4:	095b      	lsrs	r3, r3, #5
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	3307      	adds	r3, #7
 8008fd6:	08db      	lsrs	r3, r3, #3
 8008fd8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	fb02 f303 	mul.w	r3, r2, r3
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b082      	sub	sp, #8
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d101      	bne.n	8009000 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e049      	b.n	8009094 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b00      	cmp	r3, #0
 800900a:	d106      	bne.n	800901a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7f9 fe57 	bl	8002cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2202      	movs	r2, #2
 800901e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	3304      	adds	r3, #4
 800902a:	4619      	mov	r1, r3
 800902c:	4610      	mov	r0, r2
 800902e:	f000 fd71 	bl	8009b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2201      	movs	r2, #1
 8009046:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2201      	movs	r2, #1
 800905e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2201      	movs	r2, #1
 8009066:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2201      	movs	r2, #1
 800906e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2201      	movs	r2, #1
 800907e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2201      	movs	r2, #1
 800908e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d001      	beq.n	80090b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	e054      	b.n	800915e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2202      	movs	r2, #2
 80090b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68da      	ldr	r2, [r3, #12]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f042 0201 	orr.w	r2, r2, #1
 80090ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a26      	ldr	r2, [pc, #152]	; (800916c <HAL_TIM_Base_Start_IT+0xd0>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d022      	beq.n	800911c <HAL_TIM_Base_Start_IT+0x80>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090de:	d01d      	beq.n	800911c <HAL_TIM_Base_Start_IT+0x80>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a22      	ldr	r2, [pc, #136]	; (8009170 <HAL_TIM_Base_Start_IT+0xd4>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d018      	beq.n	800911c <HAL_TIM_Base_Start_IT+0x80>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a21      	ldr	r2, [pc, #132]	; (8009174 <HAL_TIM_Base_Start_IT+0xd8>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d013      	beq.n	800911c <HAL_TIM_Base_Start_IT+0x80>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a1f      	ldr	r2, [pc, #124]	; (8009178 <HAL_TIM_Base_Start_IT+0xdc>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d00e      	beq.n	800911c <HAL_TIM_Base_Start_IT+0x80>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a1e      	ldr	r2, [pc, #120]	; (800917c <HAL_TIM_Base_Start_IT+0xe0>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d009      	beq.n	800911c <HAL_TIM_Base_Start_IT+0x80>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a1c      	ldr	r2, [pc, #112]	; (8009180 <HAL_TIM_Base_Start_IT+0xe4>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d004      	beq.n	800911c <HAL_TIM_Base_Start_IT+0x80>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a1b      	ldr	r2, [pc, #108]	; (8009184 <HAL_TIM_Base_Start_IT+0xe8>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d115      	bne.n	8009148 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	689a      	ldr	r2, [r3, #8]
 8009122:	4b19      	ldr	r3, [pc, #100]	; (8009188 <HAL_TIM_Base_Start_IT+0xec>)
 8009124:	4013      	ands	r3, r2
 8009126:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2b06      	cmp	r3, #6
 800912c:	d015      	beq.n	800915a <HAL_TIM_Base_Start_IT+0xbe>
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009134:	d011      	beq.n	800915a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f042 0201 	orr.w	r2, r2, #1
 8009144:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009146:	e008      	b.n	800915a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f042 0201 	orr.w	r2, r2, #1
 8009156:	601a      	str	r2, [r3, #0]
 8009158:	e000      	b.n	800915c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800915a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3714      	adds	r7, #20
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	40010000 	.word	0x40010000
 8009170:	40000400 	.word	0x40000400
 8009174:	40000800 	.word	0x40000800
 8009178:	40000c00 	.word	0x40000c00
 800917c:	40010400 	.word	0x40010400
 8009180:	40001800 	.word	0x40001800
 8009184:	40014000 	.word	0x40014000
 8009188:	00010007 	.word	0x00010007

0800918c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d101      	bne.n	800919e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	e049      	b.n	8009232 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d106      	bne.n	80091b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 f841 	bl	800923a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2202      	movs	r2, #2
 80091bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	3304      	adds	r3, #4
 80091c8:	4619      	mov	r1, r3
 80091ca:	4610      	mov	r0, r2
 80091cc:	f000 fca2 	bl	8009b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800923a:	b480      	push	{r7}
 800923c:	b083      	sub	sp, #12
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009242:	bf00      	nop
 8009244:	370c      	adds	r7, #12
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
	...

08009250 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d109      	bne.n	8009274 <HAL_TIM_PWM_Start+0x24>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009266:	b2db      	uxtb	r3, r3
 8009268:	2b01      	cmp	r3, #1
 800926a:	bf14      	ite	ne
 800926c:	2301      	movne	r3, #1
 800926e:	2300      	moveq	r3, #0
 8009270:	b2db      	uxtb	r3, r3
 8009272:	e03c      	b.n	80092ee <HAL_TIM_PWM_Start+0x9e>
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	2b04      	cmp	r3, #4
 8009278:	d109      	bne.n	800928e <HAL_TIM_PWM_Start+0x3e>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b01      	cmp	r3, #1
 8009284:	bf14      	ite	ne
 8009286:	2301      	movne	r3, #1
 8009288:	2300      	moveq	r3, #0
 800928a:	b2db      	uxtb	r3, r3
 800928c:	e02f      	b.n	80092ee <HAL_TIM_PWM_Start+0x9e>
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	2b08      	cmp	r3, #8
 8009292:	d109      	bne.n	80092a8 <HAL_TIM_PWM_Start+0x58>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b01      	cmp	r3, #1
 800929e:	bf14      	ite	ne
 80092a0:	2301      	movne	r3, #1
 80092a2:	2300      	moveq	r3, #0
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	e022      	b.n	80092ee <HAL_TIM_PWM_Start+0x9e>
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	2b0c      	cmp	r3, #12
 80092ac:	d109      	bne.n	80092c2 <HAL_TIM_PWM_Start+0x72>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	bf14      	ite	ne
 80092ba:	2301      	movne	r3, #1
 80092bc:	2300      	moveq	r3, #0
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	e015      	b.n	80092ee <HAL_TIM_PWM_Start+0x9e>
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	2b10      	cmp	r3, #16
 80092c6:	d109      	bne.n	80092dc <HAL_TIM_PWM_Start+0x8c>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	bf14      	ite	ne
 80092d4:	2301      	movne	r3, #1
 80092d6:	2300      	moveq	r3, #0
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	e008      	b.n	80092ee <HAL_TIM_PWM_Start+0x9e>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	bf14      	ite	ne
 80092e8:	2301      	movne	r3, #1
 80092ea:	2300      	moveq	r3, #0
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e0a1      	b.n	800943a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d104      	bne.n	8009306 <HAL_TIM_PWM_Start+0xb6>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2202      	movs	r2, #2
 8009300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009304:	e023      	b.n	800934e <HAL_TIM_PWM_Start+0xfe>
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	2b04      	cmp	r3, #4
 800930a:	d104      	bne.n	8009316 <HAL_TIM_PWM_Start+0xc6>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2202      	movs	r2, #2
 8009310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009314:	e01b      	b.n	800934e <HAL_TIM_PWM_Start+0xfe>
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	2b08      	cmp	r3, #8
 800931a:	d104      	bne.n	8009326 <HAL_TIM_PWM_Start+0xd6>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2202      	movs	r2, #2
 8009320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009324:	e013      	b.n	800934e <HAL_TIM_PWM_Start+0xfe>
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	2b0c      	cmp	r3, #12
 800932a:	d104      	bne.n	8009336 <HAL_TIM_PWM_Start+0xe6>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2202      	movs	r2, #2
 8009330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009334:	e00b      	b.n	800934e <HAL_TIM_PWM_Start+0xfe>
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	2b10      	cmp	r3, #16
 800933a:	d104      	bne.n	8009346 <HAL_TIM_PWM_Start+0xf6>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2202      	movs	r2, #2
 8009340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009344:	e003      	b.n	800934e <HAL_TIM_PWM_Start+0xfe>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2202      	movs	r2, #2
 800934a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2201      	movs	r2, #1
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	4618      	mov	r0, r3
 8009358:	f000 ffea 	bl	800a330 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a38      	ldr	r2, [pc, #224]	; (8009444 <HAL_TIM_PWM_Start+0x1f4>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d013      	beq.n	800938e <HAL_TIM_PWM_Start+0x13e>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a37      	ldr	r2, [pc, #220]	; (8009448 <HAL_TIM_PWM_Start+0x1f8>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d00e      	beq.n	800938e <HAL_TIM_PWM_Start+0x13e>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a35      	ldr	r2, [pc, #212]	; (800944c <HAL_TIM_PWM_Start+0x1fc>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d009      	beq.n	800938e <HAL_TIM_PWM_Start+0x13e>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a34      	ldr	r2, [pc, #208]	; (8009450 <HAL_TIM_PWM_Start+0x200>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d004      	beq.n	800938e <HAL_TIM_PWM_Start+0x13e>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a32      	ldr	r2, [pc, #200]	; (8009454 <HAL_TIM_PWM_Start+0x204>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d101      	bne.n	8009392 <HAL_TIM_PWM_Start+0x142>
 800938e:	2301      	movs	r3, #1
 8009390:	e000      	b.n	8009394 <HAL_TIM_PWM_Start+0x144>
 8009392:	2300      	movs	r3, #0
 8009394:	2b00      	cmp	r3, #0
 8009396:	d007      	beq.n	80093a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a25      	ldr	r2, [pc, #148]	; (8009444 <HAL_TIM_PWM_Start+0x1f4>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d022      	beq.n	80093f8 <HAL_TIM_PWM_Start+0x1a8>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ba:	d01d      	beq.n	80093f8 <HAL_TIM_PWM_Start+0x1a8>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a25      	ldr	r2, [pc, #148]	; (8009458 <HAL_TIM_PWM_Start+0x208>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d018      	beq.n	80093f8 <HAL_TIM_PWM_Start+0x1a8>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a24      	ldr	r2, [pc, #144]	; (800945c <HAL_TIM_PWM_Start+0x20c>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d013      	beq.n	80093f8 <HAL_TIM_PWM_Start+0x1a8>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a22      	ldr	r2, [pc, #136]	; (8009460 <HAL_TIM_PWM_Start+0x210>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d00e      	beq.n	80093f8 <HAL_TIM_PWM_Start+0x1a8>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a1a      	ldr	r2, [pc, #104]	; (8009448 <HAL_TIM_PWM_Start+0x1f8>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d009      	beq.n	80093f8 <HAL_TIM_PWM_Start+0x1a8>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a1e      	ldr	r2, [pc, #120]	; (8009464 <HAL_TIM_PWM_Start+0x214>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d004      	beq.n	80093f8 <HAL_TIM_PWM_Start+0x1a8>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a16      	ldr	r2, [pc, #88]	; (800944c <HAL_TIM_PWM_Start+0x1fc>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d115      	bne.n	8009424 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	689a      	ldr	r2, [r3, #8]
 80093fe:	4b1a      	ldr	r3, [pc, #104]	; (8009468 <HAL_TIM_PWM_Start+0x218>)
 8009400:	4013      	ands	r3, r2
 8009402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2b06      	cmp	r3, #6
 8009408:	d015      	beq.n	8009436 <HAL_TIM_PWM_Start+0x1e6>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009410:	d011      	beq.n	8009436 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f042 0201 	orr.w	r2, r2, #1
 8009420:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009422:	e008      	b.n	8009436 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f042 0201 	orr.w	r2, r2, #1
 8009432:	601a      	str	r2, [r3, #0]
 8009434:	e000      	b.n	8009438 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009436:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	40010000 	.word	0x40010000
 8009448:	40010400 	.word	0x40010400
 800944c:	40014000 	.word	0x40014000
 8009450:	40014400 	.word	0x40014400
 8009454:	40014800 	.word	0x40014800
 8009458:	40000400 	.word	0x40000400
 800945c:	40000800 	.word	0x40000800
 8009460:	40000c00 	.word	0x40000c00
 8009464:	40001800 	.word	0x40001800
 8009468:	00010007 	.word	0x00010007

0800946c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	f003 0302 	and.w	r3, r3, #2
 800947e:	2b02      	cmp	r3, #2
 8009480:	d122      	bne.n	80094c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	f003 0302 	and.w	r3, r3, #2
 800948c:	2b02      	cmp	r3, #2
 800948e:	d11b      	bne.n	80094c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f06f 0202 	mvn.w	r2, #2
 8009498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	f003 0303 	and.w	r3, r3, #3
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d003      	beq.n	80094b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 fb12 	bl	8009ad8 <HAL_TIM_IC_CaptureCallback>
 80094b4:	e005      	b.n	80094c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fb04 	bl	8009ac4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 fb15 	bl	8009aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	f003 0304 	and.w	r3, r3, #4
 80094d2:	2b04      	cmp	r3, #4
 80094d4:	d122      	bne.n	800951c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	f003 0304 	and.w	r3, r3, #4
 80094e0:	2b04      	cmp	r3, #4
 80094e2:	d11b      	bne.n	800951c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f06f 0204 	mvn.w	r2, #4
 80094ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2202      	movs	r2, #2
 80094f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d003      	beq.n	800950a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fae8 	bl	8009ad8 <HAL_TIM_IC_CaptureCallback>
 8009508:	e005      	b.n	8009516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fada 	bl	8009ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 faeb 	bl	8009aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	f003 0308 	and.w	r3, r3, #8
 8009526:	2b08      	cmp	r3, #8
 8009528:	d122      	bne.n	8009570 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	f003 0308 	and.w	r3, r3, #8
 8009534:	2b08      	cmp	r3, #8
 8009536:	d11b      	bne.n	8009570 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f06f 0208 	mvn.w	r2, #8
 8009540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2204      	movs	r2, #4
 8009546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	f003 0303 	and.w	r3, r3, #3
 8009552:	2b00      	cmp	r3, #0
 8009554:	d003      	beq.n	800955e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fabe 	bl	8009ad8 <HAL_TIM_IC_CaptureCallback>
 800955c:	e005      	b.n	800956a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 fab0 	bl	8009ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fac1 	bl	8009aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	f003 0310 	and.w	r3, r3, #16
 800957a:	2b10      	cmp	r3, #16
 800957c:	d122      	bne.n	80095c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	f003 0310 	and.w	r3, r3, #16
 8009588:	2b10      	cmp	r3, #16
 800958a:	d11b      	bne.n	80095c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f06f 0210 	mvn.w	r2, #16
 8009594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2208      	movs	r2, #8
 800959a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	69db      	ldr	r3, [r3, #28]
 80095a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d003      	beq.n	80095b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 fa94 	bl	8009ad8 <HAL_TIM_IC_CaptureCallback>
 80095b0:	e005      	b.n	80095be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 fa86 	bl	8009ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 fa97 	bl	8009aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d10e      	bne.n	80095f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	f003 0301 	and.w	r3, r3, #1
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d107      	bne.n	80095f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f06f 0201 	mvn.w	r2, #1
 80095e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f7f7 ffac 	bl	8001548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095fa:	2b80      	cmp	r3, #128	; 0x80
 80095fc:	d10e      	bne.n	800961c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009608:	2b80      	cmp	r3, #128	; 0x80
 800960a:	d107      	bne.n	800961c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 ffc6 	bl	800a5a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800962a:	d10e      	bne.n	800964a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009636:	2b80      	cmp	r3, #128	; 0x80
 8009638:	d107      	bne.n	800964a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 ffb9 	bl	800a5bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009654:	2b40      	cmp	r3, #64	; 0x40
 8009656:	d10e      	bne.n	8009676 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009662:	2b40      	cmp	r3, #64	; 0x40
 8009664:	d107      	bne.n	8009676 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800966e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fa45 	bl	8009b00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	f003 0320 	and.w	r3, r3, #32
 8009680:	2b20      	cmp	r3, #32
 8009682:	d10e      	bne.n	80096a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	f003 0320 	and.w	r3, r3, #32
 800968e:	2b20      	cmp	r3, #32
 8009690:	d107      	bne.n	80096a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f06f 0220 	mvn.w	r2, #32
 800969a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 ff79 	bl	800a594 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80096a2:	bf00      	nop
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
	...

080096ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096b8:	2300      	movs	r3, #0
 80096ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d101      	bne.n	80096ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80096c6:	2302      	movs	r3, #2
 80096c8:	e0ff      	b.n	80098ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2b14      	cmp	r3, #20
 80096d6:	f200 80f0 	bhi.w	80098ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80096da:	a201      	add	r2, pc, #4	; (adr r2, 80096e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80096dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e0:	08009735 	.word	0x08009735
 80096e4:	080098bb 	.word	0x080098bb
 80096e8:	080098bb 	.word	0x080098bb
 80096ec:	080098bb 	.word	0x080098bb
 80096f0:	08009775 	.word	0x08009775
 80096f4:	080098bb 	.word	0x080098bb
 80096f8:	080098bb 	.word	0x080098bb
 80096fc:	080098bb 	.word	0x080098bb
 8009700:	080097b7 	.word	0x080097b7
 8009704:	080098bb 	.word	0x080098bb
 8009708:	080098bb 	.word	0x080098bb
 800970c:	080098bb 	.word	0x080098bb
 8009710:	080097f7 	.word	0x080097f7
 8009714:	080098bb 	.word	0x080098bb
 8009718:	080098bb 	.word	0x080098bb
 800971c:	080098bb 	.word	0x080098bb
 8009720:	08009839 	.word	0x08009839
 8009724:	080098bb 	.word	0x080098bb
 8009728:	080098bb 	.word	0x080098bb
 800972c:	080098bb 	.word	0x080098bb
 8009730:	08009879 	.word	0x08009879
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68b9      	ldr	r1, [r7, #8]
 800973a:	4618      	mov	r0, r3
 800973c:	f000 fa84 	bl	8009c48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	699a      	ldr	r2, [r3, #24]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f042 0208 	orr.w	r2, r2, #8
 800974e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	699a      	ldr	r2, [r3, #24]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f022 0204 	bic.w	r2, r2, #4
 800975e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6999      	ldr	r1, [r3, #24]
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	691a      	ldr	r2, [r3, #16]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	430a      	orrs	r2, r1
 8009770:	619a      	str	r2, [r3, #24]
      break;
 8009772:	e0a5      	b.n	80098c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68b9      	ldr	r1, [r7, #8]
 800977a:	4618      	mov	r0, r3
 800977c:	f000 faf4 	bl	8009d68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	699a      	ldr	r2, [r3, #24]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800978e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	699a      	ldr	r2, [r3, #24]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800979e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	6999      	ldr	r1, [r3, #24]
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	021a      	lsls	r2, r3, #8
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	430a      	orrs	r2, r1
 80097b2:	619a      	str	r2, [r3, #24]
      break;
 80097b4:	e084      	b.n	80098c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68b9      	ldr	r1, [r7, #8]
 80097bc:	4618      	mov	r0, r3
 80097be:	f000 fb5d 	bl	8009e7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	69da      	ldr	r2, [r3, #28]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f042 0208 	orr.w	r2, r2, #8
 80097d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	69da      	ldr	r2, [r3, #28]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f022 0204 	bic.w	r2, r2, #4
 80097e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	69d9      	ldr	r1, [r3, #28]
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	691a      	ldr	r2, [r3, #16]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	430a      	orrs	r2, r1
 80097f2:	61da      	str	r2, [r3, #28]
      break;
 80097f4:	e064      	b.n	80098c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	68b9      	ldr	r1, [r7, #8]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 fbc5 	bl	8009f8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	69da      	ldr	r2, [r3, #28]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	69da      	ldr	r2, [r3, #28]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	69d9      	ldr	r1, [r3, #28]
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	021a      	lsls	r2, r3, #8
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	430a      	orrs	r2, r1
 8009834:	61da      	str	r2, [r3, #28]
      break;
 8009836:	e043      	b.n	80098c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68b9      	ldr	r1, [r7, #8]
 800983e:	4618      	mov	r0, r3
 8009840:	f000 fc0e 	bl	800a060 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f042 0208 	orr.w	r2, r2, #8
 8009852:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f022 0204 	bic.w	r2, r2, #4
 8009862:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	691a      	ldr	r2, [r3, #16]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	430a      	orrs	r2, r1
 8009874:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009876:	e023      	b.n	80098c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68b9      	ldr	r1, [r7, #8]
 800987e:	4618      	mov	r0, r3
 8009880:	f000 fc52 	bl	800a128 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009892:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	021a      	lsls	r2, r3, #8
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	430a      	orrs	r2, r1
 80098b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80098b8:	e002      	b.n	80098c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	75fb      	strb	r3, [r7, #23]
      break;
 80098be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80098c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3718      	adds	r7, #24
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop

080098d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d101      	bne.n	80098f0 <HAL_TIM_ConfigClockSource+0x1c>
 80098ec:	2302      	movs	r3, #2
 80098ee:	e0dc      	b.n	8009aaa <HAL_TIM_ConfigClockSource+0x1d6>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2202      	movs	r2, #2
 80098fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	4b6a      	ldr	r3, [pc, #424]	; (8009ab4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800990c:	4013      	ands	r3, r2
 800990e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009916:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68ba      	ldr	r2, [r7, #8]
 800991e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a64      	ldr	r2, [pc, #400]	; (8009ab8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009926:	4293      	cmp	r3, r2
 8009928:	f000 80a9 	beq.w	8009a7e <HAL_TIM_ConfigClockSource+0x1aa>
 800992c:	4a62      	ldr	r2, [pc, #392]	; (8009ab8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800992e:	4293      	cmp	r3, r2
 8009930:	f200 80ae 	bhi.w	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8009934:	4a61      	ldr	r2, [pc, #388]	; (8009abc <HAL_TIM_ConfigClockSource+0x1e8>)
 8009936:	4293      	cmp	r3, r2
 8009938:	f000 80a1 	beq.w	8009a7e <HAL_TIM_ConfigClockSource+0x1aa>
 800993c:	4a5f      	ldr	r2, [pc, #380]	; (8009abc <HAL_TIM_ConfigClockSource+0x1e8>)
 800993e:	4293      	cmp	r3, r2
 8009940:	f200 80a6 	bhi.w	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8009944:	4a5e      	ldr	r2, [pc, #376]	; (8009ac0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009946:	4293      	cmp	r3, r2
 8009948:	f000 8099 	beq.w	8009a7e <HAL_TIM_ConfigClockSource+0x1aa>
 800994c:	4a5c      	ldr	r2, [pc, #368]	; (8009ac0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800994e:	4293      	cmp	r3, r2
 8009950:	f200 809e 	bhi.w	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8009954:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009958:	f000 8091 	beq.w	8009a7e <HAL_TIM_ConfigClockSource+0x1aa>
 800995c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009960:	f200 8096 	bhi.w	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8009964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009968:	f000 8089 	beq.w	8009a7e <HAL_TIM_ConfigClockSource+0x1aa>
 800996c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009970:	f200 808e 	bhi.w	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8009974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009978:	d03e      	beq.n	80099f8 <HAL_TIM_ConfigClockSource+0x124>
 800997a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800997e:	f200 8087 	bhi.w	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8009982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009986:	f000 8086 	beq.w	8009a96 <HAL_TIM_ConfigClockSource+0x1c2>
 800998a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800998e:	d87f      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8009990:	2b70      	cmp	r3, #112	; 0x70
 8009992:	d01a      	beq.n	80099ca <HAL_TIM_ConfigClockSource+0xf6>
 8009994:	2b70      	cmp	r3, #112	; 0x70
 8009996:	d87b      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8009998:	2b60      	cmp	r3, #96	; 0x60
 800999a:	d050      	beq.n	8009a3e <HAL_TIM_ConfigClockSource+0x16a>
 800999c:	2b60      	cmp	r3, #96	; 0x60
 800999e:	d877      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 80099a0:	2b50      	cmp	r3, #80	; 0x50
 80099a2:	d03c      	beq.n	8009a1e <HAL_TIM_ConfigClockSource+0x14a>
 80099a4:	2b50      	cmp	r3, #80	; 0x50
 80099a6:	d873      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 80099a8:	2b40      	cmp	r3, #64	; 0x40
 80099aa:	d058      	beq.n	8009a5e <HAL_TIM_ConfigClockSource+0x18a>
 80099ac:	2b40      	cmp	r3, #64	; 0x40
 80099ae:	d86f      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 80099b0:	2b30      	cmp	r3, #48	; 0x30
 80099b2:	d064      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0x1aa>
 80099b4:	2b30      	cmp	r3, #48	; 0x30
 80099b6:	d86b      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 80099b8:	2b20      	cmp	r3, #32
 80099ba:	d060      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0x1aa>
 80099bc:	2b20      	cmp	r3, #32
 80099be:	d867      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d05c      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0x1aa>
 80099c4:	2b10      	cmp	r3, #16
 80099c6:	d05a      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0x1aa>
 80099c8:	e062      	b.n	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6818      	ldr	r0, [r3, #0]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	6899      	ldr	r1, [r3, #8]
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	685a      	ldr	r2, [r3, #4]
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	f000 fc89 	bl	800a2f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80099ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	609a      	str	r2, [r3, #8]
      break;
 80099f6:	e04f      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6818      	ldr	r0, [r3, #0]
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	6899      	ldr	r1, [r3, #8]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	685a      	ldr	r2, [r3, #4]
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	f000 fc72 	bl	800a2f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	689a      	ldr	r2, [r3, #8]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a1a:	609a      	str	r2, [r3, #8]
      break;
 8009a1c:	e03c      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6818      	ldr	r0, [r3, #0]
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	6859      	ldr	r1, [r3, #4]
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	f000 fbe2 	bl	800a1f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2150      	movs	r1, #80	; 0x50
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 fc3c 	bl	800a2b4 <TIM_ITRx_SetConfig>
      break;
 8009a3c:	e02c      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6818      	ldr	r0, [r3, #0]
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	6859      	ldr	r1, [r3, #4]
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	f000 fc01 	bl	800a252 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2160      	movs	r1, #96	; 0x60
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 fc2c 	bl	800a2b4 <TIM_ITRx_SetConfig>
      break;
 8009a5c:	e01c      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6818      	ldr	r0, [r3, #0]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	6859      	ldr	r1, [r3, #4]
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	f000 fbc2 	bl	800a1f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2140      	movs	r1, #64	; 0x40
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 fc1c 	bl	800a2b4 <TIM_ITRx_SetConfig>
      break;
 8009a7c:	e00c      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4619      	mov	r1, r3
 8009a88:	4610      	mov	r0, r2
 8009a8a:	f000 fc13 	bl	800a2b4 <TIM_ITRx_SetConfig>
      break;
 8009a8e:	e003      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	73fb      	strb	r3, [r7, #15]
      break;
 8009a94:	e000      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009a96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	ffceff88 	.word	0xffceff88
 8009ab8:	00100040 	.word	0x00100040
 8009abc:	00100030 	.word	0x00100030
 8009ac0:	00100020 	.word	0x00100020

08009ac4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009acc:	bf00      	nop
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	4a40      	ldr	r2, [pc, #256]	; (8009c28 <TIM_Base_SetConfig+0x114>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d013      	beq.n	8009b54 <TIM_Base_SetConfig+0x40>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b32:	d00f      	beq.n	8009b54 <TIM_Base_SetConfig+0x40>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a3d      	ldr	r2, [pc, #244]	; (8009c2c <TIM_Base_SetConfig+0x118>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d00b      	beq.n	8009b54 <TIM_Base_SetConfig+0x40>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a3c      	ldr	r2, [pc, #240]	; (8009c30 <TIM_Base_SetConfig+0x11c>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d007      	beq.n	8009b54 <TIM_Base_SetConfig+0x40>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4a3b      	ldr	r2, [pc, #236]	; (8009c34 <TIM_Base_SetConfig+0x120>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d003      	beq.n	8009b54 <TIM_Base_SetConfig+0x40>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4a3a      	ldr	r2, [pc, #232]	; (8009c38 <TIM_Base_SetConfig+0x124>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d108      	bne.n	8009b66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	68fa      	ldr	r2, [r7, #12]
 8009b62:	4313      	orrs	r3, r2
 8009b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4a2f      	ldr	r2, [pc, #188]	; (8009c28 <TIM_Base_SetConfig+0x114>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d01f      	beq.n	8009bae <TIM_Base_SetConfig+0x9a>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b74:	d01b      	beq.n	8009bae <TIM_Base_SetConfig+0x9a>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4a2c      	ldr	r2, [pc, #176]	; (8009c2c <TIM_Base_SetConfig+0x118>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d017      	beq.n	8009bae <TIM_Base_SetConfig+0x9a>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	4a2b      	ldr	r2, [pc, #172]	; (8009c30 <TIM_Base_SetConfig+0x11c>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d013      	beq.n	8009bae <TIM_Base_SetConfig+0x9a>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4a2a      	ldr	r2, [pc, #168]	; (8009c34 <TIM_Base_SetConfig+0x120>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d00f      	beq.n	8009bae <TIM_Base_SetConfig+0x9a>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4a29      	ldr	r2, [pc, #164]	; (8009c38 <TIM_Base_SetConfig+0x124>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d00b      	beq.n	8009bae <TIM_Base_SetConfig+0x9a>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	4a28      	ldr	r2, [pc, #160]	; (8009c3c <TIM_Base_SetConfig+0x128>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d007      	beq.n	8009bae <TIM_Base_SetConfig+0x9a>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	4a27      	ldr	r2, [pc, #156]	; (8009c40 <TIM_Base_SetConfig+0x12c>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d003      	beq.n	8009bae <TIM_Base_SetConfig+0x9a>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	4a26      	ldr	r2, [pc, #152]	; (8009c44 <TIM_Base_SetConfig+0x130>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d108      	bne.n	8009bc0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	695b      	ldr	r3, [r3, #20]
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	689a      	ldr	r2, [r3, #8]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a10      	ldr	r2, [pc, #64]	; (8009c28 <TIM_Base_SetConfig+0x114>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d00f      	beq.n	8009c0c <TIM_Base_SetConfig+0xf8>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a12      	ldr	r2, [pc, #72]	; (8009c38 <TIM_Base_SetConfig+0x124>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d00b      	beq.n	8009c0c <TIM_Base_SetConfig+0xf8>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a11      	ldr	r2, [pc, #68]	; (8009c3c <TIM_Base_SetConfig+0x128>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d007      	beq.n	8009c0c <TIM_Base_SetConfig+0xf8>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a10      	ldr	r2, [pc, #64]	; (8009c40 <TIM_Base_SetConfig+0x12c>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d003      	beq.n	8009c0c <TIM_Base_SetConfig+0xf8>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a0f      	ldr	r2, [pc, #60]	; (8009c44 <TIM_Base_SetConfig+0x130>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d103      	bne.n	8009c14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	691a      	ldr	r2, [r3, #16]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	615a      	str	r2, [r3, #20]
}
 8009c1a:	bf00      	nop
 8009c1c:	3714      	adds	r7, #20
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop
 8009c28:	40010000 	.word	0x40010000
 8009c2c:	40000400 	.word	0x40000400
 8009c30:	40000800 	.word	0x40000800
 8009c34:	40000c00 	.word	0x40000c00
 8009c38:	40010400 	.word	0x40010400
 8009c3c:	40014000 	.word	0x40014000
 8009c40:	40014400 	.word	0x40014400
 8009c44:	40014800 	.word	0x40014800

08009c48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b087      	sub	sp, #28
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a1b      	ldr	r3, [r3, #32]
 8009c56:	f023 0201 	bic.w	r2, r3, #1
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	699b      	ldr	r3, [r3, #24]
 8009c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	4b37      	ldr	r3, [pc, #220]	; (8009d50 <TIM_OC1_SetConfig+0x108>)
 8009c74:	4013      	ands	r3, r2
 8009c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f023 0303 	bic.w	r3, r3, #3
 8009c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	4313      	orrs	r3, r2
 8009c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	f023 0302 	bic.w	r3, r3, #2
 8009c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	697a      	ldr	r2, [r7, #20]
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a2d      	ldr	r2, [pc, #180]	; (8009d54 <TIM_OC1_SetConfig+0x10c>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d00f      	beq.n	8009cc4 <TIM_OC1_SetConfig+0x7c>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a2c      	ldr	r2, [pc, #176]	; (8009d58 <TIM_OC1_SetConfig+0x110>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d00b      	beq.n	8009cc4 <TIM_OC1_SetConfig+0x7c>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a2b      	ldr	r2, [pc, #172]	; (8009d5c <TIM_OC1_SetConfig+0x114>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d007      	beq.n	8009cc4 <TIM_OC1_SetConfig+0x7c>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a2a      	ldr	r2, [pc, #168]	; (8009d60 <TIM_OC1_SetConfig+0x118>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d003      	beq.n	8009cc4 <TIM_OC1_SetConfig+0x7c>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4a29      	ldr	r2, [pc, #164]	; (8009d64 <TIM_OC1_SetConfig+0x11c>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d10c      	bne.n	8009cde <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	f023 0308 	bic.w	r3, r3, #8
 8009cca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	697a      	ldr	r2, [r7, #20]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	f023 0304 	bic.w	r3, r3, #4
 8009cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a1c      	ldr	r2, [pc, #112]	; (8009d54 <TIM_OC1_SetConfig+0x10c>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d00f      	beq.n	8009d06 <TIM_OC1_SetConfig+0xbe>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a1b      	ldr	r2, [pc, #108]	; (8009d58 <TIM_OC1_SetConfig+0x110>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d00b      	beq.n	8009d06 <TIM_OC1_SetConfig+0xbe>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a1a      	ldr	r2, [pc, #104]	; (8009d5c <TIM_OC1_SetConfig+0x114>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d007      	beq.n	8009d06 <TIM_OC1_SetConfig+0xbe>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a19      	ldr	r2, [pc, #100]	; (8009d60 <TIM_OC1_SetConfig+0x118>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d003      	beq.n	8009d06 <TIM_OC1_SetConfig+0xbe>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a18      	ldr	r2, [pc, #96]	; (8009d64 <TIM_OC1_SetConfig+0x11c>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d111      	bne.n	8009d2a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	695b      	ldr	r3, [r3, #20]
 8009d1a:	693a      	ldr	r2, [r7, #16]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	693a      	ldr	r2, [r7, #16]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	693a      	ldr	r2, [r7, #16]
 8009d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	685a      	ldr	r2, [r3, #4]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	697a      	ldr	r2, [r7, #20]
 8009d42:	621a      	str	r2, [r3, #32]
}
 8009d44:	bf00      	nop
 8009d46:	371c      	adds	r7, #28
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr
 8009d50:	fffeff8f 	.word	0xfffeff8f
 8009d54:	40010000 	.word	0x40010000
 8009d58:	40010400 	.word	0x40010400
 8009d5c:	40014000 	.word	0x40014000
 8009d60:	40014400 	.word	0x40014400
 8009d64:	40014800 	.word	0x40014800

08009d68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b087      	sub	sp, #28
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a1b      	ldr	r3, [r3, #32]
 8009d76:	f023 0210 	bic.w	r2, r3, #16
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a1b      	ldr	r3, [r3, #32]
 8009d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	699b      	ldr	r3, [r3, #24]
 8009d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	4b34      	ldr	r3, [pc, #208]	; (8009e64 <TIM_OC2_SetConfig+0xfc>)
 8009d94:	4013      	ands	r3, r2
 8009d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	021b      	lsls	r3, r3, #8
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	f023 0320 	bic.w	r3, r3, #32
 8009db2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	011b      	lsls	r3, r3, #4
 8009dba:	697a      	ldr	r2, [r7, #20]
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a29      	ldr	r2, [pc, #164]	; (8009e68 <TIM_OC2_SetConfig+0x100>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d003      	beq.n	8009dd0 <TIM_OC2_SetConfig+0x68>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a28      	ldr	r2, [pc, #160]	; (8009e6c <TIM_OC2_SetConfig+0x104>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d10d      	bne.n	8009dec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	011b      	lsls	r3, r3, #4
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4a1e      	ldr	r2, [pc, #120]	; (8009e68 <TIM_OC2_SetConfig+0x100>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d00f      	beq.n	8009e14 <TIM_OC2_SetConfig+0xac>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a1d      	ldr	r2, [pc, #116]	; (8009e6c <TIM_OC2_SetConfig+0x104>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d00b      	beq.n	8009e14 <TIM_OC2_SetConfig+0xac>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a1c      	ldr	r2, [pc, #112]	; (8009e70 <TIM_OC2_SetConfig+0x108>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d007      	beq.n	8009e14 <TIM_OC2_SetConfig+0xac>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4a1b      	ldr	r2, [pc, #108]	; (8009e74 <TIM_OC2_SetConfig+0x10c>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d003      	beq.n	8009e14 <TIM_OC2_SetConfig+0xac>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a1a      	ldr	r2, [pc, #104]	; (8009e78 <TIM_OC2_SetConfig+0x110>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d113      	bne.n	8009e3c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	695b      	ldr	r3, [r3, #20]
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	693a      	ldr	r2, [r7, #16]
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	699b      	ldr	r3, [r3, #24]
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	693a      	ldr	r2, [r7, #16]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	693a      	ldr	r2, [r7, #16]
 8009e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	685a      	ldr	r2, [r3, #4]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	697a      	ldr	r2, [r7, #20]
 8009e54:	621a      	str	r2, [r3, #32]
}
 8009e56:	bf00      	nop
 8009e58:	371c      	adds	r7, #28
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	feff8fff 	.word	0xfeff8fff
 8009e68:	40010000 	.word	0x40010000
 8009e6c:	40010400 	.word	0x40010400
 8009e70:	40014000 	.word	0x40014000
 8009e74:	40014400 	.word	0x40014400
 8009e78:	40014800 	.word	0x40014800

08009e7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b087      	sub	sp, #28
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a1b      	ldr	r3, [r3, #32]
 8009e8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6a1b      	ldr	r3, [r3, #32]
 8009e96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	69db      	ldr	r3, [r3, #28]
 8009ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	4b33      	ldr	r3, [pc, #204]	; (8009f74 <TIM_OC3_SetConfig+0xf8>)
 8009ea8:	4013      	ands	r3, r2
 8009eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f023 0303 	bic.w	r3, r3, #3
 8009eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	021b      	lsls	r3, r3, #8
 8009ecc:	697a      	ldr	r2, [r7, #20]
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4a28      	ldr	r2, [pc, #160]	; (8009f78 <TIM_OC3_SetConfig+0xfc>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d003      	beq.n	8009ee2 <TIM_OC3_SetConfig+0x66>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	4a27      	ldr	r2, [pc, #156]	; (8009f7c <TIM_OC3_SetConfig+0x100>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d10d      	bne.n	8009efe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ee8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	021b      	lsls	r3, r3, #8
 8009ef0:	697a      	ldr	r2, [r7, #20]
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a1d      	ldr	r2, [pc, #116]	; (8009f78 <TIM_OC3_SetConfig+0xfc>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d00f      	beq.n	8009f26 <TIM_OC3_SetConfig+0xaa>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a1c      	ldr	r2, [pc, #112]	; (8009f7c <TIM_OC3_SetConfig+0x100>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d00b      	beq.n	8009f26 <TIM_OC3_SetConfig+0xaa>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a1b      	ldr	r2, [pc, #108]	; (8009f80 <TIM_OC3_SetConfig+0x104>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d007      	beq.n	8009f26 <TIM_OC3_SetConfig+0xaa>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a1a      	ldr	r2, [pc, #104]	; (8009f84 <TIM_OC3_SetConfig+0x108>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d003      	beq.n	8009f26 <TIM_OC3_SetConfig+0xaa>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a19      	ldr	r2, [pc, #100]	; (8009f88 <TIM_OC3_SetConfig+0x10c>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d113      	bne.n	8009f4e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	695b      	ldr	r3, [r3, #20]
 8009f3a:	011b      	lsls	r3, r3, #4
 8009f3c:	693a      	ldr	r2, [r7, #16]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	011b      	lsls	r3, r3, #4
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	693a      	ldr	r2, [r7, #16]
 8009f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	68fa      	ldr	r2, [r7, #12]
 8009f58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	685a      	ldr	r2, [r3, #4]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	621a      	str	r2, [r3, #32]
}
 8009f68:	bf00      	nop
 8009f6a:	371c      	adds	r7, #28
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr
 8009f74:	fffeff8f 	.word	0xfffeff8f
 8009f78:	40010000 	.word	0x40010000
 8009f7c:	40010400 	.word	0x40010400
 8009f80:	40014000 	.word	0x40014000
 8009f84:	40014400 	.word	0x40014400
 8009f88:	40014800 	.word	0x40014800

08009f8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b087      	sub	sp, #28
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	69db      	ldr	r3, [r3, #28]
 8009fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009fb4:	68fa      	ldr	r2, [r7, #12]
 8009fb6:	4b24      	ldr	r3, [pc, #144]	; (800a048 <TIM_OC4_SetConfig+0xbc>)
 8009fb8:	4013      	ands	r3, r2
 8009fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	021b      	lsls	r3, r3, #8
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	031b      	lsls	r3, r3, #12
 8009fde:	693a      	ldr	r2, [r7, #16]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a19      	ldr	r2, [pc, #100]	; (800a04c <TIM_OC4_SetConfig+0xc0>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d00f      	beq.n	800a00c <TIM_OC4_SetConfig+0x80>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a18      	ldr	r2, [pc, #96]	; (800a050 <TIM_OC4_SetConfig+0xc4>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d00b      	beq.n	800a00c <TIM_OC4_SetConfig+0x80>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a17      	ldr	r2, [pc, #92]	; (800a054 <TIM_OC4_SetConfig+0xc8>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d007      	beq.n	800a00c <TIM_OC4_SetConfig+0x80>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a16      	ldr	r2, [pc, #88]	; (800a058 <TIM_OC4_SetConfig+0xcc>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d003      	beq.n	800a00c <TIM_OC4_SetConfig+0x80>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a15      	ldr	r2, [pc, #84]	; (800a05c <TIM_OC4_SetConfig+0xd0>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d109      	bne.n	800a020 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a012:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	695b      	ldr	r3, [r3, #20]
 800a018:	019b      	lsls	r3, r3, #6
 800a01a:	697a      	ldr	r2, [r7, #20]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	685a      	ldr	r2, [r3, #4]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	693a      	ldr	r2, [r7, #16]
 800a038:	621a      	str	r2, [r3, #32]
}
 800a03a:	bf00      	nop
 800a03c:	371c      	adds	r7, #28
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop
 800a048:	feff8fff 	.word	0xfeff8fff
 800a04c:	40010000 	.word	0x40010000
 800a050:	40010400 	.word	0x40010400
 800a054:	40014000 	.word	0x40014000
 800a058:	40014400 	.word	0x40014400
 800a05c:	40014800 	.word	0x40014800

0800a060 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a060:	b480      	push	{r7}
 800a062:	b087      	sub	sp, #28
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a1b      	ldr	r3, [r3, #32]
 800a06e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6a1b      	ldr	r3, [r3, #32]
 800a07a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	4b21      	ldr	r3, [pc, #132]	; (800a110 <TIM_OC5_SetConfig+0xb0>)
 800a08c:	4013      	ands	r3, r2
 800a08e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	4313      	orrs	r3, r2
 800a098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a0a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	041b      	lsls	r3, r3, #16
 800a0a8:	693a      	ldr	r2, [r7, #16]
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	4a18      	ldr	r2, [pc, #96]	; (800a114 <TIM_OC5_SetConfig+0xb4>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d00f      	beq.n	800a0d6 <TIM_OC5_SetConfig+0x76>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4a17      	ldr	r2, [pc, #92]	; (800a118 <TIM_OC5_SetConfig+0xb8>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d00b      	beq.n	800a0d6 <TIM_OC5_SetConfig+0x76>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	4a16      	ldr	r2, [pc, #88]	; (800a11c <TIM_OC5_SetConfig+0xbc>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d007      	beq.n	800a0d6 <TIM_OC5_SetConfig+0x76>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	4a15      	ldr	r2, [pc, #84]	; (800a120 <TIM_OC5_SetConfig+0xc0>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d003      	beq.n	800a0d6 <TIM_OC5_SetConfig+0x76>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4a14      	ldr	r2, [pc, #80]	; (800a124 <TIM_OC5_SetConfig+0xc4>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d109      	bne.n	800a0ea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	695b      	ldr	r3, [r3, #20]
 800a0e2:	021b      	lsls	r3, r3, #8
 800a0e4:	697a      	ldr	r2, [r7, #20]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	697a      	ldr	r2, [r7, #20]
 800a0ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	68fa      	ldr	r2, [r7, #12]
 800a0f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	685a      	ldr	r2, [r3, #4]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	693a      	ldr	r2, [r7, #16]
 800a102:	621a      	str	r2, [r3, #32]
}
 800a104:	bf00      	nop
 800a106:	371c      	adds	r7, #28
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr
 800a110:	fffeff8f 	.word	0xfffeff8f
 800a114:	40010000 	.word	0x40010000
 800a118:	40010400 	.word	0x40010400
 800a11c:	40014000 	.word	0x40014000
 800a120:	40014400 	.word	0x40014400
 800a124:	40014800 	.word	0x40014800

0800a128 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a128:	b480      	push	{r7}
 800a12a:	b087      	sub	sp, #28
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6a1b      	ldr	r3, [r3, #32]
 800a136:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6a1b      	ldr	r3, [r3, #32]
 800a142:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a14e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	4b22      	ldr	r3, [pc, #136]	; (800a1dc <TIM_OC6_SetConfig+0xb4>)
 800a154:	4013      	ands	r3, r2
 800a156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	021b      	lsls	r3, r3, #8
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	4313      	orrs	r3, r2
 800a162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a16a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	051b      	lsls	r3, r3, #20
 800a172:	693a      	ldr	r2, [r7, #16]
 800a174:	4313      	orrs	r3, r2
 800a176:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a19      	ldr	r2, [pc, #100]	; (800a1e0 <TIM_OC6_SetConfig+0xb8>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d00f      	beq.n	800a1a0 <TIM_OC6_SetConfig+0x78>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a18      	ldr	r2, [pc, #96]	; (800a1e4 <TIM_OC6_SetConfig+0xbc>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d00b      	beq.n	800a1a0 <TIM_OC6_SetConfig+0x78>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a17      	ldr	r2, [pc, #92]	; (800a1e8 <TIM_OC6_SetConfig+0xc0>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d007      	beq.n	800a1a0 <TIM_OC6_SetConfig+0x78>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a16      	ldr	r2, [pc, #88]	; (800a1ec <TIM_OC6_SetConfig+0xc4>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d003      	beq.n	800a1a0 <TIM_OC6_SetConfig+0x78>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a15      	ldr	r2, [pc, #84]	; (800a1f0 <TIM_OC6_SetConfig+0xc8>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d109      	bne.n	800a1b4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a1a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	695b      	ldr	r3, [r3, #20]
 800a1ac:	029b      	lsls	r3, r3, #10
 800a1ae:	697a      	ldr	r2, [r7, #20]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	697a      	ldr	r2, [r7, #20]
 800a1b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	685a      	ldr	r2, [r3, #4]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	693a      	ldr	r2, [r7, #16]
 800a1cc:	621a      	str	r2, [r3, #32]
}
 800a1ce:	bf00      	nop
 800a1d0:	371c      	adds	r7, #28
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr
 800a1da:	bf00      	nop
 800a1dc:	feff8fff 	.word	0xfeff8fff
 800a1e0:	40010000 	.word	0x40010000
 800a1e4:	40010400 	.word	0x40010400
 800a1e8:	40014000 	.word	0x40014000
 800a1ec:	40014400 	.word	0x40014400
 800a1f0:	40014800 	.word	0x40014800

0800a1f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b087      	sub	sp, #28
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6a1b      	ldr	r3, [r3, #32]
 800a204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6a1b      	ldr	r3, [r3, #32]
 800a20a:	f023 0201 	bic.w	r2, r3, #1
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	699b      	ldr	r3, [r3, #24]
 800a216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a21e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	011b      	lsls	r3, r3, #4
 800a224:	693a      	ldr	r2, [r7, #16]
 800a226:	4313      	orrs	r3, r2
 800a228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	f023 030a 	bic.w	r3, r3, #10
 800a230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a232:	697a      	ldr	r2, [r7, #20]
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	4313      	orrs	r3, r2
 800a238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	693a      	ldr	r2, [r7, #16]
 800a23e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	697a      	ldr	r2, [r7, #20]
 800a244:	621a      	str	r2, [r3, #32]
}
 800a246:	bf00      	nop
 800a248:	371c      	adds	r7, #28
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr

0800a252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a252:	b480      	push	{r7}
 800a254:	b087      	sub	sp, #28
 800a256:	af00      	add	r7, sp, #0
 800a258:	60f8      	str	r0, [r7, #12]
 800a25a:	60b9      	str	r1, [r7, #8]
 800a25c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6a1b      	ldr	r3, [r3, #32]
 800a262:	f023 0210 	bic.w	r2, r3, #16
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	699b      	ldr	r3, [r3, #24]
 800a26e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6a1b      	ldr	r3, [r3, #32]
 800a274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a27c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	031b      	lsls	r3, r3, #12
 800a282:	697a      	ldr	r2, [r7, #20]
 800a284:	4313      	orrs	r3, r2
 800a286:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a28e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	011b      	lsls	r3, r3, #4
 800a294:	693a      	ldr	r2, [r7, #16]
 800a296:	4313      	orrs	r3, r2
 800a298:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	697a      	ldr	r2, [r7, #20]
 800a29e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	621a      	str	r2, [r3, #32]
}
 800a2a6:	bf00      	nop
 800a2a8:	371c      	adds	r7, #28
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
	...

0800a2b4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	4b09      	ldr	r3, [pc, #36]	; (800a2ec <TIM_ITRx_SetConfig+0x38>)
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2cc:	683a      	ldr	r2, [r7, #0]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	f043 0307 	orr.w	r3, r3, #7
 800a2d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	609a      	str	r2, [r3, #8]
}
 800a2de:	bf00      	nop
 800a2e0:	3714      	adds	r7, #20
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	ffcfff8f 	.word	0xffcfff8f

0800a2f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b087      	sub	sp, #28
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	607a      	str	r2, [r7, #4]
 800a2fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a30a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	021a      	lsls	r2, r3, #8
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	431a      	orrs	r2, r3
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	4313      	orrs	r3, r2
 800a318:	697a      	ldr	r2, [r7, #20]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	697a      	ldr	r2, [r7, #20]
 800a322:	609a      	str	r2, [r3, #8]
}
 800a324:	bf00      	nop
 800a326:	371c      	adds	r7, #28
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a330:	b480      	push	{r7}
 800a332:	b087      	sub	sp, #28
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	f003 031f 	and.w	r3, r3, #31
 800a342:	2201      	movs	r2, #1
 800a344:	fa02 f303 	lsl.w	r3, r2, r3
 800a348:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	6a1a      	ldr	r2, [r3, #32]
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	43db      	mvns	r3, r3
 800a352:	401a      	ands	r2, r3
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6a1a      	ldr	r2, [r3, #32]
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	f003 031f 	and.w	r3, r3, #31
 800a362:	6879      	ldr	r1, [r7, #4]
 800a364:	fa01 f303 	lsl.w	r3, r1, r3
 800a368:	431a      	orrs	r2, r3
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	621a      	str	r2, [r3, #32]
}
 800a36e:	bf00      	nop
 800a370:	371c      	adds	r7, #28
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr
	...

0800a37c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d101      	bne.n	800a394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a390:	2302      	movs	r3, #2
 800a392:	e06d      	b.n	800a470 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2202      	movs	r2, #2
 800a3a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a30      	ldr	r2, [pc, #192]	; (800a47c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d004      	beq.n	800a3c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a2f      	ldr	r2, [pc, #188]	; (800a480 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d108      	bne.n	800a3da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a3ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	68fa      	ldr	r2, [r7, #12]
 800a3f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a20      	ldr	r2, [pc, #128]	; (800a47c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d022      	beq.n	800a444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a406:	d01d      	beq.n	800a444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a1d      	ldr	r2, [pc, #116]	; (800a484 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d018      	beq.n	800a444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a1c      	ldr	r2, [pc, #112]	; (800a488 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d013      	beq.n	800a444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a1a      	ldr	r2, [pc, #104]	; (800a48c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d00e      	beq.n	800a444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a15      	ldr	r2, [pc, #84]	; (800a480 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d009      	beq.n	800a444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a16      	ldr	r2, [pc, #88]	; (800a490 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d004      	beq.n	800a444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a15      	ldr	r2, [pc, #84]	; (800a494 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d10c      	bne.n	800a45e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a44a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	68ba      	ldr	r2, [r7, #8]
 800a452:	4313      	orrs	r3, r2
 800a454:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2201      	movs	r2, #1
 800a462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a46e:	2300      	movs	r3, #0
}
 800a470:	4618      	mov	r0, r3
 800a472:	3714      	adds	r7, #20
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr
 800a47c:	40010000 	.word	0x40010000
 800a480:	40010400 	.word	0x40010400
 800a484:	40000400 	.word	0x40000400
 800a488:	40000800 	.word	0x40000800
 800a48c:	40000c00 	.word	0x40000c00
 800a490:	40001800 	.word	0x40001800
 800a494:	40014000 	.word	0x40014000

0800a498 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d101      	bne.n	800a4b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	e065      	b.n	800a580 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	695b      	ldr	r3, [r3, #20]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a51a:	4313      	orrs	r3, r2
 800a51c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	699b      	ldr	r3, [r3, #24]
 800a528:	041b      	lsls	r3, r3, #16
 800a52a:	4313      	orrs	r3, r2
 800a52c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a16      	ldr	r2, [pc, #88]	; (800a58c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d004      	beq.n	800a542 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a14      	ldr	r2, [pc, #80]	; (800a590 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d115      	bne.n	800a56e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54c:	051b      	lsls	r3, r3, #20
 800a54e:	4313      	orrs	r3, r2
 800a550:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	69db      	ldr	r3, [r3, #28]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	6a1b      	ldr	r3, [r3, #32]
 800a56a:	4313      	orrs	r3, r2
 800a56c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a57e:	2300      	movs	r3, #0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3714      	adds	r7, #20
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr
 800a58c:	40010000 	.word	0x40010000
 800a590:	40010400 	.word	0x40010400

0800a594 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a59c:	bf00      	nop
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a5b0:	bf00      	nop
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a5c4:	bf00      	nop
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d101      	bne.n	800a5e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e042      	b.n	800a668 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d106      	bne.n	800a5fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f7f8 fd59 	bl	80030ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2224      	movs	r2, #36	; 0x24
 800a5fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f022 0201 	bic.w	r2, r2, #1
 800a610:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 fd54 	bl	800b0c0 <UART_SetConfig>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d101      	bne.n	800a622 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a61e:	2301      	movs	r3, #1
 800a620:	e022      	b.n	800a668 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a626:	2b00      	cmp	r3, #0
 800a628:	d002      	beq.n	800a630 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f001 faa8 	bl	800bb80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	685a      	ldr	r2, [r3, #4]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a63e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	689a      	ldr	r2, [r3, #8]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a64e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f042 0201 	orr.w	r2, r2, #1
 800a65e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f001 fb2f 	bl	800bcc4 <UART_CheckIdleState>
 800a666:	4603      	mov	r3, r0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3708      	adds	r7, #8
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b08a      	sub	sp, #40	; 0x28
 800a674:	af02      	add	r7, sp, #8
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	603b      	str	r3, [r7, #0]
 800a67c:	4613      	mov	r3, r2
 800a67e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a686:	2b20      	cmp	r3, #32
 800a688:	f040 8083 	bne.w	800a792 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d002      	beq.n	800a698 <HAL_UART_Transmit+0x28>
 800a692:	88fb      	ldrh	r3, [r7, #6]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d101      	bne.n	800a69c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	e07b      	b.n	800a794 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d101      	bne.n	800a6aa <HAL_UART_Transmit+0x3a>
 800a6a6:	2302      	movs	r3, #2
 800a6a8:	e074      	b.n	800a794 <HAL_UART_Transmit+0x124>
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2221      	movs	r2, #33	; 0x21
 800a6be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a6c2:	f7f9 f9f9 	bl	8003ab8 <HAL_GetTick>
 800a6c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	88fa      	ldrh	r2, [r7, #6]
 800a6cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	88fa      	ldrh	r2, [r7, #6]
 800a6d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6e0:	d108      	bne.n	800a6f4 <HAL_UART_Transmit+0x84>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d104      	bne.n	800a6f4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	61bb      	str	r3, [r7, #24]
 800a6f2:	e003      	b.n	800a6fc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a704:	e02c      	b.n	800a760 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	9300      	str	r3, [sp, #0]
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	2200      	movs	r2, #0
 800a70e:	2180      	movs	r1, #128	; 0x80
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f001 fb22 	bl	800bd5a <UART_WaitOnFlagUntilTimeout>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d001      	beq.n	800a720 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a71c:	2303      	movs	r3, #3
 800a71e:	e039      	b.n	800a794 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d10b      	bne.n	800a73e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	881b      	ldrh	r3, [r3, #0]
 800a72a:	461a      	mov	r2, r3
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a734:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	3302      	adds	r3, #2
 800a73a:	61bb      	str	r3, [r7, #24]
 800a73c:	e007      	b.n	800a74e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	781a      	ldrb	r2, [r3, #0]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	3301      	adds	r3, #1
 800a74c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a754:	b29b      	uxth	r3, r3
 800a756:	3b01      	subs	r3, #1
 800a758:	b29a      	uxth	r2, r3
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a766:	b29b      	uxth	r3, r3
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d1cc      	bne.n	800a706 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	2200      	movs	r2, #0
 800a774:	2140      	movs	r1, #64	; 0x40
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f001 faef 	bl	800bd5a <UART_WaitOnFlagUntilTimeout>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d001      	beq.n	800a786 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a782:	2303      	movs	r3, #3
 800a784:	e006      	b.n	800a794 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2220      	movs	r2, #32
 800a78a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a78e:	2300      	movs	r3, #0
 800a790:	e000      	b.n	800a794 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a792:	2302      	movs	r3, #2
  }
}
 800a794:	4618      	mov	r0, r3
 800a796:	3720      	adds	r7, #32
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b08a      	sub	sp, #40	; 0x28
 800a7a0:	af02      	add	r7, sp, #8
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	603b      	str	r3, [r7, #0]
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7b2:	2b20      	cmp	r3, #32
 800a7b4:	f040 80c0 	bne.w	800a938 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d002      	beq.n	800a7c4 <HAL_UART_Receive+0x28>
 800a7be:	88fb      	ldrh	r3, [r7, #6]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d101      	bne.n	800a7c8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	e0b8      	b.n	800a93a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d101      	bne.n	800a7d6 <HAL_UART_Receive+0x3a>
 800a7d2:	2302      	movs	r3, #2
 800a7d4:	e0b1      	b.n	800a93a <HAL_UART_Receive+0x19e>
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2222      	movs	r2, #34	; 0x22
 800a7ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a7f4:	f7f9 f960 	bl	8003ab8 <HAL_GetTick>
 800a7f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	88fa      	ldrh	r2, [r7, #6]
 800a7fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	88fa      	ldrh	r2, [r7, #6]
 800a806:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a812:	d10e      	bne.n	800a832 <HAL_UART_Receive+0x96>
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	691b      	ldr	r3, [r3, #16]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d105      	bne.n	800a828 <HAL_UART_Receive+0x8c>
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a822:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a826:	e02d      	b.n	800a884 <HAL_UART_Receive+0xe8>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	22ff      	movs	r2, #255	; 0xff
 800a82c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a830:	e028      	b.n	800a884 <HAL_UART_Receive+0xe8>
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d10d      	bne.n	800a856 <HAL_UART_Receive+0xba>
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d104      	bne.n	800a84c <HAL_UART_Receive+0xb0>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	22ff      	movs	r2, #255	; 0xff
 800a846:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a84a:	e01b      	b.n	800a884 <HAL_UART_Receive+0xe8>
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	227f      	movs	r2, #127	; 0x7f
 800a850:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a854:	e016      	b.n	800a884 <HAL_UART_Receive+0xe8>
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a85e:	d10d      	bne.n	800a87c <HAL_UART_Receive+0xe0>
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	691b      	ldr	r3, [r3, #16]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d104      	bne.n	800a872 <HAL_UART_Receive+0xd6>
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	227f      	movs	r2, #127	; 0x7f
 800a86c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a870:	e008      	b.n	800a884 <HAL_UART_Receive+0xe8>
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	223f      	movs	r2, #63	; 0x3f
 800a876:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a87a:	e003      	b.n	800a884 <HAL_UART_Receive+0xe8>
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2200      	movs	r2, #0
 800a880:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a88a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a894:	d108      	bne.n	800a8a8 <HAL_UART_Receive+0x10c>
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d104      	bne.n	800a8a8 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	61bb      	str	r3, [r7, #24]
 800a8a6:	e003      	b.n	800a8b0 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a8b8:	e032      	b.n	800a920 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	9300      	str	r3, [sp, #0]
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	2120      	movs	r1, #32
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f001 fa48 	bl	800bd5a <UART_WaitOnFlagUntilTimeout>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d001      	beq.n	800a8d4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800a8d0:	2303      	movs	r3, #3
 800a8d2:	e032      	b.n	800a93a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d10c      	bne.n	800a8f4 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e0:	b29a      	uxth	r2, r3
 800a8e2:	8a7b      	ldrh	r3, [r7, #18]
 800a8e4:	4013      	ands	r3, r2
 800a8e6:	b29a      	uxth	r2, r3
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a8ec:	69bb      	ldr	r3, [r7, #24]
 800a8ee:	3302      	adds	r3, #2
 800a8f0:	61bb      	str	r3, [r7, #24]
 800a8f2:	e00c      	b.n	800a90e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fa:	b2da      	uxtb	r2, r3
 800a8fc:	8a7b      	ldrh	r3, [r7, #18]
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	4013      	ands	r3, r2
 800a902:	b2da      	uxtb	r2, r3
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a908:	69fb      	ldr	r3, [r7, #28]
 800a90a:	3301      	adds	r3, #1
 800a90c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a914:	b29b      	uxth	r3, r3
 800a916:	3b01      	subs	r3, #1
 800a918:	b29a      	uxth	r2, r3
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a926:	b29b      	uxth	r3, r3
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d1c6      	bne.n	800a8ba <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2220      	movs	r2, #32
 800a930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a934:	2300      	movs	r3, #0
 800a936:	e000      	b.n	800a93a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800a938:	2302      	movs	r3, #2
  }
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3720      	adds	r7, #32
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
	...

0800a944 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b0ba      	sub	sp, #232	; 0xe8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	69db      	ldr	r3, [r3, #28]
 800a952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a96a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a96e:	f640 030f 	movw	r3, #2063	; 0x80f
 800a972:	4013      	ands	r3, r2
 800a974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a978:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d11b      	bne.n	800a9b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a984:	f003 0320 	and.w	r3, r3, #32
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d015      	beq.n	800a9b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a98c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a990:	f003 0320 	and.w	r3, r3, #32
 800a994:	2b00      	cmp	r3, #0
 800a996:	d105      	bne.n	800a9a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a99c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d009      	beq.n	800a9b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f000 835a 	beq.w	800b062 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	4798      	blx	r3
      }
      return;
 800a9b6:	e354      	b.n	800b062 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a9b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f000 811f 	beq.w	800ac00 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a9c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a9c6:	4b8b      	ldr	r3, [pc, #556]	; (800abf4 <HAL_UART_IRQHandler+0x2b0>)
 800a9c8:	4013      	ands	r3, r2
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d106      	bne.n	800a9dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a9ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a9d2:	4b89      	ldr	r3, [pc, #548]	; (800abf8 <HAL_UART_IRQHandler+0x2b4>)
 800a9d4:	4013      	ands	r3, r2
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f000 8112 	beq.w	800ac00 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a9dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9e0:	f003 0301 	and.w	r3, r3, #1
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d011      	beq.n	800aa0c <HAL_UART_IRQHandler+0xc8>
 800a9e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d00b      	beq.n	800aa0c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa02:	f043 0201 	orr.w	r2, r3, #1
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa10:	f003 0302 	and.w	r3, r3, #2
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d011      	beq.n	800aa3c <HAL_UART_IRQHandler+0xf8>
 800aa18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa1c:	f003 0301 	and.w	r3, r3, #1
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00b      	beq.n	800aa3c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2202      	movs	r2, #2
 800aa2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa32:	f043 0204 	orr.w	r2, r3, #4
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa40:	f003 0304 	and.w	r3, r3, #4
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d011      	beq.n	800aa6c <HAL_UART_IRQHandler+0x128>
 800aa48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa4c:	f003 0301 	and.w	r3, r3, #1
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00b      	beq.n	800aa6c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2204      	movs	r2, #4
 800aa5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa62:	f043 0202 	orr.w	r2, r3, #2
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aa6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa70:	f003 0308 	and.w	r3, r3, #8
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d017      	beq.n	800aaa8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aa78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa7c:	f003 0320 	and.w	r3, r3, #32
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d105      	bne.n	800aa90 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800aa84:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800aa88:	4b5a      	ldr	r3, [pc, #360]	; (800abf4 <HAL_UART_IRQHandler+0x2b0>)
 800aa8a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d00b      	beq.n	800aaa8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2208      	movs	r2, #8
 800aa96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa9e:	f043 0208 	orr.w	r2, r3, #8
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aaa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d012      	beq.n	800aada <HAL_UART_IRQHandler+0x196>
 800aab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aab8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d00c      	beq.n	800aada <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aac8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aad0:	f043 0220 	orr.w	r2, r3, #32
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f000 82c0 	beq.w	800b066 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaea:	f003 0320 	and.w	r3, r3, #32
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d013      	beq.n	800ab1a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aaf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaf6:	f003 0320 	and.w	r3, r3, #32
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d105      	bne.n	800ab0a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aafe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d007      	beq.n	800ab1a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d003      	beq.n	800ab1a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	689b      	ldr	r3, [r3, #8]
 800ab2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab2e:	2b40      	cmp	r3, #64	; 0x40
 800ab30:	d005      	beq.n	800ab3e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ab32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab36:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d04f      	beq.n	800abde <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f001 f9d4 	bl	800beec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	689b      	ldr	r3, [r3, #8]
 800ab4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab4e:	2b40      	cmp	r3, #64	; 0x40
 800ab50:	d141      	bne.n	800abd6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	3308      	adds	r3, #8
 800ab58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ab60:	e853 3f00 	ldrex	r3, [r3]
 800ab64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ab68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	3308      	adds	r3, #8
 800ab7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ab7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ab82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ab8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ab8e:	e841 2300 	strex	r3, r2, [r1]
 800ab92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ab96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d1d9      	bne.n	800ab52 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d013      	beq.n	800abce <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abaa:	4a14      	ldr	r2, [pc, #80]	; (800abfc <HAL_UART_IRQHandler+0x2b8>)
 800abac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7fa f818 	bl	8004be8 <HAL_DMA_Abort_IT>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d017      	beq.n	800abee <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800abc8:	4610      	mov	r0, r2
 800abca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abcc:	e00f      	b.n	800abee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 fa60 	bl	800b094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abd4:	e00b      	b.n	800abee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 fa5c 	bl	800b094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abdc:	e007      	b.n	800abee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 fa58 	bl	800b094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800abec:	e23b      	b.n	800b066 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abee:	bf00      	nop
    return;
 800abf0:	e239      	b.n	800b066 <HAL_UART_IRQHandler+0x722>
 800abf2:	bf00      	nop
 800abf4:	10000001 	.word	0x10000001
 800abf8:	04000120 	.word	0x04000120
 800abfc:	0800bfb9 	.word	0x0800bfb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	f040 81ce 	bne.w	800afa6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ac0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac0e:	f003 0310 	and.w	r3, r3, #16
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	f000 81c7 	beq.w	800afa6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ac18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac1c:	f003 0310 	and.w	r3, r3, #16
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f000 81c0 	beq.w	800afa6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2210      	movs	r2, #16
 800ac2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac38:	2b40      	cmp	r3, #64	; 0x40
 800ac3a:	f040 813b 	bne.w	800aeb4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a8b      	ldr	r2, [pc, #556]	; (800ae74 <HAL_UART_IRQHandler+0x530>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d059      	beq.n	800acfe <HAL_UART_IRQHandler+0x3ba>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a89      	ldr	r2, [pc, #548]	; (800ae78 <HAL_UART_IRQHandler+0x534>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d053      	beq.n	800acfe <HAL_UART_IRQHandler+0x3ba>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4a87      	ldr	r2, [pc, #540]	; (800ae7c <HAL_UART_IRQHandler+0x538>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d04d      	beq.n	800acfe <HAL_UART_IRQHandler+0x3ba>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a85      	ldr	r2, [pc, #532]	; (800ae80 <HAL_UART_IRQHandler+0x53c>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d047      	beq.n	800acfe <HAL_UART_IRQHandler+0x3ba>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a83      	ldr	r2, [pc, #524]	; (800ae84 <HAL_UART_IRQHandler+0x540>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d041      	beq.n	800acfe <HAL_UART_IRQHandler+0x3ba>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a81      	ldr	r2, [pc, #516]	; (800ae88 <HAL_UART_IRQHandler+0x544>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d03b      	beq.n	800acfe <HAL_UART_IRQHandler+0x3ba>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a7f      	ldr	r2, [pc, #508]	; (800ae8c <HAL_UART_IRQHandler+0x548>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d035      	beq.n	800acfe <HAL_UART_IRQHandler+0x3ba>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a7d      	ldr	r2, [pc, #500]	; (800ae90 <HAL_UART_IRQHandler+0x54c>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d02f      	beq.n	800acfe <HAL_UART_IRQHandler+0x3ba>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a7b      	ldr	r2, [pc, #492]	; (800ae94 <HAL_UART_IRQHandler+0x550>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d029      	beq.n	800acfe <HAL_UART_IRQHandler+0x3ba>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a79      	ldr	r2, [pc, #484]	; (800ae98 <HAL_UART_IRQHandler+0x554>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d023      	beq.n	800acfe <HAL_UART_IRQHandler+0x3ba>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a77      	ldr	r2, [pc, #476]	; (800ae9c <HAL_UART_IRQHandler+0x558>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d01d      	beq.n	800acfe <HAL_UART_IRQHandler+0x3ba>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a75      	ldr	r2, [pc, #468]	; (800aea0 <HAL_UART_IRQHandler+0x55c>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d017      	beq.n	800acfe <HAL_UART_IRQHandler+0x3ba>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a73      	ldr	r2, [pc, #460]	; (800aea4 <HAL_UART_IRQHandler+0x560>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d011      	beq.n	800acfe <HAL_UART_IRQHandler+0x3ba>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a71      	ldr	r2, [pc, #452]	; (800aea8 <HAL_UART_IRQHandler+0x564>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d00b      	beq.n	800acfe <HAL_UART_IRQHandler+0x3ba>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a6f      	ldr	r2, [pc, #444]	; (800aeac <HAL_UART_IRQHandler+0x568>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d005      	beq.n	800acfe <HAL_UART_IRQHandler+0x3ba>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a6d      	ldr	r2, [pc, #436]	; (800aeb0 <HAL_UART_IRQHandler+0x56c>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d105      	bne.n	800ad0a <HAL_UART_IRQHandler+0x3c6>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	e004      	b.n	800ad14 <HAL_UART_IRQHandler+0x3d0>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ad18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f000 81a4 	beq.w	800b06a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ad28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	f080 819c 	bcs.w	800b06a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ad38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad40:	69db      	ldr	r3, [r3, #28]
 800ad42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad46:	f000 8086 	beq.w	800ae56 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ad56:	e853 3f00 	ldrex	r3, [r3]
 800ad5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ad5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ad62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ad74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ad78:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ad80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ad84:	e841 2300 	strex	r3, r2, [r1]
 800ad88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ad8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d1da      	bne.n	800ad4a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	3308      	adds	r3, #8
 800ad9a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad9e:	e853 3f00 	ldrex	r3, [r3]
 800ada2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ada4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ada6:	f023 0301 	bic.w	r3, r3, #1
 800adaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	3308      	adds	r3, #8
 800adb4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800adb8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800adbc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adbe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800adc0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800adc4:	e841 2300 	strex	r3, r2, [r1]
 800adc8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800adca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1e1      	bne.n	800ad94 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	3308      	adds	r3, #8
 800add6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800adda:	e853 3f00 	ldrex	r3, [r3]
 800adde:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ade0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ade2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ade6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	3308      	adds	r3, #8
 800adf0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800adf4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800adf6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800adfa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800adfc:	e841 2300 	strex	r3, r2, [r1]
 800ae00:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ae02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d1e3      	bne.n	800add0 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2220      	movs	r2, #32
 800ae0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae1e:	e853 3f00 	ldrex	r3, [r3]
 800ae22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ae24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae26:	f023 0310 	bic.w	r3, r3, #16
 800ae2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	461a      	mov	r2, r3
 800ae34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ae38:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae3a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ae3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae40:	e841 2300 	strex	r3, r2, [r1]
 800ae44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ae46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1e4      	bne.n	800ae16 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7f9 fbab 	bl	80045ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	4619      	mov	r1, r3
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 f91c 	bl	800b0a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ae70:	e0fb      	b.n	800b06a <HAL_UART_IRQHandler+0x726>
 800ae72:	bf00      	nop
 800ae74:	40020010 	.word	0x40020010
 800ae78:	40020028 	.word	0x40020028
 800ae7c:	40020040 	.word	0x40020040
 800ae80:	40020058 	.word	0x40020058
 800ae84:	40020070 	.word	0x40020070
 800ae88:	40020088 	.word	0x40020088
 800ae8c:	400200a0 	.word	0x400200a0
 800ae90:	400200b8 	.word	0x400200b8
 800ae94:	40020410 	.word	0x40020410
 800ae98:	40020428 	.word	0x40020428
 800ae9c:	40020440 	.word	0x40020440
 800aea0:	40020458 	.word	0x40020458
 800aea4:	40020470 	.word	0x40020470
 800aea8:	40020488 	.word	0x40020488
 800aeac:	400204a0 	.word	0x400204a0
 800aeb0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	1ad3      	subs	r3, r2, r3
 800aec4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aece:	b29b      	uxth	r3, r3
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f000 80cc 	beq.w	800b06e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800aed6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	f000 80c7 	beq.w	800b06e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee8:	e853 3f00 	ldrex	r3, [r3]
 800aeec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aeee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aef0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aef4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	461a      	mov	r2, r3
 800aefe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af02:	647b      	str	r3, [r7, #68]	; 0x44
 800af04:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af0a:	e841 2300 	strex	r3, r2, [r1]
 800af0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af12:	2b00      	cmp	r3, #0
 800af14:	d1e4      	bne.n	800aee0 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	3308      	adds	r3, #8
 800af1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af20:	e853 3f00 	ldrex	r3, [r3]
 800af24:	623b      	str	r3, [r7, #32]
   return(result);
 800af26:	6a3a      	ldr	r2, [r7, #32]
 800af28:	4b54      	ldr	r3, [pc, #336]	; (800b07c <HAL_UART_IRQHandler+0x738>)
 800af2a:	4013      	ands	r3, r2
 800af2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	3308      	adds	r3, #8
 800af36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800af3a:	633a      	str	r2, [r7, #48]	; 0x30
 800af3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af42:	e841 2300 	strex	r3, r2, [r1]
 800af46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1e3      	bne.n	800af16 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2220      	movs	r2, #32
 800af52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	e853 3f00 	ldrex	r3, [r3]
 800af6e:	60fb      	str	r3, [r7, #12]
   return(result);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f023 0310 	bic.w	r3, r3, #16
 800af76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	461a      	mov	r2, r3
 800af80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800af84:	61fb      	str	r3, [r7, #28]
 800af86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af88:	69b9      	ldr	r1, [r7, #24]
 800af8a:	69fa      	ldr	r2, [r7, #28]
 800af8c:	e841 2300 	strex	r3, r2, [r1]
 800af90:	617b      	str	r3, [r7, #20]
   return(result);
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d1e4      	bne.n	800af62 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800af98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800af9c:	4619      	mov	r1, r3
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f882 	bl	800b0a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800afa4:	e063      	b.n	800b06e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800afa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00e      	beq.n	800afd0 <HAL_UART_IRQHandler+0x68c>
 800afb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d008      	beq.n	800afd0 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800afc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f001 f836 	bl	800c03a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800afce:	e051      	b.n	800b074 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800afd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d014      	beq.n	800b006 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800afdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d105      	bne.n	800aff4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800afe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d008      	beq.n	800b006 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d03a      	beq.n	800b072 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	4798      	blx	r3
    }
    return;
 800b004:	e035      	b.n	800b072 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b00a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d009      	beq.n	800b026 <HAL_UART_IRQHandler+0x6e2>
 800b012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d003      	beq.n	800b026 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 ffe0 	bl	800bfe4 <UART_EndTransmit_IT>
    return;
 800b024:	e026      	b.n	800b074 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b02a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d009      	beq.n	800b046 <HAL_UART_IRQHandler+0x702>
 800b032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b036:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d003      	beq.n	800b046 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f001 f80f 	bl	800c062 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b044:	e016      	b.n	800b074 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b04a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d010      	beq.n	800b074 <HAL_UART_IRQHandler+0x730>
 800b052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b056:	2b00      	cmp	r3, #0
 800b058:	da0c      	bge.n	800b074 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 fff7 	bl	800c04e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b060:	e008      	b.n	800b074 <HAL_UART_IRQHandler+0x730>
      return;
 800b062:	bf00      	nop
 800b064:	e006      	b.n	800b074 <HAL_UART_IRQHandler+0x730>
    return;
 800b066:	bf00      	nop
 800b068:	e004      	b.n	800b074 <HAL_UART_IRQHandler+0x730>
      return;
 800b06a:	bf00      	nop
 800b06c:	e002      	b.n	800b074 <HAL_UART_IRQHandler+0x730>
      return;
 800b06e:	bf00      	nop
 800b070:	e000      	b.n	800b074 <HAL_UART_IRQHandler+0x730>
    return;
 800b072:	bf00      	nop
  }
}
 800b074:	37e8      	adds	r7, #232	; 0xe8
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	effffffe 	.word	0xeffffffe

0800b080 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b080:	b480      	push	{r7}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b088:	bf00      	nop
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b09c:	bf00      	nop
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b0b4:	bf00      	nop
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b0c0:	b5b0      	push	{r4, r5, r7, lr}
 800b0c2:	b08e      	sub	sp, #56	; 0x38
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	689a      	ldr	r2, [r3, #8]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	691b      	ldr	r3, [r3, #16]
 800b0d6:	431a      	orrs	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	695b      	ldr	r3, [r3, #20]
 800b0dc:	431a      	orrs	r2, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	69db      	ldr	r3, [r3, #28]
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	4bbf      	ldr	r3, [pc, #764]	; (800b3ec <UART_SetConfig+0x32c>)
 800b0ee:	4013      	ands	r3, r2
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	6812      	ldr	r2, [r2, #0]
 800b0f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b0f6:	430b      	orrs	r3, r1
 800b0f8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	68da      	ldr	r2, [r3, #12]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	430a      	orrs	r2, r1
 800b10e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	699b      	ldr	r3, [r3, #24]
 800b114:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4ab5      	ldr	r2, [pc, #724]	; (800b3f0 <UART_SetConfig+0x330>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d004      	beq.n	800b12a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a1b      	ldr	r3, [r3, #32]
 800b124:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b126:	4313      	orrs	r3, r2
 800b128:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	689a      	ldr	r2, [r3, #8]
 800b130:	4bb0      	ldr	r3, [pc, #704]	; (800b3f4 <UART_SetConfig+0x334>)
 800b132:	4013      	ands	r3, r2
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	6812      	ldr	r2, [r2, #0]
 800b138:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b13a:	430b      	orrs	r3, r1
 800b13c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b144:	f023 010f 	bic.w	r1, r3, #15
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	430a      	orrs	r2, r1
 800b152:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4aa7      	ldr	r2, [pc, #668]	; (800b3f8 <UART_SetConfig+0x338>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d176      	bne.n	800b24c <UART_SetConfig+0x18c>
 800b15e:	4ba7      	ldr	r3, [pc, #668]	; (800b3fc <UART_SetConfig+0x33c>)
 800b160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b166:	2b28      	cmp	r3, #40	; 0x28
 800b168:	d86c      	bhi.n	800b244 <UART_SetConfig+0x184>
 800b16a:	a201      	add	r2, pc, #4	; (adr r2, 800b170 <UART_SetConfig+0xb0>)
 800b16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b170:	0800b215 	.word	0x0800b215
 800b174:	0800b245 	.word	0x0800b245
 800b178:	0800b245 	.word	0x0800b245
 800b17c:	0800b245 	.word	0x0800b245
 800b180:	0800b245 	.word	0x0800b245
 800b184:	0800b245 	.word	0x0800b245
 800b188:	0800b245 	.word	0x0800b245
 800b18c:	0800b245 	.word	0x0800b245
 800b190:	0800b21d 	.word	0x0800b21d
 800b194:	0800b245 	.word	0x0800b245
 800b198:	0800b245 	.word	0x0800b245
 800b19c:	0800b245 	.word	0x0800b245
 800b1a0:	0800b245 	.word	0x0800b245
 800b1a4:	0800b245 	.word	0x0800b245
 800b1a8:	0800b245 	.word	0x0800b245
 800b1ac:	0800b245 	.word	0x0800b245
 800b1b0:	0800b225 	.word	0x0800b225
 800b1b4:	0800b245 	.word	0x0800b245
 800b1b8:	0800b245 	.word	0x0800b245
 800b1bc:	0800b245 	.word	0x0800b245
 800b1c0:	0800b245 	.word	0x0800b245
 800b1c4:	0800b245 	.word	0x0800b245
 800b1c8:	0800b245 	.word	0x0800b245
 800b1cc:	0800b245 	.word	0x0800b245
 800b1d0:	0800b22d 	.word	0x0800b22d
 800b1d4:	0800b245 	.word	0x0800b245
 800b1d8:	0800b245 	.word	0x0800b245
 800b1dc:	0800b245 	.word	0x0800b245
 800b1e0:	0800b245 	.word	0x0800b245
 800b1e4:	0800b245 	.word	0x0800b245
 800b1e8:	0800b245 	.word	0x0800b245
 800b1ec:	0800b245 	.word	0x0800b245
 800b1f0:	0800b235 	.word	0x0800b235
 800b1f4:	0800b245 	.word	0x0800b245
 800b1f8:	0800b245 	.word	0x0800b245
 800b1fc:	0800b245 	.word	0x0800b245
 800b200:	0800b245 	.word	0x0800b245
 800b204:	0800b245 	.word	0x0800b245
 800b208:	0800b245 	.word	0x0800b245
 800b20c:	0800b245 	.word	0x0800b245
 800b210:	0800b23d 	.word	0x0800b23d
 800b214:	2301      	movs	r3, #1
 800b216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b21a:	e222      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b21c:	2304      	movs	r3, #4
 800b21e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b222:	e21e      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b224:	2308      	movs	r3, #8
 800b226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b22a:	e21a      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b22c:	2310      	movs	r3, #16
 800b22e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b232:	e216      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b234:	2320      	movs	r3, #32
 800b236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b23a:	e212      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b23c:	2340      	movs	r3, #64	; 0x40
 800b23e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b242:	e20e      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b244:	2380      	movs	r3, #128	; 0x80
 800b246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b24a:	e20a      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a6b      	ldr	r2, [pc, #428]	; (800b400 <UART_SetConfig+0x340>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d130      	bne.n	800b2b8 <UART_SetConfig+0x1f8>
 800b256:	4b69      	ldr	r3, [pc, #420]	; (800b3fc <UART_SetConfig+0x33c>)
 800b258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b25a:	f003 0307 	and.w	r3, r3, #7
 800b25e:	2b05      	cmp	r3, #5
 800b260:	d826      	bhi.n	800b2b0 <UART_SetConfig+0x1f0>
 800b262:	a201      	add	r2, pc, #4	; (adr r2, 800b268 <UART_SetConfig+0x1a8>)
 800b264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b268:	0800b281 	.word	0x0800b281
 800b26c:	0800b289 	.word	0x0800b289
 800b270:	0800b291 	.word	0x0800b291
 800b274:	0800b299 	.word	0x0800b299
 800b278:	0800b2a1 	.word	0x0800b2a1
 800b27c:	0800b2a9 	.word	0x0800b2a9
 800b280:	2300      	movs	r3, #0
 800b282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b286:	e1ec      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b288:	2304      	movs	r3, #4
 800b28a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b28e:	e1e8      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b290:	2308      	movs	r3, #8
 800b292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b296:	e1e4      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b298:	2310      	movs	r3, #16
 800b29a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b29e:	e1e0      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b2a0:	2320      	movs	r3, #32
 800b2a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2a6:	e1dc      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b2a8:	2340      	movs	r3, #64	; 0x40
 800b2aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ae:	e1d8      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b2b0:	2380      	movs	r3, #128	; 0x80
 800b2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2b6:	e1d4      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a51      	ldr	r2, [pc, #324]	; (800b404 <UART_SetConfig+0x344>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d130      	bne.n	800b324 <UART_SetConfig+0x264>
 800b2c2:	4b4e      	ldr	r3, [pc, #312]	; (800b3fc <UART_SetConfig+0x33c>)
 800b2c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2c6:	f003 0307 	and.w	r3, r3, #7
 800b2ca:	2b05      	cmp	r3, #5
 800b2cc:	d826      	bhi.n	800b31c <UART_SetConfig+0x25c>
 800b2ce:	a201      	add	r2, pc, #4	; (adr r2, 800b2d4 <UART_SetConfig+0x214>)
 800b2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2d4:	0800b2ed 	.word	0x0800b2ed
 800b2d8:	0800b2f5 	.word	0x0800b2f5
 800b2dc:	0800b2fd 	.word	0x0800b2fd
 800b2e0:	0800b305 	.word	0x0800b305
 800b2e4:	0800b30d 	.word	0x0800b30d
 800b2e8:	0800b315 	.word	0x0800b315
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2f2:	e1b6      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b2f4:	2304      	movs	r3, #4
 800b2f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2fa:	e1b2      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b2fc:	2308      	movs	r3, #8
 800b2fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b302:	e1ae      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b304:	2310      	movs	r3, #16
 800b306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b30a:	e1aa      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b30c:	2320      	movs	r3, #32
 800b30e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b312:	e1a6      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b314:	2340      	movs	r3, #64	; 0x40
 800b316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b31a:	e1a2      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b31c:	2380      	movs	r3, #128	; 0x80
 800b31e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b322:	e19e      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a37      	ldr	r2, [pc, #220]	; (800b408 <UART_SetConfig+0x348>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d130      	bne.n	800b390 <UART_SetConfig+0x2d0>
 800b32e:	4b33      	ldr	r3, [pc, #204]	; (800b3fc <UART_SetConfig+0x33c>)
 800b330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b332:	f003 0307 	and.w	r3, r3, #7
 800b336:	2b05      	cmp	r3, #5
 800b338:	d826      	bhi.n	800b388 <UART_SetConfig+0x2c8>
 800b33a:	a201      	add	r2, pc, #4	; (adr r2, 800b340 <UART_SetConfig+0x280>)
 800b33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b340:	0800b359 	.word	0x0800b359
 800b344:	0800b361 	.word	0x0800b361
 800b348:	0800b369 	.word	0x0800b369
 800b34c:	0800b371 	.word	0x0800b371
 800b350:	0800b379 	.word	0x0800b379
 800b354:	0800b381 	.word	0x0800b381
 800b358:	2300      	movs	r3, #0
 800b35a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b35e:	e180      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b360:	2304      	movs	r3, #4
 800b362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b366:	e17c      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b368:	2308      	movs	r3, #8
 800b36a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b36e:	e178      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b370:	2310      	movs	r3, #16
 800b372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b376:	e174      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b378:	2320      	movs	r3, #32
 800b37a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b37e:	e170      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b380:	2340      	movs	r3, #64	; 0x40
 800b382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b386:	e16c      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b388:	2380      	movs	r3, #128	; 0x80
 800b38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b38e:	e168      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a1d      	ldr	r2, [pc, #116]	; (800b40c <UART_SetConfig+0x34c>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d142      	bne.n	800b420 <UART_SetConfig+0x360>
 800b39a:	4b18      	ldr	r3, [pc, #96]	; (800b3fc <UART_SetConfig+0x33c>)
 800b39c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b39e:	f003 0307 	and.w	r3, r3, #7
 800b3a2:	2b05      	cmp	r3, #5
 800b3a4:	d838      	bhi.n	800b418 <UART_SetConfig+0x358>
 800b3a6:	a201      	add	r2, pc, #4	; (adr r2, 800b3ac <UART_SetConfig+0x2ec>)
 800b3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ac:	0800b3c5 	.word	0x0800b3c5
 800b3b0:	0800b3cd 	.word	0x0800b3cd
 800b3b4:	0800b3d5 	.word	0x0800b3d5
 800b3b8:	0800b3dd 	.word	0x0800b3dd
 800b3bc:	0800b3e5 	.word	0x0800b3e5
 800b3c0:	0800b411 	.word	0x0800b411
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ca:	e14a      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b3cc:	2304      	movs	r3, #4
 800b3ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3d2:	e146      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b3d4:	2308      	movs	r3, #8
 800b3d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3da:	e142      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b3dc:	2310      	movs	r3, #16
 800b3de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3e2:	e13e      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b3e4:	2320      	movs	r3, #32
 800b3e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ea:	e13a      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b3ec:	cfff69f3 	.word	0xcfff69f3
 800b3f0:	58000c00 	.word	0x58000c00
 800b3f4:	11fff4ff 	.word	0x11fff4ff
 800b3f8:	40011000 	.word	0x40011000
 800b3fc:	58024400 	.word	0x58024400
 800b400:	40004400 	.word	0x40004400
 800b404:	40004800 	.word	0x40004800
 800b408:	40004c00 	.word	0x40004c00
 800b40c:	40005000 	.word	0x40005000
 800b410:	2340      	movs	r3, #64	; 0x40
 800b412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b416:	e124      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b418:	2380      	movs	r3, #128	; 0x80
 800b41a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b41e:	e120      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4acc      	ldr	r2, [pc, #816]	; (800b758 <UART_SetConfig+0x698>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d176      	bne.n	800b518 <UART_SetConfig+0x458>
 800b42a:	4bcc      	ldr	r3, [pc, #816]	; (800b75c <UART_SetConfig+0x69c>)
 800b42c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b42e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b432:	2b28      	cmp	r3, #40	; 0x28
 800b434:	d86c      	bhi.n	800b510 <UART_SetConfig+0x450>
 800b436:	a201      	add	r2, pc, #4	; (adr r2, 800b43c <UART_SetConfig+0x37c>)
 800b438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b43c:	0800b4e1 	.word	0x0800b4e1
 800b440:	0800b511 	.word	0x0800b511
 800b444:	0800b511 	.word	0x0800b511
 800b448:	0800b511 	.word	0x0800b511
 800b44c:	0800b511 	.word	0x0800b511
 800b450:	0800b511 	.word	0x0800b511
 800b454:	0800b511 	.word	0x0800b511
 800b458:	0800b511 	.word	0x0800b511
 800b45c:	0800b4e9 	.word	0x0800b4e9
 800b460:	0800b511 	.word	0x0800b511
 800b464:	0800b511 	.word	0x0800b511
 800b468:	0800b511 	.word	0x0800b511
 800b46c:	0800b511 	.word	0x0800b511
 800b470:	0800b511 	.word	0x0800b511
 800b474:	0800b511 	.word	0x0800b511
 800b478:	0800b511 	.word	0x0800b511
 800b47c:	0800b4f1 	.word	0x0800b4f1
 800b480:	0800b511 	.word	0x0800b511
 800b484:	0800b511 	.word	0x0800b511
 800b488:	0800b511 	.word	0x0800b511
 800b48c:	0800b511 	.word	0x0800b511
 800b490:	0800b511 	.word	0x0800b511
 800b494:	0800b511 	.word	0x0800b511
 800b498:	0800b511 	.word	0x0800b511
 800b49c:	0800b4f9 	.word	0x0800b4f9
 800b4a0:	0800b511 	.word	0x0800b511
 800b4a4:	0800b511 	.word	0x0800b511
 800b4a8:	0800b511 	.word	0x0800b511
 800b4ac:	0800b511 	.word	0x0800b511
 800b4b0:	0800b511 	.word	0x0800b511
 800b4b4:	0800b511 	.word	0x0800b511
 800b4b8:	0800b511 	.word	0x0800b511
 800b4bc:	0800b501 	.word	0x0800b501
 800b4c0:	0800b511 	.word	0x0800b511
 800b4c4:	0800b511 	.word	0x0800b511
 800b4c8:	0800b511 	.word	0x0800b511
 800b4cc:	0800b511 	.word	0x0800b511
 800b4d0:	0800b511 	.word	0x0800b511
 800b4d4:	0800b511 	.word	0x0800b511
 800b4d8:	0800b511 	.word	0x0800b511
 800b4dc:	0800b509 	.word	0x0800b509
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4e6:	e0bc      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b4e8:	2304      	movs	r3, #4
 800b4ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4ee:	e0b8      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b4f0:	2308      	movs	r3, #8
 800b4f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4f6:	e0b4      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b4f8:	2310      	movs	r3, #16
 800b4fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4fe:	e0b0      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b500:	2320      	movs	r3, #32
 800b502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b506:	e0ac      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b508:	2340      	movs	r3, #64	; 0x40
 800b50a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b50e:	e0a8      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b510:	2380      	movs	r3, #128	; 0x80
 800b512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b516:	e0a4      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a90      	ldr	r2, [pc, #576]	; (800b760 <UART_SetConfig+0x6a0>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d130      	bne.n	800b584 <UART_SetConfig+0x4c4>
 800b522:	4b8e      	ldr	r3, [pc, #568]	; (800b75c <UART_SetConfig+0x69c>)
 800b524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b526:	f003 0307 	and.w	r3, r3, #7
 800b52a:	2b05      	cmp	r3, #5
 800b52c:	d826      	bhi.n	800b57c <UART_SetConfig+0x4bc>
 800b52e:	a201      	add	r2, pc, #4	; (adr r2, 800b534 <UART_SetConfig+0x474>)
 800b530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b534:	0800b54d 	.word	0x0800b54d
 800b538:	0800b555 	.word	0x0800b555
 800b53c:	0800b55d 	.word	0x0800b55d
 800b540:	0800b565 	.word	0x0800b565
 800b544:	0800b56d 	.word	0x0800b56d
 800b548:	0800b575 	.word	0x0800b575
 800b54c:	2300      	movs	r3, #0
 800b54e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b552:	e086      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b554:	2304      	movs	r3, #4
 800b556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b55a:	e082      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b55c:	2308      	movs	r3, #8
 800b55e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b562:	e07e      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b564:	2310      	movs	r3, #16
 800b566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b56a:	e07a      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b56c:	2320      	movs	r3, #32
 800b56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b572:	e076      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b574:	2340      	movs	r3, #64	; 0x40
 800b576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b57a:	e072      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b57c:	2380      	movs	r3, #128	; 0x80
 800b57e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b582:	e06e      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4a76      	ldr	r2, [pc, #472]	; (800b764 <UART_SetConfig+0x6a4>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d130      	bne.n	800b5f0 <UART_SetConfig+0x530>
 800b58e:	4b73      	ldr	r3, [pc, #460]	; (800b75c <UART_SetConfig+0x69c>)
 800b590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b592:	f003 0307 	and.w	r3, r3, #7
 800b596:	2b05      	cmp	r3, #5
 800b598:	d826      	bhi.n	800b5e8 <UART_SetConfig+0x528>
 800b59a:	a201      	add	r2, pc, #4	; (adr r2, 800b5a0 <UART_SetConfig+0x4e0>)
 800b59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5a0:	0800b5b9 	.word	0x0800b5b9
 800b5a4:	0800b5c1 	.word	0x0800b5c1
 800b5a8:	0800b5c9 	.word	0x0800b5c9
 800b5ac:	0800b5d1 	.word	0x0800b5d1
 800b5b0:	0800b5d9 	.word	0x0800b5d9
 800b5b4:	0800b5e1 	.word	0x0800b5e1
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5be:	e050      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b5c0:	2304      	movs	r3, #4
 800b5c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5c6:	e04c      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b5c8:	2308      	movs	r3, #8
 800b5ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5ce:	e048      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b5d0:	2310      	movs	r3, #16
 800b5d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5d6:	e044      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b5d8:	2320      	movs	r3, #32
 800b5da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5de:	e040      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b5e0:	2340      	movs	r3, #64	; 0x40
 800b5e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5e6:	e03c      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b5e8:	2380      	movs	r3, #128	; 0x80
 800b5ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5ee:	e038      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4a5c      	ldr	r2, [pc, #368]	; (800b768 <UART_SetConfig+0x6a8>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d130      	bne.n	800b65c <UART_SetConfig+0x59c>
 800b5fa:	4b58      	ldr	r3, [pc, #352]	; (800b75c <UART_SetConfig+0x69c>)
 800b5fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5fe:	f003 0307 	and.w	r3, r3, #7
 800b602:	2b05      	cmp	r3, #5
 800b604:	d826      	bhi.n	800b654 <UART_SetConfig+0x594>
 800b606:	a201      	add	r2, pc, #4	; (adr r2, 800b60c <UART_SetConfig+0x54c>)
 800b608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b60c:	0800b625 	.word	0x0800b625
 800b610:	0800b62d 	.word	0x0800b62d
 800b614:	0800b635 	.word	0x0800b635
 800b618:	0800b63d 	.word	0x0800b63d
 800b61c:	0800b645 	.word	0x0800b645
 800b620:	0800b64d 	.word	0x0800b64d
 800b624:	2302      	movs	r3, #2
 800b626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b62a:	e01a      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b62c:	2304      	movs	r3, #4
 800b62e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b632:	e016      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b634:	2308      	movs	r3, #8
 800b636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b63a:	e012      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b63c:	2310      	movs	r3, #16
 800b63e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b642:	e00e      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b644:	2320      	movs	r3, #32
 800b646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b64a:	e00a      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b64c:	2340      	movs	r3, #64	; 0x40
 800b64e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b652:	e006      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b654:	2380      	movs	r3, #128	; 0x80
 800b656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b65a:	e002      	b.n	800b662 <UART_SetConfig+0x5a2>
 800b65c:	2380      	movs	r3, #128	; 0x80
 800b65e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a40      	ldr	r2, [pc, #256]	; (800b768 <UART_SetConfig+0x6a8>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	f040 80ef 	bne.w	800b84c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b66e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b672:	2b20      	cmp	r3, #32
 800b674:	dc46      	bgt.n	800b704 <UART_SetConfig+0x644>
 800b676:	2b02      	cmp	r3, #2
 800b678:	f2c0 8081 	blt.w	800b77e <UART_SetConfig+0x6be>
 800b67c:	3b02      	subs	r3, #2
 800b67e:	2b1e      	cmp	r3, #30
 800b680:	d87d      	bhi.n	800b77e <UART_SetConfig+0x6be>
 800b682:	a201      	add	r2, pc, #4	; (adr r2, 800b688 <UART_SetConfig+0x5c8>)
 800b684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b688:	0800b70b 	.word	0x0800b70b
 800b68c:	0800b77f 	.word	0x0800b77f
 800b690:	0800b713 	.word	0x0800b713
 800b694:	0800b77f 	.word	0x0800b77f
 800b698:	0800b77f 	.word	0x0800b77f
 800b69c:	0800b77f 	.word	0x0800b77f
 800b6a0:	0800b723 	.word	0x0800b723
 800b6a4:	0800b77f 	.word	0x0800b77f
 800b6a8:	0800b77f 	.word	0x0800b77f
 800b6ac:	0800b77f 	.word	0x0800b77f
 800b6b0:	0800b77f 	.word	0x0800b77f
 800b6b4:	0800b77f 	.word	0x0800b77f
 800b6b8:	0800b77f 	.word	0x0800b77f
 800b6bc:	0800b77f 	.word	0x0800b77f
 800b6c0:	0800b733 	.word	0x0800b733
 800b6c4:	0800b77f 	.word	0x0800b77f
 800b6c8:	0800b77f 	.word	0x0800b77f
 800b6cc:	0800b77f 	.word	0x0800b77f
 800b6d0:	0800b77f 	.word	0x0800b77f
 800b6d4:	0800b77f 	.word	0x0800b77f
 800b6d8:	0800b77f 	.word	0x0800b77f
 800b6dc:	0800b77f 	.word	0x0800b77f
 800b6e0:	0800b77f 	.word	0x0800b77f
 800b6e4:	0800b77f 	.word	0x0800b77f
 800b6e8:	0800b77f 	.word	0x0800b77f
 800b6ec:	0800b77f 	.word	0x0800b77f
 800b6f0:	0800b77f 	.word	0x0800b77f
 800b6f4:	0800b77f 	.word	0x0800b77f
 800b6f8:	0800b77f 	.word	0x0800b77f
 800b6fc:	0800b77f 	.word	0x0800b77f
 800b700:	0800b771 	.word	0x0800b771
 800b704:	2b40      	cmp	r3, #64	; 0x40
 800b706:	d036      	beq.n	800b776 <UART_SetConfig+0x6b6>
 800b708:	e039      	b.n	800b77e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b70a:	f7fc ff2d 	bl	8008568 <HAL_RCCEx_GetD3PCLK1Freq>
 800b70e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b710:	e03b      	b.n	800b78a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b712:	f107 0314 	add.w	r3, r7, #20
 800b716:	4618      	mov	r0, r3
 800b718:	f7fc ff3c 	bl	8008594 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b71c:	69bb      	ldr	r3, [r7, #24]
 800b71e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b720:	e033      	b.n	800b78a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b722:	f107 0308 	add.w	r3, r7, #8
 800b726:	4618      	mov	r0, r3
 800b728:	f7fd f888 	bl	800883c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b730:	e02b      	b.n	800b78a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b732:	4b0a      	ldr	r3, [pc, #40]	; (800b75c <UART_SetConfig+0x69c>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f003 0320 	and.w	r3, r3, #32
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d009      	beq.n	800b752 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b73e:	4b07      	ldr	r3, [pc, #28]	; (800b75c <UART_SetConfig+0x69c>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	08db      	lsrs	r3, r3, #3
 800b744:	f003 0303 	and.w	r3, r3, #3
 800b748:	4a08      	ldr	r2, [pc, #32]	; (800b76c <UART_SetConfig+0x6ac>)
 800b74a:	fa22 f303 	lsr.w	r3, r2, r3
 800b74e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b750:	e01b      	b.n	800b78a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800b752:	4b06      	ldr	r3, [pc, #24]	; (800b76c <UART_SetConfig+0x6ac>)
 800b754:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b756:	e018      	b.n	800b78a <UART_SetConfig+0x6ca>
 800b758:	40011400 	.word	0x40011400
 800b75c:	58024400 	.word	0x58024400
 800b760:	40007800 	.word	0x40007800
 800b764:	40007c00 	.word	0x40007c00
 800b768:	58000c00 	.word	0x58000c00
 800b76c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b770:	4bc4      	ldr	r3, [pc, #784]	; (800ba84 <UART_SetConfig+0x9c4>)
 800b772:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b774:	e009      	b.n	800b78a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b77a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b77c:	e005      	b.n	800b78a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800b77e:	2300      	movs	r3, #0
 800b780:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b782:	2301      	movs	r3, #1
 800b784:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b788:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f000 81da 	beq.w	800bb46 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b796:	4abc      	ldr	r2, [pc, #752]	; (800ba88 <UART_SetConfig+0x9c8>)
 800b798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b79c:	461a      	mov	r2, r3
 800b79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7a4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	685a      	ldr	r2, [r3, #4]
 800b7aa:	4613      	mov	r3, r2
 800b7ac:	005b      	lsls	r3, r3, #1
 800b7ae:	4413      	add	r3, r2
 800b7b0:	6a3a      	ldr	r2, [r7, #32]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d305      	bcc.n	800b7c2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b7bc:	6a3a      	ldr	r2, [r7, #32]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d903      	bls.n	800b7ca <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b7c8:	e1bd      	b.n	800bb46 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f04f 0100 	mov.w	r1, #0
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d6:	4aac      	ldr	r2, [pc, #688]	; (800ba88 <UART_SetConfig+0x9c8>)
 800b7d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7dc:	b29a      	uxth	r2, r3
 800b7de:	f04f 0300 	mov.w	r3, #0
 800b7e2:	f7f4 ff91 	bl	8000708 <__aeabi_uldivmod>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	4610      	mov	r0, r2
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	f04f 0200 	mov.w	r2, #0
 800b7f2:	f04f 0300 	mov.w	r3, #0
 800b7f6:	020b      	lsls	r3, r1, #8
 800b7f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b7fc:	0202      	lsls	r2, r0, #8
 800b7fe:	6879      	ldr	r1, [r7, #4]
 800b800:	6849      	ldr	r1, [r1, #4]
 800b802:	0849      	lsrs	r1, r1, #1
 800b804:	4608      	mov	r0, r1
 800b806:	f04f 0100 	mov.w	r1, #0
 800b80a:	1814      	adds	r4, r2, r0
 800b80c:	eb43 0501 	adc.w	r5, r3, r1
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	461a      	mov	r2, r3
 800b816:	f04f 0300 	mov.w	r3, #0
 800b81a:	4620      	mov	r0, r4
 800b81c:	4629      	mov	r1, r5
 800b81e:	f7f4 ff73 	bl	8000708 <__aeabi_uldivmod>
 800b822:	4602      	mov	r2, r0
 800b824:	460b      	mov	r3, r1
 800b826:	4613      	mov	r3, r2
 800b828:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b830:	d308      	bcc.n	800b844 <UART_SetConfig+0x784>
 800b832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b838:	d204      	bcs.n	800b844 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b840:	60da      	str	r2, [r3, #12]
 800b842:	e180      	b.n	800bb46 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800b844:	2301      	movs	r3, #1
 800b846:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b84a:	e17c      	b.n	800bb46 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	69db      	ldr	r3, [r3, #28]
 800b850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b854:	f040 80be 	bne.w	800b9d4 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800b858:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b85c:	2b20      	cmp	r3, #32
 800b85e:	dc49      	bgt.n	800b8f4 <UART_SetConfig+0x834>
 800b860:	2b00      	cmp	r3, #0
 800b862:	db7c      	blt.n	800b95e <UART_SetConfig+0x89e>
 800b864:	2b20      	cmp	r3, #32
 800b866:	d87a      	bhi.n	800b95e <UART_SetConfig+0x89e>
 800b868:	a201      	add	r2, pc, #4	; (adr r2, 800b870 <UART_SetConfig+0x7b0>)
 800b86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b86e:	bf00      	nop
 800b870:	0800b8fb 	.word	0x0800b8fb
 800b874:	0800b903 	.word	0x0800b903
 800b878:	0800b95f 	.word	0x0800b95f
 800b87c:	0800b95f 	.word	0x0800b95f
 800b880:	0800b90b 	.word	0x0800b90b
 800b884:	0800b95f 	.word	0x0800b95f
 800b888:	0800b95f 	.word	0x0800b95f
 800b88c:	0800b95f 	.word	0x0800b95f
 800b890:	0800b91b 	.word	0x0800b91b
 800b894:	0800b95f 	.word	0x0800b95f
 800b898:	0800b95f 	.word	0x0800b95f
 800b89c:	0800b95f 	.word	0x0800b95f
 800b8a0:	0800b95f 	.word	0x0800b95f
 800b8a4:	0800b95f 	.word	0x0800b95f
 800b8a8:	0800b95f 	.word	0x0800b95f
 800b8ac:	0800b95f 	.word	0x0800b95f
 800b8b0:	0800b92b 	.word	0x0800b92b
 800b8b4:	0800b95f 	.word	0x0800b95f
 800b8b8:	0800b95f 	.word	0x0800b95f
 800b8bc:	0800b95f 	.word	0x0800b95f
 800b8c0:	0800b95f 	.word	0x0800b95f
 800b8c4:	0800b95f 	.word	0x0800b95f
 800b8c8:	0800b95f 	.word	0x0800b95f
 800b8cc:	0800b95f 	.word	0x0800b95f
 800b8d0:	0800b95f 	.word	0x0800b95f
 800b8d4:	0800b95f 	.word	0x0800b95f
 800b8d8:	0800b95f 	.word	0x0800b95f
 800b8dc:	0800b95f 	.word	0x0800b95f
 800b8e0:	0800b95f 	.word	0x0800b95f
 800b8e4:	0800b95f 	.word	0x0800b95f
 800b8e8:	0800b95f 	.word	0x0800b95f
 800b8ec:	0800b95f 	.word	0x0800b95f
 800b8f0:	0800b951 	.word	0x0800b951
 800b8f4:	2b40      	cmp	r3, #64	; 0x40
 800b8f6:	d02e      	beq.n	800b956 <UART_SetConfig+0x896>
 800b8f8:	e031      	b.n	800b95e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8fa:	f7fb fec9 	bl	8007690 <HAL_RCC_GetPCLK1Freq>
 800b8fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b900:	e033      	b.n	800b96a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b902:	f7fb fedb 	bl	80076bc <HAL_RCC_GetPCLK2Freq>
 800b906:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b908:	e02f      	b.n	800b96a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b90a:	f107 0314 	add.w	r3, r7, #20
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fc fe40 	bl	8008594 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b914:	69bb      	ldr	r3, [r7, #24]
 800b916:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b918:	e027      	b.n	800b96a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b91a:	f107 0308 	add.w	r3, r7, #8
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fc ff8c 	bl	800883c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b928:	e01f      	b.n	800b96a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b92a:	4b58      	ldr	r3, [pc, #352]	; (800ba8c <UART_SetConfig+0x9cc>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f003 0320 	and.w	r3, r3, #32
 800b932:	2b00      	cmp	r3, #0
 800b934:	d009      	beq.n	800b94a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b936:	4b55      	ldr	r3, [pc, #340]	; (800ba8c <UART_SetConfig+0x9cc>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	08db      	lsrs	r3, r3, #3
 800b93c:	f003 0303 	and.w	r3, r3, #3
 800b940:	4a53      	ldr	r2, [pc, #332]	; (800ba90 <UART_SetConfig+0x9d0>)
 800b942:	fa22 f303 	lsr.w	r3, r2, r3
 800b946:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b948:	e00f      	b.n	800b96a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800b94a:	4b51      	ldr	r3, [pc, #324]	; (800ba90 <UART_SetConfig+0x9d0>)
 800b94c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b94e:	e00c      	b.n	800b96a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b950:	4b4c      	ldr	r3, [pc, #304]	; (800ba84 <UART_SetConfig+0x9c4>)
 800b952:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b954:	e009      	b.n	800b96a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b95a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b95c:	e005      	b.n	800b96a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800b95e:	2300      	movs	r3, #0
 800b960:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b962:	2301      	movs	r3, #1
 800b964:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b968:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f000 80ea 	beq.w	800bb46 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b976:	4a44      	ldr	r2, [pc, #272]	; (800ba88 <UART_SetConfig+0x9c8>)
 800b978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b97c:	461a      	mov	r2, r3
 800b97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b980:	fbb3 f3f2 	udiv	r3, r3, r2
 800b984:	005a      	lsls	r2, r3, #1
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	085b      	lsrs	r3, r3, #1
 800b98c:	441a      	add	r2, r3
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	fbb2 f3f3 	udiv	r3, r2, r3
 800b996:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99a:	2b0f      	cmp	r3, #15
 800b99c:	d916      	bls.n	800b9cc <UART_SetConfig+0x90c>
 800b99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9a4:	d212      	bcs.n	800b9cc <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	f023 030f 	bic.w	r3, r3, #15
 800b9ae:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b2:	085b      	lsrs	r3, r3, #1
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	f003 0307 	and.w	r3, r3, #7
 800b9ba:	b29a      	uxth	r2, r3
 800b9bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b9c8:	60da      	str	r2, [r3, #12]
 800b9ca:	e0bc      	b.n	800bb46 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b9d2:	e0b8      	b.n	800bb46 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b9d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b9d8:	2b20      	cmp	r3, #32
 800b9da:	dc4b      	bgt.n	800ba74 <UART_SetConfig+0x9b4>
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	f2c0 8087 	blt.w	800baf0 <UART_SetConfig+0xa30>
 800b9e2:	2b20      	cmp	r3, #32
 800b9e4:	f200 8084 	bhi.w	800baf0 <UART_SetConfig+0xa30>
 800b9e8:	a201      	add	r2, pc, #4	; (adr r2, 800b9f0 <UART_SetConfig+0x930>)
 800b9ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ee:	bf00      	nop
 800b9f0:	0800ba7b 	.word	0x0800ba7b
 800b9f4:	0800ba95 	.word	0x0800ba95
 800b9f8:	0800baf1 	.word	0x0800baf1
 800b9fc:	0800baf1 	.word	0x0800baf1
 800ba00:	0800ba9d 	.word	0x0800ba9d
 800ba04:	0800baf1 	.word	0x0800baf1
 800ba08:	0800baf1 	.word	0x0800baf1
 800ba0c:	0800baf1 	.word	0x0800baf1
 800ba10:	0800baad 	.word	0x0800baad
 800ba14:	0800baf1 	.word	0x0800baf1
 800ba18:	0800baf1 	.word	0x0800baf1
 800ba1c:	0800baf1 	.word	0x0800baf1
 800ba20:	0800baf1 	.word	0x0800baf1
 800ba24:	0800baf1 	.word	0x0800baf1
 800ba28:	0800baf1 	.word	0x0800baf1
 800ba2c:	0800baf1 	.word	0x0800baf1
 800ba30:	0800babd 	.word	0x0800babd
 800ba34:	0800baf1 	.word	0x0800baf1
 800ba38:	0800baf1 	.word	0x0800baf1
 800ba3c:	0800baf1 	.word	0x0800baf1
 800ba40:	0800baf1 	.word	0x0800baf1
 800ba44:	0800baf1 	.word	0x0800baf1
 800ba48:	0800baf1 	.word	0x0800baf1
 800ba4c:	0800baf1 	.word	0x0800baf1
 800ba50:	0800baf1 	.word	0x0800baf1
 800ba54:	0800baf1 	.word	0x0800baf1
 800ba58:	0800baf1 	.word	0x0800baf1
 800ba5c:	0800baf1 	.word	0x0800baf1
 800ba60:	0800baf1 	.word	0x0800baf1
 800ba64:	0800baf1 	.word	0x0800baf1
 800ba68:	0800baf1 	.word	0x0800baf1
 800ba6c:	0800baf1 	.word	0x0800baf1
 800ba70:	0800bae3 	.word	0x0800bae3
 800ba74:	2b40      	cmp	r3, #64	; 0x40
 800ba76:	d037      	beq.n	800bae8 <UART_SetConfig+0xa28>
 800ba78:	e03a      	b.n	800baf0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba7a:	f7fb fe09 	bl	8007690 <HAL_RCC_GetPCLK1Freq>
 800ba7e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ba80:	e03c      	b.n	800bafc <UART_SetConfig+0xa3c>
 800ba82:	bf00      	nop
 800ba84:	003d0900 	.word	0x003d0900
 800ba88:	0800f298 	.word	0x0800f298
 800ba8c:	58024400 	.word	0x58024400
 800ba90:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba94:	f7fb fe12 	bl	80076bc <HAL_RCC_GetPCLK2Freq>
 800ba98:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ba9a:	e02f      	b.n	800bafc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba9c:	f107 0314 	add.w	r3, r7, #20
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7fc fd77 	bl	8008594 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800baaa:	e027      	b.n	800bafc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800baac:	f107 0308 	add.w	r3, r7, #8
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7fc fec3 	bl	800883c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800baba:	e01f      	b.n	800bafc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800babc:	4b2c      	ldr	r3, [pc, #176]	; (800bb70 <UART_SetConfig+0xab0>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f003 0320 	and.w	r3, r3, #32
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d009      	beq.n	800badc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bac8:	4b29      	ldr	r3, [pc, #164]	; (800bb70 <UART_SetConfig+0xab0>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	08db      	lsrs	r3, r3, #3
 800bace:	f003 0303 	and.w	r3, r3, #3
 800bad2:	4a28      	ldr	r2, [pc, #160]	; (800bb74 <UART_SetConfig+0xab4>)
 800bad4:	fa22 f303 	lsr.w	r3, r2, r3
 800bad8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bada:	e00f      	b.n	800bafc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800badc:	4b25      	ldr	r3, [pc, #148]	; (800bb74 <UART_SetConfig+0xab4>)
 800bade:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bae0:	e00c      	b.n	800bafc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bae2:	4b25      	ldr	r3, [pc, #148]	; (800bb78 <UART_SetConfig+0xab8>)
 800bae4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bae6:	e009      	b.n	800bafc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bae8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800baec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800baee:	e005      	b.n	800bafc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800baf0:	2300      	movs	r3, #0
 800baf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800baf4:	2301      	movs	r3, #1
 800baf6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bafa:	bf00      	nop
    }

    if (pclk != 0U)
 800bafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d021      	beq.n	800bb46 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb06:	4a1d      	ldr	r2, [pc, #116]	; (800bb7c <UART_SetConfig+0xabc>)
 800bb08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb10:	fbb3 f2f2 	udiv	r2, r3, r2
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	085b      	lsrs	r3, r3, #1
 800bb1a:	441a      	add	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb24:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb28:	2b0f      	cmp	r3, #15
 800bb2a:	d909      	bls.n	800bb40 <UART_SetConfig+0xa80>
 800bb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb32:	d205      	bcs.n	800bb40 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	60da      	str	r2, [r3, #12]
 800bb3e:	e002      	b.n	800bb46 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800bb40:	2301      	movs	r3, #1
 800bb42:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2201      	movs	r2, #1
 800bb4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2201      	movs	r2, #1
 800bb52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bb62:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3738      	adds	r7, #56	; 0x38
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bdb0      	pop	{r4, r5, r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	58024400 	.word	0x58024400
 800bb74:	03d09000 	.word	0x03d09000
 800bb78:	003d0900 	.word	0x003d0900
 800bb7c:	0800f298 	.word	0x0800f298

0800bb80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb8c:	f003 0301 	and.w	r3, r3, #1
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00a      	beq.n	800bbaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	430a      	orrs	r2, r1
 800bba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbae:	f003 0302 	and.w	r3, r3, #2
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00a      	beq.n	800bbcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	430a      	orrs	r2, r1
 800bbca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbd0:	f003 0304 	and.w	r3, r3, #4
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d00a      	beq.n	800bbee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	430a      	orrs	r2, r1
 800bbec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf2:	f003 0308 	and.w	r3, r3, #8
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d00a      	beq.n	800bc10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	430a      	orrs	r2, r1
 800bc0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc14:	f003 0310 	and.w	r3, r3, #16
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00a      	beq.n	800bc32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	689b      	ldr	r3, [r3, #8]
 800bc22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	430a      	orrs	r2, r1
 800bc30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc36:	f003 0320 	and.w	r3, r3, #32
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d00a      	beq.n	800bc54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	689b      	ldr	r3, [r3, #8]
 800bc44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	430a      	orrs	r2, r1
 800bc52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d01a      	beq.n	800bc96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	430a      	orrs	r2, r1
 800bc74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc7e:	d10a      	bne.n	800bc96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	430a      	orrs	r2, r1
 800bc94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d00a      	beq.n	800bcb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	430a      	orrs	r2, r1
 800bcb6:	605a      	str	r2, [r3, #4]
  }
}
 800bcb8:	bf00      	nop
 800bcba:	370c      	adds	r7, #12
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b086      	sub	sp, #24
 800bcc8:	af02      	add	r7, sp, #8
 800bcca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bcd4:	f7f7 fef0 	bl	8003ab8 <HAL_GetTick>
 800bcd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f003 0308 	and.w	r3, r3, #8
 800bce4:	2b08      	cmp	r3, #8
 800bce6:	d10e      	bne.n	800bd06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bce8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bcec:	9300      	str	r3, [sp, #0]
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 f82f 	bl	800bd5a <UART_WaitOnFlagUntilTimeout>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d001      	beq.n	800bd06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd02:	2303      	movs	r3, #3
 800bd04:	e025      	b.n	800bd52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f003 0304 	and.w	r3, r3, #4
 800bd10:	2b04      	cmp	r3, #4
 800bd12:	d10e      	bne.n	800bd32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd18:	9300      	str	r3, [sp, #0]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 f819 	bl	800bd5a <UART_WaitOnFlagUntilTimeout>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d001      	beq.n	800bd32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd2e:	2303      	movs	r3, #3
 800bd30:	e00f      	b.n	800bd52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2220      	movs	r2, #32
 800bd36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2220      	movs	r2, #32
 800bd3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bd50:	2300      	movs	r3, #0
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b09c      	sub	sp, #112	; 0x70
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	60f8      	str	r0, [r7, #12]
 800bd62:	60b9      	str	r1, [r7, #8]
 800bd64:	603b      	str	r3, [r7, #0]
 800bd66:	4613      	mov	r3, r2
 800bd68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd6a:	e0a9      	b.n	800bec0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd72:	f000 80a5 	beq.w	800bec0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd76:	f7f7 fe9f 	bl	8003ab8 <HAL_GetTick>
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	1ad3      	subs	r3, r2, r3
 800bd80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d302      	bcc.n	800bd8c <UART_WaitOnFlagUntilTimeout+0x32>
 800bd86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d140      	bne.n	800be0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd94:	e853 3f00 	ldrex	r3, [r3]
 800bd98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bd9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bda0:	667b      	str	r3, [r7, #100]	; 0x64
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	461a      	mov	r2, r3
 800bda8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bdb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bdb2:	e841 2300 	strex	r3, r2, [r1]
 800bdb6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bdb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d1e6      	bne.n	800bd8c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	3308      	adds	r3, #8
 800bdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdc8:	e853 3f00 	ldrex	r3, [r3]
 800bdcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd0:	f023 0301 	bic.w	r3, r3, #1
 800bdd4:	663b      	str	r3, [r7, #96]	; 0x60
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	3308      	adds	r3, #8
 800bddc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bdde:	64ba      	str	r2, [r7, #72]	; 0x48
 800bde0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bde4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bde6:	e841 2300 	strex	r3, r2, [r1]
 800bdea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bdec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1e5      	bne.n	800bdbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2220      	movs	r2, #32
 800bdf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2220      	movs	r2, #32
 800bdfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2200      	movs	r2, #0
 800be06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800be0a:	2303      	movs	r3, #3
 800be0c:	e069      	b.n	800bee2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f003 0304 	and.w	r3, r3, #4
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d051      	beq.n	800bec0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	69db      	ldr	r3, [r3, #28]
 800be22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be2a:	d149      	bne.n	800bec0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3e:	e853 3f00 	ldrex	r3, [r3]
 800be42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800be4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	461a      	mov	r2, r3
 800be52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be54:	637b      	str	r3, [r7, #52]	; 0x34
 800be56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be5c:	e841 2300 	strex	r3, r2, [r1]
 800be60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800be62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be64:	2b00      	cmp	r3, #0
 800be66:	d1e6      	bne.n	800be36 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	3308      	adds	r3, #8
 800be6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	e853 3f00 	ldrex	r3, [r3]
 800be76:	613b      	str	r3, [r7, #16]
   return(result);
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	f023 0301 	bic.w	r3, r3, #1
 800be7e:	66bb      	str	r3, [r7, #104]	; 0x68
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	3308      	adds	r3, #8
 800be86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800be88:	623a      	str	r2, [r7, #32]
 800be8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be8c:	69f9      	ldr	r1, [r7, #28]
 800be8e:	6a3a      	ldr	r2, [r7, #32]
 800be90:	e841 2300 	strex	r3, r2, [r1]
 800be94:	61bb      	str	r3, [r7, #24]
   return(result);
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d1e5      	bne.n	800be68 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2220      	movs	r2, #32
 800bea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2220      	movs	r2, #32
 800bea8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2220      	movs	r2, #32
 800beb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2200      	movs	r2, #0
 800beb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bebc:	2303      	movs	r3, #3
 800bebe:	e010      	b.n	800bee2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	69da      	ldr	r2, [r3, #28]
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	4013      	ands	r3, r2
 800beca:	68ba      	ldr	r2, [r7, #8]
 800becc:	429a      	cmp	r2, r3
 800bece:	bf0c      	ite	eq
 800bed0:	2301      	moveq	r3, #1
 800bed2:	2300      	movne	r3, #0
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	461a      	mov	r2, r3
 800bed8:	79fb      	ldrb	r3, [r7, #7]
 800beda:	429a      	cmp	r2, r3
 800bedc:	f43f af46 	beq.w	800bd6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bee0:	2300      	movs	r3, #0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3770      	adds	r7, #112	; 0x70
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
	...

0800beec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800beec:	b480      	push	{r7}
 800beee:	b095      	sub	sp, #84	; 0x54
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800befa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800befc:	e853 3f00 	ldrex	r3, [r3]
 800bf00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf08:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	461a      	mov	r2, r3
 800bf10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf12:	643b      	str	r3, [r7, #64]	; 0x40
 800bf14:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf1a:	e841 2300 	strex	r3, r2, [r1]
 800bf1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d1e6      	bne.n	800bef4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	3308      	adds	r3, #8
 800bf2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf2e:	6a3b      	ldr	r3, [r7, #32]
 800bf30:	e853 3f00 	ldrex	r3, [r3]
 800bf34:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf36:	69fa      	ldr	r2, [r7, #28]
 800bf38:	4b1e      	ldr	r3, [pc, #120]	; (800bfb4 <UART_EndRxTransfer+0xc8>)
 800bf3a:	4013      	ands	r3, r2
 800bf3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	3308      	adds	r3, #8
 800bf44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf46:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf4e:	e841 2300 	strex	r3, r2, [r1]
 800bf52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d1e5      	bne.n	800bf26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	d118      	bne.n	800bf94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	e853 3f00 	ldrex	r3, [r3]
 800bf6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	f023 0310 	bic.w	r3, r3, #16
 800bf76:	647b      	str	r3, [r7, #68]	; 0x44
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf80:	61bb      	str	r3, [r7, #24]
 800bf82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf84:	6979      	ldr	r1, [r7, #20]
 800bf86:	69ba      	ldr	r2, [r7, #24]
 800bf88:	e841 2300 	strex	r3, r2, [r1]
 800bf8c:	613b      	str	r3, [r7, #16]
   return(result);
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d1e6      	bne.n	800bf62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2220      	movs	r2, #32
 800bf98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800bfa8:	bf00      	nop
 800bfaa:	3754      	adds	r7, #84	; 0x54
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr
 800bfb4:	effffffe 	.word	0xeffffffe

0800bfb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	f7ff f85c 	bl	800b094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfdc:	bf00      	nop
 800bfde:	3710      	adds	r7, #16
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b088      	sub	sp, #32
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	e853 3f00 	ldrex	r3, [r3]
 800bff8:	60bb      	str	r3, [r7, #8]
   return(result);
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c000:	61fb      	str	r3, [r7, #28]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	461a      	mov	r2, r3
 800c008:	69fb      	ldr	r3, [r7, #28]
 800c00a:	61bb      	str	r3, [r7, #24]
 800c00c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c00e:	6979      	ldr	r1, [r7, #20]
 800c010:	69ba      	ldr	r2, [r7, #24]
 800c012:	e841 2300 	strex	r3, r2, [r1]
 800c016:	613b      	str	r3, [r7, #16]
   return(result);
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d1e6      	bne.n	800bfec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2220      	movs	r2, #32
 800c022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f7ff f827 	bl	800b080 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c032:	bf00      	nop
 800c034:	3720      	adds	r7, #32
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c03a:	b480      	push	{r7}
 800c03c:	b083      	sub	sp, #12
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c042:	bf00      	nop
 800c044:	370c      	adds	r7, #12
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr

0800c04e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c04e:	b480      	push	{r7}
 800c050:	b083      	sub	sp, #12
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c056:	bf00      	nop
 800c058:	370c      	adds	r7, #12
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr

0800c062 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c062:	b480      	push	{r7}
 800c064:	b083      	sub	sp, #12
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c06a:	bf00      	nop
 800c06c:	370c      	adds	r7, #12
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr

0800c076 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800c076:	b580      	push	{r7, lr}
 800c078:	b084      	sub	sp, #16
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c084:	2b01      	cmp	r3, #1
 800c086:	d101      	bne.n	800c08c <HAL_UARTEx_EnableFifoMode+0x16>
 800c088:	2302      	movs	r3, #2
 800c08a:	e02b      	b.n	800c0e4 <HAL_UARTEx_EnableFifoMode+0x6e>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2201      	movs	r2, #1
 800c090:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2224      	movs	r2, #36	; 0x24
 800c098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f022 0201 	bic.w	r2, r2, #1
 800c0b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c0ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c0c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	68fa      	ldr	r2, [r7, #12]
 800c0ca:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 f8c3 	bl	800c258 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2220      	movs	r2, #32
 800c0d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c0e2:	2300      	movs	r3, #0
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3710      	adds	r7, #16
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b085      	sub	sp, #20
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d101      	bne.n	800c102 <HAL_UARTEx_DisableFifoMode+0x16>
 800c0fe:	2302      	movs	r3, #2
 800c100:	e027      	b.n	800c152 <HAL_UARTEx_DisableFifoMode+0x66>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2201      	movs	r2, #1
 800c106:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2224      	movs	r2, #36	; 0x24
 800c10e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f022 0201 	bic.w	r2, r2, #1
 800c128:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c130:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2200      	movs	r2, #0
 800c136:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	68fa      	ldr	r2, [r7, #12]
 800c13e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2220      	movs	r2, #32
 800c144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2200      	movs	r2, #0
 800c14c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c150:	2300      	movs	r3, #0
}
 800c152:	4618      	mov	r0, r3
 800c154:	3714      	adds	r7, #20
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr

0800c15e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b084      	sub	sp, #16
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
 800c166:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d101      	bne.n	800c176 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c172:	2302      	movs	r3, #2
 800c174:	e02d      	b.n	800c1d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2201      	movs	r2, #1
 800c17a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2224      	movs	r2, #36	; 0x24
 800c182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f022 0201 	bic.w	r2, r2, #1
 800c19c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	683a      	ldr	r2, [r7, #0]
 800c1ae:	430a      	orrs	r2, r1
 800c1b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 f850 	bl	800c258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	68fa      	ldr	r2, [r7, #12]
 800c1be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2220      	movs	r2, #32
 800c1c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c1d0:	2300      	movs	r3, #0
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}

0800c1da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b084      	sub	sp, #16
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
 800c1e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c1ea:	2b01      	cmp	r3, #1
 800c1ec:	d101      	bne.n	800c1f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c1ee:	2302      	movs	r3, #2
 800c1f0:	e02d      	b.n	800c24e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2201      	movs	r2, #1
 800c1f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2224      	movs	r2, #36	; 0x24
 800c1fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	681a      	ldr	r2, [r3, #0]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f022 0201 	bic.w	r2, r2, #1
 800c218:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	689b      	ldr	r3, [r3, #8]
 800c220:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	683a      	ldr	r2, [r7, #0]
 800c22a:	430a      	orrs	r2, r1
 800c22c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 f812 	bl	800c258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	68fa      	ldr	r2, [r7, #12]
 800c23a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2220      	movs	r2, #32
 800c240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2200      	movs	r2, #0
 800c248:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
	...

0800c258 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c258:	b480      	push	{r7}
 800c25a:	b085      	sub	sp, #20
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c264:	2b00      	cmp	r3, #0
 800c266:	d108      	bne.n	800c27a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2201      	movs	r2, #1
 800c26c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2201      	movs	r2, #1
 800c274:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c278:	e031      	b.n	800c2de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c27a:	2310      	movs	r3, #16
 800c27c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c27e:	2310      	movs	r3, #16
 800c280:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	689b      	ldr	r3, [r3, #8]
 800c288:	0e5b      	lsrs	r3, r3, #25
 800c28a:	b2db      	uxtb	r3, r3
 800c28c:	f003 0307 	and.w	r3, r3, #7
 800c290:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	689b      	ldr	r3, [r3, #8]
 800c298:	0f5b      	lsrs	r3, r3, #29
 800c29a:	b2db      	uxtb	r3, r3
 800c29c:	f003 0307 	and.w	r3, r3, #7
 800c2a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c2a2:	7bbb      	ldrb	r3, [r7, #14]
 800c2a4:	7b3a      	ldrb	r2, [r7, #12]
 800c2a6:	4911      	ldr	r1, [pc, #68]	; (800c2ec <UARTEx_SetNbDataToProcess+0x94>)
 800c2a8:	5c8a      	ldrb	r2, [r1, r2]
 800c2aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c2ae:	7b3a      	ldrb	r2, [r7, #12]
 800c2b0:	490f      	ldr	r1, [pc, #60]	; (800c2f0 <UARTEx_SetNbDataToProcess+0x98>)
 800c2b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c2b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2b8:	b29a      	uxth	r2, r3
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c2c0:	7bfb      	ldrb	r3, [r7, #15]
 800c2c2:	7b7a      	ldrb	r2, [r7, #13]
 800c2c4:	4909      	ldr	r1, [pc, #36]	; (800c2ec <UARTEx_SetNbDataToProcess+0x94>)
 800c2c6:	5c8a      	ldrb	r2, [r1, r2]
 800c2c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c2cc:	7b7a      	ldrb	r2, [r7, #13]
 800c2ce:	4908      	ldr	r1, [pc, #32]	; (800c2f0 <UARTEx_SetNbDataToProcess+0x98>)
 800c2d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c2d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c2de:	bf00      	nop
 800c2e0:	3714      	adds	r7, #20
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr
 800c2ea:	bf00      	nop
 800c2ec:	0800f2b0 	.word	0x0800f2b0
 800c2f0:	0800f2b8 	.word	0x0800f2b8

0800c2f4 <sinf_poly>:
 800c2f4:	07cb      	lsls	r3, r1, #31
 800c2f6:	d412      	bmi.n	800c31e <sinf_poly+0x2a>
 800c2f8:	ee21 6b00 	vmul.f64	d6, d1, d0
 800c2fc:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 800c300:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800c304:	eea5 7b01 	vfma.f64	d7, d5, d1
 800c308:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 800c30c:	ee21 1b06 	vmul.f64	d1, d1, d6
 800c310:	eea5 0b06 	vfma.f64	d0, d5, d6
 800c314:	eea7 0b01 	vfma.f64	d0, d7, d1
 800c318:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c31c:	4770      	bx	lr
 800c31e:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 800c322:	ee21 6b01 	vmul.f64	d6, d1, d1
 800c326:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800c32a:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800c32e:	eea1 7b05 	vfma.f64	d7, d1, d5
 800c332:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800c336:	eea1 0b05 	vfma.f64	d0, d1, d5
 800c33a:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 800c33e:	ee21 1b06 	vmul.f64	d1, d1, d6
 800c342:	eea6 0b05 	vfma.f64	d0, d6, d5
 800c346:	e7e5      	b.n	800c314 <sinf_poly+0x20>

0800c348 <cosf>:
 800c348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c34a:	ee10 4a10 	vmov	r4, s0
 800c34e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800c352:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800c356:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800c35a:	d20c      	bcs.n	800c376 <cosf+0x2e>
 800c35c:	ee26 1b06 	vmul.f64	d1, d6, d6
 800c360:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800c364:	d378      	bcc.n	800c458 <cosf+0x110>
 800c366:	eeb0 0b46 	vmov.f64	d0, d6
 800c36a:	483f      	ldr	r0, [pc, #252]	; (800c468 <cosf+0x120>)
 800c36c:	2101      	movs	r1, #1
 800c36e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c372:	f7ff bfbf 	b.w	800c2f4 <sinf_poly>
 800c376:	f240 422e 	movw	r2, #1070	; 0x42e
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d826      	bhi.n	800c3cc <cosf+0x84>
 800c37e:	4b3a      	ldr	r3, [pc, #232]	; (800c468 <cosf+0x120>)
 800c380:	ed93 7b08 	vldr	d7, [r3, #32]
 800c384:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c388:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c38c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800c390:	ee17 1a90 	vmov	r1, s15
 800c394:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800c398:	1609      	asrs	r1, r1, #24
 800c39a:	ee07 1a90 	vmov	s15, r1
 800c39e:	f001 0203 	and.w	r2, r1, #3
 800c3a2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800c3a6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c3aa:	ed92 0b00 	vldr	d0, [r2]
 800c3ae:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800c3b2:	f011 0f02 	tst.w	r1, #2
 800c3b6:	eea5 6b47 	vfms.f64	d6, d5, d7
 800c3ba:	f081 0101 	eor.w	r1, r1, #1
 800c3be:	bf08      	it	eq
 800c3c0:	4618      	moveq	r0, r3
 800c3c2:	ee26 1b06 	vmul.f64	d1, d6, d6
 800c3c6:	ee20 0b06 	vmul.f64	d0, d0, d6
 800c3ca:	e7d0      	b.n	800c36e <cosf+0x26>
 800c3cc:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800c3d0:	d23e      	bcs.n	800c450 <cosf+0x108>
 800c3d2:	4b26      	ldr	r3, [pc, #152]	; (800c46c <cosf+0x124>)
 800c3d4:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800c3d8:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800c3dc:	f3c4 0116 	ubfx	r1, r4, #0, #23
 800c3e0:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800c3e4:	6a06      	ldr	r6, [r0, #32]
 800c3e6:	6900      	ldr	r0, [r0, #16]
 800c3e8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800c3ec:	40a9      	lsls	r1, r5
 800c3ee:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800c3f2:	fba1 6706 	umull	r6, r7, r1, r6
 800c3f6:	fb05 f301 	mul.w	r3, r5, r1
 800c3fa:	463a      	mov	r2, r7
 800c3fc:	fbe0 2301 	umlal	r2, r3, r0, r1
 800c400:	1c11      	adds	r1, r2, #0
 800c402:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800c406:	2000      	movs	r0, #0
 800c408:	1a10      	subs	r0, r2, r0
 800c40a:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 800c40e:	eb63 0101 	sbc.w	r1, r3, r1
 800c412:	f7f4 f94b 	bl	80006ac <__aeabi_l2d>
 800c416:	0fb5      	lsrs	r5, r6, #30
 800c418:	4b13      	ldr	r3, [pc, #76]	; (800c468 <cosf+0x120>)
 800c41a:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800c41e:	ed9f 0b10 	vldr	d0, [pc, #64]	; 800c460 <cosf+0x118>
 800c422:	ec41 0b17 	vmov	d7, r0, r1
 800c426:	f004 0203 	and.w	r2, r4, #3
 800c42a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800c42e:	ee27 0b00 	vmul.f64	d0, d7, d0
 800c432:	ed92 7b00 	vldr	d7, [r2]
 800c436:	ee20 1b00 	vmul.f64	d1, d0, d0
 800c43a:	f014 0f02 	tst.w	r4, #2
 800c43e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800c442:	f085 0101 	eor.w	r1, r5, #1
 800c446:	bf08      	it	eq
 800c448:	4618      	moveq	r0, r3
 800c44a:	ee27 0b00 	vmul.f64	d0, d7, d0
 800c44e:	e78e      	b.n	800c36e <cosf+0x26>
 800c450:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c454:	f000 b817 	b.w	800c486 <__math_invalidf>
 800c458:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c45e:	bf00      	nop
 800c460:	54442d18 	.word	0x54442d18
 800c464:	3c1921fb 	.word	0x3c1921fb
 800c468:	0800f320 	.word	0x0800f320
 800c46c:	0800f2c0 	.word	0x0800f2c0

0800c470 <with_errnof>:
 800c470:	b513      	push	{r0, r1, r4, lr}
 800c472:	4604      	mov	r4, r0
 800c474:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c478:	f000 fa84 	bl	800c984 <__errno>
 800c47c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c480:	6004      	str	r4, [r0, #0]
 800c482:	b002      	add	sp, #8
 800c484:	bd10      	pop	{r4, pc}

0800c486 <__math_invalidf>:
 800c486:	eef0 7a40 	vmov.f32	s15, s0
 800c48a:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c48e:	eef4 7a67 	vcmp.f32	s15, s15
 800c492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c496:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800c49a:	d602      	bvs.n	800c4a2 <__math_invalidf+0x1c>
 800c49c:	2021      	movs	r0, #33	; 0x21
 800c49e:	f7ff bfe7 	b.w	800c470 <with_errnof>
 800c4a2:	4770      	bx	lr

0800c4a4 <sinf_poly>:
 800c4a4:	07cb      	lsls	r3, r1, #31
 800c4a6:	d412      	bmi.n	800c4ce <sinf_poly+0x2a>
 800c4a8:	ee21 6b00 	vmul.f64	d6, d1, d0
 800c4ac:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 800c4b0:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800c4b4:	eea5 7b01 	vfma.f64	d7, d5, d1
 800c4b8:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 800c4bc:	ee21 1b06 	vmul.f64	d1, d1, d6
 800c4c0:	eea5 0b06 	vfma.f64	d0, d5, d6
 800c4c4:	eea7 0b01 	vfma.f64	d0, d7, d1
 800c4c8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c4cc:	4770      	bx	lr
 800c4ce:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 800c4d2:	ee21 6b01 	vmul.f64	d6, d1, d1
 800c4d6:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800c4da:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800c4de:	eea1 7b05 	vfma.f64	d7, d1, d5
 800c4e2:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800c4e6:	eea1 0b05 	vfma.f64	d0, d1, d5
 800c4ea:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 800c4ee:	ee21 1b06 	vmul.f64	d1, d1, d6
 800c4f2:	eea6 0b05 	vfma.f64	d0, d6, d5
 800c4f6:	e7e5      	b.n	800c4c4 <sinf_poly+0x20>

0800c4f8 <sinf>:
 800c4f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4fa:	ee10 4a10 	vmov	r4, s0
 800c4fe:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800c502:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800c506:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800c50a:	eef0 7a40 	vmov.f32	s15, s0
 800c50e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800c512:	d218      	bcs.n	800c546 <sinf+0x4e>
 800c514:	ee26 1b06 	vmul.f64	d1, d6, d6
 800c518:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800c51c:	d20a      	bcs.n	800c534 <sinf+0x3c>
 800c51e:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800c522:	d103      	bne.n	800c52c <sinf+0x34>
 800c524:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800c528:	ed8d 1a01 	vstr	s2, [sp, #4]
 800c52c:	eeb0 0a67 	vmov.f32	s0, s15
 800c530:	b003      	add	sp, #12
 800c532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c534:	483e      	ldr	r0, [pc, #248]	; (800c630 <sinf+0x138>)
 800c536:	eeb0 0b46 	vmov.f64	d0, d6
 800c53a:	2100      	movs	r1, #0
 800c53c:	b003      	add	sp, #12
 800c53e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c542:	f7ff bfaf 	b.w	800c4a4 <sinf_poly>
 800c546:	f240 422e 	movw	r2, #1070	; 0x42e
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d824      	bhi.n	800c598 <sinf+0xa0>
 800c54e:	4b38      	ldr	r3, [pc, #224]	; (800c630 <sinf+0x138>)
 800c550:	ed93 7b08 	vldr	d7, [r3, #32]
 800c554:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c558:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c55c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800c560:	ee17 1a90 	vmov	r1, s15
 800c564:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800c568:	1609      	asrs	r1, r1, #24
 800c56a:	ee07 1a90 	vmov	s15, r1
 800c56e:	f001 0203 	and.w	r2, r1, #3
 800c572:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800c576:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c57a:	ed92 0b00 	vldr	d0, [r2]
 800c57e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800c582:	f011 0f02 	tst.w	r1, #2
 800c586:	eea5 6b47 	vfms.f64	d6, d5, d7
 800c58a:	bf08      	it	eq
 800c58c:	4618      	moveq	r0, r3
 800c58e:	ee26 1b06 	vmul.f64	d1, d6, d6
 800c592:	ee20 0b06 	vmul.f64	d0, d0, d6
 800c596:	e7d1      	b.n	800c53c <sinf+0x44>
 800c598:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800c59c:	d23d      	bcs.n	800c61a <sinf+0x122>
 800c59e:	4b25      	ldr	r3, [pc, #148]	; (800c634 <sinf+0x13c>)
 800c5a0:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800c5a4:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800c5a8:	f3c4 0116 	ubfx	r1, r4, #0, #23
 800c5ac:	6a06      	ldr	r6, [r0, #32]
 800c5ae:	6900      	ldr	r0, [r0, #16]
 800c5b0:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800c5b4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800c5b8:	40a9      	lsls	r1, r5
 800c5ba:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800c5be:	fba1 6706 	umull	r6, r7, r1, r6
 800c5c2:	fb05 f301 	mul.w	r3, r5, r1
 800c5c6:	463a      	mov	r2, r7
 800c5c8:	fbe0 2301 	umlal	r2, r3, r0, r1
 800c5cc:	1c11      	adds	r1, r2, #0
 800c5ce:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800c5d2:	2000      	movs	r0, #0
 800c5d4:	1a10      	subs	r0, r2, r0
 800c5d6:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 800c5da:	eb63 0101 	sbc.w	r1, r3, r1
 800c5de:	f7f4 f865 	bl	80006ac <__aeabi_l2d>
 800c5e2:	0fb5      	lsrs	r5, r6, #30
 800c5e4:	4a12      	ldr	r2, [pc, #72]	; (800c630 <sinf+0x138>)
 800c5e6:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 800c5ea:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 800c628 <sinf+0x130>
 800c5ee:	ec41 0b17 	vmov	d7, r0, r1
 800c5f2:	f003 0103 	and.w	r1, r3, #3
 800c5f6:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800c5fa:	ee27 0b00 	vmul.f64	d0, d7, d0
 800c5fe:	ed91 7b00 	vldr	d7, [r1]
 800c602:	ee20 1b00 	vmul.f64	d1, d0, d0
 800c606:	f013 0f02 	tst.w	r3, #2
 800c60a:	f102 0070 	add.w	r0, r2, #112	; 0x70
 800c60e:	4629      	mov	r1, r5
 800c610:	bf08      	it	eq
 800c612:	4610      	moveq	r0, r2
 800c614:	ee27 0b00 	vmul.f64	d0, d7, d0
 800c618:	e790      	b.n	800c53c <sinf+0x44>
 800c61a:	b003      	add	sp, #12
 800c61c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c620:	f7ff bf31 	b.w	800c486 <__math_invalidf>
 800c624:	f3af 8000 	nop.w
 800c628:	54442d18 	.word	0x54442d18
 800c62c:	3c1921fb 	.word	0x3c1921fb
 800c630:	0800f320 	.word	0x0800f320
 800c634:	0800f2c0 	.word	0x0800f2c0

0800c638 <atan2f>:
 800c638:	f000 b826 	b.w	800c688 <__ieee754_atan2f>

0800c63c <sqrtf>:
 800c63c:	b508      	push	{r3, lr}
 800c63e:	ed2d 8b02 	vpush	{d8}
 800c642:	eeb0 8a40 	vmov.f32	s16, s0
 800c646:	f000 f8bd 	bl	800c7c4 <__ieee754_sqrtf>
 800c64a:	4b0d      	ldr	r3, [pc, #52]	; (800c680 <sqrtf+0x44>)
 800c64c:	f993 3000 	ldrsb.w	r3, [r3]
 800c650:	3301      	adds	r3, #1
 800c652:	d011      	beq.n	800c678 <sqrtf+0x3c>
 800c654:	eeb4 8a48 	vcmp.f32	s16, s16
 800c658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c65c:	d60c      	bvs.n	800c678 <sqrtf+0x3c>
 800c65e:	eddf 8a09 	vldr	s17, [pc, #36]	; 800c684 <sqrtf+0x48>
 800c662:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c66a:	d505      	bpl.n	800c678 <sqrtf+0x3c>
 800c66c:	f000 f98a 	bl	800c984 <__errno>
 800c670:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c674:	2321      	movs	r3, #33	; 0x21
 800c676:	6003      	str	r3, [r0, #0]
 800c678:	ecbd 8b02 	vpop	{d8}
 800c67c:	bd08      	pop	{r3, pc}
 800c67e:	bf00      	nop
 800c680:	24000035 	.word	0x24000035
 800c684:	00000000 	.word	0x00000000

0800c688 <__ieee754_atan2f>:
 800c688:	ee10 2a90 	vmov	r2, s1
 800c68c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800c690:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c694:	b510      	push	{r4, lr}
 800c696:	eef0 7a40 	vmov.f32	s15, s0
 800c69a:	dc06      	bgt.n	800c6aa <__ieee754_atan2f+0x22>
 800c69c:	ee10 0a10 	vmov	r0, s0
 800c6a0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800c6a4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c6a8:	dd04      	ble.n	800c6b4 <__ieee754_atan2f+0x2c>
 800c6aa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c6ae:	eeb0 0a67 	vmov.f32	s0, s15
 800c6b2:	bd10      	pop	{r4, pc}
 800c6b4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800c6b8:	d103      	bne.n	800c6c2 <__ieee754_atan2f+0x3a>
 800c6ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6be:	f000 b885 	b.w	800c7cc <atanf>
 800c6c2:	1794      	asrs	r4, r2, #30
 800c6c4:	f004 0402 	and.w	r4, r4, #2
 800c6c8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c6cc:	b93b      	cbnz	r3, 800c6de <__ieee754_atan2f+0x56>
 800c6ce:	2c02      	cmp	r4, #2
 800c6d0:	d05c      	beq.n	800c78c <__ieee754_atan2f+0x104>
 800c6d2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800c7a0 <__ieee754_atan2f+0x118>
 800c6d6:	2c03      	cmp	r4, #3
 800c6d8:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800c6dc:	e7e7      	b.n	800c6ae <__ieee754_atan2f+0x26>
 800c6de:	b939      	cbnz	r1, 800c6f0 <__ieee754_atan2f+0x68>
 800c6e0:	eddf 7a30 	vldr	s15, [pc, #192]	; 800c7a4 <__ieee754_atan2f+0x11c>
 800c6e4:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800c7a8 <__ieee754_atan2f+0x120>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	fe67 7a80 	vselge.f32	s15, s15, s0
 800c6ee:	e7de      	b.n	800c6ae <__ieee754_atan2f+0x26>
 800c6f0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c6f4:	d110      	bne.n	800c718 <__ieee754_atan2f+0x90>
 800c6f6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c6fa:	f104 34ff 	add.w	r4, r4, #4294967295
 800c6fe:	d107      	bne.n	800c710 <__ieee754_atan2f+0x88>
 800c700:	2c02      	cmp	r4, #2
 800c702:	d846      	bhi.n	800c792 <__ieee754_atan2f+0x10a>
 800c704:	4b29      	ldr	r3, [pc, #164]	; (800c7ac <__ieee754_atan2f+0x124>)
 800c706:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c70a:	edd4 7a00 	vldr	s15, [r4]
 800c70e:	e7ce      	b.n	800c6ae <__ieee754_atan2f+0x26>
 800c710:	2c02      	cmp	r4, #2
 800c712:	d841      	bhi.n	800c798 <__ieee754_atan2f+0x110>
 800c714:	4b26      	ldr	r3, [pc, #152]	; (800c7b0 <__ieee754_atan2f+0x128>)
 800c716:	e7f6      	b.n	800c706 <__ieee754_atan2f+0x7e>
 800c718:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c71c:	d0e0      	beq.n	800c6e0 <__ieee754_atan2f+0x58>
 800c71e:	1a5b      	subs	r3, r3, r1
 800c720:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800c724:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c728:	da1a      	bge.n	800c760 <__ieee754_atan2f+0xd8>
 800c72a:	2a00      	cmp	r2, #0
 800c72c:	da01      	bge.n	800c732 <__ieee754_atan2f+0xaa>
 800c72e:	313c      	adds	r1, #60	; 0x3c
 800c730:	db19      	blt.n	800c766 <__ieee754_atan2f+0xde>
 800c732:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c736:	f000 f91d 	bl	800c974 <fabsf>
 800c73a:	f000 f847 	bl	800c7cc <atanf>
 800c73e:	eef0 7a40 	vmov.f32	s15, s0
 800c742:	2c01      	cmp	r4, #1
 800c744:	d012      	beq.n	800c76c <__ieee754_atan2f+0xe4>
 800c746:	2c02      	cmp	r4, #2
 800c748:	d017      	beq.n	800c77a <__ieee754_atan2f+0xf2>
 800c74a:	2c00      	cmp	r4, #0
 800c74c:	d0af      	beq.n	800c6ae <__ieee754_atan2f+0x26>
 800c74e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800c7b4 <__ieee754_atan2f+0x12c>
 800c752:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c756:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800c7b8 <__ieee754_atan2f+0x130>
 800c75a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c75e:	e7a6      	b.n	800c6ae <__ieee754_atan2f+0x26>
 800c760:	eddf 7a10 	vldr	s15, [pc, #64]	; 800c7a4 <__ieee754_atan2f+0x11c>
 800c764:	e7ed      	b.n	800c742 <__ieee754_atan2f+0xba>
 800c766:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c7bc <__ieee754_atan2f+0x134>
 800c76a:	e7ea      	b.n	800c742 <__ieee754_atan2f+0xba>
 800c76c:	ee17 3a90 	vmov	r3, s15
 800c770:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c774:	ee07 3a90 	vmov	s15, r3
 800c778:	e799      	b.n	800c6ae <__ieee754_atan2f+0x26>
 800c77a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800c7b4 <__ieee754_atan2f+0x12c>
 800c77e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c782:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800c7b8 <__ieee754_atan2f+0x130>
 800c786:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c78a:	e790      	b.n	800c6ae <__ieee754_atan2f+0x26>
 800c78c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800c7b8 <__ieee754_atan2f+0x130>
 800c790:	e78d      	b.n	800c6ae <__ieee754_atan2f+0x26>
 800c792:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800c7c0 <__ieee754_atan2f+0x138>
 800c796:	e78a      	b.n	800c6ae <__ieee754_atan2f+0x26>
 800c798:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c7bc <__ieee754_atan2f+0x134>
 800c79c:	e787      	b.n	800c6ae <__ieee754_atan2f+0x26>
 800c79e:	bf00      	nop
 800c7a0:	c0490fdb 	.word	0xc0490fdb
 800c7a4:	3fc90fdb 	.word	0x3fc90fdb
 800c7a8:	bfc90fdb 	.word	0xbfc90fdb
 800c7ac:	0800f400 	.word	0x0800f400
 800c7b0:	0800f40c 	.word	0x0800f40c
 800c7b4:	33bbbd2e 	.word	0x33bbbd2e
 800c7b8:	40490fdb 	.word	0x40490fdb
 800c7bc:	00000000 	.word	0x00000000
 800c7c0:	3f490fdb 	.word	0x3f490fdb

0800c7c4 <__ieee754_sqrtf>:
 800c7c4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c7c8:	4770      	bx	lr
	...

0800c7cc <atanf>:
 800c7cc:	b538      	push	{r3, r4, r5, lr}
 800c7ce:	ee10 5a10 	vmov	r5, s0
 800c7d2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800c7d6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800c7da:	eef0 7a40 	vmov.f32	s15, s0
 800c7de:	db0f      	blt.n	800c800 <atanf+0x34>
 800c7e0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c7e4:	dd04      	ble.n	800c7f0 <atanf+0x24>
 800c7e6:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c7ea:	eeb0 0a67 	vmov.f32	s0, s15
 800c7ee:	bd38      	pop	{r3, r4, r5, pc}
 800c7f0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800c928 <atanf+0x15c>
 800c7f4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800c92c <atanf+0x160>
 800c7f8:	2d00      	cmp	r5, #0
 800c7fa:	fe77 7a80 	vselgt.f32	s15, s15, s0
 800c7fe:	e7f4      	b.n	800c7ea <atanf+0x1e>
 800c800:	4b4b      	ldr	r3, [pc, #300]	; (800c930 <atanf+0x164>)
 800c802:	429c      	cmp	r4, r3
 800c804:	dc10      	bgt.n	800c828 <atanf+0x5c>
 800c806:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800c80a:	da0a      	bge.n	800c822 <atanf+0x56>
 800c80c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c934 <atanf+0x168>
 800c810:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c814:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c818:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c820:	dce3      	bgt.n	800c7ea <atanf+0x1e>
 800c822:	f04f 33ff 	mov.w	r3, #4294967295
 800c826:	e013      	b.n	800c850 <atanf+0x84>
 800c828:	f000 f8a4 	bl	800c974 <fabsf>
 800c82c:	4b42      	ldr	r3, [pc, #264]	; (800c938 <atanf+0x16c>)
 800c82e:	429c      	cmp	r4, r3
 800c830:	dc4f      	bgt.n	800c8d2 <atanf+0x106>
 800c832:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c836:	429c      	cmp	r4, r3
 800c838:	dc41      	bgt.n	800c8be <atanf+0xf2>
 800c83a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c83e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c842:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c846:	2300      	movs	r3, #0
 800c848:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c84c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c850:	1c5a      	adds	r2, r3, #1
 800c852:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800c856:	eddf 5a39 	vldr	s11, [pc, #228]	; 800c93c <atanf+0x170>
 800c85a:	ed9f 6a39 	vldr	s12, [pc, #228]	; 800c940 <atanf+0x174>
 800c85e:	ed9f 5a39 	vldr	s10, [pc, #228]	; 800c944 <atanf+0x178>
 800c862:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800c948 <atanf+0x17c>
 800c866:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c86a:	eea7 6a25 	vfma.f32	s12, s14, s11
 800c86e:	eddf 5a37 	vldr	s11, [pc, #220]	; 800c94c <atanf+0x180>
 800c872:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c876:	ed9f 6a36 	vldr	s12, [pc, #216]	; 800c950 <atanf+0x184>
 800c87a:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c87e:	eddf 5a35 	vldr	s11, [pc, #212]	; 800c954 <atanf+0x188>
 800c882:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c886:	ed9f 6a34 	vldr	s12, [pc, #208]	; 800c958 <atanf+0x18c>
 800c88a:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c88e:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c95c <atanf+0x190>
 800c892:	eee7 5a05 	vfma.f32	s11, s14, s10
 800c896:	ed9f 5a32 	vldr	s10, [pc, #200]	; 800c960 <atanf+0x194>
 800c89a:	eea5 5a87 	vfma.f32	s10, s11, s14
 800c89e:	eddf 5a31 	vldr	s11, [pc, #196]	; 800c964 <atanf+0x198>
 800c8a2:	eee5 5a07 	vfma.f32	s11, s10, s14
 800c8a6:	eea5 0a87 	vfma.f32	s0, s11, s14
 800c8aa:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c8ae:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c8b2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c8b6:	d121      	bne.n	800c8fc <atanf+0x130>
 800c8b8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c8bc:	e795      	b.n	800c7ea <atanf+0x1e>
 800c8be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c8c2:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c8c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c8d0:	e7be      	b.n	800c850 <atanf+0x84>
 800c8d2:	4b25      	ldr	r3, [pc, #148]	; (800c968 <atanf+0x19c>)
 800c8d4:	429c      	cmp	r4, r3
 800c8d6:	dc0b      	bgt.n	800c8f0 <atanf+0x124>
 800c8d8:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800c8dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8e0:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c8e4:	2302      	movs	r3, #2
 800c8e6:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c8ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8ee:	e7af      	b.n	800c850 <atanf+0x84>
 800c8f0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c8f4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c8f8:	2303      	movs	r3, #3
 800c8fa:	e7a9      	b.n	800c850 <atanf+0x84>
 800c8fc:	4a1b      	ldr	r2, [pc, #108]	; (800c96c <atanf+0x1a0>)
 800c8fe:	491c      	ldr	r1, [pc, #112]	; (800c970 <atanf+0x1a4>)
 800c900:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c904:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c908:	ed93 7a00 	vldr	s14, [r3]
 800c90c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c910:	2d00      	cmp	r5, #0
 800c912:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c916:	ed92 0a00 	vldr	s0, [r2]
 800c91a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c91e:	bfb8      	it	lt
 800c920:	eef1 7a67 	vneglt.f32	s15, s15
 800c924:	e761      	b.n	800c7ea <atanf+0x1e>
 800c926:	bf00      	nop
 800c928:	3fc90fdb 	.word	0x3fc90fdb
 800c92c:	bfc90fdb 	.word	0xbfc90fdb
 800c930:	3edfffff 	.word	0x3edfffff
 800c934:	7149f2ca 	.word	0x7149f2ca
 800c938:	3f97ffff 	.word	0x3f97ffff
 800c93c:	3c8569d7 	.word	0x3c8569d7
 800c940:	3d4bda59 	.word	0x3d4bda59
 800c944:	bd15a221 	.word	0xbd15a221
 800c948:	be4ccccd 	.word	0xbe4ccccd
 800c94c:	3d886b35 	.word	0x3d886b35
 800c950:	3dba2e6e 	.word	0x3dba2e6e
 800c954:	3e124925 	.word	0x3e124925
 800c958:	3eaaaaab 	.word	0x3eaaaaab
 800c95c:	bd6ef16b 	.word	0xbd6ef16b
 800c960:	bd9d8795 	.word	0xbd9d8795
 800c964:	bde38e38 	.word	0xbde38e38
 800c968:	401bffff 	.word	0x401bffff
 800c96c:	0800f418 	.word	0x0800f418
 800c970:	0800f428 	.word	0x0800f428

0800c974 <fabsf>:
 800c974:	ee10 3a10 	vmov	r3, s0
 800c978:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c97c:	ee00 3a10 	vmov	s0, r3
 800c980:	4770      	bx	lr
	...

0800c984 <__errno>:
 800c984:	4b01      	ldr	r3, [pc, #4]	; (800c98c <__errno+0x8>)
 800c986:	6818      	ldr	r0, [r3, #0]
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	24000038 	.word	0x24000038

0800c990 <__libc_init_array>:
 800c990:	b570      	push	{r4, r5, r6, lr}
 800c992:	4d0d      	ldr	r5, [pc, #52]	; (800c9c8 <__libc_init_array+0x38>)
 800c994:	4c0d      	ldr	r4, [pc, #52]	; (800c9cc <__libc_init_array+0x3c>)
 800c996:	1b64      	subs	r4, r4, r5
 800c998:	10a4      	asrs	r4, r4, #2
 800c99a:	2600      	movs	r6, #0
 800c99c:	42a6      	cmp	r6, r4
 800c99e:	d109      	bne.n	800c9b4 <__libc_init_array+0x24>
 800c9a0:	4d0b      	ldr	r5, [pc, #44]	; (800c9d0 <__libc_init_array+0x40>)
 800c9a2:	4c0c      	ldr	r4, [pc, #48]	; (800c9d4 <__libc_init_array+0x44>)
 800c9a4:	f002 fc60 	bl	800f268 <_init>
 800c9a8:	1b64      	subs	r4, r4, r5
 800c9aa:	10a4      	asrs	r4, r4, #2
 800c9ac:	2600      	movs	r6, #0
 800c9ae:	42a6      	cmp	r6, r4
 800c9b0:	d105      	bne.n	800c9be <__libc_init_array+0x2e>
 800c9b2:	bd70      	pop	{r4, r5, r6, pc}
 800c9b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9b8:	4798      	blx	r3
 800c9ba:	3601      	adds	r6, #1
 800c9bc:	e7ee      	b.n	800c99c <__libc_init_array+0xc>
 800c9be:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9c2:	4798      	blx	r3
 800c9c4:	3601      	adds	r6, #1
 800c9c6:	e7f2      	b.n	800c9ae <__libc_init_array+0x1e>
 800c9c8:	0800f824 	.word	0x0800f824
 800c9cc:	0800f824 	.word	0x0800f824
 800c9d0:	0800f824 	.word	0x0800f824
 800c9d4:	0800f82c 	.word	0x0800f82c

0800c9d8 <memset>:
 800c9d8:	4402      	add	r2, r0
 800c9da:	4603      	mov	r3, r0
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d100      	bne.n	800c9e2 <memset+0xa>
 800c9e0:	4770      	bx	lr
 800c9e2:	f803 1b01 	strb.w	r1, [r3], #1
 800c9e6:	e7f9      	b.n	800c9dc <memset+0x4>

0800c9e8 <__cvt>:
 800c9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9ea:	ed2d 8b02 	vpush	{d8}
 800c9ee:	eeb0 8b40 	vmov.f64	d8, d0
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	4617      	mov	r7, r2
 800c9f6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c9f8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c9fa:	ee18 2a90 	vmov	r2, s17
 800c9fe:	f025 0520 	bic.w	r5, r5, #32
 800ca02:	2a00      	cmp	r2, #0
 800ca04:	bfb6      	itet	lt
 800ca06:	222d      	movlt	r2, #45	; 0x2d
 800ca08:	2200      	movge	r2, #0
 800ca0a:	eeb1 8b40 	vneglt.f64	d8, d0
 800ca0e:	2d46      	cmp	r5, #70	; 0x46
 800ca10:	460c      	mov	r4, r1
 800ca12:	701a      	strb	r2, [r3, #0]
 800ca14:	d004      	beq.n	800ca20 <__cvt+0x38>
 800ca16:	2d45      	cmp	r5, #69	; 0x45
 800ca18:	d100      	bne.n	800ca1c <__cvt+0x34>
 800ca1a:	3401      	adds	r4, #1
 800ca1c:	2102      	movs	r1, #2
 800ca1e:	e000      	b.n	800ca22 <__cvt+0x3a>
 800ca20:	2103      	movs	r1, #3
 800ca22:	ab03      	add	r3, sp, #12
 800ca24:	9301      	str	r3, [sp, #4]
 800ca26:	ab02      	add	r3, sp, #8
 800ca28:	9300      	str	r3, [sp, #0]
 800ca2a:	4622      	mov	r2, r4
 800ca2c:	4633      	mov	r3, r6
 800ca2e:	eeb0 0b48 	vmov.f64	d0, d8
 800ca32:	f000 fca9 	bl	800d388 <_dtoa_r>
 800ca36:	2d47      	cmp	r5, #71	; 0x47
 800ca38:	d109      	bne.n	800ca4e <__cvt+0x66>
 800ca3a:	07fb      	lsls	r3, r7, #31
 800ca3c:	d407      	bmi.n	800ca4e <__cvt+0x66>
 800ca3e:	9b03      	ldr	r3, [sp, #12]
 800ca40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca42:	1a1b      	subs	r3, r3, r0
 800ca44:	6013      	str	r3, [r2, #0]
 800ca46:	b005      	add	sp, #20
 800ca48:	ecbd 8b02 	vpop	{d8}
 800ca4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca4e:	2d46      	cmp	r5, #70	; 0x46
 800ca50:	eb00 0204 	add.w	r2, r0, r4
 800ca54:	d10c      	bne.n	800ca70 <__cvt+0x88>
 800ca56:	7803      	ldrb	r3, [r0, #0]
 800ca58:	2b30      	cmp	r3, #48	; 0x30
 800ca5a:	d107      	bne.n	800ca6c <__cvt+0x84>
 800ca5c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ca60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca64:	bf1c      	itt	ne
 800ca66:	f1c4 0401 	rsbne	r4, r4, #1
 800ca6a:	6034      	strne	r4, [r6, #0]
 800ca6c:	6833      	ldr	r3, [r6, #0]
 800ca6e:	441a      	add	r2, r3
 800ca70:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ca74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca78:	bf08      	it	eq
 800ca7a:	9203      	streq	r2, [sp, #12]
 800ca7c:	2130      	movs	r1, #48	; 0x30
 800ca7e:	9b03      	ldr	r3, [sp, #12]
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d2dc      	bcs.n	800ca3e <__cvt+0x56>
 800ca84:	1c5c      	adds	r4, r3, #1
 800ca86:	9403      	str	r4, [sp, #12]
 800ca88:	7019      	strb	r1, [r3, #0]
 800ca8a:	e7f8      	b.n	800ca7e <__cvt+0x96>

0800ca8c <__exponent>:
 800ca8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca8e:	4603      	mov	r3, r0
 800ca90:	2900      	cmp	r1, #0
 800ca92:	bfb8      	it	lt
 800ca94:	4249      	neglt	r1, r1
 800ca96:	f803 2b02 	strb.w	r2, [r3], #2
 800ca9a:	bfb4      	ite	lt
 800ca9c:	222d      	movlt	r2, #45	; 0x2d
 800ca9e:	222b      	movge	r2, #43	; 0x2b
 800caa0:	2909      	cmp	r1, #9
 800caa2:	7042      	strb	r2, [r0, #1]
 800caa4:	dd2a      	ble.n	800cafc <__exponent+0x70>
 800caa6:	f10d 0407 	add.w	r4, sp, #7
 800caaa:	46a4      	mov	ip, r4
 800caac:	270a      	movs	r7, #10
 800caae:	46a6      	mov	lr, r4
 800cab0:	460a      	mov	r2, r1
 800cab2:	fb91 f6f7 	sdiv	r6, r1, r7
 800cab6:	fb07 1516 	mls	r5, r7, r6, r1
 800caba:	3530      	adds	r5, #48	; 0x30
 800cabc:	2a63      	cmp	r2, #99	; 0x63
 800cabe:	f104 34ff 	add.w	r4, r4, #4294967295
 800cac2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cac6:	4631      	mov	r1, r6
 800cac8:	dcf1      	bgt.n	800caae <__exponent+0x22>
 800caca:	3130      	adds	r1, #48	; 0x30
 800cacc:	f1ae 0502 	sub.w	r5, lr, #2
 800cad0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cad4:	1c44      	adds	r4, r0, #1
 800cad6:	4629      	mov	r1, r5
 800cad8:	4561      	cmp	r1, ip
 800cada:	d30a      	bcc.n	800caf2 <__exponent+0x66>
 800cadc:	f10d 0209 	add.w	r2, sp, #9
 800cae0:	eba2 020e 	sub.w	r2, r2, lr
 800cae4:	4565      	cmp	r5, ip
 800cae6:	bf88      	it	hi
 800cae8:	2200      	movhi	r2, #0
 800caea:	4413      	add	r3, r2
 800caec:	1a18      	subs	r0, r3, r0
 800caee:	b003      	add	sp, #12
 800caf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800caf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800caf6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cafa:	e7ed      	b.n	800cad8 <__exponent+0x4c>
 800cafc:	2330      	movs	r3, #48	; 0x30
 800cafe:	3130      	adds	r1, #48	; 0x30
 800cb00:	7083      	strb	r3, [r0, #2]
 800cb02:	70c1      	strb	r1, [r0, #3]
 800cb04:	1d03      	adds	r3, r0, #4
 800cb06:	e7f1      	b.n	800caec <__exponent+0x60>

0800cb08 <_printf_float>:
 800cb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb0c:	b08b      	sub	sp, #44	; 0x2c
 800cb0e:	460c      	mov	r4, r1
 800cb10:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800cb14:	4616      	mov	r6, r2
 800cb16:	461f      	mov	r7, r3
 800cb18:	4605      	mov	r5, r0
 800cb1a:	f001 f9b7 	bl	800de8c <_localeconv_r>
 800cb1e:	f8d0 b000 	ldr.w	fp, [r0]
 800cb22:	4658      	mov	r0, fp
 800cb24:	f7f3 fbdc 	bl	80002e0 <strlen>
 800cb28:	2300      	movs	r3, #0
 800cb2a:	9308      	str	r3, [sp, #32]
 800cb2c:	f8d8 3000 	ldr.w	r3, [r8]
 800cb30:	f894 9018 	ldrb.w	r9, [r4, #24]
 800cb34:	6822      	ldr	r2, [r4, #0]
 800cb36:	3307      	adds	r3, #7
 800cb38:	f023 0307 	bic.w	r3, r3, #7
 800cb3c:	f103 0108 	add.w	r1, r3, #8
 800cb40:	f8c8 1000 	str.w	r1, [r8]
 800cb44:	4682      	mov	sl, r0
 800cb46:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cb4a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800cb4e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800cdb0 <_printf_float+0x2a8>
 800cb52:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800cb56:	eeb0 6bc0 	vabs.f64	d6, d0
 800cb5a:	eeb4 6b47 	vcmp.f64	d6, d7
 800cb5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb62:	dd24      	ble.n	800cbae <_printf_float+0xa6>
 800cb64:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cb68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb6c:	d502      	bpl.n	800cb74 <_printf_float+0x6c>
 800cb6e:	232d      	movs	r3, #45	; 0x2d
 800cb70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb74:	4b90      	ldr	r3, [pc, #576]	; (800cdb8 <_printf_float+0x2b0>)
 800cb76:	4891      	ldr	r0, [pc, #580]	; (800cdbc <_printf_float+0x2b4>)
 800cb78:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cb7c:	bf94      	ite	ls
 800cb7e:	4698      	movls	r8, r3
 800cb80:	4680      	movhi	r8, r0
 800cb82:	2303      	movs	r3, #3
 800cb84:	6123      	str	r3, [r4, #16]
 800cb86:	f022 0204 	bic.w	r2, r2, #4
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	6022      	str	r2, [r4, #0]
 800cb8e:	9304      	str	r3, [sp, #16]
 800cb90:	9700      	str	r7, [sp, #0]
 800cb92:	4633      	mov	r3, r6
 800cb94:	aa09      	add	r2, sp, #36	; 0x24
 800cb96:	4621      	mov	r1, r4
 800cb98:	4628      	mov	r0, r5
 800cb9a:	f000 f9d3 	bl	800cf44 <_printf_common>
 800cb9e:	3001      	adds	r0, #1
 800cba0:	f040 808a 	bne.w	800ccb8 <_printf_float+0x1b0>
 800cba4:	f04f 30ff 	mov.w	r0, #4294967295
 800cba8:	b00b      	add	sp, #44	; 0x2c
 800cbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbae:	eeb4 0b40 	vcmp.f64	d0, d0
 800cbb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbb6:	d709      	bvc.n	800cbcc <_printf_float+0xc4>
 800cbb8:	ee10 3a90 	vmov	r3, s1
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	bfbc      	itt	lt
 800cbc0:	232d      	movlt	r3, #45	; 0x2d
 800cbc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cbc6:	487e      	ldr	r0, [pc, #504]	; (800cdc0 <_printf_float+0x2b8>)
 800cbc8:	4b7e      	ldr	r3, [pc, #504]	; (800cdc4 <_printf_float+0x2bc>)
 800cbca:	e7d5      	b.n	800cb78 <_printf_float+0x70>
 800cbcc:	6863      	ldr	r3, [r4, #4]
 800cbce:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800cbd2:	9104      	str	r1, [sp, #16]
 800cbd4:	1c59      	adds	r1, r3, #1
 800cbd6:	d13c      	bne.n	800cc52 <_printf_float+0x14a>
 800cbd8:	2306      	movs	r3, #6
 800cbda:	6063      	str	r3, [r4, #4]
 800cbdc:	2300      	movs	r3, #0
 800cbde:	9303      	str	r3, [sp, #12]
 800cbe0:	ab08      	add	r3, sp, #32
 800cbe2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800cbe6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cbea:	ab07      	add	r3, sp, #28
 800cbec:	6861      	ldr	r1, [r4, #4]
 800cbee:	9300      	str	r3, [sp, #0]
 800cbf0:	6022      	str	r2, [r4, #0]
 800cbf2:	f10d 031b 	add.w	r3, sp, #27
 800cbf6:	4628      	mov	r0, r5
 800cbf8:	f7ff fef6 	bl	800c9e8 <__cvt>
 800cbfc:	9b04      	ldr	r3, [sp, #16]
 800cbfe:	9907      	ldr	r1, [sp, #28]
 800cc00:	2b47      	cmp	r3, #71	; 0x47
 800cc02:	4680      	mov	r8, r0
 800cc04:	d108      	bne.n	800cc18 <_printf_float+0x110>
 800cc06:	1cc8      	adds	r0, r1, #3
 800cc08:	db02      	blt.n	800cc10 <_printf_float+0x108>
 800cc0a:	6863      	ldr	r3, [r4, #4]
 800cc0c:	4299      	cmp	r1, r3
 800cc0e:	dd41      	ble.n	800cc94 <_printf_float+0x18c>
 800cc10:	f1a9 0902 	sub.w	r9, r9, #2
 800cc14:	fa5f f989 	uxtb.w	r9, r9
 800cc18:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cc1c:	d820      	bhi.n	800cc60 <_printf_float+0x158>
 800cc1e:	3901      	subs	r1, #1
 800cc20:	464a      	mov	r2, r9
 800cc22:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cc26:	9107      	str	r1, [sp, #28]
 800cc28:	f7ff ff30 	bl	800ca8c <__exponent>
 800cc2c:	9a08      	ldr	r2, [sp, #32]
 800cc2e:	9004      	str	r0, [sp, #16]
 800cc30:	1813      	adds	r3, r2, r0
 800cc32:	2a01      	cmp	r2, #1
 800cc34:	6123      	str	r3, [r4, #16]
 800cc36:	dc02      	bgt.n	800cc3e <_printf_float+0x136>
 800cc38:	6822      	ldr	r2, [r4, #0]
 800cc3a:	07d2      	lsls	r2, r2, #31
 800cc3c:	d501      	bpl.n	800cc42 <_printf_float+0x13a>
 800cc3e:	3301      	adds	r3, #1
 800cc40:	6123      	str	r3, [r4, #16]
 800cc42:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d0a2      	beq.n	800cb90 <_printf_float+0x88>
 800cc4a:	232d      	movs	r3, #45	; 0x2d
 800cc4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc50:	e79e      	b.n	800cb90 <_printf_float+0x88>
 800cc52:	9904      	ldr	r1, [sp, #16]
 800cc54:	2947      	cmp	r1, #71	; 0x47
 800cc56:	d1c1      	bne.n	800cbdc <_printf_float+0xd4>
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d1bf      	bne.n	800cbdc <_printf_float+0xd4>
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	e7bc      	b.n	800cbda <_printf_float+0xd2>
 800cc60:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cc64:	d118      	bne.n	800cc98 <_printf_float+0x190>
 800cc66:	2900      	cmp	r1, #0
 800cc68:	6863      	ldr	r3, [r4, #4]
 800cc6a:	dd0b      	ble.n	800cc84 <_printf_float+0x17c>
 800cc6c:	6121      	str	r1, [r4, #16]
 800cc6e:	b913      	cbnz	r3, 800cc76 <_printf_float+0x16e>
 800cc70:	6822      	ldr	r2, [r4, #0]
 800cc72:	07d0      	lsls	r0, r2, #31
 800cc74:	d502      	bpl.n	800cc7c <_printf_float+0x174>
 800cc76:	3301      	adds	r3, #1
 800cc78:	440b      	add	r3, r1
 800cc7a:	6123      	str	r3, [r4, #16]
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	65a1      	str	r1, [r4, #88]	; 0x58
 800cc80:	9304      	str	r3, [sp, #16]
 800cc82:	e7de      	b.n	800cc42 <_printf_float+0x13a>
 800cc84:	b913      	cbnz	r3, 800cc8c <_printf_float+0x184>
 800cc86:	6822      	ldr	r2, [r4, #0]
 800cc88:	07d2      	lsls	r2, r2, #31
 800cc8a:	d501      	bpl.n	800cc90 <_printf_float+0x188>
 800cc8c:	3302      	adds	r3, #2
 800cc8e:	e7f4      	b.n	800cc7a <_printf_float+0x172>
 800cc90:	2301      	movs	r3, #1
 800cc92:	e7f2      	b.n	800cc7a <_printf_float+0x172>
 800cc94:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cc98:	9b08      	ldr	r3, [sp, #32]
 800cc9a:	4299      	cmp	r1, r3
 800cc9c:	db05      	blt.n	800ccaa <_printf_float+0x1a2>
 800cc9e:	6823      	ldr	r3, [r4, #0]
 800cca0:	6121      	str	r1, [r4, #16]
 800cca2:	07d8      	lsls	r0, r3, #31
 800cca4:	d5ea      	bpl.n	800cc7c <_printf_float+0x174>
 800cca6:	1c4b      	adds	r3, r1, #1
 800cca8:	e7e7      	b.n	800cc7a <_printf_float+0x172>
 800ccaa:	2900      	cmp	r1, #0
 800ccac:	bfd4      	ite	le
 800ccae:	f1c1 0202 	rsble	r2, r1, #2
 800ccb2:	2201      	movgt	r2, #1
 800ccb4:	4413      	add	r3, r2
 800ccb6:	e7e0      	b.n	800cc7a <_printf_float+0x172>
 800ccb8:	6823      	ldr	r3, [r4, #0]
 800ccba:	055a      	lsls	r2, r3, #21
 800ccbc:	d407      	bmi.n	800ccce <_printf_float+0x1c6>
 800ccbe:	6923      	ldr	r3, [r4, #16]
 800ccc0:	4642      	mov	r2, r8
 800ccc2:	4631      	mov	r1, r6
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	47b8      	blx	r7
 800ccc8:	3001      	adds	r0, #1
 800ccca:	d12a      	bne.n	800cd22 <_printf_float+0x21a>
 800cccc:	e76a      	b.n	800cba4 <_printf_float+0x9c>
 800ccce:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ccd2:	f240 80e2 	bls.w	800ce9a <_printf_float+0x392>
 800ccd6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ccda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ccde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cce2:	d133      	bne.n	800cd4c <_printf_float+0x244>
 800cce4:	4a38      	ldr	r2, [pc, #224]	; (800cdc8 <_printf_float+0x2c0>)
 800cce6:	2301      	movs	r3, #1
 800cce8:	4631      	mov	r1, r6
 800ccea:	4628      	mov	r0, r5
 800ccec:	47b8      	blx	r7
 800ccee:	3001      	adds	r0, #1
 800ccf0:	f43f af58 	beq.w	800cba4 <_printf_float+0x9c>
 800ccf4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	db02      	blt.n	800cd02 <_printf_float+0x1fa>
 800ccfc:	6823      	ldr	r3, [r4, #0]
 800ccfe:	07d8      	lsls	r0, r3, #31
 800cd00:	d50f      	bpl.n	800cd22 <_printf_float+0x21a>
 800cd02:	4653      	mov	r3, sl
 800cd04:	465a      	mov	r2, fp
 800cd06:	4631      	mov	r1, r6
 800cd08:	4628      	mov	r0, r5
 800cd0a:	47b8      	blx	r7
 800cd0c:	3001      	adds	r0, #1
 800cd0e:	f43f af49 	beq.w	800cba4 <_printf_float+0x9c>
 800cd12:	f04f 0800 	mov.w	r8, #0
 800cd16:	f104 091a 	add.w	r9, r4, #26
 800cd1a:	9b08      	ldr	r3, [sp, #32]
 800cd1c:	3b01      	subs	r3, #1
 800cd1e:	4543      	cmp	r3, r8
 800cd20:	dc09      	bgt.n	800cd36 <_printf_float+0x22e>
 800cd22:	6823      	ldr	r3, [r4, #0]
 800cd24:	079b      	lsls	r3, r3, #30
 800cd26:	f100 8108 	bmi.w	800cf3a <_printf_float+0x432>
 800cd2a:	68e0      	ldr	r0, [r4, #12]
 800cd2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd2e:	4298      	cmp	r0, r3
 800cd30:	bfb8      	it	lt
 800cd32:	4618      	movlt	r0, r3
 800cd34:	e738      	b.n	800cba8 <_printf_float+0xa0>
 800cd36:	2301      	movs	r3, #1
 800cd38:	464a      	mov	r2, r9
 800cd3a:	4631      	mov	r1, r6
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	47b8      	blx	r7
 800cd40:	3001      	adds	r0, #1
 800cd42:	f43f af2f 	beq.w	800cba4 <_printf_float+0x9c>
 800cd46:	f108 0801 	add.w	r8, r8, #1
 800cd4a:	e7e6      	b.n	800cd1a <_printf_float+0x212>
 800cd4c:	9b07      	ldr	r3, [sp, #28]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	dc3c      	bgt.n	800cdcc <_printf_float+0x2c4>
 800cd52:	4a1d      	ldr	r2, [pc, #116]	; (800cdc8 <_printf_float+0x2c0>)
 800cd54:	2301      	movs	r3, #1
 800cd56:	4631      	mov	r1, r6
 800cd58:	4628      	mov	r0, r5
 800cd5a:	47b8      	blx	r7
 800cd5c:	3001      	adds	r0, #1
 800cd5e:	f43f af21 	beq.w	800cba4 <_printf_float+0x9c>
 800cd62:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cd66:	4313      	orrs	r3, r2
 800cd68:	d102      	bne.n	800cd70 <_printf_float+0x268>
 800cd6a:	6823      	ldr	r3, [r4, #0]
 800cd6c:	07d9      	lsls	r1, r3, #31
 800cd6e:	d5d8      	bpl.n	800cd22 <_printf_float+0x21a>
 800cd70:	4653      	mov	r3, sl
 800cd72:	465a      	mov	r2, fp
 800cd74:	4631      	mov	r1, r6
 800cd76:	4628      	mov	r0, r5
 800cd78:	47b8      	blx	r7
 800cd7a:	3001      	adds	r0, #1
 800cd7c:	f43f af12 	beq.w	800cba4 <_printf_float+0x9c>
 800cd80:	f04f 0900 	mov.w	r9, #0
 800cd84:	f104 0a1a 	add.w	sl, r4, #26
 800cd88:	9b07      	ldr	r3, [sp, #28]
 800cd8a:	425b      	negs	r3, r3
 800cd8c:	454b      	cmp	r3, r9
 800cd8e:	dc01      	bgt.n	800cd94 <_printf_float+0x28c>
 800cd90:	9b08      	ldr	r3, [sp, #32]
 800cd92:	e795      	b.n	800ccc0 <_printf_float+0x1b8>
 800cd94:	2301      	movs	r3, #1
 800cd96:	4652      	mov	r2, sl
 800cd98:	4631      	mov	r1, r6
 800cd9a:	4628      	mov	r0, r5
 800cd9c:	47b8      	blx	r7
 800cd9e:	3001      	adds	r0, #1
 800cda0:	f43f af00 	beq.w	800cba4 <_printf_float+0x9c>
 800cda4:	f109 0901 	add.w	r9, r9, #1
 800cda8:	e7ee      	b.n	800cd88 <_printf_float+0x280>
 800cdaa:	bf00      	nop
 800cdac:	f3af 8000 	nop.w
 800cdb0:	ffffffff 	.word	0xffffffff
 800cdb4:	7fefffff 	.word	0x7fefffff
 800cdb8:	0800f43c 	.word	0x0800f43c
 800cdbc:	0800f440 	.word	0x0800f440
 800cdc0:	0800f448 	.word	0x0800f448
 800cdc4:	0800f444 	.word	0x0800f444
 800cdc8:	0800f44c 	.word	0x0800f44c
 800cdcc:	9a08      	ldr	r2, [sp, #32]
 800cdce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	bfa8      	it	ge
 800cdd4:	461a      	movge	r2, r3
 800cdd6:	2a00      	cmp	r2, #0
 800cdd8:	4691      	mov	r9, r2
 800cdda:	dc38      	bgt.n	800ce4e <_printf_float+0x346>
 800cddc:	2300      	movs	r3, #0
 800cdde:	9305      	str	r3, [sp, #20]
 800cde0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cde4:	f104 021a 	add.w	r2, r4, #26
 800cde8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cdea:	9905      	ldr	r1, [sp, #20]
 800cdec:	9304      	str	r3, [sp, #16]
 800cdee:	eba3 0309 	sub.w	r3, r3, r9
 800cdf2:	428b      	cmp	r3, r1
 800cdf4:	dc33      	bgt.n	800ce5e <_printf_float+0x356>
 800cdf6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	db3c      	blt.n	800ce78 <_printf_float+0x370>
 800cdfe:	6823      	ldr	r3, [r4, #0]
 800ce00:	07da      	lsls	r2, r3, #31
 800ce02:	d439      	bmi.n	800ce78 <_printf_float+0x370>
 800ce04:	9a08      	ldr	r2, [sp, #32]
 800ce06:	9b04      	ldr	r3, [sp, #16]
 800ce08:	9907      	ldr	r1, [sp, #28]
 800ce0a:	1ad3      	subs	r3, r2, r3
 800ce0c:	eba2 0901 	sub.w	r9, r2, r1
 800ce10:	4599      	cmp	r9, r3
 800ce12:	bfa8      	it	ge
 800ce14:	4699      	movge	r9, r3
 800ce16:	f1b9 0f00 	cmp.w	r9, #0
 800ce1a:	dc35      	bgt.n	800ce88 <_printf_float+0x380>
 800ce1c:	f04f 0800 	mov.w	r8, #0
 800ce20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce24:	f104 0a1a 	add.w	sl, r4, #26
 800ce28:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ce2c:	1a9b      	subs	r3, r3, r2
 800ce2e:	eba3 0309 	sub.w	r3, r3, r9
 800ce32:	4543      	cmp	r3, r8
 800ce34:	f77f af75 	ble.w	800cd22 <_printf_float+0x21a>
 800ce38:	2301      	movs	r3, #1
 800ce3a:	4652      	mov	r2, sl
 800ce3c:	4631      	mov	r1, r6
 800ce3e:	4628      	mov	r0, r5
 800ce40:	47b8      	blx	r7
 800ce42:	3001      	adds	r0, #1
 800ce44:	f43f aeae 	beq.w	800cba4 <_printf_float+0x9c>
 800ce48:	f108 0801 	add.w	r8, r8, #1
 800ce4c:	e7ec      	b.n	800ce28 <_printf_float+0x320>
 800ce4e:	4613      	mov	r3, r2
 800ce50:	4631      	mov	r1, r6
 800ce52:	4642      	mov	r2, r8
 800ce54:	4628      	mov	r0, r5
 800ce56:	47b8      	blx	r7
 800ce58:	3001      	adds	r0, #1
 800ce5a:	d1bf      	bne.n	800cddc <_printf_float+0x2d4>
 800ce5c:	e6a2      	b.n	800cba4 <_printf_float+0x9c>
 800ce5e:	2301      	movs	r3, #1
 800ce60:	4631      	mov	r1, r6
 800ce62:	4628      	mov	r0, r5
 800ce64:	9204      	str	r2, [sp, #16]
 800ce66:	47b8      	blx	r7
 800ce68:	3001      	adds	r0, #1
 800ce6a:	f43f ae9b 	beq.w	800cba4 <_printf_float+0x9c>
 800ce6e:	9b05      	ldr	r3, [sp, #20]
 800ce70:	9a04      	ldr	r2, [sp, #16]
 800ce72:	3301      	adds	r3, #1
 800ce74:	9305      	str	r3, [sp, #20]
 800ce76:	e7b7      	b.n	800cde8 <_printf_float+0x2e0>
 800ce78:	4653      	mov	r3, sl
 800ce7a:	465a      	mov	r2, fp
 800ce7c:	4631      	mov	r1, r6
 800ce7e:	4628      	mov	r0, r5
 800ce80:	47b8      	blx	r7
 800ce82:	3001      	adds	r0, #1
 800ce84:	d1be      	bne.n	800ce04 <_printf_float+0x2fc>
 800ce86:	e68d      	b.n	800cba4 <_printf_float+0x9c>
 800ce88:	9a04      	ldr	r2, [sp, #16]
 800ce8a:	464b      	mov	r3, r9
 800ce8c:	4442      	add	r2, r8
 800ce8e:	4631      	mov	r1, r6
 800ce90:	4628      	mov	r0, r5
 800ce92:	47b8      	blx	r7
 800ce94:	3001      	adds	r0, #1
 800ce96:	d1c1      	bne.n	800ce1c <_printf_float+0x314>
 800ce98:	e684      	b.n	800cba4 <_printf_float+0x9c>
 800ce9a:	9a08      	ldr	r2, [sp, #32]
 800ce9c:	2a01      	cmp	r2, #1
 800ce9e:	dc01      	bgt.n	800cea4 <_printf_float+0x39c>
 800cea0:	07db      	lsls	r3, r3, #31
 800cea2:	d537      	bpl.n	800cf14 <_printf_float+0x40c>
 800cea4:	2301      	movs	r3, #1
 800cea6:	4642      	mov	r2, r8
 800cea8:	4631      	mov	r1, r6
 800ceaa:	4628      	mov	r0, r5
 800ceac:	47b8      	blx	r7
 800ceae:	3001      	adds	r0, #1
 800ceb0:	f43f ae78 	beq.w	800cba4 <_printf_float+0x9c>
 800ceb4:	4653      	mov	r3, sl
 800ceb6:	465a      	mov	r2, fp
 800ceb8:	4631      	mov	r1, r6
 800ceba:	4628      	mov	r0, r5
 800cebc:	47b8      	blx	r7
 800cebe:	3001      	adds	r0, #1
 800cec0:	f43f ae70 	beq.w	800cba4 <_printf_float+0x9c>
 800cec4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cec8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ced0:	d01b      	beq.n	800cf0a <_printf_float+0x402>
 800ced2:	9b08      	ldr	r3, [sp, #32]
 800ced4:	f108 0201 	add.w	r2, r8, #1
 800ced8:	3b01      	subs	r3, #1
 800ceda:	4631      	mov	r1, r6
 800cedc:	4628      	mov	r0, r5
 800cede:	47b8      	blx	r7
 800cee0:	3001      	adds	r0, #1
 800cee2:	d10e      	bne.n	800cf02 <_printf_float+0x3fa>
 800cee4:	e65e      	b.n	800cba4 <_printf_float+0x9c>
 800cee6:	2301      	movs	r3, #1
 800cee8:	464a      	mov	r2, r9
 800ceea:	4631      	mov	r1, r6
 800ceec:	4628      	mov	r0, r5
 800ceee:	47b8      	blx	r7
 800cef0:	3001      	adds	r0, #1
 800cef2:	f43f ae57 	beq.w	800cba4 <_printf_float+0x9c>
 800cef6:	f108 0801 	add.w	r8, r8, #1
 800cefa:	9b08      	ldr	r3, [sp, #32]
 800cefc:	3b01      	subs	r3, #1
 800cefe:	4543      	cmp	r3, r8
 800cf00:	dcf1      	bgt.n	800cee6 <_printf_float+0x3de>
 800cf02:	9b04      	ldr	r3, [sp, #16]
 800cf04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cf08:	e6db      	b.n	800ccc2 <_printf_float+0x1ba>
 800cf0a:	f04f 0800 	mov.w	r8, #0
 800cf0e:	f104 091a 	add.w	r9, r4, #26
 800cf12:	e7f2      	b.n	800cefa <_printf_float+0x3f2>
 800cf14:	2301      	movs	r3, #1
 800cf16:	4642      	mov	r2, r8
 800cf18:	e7df      	b.n	800ceda <_printf_float+0x3d2>
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	464a      	mov	r2, r9
 800cf1e:	4631      	mov	r1, r6
 800cf20:	4628      	mov	r0, r5
 800cf22:	47b8      	blx	r7
 800cf24:	3001      	adds	r0, #1
 800cf26:	f43f ae3d 	beq.w	800cba4 <_printf_float+0x9c>
 800cf2a:	f108 0801 	add.w	r8, r8, #1
 800cf2e:	68e3      	ldr	r3, [r4, #12]
 800cf30:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf32:	1a5b      	subs	r3, r3, r1
 800cf34:	4543      	cmp	r3, r8
 800cf36:	dcf0      	bgt.n	800cf1a <_printf_float+0x412>
 800cf38:	e6f7      	b.n	800cd2a <_printf_float+0x222>
 800cf3a:	f04f 0800 	mov.w	r8, #0
 800cf3e:	f104 0919 	add.w	r9, r4, #25
 800cf42:	e7f4      	b.n	800cf2e <_printf_float+0x426>

0800cf44 <_printf_common>:
 800cf44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf48:	4616      	mov	r6, r2
 800cf4a:	4699      	mov	r9, r3
 800cf4c:	688a      	ldr	r2, [r1, #8]
 800cf4e:	690b      	ldr	r3, [r1, #16]
 800cf50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf54:	4293      	cmp	r3, r2
 800cf56:	bfb8      	it	lt
 800cf58:	4613      	movlt	r3, r2
 800cf5a:	6033      	str	r3, [r6, #0]
 800cf5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf60:	4607      	mov	r7, r0
 800cf62:	460c      	mov	r4, r1
 800cf64:	b10a      	cbz	r2, 800cf6a <_printf_common+0x26>
 800cf66:	3301      	adds	r3, #1
 800cf68:	6033      	str	r3, [r6, #0]
 800cf6a:	6823      	ldr	r3, [r4, #0]
 800cf6c:	0699      	lsls	r1, r3, #26
 800cf6e:	bf42      	ittt	mi
 800cf70:	6833      	ldrmi	r3, [r6, #0]
 800cf72:	3302      	addmi	r3, #2
 800cf74:	6033      	strmi	r3, [r6, #0]
 800cf76:	6825      	ldr	r5, [r4, #0]
 800cf78:	f015 0506 	ands.w	r5, r5, #6
 800cf7c:	d106      	bne.n	800cf8c <_printf_common+0x48>
 800cf7e:	f104 0a19 	add.w	sl, r4, #25
 800cf82:	68e3      	ldr	r3, [r4, #12]
 800cf84:	6832      	ldr	r2, [r6, #0]
 800cf86:	1a9b      	subs	r3, r3, r2
 800cf88:	42ab      	cmp	r3, r5
 800cf8a:	dc26      	bgt.n	800cfda <_printf_common+0x96>
 800cf8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cf90:	1e13      	subs	r3, r2, #0
 800cf92:	6822      	ldr	r2, [r4, #0]
 800cf94:	bf18      	it	ne
 800cf96:	2301      	movne	r3, #1
 800cf98:	0692      	lsls	r2, r2, #26
 800cf9a:	d42b      	bmi.n	800cff4 <_printf_common+0xb0>
 800cf9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cfa0:	4649      	mov	r1, r9
 800cfa2:	4638      	mov	r0, r7
 800cfa4:	47c0      	blx	r8
 800cfa6:	3001      	adds	r0, #1
 800cfa8:	d01e      	beq.n	800cfe8 <_printf_common+0xa4>
 800cfaa:	6823      	ldr	r3, [r4, #0]
 800cfac:	68e5      	ldr	r5, [r4, #12]
 800cfae:	6832      	ldr	r2, [r6, #0]
 800cfb0:	f003 0306 	and.w	r3, r3, #6
 800cfb4:	2b04      	cmp	r3, #4
 800cfb6:	bf08      	it	eq
 800cfb8:	1aad      	subeq	r5, r5, r2
 800cfba:	68a3      	ldr	r3, [r4, #8]
 800cfbc:	6922      	ldr	r2, [r4, #16]
 800cfbe:	bf0c      	ite	eq
 800cfc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cfc4:	2500      	movne	r5, #0
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	bfc4      	itt	gt
 800cfca:	1a9b      	subgt	r3, r3, r2
 800cfcc:	18ed      	addgt	r5, r5, r3
 800cfce:	2600      	movs	r6, #0
 800cfd0:	341a      	adds	r4, #26
 800cfd2:	42b5      	cmp	r5, r6
 800cfd4:	d11a      	bne.n	800d00c <_printf_common+0xc8>
 800cfd6:	2000      	movs	r0, #0
 800cfd8:	e008      	b.n	800cfec <_printf_common+0xa8>
 800cfda:	2301      	movs	r3, #1
 800cfdc:	4652      	mov	r2, sl
 800cfde:	4649      	mov	r1, r9
 800cfe0:	4638      	mov	r0, r7
 800cfe2:	47c0      	blx	r8
 800cfe4:	3001      	adds	r0, #1
 800cfe6:	d103      	bne.n	800cff0 <_printf_common+0xac>
 800cfe8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cff0:	3501      	adds	r5, #1
 800cff2:	e7c6      	b.n	800cf82 <_printf_common+0x3e>
 800cff4:	18e1      	adds	r1, r4, r3
 800cff6:	1c5a      	adds	r2, r3, #1
 800cff8:	2030      	movs	r0, #48	; 0x30
 800cffa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cffe:	4422      	add	r2, r4
 800d000:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d004:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d008:	3302      	adds	r3, #2
 800d00a:	e7c7      	b.n	800cf9c <_printf_common+0x58>
 800d00c:	2301      	movs	r3, #1
 800d00e:	4622      	mov	r2, r4
 800d010:	4649      	mov	r1, r9
 800d012:	4638      	mov	r0, r7
 800d014:	47c0      	blx	r8
 800d016:	3001      	adds	r0, #1
 800d018:	d0e6      	beq.n	800cfe8 <_printf_common+0xa4>
 800d01a:	3601      	adds	r6, #1
 800d01c:	e7d9      	b.n	800cfd2 <_printf_common+0x8e>
	...

0800d020 <_printf_i>:
 800d020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d024:	460c      	mov	r4, r1
 800d026:	4691      	mov	r9, r2
 800d028:	7e27      	ldrb	r7, [r4, #24]
 800d02a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d02c:	2f78      	cmp	r7, #120	; 0x78
 800d02e:	4680      	mov	r8, r0
 800d030:	469a      	mov	sl, r3
 800d032:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d036:	d807      	bhi.n	800d048 <_printf_i+0x28>
 800d038:	2f62      	cmp	r7, #98	; 0x62
 800d03a:	d80a      	bhi.n	800d052 <_printf_i+0x32>
 800d03c:	2f00      	cmp	r7, #0
 800d03e:	f000 80d8 	beq.w	800d1f2 <_printf_i+0x1d2>
 800d042:	2f58      	cmp	r7, #88	; 0x58
 800d044:	f000 80a3 	beq.w	800d18e <_printf_i+0x16e>
 800d048:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d04c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d050:	e03a      	b.n	800d0c8 <_printf_i+0xa8>
 800d052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d056:	2b15      	cmp	r3, #21
 800d058:	d8f6      	bhi.n	800d048 <_printf_i+0x28>
 800d05a:	a001      	add	r0, pc, #4	; (adr r0, 800d060 <_printf_i+0x40>)
 800d05c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d060:	0800d0b9 	.word	0x0800d0b9
 800d064:	0800d0cd 	.word	0x0800d0cd
 800d068:	0800d049 	.word	0x0800d049
 800d06c:	0800d049 	.word	0x0800d049
 800d070:	0800d049 	.word	0x0800d049
 800d074:	0800d049 	.word	0x0800d049
 800d078:	0800d0cd 	.word	0x0800d0cd
 800d07c:	0800d049 	.word	0x0800d049
 800d080:	0800d049 	.word	0x0800d049
 800d084:	0800d049 	.word	0x0800d049
 800d088:	0800d049 	.word	0x0800d049
 800d08c:	0800d1d9 	.word	0x0800d1d9
 800d090:	0800d0fd 	.word	0x0800d0fd
 800d094:	0800d1bb 	.word	0x0800d1bb
 800d098:	0800d049 	.word	0x0800d049
 800d09c:	0800d049 	.word	0x0800d049
 800d0a0:	0800d1fb 	.word	0x0800d1fb
 800d0a4:	0800d049 	.word	0x0800d049
 800d0a8:	0800d0fd 	.word	0x0800d0fd
 800d0ac:	0800d049 	.word	0x0800d049
 800d0b0:	0800d049 	.word	0x0800d049
 800d0b4:	0800d1c3 	.word	0x0800d1c3
 800d0b8:	680b      	ldr	r3, [r1, #0]
 800d0ba:	1d1a      	adds	r2, r3, #4
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	600a      	str	r2, [r1, #0]
 800d0c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d0c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	e0a3      	b.n	800d214 <_printf_i+0x1f4>
 800d0cc:	6825      	ldr	r5, [r4, #0]
 800d0ce:	6808      	ldr	r0, [r1, #0]
 800d0d0:	062e      	lsls	r6, r5, #24
 800d0d2:	f100 0304 	add.w	r3, r0, #4
 800d0d6:	d50a      	bpl.n	800d0ee <_printf_i+0xce>
 800d0d8:	6805      	ldr	r5, [r0, #0]
 800d0da:	600b      	str	r3, [r1, #0]
 800d0dc:	2d00      	cmp	r5, #0
 800d0de:	da03      	bge.n	800d0e8 <_printf_i+0xc8>
 800d0e0:	232d      	movs	r3, #45	; 0x2d
 800d0e2:	426d      	negs	r5, r5
 800d0e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0e8:	485e      	ldr	r0, [pc, #376]	; (800d264 <_printf_i+0x244>)
 800d0ea:	230a      	movs	r3, #10
 800d0ec:	e019      	b.n	800d122 <_printf_i+0x102>
 800d0ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d0f2:	6805      	ldr	r5, [r0, #0]
 800d0f4:	600b      	str	r3, [r1, #0]
 800d0f6:	bf18      	it	ne
 800d0f8:	b22d      	sxthne	r5, r5
 800d0fa:	e7ef      	b.n	800d0dc <_printf_i+0xbc>
 800d0fc:	680b      	ldr	r3, [r1, #0]
 800d0fe:	6825      	ldr	r5, [r4, #0]
 800d100:	1d18      	adds	r0, r3, #4
 800d102:	6008      	str	r0, [r1, #0]
 800d104:	0628      	lsls	r0, r5, #24
 800d106:	d501      	bpl.n	800d10c <_printf_i+0xec>
 800d108:	681d      	ldr	r5, [r3, #0]
 800d10a:	e002      	b.n	800d112 <_printf_i+0xf2>
 800d10c:	0669      	lsls	r1, r5, #25
 800d10e:	d5fb      	bpl.n	800d108 <_printf_i+0xe8>
 800d110:	881d      	ldrh	r5, [r3, #0]
 800d112:	4854      	ldr	r0, [pc, #336]	; (800d264 <_printf_i+0x244>)
 800d114:	2f6f      	cmp	r7, #111	; 0x6f
 800d116:	bf0c      	ite	eq
 800d118:	2308      	moveq	r3, #8
 800d11a:	230a      	movne	r3, #10
 800d11c:	2100      	movs	r1, #0
 800d11e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d122:	6866      	ldr	r6, [r4, #4]
 800d124:	60a6      	str	r6, [r4, #8]
 800d126:	2e00      	cmp	r6, #0
 800d128:	bfa2      	ittt	ge
 800d12a:	6821      	ldrge	r1, [r4, #0]
 800d12c:	f021 0104 	bicge.w	r1, r1, #4
 800d130:	6021      	strge	r1, [r4, #0]
 800d132:	b90d      	cbnz	r5, 800d138 <_printf_i+0x118>
 800d134:	2e00      	cmp	r6, #0
 800d136:	d04d      	beq.n	800d1d4 <_printf_i+0x1b4>
 800d138:	4616      	mov	r6, r2
 800d13a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d13e:	fb03 5711 	mls	r7, r3, r1, r5
 800d142:	5dc7      	ldrb	r7, [r0, r7]
 800d144:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d148:	462f      	mov	r7, r5
 800d14a:	42bb      	cmp	r3, r7
 800d14c:	460d      	mov	r5, r1
 800d14e:	d9f4      	bls.n	800d13a <_printf_i+0x11a>
 800d150:	2b08      	cmp	r3, #8
 800d152:	d10b      	bne.n	800d16c <_printf_i+0x14c>
 800d154:	6823      	ldr	r3, [r4, #0]
 800d156:	07df      	lsls	r7, r3, #31
 800d158:	d508      	bpl.n	800d16c <_printf_i+0x14c>
 800d15a:	6923      	ldr	r3, [r4, #16]
 800d15c:	6861      	ldr	r1, [r4, #4]
 800d15e:	4299      	cmp	r1, r3
 800d160:	bfde      	ittt	le
 800d162:	2330      	movle	r3, #48	; 0x30
 800d164:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d168:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d16c:	1b92      	subs	r2, r2, r6
 800d16e:	6122      	str	r2, [r4, #16]
 800d170:	f8cd a000 	str.w	sl, [sp]
 800d174:	464b      	mov	r3, r9
 800d176:	aa03      	add	r2, sp, #12
 800d178:	4621      	mov	r1, r4
 800d17a:	4640      	mov	r0, r8
 800d17c:	f7ff fee2 	bl	800cf44 <_printf_common>
 800d180:	3001      	adds	r0, #1
 800d182:	d14c      	bne.n	800d21e <_printf_i+0x1fe>
 800d184:	f04f 30ff 	mov.w	r0, #4294967295
 800d188:	b004      	add	sp, #16
 800d18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d18e:	4835      	ldr	r0, [pc, #212]	; (800d264 <_printf_i+0x244>)
 800d190:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d194:	6823      	ldr	r3, [r4, #0]
 800d196:	680e      	ldr	r6, [r1, #0]
 800d198:	061f      	lsls	r7, r3, #24
 800d19a:	f856 5b04 	ldr.w	r5, [r6], #4
 800d19e:	600e      	str	r6, [r1, #0]
 800d1a0:	d514      	bpl.n	800d1cc <_printf_i+0x1ac>
 800d1a2:	07d9      	lsls	r1, r3, #31
 800d1a4:	bf44      	itt	mi
 800d1a6:	f043 0320 	orrmi.w	r3, r3, #32
 800d1aa:	6023      	strmi	r3, [r4, #0]
 800d1ac:	b91d      	cbnz	r5, 800d1b6 <_printf_i+0x196>
 800d1ae:	6823      	ldr	r3, [r4, #0]
 800d1b0:	f023 0320 	bic.w	r3, r3, #32
 800d1b4:	6023      	str	r3, [r4, #0]
 800d1b6:	2310      	movs	r3, #16
 800d1b8:	e7b0      	b.n	800d11c <_printf_i+0xfc>
 800d1ba:	6823      	ldr	r3, [r4, #0]
 800d1bc:	f043 0320 	orr.w	r3, r3, #32
 800d1c0:	6023      	str	r3, [r4, #0]
 800d1c2:	2378      	movs	r3, #120	; 0x78
 800d1c4:	4828      	ldr	r0, [pc, #160]	; (800d268 <_printf_i+0x248>)
 800d1c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d1ca:	e7e3      	b.n	800d194 <_printf_i+0x174>
 800d1cc:	065e      	lsls	r6, r3, #25
 800d1ce:	bf48      	it	mi
 800d1d0:	b2ad      	uxthmi	r5, r5
 800d1d2:	e7e6      	b.n	800d1a2 <_printf_i+0x182>
 800d1d4:	4616      	mov	r6, r2
 800d1d6:	e7bb      	b.n	800d150 <_printf_i+0x130>
 800d1d8:	680b      	ldr	r3, [r1, #0]
 800d1da:	6826      	ldr	r6, [r4, #0]
 800d1dc:	6960      	ldr	r0, [r4, #20]
 800d1de:	1d1d      	adds	r5, r3, #4
 800d1e0:	600d      	str	r5, [r1, #0]
 800d1e2:	0635      	lsls	r5, r6, #24
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	d501      	bpl.n	800d1ec <_printf_i+0x1cc>
 800d1e8:	6018      	str	r0, [r3, #0]
 800d1ea:	e002      	b.n	800d1f2 <_printf_i+0x1d2>
 800d1ec:	0671      	lsls	r1, r6, #25
 800d1ee:	d5fb      	bpl.n	800d1e8 <_printf_i+0x1c8>
 800d1f0:	8018      	strh	r0, [r3, #0]
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	6123      	str	r3, [r4, #16]
 800d1f6:	4616      	mov	r6, r2
 800d1f8:	e7ba      	b.n	800d170 <_printf_i+0x150>
 800d1fa:	680b      	ldr	r3, [r1, #0]
 800d1fc:	1d1a      	adds	r2, r3, #4
 800d1fe:	600a      	str	r2, [r1, #0]
 800d200:	681e      	ldr	r6, [r3, #0]
 800d202:	6862      	ldr	r2, [r4, #4]
 800d204:	2100      	movs	r1, #0
 800d206:	4630      	mov	r0, r6
 800d208:	f7f3 f872 	bl	80002f0 <memchr>
 800d20c:	b108      	cbz	r0, 800d212 <_printf_i+0x1f2>
 800d20e:	1b80      	subs	r0, r0, r6
 800d210:	6060      	str	r0, [r4, #4]
 800d212:	6863      	ldr	r3, [r4, #4]
 800d214:	6123      	str	r3, [r4, #16]
 800d216:	2300      	movs	r3, #0
 800d218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d21c:	e7a8      	b.n	800d170 <_printf_i+0x150>
 800d21e:	6923      	ldr	r3, [r4, #16]
 800d220:	4632      	mov	r2, r6
 800d222:	4649      	mov	r1, r9
 800d224:	4640      	mov	r0, r8
 800d226:	47d0      	blx	sl
 800d228:	3001      	adds	r0, #1
 800d22a:	d0ab      	beq.n	800d184 <_printf_i+0x164>
 800d22c:	6823      	ldr	r3, [r4, #0]
 800d22e:	079b      	lsls	r3, r3, #30
 800d230:	d413      	bmi.n	800d25a <_printf_i+0x23a>
 800d232:	68e0      	ldr	r0, [r4, #12]
 800d234:	9b03      	ldr	r3, [sp, #12]
 800d236:	4298      	cmp	r0, r3
 800d238:	bfb8      	it	lt
 800d23a:	4618      	movlt	r0, r3
 800d23c:	e7a4      	b.n	800d188 <_printf_i+0x168>
 800d23e:	2301      	movs	r3, #1
 800d240:	4632      	mov	r2, r6
 800d242:	4649      	mov	r1, r9
 800d244:	4640      	mov	r0, r8
 800d246:	47d0      	blx	sl
 800d248:	3001      	adds	r0, #1
 800d24a:	d09b      	beq.n	800d184 <_printf_i+0x164>
 800d24c:	3501      	adds	r5, #1
 800d24e:	68e3      	ldr	r3, [r4, #12]
 800d250:	9903      	ldr	r1, [sp, #12]
 800d252:	1a5b      	subs	r3, r3, r1
 800d254:	42ab      	cmp	r3, r5
 800d256:	dcf2      	bgt.n	800d23e <_printf_i+0x21e>
 800d258:	e7eb      	b.n	800d232 <_printf_i+0x212>
 800d25a:	2500      	movs	r5, #0
 800d25c:	f104 0619 	add.w	r6, r4, #25
 800d260:	e7f5      	b.n	800d24e <_printf_i+0x22e>
 800d262:	bf00      	nop
 800d264:	0800f44e 	.word	0x0800f44e
 800d268:	0800f45f 	.word	0x0800f45f

0800d26c <quorem>:
 800d26c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d270:	6903      	ldr	r3, [r0, #16]
 800d272:	690c      	ldr	r4, [r1, #16]
 800d274:	42a3      	cmp	r3, r4
 800d276:	4607      	mov	r7, r0
 800d278:	f2c0 8081 	blt.w	800d37e <quorem+0x112>
 800d27c:	3c01      	subs	r4, #1
 800d27e:	f101 0814 	add.w	r8, r1, #20
 800d282:	f100 0514 	add.w	r5, r0, #20
 800d286:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d28a:	9301      	str	r3, [sp, #4]
 800d28c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d290:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d294:	3301      	adds	r3, #1
 800d296:	429a      	cmp	r2, r3
 800d298:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d29c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d2a0:	fbb2 f6f3 	udiv	r6, r2, r3
 800d2a4:	d331      	bcc.n	800d30a <quorem+0x9e>
 800d2a6:	f04f 0e00 	mov.w	lr, #0
 800d2aa:	4640      	mov	r0, r8
 800d2ac:	46ac      	mov	ip, r5
 800d2ae:	46f2      	mov	sl, lr
 800d2b0:	f850 2b04 	ldr.w	r2, [r0], #4
 800d2b4:	b293      	uxth	r3, r2
 800d2b6:	fb06 e303 	mla	r3, r6, r3, lr
 800d2ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d2be:	b29b      	uxth	r3, r3
 800d2c0:	ebaa 0303 	sub.w	r3, sl, r3
 800d2c4:	0c12      	lsrs	r2, r2, #16
 800d2c6:	f8dc a000 	ldr.w	sl, [ip]
 800d2ca:	fb06 e202 	mla	r2, r6, r2, lr
 800d2ce:	fa13 f38a 	uxtah	r3, r3, sl
 800d2d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d2d6:	fa1f fa82 	uxth.w	sl, r2
 800d2da:	f8dc 2000 	ldr.w	r2, [ip]
 800d2de:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d2e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d2e6:	b29b      	uxth	r3, r3
 800d2e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d2ec:	4581      	cmp	r9, r0
 800d2ee:	f84c 3b04 	str.w	r3, [ip], #4
 800d2f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d2f6:	d2db      	bcs.n	800d2b0 <quorem+0x44>
 800d2f8:	f855 300b 	ldr.w	r3, [r5, fp]
 800d2fc:	b92b      	cbnz	r3, 800d30a <quorem+0x9e>
 800d2fe:	9b01      	ldr	r3, [sp, #4]
 800d300:	3b04      	subs	r3, #4
 800d302:	429d      	cmp	r5, r3
 800d304:	461a      	mov	r2, r3
 800d306:	d32e      	bcc.n	800d366 <quorem+0xfa>
 800d308:	613c      	str	r4, [r7, #16]
 800d30a:	4638      	mov	r0, r7
 800d30c:	f001 f856 	bl	800e3bc <__mcmp>
 800d310:	2800      	cmp	r0, #0
 800d312:	db24      	blt.n	800d35e <quorem+0xf2>
 800d314:	3601      	adds	r6, #1
 800d316:	4628      	mov	r0, r5
 800d318:	f04f 0c00 	mov.w	ip, #0
 800d31c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d320:	f8d0 e000 	ldr.w	lr, [r0]
 800d324:	b293      	uxth	r3, r2
 800d326:	ebac 0303 	sub.w	r3, ip, r3
 800d32a:	0c12      	lsrs	r2, r2, #16
 800d32c:	fa13 f38e 	uxtah	r3, r3, lr
 800d330:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d334:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d338:	b29b      	uxth	r3, r3
 800d33a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d33e:	45c1      	cmp	r9, r8
 800d340:	f840 3b04 	str.w	r3, [r0], #4
 800d344:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d348:	d2e8      	bcs.n	800d31c <quorem+0xb0>
 800d34a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d34e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d352:	b922      	cbnz	r2, 800d35e <quorem+0xf2>
 800d354:	3b04      	subs	r3, #4
 800d356:	429d      	cmp	r5, r3
 800d358:	461a      	mov	r2, r3
 800d35a:	d30a      	bcc.n	800d372 <quorem+0x106>
 800d35c:	613c      	str	r4, [r7, #16]
 800d35e:	4630      	mov	r0, r6
 800d360:	b003      	add	sp, #12
 800d362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d366:	6812      	ldr	r2, [r2, #0]
 800d368:	3b04      	subs	r3, #4
 800d36a:	2a00      	cmp	r2, #0
 800d36c:	d1cc      	bne.n	800d308 <quorem+0x9c>
 800d36e:	3c01      	subs	r4, #1
 800d370:	e7c7      	b.n	800d302 <quorem+0x96>
 800d372:	6812      	ldr	r2, [r2, #0]
 800d374:	3b04      	subs	r3, #4
 800d376:	2a00      	cmp	r2, #0
 800d378:	d1f0      	bne.n	800d35c <quorem+0xf0>
 800d37a:	3c01      	subs	r4, #1
 800d37c:	e7eb      	b.n	800d356 <quorem+0xea>
 800d37e:	2000      	movs	r0, #0
 800d380:	e7ee      	b.n	800d360 <quorem+0xf4>
 800d382:	0000      	movs	r0, r0
 800d384:	0000      	movs	r0, r0
	...

0800d388 <_dtoa_r>:
 800d388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d38c:	ec59 8b10 	vmov	r8, r9, d0
 800d390:	b095      	sub	sp, #84	; 0x54
 800d392:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d394:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800d396:	9107      	str	r1, [sp, #28]
 800d398:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d39c:	4606      	mov	r6, r0
 800d39e:	9209      	str	r2, [sp, #36]	; 0x24
 800d3a0:	9310      	str	r3, [sp, #64]	; 0x40
 800d3a2:	b975      	cbnz	r5, 800d3c2 <_dtoa_r+0x3a>
 800d3a4:	2010      	movs	r0, #16
 800d3a6:	f000 fd75 	bl	800de94 <malloc>
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	6270      	str	r0, [r6, #36]	; 0x24
 800d3ae:	b920      	cbnz	r0, 800d3ba <_dtoa_r+0x32>
 800d3b0:	4bab      	ldr	r3, [pc, #684]	; (800d660 <_dtoa_r+0x2d8>)
 800d3b2:	21ea      	movs	r1, #234	; 0xea
 800d3b4:	48ab      	ldr	r0, [pc, #684]	; (800d664 <_dtoa_r+0x2dc>)
 800d3b6:	f001 f9cb 	bl	800e750 <__assert_func>
 800d3ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d3be:	6005      	str	r5, [r0, #0]
 800d3c0:	60c5      	str	r5, [r0, #12]
 800d3c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d3c4:	6819      	ldr	r1, [r3, #0]
 800d3c6:	b151      	cbz	r1, 800d3de <_dtoa_r+0x56>
 800d3c8:	685a      	ldr	r2, [r3, #4]
 800d3ca:	604a      	str	r2, [r1, #4]
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	4093      	lsls	r3, r2
 800d3d0:	608b      	str	r3, [r1, #8]
 800d3d2:	4630      	mov	r0, r6
 800d3d4:	f000 fdb4 	bl	800df40 <_Bfree>
 800d3d8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d3da:	2200      	movs	r2, #0
 800d3dc:	601a      	str	r2, [r3, #0]
 800d3de:	f1b9 0300 	subs.w	r3, r9, #0
 800d3e2:	bfbb      	ittet	lt
 800d3e4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d3e8:	9303      	strlt	r3, [sp, #12]
 800d3ea:	2300      	movge	r3, #0
 800d3ec:	2201      	movlt	r2, #1
 800d3ee:	bfac      	ite	ge
 800d3f0:	6023      	strge	r3, [r4, #0]
 800d3f2:	6022      	strlt	r2, [r4, #0]
 800d3f4:	4b9c      	ldr	r3, [pc, #624]	; (800d668 <_dtoa_r+0x2e0>)
 800d3f6:	9c03      	ldr	r4, [sp, #12]
 800d3f8:	43a3      	bics	r3, r4
 800d3fa:	d11a      	bne.n	800d432 <_dtoa_r+0xaa>
 800d3fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d3fe:	f242 730f 	movw	r3, #9999	; 0x270f
 800d402:	6013      	str	r3, [r2, #0]
 800d404:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d408:	ea53 0308 	orrs.w	r3, r3, r8
 800d40c:	f000 8512 	beq.w	800de34 <_dtoa_r+0xaac>
 800d410:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d412:	b953      	cbnz	r3, 800d42a <_dtoa_r+0xa2>
 800d414:	4b95      	ldr	r3, [pc, #596]	; (800d66c <_dtoa_r+0x2e4>)
 800d416:	e01f      	b.n	800d458 <_dtoa_r+0xd0>
 800d418:	4b95      	ldr	r3, [pc, #596]	; (800d670 <_dtoa_r+0x2e8>)
 800d41a:	9300      	str	r3, [sp, #0]
 800d41c:	3308      	adds	r3, #8
 800d41e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d420:	6013      	str	r3, [r2, #0]
 800d422:	9800      	ldr	r0, [sp, #0]
 800d424:	b015      	add	sp, #84	; 0x54
 800d426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d42a:	4b90      	ldr	r3, [pc, #576]	; (800d66c <_dtoa_r+0x2e4>)
 800d42c:	9300      	str	r3, [sp, #0]
 800d42e:	3303      	adds	r3, #3
 800d430:	e7f5      	b.n	800d41e <_dtoa_r+0x96>
 800d432:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d436:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d43a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d43e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d442:	d10b      	bne.n	800d45c <_dtoa_r+0xd4>
 800d444:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d446:	2301      	movs	r3, #1
 800d448:	6013      	str	r3, [r2, #0]
 800d44a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	f000 84ee 	beq.w	800de2e <_dtoa_r+0xaa6>
 800d452:	4888      	ldr	r0, [pc, #544]	; (800d674 <_dtoa_r+0x2ec>)
 800d454:	6018      	str	r0, [r3, #0]
 800d456:	1e43      	subs	r3, r0, #1
 800d458:	9300      	str	r3, [sp, #0]
 800d45a:	e7e2      	b.n	800d422 <_dtoa_r+0x9a>
 800d45c:	a913      	add	r1, sp, #76	; 0x4c
 800d45e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d462:	aa12      	add	r2, sp, #72	; 0x48
 800d464:	4630      	mov	r0, r6
 800d466:	f001 f84d 	bl	800e504 <__d2b>
 800d46a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800d46e:	4605      	mov	r5, r0
 800d470:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d472:	2900      	cmp	r1, #0
 800d474:	d047      	beq.n	800d506 <_dtoa_r+0x17e>
 800d476:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d478:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d47c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d480:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800d484:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d488:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d48c:	2400      	movs	r4, #0
 800d48e:	ec43 2b16 	vmov	d6, r2, r3
 800d492:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d496:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800d648 <_dtoa_r+0x2c0>
 800d49a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d49e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800d650 <_dtoa_r+0x2c8>
 800d4a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d4a6:	eeb0 7b46 	vmov.f64	d7, d6
 800d4aa:	ee06 1a90 	vmov	s13, r1
 800d4ae:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800d4b2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800d658 <_dtoa_r+0x2d0>
 800d4b6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d4ba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d4be:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4c6:	ee16 ba90 	vmov	fp, s13
 800d4ca:	9411      	str	r4, [sp, #68]	; 0x44
 800d4cc:	d508      	bpl.n	800d4e0 <_dtoa_r+0x158>
 800d4ce:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d4d2:	eeb4 6b47 	vcmp.f64	d6, d7
 800d4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4da:	bf18      	it	ne
 800d4dc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d4e0:	f1bb 0f16 	cmp.w	fp, #22
 800d4e4:	d832      	bhi.n	800d54c <_dtoa_r+0x1c4>
 800d4e6:	4b64      	ldr	r3, [pc, #400]	; (800d678 <_dtoa_r+0x2f0>)
 800d4e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d4ec:	ed93 7b00 	vldr	d7, [r3]
 800d4f0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d4f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4fc:	d501      	bpl.n	800d502 <_dtoa_r+0x17a>
 800d4fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d502:	2300      	movs	r3, #0
 800d504:	e023      	b.n	800d54e <_dtoa_r+0x1c6>
 800d506:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d508:	4401      	add	r1, r0
 800d50a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800d50e:	2b20      	cmp	r3, #32
 800d510:	bfc3      	ittte	gt
 800d512:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d516:	fa04 f303 	lslgt.w	r3, r4, r3
 800d51a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800d51e:	f1c3 0320 	rsble	r3, r3, #32
 800d522:	bfc6      	itte	gt
 800d524:	fa28 f804 	lsrgt.w	r8, r8, r4
 800d528:	ea43 0308 	orrgt.w	r3, r3, r8
 800d52c:	fa08 f303 	lslle.w	r3, r8, r3
 800d530:	ee07 3a90 	vmov	s15, r3
 800d534:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d538:	3901      	subs	r1, #1
 800d53a:	ed8d 7b00 	vstr	d7, [sp]
 800d53e:	9c01      	ldr	r4, [sp, #4]
 800d540:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d544:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800d548:	2401      	movs	r4, #1
 800d54a:	e7a0      	b.n	800d48e <_dtoa_r+0x106>
 800d54c:	2301      	movs	r3, #1
 800d54e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d550:	1a43      	subs	r3, r0, r1
 800d552:	1e5a      	subs	r2, r3, #1
 800d554:	bf45      	ittet	mi
 800d556:	f1c3 0301 	rsbmi	r3, r3, #1
 800d55a:	9305      	strmi	r3, [sp, #20]
 800d55c:	2300      	movpl	r3, #0
 800d55e:	2300      	movmi	r3, #0
 800d560:	9206      	str	r2, [sp, #24]
 800d562:	bf54      	ite	pl
 800d564:	9305      	strpl	r3, [sp, #20]
 800d566:	9306      	strmi	r3, [sp, #24]
 800d568:	f1bb 0f00 	cmp.w	fp, #0
 800d56c:	db18      	blt.n	800d5a0 <_dtoa_r+0x218>
 800d56e:	9b06      	ldr	r3, [sp, #24]
 800d570:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800d574:	445b      	add	r3, fp
 800d576:	9306      	str	r3, [sp, #24]
 800d578:	2300      	movs	r3, #0
 800d57a:	9a07      	ldr	r2, [sp, #28]
 800d57c:	2a09      	cmp	r2, #9
 800d57e:	d849      	bhi.n	800d614 <_dtoa_r+0x28c>
 800d580:	2a05      	cmp	r2, #5
 800d582:	bfc4      	itt	gt
 800d584:	3a04      	subgt	r2, #4
 800d586:	9207      	strgt	r2, [sp, #28]
 800d588:	9a07      	ldr	r2, [sp, #28]
 800d58a:	f1a2 0202 	sub.w	r2, r2, #2
 800d58e:	bfcc      	ite	gt
 800d590:	2400      	movgt	r4, #0
 800d592:	2401      	movle	r4, #1
 800d594:	2a03      	cmp	r2, #3
 800d596:	d848      	bhi.n	800d62a <_dtoa_r+0x2a2>
 800d598:	e8df f002 	tbb	[pc, r2]
 800d59c:	3a2c2e0b 	.word	0x3a2c2e0b
 800d5a0:	9b05      	ldr	r3, [sp, #20]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	eba3 030b 	sub.w	r3, r3, fp
 800d5a8:	9305      	str	r3, [sp, #20]
 800d5aa:	920e      	str	r2, [sp, #56]	; 0x38
 800d5ac:	f1cb 0300 	rsb	r3, fp, #0
 800d5b0:	e7e3      	b.n	800d57a <_dtoa_r+0x1f2>
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	9208      	str	r2, [sp, #32]
 800d5b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5b8:	2a00      	cmp	r2, #0
 800d5ba:	dc39      	bgt.n	800d630 <_dtoa_r+0x2a8>
 800d5bc:	f04f 0a01 	mov.w	sl, #1
 800d5c0:	46d1      	mov	r9, sl
 800d5c2:	4652      	mov	r2, sl
 800d5c4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d5c8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800d5ca:	2100      	movs	r1, #0
 800d5cc:	6079      	str	r1, [r7, #4]
 800d5ce:	2004      	movs	r0, #4
 800d5d0:	f100 0c14 	add.w	ip, r0, #20
 800d5d4:	4594      	cmp	ip, r2
 800d5d6:	6879      	ldr	r1, [r7, #4]
 800d5d8:	d92f      	bls.n	800d63a <_dtoa_r+0x2b2>
 800d5da:	4630      	mov	r0, r6
 800d5dc:	930c      	str	r3, [sp, #48]	; 0x30
 800d5de:	f000 fc6f 	bl	800dec0 <_Balloc>
 800d5e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5e4:	9000      	str	r0, [sp, #0]
 800d5e6:	4602      	mov	r2, r0
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	d149      	bne.n	800d680 <_dtoa_r+0x2f8>
 800d5ec:	4b23      	ldr	r3, [pc, #140]	; (800d67c <_dtoa_r+0x2f4>)
 800d5ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d5f2:	e6df      	b.n	800d3b4 <_dtoa_r+0x2c>
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	e7dd      	b.n	800d5b4 <_dtoa_r+0x22c>
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	9208      	str	r2, [sp, #32]
 800d5fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5fe:	eb0b 0a02 	add.w	sl, fp, r2
 800d602:	f10a 0901 	add.w	r9, sl, #1
 800d606:	464a      	mov	r2, r9
 800d608:	2a01      	cmp	r2, #1
 800d60a:	bfb8      	it	lt
 800d60c:	2201      	movlt	r2, #1
 800d60e:	e7db      	b.n	800d5c8 <_dtoa_r+0x240>
 800d610:	2201      	movs	r2, #1
 800d612:	e7f2      	b.n	800d5fa <_dtoa_r+0x272>
 800d614:	2401      	movs	r4, #1
 800d616:	2200      	movs	r2, #0
 800d618:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d61c:	f04f 3aff 	mov.w	sl, #4294967295
 800d620:	2100      	movs	r1, #0
 800d622:	46d1      	mov	r9, sl
 800d624:	2212      	movs	r2, #18
 800d626:	9109      	str	r1, [sp, #36]	; 0x24
 800d628:	e7ce      	b.n	800d5c8 <_dtoa_r+0x240>
 800d62a:	2201      	movs	r2, #1
 800d62c:	9208      	str	r2, [sp, #32]
 800d62e:	e7f5      	b.n	800d61c <_dtoa_r+0x294>
 800d630:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d634:	46d1      	mov	r9, sl
 800d636:	4652      	mov	r2, sl
 800d638:	e7c6      	b.n	800d5c8 <_dtoa_r+0x240>
 800d63a:	3101      	adds	r1, #1
 800d63c:	6079      	str	r1, [r7, #4]
 800d63e:	0040      	lsls	r0, r0, #1
 800d640:	e7c6      	b.n	800d5d0 <_dtoa_r+0x248>
 800d642:	bf00      	nop
 800d644:	f3af 8000 	nop.w
 800d648:	636f4361 	.word	0x636f4361
 800d64c:	3fd287a7 	.word	0x3fd287a7
 800d650:	8b60c8b3 	.word	0x8b60c8b3
 800d654:	3fc68a28 	.word	0x3fc68a28
 800d658:	509f79fb 	.word	0x509f79fb
 800d65c:	3fd34413 	.word	0x3fd34413
 800d660:	0800f47d 	.word	0x0800f47d
 800d664:	0800f494 	.word	0x0800f494
 800d668:	7ff00000 	.word	0x7ff00000
 800d66c:	0800f479 	.word	0x0800f479
 800d670:	0800f470 	.word	0x0800f470
 800d674:	0800f44d 	.word	0x0800f44d
 800d678:	0800f590 	.word	0x0800f590
 800d67c:	0800f4f3 	.word	0x0800f4f3
 800d680:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800d682:	9900      	ldr	r1, [sp, #0]
 800d684:	6011      	str	r1, [r2, #0]
 800d686:	f1b9 0f0e 	cmp.w	r9, #14
 800d68a:	d872      	bhi.n	800d772 <_dtoa_r+0x3ea>
 800d68c:	2c00      	cmp	r4, #0
 800d68e:	d070      	beq.n	800d772 <_dtoa_r+0x3ea>
 800d690:	f1bb 0f00 	cmp.w	fp, #0
 800d694:	f340 80a6 	ble.w	800d7e4 <_dtoa_r+0x45c>
 800d698:	49ca      	ldr	r1, [pc, #808]	; (800d9c4 <_dtoa_r+0x63c>)
 800d69a:	f00b 020f 	and.w	r2, fp, #15
 800d69e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d6a2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d6a6:	ed92 7b00 	vldr	d7, [r2]
 800d6aa:	ea4f 112b 	mov.w	r1, fp, asr #4
 800d6ae:	f000 808d 	beq.w	800d7cc <_dtoa_r+0x444>
 800d6b2:	4ac5      	ldr	r2, [pc, #788]	; (800d9c8 <_dtoa_r+0x640>)
 800d6b4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800d6b8:	ed92 6b08 	vldr	d6, [r2, #32]
 800d6bc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d6c0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d6c4:	f001 010f 	and.w	r1, r1, #15
 800d6c8:	2203      	movs	r2, #3
 800d6ca:	48bf      	ldr	r0, [pc, #764]	; (800d9c8 <_dtoa_r+0x640>)
 800d6cc:	2900      	cmp	r1, #0
 800d6ce:	d17f      	bne.n	800d7d0 <_dtoa_r+0x448>
 800d6d0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d6d4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d6d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d6dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d6de:	2900      	cmp	r1, #0
 800d6e0:	f000 80b2 	beq.w	800d848 <_dtoa_r+0x4c0>
 800d6e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d6e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d6ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6f4:	f140 80a8 	bpl.w	800d848 <_dtoa_r+0x4c0>
 800d6f8:	f1b9 0f00 	cmp.w	r9, #0
 800d6fc:	f000 80a4 	beq.w	800d848 <_dtoa_r+0x4c0>
 800d700:	f1ba 0f00 	cmp.w	sl, #0
 800d704:	dd31      	ble.n	800d76a <_dtoa_r+0x3e2>
 800d706:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d70a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d70e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d712:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d716:	3201      	adds	r2, #1
 800d718:	4650      	mov	r0, sl
 800d71a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d71e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d722:	ee07 2a90 	vmov	s15, r2
 800d726:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d72a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d72e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d732:	9c03      	ldr	r4, [sp, #12]
 800d734:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d738:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800d73c:	2800      	cmp	r0, #0
 800d73e:	f040 8086 	bne.w	800d84e <_dtoa_r+0x4c6>
 800d742:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d746:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d74a:	ec42 1b17 	vmov	d7, r1, r2
 800d74e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d756:	f300 8272 	bgt.w	800dc3e <_dtoa_r+0x8b6>
 800d75a:	eeb1 7b47 	vneg.f64	d7, d7
 800d75e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d766:	f100 8267 	bmi.w	800dc38 <_dtoa_r+0x8b0>
 800d76a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800d76e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d772:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d774:	2a00      	cmp	r2, #0
 800d776:	f2c0 8129 	blt.w	800d9cc <_dtoa_r+0x644>
 800d77a:	f1bb 0f0e 	cmp.w	fp, #14
 800d77e:	f300 8125 	bgt.w	800d9cc <_dtoa_r+0x644>
 800d782:	4b90      	ldr	r3, [pc, #576]	; (800d9c4 <_dtoa_r+0x63c>)
 800d784:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d788:	ed93 6b00 	vldr	d6, [r3]
 800d78c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d78e:	2b00      	cmp	r3, #0
 800d790:	f280 80c3 	bge.w	800d91a <_dtoa_r+0x592>
 800d794:	f1b9 0f00 	cmp.w	r9, #0
 800d798:	f300 80bf 	bgt.w	800d91a <_dtoa_r+0x592>
 800d79c:	f040 824c 	bne.w	800dc38 <_dtoa_r+0x8b0>
 800d7a0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d7a4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d7a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d7ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b4:	464c      	mov	r4, r9
 800d7b6:	464f      	mov	r7, r9
 800d7b8:	f280 8222 	bge.w	800dc00 <_dtoa_r+0x878>
 800d7bc:	f8dd 8000 	ldr.w	r8, [sp]
 800d7c0:	2331      	movs	r3, #49	; 0x31
 800d7c2:	f808 3b01 	strb.w	r3, [r8], #1
 800d7c6:	f10b 0b01 	add.w	fp, fp, #1
 800d7ca:	e21e      	b.n	800dc0a <_dtoa_r+0x882>
 800d7cc:	2202      	movs	r2, #2
 800d7ce:	e77c      	b.n	800d6ca <_dtoa_r+0x342>
 800d7d0:	07cc      	lsls	r4, r1, #31
 800d7d2:	d504      	bpl.n	800d7de <_dtoa_r+0x456>
 800d7d4:	ed90 6b00 	vldr	d6, [r0]
 800d7d8:	3201      	adds	r2, #1
 800d7da:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d7de:	1049      	asrs	r1, r1, #1
 800d7e0:	3008      	adds	r0, #8
 800d7e2:	e773      	b.n	800d6cc <_dtoa_r+0x344>
 800d7e4:	d02e      	beq.n	800d844 <_dtoa_r+0x4bc>
 800d7e6:	f1cb 0100 	rsb	r1, fp, #0
 800d7ea:	4a76      	ldr	r2, [pc, #472]	; (800d9c4 <_dtoa_r+0x63c>)
 800d7ec:	f001 000f 	and.w	r0, r1, #15
 800d7f0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d7f4:	ed92 7b00 	vldr	d7, [r2]
 800d7f8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d7fc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d800:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d804:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800d808:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800d80c:	486e      	ldr	r0, [pc, #440]	; (800d9c8 <_dtoa_r+0x640>)
 800d80e:	1109      	asrs	r1, r1, #4
 800d810:	2400      	movs	r4, #0
 800d812:	2202      	movs	r2, #2
 800d814:	b939      	cbnz	r1, 800d826 <_dtoa_r+0x49e>
 800d816:	2c00      	cmp	r4, #0
 800d818:	f43f af60 	beq.w	800d6dc <_dtoa_r+0x354>
 800d81c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d824:	e75a      	b.n	800d6dc <_dtoa_r+0x354>
 800d826:	07cf      	lsls	r7, r1, #31
 800d828:	d509      	bpl.n	800d83e <_dtoa_r+0x4b6>
 800d82a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800d82e:	ed90 7b00 	vldr	d7, [r0]
 800d832:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d836:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d83a:	3201      	adds	r2, #1
 800d83c:	2401      	movs	r4, #1
 800d83e:	1049      	asrs	r1, r1, #1
 800d840:	3008      	adds	r0, #8
 800d842:	e7e7      	b.n	800d814 <_dtoa_r+0x48c>
 800d844:	2202      	movs	r2, #2
 800d846:	e749      	b.n	800d6dc <_dtoa_r+0x354>
 800d848:	465f      	mov	r7, fp
 800d84a:	4648      	mov	r0, r9
 800d84c:	e765      	b.n	800d71a <_dtoa_r+0x392>
 800d84e:	ec42 1b17 	vmov	d7, r1, r2
 800d852:	4a5c      	ldr	r2, [pc, #368]	; (800d9c4 <_dtoa_r+0x63c>)
 800d854:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d858:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d85c:	9a00      	ldr	r2, [sp, #0]
 800d85e:	1814      	adds	r4, r2, r0
 800d860:	9a08      	ldr	r2, [sp, #32]
 800d862:	b352      	cbz	r2, 800d8ba <_dtoa_r+0x532>
 800d864:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d868:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d86c:	f8dd 8000 	ldr.w	r8, [sp]
 800d870:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d874:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d878:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d87c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d880:	ee14 2a90 	vmov	r2, s9
 800d884:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d888:	3230      	adds	r2, #48	; 0x30
 800d88a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d88e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d896:	f808 2b01 	strb.w	r2, [r8], #1
 800d89a:	d439      	bmi.n	800d910 <_dtoa_r+0x588>
 800d89c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d8a0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d8a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8a8:	d472      	bmi.n	800d990 <_dtoa_r+0x608>
 800d8aa:	45a0      	cmp	r8, r4
 800d8ac:	f43f af5d 	beq.w	800d76a <_dtoa_r+0x3e2>
 800d8b0:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d8b4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d8b8:	e7e0      	b.n	800d87c <_dtoa_r+0x4f4>
 800d8ba:	f8dd 8000 	ldr.w	r8, [sp]
 800d8be:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d8c2:	4621      	mov	r1, r4
 800d8c4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d8c8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d8cc:	ee14 2a90 	vmov	r2, s9
 800d8d0:	3230      	adds	r2, #48	; 0x30
 800d8d2:	f808 2b01 	strb.w	r2, [r8], #1
 800d8d6:	45a0      	cmp	r8, r4
 800d8d8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d8dc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d8e0:	d118      	bne.n	800d914 <_dtoa_r+0x58c>
 800d8e2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d8e6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d8ea:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8f2:	dc4d      	bgt.n	800d990 <_dtoa_r+0x608>
 800d8f4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d8f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d900:	f57f af33 	bpl.w	800d76a <_dtoa_r+0x3e2>
 800d904:	4688      	mov	r8, r1
 800d906:	3901      	subs	r1, #1
 800d908:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d90c:	2b30      	cmp	r3, #48	; 0x30
 800d90e:	d0f9      	beq.n	800d904 <_dtoa_r+0x57c>
 800d910:	46bb      	mov	fp, r7
 800d912:	e02a      	b.n	800d96a <_dtoa_r+0x5e2>
 800d914:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d918:	e7d6      	b.n	800d8c8 <_dtoa_r+0x540>
 800d91a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d91e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d922:	f8dd 8000 	ldr.w	r8, [sp]
 800d926:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d92a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d92e:	ee15 3a10 	vmov	r3, s10
 800d932:	3330      	adds	r3, #48	; 0x30
 800d934:	f808 3b01 	strb.w	r3, [r8], #1
 800d938:	9b00      	ldr	r3, [sp, #0]
 800d93a:	eba8 0303 	sub.w	r3, r8, r3
 800d93e:	4599      	cmp	r9, r3
 800d940:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d944:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d948:	d133      	bne.n	800d9b2 <_dtoa_r+0x62a>
 800d94a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d94e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d956:	dc1a      	bgt.n	800d98e <_dtoa_r+0x606>
 800d958:	eeb4 7b46 	vcmp.f64	d7, d6
 800d95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d960:	d103      	bne.n	800d96a <_dtoa_r+0x5e2>
 800d962:	ee15 3a10 	vmov	r3, s10
 800d966:	07d9      	lsls	r1, r3, #31
 800d968:	d411      	bmi.n	800d98e <_dtoa_r+0x606>
 800d96a:	4629      	mov	r1, r5
 800d96c:	4630      	mov	r0, r6
 800d96e:	f000 fae7 	bl	800df40 <_Bfree>
 800d972:	2300      	movs	r3, #0
 800d974:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d976:	f888 3000 	strb.w	r3, [r8]
 800d97a:	f10b 0301 	add.w	r3, fp, #1
 800d97e:	6013      	str	r3, [r2, #0]
 800d980:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d982:	2b00      	cmp	r3, #0
 800d984:	f43f ad4d 	beq.w	800d422 <_dtoa_r+0x9a>
 800d988:	f8c3 8000 	str.w	r8, [r3]
 800d98c:	e549      	b.n	800d422 <_dtoa_r+0x9a>
 800d98e:	465f      	mov	r7, fp
 800d990:	4643      	mov	r3, r8
 800d992:	4698      	mov	r8, r3
 800d994:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d998:	2a39      	cmp	r2, #57	; 0x39
 800d99a:	d106      	bne.n	800d9aa <_dtoa_r+0x622>
 800d99c:	9a00      	ldr	r2, [sp, #0]
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d1f7      	bne.n	800d992 <_dtoa_r+0x60a>
 800d9a2:	9900      	ldr	r1, [sp, #0]
 800d9a4:	2230      	movs	r2, #48	; 0x30
 800d9a6:	3701      	adds	r7, #1
 800d9a8:	700a      	strb	r2, [r1, #0]
 800d9aa:	781a      	ldrb	r2, [r3, #0]
 800d9ac:	3201      	adds	r2, #1
 800d9ae:	701a      	strb	r2, [r3, #0]
 800d9b0:	e7ae      	b.n	800d910 <_dtoa_r+0x588>
 800d9b2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d9b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9be:	d1b2      	bne.n	800d926 <_dtoa_r+0x59e>
 800d9c0:	e7d3      	b.n	800d96a <_dtoa_r+0x5e2>
 800d9c2:	bf00      	nop
 800d9c4:	0800f590 	.word	0x0800f590
 800d9c8:	0800f568 	.word	0x0800f568
 800d9cc:	9908      	ldr	r1, [sp, #32]
 800d9ce:	2900      	cmp	r1, #0
 800d9d0:	f000 80d1 	beq.w	800db76 <_dtoa_r+0x7ee>
 800d9d4:	9907      	ldr	r1, [sp, #28]
 800d9d6:	2901      	cmp	r1, #1
 800d9d8:	f300 80b4 	bgt.w	800db44 <_dtoa_r+0x7bc>
 800d9dc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d9de:	2900      	cmp	r1, #0
 800d9e0:	f000 80ac 	beq.w	800db3c <_dtoa_r+0x7b4>
 800d9e4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d9e8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d9ec:	461c      	mov	r4, r3
 800d9ee:	930a      	str	r3, [sp, #40]	; 0x28
 800d9f0:	9b05      	ldr	r3, [sp, #20]
 800d9f2:	4413      	add	r3, r2
 800d9f4:	9305      	str	r3, [sp, #20]
 800d9f6:	9b06      	ldr	r3, [sp, #24]
 800d9f8:	2101      	movs	r1, #1
 800d9fa:	4413      	add	r3, r2
 800d9fc:	4630      	mov	r0, r6
 800d9fe:	9306      	str	r3, [sp, #24]
 800da00:	f000 fb5a 	bl	800e0b8 <__i2b>
 800da04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da06:	4607      	mov	r7, r0
 800da08:	f1b8 0f00 	cmp.w	r8, #0
 800da0c:	dd0d      	ble.n	800da2a <_dtoa_r+0x6a2>
 800da0e:	9a06      	ldr	r2, [sp, #24]
 800da10:	2a00      	cmp	r2, #0
 800da12:	dd0a      	ble.n	800da2a <_dtoa_r+0x6a2>
 800da14:	4542      	cmp	r2, r8
 800da16:	9905      	ldr	r1, [sp, #20]
 800da18:	bfa8      	it	ge
 800da1a:	4642      	movge	r2, r8
 800da1c:	1a89      	subs	r1, r1, r2
 800da1e:	9105      	str	r1, [sp, #20]
 800da20:	9906      	ldr	r1, [sp, #24]
 800da22:	eba8 0802 	sub.w	r8, r8, r2
 800da26:	1a8a      	subs	r2, r1, r2
 800da28:	9206      	str	r2, [sp, #24]
 800da2a:	b303      	cbz	r3, 800da6e <_dtoa_r+0x6e6>
 800da2c:	9a08      	ldr	r2, [sp, #32]
 800da2e:	2a00      	cmp	r2, #0
 800da30:	f000 80a6 	beq.w	800db80 <_dtoa_r+0x7f8>
 800da34:	2c00      	cmp	r4, #0
 800da36:	dd13      	ble.n	800da60 <_dtoa_r+0x6d8>
 800da38:	4639      	mov	r1, r7
 800da3a:	4622      	mov	r2, r4
 800da3c:	4630      	mov	r0, r6
 800da3e:	930c      	str	r3, [sp, #48]	; 0x30
 800da40:	f000 fbf6 	bl	800e230 <__pow5mult>
 800da44:	462a      	mov	r2, r5
 800da46:	4601      	mov	r1, r0
 800da48:	4607      	mov	r7, r0
 800da4a:	4630      	mov	r0, r6
 800da4c:	f000 fb4a 	bl	800e0e4 <__multiply>
 800da50:	4629      	mov	r1, r5
 800da52:	900a      	str	r0, [sp, #40]	; 0x28
 800da54:	4630      	mov	r0, r6
 800da56:	f000 fa73 	bl	800df40 <_Bfree>
 800da5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da5e:	4615      	mov	r5, r2
 800da60:	1b1a      	subs	r2, r3, r4
 800da62:	d004      	beq.n	800da6e <_dtoa_r+0x6e6>
 800da64:	4629      	mov	r1, r5
 800da66:	4630      	mov	r0, r6
 800da68:	f000 fbe2 	bl	800e230 <__pow5mult>
 800da6c:	4605      	mov	r5, r0
 800da6e:	2101      	movs	r1, #1
 800da70:	4630      	mov	r0, r6
 800da72:	f000 fb21 	bl	800e0b8 <__i2b>
 800da76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da78:	2b00      	cmp	r3, #0
 800da7a:	4604      	mov	r4, r0
 800da7c:	f340 8082 	ble.w	800db84 <_dtoa_r+0x7fc>
 800da80:	461a      	mov	r2, r3
 800da82:	4601      	mov	r1, r0
 800da84:	4630      	mov	r0, r6
 800da86:	f000 fbd3 	bl	800e230 <__pow5mult>
 800da8a:	9b07      	ldr	r3, [sp, #28]
 800da8c:	2b01      	cmp	r3, #1
 800da8e:	4604      	mov	r4, r0
 800da90:	dd7b      	ble.n	800db8a <_dtoa_r+0x802>
 800da92:	2300      	movs	r3, #0
 800da94:	930a      	str	r3, [sp, #40]	; 0x28
 800da96:	6922      	ldr	r2, [r4, #16]
 800da98:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800da9c:	6910      	ldr	r0, [r2, #16]
 800da9e:	f000 fabb 	bl	800e018 <__hi0bits>
 800daa2:	f1c0 0020 	rsb	r0, r0, #32
 800daa6:	9b06      	ldr	r3, [sp, #24]
 800daa8:	4418      	add	r0, r3
 800daaa:	f010 001f 	ands.w	r0, r0, #31
 800daae:	f000 808d 	beq.w	800dbcc <_dtoa_r+0x844>
 800dab2:	f1c0 0220 	rsb	r2, r0, #32
 800dab6:	2a04      	cmp	r2, #4
 800dab8:	f340 8086 	ble.w	800dbc8 <_dtoa_r+0x840>
 800dabc:	f1c0 001c 	rsb	r0, r0, #28
 800dac0:	9b05      	ldr	r3, [sp, #20]
 800dac2:	4403      	add	r3, r0
 800dac4:	9305      	str	r3, [sp, #20]
 800dac6:	9b06      	ldr	r3, [sp, #24]
 800dac8:	4403      	add	r3, r0
 800daca:	4480      	add	r8, r0
 800dacc:	9306      	str	r3, [sp, #24]
 800dace:	9b05      	ldr	r3, [sp, #20]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	dd05      	ble.n	800dae0 <_dtoa_r+0x758>
 800dad4:	4629      	mov	r1, r5
 800dad6:	461a      	mov	r2, r3
 800dad8:	4630      	mov	r0, r6
 800dada:	f000 fc03 	bl	800e2e4 <__lshift>
 800dade:	4605      	mov	r5, r0
 800dae0:	9b06      	ldr	r3, [sp, #24]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	dd05      	ble.n	800daf2 <_dtoa_r+0x76a>
 800dae6:	4621      	mov	r1, r4
 800dae8:	461a      	mov	r2, r3
 800daea:	4630      	mov	r0, r6
 800daec:	f000 fbfa 	bl	800e2e4 <__lshift>
 800daf0:	4604      	mov	r4, r0
 800daf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d06b      	beq.n	800dbd0 <_dtoa_r+0x848>
 800daf8:	4621      	mov	r1, r4
 800dafa:	4628      	mov	r0, r5
 800dafc:	f000 fc5e 	bl	800e3bc <__mcmp>
 800db00:	2800      	cmp	r0, #0
 800db02:	da65      	bge.n	800dbd0 <_dtoa_r+0x848>
 800db04:	2300      	movs	r3, #0
 800db06:	4629      	mov	r1, r5
 800db08:	220a      	movs	r2, #10
 800db0a:	4630      	mov	r0, r6
 800db0c:	f000 fa3a 	bl	800df84 <__multadd>
 800db10:	9b08      	ldr	r3, [sp, #32]
 800db12:	f10b 3bff 	add.w	fp, fp, #4294967295
 800db16:	4605      	mov	r5, r0
 800db18:	2b00      	cmp	r3, #0
 800db1a:	f000 8192 	beq.w	800de42 <_dtoa_r+0xaba>
 800db1e:	4639      	mov	r1, r7
 800db20:	2300      	movs	r3, #0
 800db22:	220a      	movs	r2, #10
 800db24:	4630      	mov	r0, r6
 800db26:	f000 fa2d 	bl	800df84 <__multadd>
 800db2a:	f1ba 0f00 	cmp.w	sl, #0
 800db2e:	4607      	mov	r7, r0
 800db30:	f300 808e 	bgt.w	800dc50 <_dtoa_r+0x8c8>
 800db34:	9b07      	ldr	r3, [sp, #28]
 800db36:	2b02      	cmp	r3, #2
 800db38:	dc51      	bgt.n	800dbde <_dtoa_r+0x856>
 800db3a:	e089      	b.n	800dc50 <_dtoa_r+0x8c8>
 800db3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800db3e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800db42:	e751      	b.n	800d9e8 <_dtoa_r+0x660>
 800db44:	f109 34ff 	add.w	r4, r9, #4294967295
 800db48:	42a3      	cmp	r3, r4
 800db4a:	bfbf      	itttt	lt
 800db4c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800db4e:	1ae3      	sublt	r3, r4, r3
 800db50:	18d2      	addlt	r2, r2, r3
 800db52:	4613      	movlt	r3, r2
 800db54:	bfb7      	itett	lt
 800db56:	930e      	strlt	r3, [sp, #56]	; 0x38
 800db58:	1b1c      	subge	r4, r3, r4
 800db5a:	4623      	movlt	r3, r4
 800db5c:	2400      	movlt	r4, #0
 800db5e:	f1b9 0f00 	cmp.w	r9, #0
 800db62:	bfb5      	itete	lt
 800db64:	9a05      	ldrlt	r2, [sp, #20]
 800db66:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800db6a:	eba2 0809 	sublt.w	r8, r2, r9
 800db6e:	464a      	movge	r2, r9
 800db70:	bfb8      	it	lt
 800db72:	2200      	movlt	r2, #0
 800db74:	e73b      	b.n	800d9ee <_dtoa_r+0x666>
 800db76:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800db7a:	9f08      	ldr	r7, [sp, #32]
 800db7c:	461c      	mov	r4, r3
 800db7e:	e743      	b.n	800da08 <_dtoa_r+0x680>
 800db80:	461a      	mov	r2, r3
 800db82:	e76f      	b.n	800da64 <_dtoa_r+0x6dc>
 800db84:	9b07      	ldr	r3, [sp, #28]
 800db86:	2b01      	cmp	r3, #1
 800db88:	dc18      	bgt.n	800dbbc <_dtoa_r+0x834>
 800db8a:	9b02      	ldr	r3, [sp, #8]
 800db8c:	b9b3      	cbnz	r3, 800dbbc <_dtoa_r+0x834>
 800db8e:	9b03      	ldr	r3, [sp, #12]
 800db90:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800db94:	b9a2      	cbnz	r2, 800dbc0 <_dtoa_r+0x838>
 800db96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800db9a:	0d12      	lsrs	r2, r2, #20
 800db9c:	0512      	lsls	r2, r2, #20
 800db9e:	b18a      	cbz	r2, 800dbc4 <_dtoa_r+0x83c>
 800dba0:	9b05      	ldr	r3, [sp, #20]
 800dba2:	3301      	adds	r3, #1
 800dba4:	9305      	str	r3, [sp, #20]
 800dba6:	9b06      	ldr	r3, [sp, #24]
 800dba8:	3301      	adds	r3, #1
 800dbaa:	9306      	str	r3, [sp, #24]
 800dbac:	2301      	movs	r3, #1
 800dbae:	930a      	str	r3, [sp, #40]	; 0x28
 800dbb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	f47f af6f 	bne.w	800da96 <_dtoa_r+0x70e>
 800dbb8:	2001      	movs	r0, #1
 800dbba:	e774      	b.n	800daa6 <_dtoa_r+0x71e>
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	e7f6      	b.n	800dbae <_dtoa_r+0x826>
 800dbc0:	9b02      	ldr	r3, [sp, #8]
 800dbc2:	e7f4      	b.n	800dbae <_dtoa_r+0x826>
 800dbc4:	920a      	str	r2, [sp, #40]	; 0x28
 800dbc6:	e7f3      	b.n	800dbb0 <_dtoa_r+0x828>
 800dbc8:	d081      	beq.n	800dace <_dtoa_r+0x746>
 800dbca:	4610      	mov	r0, r2
 800dbcc:	301c      	adds	r0, #28
 800dbce:	e777      	b.n	800dac0 <_dtoa_r+0x738>
 800dbd0:	f1b9 0f00 	cmp.w	r9, #0
 800dbd4:	dc37      	bgt.n	800dc46 <_dtoa_r+0x8be>
 800dbd6:	9b07      	ldr	r3, [sp, #28]
 800dbd8:	2b02      	cmp	r3, #2
 800dbda:	dd34      	ble.n	800dc46 <_dtoa_r+0x8be>
 800dbdc:	46ca      	mov	sl, r9
 800dbde:	f1ba 0f00 	cmp.w	sl, #0
 800dbe2:	d10d      	bne.n	800dc00 <_dtoa_r+0x878>
 800dbe4:	4621      	mov	r1, r4
 800dbe6:	4653      	mov	r3, sl
 800dbe8:	2205      	movs	r2, #5
 800dbea:	4630      	mov	r0, r6
 800dbec:	f000 f9ca 	bl	800df84 <__multadd>
 800dbf0:	4601      	mov	r1, r0
 800dbf2:	4604      	mov	r4, r0
 800dbf4:	4628      	mov	r0, r5
 800dbf6:	f000 fbe1 	bl	800e3bc <__mcmp>
 800dbfa:	2800      	cmp	r0, #0
 800dbfc:	f73f adde 	bgt.w	800d7bc <_dtoa_r+0x434>
 800dc00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc02:	f8dd 8000 	ldr.w	r8, [sp]
 800dc06:	ea6f 0b03 	mvn.w	fp, r3
 800dc0a:	f04f 0900 	mov.w	r9, #0
 800dc0e:	4621      	mov	r1, r4
 800dc10:	4630      	mov	r0, r6
 800dc12:	f000 f995 	bl	800df40 <_Bfree>
 800dc16:	2f00      	cmp	r7, #0
 800dc18:	f43f aea7 	beq.w	800d96a <_dtoa_r+0x5e2>
 800dc1c:	f1b9 0f00 	cmp.w	r9, #0
 800dc20:	d005      	beq.n	800dc2e <_dtoa_r+0x8a6>
 800dc22:	45b9      	cmp	r9, r7
 800dc24:	d003      	beq.n	800dc2e <_dtoa_r+0x8a6>
 800dc26:	4649      	mov	r1, r9
 800dc28:	4630      	mov	r0, r6
 800dc2a:	f000 f989 	bl	800df40 <_Bfree>
 800dc2e:	4639      	mov	r1, r7
 800dc30:	4630      	mov	r0, r6
 800dc32:	f000 f985 	bl	800df40 <_Bfree>
 800dc36:	e698      	b.n	800d96a <_dtoa_r+0x5e2>
 800dc38:	2400      	movs	r4, #0
 800dc3a:	4627      	mov	r7, r4
 800dc3c:	e7e0      	b.n	800dc00 <_dtoa_r+0x878>
 800dc3e:	46bb      	mov	fp, r7
 800dc40:	4604      	mov	r4, r0
 800dc42:	4607      	mov	r7, r0
 800dc44:	e5ba      	b.n	800d7bc <_dtoa_r+0x434>
 800dc46:	9b08      	ldr	r3, [sp, #32]
 800dc48:	46ca      	mov	sl, r9
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	f000 8100 	beq.w	800de50 <_dtoa_r+0xac8>
 800dc50:	f1b8 0f00 	cmp.w	r8, #0
 800dc54:	dd05      	ble.n	800dc62 <_dtoa_r+0x8da>
 800dc56:	4639      	mov	r1, r7
 800dc58:	4642      	mov	r2, r8
 800dc5a:	4630      	mov	r0, r6
 800dc5c:	f000 fb42 	bl	800e2e4 <__lshift>
 800dc60:	4607      	mov	r7, r0
 800dc62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d05d      	beq.n	800dd24 <_dtoa_r+0x99c>
 800dc68:	6879      	ldr	r1, [r7, #4]
 800dc6a:	4630      	mov	r0, r6
 800dc6c:	f000 f928 	bl	800dec0 <_Balloc>
 800dc70:	4680      	mov	r8, r0
 800dc72:	b928      	cbnz	r0, 800dc80 <_dtoa_r+0x8f8>
 800dc74:	4b82      	ldr	r3, [pc, #520]	; (800de80 <_dtoa_r+0xaf8>)
 800dc76:	4602      	mov	r2, r0
 800dc78:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dc7c:	f7ff bb9a 	b.w	800d3b4 <_dtoa_r+0x2c>
 800dc80:	693a      	ldr	r2, [r7, #16]
 800dc82:	3202      	adds	r2, #2
 800dc84:	0092      	lsls	r2, r2, #2
 800dc86:	f107 010c 	add.w	r1, r7, #12
 800dc8a:	300c      	adds	r0, #12
 800dc8c:	f000 f90a 	bl	800dea4 <memcpy>
 800dc90:	2201      	movs	r2, #1
 800dc92:	4641      	mov	r1, r8
 800dc94:	4630      	mov	r0, r6
 800dc96:	f000 fb25 	bl	800e2e4 <__lshift>
 800dc9a:	9b00      	ldr	r3, [sp, #0]
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	9305      	str	r3, [sp, #20]
 800dca0:	9b00      	ldr	r3, [sp, #0]
 800dca2:	4453      	add	r3, sl
 800dca4:	9309      	str	r3, [sp, #36]	; 0x24
 800dca6:	9b02      	ldr	r3, [sp, #8]
 800dca8:	f003 0301 	and.w	r3, r3, #1
 800dcac:	46b9      	mov	r9, r7
 800dcae:	9308      	str	r3, [sp, #32]
 800dcb0:	4607      	mov	r7, r0
 800dcb2:	9b05      	ldr	r3, [sp, #20]
 800dcb4:	4621      	mov	r1, r4
 800dcb6:	3b01      	subs	r3, #1
 800dcb8:	4628      	mov	r0, r5
 800dcba:	9302      	str	r3, [sp, #8]
 800dcbc:	f7ff fad6 	bl	800d26c <quorem>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	3330      	adds	r3, #48	; 0x30
 800dcc4:	9006      	str	r0, [sp, #24]
 800dcc6:	4649      	mov	r1, r9
 800dcc8:	4628      	mov	r0, r5
 800dcca:	930a      	str	r3, [sp, #40]	; 0x28
 800dccc:	f000 fb76 	bl	800e3bc <__mcmp>
 800dcd0:	463a      	mov	r2, r7
 800dcd2:	4682      	mov	sl, r0
 800dcd4:	4621      	mov	r1, r4
 800dcd6:	4630      	mov	r0, r6
 800dcd8:	f000 fb8c 	bl	800e3f4 <__mdiff>
 800dcdc:	68c2      	ldr	r2, [r0, #12]
 800dcde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dce0:	4680      	mov	r8, r0
 800dce2:	bb0a      	cbnz	r2, 800dd28 <_dtoa_r+0x9a0>
 800dce4:	4601      	mov	r1, r0
 800dce6:	4628      	mov	r0, r5
 800dce8:	f000 fb68 	bl	800e3bc <__mcmp>
 800dcec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcee:	4602      	mov	r2, r0
 800dcf0:	4641      	mov	r1, r8
 800dcf2:	4630      	mov	r0, r6
 800dcf4:	920e      	str	r2, [sp, #56]	; 0x38
 800dcf6:	930a      	str	r3, [sp, #40]	; 0x28
 800dcf8:	f000 f922 	bl	800df40 <_Bfree>
 800dcfc:	9b07      	ldr	r3, [sp, #28]
 800dcfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd00:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800dd04:	ea43 0102 	orr.w	r1, r3, r2
 800dd08:	9b08      	ldr	r3, [sp, #32]
 800dd0a:	430b      	orrs	r3, r1
 800dd0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd0e:	d10d      	bne.n	800dd2c <_dtoa_r+0x9a4>
 800dd10:	2b39      	cmp	r3, #57	; 0x39
 800dd12:	d029      	beq.n	800dd68 <_dtoa_r+0x9e0>
 800dd14:	f1ba 0f00 	cmp.w	sl, #0
 800dd18:	dd01      	ble.n	800dd1e <_dtoa_r+0x996>
 800dd1a:	9b06      	ldr	r3, [sp, #24]
 800dd1c:	3331      	adds	r3, #49	; 0x31
 800dd1e:	9a02      	ldr	r2, [sp, #8]
 800dd20:	7013      	strb	r3, [r2, #0]
 800dd22:	e774      	b.n	800dc0e <_dtoa_r+0x886>
 800dd24:	4638      	mov	r0, r7
 800dd26:	e7b8      	b.n	800dc9a <_dtoa_r+0x912>
 800dd28:	2201      	movs	r2, #1
 800dd2a:	e7e1      	b.n	800dcf0 <_dtoa_r+0x968>
 800dd2c:	f1ba 0f00 	cmp.w	sl, #0
 800dd30:	db06      	blt.n	800dd40 <_dtoa_r+0x9b8>
 800dd32:	9907      	ldr	r1, [sp, #28]
 800dd34:	ea41 0a0a 	orr.w	sl, r1, sl
 800dd38:	9908      	ldr	r1, [sp, #32]
 800dd3a:	ea5a 0101 	orrs.w	r1, sl, r1
 800dd3e:	d120      	bne.n	800dd82 <_dtoa_r+0x9fa>
 800dd40:	2a00      	cmp	r2, #0
 800dd42:	ddec      	ble.n	800dd1e <_dtoa_r+0x996>
 800dd44:	4629      	mov	r1, r5
 800dd46:	2201      	movs	r2, #1
 800dd48:	4630      	mov	r0, r6
 800dd4a:	9305      	str	r3, [sp, #20]
 800dd4c:	f000 faca 	bl	800e2e4 <__lshift>
 800dd50:	4621      	mov	r1, r4
 800dd52:	4605      	mov	r5, r0
 800dd54:	f000 fb32 	bl	800e3bc <__mcmp>
 800dd58:	2800      	cmp	r0, #0
 800dd5a:	9b05      	ldr	r3, [sp, #20]
 800dd5c:	dc02      	bgt.n	800dd64 <_dtoa_r+0x9dc>
 800dd5e:	d1de      	bne.n	800dd1e <_dtoa_r+0x996>
 800dd60:	07da      	lsls	r2, r3, #31
 800dd62:	d5dc      	bpl.n	800dd1e <_dtoa_r+0x996>
 800dd64:	2b39      	cmp	r3, #57	; 0x39
 800dd66:	d1d8      	bne.n	800dd1a <_dtoa_r+0x992>
 800dd68:	9a02      	ldr	r2, [sp, #8]
 800dd6a:	2339      	movs	r3, #57	; 0x39
 800dd6c:	7013      	strb	r3, [r2, #0]
 800dd6e:	4643      	mov	r3, r8
 800dd70:	4698      	mov	r8, r3
 800dd72:	3b01      	subs	r3, #1
 800dd74:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800dd78:	2a39      	cmp	r2, #57	; 0x39
 800dd7a:	d051      	beq.n	800de20 <_dtoa_r+0xa98>
 800dd7c:	3201      	adds	r2, #1
 800dd7e:	701a      	strb	r2, [r3, #0]
 800dd80:	e745      	b.n	800dc0e <_dtoa_r+0x886>
 800dd82:	2a00      	cmp	r2, #0
 800dd84:	dd03      	ble.n	800dd8e <_dtoa_r+0xa06>
 800dd86:	2b39      	cmp	r3, #57	; 0x39
 800dd88:	d0ee      	beq.n	800dd68 <_dtoa_r+0x9e0>
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	e7c7      	b.n	800dd1e <_dtoa_r+0x996>
 800dd8e:	9a05      	ldr	r2, [sp, #20]
 800dd90:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd92:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dd96:	428a      	cmp	r2, r1
 800dd98:	d02b      	beq.n	800ddf2 <_dtoa_r+0xa6a>
 800dd9a:	4629      	mov	r1, r5
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	220a      	movs	r2, #10
 800dda0:	4630      	mov	r0, r6
 800dda2:	f000 f8ef 	bl	800df84 <__multadd>
 800dda6:	45b9      	cmp	r9, r7
 800dda8:	4605      	mov	r5, r0
 800ddaa:	f04f 0300 	mov.w	r3, #0
 800ddae:	f04f 020a 	mov.w	r2, #10
 800ddb2:	4649      	mov	r1, r9
 800ddb4:	4630      	mov	r0, r6
 800ddb6:	d107      	bne.n	800ddc8 <_dtoa_r+0xa40>
 800ddb8:	f000 f8e4 	bl	800df84 <__multadd>
 800ddbc:	4681      	mov	r9, r0
 800ddbe:	4607      	mov	r7, r0
 800ddc0:	9b05      	ldr	r3, [sp, #20]
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	9305      	str	r3, [sp, #20]
 800ddc6:	e774      	b.n	800dcb2 <_dtoa_r+0x92a>
 800ddc8:	f000 f8dc 	bl	800df84 <__multadd>
 800ddcc:	4639      	mov	r1, r7
 800ddce:	4681      	mov	r9, r0
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	220a      	movs	r2, #10
 800ddd4:	4630      	mov	r0, r6
 800ddd6:	f000 f8d5 	bl	800df84 <__multadd>
 800ddda:	4607      	mov	r7, r0
 800dddc:	e7f0      	b.n	800ddc0 <_dtoa_r+0xa38>
 800ddde:	f1ba 0f00 	cmp.w	sl, #0
 800dde2:	9a00      	ldr	r2, [sp, #0]
 800dde4:	bfcc      	ite	gt
 800dde6:	46d0      	movgt	r8, sl
 800dde8:	f04f 0801 	movle.w	r8, #1
 800ddec:	4490      	add	r8, r2
 800ddee:	f04f 0900 	mov.w	r9, #0
 800ddf2:	4629      	mov	r1, r5
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	4630      	mov	r0, r6
 800ddf8:	9302      	str	r3, [sp, #8]
 800ddfa:	f000 fa73 	bl	800e2e4 <__lshift>
 800ddfe:	4621      	mov	r1, r4
 800de00:	4605      	mov	r5, r0
 800de02:	f000 fadb 	bl	800e3bc <__mcmp>
 800de06:	2800      	cmp	r0, #0
 800de08:	dcb1      	bgt.n	800dd6e <_dtoa_r+0x9e6>
 800de0a:	d102      	bne.n	800de12 <_dtoa_r+0xa8a>
 800de0c:	9b02      	ldr	r3, [sp, #8]
 800de0e:	07db      	lsls	r3, r3, #31
 800de10:	d4ad      	bmi.n	800dd6e <_dtoa_r+0x9e6>
 800de12:	4643      	mov	r3, r8
 800de14:	4698      	mov	r8, r3
 800de16:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de1a:	2a30      	cmp	r2, #48	; 0x30
 800de1c:	d0fa      	beq.n	800de14 <_dtoa_r+0xa8c>
 800de1e:	e6f6      	b.n	800dc0e <_dtoa_r+0x886>
 800de20:	9a00      	ldr	r2, [sp, #0]
 800de22:	429a      	cmp	r2, r3
 800de24:	d1a4      	bne.n	800dd70 <_dtoa_r+0x9e8>
 800de26:	f10b 0b01 	add.w	fp, fp, #1
 800de2a:	2331      	movs	r3, #49	; 0x31
 800de2c:	e778      	b.n	800dd20 <_dtoa_r+0x998>
 800de2e:	4b15      	ldr	r3, [pc, #84]	; (800de84 <_dtoa_r+0xafc>)
 800de30:	f7ff bb12 	b.w	800d458 <_dtoa_r+0xd0>
 800de34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800de36:	2b00      	cmp	r3, #0
 800de38:	f47f aaee 	bne.w	800d418 <_dtoa_r+0x90>
 800de3c:	4b12      	ldr	r3, [pc, #72]	; (800de88 <_dtoa_r+0xb00>)
 800de3e:	f7ff bb0b 	b.w	800d458 <_dtoa_r+0xd0>
 800de42:	f1ba 0f00 	cmp.w	sl, #0
 800de46:	dc03      	bgt.n	800de50 <_dtoa_r+0xac8>
 800de48:	9b07      	ldr	r3, [sp, #28]
 800de4a:	2b02      	cmp	r3, #2
 800de4c:	f73f aec7 	bgt.w	800dbde <_dtoa_r+0x856>
 800de50:	f8dd 8000 	ldr.w	r8, [sp]
 800de54:	4621      	mov	r1, r4
 800de56:	4628      	mov	r0, r5
 800de58:	f7ff fa08 	bl	800d26c <quorem>
 800de5c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800de60:	f808 3b01 	strb.w	r3, [r8], #1
 800de64:	9a00      	ldr	r2, [sp, #0]
 800de66:	eba8 0202 	sub.w	r2, r8, r2
 800de6a:	4592      	cmp	sl, r2
 800de6c:	ddb7      	ble.n	800ddde <_dtoa_r+0xa56>
 800de6e:	4629      	mov	r1, r5
 800de70:	2300      	movs	r3, #0
 800de72:	220a      	movs	r2, #10
 800de74:	4630      	mov	r0, r6
 800de76:	f000 f885 	bl	800df84 <__multadd>
 800de7a:	4605      	mov	r5, r0
 800de7c:	e7ea      	b.n	800de54 <_dtoa_r+0xacc>
 800de7e:	bf00      	nop
 800de80:	0800f4f3 	.word	0x0800f4f3
 800de84:	0800f44c 	.word	0x0800f44c
 800de88:	0800f470 	.word	0x0800f470

0800de8c <_localeconv_r>:
 800de8c:	4800      	ldr	r0, [pc, #0]	; (800de90 <_localeconv_r+0x4>)
 800de8e:	4770      	bx	lr
 800de90:	2400018c 	.word	0x2400018c

0800de94 <malloc>:
 800de94:	4b02      	ldr	r3, [pc, #8]	; (800dea0 <malloc+0xc>)
 800de96:	4601      	mov	r1, r0
 800de98:	6818      	ldr	r0, [r3, #0]
 800de9a:	f000 bbef 	b.w	800e67c <_malloc_r>
 800de9e:	bf00      	nop
 800dea0:	24000038 	.word	0x24000038

0800dea4 <memcpy>:
 800dea4:	440a      	add	r2, r1
 800dea6:	4291      	cmp	r1, r2
 800dea8:	f100 33ff 	add.w	r3, r0, #4294967295
 800deac:	d100      	bne.n	800deb0 <memcpy+0xc>
 800deae:	4770      	bx	lr
 800deb0:	b510      	push	{r4, lr}
 800deb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800deb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800deba:	4291      	cmp	r1, r2
 800debc:	d1f9      	bne.n	800deb2 <memcpy+0xe>
 800debe:	bd10      	pop	{r4, pc}

0800dec0 <_Balloc>:
 800dec0:	b570      	push	{r4, r5, r6, lr}
 800dec2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dec4:	4604      	mov	r4, r0
 800dec6:	460d      	mov	r5, r1
 800dec8:	b976      	cbnz	r6, 800dee8 <_Balloc+0x28>
 800deca:	2010      	movs	r0, #16
 800decc:	f7ff ffe2 	bl	800de94 <malloc>
 800ded0:	4602      	mov	r2, r0
 800ded2:	6260      	str	r0, [r4, #36]	; 0x24
 800ded4:	b920      	cbnz	r0, 800dee0 <_Balloc+0x20>
 800ded6:	4b18      	ldr	r3, [pc, #96]	; (800df38 <_Balloc+0x78>)
 800ded8:	4818      	ldr	r0, [pc, #96]	; (800df3c <_Balloc+0x7c>)
 800deda:	2166      	movs	r1, #102	; 0x66
 800dedc:	f000 fc38 	bl	800e750 <__assert_func>
 800dee0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dee4:	6006      	str	r6, [r0, #0]
 800dee6:	60c6      	str	r6, [r0, #12]
 800dee8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800deea:	68f3      	ldr	r3, [r6, #12]
 800deec:	b183      	cbz	r3, 800df10 <_Balloc+0x50>
 800deee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800def0:	68db      	ldr	r3, [r3, #12]
 800def2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800def6:	b9b8      	cbnz	r0, 800df28 <_Balloc+0x68>
 800def8:	2101      	movs	r1, #1
 800defa:	fa01 f605 	lsl.w	r6, r1, r5
 800defe:	1d72      	adds	r2, r6, #5
 800df00:	0092      	lsls	r2, r2, #2
 800df02:	4620      	mov	r0, r4
 800df04:	f000 fb5a 	bl	800e5bc <_calloc_r>
 800df08:	b160      	cbz	r0, 800df24 <_Balloc+0x64>
 800df0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df0e:	e00e      	b.n	800df2e <_Balloc+0x6e>
 800df10:	2221      	movs	r2, #33	; 0x21
 800df12:	2104      	movs	r1, #4
 800df14:	4620      	mov	r0, r4
 800df16:	f000 fb51 	bl	800e5bc <_calloc_r>
 800df1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df1c:	60f0      	str	r0, [r6, #12]
 800df1e:	68db      	ldr	r3, [r3, #12]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d1e4      	bne.n	800deee <_Balloc+0x2e>
 800df24:	2000      	movs	r0, #0
 800df26:	bd70      	pop	{r4, r5, r6, pc}
 800df28:	6802      	ldr	r2, [r0, #0]
 800df2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800df2e:	2300      	movs	r3, #0
 800df30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800df34:	e7f7      	b.n	800df26 <_Balloc+0x66>
 800df36:	bf00      	nop
 800df38:	0800f47d 	.word	0x0800f47d
 800df3c:	0800f504 	.word	0x0800f504

0800df40 <_Bfree>:
 800df40:	b570      	push	{r4, r5, r6, lr}
 800df42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800df44:	4605      	mov	r5, r0
 800df46:	460c      	mov	r4, r1
 800df48:	b976      	cbnz	r6, 800df68 <_Bfree+0x28>
 800df4a:	2010      	movs	r0, #16
 800df4c:	f7ff ffa2 	bl	800de94 <malloc>
 800df50:	4602      	mov	r2, r0
 800df52:	6268      	str	r0, [r5, #36]	; 0x24
 800df54:	b920      	cbnz	r0, 800df60 <_Bfree+0x20>
 800df56:	4b09      	ldr	r3, [pc, #36]	; (800df7c <_Bfree+0x3c>)
 800df58:	4809      	ldr	r0, [pc, #36]	; (800df80 <_Bfree+0x40>)
 800df5a:	218a      	movs	r1, #138	; 0x8a
 800df5c:	f000 fbf8 	bl	800e750 <__assert_func>
 800df60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df64:	6006      	str	r6, [r0, #0]
 800df66:	60c6      	str	r6, [r0, #12]
 800df68:	b13c      	cbz	r4, 800df7a <_Bfree+0x3a>
 800df6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800df6c:	6862      	ldr	r2, [r4, #4]
 800df6e:	68db      	ldr	r3, [r3, #12]
 800df70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df74:	6021      	str	r1, [r4, #0]
 800df76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800df7a:	bd70      	pop	{r4, r5, r6, pc}
 800df7c:	0800f47d 	.word	0x0800f47d
 800df80:	0800f504 	.word	0x0800f504

0800df84 <__multadd>:
 800df84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df88:	690e      	ldr	r6, [r1, #16]
 800df8a:	4607      	mov	r7, r0
 800df8c:	4698      	mov	r8, r3
 800df8e:	460c      	mov	r4, r1
 800df90:	f101 0014 	add.w	r0, r1, #20
 800df94:	2300      	movs	r3, #0
 800df96:	6805      	ldr	r5, [r0, #0]
 800df98:	b2a9      	uxth	r1, r5
 800df9a:	fb02 8101 	mla	r1, r2, r1, r8
 800df9e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800dfa2:	0c2d      	lsrs	r5, r5, #16
 800dfa4:	fb02 c505 	mla	r5, r2, r5, ip
 800dfa8:	b289      	uxth	r1, r1
 800dfaa:	3301      	adds	r3, #1
 800dfac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800dfb0:	429e      	cmp	r6, r3
 800dfb2:	f840 1b04 	str.w	r1, [r0], #4
 800dfb6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800dfba:	dcec      	bgt.n	800df96 <__multadd+0x12>
 800dfbc:	f1b8 0f00 	cmp.w	r8, #0
 800dfc0:	d022      	beq.n	800e008 <__multadd+0x84>
 800dfc2:	68a3      	ldr	r3, [r4, #8]
 800dfc4:	42b3      	cmp	r3, r6
 800dfc6:	dc19      	bgt.n	800dffc <__multadd+0x78>
 800dfc8:	6861      	ldr	r1, [r4, #4]
 800dfca:	4638      	mov	r0, r7
 800dfcc:	3101      	adds	r1, #1
 800dfce:	f7ff ff77 	bl	800dec0 <_Balloc>
 800dfd2:	4605      	mov	r5, r0
 800dfd4:	b928      	cbnz	r0, 800dfe2 <__multadd+0x5e>
 800dfd6:	4602      	mov	r2, r0
 800dfd8:	4b0d      	ldr	r3, [pc, #52]	; (800e010 <__multadd+0x8c>)
 800dfda:	480e      	ldr	r0, [pc, #56]	; (800e014 <__multadd+0x90>)
 800dfdc:	21b5      	movs	r1, #181	; 0xb5
 800dfde:	f000 fbb7 	bl	800e750 <__assert_func>
 800dfe2:	6922      	ldr	r2, [r4, #16]
 800dfe4:	3202      	adds	r2, #2
 800dfe6:	f104 010c 	add.w	r1, r4, #12
 800dfea:	0092      	lsls	r2, r2, #2
 800dfec:	300c      	adds	r0, #12
 800dfee:	f7ff ff59 	bl	800dea4 <memcpy>
 800dff2:	4621      	mov	r1, r4
 800dff4:	4638      	mov	r0, r7
 800dff6:	f7ff ffa3 	bl	800df40 <_Bfree>
 800dffa:	462c      	mov	r4, r5
 800dffc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e000:	3601      	adds	r6, #1
 800e002:	f8c3 8014 	str.w	r8, [r3, #20]
 800e006:	6126      	str	r6, [r4, #16]
 800e008:	4620      	mov	r0, r4
 800e00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e00e:	bf00      	nop
 800e010:	0800f4f3 	.word	0x0800f4f3
 800e014:	0800f504 	.word	0x0800f504

0800e018 <__hi0bits>:
 800e018:	0c03      	lsrs	r3, r0, #16
 800e01a:	041b      	lsls	r3, r3, #16
 800e01c:	b9d3      	cbnz	r3, 800e054 <__hi0bits+0x3c>
 800e01e:	0400      	lsls	r0, r0, #16
 800e020:	2310      	movs	r3, #16
 800e022:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e026:	bf04      	itt	eq
 800e028:	0200      	lsleq	r0, r0, #8
 800e02a:	3308      	addeq	r3, #8
 800e02c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e030:	bf04      	itt	eq
 800e032:	0100      	lsleq	r0, r0, #4
 800e034:	3304      	addeq	r3, #4
 800e036:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e03a:	bf04      	itt	eq
 800e03c:	0080      	lsleq	r0, r0, #2
 800e03e:	3302      	addeq	r3, #2
 800e040:	2800      	cmp	r0, #0
 800e042:	db05      	blt.n	800e050 <__hi0bits+0x38>
 800e044:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e048:	f103 0301 	add.w	r3, r3, #1
 800e04c:	bf08      	it	eq
 800e04e:	2320      	moveq	r3, #32
 800e050:	4618      	mov	r0, r3
 800e052:	4770      	bx	lr
 800e054:	2300      	movs	r3, #0
 800e056:	e7e4      	b.n	800e022 <__hi0bits+0xa>

0800e058 <__lo0bits>:
 800e058:	6803      	ldr	r3, [r0, #0]
 800e05a:	f013 0207 	ands.w	r2, r3, #7
 800e05e:	4601      	mov	r1, r0
 800e060:	d00b      	beq.n	800e07a <__lo0bits+0x22>
 800e062:	07da      	lsls	r2, r3, #31
 800e064:	d424      	bmi.n	800e0b0 <__lo0bits+0x58>
 800e066:	0798      	lsls	r0, r3, #30
 800e068:	bf49      	itett	mi
 800e06a:	085b      	lsrmi	r3, r3, #1
 800e06c:	089b      	lsrpl	r3, r3, #2
 800e06e:	2001      	movmi	r0, #1
 800e070:	600b      	strmi	r3, [r1, #0]
 800e072:	bf5c      	itt	pl
 800e074:	600b      	strpl	r3, [r1, #0]
 800e076:	2002      	movpl	r0, #2
 800e078:	4770      	bx	lr
 800e07a:	b298      	uxth	r0, r3
 800e07c:	b9b0      	cbnz	r0, 800e0ac <__lo0bits+0x54>
 800e07e:	0c1b      	lsrs	r3, r3, #16
 800e080:	2010      	movs	r0, #16
 800e082:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e086:	bf04      	itt	eq
 800e088:	0a1b      	lsreq	r3, r3, #8
 800e08a:	3008      	addeq	r0, #8
 800e08c:	071a      	lsls	r2, r3, #28
 800e08e:	bf04      	itt	eq
 800e090:	091b      	lsreq	r3, r3, #4
 800e092:	3004      	addeq	r0, #4
 800e094:	079a      	lsls	r2, r3, #30
 800e096:	bf04      	itt	eq
 800e098:	089b      	lsreq	r3, r3, #2
 800e09a:	3002      	addeq	r0, #2
 800e09c:	07da      	lsls	r2, r3, #31
 800e09e:	d403      	bmi.n	800e0a8 <__lo0bits+0x50>
 800e0a0:	085b      	lsrs	r3, r3, #1
 800e0a2:	f100 0001 	add.w	r0, r0, #1
 800e0a6:	d005      	beq.n	800e0b4 <__lo0bits+0x5c>
 800e0a8:	600b      	str	r3, [r1, #0]
 800e0aa:	4770      	bx	lr
 800e0ac:	4610      	mov	r0, r2
 800e0ae:	e7e8      	b.n	800e082 <__lo0bits+0x2a>
 800e0b0:	2000      	movs	r0, #0
 800e0b2:	4770      	bx	lr
 800e0b4:	2020      	movs	r0, #32
 800e0b6:	4770      	bx	lr

0800e0b8 <__i2b>:
 800e0b8:	b510      	push	{r4, lr}
 800e0ba:	460c      	mov	r4, r1
 800e0bc:	2101      	movs	r1, #1
 800e0be:	f7ff feff 	bl	800dec0 <_Balloc>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	b928      	cbnz	r0, 800e0d2 <__i2b+0x1a>
 800e0c6:	4b05      	ldr	r3, [pc, #20]	; (800e0dc <__i2b+0x24>)
 800e0c8:	4805      	ldr	r0, [pc, #20]	; (800e0e0 <__i2b+0x28>)
 800e0ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e0ce:	f000 fb3f 	bl	800e750 <__assert_func>
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	6144      	str	r4, [r0, #20]
 800e0d6:	6103      	str	r3, [r0, #16]
 800e0d8:	bd10      	pop	{r4, pc}
 800e0da:	bf00      	nop
 800e0dc:	0800f4f3 	.word	0x0800f4f3
 800e0e0:	0800f504 	.word	0x0800f504

0800e0e4 <__multiply>:
 800e0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e8:	4614      	mov	r4, r2
 800e0ea:	690a      	ldr	r2, [r1, #16]
 800e0ec:	6923      	ldr	r3, [r4, #16]
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	bfb8      	it	lt
 800e0f2:	460b      	movlt	r3, r1
 800e0f4:	460d      	mov	r5, r1
 800e0f6:	bfbc      	itt	lt
 800e0f8:	4625      	movlt	r5, r4
 800e0fa:	461c      	movlt	r4, r3
 800e0fc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e100:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e104:	68ab      	ldr	r3, [r5, #8]
 800e106:	6869      	ldr	r1, [r5, #4]
 800e108:	eb0a 0709 	add.w	r7, sl, r9
 800e10c:	42bb      	cmp	r3, r7
 800e10e:	b085      	sub	sp, #20
 800e110:	bfb8      	it	lt
 800e112:	3101      	addlt	r1, #1
 800e114:	f7ff fed4 	bl	800dec0 <_Balloc>
 800e118:	b930      	cbnz	r0, 800e128 <__multiply+0x44>
 800e11a:	4602      	mov	r2, r0
 800e11c:	4b42      	ldr	r3, [pc, #264]	; (800e228 <__multiply+0x144>)
 800e11e:	4843      	ldr	r0, [pc, #268]	; (800e22c <__multiply+0x148>)
 800e120:	f240 115d 	movw	r1, #349	; 0x15d
 800e124:	f000 fb14 	bl	800e750 <__assert_func>
 800e128:	f100 0614 	add.w	r6, r0, #20
 800e12c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e130:	4633      	mov	r3, r6
 800e132:	2200      	movs	r2, #0
 800e134:	4543      	cmp	r3, r8
 800e136:	d31e      	bcc.n	800e176 <__multiply+0x92>
 800e138:	f105 0c14 	add.w	ip, r5, #20
 800e13c:	f104 0314 	add.w	r3, r4, #20
 800e140:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e144:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e148:	9202      	str	r2, [sp, #8]
 800e14a:	ebac 0205 	sub.w	r2, ip, r5
 800e14e:	3a15      	subs	r2, #21
 800e150:	f022 0203 	bic.w	r2, r2, #3
 800e154:	3204      	adds	r2, #4
 800e156:	f105 0115 	add.w	r1, r5, #21
 800e15a:	458c      	cmp	ip, r1
 800e15c:	bf38      	it	cc
 800e15e:	2204      	movcc	r2, #4
 800e160:	9201      	str	r2, [sp, #4]
 800e162:	9a02      	ldr	r2, [sp, #8]
 800e164:	9303      	str	r3, [sp, #12]
 800e166:	429a      	cmp	r2, r3
 800e168:	d808      	bhi.n	800e17c <__multiply+0x98>
 800e16a:	2f00      	cmp	r7, #0
 800e16c:	dc55      	bgt.n	800e21a <__multiply+0x136>
 800e16e:	6107      	str	r7, [r0, #16]
 800e170:	b005      	add	sp, #20
 800e172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e176:	f843 2b04 	str.w	r2, [r3], #4
 800e17a:	e7db      	b.n	800e134 <__multiply+0x50>
 800e17c:	f8b3 a000 	ldrh.w	sl, [r3]
 800e180:	f1ba 0f00 	cmp.w	sl, #0
 800e184:	d020      	beq.n	800e1c8 <__multiply+0xe4>
 800e186:	f105 0e14 	add.w	lr, r5, #20
 800e18a:	46b1      	mov	r9, r6
 800e18c:	2200      	movs	r2, #0
 800e18e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e192:	f8d9 b000 	ldr.w	fp, [r9]
 800e196:	b2a1      	uxth	r1, r4
 800e198:	fa1f fb8b 	uxth.w	fp, fp
 800e19c:	fb0a b101 	mla	r1, sl, r1, fp
 800e1a0:	4411      	add	r1, r2
 800e1a2:	f8d9 2000 	ldr.w	r2, [r9]
 800e1a6:	0c24      	lsrs	r4, r4, #16
 800e1a8:	0c12      	lsrs	r2, r2, #16
 800e1aa:	fb0a 2404 	mla	r4, sl, r4, r2
 800e1ae:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e1b2:	b289      	uxth	r1, r1
 800e1b4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e1b8:	45f4      	cmp	ip, lr
 800e1ba:	f849 1b04 	str.w	r1, [r9], #4
 800e1be:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e1c2:	d8e4      	bhi.n	800e18e <__multiply+0xaa>
 800e1c4:	9901      	ldr	r1, [sp, #4]
 800e1c6:	5072      	str	r2, [r6, r1]
 800e1c8:	9a03      	ldr	r2, [sp, #12]
 800e1ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e1ce:	3304      	adds	r3, #4
 800e1d0:	f1b9 0f00 	cmp.w	r9, #0
 800e1d4:	d01f      	beq.n	800e216 <__multiply+0x132>
 800e1d6:	6834      	ldr	r4, [r6, #0]
 800e1d8:	f105 0114 	add.w	r1, r5, #20
 800e1dc:	46b6      	mov	lr, r6
 800e1de:	f04f 0a00 	mov.w	sl, #0
 800e1e2:	880a      	ldrh	r2, [r1, #0]
 800e1e4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e1e8:	fb09 b202 	mla	r2, r9, r2, fp
 800e1ec:	4492      	add	sl, r2
 800e1ee:	b2a4      	uxth	r4, r4
 800e1f0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e1f4:	f84e 4b04 	str.w	r4, [lr], #4
 800e1f8:	f851 4b04 	ldr.w	r4, [r1], #4
 800e1fc:	f8be 2000 	ldrh.w	r2, [lr]
 800e200:	0c24      	lsrs	r4, r4, #16
 800e202:	fb09 2404 	mla	r4, r9, r4, r2
 800e206:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e20a:	458c      	cmp	ip, r1
 800e20c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e210:	d8e7      	bhi.n	800e1e2 <__multiply+0xfe>
 800e212:	9a01      	ldr	r2, [sp, #4]
 800e214:	50b4      	str	r4, [r6, r2]
 800e216:	3604      	adds	r6, #4
 800e218:	e7a3      	b.n	800e162 <__multiply+0x7e>
 800e21a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d1a5      	bne.n	800e16e <__multiply+0x8a>
 800e222:	3f01      	subs	r7, #1
 800e224:	e7a1      	b.n	800e16a <__multiply+0x86>
 800e226:	bf00      	nop
 800e228:	0800f4f3 	.word	0x0800f4f3
 800e22c:	0800f504 	.word	0x0800f504

0800e230 <__pow5mult>:
 800e230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e234:	4615      	mov	r5, r2
 800e236:	f012 0203 	ands.w	r2, r2, #3
 800e23a:	4606      	mov	r6, r0
 800e23c:	460f      	mov	r7, r1
 800e23e:	d007      	beq.n	800e250 <__pow5mult+0x20>
 800e240:	4c25      	ldr	r4, [pc, #148]	; (800e2d8 <__pow5mult+0xa8>)
 800e242:	3a01      	subs	r2, #1
 800e244:	2300      	movs	r3, #0
 800e246:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e24a:	f7ff fe9b 	bl	800df84 <__multadd>
 800e24e:	4607      	mov	r7, r0
 800e250:	10ad      	asrs	r5, r5, #2
 800e252:	d03d      	beq.n	800e2d0 <__pow5mult+0xa0>
 800e254:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e256:	b97c      	cbnz	r4, 800e278 <__pow5mult+0x48>
 800e258:	2010      	movs	r0, #16
 800e25a:	f7ff fe1b 	bl	800de94 <malloc>
 800e25e:	4602      	mov	r2, r0
 800e260:	6270      	str	r0, [r6, #36]	; 0x24
 800e262:	b928      	cbnz	r0, 800e270 <__pow5mult+0x40>
 800e264:	4b1d      	ldr	r3, [pc, #116]	; (800e2dc <__pow5mult+0xac>)
 800e266:	481e      	ldr	r0, [pc, #120]	; (800e2e0 <__pow5mult+0xb0>)
 800e268:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e26c:	f000 fa70 	bl	800e750 <__assert_func>
 800e270:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e274:	6004      	str	r4, [r0, #0]
 800e276:	60c4      	str	r4, [r0, #12]
 800e278:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e27c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e280:	b94c      	cbnz	r4, 800e296 <__pow5mult+0x66>
 800e282:	f240 2171 	movw	r1, #625	; 0x271
 800e286:	4630      	mov	r0, r6
 800e288:	f7ff ff16 	bl	800e0b8 <__i2b>
 800e28c:	2300      	movs	r3, #0
 800e28e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e292:	4604      	mov	r4, r0
 800e294:	6003      	str	r3, [r0, #0]
 800e296:	f04f 0900 	mov.w	r9, #0
 800e29a:	07eb      	lsls	r3, r5, #31
 800e29c:	d50a      	bpl.n	800e2b4 <__pow5mult+0x84>
 800e29e:	4639      	mov	r1, r7
 800e2a0:	4622      	mov	r2, r4
 800e2a2:	4630      	mov	r0, r6
 800e2a4:	f7ff ff1e 	bl	800e0e4 <__multiply>
 800e2a8:	4639      	mov	r1, r7
 800e2aa:	4680      	mov	r8, r0
 800e2ac:	4630      	mov	r0, r6
 800e2ae:	f7ff fe47 	bl	800df40 <_Bfree>
 800e2b2:	4647      	mov	r7, r8
 800e2b4:	106d      	asrs	r5, r5, #1
 800e2b6:	d00b      	beq.n	800e2d0 <__pow5mult+0xa0>
 800e2b8:	6820      	ldr	r0, [r4, #0]
 800e2ba:	b938      	cbnz	r0, 800e2cc <__pow5mult+0x9c>
 800e2bc:	4622      	mov	r2, r4
 800e2be:	4621      	mov	r1, r4
 800e2c0:	4630      	mov	r0, r6
 800e2c2:	f7ff ff0f 	bl	800e0e4 <__multiply>
 800e2c6:	6020      	str	r0, [r4, #0]
 800e2c8:	f8c0 9000 	str.w	r9, [r0]
 800e2cc:	4604      	mov	r4, r0
 800e2ce:	e7e4      	b.n	800e29a <__pow5mult+0x6a>
 800e2d0:	4638      	mov	r0, r7
 800e2d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2d6:	bf00      	nop
 800e2d8:	0800f658 	.word	0x0800f658
 800e2dc:	0800f47d 	.word	0x0800f47d
 800e2e0:	0800f504 	.word	0x0800f504

0800e2e4 <__lshift>:
 800e2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2e8:	460c      	mov	r4, r1
 800e2ea:	6849      	ldr	r1, [r1, #4]
 800e2ec:	6923      	ldr	r3, [r4, #16]
 800e2ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e2f2:	68a3      	ldr	r3, [r4, #8]
 800e2f4:	4607      	mov	r7, r0
 800e2f6:	4691      	mov	r9, r2
 800e2f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e2fc:	f108 0601 	add.w	r6, r8, #1
 800e300:	42b3      	cmp	r3, r6
 800e302:	db0b      	blt.n	800e31c <__lshift+0x38>
 800e304:	4638      	mov	r0, r7
 800e306:	f7ff fddb 	bl	800dec0 <_Balloc>
 800e30a:	4605      	mov	r5, r0
 800e30c:	b948      	cbnz	r0, 800e322 <__lshift+0x3e>
 800e30e:	4602      	mov	r2, r0
 800e310:	4b28      	ldr	r3, [pc, #160]	; (800e3b4 <__lshift+0xd0>)
 800e312:	4829      	ldr	r0, [pc, #164]	; (800e3b8 <__lshift+0xd4>)
 800e314:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e318:	f000 fa1a 	bl	800e750 <__assert_func>
 800e31c:	3101      	adds	r1, #1
 800e31e:	005b      	lsls	r3, r3, #1
 800e320:	e7ee      	b.n	800e300 <__lshift+0x1c>
 800e322:	2300      	movs	r3, #0
 800e324:	f100 0114 	add.w	r1, r0, #20
 800e328:	f100 0210 	add.w	r2, r0, #16
 800e32c:	4618      	mov	r0, r3
 800e32e:	4553      	cmp	r3, sl
 800e330:	db33      	blt.n	800e39a <__lshift+0xb6>
 800e332:	6920      	ldr	r0, [r4, #16]
 800e334:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e338:	f104 0314 	add.w	r3, r4, #20
 800e33c:	f019 091f 	ands.w	r9, r9, #31
 800e340:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e344:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e348:	d02b      	beq.n	800e3a2 <__lshift+0xbe>
 800e34a:	f1c9 0e20 	rsb	lr, r9, #32
 800e34e:	468a      	mov	sl, r1
 800e350:	2200      	movs	r2, #0
 800e352:	6818      	ldr	r0, [r3, #0]
 800e354:	fa00 f009 	lsl.w	r0, r0, r9
 800e358:	4302      	orrs	r2, r0
 800e35a:	f84a 2b04 	str.w	r2, [sl], #4
 800e35e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e362:	459c      	cmp	ip, r3
 800e364:	fa22 f20e 	lsr.w	r2, r2, lr
 800e368:	d8f3      	bhi.n	800e352 <__lshift+0x6e>
 800e36a:	ebac 0304 	sub.w	r3, ip, r4
 800e36e:	3b15      	subs	r3, #21
 800e370:	f023 0303 	bic.w	r3, r3, #3
 800e374:	3304      	adds	r3, #4
 800e376:	f104 0015 	add.w	r0, r4, #21
 800e37a:	4584      	cmp	ip, r0
 800e37c:	bf38      	it	cc
 800e37e:	2304      	movcc	r3, #4
 800e380:	50ca      	str	r2, [r1, r3]
 800e382:	b10a      	cbz	r2, 800e388 <__lshift+0xa4>
 800e384:	f108 0602 	add.w	r6, r8, #2
 800e388:	3e01      	subs	r6, #1
 800e38a:	4638      	mov	r0, r7
 800e38c:	612e      	str	r6, [r5, #16]
 800e38e:	4621      	mov	r1, r4
 800e390:	f7ff fdd6 	bl	800df40 <_Bfree>
 800e394:	4628      	mov	r0, r5
 800e396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e39a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e39e:	3301      	adds	r3, #1
 800e3a0:	e7c5      	b.n	800e32e <__lshift+0x4a>
 800e3a2:	3904      	subs	r1, #4
 800e3a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3a8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e3ac:	459c      	cmp	ip, r3
 800e3ae:	d8f9      	bhi.n	800e3a4 <__lshift+0xc0>
 800e3b0:	e7ea      	b.n	800e388 <__lshift+0xa4>
 800e3b2:	bf00      	nop
 800e3b4:	0800f4f3 	.word	0x0800f4f3
 800e3b8:	0800f504 	.word	0x0800f504

0800e3bc <__mcmp>:
 800e3bc:	b530      	push	{r4, r5, lr}
 800e3be:	6902      	ldr	r2, [r0, #16]
 800e3c0:	690c      	ldr	r4, [r1, #16]
 800e3c2:	1b12      	subs	r2, r2, r4
 800e3c4:	d10e      	bne.n	800e3e4 <__mcmp+0x28>
 800e3c6:	f100 0314 	add.w	r3, r0, #20
 800e3ca:	3114      	adds	r1, #20
 800e3cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e3d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e3d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e3d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e3dc:	42a5      	cmp	r5, r4
 800e3de:	d003      	beq.n	800e3e8 <__mcmp+0x2c>
 800e3e0:	d305      	bcc.n	800e3ee <__mcmp+0x32>
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	4610      	mov	r0, r2
 800e3e6:	bd30      	pop	{r4, r5, pc}
 800e3e8:	4283      	cmp	r3, r0
 800e3ea:	d3f3      	bcc.n	800e3d4 <__mcmp+0x18>
 800e3ec:	e7fa      	b.n	800e3e4 <__mcmp+0x28>
 800e3ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e3f2:	e7f7      	b.n	800e3e4 <__mcmp+0x28>

0800e3f4 <__mdiff>:
 800e3f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f8:	460c      	mov	r4, r1
 800e3fa:	4606      	mov	r6, r0
 800e3fc:	4611      	mov	r1, r2
 800e3fe:	4620      	mov	r0, r4
 800e400:	4617      	mov	r7, r2
 800e402:	f7ff ffdb 	bl	800e3bc <__mcmp>
 800e406:	1e05      	subs	r5, r0, #0
 800e408:	d110      	bne.n	800e42c <__mdiff+0x38>
 800e40a:	4629      	mov	r1, r5
 800e40c:	4630      	mov	r0, r6
 800e40e:	f7ff fd57 	bl	800dec0 <_Balloc>
 800e412:	b930      	cbnz	r0, 800e422 <__mdiff+0x2e>
 800e414:	4b39      	ldr	r3, [pc, #228]	; (800e4fc <__mdiff+0x108>)
 800e416:	4602      	mov	r2, r0
 800e418:	f240 2132 	movw	r1, #562	; 0x232
 800e41c:	4838      	ldr	r0, [pc, #224]	; (800e500 <__mdiff+0x10c>)
 800e41e:	f000 f997 	bl	800e750 <__assert_func>
 800e422:	2301      	movs	r3, #1
 800e424:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e428:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e42c:	bfa4      	itt	ge
 800e42e:	463b      	movge	r3, r7
 800e430:	4627      	movge	r7, r4
 800e432:	4630      	mov	r0, r6
 800e434:	6879      	ldr	r1, [r7, #4]
 800e436:	bfa6      	itte	ge
 800e438:	461c      	movge	r4, r3
 800e43a:	2500      	movge	r5, #0
 800e43c:	2501      	movlt	r5, #1
 800e43e:	f7ff fd3f 	bl	800dec0 <_Balloc>
 800e442:	b920      	cbnz	r0, 800e44e <__mdiff+0x5a>
 800e444:	4b2d      	ldr	r3, [pc, #180]	; (800e4fc <__mdiff+0x108>)
 800e446:	4602      	mov	r2, r0
 800e448:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e44c:	e7e6      	b.n	800e41c <__mdiff+0x28>
 800e44e:	693e      	ldr	r6, [r7, #16]
 800e450:	60c5      	str	r5, [r0, #12]
 800e452:	6925      	ldr	r5, [r4, #16]
 800e454:	f107 0114 	add.w	r1, r7, #20
 800e458:	f104 0914 	add.w	r9, r4, #20
 800e45c:	f100 0e14 	add.w	lr, r0, #20
 800e460:	f107 0210 	add.w	r2, r7, #16
 800e464:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e468:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e46c:	46f2      	mov	sl, lr
 800e46e:	2700      	movs	r7, #0
 800e470:	f859 3b04 	ldr.w	r3, [r9], #4
 800e474:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e478:	fa1f f883 	uxth.w	r8, r3
 800e47c:	fa17 f78b 	uxtah	r7, r7, fp
 800e480:	0c1b      	lsrs	r3, r3, #16
 800e482:	eba7 0808 	sub.w	r8, r7, r8
 800e486:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e48a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e48e:	fa1f f888 	uxth.w	r8, r8
 800e492:	141f      	asrs	r7, r3, #16
 800e494:	454d      	cmp	r5, r9
 800e496:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e49a:	f84a 3b04 	str.w	r3, [sl], #4
 800e49e:	d8e7      	bhi.n	800e470 <__mdiff+0x7c>
 800e4a0:	1b2b      	subs	r3, r5, r4
 800e4a2:	3b15      	subs	r3, #21
 800e4a4:	f023 0303 	bic.w	r3, r3, #3
 800e4a8:	3304      	adds	r3, #4
 800e4aa:	3415      	adds	r4, #21
 800e4ac:	42a5      	cmp	r5, r4
 800e4ae:	bf38      	it	cc
 800e4b0:	2304      	movcc	r3, #4
 800e4b2:	4419      	add	r1, r3
 800e4b4:	4473      	add	r3, lr
 800e4b6:	469e      	mov	lr, r3
 800e4b8:	460d      	mov	r5, r1
 800e4ba:	4565      	cmp	r5, ip
 800e4bc:	d30e      	bcc.n	800e4dc <__mdiff+0xe8>
 800e4be:	f10c 0203 	add.w	r2, ip, #3
 800e4c2:	1a52      	subs	r2, r2, r1
 800e4c4:	f022 0203 	bic.w	r2, r2, #3
 800e4c8:	3903      	subs	r1, #3
 800e4ca:	458c      	cmp	ip, r1
 800e4cc:	bf38      	it	cc
 800e4ce:	2200      	movcc	r2, #0
 800e4d0:	441a      	add	r2, r3
 800e4d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e4d6:	b17b      	cbz	r3, 800e4f8 <__mdiff+0x104>
 800e4d8:	6106      	str	r6, [r0, #16]
 800e4da:	e7a5      	b.n	800e428 <__mdiff+0x34>
 800e4dc:	f855 8b04 	ldr.w	r8, [r5], #4
 800e4e0:	fa17 f488 	uxtah	r4, r7, r8
 800e4e4:	1422      	asrs	r2, r4, #16
 800e4e6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e4ea:	b2a4      	uxth	r4, r4
 800e4ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e4f0:	f84e 4b04 	str.w	r4, [lr], #4
 800e4f4:	1417      	asrs	r7, r2, #16
 800e4f6:	e7e0      	b.n	800e4ba <__mdiff+0xc6>
 800e4f8:	3e01      	subs	r6, #1
 800e4fa:	e7ea      	b.n	800e4d2 <__mdiff+0xde>
 800e4fc:	0800f4f3 	.word	0x0800f4f3
 800e500:	0800f504 	.word	0x0800f504

0800e504 <__d2b>:
 800e504:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e508:	4689      	mov	r9, r1
 800e50a:	2101      	movs	r1, #1
 800e50c:	ec57 6b10 	vmov	r6, r7, d0
 800e510:	4690      	mov	r8, r2
 800e512:	f7ff fcd5 	bl	800dec0 <_Balloc>
 800e516:	4604      	mov	r4, r0
 800e518:	b930      	cbnz	r0, 800e528 <__d2b+0x24>
 800e51a:	4602      	mov	r2, r0
 800e51c:	4b25      	ldr	r3, [pc, #148]	; (800e5b4 <__d2b+0xb0>)
 800e51e:	4826      	ldr	r0, [pc, #152]	; (800e5b8 <__d2b+0xb4>)
 800e520:	f240 310a 	movw	r1, #778	; 0x30a
 800e524:	f000 f914 	bl	800e750 <__assert_func>
 800e528:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e52c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e530:	bb35      	cbnz	r5, 800e580 <__d2b+0x7c>
 800e532:	2e00      	cmp	r6, #0
 800e534:	9301      	str	r3, [sp, #4]
 800e536:	d028      	beq.n	800e58a <__d2b+0x86>
 800e538:	4668      	mov	r0, sp
 800e53a:	9600      	str	r6, [sp, #0]
 800e53c:	f7ff fd8c 	bl	800e058 <__lo0bits>
 800e540:	9900      	ldr	r1, [sp, #0]
 800e542:	b300      	cbz	r0, 800e586 <__d2b+0x82>
 800e544:	9a01      	ldr	r2, [sp, #4]
 800e546:	f1c0 0320 	rsb	r3, r0, #32
 800e54a:	fa02 f303 	lsl.w	r3, r2, r3
 800e54e:	430b      	orrs	r3, r1
 800e550:	40c2      	lsrs	r2, r0
 800e552:	6163      	str	r3, [r4, #20]
 800e554:	9201      	str	r2, [sp, #4]
 800e556:	9b01      	ldr	r3, [sp, #4]
 800e558:	61a3      	str	r3, [r4, #24]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	bf14      	ite	ne
 800e55e:	2202      	movne	r2, #2
 800e560:	2201      	moveq	r2, #1
 800e562:	6122      	str	r2, [r4, #16]
 800e564:	b1d5      	cbz	r5, 800e59c <__d2b+0x98>
 800e566:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e56a:	4405      	add	r5, r0
 800e56c:	f8c9 5000 	str.w	r5, [r9]
 800e570:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e574:	f8c8 0000 	str.w	r0, [r8]
 800e578:	4620      	mov	r0, r4
 800e57a:	b003      	add	sp, #12
 800e57c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e584:	e7d5      	b.n	800e532 <__d2b+0x2e>
 800e586:	6161      	str	r1, [r4, #20]
 800e588:	e7e5      	b.n	800e556 <__d2b+0x52>
 800e58a:	a801      	add	r0, sp, #4
 800e58c:	f7ff fd64 	bl	800e058 <__lo0bits>
 800e590:	9b01      	ldr	r3, [sp, #4]
 800e592:	6163      	str	r3, [r4, #20]
 800e594:	2201      	movs	r2, #1
 800e596:	6122      	str	r2, [r4, #16]
 800e598:	3020      	adds	r0, #32
 800e59a:	e7e3      	b.n	800e564 <__d2b+0x60>
 800e59c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e5a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e5a4:	f8c9 0000 	str.w	r0, [r9]
 800e5a8:	6918      	ldr	r0, [r3, #16]
 800e5aa:	f7ff fd35 	bl	800e018 <__hi0bits>
 800e5ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e5b2:	e7df      	b.n	800e574 <__d2b+0x70>
 800e5b4:	0800f4f3 	.word	0x0800f4f3
 800e5b8:	0800f504 	.word	0x0800f504

0800e5bc <_calloc_r>:
 800e5bc:	b513      	push	{r0, r1, r4, lr}
 800e5be:	434a      	muls	r2, r1
 800e5c0:	4611      	mov	r1, r2
 800e5c2:	9201      	str	r2, [sp, #4]
 800e5c4:	f000 f85a 	bl	800e67c <_malloc_r>
 800e5c8:	4604      	mov	r4, r0
 800e5ca:	b118      	cbz	r0, 800e5d4 <_calloc_r+0x18>
 800e5cc:	9a01      	ldr	r2, [sp, #4]
 800e5ce:	2100      	movs	r1, #0
 800e5d0:	f7fe fa02 	bl	800c9d8 <memset>
 800e5d4:	4620      	mov	r0, r4
 800e5d6:	b002      	add	sp, #8
 800e5d8:	bd10      	pop	{r4, pc}
	...

0800e5dc <_free_r>:
 800e5dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e5de:	2900      	cmp	r1, #0
 800e5e0:	d048      	beq.n	800e674 <_free_r+0x98>
 800e5e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5e6:	9001      	str	r0, [sp, #4]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	f1a1 0404 	sub.w	r4, r1, #4
 800e5ee:	bfb8      	it	lt
 800e5f0:	18e4      	addlt	r4, r4, r3
 800e5f2:	f000 f8ef 	bl	800e7d4 <__malloc_lock>
 800e5f6:	4a20      	ldr	r2, [pc, #128]	; (800e678 <_free_r+0x9c>)
 800e5f8:	9801      	ldr	r0, [sp, #4]
 800e5fa:	6813      	ldr	r3, [r2, #0]
 800e5fc:	4615      	mov	r5, r2
 800e5fe:	b933      	cbnz	r3, 800e60e <_free_r+0x32>
 800e600:	6063      	str	r3, [r4, #4]
 800e602:	6014      	str	r4, [r2, #0]
 800e604:	b003      	add	sp, #12
 800e606:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e60a:	f000 b8e9 	b.w	800e7e0 <__malloc_unlock>
 800e60e:	42a3      	cmp	r3, r4
 800e610:	d90b      	bls.n	800e62a <_free_r+0x4e>
 800e612:	6821      	ldr	r1, [r4, #0]
 800e614:	1862      	adds	r2, r4, r1
 800e616:	4293      	cmp	r3, r2
 800e618:	bf04      	itt	eq
 800e61a:	681a      	ldreq	r2, [r3, #0]
 800e61c:	685b      	ldreq	r3, [r3, #4]
 800e61e:	6063      	str	r3, [r4, #4]
 800e620:	bf04      	itt	eq
 800e622:	1852      	addeq	r2, r2, r1
 800e624:	6022      	streq	r2, [r4, #0]
 800e626:	602c      	str	r4, [r5, #0]
 800e628:	e7ec      	b.n	800e604 <_free_r+0x28>
 800e62a:	461a      	mov	r2, r3
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	b10b      	cbz	r3, 800e634 <_free_r+0x58>
 800e630:	42a3      	cmp	r3, r4
 800e632:	d9fa      	bls.n	800e62a <_free_r+0x4e>
 800e634:	6811      	ldr	r1, [r2, #0]
 800e636:	1855      	adds	r5, r2, r1
 800e638:	42a5      	cmp	r5, r4
 800e63a:	d10b      	bne.n	800e654 <_free_r+0x78>
 800e63c:	6824      	ldr	r4, [r4, #0]
 800e63e:	4421      	add	r1, r4
 800e640:	1854      	adds	r4, r2, r1
 800e642:	42a3      	cmp	r3, r4
 800e644:	6011      	str	r1, [r2, #0]
 800e646:	d1dd      	bne.n	800e604 <_free_r+0x28>
 800e648:	681c      	ldr	r4, [r3, #0]
 800e64a:	685b      	ldr	r3, [r3, #4]
 800e64c:	6053      	str	r3, [r2, #4]
 800e64e:	4421      	add	r1, r4
 800e650:	6011      	str	r1, [r2, #0]
 800e652:	e7d7      	b.n	800e604 <_free_r+0x28>
 800e654:	d902      	bls.n	800e65c <_free_r+0x80>
 800e656:	230c      	movs	r3, #12
 800e658:	6003      	str	r3, [r0, #0]
 800e65a:	e7d3      	b.n	800e604 <_free_r+0x28>
 800e65c:	6825      	ldr	r5, [r4, #0]
 800e65e:	1961      	adds	r1, r4, r5
 800e660:	428b      	cmp	r3, r1
 800e662:	bf04      	itt	eq
 800e664:	6819      	ldreq	r1, [r3, #0]
 800e666:	685b      	ldreq	r3, [r3, #4]
 800e668:	6063      	str	r3, [r4, #4]
 800e66a:	bf04      	itt	eq
 800e66c:	1949      	addeq	r1, r1, r5
 800e66e:	6021      	streq	r1, [r4, #0]
 800e670:	6054      	str	r4, [r2, #4]
 800e672:	e7c7      	b.n	800e604 <_free_r+0x28>
 800e674:	b003      	add	sp, #12
 800e676:	bd30      	pop	{r4, r5, pc}
 800e678:	24000ac4 	.word	0x24000ac4

0800e67c <_malloc_r>:
 800e67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e67e:	1ccd      	adds	r5, r1, #3
 800e680:	f025 0503 	bic.w	r5, r5, #3
 800e684:	3508      	adds	r5, #8
 800e686:	2d0c      	cmp	r5, #12
 800e688:	bf38      	it	cc
 800e68a:	250c      	movcc	r5, #12
 800e68c:	2d00      	cmp	r5, #0
 800e68e:	4606      	mov	r6, r0
 800e690:	db01      	blt.n	800e696 <_malloc_r+0x1a>
 800e692:	42a9      	cmp	r1, r5
 800e694:	d903      	bls.n	800e69e <_malloc_r+0x22>
 800e696:	230c      	movs	r3, #12
 800e698:	6033      	str	r3, [r6, #0]
 800e69a:	2000      	movs	r0, #0
 800e69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e69e:	f000 f899 	bl	800e7d4 <__malloc_lock>
 800e6a2:	4921      	ldr	r1, [pc, #132]	; (800e728 <_malloc_r+0xac>)
 800e6a4:	680a      	ldr	r2, [r1, #0]
 800e6a6:	4614      	mov	r4, r2
 800e6a8:	b99c      	cbnz	r4, 800e6d2 <_malloc_r+0x56>
 800e6aa:	4f20      	ldr	r7, [pc, #128]	; (800e72c <_malloc_r+0xb0>)
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	b923      	cbnz	r3, 800e6ba <_malloc_r+0x3e>
 800e6b0:	4621      	mov	r1, r4
 800e6b2:	4630      	mov	r0, r6
 800e6b4:	f000 f83c 	bl	800e730 <_sbrk_r>
 800e6b8:	6038      	str	r0, [r7, #0]
 800e6ba:	4629      	mov	r1, r5
 800e6bc:	4630      	mov	r0, r6
 800e6be:	f000 f837 	bl	800e730 <_sbrk_r>
 800e6c2:	1c43      	adds	r3, r0, #1
 800e6c4:	d123      	bne.n	800e70e <_malloc_r+0x92>
 800e6c6:	230c      	movs	r3, #12
 800e6c8:	6033      	str	r3, [r6, #0]
 800e6ca:	4630      	mov	r0, r6
 800e6cc:	f000 f888 	bl	800e7e0 <__malloc_unlock>
 800e6d0:	e7e3      	b.n	800e69a <_malloc_r+0x1e>
 800e6d2:	6823      	ldr	r3, [r4, #0]
 800e6d4:	1b5b      	subs	r3, r3, r5
 800e6d6:	d417      	bmi.n	800e708 <_malloc_r+0x8c>
 800e6d8:	2b0b      	cmp	r3, #11
 800e6da:	d903      	bls.n	800e6e4 <_malloc_r+0x68>
 800e6dc:	6023      	str	r3, [r4, #0]
 800e6de:	441c      	add	r4, r3
 800e6e0:	6025      	str	r5, [r4, #0]
 800e6e2:	e004      	b.n	800e6ee <_malloc_r+0x72>
 800e6e4:	6863      	ldr	r3, [r4, #4]
 800e6e6:	42a2      	cmp	r2, r4
 800e6e8:	bf0c      	ite	eq
 800e6ea:	600b      	streq	r3, [r1, #0]
 800e6ec:	6053      	strne	r3, [r2, #4]
 800e6ee:	4630      	mov	r0, r6
 800e6f0:	f000 f876 	bl	800e7e0 <__malloc_unlock>
 800e6f4:	f104 000b 	add.w	r0, r4, #11
 800e6f8:	1d23      	adds	r3, r4, #4
 800e6fa:	f020 0007 	bic.w	r0, r0, #7
 800e6fe:	1ac2      	subs	r2, r0, r3
 800e700:	d0cc      	beq.n	800e69c <_malloc_r+0x20>
 800e702:	1a1b      	subs	r3, r3, r0
 800e704:	50a3      	str	r3, [r4, r2]
 800e706:	e7c9      	b.n	800e69c <_malloc_r+0x20>
 800e708:	4622      	mov	r2, r4
 800e70a:	6864      	ldr	r4, [r4, #4]
 800e70c:	e7cc      	b.n	800e6a8 <_malloc_r+0x2c>
 800e70e:	1cc4      	adds	r4, r0, #3
 800e710:	f024 0403 	bic.w	r4, r4, #3
 800e714:	42a0      	cmp	r0, r4
 800e716:	d0e3      	beq.n	800e6e0 <_malloc_r+0x64>
 800e718:	1a21      	subs	r1, r4, r0
 800e71a:	4630      	mov	r0, r6
 800e71c:	f000 f808 	bl	800e730 <_sbrk_r>
 800e720:	3001      	adds	r0, #1
 800e722:	d1dd      	bne.n	800e6e0 <_malloc_r+0x64>
 800e724:	e7cf      	b.n	800e6c6 <_malloc_r+0x4a>
 800e726:	bf00      	nop
 800e728:	24000ac4 	.word	0x24000ac4
 800e72c:	24000ac8 	.word	0x24000ac8

0800e730 <_sbrk_r>:
 800e730:	b538      	push	{r3, r4, r5, lr}
 800e732:	4d06      	ldr	r5, [pc, #24]	; (800e74c <_sbrk_r+0x1c>)
 800e734:	2300      	movs	r3, #0
 800e736:	4604      	mov	r4, r0
 800e738:	4608      	mov	r0, r1
 800e73a:	602b      	str	r3, [r5, #0]
 800e73c:	f7f5 f84a 	bl	80037d4 <_sbrk>
 800e740:	1c43      	adds	r3, r0, #1
 800e742:	d102      	bne.n	800e74a <_sbrk_r+0x1a>
 800e744:	682b      	ldr	r3, [r5, #0]
 800e746:	b103      	cbz	r3, 800e74a <_sbrk_r+0x1a>
 800e748:	6023      	str	r3, [r4, #0]
 800e74a:	bd38      	pop	{r3, r4, r5, pc}
 800e74c:	24000ad0 	.word	0x24000ad0

0800e750 <__assert_func>:
 800e750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e752:	4614      	mov	r4, r2
 800e754:	461a      	mov	r2, r3
 800e756:	4b09      	ldr	r3, [pc, #36]	; (800e77c <__assert_func+0x2c>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	4605      	mov	r5, r0
 800e75c:	68d8      	ldr	r0, [r3, #12]
 800e75e:	b14c      	cbz	r4, 800e774 <__assert_func+0x24>
 800e760:	4b07      	ldr	r3, [pc, #28]	; (800e780 <__assert_func+0x30>)
 800e762:	9100      	str	r1, [sp, #0]
 800e764:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e768:	4906      	ldr	r1, [pc, #24]	; (800e784 <__assert_func+0x34>)
 800e76a:	462b      	mov	r3, r5
 800e76c:	f000 f80e 	bl	800e78c <fiprintf>
 800e770:	f000 fa64 	bl	800ec3c <abort>
 800e774:	4b04      	ldr	r3, [pc, #16]	; (800e788 <__assert_func+0x38>)
 800e776:	461c      	mov	r4, r3
 800e778:	e7f3      	b.n	800e762 <__assert_func+0x12>
 800e77a:	bf00      	nop
 800e77c:	24000038 	.word	0x24000038
 800e780:	0800f664 	.word	0x0800f664
 800e784:	0800f671 	.word	0x0800f671
 800e788:	0800f69f 	.word	0x0800f69f

0800e78c <fiprintf>:
 800e78c:	b40e      	push	{r1, r2, r3}
 800e78e:	b503      	push	{r0, r1, lr}
 800e790:	4601      	mov	r1, r0
 800e792:	ab03      	add	r3, sp, #12
 800e794:	4805      	ldr	r0, [pc, #20]	; (800e7ac <fiprintf+0x20>)
 800e796:	f853 2b04 	ldr.w	r2, [r3], #4
 800e79a:	6800      	ldr	r0, [r0, #0]
 800e79c:	9301      	str	r3, [sp, #4]
 800e79e:	f000 f84f 	bl	800e840 <_vfiprintf_r>
 800e7a2:	b002      	add	sp, #8
 800e7a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7a8:	b003      	add	sp, #12
 800e7aa:	4770      	bx	lr
 800e7ac:	24000038 	.word	0x24000038

0800e7b0 <__ascii_mbtowc>:
 800e7b0:	b082      	sub	sp, #8
 800e7b2:	b901      	cbnz	r1, 800e7b6 <__ascii_mbtowc+0x6>
 800e7b4:	a901      	add	r1, sp, #4
 800e7b6:	b142      	cbz	r2, 800e7ca <__ascii_mbtowc+0x1a>
 800e7b8:	b14b      	cbz	r3, 800e7ce <__ascii_mbtowc+0x1e>
 800e7ba:	7813      	ldrb	r3, [r2, #0]
 800e7bc:	600b      	str	r3, [r1, #0]
 800e7be:	7812      	ldrb	r2, [r2, #0]
 800e7c0:	1e10      	subs	r0, r2, #0
 800e7c2:	bf18      	it	ne
 800e7c4:	2001      	movne	r0, #1
 800e7c6:	b002      	add	sp, #8
 800e7c8:	4770      	bx	lr
 800e7ca:	4610      	mov	r0, r2
 800e7cc:	e7fb      	b.n	800e7c6 <__ascii_mbtowc+0x16>
 800e7ce:	f06f 0001 	mvn.w	r0, #1
 800e7d2:	e7f8      	b.n	800e7c6 <__ascii_mbtowc+0x16>

0800e7d4 <__malloc_lock>:
 800e7d4:	4801      	ldr	r0, [pc, #4]	; (800e7dc <__malloc_lock+0x8>)
 800e7d6:	f000 bbf1 	b.w	800efbc <__retarget_lock_acquire_recursive>
 800e7da:	bf00      	nop
 800e7dc:	24000ad8 	.word	0x24000ad8

0800e7e0 <__malloc_unlock>:
 800e7e0:	4801      	ldr	r0, [pc, #4]	; (800e7e8 <__malloc_unlock+0x8>)
 800e7e2:	f000 bbec 	b.w	800efbe <__retarget_lock_release_recursive>
 800e7e6:	bf00      	nop
 800e7e8:	24000ad8 	.word	0x24000ad8

0800e7ec <__sfputc_r>:
 800e7ec:	6893      	ldr	r3, [r2, #8]
 800e7ee:	3b01      	subs	r3, #1
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	b410      	push	{r4}
 800e7f4:	6093      	str	r3, [r2, #8]
 800e7f6:	da08      	bge.n	800e80a <__sfputc_r+0x1e>
 800e7f8:	6994      	ldr	r4, [r2, #24]
 800e7fa:	42a3      	cmp	r3, r4
 800e7fc:	db01      	blt.n	800e802 <__sfputc_r+0x16>
 800e7fe:	290a      	cmp	r1, #10
 800e800:	d103      	bne.n	800e80a <__sfputc_r+0x1e>
 800e802:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e806:	f000 b94b 	b.w	800eaa0 <__swbuf_r>
 800e80a:	6813      	ldr	r3, [r2, #0]
 800e80c:	1c58      	adds	r0, r3, #1
 800e80e:	6010      	str	r0, [r2, #0]
 800e810:	7019      	strb	r1, [r3, #0]
 800e812:	4608      	mov	r0, r1
 800e814:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e818:	4770      	bx	lr

0800e81a <__sfputs_r>:
 800e81a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e81c:	4606      	mov	r6, r0
 800e81e:	460f      	mov	r7, r1
 800e820:	4614      	mov	r4, r2
 800e822:	18d5      	adds	r5, r2, r3
 800e824:	42ac      	cmp	r4, r5
 800e826:	d101      	bne.n	800e82c <__sfputs_r+0x12>
 800e828:	2000      	movs	r0, #0
 800e82a:	e007      	b.n	800e83c <__sfputs_r+0x22>
 800e82c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e830:	463a      	mov	r2, r7
 800e832:	4630      	mov	r0, r6
 800e834:	f7ff ffda 	bl	800e7ec <__sfputc_r>
 800e838:	1c43      	adds	r3, r0, #1
 800e83a:	d1f3      	bne.n	800e824 <__sfputs_r+0xa>
 800e83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e840 <_vfiprintf_r>:
 800e840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e844:	460d      	mov	r5, r1
 800e846:	b09d      	sub	sp, #116	; 0x74
 800e848:	4614      	mov	r4, r2
 800e84a:	4698      	mov	r8, r3
 800e84c:	4606      	mov	r6, r0
 800e84e:	b118      	cbz	r0, 800e858 <_vfiprintf_r+0x18>
 800e850:	6983      	ldr	r3, [r0, #24]
 800e852:	b90b      	cbnz	r3, 800e858 <_vfiprintf_r+0x18>
 800e854:	f000 fb14 	bl	800ee80 <__sinit>
 800e858:	4b89      	ldr	r3, [pc, #548]	; (800ea80 <_vfiprintf_r+0x240>)
 800e85a:	429d      	cmp	r5, r3
 800e85c:	d11b      	bne.n	800e896 <_vfiprintf_r+0x56>
 800e85e:	6875      	ldr	r5, [r6, #4]
 800e860:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e862:	07d9      	lsls	r1, r3, #31
 800e864:	d405      	bmi.n	800e872 <_vfiprintf_r+0x32>
 800e866:	89ab      	ldrh	r3, [r5, #12]
 800e868:	059a      	lsls	r2, r3, #22
 800e86a:	d402      	bmi.n	800e872 <_vfiprintf_r+0x32>
 800e86c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e86e:	f000 fba5 	bl	800efbc <__retarget_lock_acquire_recursive>
 800e872:	89ab      	ldrh	r3, [r5, #12]
 800e874:	071b      	lsls	r3, r3, #28
 800e876:	d501      	bpl.n	800e87c <_vfiprintf_r+0x3c>
 800e878:	692b      	ldr	r3, [r5, #16]
 800e87a:	b9eb      	cbnz	r3, 800e8b8 <_vfiprintf_r+0x78>
 800e87c:	4629      	mov	r1, r5
 800e87e:	4630      	mov	r0, r6
 800e880:	f000 f96e 	bl	800eb60 <__swsetup_r>
 800e884:	b1c0      	cbz	r0, 800e8b8 <_vfiprintf_r+0x78>
 800e886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e888:	07dc      	lsls	r4, r3, #31
 800e88a:	d50e      	bpl.n	800e8aa <_vfiprintf_r+0x6a>
 800e88c:	f04f 30ff 	mov.w	r0, #4294967295
 800e890:	b01d      	add	sp, #116	; 0x74
 800e892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e896:	4b7b      	ldr	r3, [pc, #492]	; (800ea84 <_vfiprintf_r+0x244>)
 800e898:	429d      	cmp	r5, r3
 800e89a:	d101      	bne.n	800e8a0 <_vfiprintf_r+0x60>
 800e89c:	68b5      	ldr	r5, [r6, #8]
 800e89e:	e7df      	b.n	800e860 <_vfiprintf_r+0x20>
 800e8a0:	4b79      	ldr	r3, [pc, #484]	; (800ea88 <_vfiprintf_r+0x248>)
 800e8a2:	429d      	cmp	r5, r3
 800e8a4:	bf08      	it	eq
 800e8a6:	68f5      	ldreq	r5, [r6, #12]
 800e8a8:	e7da      	b.n	800e860 <_vfiprintf_r+0x20>
 800e8aa:	89ab      	ldrh	r3, [r5, #12]
 800e8ac:	0598      	lsls	r0, r3, #22
 800e8ae:	d4ed      	bmi.n	800e88c <_vfiprintf_r+0x4c>
 800e8b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8b2:	f000 fb84 	bl	800efbe <__retarget_lock_release_recursive>
 800e8b6:	e7e9      	b.n	800e88c <_vfiprintf_r+0x4c>
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	9309      	str	r3, [sp, #36]	; 0x24
 800e8bc:	2320      	movs	r3, #32
 800e8be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e8c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8c6:	2330      	movs	r3, #48	; 0x30
 800e8c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ea8c <_vfiprintf_r+0x24c>
 800e8cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e8d0:	f04f 0901 	mov.w	r9, #1
 800e8d4:	4623      	mov	r3, r4
 800e8d6:	469a      	mov	sl, r3
 800e8d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8dc:	b10a      	cbz	r2, 800e8e2 <_vfiprintf_r+0xa2>
 800e8de:	2a25      	cmp	r2, #37	; 0x25
 800e8e0:	d1f9      	bne.n	800e8d6 <_vfiprintf_r+0x96>
 800e8e2:	ebba 0b04 	subs.w	fp, sl, r4
 800e8e6:	d00b      	beq.n	800e900 <_vfiprintf_r+0xc0>
 800e8e8:	465b      	mov	r3, fp
 800e8ea:	4622      	mov	r2, r4
 800e8ec:	4629      	mov	r1, r5
 800e8ee:	4630      	mov	r0, r6
 800e8f0:	f7ff ff93 	bl	800e81a <__sfputs_r>
 800e8f4:	3001      	adds	r0, #1
 800e8f6:	f000 80aa 	beq.w	800ea4e <_vfiprintf_r+0x20e>
 800e8fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8fc:	445a      	add	r2, fp
 800e8fe:	9209      	str	r2, [sp, #36]	; 0x24
 800e900:	f89a 3000 	ldrb.w	r3, [sl]
 800e904:	2b00      	cmp	r3, #0
 800e906:	f000 80a2 	beq.w	800ea4e <_vfiprintf_r+0x20e>
 800e90a:	2300      	movs	r3, #0
 800e90c:	f04f 32ff 	mov.w	r2, #4294967295
 800e910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e914:	f10a 0a01 	add.w	sl, sl, #1
 800e918:	9304      	str	r3, [sp, #16]
 800e91a:	9307      	str	r3, [sp, #28]
 800e91c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e920:	931a      	str	r3, [sp, #104]	; 0x68
 800e922:	4654      	mov	r4, sl
 800e924:	2205      	movs	r2, #5
 800e926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e92a:	4858      	ldr	r0, [pc, #352]	; (800ea8c <_vfiprintf_r+0x24c>)
 800e92c:	f7f1 fce0 	bl	80002f0 <memchr>
 800e930:	9a04      	ldr	r2, [sp, #16]
 800e932:	b9d8      	cbnz	r0, 800e96c <_vfiprintf_r+0x12c>
 800e934:	06d1      	lsls	r1, r2, #27
 800e936:	bf44      	itt	mi
 800e938:	2320      	movmi	r3, #32
 800e93a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e93e:	0713      	lsls	r3, r2, #28
 800e940:	bf44      	itt	mi
 800e942:	232b      	movmi	r3, #43	; 0x2b
 800e944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e948:	f89a 3000 	ldrb.w	r3, [sl]
 800e94c:	2b2a      	cmp	r3, #42	; 0x2a
 800e94e:	d015      	beq.n	800e97c <_vfiprintf_r+0x13c>
 800e950:	9a07      	ldr	r2, [sp, #28]
 800e952:	4654      	mov	r4, sl
 800e954:	2000      	movs	r0, #0
 800e956:	f04f 0c0a 	mov.w	ip, #10
 800e95a:	4621      	mov	r1, r4
 800e95c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e960:	3b30      	subs	r3, #48	; 0x30
 800e962:	2b09      	cmp	r3, #9
 800e964:	d94e      	bls.n	800ea04 <_vfiprintf_r+0x1c4>
 800e966:	b1b0      	cbz	r0, 800e996 <_vfiprintf_r+0x156>
 800e968:	9207      	str	r2, [sp, #28]
 800e96a:	e014      	b.n	800e996 <_vfiprintf_r+0x156>
 800e96c:	eba0 0308 	sub.w	r3, r0, r8
 800e970:	fa09 f303 	lsl.w	r3, r9, r3
 800e974:	4313      	orrs	r3, r2
 800e976:	9304      	str	r3, [sp, #16]
 800e978:	46a2      	mov	sl, r4
 800e97a:	e7d2      	b.n	800e922 <_vfiprintf_r+0xe2>
 800e97c:	9b03      	ldr	r3, [sp, #12]
 800e97e:	1d19      	adds	r1, r3, #4
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	9103      	str	r1, [sp, #12]
 800e984:	2b00      	cmp	r3, #0
 800e986:	bfbb      	ittet	lt
 800e988:	425b      	neglt	r3, r3
 800e98a:	f042 0202 	orrlt.w	r2, r2, #2
 800e98e:	9307      	strge	r3, [sp, #28]
 800e990:	9307      	strlt	r3, [sp, #28]
 800e992:	bfb8      	it	lt
 800e994:	9204      	strlt	r2, [sp, #16]
 800e996:	7823      	ldrb	r3, [r4, #0]
 800e998:	2b2e      	cmp	r3, #46	; 0x2e
 800e99a:	d10c      	bne.n	800e9b6 <_vfiprintf_r+0x176>
 800e99c:	7863      	ldrb	r3, [r4, #1]
 800e99e:	2b2a      	cmp	r3, #42	; 0x2a
 800e9a0:	d135      	bne.n	800ea0e <_vfiprintf_r+0x1ce>
 800e9a2:	9b03      	ldr	r3, [sp, #12]
 800e9a4:	1d1a      	adds	r2, r3, #4
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	9203      	str	r2, [sp, #12]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	bfb8      	it	lt
 800e9ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800e9b2:	3402      	adds	r4, #2
 800e9b4:	9305      	str	r3, [sp, #20]
 800e9b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ea9c <_vfiprintf_r+0x25c>
 800e9ba:	7821      	ldrb	r1, [r4, #0]
 800e9bc:	2203      	movs	r2, #3
 800e9be:	4650      	mov	r0, sl
 800e9c0:	f7f1 fc96 	bl	80002f0 <memchr>
 800e9c4:	b140      	cbz	r0, 800e9d8 <_vfiprintf_r+0x198>
 800e9c6:	2340      	movs	r3, #64	; 0x40
 800e9c8:	eba0 000a 	sub.w	r0, r0, sl
 800e9cc:	fa03 f000 	lsl.w	r0, r3, r0
 800e9d0:	9b04      	ldr	r3, [sp, #16]
 800e9d2:	4303      	orrs	r3, r0
 800e9d4:	3401      	adds	r4, #1
 800e9d6:	9304      	str	r3, [sp, #16]
 800e9d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9dc:	482c      	ldr	r0, [pc, #176]	; (800ea90 <_vfiprintf_r+0x250>)
 800e9de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e9e2:	2206      	movs	r2, #6
 800e9e4:	f7f1 fc84 	bl	80002f0 <memchr>
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	d03f      	beq.n	800ea6c <_vfiprintf_r+0x22c>
 800e9ec:	4b29      	ldr	r3, [pc, #164]	; (800ea94 <_vfiprintf_r+0x254>)
 800e9ee:	bb1b      	cbnz	r3, 800ea38 <_vfiprintf_r+0x1f8>
 800e9f0:	9b03      	ldr	r3, [sp, #12]
 800e9f2:	3307      	adds	r3, #7
 800e9f4:	f023 0307 	bic.w	r3, r3, #7
 800e9f8:	3308      	adds	r3, #8
 800e9fa:	9303      	str	r3, [sp, #12]
 800e9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9fe:	443b      	add	r3, r7
 800ea00:	9309      	str	r3, [sp, #36]	; 0x24
 800ea02:	e767      	b.n	800e8d4 <_vfiprintf_r+0x94>
 800ea04:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea08:	460c      	mov	r4, r1
 800ea0a:	2001      	movs	r0, #1
 800ea0c:	e7a5      	b.n	800e95a <_vfiprintf_r+0x11a>
 800ea0e:	2300      	movs	r3, #0
 800ea10:	3401      	adds	r4, #1
 800ea12:	9305      	str	r3, [sp, #20]
 800ea14:	4619      	mov	r1, r3
 800ea16:	f04f 0c0a 	mov.w	ip, #10
 800ea1a:	4620      	mov	r0, r4
 800ea1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea20:	3a30      	subs	r2, #48	; 0x30
 800ea22:	2a09      	cmp	r2, #9
 800ea24:	d903      	bls.n	800ea2e <_vfiprintf_r+0x1ee>
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d0c5      	beq.n	800e9b6 <_vfiprintf_r+0x176>
 800ea2a:	9105      	str	r1, [sp, #20]
 800ea2c:	e7c3      	b.n	800e9b6 <_vfiprintf_r+0x176>
 800ea2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea32:	4604      	mov	r4, r0
 800ea34:	2301      	movs	r3, #1
 800ea36:	e7f0      	b.n	800ea1a <_vfiprintf_r+0x1da>
 800ea38:	ab03      	add	r3, sp, #12
 800ea3a:	9300      	str	r3, [sp, #0]
 800ea3c:	462a      	mov	r2, r5
 800ea3e:	4b16      	ldr	r3, [pc, #88]	; (800ea98 <_vfiprintf_r+0x258>)
 800ea40:	a904      	add	r1, sp, #16
 800ea42:	4630      	mov	r0, r6
 800ea44:	f7fe f860 	bl	800cb08 <_printf_float>
 800ea48:	4607      	mov	r7, r0
 800ea4a:	1c78      	adds	r0, r7, #1
 800ea4c:	d1d6      	bne.n	800e9fc <_vfiprintf_r+0x1bc>
 800ea4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea50:	07d9      	lsls	r1, r3, #31
 800ea52:	d405      	bmi.n	800ea60 <_vfiprintf_r+0x220>
 800ea54:	89ab      	ldrh	r3, [r5, #12]
 800ea56:	059a      	lsls	r2, r3, #22
 800ea58:	d402      	bmi.n	800ea60 <_vfiprintf_r+0x220>
 800ea5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea5c:	f000 faaf 	bl	800efbe <__retarget_lock_release_recursive>
 800ea60:	89ab      	ldrh	r3, [r5, #12]
 800ea62:	065b      	lsls	r3, r3, #25
 800ea64:	f53f af12 	bmi.w	800e88c <_vfiprintf_r+0x4c>
 800ea68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea6a:	e711      	b.n	800e890 <_vfiprintf_r+0x50>
 800ea6c:	ab03      	add	r3, sp, #12
 800ea6e:	9300      	str	r3, [sp, #0]
 800ea70:	462a      	mov	r2, r5
 800ea72:	4b09      	ldr	r3, [pc, #36]	; (800ea98 <_vfiprintf_r+0x258>)
 800ea74:	a904      	add	r1, sp, #16
 800ea76:	4630      	mov	r0, r6
 800ea78:	f7fe fad2 	bl	800d020 <_printf_i>
 800ea7c:	e7e4      	b.n	800ea48 <_vfiprintf_r+0x208>
 800ea7e:	bf00      	nop
 800ea80:	0800f7dc 	.word	0x0800f7dc
 800ea84:	0800f7fc 	.word	0x0800f7fc
 800ea88:	0800f7bc 	.word	0x0800f7bc
 800ea8c:	0800f6aa 	.word	0x0800f6aa
 800ea90:	0800f6b4 	.word	0x0800f6b4
 800ea94:	0800cb09 	.word	0x0800cb09
 800ea98:	0800e81b 	.word	0x0800e81b
 800ea9c:	0800f6b0 	.word	0x0800f6b0

0800eaa0 <__swbuf_r>:
 800eaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaa2:	460e      	mov	r6, r1
 800eaa4:	4614      	mov	r4, r2
 800eaa6:	4605      	mov	r5, r0
 800eaa8:	b118      	cbz	r0, 800eab2 <__swbuf_r+0x12>
 800eaaa:	6983      	ldr	r3, [r0, #24]
 800eaac:	b90b      	cbnz	r3, 800eab2 <__swbuf_r+0x12>
 800eaae:	f000 f9e7 	bl	800ee80 <__sinit>
 800eab2:	4b21      	ldr	r3, [pc, #132]	; (800eb38 <__swbuf_r+0x98>)
 800eab4:	429c      	cmp	r4, r3
 800eab6:	d12b      	bne.n	800eb10 <__swbuf_r+0x70>
 800eab8:	686c      	ldr	r4, [r5, #4]
 800eaba:	69a3      	ldr	r3, [r4, #24]
 800eabc:	60a3      	str	r3, [r4, #8]
 800eabe:	89a3      	ldrh	r3, [r4, #12]
 800eac0:	071a      	lsls	r2, r3, #28
 800eac2:	d52f      	bpl.n	800eb24 <__swbuf_r+0x84>
 800eac4:	6923      	ldr	r3, [r4, #16]
 800eac6:	b36b      	cbz	r3, 800eb24 <__swbuf_r+0x84>
 800eac8:	6923      	ldr	r3, [r4, #16]
 800eaca:	6820      	ldr	r0, [r4, #0]
 800eacc:	1ac0      	subs	r0, r0, r3
 800eace:	6963      	ldr	r3, [r4, #20]
 800ead0:	b2f6      	uxtb	r6, r6
 800ead2:	4283      	cmp	r3, r0
 800ead4:	4637      	mov	r7, r6
 800ead6:	dc04      	bgt.n	800eae2 <__swbuf_r+0x42>
 800ead8:	4621      	mov	r1, r4
 800eada:	4628      	mov	r0, r5
 800eadc:	f000 f93c 	bl	800ed58 <_fflush_r>
 800eae0:	bb30      	cbnz	r0, 800eb30 <__swbuf_r+0x90>
 800eae2:	68a3      	ldr	r3, [r4, #8]
 800eae4:	3b01      	subs	r3, #1
 800eae6:	60a3      	str	r3, [r4, #8]
 800eae8:	6823      	ldr	r3, [r4, #0]
 800eaea:	1c5a      	adds	r2, r3, #1
 800eaec:	6022      	str	r2, [r4, #0]
 800eaee:	701e      	strb	r6, [r3, #0]
 800eaf0:	6963      	ldr	r3, [r4, #20]
 800eaf2:	3001      	adds	r0, #1
 800eaf4:	4283      	cmp	r3, r0
 800eaf6:	d004      	beq.n	800eb02 <__swbuf_r+0x62>
 800eaf8:	89a3      	ldrh	r3, [r4, #12]
 800eafa:	07db      	lsls	r3, r3, #31
 800eafc:	d506      	bpl.n	800eb0c <__swbuf_r+0x6c>
 800eafe:	2e0a      	cmp	r6, #10
 800eb00:	d104      	bne.n	800eb0c <__swbuf_r+0x6c>
 800eb02:	4621      	mov	r1, r4
 800eb04:	4628      	mov	r0, r5
 800eb06:	f000 f927 	bl	800ed58 <_fflush_r>
 800eb0a:	b988      	cbnz	r0, 800eb30 <__swbuf_r+0x90>
 800eb0c:	4638      	mov	r0, r7
 800eb0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb10:	4b0a      	ldr	r3, [pc, #40]	; (800eb3c <__swbuf_r+0x9c>)
 800eb12:	429c      	cmp	r4, r3
 800eb14:	d101      	bne.n	800eb1a <__swbuf_r+0x7a>
 800eb16:	68ac      	ldr	r4, [r5, #8]
 800eb18:	e7cf      	b.n	800eaba <__swbuf_r+0x1a>
 800eb1a:	4b09      	ldr	r3, [pc, #36]	; (800eb40 <__swbuf_r+0xa0>)
 800eb1c:	429c      	cmp	r4, r3
 800eb1e:	bf08      	it	eq
 800eb20:	68ec      	ldreq	r4, [r5, #12]
 800eb22:	e7ca      	b.n	800eaba <__swbuf_r+0x1a>
 800eb24:	4621      	mov	r1, r4
 800eb26:	4628      	mov	r0, r5
 800eb28:	f000 f81a 	bl	800eb60 <__swsetup_r>
 800eb2c:	2800      	cmp	r0, #0
 800eb2e:	d0cb      	beq.n	800eac8 <__swbuf_r+0x28>
 800eb30:	f04f 37ff 	mov.w	r7, #4294967295
 800eb34:	e7ea      	b.n	800eb0c <__swbuf_r+0x6c>
 800eb36:	bf00      	nop
 800eb38:	0800f7dc 	.word	0x0800f7dc
 800eb3c:	0800f7fc 	.word	0x0800f7fc
 800eb40:	0800f7bc 	.word	0x0800f7bc

0800eb44 <__ascii_wctomb>:
 800eb44:	b149      	cbz	r1, 800eb5a <__ascii_wctomb+0x16>
 800eb46:	2aff      	cmp	r2, #255	; 0xff
 800eb48:	bf85      	ittet	hi
 800eb4a:	238a      	movhi	r3, #138	; 0x8a
 800eb4c:	6003      	strhi	r3, [r0, #0]
 800eb4e:	700a      	strbls	r2, [r1, #0]
 800eb50:	f04f 30ff 	movhi.w	r0, #4294967295
 800eb54:	bf98      	it	ls
 800eb56:	2001      	movls	r0, #1
 800eb58:	4770      	bx	lr
 800eb5a:	4608      	mov	r0, r1
 800eb5c:	4770      	bx	lr
	...

0800eb60 <__swsetup_r>:
 800eb60:	4b32      	ldr	r3, [pc, #200]	; (800ec2c <__swsetup_r+0xcc>)
 800eb62:	b570      	push	{r4, r5, r6, lr}
 800eb64:	681d      	ldr	r5, [r3, #0]
 800eb66:	4606      	mov	r6, r0
 800eb68:	460c      	mov	r4, r1
 800eb6a:	b125      	cbz	r5, 800eb76 <__swsetup_r+0x16>
 800eb6c:	69ab      	ldr	r3, [r5, #24]
 800eb6e:	b913      	cbnz	r3, 800eb76 <__swsetup_r+0x16>
 800eb70:	4628      	mov	r0, r5
 800eb72:	f000 f985 	bl	800ee80 <__sinit>
 800eb76:	4b2e      	ldr	r3, [pc, #184]	; (800ec30 <__swsetup_r+0xd0>)
 800eb78:	429c      	cmp	r4, r3
 800eb7a:	d10f      	bne.n	800eb9c <__swsetup_r+0x3c>
 800eb7c:	686c      	ldr	r4, [r5, #4]
 800eb7e:	89a3      	ldrh	r3, [r4, #12]
 800eb80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eb84:	0719      	lsls	r1, r3, #28
 800eb86:	d42c      	bmi.n	800ebe2 <__swsetup_r+0x82>
 800eb88:	06dd      	lsls	r5, r3, #27
 800eb8a:	d411      	bmi.n	800ebb0 <__swsetup_r+0x50>
 800eb8c:	2309      	movs	r3, #9
 800eb8e:	6033      	str	r3, [r6, #0]
 800eb90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eb94:	81a3      	strh	r3, [r4, #12]
 800eb96:	f04f 30ff 	mov.w	r0, #4294967295
 800eb9a:	e03e      	b.n	800ec1a <__swsetup_r+0xba>
 800eb9c:	4b25      	ldr	r3, [pc, #148]	; (800ec34 <__swsetup_r+0xd4>)
 800eb9e:	429c      	cmp	r4, r3
 800eba0:	d101      	bne.n	800eba6 <__swsetup_r+0x46>
 800eba2:	68ac      	ldr	r4, [r5, #8]
 800eba4:	e7eb      	b.n	800eb7e <__swsetup_r+0x1e>
 800eba6:	4b24      	ldr	r3, [pc, #144]	; (800ec38 <__swsetup_r+0xd8>)
 800eba8:	429c      	cmp	r4, r3
 800ebaa:	bf08      	it	eq
 800ebac:	68ec      	ldreq	r4, [r5, #12]
 800ebae:	e7e6      	b.n	800eb7e <__swsetup_r+0x1e>
 800ebb0:	0758      	lsls	r0, r3, #29
 800ebb2:	d512      	bpl.n	800ebda <__swsetup_r+0x7a>
 800ebb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebb6:	b141      	cbz	r1, 800ebca <__swsetup_r+0x6a>
 800ebb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebbc:	4299      	cmp	r1, r3
 800ebbe:	d002      	beq.n	800ebc6 <__swsetup_r+0x66>
 800ebc0:	4630      	mov	r0, r6
 800ebc2:	f7ff fd0b 	bl	800e5dc <_free_r>
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	6363      	str	r3, [r4, #52]	; 0x34
 800ebca:	89a3      	ldrh	r3, [r4, #12]
 800ebcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ebd0:	81a3      	strh	r3, [r4, #12]
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	6063      	str	r3, [r4, #4]
 800ebd6:	6923      	ldr	r3, [r4, #16]
 800ebd8:	6023      	str	r3, [r4, #0]
 800ebda:	89a3      	ldrh	r3, [r4, #12]
 800ebdc:	f043 0308 	orr.w	r3, r3, #8
 800ebe0:	81a3      	strh	r3, [r4, #12]
 800ebe2:	6923      	ldr	r3, [r4, #16]
 800ebe4:	b94b      	cbnz	r3, 800ebfa <__swsetup_r+0x9a>
 800ebe6:	89a3      	ldrh	r3, [r4, #12]
 800ebe8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ebec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ebf0:	d003      	beq.n	800ebfa <__swsetup_r+0x9a>
 800ebf2:	4621      	mov	r1, r4
 800ebf4:	4630      	mov	r0, r6
 800ebf6:	f000 fa07 	bl	800f008 <__smakebuf_r>
 800ebfa:	89a0      	ldrh	r0, [r4, #12]
 800ebfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec00:	f010 0301 	ands.w	r3, r0, #1
 800ec04:	d00a      	beq.n	800ec1c <__swsetup_r+0xbc>
 800ec06:	2300      	movs	r3, #0
 800ec08:	60a3      	str	r3, [r4, #8]
 800ec0a:	6963      	ldr	r3, [r4, #20]
 800ec0c:	425b      	negs	r3, r3
 800ec0e:	61a3      	str	r3, [r4, #24]
 800ec10:	6923      	ldr	r3, [r4, #16]
 800ec12:	b943      	cbnz	r3, 800ec26 <__swsetup_r+0xc6>
 800ec14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ec18:	d1ba      	bne.n	800eb90 <__swsetup_r+0x30>
 800ec1a:	bd70      	pop	{r4, r5, r6, pc}
 800ec1c:	0781      	lsls	r1, r0, #30
 800ec1e:	bf58      	it	pl
 800ec20:	6963      	ldrpl	r3, [r4, #20]
 800ec22:	60a3      	str	r3, [r4, #8]
 800ec24:	e7f4      	b.n	800ec10 <__swsetup_r+0xb0>
 800ec26:	2000      	movs	r0, #0
 800ec28:	e7f7      	b.n	800ec1a <__swsetup_r+0xba>
 800ec2a:	bf00      	nop
 800ec2c:	24000038 	.word	0x24000038
 800ec30:	0800f7dc 	.word	0x0800f7dc
 800ec34:	0800f7fc 	.word	0x0800f7fc
 800ec38:	0800f7bc 	.word	0x0800f7bc

0800ec3c <abort>:
 800ec3c:	b508      	push	{r3, lr}
 800ec3e:	2006      	movs	r0, #6
 800ec40:	f000 fa4a 	bl	800f0d8 <raise>
 800ec44:	2001      	movs	r0, #1
 800ec46:	f7f4 fd4d 	bl	80036e4 <_exit>
	...

0800ec4c <__sflush_r>:
 800ec4c:	898a      	ldrh	r2, [r1, #12]
 800ec4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec52:	4605      	mov	r5, r0
 800ec54:	0710      	lsls	r0, r2, #28
 800ec56:	460c      	mov	r4, r1
 800ec58:	d458      	bmi.n	800ed0c <__sflush_r+0xc0>
 800ec5a:	684b      	ldr	r3, [r1, #4]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	dc05      	bgt.n	800ec6c <__sflush_r+0x20>
 800ec60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	dc02      	bgt.n	800ec6c <__sflush_r+0x20>
 800ec66:	2000      	movs	r0, #0
 800ec68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec6e:	2e00      	cmp	r6, #0
 800ec70:	d0f9      	beq.n	800ec66 <__sflush_r+0x1a>
 800ec72:	2300      	movs	r3, #0
 800ec74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ec78:	682f      	ldr	r7, [r5, #0]
 800ec7a:	602b      	str	r3, [r5, #0]
 800ec7c:	d032      	beq.n	800ece4 <__sflush_r+0x98>
 800ec7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ec80:	89a3      	ldrh	r3, [r4, #12]
 800ec82:	075a      	lsls	r2, r3, #29
 800ec84:	d505      	bpl.n	800ec92 <__sflush_r+0x46>
 800ec86:	6863      	ldr	r3, [r4, #4]
 800ec88:	1ac0      	subs	r0, r0, r3
 800ec8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec8c:	b10b      	cbz	r3, 800ec92 <__sflush_r+0x46>
 800ec8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec90:	1ac0      	subs	r0, r0, r3
 800ec92:	2300      	movs	r3, #0
 800ec94:	4602      	mov	r2, r0
 800ec96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec98:	6a21      	ldr	r1, [r4, #32]
 800ec9a:	4628      	mov	r0, r5
 800ec9c:	47b0      	blx	r6
 800ec9e:	1c43      	adds	r3, r0, #1
 800eca0:	89a3      	ldrh	r3, [r4, #12]
 800eca2:	d106      	bne.n	800ecb2 <__sflush_r+0x66>
 800eca4:	6829      	ldr	r1, [r5, #0]
 800eca6:	291d      	cmp	r1, #29
 800eca8:	d82c      	bhi.n	800ed04 <__sflush_r+0xb8>
 800ecaa:	4a2a      	ldr	r2, [pc, #168]	; (800ed54 <__sflush_r+0x108>)
 800ecac:	40ca      	lsrs	r2, r1
 800ecae:	07d6      	lsls	r6, r2, #31
 800ecb0:	d528      	bpl.n	800ed04 <__sflush_r+0xb8>
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	6062      	str	r2, [r4, #4]
 800ecb6:	04d9      	lsls	r1, r3, #19
 800ecb8:	6922      	ldr	r2, [r4, #16]
 800ecba:	6022      	str	r2, [r4, #0]
 800ecbc:	d504      	bpl.n	800ecc8 <__sflush_r+0x7c>
 800ecbe:	1c42      	adds	r2, r0, #1
 800ecc0:	d101      	bne.n	800ecc6 <__sflush_r+0x7a>
 800ecc2:	682b      	ldr	r3, [r5, #0]
 800ecc4:	b903      	cbnz	r3, 800ecc8 <__sflush_r+0x7c>
 800ecc6:	6560      	str	r0, [r4, #84]	; 0x54
 800ecc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ecca:	602f      	str	r7, [r5, #0]
 800eccc:	2900      	cmp	r1, #0
 800ecce:	d0ca      	beq.n	800ec66 <__sflush_r+0x1a>
 800ecd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ecd4:	4299      	cmp	r1, r3
 800ecd6:	d002      	beq.n	800ecde <__sflush_r+0x92>
 800ecd8:	4628      	mov	r0, r5
 800ecda:	f7ff fc7f 	bl	800e5dc <_free_r>
 800ecde:	2000      	movs	r0, #0
 800ece0:	6360      	str	r0, [r4, #52]	; 0x34
 800ece2:	e7c1      	b.n	800ec68 <__sflush_r+0x1c>
 800ece4:	6a21      	ldr	r1, [r4, #32]
 800ece6:	2301      	movs	r3, #1
 800ece8:	4628      	mov	r0, r5
 800ecea:	47b0      	blx	r6
 800ecec:	1c41      	adds	r1, r0, #1
 800ecee:	d1c7      	bne.n	800ec80 <__sflush_r+0x34>
 800ecf0:	682b      	ldr	r3, [r5, #0]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d0c4      	beq.n	800ec80 <__sflush_r+0x34>
 800ecf6:	2b1d      	cmp	r3, #29
 800ecf8:	d001      	beq.n	800ecfe <__sflush_r+0xb2>
 800ecfa:	2b16      	cmp	r3, #22
 800ecfc:	d101      	bne.n	800ed02 <__sflush_r+0xb6>
 800ecfe:	602f      	str	r7, [r5, #0]
 800ed00:	e7b1      	b.n	800ec66 <__sflush_r+0x1a>
 800ed02:	89a3      	ldrh	r3, [r4, #12]
 800ed04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed08:	81a3      	strh	r3, [r4, #12]
 800ed0a:	e7ad      	b.n	800ec68 <__sflush_r+0x1c>
 800ed0c:	690f      	ldr	r7, [r1, #16]
 800ed0e:	2f00      	cmp	r7, #0
 800ed10:	d0a9      	beq.n	800ec66 <__sflush_r+0x1a>
 800ed12:	0793      	lsls	r3, r2, #30
 800ed14:	680e      	ldr	r6, [r1, #0]
 800ed16:	bf08      	it	eq
 800ed18:	694b      	ldreq	r3, [r1, #20]
 800ed1a:	600f      	str	r7, [r1, #0]
 800ed1c:	bf18      	it	ne
 800ed1e:	2300      	movne	r3, #0
 800ed20:	eba6 0807 	sub.w	r8, r6, r7
 800ed24:	608b      	str	r3, [r1, #8]
 800ed26:	f1b8 0f00 	cmp.w	r8, #0
 800ed2a:	dd9c      	ble.n	800ec66 <__sflush_r+0x1a>
 800ed2c:	6a21      	ldr	r1, [r4, #32]
 800ed2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ed30:	4643      	mov	r3, r8
 800ed32:	463a      	mov	r2, r7
 800ed34:	4628      	mov	r0, r5
 800ed36:	47b0      	blx	r6
 800ed38:	2800      	cmp	r0, #0
 800ed3a:	dc06      	bgt.n	800ed4a <__sflush_r+0xfe>
 800ed3c:	89a3      	ldrh	r3, [r4, #12]
 800ed3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed42:	81a3      	strh	r3, [r4, #12]
 800ed44:	f04f 30ff 	mov.w	r0, #4294967295
 800ed48:	e78e      	b.n	800ec68 <__sflush_r+0x1c>
 800ed4a:	4407      	add	r7, r0
 800ed4c:	eba8 0800 	sub.w	r8, r8, r0
 800ed50:	e7e9      	b.n	800ed26 <__sflush_r+0xda>
 800ed52:	bf00      	nop
 800ed54:	20400001 	.word	0x20400001

0800ed58 <_fflush_r>:
 800ed58:	b538      	push	{r3, r4, r5, lr}
 800ed5a:	690b      	ldr	r3, [r1, #16]
 800ed5c:	4605      	mov	r5, r0
 800ed5e:	460c      	mov	r4, r1
 800ed60:	b913      	cbnz	r3, 800ed68 <_fflush_r+0x10>
 800ed62:	2500      	movs	r5, #0
 800ed64:	4628      	mov	r0, r5
 800ed66:	bd38      	pop	{r3, r4, r5, pc}
 800ed68:	b118      	cbz	r0, 800ed72 <_fflush_r+0x1a>
 800ed6a:	6983      	ldr	r3, [r0, #24]
 800ed6c:	b90b      	cbnz	r3, 800ed72 <_fflush_r+0x1a>
 800ed6e:	f000 f887 	bl	800ee80 <__sinit>
 800ed72:	4b14      	ldr	r3, [pc, #80]	; (800edc4 <_fflush_r+0x6c>)
 800ed74:	429c      	cmp	r4, r3
 800ed76:	d11b      	bne.n	800edb0 <_fflush_r+0x58>
 800ed78:	686c      	ldr	r4, [r5, #4]
 800ed7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d0ef      	beq.n	800ed62 <_fflush_r+0xa>
 800ed82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ed84:	07d0      	lsls	r0, r2, #31
 800ed86:	d404      	bmi.n	800ed92 <_fflush_r+0x3a>
 800ed88:	0599      	lsls	r1, r3, #22
 800ed8a:	d402      	bmi.n	800ed92 <_fflush_r+0x3a>
 800ed8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed8e:	f000 f915 	bl	800efbc <__retarget_lock_acquire_recursive>
 800ed92:	4628      	mov	r0, r5
 800ed94:	4621      	mov	r1, r4
 800ed96:	f7ff ff59 	bl	800ec4c <__sflush_r>
 800ed9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed9c:	07da      	lsls	r2, r3, #31
 800ed9e:	4605      	mov	r5, r0
 800eda0:	d4e0      	bmi.n	800ed64 <_fflush_r+0xc>
 800eda2:	89a3      	ldrh	r3, [r4, #12]
 800eda4:	059b      	lsls	r3, r3, #22
 800eda6:	d4dd      	bmi.n	800ed64 <_fflush_r+0xc>
 800eda8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800edaa:	f000 f908 	bl	800efbe <__retarget_lock_release_recursive>
 800edae:	e7d9      	b.n	800ed64 <_fflush_r+0xc>
 800edb0:	4b05      	ldr	r3, [pc, #20]	; (800edc8 <_fflush_r+0x70>)
 800edb2:	429c      	cmp	r4, r3
 800edb4:	d101      	bne.n	800edba <_fflush_r+0x62>
 800edb6:	68ac      	ldr	r4, [r5, #8]
 800edb8:	e7df      	b.n	800ed7a <_fflush_r+0x22>
 800edba:	4b04      	ldr	r3, [pc, #16]	; (800edcc <_fflush_r+0x74>)
 800edbc:	429c      	cmp	r4, r3
 800edbe:	bf08      	it	eq
 800edc0:	68ec      	ldreq	r4, [r5, #12]
 800edc2:	e7da      	b.n	800ed7a <_fflush_r+0x22>
 800edc4:	0800f7dc 	.word	0x0800f7dc
 800edc8:	0800f7fc 	.word	0x0800f7fc
 800edcc:	0800f7bc 	.word	0x0800f7bc

0800edd0 <std>:
 800edd0:	2300      	movs	r3, #0
 800edd2:	b510      	push	{r4, lr}
 800edd4:	4604      	mov	r4, r0
 800edd6:	e9c0 3300 	strd	r3, r3, [r0]
 800edda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800edde:	6083      	str	r3, [r0, #8]
 800ede0:	8181      	strh	r1, [r0, #12]
 800ede2:	6643      	str	r3, [r0, #100]	; 0x64
 800ede4:	81c2      	strh	r2, [r0, #14]
 800ede6:	6183      	str	r3, [r0, #24]
 800ede8:	4619      	mov	r1, r3
 800edea:	2208      	movs	r2, #8
 800edec:	305c      	adds	r0, #92	; 0x5c
 800edee:	f7fd fdf3 	bl	800c9d8 <memset>
 800edf2:	4b05      	ldr	r3, [pc, #20]	; (800ee08 <std+0x38>)
 800edf4:	6263      	str	r3, [r4, #36]	; 0x24
 800edf6:	4b05      	ldr	r3, [pc, #20]	; (800ee0c <std+0x3c>)
 800edf8:	62a3      	str	r3, [r4, #40]	; 0x28
 800edfa:	4b05      	ldr	r3, [pc, #20]	; (800ee10 <std+0x40>)
 800edfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800edfe:	4b05      	ldr	r3, [pc, #20]	; (800ee14 <std+0x44>)
 800ee00:	6224      	str	r4, [r4, #32]
 800ee02:	6323      	str	r3, [r4, #48]	; 0x30
 800ee04:	bd10      	pop	{r4, pc}
 800ee06:	bf00      	nop
 800ee08:	0800f111 	.word	0x0800f111
 800ee0c:	0800f133 	.word	0x0800f133
 800ee10:	0800f16b 	.word	0x0800f16b
 800ee14:	0800f18f 	.word	0x0800f18f

0800ee18 <_cleanup_r>:
 800ee18:	4901      	ldr	r1, [pc, #4]	; (800ee20 <_cleanup_r+0x8>)
 800ee1a:	f000 b8af 	b.w	800ef7c <_fwalk_reent>
 800ee1e:	bf00      	nop
 800ee20:	0800ed59 	.word	0x0800ed59

0800ee24 <__sfmoreglue>:
 800ee24:	b570      	push	{r4, r5, r6, lr}
 800ee26:	1e4a      	subs	r2, r1, #1
 800ee28:	2568      	movs	r5, #104	; 0x68
 800ee2a:	4355      	muls	r5, r2
 800ee2c:	460e      	mov	r6, r1
 800ee2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ee32:	f7ff fc23 	bl	800e67c <_malloc_r>
 800ee36:	4604      	mov	r4, r0
 800ee38:	b140      	cbz	r0, 800ee4c <__sfmoreglue+0x28>
 800ee3a:	2100      	movs	r1, #0
 800ee3c:	e9c0 1600 	strd	r1, r6, [r0]
 800ee40:	300c      	adds	r0, #12
 800ee42:	60a0      	str	r0, [r4, #8]
 800ee44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ee48:	f7fd fdc6 	bl	800c9d8 <memset>
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	bd70      	pop	{r4, r5, r6, pc}

0800ee50 <__sfp_lock_acquire>:
 800ee50:	4801      	ldr	r0, [pc, #4]	; (800ee58 <__sfp_lock_acquire+0x8>)
 800ee52:	f000 b8b3 	b.w	800efbc <__retarget_lock_acquire_recursive>
 800ee56:	bf00      	nop
 800ee58:	24000adc 	.word	0x24000adc

0800ee5c <__sfp_lock_release>:
 800ee5c:	4801      	ldr	r0, [pc, #4]	; (800ee64 <__sfp_lock_release+0x8>)
 800ee5e:	f000 b8ae 	b.w	800efbe <__retarget_lock_release_recursive>
 800ee62:	bf00      	nop
 800ee64:	24000adc 	.word	0x24000adc

0800ee68 <__sinit_lock_acquire>:
 800ee68:	4801      	ldr	r0, [pc, #4]	; (800ee70 <__sinit_lock_acquire+0x8>)
 800ee6a:	f000 b8a7 	b.w	800efbc <__retarget_lock_acquire_recursive>
 800ee6e:	bf00      	nop
 800ee70:	24000ad7 	.word	0x24000ad7

0800ee74 <__sinit_lock_release>:
 800ee74:	4801      	ldr	r0, [pc, #4]	; (800ee7c <__sinit_lock_release+0x8>)
 800ee76:	f000 b8a2 	b.w	800efbe <__retarget_lock_release_recursive>
 800ee7a:	bf00      	nop
 800ee7c:	24000ad7 	.word	0x24000ad7

0800ee80 <__sinit>:
 800ee80:	b510      	push	{r4, lr}
 800ee82:	4604      	mov	r4, r0
 800ee84:	f7ff fff0 	bl	800ee68 <__sinit_lock_acquire>
 800ee88:	69a3      	ldr	r3, [r4, #24]
 800ee8a:	b11b      	cbz	r3, 800ee94 <__sinit+0x14>
 800ee8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee90:	f7ff bff0 	b.w	800ee74 <__sinit_lock_release>
 800ee94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ee98:	6523      	str	r3, [r4, #80]	; 0x50
 800ee9a:	4b13      	ldr	r3, [pc, #76]	; (800eee8 <__sinit+0x68>)
 800ee9c:	4a13      	ldr	r2, [pc, #76]	; (800eeec <__sinit+0x6c>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	62a2      	str	r2, [r4, #40]	; 0x28
 800eea2:	42a3      	cmp	r3, r4
 800eea4:	bf04      	itt	eq
 800eea6:	2301      	moveq	r3, #1
 800eea8:	61a3      	streq	r3, [r4, #24]
 800eeaa:	4620      	mov	r0, r4
 800eeac:	f000 f820 	bl	800eef0 <__sfp>
 800eeb0:	6060      	str	r0, [r4, #4]
 800eeb2:	4620      	mov	r0, r4
 800eeb4:	f000 f81c 	bl	800eef0 <__sfp>
 800eeb8:	60a0      	str	r0, [r4, #8]
 800eeba:	4620      	mov	r0, r4
 800eebc:	f000 f818 	bl	800eef0 <__sfp>
 800eec0:	2200      	movs	r2, #0
 800eec2:	60e0      	str	r0, [r4, #12]
 800eec4:	2104      	movs	r1, #4
 800eec6:	6860      	ldr	r0, [r4, #4]
 800eec8:	f7ff ff82 	bl	800edd0 <std>
 800eecc:	68a0      	ldr	r0, [r4, #8]
 800eece:	2201      	movs	r2, #1
 800eed0:	2109      	movs	r1, #9
 800eed2:	f7ff ff7d 	bl	800edd0 <std>
 800eed6:	68e0      	ldr	r0, [r4, #12]
 800eed8:	2202      	movs	r2, #2
 800eeda:	2112      	movs	r1, #18
 800eedc:	f7ff ff78 	bl	800edd0 <std>
 800eee0:	2301      	movs	r3, #1
 800eee2:	61a3      	str	r3, [r4, #24]
 800eee4:	e7d2      	b.n	800ee8c <__sinit+0xc>
 800eee6:	bf00      	nop
 800eee8:	0800f438 	.word	0x0800f438
 800eeec:	0800ee19 	.word	0x0800ee19

0800eef0 <__sfp>:
 800eef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eef2:	4607      	mov	r7, r0
 800eef4:	f7ff ffac 	bl	800ee50 <__sfp_lock_acquire>
 800eef8:	4b1e      	ldr	r3, [pc, #120]	; (800ef74 <__sfp+0x84>)
 800eefa:	681e      	ldr	r6, [r3, #0]
 800eefc:	69b3      	ldr	r3, [r6, #24]
 800eefe:	b913      	cbnz	r3, 800ef06 <__sfp+0x16>
 800ef00:	4630      	mov	r0, r6
 800ef02:	f7ff ffbd 	bl	800ee80 <__sinit>
 800ef06:	3648      	adds	r6, #72	; 0x48
 800ef08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ef0c:	3b01      	subs	r3, #1
 800ef0e:	d503      	bpl.n	800ef18 <__sfp+0x28>
 800ef10:	6833      	ldr	r3, [r6, #0]
 800ef12:	b30b      	cbz	r3, 800ef58 <__sfp+0x68>
 800ef14:	6836      	ldr	r6, [r6, #0]
 800ef16:	e7f7      	b.n	800ef08 <__sfp+0x18>
 800ef18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ef1c:	b9d5      	cbnz	r5, 800ef54 <__sfp+0x64>
 800ef1e:	4b16      	ldr	r3, [pc, #88]	; (800ef78 <__sfp+0x88>)
 800ef20:	60e3      	str	r3, [r4, #12]
 800ef22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ef26:	6665      	str	r5, [r4, #100]	; 0x64
 800ef28:	f000 f847 	bl	800efba <__retarget_lock_init_recursive>
 800ef2c:	f7ff ff96 	bl	800ee5c <__sfp_lock_release>
 800ef30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ef34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ef38:	6025      	str	r5, [r4, #0]
 800ef3a:	61a5      	str	r5, [r4, #24]
 800ef3c:	2208      	movs	r2, #8
 800ef3e:	4629      	mov	r1, r5
 800ef40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ef44:	f7fd fd48 	bl	800c9d8 <memset>
 800ef48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ef4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ef50:	4620      	mov	r0, r4
 800ef52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef54:	3468      	adds	r4, #104	; 0x68
 800ef56:	e7d9      	b.n	800ef0c <__sfp+0x1c>
 800ef58:	2104      	movs	r1, #4
 800ef5a:	4638      	mov	r0, r7
 800ef5c:	f7ff ff62 	bl	800ee24 <__sfmoreglue>
 800ef60:	4604      	mov	r4, r0
 800ef62:	6030      	str	r0, [r6, #0]
 800ef64:	2800      	cmp	r0, #0
 800ef66:	d1d5      	bne.n	800ef14 <__sfp+0x24>
 800ef68:	f7ff ff78 	bl	800ee5c <__sfp_lock_release>
 800ef6c:	230c      	movs	r3, #12
 800ef6e:	603b      	str	r3, [r7, #0]
 800ef70:	e7ee      	b.n	800ef50 <__sfp+0x60>
 800ef72:	bf00      	nop
 800ef74:	0800f438 	.word	0x0800f438
 800ef78:	ffff0001 	.word	0xffff0001

0800ef7c <_fwalk_reent>:
 800ef7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef80:	4606      	mov	r6, r0
 800ef82:	4688      	mov	r8, r1
 800ef84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ef88:	2700      	movs	r7, #0
 800ef8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef8e:	f1b9 0901 	subs.w	r9, r9, #1
 800ef92:	d505      	bpl.n	800efa0 <_fwalk_reent+0x24>
 800ef94:	6824      	ldr	r4, [r4, #0]
 800ef96:	2c00      	cmp	r4, #0
 800ef98:	d1f7      	bne.n	800ef8a <_fwalk_reent+0xe>
 800ef9a:	4638      	mov	r0, r7
 800ef9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efa0:	89ab      	ldrh	r3, [r5, #12]
 800efa2:	2b01      	cmp	r3, #1
 800efa4:	d907      	bls.n	800efb6 <_fwalk_reent+0x3a>
 800efa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800efaa:	3301      	adds	r3, #1
 800efac:	d003      	beq.n	800efb6 <_fwalk_reent+0x3a>
 800efae:	4629      	mov	r1, r5
 800efb0:	4630      	mov	r0, r6
 800efb2:	47c0      	blx	r8
 800efb4:	4307      	orrs	r7, r0
 800efb6:	3568      	adds	r5, #104	; 0x68
 800efb8:	e7e9      	b.n	800ef8e <_fwalk_reent+0x12>

0800efba <__retarget_lock_init_recursive>:
 800efba:	4770      	bx	lr

0800efbc <__retarget_lock_acquire_recursive>:
 800efbc:	4770      	bx	lr

0800efbe <__retarget_lock_release_recursive>:
 800efbe:	4770      	bx	lr

0800efc0 <__swhatbuf_r>:
 800efc0:	b570      	push	{r4, r5, r6, lr}
 800efc2:	460e      	mov	r6, r1
 800efc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efc8:	2900      	cmp	r1, #0
 800efca:	b096      	sub	sp, #88	; 0x58
 800efcc:	4614      	mov	r4, r2
 800efce:	461d      	mov	r5, r3
 800efd0:	da07      	bge.n	800efe2 <__swhatbuf_r+0x22>
 800efd2:	2300      	movs	r3, #0
 800efd4:	602b      	str	r3, [r5, #0]
 800efd6:	89b3      	ldrh	r3, [r6, #12]
 800efd8:	061a      	lsls	r2, r3, #24
 800efda:	d410      	bmi.n	800effe <__swhatbuf_r+0x3e>
 800efdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efe0:	e00e      	b.n	800f000 <__swhatbuf_r+0x40>
 800efe2:	466a      	mov	r2, sp
 800efe4:	f000 f8fa 	bl	800f1dc <_fstat_r>
 800efe8:	2800      	cmp	r0, #0
 800efea:	dbf2      	blt.n	800efd2 <__swhatbuf_r+0x12>
 800efec:	9a01      	ldr	r2, [sp, #4]
 800efee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eff2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eff6:	425a      	negs	r2, r3
 800eff8:	415a      	adcs	r2, r3
 800effa:	602a      	str	r2, [r5, #0]
 800effc:	e7ee      	b.n	800efdc <__swhatbuf_r+0x1c>
 800effe:	2340      	movs	r3, #64	; 0x40
 800f000:	2000      	movs	r0, #0
 800f002:	6023      	str	r3, [r4, #0]
 800f004:	b016      	add	sp, #88	; 0x58
 800f006:	bd70      	pop	{r4, r5, r6, pc}

0800f008 <__smakebuf_r>:
 800f008:	898b      	ldrh	r3, [r1, #12]
 800f00a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f00c:	079d      	lsls	r5, r3, #30
 800f00e:	4606      	mov	r6, r0
 800f010:	460c      	mov	r4, r1
 800f012:	d507      	bpl.n	800f024 <__smakebuf_r+0x1c>
 800f014:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f018:	6023      	str	r3, [r4, #0]
 800f01a:	6123      	str	r3, [r4, #16]
 800f01c:	2301      	movs	r3, #1
 800f01e:	6163      	str	r3, [r4, #20]
 800f020:	b002      	add	sp, #8
 800f022:	bd70      	pop	{r4, r5, r6, pc}
 800f024:	ab01      	add	r3, sp, #4
 800f026:	466a      	mov	r2, sp
 800f028:	f7ff ffca 	bl	800efc0 <__swhatbuf_r>
 800f02c:	9900      	ldr	r1, [sp, #0]
 800f02e:	4605      	mov	r5, r0
 800f030:	4630      	mov	r0, r6
 800f032:	f7ff fb23 	bl	800e67c <_malloc_r>
 800f036:	b948      	cbnz	r0, 800f04c <__smakebuf_r+0x44>
 800f038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f03c:	059a      	lsls	r2, r3, #22
 800f03e:	d4ef      	bmi.n	800f020 <__smakebuf_r+0x18>
 800f040:	f023 0303 	bic.w	r3, r3, #3
 800f044:	f043 0302 	orr.w	r3, r3, #2
 800f048:	81a3      	strh	r3, [r4, #12]
 800f04a:	e7e3      	b.n	800f014 <__smakebuf_r+0xc>
 800f04c:	4b0d      	ldr	r3, [pc, #52]	; (800f084 <__smakebuf_r+0x7c>)
 800f04e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f050:	89a3      	ldrh	r3, [r4, #12]
 800f052:	6020      	str	r0, [r4, #0]
 800f054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f058:	81a3      	strh	r3, [r4, #12]
 800f05a:	9b00      	ldr	r3, [sp, #0]
 800f05c:	6163      	str	r3, [r4, #20]
 800f05e:	9b01      	ldr	r3, [sp, #4]
 800f060:	6120      	str	r0, [r4, #16]
 800f062:	b15b      	cbz	r3, 800f07c <__smakebuf_r+0x74>
 800f064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f068:	4630      	mov	r0, r6
 800f06a:	f000 f8c9 	bl	800f200 <_isatty_r>
 800f06e:	b128      	cbz	r0, 800f07c <__smakebuf_r+0x74>
 800f070:	89a3      	ldrh	r3, [r4, #12]
 800f072:	f023 0303 	bic.w	r3, r3, #3
 800f076:	f043 0301 	orr.w	r3, r3, #1
 800f07a:	81a3      	strh	r3, [r4, #12]
 800f07c:	89a0      	ldrh	r0, [r4, #12]
 800f07e:	4305      	orrs	r5, r0
 800f080:	81a5      	strh	r5, [r4, #12]
 800f082:	e7cd      	b.n	800f020 <__smakebuf_r+0x18>
 800f084:	0800ee19 	.word	0x0800ee19

0800f088 <_raise_r>:
 800f088:	291f      	cmp	r1, #31
 800f08a:	b538      	push	{r3, r4, r5, lr}
 800f08c:	4604      	mov	r4, r0
 800f08e:	460d      	mov	r5, r1
 800f090:	d904      	bls.n	800f09c <_raise_r+0x14>
 800f092:	2316      	movs	r3, #22
 800f094:	6003      	str	r3, [r0, #0]
 800f096:	f04f 30ff 	mov.w	r0, #4294967295
 800f09a:	bd38      	pop	{r3, r4, r5, pc}
 800f09c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f09e:	b112      	cbz	r2, 800f0a6 <_raise_r+0x1e>
 800f0a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f0a4:	b94b      	cbnz	r3, 800f0ba <_raise_r+0x32>
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	f000 f830 	bl	800f10c <_getpid_r>
 800f0ac:	462a      	mov	r2, r5
 800f0ae:	4601      	mov	r1, r0
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0b6:	f000 b817 	b.w	800f0e8 <_kill_r>
 800f0ba:	2b01      	cmp	r3, #1
 800f0bc:	d00a      	beq.n	800f0d4 <_raise_r+0x4c>
 800f0be:	1c59      	adds	r1, r3, #1
 800f0c0:	d103      	bne.n	800f0ca <_raise_r+0x42>
 800f0c2:	2316      	movs	r3, #22
 800f0c4:	6003      	str	r3, [r0, #0]
 800f0c6:	2001      	movs	r0, #1
 800f0c8:	e7e7      	b.n	800f09a <_raise_r+0x12>
 800f0ca:	2400      	movs	r4, #0
 800f0cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f0d0:	4628      	mov	r0, r5
 800f0d2:	4798      	blx	r3
 800f0d4:	2000      	movs	r0, #0
 800f0d6:	e7e0      	b.n	800f09a <_raise_r+0x12>

0800f0d8 <raise>:
 800f0d8:	4b02      	ldr	r3, [pc, #8]	; (800f0e4 <raise+0xc>)
 800f0da:	4601      	mov	r1, r0
 800f0dc:	6818      	ldr	r0, [r3, #0]
 800f0de:	f7ff bfd3 	b.w	800f088 <_raise_r>
 800f0e2:	bf00      	nop
 800f0e4:	24000038 	.word	0x24000038

0800f0e8 <_kill_r>:
 800f0e8:	b538      	push	{r3, r4, r5, lr}
 800f0ea:	4d07      	ldr	r5, [pc, #28]	; (800f108 <_kill_r+0x20>)
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	4604      	mov	r4, r0
 800f0f0:	4608      	mov	r0, r1
 800f0f2:	4611      	mov	r1, r2
 800f0f4:	602b      	str	r3, [r5, #0]
 800f0f6:	f7f4 fae5 	bl	80036c4 <_kill>
 800f0fa:	1c43      	adds	r3, r0, #1
 800f0fc:	d102      	bne.n	800f104 <_kill_r+0x1c>
 800f0fe:	682b      	ldr	r3, [r5, #0]
 800f100:	b103      	cbz	r3, 800f104 <_kill_r+0x1c>
 800f102:	6023      	str	r3, [r4, #0]
 800f104:	bd38      	pop	{r3, r4, r5, pc}
 800f106:	bf00      	nop
 800f108:	24000ad0 	.word	0x24000ad0

0800f10c <_getpid_r>:
 800f10c:	f7f4 bad2 	b.w	80036b4 <_getpid>

0800f110 <__sread>:
 800f110:	b510      	push	{r4, lr}
 800f112:	460c      	mov	r4, r1
 800f114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f118:	f000 f894 	bl	800f244 <_read_r>
 800f11c:	2800      	cmp	r0, #0
 800f11e:	bfab      	itete	ge
 800f120:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f122:	89a3      	ldrhlt	r3, [r4, #12]
 800f124:	181b      	addge	r3, r3, r0
 800f126:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f12a:	bfac      	ite	ge
 800f12c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f12e:	81a3      	strhlt	r3, [r4, #12]
 800f130:	bd10      	pop	{r4, pc}

0800f132 <__swrite>:
 800f132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f136:	461f      	mov	r7, r3
 800f138:	898b      	ldrh	r3, [r1, #12]
 800f13a:	05db      	lsls	r3, r3, #23
 800f13c:	4605      	mov	r5, r0
 800f13e:	460c      	mov	r4, r1
 800f140:	4616      	mov	r6, r2
 800f142:	d505      	bpl.n	800f150 <__swrite+0x1e>
 800f144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f148:	2302      	movs	r3, #2
 800f14a:	2200      	movs	r2, #0
 800f14c:	f000 f868 	bl	800f220 <_lseek_r>
 800f150:	89a3      	ldrh	r3, [r4, #12]
 800f152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f156:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f15a:	81a3      	strh	r3, [r4, #12]
 800f15c:	4632      	mov	r2, r6
 800f15e:	463b      	mov	r3, r7
 800f160:	4628      	mov	r0, r5
 800f162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f166:	f000 b817 	b.w	800f198 <_write_r>

0800f16a <__sseek>:
 800f16a:	b510      	push	{r4, lr}
 800f16c:	460c      	mov	r4, r1
 800f16e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f172:	f000 f855 	bl	800f220 <_lseek_r>
 800f176:	1c43      	adds	r3, r0, #1
 800f178:	89a3      	ldrh	r3, [r4, #12]
 800f17a:	bf15      	itete	ne
 800f17c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f17e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f182:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f186:	81a3      	strheq	r3, [r4, #12]
 800f188:	bf18      	it	ne
 800f18a:	81a3      	strhne	r3, [r4, #12]
 800f18c:	bd10      	pop	{r4, pc}

0800f18e <__sclose>:
 800f18e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f192:	f000 b813 	b.w	800f1bc <_close_r>
	...

0800f198 <_write_r>:
 800f198:	b538      	push	{r3, r4, r5, lr}
 800f19a:	4d07      	ldr	r5, [pc, #28]	; (800f1b8 <_write_r+0x20>)
 800f19c:	4604      	mov	r4, r0
 800f19e:	4608      	mov	r0, r1
 800f1a0:	4611      	mov	r1, r2
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	602a      	str	r2, [r5, #0]
 800f1a6:	461a      	mov	r2, r3
 800f1a8:	f7f4 fac3 	bl	8003732 <_write>
 800f1ac:	1c43      	adds	r3, r0, #1
 800f1ae:	d102      	bne.n	800f1b6 <_write_r+0x1e>
 800f1b0:	682b      	ldr	r3, [r5, #0]
 800f1b2:	b103      	cbz	r3, 800f1b6 <_write_r+0x1e>
 800f1b4:	6023      	str	r3, [r4, #0]
 800f1b6:	bd38      	pop	{r3, r4, r5, pc}
 800f1b8:	24000ad0 	.word	0x24000ad0

0800f1bc <_close_r>:
 800f1bc:	b538      	push	{r3, r4, r5, lr}
 800f1be:	4d06      	ldr	r5, [pc, #24]	; (800f1d8 <_close_r+0x1c>)
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	4604      	mov	r4, r0
 800f1c4:	4608      	mov	r0, r1
 800f1c6:	602b      	str	r3, [r5, #0]
 800f1c8:	f7f4 facf 	bl	800376a <_close>
 800f1cc:	1c43      	adds	r3, r0, #1
 800f1ce:	d102      	bne.n	800f1d6 <_close_r+0x1a>
 800f1d0:	682b      	ldr	r3, [r5, #0]
 800f1d2:	b103      	cbz	r3, 800f1d6 <_close_r+0x1a>
 800f1d4:	6023      	str	r3, [r4, #0]
 800f1d6:	bd38      	pop	{r3, r4, r5, pc}
 800f1d8:	24000ad0 	.word	0x24000ad0

0800f1dc <_fstat_r>:
 800f1dc:	b538      	push	{r3, r4, r5, lr}
 800f1de:	4d07      	ldr	r5, [pc, #28]	; (800f1fc <_fstat_r+0x20>)
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	4604      	mov	r4, r0
 800f1e4:	4608      	mov	r0, r1
 800f1e6:	4611      	mov	r1, r2
 800f1e8:	602b      	str	r3, [r5, #0]
 800f1ea:	f7f4 faca 	bl	8003782 <_fstat>
 800f1ee:	1c43      	adds	r3, r0, #1
 800f1f0:	d102      	bne.n	800f1f8 <_fstat_r+0x1c>
 800f1f2:	682b      	ldr	r3, [r5, #0]
 800f1f4:	b103      	cbz	r3, 800f1f8 <_fstat_r+0x1c>
 800f1f6:	6023      	str	r3, [r4, #0]
 800f1f8:	bd38      	pop	{r3, r4, r5, pc}
 800f1fa:	bf00      	nop
 800f1fc:	24000ad0 	.word	0x24000ad0

0800f200 <_isatty_r>:
 800f200:	b538      	push	{r3, r4, r5, lr}
 800f202:	4d06      	ldr	r5, [pc, #24]	; (800f21c <_isatty_r+0x1c>)
 800f204:	2300      	movs	r3, #0
 800f206:	4604      	mov	r4, r0
 800f208:	4608      	mov	r0, r1
 800f20a:	602b      	str	r3, [r5, #0]
 800f20c:	f7f4 fac9 	bl	80037a2 <_isatty>
 800f210:	1c43      	adds	r3, r0, #1
 800f212:	d102      	bne.n	800f21a <_isatty_r+0x1a>
 800f214:	682b      	ldr	r3, [r5, #0]
 800f216:	b103      	cbz	r3, 800f21a <_isatty_r+0x1a>
 800f218:	6023      	str	r3, [r4, #0]
 800f21a:	bd38      	pop	{r3, r4, r5, pc}
 800f21c:	24000ad0 	.word	0x24000ad0

0800f220 <_lseek_r>:
 800f220:	b538      	push	{r3, r4, r5, lr}
 800f222:	4d07      	ldr	r5, [pc, #28]	; (800f240 <_lseek_r+0x20>)
 800f224:	4604      	mov	r4, r0
 800f226:	4608      	mov	r0, r1
 800f228:	4611      	mov	r1, r2
 800f22a:	2200      	movs	r2, #0
 800f22c:	602a      	str	r2, [r5, #0]
 800f22e:	461a      	mov	r2, r3
 800f230:	f7f4 fac2 	bl	80037b8 <_lseek>
 800f234:	1c43      	adds	r3, r0, #1
 800f236:	d102      	bne.n	800f23e <_lseek_r+0x1e>
 800f238:	682b      	ldr	r3, [r5, #0]
 800f23a:	b103      	cbz	r3, 800f23e <_lseek_r+0x1e>
 800f23c:	6023      	str	r3, [r4, #0]
 800f23e:	bd38      	pop	{r3, r4, r5, pc}
 800f240:	24000ad0 	.word	0x24000ad0

0800f244 <_read_r>:
 800f244:	b538      	push	{r3, r4, r5, lr}
 800f246:	4d07      	ldr	r5, [pc, #28]	; (800f264 <_read_r+0x20>)
 800f248:	4604      	mov	r4, r0
 800f24a:	4608      	mov	r0, r1
 800f24c:	4611      	mov	r1, r2
 800f24e:	2200      	movs	r2, #0
 800f250:	602a      	str	r2, [r5, #0]
 800f252:	461a      	mov	r2, r3
 800f254:	f7f4 fa50 	bl	80036f8 <_read>
 800f258:	1c43      	adds	r3, r0, #1
 800f25a:	d102      	bne.n	800f262 <_read_r+0x1e>
 800f25c:	682b      	ldr	r3, [r5, #0]
 800f25e:	b103      	cbz	r3, 800f262 <_read_r+0x1e>
 800f260:	6023      	str	r3, [r4, #0]
 800f262:	bd38      	pop	{r3, r4, r5, pc}
 800f264:	24000ad0 	.word	0x24000ad0

0800f268 <_init>:
 800f268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f26a:	bf00      	nop
 800f26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f26e:	bc08      	pop	{r3}
 800f270:	469e      	mov	lr, r3
 800f272:	4770      	bx	lr

0800f274 <_fini>:
 800f274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f276:	bf00      	nop
 800f278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f27a:	bc08      	pop	{r3}
 800f27c:	469e      	mov	lr, r3
 800f27e:	4770      	bx	lr
