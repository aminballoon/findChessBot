
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001252c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e7c  080127d0  080127d0  000227d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801464c  0801464c  0002464c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08014654  08014654  00024654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0801465c  0801465c  0002465c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000218  24000000  08014664  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000dcc  24000218  0801487c  00030218  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000fe4  0801487c  00030fe4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003b521  00000000  00000000  00030246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005747  00000000  00000000  0006b767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016b0  00000000  00000000  00070eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001508  00000000  00000000  00072560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e1f7  00000000  00000000  00073a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022a2b  00000000  00000000  000b1c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016dbd2  00000000  00000000  000d468a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0024225c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000716c  00000000  00000000  002422b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000218 	.word	0x24000218
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080127b4 	.word	0x080127b4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400021c 	.word	0x2400021c
 80002dc:	080127b4 	.word	0x080127b4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b96e 	b.w	80009fc <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	468c      	mov	ip, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	f040 8083 	bne.w	800084e <__udivmoddi4+0x116>
 8000748:	428a      	cmp	r2, r1
 800074a:	4617      	mov	r7, r2
 800074c:	d947      	bls.n	80007de <__udivmoddi4+0xa6>
 800074e:	fab2 f282 	clz	r2, r2
 8000752:	b142      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000754:	f1c2 0020 	rsb	r0, r2, #32
 8000758:	fa24 f000 	lsr.w	r0, r4, r0
 800075c:	4091      	lsls	r1, r2
 800075e:	4097      	lsls	r7, r2
 8000760:	ea40 0c01 	orr.w	ip, r0, r1
 8000764:	4094      	lsls	r4, r2
 8000766:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fbbc f6f8 	udiv	r6, ip, r8
 8000770:	fa1f fe87 	uxth.w	lr, r7
 8000774:	fb08 c116 	mls	r1, r8, r6, ip
 8000778:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077c:	fb06 f10e 	mul.w	r1, r6, lr
 8000780:	4299      	cmp	r1, r3
 8000782:	d909      	bls.n	8000798 <__udivmoddi4+0x60>
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	f106 30ff 	add.w	r0, r6, #4294967295
 800078a:	f080 8119 	bcs.w	80009c0 <__udivmoddi4+0x288>
 800078e:	4299      	cmp	r1, r3
 8000790:	f240 8116 	bls.w	80009c0 <__udivmoddi4+0x288>
 8000794:	3e02      	subs	r6, #2
 8000796:	443b      	add	r3, r7
 8000798:	1a5b      	subs	r3, r3, r1
 800079a:	b2a4      	uxth	r4, r4
 800079c:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a0:	fb08 3310 	mls	r3, r8, r0, r3
 80007a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007ac:	45a6      	cmp	lr, r4
 80007ae:	d909      	bls.n	80007c4 <__udivmoddi4+0x8c>
 80007b0:	193c      	adds	r4, r7, r4
 80007b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007b6:	f080 8105 	bcs.w	80009c4 <__udivmoddi4+0x28c>
 80007ba:	45a6      	cmp	lr, r4
 80007bc:	f240 8102 	bls.w	80009c4 <__udivmoddi4+0x28c>
 80007c0:	3802      	subs	r0, #2
 80007c2:	443c      	add	r4, r7
 80007c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c8:	eba4 040e 	sub.w	r4, r4, lr
 80007cc:	2600      	movs	r6, #0
 80007ce:	b11d      	cbz	r5, 80007d8 <__udivmoddi4+0xa0>
 80007d0:	40d4      	lsrs	r4, r2
 80007d2:	2300      	movs	r3, #0
 80007d4:	e9c5 4300 	strd	r4, r3, [r5]
 80007d8:	4631      	mov	r1, r6
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	b902      	cbnz	r2, 80007e2 <__udivmoddi4+0xaa>
 80007e0:	deff      	udf	#255	; 0xff
 80007e2:	fab2 f282 	clz	r2, r2
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d150      	bne.n	800088c <__udivmoddi4+0x154>
 80007ea:	1bcb      	subs	r3, r1, r7
 80007ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007f0:	fa1f f887 	uxth.w	r8, r7
 80007f4:	2601      	movs	r6, #1
 80007f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007fa:	0c21      	lsrs	r1, r4, #16
 80007fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000800:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000804:	fb08 f30c 	mul.w	r3, r8, ip
 8000808:	428b      	cmp	r3, r1
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0xe4>
 800080c:	1879      	adds	r1, r7, r1
 800080e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0xe2>
 8000814:	428b      	cmp	r3, r1
 8000816:	f200 80e9 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 800081a:	4684      	mov	ip, r0
 800081c:	1ac9      	subs	r1, r1, r3
 800081e:	b2a3      	uxth	r3, r4
 8000820:	fbb1 f0fe 	udiv	r0, r1, lr
 8000824:	fb0e 1110 	mls	r1, lr, r0, r1
 8000828:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800082c:	fb08 f800 	mul.w	r8, r8, r0
 8000830:	45a0      	cmp	r8, r4
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0x10c>
 8000834:	193c      	adds	r4, r7, r4
 8000836:	f100 33ff 	add.w	r3, r0, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x10a>
 800083c:	45a0      	cmp	r8, r4
 800083e:	f200 80d9 	bhi.w	80009f4 <__udivmoddi4+0x2bc>
 8000842:	4618      	mov	r0, r3
 8000844:	eba4 0408 	sub.w	r4, r4, r8
 8000848:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800084c:	e7bf      	b.n	80007ce <__udivmoddi4+0x96>
 800084e:	428b      	cmp	r3, r1
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x12e>
 8000852:	2d00      	cmp	r5, #0
 8000854:	f000 80b1 	beq.w	80009ba <__udivmoddi4+0x282>
 8000858:	2600      	movs	r6, #0
 800085a:	e9c5 0100 	strd	r0, r1, [r5]
 800085e:	4630      	mov	r0, r6
 8000860:	4631      	mov	r1, r6
 8000862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000866:	fab3 f683 	clz	r6, r3
 800086a:	2e00      	cmp	r6, #0
 800086c:	d14a      	bne.n	8000904 <__udivmoddi4+0x1cc>
 800086e:	428b      	cmp	r3, r1
 8000870:	d302      	bcc.n	8000878 <__udivmoddi4+0x140>
 8000872:	4282      	cmp	r2, r0
 8000874:	f200 80b8 	bhi.w	80009e8 <__udivmoddi4+0x2b0>
 8000878:	1a84      	subs	r4, r0, r2
 800087a:	eb61 0103 	sbc.w	r1, r1, r3
 800087e:	2001      	movs	r0, #1
 8000880:	468c      	mov	ip, r1
 8000882:	2d00      	cmp	r5, #0
 8000884:	d0a8      	beq.n	80007d8 <__udivmoddi4+0xa0>
 8000886:	e9c5 4c00 	strd	r4, ip, [r5]
 800088a:	e7a5      	b.n	80007d8 <__udivmoddi4+0xa0>
 800088c:	f1c2 0320 	rsb	r3, r2, #32
 8000890:	fa20 f603 	lsr.w	r6, r0, r3
 8000894:	4097      	lsls	r7, r2
 8000896:	fa01 f002 	lsl.w	r0, r1, r2
 800089a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089e:	40d9      	lsrs	r1, r3
 80008a0:	4330      	orrs	r0, r6
 80008a2:	0c03      	lsrs	r3, r0, #16
 80008a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80008a8:	fa1f f887 	uxth.w	r8, r7
 80008ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80008b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008b4:	fb06 f108 	mul.w	r1, r6, r8
 80008b8:	4299      	cmp	r1, r3
 80008ba:	fa04 f402 	lsl.w	r4, r4, r2
 80008be:	d909      	bls.n	80008d4 <__udivmoddi4+0x19c>
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008c6:	f080 808d 	bcs.w	80009e4 <__udivmoddi4+0x2ac>
 80008ca:	4299      	cmp	r1, r3
 80008cc:	f240 808a 	bls.w	80009e4 <__udivmoddi4+0x2ac>
 80008d0:	3e02      	subs	r6, #2
 80008d2:	443b      	add	r3, r7
 80008d4:	1a5b      	subs	r3, r3, r1
 80008d6:	b281      	uxth	r1, r0
 80008d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e4:	fb00 f308 	mul.w	r3, r0, r8
 80008e8:	428b      	cmp	r3, r1
 80008ea:	d907      	bls.n	80008fc <__udivmoddi4+0x1c4>
 80008ec:	1879      	adds	r1, r7, r1
 80008ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80008f2:	d273      	bcs.n	80009dc <__udivmoddi4+0x2a4>
 80008f4:	428b      	cmp	r3, r1
 80008f6:	d971      	bls.n	80009dc <__udivmoddi4+0x2a4>
 80008f8:	3802      	subs	r0, #2
 80008fa:	4439      	add	r1, r7
 80008fc:	1acb      	subs	r3, r1, r3
 80008fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000902:	e778      	b.n	80007f6 <__udivmoddi4+0xbe>
 8000904:	f1c6 0c20 	rsb	ip, r6, #32
 8000908:	fa03 f406 	lsl.w	r4, r3, r6
 800090c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000910:	431c      	orrs	r4, r3
 8000912:	fa20 f70c 	lsr.w	r7, r0, ip
 8000916:	fa01 f306 	lsl.w	r3, r1, r6
 800091a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800091e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000922:	431f      	orrs	r7, r3
 8000924:	0c3b      	lsrs	r3, r7, #16
 8000926:	fbb1 f9fe 	udiv	r9, r1, lr
 800092a:	fa1f f884 	uxth.w	r8, r4
 800092e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000932:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000936:	fb09 fa08 	mul.w	sl, r9, r8
 800093a:	458a      	cmp	sl, r1
 800093c:	fa02 f206 	lsl.w	r2, r2, r6
 8000940:	fa00 f306 	lsl.w	r3, r0, r6
 8000944:	d908      	bls.n	8000958 <__udivmoddi4+0x220>
 8000946:	1861      	adds	r1, r4, r1
 8000948:	f109 30ff 	add.w	r0, r9, #4294967295
 800094c:	d248      	bcs.n	80009e0 <__udivmoddi4+0x2a8>
 800094e:	458a      	cmp	sl, r1
 8000950:	d946      	bls.n	80009e0 <__udivmoddi4+0x2a8>
 8000952:	f1a9 0902 	sub.w	r9, r9, #2
 8000956:	4421      	add	r1, r4
 8000958:	eba1 010a 	sub.w	r1, r1, sl
 800095c:	b2bf      	uxth	r7, r7
 800095e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000962:	fb0e 1110 	mls	r1, lr, r0, r1
 8000966:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800096a:	fb00 f808 	mul.w	r8, r0, r8
 800096e:	45b8      	cmp	r8, r7
 8000970:	d907      	bls.n	8000982 <__udivmoddi4+0x24a>
 8000972:	19e7      	adds	r7, r4, r7
 8000974:	f100 31ff 	add.w	r1, r0, #4294967295
 8000978:	d22e      	bcs.n	80009d8 <__udivmoddi4+0x2a0>
 800097a:	45b8      	cmp	r8, r7
 800097c:	d92c      	bls.n	80009d8 <__udivmoddi4+0x2a0>
 800097e:	3802      	subs	r0, #2
 8000980:	4427      	add	r7, r4
 8000982:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000986:	eba7 0708 	sub.w	r7, r7, r8
 800098a:	fba0 8902 	umull	r8, r9, r0, r2
 800098e:	454f      	cmp	r7, r9
 8000990:	46c6      	mov	lr, r8
 8000992:	4649      	mov	r1, r9
 8000994:	d31a      	bcc.n	80009cc <__udivmoddi4+0x294>
 8000996:	d017      	beq.n	80009c8 <__udivmoddi4+0x290>
 8000998:	b15d      	cbz	r5, 80009b2 <__udivmoddi4+0x27a>
 800099a:	ebb3 020e 	subs.w	r2, r3, lr
 800099e:	eb67 0701 	sbc.w	r7, r7, r1
 80009a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80009a6:	40f2      	lsrs	r2, r6
 80009a8:	ea4c 0202 	orr.w	r2, ip, r2
 80009ac:	40f7      	lsrs	r7, r6
 80009ae:	e9c5 2700 	strd	r2, r7, [r5]
 80009b2:	2600      	movs	r6, #0
 80009b4:	4631      	mov	r1, r6
 80009b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ba:	462e      	mov	r6, r5
 80009bc:	4628      	mov	r0, r5
 80009be:	e70b      	b.n	80007d8 <__udivmoddi4+0xa0>
 80009c0:	4606      	mov	r6, r0
 80009c2:	e6e9      	b.n	8000798 <__udivmoddi4+0x60>
 80009c4:	4618      	mov	r0, r3
 80009c6:	e6fd      	b.n	80007c4 <__udivmoddi4+0x8c>
 80009c8:	4543      	cmp	r3, r8
 80009ca:	d2e5      	bcs.n	8000998 <__udivmoddi4+0x260>
 80009cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009d0:	eb69 0104 	sbc.w	r1, r9, r4
 80009d4:	3801      	subs	r0, #1
 80009d6:	e7df      	b.n	8000998 <__udivmoddi4+0x260>
 80009d8:	4608      	mov	r0, r1
 80009da:	e7d2      	b.n	8000982 <__udivmoddi4+0x24a>
 80009dc:	4660      	mov	r0, ip
 80009de:	e78d      	b.n	80008fc <__udivmoddi4+0x1c4>
 80009e0:	4681      	mov	r9, r0
 80009e2:	e7b9      	b.n	8000958 <__udivmoddi4+0x220>
 80009e4:	4666      	mov	r6, ip
 80009e6:	e775      	b.n	80008d4 <__udivmoddi4+0x19c>
 80009e8:	4630      	mov	r0, r6
 80009ea:	e74a      	b.n	8000882 <__udivmoddi4+0x14a>
 80009ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80009f0:	4439      	add	r1, r7
 80009f2:	e713      	b.n	800081c <__udivmoddi4+0xe4>
 80009f4:	3802      	subs	r0, #2
 80009f6:	443c      	add	r4, r7
 80009f8:	e724      	b.n	8000844 <__udivmoddi4+0x10c>
 80009fa:	bf00      	nop

080009fc <__aeabi_idiv0>:
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	601a      	str	r2, [r3, #0]
	this->address = _address;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	729a      	strb	r2, [r3, #10]
}
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

}
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f103 010a 	add.w	r1, r3, #10
 8000a50:	2364      	movs	r3, #100	; 0x64
 8000a52:	2201      	movs	r2, #1
 8000a54:	f00c fa20 	bl	800ce98 <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f103 010c 	add.w	r1, r3, #12
 8000a62:	2364      	movs	r3, #100	; 0x64
 8000a64:	2202      	movs	r2, #2
 8000a66:	f00c faad 	bl	800cfc4 <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	899b      	ldrh	r3, [r3, #12]
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bf14      	ite	ne
 8000a76:	2301      	movne	r3, #1
 8000a78:	2300      	moveq	r3, #0
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	899b      	ldrh	r3, [r3, #12]
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	0bdb      	lsrs	r3, r3, #15
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	461a      	mov	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	765a      	strb	r2, [r3, #25]
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(this->address), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	899b      	ldrh	r3, [r3, #12]
 8000aa8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000aac:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	899b      	ldrh	r3, [r3, #12]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	899b      	ldrh	r3, [r3, #12]
 8000abe:	105b      	asrs	r3, r3, #1
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000ac8:	2300      	movs	r3, #0
 8000aca:	737b      	strb	r3, [r7, #13]
 8000acc:	7b7b      	ldrb	r3, [r7, #13]
 8000ace:	2b05      	cmp	r3, #5
 8000ad0:	d820      	bhi.n	8000b14 <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	899b      	ldrh	r3, [r3, #12]
 8000ad6:	109b      	asrs	r3, r3, #2
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	899b      	ldrh	r3, [r3, #12]
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	b25a      	sxtb	r2, r3
 8000aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aee:	4053      	eors	r3, r2
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	899b      	ldrh	r3, [r3, #12]
 8000af8:	105b      	asrs	r3, r3, #1
 8000afa:	b25b      	sxtb	r3, r3
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	b25a      	sxtb	r2, r3
 8000b02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b06:	4053      	eors	r3, r2
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000b0c:	7b7b      	ldrb	r3, [r7, #13]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	737b      	strb	r3, [r7, #13]
 8000b12:	e7db      	b.n	8000acc <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	bf0c      	ite	eq
 8000b1a:	2301      	moveq	r3, #1
 8000b1c:	2300      	movne	r3, #0
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 8000b22:	7bbb      	ldrb	r3, [r7, #14]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf0c      	ite	eq
 8000b28:	2301      	moveq	r3, #1
 8000b2a:	2300      	movne	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7e1b      	ldrb	r3, [r3, #24]
 8000b34:	7bfa      	ldrb	r2, [r7, #15]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d10a      	bne.n	8000b50 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	7e5b      	ldrb	r3, [r3, #25]
 8000b3e:	7bba      	ldrb	r2, [r7, #14]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d105      	bne.n	8000b50 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 8000b44:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	e003      	b.n	8000b58 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
	}
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue() {
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	135b      	asrs	r3, r3, #13
			+ (this->raw_value & 0x3FFF)) * -1;
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	461a      	mov	r2, r3
 8000b80:	0392      	lsls	r2, r2, #14
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	b21b      	sxth	r3, r3
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bb4:	fefb 7a67 	vrintm.f32	s15, s15
 8000bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bd4:	fef8 7a67 	vrinta.f32	s15, s15
 8000bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>:
 *
 *  Created on: Jan 30, 2022
 *      Author: SakuranohanaTH
 */
#include "ServoMotor.h"
ServoMotor::ServoMotor(TIM_HandleTypeDef *_servo_htim,
 8000be6:	b480      	push	{r7}
 8000be8:	b085      	sub	sp, #20
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	60f8      	str	r0, [r7, #12]
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
		uint32_t _SERVO_TIM_CHANNEL) {
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	22b4      	movs	r2, #180	; 0xb4
 8000c08:	615a      	str	r2, [r3, #20]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	761a      	strb	r2, [r3, #24]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2200      	movs	r2, #0
 8000c14:	765a      	strb	r2, [r3, #25]
	this->servo_htim = _servo_htim;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	68ba      	ldr	r2, [r7, #8]
 8000c1a:	601a      	str	r2, [r3, #0]
	this->SERVO_TIM_CHANNEL = _SERVO_TIM_CHANNEL;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	605a      	str	r2, [r3, #4]
	 * 2ms/20ms = 0.1 = 10%
	 *
	 * CRR = 0.1 * (19999 + 1) = 2000
	 *
	 */
	this->servo_htim->Instance->PSC = _PSC_SERVO_MOTOR - 1U;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	22ef      	movs	r2, #239	; 0xef
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28
	this->servo_htim->Instance->ARR = _ARR_SERVO_MOTOR - 1U;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000c36:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <_ZN10ServoMotorD1Ev>:
ServoMotor::~ServoMotor() {
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
}
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <_ZN10ServoMotor11ServoEnableEv>:
void ServoMotor::ServoEnable() {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Enable PWM for Servo Motor
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4610      	mov	r0, r2
 8000c70:	f00a ff02 	bl	800ba78 <HAL_TIM_PWM_Start>
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <_ZN10ServoMotor17ServoRotateDegreeEl>:
void ServoMotor::ServoDisable() {
	HAL_TIM_PWM_Stop(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Disable PWM for Servo Motor
}
void ServoMotor::ServoRotateDegree(int32_t _sdegrotate) {
 8000c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af02      	add	r7, sp, #8
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
	if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d13f      	bne.n	8000d0e <_ZN10ServoMotor17ServoRotateDegreeEl+0x92>
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	691c      	ldr	r4, [r3, #16]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	695d      	ldr	r5, [r3, #20]
				_sdegrotate, this->minsdeg, this->maxsdeg, // Mapping degree value to CRR value
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	ee07 3a90 	vmov	s15, r3
 8000ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ca8:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb4:	f7ff ff87 	bl	8000bc6 <_ZSt5roundf>
 8000cb8:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8000cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cc0:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ccc:	3301      	adds	r3, #1
 8000cce:	ee07 3a90 	vmov	s15, r3
 8000cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cd6:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cde:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce2:	f7ff ff60 	bl	8000ba6 <_ZSt5floorf>
 8000ce6:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8000cea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cee:	ee17 3a90 	vmov	r3, s15
 8000cf2:	9301      	str	r3, [sp, #4]
 8000cf4:	9600      	str	r6, [sp, #0]
 8000cf6:	462b      	mov	r3, r5
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	6839      	ldr	r1, [r7, #0]
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f000 f9cf 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000d02:	4602      	mov	r2, r0
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR3 = 0;
		this->servo_htim->Instance->CCR4 = 0;
		this->servo_htim->Instance->CCR5 = 0;
		this->servo_htim->Instance->CCR6 = 0;
	}
}
 8000d0c:	e176      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	d13f      	bne.n	8000d96 <_ZN10ServoMotor17ServoRotateDegreeEl+0x11a>
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	691c      	ldr	r4, [r3, #16]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d26:	3301      	adds	r3, #1
 8000d28:	ee07 3a90 	vmov	s15, r3
 8000d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d30:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d38:	eeb0 0a67 	vmov.f32	s0, s15
 8000d3c:	f7ff ff43 	bl	8000bc6 <_ZSt5roundf>
 8000d40:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8000d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d48:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d54:	3301      	adds	r3, #1
 8000d56:	ee07 3a90 	vmov	s15, r3
 8000d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d5e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d66:	eeb0 0a67 	vmov.f32	s0, s15
 8000d6a:	f7ff ff1c 	bl	8000ba6 <_ZSt5floorf>
 8000d6e:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8000d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d76:	ee17 3a90 	vmov	r3, s15
 8000d7a:	9301      	str	r3, [sp, #4]
 8000d7c:	9600      	str	r6, [sp, #0]
 8000d7e:	462b      	mov	r3, r5
 8000d80:	4622      	mov	r2, r4
 8000d82:	6839      	ldr	r1, [r7, #0]
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f000 f98b 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d94:	e132      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b08      	cmp	r3, #8
 8000d9c:	d13f      	bne.n	8000e1e <_ZN10ServoMotor17ServoRotateDegreeEl+0x1a2>
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	691c      	ldr	r4, [r3, #16]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dae:	3301      	adds	r3, #1
 8000db0:	ee07 3a90 	vmov	s15, r3
 8000db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000db8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc4:	f7ff feff 	bl	8000bc6 <_ZSt5roundf>
 8000dc8:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8000dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dd0:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	3301      	adds	r3, #1
 8000dde:	ee07 3a90 	vmov	s15, r3
 8000de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000de6:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000dea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dee:	eeb0 0a67 	vmov.f32	s0, s15
 8000df2:	f7ff fed8 	bl	8000ba6 <_ZSt5floorf>
 8000df6:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8000dfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dfe:	ee17 3a90 	vmov	r3, s15
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	9600      	str	r6, [sp, #0]
 8000e06:	462b      	mov	r3, r5
 8000e08:	4622      	mov	r2, r4
 8000e0a:	6839      	ldr	r1, [r7, #0]
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f000 f947 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000e12:	4602      	mov	r2, r0
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e1c:	e0ee      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b0c      	cmp	r3, #12
 8000e24:	d13f      	bne.n	8000ea6 <_ZN10ServoMotor17ServoRotateDegreeEl+0x22a>
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	691c      	ldr	r4, [r3, #16]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e36:	3301      	adds	r3, #1
 8000e38:	ee07 3a90 	vmov	s15, r3
 8000e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e40:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000e44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e48:	eeb0 0a67 	vmov.f32	s0, s15
 8000e4c:	f7ff febb 	bl	8000bc6 <_ZSt5roundf>
 8000e50:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8000e54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e58:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e64:	3301      	adds	r3, #1
 8000e66:	ee07 3a90 	vmov	s15, r3
 8000e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e6e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000e72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e76:	eeb0 0a67 	vmov.f32	s0, s15
 8000e7a:	f7ff fe94 	bl	8000ba6 <_ZSt5floorf>
 8000e7e:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8000e82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e86:	ee17 3a90 	vmov	r3, s15
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	9600      	str	r6, [sp, #0]
 8000e8e:	462b      	mov	r3, r5
 8000e90:	4622      	mov	r2, r4
 8000e92:	6839      	ldr	r1, [r7, #0]
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f000 f903 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ea4:	e0aa      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b10      	cmp	r3, #16
 8000eac:	d144      	bne.n	8000f38 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2bc>
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	691c      	ldr	r4, [r3, #16]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	ee07 3a90 	vmov	s15, r3
 8000ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ec8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed4:	f7ff fe77 	bl	8000bc6 <_ZSt5roundf>
 8000ed8:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8000edc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee0:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eec:	3301      	adds	r3, #1
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000efa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000efe:	eeb0 0a67 	vmov.f32	s0, s15
 8000f02:	f7ff fe50 	bl	8000ba6 <_ZSt5floorf>
 8000f06:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8000f0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f0e:	ee17 3a90 	vmov	r3, s15
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	9600      	str	r6, [sp, #0]
 8000f16:	462b      	mov	r3, r5
 8000f18:	4622      	mov	r2, r4
 8000f1a:	6839      	ldr	r1, [r7, #0]
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f8bf 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000f22:	4602      	mov	r2, r0
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000f2c:	e066      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
 8000f2e:	bf00      	nop
 8000f30:	3d4ccccd 	.word	0x3d4ccccd
 8000f34:	3e19999a 	.word	0x3e19999a
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b14      	cmp	r3, #20
 8000f3e:	d13f      	bne.n	8000fc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x344>
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	691c      	ldr	r4, [r3, #16]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f50:	3301      	adds	r3, #1
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f5a:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000f5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f62:	eeb0 0a67 	vmov.f32	s0, s15
 8000f66:	f7ff fe2e 	bl	8000bc6 <_ZSt5roundf>
 8000f6a:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8000f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f72:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7e:	3301      	adds	r3, #1
 8000f80:	ee07 3a90 	vmov	s15, r3
 8000f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f88:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f90:	eeb0 0a67 	vmov.f32	s0, s15
 8000f94:	f7ff fe07 	bl	8000ba6 <_ZSt5floorf>
 8000f98:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8000f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fa0:	ee17 3a90 	vmov	r3, s15
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	9600      	str	r6, [sp, #0]
 8000fa8:	462b      	mov	r3, r5
 8000faa:	4622      	mov	r2, r4
 8000fac:	6839      	ldr	r1, [r7, #0]
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 f876 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000fbe:	e01d      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
		this->servo_htim->Instance->CCR1 = 0;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR2 = 0;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	639a      	str	r2, [r3, #56]	; 0x38
		this->servo_htim->Instance->CCR3 = 0;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	63da      	str	r2, [r3, #60]	; 0x3c
		this->servo_htim->Instance->CCR4 = 0;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	641a      	str	r2, [r3, #64]	; 0x40
		this->servo_htim->Instance->CCR5 = 0;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	659a      	str	r2, [r3, #88]	; 0x58
		this->servo_htim->Instance->CCR6 = 0;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001004 <_ZN10ServoMotor20setDegreeGripperOpenEl>:
void ServoMotor::setDegreeGripperOpen(int32_t _sdegopen) {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
	this->sdegopen = _sdegopen;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	609a      	str	r2, [r3, #8]
	this->isSetDegreeGripperOpen = true;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	761a      	strb	r2, [r3, #24]
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_ZN10ServoMotor21setDegreeGripperCloseEl>:
void ServoMotor::setDegreeGripperClose(int32_t _sdegclose) {
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
	this->sdegclose = _sdegclose;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	60da      	str	r2, [r3, #12]
	this->isSetDegreeGripperClose = true;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	765a      	strb	r2, [r3, #25]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_ZN10ServoMotor12GripperCloseEv>:
void ServoMotor::GripperClose() {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperClose)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7e5b      	ldrb	r3, [r3, #25]
 8001054:	f083 0301 	eor.w	r3, r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d106      	bne.n	800106c <_ZN10ServoMotor12GripperCloseEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegclose);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	4619      	mov	r1, r3
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff fe09 	bl	8000c7c <_ZN10ServoMotor17ServoRotateDegreeEl>
 800106a:	e000      	b.n	800106e <_ZN10ServoMotor12GripperCloseEv+0x26>
		return;
 800106c:	bf00      	nop
}
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <_ZN10ServoMotor11GripperOpenEv>:
void ServoMotor::GripperOpen() {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperOpen)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7e1b      	ldrb	r3, [r3, #24]
 8001080:	f083 0301 	eor.w	r3, r3, #1
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d106      	bne.n	8001098 <_ZN10ServoMotor11GripperOpenEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegopen);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	4619      	mov	r1, r3
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff fdf3 	bl	8000c7c <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001096:	e000      	b.n	800109a <_ZN10ServoMotor11GripperOpenEv+0x26>
		return;
 8001098:	bf00      	nop
}
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN10ServoMotor10GripperMapElllll>:
int32_t ServoMotor::GripperMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	69f9      	ldr	r1, [r7, #28]
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	1a8a      	subs	r2, r1, r2
 80010ba:	fb02 f203 	mul.w	r2, r2, r3
 80010be:	6839      	ldr	r1, [r7, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	1acb      	subs	r3, r1, r3
 80010c4:	fb92 f2f3 	sdiv	r2, r2, r3
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	4413      	add	r3, r2
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010e6:	eef0 7ae7 	vabs.f32	s15, s15
 80010ea:	eeb0 0a67 	vmov.f32	s0, s15
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
 8001104:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4a18      	ldr	r2, [pc, #96]	; (800116c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 800110a:	615a      	str	r2, [r3, #20]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4a18      	ldr	r2, [pc, #96]	; (8001170 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001110:	619a      	str	r2, [r3, #24]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001118:	61da      	str	r2, [r3, #28]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4a15      	ldr	r2, [pc, #84]	; (8001174 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 800111e:	621a      	str	r2, [r3, #32]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001126:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	22c7      	movs	r2, #199	; 0xc7
 800113c:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 60.0f;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>)
 8001142:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001148:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 800114a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800117c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x84>
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f000 f832 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	60da      	str	r2, [r3, #12]
}
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	41a00000 	.word	0x41a00000
 8001170:	469c4000 	.word	0x469c4000
 8001174:	43480000 	.word	0x43480000
 8001178:	42700000 	.word	0x42700000
 800117c:	00000000 	.word	0x00000000

08001180 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
}
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	4619      	mov	r1, r3
 80011a8:	4610      	mov	r0, r2
 80011aa:	f00a fc65 	bl	800ba78 <HAL_TIM_PWM_Start>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	ed2d 8b02 	vpush	{d8}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80011d4:	eeb0 0a67 	vmov.f32	s0, s15
 80011d8:	f7ff ff7e 	bl	80010d8 <_ZSt4fabsf>
 80011dc:	eeb0 7a40 	vmov.f32	s14, s0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	edd3 7a05 	vldr	s15, [r3, #20]
 80011e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ee:	bf94      	ite	ls
 80011f0:	2301      	movls	r3, #1
 80011f2:	2300      	movhi	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	e01b      	b.n	800123a <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	edd3 7a04 	vldr	s15, [r3, #16]
 8001208:	eeb0 0a67 	vmov.f32	s0, s15
 800120c:	f7ff ff64 	bl	80010d8 <_ZSt4fabsf>
 8001210:	eeb0 7a40 	vmov.f32	s14, s0
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	edd3 7a06 	vldr	s15, [r3, #24]
 800121a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001222:	bfac      	ite	ge
 8001224:	2301      	movge	r3, #1
 8001226:	2300      	movlt	r3, #0
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	e001      	b.n	800123a <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001240:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80014dc <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8001244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	f2c0 80db 	blt.w	8001406 <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6898      	ldr	r0, [r3, #8]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	b29b      	uxth	r3, r3
 800125a:	2201      	movs	r2, #1
 800125c:	4619      	mov	r1, r3
 800125e:	f007 fe31 	bl	8008ec4 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126a:	3301      	adds	r3, #1
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001274:	edd7 7a03 	vldr	s15, [r7, #12]
 8001278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127c:	eddf 6a98 	vldr	s13, [pc, #608]	; 80014e0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001280:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001284:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001288:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800128c:	eeb0 0a67 	vmov.f32	s0, s15
 8001290:	f7ff fc99 	bl	8000bc6 <_ZSt5roundf>
 8001294:	eef0 7a40 	vmov.f32	s15, s0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a2:	ee17 2a90 	vmov	r2, s15
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d113      	bne.n	80012d8 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 80012ba:	085b      	lsrs	r3, r3, #1
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fa5b 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80012c2:	eeb0 7b40 	vmov.f64	d7, d0
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80012d0:	ee17 2a90 	vmov	r2, s15
 80012d4:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 80012d6:	e1e0      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d113      	bne.n	8001308 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 80012ea:	085b      	lsrs	r3, r3, #1
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 fa43 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80012f2:	eeb0 7b40 	vmov.f64	d7, d0
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001300:	ee17 2a90 	vmov	r2, s15
 8001304:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001306:	e1c8      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b08      	cmp	r3, #8
 800130e:	d113      	bne.n	8001338 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 800131a:	085b      	lsrs	r3, r3, #1
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fa2b 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001322:	eeb0 7b40 	vmov.f64	d7, d0
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001330:	ee17 2a90 	vmov	r2, s15
 8001334:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001336:	e1b0      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b0c      	cmp	r3, #12
 800133e:	d113      	bne.n	8001368 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001348:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 800134a:	085b      	lsrs	r3, r3, #1
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fa13 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001352:	eeb0 7b40 	vmov.f64	d7, d0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001360:	ee17 2a90 	vmov	r2, s15
 8001364:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001366:	e198      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b10      	cmp	r3, #16
 800136e:	d113      	bne.n	8001398 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001378:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800137a:	085b      	lsrs	r3, r3, #1
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f9fb 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001382:	eeb0 7b40 	vmov.f64	d7, d0
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001390:	ee17 2a90 	vmov	r2, s15
 8001394:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001396:	e180      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b14      	cmp	r3, #20
 800139e:	d113      	bne.n	80013c8 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 80013aa:	085b      	lsrs	r3, r3, #1
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 f9e3 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80013b2:	eeb0 7b40 	vmov.f64	d7, d0
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80013c0:	ee17 2a90 	vmov	r2, s15
 80013c4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80013c6:	e168      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2200      	movs	r2, #0
 80013d0:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2200      	movs	r2, #0
 80013da:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2200      	movs	r2, #0
 80013e4:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2200      	movs	r2, #0
 80013ee:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2200      	movs	r2, #0
 80013f8:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2200      	movs	r2, #0
 8001402:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001404:	e149      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	edd3 7a04 	vldr	s15, [r3, #16]
 800140c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80014e4 <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 8001410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	f200 80e5 	bhi.w	80015e6 <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6898      	ldr	r0, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	b29b      	uxth	r3, r3
 8001426:	2200      	movs	r2, #0
 8001428:	4619      	mov	r1, r3
 800142a:	f007 fd4b 	bl	8008ec4 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001436:	3301      	adds	r3, #1
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001440:	ed97 0a03 	vldr	s0, [r7, #12]
 8001444:	f7ff fe48 	bl	80010d8 <_ZSt4fabsf>
 8001448:	eef0 7a40 	vmov.f32	s15, s0
 800144c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001450:	eddf 6a23 	vldr	s13, [pc, #140]	; 80014e0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001454:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001458:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800145c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001460:	eeb0 0a67 	vmov.f32	s0, s15
 8001464:	f7ff fbaf 	bl	8000bc6 <_ZSt5roundf>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001476:	ee17 2a90 	vmov	r2, s15
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d113      	bne.n	80014ac <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 800148e:	085b      	lsrs	r3, r3, #1
 8001490:	4618      	mov	r0, r3
 8001492:	f000 f971 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001496:	eeb0 7b40 	vmov.f64	d7, d0
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014a4:	ee17 2a90 	vmov	r2, s15
 80014a8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80014aa:	e0f6      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d119      	bne.n	80014e8 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014bc:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 80014be:	085b      	lsrs	r3, r3, #1
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 f959 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80014c6:	eeb0 7b40 	vmov.f64	d7, d0
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014d4:	ee17 2a90 	vmov	r2, s15
 80014d8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80014da:	e0de      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 80014dc:	3a83126f 	.word	0x3a83126f
 80014e0:	4d64e1c0 	.word	0x4d64e1c0
 80014e4:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d113      	bne.n	8001518 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 80014fa:	085b      	lsrs	r3, r3, #1
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 f93b 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001502:	eeb0 7b40 	vmov.f64	d7, d0
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001510:	ee17 2a90 	vmov	r2, s15
 8001514:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001516:	e0c0      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b0c      	cmp	r3, #12
 800151e:	d113      	bne.n	8001548 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001528:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 800152a:	085b      	lsrs	r3, r3, #1
 800152c:	4618      	mov	r0, r3
 800152e:	f000 f923 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001532:	eeb0 7b40 	vmov.f64	d7, d0
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001540:	ee17 2a90 	vmov	r2, s15
 8001544:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001546:	e0a8      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b10      	cmp	r3, #16
 800154e:	d113      	bne.n	8001578 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800155a:	085b      	lsrs	r3, r3, #1
 800155c:	4618      	mov	r0, r3
 800155e:	f000 f90b 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001562:	eeb0 7b40 	vmov.f64	d7, d0
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001570:	ee17 2a90 	vmov	r2, s15
 8001574:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001576:	e090      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b14      	cmp	r3, #20
 800157e:	d113      	bne.n	80015a8 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001588:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 800158a:	085b      	lsrs	r3, r3, #1
 800158c:	4618      	mov	r0, r3
 800158e:	f000 f8f3 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001592:	eeb0 7b40 	vmov.f64	d7, d0
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80015a0:	ee17 2a90 	vmov	r2, s15
 80015a4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80015a6:	e078      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2200      	movs	r2, #0
 80015b0:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2200      	movs	r2, #0
 80015ba:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2200      	movs	r2, #0
 80015c4:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2200      	movs	r2, #0
 80015ce:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2200      	movs	r2, #0
 80015d8:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2200      	movs	r2, #0
 80015e2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80015e4:	e059      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d105      	bne.n	80015fa <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2200      	movs	r2, #0
 80015f6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015f8:	e04f      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d105      	bne.n	800160e <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2200      	movs	r2, #0
 800160a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800160c:	e045      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b08      	cmp	r3, #8
 8001614:	d105      	bne.n	8001622 <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2200      	movs	r2, #0
 800161e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001620:	e03b      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b0c      	cmp	r3, #12
 8001628:	d105      	bne.n	8001636 <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2200      	movs	r2, #0
 8001632:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001634:	e031      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b10      	cmp	r3, #16
 800163c:	d105      	bne.n	800164a <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2200      	movs	r2, #0
 8001646:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001648:	e027      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b14      	cmp	r3, #20
 8001650:	d105      	bne.n	800165e <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2200      	movs	r2, #0
 800165a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800165c:	e01d      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2200      	movs	r2, #0
 8001666:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2200      	movs	r2, #0
 8001670:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2200      	movs	r2, #0
 800167a:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2200      	movs	r2, #0
 8001684:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2200      	movs	r2, #0
 8001698:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	ecbd 8b02 	vpop	{d8}
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop

080016a8 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 80016b4:	ed97 0a00 	vldr	s0, [r7]
 80016b8:	f7ff fd0e 	bl	80010d8 <_ZSt4fabsf>
 80016bc:	eef0 7a40 	vmov.f32	s15, s0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80016e2:	eeb0 0b47 	vmov.f64	d0, d7
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ffe5 	bl	80016ce <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001704:	eeb0 7b40 	vmov.f64	d7, d0
 8001708:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	0000      	movs	r0, r0
 800171c:	0000      	movs	r0, r0
	...

08001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>:
void Stepper::StepperOpenLoopSpeed(float _speed) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001732:	edd7 7a00 	vldr	s15, [r7]
 8001736:	ee27 7a27 	vmul.f32	s14, s14, s15
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001740:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	edd3 7a08 	vldr	s15, [r3, #32]
 800174a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI)));
 8001752:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8001770 <_ZN7Stepper20StepperOpenLoopSpeedEf+0x50>
 8001756:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 800175a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800175e:	eeb0 0a67 	vmov.f32	s0, s15
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff fd28 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	54442eea 	.word	0x54442eea
 8001774:	401921fb 	.word	0x401921fb

08001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	ee07 3a90 	vmov	s15, r3
 8001786:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800178a:	eeb0 0b47 	vmov.f64	d0, d7
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <MX_CRC_Init+0x54>)
 800179e:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <MX_CRC_Init+0x58>)
 80017a0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <MX_CRC_Init+0x54>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80017a8:	4b10      	ldr	r3, [pc, #64]	; (80017ec <MX_CRC_Init+0x54>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_CRC_Init+0x54>)
 80017b0:	f248 0205 	movw	r2, #32773	; 0x8005
 80017b4:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <MX_CRC_Init+0x54>)
 80017b8:	2208      	movs	r2, #8
 80017ba:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <MX_CRC_Init+0x54>)
 80017be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017c2:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_CRC_Init+0x54>)
 80017c6:	2220      	movs	r2, #32
 80017c8:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <MX_CRC_Init+0x54>)
 80017cc:	2280      	movs	r2, #128	; 0x80
 80017ce:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_CRC_Init+0x54>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_CRC_Init+0x54>)
 80017d8:	f004 f98c 	bl	8005af4 <HAL_CRC_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 80017e2:	f002 f9ef 	bl	8003bc4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	240007d8 	.word	0x240007d8
 80017f0:	58024c00 	.word	0x58024c00

080017f4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <HAL_CRC_MspInit+0x3c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d10e      	bne.n	8001824 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_CRC_MspInit+0x40>)
 8001808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180c:	4a09      	ldr	r2, [pc, #36]	; (8001834 <HAL_CRC_MspInit+0x40>)
 800180e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <HAL_CRC_MspInit+0x40>)
 8001818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	58024c00 	.word	0x58024c00
 8001834:	58024400 	.word	0x58024400

08001838 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800183e:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <MX_DMA_Init+0x7c>)
 8001840:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001844:	4a1b      	ldr	r2, [pc, #108]	; (80018b4 <MX_DMA_Init+0x7c>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <MX_DMA_Init+0x7c>)
 8001850:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	200b      	movs	r0, #11
 8001862:	f004 f906 	bl	8005a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001866:	200b      	movs	r0, #11
 8001868:	f004 f91d 	bl	8005aa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2100      	movs	r1, #0
 8001870:	200c      	movs	r0, #12
 8001872:	f004 f8fe 	bl	8005a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001876:	200c      	movs	r0, #12
 8001878:	f004 f915 	bl	8005aa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	2100      	movs	r1, #0
 8001880:	200d      	movs	r0, #13
 8001882:	f004 f8f6 	bl	8005a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001886:	200d      	movs	r0, #13
 8001888:	f004 f90d 	bl	8005aa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	200e      	movs	r0, #14
 8001892:	f004 f8ee 	bl	8005a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001896:	200e      	movs	r0, #14
 8001898:	f004 f905 	bl	8005aa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	200f      	movs	r0, #15
 80018a2:	f004 f8e6 	bl	8005a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80018a6:	200f      	movs	r0, #15
 80018a8:	f004 f8fd 	bl	8005aa6 <HAL_NVIC_EnableIRQ>

}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	58024400 	.word	0x58024400

080018b8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08c      	sub	sp, #48	; 0x30
 80018bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ce:	4b8e      	ldr	r3, [pc, #568]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d4:	4a8c      	ldr	r2, [pc, #560]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018d6:	f043 0310 	orr.w	r3, r3, #16
 80018da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018de:	4b8a      	ldr	r3, [pc, #552]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ec:	4b86      	ldr	r3, [pc, #536]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f2:	4a85      	ldr	r2, [pc, #532]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018fc:	4b82      	ldr	r3, [pc, #520]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800190a:	4b7f      	ldr	r3, [pc, #508]	; (8001b08 <MX_GPIO_Init+0x250>)
 800190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001910:	4a7d      	ldr	r2, [pc, #500]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191a:	4b7b      	ldr	r3, [pc, #492]	; (8001b08 <MX_GPIO_Init+0x250>)
 800191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001928:	4b77      	ldr	r3, [pc, #476]	; (8001b08 <MX_GPIO_Init+0x250>)
 800192a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800192e:	4a76      	ldr	r2, [pc, #472]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001938:	4b73      	ldr	r3, [pc, #460]	; (8001b08 <MX_GPIO_Init+0x250>)
 800193a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	4b70      	ldr	r3, [pc, #448]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194c:	4a6e      	ldr	r2, [pc, #440]	; (8001b08 <MX_GPIO_Init+0x250>)
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001956:	4b6c      	ldr	r3, [pc, #432]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001964:	4b68      	ldr	r3, [pc, #416]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196a:	4a67      	ldr	r2, [pc, #412]	; (8001b08 <MX_GPIO_Init+0x250>)
 800196c:	f043 0308 	orr.w	r3, r3, #8
 8001970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001974:	4b64      	ldr	r3, [pc, #400]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001982:	4b61      	ldr	r3, [pc, #388]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001988:	4a5f      	ldr	r2, [pc, #380]	; (8001b08 <MX_GPIO_Init+0x250>)
 800198a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800198e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001992:	4b5d      	ldr	r3, [pc, #372]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80019a0:	2200      	movs	r2, #0
 80019a2:	f644 2121 	movw	r1, #18977	; 0x4a21
 80019a6:	4859      	ldr	r0, [pc, #356]	; (8001b0c <MX_GPIO_Init+0x254>)
 80019a8:	f007 fa8c 	bl	8008ec4 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	f24c 0102 	movw	r1, #49154	; 0xc002
 80019b2:	4857      	ldr	r0, [pc, #348]	; (8001b10 <MX_GPIO_Init+0x258>)
 80019b4:	f007 fa86 	bl	8008ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019be:	4855      	ldr	r0, [pc, #340]	; (8001b14 <MX_GPIO_Init+0x25c>)
 80019c0:	f007 fa80 	bl	8008ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ca:	4853      	ldr	r0, [pc, #332]	; (8001b18 <MX_GPIO_Init+0x260>)
 80019cc:	f007 fa7a 	bl	8008ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d6:	4851      	ldr	r0, [pc, #324]	; (8001b1c <MX_GPIO_Init+0x264>)
 80019d8:	f007 fa74 	bl	8008ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 80019dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	4619      	mov	r1, r3
 80019f2:	4849      	ldr	r0, [pc, #292]	; (8001b18 <MX_GPIO_Init+0x260>)
 80019f4:	f007 f8b6 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80019f8:	f644 2321 	movw	r3, #18977	; 0x4a21
 80019fc:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	4619      	mov	r1, r3
 8001a10:	483e      	ldr	r0, [pc, #248]	; (8001b0c <MX_GPIO_Init+0x254>)
 8001a12:	f007 f8a7 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 8001a16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4838      	ldr	r0, [pc, #224]	; (8001b10 <MX_GPIO_Init+0x258>)
 8001a2e:	f007 f899 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8001a32:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4831      	ldr	r0, [pc, #196]	; (8001b10 <MX_GPIO_Init+0x258>)
 8001a4c:	f007 f88a 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001a62:	f107 031c 	add.w	r3, r7, #28
 8001a66:	4619      	mov	r1, r3
 8001a68:	482a      	ldr	r0, [pc, #168]	; (8001b14 <MX_GPIO_Init+0x25c>)
 8001a6a:	f007 f87b 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001a6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a74:	2301      	movs	r3, #1
 8001a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	4619      	mov	r1, r3
 8001a86:	4824      	ldr	r0, [pc, #144]	; (8001b18 <MX_GPIO_Init+0x260>)
 8001a88:	f007 f86c 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8001a8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a92:	2301      	movs	r3, #1
 8001a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 8001a9e:	f107 031c 	add.w	r3, r7, #28
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	481d      	ldr	r0, [pc, #116]	; (8001b1c <MX_GPIO_Init+0x264>)
 8001aa6:	f007 f85d 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM5_Pin;
 8001aaa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ab0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8001aba:	f107 031c 	add.w	r3, r7, #28
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4817      	ldr	r0, [pc, #92]	; (8001b20 <MX_GPIO_Init+0x268>)
 8001ac2:	f007 f84f 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8001ac6:	23c0      	movs	r3, #192	; 0xc0
 8001ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480c      	ldr	r0, [pc, #48]	; (8001b0c <MX_GPIO_Init+0x254>)
 8001adc:	f007 f842 	bl	8008b64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2017      	movs	r0, #23
 8001ae6:	f003 ffc4 	bl	8005a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001aea:	2017      	movs	r0, #23
 8001aec:	f003 ffdb 	bl	8005aa6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2100      	movs	r1, #0
 8001af4:	2028      	movs	r0, #40	; 0x28
 8001af6:	f003 ffbc 	bl	8005a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001afa:	2028      	movs	r0, #40	; 0x28
 8001afc:	f003 ffd3 	bl	8005aa6 <HAL_NVIC_EnableIRQ>

}
 8001b00:	bf00      	nop
 8001b02:	3730      	adds	r7, #48	; 0x30
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	58024400 	.word	0x58024400
 8001b0c:	58020400 	.word	0x58020400
 8001b10:	58021000 	.word	0x58021000
 8001b14:	58020c00 	.word	0x58020c00
 8001b18:	58020800 	.word	0x58020800
 8001b1c:	58020000 	.word	0x58020000
 8001b20:	58021800 	.word	0x58021800

08001b24 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b2e:	edc7 0a00 	vstr	s1, [r7]
 8001b32:	edd7 0a00 	vldr	s1, [r7]
 8001b36:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b3a:	f00d ffb1 	bl	800faa0 <atan2f>
 8001b3e:	eef0 7a40 	vmov.f32	s15, s0
 8001b42:	eeb0 0a67 	vmov.f32	s0, s15
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b56:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b5a:	f00d fb31 	bl	800f1c0 <cosf>
 8001b5e:	eef0 7a40 	vmov.f32	s15, s0
 8001b62:	eeb0 0a67 	vmov.f32	s0, s15
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b76:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b7a:	f00d fef1 	bl	800f960 <sinf>
 8001b7e:	eef0 7a40 	vmov.f32	s15, s0
 8001b82:	eeb0 0a67 	vmov.f32	s0, s15
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_ZSt4sqrtf>:
  { return __builtin_sqrtf(__x); }
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b96:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b9a:	f00d ff83 	bl	800faa4 <sqrtf>
 8001b9e:	eef0 7a40 	vmov.f32	s15, s0
 8001ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_UARTEx_RxEventCallback>:
#define Rx_BUFFER_SIZE   20
uint8_t Old_Rx_Buffer[Rx_BUFFER_SIZE] = { 0 };
uint8_t New_Rx_Buffer[Rx_BUFFER_SIZE] = { 0 };
volatile uint16_t cmdDataSize = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001bac:	b5b0      	push	{r4, r5, r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a99      	ldr	r2, [pc, #612]	; (8001e20 <HAL_UARTEx_RxEventCallback+0x274>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	f040 81c1 	bne.w	8001f44 <HAL_UARTEx_RxEventCallback+0x398>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 8001bc2:	4a98      	ldr	r2, [pc, #608]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001bc4:	4b98      	ldr	r3, [pc, #608]	; (8001e28 <HAL_UARTEx_RxEventCallback+0x27c>)
 8001bc6:	4614      	mov	r4, r2
 8001bc8:	461d      	mov	r5, r3
 8001bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bce:	682b      	ldr	r3, [r5, #0]
 8001bd0:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 8001bd2:	2214      	movs	r2, #20
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4894      	ldr	r0, [pc, #592]	; (8001e28 <HAL_UARTEx_RxEventCallback+0x27c>)
 8001bd8:	f00e f9b2 	bl	800ff40 <memset>
		if (Size - 2 > 0 && Size <= Rx_BUFFER_SIZE) {// Check if there's some data.
 8001bdc:	887b      	ldrh	r3, [r7, #2]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	f240 819f 	bls.w	8001f22 <HAL_UARTEx_RxEventCallback+0x376>
 8001be4:	887b      	ldrh	r3, [r7, #2]
 8001be6:	2b14      	cmp	r3, #20
 8001be8:	f200 819b 	bhi.w	8001f22 <HAL_UARTEx_RxEventCallback+0x376>
			cmdDataSize = Size - 2;	// Calculate data length.
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	3b02      	subs	r3, #2
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	4b8e      	ldr	r3, [pc, #568]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001bf4:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) Old_Rx_Buffer,
 8001bf6:	4b8d      	ldr	r3, [pc, #564]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4989      	ldr	r1, [pc, #548]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001c00:	488b      	ldr	r0, [pc, #556]	; (8001e30 <HAL_UARTEx_RxEventCallback+0x284>)
 8001c02:	f003 ffdb 	bl	8005bbc <HAL_CRC_Calculate>
 8001c06:	4603      	mov	r3, r0
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	4b8a      	ldr	r3, [pc, #552]	; (8001e34 <HAL_UARTEx_RxEventCallback+0x288>)
 8001c0c:	801a      	strh	r2, [r3, #0]
					cmdDataSize); // Calculate data only by STM32 Hardware CRC.
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 8001c0e:	4b87      	ldr	r3, [pc, #540]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b83      	ldr	r3, [pc, #524]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001c18:	5c9b      	ldrb	r3, [r3, r2]
 8001c1a:	021b      	lsls	r3, r3, #8
					| Old_Rx_Buffer[cmdDataSize + 1]; // Read Expected CRC from Protocol.
 8001c1c:	b21a      	sxth	r2, r3
 8001c1e:	4b83      	ldr	r3, [pc, #524]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	3301      	adds	r3, #1
 8001c26:	497f      	ldr	r1, [pc, #508]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001c28:	5ccb      	ldrb	r3, [r1, r3]
 8001c2a:	b21b      	sxth	r3, r3
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	b21b      	sxth	r3, r3
 8001c30:	b29a      	uxth	r2, r3
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 8001c32:	4b81      	ldr	r3, [pc, #516]	; (8001e38 <HAL_UARTEx_RxEventCallback+0x28c>)
 8001c34:	801a      	strh	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001c36:	4b7f      	ldr	r3, [pc, #508]	; (8001e34 <HAL_UARTEx_RxEventCallback+0x288>)
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	4b7e      	ldr	r3, [pc, #504]	; (8001e38 <HAL_UARTEx_RxEventCallback+0x28c>)
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	429a      	cmp	r2, r3
 8001c44:	bf0c      	ite	eq
 8001c46:	2301      	moveq	r3, #1
 8001c48:	2300      	movne	r3, #0
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 818a 	beq.w	8001f66 <HAL_UARTEx_RxEventCallback+0x3ba>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001c52:	2201      	movs	r2, #1
 8001c54:	2102      	movs	r1, #2
 8001c56:	4879      	ldr	r0, [pc, #484]	; (8001e3c <HAL_UARTEx_RxEventCallback+0x290>)
 8001c58:	f007 f934 	bl	8008ec4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c62:	4877      	ldr	r0, [pc, #476]	; (8001e40 <HAL_UARTEx_RxEventCallback+0x294>)
 8001c64:	f007 f92e 	bl	8008ec4 <HAL_GPIO_WritePin>
				if (Old_Rx_Buffer[0] == 0x41 && cmdDataSize == 3) {	// Joint Jog q1
 8001c68:	4b6e      	ldr	r3, [pc, #440]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b41      	cmp	r3, #65	; 0x41
 8001c6e:	d106      	bne.n	8001c7e <HAL_UARTEx_RxEventCallback+0xd2>
 8001c70:	4b6e      	ldr	r3, [pc, #440]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d101      	bne.n	8001c7e <HAL_UARTEx_RxEventCallback+0xd2>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_UARTEx_RxEventCallback+0xd4>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00b      	beq.n	8001c9c <HAL_UARTEx_RxEventCallback+0xf0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001c84:	4b67      	ldr	r3, [pc, #412]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001c86:	785b      	ldrb	r3, [r3, #1]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	b25a      	sxtb	r2, r3
 8001c8c:	4b65      	ldr	r3, [pc, #404]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001c8e:	789b      	ldrb	r3, [r3, #2]
 8001c90:	b25b      	sxtb	r3, r3
 8001c92:	4313      	orrs	r3, r2
 8001c94:	b25a      	sxtb	r2, r3
 8001c96:	4b6b      	ldr	r3, [pc, #428]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x298>)
 8001c98:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001c9a:	e164      	b.n	8001f66 <HAL_UARTEx_RxEventCallback+0x3ba>
				} else if (Old_Rx_Buffer[0] == 0x42 && cmdDataSize == 3) {// Joint Jog q2
 8001c9c:	4b61      	ldr	r3, [pc, #388]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b42      	cmp	r3, #66	; 0x42
 8001ca2:	d106      	bne.n	8001cb2 <HAL_UARTEx_RxEventCallback+0x106>
 8001ca4:	4b61      	ldr	r3, [pc, #388]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d101      	bne.n	8001cb2 <HAL_UARTEx_RxEventCallback+0x106>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_UARTEx_RxEventCallback+0x108>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00b      	beq.n	8001cd0 <HAL_UARTEx_RxEventCallback+0x124>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq2 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001cb8:	4b5a      	ldr	r3, [pc, #360]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001cba:	785b      	ldrb	r3, [r3, #1]
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	b25a      	sxtb	r2, r3
 8001cc0:	4b58      	ldr	r3, [pc, #352]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001cc2:	789b      	ldrb	r3, [r3, #2]
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	b25a      	sxtb	r2, r3
 8001cca:	4b5f      	ldr	r3, [pc, #380]	; (8001e48 <HAL_UARTEx_RxEventCallback+0x29c>)
 8001ccc:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001cce:	e14a      	b.n	8001f66 <HAL_UARTEx_RxEventCallback+0x3ba>
				} else if (Old_Rx_Buffer[0] == 0x43 && cmdDataSize == 3) {// Joint Jog q3
 8001cd0:	4b54      	ldr	r3, [pc, #336]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b43      	cmp	r3, #67	; 0x43
 8001cd6:	d106      	bne.n	8001ce6 <HAL_UARTEx_RxEventCallback+0x13a>
 8001cd8:	4b54      	ldr	r3, [pc, #336]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d101      	bne.n	8001ce6 <HAL_UARTEx_RxEventCallback+0x13a>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_UARTEx_RxEventCallback+0x13c>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00b      	beq.n	8001d04 <HAL_UARTEx_RxEventCallback+0x158>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq3 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001cec:	4b4d      	ldr	r3, [pc, #308]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001cee:	785b      	ldrb	r3, [r3, #1]
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	b25a      	sxtb	r2, r3
 8001cf4:	4b4b      	ldr	r3, [pc, #300]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001cf6:	789b      	ldrb	r3, [r3, #2]
 8001cf8:	b25b      	sxtb	r3, r3
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b25a      	sxtb	r2, r3
 8001cfe:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <HAL_UARTEx_RxEventCallback+0x2a0>)
 8001d00:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001d02:	e130      	b.n	8001f66 <HAL_UARTEx_RxEventCallback+0x3ba>
				} else if (Old_Rx_Buffer[0] == 0x44 && cmdDataSize == 3) {// Joint Jog q4
 8001d04:	4b47      	ldr	r3, [pc, #284]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b44      	cmp	r3, #68	; 0x44
 8001d0a:	d106      	bne.n	8001d1a <HAL_UARTEx_RxEventCallback+0x16e>
 8001d0c:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d101      	bne.n	8001d1a <HAL_UARTEx_RxEventCallback+0x16e>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <HAL_UARTEx_RxEventCallback+0x170>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00b      	beq.n	8001d38 <HAL_UARTEx_RxEventCallback+0x18c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq4 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001d20:	4b40      	ldr	r3, [pc, #256]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d22:	785b      	ldrb	r3, [r3, #1]
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	b25a      	sxtb	r2, r3
 8001d28:	4b3e      	ldr	r3, [pc, #248]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d2a:	789b      	ldrb	r3, [r3, #2]
 8001d2c:	b25b      	sxtb	r3, r3
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	b25a      	sxtb	r2, r3
 8001d32:	4b47      	ldr	r3, [pc, #284]	; (8001e50 <HAL_UARTEx_RxEventCallback+0x2a4>)
 8001d34:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001d36:	e116      	b.n	8001f66 <HAL_UARTEx_RxEventCallback+0x3ba>
				} else if (Old_Rx_Buffer[0] == 0x51 && cmdDataSize == 3) {// Linear Jog X
 8001d38:	4b3a      	ldr	r3, [pc, #232]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b51      	cmp	r3, #81	; 0x51
 8001d3e:	d106      	bne.n	8001d4e <HAL_UARTEx_RxEventCallback+0x1a2>
 8001d40:	4b3a      	ldr	r3, [pc, #232]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d101      	bne.n	8001d4e <HAL_UARTEx_RxEventCallback+0x1a2>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_UARTEx_RxEventCallback+0x1a4>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00b      	beq.n	8001d6c <HAL_UARTEx_RxEventCallback+0x1c0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001d54:	4b33      	ldr	r3, [pc, #204]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d56:	785b      	ldrb	r3, [r3, #1]
 8001d58:	021b      	lsls	r3, r3, #8
 8001d5a:	b25a      	sxtb	r2, r3
 8001d5c:	4b31      	ldr	r3, [pc, #196]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d5e:	789b      	ldrb	r3, [r3, #2]
 8001d60:	b25b      	sxtb	r3, r3
 8001d62:	4313      	orrs	r3, r2
 8001d64:	b25a      	sxtb	r2, r3
 8001d66:	4b3b      	ldr	r3, [pc, #236]	; (8001e54 <HAL_UARTEx_RxEventCallback+0x2a8>)
 8001d68:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001d6a:	e0fc      	b.n	8001f66 <HAL_UARTEx_RxEventCallback+0x3ba>
				} else if (Old_Rx_Buffer[0] == 0x52 && cmdDataSize == 3) {// Linear Jog Y
 8001d6c:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b52      	cmp	r3, #82	; 0x52
 8001d72:	d106      	bne.n	8001d82 <HAL_UARTEx_RxEventCallback+0x1d6>
 8001d74:	4b2d      	ldr	r3, [pc, #180]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d101      	bne.n	8001d82 <HAL_UARTEx_RxEventCallback+0x1d6>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <HAL_UARTEx_RxEventCallback+0x1d8>
 8001d82:	2300      	movs	r3, #0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00b      	beq.n	8001da0 <HAL_UARTEx_RxEventCallback+0x1f4>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dy = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001d88:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d8a:	785b      	ldrb	r3, [r3, #1]
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	b25a      	sxtb	r2, r3
 8001d90:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d92:	789b      	ldrb	r3, [r3, #2]
 8001d94:	b25b      	sxtb	r3, r3
 8001d96:	4313      	orrs	r3, r2
 8001d98:	b25a      	sxtb	r2, r3
 8001d9a:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <HAL_UARTEx_RxEventCallback+0x2ac>)
 8001d9c:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001d9e:	e0e2      	b.n	8001f66 <HAL_UARTEx_RxEventCallback+0x3ba>
				} else if (Old_Rx_Buffer[0] == 0x53 && cmdDataSize == 3) {// Linear Jog Z
 8001da0:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b53      	cmp	r3, #83	; 0x53
 8001da6:	d106      	bne.n	8001db6 <HAL_UARTEx_RxEventCallback+0x20a>
 8001da8:	4b20      	ldr	r3, [pc, #128]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d101      	bne.n	8001db6 <HAL_UARTEx_RxEventCallback+0x20a>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <HAL_UARTEx_RxEventCallback+0x20c>
 8001db6:	2300      	movs	r3, #0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00b      	beq.n	8001dd4 <HAL_UARTEx_RxEventCallback+0x228>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dz = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001dbe:	785b      	ldrb	r3, [r3, #1]
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	b25a      	sxtb	r2, r3
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001dc6:	789b      	ldrb	r3, [r3, #2]
 8001dc8:	b25b      	sxtb	r3, r3
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	b25a      	sxtb	r2, r3
 8001dce:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <HAL_UARTEx_RxEventCallback+0x2b0>)
 8001dd0:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001dd2:	e0c8      	b.n	8001f66 <HAL_UARTEx_RxEventCallback+0x3ba>
				} else if (Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3) {// Linear Jog Yaw
 8001dd4:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b54      	cmp	r3, #84	; 0x54
 8001dda:	d106      	bne.n	8001dea <HAL_UARTEx_RxEventCallback+0x23e>
 8001ddc:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d101      	bne.n	8001dea <HAL_UARTEx_RxEventCallback+0x23e>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <HAL_UARTEx_RxEventCallback+0x240>
 8001dea:	2300      	movs	r3, #0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00b      	beq.n	8001e08 <HAL_UARTEx_RxEventCallback+0x25c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001df2:	785b      	ldrb	r3, [r3, #1]
 8001df4:	021b      	lsls	r3, r3, #8
 8001df6:	b25a      	sxtb	r2, r3
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001dfa:	789b      	ldrb	r3, [r3, #2]
 8001dfc:	b25b      	sxtb	r3, r3
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	b25a      	sxtb	r2, r3
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_UARTEx_RxEventCallback+0x2b4>)
 8001e04:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001e06:	e0ae      	b.n	8001f66 <HAL_UARTEx_RxEventCallback+0x3ba>
				} else if (Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5) { // Joint Jog 4q
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b61      	cmp	r3, #97	; 0x61
 8001e0e:	d129      	bne.n	8001e64 <HAL_UARTEx_RxEventCallback+0x2b8>
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	2b05      	cmp	r3, #5
 8001e18:	d124      	bne.n	8001e64 <HAL_UARTEx_RxEventCallback+0x2b8>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e023      	b.n	8001e66 <HAL_UARTEx_RxEventCallback+0x2ba>
 8001e1e:	bf00      	nop
 8001e20:	24000d48 	.word	0x24000d48
 8001e24:	2400033c 	.word	0x2400033c
 8001e28:	24000350 	.word	0x24000350
 8001e2c:	24000364 	.word	0x24000364
 8001e30:	240007d8 	.word	0x240007d8
 8001e34:	24000332 	.word	0x24000332
 8001e38:	24000334 	.word	0x24000334
 8001e3c:	58021000 	.word	0x58021000
 8001e40:	58020400 	.word	0x58020400
 8001e44:	2400032a 	.word	0x2400032a
 8001e48:	2400032b 	.word	0x2400032b
 8001e4c:	2400032c 	.word	0x2400032c
 8001e50:	2400032d 	.word	0x2400032d
 8001e54:	2400032e 	.word	0x2400032e
 8001e58:	2400032f 	.word	0x2400032f
 8001e5c:	24000330 	.word	0x24000330
 8001e60:	24000331 	.word	0x24000331
 8001e64:	2300      	movs	r3, #0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d014      	beq.n	8001e94 <HAL_UARTEx_RxEventCallback+0x2e8>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 8001e6a:	4b75      	ldr	r3, [pc, #468]	; (8002040 <HAL_UARTEx_RxEventCallback+0x494>)
 8001e6c:	785b      	ldrb	r3, [r3, #1]
 8001e6e:	b25a      	sxtb	r2, r3
 8001e70:	4b74      	ldr	r3, [pc, #464]	; (8002044 <HAL_UARTEx_RxEventCallback+0x498>)
 8001e72:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 8001e74:	4b72      	ldr	r3, [pc, #456]	; (8002040 <HAL_UARTEx_RxEventCallback+0x494>)
 8001e76:	789b      	ldrb	r3, [r3, #2]
 8001e78:	b25a      	sxtb	r2, r3
 8001e7a:	4b73      	ldr	r3, [pc, #460]	; (8002048 <HAL_UARTEx_RxEventCallback+0x49c>)
 8001e7c:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 8001e7e:	4b70      	ldr	r3, [pc, #448]	; (8002040 <HAL_UARTEx_RxEventCallback+0x494>)
 8001e80:	78db      	ldrb	r3, [r3, #3]
 8001e82:	b25a      	sxtb	r2, r3
 8001e84:	4b71      	ldr	r3, [pc, #452]	; (800204c <HAL_UARTEx_RxEventCallback+0x4a0>)
 8001e86:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 8001e88:	4b6d      	ldr	r3, [pc, #436]	; (8002040 <HAL_UARTEx_RxEventCallback+0x494>)
 8001e8a:	791b      	ldrb	r3, [r3, #4]
 8001e8c:	b25a      	sxtb	r2, r3
 8001e8e:	4b70      	ldr	r3, [pc, #448]	; (8002050 <HAL_UARTEx_RxEventCallback+0x4a4>)
 8001e90:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001e92:	e068      	b.n	8001f66 <HAL_UARTEx_RxEventCallback+0x3ba>
				} else if (Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5) { // Linear Jog X,Y,Z,Yaw
 8001e94:	4b6a      	ldr	r3, [pc, #424]	; (8002040 <HAL_UARTEx_RxEventCallback+0x494>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b71      	cmp	r3, #113	; 0x71
 8001e9a:	d106      	bne.n	8001eaa <HAL_UARTEx_RxEventCallback+0x2fe>
 8001e9c:	4b6d      	ldr	r3, [pc, #436]	; (8002054 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2b05      	cmp	r3, #5
 8001ea4:	d101      	bne.n	8001eaa <HAL_UARTEx_RxEventCallback+0x2fe>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_UARTEx_RxEventCallback+0x300>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d014      	beq.n	8001eda <HAL_UARTEx_RxEventCallback+0x32e>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = Old_Rx_Buffer[1];
 8001eb0:	4b63      	ldr	r3, [pc, #396]	; (8002040 <HAL_UARTEx_RxEventCallback+0x494>)
 8001eb2:	785b      	ldrb	r3, [r3, #1]
 8001eb4:	b25a      	sxtb	r2, r3
 8001eb6:	4b68      	ldr	r3, [pc, #416]	; (8002058 <HAL_UARTEx_RxEventCallback+0x4ac>)
 8001eb8:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 8001eba:	4b61      	ldr	r3, [pc, #388]	; (8002040 <HAL_UARTEx_RxEventCallback+0x494>)
 8001ebc:	789b      	ldrb	r3, [r3, #2]
 8001ebe:	b25a      	sxtb	r2, r3
 8001ec0:	4b66      	ldr	r3, [pc, #408]	; (800205c <HAL_UARTEx_RxEventCallback+0x4b0>)
 8001ec2:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 8001ec4:	4b5e      	ldr	r3, [pc, #376]	; (8002040 <HAL_UARTEx_RxEventCallback+0x494>)
 8001ec6:	78db      	ldrb	r3, [r3, #3]
 8001ec8:	b25a      	sxtb	r2, r3
 8001eca:	4b65      	ldr	r3, [pc, #404]	; (8002060 <HAL_UARTEx_RxEventCallback+0x4b4>)
 8001ecc:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 8001ece:	4b5c      	ldr	r3, [pc, #368]	; (8002040 <HAL_UARTEx_RxEventCallback+0x494>)
 8001ed0:	791b      	ldrb	r3, [r3, #4]
 8001ed2:	b25a      	sxtb	r2, r3
 8001ed4:	4b63      	ldr	r3, [pc, #396]	; (8002064 <HAL_UARTEx_RxEventCallback+0x4b8>)
 8001ed6:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001ed8:	e045      	b.n	8001f66 <HAL_UARTEx_RxEventCallback+0x3ba>
				} else if (Old_Rx_Buffer[0] == 0x81 && cmdDataSize == 2) {// Servo
 8001eda:	4b59      	ldr	r3, [pc, #356]	; (8002040 <HAL_UARTEx_RxEventCallback+0x494>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b81      	cmp	r3, #129	; 0x81
 8001ee0:	d106      	bne.n	8001ef0 <HAL_UARTEx_RxEventCallback+0x344>
 8001ee2:	4b5c      	ldr	r3, [pc, #368]	; (8002054 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d101      	bne.n	8001ef0 <HAL_UARTEx_RxEventCallback+0x344>
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <HAL_UARTEx_RxEventCallback+0x346>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d037      	beq.n	8001f66 <HAL_UARTEx_RxEventCallback+0x3ba>
					gripperstate = Old_Rx_Buffer[1];
 8001ef6:	4b52      	ldr	r3, [pc, #328]	; (8002040 <HAL_UARTEx_RxEventCallback+0x494>)
 8001ef8:	785b      	ldrb	r3, [r3, #1]
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b5a      	ldr	r3, [pc, #360]	; (8002068 <HAL_UARTEx_RxEventCallback+0x4bc>)
 8001efe:	601a      	str	r2, [r3, #0]
					if (gripperstate == 0) {
 8001f00:	4b59      	ldr	r3, [pc, #356]	; (8002068 <HAL_UARTEx_RxEventCallback+0x4bc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_UARTEx_RxEventCallback+0x36e>
						gripper.GripperOpen();
 8001f12:	4856      	ldr	r0, [pc, #344]	; (800206c <HAL_UARTEx_RxEventCallback+0x4c0>)
 8001f14:	f7ff f8ae 	bl	8001074 <_ZN10ServoMotor11GripperOpenEv>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001f18:	e025      	b.n	8001f66 <HAL_UARTEx_RxEventCallback+0x3ba>
					} else {
						gripper.GripperClose();
 8001f1a:	4854      	ldr	r0, [pc, #336]	; (800206c <HAL_UARTEx_RxEventCallback+0x4c0>)
 8001f1c:	f7ff f894 	bl	8001048 <_ZN10ServoMotor12GripperCloseEv>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001f20:	e021      	b.n	8001f66 <HAL_UARTEx_RxEventCallback+0x3ba>
					}

				}
			}
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2102      	movs	r1, #2
 8001f26:	4852      	ldr	r0, [pc, #328]	; (8002070 <HAL_UARTEx_RxEventCallback+0x4c4>)
 8001f28:	f006 ffcc 	bl	8008ec4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f32:	4850      	ldr	r0, [pc, #320]	; (8002074 <HAL_UARTEx_RxEventCallback+0x4c8>)
 8001f34:	f006 ffc6 	bl	8008ec4 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "CRC16 error\n", 12);
 8001f38:	220c      	movs	r2, #12
 8001f3a:	494f      	ldr	r1, [pc, #316]	; (8002078 <HAL_UARTEx_RxEventCallback+0x4cc>)
 8001f3c:	484f      	ldr	r0, [pc, #316]	; (800207c <HAL_UARTEx_RxEventCallback+0x4d0>)
 8001f3e:	f00b f915 	bl	800d16c <HAL_UART_Transmit_DMA>
 8001f42:	e011      	b.n	8001f68 <HAL_UARTEx_RxEventCallback+0x3bc>
		}
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f44:	2200      	movs	r2, #0
 8001f46:	2102      	movs	r1, #2
 8001f48:	4849      	ldr	r0, [pc, #292]	; (8002070 <HAL_UARTEx_RxEventCallback+0x4c4>)
 8001f4a:	f006 ffbb 	bl	8008ec4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f54:	4847      	ldr	r0, [pc, #284]	; (8002074 <HAL_UARTEx_RxEventCallback+0x4c8>)
 8001f56:	f006 ffb5 	bl	8008ec4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "Protocol match error\n", 21);
 8001f5a:	2215      	movs	r2, #21
 8001f5c:	4948      	ldr	r1, [pc, #288]	; (8002080 <HAL_UARTEx_RxEventCallback+0x4d4>)
 8001f5e:	4847      	ldr	r0, [pc, #284]	; (800207c <HAL_UARTEx_RxEventCallback+0x4d0>)
 8001f60:	f00b f904 	bl	800d16c <HAL_UART_Transmit_DMA>
 8001f64:	e000      	b.n	8001f68 <HAL_UARTEx_RxEventCallback+0x3bc>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001f66:	bf00      	nop
	}
	/* start the DMA again */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 8001f68:	2214      	movs	r2, #20
 8001f6a:	4946      	ldr	r1, [pc, #280]	; (8002084 <HAL_UARTEx_RxEventCallback+0x4d8>)
 8001f6c:	4843      	ldr	r0, [pc, #268]	; (800207c <HAL_UARTEx_RxEventCallback+0x4d0>)
 8001f6e:	f00d f850 	bl	800f012 <HAL_UARTEx_ReceiveToIdle_DMA>
			Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001f72:	4b45      	ldr	r3, [pc, #276]	; (8002088 <HAL_UARTEx_RxEventCallback+0x4dc>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a45      	ldr	r2, [pc, #276]	; (800208c <HAL_UARTEx_RxEventCallback+0x4e0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d04a      	beq.n	8002012 <HAL_UARTEx_RxEventCallback+0x466>
 8001f7c:	4b42      	ldr	r3, [pc, #264]	; (8002088 <HAL_UARTEx_RxEventCallback+0x4dc>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a43      	ldr	r2, [pc, #268]	; (8002090 <HAL_UARTEx_RxEventCallback+0x4e4>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d045      	beq.n	8002012 <HAL_UARTEx_RxEventCallback+0x466>
 8001f86:	4b40      	ldr	r3, [pc, #256]	; (8002088 <HAL_UARTEx_RxEventCallback+0x4dc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a42      	ldr	r2, [pc, #264]	; (8002094 <HAL_UARTEx_RxEventCallback+0x4e8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d040      	beq.n	8002012 <HAL_UARTEx_RxEventCallback+0x466>
 8001f90:	4b3d      	ldr	r3, [pc, #244]	; (8002088 <HAL_UARTEx_RxEventCallback+0x4dc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a40      	ldr	r2, [pc, #256]	; (8002098 <HAL_UARTEx_RxEventCallback+0x4ec>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d03b      	beq.n	8002012 <HAL_UARTEx_RxEventCallback+0x466>
 8001f9a:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <HAL_UARTEx_RxEventCallback+0x4dc>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a3f      	ldr	r2, [pc, #252]	; (800209c <HAL_UARTEx_RxEventCallback+0x4f0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d036      	beq.n	8002012 <HAL_UARTEx_RxEventCallback+0x466>
 8001fa4:	4b38      	ldr	r3, [pc, #224]	; (8002088 <HAL_UARTEx_RxEventCallback+0x4dc>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a3d      	ldr	r2, [pc, #244]	; (80020a0 <HAL_UARTEx_RxEventCallback+0x4f4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d031      	beq.n	8002012 <HAL_UARTEx_RxEventCallback+0x466>
 8001fae:	4b36      	ldr	r3, [pc, #216]	; (8002088 <HAL_UARTEx_RxEventCallback+0x4dc>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a3c      	ldr	r2, [pc, #240]	; (80020a4 <HAL_UARTEx_RxEventCallback+0x4f8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d02c      	beq.n	8002012 <HAL_UARTEx_RxEventCallback+0x466>
 8001fb8:	4b33      	ldr	r3, [pc, #204]	; (8002088 <HAL_UARTEx_RxEventCallback+0x4dc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a3a      	ldr	r2, [pc, #232]	; (80020a8 <HAL_UARTEx_RxEventCallback+0x4fc>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d027      	beq.n	8002012 <HAL_UARTEx_RxEventCallback+0x466>
 8001fc2:	4b31      	ldr	r3, [pc, #196]	; (8002088 <HAL_UARTEx_RxEventCallback+0x4dc>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a39      	ldr	r2, [pc, #228]	; (80020ac <HAL_UARTEx_RxEventCallback+0x500>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d022      	beq.n	8002012 <HAL_UARTEx_RxEventCallback+0x466>
 8001fcc:	4b2e      	ldr	r3, [pc, #184]	; (8002088 <HAL_UARTEx_RxEventCallback+0x4dc>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a37      	ldr	r2, [pc, #220]	; (80020b0 <HAL_UARTEx_RxEventCallback+0x504>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d01d      	beq.n	8002012 <HAL_UARTEx_RxEventCallback+0x466>
 8001fd6:	4b2c      	ldr	r3, [pc, #176]	; (8002088 <HAL_UARTEx_RxEventCallback+0x4dc>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a36      	ldr	r2, [pc, #216]	; (80020b4 <HAL_UARTEx_RxEventCallback+0x508>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d018      	beq.n	8002012 <HAL_UARTEx_RxEventCallback+0x466>
 8001fe0:	4b29      	ldr	r3, [pc, #164]	; (8002088 <HAL_UARTEx_RxEventCallback+0x4dc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a34      	ldr	r2, [pc, #208]	; (80020b8 <HAL_UARTEx_RxEventCallback+0x50c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d013      	beq.n	8002012 <HAL_UARTEx_RxEventCallback+0x466>
 8001fea:	4b27      	ldr	r3, [pc, #156]	; (8002088 <HAL_UARTEx_RxEventCallback+0x4dc>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a33      	ldr	r2, [pc, #204]	; (80020bc <HAL_UARTEx_RxEventCallback+0x510>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d00e      	beq.n	8002012 <HAL_UARTEx_RxEventCallback+0x466>
 8001ff4:	4b24      	ldr	r3, [pc, #144]	; (8002088 <HAL_UARTEx_RxEventCallback+0x4dc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a31      	ldr	r2, [pc, #196]	; (80020c0 <HAL_UARTEx_RxEventCallback+0x514>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d009      	beq.n	8002012 <HAL_UARTEx_RxEventCallback+0x466>
 8001ffe:	4b22      	ldr	r3, [pc, #136]	; (8002088 <HAL_UARTEx_RxEventCallback+0x4dc>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a30      	ldr	r2, [pc, #192]	; (80020c4 <HAL_UARTEx_RxEventCallback+0x518>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d004      	beq.n	8002012 <HAL_UARTEx_RxEventCallback+0x466>
 8002008:	4b1f      	ldr	r3, [pc, #124]	; (8002088 <HAL_UARTEx_RxEventCallback+0x4dc>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a2e      	ldr	r2, [pc, #184]	; (80020c8 <HAL_UARTEx_RxEventCallback+0x51c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d108      	bne.n	8002024 <HAL_UARTEx_RxEventCallback+0x478>
 8002012:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <HAL_UARTEx_RxEventCallback+0x4dc>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_UARTEx_RxEventCallback+0x4dc>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0208 	bic.w	r2, r2, #8
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	e008      	b.n	8002036 <HAL_UARTEx_RxEventCallback+0x48a>
 8002024:	4b18      	ldr	r3, [pc, #96]	; (8002088 <HAL_UARTEx_RxEventCallback+0x4dc>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4b17      	ldr	r3, [pc, #92]	; (8002088 <HAL_UARTEx_RxEventCallback+0x4dc>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0204 	bic.w	r2, r2, #4
 8002032:	601a      	str	r2, [r3, #0]
}
 8002034:	bf00      	nop
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bdb0      	pop	{r4, r5, r7, pc}
 800203e:	bf00      	nop
 8002040:	2400033c 	.word	0x2400033c
 8002044:	2400032a 	.word	0x2400032a
 8002048:	2400032b 	.word	0x2400032b
 800204c:	2400032c 	.word	0x2400032c
 8002050:	2400032d 	.word	0x2400032d
 8002054:	24000364 	.word	0x24000364
 8002058:	2400032e 	.word	0x2400032e
 800205c:	2400032f 	.word	0x2400032f
 8002060:	24000330 	.word	0x24000330
 8002064:	24000331 	.word	0x24000331
 8002068:	24000338 	.word	0x24000338
 800206c:	2400030c 	.word	0x2400030c
 8002070:	58021000 	.word	0x58021000
 8002074:	58020400 	.word	0x58020400
 8002078:	080127d0 	.word	0x080127d0
 800207c:	24000d48 	.word	0x24000d48
 8002080:	080127e0 	.word	0x080127e0
 8002084:	24000350 	.word	0x24000350
 8002088:	24000cd0 	.word	0x24000cd0
 800208c:	40020010 	.word	0x40020010
 8002090:	40020028 	.word	0x40020028
 8002094:	40020040 	.word	0x40020040
 8002098:	40020058 	.word	0x40020058
 800209c:	40020070 	.word	0x40020070
 80020a0:	40020088 	.word	0x40020088
 80020a4:	400200a0 	.word	0x400200a0
 80020a8:	400200b8 	.word	0x400200b8
 80020ac:	40020410 	.word	0x40020410
 80020b0:	40020428 	.word	0x40020428
 80020b4:	40020440 	.word	0x40020440
 80020b8:	40020458 	.word	0x40020458
 80020bc:	40020470 	.word	0x40020470
 80020c0:	40020488 	.word	0x40020488
 80020c4:	400204a0 	.word	0x400204a0
 80020c8:	400204b8 	.word	0x400204b8

080020cc <_ZN11robot_jointC1Ev>:
struct joint_state {
float q1, q2, q3, q4;
};
typedef struct joint_state joint_config;

struct robot_joint {
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	65da      	str	r2, [r3, #92]	; 0x5c
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	661a      	str	r2, [r3, #96]	; 0x60
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020ea:	665a      	str	r2, [r3, #100]	; 0x64
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	669a      	str	r2, [r3, #104]	; 0x68
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020fa:	66da      	str	r2, [r3, #108]	; 0x6c
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	671a      	str	r2, [r3, #112]	; 0x70
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	675a      	str	r2, [r3, #116]	; 0x74
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	679a      	str	r2, [r3, #120]	; 0x78
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a06      	ldr	r2, [pc, #24]	; (8002130 <_ZN11robot_jointC1Ev+0x64>)
 8002118:	67da      	str	r2, [r3, #124]	; 0x7c
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a05      	ldr	r2, [pc, #20]	; (8002134 <_ZN11robot_jointC1Ev+0x68>)
 800211e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	3dc28f5c 	.word	0x3dc28f5c
 8002134:	387ba882 	.word	0x387ba882

08002138 <_Z10Update_ivkffffffff>:
typedef struct robot_kinematic fcb_kinematic;

fcb_joint fcb_joint1, fcb_joint2, fcb_joint3, fcb_joint4;

void Update_ivk(float q1, float q2, float q3, float q4, float Vx, float Vy,
	float Vz, float Wz) {
 8002138:	b580      	push	{r7, lr}
 800213a:	b090      	sub	sp, #64	; 0x40
 800213c:	af00      	add	r7, sp, #0
 800213e:	ed87 0a07 	vstr	s0, [r7, #28]
 8002142:	edc7 0a06 	vstr	s1, [r7, #24]
 8002146:	ed87 1a05 	vstr	s2, [r7, #20]
 800214a:	edc7 1a04 	vstr	s3, [r7, #16]
 800214e:	ed87 2a03 	vstr	s4, [r7, #12]
 8002152:	edc7 2a02 	vstr	s5, [r7, #8]
 8002156:	ed87 3a01 	vstr	s6, [r7, #4]
 800215a:	edc7 3a00 	vstr	s7, [r7]
float S13 = sin(q1 + q3);
 800215e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002162:	edd7 7a05 	vldr	s15, [r7, #20]
 8002166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800216a:	eeb0 0a67 	vmov.f32	s0, s15
 800216e:	f7ff fcfd 	bl	8001b6c <_ZSt3sinf>
 8002172:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
float C13 = cos(q1 + q3);
 8002176:	ed97 7a07 	vldr	s14, [r7, #28]
 800217a:	edd7 7a05 	vldr	s15, [r7, #20]
 800217e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002182:	eeb0 0a67 	vmov.f32	s0, s15
 8002186:	f7ff fce1 	bl	8001b4c <_ZSt3cosf>
 800218a:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
float S3 = sin(q3);
 800218e:	ed97 0a05 	vldr	s0, [r7, #20]
 8002192:	f7ff fceb 	bl	8001b6c <_ZSt3sinf>
 8002196:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
float S1 = sin(q1);
 800219a:	ed97 0a07 	vldr	s0, [r7, #28]
 800219e:	f7ff fce5 	bl	8001b6c <_ZSt3sinf>
 80021a2:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
float C1 = cos(q1);
 80021a6:	ed97 0a07 	vldr	s0, [r7, #28]
 80021aa:	f7ff fccf 	bl	8001b4c <_ZSt3cosf>
 80021ae:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
float L12 = L1 + L2;
 80021b2:	4b53      	ldr	r3, [pc, #332]	; (8002300 <_Z10Update_ivkffffffff+0x1c8>)
 80021b4:	ed93 7a00 	vldr	s14, [r3]
 80021b8:	4b52      	ldr	r3, [pc, #328]	; (8002304 <_Z10Update_ivkffffffff+0x1cc>)
 80021ba:	edd3 7a00 	vldr	s15, [r3]
 80021be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
float L3S3 = L3 * S3;
 80021c6:	4b50      	ldr	r3, [pc, #320]	; (8002308 <_Z10Update_ivkffffffff+0x1d0>)
 80021c8:	edd3 7a00 	vldr	s15, [r3]
 80021cc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80021d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

w_q1 = (Vx * C13 + Vy * S13) / (S3 * L12);
 80021d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80021dc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80021e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021e4:	edd7 6a02 	vldr	s13, [r7, #8]
 80021e8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80021ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021f0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80021f4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80021f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80021fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002204:	4b41      	ldr	r3, [pc, #260]	; (800230c <_Z10Update_ivkffffffff+0x1d4>)
 8002206:	edc3 7a00 	vstr	s15, [r3]
w_q2 = Vz;
 800220a:	4a41      	ldr	r2, [pc, #260]	; (8002310 <_Z10Update_ivkffffffff+0x1d8>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6013      	str	r3, [r2, #0]
w_q3 = -(Vx * (L3 * C13 + L1 * C1 + L2 * C1)) / (L3S3 * L12)
 8002210:	4b3d      	ldr	r3, [pc, #244]	; (8002308 <_Z10Update_ivkffffffff+0x1d0>)
 8002212:	ed93 7a00 	vldr	s14, [r3]
 8002216:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800221a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800221e:	4b38      	ldr	r3, [pc, #224]	; (8002300 <_Z10Update_ivkffffffff+0x1c8>)
 8002220:	edd3 6a00 	vldr	s13, [r3]
 8002224:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002228:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800222c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002230:	4b34      	ldr	r3, [pc, #208]	; (8002304 <_Z10Update_ivkffffffff+0x1cc>)
 8002232:	edd3 6a00 	vldr	s13, [r3]
 8002236:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800223a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800223e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002242:	edd7 7a03 	vldr	s15, [r7, #12]
 8002246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224a:	eef1 6a67 	vneg.f32	s13, s15
 800224e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002252:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800225a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
		- (Vy * (L3 * S13 + L1 * S1 + L2 * S1)) / (L3S3 * L12);
 800225e:	4b2a      	ldr	r3, [pc, #168]	; (8002308 <_Z10Update_ivkffffffff+0x1d0>)
 8002260:	edd3 6a00 	vldr	s13, [r3]
 8002264:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002268:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800226c:	4b24      	ldr	r3, [pc, #144]	; (8002300 <_Z10Update_ivkffffffff+0x1c8>)
 800226e:	ed93 6a00 	vldr	s12, [r3]
 8002272:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002276:	ee66 7a27 	vmul.f32	s15, s12, s15
 800227a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800227e:	4b21      	ldr	r3, [pc, #132]	; (8002304 <_Z10Update_ivkffffffff+0x1cc>)
 8002280:	ed93 6a00 	vldr	s12, [r3]
 8002284:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002288:	ee66 7a27 	vmul.f32	s15, s12, s15
 800228c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002290:	edd7 7a02 	vldr	s15, [r7, #8]
 8002294:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002298:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800229c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80022a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022a4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80022a8:	ee77 7a67 	vsub.f32	s15, s14, s15
w_q3 = -(Vx * (L3 * C13 + L1 * C1 + L2 * C1)) / (L3S3 * L12)
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <_Z10Update_ivkffffffff+0x1dc>)
 80022ae:	edc3 7a00 	vstr	s15, [r3]
w_q4 = (Vx * C1 + Vy * S1 + L3 * Wz * S3) / (L3S3);
 80022b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80022b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80022ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022be:	edd7 6a02 	vldr	s13, [r7, #8]
 80022c2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80022c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022ce:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <_Z10Update_ivkffffffff+0x1d0>)
 80022d0:	edd3 6a00 	vldr	s13, [r3]
 80022d4:	edd7 7a00 	vldr	s15, [r7]
 80022d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022dc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80022e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e4:	ee77 6a27 	vadd.f32	s13, s14, s15
 80022e8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80022ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <_Z10Update_ivkffffffff+0x1e0>)
 80022f2:	edc3 7a00 	vstr	s15, [r3]

}
 80022f6:	bf00      	nop
 80022f8:	3740      	adds	r7, #64	; 0x40
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	24000000 	.word	0x24000000
 8002304:	24000004 	.word	0x24000004
 8002308:	24000008 	.word	0x24000008
 800230c:	240003b4 	.word	0x240003b4
 8002310:	240003b8 	.word	0x240003b8
 8002314:	240003bc 	.word	0x240003bc
 8002318:	240003c0 	.word	0x240003c0

0800231c <_Z12KalmanFilterf11robot_joint>:
////	 p12 = -((P11 + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt)) - 1)*((Q*dt3)/2 + P22*dt + P12);
////     p21 = P21 + P22*dt + (Q*dt3)/2 - (((Q*dt3)/2 + P22*dt + P21)*(P11 + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt));
////	 p22 = P22 + Q*dt2 - (((Q*dt3)/2 + P22*dt + P12)*((Q*dt3)/2 + P22*dt + P21))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt));
//}

fcb_joint KalmanFilter(float theta_k, fcb_joint joint) {
 800231c:	b084      	sub	sp, #16
 800231e:	b580      	push	{r7, lr}
 8002320:	ed2d 8b08 	vpush	{d8-d11}
 8002324:	b08a      	sub	sp, #40	; 0x28
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	ed87 0a00 	vstr	s0, [r7]
 800232e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8002332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
//	bug1 = joint.Encoder;
float X1 = joint.X11;
 8002336:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
float X2 = joint.X21;
 800233c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002340:	623b      	str	r3, [r7, #32]
float P11 = joint.p11;
 8002342:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002346:	61fb      	str	r3, [r7, #28]
float P12 = joint.p12;
 8002348:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800234c:	61bb      	str	r3, [r7, #24]
float P21 = joint.p21;
 800234e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002352:	617b      	str	r3, [r7, #20]
float P22 = joint.p22;
 8002354:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002358:	613b      	str	r3, [r7, #16]
float Q = joint.Q;
 800235a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800235e:	60fb      	str	r3, [r7, #12]
float R = joint.R;
 8002360:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002364:	60bb      	str	r3, [r7, #8]

joint.X11 =
		X1 + (X2 * dt)
 8002366:	4bef      	ldr	r3, [pc, #956]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002368:	ed93 7a00 	vldr	s14, [r3]
 800236c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002370:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002374:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800237c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
				- ((X1 - theta_k + X2 * dt)
 8002380:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002384:	edd7 7a00 	vldr	s15, [r7]
 8002388:	ee37 7a67 	vsub.f32	s14, s14, s15
 800238c:	4be5      	ldr	r3, [pc, #916]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 800238e:	edd3 6a00 	vldr	s13, [r3]
 8002392:	edd7 7a08 	vldr	s15, [r7, #32]
 8002396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800239e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
						* (P11 + P21 * dt + (Q * pow(dt, 4)) / 4
 80023a2:	4be0      	ldr	r3, [pc, #896]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 80023a4:	ed93 7a00 	vldr	s14, [r3]
 80023a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80023ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80023b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b8:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80023bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80023c0:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80023c4:	4bd7      	ldr	r3, [pc, #860]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 80023c6:	edd3 7a00 	vldr	s15, [r3]
 80023ca:	2004      	movs	r0, #4
 80023cc:	eeb0 0a67 	vmov.f32	s0, s15
 80023d0:	f001 fc12 	bl	8003bf8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80023d4:	eeb0 7b40 	vmov.f64	d7, d0
 80023d8:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80023dc:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80023e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023e4:	ee3a 6b07 	vadd.f64	d6, d10, d7
								+ dt * (P12 + P22 * dt)))
 80023e8:	4bce      	ldr	r3, [pc, #824]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 80023ea:	ed93 7a00 	vldr	s14, [r3]
 80023ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80023f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80023fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023fe:	4bc9      	ldr	r3, [pc, #804]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002400:	edd3 7a00 	vldr	s15, [r3]
 8002404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002408:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800240c:	ee36 7b07 	vadd.f64	d7, d6, d7
						* (P11 + P21 * dt + (Q * pow(dt, 4)) / 4
 8002410:	ee29 9b07 	vmul.f64	d9, d9, d7
						/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002414:	ed97 7a07 	vldr	s14, [r7, #28]
 8002418:	edd7 7a02 	vldr	s15, [r7, #8]
 800241c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002420:	4bc0      	ldr	r3, [pc, #768]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002422:	edd3 6a00 	vldr	s13, [r3]
 8002426:	edd7 7a05 	vldr	s15, [r7, #20]
 800242a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800242e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002432:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002436:	edd7 7a03 	vldr	s15, [r7, #12]
 800243a:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800243e:	4bb9      	ldr	r3, [pc, #740]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002440:	edd3 7a00 	vldr	s15, [r3]
 8002444:	2004      	movs	r0, #4
 8002446:	eeb0 0a67 	vmov.f32	s0, s15
 800244a:	f001 fbd5 	bl	8003bf8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800244e:	eeb0 7b40 	vmov.f64	d7, d0
 8002452:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8002456:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800245a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800245e:	ee3a 6b07 	vadd.f64	d6, d10, d7
								+ dt * (P12 + P22 * dt));
 8002462:	4bb0      	ldr	r3, [pc, #704]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002464:	ed93 7a00 	vldr	s14, [r3]
 8002468:	edd7 7a04 	vldr	s15, [r7, #16]
 800246c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002470:	edd7 7a06 	vldr	s15, [r7, #24]
 8002474:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002478:	4baa      	ldr	r3, [pc, #680]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002482:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002486:	ee36 6b07 	vadd.f64	d6, d6, d7
						/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 800248a:	ee89 7b06 	vdiv.f64	d7, d9, d6
				- ((X1 - theta_k + X2 * dt)
 800248e:	ee38 7b47 	vsub.f64	d7, d8, d7
 8002492:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.X11 =
 8002496:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
joint.X21 = X2
 800249a:	edd7 7a08 	vldr	s15, [r7, #32]
 800249e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
		- (((Q * pow(dt, 3)) / 2 + P22 * dt + P21) * (X1 - theta_k + X2 * dt))
 80024a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80024a6:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80024aa:	4b9e      	ldr	r3, [pc, #632]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 80024ac:	edd3 7a00 	vldr	s15, [r3]
 80024b0:	2003      	movs	r0, #3
 80024b2:	eeb0 0a67 	vmov.f32	s0, s15
 80024b6:	f001 fb9f 	bl	8003bf8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80024ba:	eeb0 7b40 	vmov.f64	d7, d0
 80024be:	ee29 7b07 	vmul.f64	d7, d9, d7
 80024c2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80024c6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80024ca:	4b96      	ldr	r3, [pc, #600]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 80024cc:	ed93 7a00 	vldr	s14, [r3]
 80024d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80024d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024dc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80024e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80024e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80024ec:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80024f0:	edd7 7a00 	vldr	s15, [r7]
 80024f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024f8:	4b8a      	ldr	r3, [pc, #552]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 80024fa:	edd3 5a00 	vldr	s11, [r3]
 80024fe:	edd7 7a08 	vldr	s15, [r7, #32]
 8002502:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800250a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800250e:	ee26 9b07 	vmul.f64	d9, d6, d7
				/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002512:	ed97 7a07 	vldr	s14, [r7, #28]
 8002516:	edd7 7a02 	vldr	s15, [r7, #8]
 800251a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800251e:	4b81      	ldr	r3, [pc, #516]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002520:	edd3 6a00 	vldr	s13, [r3]
 8002524:	edd7 7a05 	vldr	s15, [r7, #20]
 8002528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800252c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002530:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002534:	edd7 7a03 	vldr	s15, [r7, #12]
 8002538:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800253c:	4b79      	ldr	r3, [pc, #484]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 800253e:	edd3 7a00 	vldr	s15, [r3]
 8002542:	2004      	movs	r0, #4
 8002544:	eeb0 0a67 	vmov.f32	s0, s15
 8002548:	f001 fb56 	bl	8003bf8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800254c:	eeb0 7b40 	vmov.f64	d7, d0
 8002550:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8002554:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002558:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800255c:	ee3a 6b07 	vadd.f64	d6, d10, d7
						+ dt * (P12 + P22 * dt));
 8002560:	4b70      	ldr	r3, [pc, #448]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002562:	ed93 7a00 	vldr	s14, [r3]
 8002566:	edd7 7a04 	vldr	s15, [r7, #16]
 800256a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800256e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002572:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002576:	4b6b      	ldr	r3, [pc, #428]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002578:	edd3 7a00 	vldr	s15, [r3]
 800257c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002580:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002584:	ee36 6b07 	vadd.f64	d6, d6, d7
				/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002588:	ee89 7b06 	vdiv.f64	d7, d9, d6
		- (((Q * pow(dt, 3)) / 2 + P22 * dt + P21) * (X1 - theta_k + X2 * dt))
 800258c:	ee38 7b47 	vsub.f64	d7, d8, d7
 8002590:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.X21 = X2
 8002594:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
joint.p11 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 8002598:	4b62      	ldr	r3, [pc, #392]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 800259a:	ed93 7a00 	vldr	s14, [r3]
 800259e:	edd7 7a05 	vldr	s15, [r7, #20]
 80025a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80025aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ae:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80025b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80025b6:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80025ba:	4b5a      	ldr	r3, [pc, #360]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 80025bc:	edd3 7a00 	vldr	s15, [r3]
 80025c0:	2004      	movs	r0, #4
 80025c2:	eeb0 0a67 	vmov.f32	s0, s15
 80025c6:	f001 fb17 	bl	8003bf8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80025ca:	eeb0 7b40 	vmov.f64	d7, d0
 80025ce:	ee29 6b07 	vmul.f64	d6, d9, d7
 80025d2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80025d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80025da:	ee38 6b07 	vadd.f64	d6, d8, d7
 80025de:	4b51      	ldr	r3, [pc, #324]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 80025e0:	ed93 7a00 	vldr	s14, [r3]
 80025e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80025e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80025f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025f4:	4b4b      	ldr	r3, [pc, #300]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002602:	ee36 8b07 	vadd.f64	d8, d6, d7
		/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 8002606:	ed97 7a07 	vldr	s14, [r7, #28]
 800260a:	edd7 7a02 	vldr	s15, [r7, #8]
 800260e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002612:	4b44      	ldr	r3, [pc, #272]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002614:	edd3 6a00 	vldr	s13, [r3]
 8002618:	edd7 7a05 	vldr	s15, [r7, #20]
 800261c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002624:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002628:	edd7 7a03 	vldr	s15, [r7, #12]
 800262c:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002630:	4b3c      	ldr	r3, [pc, #240]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002632:	edd3 7a00 	vldr	s15, [r3]
 8002636:	2004      	movs	r0, #4
 8002638:	eeb0 0a67 	vmov.f32	s0, s15
 800263c:	f001 fadc 	bl	8003bf8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002640:	eeb0 7b40 	vmov.f64	d7, d0
 8002644:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8002648:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800264c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002650:	ee39 6b07 	vadd.f64	d6, d9, d7
 8002654:	4b33      	ldr	r3, [pc, #204]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002656:	ed93 7a00 	vldr	s14, [r3]
 800265a:	edd7 7a04 	vldr	s15, [r7, #16]
 800265e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002662:	edd7 7a06 	vldr	s15, [r7, #24]
 8002666:	ee37 7a27 	vadd.f32	s14, s14, s15
 800266a:	4b2e      	ldr	r3, [pc, #184]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 800266c:	edd3 7a00 	vldr	s15, [r3]
 8002670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002674:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002678:	ee36 6b07 	vadd.f64	d6, d6, d7
 800267c:	ee88 7b06 	vdiv.f64	d7, d8, d6
		- 1) * (P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt));
 8002680:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002684:	ee37 7b46 	vsub.f64	d7, d7, d6
joint.p11 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 8002688:	eeb1 8b47 	vneg.f64	d8, d7
		- 1) * (P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt));
 800268c:	4b25      	ldr	r3, [pc, #148]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 800268e:	ed93 7a00 	vldr	s14, [r3]
 8002692:	edd7 7a05 	vldr	s15, [r7, #20]
 8002696:	ee27 7a27 	vmul.f32	s14, s14, s15
 800269a:	edd7 7a07 	vldr	s15, [r7, #28]
 800269e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a2:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80026a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80026aa:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80026ae:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	2004      	movs	r0, #4
 80026b6:	eeb0 0a67 	vmov.f32	s0, s15
 80026ba:	f001 fa9d 	bl	8003bf8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80026be:	eeb0 7b40 	vmov.f64	d7, d0
 80026c2:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80026c6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80026ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80026ce:	ee39 6b07 	vadd.f64	d6, d9, d7
 80026d2:	4b14      	ldr	r3, [pc, #80]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 80026d4:	ed93 7a00 	vldr	s14, [r3]
 80026d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80026dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80026e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026e8:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80026fa:	ee28 7b07 	vmul.f64	d7, d8, d7
 80026fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.p11 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 8002702:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
joint.p12 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 8002706:	4b07      	ldr	r3, [pc, #28]	; (8002724 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002708:	ed93 7a00 	vldr	s14, [r3]
 800270c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002714:	edd7 7a07 	vldr	s15, [r7, #28]
 8002718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800271c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002720:	e002      	b.n	8002728 <_Z12KalmanFilterf11robot_joint+0x40c>
 8002722:	bf00      	nop
 8002724:	24000030 	.word	0x24000030
 8002728:	edd7 7a03 	vldr	s15, [r7, #12]
 800272c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002730:	4bef      	ldr	r3, [pc, #956]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002732:	edd3 7a00 	vldr	s15, [r3]
 8002736:	2004      	movs	r0, #4
 8002738:	eeb0 0a67 	vmov.f32	s0, s15
 800273c:	f001 fa5c 	bl	8003bf8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002740:	eeb0 7b40 	vmov.f64	d7, d0
 8002744:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002748:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800274c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002750:	ee38 6b07 	vadd.f64	d6, d8, d7
 8002754:	4be6      	ldr	r3, [pc, #920]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002756:	ed93 7a00 	vldr	s14, [r3]
 800275a:	edd7 7a04 	vldr	s15, [r7, #16]
 800275e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002762:	edd7 7a06 	vldr	s15, [r7, #24]
 8002766:	ee37 7a27 	vadd.f32	s14, s14, s15
 800276a:	4be1      	ldr	r3, [pc, #900]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 800276c:	edd3 7a00 	vldr	s15, [r3]
 8002770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002774:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002778:	ee36 8b07 	vadd.f64	d8, d6, d7
		/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 800277c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002780:	edd7 7a02 	vldr	s15, [r7, #8]
 8002784:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002788:	4bd9      	ldr	r3, [pc, #868]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 800278a:	edd3 6a00 	vldr	s13, [r3]
 800278e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002792:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800279a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800279e:	edd7 7a03 	vldr	s15, [r7, #12]
 80027a2:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80027a6:	4bd2      	ldr	r3, [pc, #840]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80027a8:	edd3 7a00 	vldr	s15, [r3]
 80027ac:	2004      	movs	r0, #4
 80027ae:	eeb0 0a67 	vmov.f32	s0, s15
 80027b2:	f001 fa21 	bl	8003bf8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80027b6:	eeb0 7b40 	vmov.f64	d7, d0
 80027ba:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80027be:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80027c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80027c6:	ee39 6b07 	vadd.f64	d6, d9, d7
 80027ca:	4bc9      	ldr	r3, [pc, #804]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80027cc:	ed93 7a00 	vldr	s14, [r3]
 80027d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80027d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80027dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027e0:	4bc3      	ldr	r3, [pc, #780]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80027e2:	edd3 7a00 	vldr	s15, [r3]
 80027e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027ee:	ee36 6b07 	vadd.f64	d6, d6, d7
 80027f2:	ee88 7b06 	vdiv.f64	d7, d8, d6
		- 1) * ((Q * pow(dt, 3)) / 2 + P22 * dt + P12);
 80027f6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80027fa:	ee37 7b46 	vsub.f64	d7, d7, d6
joint.p12 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 80027fe:	eeb1 8b47 	vneg.f64	d8, d7
		- 1) * ((Q * pow(dt, 3)) / 2 + P22 * dt + P12);
 8002802:	edd7 7a03 	vldr	s15, [r7, #12]
 8002806:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800280a:	4bb9      	ldr	r3, [pc, #740]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 800280c:	edd3 7a00 	vldr	s15, [r3]
 8002810:	2003      	movs	r0, #3
 8002812:	eeb0 0a67 	vmov.f32	s0, s15
 8002816:	f001 f9ef 	bl	8003bf8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800281a:	eeb0 7b40 	vmov.f64	d7, d0
 800281e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002822:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002826:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800282a:	4bb1      	ldr	r3, [pc, #708]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 800282c:	ed93 7a00 	vldr	s14, [r3]
 8002830:	edd7 7a04 	vldr	s15, [r7, #16]
 8002834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002838:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800283c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002840:	edd7 7a06 	vldr	s15, [r7, #24]
 8002844:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002848:	ee36 7b07 	vadd.f64	d7, d6, d7
 800284c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002850:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.p12 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 8002854:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
joint.p21 =
		P21 + P22 * dt + (Q * pow(dt, 3)) / 2
 8002858:	4ba5      	ldr	r3, [pc, #660]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 800285a:	ed93 7a00 	vldr	s14, [r3]
 800285e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002862:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002866:	edd7 7a05 	vldr	s15, [r7, #20]
 800286a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800286e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002872:	edd7 7a03 	vldr	s15, [r7, #12]
 8002876:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800287a:	4b9d      	ldr	r3, [pc, #628]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 800287c:	edd3 7a00 	vldr	s15, [r3]
 8002880:	2003      	movs	r0, #3
 8002882:	eeb0 0a67 	vmov.f32	s0, s15
 8002886:	f001 f9b7 	bl	8003bf8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800288a:	eeb0 7b40 	vmov.f64	d7, d0
 800288e:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002892:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002896:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800289a:	ee38 8b07 	vadd.f64	d8, d8, d7
				- (((Q * pow(dt, 3)) / 2 + P22 * dt + P21)
 800289e:	edd7 7a03 	vldr	s15, [r7, #12]
 80028a2:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80028a6:	4b92      	ldr	r3, [pc, #584]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80028a8:	edd3 7a00 	vldr	s15, [r3]
 80028ac:	2003      	movs	r0, #3
 80028ae:	eeb0 0a67 	vmov.f32	s0, s15
 80028b2:	f001 f9a1 	bl	8003bf8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80028b6:	eeb0 7b40 	vmov.f64	d7, d0
 80028ba:	ee29 7b07 	vmul.f64	d7, d9, d7
 80028be:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80028c2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80028c6:	4b8a      	ldr	r3, [pc, #552]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80028c8:	ed93 7a00 	vldr	s14, [r3]
 80028cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80028d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028d8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80028dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80028e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028e4:	ee36 9b07 	vadd.f64	d9, d6, d7
						* (P11 + P21 * dt + (Q * pow(dt, 4)) / 4
 80028e8:	4b81      	ldr	r3, [pc, #516]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80028ea:	ed93 7a00 	vldr	s14, [r3]
 80028ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80028f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80028fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028fe:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002902:	edd7 7a03 	vldr	s15, [r7, #12]
 8002906:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800290a:	4b79      	ldr	r3, [pc, #484]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 800290c:	edd3 7a00 	vldr	s15, [r3]
 8002910:	2004      	movs	r0, #4
 8002912:	eeb0 0a67 	vmov.f32	s0, s15
 8002916:	f001 f96f 	bl	8003bf8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800291a:	eeb0 7b40 	vmov.f64	d7, d0
 800291e:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8002922:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002926:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800292a:	ee3a 6b07 	vadd.f64	d6, d10, d7
								+ dt * (P12 + P22 * dt)))
 800292e:	4b70      	ldr	r3, [pc, #448]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002930:	ed93 7a00 	vldr	s14, [r3]
 8002934:	edd7 7a04 	vldr	s15, [r7, #16]
 8002938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800293c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002940:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002944:	4b6a      	ldr	r3, [pc, #424]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002946:	edd3 7a00 	vldr	s15, [r3]
 800294a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800294e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002952:	ee36 7b07 	vadd.f64	d7, d6, d7
						* (P11 + P21 * dt + (Q * pow(dt, 4)) / 4
 8002956:	ee29 9b07 	vmul.f64	d9, d9, d7
						/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 800295a:	ed97 7a07 	vldr	s14, [r7, #28]
 800295e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002962:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002966:	4b62      	ldr	r3, [pc, #392]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002968:	edd3 6a00 	vldr	s13, [r3]
 800296c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002970:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002978:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800297c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002980:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8002984:	4b5a      	ldr	r3, [pc, #360]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002986:	edd3 7a00 	vldr	s15, [r3]
 800298a:	2004      	movs	r0, #4
 800298c:	eeb0 0a67 	vmov.f32	s0, s15
 8002990:	f001 f932 	bl	8003bf8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002994:	eeb0 7b40 	vmov.f64	d7, d0
 8002998:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800299c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80029a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80029a4:	ee3a 6b07 	vadd.f64	d6, d10, d7
								+ dt * (P12 + P22 * dt));
 80029a8:	4b51      	ldr	r3, [pc, #324]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80029aa:	ed93 7a00 	vldr	s14, [r3]
 80029ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80029b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80029ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029be:	4b4c      	ldr	r3, [pc, #304]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029cc:	ee36 6b07 	vadd.f64	d6, d6, d7
						/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 80029d0:	ee89 7b06 	vdiv.f64	d7, d9, d6
				- (((Q * pow(dt, 3)) / 2 + P22 * dt + P21)
 80029d4:	ee38 7b47 	vsub.f64	d7, d8, d7
 80029d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.p21 =
 80029dc:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
joint.p22 = P22 + Q * pow(dt, 2)
 80029e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80029e4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80029e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80029ec:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80029f0:	4b3f      	ldr	r3, [pc, #252]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80029f2:	edd3 7a00 	vldr	s15, [r3]
 80029f6:	2002      	movs	r0, #2
 80029f8:	eeb0 0a67 	vmov.f32	s0, s15
 80029fc:	f001 f8fc 	bl	8003bf8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002a00:	eeb0 7b40 	vmov.f64	d7, d0
 8002a04:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002a08:	ee38 8b07 	vadd.f64	d8, d8, d7
		- (((Q * pow(dt, 3)) / 2 + P22 * dt + P12)
 8002a0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a10:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002a14:	4b36      	ldr	r3, [pc, #216]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002a16:	edd3 7a00 	vldr	s15, [r3]
 8002a1a:	2003      	movs	r0, #3
 8002a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a20:	f001 f8ea 	bl	8003bf8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002a24:	eeb0 7b40 	vmov.f64	d7, d0
 8002a28:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002a2c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002a30:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002a34:	4b2e      	ldr	r3, [pc, #184]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002a36:	ed93 7a00 	vldr	s14, [r3]
 8002a3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a46:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002a4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a52:	ee36 9b07 	vadd.f64	d9, d6, d7
				* ((Q * pow(dt, 3)) / 2 + P22 * dt + P21))
 8002a56:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a5a:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002a5e:	4b24      	ldr	r3, [pc, #144]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002a60:	edd3 7a00 	vldr	s15, [r3]
 8002a64:	2003      	movs	r0, #3
 8002a66:	eeb0 0a67 	vmov.f32	s0, s15
 8002a6a:	f001 f8c5 	bl	8003bf8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002a6e:	eeb0 7b40 	vmov.f64	d7, d0
 8002a72:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8002a76:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002a7a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002a7e:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002a80:	ed93 7a00 	vldr	s14, [r3]
 8002a84:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a90:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002a94:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a9c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002aa0:	ee29 9b07 	vmul.f64	d9, d9, d7
				/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002aa4:	ed97 7a07 	vldr	s14, [r7, #28]
 8002aa8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002aac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002ab2:	edd3 6a00 	vldr	s13, [r3]
 8002ab6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002aba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ac2:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002ac6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002aca:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8002ace:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002ad0:	edd3 7a00 	vldr	s15, [r3]
 8002ad4:	2004      	movs	r0, #4
 8002ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8002ada:	f001 f88d 	bl	8003bf8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002ade:	eeb0 7b40 	vmov.f64	d7, d0
 8002ae2:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8002ae6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002aea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002aee:	e001      	b.n	8002af4 <_Z12KalmanFilterf11robot_joint+0x7d8>
 8002af0:	24000030 	.word	0x24000030
 8002af4:	ee3a 6b07 	vadd.f64	d6, d10, d7
						+ dt * (P12 + P22 * dt));
 8002af8:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <_Z12KalmanFilterf11robot_joint+0x838>)
 8002afa:	ed93 7a00 	vldr	s14, [r3]
 8002afe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b06:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b0e:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <_Z12KalmanFilterf11robot_joint+0x838>)
 8002b10:	edd3 7a00 	vldr	s15, [r3]
 8002b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b1c:	ee36 6b07 	vadd.f64	d6, d6, d7
				/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002b20:	ee89 7b06 	vdiv.f64	d7, d9, d6
		- (((Q * pow(dt, 3)) / 2 + P22 * dt + P12)
 8002b24:	ee38 7b47 	vsub.f64	d7, d8, d7
 8002b28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.p22 = P22 + Q * pow(dt, 2)
 8002b2c:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
//	joint.p11 = (R*(4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22))/(4*R + 4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22);
//	joint.p12 = (2*R*(Q*dt3 + 2*p22*dt + 2*p12))/(4*R + 4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22);
//	joint.p21 = (2*R*(Q*dt3 + 2*p22*dt + 2*p21))/(4*R + 4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22);
//	joint.p22 = p22 + Q*dt2 - (((Q*dt3)/2 + p22*dt + p12)*((Q*dt3)/2 + p22*dt + p21))/(R + p11 + dt*p21 + (Q*dt4)/4 + dt*(p12 + dt*p22));

return joint;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b38:	2284      	movs	r2, #132	; 0x84
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f00d f9f2 	bl	800ff24 <memcpy>

}
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	3728      	adds	r7, #40	; 0x28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	ecbd 8b08 	vpop	{d8-d11}
 8002b4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b4e:	b004      	add	sp, #16
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	24000030 	.word	0x24000030

08002b58 <_Z7find_IKffff>:

joint_config find_IK(float gripper_linear_x, float gripper_linear_y,
	float gripper_linear_z, float gripper_angular_yaw) {
 8002b58:	b590      	push	{r4, r7, lr}
 8002b5a:	b09b      	sub	sp, #108	; 0x6c
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	ed87 0a07 	vstr	s0, [r7, #28]
 8002b62:	edc7 0a06 	vstr	s1, [r7, #24]
 8002b66:	ed87 1a05 	vstr	s2, [r7, #20]
 8002b6a:	edc7 1a04 	vstr	s3, [r7, #16]
bug1 = gripper_linear_x * gripper_linear_x;
 8002b6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b72:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002b76:	4b74      	ldr	r3, [pc, #464]	; (8002d48 <_Z7find_IKffff+0x1f0>)
 8002b78:	edc3 7a00 	vstr	s15, [r3]
bug2 = gripper_linear_y * gripper_linear_y;
 8002b7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002b84:	4b71      	ldr	r3, [pc, #452]	; (8002d4c <_Z7find_IKffff+0x1f4>)
 8002b86:	edc3 7a00 	vstr	s15, [r3]
bug3 = L12 * L12;
 8002b8a:	4b71      	ldr	r3, [pc, #452]	; (8002d50 <_Z7find_IKffff+0x1f8>)
 8002b8c:	ed93 7a00 	vldr	s14, [r3]
 8002b90:	4b6f      	ldr	r3, [pc, #444]	; (8002d50 <_Z7find_IKffff+0x1f8>)
 8002b92:	edd3 7a00 	vldr	s15, [r3]
 8002b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b9a:	4b6e      	ldr	r3, [pc, #440]	; (8002d54 <_Z7find_IKffff+0x1fc>)
 8002b9c:	edc3 7a00 	vstr	s15, [r3]
bug4 = L3 * L3;
 8002ba0:	4b6d      	ldr	r3, [pc, #436]	; (8002d58 <_Z7find_IKffff+0x200>)
 8002ba2:	ed93 7a00 	vldr	s14, [r3]
 8002ba6:	4b6c      	ldr	r3, [pc, #432]	; (8002d58 <_Z7find_IKffff+0x200>)
 8002ba8:	edd3 7a00 	vldr	s15, [r3]
 8002bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb0:	4b6a      	ldr	r3, [pc, #424]	; (8002d5c <_Z7find_IKffff+0x204>)
 8002bb2:	edc3 7a00 	vstr	s15, [r3]
float C3 = ((gripper_linear_x * gripper_linear_x)
 8002bb6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bba:	ee27 7aa7 	vmul.f32	s14, s15, s15
		+ (gripper_linear_y * gripper_linear_y) - (L12 * L12) - (L3 * L3))
 8002bbe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bc2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002bc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bca:	4b61      	ldr	r3, [pc, #388]	; (8002d50 <_Z7find_IKffff+0x1f8>)
 8002bcc:	edd3 6a00 	vldr	s13, [r3]
 8002bd0:	4b5f      	ldr	r3, [pc, #380]	; (8002d50 <_Z7find_IKffff+0x1f8>)
 8002bd2:	edd3 7a00 	vldr	s15, [r3]
 8002bd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bde:	4b5e      	ldr	r3, [pc, #376]	; (8002d58 <_Z7find_IKffff+0x200>)
 8002be0:	edd3 6a00 	vldr	s13, [r3]
 8002be4:	4b5c      	ldr	r3, [pc, #368]	; (8002d58 <_Z7find_IKffff+0x200>)
 8002be6:	edd3 7a00 	vldr	s15, [r3]
 8002bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bee:	ee77 6a67 	vsub.f32	s13, s14, s15
		/ (2 * L12 * L3);
 8002bf2:	4b57      	ldr	r3, [pc, #348]	; (8002d50 <_Z7find_IKffff+0x1f8>)
 8002bf4:	edd3 7a00 	vldr	s15, [r3]
 8002bf8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002bfc:	4b56      	ldr	r3, [pc, #344]	; (8002d58 <_Z7find_IKffff+0x200>)
 8002bfe:	edd3 7a00 	vldr	s15, [r3]
 8002c02:	ee27 7a27 	vmul.f32	s14, s14, s15
float C3 = ((gripper_linear_x * gripper_linear_x)
 8002c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c0a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
float S3 = sqrt(1 - (C3 * C3));
 8002c0e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002c12:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002c16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c22:	f7fe ffb3 	bl	8001b8c <_ZSt4sqrtf>
 8002c26:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
float q3 = atan2(S3, C3);
 8002c2a:	edd7 0a19 	vldr	s1, [r7, #100]	; 0x64
 8002c2e:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8002c32:	f7fe ff77 	bl	8001b24 <_ZSt5atan2ff>
 8002c36:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c

float L3S3 = L3 * S3;
 8002c3a:	4b47      	ldr	r3, [pc, #284]	; (8002d58 <_Z7find_IKffff+0x200>)
 8002c3c:	edd3 7a00 	vldr	s15, [r3]
 8002c40:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c48:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
float L123C3 = L12 + (L3 * C3);
 8002c4c:	4b42      	ldr	r3, [pc, #264]	; (8002d58 <_Z7find_IKffff+0x200>)
 8002c4e:	ed93 7a00 	vldr	s14, [r3]
 8002c52:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002c56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c5a:	4b3d      	ldr	r3, [pc, #244]	; (8002d50 <_Z7find_IKffff+0x1f8>)
 8002c5c:	edd3 7a00 	vldr	s15, [r3]
 8002c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c64:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

float S1 = (-L3S3 * gripper_linear_x) + (L123C3 * gripper_linear_y);
 8002c68:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002c6c:	eeb1 7a67 	vneg.f32	s14, s15
 8002c70:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c78:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002c7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c88:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
float C1 = (L3S3 * gripper_linear_y) + (L123C3 * gripper_linear_x);
 8002c8c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002c90:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c98:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002c9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
float q1 = atan2(S1, C1);
 8002cac:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 8002cb0:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8002cb4:	f7fe ff36 	bl	8001b24 <_ZSt5atan2ff>
 8002cb8:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
float q4 = gripper_angular_yaw - q1 - q3;
 8002cbc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cc0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002cc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cc8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
float q2 = gripper_linear_z + H4 - H3 - H1;
 8002cd4:	4b22      	ldr	r3, [pc, #136]	; (8002d60 <_Z7find_IKffff+0x208>)
 8002cd6:	ed93 7a00 	vldr	s14, [r3]
 8002cda:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ce2:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <_Z7find_IKffff+0x20c>)
 8002ce4:	edd3 7a00 	vldr	s15, [r3]
 8002ce8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cec:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <_Z7find_IKffff+0x210>)
 8002cee:	edd3 7a00 	vldr	s15, [r3]
 8002cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

joint_config buff;
buff.q1 = q1;
 8002cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cfc:	623b      	str	r3, [r7, #32]
buff.q2 = C3;
 8002cfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
buff.q3 = q3;
 8002d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
buff.q4 = S3;
 8002d06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d08:	62fb      	str	r3, [r7, #44]	; 0x2c

return buff;
 8002d0a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8002d0e:	f107 0320 	add.w	r3, r7, #32
 8002d12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002d1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d20:	ee06 0a10 	vmov	s12, r0
 8002d24:	ee06 1a90 	vmov	s13, r1
 8002d28:	ee07 2a10 	vmov	s14, r2
 8002d2c:	ee07 3a90 	vmov	s15, r3
}
 8002d30:	eeb0 0a46 	vmov.f32	s0, s12
 8002d34:	eef0 0a66 	vmov.f32	s1, s13
 8002d38:	eeb0 1a47 	vmov.f32	s2, s14
 8002d3c:	eef0 1a67 	vmov.f32	s3, s15
 8002d40:	376c      	adds	r7, #108	; 0x6c
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd90      	pop	{r4, r7, pc}
 8002d46:	bf00      	nop
 8002d48:	2400038c 	.word	0x2400038c
 8002d4c:	24000390 	.word	0x24000390
 8002d50:	2400000c 	.word	0x2400000c
 8002d54:	24000394 	.word	0x24000394
 8002d58:	24000008 	.word	0x24000008
 8002d5c:	24000398 	.word	0x24000398
 8002d60:	24000018 	.word	0x24000018
 8002d64:	24000014 	.word	0x24000014
 8002d68:	24000010 	.word	0x24000010
 8002d6c:	00000000 	.word	0x00000000

08002d70 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d72:	ed2d 8b02 	vpush	{d8}
 8002d76:	b0cb      	sub	sp, #300	; 0x12c
 8002d78:	af1e      	add	r7, sp, #120	; 0x78
 8002d7a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

if (htim == &htim12) {	//

}

if (htim == &htim5) {	//
 8002d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d82:	4aaf      	ldr	r2, [pc, #700]	; (8003040 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	f040 81c3 	bne.w	8003110 <HAL_TIM_PeriodElapsedCallback+0x3a0>

		encoderJ1.AMT21_Read();
 8002d8a:	48ae      	ldr	r0, [pc, #696]	; (8003044 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002d8c:	f7fd fe57 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8002d90:	48ac      	ldr	r0, [pc, #688]	; (8003044 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002d92:	f7fd fe83 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8002d96:	4603      	mov	r3, r0
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4bab      	ldr	r3, [pc, #684]	; (8003048 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002d9c:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 8002d9e:	4baa      	ldr	r3, [pc, #680]	; (8003048 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_TIM_PeriodElapsedCallback+0x44>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() ;
 8002da6:	48a7      	ldr	r0, [pc, #668]	; (8003044 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002da8:	f7fd fedc 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 8002dac:	4603      	mov	r3, r0
 8002dae:	461a      	mov	r2, r3
 8002db0:	4ba6      	ldr	r3, [pc, #664]	; (800304c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002db2:	801a      	strh	r2, [r3, #0]
//		if(HALENCJ2OK == HAL_OK){
//			encoderJ2.unwarp();
//			posJ2 = encoderJ2.getUnwarpValue();
//		}

		encoderJ3.AMT21_Read();
 8002db4:	48a6      	ldr	r0, [pc, #664]	; (8003050 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002db6:	f7fd fe42 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8002dba:	48a5      	ldr	r0, [pc, #660]	; (8003050 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002dbc:	f7fd fe6e 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	4ba3      	ldr	r3, [pc, #652]	; (8003054 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002dc6:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8002dc8:	4ba2      	ldr	r3, [pc, #648]	; (8003054 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d106      	bne.n	8002dde <HAL_TIM_PeriodElapsedCallback+0x6e>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() ;
 8002dd0:	489f      	ldr	r0, [pc, #636]	; (8003050 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002dd2:	f7fd fec7 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b9f      	ldr	r3, [pc, #636]	; (8003058 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002ddc:	801a      	strh	r2, [r3, #0]
//		stepperJ1.StepperSetFrequency(dq1);
//		stepperJ2.StepperSetFrequency(dq2);
//		stepperJ3.StepperSetFrequency(dq3);
//		stepperJ4.StepperSetFrequency(dq4);

		Update_ivk(fcb_joint1.Encoder / 2609.0 ,0,fcb_joint3.Encoder / 2609.0,0, dx/1000.0, dy/1000.0, dz/1000.0, dyaw/1000.0);
 8002dde:	4b9b      	ldr	r3, [pc, #620]	; (800304c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	b21b      	sxth	r3, r3
 8002de4:	ee07 3a90 	vmov	s15, r3
 8002de8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002dec:	ed9f 5b90 	vldr	d5, [pc, #576]	; 8003030 <HAL_TIM_PeriodElapsedCallback+0x2c0>
 8002df0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002df4:	eef7 4bc7 	vcvt.f32.f64	s9, d7
 8002df8:	4b97      	ldr	r3, [pc, #604]	; (8003058 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	b21b      	sxth	r3, r3
 8002dfe:	ee07 3a90 	vmov	s15, r3
 8002e02:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002e06:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 8003030 <HAL_TIM_PeriodElapsedCallback+0x2c0>
 8002e0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002e0e:	eeb7 4bc7 	vcvt.f32.f64	s8, d7
 8002e12:	4b92      	ldr	r3, [pc, #584]	; (800305c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	b25b      	sxtb	r3, r3
 8002e18:	ee07 3a90 	vmov	s15, r3
 8002e1c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002e20:	ed9f 5b85 	vldr	d5, [pc, #532]	; 8003038 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 8002e24:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002e28:	eeb7 2bc7 	vcvt.f32.f64	s4, d7
 8002e2c:	4b8c      	ldr	r3, [pc, #560]	; (8003060 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	b25b      	sxtb	r3, r3
 8002e32:	ee07 3a90 	vmov	s15, r3
 8002e36:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002e3a:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 8003038 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 8002e3e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002e42:	eef7 2bc7 	vcvt.f32.f64	s5, d7
 8002e46:	4b87      	ldr	r3, [pc, #540]	; (8003064 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	b25b      	sxtb	r3, r3
 8002e4c:	ee07 3a90 	vmov	s15, r3
 8002e50:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002e54:	ed9f 5b78 	vldr	d5, [pc, #480]	; 8003038 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 8002e58:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002e5c:	eeb7 3bc7 	vcvt.f32.f64	s6, d7
 8002e60:	4b81      	ldr	r3, [pc, #516]	; (8003068 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	b25b      	sxtb	r3, r3
 8002e66:	ee07 3a90 	vmov	s15, r3
 8002e6a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002e6e:	ed9f 5b72 	vldr	d5, [pc, #456]	; 8003038 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 8002e72:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002e76:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e7a:	eef0 3a67 	vmov.f32	s7, s15
 8002e7e:	eddf 1a7b 	vldr	s3, [pc, #492]	; 800306c <HAL_TIM_PeriodElapsedCallback+0x2fc>
 8002e82:	eeb0 1a44 	vmov.f32	s2, s8
 8002e86:	eddf 0a79 	vldr	s1, [pc, #484]	; 800306c <HAL_TIM_PeriodElapsedCallback+0x2fc>
 8002e8a:	eeb0 0a64 	vmov.f32	s0, s9
 8002e8e:	f7ff f953 	bl	8002138 <_Z10Update_ivkffffffff>

//		stepperJ2.StepperOpenLoopSpeed(-1.0 * w_q1);
//		stepperJ3.StepperOpenLoopSpeed(w_q3);

		int i;
				for (i = 1 ; i<num ; i++)
 8002e92:	2301      	movs	r3, #1
 8002e94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e98:	4b75      	ldr	r3, [pc, #468]	; (8003070 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	da39      	bge.n	8002f18 <HAL_TIM_PeriodElapsedCallback+0x1a8>
				{
					box_q1[i-1] = box_q1[i];
 8002ea4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	4972      	ldr	r1, [pc, #456]	; (8003074 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002eac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002eb0:	0092      	lsls	r2, r2, #2
 8002eb2:	440a      	add	r2, r1
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	496f      	ldr	r1, [pc, #444]	; (8003074 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	601a      	str	r2, [r3, #0]
					box_q2[i-1] = box_q2[i];
 8002ebe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	496c      	ldr	r1, [pc, #432]	; (8003078 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002ec6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002eca:	0092      	lsls	r2, r2, #2
 8002ecc:	440a      	add	r2, r1
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	4969      	ldr	r1, [pc, #420]	; (8003078 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	601a      	str	r2, [r3, #0]
					box_q3[i-1] = box_q3[i];
 8002ed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002edc:	3b01      	subs	r3, #1
 8002ede:	4967      	ldr	r1, [pc, #412]	; (800307c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002ee0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002ee4:	0092      	lsls	r2, r2, #2
 8002ee6:	440a      	add	r2, r1
 8002ee8:	6812      	ldr	r2, [r2, #0]
 8002eea:	4964      	ldr	r1, [pc, #400]	; (800307c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	601a      	str	r2, [r3, #0]
					box_q4[i-1] = box_q4[i];
 8002ef2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	4961      	ldr	r1, [pc, #388]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002efa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002efe:	0092      	lsls	r2, r2, #2
 8002f00:	440a      	add	r2, r1
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	495e      	ldr	r1, [pc, #376]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	601a      	str	r2, [r3, #0]
				for (i = 1 ; i<num ; i++)
 8002f0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f10:	3301      	adds	r3, #1
 8002f12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f16:	e7bf      	b.n	8002e98 <HAL_TIM_PeriodElapsedCallback+0x128>
				}
				 box_q1[num-1] = w_q1;
 8002f18:	4b55      	ldr	r3, [pc, #340]	; (8003070 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	4a59      	ldr	r2, [pc, #356]	; (8003084 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002f20:	6812      	ldr	r2, [r2, #0]
 8002f22:	4954      	ldr	r1, [pc, #336]	; (8003074 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	601a      	str	r2, [r3, #0]
				 box_q2[num-1] = dz;
 8002f2a:	4b4e      	ldr	r3, [pc, #312]	; (8003064 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	b25a      	sxtb	r2, r3
 8002f30:	4b4f      	ldr	r3, [pc, #316]	; (8003070 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	ee07 2a90 	vmov	s15, r2
 8002f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f3e:	4a4e      	ldr	r2, [pc, #312]	; (8003078 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	edc3 7a00 	vstr	s15, [r3]
				 box_q3[num-1] = w_q3;
 8002f48:	4b49      	ldr	r3, [pc, #292]	; (8003070 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	4a4e      	ldr	r2, [pc, #312]	; (8003088 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	494a      	ldr	r1, [pc, #296]	; (800307c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	601a      	str	r2, [r3, #0]
				 box_q4[num-1] = dyaw;
 8002f5a:	4b43      	ldr	r3, [pc, #268]	; (8003068 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	b25a      	sxtb	r2, r3
 8002f60:	4b43      	ldr	r3, [pc, #268]	; (8003070 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	ee07 2a90 	vmov	s15, r2
 8002f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f6e:	4a44      	ldr	r2, [pc, #272]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	edc3 7a00 	vstr	s15, [r3]

				u_q1 = 0.0;
 8002f78:	4b44      	ldr	r3, [pc, #272]	; (800308c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
				u_q2 = 0.0;
 8002f80:	4b43      	ldr	r3, [pc, #268]	; (8003090 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
				u_q3 = 0.0;
 8002f88:	4b42      	ldr	r3, [pc, #264]	; (8003094 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
				u_q4 = 0.0;
 8002f90:	4b41      	ldr	r3, [pc, #260]	; (8003098 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

				for(i = 0; i < num; i++)
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f9e:	4b34      	ldr	r3, [pc, #208]	; (8003070 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	da78      	bge.n	800309c <HAL_TIM_PeriodElapsedCallback+0x32c>
				{
					u_q1 += box_q1[i];
 8002faa:	4a32      	ldr	r2, [pc, #200]	; (8003074 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002fac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	ed93 7a00 	vldr	s14, [r3]
 8002fb8:	4b34      	ldr	r3, [pc, #208]	; (800308c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002fba:	edd3 7a00 	vldr	s15, [r3]
 8002fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fc2:	4b32      	ldr	r3, [pc, #200]	; (800308c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002fc4:	edc3 7a00 	vstr	s15, [r3]
					u_q2 += box_q2[i];
 8002fc8:	4a2b      	ldr	r2, [pc, #172]	; (8003078 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002fca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	ed93 7a00 	vldr	s14, [r3]
 8002fd6:	4b2e      	ldr	r3, [pc, #184]	; (8003090 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002fd8:	edd3 7a00 	vldr	s15, [r3]
 8002fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe0:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002fe2:	edc3 7a00 	vstr	s15, [r3]
					u_q3 += box_q3[i];
 8002fe6:	4a25      	ldr	r2, [pc, #148]	; (800307c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002fe8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	ed93 7a00 	vldr	s14, [r3]
 8002ff4:	4b27      	ldr	r3, [pc, #156]	; (8003094 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002ff6:	edd3 7a00 	vldr	s15, [r3]
 8002ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffe:	4b25      	ldr	r3, [pc, #148]	; (8003094 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8003000:	edc3 7a00 	vstr	s15, [r3]
					u_q4 += box_q4[i];
 8003004:	4a1e      	ldr	r2, [pc, #120]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8003006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	ed93 7a00 	vldr	s14, [r3]
 8003012:	4b21      	ldr	r3, [pc, #132]	; (8003098 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003014:	edd3 7a00 	vldr	s15, [r3]
 8003018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800301c:	4b1e      	ldr	r3, [pc, #120]	; (8003098 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800301e:	edc3 7a00 	vstr	s15, [r3]
				for(i = 0; i < num; i++)
 8003022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003026:	3301      	adds	r3, #1
 8003028:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800302c:	e7b7      	b.n	8002f9e <HAL_TIM_PeriodElapsedCallback+0x22e>
 800302e:	bf00      	nop
 8003030:	00000000 	.word	0x00000000
 8003034:	40a46200 	.word	0x40a46200
 8003038:	00000000 	.word	0x00000000
 800303c:	408f4000 	.word	0x408f4000
 8003040:	2400091c 	.word	0x2400091c
 8003044:	24000234 	.word	0x24000234
 8003048:	24000328 	.word	0x24000328
 800304c:	240005bc 	.word	0x240005bc
 8003050:	24000250 	.word	0x24000250
 8003054:	24000329 	.word	0x24000329
 8003058:	240006c4 	.word	0x240006c4
 800305c:	2400032e 	.word	0x2400032e
 8003060:	2400032f 	.word	0x2400032f
 8003064:	24000330 	.word	0x24000330
 8003068:	24000331 	.word	0x24000331
 800306c:	00000000 	.word	0x00000000
 8003070:	24000034 	.word	0x24000034
 8003074:	240003d4 	.word	0x240003d4
 8003078:	2400044c 	.word	0x2400044c
 800307c:	240004c4 	.word	0x240004c4
 8003080:	2400053c 	.word	0x2400053c
 8003084:	240003b4 	.word	0x240003b4
 8003088:	240003bc 	.word	0x240003bc
 800308c:	240003c4 	.word	0x240003c4
 8003090:	240003c8 	.word	0x240003c8
 8003094:	240003cc 	.word	0x240003cc
 8003098:	240003d0 	.word	0x240003d0
				}

				stepperJ1.StepperOpenLoopSpeed(u_q1/num*-1.0);
 800309c:	4b84      	ldr	r3, [pc, #528]	; (80032b0 <HAL_TIM_PeriodElapsedCallback+0x540>)
 800309e:	edd3 6a00 	vldr	s13, [r3]
 80030a2:	4b84      	ldr	r3, [pc, #528]	; (80032b4 <HAL_TIM_PeriodElapsedCallback+0x544>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	ee07 3a90 	vmov	s15, r3
 80030aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030b2:	eef1 7a67 	vneg.f32	s15, s15
 80030b6:	eeb0 0a67 	vmov.f32	s0, s15
 80030ba:	487f      	ldr	r0, [pc, #508]	; (80032b8 <HAL_TIM_PeriodElapsedCallback+0x548>)
 80030bc:	f7fe fb30 	bl	8001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>
				stepperJ2.StepperSetFrequency(u_q2/3.0);
 80030c0:	4b7e      	ldr	r3, [pc, #504]	; (80032bc <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80030c2:	edd3 7a00 	vldr	s15, [r3]
 80030c6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80030ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80030ce:	eeb0 0a47 	vmov.f32	s0, s14
 80030d2:	487b      	ldr	r0, [pc, #492]	; (80032c0 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80030d4:	f7fe f870 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
				stepperJ3.StepperOpenLoopSpeed(u_q3/num*1.0);
 80030d8:	4b7a      	ldr	r3, [pc, #488]	; (80032c4 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80030da:	ed93 7a00 	vldr	s14, [r3]
 80030de:	4b75      	ldr	r3, [pc, #468]	; (80032b4 <HAL_TIM_PeriodElapsedCallback+0x544>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	ee07 3a90 	vmov	s15, r3
 80030e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80030ee:	eeb0 0a66 	vmov.f32	s0, s13
 80030f2:	4875      	ldr	r0, [pc, #468]	; (80032c8 <HAL_TIM_PeriodElapsedCallback+0x558>)
 80030f4:	f7fe fb14 	bl	8001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>
				stepperJ4.StepperSetFrequency(u_q4/3.0);
 80030f8:	4b74      	ldr	r3, [pc, #464]	; (80032cc <HAL_TIM_PeriodElapsedCallback+0x55c>)
 80030fa:	edd3 7a00 	vldr	s15, [r3]
 80030fe:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003102:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003106:	eeb0 0a47 	vmov.f32	s0, s14
 800310a:	4871      	ldr	r0, [pc, #452]	; (80032d0 <HAL_TIM_PeriodElapsedCallback+0x560>)
 800310c:	f7fe f854 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
}
	if (htim == &htim7) { 	//
 8003110:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003114:	4a6f      	ldr	r2, [pc, #444]	; (80032d4 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8003116:	4293      	cmp	r3, r2
 8003118:	f040 8305 	bne.w	8003726 <HAL_TIM_PeriodElapsedCallback+0x9b6>
//		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
//		if (HALENCJ3OK == HAL_OK) {
//			fcb_joint3.Encoder = encoderJ3.getAngPos180() ;
//		}

		float t_2 = t * t;
 800311c:	4b6e      	ldr	r3, [pc, #440]	; (80032d8 <HAL_TIM_PeriodElapsedCallback+0x568>)
 800311e:	ed93 7a00 	vldr	s14, [r3]
 8003122:	4b6d      	ldr	r3, [pc, #436]	; (80032d8 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8003124:	edd3 7a00 	vldr	s15, [r3]
 8003128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
		float t_3 = t * t * t;
 8003130:	4b69      	ldr	r3, [pc, #420]	; (80032d8 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8003132:	ed93 7a00 	vldr	s14, [r3]
 8003136:	4b68      	ldr	r3, [pc, #416]	; (80032d8 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8003138:	edd3 7a00 	vldr	s15, [r3]
 800313c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003140:	4b65      	ldr	r3, [pc, #404]	; (80032d8 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8003142:	edd3 7a00 	vldr	s15, [r3]
 8003146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4

		fcb_joint3.Goal_Position = C0_q1 + (C2_q1 * t_2) - (C3_q1 * t_3);
 800314e:	4b63      	ldr	r3, [pc, #396]	; (80032dc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8003150:	ed93 7a00 	vldr	s14, [r3]
 8003154:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003158:	ee27 7a27 	vmul.f32	s14, s14, s15
 800315c:	4b60      	ldr	r3, [pc, #384]	; (80032e0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 800315e:	edd3 7a00 	vldr	s15, [r3]
 8003162:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003166:	4b5f      	ldr	r3, [pc, #380]	; (80032e4 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8003168:	edd3 6a00 	vldr	s13, [r3]
 800316c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003170:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003174:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003178:	4b5b      	ldr	r3, [pc, #364]	; (80032e8 <HAL_TIM_PeriodElapsedCallback+0x578>)
 800317a:	edc3 7a01 	vstr	s15, [r3, #4]

//	    kalman_pos = fcb_joint1.Goal_Position;
		kalman_pos = (fcb_joint1.Old_p - fcb_joint1.Encoder);
 800317e:	4b5b      	ldr	r3, [pc, #364]	; (80032ec <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8003180:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003184:	4b59      	ldr	r3, [pc, #356]	; (80032ec <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	b21b      	sxth	r3, r3
 800318a:	ee07 3a90 	vmov	s15, r3
 800318e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003196:	4b56      	ldr	r3, [pc, #344]	; (80032f0 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8003198:	edc3 7a00 	vstr	s15, [r3]

		kalman_velo_input = kalman_pos;
 800319c:	4b54      	ldr	r3, [pc, #336]	; (80032f0 <HAL_TIM_PeriodElapsedCallback+0x580>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a54      	ldr	r2, [pc, #336]	; (80032f4 <HAL_TIM_PeriodElapsedCallback+0x584>)
 80031a2:	6013      	str	r3, [r2, #0]

		if (direction_traj == 1) {
 80031a4:	4b54      	ldr	r3, [pc, #336]	; (80032f8 <HAL_TIM_PeriodElapsedCallback+0x588>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 80a4 	beq.w	8003300 <HAL_TIM_PeriodElapsedCallback+0x590>
			fcb_joint1.Goal_Position = unwrap_pose
					+ (C0_q1 + (C2_q1 * t_2) - (C3_q1 * t_3)) - 0.8;
 80031b8:	4b48      	ldr	r3, [pc, #288]	; (80032dc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80031ba:	ed93 7a00 	vldr	s14, [r3]
 80031be:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80031c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031c6:	4b46      	ldr	r3, [pc, #280]	; (80032e0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 80031c8:	edd3 7a00 	vldr	s15, [r3]
 80031cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031d0:	4b44      	ldr	r3, [pc, #272]	; (80032e4 <HAL_TIM_PeriodElapsedCallback+0x574>)
 80031d2:	edd3 6a00 	vldr	s13, [r3]
 80031d6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80031da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031de:	ee37 7a67 	vsub.f32	s14, s14, s15
			fcb_joint1.Goal_Position = unwrap_pose
 80031e2:	4b46      	ldr	r3, [pc, #280]	; (80032fc <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80031e4:	edd3 7a00 	vldr	s15, [r3]
					+ (C0_q1 + (C2_q1 * t_2) - (C3_q1 * t_3)) - 0.8;
 80031e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031f0:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 80032a8 <HAL_TIM_PeriodElapsedCallback+0x538>
 80031f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80031f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
			fcb_joint1.Goal_Position = unwrap_pose
 80031fc:	4b3b      	ldr	r3, [pc, #236]	; (80032ec <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80031fe:	edc3 7a01 	vstr	s15, [r3, #4]
			fcb_joint1.Goal_Velocity = ((2.0 * C2_q1 * t) - (3.0 * C3_q1 * t_2))
 8003202:	4b36      	ldr	r3, [pc, #216]	; (80032dc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8003204:	edd3 7a00 	vldr	s15, [r3]
 8003208:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800320c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8003210:	4b31      	ldr	r3, [pc, #196]	; (80032d8 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8003212:	edd3 7a00 	vldr	s15, [r3]
 8003216:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800321a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800321e:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8003220:	edd3 7a00 	vldr	s15, [r3]
 8003224:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003228:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800322c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003230:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003234:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003238:	ee25 7b07 	vmul.f64	d7, d5, d7
 800323c:	ee36 7b47 	vsub.f64	d7, d6, d7
					* -2;
 8003240:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8003244:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003248:	eef7 7bc7 	vcvt.f32.f64	s15, d7
			fcb_joint1.Goal_Velocity = ((2.0 * C2_q1 * t) - (3.0 * C3_q1 * t_2))
 800324c:	4b27      	ldr	r3, [pc, #156]	; (80032ec <HAL_TIM_PeriodElapsedCallback+0x57c>)
 800324e:	edc3 7a02 	vstr	s15, [r3, #8]
			fcb_joint3.Goal_Velocity = ((2.0 * C2_q1 * t) - (3.0 * C3_q1 * t_2))
 8003252:	4b22      	ldr	r3, [pc, #136]	; (80032dc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8003254:	edd3 7a00 	vldr	s15, [r3]
 8003258:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800325c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8003260:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8003262:	edd3 7a00 	vldr	s15, [r3]
 8003266:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800326a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800326e:	4b1d      	ldr	r3, [pc, #116]	; (80032e4 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8003270:	edd3 7a00 	vldr	s15, [r3]
 8003274:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003278:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800327c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003280:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003284:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003288:	ee25 7b07 	vmul.f64	d7, d5, d7
 800328c:	ee36 7b47 	vsub.f64	d7, d6, d7
					* -2;
 8003290:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8003294:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003298:	eef7 7bc7 	vcvt.f32.f64	s15, d7
			fcb_joint3.Goal_Velocity = ((2.0 * C2_q1 * t) - (3.0 * C3_q1 * t_2))
 800329c:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_TIM_PeriodElapsedCallback+0x578>)
 800329e:	edc3 7a02 	vstr	s15, [r3, #8]
 80032a2:	e09e      	b.n	80033e2 <HAL_TIM_PeriodElapsedCallback+0x672>
 80032a4:	f3af 8000 	nop.w
 80032a8:	9999999a 	.word	0x9999999a
 80032ac:	3fe99999 	.word	0x3fe99999
 80032b0:	240003c4 	.word	0x240003c4
 80032b4:	24000034 	.word	0x24000034
 80032b8:	2400026c 	.word	0x2400026c
 80032bc:	240003c8 	.word	0x240003c8
 80032c0:	24000294 	.word	0x24000294
 80032c4:	240003cc 	.word	0x240003cc
 80032c8:	240002bc 	.word	0x240002bc
 80032cc:	240003d0 	.word	0x240003d0
 80032d0:	240002e4 	.word	0x240002e4
 80032d4:	24000b7c 	.word	0x24000b7c
 80032d8:	24000378 	.word	0x24000378
 80032dc:	2400037c 	.word	0x2400037c
 80032e0:	24000020 	.word	0x24000020
 80032e4:	24000380 	.word	0x24000380
 80032e8:	240006c4 	.word	0x240006c4
 80032ec:	240005bc 	.word	0x240005bc
 80032f0:	2400039c 	.word	0x2400039c
 80032f4:	240003ac 	.word	0x240003ac
 80032f8:	24000368 	.word	0x24000368
 80032fc:	240003b0 	.word	0x240003b0
		} else {
			fcb_joint1.Goal_Position = unwrap_pose
 8003300:	4bd3      	ldr	r3, [pc, #844]	; (8003650 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8003302:	ed93 7a00 	vldr	s14, [r3]
					- (C0_q1 + (C2_q1 * t_2) - (C3_q1 * t_3)) + 0.8;
 8003306:	4bd3      	ldr	r3, [pc, #844]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8003308:	edd3 6a00 	vldr	s13, [r3]
 800330c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003310:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003314:	4bd0      	ldr	r3, [pc, #832]	; (8003658 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 8003316:	edd3 7a00 	vldr	s15, [r3]
 800331a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800331e:	4bcf      	ldr	r3, [pc, #828]	; (800365c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8003320:	ed93 6a00 	vldr	s12, [r3]
 8003324:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003328:	ee66 7a27 	vmul.f32	s15, s12, s15
 800332c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003334:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003338:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 8003628 <HAL_TIM_PeriodElapsedCallback+0x8b8>
 800333c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003340:	eef7 7bc7 	vcvt.f32.f64	s15, d7
			fcb_joint1.Goal_Position = unwrap_pose
 8003344:	4bc6      	ldr	r3, [pc, #792]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 8003346:	edc3 7a01 	vstr	s15, [r3, #4]
			fcb_joint1.Goal_Velocity = ((2.0 * C2_q1 * t) - (3.0 * C3_q1 * t_2))
 800334a:	4bc2      	ldr	r3, [pc, #776]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800334c:	edd3 7a00 	vldr	s15, [r3]
 8003350:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003354:	ee37 6b07 	vadd.f64	d6, d7, d7
 8003358:	4bc2      	ldr	r3, [pc, #776]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800335a:	edd3 7a00 	vldr	s15, [r3]
 800335e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003362:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003366:	4bbd      	ldr	r3, [pc, #756]	; (800365c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8003368:	edd3 7a00 	vldr	s15, [r3]
 800336c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003370:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003374:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003378:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800337c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003380:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003384:	ee36 7b47 	vsub.f64	d7, d6, d7
					* 2;
 8003388:	ee37 7b07 	vadd.f64	d7, d7, d7
 800338c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
			fcb_joint1.Goal_Velocity = ((2.0 * C2_q1 * t) - (3.0 * C3_q1 * t_2))
 8003390:	4bb3      	ldr	r3, [pc, #716]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 8003392:	edc3 7a02 	vstr	s15, [r3, #8]
			fcb_joint3.Goal_Velocity = ((2.0 * C2_q1 * t) - (3.0 * C3_q1 * t_2))
 8003396:	4baf      	ldr	r3, [pc, #700]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8003398:	edd3 7a00 	vldr	s15, [r3]
 800339c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033a0:	ee37 6b07 	vadd.f64	d6, d7, d7
 80033a4:	4baf      	ldr	r3, [pc, #700]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 80033a6:	edd3 7a00 	vldr	s15, [r3]
 80033aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033ae:	ee26 6b07 	vmul.f64	d6, d6, d7
 80033b2:	4baa      	ldr	r3, [pc, #680]	; (800365c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 80033b4:	edd3 7a00 	vldr	s15, [r3]
 80033b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033bc:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80033c0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80033c4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80033c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033cc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80033d0:	ee36 7b47 	vsub.f64	d7, d6, d7
					* 2;
 80033d4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80033d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
			fcb_joint3.Goal_Velocity = ((2.0 * C2_q1 * t) - (3.0 * C3_q1 * t_2))
 80033dc:	4ba2      	ldr	r3, [pc, #648]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 80033de:	edc3 7a02 	vstr	s15, [r3, #8]
		}

//		fcb_joint1.Goal_Velocity = sin(0.314 * 2 * t) * 2000;
//		fcb_joint3.Goal_Velocity = sin(0.314 * 2 * t) * 4000;

		chess_board_ang = chessboard_angular_velocity * t;
 80033e2:	4ba2      	ldr	r3, [pc, #648]	; (800366c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 80033e4:	ed93 7a00 	vldr	s14, [r3]
 80033e8:	4b9e      	ldr	r3, [pc, #632]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 80033ea:	edd3 7a00 	vldr	s15, [r3]
 80033ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f2:	4b9f      	ldr	r3, [pc, #636]	; (8003670 <HAL_TIM_PeriodElapsedCallback+0x900>)
 80033f4:	edc3 7a00 	vstr	s15, [r3]

		joint_config findchessbot_joint_state;
		debug_pos_x = 0.247 * cos(chess_board_ang) + 0.42744;
 80033f8:	4b9d      	ldr	r3, [pc, #628]	; (8003670 <HAL_TIM_PeriodElapsedCallback+0x900>)
 80033fa:	edd3 7a00 	vldr	s15, [r3]
 80033fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003402:	f7fe fba3 	bl	8001b4c <_ZSt3cosf>
 8003406:	eef0 7a40 	vmov.f32	s15, s0
 800340a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800340e:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8003630 <HAL_TIM_PeriodElapsedCallback+0x8c0>
 8003412:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003416:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8003638 <HAL_TIM_PeriodElapsedCallback+0x8c8>
 800341a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800341e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003422:	4b94      	ldr	r3, [pc, #592]	; (8003674 <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003424:	edc3 7a00 	vstr	s15, [r3]
		debug_pos_y = 0.247 * sin(chess_board_ang) + 0.00059371;
 8003428:	4b91      	ldr	r3, [pc, #580]	; (8003670 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800342a:	edd3 7a00 	vldr	s15, [r3]
 800342e:	eeb0 0a67 	vmov.f32	s0, s15
 8003432:	f7fe fb9b 	bl	8001b6c <_ZSt3sinf>
 8003436:	eef0 7a40 	vmov.f32	s15, s0
 800343a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800343e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8003630 <HAL_TIM_PeriodElapsedCallback+0x8c0>
 8003442:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003446:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8003640 <HAL_TIM_PeriodElapsedCallback+0x8d0>
 800344a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800344e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003452:	4b89      	ldr	r3, [pc, #548]	; (8003678 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003454:	edc3 7a00 	vstr	s15, [r3]
		idx = 0.247 * cos(chess_board_ang) * chessboard_angular_velocity;
 8003458:	4b85      	ldr	r3, [pc, #532]	; (8003670 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800345a:	edd3 7a00 	vldr	s15, [r3]
 800345e:	eeb0 0a67 	vmov.f32	s0, s15
 8003462:	f7fe fb73 	bl	8001b4c <_ZSt3cosf>
 8003466:	eef0 7a40 	vmov.f32	s15, s0
 800346a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800346e:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8003630 <HAL_TIM_PeriodElapsedCallback+0x8c0>
 8003472:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003476:	4b7d      	ldr	r3, [pc, #500]	; (800366c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8003478:	edd3 7a00 	vldr	s15, [r3]
 800347c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003480:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003484:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003488:	4b7c      	ldr	r3, [pc, #496]	; (800367c <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800348a:	edc3 7a00 	vstr	s15, [r3]
		idy = 0.247 * cos(chess_board_ang) * chessboard_angular_velocity;
 800348e:	4b78      	ldr	r3, [pc, #480]	; (8003670 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003490:	edd3 7a00 	vldr	s15, [r3]
 8003494:	eeb0 0a67 	vmov.f32	s0, s15
 8003498:	f7fe fb58 	bl	8001b4c <_ZSt3cosf>
 800349c:	eef0 7a40 	vmov.f32	s15, s0
 80034a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034a4:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8003630 <HAL_TIM_PeriodElapsedCallback+0x8c0>
 80034a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80034ac:	4b6f      	ldr	r3, [pc, #444]	; (800366c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 80034ae:	edd3 7a00 	vldr	s15, [r3]
 80034b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034b6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80034ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80034be:	4b70      	ldr	r3, [pc, #448]	; (8003680 <HAL_TIM_PeriodElapsedCallback+0x910>)
 80034c0:	edc3 7a00 	vstr	s15, [r3]
		findchessbot_joint_state = find_IK(debug_pos_x, debug_pos_y, 0, 0);
 80034c4:	4b6b      	ldr	r3, [pc, #428]	; (8003674 <HAL_TIM_PeriodElapsedCallback+0x904>)
 80034c6:	edd3 7a00 	vldr	s15, [r3]
 80034ca:	4b6b      	ldr	r3, [pc, #428]	; (8003678 <HAL_TIM_PeriodElapsedCallback+0x908>)
 80034cc:	ed93 7a00 	vldr	s14, [r3]
 80034d0:	eddf 1a6c 	vldr	s3, [pc, #432]	; 8003684 <HAL_TIM_PeriodElapsedCallback+0x914>
 80034d4:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 8003684 <HAL_TIM_PeriodElapsedCallback+0x914>
 80034d8:	eef0 0a47 	vmov.f32	s1, s14
 80034dc:	eeb0 0a67 	vmov.f32	s0, s15
 80034e0:	f7ff fb3a 	bl	8002b58 <_Z7find_IKffff>
 80034e4:	eeb0 6a40 	vmov.f32	s12, s0
 80034e8:	eef0 6a60 	vmov.f32	s13, s1
 80034ec:	eeb0 7a41 	vmov.f32	s14, s2
 80034f0:	eef0 7a61 	vmov.f32	s15, s3
 80034f4:	ed87 6a25 	vstr	s12, [r7, #148]	; 0x94
 80034f8:	edc7 6a26 	vstr	s13, [r7, #152]	; 0x98
 80034fc:	ed87 7a27 	vstr	s14, [r7, #156]	; 0x9c
 8003500:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
//		fcb_joint3.Goal_Position = sin(chess_board_ang) * 2500.0;

//		setpointJ1 = Goal_velocity_q1;
//		setpointJ3 = Goal_velocity_q3;

		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
 8003504:	4b56      	ldr	r3, [pc, #344]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 8003506:	ed93 7a01 	vldr	s14, [r3, #4]
 800350a:	4b55      	ldr	r3, [pc, #340]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	b21b      	sxth	r3, r3
 8003510:	ee07 3a90 	vmov	s15, r3
 8003514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003518:	ee77 7a67 	vsub.f32	s15, s14, s15
 800351c:	4b50      	ldr	r3, [pc, #320]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800351e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
 8003522:	4b51      	ldr	r3, [pc, #324]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8003524:	ed93 7a01 	vldr	s14, [r3, #4]
 8003528:	4b4f      	ldr	r3, [pc, #316]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	b21b      	sxth	r3, r3
 800352e:	ee07 3a90 	vmov	s15, r3
 8003532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800353a:	4b4b      	ldr	r3, [pc, #300]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800353c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 8003540:	4b47      	ldr	r3, [pc, #284]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 8003542:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8003546:	4b46      	ldr	r3, [pc, #280]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 8003548:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800354c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003550:	4b43      	ldr	r3, [pc, #268]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 8003552:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 8003556:	4b44      	ldr	r3, [pc, #272]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8003558:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800355c:	4b42      	ldr	r3, [pc, #264]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800355e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003566:	4b40      	ldr	r3, [pc, #256]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8003568:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

		fcb_joint1.Kp_p = 0.0;
 800356c:	4b3c      	ldr	r3, [pc, #240]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	61da      	str	r2, [r3, #28]
		fcb_joint1.Ki_p = 0.0;
 8003574:	4b3a      	ldr	r3, [pc, #232]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	621a      	str	r2, [r3, #32]
		fcb_joint1.Kd_p = 0.0;
 800357c:	4b38      	ldr	r3, [pc, #224]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	625a      	str	r2, [r3, #36]	; 0x24

		fcb_joint1.Kp_v = 0.0;
 8003584:	4b36      	ldr	r3, [pc, #216]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	629a      	str	r2, [r3, #40]	; 0x28
		fcb_joint1.Ki_v = 0.0;
 800358c:	4b34      	ldr	r3, [pc, #208]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	62da      	str	r2, [r3, #44]	; 0x2c
		fcb_joint1.Kd_v = 0.0;
 8003594:	4b32      	ldr	r3, [pc, #200]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	; 0x30

		fcb_joint3.Kp_p = 0.0;
 800359c:	4b32      	ldr	r3, [pc, #200]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	61da      	str	r2, [r3, #28]
		fcb_joint3.Ki_p = 0.0;
 80035a4:	4b30      	ldr	r3, [pc, #192]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	621a      	str	r2, [r3, #32]
		fcb_joint3.Kd_p = 0.0;
 80035ac:	4b2e      	ldr	r3, [pc, #184]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	625a      	str	r2, [r3, #36]	; 0x24

		fcb_joint3.Kp_v = 0.0;
 80035b4:	4b2c      	ldr	r3, [pc, #176]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28
		fcb_joint3.Ki_v = 0.0;
 80035bc:	4b2a      	ldr	r3, [pc, #168]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	62da      	str	r2, [r3, #44]	; 0x2c
		fcb_joint3.Kd_v = 0.0;
 80035c4:	4b28      	ldr	r3, [pc, #160]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	631a      	str	r2, [r3, #48]	; 0x30

//		KalmanFilter(float theta_k,float kalman_pos,float kalman_velo,float P11,float P12,float P21,float P22);
//		KalmanFilter(fcb_joint1.Encoder/ 2609.0 , X11, X21, p11, p12, p21, p22, fcb_joint1);

		fcb_joint1 = KalmanFilter(fcb_joint1.Encoder / 2609.0, fcb_joint1);
 80035cc:	4b24      	ldr	r3, [pc, #144]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	b21b      	sxth	r3, r3
 80035d2:	ee07 3a90 	vmov	s15, r3
 80035d6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80035da:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8003648 <HAL_TIM_PeriodElapsedCallback+0x8d8>
 80035de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80035e2:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
 80035e6:	4e1e      	ldr	r6, [pc, #120]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 80035e8:	463d      	mov	r5, r7
 80035ea:	4c1d      	ldr	r4, [pc, #116]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 80035ec:	4668      	mov	r0, sp
 80035ee:	f104 030c 	add.w	r3, r4, #12
 80035f2:	2278      	movs	r2, #120	; 0x78
 80035f4:	4619      	mov	r1, r3
 80035f6:	f00c fc95 	bl	800ff24 <memcpy>
 80035fa:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80035fe:	eeb0 0a48 	vmov.f32	s0, s16
 8003602:	4628      	mov	r0, r5
 8003604:	f7fe fe8a 	bl	800231c <_Z12KalmanFilterf11robot_joint>
 8003608:	4630      	mov	r0, r6
 800360a:	463b      	mov	r3, r7
 800360c:	2284      	movs	r2, #132	; 0x84
 800360e:	4619      	mov	r1, r3
 8003610:	f00c fc88 	bl	800ff24 <memcpy>
//		fcb_joint3.Output_Stepper_Frequency = (fcb_joint3.Kp_p * fcb_joint3.Error_p);

//		fcb_joint1.Output_Stepper_Frequency = fcb_joint1.Goal_Position;
//		fcb_joint3.Output_Stepper_Frequency = fcb_joint3.Goal_Position;

		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 8003614:	4b12      	ldr	r3, [pc, #72]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 8003616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003618:	4a11      	ldr	r2, [pc, #68]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800361a:	6393      	str	r3, [r2, #56]	; 0x38
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 800361c:	4b12      	ldr	r3, [pc, #72]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800361e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003620:	4a11      	ldr	r2, [pc, #68]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8003622:	6393      	str	r3, [r2, #56]	; 0x38
 8003624:	e030      	b.n	8003688 <HAL_TIM_PeriodElapsedCallback+0x918>
 8003626:	bf00      	nop
 8003628:	9999999a 	.word	0x9999999a
 800362c:	3fe99999 	.word	0x3fe99999
 8003630:	2d0e5604 	.word	0x2d0e5604
 8003634:	3fcf9db2 	.word	0x3fcf9db2
 8003638:	4d4024b3 	.word	0x4d4024b3
 800363c:	3fdb5b2d 	.word	0x3fdb5b2d
 8003640:	84437119 	.word	0x84437119
 8003644:	3f437466 	.word	0x3f437466
 8003648:	00000000 	.word	0x00000000
 800364c:	40a46200 	.word	0x40a46200
 8003650:	240003b0 	.word	0x240003b0
 8003654:	2400037c 	.word	0x2400037c
 8003658:	24000020 	.word	0x24000020
 800365c:	24000380 	.word	0x24000380
 8003660:	240005bc 	.word	0x240005bc
 8003664:	24000378 	.word	0x24000378
 8003668:	240006c4 	.word	0x240006c4
 800366c:	2400002c 	.word	0x2400002c
 8003670:	2400036c 	.word	0x2400036c
 8003674:	24000370 	.word	0x24000370
 8003678:	24000374 	.word	0x24000374
 800367c:	240005b4 	.word	0x240005b4
 8003680:	240005b8 	.word	0x240005b8
 8003684:	00000000 	.word	0x00000000
		fcb_joint1.Old_p = fcb_joint1.Encoder;
 8003688:	4b2a      	ldr	r3, [pc, #168]	; (8003734 <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	b21b      	sxth	r3, r3
 800368e:	ee07 3a90 	vmov	s15, r3
 8003692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003696:	4b27      	ldr	r3, [pc, #156]	; (8003734 <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 8003698:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Old_p = fcb_joint3.Encoder;
 800369c:	4b26      	ldr	r3, [pc, #152]	; (8003738 <HAL_TIM_PeriodElapsedCallback+0x9c8>)
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	b21b      	sxth	r3, r3
 80036a2:	ee07 3a90 	vmov	s15, r3
 80036a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036aa:	4b23      	ldr	r3, [pc, #140]	; (8003738 <HAL_TIM_PeriodElapsedCallback+0x9c8>)
 80036ac:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
//		stepperJ1.StepperSetFrequency(300.0f);

//		stepperJ1.StepperSetFrequency(uJ1);
//		stepperJ3.StepperSetFrequency(0.0f);

		stepperJ2.StepperOpenLoopSpeed(-1.0 * fcb_joint1.Goal_Velocity);
 80036b0:	4b20      	ldr	r3, [pc, #128]	; (8003734 <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 80036b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80036b6:	eef1 7a67 	vneg.f32	s15, s15
 80036ba:	eeb0 0a67 	vmov.f32	s0, s15
 80036be:	481f      	ldr	r0, [pc, #124]	; (800373c <HAL_TIM_PeriodElapsedCallback+0x9cc>)
 80036c0:	f7fe f82e 	bl	8001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>
		stepperJ3.StepperOpenLoopSpeed(fcb_joint3.Goal_Velocity);
 80036c4:	4b1c      	ldr	r3, [pc, #112]	; (8003738 <HAL_TIM_PeriodElapsedCallback+0x9c8>)
 80036c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80036ca:	eeb0 0a67 	vmov.f32	s0, s15
 80036ce:	481c      	ldr	r0, [pc, #112]	; (8003740 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 80036d0:	f7fe f826 	bl	8001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>
//		stepperJ1.StepperOpenLoopSpeed(w_q1);
//		stepperJ3.StepperOpenLoopSpeed(w_q3);

#endif

		t = t + (sample_time_1000);
 80036d4:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 80036d6:	ed93 7a00 	vldr	s14, [r3]
 80036da:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x9d8>)
 80036dc:	edd3 7a00 	vldr	s15, [r3]
 80036e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036e4:	4b17      	ldr	r3, [pc, #92]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 80036e6:	edc3 7a00 	vstr	s15, [r3]
		if (t >= Time) {
 80036ea:	4b16      	ldr	r3, [pc, #88]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 80036ec:	ed93 7a00 	vldr	s14, [r3]
 80036f0:	4b16      	ldr	r3, [pc, #88]	; (800374c <HAL_TIM_PeriodElapsedCallback+0x9dc>)
 80036f2:	edd3 7a00 	vldr	s15, [r3]
 80036f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fe:	bfac      	ite	ge
 8003700:	2301      	movge	r3, #1
 8003702:	2300      	movlt	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00d      	beq.n	8003726 <HAL_TIM_PeriodElapsedCallback+0x9b6>
			t = 0.0;
 800370a:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
			direction_traj ^= 1;
 8003712:	4b0f      	ldr	r3, [pc, #60]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x9e0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f083 0301 	eor.w	r3, r3, #1
 800371a:	4a0d      	ldr	r2, [pc, #52]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x9e0>)
 800371c:	6013      	str	r3, [r2, #0]
			unwrap_pose = fcb_joint1.Goal_Position;
 800371e:	4b05      	ldr	r3, [pc, #20]	; (8003734 <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4a0c      	ldr	r2, [pc, #48]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0x9e4>)
 8003724:	6013      	str	r3, [r2, #0]
//					direction_traj ^= 1;
//					unwrap_pose =  fcb_joint1.Goal_Position;
//				}

	}
}
 8003726:	bf00      	nop
 8003728:	37b4      	adds	r7, #180	; 0xb4
 800372a:	46bd      	mov	sp, r7
 800372c:	ecbd 8b02 	vpop	{d8}
 8003730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003732:	bf00      	nop
 8003734:	240005bc 	.word	0x240005bc
 8003738:	240006c4 	.word	0x240006c4
 800373c:	24000294 	.word	0x24000294
 8003740:	240002bc 	.word	0x240002bc
 8003744:	24000378 	.word	0x24000378
 8003748:	24000028 	.word	0x24000028
 800374c:	2400001c 	.word	0x2400001c
 8003750:	24000368 	.word	0x24000368
 8003754:	240003b0 	.word	0x240003b0

08003758 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800375c:	f002 f810 	bl	8005780 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003760:	f000 f990 	bl	8003a84 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003764:	f7fe f8a8 	bl	80018b8 <MX_GPIO_Init>
	MX_DMA_Init();
 8003768:	f7fe f866 	bl	8001838 <MX_DMA_Init>
	MX_USART3_UART_Init();
 800376c:	f001 fd5c 	bl	8005228 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8003770:	f000 ff60 	bl	8004634 <MX_TIM2_Init>
	MX_UART4_Init();
 8003774:	f001 fcb6 	bl	80050e4 <MX_UART4_Init>
	MX_TIM4_Init();
 8003778:	f001 f84c 	bl	8004814 <MX_TIM4_Init>
	MX_SPI3_Init();
 800377c:	f000 fbae 	bl	8003edc <MX_SPI3_Init>
	MX_TIM1_Init();
 8003780:	f000 feaa 	bl	80044d8 <MX_TIM1_Init>
	MX_TIM3_Init();
 8003784:	f000 ffce 	bl	8004724 <MX_TIM3_Init>
	MX_TIM5_Init();
 8003788:	f001 f8bc 	bl	8004904 <MX_TIM5_Init>
	MX_TIM15_Init();
 800378c:	f001 f9f6 	bl	8004b7c <MX_TIM15_Init>
	MX_CRC_Init();
 8003790:	f7fe f802 	bl	8001798 <MX_CRC_Init>
	MX_UART7_Init();
 8003794:	f001 fcfa 	bl	800518c <MX_UART7_Init>
	MX_TIM6_Init();
 8003798:	f001 f902 	bl	80049a0 <MX_TIM6_Init>
	MX_TIM7_Init();
 800379c:	f001 f936 	bl	8004a0c <MX_TIM7_Init>
	MX_TIM12_Init();
 80037a0:	f001 f96a 	bl	8004a78 <MX_TIM12_Init>
	MX_TIM13_Init();
 80037a4:	f001 f9a2 	bl	8004aec <MX_TIM13_Init>
	MX_TIM14_Init();
 80037a8:	f001 f9c4 	bl	8004b34 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80037ac:	2201      	movs	r2, #1
 80037ae:	2101      	movs	r1, #1
 80037b0:	4893      	ldr	r0, [pc, #588]	; (8003a00 <main+0x2a8>)
 80037b2:	f005 fb87 	bl	8008ec4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80037b6:	2201      	movs	r2, #1
 80037b8:	2102      	movs	r1, #2
 80037ba:	4892      	ldr	r0, [pc, #584]	; (8003a04 <main+0x2ac>)
 80037bc:	f005 fb82 	bl	8008ec4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80037c0:	2200      	movs	r2, #0
 80037c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037c6:	488e      	ldr	r0, [pc, #568]	; (8003a00 <main+0x2a8>)
 80037c8:	f005 fb7c 	bl	8008ec4 <HAL_GPIO_WritePin>

	#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 80037cc:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8003a08 <main+0x2b0>
 80037d0:	488e      	ldr	r0, [pc, #568]	; (8003a0c <main+0x2b4>)
 80037d2:	f7fd fcf1 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(4);
 80037d6:	2104      	movs	r1, #4
 80037d8:	488c      	ldr	r0, [pc, #560]	; (8003a0c <main+0x2b4>)
 80037da:	f7fd ff89 	bl	80016f0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(42);
 80037de:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8003a10 <main+0x2b8>
 80037e2:	488a      	ldr	r0, [pc, #552]	; (8003a0c <main+0x2b4>)
 80037e4:	f7fd ff60 	bl	80016a8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 80037e8:	4888      	ldr	r0, [pc, #544]	; (8003a0c <main+0x2b4>)
 80037ea:	f7fd fcd4 	bl	8001196 <_ZN7Stepper13StepperEnableEv>

	stepperJ2.StepperSetFrequency(0.0f);
 80037ee:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8003a08 <main+0x2b0>
 80037f2:	4888      	ldr	r0, [pc, #544]	; (8003a14 <main+0x2bc>)
 80037f4:	f7fd fce0 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ2.StepperSetMicrostep(8);
 80037f8:	2108      	movs	r1, #8
 80037fa:	4886      	ldr	r0, [pc, #536]	; (8003a14 <main+0x2bc>)
 80037fc:	f7fd ff78 	bl	80016f0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ2.StepperSetRatio(3);
 8003800:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003804:	4883      	ldr	r0, [pc, #524]	; (8003a14 <main+0x2bc>)
 8003806:	f7fd ff4f 	bl	80016a8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ2.StepperEnable();
 800380a:	4882      	ldr	r0, [pc, #520]	; (8003a14 <main+0x2bc>)
 800380c:	f7fd fcc3 	bl	8001196 <_ZN7Stepper13StepperEnableEv>

	stepperJ3.StepperSetFrequency(0.0f);
 8003810:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8003a08 <main+0x2b0>
 8003814:	4880      	ldr	r0, [pc, #512]	; (8003a18 <main+0x2c0>)
 8003816:	f7fd fccf 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(8);
 800381a:	2108      	movs	r1, #8
 800381c:	487e      	ldr	r0, [pc, #504]	; (8003a18 <main+0x2c0>)
 800381e:	f7fd ff67 	bl	80016f0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 8003822:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 8003826:	487c      	ldr	r0, [pc, #496]	; (8003a18 <main+0x2c0>)
 8003828:	f7fd ff3e 	bl	80016a8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 800382c:	487a      	ldr	r0, [pc, #488]	; (8003a18 <main+0x2c0>)
 800382e:	f7fd fcb2 	bl	8001196 <_ZN7Stepper13StepperEnableEv>

	stepperJ4.StepperSetFrequency(0.0f);
 8003832:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8003a08 <main+0x2b0>
 8003836:	4879      	ldr	r0, [pc, #484]	; (8003a1c <main+0x2c4>)
 8003838:	f7fd fcbe 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ4.StepperSetMicrostep(8);
 800383c:	2108      	movs	r1, #8
 800383e:	4877      	ldr	r0, [pc, #476]	; (8003a1c <main+0x2c4>)
 8003840:	f7fd ff56 	bl	80016f0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ4.StepperSetRatio(3);
 8003844:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003848:	4874      	ldr	r0, [pc, #464]	; (8003a1c <main+0x2c4>)
 800384a:	f7fd ff2d 	bl	80016a8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ4.StepperEnable();
 800384e:	4873      	ldr	r0, [pc, #460]	; (8003a1c <main+0x2c4>)
 8003850:	f7fd fca1 	bl	8001196 <_ZN7Stepper13StepperEnableEv>

	//	stepperJ4.StepperSetMicrostep(1);
	//	stepperJ4.StepperSetRatio(1);

	gripper.setDegreeGripperClose(65);
 8003854:	2141      	movs	r1, #65	; 0x41
 8003856:	4872      	ldr	r0, [pc, #456]	; (8003a20 <main+0x2c8>)
 8003858:	f7fd fbe5 	bl	8001026 <_ZN10ServoMotor21setDegreeGripperCloseEl>
	gripper.setDegreeGripperOpen(0);
 800385c:	2100      	movs	r1, #0
 800385e:	4870      	ldr	r0, [pc, #448]	; (8003a20 <main+0x2c8>)
 8003860:	f7fd fbd0 	bl	8001004 <_ZN10ServoMotor20setDegreeGripperOpenEl>
	//	gripper.ServoRotateDegree(90);
	gripper.ServoEnable();
 8003864:	486e      	ldr	r0, [pc, #440]	; (8003a20 <main+0x2c8>)
 8003866:	f7fd f9f9 	bl	8000c5c <_ZN10ServoMotor11ServoEnableEv>
	#endif

	HAL_TIM_Base_Start_IT(&htim5); // Jog 100 Hz
 800386a:	486e      	ldr	r0, [pc, #440]	; (8003a24 <main+0x2cc>)
 800386c:	f008 f82a 	bl	800b8c4 <HAL_TIM_Base_Start_IT>
	//	HAL_TIM_Base_Start_IT(&htim6); // 200 Hz
	//	HAL_TIM_Base_Start_IT(&htim7); // Control 1000 Hz
	//	HAL_TIM_Base_Start_IT(&htim12); // 2000 Hz
	//	HAL_TIM_Base_Start_IT(&htim14); // 500Hz

	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 8003870:	2214      	movs	r2, #20
 8003872:	496d      	ldr	r1, [pc, #436]	; (8003a28 <main+0x2d0>)
 8003874:	486d      	ldr	r0, [pc, #436]	; (8003a2c <main+0x2d4>)
 8003876:	f00b fbcc 	bl	800f012 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800387a:	4b6d      	ldr	r3, [pc, #436]	; (8003a30 <main+0x2d8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a6d      	ldr	r2, [pc, #436]	; (8003a34 <main+0x2dc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d04a      	beq.n	800391a <main+0x1c2>
 8003884:	4b6a      	ldr	r3, [pc, #424]	; (8003a30 <main+0x2d8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a6b      	ldr	r2, [pc, #428]	; (8003a38 <main+0x2e0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d045      	beq.n	800391a <main+0x1c2>
 800388e:	4b68      	ldr	r3, [pc, #416]	; (8003a30 <main+0x2d8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a6a      	ldr	r2, [pc, #424]	; (8003a3c <main+0x2e4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d040      	beq.n	800391a <main+0x1c2>
 8003898:	4b65      	ldr	r3, [pc, #404]	; (8003a30 <main+0x2d8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a68      	ldr	r2, [pc, #416]	; (8003a40 <main+0x2e8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d03b      	beq.n	800391a <main+0x1c2>
 80038a2:	4b63      	ldr	r3, [pc, #396]	; (8003a30 <main+0x2d8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a67      	ldr	r2, [pc, #412]	; (8003a44 <main+0x2ec>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d036      	beq.n	800391a <main+0x1c2>
 80038ac:	4b60      	ldr	r3, [pc, #384]	; (8003a30 <main+0x2d8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a65      	ldr	r2, [pc, #404]	; (8003a48 <main+0x2f0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d031      	beq.n	800391a <main+0x1c2>
 80038b6:	4b5e      	ldr	r3, [pc, #376]	; (8003a30 <main+0x2d8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a64      	ldr	r2, [pc, #400]	; (8003a4c <main+0x2f4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d02c      	beq.n	800391a <main+0x1c2>
 80038c0:	4b5b      	ldr	r3, [pc, #364]	; (8003a30 <main+0x2d8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a62      	ldr	r2, [pc, #392]	; (8003a50 <main+0x2f8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d027      	beq.n	800391a <main+0x1c2>
 80038ca:	4b59      	ldr	r3, [pc, #356]	; (8003a30 <main+0x2d8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a61      	ldr	r2, [pc, #388]	; (8003a54 <main+0x2fc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d022      	beq.n	800391a <main+0x1c2>
 80038d4:	4b56      	ldr	r3, [pc, #344]	; (8003a30 <main+0x2d8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a5f      	ldr	r2, [pc, #380]	; (8003a58 <main+0x300>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d01d      	beq.n	800391a <main+0x1c2>
 80038de:	4b54      	ldr	r3, [pc, #336]	; (8003a30 <main+0x2d8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a5e      	ldr	r2, [pc, #376]	; (8003a5c <main+0x304>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d018      	beq.n	800391a <main+0x1c2>
 80038e8:	4b51      	ldr	r3, [pc, #324]	; (8003a30 <main+0x2d8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a5c      	ldr	r2, [pc, #368]	; (8003a60 <main+0x308>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d013      	beq.n	800391a <main+0x1c2>
 80038f2:	4b4f      	ldr	r3, [pc, #316]	; (8003a30 <main+0x2d8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a5b      	ldr	r2, [pc, #364]	; (8003a64 <main+0x30c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00e      	beq.n	800391a <main+0x1c2>
 80038fc:	4b4c      	ldr	r3, [pc, #304]	; (8003a30 <main+0x2d8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a59      	ldr	r2, [pc, #356]	; (8003a68 <main+0x310>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d009      	beq.n	800391a <main+0x1c2>
 8003906:	4b4a      	ldr	r3, [pc, #296]	; (8003a30 <main+0x2d8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a58      	ldr	r2, [pc, #352]	; (8003a6c <main+0x314>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d004      	beq.n	800391a <main+0x1c2>
 8003910:	4b47      	ldr	r3, [pc, #284]	; (8003a30 <main+0x2d8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a56      	ldr	r2, [pc, #344]	; (8003a70 <main+0x318>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d108      	bne.n	800392c <main+0x1d4>
 800391a:	4b45      	ldr	r3, [pc, #276]	; (8003a30 <main+0x2d8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	4b43      	ldr	r3, [pc, #268]	; (8003a30 <main+0x2d8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0208 	bic.w	r2, r2, #8
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	e007      	b.n	800393c <main+0x1e4>
 800392c:	4b40      	ldr	r3, [pc, #256]	; (8003a30 <main+0x2d8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4b3f      	ldr	r3, [pc, #252]	; (8003a30 <main+0x2d8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0204 	bic.w	r2, r2, #4
 800393a:	601a      	str	r2, [r3, #0]
	//	stepperJ1.StepperOpenLoopSpeed(1.00f);

	// Backup
	fcb_joint1.Kp_p = 0.0;
 800393c:	4b4d      	ldr	r3, [pc, #308]	; (8003a74 <main+0x31c>)
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	61da      	str	r2, [r3, #28]
	fcb_joint1.Kp_v = 0.0;
 8003944:	4b4b      	ldr	r3, [pc, #300]	; (8003a74 <main+0x31c>)
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint1.Ki_p = 0.0;
 800394c:	4b49      	ldr	r3, [pc, #292]	; (8003a74 <main+0x31c>)
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	621a      	str	r2, [r3, #32]
	fcb_joint1.Ki_v = 0.0;
 8003954:	4b47      	ldr	r3, [pc, #284]	; (8003a74 <main+0x31c>)
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint1.Kd_p = 0.0;
 800395c:	4b45      	ldr	r3, [pc, #276]	; (8003a74 <main+0x31c>)
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint1.Kd_p = 0.0;
 8003964:	4b43      	ldr	r3, [pc, #268]	; (8003a74 <main+0x31c>)
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint2.Kp_p = 0.0;
 800396c:	4b42      	ldr	r3, [pc, #264]	; (8003a78 <main+0x320>)
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	61da      	str	r2, [r3, #28]
	fcb_joint2.Kp_v = 0.0;
 8003974:	4b40      	ldr	r3, [pc, #256]	; (8003a78 <main+0x320>)
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint2.Ki_p = 0.0;
 800397c:	4b3e      	ldr	r3, [pc, #248]	; (8003a78 <main+0x320>)
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	621a      	str	r2, [r3, #32]
	fcb_joint2.Ki_v = 0.0;
 8003984:	4b3c      	ldr	r3, [pc, #240]	; (8003a78 <main+0x320>)
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint2.Kd_p = 0.0;
 800398c:	4b3a      	ldr	r3, [pc, #232]	; (8003a78 <main+0x320>)
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint2.Kd_p = 0.0;
 8003994:	4b38      	ldr	r3, [pc, #224]	; (8003a78 <main+0x320>)
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint3.Kp_p = 0.0;
 800399c:	4b37      	ldr	r3, [pc, #220]	; (8003a7c <main+0x324>)
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	61da      	str	r2, [r3, #28]
	fcb_joint3.Kp_v = 0.0;
 80039a4:	4b35      	ldr	r3, [pc, #212]	; (8003a7c <main+0x324>)
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint3.Ki_p = 0.0;
 80039ac:	4b33      	ldr	r3, [pc, #204]	; (8003a7c <main+0x324>)
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	621a      	str	r2, [r3, #32]
	fcb_joint3.Ki_v = 0.0;
 80039b4:	4b31      	ldr	r3, [pc, #196]	; (8003a7c <main+0x324>)
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint3.Kd_p = 0.0;
 80039bc:	4b2f      	ldr	r3, [pc, #188]	; (8003a7c <main+0x324>)
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint3.Kd_p = 0.0;
 80039c4:	4b2d      	ldr	r3, [pc, #180]	; (8003a7c <main+0x324>)
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint4.Kp_p = 0.0;
 80039cc:	4b2c      	ldr	r3, [pc, #176]	; (8003a80 <main+0x328>)
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	61da      	str	r2, [r3, #28]
	fcb_joint4.Kp_v = 0.0;
 80039d4:	4b2a      	ldr	r3, [pc, #168]	; (8003a80 <main+0x328>)
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint4.Ki_p = 0.0;
 80039dc:	4b28      	ldr	r3, [pc, #160]	; (8003a80 <main+0x328>)
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	621a      	str	r2, [r3, #32]
	fcb_joint4.Ki_v = 0.0;
 80039e4:	4b26      	ldr	r3, [pc, #152]	; (8003a80 <main+0x328>)
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint4.Kd_p = 0.0;
 80039ec:	4b24      	ldr	r3, [pc, #144]	; (8003a80 <main+0x328>)
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint4.Kd_p = 0.0;
 80039f4:	4b22      	ldr	r3, [pc, #136]	; (8003a80 <main+0x328>)
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	625a      	str	r2, [r3, #36]	; 0x24

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80039fc:	e7fe      	b.n	80039fc <main+0x2a4>
 80039fe:	bf00      	nop
 8003a00:	58020400 	.word	0x58020400
 8003a04:	58021000 	.word	0x58021000
 8003a08:	00000000 	.word	0x00000000
 8003a0c:	2400026c 	.word	0x2400026c
 8003a10:	42280000 	.word	0x42280000
 8003a14:	24000294 	.word	0x24000294
 8003a18:	240002bc 	.word	0x240002bc
 8003a1c:	240002e4 	.word	0x240002e4
 8003a20:	2400030c 	.word	0x2400030c
 8003a24:	2400091c 	.word	0x2400091c
 8003a28:	24000350 	.word	0x24000350
 8003a2c:	24000d48 	.word	0x24000d48
 8003a30:	24000cd0 	.word	0x24000cd0
 8003a34:	40020010 	.word	0x40020010
 8003a38:	40020028 	.word	0x40020028
 8003a3c:	40020040 	.word	0x40020040
 8003a40:	40020058 	.word	0x40020058
 8003a44:	40020070 	.word	0x40020070
 8003a48:	40020088 	.word	0x40020088
 8003a4c:	400200a0 	.word	0x400200a0
 8003a50:	400200b8 	.word	0x400200b8
 8003a54:	40020410 	.word	0x40020410
 8003a58:	40020428 	.word	0x40020428
 8003a5c:	40020440 	.word	0x40020440
 8003a60:	40020458 	.word	0x40020458
 8003a64:	40020470 	.word	0x40020470
 8003a68:	40020488 	.word	0x40020488
 8003a6c:	400204a0 	.word	0x400204a0
 8003a70:	400204b8 	.word	0x400204b8
 8003a74:	240005bc 	.word	0x240005bc
 8003a78:	24000640 	.word	0x24000640
 8003a7c:	240006c4 	.word	0x240006c4
 8003a80:	24000748 	.word	0x24000748

08003a84 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b09c      	sub	sp, #112	; 0x70
 8003a88:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a8e:	224c      	movs	r2, #76	; 0x4c
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f00c fa54 	bl	800ff40 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a98:	1d3b      	adds	r3, r7, #4
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f00c fa4e 	bl	800ff40 <memset>

/** Supply configuration update enable
 */
HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003aa4:	2002      	movs	r0, #2
 8003aa6:	f005 fa41 	bl	8008f2c <HAL_PWREx_ConfigSupply>
/** Configure the main internal regulator output voltage
 */
__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003aaa:	2300      	movs	r3, #0
 8003aac:	603b      	str	r3, [r7, #0]
 8003aae:	4b38      	ldr	r3, [pc, #224]	; (8003b90 <_Z18SystemClock_Configv+0x10c>)
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	4a37      	ldr	r2, [pc, #220]	; (8003b90 <_Z18SystemClock_Configv+0x10c>)
 8003ab4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ab8:	6193      	str	r3, [r2, #24]
 8003aba:	4b35      	ldr	r3, [pc, #212]	; (8003b90 <_Z18SystemClock_Configv+0x10c>)
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ac2:	603b      	str	r3, [r7, #0]
 8003ac4:	4b33      	ldr	r3, [pc, #204]	; (8003b94 <_Z18SystemClock_Configv+0x110>)
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	4a32      	ldr	r2, [pc, #200]	; (8003b94 <_Z18SystemClock_Configv+0x110>)
 8003aca:	f043 0301 	orr.w	r3, r3, #1
 8003ace:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ad0:	4b30      	ldr	r3, [pc, #192]	; (8003b94 <_Z18SystemClock_Configv+0x110>)
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	603b      	str	r3, [r7, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]

while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003adc:	4b2c      	ldr	r3, [pc, #176]	; (8003b90 <_Z18SystemClock_Configv+0x10c>)
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae8:	bf14      	ite	ne
 8003aea:	2301      	movne	r3, #1
 8003aec:	2300      	moveq	r3, #0
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d000      	beq.n	8003af6 <_Z18SystemClock_Configv+0x72>
 8003af4:	e7f2      	b.n	8003adc <_Z18SystemClock_Configv+0x58>
/** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003af6:	2302      	movs	r3, #2
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003afa:	2301      	movs	r3, #1
 8003afc:	633b      	str	r3, [r7, #48]	; 0x30
RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003afe:	2340      	movs	r3, #64	; 0x40
 8003b00:	637b      	str	r3, [r7, #52]	; 0x34
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b02:	2302      	movs	r3, #2
 8003b04:	64bb      	str	r3, [r7, #72]	; 0x48
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003b06:	2300      	movs	r3, #0
 8003b08:	64fb      	str	r3, [r7, #76]	; 0x4c
RCC_OscInitStruct.PLL.PLLM = 4;
 8003b0a:	2304      	movs	r3, #4
 8003b0c:	653b      	str	r3, [r7, #80]	; 0x50
RCC_OscInitStruct.PLL.PLLN = 60;
 8003b0e:	233c      	movs	r3, #60	; 0x3c
 8003b10:	657b      	str	r3, [r7, #84]	; 0x54
RCC_OscInitStruct.PLL.PLLP = 2;
 8003b12:	2302      	movs	r3, #2
 8003b14:	65bb      	str	r3, [r7, #88]	; 0x58
RCC_OscInitStruct.PLL.PLLQ = 6;
 8003b16:	2306      	movs	r3, #6
 8003b18:	65fb      	str	r3, [r7, #92]	; 0x5c
RCC_OscInitStruct.PLL.PLLR = 2;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	663b      	str	r3, [r7, #96]	; 0x60
RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003b1e:	230c      	movs	r3, #12
 8003b20:	667b      	str	r3, [r7, #100]	; 0x64
RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	66bb      	str	r3, [r7, #104]	; 0x68
RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	66fb      	str	r3, [r7, #108]	; 0x6c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f005 fa36 	bl	8008fa0 <HAL_RCC_OscConfig>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	bf14      	ite	ne
 8003b3a:	2301      	movne	r3, #1
 8003b3c:	2300      	moveq	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <_Z18SystemClock_Configv+0xc4>
{
	Error_Handler();
 8003b44:	f000 f83e 	bl	8003bc4 <Error_Handler>
}
/** Initializes the CPU, AHB and APB buses clocks
 */
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b48:	233f      	movs	r3, #63	; 0x3f
 8003b4a:	607b      	str	r3, [r7, #4]
|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	60bb      	str	r3, [r7, #8]
RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003b54:	2308      	movs	r3, #8
 8003b56:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003b58:	2340      	movs	r3, #64	; 0x40
 8003b5a:	617b      	str	r3, [r7, #20]
RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003b5c:	2340      	movs	r3, #64	; 0x40
 8003b5e:	61bb      	str	r3, [r7, #24]
RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b64:	61fb      	str	r3, [r7, #28]
RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003b66:	2340      	movs	r3, #64	; 0x40
 8003b68:	623b      	str	r3, [r7, #32]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003b6a:	1d3b      	adds	r3, r7, #4
 8003b6c:	2104      	movs	r1, #4
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f005 fe42 	bl	80097f8 <HAL_RCC_ClockConfig>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	bf14      	ite	ne
 8003b7a:	2301      	movne	r3, #1
 8003b7c:	2300      	moveq	r3, #0
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <_Z18SystemClock_Configv+0x104>
{
	Error_Handler();
 8003b84:	f000 f81e 	bl	8003bc4 <Error_Handler>
}
}
 8003b88:	bf00      	nop
 8003b8a:	3770      	adds	r7, #112	; 0x70
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	58024800 	.word	0x58024800
 8003b94:	58000400 	.word	0x58000400

08003b98 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]

}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	80fb      	strh	r3, [r7, #6]

}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Error_Handler_Debug */
HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2101      	movs	r1, #1
 8003bcc:	4808      	ldr	r0, [pc, #32]	; (8003bf0 <Error_Handler+0x2c>)
 8003bce:	f005 f979 	bl	8008ec4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2102      	movs	r1, #2
 8003bd6:	4807      	ldr	r0, [pc, #28]	; (8003bf4 <Error_Handler+0x30>)
 8003bd8:	f005 f974 	bl	8008ec4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003be2:	4803      	ldr	r0, [pc, #12]	; (8003bf0 <Error_Handler+0x2c>)
 8003be4:	f005 f96e 	bl	8008ec4 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003be8:	b672      	cpsid	i
}
 8003bea:	bf00      	nop
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8003bec:	e7fe      	b.n	8003bec <Error_Handler+0x28>
 8003bee:	bf00      	nop
 8003bf0:	58020400 	.word	0x58020400
 8003bf4:	58021000 	.word	0x58021000

08003bf8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	ed87 0a01 	vstr	s0, [r7, #4]
 8003c02:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8003c04:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	ee06 3a90 	vmov	s13, r3
 8003c12:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8003c16:	eeb0 1b46 	vmov.f64	d1, d6
 8003c1a:	eeb0 0b47 	vmov.f64	d0, d7
 8003c1e:	f00b fbb3 	bl	800f388 <pow>
 8003c22:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8003c26:	eeb0 0b47 	vmov.f64	d0, d7
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <_Z41__static_initialization_and_destruction_0ii>:
}
/* USER CODE END Error_Handler_Debug */
}
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	f040 80df 	bne.w	8003e00 <_Z41__static_initialization_and_destruction_0ii+0x1d0>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	f040 80d9 	bne.w	8003e00 <_Z41__static_initialization_and_destruction_0ii+0x1d0>
AMT21 encoderJ1(&huart4, 0xD4);
 8003c4e:	22d4      	movs	r2, #212	; 0xd4
 8003c50:	497c      	ldr	r1, [pc, #496]	; (8003e44 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8003c52:	487d      	ldr	r0, [pc, #500]	; (8003e48 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8003c54:	f7fc fed4 	bl	8000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 8003c58:	22c4      	movs	r2, #196	; 0xc4
 8003c5a:	497a      	ldr	r1, [pc, #488]	; (8003e44 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8003c5c:	487b      	ldr	r0, [pc, #492]	; (8003e4c <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8003c5e:	f7fc fecf 	bl	8000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8003c62:	2320      	movs	r3, #32
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	4b7a      	ldr	r3, [pc, #488]	; (8003e50 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	497a      	ldr	r1, [pc, #488]	; (8003e54 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8003c6c:	487a      	ldr	r0, [pc, #488]	; (8003e58 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8003c6e:	f7fd fa43 	bl	80010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8003c72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	4b78      	ldr	r3, [pc, #480]	; (8003e5c <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8003c7a:	2204      	movs	r2, #4
 8003c7c:	4978      	ldr	r1, [pc, #480]	; (8003e60 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8003c7e:	4879      	ldr	r0, [pc, #484]	; (8003e64 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8003c80:	f7fd fa3a 	bl	80010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8003c84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	4b74      	ldr	r3, [pc, #464]	; (8003e5c <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	4976      	ldr	r1, [pc, #472]	; (8003e68 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8003c90:	4876      	ldr	r0, [pc, #472]	; (8003e6c <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003c92:	f7fd fa31 	bl	80010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8003c96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	4b6c      	ldr	r3, [pc, #432]	; (8003e50 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8003c9e:	2208      	movs	r2, #8
 8003ca0:	4973      	ldr	r1, [pc, #460]	; (8003e70 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8003ca2:	4874      	ldr	r0, [pc, #464]	; (8003e74 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8003ca4:	f7fd fa28 	bl	80010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8003ca8:	2208      	movs	r2, #8
 8003caa:	4973      	ldr	r1, [pc, #460]	; (8003e78 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8003cac:	4873      	ldr	r0, [pc, #460]	; (8003e7c <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8003cae:	f7fc ff9a 	bl	8000be6 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>
volatile const float C2_q1 = (3.0 * C0_q1) / (Time * Time);
 8003cb2:	4b73      	ldr	r3, [pc, #460]	; (8003e80 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8003cb4:	edd3 7a00 	vldr	s15, [r3]
 8003cb8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cbc:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8003cc0:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003cc4:	4b6f      	ldr	r3, [pc, #444]	; (8003e84 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003cc6:	ed93 7a00 	vldr	s14, [r3]
 8003cca:	4b6e      	ldr	r3, [pc, #440]	; (8003e84 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003ccc:	edd3 7a00 	vldr	s15, [r3]
 8003cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003cd8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003cdc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003ce0:	4b69      	ldr	r3, [pc, #420]	; (8003e88 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8003ce2:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q1 = (2.0 * C0_q1) / (Time * Time * Time);
 8003ce6:	4b66      	ldr	r3, [pc, #408]	; (8003e80 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8003ce8:	edd3 7a00 	vldr	s15, [r3]
 8003cec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cf0:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003cf4:	4b63      	ldr	r3, [pc, #396]	; (8003e84 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003cf6:	ed93 7a00 	vldr	s14, [r3]
 8003cfa:	4b62      	ldr	r3, [pc, #392]	; (8003e84 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003cfc:	edd3 7a00 	vldr	s15, [r3]
 8003d00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d04:	4b5f      	ldr	r3, [pc, #380]	; (8003e84 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003d06:	edd3 7a00 	vldr	s15, [r3]
 8003d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d0e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003d12:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003d16:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003d1a:	4b5c      	ldr	r3, [pc, #368]	; (8003e8c <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8003d1c:	edc3 7a00 	vstr	s15, [r3]
volatile const float C2_q3 = (3.0 * C0_q3) / (Time * Time);
 8003d20:	4b5b      	ldr	r3, [pc, #364]	; (8003e90 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8003d22:	edd3 7a00 	vldr	s15, [r3]
 8003d26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d2a:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8003d2e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003d32:	4b54      	ldr	r3, [pc, #336]	; (8003e84 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003d34:	ed93 7a00 	vldr	s14, [r3]
 8003d38:	4b52      	ldr	r3, [pc, #328]	; (8003e84 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003d3a:	edd3 7a00 	vldr	s15, [r3]
 8003d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d42:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003d46:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003d4a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003d4e:	4b51      	ldr	r3, [pc, #324]	; (8003e94 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8003d50:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q3 = (2.0 * C0_q3) / (Time * Time * Time);
 8003d54:	4b4e      	ldr	r3, [pc, #312]	; (8003e90 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8003d56:	edd3 7a00 	vldr	s15, [r3]
 8003d5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d5e:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003d62:	4b48      	ldr	r3, [pc, #288]	; (8003e84 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003d64:	ed93 7a00 	vldr	s14, [r3]
 8003d68:	4b46      	ldr	r3, [pc, #280]	; (8003e84 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003d6a:	edd3 7a00 	vldr	s15, [r3]
 8003d6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d72:	4b44      	ldr	r3, [pc, #272]	; (8003e84 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003d74:	edd3 7a00 	vldr	s15, [r3]
 8003d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003d80:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003d84:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003d88:	4b43      	ldr	r3, [pc, #268]	; (8003e98 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8003d8a:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt2 = pow(dt, 2);
 8003d8e:	4b43      	ldr	r3, [pc, #268]	; (8003e9c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8003d90:	edd3 7a00 	vldr	s15, [r3]
 8003d94:	2002      	movs	r0, #2
 8003d96:	eeb0 0a67 	vmov.f32	s0, s15
 8003d9a:	f7ff ff2d 	bl	8003bf8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003d9e:	eeb0 7b40 	vmov.f64	d7, d0
 8003da2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003da6:	4b3e      	ldr	r3, [pc, #248]	; (8003ea0 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8003da8:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt3 = pow(dt, 3);
 8003dac:	4b3b      	ldr	r3, [pc, #236]	; (8003e9c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8003dae:	edd3 7a00 	vldr	s15, [r3]
 8003db2:	2003      	movs	r0, #3
 8003db4:	eeb0 0a67 	vmov.f32	s0, s15
 8003db8:	f7ff ff1e 	bl	8003bf8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003dbc:	eeb0 7b40 	vmov.f64	d7, d0
 8003dc0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003dc4:	4b37      	ldr	r3, [pc, #220]	; (8003ea4 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8003dc6:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt4 = pow(dt, 4);
 8003dca:	4b34      	ldr	r3, [pc, #208]	; (8003e9c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8003dcc:	edd3 7a00 	vldr	s15, [r3]
 8003dd0:	2004      	movs	r0, #4
 8003dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8003dd6:	f7ff ff0f 	bl	8003bf8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003dda:	eeb0 7b40 	vmov.f64	d7, d0
 8003dde:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003de2:	4b31      	ldr	r3, [pc, #196]	; (8003ea8 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8003de4:	edc3 7a00 	vstr	s15, [r3]
fcb_joint fcb_joint1, fcb_joint2, fcb_joint3, fcb_joint4;
 8003de8:	4830      	ldr	r0, [pc, #192]	; (8003eac <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8003dea:	f7fe f96f 	bl	80020cc <_ZN11robot_jointC1Ev>
 8003dee:	4830      	ldr	r0, [pc, #192]	; (8003eb0 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8003df0:	f7fe f96c 	bl	80020cc <_ZN11robot_jointC1Ev>
 8003df4:	482f      	ldr	r0, [pc, #188]	; (8003eb4 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8003df6:	f7fe f969 	bl	80020cc <_ZN11robot_jointC1Ev>
 8003dfa:	482f      	ldr	r0, [pc, #188]	; (8003eb8 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8003dfc:	f7fe f966 	bl	80020cc <_ZN11robot_jointC1Ev>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d119      	bne.n	8003e3a <_Z41__static_initialization_and_destruction_0ii+0x20a>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d114      	bne.n	8003e3a <_Z41__static_initialization_and_destruction_0ii+0x20a>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8003e10:	481a      	ldr	r0, [pc, #104]	; (8003e7c <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8003e12:	f7fc ff18 	bl	8000c46 <_ZN10ServoMotorD1Ev>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8003e16:	4817      	ldr	r0, [pc, #92]	; (8003e74 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8003e18:	f7fd f9b2 	bl	8001180 <_ZN7StepperD1Ev>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8003e1c:	4813      	ldr	r0, [pc, #76]	; (8003e6c <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003e1e:	f7fd f9af 	bl	8001180 <_ZN7StepperD1Ev>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8003e22:	4810      	ldr	r0, [pc, #64]	; (8003e64 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8003e24:	f7fd f9ac 	bl	8001180 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8003e28:	480b      	ldr	r0, [pc, #44]	; (8003e58 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8003e2a:	f7fd f9a9 	bl	8001180 <_ZN7StepperD1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 8003e2e:	4807      	ldr	r0, [pc, #28]	; (8003e4c <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8003e30:	f7fc fdfa 	bl	8000a28 <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8003e34:	4804      	ldr	r0, [pc, #16]	; (8003e48 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8003e36:	f7fc fdf7 	bl	8000a28 <_ZN5AMT21D1Ev>
}
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	24000ec8 	.word	0x24000ec8
 8003e48:	24000234 	.word	0x24000234
 8003e4c:	24000250 	.word	0x24000250
 8003e50:	58020400 	.word	0x58020400
 8003e54:	24000968 	.word	0x24000968
 8003e58:	2400026c 	.word	0x2400026c
 8003e5c:	58021000 	.word	0x58021000
 8003e60:	24000a4c 	.word	0x24000a4c
 8003e64:	24000294 	.word	0x24000294
 8003e68:	240008d0 	.word	0x240008d0
 8003e6c:	240002bc 	.word	0x240002bc
 8003e70:	24000a98 	.word	0x24000a98
 8003e74:	240002e4 	.word	0x240002e4
 8003e78:	24000884 	.word	0x24000884
 8003e7c:	2400030c 	.word	0x2400030c
 8003e80:	24000020 	.word	0x24000020
 8003e84:	2400001c 	.word	0x2400001c
 8003e88:	2400037c 	.word	0x2400037c
 8003e8c:	24000380 	.word	0x24000380
 8003e90:	24000024 	.word	0x24000024
 8003e94:	24000384 	.word	0x24000384
 8003e98:	24000388 	.word	0x24000388
 8003e9c:	24000030 	.word	0x24000030
 8003ea0:	240003a0 	.word	0x240003a0
 8003ea4:	240003a4 	.word	0x240003a4
 8003ea8:	240003a8 	.word	0x240003a8
 8003eac:	240005bc 	.word	0x240005bc
 8003eb0:	24000640 	.word	0x24000640
 8003eb4:	240006c4 	.word	0x240006c4
 8003eb8:	24000748 	.word	0x24000748

08003ebc <_GLOBAL__sub_I_TIM_MS>:
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003ec4:	2001      	movs	r0, #1
 8003ec6:	f7ff feb3 	bl	8003c30 <_Z41__static_initialization_and_destruction_0ii>
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <_GLOBAL__sub_D_TIM_MS>:
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	f7ff feab 	bl	8003c30 <_Z41__static_initialization_and_destruction_0ii>
 8003eda:	bd80      	pop	{r7, pc}

08003edc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003ee0:	4b27      	ldr	r3, [pc, #156]	; (8003f80 <MX_SPI3_Init+0xa4>)
 8003ee2:	4a28      	ldr	r2, [pc, #160]	; (8003f84 <MX_SPI3_Init+0xa8>)
 8003ee4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003ee6:	4b26      	ldr	r3, [pc, #152]	; (8003f80 <MX_SPI3_Init+0xa4>)
 8003ee8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003eec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003eee:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <MX_SPI3_Init+0xa4>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8003ef4:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <MX_SPI3_Init+0xa4>)
 8003ef6:	2203      	movs	r2, #3
 8003ef8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003efa:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <MX_SPI3_Init+0xa4>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f00:	4b1f      	ldr	r3, [pc, #124]	; (8003f80 <MX_SPI3_Init+0xa4>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003f06:	4b1e      	ldr	r3, [pc, #120]	; (8003f80 <MX_SPI3_Init+0xa4>)
 8003f08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003f0c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f0e:	4b1c      	ldr	r3, [pc, #112]	; (8003f80 <MX_SPI3_Init+0xa4>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f14:	4b1a      	ldr	r3, [pc, #104]	; (8003f80 <MX_SPI3_Init+0xa4>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f1a:	4b19      	ldr	r3, [pc, #100]	; (8003f80 <MX_SPI3_Init+0xa4>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f20:	4b17      	ldr	r3, [pc, #92]	; (8003f80 <MX_SPI3_Init+0xa4>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8003f26:	4b16      	ldr	r3, [pc, #88]	; (8003f80 <MX_SPI3_Init+0xa4>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003f2c:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <MX_SPI3_Init+0xa4>)
 8003f2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f32:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003f34:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <MX_SPI3_Init+0xa4>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003f3a:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <MX_SPI3_Init+0xa4>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003f40:	4b0f      	ldr	r3, [pc, #60]	; (8003f80 <MX_SPI3_Init+0xa4>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003f46:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <MX_SPI3_Init+0xa4>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003f4c:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <MX_SPI3_Init+0xa4>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003f52:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <MX_SPI3_Init+0xa4>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <MX_SPI3_Init+0xa4>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003f5e:	4b08      	ldr	r3, [pc, #32]	; (8003f80 <MX_SPI3_Init+0xa4>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <MX_SPI3_Init+0xa4>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003f6a:	4805      	ldr	r0, [pc, #20]	; (8003f80 <MX_SPI3_Init+0xa4>)
 8003f6c:	f007 fb32 	bl	800b5d4 <HAL_SPI_Init>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8003f76:	f7ff fe25 	bl	8003bc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003f7a:	bf00      	nop
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	240007fc 	.word	0x240007fc
 8003f84:	40003c00 	.word	0x40003c00

08003f88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b0b8      	sub	sp, #224	; 0xe0
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	605a      	str	r2, [r3, #4]
 8003f9a:	609a      	str	r2, [r3, #8]
 8003f9c:	60da      	str	r2, [r3, #12]
 8003f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fa0:	f107 0310 	add.w	r3, r7, #16
 8003fa4:	22bc      	movs	r2, #188	; 0xbc
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f00b ffc9 	bl	800ff40 <memset>
  if(spiHandle->Instance==SPI3)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a25      	ldr	r2, [pc, #148]	; (8004048 <HAL_SPI_MspInit+0xc0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d142      	bne.n	800403e <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fbc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fc2:	f107 0310 	add.w	r3, r7, #16
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f005 ffa2 	bl	8009f10 <HAL_RCCEx_PeriphCLKConfig>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8003fd2:	f7ff fdf7 	bl	8003bc4 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003fd6:	4b1d      	ldr	r3, [pc, #116]	; (800404c <HAL_SPI_MspInit+0xc4>)
 8003fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fdc:	4a1b      	ldr	r2, [pc, #108]	; (800404c <HAL_SPI_MspInit+0xc4>)
 8003fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003fe6:	4b19      	ldr	r3, [pc, #100]	; (800404c <HAL_SPI_MspInit+0xc4>)
 8003fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ff4:	4b15      	ldr	r3, [pc, #84]	; (800404c <HAL_SPI_MspInit+0xc4>)
 8003ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ffa:	4a14      	ldr	r2, [pc, #80]	; (800404c <HAL_SPI_MspInit+0xc4>)
 8003ffc:	f043 0304 	orr.w	r3, r3, #4
 8004000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004004:	4b11      	ldr	r3, [pc, #68]	; (800404c <HAL_SPI_MspInit+0xc4>)
 8004006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	60bb      	str	r3, [r7, #8]
 8004010:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004012:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004016:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401a:	2302      	movs	r3, #2
 800401c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004020:	2300      	movs	r3, #0
 8004022:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004026:	2300      	movs	r3, #0
 8004028:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800402c:	2306      	movs	r3, #6
 800402e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004032:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004036:	4619      	mov	r1, r3
 8004038:	4805      	ldr	r0, [pc, #20]	; (8004050 <HAL_SPI_MspInit+0xc8>)
 800403a:	f004 fd93 	bl	8008b64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800403e:	bf00      	nop
 8004040:	37e0      	adds	r7, #224	; 0xe0
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40003c00 	.word	0x40003c00
 800404c:	58024400 	.word	0x58024400
 8004050:	58020800 	.word	0x58020800

08004054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800405a:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <HAL_MspInit+0x30>)
 800405c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004060:	4a08      	ldr	r2, [pc, #32]	; (8004084 <HAL_MspInit+0x30>)
 8004062:	f043 0302 	orr.w	r3, r3, #2
 8004066:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800406a:	4b06      	ldr	r3, [pc, #24]	; (8004084 <HAL_MspInit+0x30>)
 800406c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	607b      	str	r3, [r7, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	58024400 	.word	0x58024400

08004088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800408c:	e7fe      	b.n	800408c <NMI_Handler+0x4>

0800408e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800408e:	b480      	push	{r7}
 8004090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004092:	e7fe      	b.n	8004092 <HardFault_Handler+0x4>

08004094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004098:	e7fe      	b.n	8004098 <MemManage_Handler+0x4>

0800409a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800409a:	b480      	push	{r7}
 800409c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800409e:	e7fe      	b.n	800409e <BusFault_Handler+0x4>

080040a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040a4:	e7fe      	b.n	80040a4 <UsageFault_Handler+0x4>

080040a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040a6:	b480      	push	{r7}
 80040a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040aa:	bf00      	nop
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040b8:	bf00      	nop
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040c2:	b480      	push	{r7}
 80040c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040c6:	bf00      	nop
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040d4:	f001 fbc6 	bl	8005864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80040d8:	f001 fcff 	bl	8005ada <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80040dc:	bf00      	nop
 80040de:	bd80      	pop	{r7, pc}

080040e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 80040e4:	4802      	ldr	r0, [pc, #8]	; (80040f0 <DMA1_Stream0_IRQHandler+0x10>)
 80040e6:	f003 fa2b 	bl	8007540 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80040ea:	bf00      	nop
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	24000e50 	.word	0x24000e50

080040f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80040f8:	4802      	ldr	r0, [pc, #8]	; (8004104 <DMA1_Stream1_IRQHandler+0x10>)
 80040fa:	f003 fa21 	bl	8007540 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80040fe:	bf00      	nop
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	24000cd0 	.word	0x24000cd0

08004108 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800410c:	4802      	ldr	r0, [pc, #8]	; (8004118 <DMA1_Stream2_IRQHandler+0x10>)
 800410e:	f003 fa17 	bl	8007540 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004112:	bf00      	nop
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	24000dd8 	.word	0x24000dd8

0800411c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004120:	4802      	ldr	r0, [pc, #8]	; (800412c <DMA1_Stream3_IRQHandler+0x10>)
 8004122:	f003 fa0d 	bl	8007540 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004126:	bf00      	nop
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	24000bc8 	.word	0x24000bc8

08004130 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8004134:	4802      	ldr	r0, [pc, #8]	; (8004140 <DMA1_Stream4_IRQHandler+0x10>)
 8004136:	f003 fa03 	bl	8007540 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	24000f58 	.word	0x24000f58

08004144 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8004148:	2040      	movs	r0, #64	; 0x40
 800414a:	f004 fed4 	bl	8008ef6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 800414e:	2080      	movs	r0, #128	; 0x80
 8004150:	f004 fed1 	bl	8008ef6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004154:	bf00      	nop
 8004156:	bd80      	pop	{r7, pc}

08004158 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800415c:	4802      	ldr	r0, [pc, #8]	; (8004168 <USART3_IRQHandler+0x10>)
 800415e:	f009 f897 	bl	800d290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004162:	bf00      	nop
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	24000d48 	.word	0x24000d48

0800416c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8004170:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004174:	f004 febf 	bl	8008ef6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8004178:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800417c:	f004 febb 	bl	8008ef6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 8004180:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004184:	f004 feb7 	bl	8008ef6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8004188:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800418c:	f004 feb3 	bl	8008ef6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004190:	bf00      	nop
 8004192:	bd80      	pop	{r7, pc}

08004194 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8004198:	4802      	ldr	r0, [pc, #8]	; (80041a4 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800419a:	f007 fd7b 	bl	800bc94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800419e:	bf00      	nop
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	24000b30 	.word	0x24000b30

080041a8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80041ac:	4802      	ldr	r0, [pc, #8]	; (80041b8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80041ae:	f007 fd71 	bl	800bc94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80041b2:	bf00      	nop
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	240009b4 	.word	0x240009b4

080041bc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80041c0:	4802      	ldr	r0, [pc, #8]	; (80041cc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80041c2:	f007 fd67 	bl	800bc94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80041c6:	bf00      	nop
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	24000ae4 	.word	0x24000ae4

080041d0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80041d4:	4802      	ldr	r0, [pc, #8]	; (80041e0 <TIM5_IRQHandler+0x10>)
 80041d6:	f007 fd5d 	bl	800bc94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80041da:	bf00      	nop
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	2400091c 	.word	0x2400091c

080041e4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80041e8:	4802      	ldr	r0, [pc, #8]	; (80041f4 <UART4_IRQHandler+0x10>)
 80041ea:	f009 f851 	bl	800d290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80041ee:	bf00      	nop
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	24000ec8 	.word	0x24000ec8

080041f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80041fc:	4802      	ldr	r0, [pc, #8]	; (8004208 <TIM6_DAC_IRQHandler+0x10>)
 80041fe:	f007 fd49 	bl	800bc94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004202:	bf00      	nop
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	24000a00 	.word	0x24000a00

0800420c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004210:	4802      	ldr	r0, [pc, #8]	; (800421c <TIM7_IRQHandler+0x10>)
 8004212:	f007 fd3f 	bl	800bc94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004216:	bf00      	nop
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	24000b7c 	.word	0x24000b7c

08004220 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8004224:	4802      	ldr	r0, [pc, #8]	; (8004230 <UART7_IRQHandler+0x10>)
 8004226:	f009 f833 	bl	800d290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800422a:	bf00      	nop
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	24000c40 	.word	0x24000c40

08004234 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
	return 1;
 8004238:	2301      	movs	r3, #1
}
 800423a:	4618      	mov	r0, r3
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <_kill>:

int _kill(int pid, int sig)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800424e:	f00b fe3f 	bl	800fed0 <__errno>
 8004252:	4603      	mov	r3, r0
 8004254:	2216      	movs	r2, #22
 8004256:	601a      	str	r2, [r3, #0]
	return -1;
 8004258:	f04f 33ff 	mov.w	r3, #4294967295
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <_exit>:

void _exit (int status)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800426c:	f04f 31ff 	mov.w	r1, #4294967295
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ffe7 	bl	8004244 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004276:	e7fe      	b.n	8004276 <_exit+0x12>

08004278 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	e00a      	b.n	80042a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800428a:	f3af 8000 	nop.w
 800428e:	4601      	mov	r1, r0
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	60ba      	str	r2, [r7, #8]
 8004296:	b2ca      	uxtb	r2, r1
 8004298:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	3301      	adds	r3, #1
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	dbf0      	blt.n	800428a <_read+0x12>
	}

return len;
 80042a8:	687b      	ldr	r3, [r7, #4]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b086      	sub	sp, #24
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	e009      	b.n	80042d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	60ba      	str	r2, [r7, #8]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	3301      	adds	r3, #1
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	429a      	cmp	r2, r3
 80042de:	dbf1      	blt.n	80042c4 <_write+0x12>
	}
	return len;
 80042e0:	687b      	ldr	r3, [r7, #4]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <_close>:

int _close(int file)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
	return -1;
 80042f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004312:	605a      	str	r2, [r3, #4]
	return 0;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <_isatty>:

int _isatty(int file)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
	return 1;
 800432a:	2301      	movs	r3, #1
}
 800432c:	4618      	mov	r0, r3
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
	return 0;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
	...

08004354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800435c:	4a14      	ldr	r2, [pc, #80]	; (80043b0 <_sbrk+0x5c>)
 800435e:	4b15      	ldr	r3, [pc, #84]	; (80043b4 <_sbrk+0x60>)
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004368:	4b13      	ldr	r3, [pc, #76]	; (80043b8 <_sbrk+0x64>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004370:	4b11      	ldr	r3, [pc, #68]	; (80043b8 <_sbrk+0x64>)
 8004372:	4a12      	ldr	r2, [pc, #72]	; (80043bc <_sbrk+0x68>)
 8004374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004376:	4b10      	ldr	r3, [pc, #64]	; (80043b8 <_sbrk+0x64>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4413      	add	r3, r2
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	429a      	cmp	r2, r3
 8004382:	d207      	bcs.n	8004394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004384:	f00b fda4 	bl	800fed0 <__errno>
 8004388:	4603      	mov	r3, r0
 800438a:	220c      	movs	r2, #12
 800438c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800438e:	f04f 33ff 	mov.w	r3, #4294967295
 8004392:	e009      	b.n	80043a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004394:	4b08      	ldr	r3, [pc, #32]	; (80043b8 <_sbrk+0x64>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800439a:	4b07      	ldr	r3, [pc, #28]	; (80043b8 <_sbrk+0x64>)
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4413      	add	r3, r2
 80043a2:	4a05      	ldr	r2, [pc, #20]	; (80043b8 <_sbrk+0x64>)
 80043a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043a6:	68fb      	ldr	r3, [r7, #12]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	240015e8 	.word	0x240015e8
 80043b4:	00000400 	.word	0x00000400
 80043b8:	240007cc 	.word	0x240007cc
 80043bc:	24000fe8 	.word	0x24000fe8

080043c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043c4:	4b39      	ldr	r3, [pc, #228]	; (80044ac <SystemInit+0xec>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	4a38      	ldr	r2, [pc, #224]	; (80044ac <SystemInit+0xec>)
 80043cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80043d4:	4b36      	ldr	r3, [pc, #216]	; (80044b0 <SystemInit+0xf0>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 030f 	and.w	r3, r3, #15
 80043dc:	2b06      	cmp	r3, #6
 80043de:	d807      	bhi.n	80043f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80043e0:	4b33      	ldr	r3, [pc, #204]	; (80044b0 <SystemInit+0xf0>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f023 030f 	bic.w	r3, r3, #15
 80043e8:	4a31      	ldr	r2, [pc, #196]	; (80044b0 <SystemInit+0xf0>)
 80043ea:	f043 0307 	orr.w	r3, r3, #7
 80043ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80043f0:	4b30      	ldr	r3, [pc, #192]	; (80044b4 <SystemInit+0xf4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a2f      	ldr	r2, [pc, #188]	; (80044b4 <SystemInit+0xf4>)
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80043fc:	4b2d      	ldr	r3, [pc, #180]	; (80044b4 <SystemInit+0xf4>)
 80043fe:	2200      	movs	r2, #0
 8004400:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004402:	4b2c      	ldr	r3, [pc, #176]	; (80044b4 <SystemInit+0xf4>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	492b      	ldr	r1, [pc, #172]	; (80044b4 <SystemInit+0xf4>)
 8004408:	4b2b      	ldr	r3, [pc, #172]	; (80044b8 <SystemInit+0xf8>)
 800440a:	4013      	ands	r3, r2
 800440c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800440e:	4b28      	ldr	r3, [pc, #160]	; (80044b0 <SystemInit+0xf0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d007      	beq.n	800442a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800441a:	4b25      	ldr	r3, [pc, #148]	; (80044b0 <SystemInit+0xf0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f023 030f 	bic.w	r3, r3, #15
 8004422:	4a23      	ldr	r2, [pc, #140]	; (80044b0 <SystemInit+0xf0>)
 8004424:	f043 0307 	orr.w	r3, r3, #7
 8004428:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800442a:	4b22      	ldr	r3, [pc, #136]	; (80044b4 <SystemInit+0xf4>)
 800442c:	2200      	movs	r2, #0
 800442e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004430:	4b20      	ldr	r3, [pc, #128]	; (80044b4 <SystemInit+0xf4>)
 8004432:	2200      	movs	r2, #0
 8004434:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004436:	4b1f      	ldr	r3, [pc, #124]	; (80044b4 <SystemInit+0xf4>)
 8004438:	2200      	movs	r2, #0
 800443a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800443c:	4b1d      	ldr	r3, [pc, #116]	; (80044b4 <SystemInit+0xf4>)
 800443e:	4a1f      	ldr	r2, [pc, #124]	; (80044bc <SystemInit+0xfc>)
 8004440:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004442:	4b1c      	ldr	r3, [pc, #112]	; (80044b4 <SystemInit+0xf4>)
 8004444:	4a1e      	ldr	r2, [pc, #120]	; (80044c0 <SystemInit+0x100>)
 8004446:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004448:	4b1a      	ldr	r3, [pc, #104]	; (80044b4 <SystemInit+0xf4>)
 800444a:	4a1e      	ldr	r2, [pc, #120]	; (80044c4 <SystemInit+0x104>)
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800444e:	4b19      	ldr	r3, [pc, #100]	; (80044b4 <SystemInit+0xf4>)
 8004450:	2200      	movs	r2, #0
 8004452:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004454:	4b17      	ldr	r3, [pc, #92]	; (80044b4 <SystemInit+0xf4>)
 8004456:	4a1b      	ldr	r2, [pc, #108]	; (80044c4 <SystemInit+0x104>)
 8004458:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800445a:	4b16      	ldr	r3, [pc, #88]	; (80044b4 <SystemInit+0xf4>)
 800445c:	2200      	movs	r2, #0
 800445e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004460:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <SystemInit+0xf4>)
 8004462:	4a18      	ldr	r2, [pc, #96]	; (80044c4 <SystemInit+0x104>)
 8004464:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004466:	4b13      	ldr	r3, [pc, #76]	; (80044b4 <SystemInit+0xf4>)
 8004468:	2200      	movs	r2, #0
 800446a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800446c:	4b11      	ldr	r3, [pc, #68]	; (80044b4 <SystemInit+0xf4>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a10      	ldr	r2, [pc, #64]	; (80044b4 <SystemInit+0xf4>)
 8004472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004476:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004478:	4b0e      	ldr	r3, [pc, #56]	; (80044b4 <SystemInit+0xf4>)
 800447a:	2200      	movs	r2, #0
 800447c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800447e:	4b12      	ldr	r3, [pc, #72]	; (80044c8 <SystemInit+0x108>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	4b12      	ldr	r3, [pc, #72]	; (80044cc <SystemInit+0x10c>)
 8004484:	4013      	ands	r3, r2
 8004486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800448a:	d202      	bcs.n	8004492 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800448c:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <SystemInit+0x110>)
 800448e:	2201      	movs	r2, #1
 8004490:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004492:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <SystemInit+0x114>)
 8004494:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004498:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800449a:	4b04      	ldr	r3, [pc, #16]	; (80044ac <SystemInit+0xec>)
 800449c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044a0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80044a2:	bf00      	nop
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	e000ed00 	.word	0xe000ed00
 80044b0:	52002000 	.word	0x52002000
 80044b4:	58024400 	.word	0x58024400
 80044b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80044bc:	02020200 	.word	0x02020200
 80044c0:	01ff0000 	.word	0x01ff0000
 80044c4:	01010280 	.word	0x01010280
 80044c8:	5c001000 	.word	0x5c001000
 80044cc:	ffff0000 	.word	0xffff0000
 80044d0:	51008108 	.word	0x51008108
 80044d4:	52004000 	.word	0x52004000

080044d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b09a      	sub	sp, #104	; 0x68
 80044dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	605a      	str	r2, [r3, #4]
 80044e8:	609a      	str	r2, [r3, #8]
 80044ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	605a      	str	r2, [r3, #4]
 80044f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	605a      	str	r2, [r3, #4]
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	60da      	str	r2, [r3, #12]
 8004506:	611a      	str	r2, [r3, #16]
 8004508:	615a      	str	r2, [r3, #20]
 800450a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800450c:	1d3b      	adds	r3, r7, #4
 800450e:	222c      	movs	r2, #44	; 0x2c
 8004510:	2100      	movs	r1, #0
 8004512:	4618      	mov	r0, r3
 8004514:	f00b fd14 	bl	800ff40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004518:	4b44      	ldr	r3, [pc, #272]	; (800462c <MX_TIM1_Init+0x154>)
 800451a:	4a45      	ldr	r2, [pc, #276]	; (8004630 <MX_TIM1_Init+0x158>)
 800451c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 800451e:	4b43      	ldr	r3, [pc, #268]	; (800462c <MX_TIM1_Init+0x154>)
 8004520:	22c7      	movs	r2, #199	; 0xc7
 8004522:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004524:	4b41      	ldr	r3, [pc, #260]	; (800462c <MX_TIM1_Init+0x154>)
 8004526:	2200      	movs	r2, #0
 8004528:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 800452a:	4b40      	ldr	r3, [pc, #256]	; (800462c <MX_TIM1_Init+0x154>)
 800452c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8004530:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004532:	4b3e      	ldr	r3, [pc, #248]	; (800462c <MX_TIM1_Init+0x154>)
 8004534:	2200      	movs	r2, #0
 8004536:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004538:	4b3c      	ldr	r3, [pc, #240]	; (800462c <MX_TIM1_Init+0x154>)
 800453a:	2200      	movs	r2, #0
 800453c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800453e:	4b3b      	ldr	r3, [pc, #236]	; (800462c <MX_TIM1_Init+0x154>)
 8004540:	2280      	movs	r2, #128	; 0x80
 8004542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004544:	4839      	ldr	r0, [pc, #228]	; (800462c <MX_TIM1_Init+0x154>)
 8004546:	f007 f966 	bl	800b816 <HAL_TIM_Base_Init>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004550:	f7ff fb38 	bl	8003bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004558:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800455a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800455e:	4619      	mov	r1, r3
 8004560:	4832      	ldr	r0, [pc, #200]	; (800462c <MX_TIM1_Init+0x154>)
 8004562:	f007 fdcb 	bl	800c0fc <HAL_TIM_ConfigClockSource>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800456c:	f7ff fb2a 	bl	8003bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004570:	482e      	ldr	r0, [pc, #184]	; (800462c <MX_TIM1_Init+0x154>)
 8004572:	f007 fa1f 	bl	800b9b4 <HAL_TIM_PWM_Init>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800457c:	f7ff fb22 	bl	8003bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004580:	2300      	movs	r3, #0
 8004582:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004584:	2300      	movs	r3, #0
 8004586:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004588:	2300      	movs	r3, #0
 800458a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800458c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004590:	4619      	mov	r1, r3
 8004592:	4826      	ldr	r0, [pc, #152]	; (800462c <MX_TIM1_Init+0x154>)
 8004594:	f008 fb06 	bl	800cba4 <HAL_TIMEx_MasterConfigSynchronization>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800459e:	f7ff fb11 	bl	8003bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80045a2:	2360      	movs	r3, #96	; 0x60
 80045a4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 80045a6:	f240 1339 	movw	r3, #313	; 0x139
 80045aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80045ac:	2300      	movs	r3, #0
 80045ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80045b0:	2300      	movs	r3, #0
 80045b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80045b4:	2300      	movs	r3, #0
 80045b6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80045b8:	2300      	movs	r3, #0
 80045ba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80045bc:	2300      	movs	r3, #0
 80045be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80045c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045c4:	2204      	movs	r2, #4
 80045c6:	4619      	mov	r1, r3
 80045c8:	4818      	ldr	r0, [pc, #96]	; (800462c <MX_TIM1_Init+0x154>)
 80045ca:	f007 fc83 	bl	800bed4 <HAL_TIM_PWM_ConfigChannel>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80045d4:	f7ff faf6 	bl	8003bc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80045d8:	2300      	movs	r3, #0
 80045da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80045dc:	2300      	movs	r3, #0
 80045de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80045e0:	2300      	movs	r3, #0
 80045e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80045e4:	2300      	movs	r3, #0
 80045e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80045ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80045f6:	2300      	movs	r3, #0
 80045f8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80045fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004600:	2300      	movs	r3, #0
 8004602:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004604:	2300      	movs	r3, #0
 8004606:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004608:	1d3b      	adds	r3, r7, #4
 800460a:	4619      	mov	r1, r3
 800460c:	4807      	ldr	r0, [pc, #28]	; (800462c <MX_TIM1_Init+0x154>)
 800460e:	f008 fb57 	bl	800ccc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8004618:	f7ff fad4 	bl	8003bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800461c:	4803      	ldr	r0, [pc, #12]	; (800462c <MX_TIM1_Init+0x154>)
 800461e:	f000 fc85 	bl	8004f2c <HAL_TIM_MspPostInit>

}
 8004622:	bf00      	nop
 8004624:	3768      	adds	r7, #104	; 0x68
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	24000a4c 	.word	0x24000a4c
 8004630:	40010000 	.word	0x40010000

08004634 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08e      	sub	sp, #56	; 0x38
 8004638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800463a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	605a      	str	r2, [r3, #4]
 8004644:	609a      	str	r2, [r3, #8]
 8004646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004648:	f107 031c 	add.w	r3, r7, #28
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	605a      	str	r2, [r3, #4]
 8004652:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004654:	463b      	mov	r3, r7
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	605a      	str	r2, [r3, #4]
 800465c:	609a      	str	r2, [r3, #8]
 800465e:	60da      	str	r2, [r3, #12]
 8004660:	611a      	str	r2, [r3, #16]
 8004662:	615a      	str	r2, [r3, #20]
 8004664:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004666:	4b2e      	ldr	r3, [pc, #184]	; (8004720 <MX_TIM2_Init+0xec>)
 8004668:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800466c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 800466e:	4b2c      	ldr	r3, [pc, #176]	; (8004720 <MX_TIM2_Init+0xec>)
 8004670:	22c7      	movs	r2, #199	; 0xc7
 8004672:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004674:	4b2a      	ldr	r3, [pc, #168]	; (8004720 <MX_TIM2_Init+0xec>)
 8004676:	2200      	movs	r2, #0
 8004678:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 800467a:	4b29      	ldr	r3, [pc, #164]	; (8004720 <MX_TIM2_Init+0xec>)
 800467c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8004680:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004682:	4b27      	ldr	r3, [pc, #156]	; (8004720 <MX_TIM2_Init+0xec>)
 8004684:	2200      	movs	r2, #0
 8004686:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004688:	4b25      	ldr	r3, [pc, #148]	; (8004720 <MX_TIM2_Init+0xec>)
 800468a:	2280      	movs	r2, #128	; 0x80
 800468c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800468e:	4824      	ldr	r0, [pc, #144]	; (8004720 <MX_TIM2_Init+0xec>)
 8004690:	f007 f8c1 	bl	800b816 <HAL_TIM_Base_Init>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800469a:	f7ff fa93 	bl	8003bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800469e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80046a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046a8:	4619      	mov	r1, r3
 80046aa:	481d      	ldr	r0, [pc, #116]	; (8004720 <MX_TIM2_Init+0xec>)
 80046ac:	f007 fd26 	bl	800c0fc <HAL_TIM_ConfigClockSource>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80046b6:	f7ff fa85 	bl	8003bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80046ba:	4819      	ldr	r0, [pc, #100]	; (8004720 <MX_TIM2_Init+0xec>)
 80046bc:	f007 f97a 	bl	800b9b4 <HAL_TIM_PWM_Init>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80046c6:	f7ff fa7d 	bl	8003bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046ca:	2300      	movs	r3, #0
 80046cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046ce:	2300      	movs	r3, #0
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80046d2:	f107 031c 	add.w	r3, r7, #28
 80046d6:	4619      	mov	r1, r3
 80046d8:	4811      	ldr	r0, [pc, #68]	; (8004720 <MX_TIM2_Init+0xec>)
 80046da:	f008 fa63 	bl	800cba4 <HAL_TIMEx_MasterConfigSynchronization>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80046e4:	f7ff fa6e 	bl	8003bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046e8:	2360      	movs	r3, #96	; 0x60
 80046ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80046ec:	f240 1339 	movw	r3, #313	; 0x139
 80046f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046f6:	2300      	movs	r3, #0
 80046f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80046fa:	463b      	mov	r3, r7
 80046fc:	2208      	movs	r2, #8
 80046fe:	4619      	mov	r1, r3
 8004700:	4807      	ldr	r0, [pc, #28]	; (8004720 <MX_TIM2_Init+0xec>)
 8004702:	f007 fbe7 	bl	800bed4 <HAL_TIM_PWM_ConfigChannel>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800470c:	f7ff fa5a 	bl	8003bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004710:	4803      	ldr	r0, [pc, #12]	; (8004720 <MX_TIM2_Init+0xec>)
 8004712:	f000 fc0b 	bl	8004f2c <HAL_TIM_MspPostInit>

}
 8004716:	bf00      	nop
 8004718:	3738      	adds	r7, #56	; 0x38
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	24000a98 	.word	0x24000a98

08004724 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08e      	sub	sp, #56	; 0x38
 8004728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800472a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	605a      	str	r2, [r3, #4]
 8004734:	609a      	str	r2, [r3, #8]
 8004736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004738:	f107 031c 	add.w	r3, r7, #28
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	605a      	str	r2, [r3, #4]
 8004742:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004744:	463b      	mov	r3, r7
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	605a      	str	r2, [r3, #4]
 800474c:	609a      	str	r2, [r3, #8]
 800474e:	60da      	str	r2, [r3, #12]
 8004750:	611a      	str	r2, [r3, #16]
 8004752:	615a      	str	r2, [r3, #20]
 8004754:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004756:	4b2d      	ldr	r3, [pc, #180]	; (800480c <MX_TIM3_Init+0xe8>)
 8004758:	4a2d      	ldr	r2, [pc, #180]	; (8004810 <MX_TIM3_Init+0xec>)
 800475a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 800475c:	4b2b      	ldr	r3, [pc, #172]	; (800480c <MX_TIM3_Init+0xe8>)
 800475e:	22c7      	movs	r2, #199	; 0xc7
 8004760:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004762:	4b2a      	ldr	r3, [pc, #168]	; (800480c <MX_TIM3_Init+0xe8>)
 8004764:	2200      	movs	r2, #0
 8004766:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 8004768:	4b28      	ldr	r3, [pc, #160]	; (800480c <MX_TIM3_Init+0xe8>)
 800476a:	f640 125f 	movw	r2, #2399	; 0x95f
 800476e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004770:	4b26      	ldr	r3, [pc, #152]	; (800480c <MX_TIM3_Init+0xe8>)
 8004772:	2200      	movs	r2, #0
 8004774:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004776:	4b25      	ldr	r3, [pc, #148]	; (800480c <MX_TIM3_Init+0xe8>)
 8004778:	2280      	movs	r2, #128	; 0x80
 800477a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800477c:	4823      	ldr	r0, [pc, #140]	; (800480c <MX_TIM3_Init+0xe8>)
 800477e:	f007 f84a 	bl	800b816 <HAL_TIM_Base_Init>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004788:	f7ff fa1c 	bl	8003bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800478c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004790:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004792:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004796:	4619      	mov	r1, r3
 8004798:	481c      	ldr	r0, [pc, #112]	; (800480c <MX_TIM3_Init+0xe8>)
 800479a:	f007 fcaf 	bl	800c0fc <HAL_TIM_ConfigClockSource>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80047a4:	f7ff fa0e 	bl	8003bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80047a8:	4818      	ldr	r0, [pc, #96]	; (800480c <MX_TIM3_Init+0xe8>)
 80047aa:	f007 f903 	bl	800b9b4 <HAL_TIM_PWM_Init>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80047b4:	f7ff fa06 	bl	8003bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047b8:	2300      	movs	r3, #0
 80047ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047bc:	2300      	movs	r3, #0
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80047c0:	f107 031c 	add.w	r3, r7, #28
 80047c4:	4619      	mov	r1, r3
 80047c6:	4811      	ldr	r0, [pc, #68]	; (800480c <MX_TIM3_Init+0xe8>)
 80047c8:	f008 f9ec 	bl	800cba4 <HAL_TIMEx_MasterConfigSynchronization>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80047d2:	f7ff f9f7 	bl	8003bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047d6:	2360      	movs	r3, #96	; 0x60
 80047d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80047da:	2300      	movs	r3, #0
 80047dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047de:	2300      	movs	r3, #0
 80047e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047e2:	2300      	movs	r3, #0
 80047e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047e6:	463b      	mov	r3, r7
 80047e8:	2200      	movs	r2, #0
 80047ea:	4619      	mov	r1, r3
 80047ec:	4807      	ldr	r0, [pc, #28]	; (800480c <MX_TIM3_Init+0xe8>)
 80047ee:	f007 fb71 	bl	800bed4 <HAL_TIM_PWM_ConfigChannel>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80047f8:	f7ff f9e4 	bl	8003bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80047fc:	4803      	ldr	r0, [pc, #12]	; (800480c <MX_TIM3_Init+0xe8>)
 80047fe:	f000 fb95 	bl	8004f2c <HAL_TIM_MspPostInit>

}
 8004802:	bf00      	nop
 8004804:	3738      	adds	r7, #56	; 0x38
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	24000968 	.word	0x24000968
 8004810:	40000400 	.word	0x40000400

08004814 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b08e      	sub	sp, #56	; 0x38
 8004818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800481a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	605a      	str	r2, [r3, #4]
 8004824:	609a      	str	r2, [r3, #8]
 8004826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004828:	f107 031c 	add.w	r3, r7, #28
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	605a      	str	r2, [r3, #4]
 8004832:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004834:	463b      	mov	r3, r7
 8004836:	2200      	movs	r2, #0
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	605a      	str	r2, [r3, #4]
 800483c:	609a      	str	r2, [r3, #8]
 800483e:	60da      	str	r2, [r3, #12]
 8004840:	611a      	str	r2, [r3, #16]
 8004842:	615a      	str	r2, [r3, #20]
 8004844:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004846:	4b2d      	ldr	r3, [pc, #180]	; (80048fc <MX_TIM4_Init+0xe8>)
 8004848:	4a2d      	ldr	r2, [pc, #180]	; (8004900 <MX_TIM4_Init+0xec>)
 800484a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 800484c:	4b2b      	ldr	r3, [pc, #172]	; (80048fc <MX_TIM4_Init+0xe8>)
 800484e:	22ef      	movs	r2, #239	; 0xef
 8004850:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004852:	4b2a      	ldr	r3, [pc, #168]	; (80048fc <MX_TIM4_Init+0xe8>)
 8004854:	2200      	movs	r2, #0
 8004856:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8004858:	4b28      	ldr	r3, [pc, #160]	; (80048fc <MX_TIM4_Init+0xe8>)
 800485a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800485e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004860:	4b26      	ldr	r3, [pc, #152]	; (80048fc <MX_TIM4_Init+0xe8>)
 8004862:	2200      	movs	r2, #0
 8004864:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004866:	4b25      	ldr	r3, [pc, #148]	; (80048fc <MX_TIM4_Init+0xe8>)
 8004868:	2280      	movs	r2, #128	; 0x80
 800486a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800486c:	4823      	ldr	r0, [pc, #140]	; (80048fc <MX_TIM4_Init+0xe8>)
 800486e:	f006 ffd2 	bl	800b816 <HAL_TIM_Base_Init>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8004878:	f7ff f9a4 	bl	8003bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800487c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004880:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004882:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004886:	4619      	mov	r1, r3
 8004888:	481c      	ldr	r0, [pc, #112]	; (80048fc <MX_TIM4_Init+0xe8>)
 800488a:	f007 fc37 	bl	800c0fc <HAL_TIM_ConfigClockSource>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8004894:	f7ff f996 	bl	8003bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004898:	4818      	ldr	r0, [pc, #96]	; (80048fc <MX_TIM4_Init+0xe8>)
 800489a:	f007 f88b 	bl	800b9b4 <HAL_TIM_PWM_Init>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80048a4:	f7ff f98e 	bl	8003bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048a8:	2300      	movs	r3, #0
 80048aa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048ac:	2300      	movs	r3, #0
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80048b0:	f107 031c 	add.w	r3, r7, #28
 80048b4:	4619      	mov	r1, r3
 80048b6:	4811      	ldr	r0, [pc, #68]	; (80048fc <MX_TIM4_Init+0xe8>)
 80048b8:	f008 f974 	bl	800cba4 <HAL_TIMEx_MasterConfigSynchronization>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80048c2:	f7ff f97f 	bl	8003bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048c6:	2360      	movs	r3, #96	; 0x60
 80048c8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80048ca:	2300      	movs	r3, #0
 80048cc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80048d2:	2300      	movs	r3, #0
 80048d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80048d6:	463b      	mov	r3, r7
 80048d8:	2208      	movs	r2, #8
 80048da:	4619      	mov	r1, r3
 80048dc:	4807      	ldr	r0, [pc, #28]	; (80048fc <MX_TIM4_Init+0xe8>)
 80048de:	f007 faf9 	bl	800bed4 <HAL_TIM_PWM_ConfigChannel>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80048e8:	f7ff f96c 	bl	8003bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80048ec:	4803      	ldr	r0, [pc, #12]	; (80048fc <MX_TIM4_Init+0xe8>)
 80048ee:	f000 fb1d 	bl	8004f2c <HAL_TIM_MspPostInit>

}
 80048f2:	bf00      	nop
 80048f4:	3738      	adds	r7, #56	; 0x38
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	24000884 	.word	0x24000884
 8004900:	40000800 	.word	0x40000800

08004904 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800490a:	f107 0310 	add.w	r3, r7, #16
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	605a      	str	r2, [r3, #4]
 8004914:	609a      	str	r2, [r3, #8]
 8004916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004918:	1d3b      	adds	r3, r7, #4
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	605a      	str	r2, [r3, #4]
 8004920:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004922:	4b1d      	ldr	r3, [pc, #116]	; (8004998 <MX_TIM5_Init+0x94>)
 8004924:	4a1d      	ldr	r2, [pc, #116]	; (800499c <MX_TIM5_Init+0x98>)
 8004926:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 8004928:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <MX_TIM5_Init+0x94>)
 800492a:	22c7      	movs	r2, #199	; 0xc7
 800492c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800492e:	4b1a      	ldr	r3, [pc, #104]	; (8004998 <MX_TIM5_Init+0x94>)
 8004930:	2200      	movs	r2, #0
 8004932:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8004934:	4b18      	ldr	r3, [pc, #96]	; (8004998 <MX_TIM5_Init+0x94>)
 8004936:	f642 62df 	movw	r2, #11999	; 0x2edf
 800493a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800493c:	4b16      	ldr	r3, [pc, #88]	; (8004998 <MX_TIM5_Init+0x94>)
 800493e:	2200      	movs	r2, #0
 8004940:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004942:	4b15      	ldr	r3, [pc, #84]	; (8004998 <MX_TIM5_Init+0x94>)
 8004944:	2280      	movs	r2, #128	; 0x80
 8004946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004948:	4813      	ldr	r0, [pc, #76]	; (8004998 <MX_TIM5_Init+0x94>)
 800494a:	f006 ff64 	bl	800b816 <HAL_TIM_Base_Init>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004954:	f7ff f936 	bl	8003bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800495c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800495e:	f107 0310 	add.w	r3, r7, #16
 8004962:	4619      	mov	r1, r3
 8004964:	480c      	ldr	r0, [pc, #48]	; (8004998 <MX_TIM5_Init+0x94>)
 8004966:	f007 fbc9 	bl	800c0fc <HAL_TIM_ConfigClockSource>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004970:	f7ff f928 	bl	8003bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004974:	2300      	movs	r3, #0
 8004976:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004978:	2300      	movs	r3, #0
 800497a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800497c:	1d3b      	adds	r3, r7, #4
 800497e:	4619      	mov	r1, r3
 8004980:	4805      	ldr	r0, [pc, #20]	; (8004998 <MX_TIM5_Init+0x94>)
 8004982:	f008 f90f 	bl	800cba4 <HAL_TIMEx_MasterConfigSynchronization>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800498c:	f7ff f91a 	bl	8003bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004990:	bf00      	nop
 8004992:	3720      	adds	r7, #32
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	2400091c 	.word	0x2400091c
 800499c:	40000c00 	.word	0x40000c00

080049a0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049a6:	1d3b      	adds	r3, r7, #4
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	605a      	str	r2, [r3, #4]
 80049ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80049b0:	4b14      	ldr	r3, [pc, #80]	; (8004a04 <MX_TIM6_Init+0x64>)
 80049b2:	4a15      	ldr	r2, [pc, #84]	; (8004a08 <MX_TIM6_Init+0x68>)
 80049b4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 80049b6:	4b13      	ldr	r3, [pc, #76]	; (8004a04 <MX_TIM6_Init+0x64>)
 80049b8:	22c7      	movs	r2, #199	; 0xc7
 80049ba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049bc:	4b11      	ldr	r3, [pc, #68]	; (8004a04 <MX_TIM6_Init+0x64>)
 80049be:	2200      	movs	r2, #0
 80049c0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 80049c2:	4b10      	ldr	r3, [pc, #64]	; (8004a04 <MX_TIM6_Init+0x64>)
 80049c4:	f241 726f 	movw	r2, #5999	; 0x176f
 80049c8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049ca:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <MX_TIM6_Init+0x64>)
 80049cc:	2280      	movs	r2, #128	; 0x80
 80049ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80049d0:	480c      	ldr	r0, [pc, #48]	; (8004a04 <MX_TIM6_Init+0x64>)
 80049d2:	f006 ff20 	bl	800b816 <HAL_TIM_Base_Init>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80049dc:	f7ff f8f2 	bl	8003bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049e0:	2300      	movs	r3, #0
 80049e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80049e8:	1d3b      	adds	r3, r7, #4
 80049ea:	4619      	mov	r1, r3
 80049ec:	4805      	ldr	r0, [pc, #20]	; (8004a04 <MX_TIM6_Init+0x64>)
 80049ee:	f008 f8d9 	bl	800cba4 <HAL_TIMEx_MasterConfigSynchronization>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80049f8:	f7ff f8e4 	bl	8003bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80049fc:	bf00      	nop
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	24000a00 	.word	0x24000a00
 8004a08:	40001000 	.word	0x40001000

08004a0c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a12:	1d3b      	adds	r3, r7, #4
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	605a      	str	r2, [r3, #4]
 8004a1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004a1c:	4b14      	ldr	r3, [pc, #80]	; (8004a70 <MX_TIM7_Init+0x64>)
 8004a1e:	4a15      	ldr	r2, [pc, #84]	; (8004a74 <MX_TIM7_Init+0x68>)
 8004a20:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8004a22:	4b13      	ldr	r3, [pc, #76]	; (8004a70 <MX_TIM7_Init+0x64>)
 8004a24:	22c7      	movs	r2, #199	; 0xc7
 8004a26:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a28:	4b11      	ldr	r3, [pc, #68]	; (8004a70 <MX_TIM7_Init+0x64>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8004a2e:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <MX_TIM7_Init+0x64>)
 8004a30:	f240 42af 	movw	r2, #1199	; 0x4af
 8004a34:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a36:	4b0e      	ldr	r3, [pc, #56]	; (8004a70 <MX_TIM7_Init+0x64>)
 8004a38:	2280      	movs	r2, #128	; 0x80
 8004a3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004a3c:	480c      	ldr	r0, [pc, #48]	; (8004a70 <MX_TIM7_Init+0x64>)
 8004a3e:	f006 feea 	bl	800b816 <HAL_TIM_Base_Init>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004a48:	f7ff f8bc 	bl	8003bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004a54:	1d3b      	adds	r3, r7, #4
 8004a56:	4619      	mov	r1, r3
 8004a58:	4805      	ldr	r0, [pc, #20]	; (8004a70 <MX_TIM7_Init+0x64>)
 8004a5a:	f008 f8a3 	bl	800cba4 <HAL_TIMEx_MasterConfigSynchronization>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004a64:	f7ff f8ae 	bl	8003bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004a68:	bf00      	nop
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	24000b7c 	.word	0x24000b7c
 8004a74:	40001400 	.word	0x40001400

08004a78 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a7e:	463b      	mov	r3, r7
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	605a      	str	r2, [r3, #4]
 8004a86:	609a      	str	r2, [r3, #8]
 8004a88:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004a8a:	4b16      	ldr	r3, [pc, #88]	; (8004ae4 <MX_TIM12_Init+0x6c>)
 8004a8c:	4a16      	ldr	r2, [pc, #88]	; (8004ae8 <MX_TIM12_Init+0x70>)
 8004a8e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8004a90:	4b14      	ldr	r3, [pc, #80]	; (8004ae4 <MX_TIM12_Init+0x6c>)
 8004a92:	22c7      	movs	r2, #199	; 0xc7
 8004a94:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a96:	4b13      	ldr	r3, [pc, #76]	; (8004ae4 <MX_TIM12_Init+0x6c>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8004a9c:	4b11      	ldr	r3, [pc, #68]	; (8004ae4 <MX_TIM12_Init+0x6c>)
 8004a9e:	f240 2257 	movw	r2, #599	; 0x257
 8004aa2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004aa4:	4b0f      	ldr	r3, [pc, #60]	; (8004ae4 <MX_TIM12_Init+0x6c>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004aaa:	4b0e      	ldr	r3, [pc, #56]	; (8004ae4 <MX_TIM12_Init+0x6c>)
 8004aac:	2280      	movs	r2, #128	; 0x80
 8004aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8004ab0:	480c      	ldr	r0, [pc, #48]	; (8004ae4 <MX_TIM12_Init+0x6c>)
 8004ab2:	f006 feb0 	bl	800b816 <HAL_TIM_Base_Init>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8004abc:	f7ff f882 	bl	8003bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ac4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004ac6:	463b      	mov	r3, r7
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4806      	ldr	r0, [pc, #24]	; (8004ae4 <MX_TIM12_Init+0x6c>)
 8004acc:	f007 fb16 	bl	800c0fc <HAL_TIM_ConfigClockSource>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8004ad6:	f7ff f875 	bl	8003bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8004ada:	bf00      	nop
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	24000b30 	.word	0x24000b30
 8004ae8:	40001800 	.word	0x40001800

08004aec <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004af0:	4b0e      	ldr	r3, [pc, #56]	; (8004b2c <MX_TIM13_Init+0x40>)
 8004af2:	4a0f      	ldr	r2, [pc, #60]	; (8004b30 <MX_TIM13_Init+0x44>)
 8004af4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 8004af6:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <MX_TIM13_Init+0x40>)
 8004af8:	22c7      	movs	r2, #199	; 0xc7
 8004afa:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004afc:	4b0b      	ldr	r3, [pc, #44]	; (8004b2c <MX_TIM13_Init+0x40>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8004b02:	4b0a      	ldr	r3, [pc, #40]	; (8004b2c <MX_TIM13_Init+0x40>)
 8004b04:	f240 2257 	movw	r2, #599	; 0x257
 8004b08:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b0a:	4b08      	ldr	r3, [pc, #32]	; (8004b2c <MX_TIM13_Init+0x40>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b10:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <MX_TIM13_Init+0x40>)
 8004b12:	2280      	movs	r2, #128	; 0x80
 8004b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004b16:	4805      	ldr	r0, [pc, #20]	; (8004b2c <MX_TIM13_Init+0x40>)
 8004b18:	f006 fe7d 	bl	800b816 <HAL_TIM_Base_Init>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8004b22:	f7ff f84f 	bl	8003bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004b26:	bf00      	nop
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	240009b4 	.word	0x240009b4
 8004b30:	40001c00 	.word	0x40001c00

08004b34 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004b38:	4b0e      	ldr	r3, [pc, #56]	; (8004b74 <MX_TIM14_Init+0x40>)
 8004b3a:	4a0f      	ldr	r2, [pc, #60]	; (8004b78 <MX_TIM14_Init+0x44>)
 8004b3c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8004b3e:	4b0d      	ldr	r3, [pc, #52]	; (8004b74 <MX_TIM14_Init+0x40>)
 8004b40:	22c7      	movs	r2, #199	; 0xc7
 8004b42:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b44:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <MX_TIM14_Init+0x40>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 8004b4a:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <MX_TIM14_Init+0x40>)
 8004b4c:	f640 125f 	movw	r2, #2399	; 0x95f
 8004b50:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b52:	4b08      	ldr	r3, [pc, #32]	; (8004b74 <MX_TIM14_Init+0x40>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b58:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <MX_TIM14_Init+0x40>)
 8004b5a:	2280      	movs	r2, #128	; 0x80
 8004b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004b5e:	4805      	ldr	r0, [pc, #20]	; (8004b74 <MX_TIM14_Init+0x40>)
 8004b60:	f006 fe59 	bl	800b816 <HAL_TIM_Base_Init>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8004b6a:	f7ff f82b 	bl	8003bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004b6e:	bf00      	nop
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	24000ae4 	.word	0x24000ae4
 8004b78:	40002000 	.word	0x40002000

08004b7c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b09a      	sub	sp, #104	; 0x68
 8004b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	605a      	str	r2, [r3, #4]
 8004b8c:	609a      	str	r2, [r3, #8]
 8004b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	605a      	str	r2, [r3, #4]
 8004b9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	605a      	str	r2, [r3, #4]
 8004ba6:	609a      	str	r2, [r3, #8]
 8004ba8:	60da      	str	r2, [r3, #12]
 8004baa:	611a      	str	r2, [r3, #16]
 8004bac:	615a      	str	r2, [r3, #20]
 8004bae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004bb0:	1d3b      	adds	r3, r7, #4
 8004bb2:	222c      	movs	r2, #44	; 0x2c
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f00b f9c2 	bl	800ff40 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004bbc:	4b3f      	ldr	r3, [pc, #252]	; (8004cbc <MX_TIM15_Init+0x140>)
 8004bbe:	4a40      	ldr	r2, [pc, #256]	; (8004cc0 <MX_TIM15_Init+0x144>)
 8004bc0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8004bc2:	4b3e      	ldr	r3, [pc, #248]	; (8004cbc <MX_TIM15_Init+0x140>)
 8004bc4:	22ef      	movs	r2, #239	; 0xef
 8004bc6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bc8:	4b3c      	ldr	r3, [pc, #240]	; (8004cbc <MX_TIM15_Init+0x140>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8004bce:	4b3b      	ldr	r3, [pc, #236]	; (8004cbc <MX_TIM15_Init+0x140>)
 8004bd0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004bd4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bd6:	4b39      	ldr	r3, [pc, #228]	; (8004cbc <MX_TIM15_Init+0x140>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004bdc:	4b37      	ldr	r3, [pc, #220]	; (8004cbc <MX_TIM15_Init+0x140>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004be2:	4b36      	ldr	r3, [pc, #216]	; (8004cbc <MX_TIM15_Init+0x140>)
 8004be4:	2280      	movs	r2, #128	; 0x80
 8004be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004be8:	4834      	ldr	r0, [pc, #208]	; (8004cbc <MX_TIM15_Init+0x140>)
 8004bea:	f006 fe14 	bl	800b816 <HAL_TIM_Base_Init>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8004bf4:	f7fe ffe6 	bl	8003bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bfc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004bfe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004c02:	4619      	mov	r1, r3
 8004c04:	482d      	ldr	r0, [pc, #180]	; (8004cbc <MX_TIM15_Init+0x140>)
 8004c06:	f007 fa79 	bl	800c0fc <HAL_TIM_ConfigClockSource>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8004c10:	f7fe ffd8 	bl	8003bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8004c14:	4829      	ldr	r0, [pc, #164]	; (8004cbc <MX_TIM15_Init+0x140>)
 8004c16:	f006 fecd 	bl	800b9b4 <HAL_TIM_PWM_Init>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8004c20:	f7fe ffd0 	bl	8003bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c24:	2300      	movs	r3, #0
 8004c26:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004c2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004c30:	4619      	mov	r1, r3
 8004c32:	4822      	ldr	r0, [pc, #136]	; (8004cbc <MX_TIM15_Init+0x140>)
 8004c34:	f007 ffb6 	bl	800cba4 <HAL_TIMEx_MasterConfigSynchronization>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8004c3e:	f7fe ffc1 	bl	8003bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c42:	2360      	movs	r3, #96	; 0x60
 8004c44:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8004c46:	f240 1339 	movw	r3, #313	; 0x139
 8004c4a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004c50:	2300      	movs	r3, #0
 8004c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c54:	2300      	movs	r3, #0
 8004c56:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004c60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c64:	2204      	movs	r2, #4
 8004c66:	4619      	mov	r1, r3
 8004c68:	4814      	ldr	r0, [pc, #80]	; (8004cbc <MX_TIM15_Init+0x140>)
 8004c6a:	f007 f933 	bl	800bed4 <HAL_TIM_PWM_ConfigChannel>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8004c74:	f7fe ffa6 	bl	8003bc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004c84:	2300      	movs	r3, #0
 8004c86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004c92:	2300      	movs	r3, #0
 8004c94:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004c96:	2300      	movs	r3, #0
 8004c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004c9a:	1d3b      	adds	r3, r7, #4
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4807      	ldr	r0, [pc, #28]	; (8004cbc <MX_TIM15_Init+0x140>)
 8004ca0:	f008 f80e 	bl	800ccc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8004caa:	f7fe ff8b 	bl	8003bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8004cae:	4803      	ldr	r0, [pc, #12]	; (8004cbc <MX_TIM15_Init+0x140>)
 8004cb0:	f000 f93c 	bl	8004f2c <HAL_TIM_MspPostInit>

}
 8004cb4:	bf00      	nop
 8004cb6:	3768      	adds	r7, #104	; 0x68
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	240008d0 	.word	0x240008d0
 8004cc0:	40014000 	.word	0x40014000

08004cc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08e      	sub	sp, #56	; 0x38
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a8b      	ldr	r2, [pc, #556]	; (8004f00 <HAL_TIM_Base_MspInit+0x23c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d10f      	bne.n	8004cf6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004cd6:	4b8b      	ldr	r3, [pc, #556]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004cd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cdc:	4a89      	ldr	r2, [pc, #548]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004cde:	f043 0301 	orr.w	r3, r3, #1
 8004ce2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004ce6:	4b87      	ldr	r3, [pc, #540]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004ce8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8004cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8004cf4:	e100      	b.n	8004ef8 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM2)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfe:	d10f      	bne.n	8004d20 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d00:	4b80      	ldr	r3, [pc, #512]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004d02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d06:	4a7f      	ldr	r2, [pc, #508]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004d08:	f043 0301 	orr.w	r3, r3, #1
 8004d0c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004d10:	4b7c      	ldr	r3, [pc, #496]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004d12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004d1e:	e0eb      	b.n	8004ef8 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM3)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a78      	ldr	r2, [pc, #480]	; (8004f08 <HAL_TIM_Base_MspInit+0x244>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d10f      	bne.n	8004d4a <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d2a:	4b76      	ldr	r3, [pc, #472]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d30:	4a74      	ldr	r2, [pc, #464]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004d32:	f043 0302 	orr.w	r3, r3, #2
 8004d36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004d3a:	4b72      	ldr	r3, [pc, #456]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004d3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004d48:	e0d6      	b.n	8004ef8 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM4)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a6f      	ldr	r2, [pc, #444]	; (8004f0c <HAL_TIM_Base_MspInit+0x248>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d10f      	bne.n	8004d74 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004d54:	4b6b      	ldr	r3, [pc, #428]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004d56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d5a:	4a6a      	ldr	r2, [pc, #424]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004d5c:	f043 0304 	orr.w	r3, r3, #4
 8004d60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004d64:	4b67      	ldr	r3, [pc, #412]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004d66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004d72:	e0c1      	b.n	8004ef8 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM5)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a65      	ldr	r2, [pc, #404]	; (8004f10 <HAL_TIM_Base_MspInit+0x24c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d117      	bne.n	8004dae <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004d7e:	4b61      	ldr	r3, [pc, #388]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004d80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d84:	4a5f      	ldr	r2, [pc, #380]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004d86:	f043 0308 	orr.w	r3, r3, #8
 8004d8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004d8e:	4b5d      	ldr	r3, [pc, #372]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004d90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d94:	f003 0308 	and.w	r3, r3, #8
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2100      	movs	r1, #0
 8004da0:	2032      	movs	r0, #50	; 0x32
 8004da2:	f000 fe66 	bl	8005a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004da6:	2032      	movs	r0, #50	; 0x32
 8004da8:	f000 fe7d 	bl	8005aa6 <HAL_NVIC_EnableIRQ>
}
 8004dac:	e0a4      	b.n	8004ef8 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM6)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a58      	ldr	r2, [pc, #352]	; (8004f14 <HAL_TIM_Base_MspInit+0x250>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d117      	bne.n	8004de8 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004db8:	4b52      	ldr	r3, [pc, #328]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004dba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dbe:	4a51      	ldr	r2, [pc, #324]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004dc0:	f043 0310 	orr.w	r3, r3, #16
 8004dc4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004dc8:	4b4e      	ldr	r3, [pc, #312]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004dca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dce:	f003 0310 	and.w	r3, r3, #16
 8004dd2:	623b      	str	r3, [r7, #32]
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	2100      	movs	r1, #0
 8004dda:	2036      	movs	r0, #54	; 0x36
 8004ddc:	f000 fe49 	bl	8005a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004de0:	2036      	movs	r0, #54	; 0x36
 8004de2:	f000 fe60 	bl	8005aa6 <HAL_NVIC_EnableIRQ>
}
 8004de6:	e087      	b.n	8004ef8 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM7)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a4a      	ldr	r2, [pc, #296]	; (8004f18 <HAL_TIM_Base_MspInit+0x254>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d117      	bne.n	8004e22 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004df2:	4b44      	ldr	r3, [pc, #272]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004df4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004df8:	4a42      	ldr	r2, [pc, #264]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004dfa:	f043 0320 	orr.w	r3, r3, #32
 8004dfe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e02:	4b40      	ldr	r3, [pc, #256]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004e04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e08:	f003 0320 	and.w	r3, r3, #32
 8004e0c:	61fb      	str	r3, [r7, #28]
 8004e0e:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004e10:	2200      	movs	r2, #0
 8004e12:	2100      	movs	r1, #0
 8004e14:	2037      	movs	r0, #55	; 0x37
 8004e16:	f000 fe2c 	bl	8005a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004e1a:	2037      	movs	r0, #55	; 0x37
 8004e1c:	f000 fe43 	bl	8005aa6 <HAL_NVIC_EnableIRQ>
}
 8004e20:	e06a      	b.n	8004ef8 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM12)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a3d      	ldr	r2, [pc, #244]	; (8004f1c <HAL_TIM_Base_MspInit+0x258>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d117      	bne.n	8004e5c <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004e2c:	4b35      	ldr	r3, [pc, #212]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004e2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e32:	4a34      	ldr	r2, [pc, #208]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e3c:	4b31      	ldr	r3, [pc, #196]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004e3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e46:	61bb      	str	r3, [r7, #24]
 8004e48:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	202b      	movs	r0, #43	; 0x2b
 8004e50:	f000 fe0f 	bl	8005a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004e54:	202b      	movs	r0, #43	; 0x2b
 8004e56:	f000 fe26 	bl	8005aa6 <HAL_NVIC_EnableIRQ>
}
 8004e5a:	e04d      	b.n	8004ef8 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM13)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a2f      	ldr	r2, [pc, #188]	; (8004f20 <HAL_TIM_Base_MspInit+0x25c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d117      	bne.n	8004e96 <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004e66:	4b27      	ldr	r3, [pc, #156]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004e68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e6c:	4a25      	ldr	r2, [pc, #148]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e76:	4b23      	ldr	r3, [pc, #140]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004e78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004e84:	2200      	movs	r2, #0
 8004e86:	2100      	movs	r1, #0
 8004e88:	202c      	movs	r0, #44	; 0x2c
 8004e8a:	f000 fdf2 	bl	8005a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004e8e:	202c      	movs	r0, #44	; 0x2c
 8004e90:	f000 fe09 	bl	8005aa6 <HAL_NVIC_EnableIRQ>
}
 8004e94:	e030      	b.n	8004ef8 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM14)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a22      	ldr	r2, [pc, #136]	; (8004f24 <HAL_TIM_Base_MspInit+0x260>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d117      	bne.n	8004ed0 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004ea0:	4b18      	ldr	r3, [pc, #96]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004ea2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ea6:	4a17      	ldr	r2, [pc, #92]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004eb0:	4b14      	ldr	r3, [pc, #80]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004eb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eba:	613b      	str	r3, [r7, #16]
 8004ebc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	202d      	movs	r0, #45	; 0x2d
 8004ec4:	f000 fdd5 	bl	8005a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004ec8:	202d      	movs	r0, #45	; 0x2d
 8004eca:	f000 fdec 	bl	8005aa6 <HAL_NVIC_EnableIRQ>
}
 8004ece:	e013      	b.n	8004ef8 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM15)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a14      	ldr	r2, [pc, #80]	; (8004f28 <HAL_TIM_Base_MspInit+0x264>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d10e      	bne.n	8004ef8 <HAL_TIM_Base_MspInit+0x234>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004eda:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004edc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ee0:	4a08      	ldr	r2, [pc, #32]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004eea:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <HAL_TIM_Base_MspInit+0x240>)
 8004eec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
}
 8004ef8:	bf00      	nop
 8004efa:	3738      	adds	r7, #56	; 0x38
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40010000 	.word	0x40010000
 8004f04:	58024400 	.word	0x58024400
 8004f08:	40000400 	.word	0x40000400
 8004f0c:	40000800 	.word	0x40000800
 8004f10:	40000c00 	.word	0x40000c00
 8004f14:	40001000 	.word	0x40001000
 8004f18:	40001400 	.word	0x40001400
 8004f1c:	40001800 	.word	0x40001800
 8004f20:	40001c00 	.word	0x40001c00
 8004f24:	40002000 	.word	0x40002000
 8004f28:	40014000 	.word	0x40014000

08004f2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08c      	sub	sp, #48	; 0x30
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f34:	f107 031c 	add.w	r3, r7, #28
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	605a      	str	r2, [r3, #4]
 8004f3e:	609a      	str	r2, [r3, #8]
 8004f40:	60da      	str	r2, [r3, #12]
 8004f42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a5e      	ldr	r2, [pc, #376]	; (80050c4 <HAL_TIM_MspPostInit+0x198>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d120      	bne.n	8004f90 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f4e:	4b5e      	ldr	r3, [pc, #376]	; (80050c8 <HAL_TIM_MspPostInit+0x19c>)
 8004f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f54:	4a5c      	ldr	r2, [pc, #368]	; (80050c8 <HAL_TIM_MspPostInit+0x19c>)
 8004f56:	f043 0310 	orr.w	r3, r3, #16
 8004f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f5e:	4b5a      	ldr	r3, [pc, #360]	; (80050c8 <HAL_TIM_MspPostInit+0x19c>)
 8004f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f64:	f003 0310 	and.w	r3, r3, #16
 8004f68:	61bb      	str	r3, [r7, #24]
 8004f6a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8004f6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f72:	2302      	movs	r3, #2
 8004f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8004f82:	f107 031c 	add.w	r3, r7, #28
 8004f86:	4619      	mov	r1, r3
 8004f88:	4850      	ldr	r0, [pc, #320]	; (80050cc <HAL_TIM_MspPostInit+0x1a0>)
 8004f8a:	f003 fdeb 	bl	8008b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004f8e:	e094      	b.n	80050ba <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f98:	d120      	bne.n	8004fdc <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f9a:	4b4b      	ldr	r3, [pc, #300]	; (80050c8 <HAL_TIM_MspPostInit+0x19c>)
 8004f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fa0:	4a49      	ldr	r2, [pc, #292]	; (80050c8 <HAL_TIM_MspPostInit+0x19c>)
 8004fa2:	f043 0302 	orr.w	r3, r3, #2
 8004fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004faa:	4b47      	ldr	r3, [pc, #284]	; (80050c8 <HAL_TIM_MspPostInit+0x19c>)
 8004fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8004fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8004fce:	f107 031c 	add.w	r3, r7, #28
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	483e      	ldr	r0, [pc, #248]	; (80050d0 <HAL_TIM_MspPostInit+0x1a4>)
 8004fd6:	f003 fdc5 	bl	8008b64 <HAL_GPIO_Init>
}
 8004fda:	e06e      	b.n	80050ba <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a3c      	ldr	r2, [pc, #240]	; (80050d4 <HAL_TIM_MspPostInit+0x1a8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d11f      	bne.n	8005026 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fe6:	4b38      	ldr	r3, [pc, #224]	; (80050c8 <HAL_TIM_MspPostInit+0x19c>)
 8004fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fec:	4a36      	ldr	r2, [pc, #216]	; (80050c8 <HAL_TIM_MspPostInit+0x19c>)
 8004fee:	f043 0301 	orr.w	r3, r3, #1
 8004ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ff6:	4b34      	ldr	r3, [pc, #208]	; (80050c8 <HAL_TIM_MspPostInit+0x19c>)
 8004ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8005004:	2340      	movs	r3, #64	; 0x40
 8005006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005008:	2302      	movs	r3, #2
 800500a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500c:	2300      	movs	r3, #0
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005010:	2300      	movs	r3, #0
 8005012:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005014:	2302      	movs	r3, #2
 8005016:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8005018:	f107 031c 	add.w	r3, r7, #28
 800501c:	4619      	mov	r1, r3
 800501e:	482e      	ldr	r0, [pc, #184]	; (80050d8 <HAL_TIM_MspPostInit+0x1ac>)
 8005020:	f003 fda0 	bl	8008b64 <HAL_GPIO_Init>
}
 8005024:	e049      	b.n	80050ba <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a2c      	ldr	r2, [pc, #176]	; (80050dc <HAL_TIM_MspPostInit+0x1b0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d120      	bne.n	8005072 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005030:	4b25      	ldr	r3, [pc, #148]	; (80050c8 <HAL_TIM_MspPostInit+0x19c>)
 8005032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005036:	4a24      	ldr	r2, [pc, #144]	; (80050c8 <HAL_TIM_MspPostInit+0x19c>)
 8005038:	f043 0302 	orr.w	r3, r3, #2
 800503c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005040:	4b21      	ldr	r3, [pc, #132]	; (80050c8 <HAL_TIM_MspPostInit+0x19c>)
 8005042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 800504e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005054:	2302      	movs	r3, #2
 8005056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005058:	2300      	movs	r3, #0
 800505a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800505c:	2300      	movs	r3, #0
 800505e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005060:	2302      	movs	r3, #2
 8005062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8005064:	f107 031c 	add.w	r3, r7, #28
 8005068:	4619      	mov	r1, r3
 800506a:	4819      	ldr	r0, [pc, #100]	; (80050d0 <HAL_TIM_MspPostInit+0x1a4>)
 800506c:	f003 fd7a 	bl	8008b64 <HAL_GPIO_Init>
}
 8005070:	e023      	b.n	80050ba <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a1a      	ldr	r2, [pc, #104]	; (80050e0 <HAL_TIM_MspPostInit+0x1b4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d11e      	bne.n	80050ba <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800507c:	4b12      	ldr	r3, [pc, #72]	; (80050c8 <HAL_TIM_MspPostInit+0x19c>)
 800507e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005082:	4a11      	ldr	r2, [pc, #68]	; (80050c8 <HAL_TIM_MspPostInit+0x19c>)
 8005084:	f043 0310 	orr.w	r3, r3, #16
 8005088:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800508c:	4b0e      	ldr	r3, [pc, #56]	; (80050c8 <HAL_TIM_MspPostInit+0x19c>)
 800508e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005092:	f003 0310 	and.w	r3, r3, #16
 8005096:	60bb      	str	r3, [r7, #8]
 8005098:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 800509a:	2340      	movs	r3, #64	; 0x40
 800509c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800509e:	2302      	movs	r3, #2
 80050a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a2:	2300      	movs	r3, #0
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050a6:	2300      	movs	r3, #0
 80050a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80050aa:	2304      	movs	r3, #4
 80050ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 80050ae:	f107 031c 	add.w	r3, r7, #28
 80050b2:	4619      	mov	r1, r3
 80050b4:	4805      	ldr	r0, [pc, #20]	; (80050cc <HAL_TIM_MspPostInit+0x1a0>)
 80050b6:	f003 fd55 	bl	8008b64 <HAL_GPIO_Init>
}
 80050ba:	bf00      	nop
 80050bc:	3730      	adds	r7, #48	; 0x30
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	40010000 	.word	0x40010000
 80050c8:	58024400 	.word	0x58024400
 80050cc:	58021000 	.word	0x58021000
 80050d0:	58020400 	.word	0x58020400
 80050d4:	40000400 	.word	0x40000400
 80050d8:	58020000 	.word	0x58020000
 80050dc:	40000800 	.word	0x40000800
 80050e0:	40014000 	.word	0x40014000

080050e4 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80050e8:	4b25      	ldr	r3, [pc, #148]	; (8005180 <MX_UART4_Init+0x9c>)
 80050ea:	4a26      	ldr	r2, [pc, #152]	; (8005184 <MX_UART4_Init+0xa0>)
 80050ec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 80050ee:	4b24      	ldr	r3, [pc, #144]	; (8005180 <MX_UART4_Init+0x9c>)
 80050f0:	4a25      	ldr	r2, [pc, #148]	; (8005188 <MX_UART4_Init+0xa4>)
 80050f2:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80050f4:	4b22      	ldr	r3, [pc, #136]	; (8005180 <MX_UART4_Init+0x9c>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80050fa:	4b21      	ldr	r3, [pc, #132]	; (8005180 <MX_UART4_Init+0x9c>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005100:	4b1f      	ldr	r3, [pc, #124]	; (8005180 <MX_UART4_Init+0x9c>)
 8005102:	2200      	movs	r2, #0
 8005104:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005106:	4b1e      	ldr	r3, [pc, #120]	; (8005180 <MX_UART4_Init+0x9c>)
 8005108:	220c      	movs	r2, #12
 800510a:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800510c:	4b1c      	ldr	r3, [pc, #112]	; (8005180 <MX_UART4_Init+0x9c>)
 800510e:	2200      	movs	r2, #0
 8005110:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005112:	4b1b      	ldr	r3, [pc, #108]	; (8005180 <MX_UART4_Init+0x9c>)
 8005114:	2200      	movs	r2, #0
 8005116:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005118:	4b19      	ldr	r3, [pc, #100]	; (8005180 <MX_UART4_Init+0x9c>)
 800511a:	2200      	movs	r2, #0
 800511c:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800511e:	4b18      	ldr	r3, [pc, #96]	; (8005180 <MX_UART4_Init+0x9c>)
 8005120:	2200      	movs	r2, #0
 8005122:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005124:	4b16      	ldr	r3, [pc, #88]	; (8005180 <MX_UART4_Init+0x9c>)
 8005126:	2208      	movs	r2, #8
 8005128:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800512a:	4b15      	ldr	r3, [pc, #84]	; (8005180 <MX_UART4_Init+0x9c>)
 800512c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005130:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005132:	4813      	ldr	r0, [pc, #76]	; (8005180 <MX_UART4_Init+0x9c>)
 8005134:	f007 fe60 	bl	800cdf8 <HAL_UART_Init>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 800513e:	f7fe fd41 	bl	8003bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005142:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005146:	480e      	ldr	r0, [pc, #56]	; (8005180 <MX_UART4_Init+0x9c>)
 8005148:	f009 fee7 	bl	800ef1a <HAL_UARTEx_SetTxFifoThreshold>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8005152:	f7fe fd37 	bl	8003bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005156:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800515a:	4809      	ldr	r0, [pc, #36]	; (8005180 <MX_UART4_Init+0x9c>)
 800515c:	f009 ff1b 	bl	800ef96 <HAL_UARTEx_SetRxFifoThreshold>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <MX_UART4_Init+0x86>
  {
    Error_Handler();
 8005166:	f7fe fd2d 	bl	8003bc4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 800516a:	4805      	ldr	r0, [pc, #20]	; (8005180 <MX_UART4_Init+0x9c>)
 800516c:	f009 fe61 	bl	800ee32 <HAL_UARTEx_EnableFifoMode>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <MX_UART4_Init+0x96>
  {
    Error_Handler();
 8005176:	f7fe fd25 	bl	8003bc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800517a:	bf00      	nop
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	24000ec8 	.word	0x24000ec8
 8005184:	40004c00 	.word	0x40004c00
 8005188:	001e8480 	.word	0x001e8480

0800518c <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8005190:	4b23      	ldr	r3, [pc, #140]	; (8005220 <MX_UART7_Init+0x94>)
 8005192:	4a24      	ldr	r2, [pc, #144]	; (8005224 <MX_UART7_Init+0x98>)
 8005194:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8005196:	4b22      	ldr	r3, [pc, #136]	; (8005220 <MX_UART7_Init+0x94>)
 8005198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800519c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800519e:	4b20      	ldr	r3, [pc, #128]	; (8005220 <MX_UART7_Init+0x94>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80051a4:	4b1e      	ldr	r3, [pc, #120]	; (8005220 <MX_UART7_Init+0x94>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80051aa:	4b1d      	ldr	r3, [pc, #116]	; (8005220 <MX_UART7_Init+0x94>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80051b0:	4b1b      	ldr	r3, [pc, #108]	; (8005220 <MX_UART7_Init+0x94>)
 80051b2:	220c      	movs	r2, #12
 80051b4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051b6:	4b1a      	ldr	r3, [pc, #104]	; (8005220 <MX_UART7_Init+0x94>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80051bc:	4b18      	ldr	r3, [pc, #96]	; (8005220 <MX_UART7_Init+0x94>)
 80051be:	2200      	movs	r2, #0
 80051c0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80051c2:	4b17      	ldr	r3, [pc, #92]	; (8005220 <MX_UART7_Init+0x94>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80051c8:	4b15      	ldr	r3, [pc, #84]	; (8005220 <MX_UART7_Init+0x94>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80051ce:	4b14      	ldr	r3, [pc, #80]	; (8005220 <MX_UART7_Init+0x94>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80051d4:	4812      	ldr	r0, [pc, #72]	; (8005220 <MX_UART7_Init+0x94>)
 80051d6:	f007 fe0f 	bl	800cdf8 <HAL_UART_Init>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80051e0:	f7fe fcf0 	bl	8003bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 80051e4:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80051e8:	480d      	ldr	r0, [pc, #52]	; (8005220 <MX_UART7_Init+0x94>)
 80051ea:	f009 fe96 	bl	800ef1a <HAL_UARTEx_SetTxFifoThreshold>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 80051f4:	f7fe fce6 	bl	8003bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80051f8:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 80051fc:	4808      	ldr	r0, [pc, #32]	; (8005220 <MX_UART7_Init+0x94>)
 80051fe:	f009 feca 	bl	800ef96 <HAL_UARTEx_SetRxFifoThreshold>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <MX_UART7_Init+0x80>
  {
    Error_Handler();
 8005208:	f7fe fcdc 	bl	8003bc4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 800520c:	4804      	ldr	r0, [pc, #16]	; (8005220 <MX_UART7_Init+0x94>)
 800520e:	f009 fe10 	bl	800ee32 <HAL_UARTEx_EnableFifoMode>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <MX_UART7_Init+0x90>
  {
    Error_Handler();
 8005218:	f7fe fcd4 	bl	8003bc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800521c:	bf00      	nop
 800521e:	bd80      	pop	{r7, pc}
 8005220:	24000c40 	.word	0x24000c40
 8005224:	40007800 	.word	0x40007800

08005228 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800522c:	4b22      	ldr	r3, [pc, #136]	; (80052b8 <MX_USART3_UART_Init+0x90>)
 800522e:	4a23      	ldr	r2, [pc, #140]	; (80052bc <MX_USART3_UART_Init+0x94>)
 8005230:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005232:	4b21      	ldr	r3, [pc, #132]	; (80052b8 <MX_USART3_UART_Init+0x90>)
 8005234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005238:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800523a:	4b1f      	ldr	r3, [pc, #124]	; (80052b8 <MX_USART3_UART_Init+0x90>)
 800523c:	2200      	movs	r2, #0
 800523e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005240:	4b1d      	ldr	r3, [pc, #116]	; (80052b8 <MX_USART3_UART_Init+0x90>)
 8005242:	2200      	movs	r2, #0
 8005244:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005246:	4b1c      	ldr	r3, [pc, #112]	; (80052b8 <MX_USART3_UART_Init+0x90>)
 8005248:	2200      	movs	r2, #0
 800524a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800524c:	4b1a      	ldr	r3, [pc, #104]	; (80052b8 <MX_USART3_UART_Init+0x90>)
 800524e:	220c      	movs	r2, #12
 8005250:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005252:	4b19      	ldr	r3, [pc, #100]	; (80052b8 <MX_USART3_UART_Init+0x90>)
 8005254:	2200      	movs	r2, #0
 8005256:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005258:	4b17      	ldr	r3, [pc, #92]	; (80052b8 <MX_USART3_UART_Init+0x90>)
 800525a:	2200      	movs	r2, #0
 800525c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800525e:	4b16      	ldr	r3, [pc, #88]	; (80052b8 <MX_USART3_UART_Init+0x90>)
 8005260:	2200      	movs	r2, #0
 8005262:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005264:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <MX_USART3_UART_Init+0x90>)
 8005266:	2200      	movs	r2, #0
 8005268:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800526a:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <MX_USART3_UART_Init+0x90>)
 800526c:	2200      	movs	r2, #0
 800526e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005270:	4811      	ldr	r0, [pc, #68]	; (80052b8 <MX_USART3_UART_Init+0x90>)
 8005272:	f007 fdc1 	bl	800cdf8 <HAL_UART_Init>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800527c:	f7fe fca2 	bl	8003bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005280:	2100      	movs	r1, #0
 8005282:	480d      	ldr	r0, [pc, #52]	; (80052b8 <MX_USART3_UART_Init+0x90>)
 8005284:	f009 fe49 	bl	800ef1a <HAL_UARTEx_SetTxFifoThreshold>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800528e:	f7fe fc99 	bl	8003bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005292:	2100      	movs	r1, #0
 8005294:	4808      	ldr	r0, [pc, #32]	; (80052b8 <MX_USART3_UART_Init+0x90>)
 8005296:	f009 fe7e 	bl	800ef96 <HAL_UARTEx_SetRxFifoThreshold>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80052a0:	f7fe fc90 	bl	8003bc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80052a4:	4804      	ldr	r0, [pc, #16]	; (80052b8 <MX_USART3_UART_Init+0x90>)
 80052a6:	f009 fdff 	bl	800eea8 <HAL_UARTEx_DisableFifoMode>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80052b0:	f7fe fc88 	bl	8003bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80052b4:	bf00      	nop
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	24000d48 	.word	0x24000d48
 80052bc:	40004800 	.word	0x40004800

080052c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b0bc      	sub	sp, #240	; 0xf0
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	605a      	str	r2, [r3, #4]
 80052d2:	609a      	str	r2, [r3, #8]
 80052d4:	60da      	str	r2, [r3, #12]
 80052d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80052d8:	f107 0320 	add.w	r3, r7, #32
 80052dc:	22bc      	movs	r2, #188	; 0xbc
 80052de:	2100      	movs	r1, #0
 80052e0:	4618      	mov	r0, r3
 80052e2:	f00a fe2d 	bl	800ff40 <memset>
  if(uartHandle->Instance==UART4)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4aa1      	ldr	r2, [pc, #644]	; (8005570 <HAL_UART_MspInit+0x2b0>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	f040 80b7 	bne.w	8005460 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80052f2:	2302      	movs	r3, #2
 80052f4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80052f6:	2300      	movs	r3, #0
 80052f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80052fc:	f107 0320 	add.w	r3, r7, #32
 8005300:	4618      	mov	r0, r3
 8005302:	f004 fe05 	bl	8009f10 <HAL_RCCEx_PeriphCLKConfig>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800530c:	f7fe fc5a 	bl	8003bc4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005310:	4b98      	ldr	r3, [pc, #608]	; (8005574 <HAL_UART_MspInit+0x2b4>)
 8005312:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005316:	4a97      	ldr	r2, [pc, #604]	; (8005574 <HAL_UART_MspInit+0x2b4>)
 8005318:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800531c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005320:	4b94      	ldr	r3, [pc, #592]	; (8005574 <HAL_UART_MspInit+0x2b4>)
 8005322:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005326:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800532a:	61fb      	str	r3, [r7, #28]
 800532c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800532e:	4b91      	ldr	r3, [pc, #580]	; (8005574 <HAL_UART_MspInit+0x2b4>)
 8005330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005334:	4a8f      	ldr	r2, [pc, #572]	; (8005574 <HAL_UART_MspInit+0x2b4>)
 8005336:	f043 0308 	orr.w	r3, r3, #8
 800533a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800533e:	4b8d      	ldr	r3, [pc, #564]	; (8005574 <HAL_UART_MspInit+0x2b4>)
 8005340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800534c:	2303      	movs	r3, #3
 800534e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005352:	2302      	movs	r3, #2
 8005354:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005358:	2300      	movs	r3, #0
 800535a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800535e:	2300      	movs	r3, #0
 8005360:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005364:	2308      	movs	r3, #8
 8005366:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800536a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800536e:	4619      	mov	r1, r3
 8005370:	4881      	ldr	r0, [pc, #516]	; (8005578 <HAL_UART_MspInit+0x2b8>)
 8005372:	f003 fbf7 	bl	8008b64 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8005376:	4b81      	ldr	r3, [pc, #516]	; (800557c <HAL_UART_MspInit+0x2bc>)
 8005378:	4a81      	ldr	r2, [pc, #516]	; (8005580 <HAL_UART_MspInit+0x2c0>)
 800537a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800537c:	4b7f      	ldr	r3, [pc, #508]	; (800557c <HAL_UART_MspInit+0x2bc>)
 800537e:	223f      	movs	r2, #63	; 0x3f
 8005380:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005382:	4b7e      	ldr	r3, [pc, #504]	; (800557c <HAL_UART_MspInit+0x2bc>)
 8005384:	2200      	movs	r2, #0
 8005386:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005388:	4b7c      	ldr	r3, [pc, #496]	; (800557c <HAL_UART_MspInit+0x2bc>)
 800538a:	2200      	movs	r2, #0
 800538c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800538e:	4b7b      	ldr	r3, [pc, #492]	; (800557c <HAL_UART_MspInit+0x2bc>)
 8005390:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005394:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005396:	4b79      	ldr	r3, [pc, #484]	; (800557c <HAL_UART_MspInit+0x2bc>)
 8005398:	2200      	movs	r2, #0
 800539a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800539c:	4b77      	ldr	r3, [pc, #476]	; (800557c <HAL_UART_MspInit+0x2bc>)
 800539e:	2200      	movs	r2, #0
 80053a0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80053a2:	4b76      	ldr	r3, [pc, #472]	; (800557c <HAL_UART_MspInit+0x2bc>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80053a8:	4b74      	ldr	r3, [pc, #464]	; (800557c <HAL_UART_MspInit+0x2bc>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80053ae:	4b73      	ldr	r3, [pc, #460]	; (800557c <HAL_UART_MspInit+0x2bc>)
 80053b0:	2204      	movs	r2, #4
 80053b2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80053b4:	4b71      	ldr	r3, [pc, #452]	; (800557c <HAL_UART_MspInit+0x2bc>)
 80053b6:	2203      	movs	r2, #3
 80053b8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80053ba:	4b70      	ldr	r3, [pc, #448]	; (800557c <HAL_UART_MspInit+0x2bc>)
 80053bc:	2200      	movs	r2, #0
 80053be:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80053c0:	4b6e      	ldr	r3, [pc, #440]	; (800557c <HAL_UART_MspInit+0x2bc>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80053c6:	486d      	ldr	r0, [pc, #436]	; (800557c <HAL_UART_MspInit+0x2bc>)
 80053c8:	f000 fd92 	bl	8005ef0 <HAL_DMA_Init>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 80053d2:	f7fe fbf7 	bl	8003bc4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a68      	ldr	r2, [pc, #416]	; (800557c <HAL_UART_MspInit+0x2bc>)
 80053da:	67da      	str	r2, [r3, #124]	; 0x7c
 80053dc:	4a67      	ldr	r2, [pc, #412]	; (800557c <HAL_UART_MspInit+0x2bc>)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80053e2:	4b68      	ldr	r3, [pc, #416]	; (8005584 <HAL_UART_MspInit+0x2c4>)
 80053e4:	4a68      	ldr	r2, [pc, #416]	; (8005588 <HAL_UART_MspInit+0x2c8>)
 80053e6:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80053e8:	4b66      	ldr	r3, [pc, #408]	; (8005584 <HAL_UART_MspInit+0x2c4>)
 80053ea:	2240      	movs	r2, #64	; 0x40
 80053ec:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80053ee:	4b65      	ldr	r3, [pc, #404]	; (8005584 <HAL_UART_MspInit+0x2c4>)
 80053f0:	2240      	movs	r2, #64	; 0x40
 80053f2:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053f4:	4b63      	ldr	r3, [pc, #396]	; (8005584 <HAL_UART_MspInit+0x2c4>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80053fa:	4b62      	ldr	r3, [pc, #392]	; (8005584 <HAL_UART_MspInit+0x2c4>)
 80053fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005400:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005402:	4b60      	ldr	r3, [pc, #384]	; (8005584 <HAL_UART_MspInit+0x2c4>)
 8005404:	2200      	movs	r2, #0
 8005406:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005408:	4b5e      	ldr	r3, [pc, #376]	; (8005584 <HAL_UART_MspInit+0x2c4>)
 800540a:	2200      	movs	r2, #0
 800540c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800540e:	4b5d      	ldr	r3, [pc, #372]	; (8005584 <HAL_UART_MspInit+0x2c4>)
 8005410:	2200      	movs	r2, #0
 8005412:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005414:	4b5b      	ldr	r3, [pc, #364]	; (8005584 <HAL_UART_MspInit+0x2c4>)
 8005416:	2200      	movs	r2, #0
 8005418:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800541a:	4b5a      	ldr	r3, [pc, #360]	; (8005584 <HAL_UART_MspInit+0x2c4>)
 800541c:	2204      	movs	r2, #4
 800541e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005420:	4b58      	ldr	r3, [pc, #352]	; (8005584 <HAL_UART_MspInit+0x2c4>)
 8005422:	2203      	movs	r2, #3
 8005424:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005426:	4b57      	ldr	r3, [pc, #348]	; (8005584 <HAL_UART_MspInit+0x2c4>)
 8005428:	2200      	movs	r2, #0
 800542a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800542c:	4b55      	ldr	r3, [pc, #340]	; (8005584 <HAL_UART_MspInit+0x2c4>)
 800542e:	2200      	movs	r2, #0
 8005430:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8005432:	4854      	ldr	r0, [pc, #336]	; (8005584 <HAL_UART_MspInit+0x2c4>)
 8005434:	f000 fd5c 	bl	8005ef0 <HAL_DMA_Init>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 800543e:	f7fe fbc1 	bl	8003bc4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a4f      	ldr	r2, [pc, #316]	; (8005584 <HAL_UART_MspInit+0x2c4>)
 8005446:	679a      	str	r2, [r3, #120]	; 0x78
 8005448:	4a4e      	ldr	r2, [pc, #312]	; (8005584 <HAL_UART_MspInit+0x2c4>)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800544e:	2200      	movs	r2, #0
 8005450:	2100      	movs	r1, #0
 8005452:	2034      	movs	r0, #52	; 0x34
 8005454:	f000 fb0d 	bl	8005a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005458:	2034      	movs	r0, #52	; 0x34
 800545a:	f000 fb24 	bl	8005aa6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800545e:	e153      	b.n	8005708 <HAL_UART_MspInit+0x448>
  else if(uartHandle->Instance==UART7)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a49      	ldr	r2, [pc, #292]	; (800558c <HAL_UART_MspInit+0x2cc>)
 8005466:	4293      	cmp	r3, r2
 8005468:	f040 8098 	bne.w	800559c <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800546c:	2302      	movs	r3, #2
 800546e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005470:	2300      	movs	r3, #0
 8005472:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005476:	f107 0320 	add.w	r3, r7, #32
 800547a:	4618      	mov	r0, r3
 800547c:	f004 fd48 	bl	8009f10 <HAL_RCCEx_PeriphCLKConfig>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8005486:	f7fe fb9d 	bl	8003bc4 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800548a:	4b3a      	ldr	r3, [pc, #232]	; (8005574 <HAL_UART_MspInit+0x2b4>)
 800548c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005490:	4a38      	ldr	r2, [pc, #224]	; (8005574 <HAL_UART_MspInit+0x2b4>)
 8005492:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005496:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800549a:	4b36      	ldr	r3, [pc, #216]	; (8005574 <HAL_UART_MspInit+0x2b4>)
 800549c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80054a4:	617b      	str	r3, [r7, #20]
 80054a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80054a8:	4b32      	ldr	r3, [pc, #200]	; (8005574 <HAL_UART_MspInit+0x2b4>)
 80054aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054ae:	4a31      	ldr	r2, [pc, #196]	; (8005574 <HAL_UART_MspInit+0x2b4>)
 80054b0:	f043 0310 	orr.w	r3, r3, #16
 80054b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80054b8:	4b2e      	ldr	r3, [pc, #184]	; (8005574 <HAL_UART_MspInit+0x2b4>)
 80054ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054be:	f003 0310 	and.w	r3, r3, #16
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80054c6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80054ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ce:	2302      	movs	r3, #2
 80054d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d4:	2300      	movs	r3, #0
 80054d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054da:	2300      	movs	r3, #0
 80054dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80054e0:	2307      	movs	r3, #7
 80054e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80054e6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80054ea:	4619      	mov	r1, r3
 80054ec:	4828      	ldr	r0, [pc, #160]	; (8005590 <HAL_UART_MspInit+0x2d0>)
 80054ee:	f003 fb39 	bl	8008b64 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 80054f2:	4b28      	ldr	r3, [pc, #160]	; (8005594 <HAL_UART_MspInit+0x2d4>)
 80054f4:	4a28      	ldr	r2, [pc, #160]	; (8005598 <HAL_UART_MspInit+0x2d8>)
 80054f6:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 80054f8:	4b26      	ldr	r3, [pc, #152]	; (8005594 <HAL_UART_MspInit+0x2d4>)
 80054fa:	2250      	movs	r2, #80	; 0x50
 80054fc:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80054fe:	4b25      	ldr	r3, [pc, #148]	; (8005594 <HAL_UART_MspInit+0x2d4>)
 8005500:	2240      	movs	r2, #64	; 0x40
 8005502:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005504:	4b23      	ldr	r3, [pc, #140]	; (8005594 <HAL_UART_MspInit+0x2d4>)
 8005506:	2200      	movs	r2, #0
 8005508:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 800550a:	4b22      	ldr	r3, [pc, #136]	; (8005594 <HAL_UART_MspInit+0x2d4>)
 800550c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005510:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005512:	4b20      	ldr	r3, [pc, #128]	; (8005594 <HAL_UART_MspInit+0x2d4>)
 8005514:	2200      	movs	r2, #0
 8005516:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005518:	4b1e      	ldr	r3, [pc, #120]	; (8005594 <HAL_UART_MspInit+0x2d4>)
 800551a:	2200      	movs	r2, #0
 800551c:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 800551e:	4b1d      	ldr	r3, [pc, #116]	; (8005594 <HAL_UART_MspInit+0x2d4>)
 8005520:	2200      	movs	r2, #0
 8005522:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005524:	4b1b      	ldr	r3, [pc, #108]	; (8005594 <HAL_UART_MspInit+0x2d4>)
 8005526:	2200      	movs	r2, #0
 8005528:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800552a:	4b1a      	ldr	r3, [pc, #104]	; (8005594 <HAL_UART_MspInit+0x2d4>)
 800552c:	2204      	movs	r2, #4
 800552e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005530:	4b18      	ldr	r3, [pc, #96]	; (8005594 <HAL_UART_MspInit+0x2d4>)
 8005532:	2203      	movs	r2, #3
 8005534:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005536:	4b17      	ldr	r3, [pc, #92]	; (8005594 <HAL_UART_MspInit+0x2d4>)
 8005538:	2200      	movs	r2, #0
 800553a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800553c:	4b15      	ldr	r3, [pc, #84]	; (8005594 <HAL_UART_MspInit+0x2d4>)
 800553e:	2200      	movs	r2, #0
 8005540:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8005542:	4814      	ldr	r0, [pc, #80]	; (8005594 <HAL_UART_MspInit+0x2d4>)
 8005544:	f000 fcd4 	bl	8005ef0 <HAL_DMA_Init>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <HAL_UART_MspInit+0x292>
      Error_Handler();
 800554e:	f7fe fb39 	bl	8003bc4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a0f      	ldr	r2, [pc, #60]	; (8005594 <HAL_UART_MspInit+0x2d4>)
 8005556:	679a      	str	r2, [r3, #120]	; 0x78
 8005558:	4a0e      	ldr	r2, [pc, #56]	; (8005594 <HAL_UART_MspInit+0x2d4>)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800555e:	2200      	movs	r2, #0
 8005560:	2100      	movs	r1, #0
 8005562:	2052      	movs	r0, #82	; 0x52
 8005564:	f000 fa85 	bl	8005a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8005568:	2052      	movs	r0, #82	; 0x52
 800556a:	f000 fa9c 	bl	8005aa6 <HAL_NVIC_EnableIRQ>
}
 800556e:	e0cb      	b.n	8005708 <HAL_UART_MspInit+0x448>
 8005570:	40004c00 	.word	0x40004c00
 8005574:	58024400 	.word	0x58024400
 8005578:	58020c00 	.word	0x58020c00
 800557c:	24000bc8 	.word	0x24000bc8
 8005580:	40020058 	.word	0x40020058
 8005584:	24000f58 	.word	0x24000f58
 8005588:	40020070 	.word	0x40020070
 800558c:	40007800 	.word	0x40007800
 8005590:	58021000 	.word	0x58021000
 8005594:	24000e50 	.word	0x24000e50
 8005598:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a5b      	ldr	r2, [pc, #364]	; (8005710 <HAL_UART_MspInit+0x450>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	f040 80b0 	bne.w	8005708 <HAL_UART_MspInit+0x448>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80055a8:	2302      	movs	r3, #2
 80055aa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80055ac:	2300      	movs	r3, #0
 80055ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80055b2:	f107 0320 	add.w	r3, r7, #32
 80055b6:	4618      	mov	r0, r3
 80055b8:	f004 fcaa 	bl	8009f10 <HAL_RCCEx_PeriphCLKConfig>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <HAL_UART_MspInit+0x306>
      Error_Handler();
 80055c2:	f7fe faff 	bl	8003bc4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80055c6:	4b53      	ldr	r3, [pc, #332]	; (8005714 <HAL_UART_MspInit+0x454>)
 80055c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80055cc:	4a51      	ldr	r2, [pc, #324]	; (8005714 <HAL_UART_MspInit+0x454>)
 80055ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80055d6:	4b4f      	ldr	r3, [pc, #316]	; (8005714 <HAL_UART_MspInit+0x454>)
 80055d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80055dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80055e4:	4b4b      	ldr	r3, [pc, #300]	; (8005714 <HAL_UART_MspInit+0x454>)
 80055e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055ea:	4a4a      	ldr	r2, [pc, #296]	; (8005714 <HAL_UART_MspInit+0x454>)
 80055ec:	f043 0308 	orr.w	r3, r3, #8
 80055f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80055f4:	4b47      	ldr	r3, [pc, #284]	; (8005714 <HAL_UART_MspInit+0x454>)
 80055f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055fa:	f003 0308 	and.w	r3, r3, #8
 80055fe:	60bb      	str	r3, [r7, #8]
 8005600:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005602:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005606:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800560a:	2302      	movs	r3, #2
 800560c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005610:	2300      	movs	r3, #0
 8005612:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005616:	2300      	movs	r3, #0
 8005618:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800561c:	2307      	movs	r3, #7
 800561e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005622:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005626:	4619      	mov	r1, r3
 8005628:	483b      	ldr	r0, [pc, #236]	; (8005718 <HAL_UART_MspInit+0x458>)
 800562a:	f003 fa9b 	bl	8008b64 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800562e:	4b3b      	ldr	r3, [pc, #236]	; (800571c <HAL_UART_MspInit+0x45c>)
 8005630:	4a3b      	ldr	r2, [pc, #236]	; (8005720 <HAL_UART_MspInit+0x460>)
 8005632:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005634:	4b39      	ldr	r3, [pc, #228]	; (800571c <HAL_UART_MspInit+0x45c>)
 8005636:	222d      	movs	r2, #45	; 0x2d
 8005638:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800563a:	4b38      	ldr	r3, [pc, #224]	; (800571c <HAL_UART_MspInit+0x45c>)
 800563c:	2200      	movs	r2, #0
 800563e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005640:	4b36      	ldr	r3, [pc, #216]	; (800571c <HAL_UART_MspInit+0x45c>)
 8005642:	2200      	movs	r2, #0
 8005644:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005646:	4b35      	ldr	r3, [pc, #212]	; (800571c <HAL_UART_MspInit+0x45c>)
 8005648:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800564c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800564e:	4b33      	ldr	r3, [pc, #204]	; (800571c <HAL_UART_MspInit+0x45c>)
 8005650:	2200      	movs	r2, #0
 8005652:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005654:	4b31      	ldr	r3, [pc, #196]	; (800571c <HAL_UART_MspInit+0x45c>)
 8005656:	2200      	movs	r2, #0
 8005658:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800565a:	4b30      	ldr	r3, [pc, #192]	; (800571c <HAL_UART_MspInit+0x45c>)
 800565c:	2200      	movs	r2, #0
 800565e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005660:	4b2e      	ldr	r3, [pc, #184]	; (800571c <HAL_UART_MspInit+0x45c>)
 8005662:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005666:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005668:	4b2c      	ldr	r3, [pc, #176]	; (800571c <HAL_UART_MspInit+0x45c>)
 800566a:	2200      	movs	r2, #0
 800566c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800566e:	482b      	ldr	r0, [pc, #172]	; (800571c <HAL_UART_MspInit+0x45c>)
 8005670:	f000 fc3e 	bl	8005ef0 <HAL_DMA_Init>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <HAL_UART_MspInit+0x3be>
      Error_Handler();
 800567a:	f7fe faa3 	bl	8003bc4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a26      	ldr	r2, [pc, #152]	; (800571c <HAL_UART_MspInit+0x45c>)
 8005682:	67da      	str	r2, [r3, #124]	; 0x7c
 8005684:	4a25      	ldr	r2, [pc, #148]	; (800571c <HAL_UART_MspInit+0x45c>)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 800568a:	4b26      	ldr	r3, [pc, #152]	; (8005724 <HAL_UART_MspInit+0x464>)
 800568c:	4a26      	ldr	r2, [pc, #152]	; (8005728 <HAL_UART_MspInit+0x468>)
 800568e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8005690:	4b24      	ldr	r3, [pc, #144]	; (8005724 <HAL_UART_MspInit+0x464>)
 8005692:	222e      	movs	r2, #46	; 0x2e
 8005694:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005696:	4b23      	ldr	r3, [pc, #140]	; (8005724 <HAL_UART_MspInit+0x464>)
 8005698:	2240      	movs	r2, #64	; 0x40
 800569a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800569c:	4b21      	ldr	r3, [pc, #132]	; (8005724 <HAL_UART_MspInit+0x464>)
 800569e:	2200      	movs	r2, #0
 80056a0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056a2:	4b20      	ldr	r3, [pc, #128]	; (8005724 <HAL_UART_MspInit+0x464>)
 80056a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056a8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056aa:	4b1e      	ldr	r3, [pc, #120]	; (8005724 <HAL_UART_MspInit+0x464>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056b0:	4b1c      	ldr	r3, [pc, #112]	; (8005724 <HAL_UART_MspInit+0x464>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80056b6:	4b1b      	ldr	r3, [pc, #108]	; (8005724 <HAL_UART_MspInit+0x464>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80056bc:	4b19      	ldr	r3, [pc, #100]	; (8005724 <HAL_UART_MspInit+0x464>)
 80056be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80056c2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80056c4:	4b17      	ldr	r3, [pc, #92]	; (8005724 <HAL_UART_MspInit+0x464>)
 80056c6:	2204      	movs	r2, #4
 80056c8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80056ca:	4b16      	ldr	r3, [pc, #88]	; (8005724 <HAL_UART_MspInit+0x464>)
 80056cc:	2203      	movs	r2, #3
 80056ce:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80056d0:	4b14      	ldr	r3, [pc, #80]	; (8005724 <HAL_UART_MspInit+0x464>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80056d6:	4b13      	ldr	r3, [pc, #76]	; (8005724 <HAL_UART_MspInit+0x464>)
 80056d8:	2200      	movs	r2, #0
 80056da:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80056dc:	4811      	ldr	r0, [pc, #68]	; (8005724 <HAL_UART_MspInit+0x464>)
 80056de:	f000 fc07 	bl	8005ef0 <HAL_DMA_Init>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <HAL_UART_MspInit+0x42c>
      Error_Handler();
 80056e8:	f7fe fa6c 	bl	8003bc4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a0d      	ldr	r2, [pc, #52]	; (8005724 <HAL_UART_MspInit+0x464>)
 80056f0:	679a      	str	r2, [r3, #120]	; 0x78
 80056f2:	4a0c      	ldr	r2, [pc, #48]	; (8005724 <HAL_UART_MspInit+0x464>)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80056f8:	2200      	movs	r2, #0
 80056fa:	2100      	movs	r1, #0
 80056fc:	2027      	movs	r0, #39	; 0x27
 80056fe:	f000 f9b8 	bl	8005a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005702:	2027      	movs	r0, #39	; 0x27
 8005704:	f000 f9cf 	bl	8005aa6 <HAL_NVIC_EnableIRQ>
}
 8005708:	bf00      	nop
 800570a:	37f0      	adds	r7, #240	; 0xf0
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	40004800 	.word	0x40004800
 8005714:	58024400 	.word	0x58024400
 8005718:	58020c00 	.word	0x58020c00
 800571c:	24000cd0 	.word	0x24000cd0
 8005720:	40020028 	.word	0x40020028
 8005724:	24000dd8 	.word	0x24000dd8
 8005728:	40020040 	.word	0x40020040

0800572c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 800572c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005764 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005730:	f7fe fe46 	bl	80043c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005734:	480c      	ldr	r0, [pc, #48]	; (8005768 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005736:	490d      	ldr	r1, [pc, #52]	; (800576c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005738:	4a0d      	ldr	r2, [pc, #52]	; (8005770 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800573a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800573c:	e002      	b.n	8005744 <LoopCopyDataInit>

0800573e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800573e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005742:	3304      	adds	r3, #4

08005744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005748:	d3f9      	bcc.n	800573e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800574a:	4a0a      	ldr	r2, [pc, #40]	; (8005774 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800574c:	4c0a      	ldr	r4, [pc, #40]	; (8005778 <LoopFillZerobss+0x22>)
  movs r3, #0
 800574e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005750:	e001      	b.n	8005756 <LoopFillZerobss>

08005752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005754:	3204      	adds	r2, #4

08005756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005758:	d3fb      	bcc.n	8005752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800575a:	f00a fbbf 	bl	800fedc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800575e:	f7fd fffb 	bl	8003758 <main>
  bx  lr
 8005762:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8005764:	240015e8 	.word	0x240015e8
  ldr r0, =_sdata
 8005768:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800576c:	24000218 	.word	0x24000218
  ldr r2, =_sidata
 8005770:	08014664 	.word	0x08014664
  ldr r2, =_sbss
 8005774:	24000218 	.word	0x24000218
  ldr r4, =_ebss
 8005778:	24000fe4 	.word	0x24000fe4

0800577c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800577c:	e7fe      	b.n	800577c <ADC3_IRQHandler>
	...

08005780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005786:	2003      	movs	r0, #3
 8005788:	f000 f968 	bl	8005a5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800578c:	f004 f9ea 	bl	8009b64 <HAL_RCC_GetSysClockFreq>
 8005790:	4602      	mov	r2, r0
 8005792:	4b15      	ldr	r3, [pc, #84]	; (80057e8 <HAL_Init+0x68>)
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	0a1b      	lsrs	r3, r3, #8
 8005798:	f003 030f 	and.w	r3, r3, #15
 800579c:	4913      	ldr	r1, [pc, #76]	; (80057ec <HAL_Init+0x6c>)
 800579e:	5ccb      	ldrb	r3, [r1, r3]
 80057a0:	f003 031f 	and.w	r3, r3, #31
 80057a4:	fa22 f303 	lsr.w	r3, r2, r3
 80057a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057aa:	4b0f      	ldr	r3, [pc, #60]	; (80057e8 <HAL_Init+0x68>)
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	4a0e      	ldr	r2, [pc, #56]	; (80057ec <HAL_Init+0x6c>)
 80057b4:	5cd3      	ldrb	r3, [r2, r3]
 80057b6:	f003 031f 	and.w	r3, r3, #31
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	fa22 f303 	lsr.w	r3, r2, r3
 80057c0:	4a0b      	ldr	r2, [pc, #44]	; (80057f0 <HAL_Init+0x70>)
 80057c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057c4:	4a0b      	ldr	r2, [pc, #44]	; (80057f4 <HAL_Init+0x74>)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80057ca:	2000      	movs	r0, #0
 80057cc:	f000 f814 	bl	80057f8 <HAL_InitTick>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e002      	b.n	80057e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80057da:	f7fe fc3b 	bl	8004054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	58024400 	.word	0x58024400
 80057ec:	080127f8 	.word	0x080127f8
 80057f0:	2400003c 	.word	0x2400003c
 80057f4:	24000038 	.word	0x24000038

080057f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005800:	4b15      	ldr	r3, [pc, #84]	; (8005858 <HAL_InitTick+0x60>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e021      	b.n	8005850 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800580c:	4b13      	ldr	r3, [pc, #76]	; (800585c <HAL_InitTick+0x64>)
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	4b11      	ldr	r3, [pc, #68]	; (8005858 <HAL_InitTick+0x60>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	4619      	mov	r1, r3
 8005816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800581a:	fbb3 f3f1 	udiv	r3, r3, r1
 800581e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005822:	4618      	mov	r0, r3
 8005824:	f000 f94d 	bl	8005ac2 <HAL_SYSTICK_Config>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e00e      	b.n	8005850 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b0f      	cmp	r3, #15
 8005836:	d80a      	bhi.n	800584e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005838:	2200      	movs	r2, #0
 800583a:	6879      	ldr	r1, [r7, #4]
 800583c:	f04f 30ff 	mov.w	r0, #4294967295
 8005840:	f000 f917 	bl	8005a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005844:	4a06      	ldr	r2, [pc, #24]	; (8005860 <HAL_InitTick+0x68>)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	e000      	b.n	8005850 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
}
 8005850:	4618      	mov	r0, r3
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	24000044 	.word	0x24000044
 800585c:	24000038 	.word	0x24000038
 8005860:	24000040 	.word	0x24000040

08005864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005868:	4b06      	ldr	r3, [pc, #24]	; (8005884 <HAL_IncTick+0x20>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	461a      	mov	r2, r3
 800586e:	4b06      	ldr	r3, [pc, #24]	; (8005888 <HAL_IncTick+0x24>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4413      	add	r3, r2
 8005874:	4a04      	ldr	r2, [pc, #16]	; (8005888 <HAL_IncTick+0x24>)
 8005876:	6013      	str	r3, [r2, #0]
}
 8005878:	bf00      	nop
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	24000044 	.word	0x24000044
 8005888:	24000fd0 	.word	0x24000fd0

0800588c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  return uwTick;
 8005890:	4b03      	ldr	r3, [pc, #12]	; (80058a0 <HAL_GetTick+0x14>)
 8005892:	681b      	ldr	r3, [r3, #0]
}
 8005894:	4618      	mov	r0, r3
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	24000fd0 	.word	0x24000fd0

080058a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80058a8:	4b03      	ldr	r3, [pc, #12]	; (80058b8 <HAL_GetREVID+0x14>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	0c1b      	lsrs	r3, r3, #16
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	5c001000 	.word	0x5c001000

080058bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058cc:	4b0b      	ldr	r3, [pc, #44]	; (80058fc <__NVIC_SetPriorityGrouping+0x40>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058d8:	4013      	ands	r3, r2
 80058da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80058e4:	4b06      	ldr	r3, [pc, #24]	; (8005900 <__NVIC_SetPriorityGrouping+0x44>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058ea:	4a04      	ldr	r2, [pc, #16]	; (80058fc <__NVIC_SetPriorityGrouping+0x40>)
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	60d3      	str	r3, [r2, #12]
}
 80058f0:	bf00      	nop
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	e000ed00 	.word	0xe000ed00
 8005900:	05fa0000 	.word	0x05fa0000

08005904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005908:	4b04      	ldr	r3, [pc, #16]	; (800591c <__NVIC_GetPriorityGrouping+0x18>)
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	0a1b      	lsrs	r3, r3, #8
 800590e:	f003 0307 	and.w	r3, r3, #7
}
 8005912:	4618      	mov	r0, r3
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	e000ed00 	.word	0xe000ed00

08005920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	4603      	mov	r3, r0
 8005928:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800592a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800592e:	2b00      	cmp	r3, #0
 8005930:	db0b      	blt.n	800594a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005932:	88fb      	ldrh	r3, [r7, #6]
 8005934:	f003 021f 	and.w	r2, r3, #31
 8005938:	4907      	ldr	r1, [pc, #28]	; (8005958 <__NVIC_EnableIRQ+0x38>)
 800593a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800593e:	095b      	lsrs	r3, r3, #5
 8005940:	2001      	movs	r0, #1
 8005942:	fa00 f202 	lsl.w	r2, r0, r2
 8005946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	e000e100 	.word	0xe000e100

0800595c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	4603      	mov	r3, r0
 8005964:	6039      	str	r1, [r7, #0]
 8005966:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005968:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800596c:	2b00      	cmp	r3, #0
 800596e:	db0a      	blt.n	8005986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	b2da      	uxtb	r2, r3
 8005974:	490c      	ldr	r1, [pc, #48]	; (80059a8 <__NVIC_SetPriority+0x4c>)
 8005976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800597a:	0112      	lsls	r2, r2, #4
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	440b      	add	r3, r1
 8005980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005984:	e00a      	b.n	800599c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	b2da      	uxtb	r2, r3
 800598a:	4908      	ldr	r1, [pc, #32]	; (80059ac <__NVIC_SetPriority+0x50>)
 800598c:	88fb      	ldrh	r3, [r7, #6]
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	3b04      	subs	r3, #4
 8005994:	0112      	lsls	r2, r2, #4
 8005996:	b2d2      	uxtb	r2, r2
 8005998:	440b      	add	r3, r1
 800599a:	761a      	strb	r2, [r3, #24]
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	e000e100 	.word	0xe000e100
 80059ac:	e000ed00 	.word	0xe000ed00

080059b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b089      	sub	sp, #36	; 0x24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	f1c3 0307 	rsb	r3, r3, #7
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	bf28      	it	cs
 80059ce:	2304      	movcs	r3, #4
 80059d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	3304      	adds	r3, #4
 80059d6:	2b06      	cmp	r3, #6
 80059d8:	d902      	bls.n	80059e0 <NVIC_EncodePriority+0x30>
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	3b03      	subs	r3, #3
 80059de:	e000      	b.n	80059e2 <NVIC_EncodePriority+0x32>
 80059e0:	2300      	movs	r3, #0
 80059e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059e4:	f04f 32ff 	mov.w	r2, #4294967295
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	43da      	mvns	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	401a      	ands	r2, r3
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059f8:	f04f 31ff 	mov.w	r1, #4294967295
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005a02:	43d9      	mvns	r1, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a08:	4313      	orrs	r3, r2
         );
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3724      	adds	r7, #36	; 0x24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
	...

08005a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3b01      	subs	r3, #1
 8005a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a28:	d301      	bcc.n	8005a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e00f      	b.n	8005a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a2e:	4a0a      	ldr	r2, [pc, #40]	; (8005a58 <SysTick_Config+0x40>)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a36:	210f      	movs	r1, #15
 8005a38:	f04f 30ff 	mov.w	r0, #4294967295
 8005a3c:	f7ff ff8e 	bl	800595c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a40:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <SysTick_Config+0x40>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a46:	4b04      	ldr	r3, [pc, #16]	; (8005a58 <SysTick_Config+0x40>)
 8005a48:	2207      	movs	r2, #7
 8005a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	e000e010 	.word	0xe000e010

08005a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7ff ff29 	bl	80058bc <__NVIC_SetPriorityGrouping>
}
 8005a6a:	bf00      	nop
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b086      	sub	sp, #24
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	4603      	mov	r3, r0
 8005a7a:	60b9      	str	r1, [r7, #8]
 8005a7c:	607a      	str	r2, [r7, #4]
 8005a7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005a80:	f7ff ff40 	bl	8005904 <__NVIC_GetPriorityGrouping>
 8005a84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	68b9      	ldr	r1, [r7, #8]
 8005a8a:	6978      	ldr	r0, [r7, #20]
 8005a8c:	f7ff ff90 	bl	80059b0 <NVIC_EncodePriority>
 8005a90:	4602      	mov	r2, r0
 8005a92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a96:	4611      	mov	r1, r2
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff ff5f 	bl	800595c <__NVIC_SetPriority>
}
 8005a9e:	bf00      	nop
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	4603      	mov	r3, r0
 8005aae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ab0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff ff33 	bl	8005920 <__NVIC_EnableIRQ>
}
 8005aba:	bf00      	nop
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b082      	sub	sp, #8
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7ff ffa4 	bl	8005a18 <SysTick_Config>
 8005ad0:	4603      	mov	r3, r0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8005ade:	f000 f802 	bl	8005ae6 <HAL_SYSTICK_Callback>
}
 8005ae2:	bf00      	nop
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005aea:	bf00      	nop
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e054      	b.n	8005bb0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	7f5b      	ldrb	r3, [r3, #29]
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d105      	bne.n	8005b1c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7fb fe6c 	bl	80017f4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	791b      	ldrb	r3, [r3, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10c      	bne.n	8005b44 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a22      	ldr	r2, [pc, #136]	; (8005bb8 <HAL_CRC_Init+0xc4>)
 8005b30:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0218 	bic.w	r2, r2, #24
 8005b40:	609a      	str	r2, [r3, #8]
 8005b42:	e00c      	b.n	8005b5e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6899      	ldr	r1, [r3, #8]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f948 	bl	8005de4 <HAL_CRCEx_Polynomial_Set>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e028      	b.n	8005bb0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	795b      	ldrb	r3, [r3, #5]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d105      	bne.n	8005b72 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b6e:	611a      	str	r2, [r3, #16]
 8005b70:	e004      	b.n	8005b7c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	6912      	ldr	r2, [r2, #16]
 8005b7a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	695a      	ldr	r2, [r3, #20]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699a      	ldr	r2, [r3, #24]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	04c11db7 	.word	0x04c11db7

08005bbc <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8005bc8:	2300      	movs	r3, #0
 8005bca:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f042 0201 	orr.w	r2, r2, #1
 8005be0:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d006      	beq.n	8005bf8 <HAL_CRC_Calculate+0x3c>
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d829      	bhi.n	8005c42 <HAL_CRC_Calculate+0x86>
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d019      	beq.n	8005c26 <HAL_CRC_Calculate+0x6a>
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d01e      	beq.n	8005c34 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8005bf6:	e024      	b.n	8005c42 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	e00a      	b.n	8005c14 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	441a      	add	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6812      	ldr	r2, [r2, #0]
 8005c0c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	3301      	adds	r3, #1
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d3f0      	bcc.n	8005bfe <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	613b      	str	r3, [r7, #16]
      break;
 8005c24:	e00e      	b.n	8005c44 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	68b9      	ldr	r1, [r7, #8]
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 f812 	bl	8005c54 <CRC_Handle_8>
 8005c30:	6138      	str	r0, [r7, #16]
      break;
 8005c32:	e007      	b.n	8005c44 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 f899 	bl	8005d70 <CRC_Handle_16>
 8005c3e:	6138      	str	r0, [r7, #16]
      break;
 8005c40:	e000      	b.n	8005c44 <HAL_CRC_Calculate+0x88>
      break;
 8005c42:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2201      	movs	r2, #1
 8005c48:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8005c4a:	693b      	ldr	r3, [r7, #16]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b089      	sub	sp, #36	; 0x24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005c60:	2300      	movs	r3, #0
 8005c62:	61fb      	str	r3, [r7, #28]
 8005c64:	e023      	b.n	8005cae <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	3301      	adds	r3, #1
 8005c78:	68b9      	ldr	r1, [r7, #8]
 8005c7a:	440b      	add	r3, r1
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005c80:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	3302      	adds	r3, #2
 8005c88:	68b9      	ldr	r1, [r7, #8]
 8005c8a:	440b      	add	r3, r1
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005c90:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	3303      	adds	r3, #3
 8005c98:	68b9      	ldr	r1, [r7, #8]
 8005c9a:	440b      	add	r3, r1
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005ca4:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005ca6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	3301      	adds	r3, #1
 8005cac:	61fb      	str	r3, [r7, #28]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	089b      	lsrs	r3, r3, #2
 8005cb2:	69fa      	ldr	r2, [r7, #28]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d3d6      	bcc.n	8005c66 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d04d      	beq.n	8005d5e <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f003 0303 	and.w	r3, r3, #3
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d107      	bne.n	8005cdc <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	6812      	ldr	r2, [r2, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d116      	bne.n	8005d14 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	4413      	add	r3, r2
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	021b      	lsls	r3, r3, #8
 8005cf2:	b21a      	sxth	r2, r3
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	68b9      	ldr	r1, [r7, #8]
 8005cfc:	440b      	add	r3, r1
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	b21b      	sxth	r3, r3
 8005d02:	4313      	orrs	r3, r2
 8005d04:	b21b      	sxth	r3, r3
 8005d06:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	8b7a      	ldrh	r2, [r7, #26]
 8005d12:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f003 0303 	and.w	r3, r3, #3
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d11f      	bne.n	8005d5e <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	4413      	add	r3, r2
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	021b      	lsls	r3, r3, #8
 8005d2a:	b21a      	sxth	r2, r3
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	3301      	adds	r3, #1
 8005d32:	68b9      	ldr	r1, [r7, #8]
 8005d34:	440b      	add	r3, r1
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	b21b      	sxth	r3, r3
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	b21b      	sxth	r3, r3
 8005d3e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	8b7a      	ldrh	r2, [r7, #26]
 8005d4a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	3302      	adds	r3, #2
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	4413      	add	r3, r2
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	6812      	ldr	r2, [r2, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3724      	adds	r7, #36	; 0x24
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	e013      	b.n	8005daa <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	4413      	add	r3, r2
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	041a      	lsls	r2, r3, #16
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	3302      	adds	r3, #2
 8005d94:	68b9      	ldr	r1, [r7, #8]
 8005d96:	440b      	add	r3, r1
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	3301      	adds	r3, #1
 8005da8:	617b      	str	r3, [r7, #20]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	085b      	lsrs	r3, r3, #1
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d3e6      	bcc.n	8005d82 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d009      	beq.n	8005dd2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	4413      	add	r3, r2
 8005dcc:	881a      	ldrh	r2, [r3, #0]
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	371c      	adds	r7, #28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005df4:	231f      	movs	r3, #31
 8005df6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005df8:	bf00      	nop
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	1e5a      	subs	r2, r3, #1
 8005dfe:	613a      	str	r2, [r7, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d009      	beq.n	8005e18 <HAL_CRCEx_Polynomial_Set+0x34>
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f003 031f 	and.w	r3, r3, #31
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d0f0      	beq.n	8005dfa <HAL_CRCEx_Polynomial_Set+0x16>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b18      	cmp	r3, #24
 8005e1c:	d846      	bhi.n	8005eac <HAL_CRCEx_Polynomial_Set+0xc8>
 8005e1e:	a201      	add	r2, pc, #4	; (adr r2, 8005e24 <HAL_CRCEx_Polynomial_Set+0x40>)
 8005e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e24:	08005eb3 	.word	0x08005eb3
 8005e28:	08005ead 	.word	0x08005ead
 8005e2c:	08005ead 	.word	0x08005ead
 8005e30:	08005ead 	.word	0x08005ead
 8005e34:	08005ead 	.word	0x08005ead
 8005e38:	08005ead 	.word	0x08005ead
 8005e3c:	08005ead 	.word	0x08005ead
 8005e40:	08005ead 	.word	0x08005ead
 8005e44:	08005ea1 	.word	0x08005ea1
 8005e48:	08005ead 	.word	0x08005ead
 8005e4c:	08005ead 	.word	0x08005ead
 8005e50:	08005ead 	.word	0x08005ead
 8005e54:	08005ead 	.word	0x08005ead
 8005e58:	08005ead 	.word	0x08005ead
 8005e5c:	08005ead 	.word	0x08005ead
 8005e60:	08005ead 	.word	0x08005ead
 8005e64:	08005e95 	.word	0x08005e95
 8005e68:	08005ead 	.word	0x08005ead
 8005e6c:	08005ead 	.word	0x08005ead
 8005e70:	08005ead 	.word	0x08005ead
 8005e74:	08005ead 	.word	0x08005ead
 8005e78:	08005ead 	.word	0x08005ead
 8005e7c:	08005ead 	.word	0x08005ead
 8005e80:	08005ead 	.word	0x08005ead
 8005e84:	08005e89 	.word	0x08005e89
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	2b06      	cmp	r3, #6
 8005e8c:	d913      	bls.n	8005eb6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005e92:	e010      	b.n	8005eb6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	2b07      	cmp	r3, #7
 8005e98:	d90f      	bls.n	8005eba <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005e9e:	e00c      	b.n	8005eba <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	2b0f      	cmp	r3, #15
 8005ea4:	d90b      	bls.n	8005ebe <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005eaa:	e008      	b.n	8005ebe <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	75fb      	strb	r3, [r7, #23]
      break;
 8005eb0:	e006      	b.n	8005ec0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005eb2:	bf00      	nop
 8005eb4:	e004      	b.n	8005ec0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005eb6:	bf00      	nop
 8005eb8:	e002      	b.n	8005ec0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005eba:	bf00      	nop
 8005ebc:	e000      	b.n	8005ec0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005ebe:	bf00      	nop
  }
  if (status == HAL_OK)
 8005ec0:	7dfb      	ldrb	r3, [r7, #23]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10d      	bne.n	8005ee2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f023 0118 	bic.w	r1, r3, #24
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	371c      	adds	r7, #28
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005ef8:	f7ff fcc8 	bl	800588c <HAL_GetTick>
 8005efc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e316      	b.n	8006536 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a66      	ldr	r2, [pc, #408]	; (80060a8 <HAL_DMA_Init+0x1b8>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d04a      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a65      	ldr	r2, [pc, #404]	; (80060ac <HAL_DMA_Init+0x1bc>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d045      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a63      	ldr	r2, [pc, #396]	; (80060b0 <HAL_DMA_Init+0x1c0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d040      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a62      	ldr	r2, [pc, #392]	; (80060b4 <HAL_DMA_Init+0x1c4>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d03b      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a60      	ldr	r2, [pc, #384]	; (80060b8 <HAL_DMA_Init+0x1c8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d036      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a5f      	ldr	r2, [pc, #380]	; (80060bc <HAL_DMA_Init+0x1cc>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d031      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a5d      	ldr	r2, [pc, #372]	; (80060c0 <HAL_DMA_Init+0x1d0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d02c      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a5c      	ldr	r2, [pc, #368]	; (80060c4 <HAL_DMA_Init+0x1d4>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d027      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a5a      	ldr	r2, [pc, #360]	; (80060c8 <HAL_DMA_Init+0x1d8>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d022      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a59      	ldr	r2, [pc, #356]	; (80060cc <HAL_DMA_Init+0x1dc>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d01d      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a57      	ldr	r2, [pc, #348]	; (80060d0 <HAL_DMA_Init+0x1e0>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d018      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a56      	ldr	r2, [pc, #344]	; (80060d4 <HAL_DMA_Init+0x1e4>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d013      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a54      	ldr	r2, [pc, #336]	; (80060d8 <HAL_DMA_Init+0x1e8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00e      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a53      	ldr	r2, [pc, #332]	; (80060dc <HAL_DMA_Init+0x1ec>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d009      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a51      	ldr	r2, [pc, #324]	; (80060e0 <HAL_DMA_Init+0x1f0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d004      	beq.n	8005fa8 <HAL_DMA_Init+0xb8>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a50      	ldr	r2, [pc, #320]	; (80060e4 <HAL_DMA_Init+0x1f4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d101      	bne.n	8005fac <HAL_DMA_Init+0xbc>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e000      	b.n	8005fae <HAL_DMA_Init+0xbe>
 8005fac:	2300      	movs	r3, #0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 813b 	beq.w	800622a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a37      	ldr	r2, [pc, #220]	; (80060a8 <HAL_DMA_Init+0x1b8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d04a      	beq.n	8006064 <HAL_DMA_Init+0x174>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a36      	ldr	r2, [pc, #216]	; (80060ac <HAL_DMA_Init+0x1bc>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d045      	beq.n	8006064 <HAL_DMA_Init+0x174>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a34      	ldr	r2, [pc, #208]	; (80060b0 <HAL_DMA_Init+0x1c0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d040      	beq.n	8006064 <HAL_DMA_Init+0x174>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a33      	ldr	r2, [pc, #204]	; (80060b4 <HAL_DMA_Init+0x1c4>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d03b      	beq.n	8006064 <HAL_DMA_Init+0x174>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a31      	ldr	r2, [pc, #196]	; (80060b8 <HAL_DMA_Init+0x1c8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d036      	beq.n	8006064 <HAL_DMA_Init+0x174>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a30      	ldr	r2, [pc, #192]	; (80060bc <HAL_DMA_Init+0x1cc>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d031      	beq.n	8006064 <HAL_DMA_Init+0x174>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a2e      	ldr	r2, [pc, #184]	; (80060c0 <HAL_DMA_Init+0x1d0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d02c      	beq.n	8006064 <HAL_DMA_Init+0x174>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a2d      	ldr	r2, [pc, #180]	; (80060c4 <HAL_DMA_Init+0x1d4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d027      	beq.n	8006064 <HAL_DMA_Init+0x174>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a2b      	ldr	r2, [pc, #172]	; (80060c8 <HAL_DMA_Init+0x1d8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d022      	beq.n	8006064 <HAL_DMA_Init+0x174>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a2a      	ldr	r2, [pc, #168]	; (80060cc <HAL_DMA_Init+0x1dc>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d01d      	beq.n	8006064 <HAL_DMA_Init+0x174>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a28      	ldr	r2, [pc, #160]	; (80060d0 <HAL_DMA_Init+0x1e0>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d018      	beq.n	8006064 <HAL_DMA_Init+0x174>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a27      	ldr	r2, [pc, #156]	; (80060d4 <HAL_DMA_Init+0x1e4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d013      	beq.n	8006064 <HAL_DMA_Init+0x174>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a25      	ldr	r2, [pc, #148]	; (80060d8 <HAL_DMA_Init+0x1e8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00e      	beq.n	8006064 <HAL_DMA_Init+0x174>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a24      	ldr	r2, [pc, #144]	; (80060dc <HAL_DMA_Init+0x1ec>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d009      	beq.n	8006064 <HAL_DMA_Init+0x174>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a22      	ldr	r2, [pc, #136]	; (80060e0 <HAL_DMA_Init+0x1f0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d004      	beq.n	8006064 <HAL_DMA_Init+0x174>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a21      	ldr	r2, [pc, #132]	; (80060e4 <HAL_DMA_Init+0x1f4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d108      	bne.n	8006076 <HAL_DMA_Init+0x186>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0201 	bic.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	e007      	b.n	8006086 <HAL_DMA_Init+0x196>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0201 	bic.w	r2, r2, #1
 8006084:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006086:	e02f      	b.n	80060e8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006088:	f7ff fc00 	bl	800588c <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b05      	cmp	r3, #5
 8006094:	d928      	bls.n	80060e8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2203      	movs	r2, #3
 80060a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e246      	b.n	8006536 <HAL_DMA_Init+0x646>
 80060a8:	40020010 	.word	0x40020010
 80060ac:	40020028 	.word	0x40020028
 80060b0:	40020040 	.word	0x40020040
 80060b4:	40020058 	.word	0x40020058
 80060b8:	40020070 	.word	0x40020070
 80060bc:	40020088 	.word	0x40020088
 80060c0:	400200a0 	.word	0x400200a0
 80060c4:	400200b8 	.word	0x400200b8
 80060c8:	40020410 	.word	0x40020410
 80060cc:	40020428 	.word	0x40020428
 80060d0:	40020440 	.word	0x40020440
 80060d4:	40020458 	.word	0x40020458
 80060d8:	40020470 	.word	0x40020470
 80060dc:	40020488 	.word	0x40020488
 80060e0:	400204a0 	.word	0x400204a0
 80060e4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1c8      	bne.n	8006088 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4b83      	ldr	r3, [pc, #524]	; (8006310 <HAL_DMA_Init+0x420>)
 8006102:	4013      	ands	r3, r2
 8006104:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800610e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800611a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006126:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	4313      	orrs	r3, r2
 8006132:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	2b04      	cmp	r3, #4
 800613a:	d107      	bne.n	800614c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006144:	4313      	orrs	r3, r2
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	4313      	orrs	r3, r2
 800614a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800614c:	4b71      	ldr	r3, [pc, #452]	; (8006314 <HAL_DMA_Init+0x424>)
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	4b71      	ldr	r3, [pc, #452]	; (8006318 <HAL_DMA_Init+0x428>)
 8006152:	4013      	ands	r3, r2
 8006154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006158:	d328      	bcc.n	80061ac <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	2b28      	cmp	r3, #40	; 0x28
 8006160:	d903      	bls.n	800616a <HAL_DMA_Init+0x27a>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	2b2e      	cmp	r3, #46	; 0x2e
 8006168:	d917      	bls.n	800619a <HAL_DMA_Init+0x2aa>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2b3e      	cmp	r3, #62	; 0x3e
 8006170:	d903      	bls.n	800617a <HAL_DMA_Init+0x28a>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	2b42      	cmp	r3, #66	; 0x42
 8006178:	d90f      	bls.n	800619a <HAL_DMA_Init+0x2aa>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	2b46      	cmp	r3, #70	; 0x46
 8006180:	d903      	bls.n	800618a <HAL_DMA_Init+0x29a>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	2b48      	cmp	r3, #72	; 0x48
 8006188:	d907      	bls.n	800619a <HAL_DMA_Init+0x2aa>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2b4e      	cmp	r3, #78	; 0x4e
 8006190:	d905      	bls.n	800619e <HAL_DMA_Init+0x2ae>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	2b52      	cmp	r3, #82	; 0x52
 8006198:	d801      	bhi.n	800619e <HAL_DMA_Init+0x2ae>
 800619a:	2301      	movs	r3, #1
 800619c:	e000      	b.n	80061a0 <HAL_DMA_Init+0x2b0>
 800619e:	2300      	movs	r3, #0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061aa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f023 0307 	bic.w	r3, r3, #7
 80061c2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d117      	bne.n	8006206 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	4313      	orrs	r3, r2
 80061de:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00e      	beq.n	8006206 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f002 fb31 	bl	8008850 <DMA_CheckFifoParam>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d008      	beq.n	8006206 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2240      	movs	r2, #64	; 0x40
 80061f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e197      	b.n	8006536 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f002 fa6c 	bl	80086ec <DMA_CalcBaseAndBitshift>
 8006214:	4603      	mov	r3, r0
 8006216:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800621c:	f003 031f 	and.w	r3, r3, #31
 8006220:	223f      	movs	r2, #63	; 0x3f
 8006222:	409a      	lsls	r2, r3
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	609a      	str	r2, [r3, #8]
 8006228:	e0cd      	b.n	80063c6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a3b      	ldr	r2, [pc, #236]	; (800631c <HAL_DMA_Init+0x42c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d022      	beq.n	800627a <HAL_DMA_Init+0x38a>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a39      	ldr	r2, [pc, #228]	; (8006320 <HAL_DMA_Init+0x430>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d01d      	beq.n	800627a <HAL_DMA_Init+0x38a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a38      	ldr	r2, [pc, #224]	; (8006324 <HAL_DMA_Init+0x434>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d018      	beq.n	800627a <HAL_DMA_Init+0x38a>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a36      	ldr	r2, [pc, #216]	; (8006328 <HAL_DMA_Init+0x438>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d013      	beq.n	800627a <HAL_DMA_Init+0x38a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a35      	ldr	r2, [pc, #212]	; (800632c <HAL_DMA_Init+0x43c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d00e      	beq.n	800627a <HAL_DMA_Init+0x38a>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a33      	ldr	r2, [pc, #204]	; (8006330 <HAL_DMA_Init+0x440>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d009      	beq.n	800627a <HAL_DMA_Init+0x38a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a32      	ldr	r2, [pc, #200]	; (8006334 <HAL_DMA_Init+0x444>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d004      	beq.n	800627a <HAL_DMA_Init+0x38a>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a30      	ldr	r2, [pc, #192]	; (8006338 <HAL_DMA_Init+0x448>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d101      	bne.n	800627e <HAL_DMA_Init+0x38e>
 800627a:	2301      	movs	r3, #1
 800627c:	e000      	b.n	8006280 <HAL_DMA_Init+0x390>
 800627e:	2300      	movs	r3, #0
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 8097 	beq.w	80063b4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a24      	ldr	r2, [pc, #144]	; (800631c <HAL_DMA_Init+0x42c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d021      	beq.n	80062d4 <HAL_DMA_Init+0x3e4>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a22      	ldr	r2, [pc, #136]	; (8006320 <HAL_DMA_Init+0x430>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d01c      	beq.n	80062d4 <HAL_DMA_Init+0x3e4>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a21      	ldr	r2, [pc, #132]	; (8006324 <HAL_DMA_Init+0x434>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d017      	beq.n	80062d4 <HAL_DMA_Init+0x3e4>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a1f      	ldr	r2, [pc, #124]	; (8006328 <HAL_DMA_Init+0x438>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d012      	beq.n	80062d4 <HAL_DMA_Init+0x3e4>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a1e      	ldr	r2, [pc, #120]	; (800632c <HAL_DMA_Init+0x43c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d00d      	beq.n	80062d4 <HAL_DMA_Init+0x3e4>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a1c      	ldr	r2, [pc, #112]	; (8006330 <HAL_DMA_Init+0x440>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d008      	beq.n	80062d4 <HAL_DMA_Init+0x3e4>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a1b      	ldr	r2, [pc, #108]	; (8006334 <HAL_DMA_Init+0x444>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d003      	beq.n	80062d4 <HAL_DMA_Init+0x3e4>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a19      	ldr	r2, [pc, #100]	; (8006338 <HAL_DMA_Init+0x448>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2202      	movs	r2, #2
 80062da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4b12      	ldr	r3, [pc, #72]	; (800633c <HAL_DMA_Init+0x44c>)
 80062f2:	4013      	ands	r3, r2
 80062f4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	2b40      	cmp	r3, #64	; 0x40
 80062fc:	d020      	beq.n	8006340 <HAL_DMA_Init+0x450>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	2b80      	cmp	r3, #128	; 0x80
 8006304:	d102      	bne.n	800630c <HAL_DMA_Init+0x41c>
 8006306:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800630a:	e01a      	b.n	8006342 <HAL_DMA_Init+0x452>
 800630c:	2300      	movs	r3, #0
 800630e:	e018      	b.n	8006342 <HAL_DMA_Init+0x452>
 8006310:	fe10803f 	.word	0xfe10803f
 8006314:	5c001000 	.word	0x5c001000
 8006318:	ffff0000 	.word	0xffff0000
 800631c:	58025408 	.word	0x58025408
 8006320:	5802541c 	.word	0x5802541c
 8006324:	58025430 	.word	0x58025430
 8006328:	58025444 	.word	0x58025444
 800632c:	58025458 	.word	0x58025458
 8006330:	5802546c 	.word	0x5802546c
 8006334:	58025480 	.word	0x58025480
 8006338:	58025494 	.word	0x58025494
 800633c:	fffe000f 	.word	0xfffe000f
 8006340:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	68d2      	ldr	r2, [r2, #12]
 8006346:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006348:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006350:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006358:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006360:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006368:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006370:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	461a      	mov	r2, r3
 8006386:	4b6e      	ldr	r3, [pc, #440]	; (8006540 <HAL_DMA_Init+0x650>)
 8006388:	4413      	add	r3, r2
 800638a:	4a6e      	ldr	r2, [pc, #440]	; (8006544 <HAL_DMA_Init+0x654>)
 800638c:	fba2 2303 	umull	r2, r3, r2, r3
 8006390:	091b      	lsrs	r3, r3, #4
 8006392:	009a      	lsls	r2, r3, #2
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f002 f9a7 	bl	80086ec <DMA_CalcBaseAndBitshift>
 800639e:	4603      	mov	r3, r0
 80063a0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a6:	f003 031f 	and.w	r3, r3, #31
 80063aa:	2201      	movs	r2, #1
 80063ac:	409a      	lsls	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	605a      	str	r2, [r3, #4]
 80063b2:	e008      	b.n	80063c6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2240      	movs	r2, #64	; 0x40
 80063b8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2203      	movs	r2, #3
 80063be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e0b7      	b.n	8006536 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a5f      	ldr	r2, [pc, #380]	; (8006548 <HAL_DMA_Init+0x658>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d072      	beq.n	80064b6 <HAL_DMA_Init+0x5c6>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a5d      	ldr	r2, [pc, #372]	; (800654c <HAL_DMA_Init+0x65c>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d06d      	beq.n	80064b6 <HAL_DMA_Init+0x5c6>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a5c      	ldr	r2, [pc, #368]	; (8006550 <HAL_DMA_Init+0x660>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d068      	beq.n	80064b6 <HAL_DMA_Init+0x5c6>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a5a      	ldr	r2, [pc, #360]	; (8006554 <HAL_DMA_Init+0x664>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d063      	beq.n	80064b6 <HAL_DMA_Init+0x5c6>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a59      	ldr	r2, [pc, #356]	; (8006558 <HAL_DMA_Init+0x668>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d05e      	beq.n	80064b6 <HAL_DMA_Init+0x5c6>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a57      	ldr	r2, [pc, #348]	; (800655c <HAL_DMA_Init+0x66c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d059      	beq.n	80064b6 <HAL_DMA_Init+0x5c6>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a56      	ldr	r2, [pc, #344]	; (8006560 <HAL_DMA_Init+0x670>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d054      	beq.n	80064b6 <HAL_DMA_Init+0x5c6>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a54      	ldr	r2, [pc, #336]	; (8006564 <HAL_DMA_Init+0x674>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d04f      	beq.n	80064b6 <HAL_DMA_Init+0x5c6>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a53      	ldr	r2, [pc, #332]	; (8006568 <HAL_DMA_Init+0x678>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d04a      	beq.n	80064b6 <HAL_DMA_Init+0x5c6>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a51      	ldr	r2, [pc, #324]	; (800656c <HAL_DMA_Init+0x67c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d045      	beq.n	80064b6 <HAL_DMA_Init+0x5c6>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a50      	ldr	r2, [pc, #320]	; (8006570 <HAL_DMA_Init+0x680>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d040      	beq.n	80064b6 <HAL_DMA_Init+0x5c6>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a4e      	ldr	r2, [pc, #312]	; (8006574 <HAL_DMA_Init+0x684>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d03b      	beq.n	80064b6 <HAL_DMA_Init+0x5c6>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a4d      	ldr	r2, [pc, #308]	; (8006578 <HAL_DMA_Init+0x688>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d036      	beq.n	80064b6 <HAL_DMA_Init+0x5c6>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a4b      	ldr	r2, [pc, #300]	; (800657c <HAL_DMA_Init+0x68c>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d031      	beq.n	80064b6 <HAL_DMA_Init+0x5c6>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a4a      	ldr	r2, [pc, #296]	; (8006580 <HAL_DMA_Init+0x690>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d02c      	beq.n	80064b6 <HAL_DMA_Init+0x5c6>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a48      	ldr	r2, [pc, #288]	; (8006584 <HAL_DMA_Init+0x694>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d027      	beq.n	80064b6 <HAL_DMA_Init+0x5c6>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a47      	ldr	r2, [pc, #284]	; (8006588 <HAL_DMA_Init+0x698>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d022      	beq.n	80064b6 <HAL_DMA_Init+0x5c6>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a45      	ldr	r2, [pc, #276]	; (800658c <HAL_DMA_Init+0x69c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d01d      	beq.n	80064b6 <HAL_DMA_Init+0x5c6>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a44      	ldr	r2, [pc, #272]	; (8006590 <HAL_DMA_Init+0x6a0>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d018      	beq.n	80064b6 <HAL_DMA_Init+0x5c6>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a42      	ldr	r2, [pc, #264]	; (8006594 <HAL_DMA_Init+0x6a4>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d013      	beq.n	80064b6 <HAL_DMA_Init+0x5c6>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a41      	ldr	r2, [pc, #260]	; (8006598 <HAL_DMA_Init+0x6a8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00e      	beq.n	80064b6 <HAL_DMA_Init+0x5c6>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a3f      	ldr	r2, [pc, #252]	; (800659c <HAL_DMA_Init+0x6ac>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d009      	beq.n	80064b6 <HAL_DMA_Init+0x5c6>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a3e      	ldr	r2, [pc, #248]	; (80065a0 <HAL_DMA_Init+0x6b0>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d004      	beq.n	80064b6 <HAL_DMA_Init+0x5c6>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a3c      	ldr	r2, [pc, #240]	; (80065a4 <HAL_DMA_Init+0x6b4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d101      	bne.n	80064ba <HAL_DMA_Init+0x5ca>
 80064b6:	2301      	movs	r3, #1
 80064b8:	e000      	b.n	80064bc <HAL_DMA_Init+0x5cc>
 80064ba:	2300      	movs	r3, #0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d032      	beq.n	8006526 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f002 fa41 	bl	8008948 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	2b80      	cmp	r3, #128	; 0x80
 80064cc:	d102      	bne.n	80064d4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064dc:	b2d2      	uxtb	r2, r2
 80064de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80064e8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d010      	beq.n	8006514 <HAL_DMA_Init+0x624>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	2b08      	cmp	r3, #8
 80064f8:	d80c      	bhi.n	8006514 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f002 fabe 	bl	8008a7c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006504:	2200      	movs	r2, #0
 8006506:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006510:	605a      	str	r2, [r3, #4]
 8006512:	e008      	b.n	8006526 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3718      	adds	r7, #24
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	a7fdabf8 	.word	0xa7fdabf8
 8006544:	cccccccd 	.word	0xcccccccd
 8006548:	40020010 	.word	0x40020010
 800654c:	40020028 	.word	0x40020028
 8006550:	40020040 	.word	0x40020040
 8006554:	40020058 	.word	0x40020058
 8006558:	40020070 	.word	0x40020070
 800655c:	40020088 	.word	0x40020088
 8006560:	400200a0 	.word	0x400200a0
 8006564:	400200b8 	.word	0x400200b8
 8006568:	40020410 	.word	0x40020410
 800656c:	40020428 	.word	0x40020428
 8006570:	40020440 	.word	0x40020440
 8006574:	40020458 	.word	0x40020458
 8006578:	40020470 	.word	0x40020470
 800657c:	40020488 	.word	0x40020488
 8006580:	400204a0 	.word	0x400204a0
 8006584:	400204b8 	.word	0x400204b8
 8006588:	58025408 	.word	0x58025408
 800658c:	5802541c 	.word	0x5802541c
 8006590:	58025430 	.word	0x58025430
 8006594:	58025444 	.word	0x58025444
 8006598:	58025458 	.word	0x58025458
 800659c:	5802546c 	.word	0x5802546c
 80065a0:	58025480 	.word	0x58025480
 80065a4:	58025494 	.word	0x58025494

080065a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
 80065b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d101      	bne.n	80065c4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e226      	b.n	8006a12 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d101      	bne.n	80065d2 <HAL_DMA_Start_IT+0x2a>
 80065ce:	2302      	movs	r3, #2
 80065d0:	e21f      	b.n	8006a12 <HAL_DMA_Start_IT+0x46a>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	f040 820a 	bne.w	80069fc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2202      	movs	r2, #2
 80065ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a68      	ldr	r2, [pc, #416]	; (800679c <HAL_DMA_Start_IT+0x1f4>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d04a      	beq.n	8006696 <HAL_DMA_Start_IT+0xee>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a66      	ldr	r2, [pc, #408]	; (80067a0 <HAL_DMA_Start_IT+0x1f8>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d045      	beq.n	8006696 <HAL_DMA_Start_IT+0xee>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a65      	ldr	r2, [pc, #404]	; (80067a4 <HAL_DMA_Start_IT+0x1fc>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d040      	beq.n	8006696 <HAL_DMA_Start_IT+0xee>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a63      	ldr	r2, [pc, #396]	; (80067a8 <HAL_DMA_Start_IT+0x200>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d03b      	beq.n	8006696 <HAL_DMA_Start_IT+0xee>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a62      	ldr	r2, [pc, #392]	; (80067ac <HAL_DMA_Start_IT+0x204>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d036      	beq.n	8006696 <HAL_DMA_Start_IT+0xee>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a60      	ldr	r2, [pc, #384]	; (80067b0 <HAL_DMA_Start_IT+0x208>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d031      	beq.n	8006696 <HAL_DMA_Start_IT+0xee>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a5f      	ldr	r2, [pc, #380]	; (80067b4 <HAL_DMA_Start_IT+0x20c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d02c      	beq.n	8006696 <HAL_DMA_Start_IT+0xee>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a5d      	ldr	r2, [pc, #372]	; (80067b8 <HAL_DMA_Start_IT+0x210>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d027      	beq.n	8006696 <HAL_DMA_Start_IT+0xee>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a5c      	ldr	r2, [pc, #368]	; (80067bc <HAL_DMA_Start_IT+0x214>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d022      	beq.n	8006696 <HAL_DMA_Start_IT+0xee>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a5a      	ldr	r2, [pc, #360]	; (80067c0 <HAL_DMA_Start_IT+0x218>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d01d      	beq.n	8006696 <HAL_DMA_Start_IT+0xee>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a59      	ldr	r2, [pc, #356]	; (80067c4 <HAL_DMA_Start_IT+0x21c>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d018      	beq.n	8006696 <HAL_DMA_Start_IT+0xee>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a57      	ldr	r2, [pc, #348]	; (80067c8 <HAL_DMA_Start_IT+0x220>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d013      	beq.n	8006696 <HAL_DMA_Start_IT+0xee>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a56      	ldr	r2, [pc, #344]	; (80067cc <HAL_DMA_Start_IT+0x224>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d00e      	beq.n	8006696 <HAL_DMA_Start_IT+0xee>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a54      	ldr	r2, [pc, #336]	; (80067d0 <HAL_DMA_Start_IT+0x228>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d009      	beq.n	8006696 <HAL_DMA_Start_IT+0xee>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a53      	ldr	r2, [pc, #332]	; (80067d4 <HAL_DMA_Start_IT+0x22c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d004      	beq.n	8006696 <HAL_DMA_Start_IT+0xee>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a51      	ldr	r2, [pc, #324]	; (80067d8 <HAL_DMA_Start_IT+0x230>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d108      	bne.n	80066a8 <HAL_DMA_Start_IT+0x100>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0201 	bic.w	r2, r2, #1
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	e007      	b.n	80066b8 <HAL_DMA_Start_IT+0x110>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 0201 	bic.w	r2, r2, #1
 80066b6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	68b9      	ldr	r1, [r7, #8]
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f001 fe68 	bl	8008394 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a34      	ldr	r2, [pc, #208]	; (800679c <HAL_DMA_Start_IT+0x1f4>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d04a      	beq.n	8006764 <HAL_DMA_Start_IT+0x1bc>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a33      	ldr	r2, [pc, #204]	; (80067a0 <HAL_DMA_Start_IT+0x1f8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d045      	beq.n	8006764 <HAL_DMA_Start_IT+0x1bc>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a31      	ldr	r2, [pc, #196]	; (80067a4 <HAL_DMA_Start_IT+0x1fc>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d040      	beq.n	8006764 <HAL_DMA_Start_IT+0x1bc>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a30      	ldr	r2, [pc, #192]	; (80067a8 <HAL_DMA_Start_IT+0x200>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d03b      	beq.n	8006764 <HAL_DMA_Start_IT+0x1bc>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a2e      	ldr	r2, [pc, #184]	; (80067ac <HAL_DMA_Start_IT+0x204>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d036      	beq.n	8006764 <HAL_DMA_Start_IT+0x1bc>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a2d      	ldr	r2, [pc, #180]	; (80067b0 <HAL_DMA_Start_IT+0x208>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d031      	beq.n	8006764 <HAL_DMA_Start_IT+0x1bc>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a2b      	ldr	r2, [pc, #172]	; (80067b4 <HAL_DMA_Start_IT+0x20c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d02c      	beq.n	8006764 <HAL_DMA_Start_IT+0x1bc>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a2a      	ldr	r2, [pc, #168]	; (80067b8 <HAL_DMA_Start_IT+0x210>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d027      	beq.n	8006764 <HAL_DMA_Start_IT+0x1bc>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a28      	ldr	r2, [pc, #160]	; (80067bc <HAL_DMA_Start_IT+0x214>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d022      	beq.n	8006764 <HAL_DMA_Start_IT+0x1bc>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a27      	ldr	r2, [pc, #156]	; (80067c0 <HAL_DMA_Start_IT+0x218>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d01d      	beq.n	8006764 <HAL_DMA_Start_IT+0x1bc>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a25      	ldr	r2, [pc, #148]	; (80067c4 <HAL_DMA_Start_IT+0x21c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d018      	beq.n	8006764 <HAL_DMA_Start_IT+0x1bc>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a24      	ldr	r2, [pc, #144]	; (80067c8 <HAL_DMA_Start_IT+0x220>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d013      	beq.n	8006764 <HAL_DMA_Start_IT+0x1bc>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a22      	ldr	r2, [pc, #136]	; (80067cc <HAL_DMA_Start_IT+0x224>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d00e      	beq.n	8006764 <HAL_DMA_Start_IT+0x1bc>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a21      	ldr	r2, [pc, #132]	; (80067d0 <HAL_DMA_Start_IT+0x228>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d009      	beq.n	8006764 <HAL_DMA_Start_IT+0x1bc>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a1f      	ldr	r2, [pc, #124]	; (80067d4 <HAL_DMA_Start_IT+0x22c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d004      	beq.n	8006764 <HAL_DMA_Start_IT+0x1bc>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a1e      	ldr	r2, [pc, #120]	; (80067d8 <HAL_DMA_Start_IT+0x230>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d101      	bne.n	8006768 <HAL_DMA_Start_IT+0x1c0>
 8006764:	2301      	movs	r3, #1
 8006766:	e000      	b.n	800676a <HAL_DMA_Start_IT+0x1c2>
 8006768:	2300      	movs	r3, #0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d036      	beq.n	80067dc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f023 021e 	bic.w	r2, r3, #30
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f042 0216 	orr.w	r2, r2, #22
 8006780:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006786:	2b00      	cmp	r3, #0
 8006788:	d03e      	beq.n	8006808 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f042 0208 	orr.w	r2, r2, #8
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	e035      	b.n	8006808 <HAL_DMA_Start_IT+0x260>
 800679c:	40020010 	.word	0x40020010
 80067a0:	40020028 	.word	0x40020028
 80067a4:	40020040 	.word	0x40020040
 80067a8:	40020058 	.word	0x40020058
 80067ac:	40020070 	.word	0x40020070
 80067b0:	40020088 	.word	0x40020088
 80067b4:	400200a0 	.word	0x400200a0
 80067b8:	400200b8 	.word	0x400200b8
 80067bc:	40020410 	.word	0x40020410
 80067c0:	40020428 	.word	0x40020428
 80067c4:	40020440 	.word	0x40020440
 80067c8:	40020458 	.word	0x40020458
 80067cc:	40020470 	.word	0x40020470
 80067d0:	40020488 	.word	0x40020488
 80067d4:	400204a0 	.word	0x400204a0
 80067d8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f023 020e 	bic.w	r2, r3, #14
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 020a 	orr.w	r2, r2, #10
 80067ee:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d007      	beq.n	8006808 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0204 	orr.w	r2, r2, #4
 8006806:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a83      	ldr	r2, [pc, #524]	; (8006a1c <HAL_DMA_Start_IT+0x474>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d072      	beq.n	80068f8 <HAL_DMA_Start_IT+0x350>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a82      	ldr	r2, [pc, #520]	; (8006a20 <HAL_DMA_Start_IT+0x478>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d06d      	beq.n	80068f8 <HAL_DMA_Start_IT+0x350>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a80      	ldr	r2, [pc, #512]	; (8006a24 <HAL_DMA_Start_IT+0x47c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d068      	beq.n	80068f8 <HAL_DMA_Start_IT+0x350>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a7f      	ldr	r2, [pc, #508]	; (8006a28 <HAL_DMA_Start_IT+0x480>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d063      	beq.n	80068f8 <HAL_DMA_Start_IT+0x350>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a7d      	ldr	r2, [pc, #500]	; (8006a2c <HAL_DMA_Start_IT+0x484>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d05e      	beq.n	80068f8 <HAL_DMA_Start_IT+0x350>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a7c      	ldr	r2, [pc, #496]	; (8006a30 <HAL_DMA_Start_IT+0x488>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d059      	beq.n	80068f8 <HAL_DMA_Start_IT+0x350>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a7a      	ldr	r2, [pc, #488]	; (8006a34 <HAL_DMA_Start_IT+0x48c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d054      	beq.n	80068f8 <HAL_DMA_Start_IT+0x350>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a79      	ldr	r2, [pc, #484]	; (8006a38 <HAL_DMA_Start_IT+0x490>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d04f      	beq.n	80068f8 <HAL_DMA_Start_IT+0x350>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a77      	ldr	r2, [pc, #476]	; (8006a3c <HAL_DMA_Start_IT+0x494>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d04a      	beq.n	80068f8 <HAL_DMA_Start_IT+0x350>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a76      	ldr	r2, [pc, #472]	; (8006a40 <HAL_DMA_Start_IT+0x498>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d045      	beq.n	80068f8 <HAL_DMA_Start_IT+0x350>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a74      	ldr	r2, [pc, #464]	; (8006a44 <HAL_DMA_Start_IT+0x49c>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d040      	beq.n	80068f8 <HAL_DMA_Start_IT+0x350>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a73      	ldr	r2, [pc, #460]	; (8006a48 <HAL_DMA_Start_IT+0x4a0>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d03b      	beq.n	80068f8 <HAL_DMA_Start_IT+0x350>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a71      	ldr	r2, [pc, #452]	; (8006a4c <HAL_DMA_Start_IT+0x4a4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d036      	beq.n	80068f8 <HAL_DMA_Start_IT+0x350>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a70      	ldr	r2, [pc, #448]	; (8006a50 <HAL_DMA_Start_IT+0x4a8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d031      	beq.n	80068f8 <HAL_DMA_Start_IT+0x350>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a6e      	ldr	r2, [pc, #440]	; (8006a54 <HAL_DMA_Start_IT+0x4ac>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d02c      	beq.n	80068f8 <HAL_DMA_Start_IT+0x350>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a6d      	ldr	r2, [pc, #436]	; (8006a58 <HAL_DMA_Start_IT+0x4b0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d027      	beq.n	80068f8 <HAL_DMA_Start_IT+0x350>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a6b      	ldr	r2, [pc, #428]	; (8006a5c <HAL_DMA_Start_IT+0x4b4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d022      	beq.n	80068f8 <HAL_DMA_Start_IT+0x350>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a6a      	ldr	r2, [pc, #424]	; (8006a60 <HAL_DMA_Start_IT+0x4b8>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d01d      	beq.n	80068f8 <HAL_DMA_Start_IT+0x350>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a68      	ldr	r2, [pc, #416]	; (8006a64 <HAL_DMA_Start_IT+0x4bc>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d018      	beq.n	80068f8 <HAL_DMA_Start_IT+0x350>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a67      	ldr	r2, [pc, #412]	; (8006a68 <HAL_DMA_Start_IT+0x4c0>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d013      	beq.n	80068f8 <HAL_DMA_Start_IT+0x350>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a65      	ldr	r2, [pc, #404]	; (8006a6c <HAL_DMA_Start_IT+0x4c4>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d00e      	beq.n	80068f8 <HAL_DMA_Start_IT+0x350>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a64      	ldr	r2, [pc, #400]	; (8006a70 <HAL_DMA_Start_IT+0x4c8>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d009      	beq.n	80068f8 <HAL_DMA_Start_IT+0x350>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a62      	ldr	r2, [pc, #392]	; (8006a74 <HAL_DMA_Start_IT+0x4cc>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d004      	beq.n	80068f8 <HAL_DMA_Start_IT+0x350>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a61      	ldr	r2, [pc, #388]	; (8006a78 <HAL_DMA_Start_IT+0x4d0>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d101      	bne.n	80068fc <HAL_DMA_Start_IT+0x354>
 80068f8:	2301      	movs	r3, #1
 80068fa:	e000      	b.n	80068fe <HAL_DMA_Start_IT+0x356>
 80068fc:	2300      	movs	r3, #0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d01a      	beq.n	8006938 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d007      	beq.n	8006920 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800691a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800691e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006924:	2b00      	cmp	r3, #0
 8006926:	d007      	beq.n	8006938 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006936:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a37      	ldr	r2, [pc, #220]	; (8006a1c <HAL_DMA_Start_IT+0x474>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d04a      	beq.n	80069d8 <HAL_DMA_Start_IT+0x430>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a36      	ldr	r2, [pc, #216]	; (8006a20 <HAL_DMA_Start_IT+0x478>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d045      	beq.n	80069d8 <HAL_DMA_Start_IT+0x430>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a34      	ldr	r2, [pc, #208]	; (8006a24 <HAL_DMA_Start_IT+0x47c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d040      	beq.n	80069d8 <HAL_DMA_Start_IT+0x430>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a33      	ldr	r2, [pc, #204]	; (8006a28 <HAL_DMA_Start_IT+0x480>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d03b      	beq.n	80069d8 <HAL_DMA_Start_IT+0x430>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a31      	ldr	r2, [pc, #196]	; (8006a2c <HAL_DMA_Start_IT+0x484>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d036      	beq.n	80069d8 <HAL_DMA_Start_IT+0x430>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a30      	ldr	r2, [pc, #192]	; (8006a30 <HAL_DMA_Start_IT+0x488>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d031      	beq.n	80069d8 <HAL_DMA_Start_IT+0x430>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a2e      	ldr	r2, [pc, #184]	; (8006a34 <HAL_DMA_Start_IT+0x48c>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d02c      	beq.n	80069d8 <HAL_DMA_Start_IT+0x430>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a2d      	ldr	r2, [pc, #180]	; (8006a38 <HAL_DMA_Start_IT+0x490>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d027      	beq.n	80069d8 <HAL_DMA_Start_IT+0x430>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a2b      	ldr	r2, [pc, #172]	; (8006a3c <HAL_DMA_Start_IT+0x494>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d022      	beq.n	80069d8 <HAL_DMA_Start_IT+0x430>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a2a      	ldr	r2, [pc, #168]	; (8006a40 <HAL_DMA_Start_IT+0x498>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d01d      	beq.n	80069d8 <HAL_DMA_Start_IT+0x430>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a28      	ldr	r2, [pc, #160]	; (8006a44 <HAL_DMA_Start_IT+0x49c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d018      	beq.n	80069d8 <HAL_DMA_Start_IT+0x430>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a27      	ldr	r2, [pc, #156]	; (8006a48 <HAL_DMA_Start_IT+0x4a0>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d013      	beq.n	80069d8 <HAL_DMA_Start_IT+0x430>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a25      	ldr	r2, [pc, #148]	; (8006a4c <HAL_DMA_Start_IT+0x4a4>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d00e      	beq.n	80069d8 <HAL_DMA_Start_IT+0x430>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a24      	ldr	r2, [pc, #144]	; (8006a50 <HAL_DMA_Start_IT+0x4a8>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d009      	beq.n	80069d8 <HAL_DMA_Start_IT+0x430>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a22      	ldr	r2, [pc, #136]	; (8006a54 <HAL_DMA_Start_IT+0x4ac>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d004      	beq.n	80069d8 <HAL_DMA_Start_IT+0x430>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a21      	ldr	r2, [pc, #132]	; (8006a58 <HAL_DMA_Start_IT+0x4b0>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d108      	bne.n	80069ea <HAL_DMA_Start_IT+0x442>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f042 0201 	orr.w	r2, r2, #1
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	e012      	b.n	8006a10 <HAL_DMA_Start_IT+0x468>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f042 0201 	orr.w	r2, r2, #1
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	e009      	b.n	8006a10 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	40020010 	.word	0x40020010
 8006a20:	40020028 	.word	0x40020028
 8006a24:	40020040 	.word	0x40020040
 8006a28:	40020058 	.word	0x40020058
 8006a2c:	40020070 	.word	0x40020070
 8006a30:	40020088 	.word	0x40020088
 8006a34:	400200a0 	.word	0x400200a0
 8006a38:	400200b8 	.word	0x400200b8
 8006a3c:	40020410 	.word	0x40020410
 8006a40:	40020428 	.word	0x40020428
 8006a44:	40020440 	.word	0x40020440
 8006a48:	40020458 	.word	0x40020458
 8006a4c:	40020470 	.word	0x40020470
 8006a50:	40020488 	.word	0x40020488
 8006a54:	400204a0 	.word	0x400204a0
 8006a58:	400204b8 	.word	0x400204b8
 8006a5c:	58025408 	.word	0x58025408
 8006a60:	5802541c 	.word	0x5802541c
 8006a64:	58025430 	.word	0x58025430
 8006a68:	58025444 	.word	0x58025444
 8006a6c:	58025458 	.word	0x58025458
 8006a70:	5802546c 	.word	0x5802546c
 8006a74:	58025480 	.word	0x58025480
 8006a78:	58025494 	.word	0x58025494

08006a7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006a84:	f7fe ff02 	bl	800588c <HAL_GetTick>
 8006a88:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d101      	bne.n	8006a94 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e2dc      	b.n	800704e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d008      	beq.n	8006ab2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2280      	movs	r2, #128	; 0x80
 8006aa4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e2cd      	b.n	800704e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a76      	ldr	r2, [pc, #472]	; (8006c90 <HAL_DMA_Abort+0x214>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d04a      	beq.n	8006b52 <HAL_DMA_Abort+0xd6>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a74      	ldr	r2, [pc, #464]	; (8006c94 <HAL_DMA_Abort+0x218>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d045      	beq.n	8006b52 <HAL_DMA_Abort+0xd6>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a73      	ldr	r2, [pc, #460]	; (8006c98 <HAL_DMA_Abort+0x21c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d040      	beq.n	8006b52 <HAL_DMA_Abort+0xd6>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a71      	ldr	r2, [pc, #452]	; (8006c9c <HAL_DMA_Abort+0x220>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d03b      	beq.n	8006b52 <HAL_DMA_Abort+0xd6>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a70      	ldr	r2, [pc, #448]	; (8006ca0 <HAL_DMA_Abort+0x224>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d036      	beq.n	8006b52 <HAL_DMA_Abort+0xd6>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a6e      	ldr	r2, [pc, #440]	; (8006ca4 <HAL_DMA_Abort+0x228>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d031      	beq.n	8006b52 <HAL_DMA_Abort+0xd6>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a6d      	ldr	r2, [pc, #436]	; (8006ca8 <HAL_DMA_Abort+0x22c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d02c      	beq.n	8006b52 <HAL_DMA_Abort+0xd6>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a6b      	ldr	r2, [pc, #428]	; (8006cac <HAL_DMA_Abort+0x230>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d027      	beq.n	8006b52 <HAL_DMA_Abort+0xd6>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a6a      	ldr	r2, [pc, #424]	; (8006cb0 <HAL_DMA_Abort+0x234>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d022      	beq.n	8006b52 <HAL_DMA_Abort+0xd6>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a68      	ldr	r2, [pc, #416]	; (8006cb4 <HAL_DMA_Abort+0x238>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d01d      	beq.n	8006b52 <HAL_DMA_Abort+0xd6>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a67      	ldr	r2, [pc, #412]	; (8006cb8 <HAL_DMA_Abort+0x23c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d018      	beq.n	8006b52 <HAL_DMA_Abort+0xd6>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a65      	ldr	r2, [pc, #404]	; (8006cbc <HAL_DMA_Abort+0x240>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d013      	beq.n	8006b52 <HAL_DMA_Abort+0xd6>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a64      	ldr	r2, [pc, #400]	; (8006cc0 <HAL_DMA_Abort+0x244>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00e      	beq.n	8006b52 <HAL_DMA_Abort+0xd6>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a62      	ldr	r2, [pc, #392]	; (8006cc4 <HAL_DMA_Abort+0x248>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d009      	beq.n	8006b52 <HAL_DMA_Abort+0xd6>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a61      	ldr	r2, [pc, #388]	; (8006cc8 <HAL_DMA_Abort+0x24c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d004      	beq.n	8006b52 <HAL_DMA_Abort+0xd6>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a5f      	ldr	r2, [pc, #380]	; (8006ccc <HAL_DMA_Abort+0x250>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d101      	bne.n	8006b56 <HAL_DMA_Abort+0xda>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <HAL_DMA_Abort+0xdc>
 8006b56:	2300      	movs	r3, #0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d013      	beq.n	8006b84 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 021e 	bic.w	r2, r2, #30
 8006b6a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	695a      	ldr	r2, [r3, #20]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b7a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	617b      	str	r3, [r7, #20]
 8006b82:	e00a      	b.n	8006b9a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 020e 	bic.w	r2, r2, #14
 8006b92:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a3c      	ldr	r2, [pc, #240]	; (8006c90 <HAL_DMA_Abort+0x214>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d072      	beq.n	8006c8a <HAL_DMA_Abort+0x20e>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a3a      	ldr	r2, [pc, #232]	; (8006c94 <HAL_DMA_Abort+0x218>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d06d      	beq.n	8006c8a <HAL_DMA_Abort+0x20e>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a39      	ldr	r2, [pc, #228]	; (8006c98 <HAL_DMA_Abort+0x21c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d068      	beq.n	8006c8a <HAL_DMA_Abort+0x20e>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a37      	ldr	r2, [pc, #220]	; (8006c9c <HAL_DMA_Abort+0x220>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d063      	beq.n	8006c8a <HAL_DMA_Abort+0x20e>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a36      	ldr	r2, [pc, #216]	; (8006ca0 <HAL_DMA_Abort+0x224>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d05e      	beq.n	8006c8a <HAL_DMA_Abort+0x20e>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a34      	ldr	r2, [pc, #208]	; (8006ca4 <HAL_DMA_Abort+0x228>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d059      	beq.n	8006c8a <HAL_DMA_Abort+0x20e>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a33      	ldr	r2, [pc, #204]	; (8006ca8 <HAL_DMA_Abort+0x22c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d054      	beq.n	8006c8a <HAL_DMA_Abort+0x20e>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a31      	ldr	r2, [pc, #196]	; (8006cac <HAL_DMA_Abort+0x230>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d04f      	beq.n	8006c8a <HAL_DMA_Abort+0x20e>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a30      	ldr	r2, [pc, #192]	; (8006cb0 <HAL_DMA_Abort+0x234>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d04a      	beq.n	8006c8a <HAL_DMA_Abort+0x20e>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a2e      	ldr	r2, [pc, #184]	; (8006cb4 <HAL_DMA_Abort+0x238>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d045      	beq.n	8006c8a <HAL_DMA_Abort+0x20e>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a2d      	ldr	r2, [pc, #180]	; (8006cb8 <HAL_DMA_Abort+0x23c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d040      	beq.n	8006c8a <HAL_DMA_Abort+0x20e>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a2b      	ldr	r2, [pc, #172]	; (8006cbc <HAL_DMA_Abort+0x240>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d03b      	beq.n	8006c8a <HAL_DMA_Abort+0x20e>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a2a      	ldr	r2, [pc, #168]	; (8006cc0 <HAL_DMA_Abort+0x244>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d036      	beq.n	8006c8a <HAL_DMA_Abort+0x20e>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a28      	ldr	r2, [pc, #160]	; (8006cc4 <HAL_DMA_Abort+0x248>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d031      	beq.n	8006c8a <HAL_DMA_Abort+0x20e>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a27      	ldr	r2, [pc, #156]	; (8006cc8 <HAL_DMA_Abort+0x24c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d02c      	beq.n	8006c8a <HAL_DMA_Abort+0x20e>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a25      	ldr	r2, [pc, #148]	; (8006ccc <HAL_DMA_Abort+0x250>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d027      	beq.n	8006c8a <HAL_DMA_Abort+0x20e>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a24      	ldr	r2, [pc, #144]	; (8006cd0 <HAL_DMA_Abort+0x254>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d022      	beq.n	8006c8a <HAL_DMA_Abort+0x20e>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a22      	ldr	r2, [pc, #136]	; (8006cd4 <HAL_DMA_Abort+0x258>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d01d      	beq.n	8006c8a <HAL_DMA_Abort+0x20e>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a21      	ldr	r2, [pc, #132]	; (8006cd8 <HAL_DMA_Abort+0x25c>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d018      	beq.n	8006c8a <HAL_DMA_Abort+0x20e>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a1f      	ldr	r2, [pc, #124]	; (8006cdc <HAL_DMA_Abort+0x260>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d013      	beq.n	8006c8a <HAL_DMA_Abort+0x20e>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a1e      	ldr	r2, [pc, #120]	; (8006ce0 <HAL_DMA_Abort+0x264>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d00e      	beq.n	8006c8a <HAL_DMA_Abort+0x20e>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a1c      	ldr	r2, [pc, #112]	; (8006ce4 <HAL_DMA_Abort+0x268>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d009      	beq.n	8006c8a <HAL_DMA_Abort+0x20e>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a1b      	ldr	r2, [pc, #108]	; (8006ce8 <HAL_DMA_Abort+0x26c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d004      	beq.n	8006c8a <HAL_DMA_Abort+0x20e>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a19      	ldr	r2, [pc, #100]	; (8006cec <HAL_DMA_Abort+0x270>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d132      	bne.n	8006cf0 <HAL_DMA_Abort+0x274>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e031      	b.n	8006cf2 <HAL_DMA_Abort+0x276>
 8006c8e:	bf00      	nop
 8006c90:	40020010 	.word	0x40020010
 8006c94:	40020028 	.word	0x40020028
 8006c98:	40020040 	.word	0x40020040
 8006c9c:	40020058 	.word	0x40020058
 8006ca0:	40020070 	.word	0x40020070
 8006ca4:	40020088 	.word	0x40020088
 8006ca8:	400200a0 	.word	0x400200a0
 8006cac:	400200b8 	.word	0x400200b8
 8006cb0:	40020410 	.word	0x40020410
 8006cb4:	40020428 	.word	0x40020428
 8006cb8:	40020440 	.word	0x40020440
 8006cbc:	40020458 	.word	0x40020458
 8006cc0:	40020470 	.word	0x40020470
 8006cc4:	40020488 	.word	0x40020488
 8006cc8:	400204a0 	.word	0x400204a0
 8006ccc:	400204b8 	.word	0x400204b8
 8006cd0:	58025408 	.word	0x58025408
 8006cd4:	5802541c 	.word	0x5802541c
 8006cd8:	58025430 	.word	0x58025430
 8006cdc:	58025444 	.word	0x58025444
 8006ce0:	58025458 	.word	0x58025458
 8006ce4:	5802546c 	.word	0x5802546c
 8006ce8:	58025480 	.word	0x58025480
 8006cec:	58025494 	.word	0x58025494
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d007      	beq.n	8006d06 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d04:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a6d      	ldr	r2, [pc, #436]	; (8006ec0 <HAL_DMA_Abort+0x444>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d04a      	beq.n	8006da6 <HAL_DMA_Abort+0x32a>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a6b      	ldr	r2, [pc, #428]	; (8006ec4 <HAL_DMA_Abort+0x448>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d045      	beq.n	8006da6 <HAL_DMA_Abort+0x32a>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a6a      	ldr	r2, [pc, #424]	; (8006ec8 <HAL_DMA_Abort+0x44c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d040      	beq.n	8006da6 <HAL_DMA_Abort+0x32a>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a68      	ldr	r2, [pc, #416]	; (8006ecc <HAL_DMA_Abort+0x450>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d03b      	beq.n	8006da6 <HAL_DMA_Abort+0x32a>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a67      	ldr	r2, [pc, #412]	; (8006ed0 <HAL_DMA_Abort+0x454>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d036      	beq.n	8006da6 <HAL_DMA_Abort+0x32a>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a65      	ldr	r2, [pc, #404]	; (8006ed4 <HAL_DMA_Abort+0x458>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d031      	beq.n	8006da6 <HAL_DMA_Abort+0x32a>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a64      	ldr	r2, [pc, #400]	; (8006ed8 <HAL_DMA_Abort+0x45c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d02c      	beq.n	8006da6 <HAL_DMA_Abort+0x32a>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a62      	ldr	r2, [pc, #392]	; (8006edc <HAL_DMA_Abort+0x460>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d027      	beq.n	8006da6 <HAL_DMA_Abort+0x32a>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a61      	ldr	r2, [pc, #388]	; (8006ee0 <HAL_DMA_Abort+0x464>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d022      	beq.n	8006da6 <HAL_DMA_Abort+0x32a>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a5f      	ldr	r2, [pc, #380]	; (8006ee4 <HAL_DMA_Abort+0x468>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d01d      	beq.n	8006da6 <HAL_DMA_Abort+0x32a>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a5e      	ldr	r2, [pc, #376]	; (8006ee8 <HAL_DMA_Abort+0x46c>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d018      	beq.n	8006da6 <HAL_DMA_Abort+0x32a>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a5c      	ldr	r2, [pc, #368]	; (8006eec <HAL_DMA_Abort+0x470>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d013      	beq.n	8006da6 <HAL_DMA_Abort+0x32a>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a5b      	ldr	r2, [pc, #364]	; (8006ef0 <HAL_DMA_Abort+0x474>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d00e      	beq.n	8006da6 <HAL_DMA_Abort+0x32a>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a59      	ldr	r2, [pc, #356]	; (8006ef4 <HAL_DMA_Abort+0x478>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d009      	beq.n	8006da6 <HAL_DMA_Abort+0x32a>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a58      	ldr	r2, [pc, #352]	; (8006ef8 <HAL_DMA_Abort+0x47c>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d004      	beq.n	8006da6 <HAL_DMA_Abort+0x32a>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a56      	ldr	r2, [pc, #344]	; (8006efc <HAL_DMA_Abort+0x480>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d108      	bne.n	8006db8 <HAL_DMA_Abort+0x33c>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0201 	bic.w	r2, r2, #1
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	e007      	b.n	8006dc8 <HAL_DMA_Abort+0x34c>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 0201 	bic.w	r2, r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006dc8:	e013      	b.n	8006df2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006dca:	f7fe fd5f 	bl	800588c <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	2b05      	cmp	r3, #5
 8006dd6:	d90c      	bls.n	8006df2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2203      	movs	r2, #3
 8006de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e12d      	b.n	800704e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1e5      	bne.n	8006dca <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a2f      	ldr	r2, [pc, #188]	; (8006ec0 <HAL_DMA_Abort+0x444>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d04a      	beq.n	8006e9e <HAL_DMA_Abort+0x422>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a2d      	ldr	r2, [pc, #180]	; (8006ec4 <HAL_DMA_Abort+0x448>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d045      	beq.n	8006e9e <HAL_DMA_Abort+0x422>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a2c      	ldr	r2, [pc, #176]	; (8006ec8 <HAL_DMA_Abort+0x44c>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d040      	beq.n	8006e9e <HAL_DMA_Abort+0x422>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a2a      	ldr	r2, [pc, #168]	; (8006ecc <HAL_DMA_Abort+0x450>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d03b      	beq.n	8006e9e <HAL_DMA_Abort+0x422>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a29      	ldr	r2, [pc, #164]	; (8006ed0 <HAL_DMA_Abort+0x454>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d036      	beq.n	8006e9e <HAL_DMA_Abort+0x422>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a27      	ldr	r2, [pc, #156]	; (8006ed4 <HAL_DMA_Abort+0x458>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d031      	beq.n	8006e9e <HAL_DMA_Abort+0x422>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a26      	ldr	r2, [pc, #152]	; (8006ed8 <HAL_DMA_Abort+0x45c>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d02c      	beq.n	8006e9e <HAL_DMA_Abort+0x422>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a24      	ldr	r2, [pc, #144]	; (8006edc <HAL_DMA_Abort+0x460>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d027      	beq.n	8006e9e <HAL_DMA_Abort+0x422>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a23      	ldr	r2, [pc, #140]	; (8006ee0 <HAL_DMA_Abort+0x464>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d022      	beq.n	8006e9e <HAL_DMA_Abort+0x422>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a21      	ldr	r2, [pc, #132]	; (8006ee4 <HAL_DMA_Abort+0x468>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d01d      	beq.n	8006e9e <HAL_DMA_Abort+0x422>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a20      	ldr	r2, [pc, #128]	; (8006ee8 <HAL_DMA_Abort+0x46c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d018      	beq.n	8006e9e <HAL_DMA_Abort+0x422>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a1e      	ldr	r2, [pc, #120]	; (8006eec <HAL_DMA_Abort+0x470>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d013      	beq.n	8006e9e <HAL_DMA_Abort+0x422>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a1d      	ldr	r2, [pc, #116]	; (8006ef0 <HAL_DMA_Abort+0x474>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d00e      	beq.n	8006e9e <HAL_DMA_Abort+0x422>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a1b      	ldr	r2, [pc, #108]	; (8006ef4 <HAL_DMA_Abort+0x478>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d009      	beq.n	8006e9e <HAL_DMA_Abort+0x422>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a1a      	ldr	r2, [pc, #104]	; (8006ef8 <HAL_DMA_Abort+0x47c>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d004      	beq.n	8006e9e <HAL_DMA_Abort+0x422>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a18      	ldr	r2, [pc, #96]	; (8006efc <HAL_DMA_Abort+0x480>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d101      	bne.n	8006ea2 <HAL_DMA_Abort+0x426>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e000      	b.n	8006ea4 <HAL_DMA_Abort+0x428>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d02b      	beq.n	8006f00 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eac:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb2:	f003 031f 	and.w	r3, r3, #31
 8006eb6:	223f      	movs	r2, #63	; 0x3f
 8006eb8:	409a      	lsls	r2, r3
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	609a      	str	r2, [r3, #8]
 8006ebe:	e02a      	b.n	8006f16 <HAL_DMA_Abort+0x49a>
 8006ec0:	40020010 	.word	0x40020010
 8006ec4:	40020028 	.word	0x40020028
 8006ec8:	40020040 	.word	0x40020040
 8006ecc:	40020058 	.word	0x40020058
 8006ed0:	40020070 	.word	0x40020070
 8006ed4:	40020088 	.word	0x40020088
 8006ed8:	400200a0 	.word	0x400200a0
 8006edc:	400200b8 	.word	0x400200b8
 8006ee0:	40020410 	.word	0x40020410
 8006ee4:	40020428 	.word	0x40020428
 8006ee8:	40020440 	.word	0x40020440
 8006eec:	40020458 	.word	0x40020458
 8006ef0:	40020470 	.word	0x40020470
 8006ef4:	40020488 	.word	0x40020488
 8006ef8:	400204a0 	.word	0x400204a0
 8006efc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f04:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f0a:	f003 031f 	and.w	r3, r3, #31
 8006f0e:	2201      	movs	r2, #1
 8006f10:	409a      	lsls	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a4f      	ldr	r2, [pc, #316]	; (8007058 <HAL_DMA_Abort+0x5dc>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d072      	beq.n	8007006 <HAL_DMA_Abort+0x58a>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a4d      	ldr	r2, [pc, #308]	; (800705c <HAL_DMA_Abort+0x5e0>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d06d      	beq.n	8007006 <HAL_DMA_Abort+0x58a>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a4c      	ldr	r2, [pc, #304]	; (8007060 <HAL_DMA_Abort+0x5e4>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d068      	beq.n	8007006 <HAL_DMA_Abort+0x58a>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a4a      	ldr	r2, [pc, #296]	; (8007064 <HAL_DMA_Abort+0x5e8>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d063      	beq.n	8007006 <HAL_DMA_Abort+0x58a>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a49      	ldr	r2, [pc, #292]	; (8007068 <HAL_DMA_Abort+0x5ec>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d05e      	beq.n	8007006 <HAL_DMA_Abort+0x58a>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a47      	ldr	r2, [pc, #284]	; (800706c <HAL_DMA_Abort+0x5f0>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d059      	beq.n	8007006 <HAL_DMA_Abort+0x58a>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a46      	ldr	r2, [pc, #280]	; (8007070 <HAL_DMA_Abort+0x5f4>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d054      	beq.n	8007006 <HAL_DMA_Abort+0x58a>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a44      	ldr	r2, [pc, #272]	; (8007074 <HAL_DMA_Abort+0x5f8>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d04f      	beq.n	8007006 <HAL_DMA_Abort+0x58a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a43      	ldr	r2, [pc, #268]	; (8007078 <HAL_DMA_Abort+0x5fc>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d04a      	beq.n	8007006 <HAL_DMA_Abort+0x58a>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a41      	ldr	r2, [pc, #260]	; (800707c <HAL_DMA_Abort+0x600>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d045      	beq.n	8007006 <HAL_DMA_Abort+0x58a>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a40      	ldr	r2, [pc, #256]	; (8007080 <HAL_DMA_Abort+0x604>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d040      	beq.n	8007006 <HAL_DMA_Abort+0x58a>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a3e      	ldr	r2, [pc, #248]	; (8007084 <HAL_DMA_Abort+0x608>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d03b      	beq.n	8007006 <HAL_DMA_Abort+0x58a>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a3d      	ldr	r2, [pc, #244]	; (8007088 <HAL_DMA_Abort+0x60c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d036      	beq.n	8007006 <HAL_DMA_Abort+0x58a>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a3b      	ldr	r2, [pc, #236]	; (800708c <HAL_DMA_Abort+0x610>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d031      	beq.n	8007006 <HAL_DMA_Abort+0x58a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a3a      	ldr	r2, [pc, #232]	; (8007090 <HAL_DMA_Abort+0x614>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d02c      	beq.n	8007006 <HAL_DMA_Abort+0x58a>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a38      	ldr	r2, [pc, #224]	; (8007094 <HAL_DMA_Abort+0x618>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d027      	beq.n	8007006 <HAL_DMA_Abort+0x58a>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a37      	ldr	r2, [pc, #220]	; (8007098 <HAL_DMA_Abort+0x61c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d022      	beq.n	8007006 <HAL_DMA_Abort+0x58a>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a35      	ldr	r2, [pc, #212]	; (800709c <HAL_DMA_Abort+0x620>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d01d      	beq.n	8007006 <HAL_DMA_Abort+0x58a>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a34      	ldr	r2, [pc, #208]	; (80070a0 <HAL_DMA_Abort+0x624>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d018      	beq.n	8007006 <HAL_DMA_Abort+0x58a>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a32      	ldr	r2, [pc, #200]	; (80070a4 <HAL_DMA_Abort+0x628>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d013      	beq.n	8007006 <HAL_DMA_Abort+0x58a>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a31      	ldr	r2, [pc, #196]	; (80070a8 <HAL_DMA_Abort+0x62c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d00e      	beq.n	8007006 <HAL_DMA_Abort+0x58a>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a2f      	ldr	r2, [pc, #188]	; (80070ac <HAL_DMA_Abort+0x630>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d009      	beq.n	8007006 <HAL_DMA_Abort+0x58a>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a2e      	ldr	r2, [pc, #184]	; (80070b0 <HAL_DMA_Abort+0x634>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d004      	beq.n	8007006 <HAL_DMA_Abort+0x58a>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a2c      	ldr	r2, [pc, #176]	; (80070b4 <HAL_DMA_Abort+0x638>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d101      	bne.n	800700a <HAL_DMA_Abort+0x58e>
 8007006:	2301      	movs	r3, #1
 8007008:	e000      	b.n	800700c <HAL_DMA_Abort+0x590>
 800700a:	2300      	movs	r3, #0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d015      	beq.n	800703c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007018:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00c      	beq.n	800703c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800702c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007030:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800703a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3718      	adds	r7, #24
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	40020010 	.word	0x40020010
 800705c:	40020028 	.word	0x40020028
 8007060:	40020040 	.word	0x40020040
 8007064:	40020058 	.word	0x40020058
 8007068:	40020070 	.word	0x40020070
 800706c:	40020088 	.word	0x40020088
 8007070:	400200a0 	.word	0x400200a0
 8007074:	400200b8 	.word	0x400200b8
 8007078:	40020410 	.word	0x40020410
 800707c:	40020428 	.word	0x40020428
 8007080:	40020440 	.word	0x40020440
 8007084:	40020458 	.word	0x40020458
 8007088:	40020470 	.word	0x40020470
 800708c:	40020488 	.word	0x40020488
 8007090:	400204a0 	.word	0x400204a0
 8007094:	400204b8 	.word	0x400204b8
 8007098:	58025408 	.word	0x58025408
 800709c:	5802541c 	.word	0x5802541c
 80070a0:	58025430 	.word	0x58025430
 80070a4:	58025444 	.word	0x58025444
 80070a8:	58025458 	.word	0x58025458
 80070ac:	5802546c 	.word	0x5802546c
 80070b0:	58025480 	.word	0x58025480
 80070b4:	58025494 	.word	0x58025494

080070b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e205      	b.n	80074d6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d004      	beq.n	80070e0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2280      	movs	r2, #128	; 0x80
 80070da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e1fa      	b.n	80074d6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a8c      	ldr	r2, [pc, #560]	; (8007318 <HAL_DMA_Abort_IT+0x260>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d04a      	beq.n	8007180 <HAL_DMA_Abort_IT+0xc8>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a8b      	ldr	r2, [pc, #556]	; (800731c <HAL_DMA_Abort_IT+0x264>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d045      	beq.n	8007180 <HAL_DMA_Abort_IT+0xc8>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a89      	ldr	r2, [pc, #548]	; (8007320 <HAL_DMA_Abort_IT+0x268>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d040      	beq.n	8007180 <HAL_DMA_Abort_IT+0xc8>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a88      	ldr	r2, [pc, #544]	; (8007324 <HAL_DMA_Abort_IT+0x26c>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d03b      	beq.n	8007180 <HAL_DMA_Abort_IT+0xc8>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a86      	ldr	r2, [pc, #536]	; (8007328 <HAL_DMA_Abort_IT+0x270>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d036      	beq.n	8007180 <HAL_DMA_Abort_IT+0xc8>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a85      	ldr	r2, [pc, #532]	; (800732c <HAL_DMA_Abort_IT+0x274>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d031      	beq.n	8007180 <HAL_DMA_Abort_IT+0xc8>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a83      	ldr	r2, [pc, #524]	; (8007330 <HAL_DMA_Abort_IT+0x278>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d02c      	beq.n	8007180 <HAL_DMA_Abort_IT+0xc8>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a82      	ldr	r2, [pc, #520]	; (8007334 <HAL_DMA_Abort_IT+0x27c>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d027      	beq.n	8007180 <HAL_DMA_Abort_IT+0xc8>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a80      	ldr	r2, [pc, #512]	; (8007338 <HAL_DMA_Abort_IT+0x280>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d022      	beq.n	8007180 <HAL_DMA_Abort_IT+0xc8>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a7f      	ldr	r2, [pc, #508]	; (800733c <HAL_DMA_Abort_IT+0x284>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d01d      	beq.n	8007180 <HAL_DMA_Abort_IT+0xc8>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a7d      	ldr	r2, [pc, #500]	; (8007340 <HAL_DMA_Abort_IT+0x288>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d018      	beq.n	8007180 <HAL_DMA_Abort_IT+0xc8>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a7c      	ldr	r2, [pc, #496]	; (8007344 <HAL_DMA_Abort_IT+0x28c>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d013      	beq.n	8007180 <HAL_DMA_Abort_IT+0xc8>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a7a      	ldr	r2, [pc, #488]	; (8007348 <HAL_DMA_Abort_IT+0x290>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d00e      	beq.n	8007180 <HAL_DMA_Abort_IT+0xc8>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a79      	ldr	r2, [pc, #484]	; (800734c <HAL_DMA_Abort_IT+0x294>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d009      	beq.n	8007180 <HAL_DMA_Abort_IT+0xc8>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a77      	ldr	r2, [pc, #476]	; (8007350 <HAL_DMA_Abort_IT+0x298>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d004      	beq.n	8007180 <HAL_DMA_Abort_IT+0xc8>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a76      	ldr	r2, [pc, #472]	; (8007354 <HAL_DMA_Abort_IT+0x29c>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d101      	bne.n	8007184 <HAL_DMA_Abort_IT+0xcc>
 8007180:	2301      	movs	r3, #1
 8007182:	e000      	b.n	8007186 <HAL_DMA_Abort_IT+0xce>
 8007184:	2300      	movs	r3, #0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d065      	beq.n	8007256 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2204      	movs	r2, #4
 800718e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a60      	ldr	r2, [pc, #384]	; (8007318 <HAL_DMA_Abort_IT+0x260>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d04a      	beq.n	8007232 <HAL_DMA_Abort_IT+0x17a>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a5e      	ldr	r2, [pc, #376]	; (800731c <HAL_DMA_Abort_IT+0x264>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d045      	beq.n	8007232 <HAL_DMA_Abort_IT+0x17a>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a5d      	ldr	r2, [pc, #372]	; (8007320 <HAL_DMA_Abort_IT+0x268>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d040      	beq.n	8007232 <HAL_DMA_Abort_IT+0x17a>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a5b      	ldr	r2, [pc, #364]	; (8007324 <HAL_DMA_Abort_IT+0x26c>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d03b      	beq.n	8007232 <HAL_DMA_Abort_IT+0x17a>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a5a      	ldr	r2, [pc, #360]	; (8007328 <HAL_DMA_Abort_IT+0x270>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d036      	beq.n	8007232 <HAL_DMA_Abort_IT+0x17a>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a58      	ldr	r2, [pc, #352]	; (800732c <HAL_DMA_Abort_IT+0x274>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d031      	beq.n	8007232 <HAL_DMA_Abort_IT+0x17a>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a57      	ldr	r2, [pc, #348]	; (8007330 <HAL_DMA_Abort_IT+0x278>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d02c      	beq.n	8007232 <HAL_DMA_Abort_IT+0x17a>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a55      	ldr	r2, [pc, #340]	; (8007334 <HAL_DMA_Abort_IT+0x27c>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d027      	beq.n	8007232 <HAL_DMA_Abort_IT+0x17a>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a54      	ldr	r2, [pc, #336]	; (8007338 <HAL_DMA_Abort_IT+0x280>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d022      	beq.n	8007232 <HAL_DMA_Abort_IT+0x17a>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a52      	ldr	r2, [pc, #328]	; (800733c <HAL_DMA_Abort_IT+0x284>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d01d      	beq.n	8007232 <HAL_DMA_Abort_IT+0x17a>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a51      	ldr	r2, [pc, #324]	; (8007340 <HAL_DMA_Abort_IT+0x288>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d018      	beq.n	8007232 <HAL_DMA_Abort_IT+0x17a>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a4f      	ldr	r2, [pc, #316]	; (8007344 <HAL_DMA_Abort_IT+0x28c>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d013      	beq.n	8007232 <HAL_DMA_Abort_IT+0x17a>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a4e      	ldr	r2, [pc, #312]	; (8007348 <HAL_DMA_Abort_IT+0x290>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d00e      	beq.n	8007232 <HAL_DMA_Abort_IT+0x17a>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a4c      	ldr	r2, [pc, #304]	; (800734c <HAL_DMA_Abort_IT+0x294>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d009      	beq.n	8007232 <HAL_DMA_Abort_IT+0x17a>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a4b      	ldr	r2, [pc, #300]	; (8007350 <HAL_DMA_Abort_IT+0x298>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d004      	beq.n	8007232 <HAL_DMA_Abort_IT+0x17a>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a49      	ldr	r2, [pc, #292]	; (8007354 <HAL_DMA_Abort_IT+0x29c>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d108      	bne.n	8007244 <HAL_DMA_Abort_IT+0x18c>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f022 0201 	bic.w	r2, r2, #1
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	e147      	b.n	80074d4 <HAL_DMA_Abort_IT+0x41c>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f022 0201 	bic.w	r2, r2, #1
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	e13e      	b.n	80074d4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f022 020e 	bic.w	r2, r2, #14
 8007264:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a2b      	ldr	r2, [pc, #172]	; (8007318 <HAL_DMA_Abort_IT+0x260>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d04a      	beq.n	8007306 <HAL_DMA_Abort_IT+0x24e>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a29      	ldr	r2, [pc, #164]	; (800731c <HAL_DMA_Abort_IT+0x264>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d045      	beq.n	8007306 <HAL_DMA_Abort_IT+0x24e>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a28      	ldr	r2, [pc, #160]	; (8007320 <HAL_DMA_Abort_IT+0x268>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d040      	beq.n	8007306 <HAL_DMA_Abort_IT+0x24e>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a26      	ldr	r2, [pc, #152]	; (8007324 <HAL_DMA_Abort_IT+0x26c>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d03b      	beq.n	8007306 <HAL_DMA_Abort_IT+0x24e>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a25      	ldr	r2, [pc, #148]	; (8007328 <HAL_DMA_Abort_IT+0x270>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d036      	beq.n	8007306 <HAL_DMA_Abort_IT+0x24e>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a23      	ldr	r2, [pc, #140]	; (800732c <HAL_DMA_Abort_IT+0x274>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d031      	beq.n	8007306 <HAL_DMA_Abort_IT+0x24e>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a22      	ldr	r2, [pc, #136]	; (8007330 <HAL_DMA_Abort_IT+0x278>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d02c      	beq.n	8007306 <HAL_DMA_Abort_IT+0x24e>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a20      	ldr	r2, [pc, #128]	; (8007334 <HAL_DMA_Abort_IT+0x27c>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d027      	beq.n	8007306 <HAL_DMA_Abort_IT+0x24e>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a1f      	ldr	r2, [pc, #124]	; (8007338 <HAL_DMA_Abort_IT+0x280>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d022      	beq.n	8007306 <HAL_DMA_Abort_IT+0x24e>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a1d      	ldr	r2, [pc, #116]	; (800733c <HAL_DMA_Abort_IT+0x284>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d01d      	beq.n	8007306 <HAL_DMA_Abort_IT+0x24e>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a1c      	ldr	r2, [pc, #112]	; (8007340 <HAL_DMA_Abort_IT+0x288>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d018      	beq.n	8007306 <HAL_DMA_Abort_IT+0x24e>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a1a      	ldr	r2, [pc, #104]	; (8007344 <HAL_DMA_Abort_IT+0x28c>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d013      	beq.n	8007306 <HAL_DMA_Abort_IT+0x24e>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a19      	ldr	r2, [pc, #100]	; (8007348 <HAL_DMA_Abort_IT+0x290>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d00e      	beq.n	8007306 <HAL_DMA_Abort_IT+0x24e>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a17      	ldr	r2, [pc, #92]	; (800734c <HAL_DMA_Abort_IT+0x294>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d009      	beq.n	8007306 <HAL_DMA_Abort_IT+0x24e>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a16      	ldr	r2, [pc, #88]	; (8007350 <HAL_DMA_Abort_IT+0x298>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d004      	beq.n	8007306 <HAL_DMA_Abort_IT+0x24e>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a14      	ldr	r2, [pc, #80]	; (8007354 <HAL_DMA_Abort_IT+0x29c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d128      	bne.n	8007358 <HAL_DMA_Abort_IT+0x2a0>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f022 0201 	bic.w	r2, r2, #1
 8007314:	601a      	str	r2, [r3, #0]
 8007316:	e027      	b.n	8007368 <HAL_DMA_Abort_IT+0x2b0>
 8007318:	40020010 	.word	0x40020010
 800731c:	40020028 	.word	0x40020028
 8007320:	40020040 	.word	0x40020040
 8007324:	40020058 	.word	0x40020058
 8007328:	40020070 	.word	0x40020070
 800732c:	40020088 	.word	0x40020088
 8007330:	400200a0 	.word	0x400200a0
 8007334:	400200b8 	.word	0x400200b8
 8007338:	40020410 	.word	0x40020410
 800733c:	40020428 	.word	0x40020428
 8007340:	40020440 	.word	0x40020440
 8007344:	40020458 	.word	0x40020458
 8007348:	40020470 	.word	0x40020470
 800734c:	40020488 	.word	0x40020488
 8007350:	400204a0 	.word	0x400204a0
 8007354:	400204b8 	.word	0x400204b8
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f022 0201 	bic.w	r2, r2, #1
 8007366:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a5c      	ldr	r2, [pc, #368]	; (80074e0 <HAL_DMA_Abort_IT+0x428>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d072      	beq.n	8007458 <HAL_DMA_Abort_IT+0x3a0>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a5b      	ldr	r2, [pc, #364]	; (80074e4 <HAL_DMA_Abort_IT+0x42c>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d06d      	beq.n	8007458 <HAL_DMA_Abort_IT+0x3a0>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a59      	ldr	r2, [pc, #356]	; (80074e8 <HAL_DMA_Abort_IT+0x430>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d068      	beq.n	8007458 <HAL_DMA_Abort_IT+0x3a0>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a58      	ldr	r2, [pc, #352]	; (80074ec <HAL_DMA_Abort_IT+0x434>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d063      	beq.n	8007458 <HAL_DMA_Abort_IT+0x3a0>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a56      	ldr	r2, [pc, #344]	; (80074f0 <HAL_DMA_Abort_IT+0x438>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d05e      	beq.n	8007458 <HAL_DMA_Abort_IT+0x3a0>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a55      	ldr	r2, [pc, #340]	; (80074f4 <HAL_DMA_Abort_IT+0x43c>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d059      	beq.n	8007458 <HAL_DMA_Abort_IT+0x3a0>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a53      	ldr	r2, [pc, #332]	; (80074f8 <HAL_DMA_Abort_IT+0x440>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d054      	beq.n	8007458 <HAL_DMA_Abort_IT+0x3a0>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a52      	ldr	r2, [pc, #328]	; (80074fc <HAL_DMA_Abort_IT+0x444>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d04f      	beq.n	8007458 <HAL_DMA_Abort_IT+0x3a0>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a50      	ldr	r2, [pc, #320]	; (8007500 <HAL_DMA_Abort_IT+0x448>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d04a      	beq.n	8007458 <HAL_DMA_Abort_IT+0x3a0>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a4f      	ldr	r2, [pc, #316]	; (8007504 <HAL_DMA_Abort_IT+0x44c>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d045      	beq.n	8007458 <HAL_DMA_Abort_IT+0x3a0>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a4d      	ldr	r2, [pc, #308]	; (8007508 <HAL_DMA_Abort_IT+0x450>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d040      	beq.n	8007458 <HAL_DMA_Abort_IT+0x3a0>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a4c      	ldr	r2, [pc, #304]	; (800750c <HAL_DMA_Abort_IT+0x454>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d03b      	beq.n	8007458 <HAL_DMA_Abort_IT+0x3a0>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a4a      	ldr	r2, [pc, #296]	; (8007510 <HAL_DMA_Abort_IT+0x458>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d036      	beq.n	8007458 <HAL_DMA_Abort_IT+0x3a0>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a49      	ldr	r2, [pc, #292]	; (8007514 <HAL_DMA_Abort_IT+0x45c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d031      	beq.n	8007458 <HAL_DMA_Abort_IT+0x3a0>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a47      	ldr	r2, [pc, #284]	; (8007518 <HAL_DMA_Abort_IT+0x460>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d02c      	beq.n	8007458 <HAL_DMA_Abort_IT+0x3a0>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a46      	ldr	r2, [pc, #280]	; (800751c <HAL_DMA_Abort_IT+0x464>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d027      	beq.n	8007458 <HAL_DMA_Abort_IT+0x3a0>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a44      	ldr	r2, [pc, #272]	; (8007520 <HAL_DMA_Abort_IT+0x468>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d022      	beq.n	8007458 <HAL_DMA_Abort_IT+0x3a0>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a43      	ldr	r2, [pc, #268]	; (8007524 <HAL_DMA_Abort_IT+0x46c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d01d      	beq.n	8007458 <HAL_DMA_Abort_IT+0x3a0>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a41      	ldr	r2, [pc, #260]	; (8007528 <HAL_DMA_Abort_IT+0x470>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d018      	beq.n	8007458 <HAL_DMA_Abort_IT+0x3a0>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a40      	ldr	r2, [pc, #256]	; (800752c <HAL_DMA_Abort_IT+0x474>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d013      	beq.n	8007458 <HAL_DMA_Abort_IT+0x3a0>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a3e      	ldr	r2, [pc, #248]	; (8007530 <HAL_DMA_Abort_IT+0x478>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d00e      	beq.n	8007458 <HAL_DMA_Abort_IT+0x3a0>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a3d      	ldr	r2, [pc, #244]	; (8007534 <HAL_DMA_Abort_IT+0x47c>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d009      	beq.n	8007458 <HAL_DMA_Abort_IT+0x3a0>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a3b      	ldr	r2, [pc, #236]	; (8007538 <HAL_DMA_Abort_IT+0x480>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d004      	beq.n	8007458 <HAL_DMA_Abort_IT+0x3a0>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a3a      	ldr	r2, [pc, #232]	; (800753c <HAL_DMA_Abort_IT+0x484>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d101      	bne.n	800745c <HAL_DMA_Abort_IT+0x3a4>
 8007458:	2301      	movs	r3, #1
 800745a:	e000      	b.n	800745e <HAL_DMA_Abort_IT+0x3a6>
 800745c:	2300      	movs	r3, #0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d028      	beq.n	80074b4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800746c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007470:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007476:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800747c:	f003 031f 	and.w	r3, r3, #31
 8007480:	2201      	movs	r2, #1
 8007482:	409a      	lsls	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007490:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00c      	beq.n	80074b4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80074b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d003      	beq.n	80074d4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	40020010 	.word	0x40020010
 80074e4:	40020028 	.word	0x40020028
 80074e8:	40020040 	.word	0x40020040
 80074ec:	40020058 	.word	0x40020058
 80074f0:	40020070 	.word	0x40020070
 80074f4:	40020088 	.word	0x40020088
 80074f8:	400200a0 	.word	0x400200a0
 80074fc:	400200b8 	.word	0x400200b8
 8007500:	40020410 	.word	0x40020410
 8007504:	40020428 	.word	0x40020428
 8007508:	40020440 	.word	0x40020440
 800750c:	40020458 	.word	0x40020458
 8007510:	40020470 	.word	0x40020470
 8007514:	40020488 	.word	0x40020488
 8007518:	400204a0 	.word	0x400204a0
 800751c:	400204b8 	.word	0x400204b8
 8007520:	58025408 	.word	0x58025408
 8007524:	5802541c 	.word	0x5802541c
 8007528:	58025430 	.word	0x58025430
 800752c:	58025444 	.word	0x58025444
 8007530:	58025458 	.word	0x58025458
 8007534:	5802546c 	.word	0x5802546c
 8007538:	58025480 	.word	0x58025480
 800753c:	58025494 	.word	0x58025494

08007540 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b08a      	sub	sp, #40	; 0x28
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007548:	2300      	movs	r3, #0
 800754a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800754c:	4b67      	ldr	r3, [pc, #412]	; (80076ec <HAL_DMA_IRQHandler+0x1ac>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a67      	ldr	r2, [pc, #412]	; (80076f0 <HAL_DMA_IRQHandler+0x1b0>)
 8007552:	fba2 2303 	umull	r2, r3, r2, r3
 8007556:	0a9b      	lsrs	r3, r3, #10
 8007558:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800755e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007564:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a5f      	ldr	r2, [pc, #380]	; (80076f4 <HAL_DMA_IRQHandler+0x1b4>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d04a      	beq.n	8007612 <HAL_DMA_IRQHandler+0xd2>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a5d      	ldr	r2, [pc, #372]	; (80076f8 <HAL_DMA_IRQHandler+0x1b8>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d045      	beq.n	8007612 <HAL_DMA_IRQHandler+0xd2>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a5c      	ldr	r2, [pc, #368]	; (80076fc <HAL_DMA_IRQHandler+0x1bc>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d040      	beq.n	8007612 <HAL_DMA_IRQHandler+0xd2>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a5a      	ldr	r2, [pc, #360]	; (8007700 <HAL_DMA_IRQHandler+0x1c0>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d03b      	beq.n	8007612 <HAL_DMA_IRQHandler+0xd2>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a59      	ldr	r2, [pc, #356]	; (8007704 <HAL_DMA_IRQHandler+0x1c4>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d036      	beq.n	8007612 <HAL_DMA_IRQHandler+0xd2>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a57      	ldr	r2, [pc, #348]	; (8007708 <HAL_DMA_IRQHandler+0x1c8>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d031      	beq.n	8007612 <HAL_DMA_IRQHandler+0xd2>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a56      	ldr	r2, [pc, #344]	; (800770c <HAL_DMA_IRQHandler+0x1cc>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d02c      	beq.n	8007612 <HAL_DMA_IRQHandler+0xd2>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a54      	ldr	r2, [pc, #336]	; (8007710 <HAL_DMA_IRQHandler+0x1d0>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d027      	beq.n	8007612 <HAL_DMA_IRQHandler+0xd2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a53      	ldr	r2, [pc, #332]	; (8007714 <HAL_DMA_IRQHandler+0x1d4>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d022      	beq.n	8007612 <HAL_DMA_IRQHandler+0xd2>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a51      	ldr	r2, [pc, #324]	; (8007718 <HAL_DMA_IRQHandler+0x1d8>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d01d      	beq.n	8007612 <HAL_DMA_IRQHandler+0xd2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a50      	ldr	r2, [pc, #320]	; (800771c <HAL_DMA_IRQHandler+0x1dc>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d018      	beq.n	8007612 <HAL_DMA_IRQHandler+0xd2>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a4e      	ldr	r2, [pc, #312]	; (8007720 <HAL_DMA_IRQHandler+0x1e0>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d013      	beq.n	8007612 <HAL_DMA_IRQHandler+0xd2>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a4d      	ldr	r2, [pc, #308]	; (8007724 <HAL_DMA_IRQHandler+0x1e4>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d00e      	beq.n	8007612 <HAL_DMA_IRQHandler+0xd2>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a4b      	ldr	r2, [pc, #300]	; (8007728 <HAL_DMA_IRQHandler+0x1e8>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d009      	beq.n	8007612 <HAL_DMA_IRQHandler+0xd2>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a4a      	ldr	r2, [pc, #296]	; (800772c <HAL_DMA_IRQHandler+0x1ec>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d004      	beq.n	8007612 <HAL_DMA_IRQHandler+0xd2>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a48      	ldr	r2, [pc, #288]	; (8007730 <HAL_DMA_IRQHandler+0x1f0>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d101      	bne.n	8007616 <HAL_DMA_IRQHandler+0xd6>
 8007612:	2301      	movs	r3, #1
 8007614:	e000      	b.n	8007618 <HAL_DMA_IRQHandler+0xd8>
 8007616:	2300      	movs	r3, #0
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 842b 	beq.w	8007e74 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007622:	f003 031f 	and.w	r3, r3, #31
 8007626:	2208      	movs	r2, #8
 8007628:	409a      	lsls	r2, r3
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	4013      	ands	r3, r2
 800762e:	2b00      	cmp	r3, #0
 8007630:	f000 80a2 	beq.w	8007778 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a2e      	ldr	r2, [pc, #184]	; (80076f4 <HAL_DMA_IRQHandler+0x1b4>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d04a      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x194>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a2d      	ldr	r2, [pc, #180]	; (80076f8 <HAL_DMA_IRQHandler+0x1b8>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d045      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x194>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a2b      	ldr	r2, [pc, #172]	; (80076fc <HAL_DMA_IRQHandler+0x1bc>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d040      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x194>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a2a      	ldr	r2, [pc, #168]	; (8007700 <HAL_DMA_IRQHandler+0x1c0>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d03b      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x194>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a28      	ldr	r2, [pc, #160]	; (8007704 <HAL_DMA_IRQHandler+0x1c4>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d036      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x194>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a27      	ldr	r2, [pc, #156]	; (8007708 <HAL_DMA_IRQHandler+0x1c8>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d031      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x194>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a25      	ldr	r2, [pc, #148]	; (800770c <HAL_DMA_IRQHandler+0x1cc>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d02c      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x194>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a24      	ldr	r2, [pc, #144]	; (8007710 <HAL_DMA_IRQHandler+0x1d0>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d027      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x194>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a22      	ldr	r2, [pc, #136]	; (8007714 <HAL_DMA_IRQHandler+0x1d4>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d022      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x194>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a21      	ldr	r2, [pc, #132]	; (8007718 <HAL_DMA_IRQHandler+0x1d8>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d01d      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x194>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a1f      	ldr	r2, [pc, #124]	; (800771c <HAL_DMA_IRQHandler+0x1dc>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d018      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x194>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a1e      	ldr	r2, [pc, #120]	; (8007720 <HAL_DMA_IRQHandler+0x1e0>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d013      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x194>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a1c      	ldr	r2, [pc, #112]	; (8007724 <HAL_DMA_IRQHandler+0x1e4>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d00e      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x194>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a1b      	ldr	r2, [pc, #108]	; (8007728 <HAL_DMA_IRQHandler+0x1e8>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d009      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x194>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a19      	ldr	r2, [pc, #100]	; (800772c <HAL_DMA_IRQHandler+0x1ec>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d004      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x194>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a18      	ldr	r2, [pc, #96]	; (8007730 <HAL_DMA_IRQHandler+0x1f0>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d12f      	bne.n	8007734 <HAL_DMA_IRQHandler+0x1f4>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0304 	and.w	r3, r3, #4
 80076de:	2b00      	cmp	r3, #0
 80076e0:	bf14      	ite	ne
 80076e2:	2301      	movne	r3, #1
 80076e4:	2300      	moveq	r3, #0
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	e02e      	b.n	8007748 <HAL_DMA_IRQHandler+0x208>
 80076ea:	bf00      	nop
 80076ec:	24000038 	.word	0x24000038
 80076f0:	1b4e81b5 	.word	0x1b4e81b5
 80076f4:	40020010 	.word	0x40020010
 80076f8:	40020028 	.word	0x40020028
 80076fc:	40020040 	.word	0x40020040
 8007700:	40020058 	.word	0x40020058
 8007704:	40020070 	.word	0x40020070
 8007708:	40020088 	.word	0x40020088
 800770c:	400200a0 	.word	0x400200a0
 8007710:	400200b8 	.word	0x400200b8
 8007714:	40020410 	.word	0x40020410
 8007718:	40020428 	.word	0x40020428
 800771c:	40020440 	.word	0x40020440
 8007720:	40020458 	.word	0x40020458
 8007724:	40020470 	.word	0x40020470
 8007728:	40020488 	.word	0x40020488
 800772c:	400204a0 	.word	0x400204a0
 8007730:	400204b8 	.word	0x400204b8
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0308 	and.w	r3, r3, #8
 800773e:	2b00      	cmp	r3, #0
 8007740:	bf14      	ite	ne
 8007742:	2301      	movne	r3, #1
 8007744:	2300      	moveq	r3, #0
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b00      	cmp	r3, #0
 800774a:	d015      	beq.n	8007778 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 0204 	bic.w	r2, r2, #4
 800775a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007760:	f003 031f 	and.w	r3, r3, #31
 8007764:	2208      	movs	r2, #8
 8007766:	409a      	lsls	r2, r3
 8007768:	6a3b      	ldr	r3, [r7, #32]
 800776a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007770:	f043 0201 	orr.w	r2, r3, #1
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800777c:	f003 031f 	and.w	r3, r3, #31
 8007780:	69ba      	ldr	r2, [r7, #24]
 8007782:	fa22 f303 	lsr.w	r3, r2, r3
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b00      	cmp	r3, #0
 800778c:	d06e      	beq.n	800786c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a69      	ldr	r2, [pc, #420]	; (8007938 <HAL_DMA_IRQHandler+0x3f8>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d04a      	beq.n	800782e <HAL_DMA_IRQHandler+0x2ee>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a67      	ldr	r2, [pc, #412]	; (800793c <HAL_DMA_IRQHandler+0x3fc>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d045      	beq.n	800782e <HAL_DMA_IRQHandler+0x2ee>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a66      	ldr	r2, [pc, #408]	; (8007940 <HAL_DMA_IRQHandler+0x400>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d040      	beq.n	800782e <HAL_DMA_IRQHandler+0x2ee>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a64      	ldr	r2, [pc, #400]	; (8007944 <HAL_DMA_IRQHandler+0x404>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d03b      	beq.n	800782e <HAL_DMA_IRQHandler+0x2ee>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a63      	ldr	r2, [pc, #396]	; (8007948 <HAL_DMA_IRQHandler+0x408>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d036      	beq.n	800782e <HAL_DMA_IRQHandler+0x2ee>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a61      	ldr	r2, [pc, #388]	; (800794c <HAL_DMA_IRQHandler+0x40c>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d031      	beq.n	800782e <HAL_DMA_IRQHandler+0x2ee>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a60      	ldr	r2, [pc, #384]	; (8007950 <HAL_DMA_IRQHandler+0x410>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d02c      	beq.n	800782e <HAL_DMA_IRQHandler+0x2ee>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a5e      	ldr	r2, [pc, #376]	; (8007954 <HAL_DMA_IRQHandler+0x414>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d027      	beq.n	800782e <HAL_DMA_IRQHandler+0x2ee>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a5d      	ldr	r2, [pc, #372]	; (8007958 <HAL_DMA_IRQHandler+0x418>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d022      	beq.n	800782e <HAL_DMA_IRQHandler+0x2ee>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a5b      	ldr	r2, [pc, #364]	; (800795c <HAL_DMA_IRQHandler+0x41c>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d01d      	beq.n	800782e <HAL_DMA_IRQHandler+0x2ee>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a5a      	ldr	r2, [pc, #360]	; (8007960 <HAL_DMA_IRQHandler+0x420>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d018      	beq.n	800782e <HAL_DMA_IRQHandler+0x2ee>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a58      	ldr	r2, [pc, #352]	; (8007964 <HAL_DMA_IRQHandler+0x424>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d013      	beq.n	800782e <HAL_DMA_IRQHandler+0x2ee>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a57      	ldr	r2, [pc, #348]	; (8007968 <HAL_DMA_IRQHandler+0x428>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d00e      	beq.n	800782e <HAL_DMA_IRQHandler+0x2ee>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a55      	ldr	r2, [pc, #340]	; (800796c <HAL_DMA_IRQHandler+0x42c>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d009      	beq.n	800782e <HAL_DMA_IRQHandler+0x2ee>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a54      	ldr	r2, [pc, #336]	; (8007970 <HAL_DMA_IRQHandler+0x430>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d004      	beq.n	800782e <HAL_DMA_IRQHandler+0x2ee>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a52      	ldr	r2, [pc, #328]	; (8007974 <HAL_DMA_IRQHandler+0x434>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d10a      	bne.n	8007844 <HAL_DMA_IRQHandler+0x304>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	695b      	ldr	r3, [r3, #20]
 8007834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007838:	2b00      	cmp	r3, #0
 800783a:	bf14      	ite	ne
 800783c:	2301      	movne	r3, #1
 800783e:	2300      	moveq	r3, #0
 8007840:	b2db      	uxtb	r3, r3
 8007842:	e003      	b.n	800784c <HAL_DMA_IRQHandler+0x30c>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2300      	movs	r3, #0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00d      	beq.n	800786c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007854:	f003 031f 	and.w	r3, r3, #31
 8007858:	2201      	movs	r2, #1
 800785a:	409a      	lsls	r2, r3
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007864:	f043 0202 	orr.w	r2, r3, #2
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007870:	f003 031f 	and.w	r3, r3, #31
 8007874:	2204      	movs	r2, #4
 8007876:	409a      	lsls	r2, r3
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	4013      	ands	r3, r2
 800787c:	2b00      	cmp	r3, #0
 800787e:	f000 808f 	beq.w	80079a0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a2c      	ldr	r2, [pc, #176]	; (8007938 <HAL_DMA_IRQHandler+0x3f8>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d04a      	beq.n	8007922 <HAL_DMA_IRQHandler+0x3e2>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a2a      	ldr	r2, [pc, #168]	; (800793c <HAL_DMA_IRQHandler+0x3fc>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d045      	beq.n	8007922 <HAL_DMA_IRQHandler+0x3e2>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a29      	ldr	r2, [pc, #164]	; (8007940 <HAL_DMA_IRQHandler+0x400>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d040      	beq.n	8007922 <HAL_DMA_IRQHandler+0x3e2>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a27      	ldr	r2, [pc, #156]	; (8007944 <HAL_DMA_IRQHandler+0x404>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d03b      	beq.n	8007922 <HAL_DMA_IRQHandler+0x3e2>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a26      	ldr	r2, [pc, #152]	; (8007948 <HAL_DMA_IRQHandler+0x408>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d036      	beq.n	8007922 <HAL_DMA_IRQHandler+0x3e2>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a24      	ldr	r2, [pc, #144]	; (800794c <HAL_DMA_IRQHandler+0x40c>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d031      	beq.n	8007922 <HAL_DMA_IRQHandler+0x3e2>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a23      	ldr	r2, [pc, #140]	; (8007950 <HAL_DMA_IRQHandler+0x410>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d02c      	beq.n	8007922 <HAL_DMA_IRQHandler+0x3e2>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a21      	ldr	r2, [pc, #132]	; (8007954 <HAL_DMA_IRQHandler+0x414>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d027      	beq.n	8007922 <HAL_DMA_IRQHandler+0x3e2>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a20      	ldr	r2, [pc, #128]	; (8007958 <HAL_DMA_IRQHandler+0x418>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d022      	beq.n	8007922 <HAL_DMA_IRQHandler+0x3e2>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a1e      	ldr	r2, [pc, #120]	; (800795c <HAL_DMA_IRQHandler+0x41c>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d01d      	beq.n	8007922 <HAL_DMA_IRQHandler+0x3e2>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a1d      	ldr	r2, [pc, #116]	; (8007960 <HAL_DMA_IRQHandler+0x420>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d018      	beq.n	8007922 <HAL_DMA_IRQHandler+0x3e2>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a1b      	ldr	r2, [pc, #108]	; (8007964 <HAL_DMA_IRQHandler+0x424>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d013      	beq.n	8007922 <HAL_DMA_IRQHandler+0x3e2>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a1a      	ldr	r2, [pc, #104]	; (8007968 <HAL_DMA_IRQHandler+0x428>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d00e      	beq.n	8007922 <HAL_DMA_IRQHandler+0x3e2>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a18      	ldr	r2, [pc, #96]	; (800796c <HAL_DMA_IRQHandler+0x42c>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d009      	beq.n	8007922 <HAL_DMA_IRQHandler+0x3e2>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a17      	ldr	r2, [pc, #92]	; (8007970 <HAL_DMA_IRQHandler+0x430>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d004      	beq.n	8007922 <HAL_DMA_IRQHandler+0x3e2>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a15      	ldr	r2, [pc, #84]	; (8007974 <HAL_DMA_IRQHandler+0x434>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d12a      	bne.n	8007978 <HAL_DMA_IRQHandler+0x438>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0302 	and.w	r3, r3, #2
 800792c:	2b00      	cmp	r3, #0
 800792e:	bf14      	ite	ne
 8007930:	2301      	movne	r3, #1
 8007932:	2300      	moveq	r3, #0
 8007934:	b2db      	uxtb	r3, r3
 8007936:	e023      	b.n	8007980 <HAL_DMA_IRQHandler+0x440>
 8007938:	40020010 	.word	0x40020010
 800793c:	40020028 	.word	0x40020028
 8007940:	40020040 	.word	0x40020040
 8007944:	40020058 	.word	0x40020058
 8007948:	40020070 	.word	0x40020070
 800794c:	40020088 	.word	0x40020088
 8007950:	400200a0 	.word	0x400200a0
 8007954:	400200b8 	.word	0x400200b8
 8007958:	40020410 	.word	0x40020410
 800795c:	40020428 	.word	0x40020428
 8007960:	40020440 	.word	0x40020440
 8007964:	40020458 	.word	0x40020458
 8007968:	40020470 	.word	0x40020470
 800796c:	40020488 	.word	0x40020488
 8007970:	400204a0 	.word	0x400204a0
 8007974:	400204b8 	.word	0x400204b8
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2300      	movs	r3, #0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00d      	beq.n	80079a0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007988:	f003 031f 	and.w	r3, r3, #31
 800798c:	2204      	movs	r2, #4
 800798e:	409a      	lsls	r2, r3
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007998:	f043 0204 	orr.w	r2, r3, #4
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079a4:	f003 031f 	and.w	r3, r3, #31
 80079a8:	2210      	movs	r2, #16
 80079aa:	409a      	lsls	r2, r3
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	4013      	ands	r3, r2
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 80a6 	beq.w	8007b02 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a85      	ldr	r2, [pc, #532]	; (8007bd0 <HAL_DMA_IRQHandler+0x690>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d04a      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x516>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a83      	ldr	r2, [pc, #524]	; (8007bd4 <HAL_DMA_IRQHandler+0x694>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d045      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x516>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a82      	ldr	r2, [pc, #520]	; (8007bd8 <HAL_DMA_IRQHandler+0x698>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d040      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x516>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a80      	ldr	r2, [pc, #512]	; (8007bdc <HAL_DMA_IRQHandler+0x69c>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d03b      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x516>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a7f      	ldr	r2, [pc, #508]	; (8007be0 <HAL_DMA_IRQHandler+0x6a0>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d036      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x516>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a7d      	ldr	r2, [pc, #500]	; (8007be4 <HAL_DMA_IRQHandler+0x6a4>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d031      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x516>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a7c      	ldr	r2, [pc, #496]	; (8007be8 <HAL_DMA_IRQHandler+0x6a8>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d02c      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x516>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a7a      	ldr	r2, [pc, #488]	; (8007bec <HAL_DMA_IRQHandler+0x6ac>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d027      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x516>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a79      	ldr	r2, [pc, #484]	; (8007bf0 <HAL_DMA_IRQHandler+0x6b0>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d022      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x516>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a77      	ldr	r2, [pc, #476]	; (8007bf4 <HAL_DMA_IRQHandler+0x6b4>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d01d      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x516>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a76      	ldr	r2, [pc, #472]	; (8007bf8 <HAL_DMA_IRQHandler+0x6b8>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d018      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x516>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a74      	ldr	r2, [pc, #464]	; (8007bfc <HAL_DMA_IRQHandler+0x6bc>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d013      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x516>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a73      	ldr	r2, [pc, #460]	; (8007c00 <HAL_DMA_IRQHandler+0x6c0>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d00e      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x516>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a71      	ldr	r2, [pc, #452]	; (8007c04 <HAL_DMA_IRQHandler+0x6c4>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d009      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x516>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a70      	ldr	r2, [pc, #448]	; (8007c08 <HAL_DMA_IRQHandler+0x6c8>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d004      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x516>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a6e      	ldr	r2, [pc, #440]	; (8007c0c <HAL_DMA_IRQHandler+0x6cc>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d10a      	bne.n	8007a6c <HAL_DMA_IRQHandler+0x52c>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0308 	and.w	r3, r3, #8
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	bf14      	ite	ne
 8007a64:	2301      	movne	r3, #1
 8007a66:	2300      	moveq	r3, #0
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	e009      	b.n	8007a80 <HAL_DMA_IRQHandler+0x540>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0304 	and.w	r3, r3, #4
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	bf14      	ite	ne
 8007a7a:	2301      	movne	r3, #1
 8007a7c:	2300      	moveq	r3, #0
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d03e      	beq.n	8007b02 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a88:	f003 031f 	and.w	r3, r3, #31
 8007a8c:	2210      	movs	r2, #16
 8007a8e:	409a      	lsls	r2, r3
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d018      	beq.n	8007ad4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d108      	bne.n	8007ac2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d024      	beq.n	8007b02 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	4798      	blx	r3
 8007ac0:	e01f      	b.n	8007b02 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d01b      	beq.n	8007b02 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	4798      	blx	r3
 8007ad2:	e016      	b.n	8007b02 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d107      	bne.n	8007af2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f022 0208 	bic.w	r2, r2, #8
 8007af0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b06:	f003 031f 	and.w	r3, r3, #31
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	409a      	lsls	r2, r3
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	4013      	ands	r3, r2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 8110 	beq.w	8007d38 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a2c      	ldr	r2, [pc, #176]	; (8007bd0 <HAL_DMA_IRQHandler+0x690>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d04a      	beq.n	8007bb8 <HAL_DMA_IRQHandler+0x678>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a2b      	ldr	r2, [pc, #172]	; (8007bd4 <HAL_DMA_IRQHandler+0x694>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d045      	beq.n	8007bb8 <HAL_DMA_IRQHandler+0x678>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a29      	ldr	r2, [pc, #164]	; (8007bd8 <HAL_DMA_IRQHandler+0x698>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d040      	beq.n	8007bb8 <HAL_DMA_IRQHandler+0x678>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a28      	ldr	r2, [pc, #160]	; (8007bdc <HAL_DMA_IRQHandler+0x69c>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d03b      	beq.n	8007bb8 <HAL_DMA_IRQHandler+0x678>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a26      	ldr	r2, [pc, #152]	; (8007be0 <HAL_DMA_IRQHandler+0x6a0>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d036      	beq.n	8007bb8 <HAL_DMA_IRQHandler+0x678>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a25      	ldr	r2, [pc, #148]	; (8007be4 <HAL_DMA_IRQHandler+0x6a4>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d031      	beq.n	8007bb8 <HAL_DMA_IRQHandler+0x678>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a23      	ldr	r2, [pc, #140]	; (8007be8 <HAL_DMA_IRQHandler+0x6a8>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d02c      	beq.n	8007bb8 <HAL_DMA_IRQHandler+0x678>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a22      	ldr	r2, [pc, #136]	; (8007bec <HAL_DMA_IRQHandler+0x6ac>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d027      	beq.n	8007bb8 <HAL_DMA_IRQHandler+0x678>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a20      	ldr	r2, [pc, #128]	; (8007bf0 <HAL_DMA_IRQHandler+0x6b0>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d022      	beq.n	8007bb8 <HAL_DMA_IRQHandler+0x678>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a1f      	ldr	r2, [pc, #124]	; (8007bf4 <HAL_DMA_IRQHandler+0x6b4>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d01d      	beq.n	8007bb8 <HAL_DMA_IRQHandler+0x678>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a1d      	ldr	r2, [pc, #116]	; (8007bf8 <HAL_DMA_IRQHandler+0x6b8>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d018      	beq.n	8007bb8 <HAL_DMA_IRQHandler+0x678>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a1c      	ldr	r2, [pc, #112]	; (8007bfc <HAL_DMA_IRQHandler+0x6bc>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d013      	beq.n	8007bb8 <HAL_DMA_IRQHandler+0x678>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a1a      	ldr	r2, [pc, #104]	; (8007c00 <HAL_DMA_IRQHandler+0x6c0>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d00e      	beq.n	8007bb8 <HAL_DMA_IRQHandler+0x678>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a19      	ldr	r2, [pc, #100]	; (8007c04 <HAL_DMA_IRQHandler+0x6c4>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d009      	beq.n	8007bb8 <HAL_DMA_IRQHandler+0x678>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a17      	ldr	r2, [pc, #92]	; (8007c08 <HAL_DMA_IRQHandler+0x6c8>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d004      	beq.n	8007bb8 <HAL_DMA_IRQHandler+0x678>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a16      	ldr	r2, [pc, #88]	; (8007c0c <HAL_DMA_IRQHandler+0x6cc>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d12b      	bne.n	8007c10 <HAL_DMA_IRQHandler+0x6d0>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0310 	and.w	r3, r3, #16
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	bf14      	ite	ne
 8007bc6:	2301      	movne	r3, #1
 8007bc8:	2300      	moveq	r3, #0
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	e02a      	b.n	8007c24 <HAL_DMA_IRQHandler+0x6e4>
 8007bce:	bf00      	nop
 8007bd0:	40020010 	.word	0x40020010
 8007bd4:	40020028 	.word	0x40020028
 8007bd8:	40020040 	.word	0x40020040
 8007bdc:	40020058 	.word	0x40020058
 8007be0:	40020070 	.word	0x40020070
 8007be4:	40020088 	.word	0x40020088
 8007be8:	400200a0 	.word	0x400200a0
 8007bec:	400200b8 	.word	0x400200b8
 8007bf0:	40020410 	.word	0x40020410
 8007bf4:	40020428 	.word	0x40020428
 8007bf8:	40020440 	.word	0x40020440
 8007bfc:	40020458 	.word	0x40020458
 8007c00:	40020470 	.word	0x40020470
 8007c04:	40020488 	.word	0x40020488
 8007c08:	400204a0 	.word	0x400204a0
 8007c0c:	400204b8 	.word	0x400204b8
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	bf14      	ite	ne
 8007c1e:	2301      	movne	r3, #1
 8007c20:	2300      	moveq	r3, #0
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 8087 	beq.w	8007d38 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c2e:	f003 031f 	and.w	r3, r3, #31
 8007c32:	2220      	movs	r2, #32
 8007c34:	409a      	lsls	r2, r3
 8007c36:	6a3b      	ldr	r3, [r7, #32]
 8007c38:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	2b04      	cmp	r3, #4
 8007c44:	d139      	bne.n	8007cba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f022 0216 	bic.w	r2, r2, #22
 8007c54:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	695a      	ldr	r2, [r3, #20]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c64:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d103      	bne.n	8007c76 <HAL_DMA_IRQHandler+0x736>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d007      	beq.n	8007c86 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f022 0208 	bic.w	r2, r2, #8
 8007c84:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c8a:	f003 031f 	and.w	r3, r3, #31
 8007c8e:	223f      	movs	r2, #63	; 0x3f
 8007c90:	409a      	lsls	r2, r3
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f000 834a 	beq.w	8008344 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	4798      	blx	r3
          }
          return;
 8007cb8:	e344      	b.n	8008344 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d018      	beq.n	8007cfa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d108      	bne.n	8007ce8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d02c      	beq.n	8007d38 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	4798      	blx	r3
 8007ce6:	e027      	b.n	8007d38 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d023      	beq.n	8007d38 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	4798      	blx	r3
 8007cf8:	e01e      	b.n	8007d38 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d10f      	bne.n	8007d28 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 0210 	bic.w	r2, r2, #16
 8007d16:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d003      	beq.n	8007d38 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 8306 	beq.w	800834e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f000 8088 	beq.w	8007e60 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2204      	movs	r2, #4
 8007d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a7a      	ldr	r2, [pc, #488]	; (8007f48 <HAL_DMA_IRQHandler+0xa08>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d04a      	beq.n	8007df8 <HAL_DMA_IRQHandler+0x8b8>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a79      	ldr	r2, [pc, #484]	; (8007f4c <HAL_DMA_IRQHandler+0xa0c>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d045      	beq.n	8007df8 <HAL_DMA_IRQHandler+0x8b8>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a77      	ldr	r2, [pc, #476]	; (8007f50 <HAL_DMA_IRQHandler+0xa10>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d040      	beq.n	8007df8 <HAL_DMA_IRQHandler+0x8b8>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a76      	ldr	r2, [pc, #472]	; (8007f54 <HAL_DMA_IRQHandler+0xa14>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d03b      	beq.n	8007df8 <HAL_DMA_IRQHandler+0x8b8>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a74      	ldr	r2, [pc, #464]	; (8007f58 <HAL_DMA_IRQHandler+0xa18>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d036      	beq.n	8007df8 <HAL_DMA_IRQHandler+0x8b8>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a73      	ldr	r2, [pc, #460]	; (8007f5c <HAL_DMA_IRQHandler+0xa1c>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d031      	beq.n	8007df8 <HAL_DMA_IRQHandler+0x8b8>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a71      	ldr	r2, [pc, #452]	; (8007f60 <HAL_DMA_IRQHandler+0xa20>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d02c      	beq.n	8007df8 <HAL_DMA_IRQHandler+0x8b8>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a70      	ldr	r2, [pc, #448]	; (8007f64 <HAL_DMA_IRQHandler+0xa24>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d027      	beq.n	8007df8 <HAL_DMA_IRQHandler+0x8b8>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a6e      	ldr	r2, [pc, #440]	; (8007f68 <HAL_DMA_IRQHandler+0xa28>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d022      	beq.n	8007df8 <HAL_DMA_IRQHandler+0x8b8>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a6d      	ldr	r2, [pc, #436]	; (8007f6c <HAL_DMA_IRQHandler+0xa2c>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d01d      	beq.n	8007df8 <HAL_DMA_IRQHandler+0x8b8>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a6b      	ldr	r2, [pc, #428]	; (8007f70 <HAL_DMA_IRQHandler+0xa30>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d018      	beq.n	8007df8 <HAL_DMA_IRQHandler+0x8b8>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a6a      	ldr	r2, [pc, #424]	; (8007f74 <HAL_DMA_IRQHandler+0xa34>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d013      	beq.n	8007df8 <HAL_DMA_IRQHandler+0x8b8>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a68      	ldr	r2, [pc, #416]	; (8007f78 <HAL_DMA_IRQHandler+0xa38>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d00e      	beq.n	8007df8 <HAL_DMA_IRQHandler+0x8b8>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a67      	ldr	r2, [pc, #412]	; (8007f7c <HAL_DMA_IRQHandler+0xa3c>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d009      	beq.n	8007df8 <HAL_DMA_IRQHandler+0x8b8>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a65      	ldr	r2, [pc, #404]	; (8007f80 <HAL_DMA_IRQHandler+0xa40>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d004      	beq.n	8007df8 <HAL_DMA_IRQHandler+0x8b8>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a64      	ldr	r2, [pc, #400]	; (8007f84 <HAL_DMA_IRQHandler+0xa44>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d108      	bne.n	8007e0a <HAL_DMA_IRQHandler+0x8ca>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f022 0201 	bic.w	r2, r2, #1
 8007e06:	601a      	str	r2, [r3, #0]
 8007e08:	e007      	b.n	8007e1a <HAL_DMA_IRQHandler+0x8da>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f022 0201 	bic.w	r2, r2, #1
 8007e18:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	60fb      	str	r3, [r7, #12]
 8007e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d307      	bcc.n	8007e36 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1f2      	bne.n	8007e1a <HAL_DMA_IRQHandler+0x8da>
 8007e34:	e000      	b.n	8007e38 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007e36:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d004      	beq.n	8007e50 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2203      	movs	r2, #3
 8007e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007e4e:	e003      	b.n	8007e58 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f000 8272 	beq.w	800834e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	4798      	blx	r3
 8007e72:	e26c      	b.n	800834e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a43      	ldr	r2, [pc, #268]	; (8007f88 <HAL_DMA_IRQHandler+0xa48>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d022      	beq.n	8007ec4 <HAL_DMA_IRQHandler+0x984>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a42      	ldr	r2, [pc, #264]	; (8007f8c <HAL_DMA_IRQHandler+0xa4c>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d01d      	beq.n	8007ec4 <HAL_DMA_IRQHandler+0x984>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a40      	ldr	r2, [pc, #256]	; (8007f90 <HAL_DMA_IRQHandler+0xa50>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d018      	beq.n	8007ec4 <HAL_DMA_IRQHandler+0x984>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a3f      	ldr	r2, [pc, #252]	; (8007f94 <HAL_DMA_IRQHandler+0xa54>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d013      	beq.n	8007ec4 <HAL_DMA_IRQHandler+0x984>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a3d      	ldr	r2, [pc, #244]	; (8007f98 <HAL_DMA_IRQHandler+0xa58>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d00e      	beq.n	8007ec4 <HAL_DMA_IRQHandler+0x984>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a3c      	ldr	r2, [pc, #240]	; (8007f9c <HAL_DMA_IRQHandler+0xa5c>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d009      	beq.n	8007ec4 <HAL_DMA_IRQHandler+0x984>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a3a      	ldr	r2, [pc, #232]	; (8007fa0 <HAL_DMA_IRQHandler+0xa60>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d004      	beq.n	8007ec4 <HAL_DMA_IRQHandler+0x984>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a39      	ldr	r2, [pc, #228]	; (8007fa4 <HAL_DMA_IRQHandler+0xa64>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d101      	bne.n	8007ec8 <HAL_DMA_IRQHandler+0x988>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e000      	b.n	8007eca <HAL_DMA_IRQHandler+0x98a>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 823f 	beq.w	800834e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007edc:	f003 031f 	and.w	r3, r3, #31
 8007ee0:	2204      	movs	r2, #4
 8007ee2:	409a      	lsls	r2, r3
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 80cd 	beq.w	8008088 <HAL_DMA_IRQHandler+0xb48>
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	f003 0304 	and.w	r3, r3, #4
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 80c7 	beq.w	8008088 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007efe:	f003 031f 	and.w	r3, r3, #31
 8007f02:	2204      	movs	r2, #4
 8007f04:	409a      	lsls	r2, r3
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d049      	beq.n	8007fa8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d109      	bne.n	8007f32 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f000 8210 	beq.w	8008348 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f30:	e20a      	b.n	8008348 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 8206 	beq.w	8008348 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f44:	e200      	b.n	8008348 <HAL_DMA_IRQHandler+0xe08>
 8007f46:	bf00      	nop
 8007f48:	40020010 	.word	0x40020010
 8007f4c:	40020028 	.word	0x40020028
 8007f50:	40020040 	.word	0x40020040
 8007f54:	40020058 	.word	0x40020058
 8007f58:	40020070 	.word	0x40020070
 8007f5c:	40020088 	.word	0x40020088
 8007f60:	400200a0 	.word	0x400200a0
 8007f64:	400200b8 	.word	0x400200b8
 8007f68:	40020410 	.word	0x40020410
 8007f6c:	40020428 	.word	0x40020428
 8007f70:	40020440 	.word	0x40020440
 8007f74:	40020458 	.word	0x40020458
 8007f78:	40020470 	.word	0x40020470
 8007f7c:	40020488 	.word	0x40020488
 8007f80:	400204a0 	.word	0x400204a0
 8007f84:	400204b8 	.word	0x400204b8
 8007f88:	58025408 	.word	0x58025408
 8007f8c:	5802541c 	.word	0x5802541c
 8007f90:	58025430 	.word	0x58025430
 8007f94:	58025444 	.word	0x58025444
 8007f98:	58025458 	.word	0x58025458
 8007f9c:	5802546c 	.word	0x5802546c
 8007fa0:	58025480 	.word	0x58025480
 8007fa4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	f003 0320 	and.w	r3, r3, #32
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d160      	bne.n	8008074 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a8c      	ldr	r2, [pc, #560]	; (80081e8 <HAL_DMA_IRQHandler+0xca8>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d04a      	beq.n	8008052 <HAL_DMA_IRQHandler+0xb12>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a8a      	ldr	r2, [pc, #552]	; (80081ec <HAL_DMA_IRQHandler+0xcac>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d045      	beq.n	8008052 <HAL_DMA_IRQHandler+0xb12>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a89      	ldr	r2, [pc, #548]	; (80081f0 <HAL_DMA_IRQHandler+0xcb0>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d040      	beq.n	8008052 <HAL_DMA_IRQHandler+0xb12>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a87      	ldr	r2, [pc, #540]	; (80081f4 <HAL_DMA_IRQHandler+0xcb4>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d03b      	beq.n	8008052 <HAL_DMA_IRQHandler+0xb12>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a86      	ldr	r2, [pc, #536]	; (80081f8 <HAL_DMA_IRQHandler+0xcb8>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d036      	beq.n	8008052 <HAL_DMA_IRQHandler+0xb12>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a84      	ldr	r2, [pc, #528]	; (80081fc <HAL_DMA_IRQHandler+0xcbc>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d031      	beq.n	8008052 <HAL_DMA_IRQHandler+0xb12>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a83      	ldr	r2, [pc, #524]	; (8008200 <HAL_DMA_IRQHandler+0xcc0>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d02c      	beq.n	8008052 <HAL_DMA_IRQHandler+0xb12>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a81      	ldr	r2, [pc, #516]	; (8008204 <HAL_DMA_IRQHandler+0xcc4>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d027      	beq.n	8008052 <HAL_DMA_IRQHandler+0xb12>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a80      	ldr	r2, [pc, #512]	; (8008208 <HAL_DMA_IRQHandler+0xcc8>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d022      	beq.n	8008052 <HAL_DMA_IRQHandler+0xb12>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a7e      	ldr	r2, [pc, #504]	; (800820c <HAL_DMA_IRQHandler+0xccc>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d01d      	beq.n	8008052 <HAL_DMA_IRQHandler+0xb12>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a7d      	ldr	r2, [pc, #500]	; (8008210 <HAL_DMA_IRQHandler+0xcd0>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d018      	beq.n	8008052 <HAL_DMA_IRQHandler+0xb12>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a7b      	ldr	r2, [pc, #492]	; (8008214 <HAL_DMA_IRQHandler+0xcd4>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d013      	beq.n	8008052 <HAL_DMA_IRQHandler+0xb12>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a7a      	ldr	r2, [pc, #488]	; (8008218 <HAL_DMA_IRQHandler+0xcd8>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d00e      	beq.n	8008052 <HAL_DMA_IRQHandler+0xb12>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a78      	ldr	r2, [pc, #480]	; (800821c <HAL_DMA_IRQHandler+0xcdc>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d009      	beq.n	8008052 <HAL_DMA_IRQHandler+0xb12>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a77      	ldr	r2, [pc, #476]	; (8008220 <HAL_DMA_IRQHandler+0xce0>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d004      	beq.n	8008052 <HAL_DMA_IRQHandler+0xb12>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a75      	ldr	r2, [pc, #468]	; (8008224 <HAL_DMA_IRQHandler+0xce4>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d108      	bne.n	8008064 <HAL_DMA_IRQHandler+0xb24>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0208 	bic.w	r2, r2, #8
 8008060:	601a      	str	r2, [r3, #0]
 8008062:	e007      	b.n	8008074 <HAL_DMA_IRQHandler+0xb34>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f022 0204 	bic.w	r2, r2, #4
 8008072:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 8165 	beq.w	8008348 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008086:	e15f      	b.n	8008348 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800808c:	f003 031f 	and.w	r3, r3, #31
 8008090:	2202      	movs	r2, #2
 8008092:	409a      	lsls	r2, r3
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	4013      	ands	r3, r2
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 80c5 	beq.w	8008228 <HAL_DMA_IRQHandler+0xce8>
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	f003 0302 	and.w	r3, r3, #2
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 80bf 	beq.w	8008228 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ae:	f003 031f 	and.w	r3, r3, #31
 80080b2:	2202      	movs	r2, #2
 80080b4:	409a      	lsls	r2, r3
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d018      	beq.n	80080f6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d109      	bne.n	80080e2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f000 813a 	beq.w	800834c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080e0:	e134      	b.n	800834c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f000 8130 	beq.w	800834c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080f4:	e12a      	b.n	800834c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f003 0320 	and.w	r3, r3, #32
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d168      	bne.n	80081d2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a38      	ldr	r2, [pc, #224]	; (80081e8 <HAL_DMA_IRQHandler+0xca8>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d04a      	beq.n	80081a0 <HAL_DMA_IRQHandler+0xc60>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a37      	ldr	r2, [pc, #220]	; (80081ec <HAL_DMA_IRQHandler+0xcac>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d045      	beq.n	80081a0 <HAL_DMA_IRQHandler+0xc60>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a35      	ldr	r2, [pc, #212]	; (80081f0 <HAL_DMA_IRQHandler+0xcb0>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d040      	beq.n	80081a0 <HAL_DMA_IRQHandler+0xc60>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a34      	ldr	r2, [pc, #208]	; (80081f4 <HAL_DMA_IRQHandler+0xcb4>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d03b      	beq.n	80081a0 <HAL_DMA_IRQHandler+0xc60>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a32      	ldr	r2, [pc, #200]	; (80081f8 <HAL_DMA_IRQHandler+0xcb8>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d036      	beq.n	80081a0 <HAL_DMA_IRQHandler+0xc60>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a31      	ldr	r2, [pc, #196]	; (80081fc <HAL_DMA_IRQHandler+0xcbc>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d031      	beq.n	80081a0 <HAL_DMA_IRQHandler+0xc60>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a2f      	ldr	r2, [pc, #188]	; (8008200 <HAL_DMA_IRQHandler+0xcc0>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d02c      	beq.n	80081a0 <HAL_DMA_IRQHandler+0xc60>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a2e      	ldr	r2, [pc, #184]	; (8008204 <HAL_DMA_IRQHandler+0xcc4>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d027      	beq.n	80081a0 <HAL_DMA_IRQHandler+0xc60>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a2c      	ldr	r2, [pc, #176]	; (8008208 <HAL_DMA_IRQHandler+0xcc8>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d022      	beq.n	80081a0 <HAL_DMA_IRQHandler+0xc60>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a2b      	ldr	r2, [pc, #172]	; (800820c <HAL_DMA_IRQHandler+0xccc>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d01d      	beq.n	80081a0 <HAL_DMA_IRQHandler+0xc60>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a29      	ldr	r2, [pc, #164]	; (8008210 <HAL_DMA_IRQHandler+0xcd0>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d018      	beq.n	80081a0 <HAL_DMA_IRQHandler+0xc60>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a28      	ldr	r2, [pc, #160]	; (8008214 <HAL_DMA_IRQHandler+0xcd4>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d013      	beq.n	80081a0 <HAL_DMA_IRQHandler+0xc60>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a26      	ldr	r2, [pc, #152]	; (8008218 <HAL_DMA_IRQHandler+0xcd8>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d00e      	beq.n	80081a0 <HAL_DMA_IRQHandler+0xc60>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a25      	ldr	r2, [pc, #148]	; (800821c <HAL_DMA_IRQHandler+0xcdc>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d009      	beq.n	80081a0 <HAL_DMA_IRQHandler+0xc60>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a23      	ldr	r2, [pc, #140]	; (8008220 <HAL_DMA_IRQHandler+0xce0>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d004      	beq.n	80081a0 <HAL_DMA_IRQHandler+0xc60>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a22      	ldr	r2, [pc, #136]	; (8008224 <HAL_DMA_IRQHandler+0xce4>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d108      	bne.n	80081b2 <HAL_DMA_IRQHandler+0xc72>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f022 0214 	bic.w	r2, r2, #20
 80081ae:	601a      	str	r2, [r3, #0]
 80081b0:	e007      	b.n	80081c2 <HAL_DMA_IRQHandler+0xc82>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f022 020a 	bic.w	r2, r2, #10
 80081c0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f000 80b8 	beq.w	800834c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081e4:	e0b2      	b.n	800834c <HAL_DMA_IRQHandler+0xe0c>
 80081e6:	bf00      	nop
 80081e8:	40020010 	.word	0x40020010
 80081ec:	40020028 	.word	0x40020028
 80081f0:	40020040 	.word	0x40020040
 80081f4:	40020058 	.word	0x40020058
 80081f8:	40020070 	.word	0x40020070
 80081fc:	40020088 	.word	0x40020088
 8008200:	400200a0 	.word	0x400200a0
 8008204:	400200b8 	.word	0x400200b8
 8008208:	40020410 	.word	0x40020410
 800820c:	40020428 	.word	0x40020428
 8008210:	40020440 	.word	0x40020440
 8008214:	40020458 	.word	0x40020458
 8008218:	40020470 	.word	0x40020470
 800821c:	40020488 	.word	0x40020488
 8008220:	400204a0 	.word	0x400204a0
 8008224:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800822c:	f003 031f 	and.w	r3, r3, #31
 8008230:	2208      	movs	r2, #8
 8008232:	409a      	lsls	r2, r3
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	4013      	ands	r3, r2
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 8088 	beq.w	800834e <HAL_DMA_IRQHandler+0xe0e>
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	f003 0308 	and.w	r3, r3, #8
 8008244:	2b00      	cmp	r3, #0
 8008246:	f000 8082 	beq.w	800834e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a41      	ldr	r2, [pc, #260]	; (8008354 <HAL_DMA_IRQHandler+0xe14>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d04a      	beq.n	80082ea <HAL_DMA_IRQHandler+0xdaa>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a3f      	ldr	r2, [pc, #252]	; (8008358 <HAL_DMA_IRQHandler+0xe18>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d045      	beq.n	80082ea <HAL_DMA_IRQHandler+0xdaa>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a3e      	ldr	r2, [pc, #248]	; (800835c <HAL_DMA_IRQHandler+0xe1c>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d040      	beq.n	80082ea <HAL_DMA_IRQHandler+0xdaa>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a3c      	ldr	r2, [pc, #240]	; (8008360 <HAL_DMA_IRQHandler+0xe20>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d03b      	beq.n	80082ea <HAL_DMA_IRQHandler+0xdaa>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a3b      	ldr	r2, [pc, #236]	; (8008364 <HAL_DMA_IRQHandler+0xe24>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d036      	beq.n	80082ea <HAL_DMA_IRQHandler+0xdaa>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a39      	ldr	r2, [pc, #228]	; (8008368 <HAL_DMA_IRQHandler+0xe28>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d031      	beq.n	80082ea <HAL_DMA_IRQHandler+0xdaa>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a38      	ldr	r2, [pc, #224]	; (800836c <HAL_DMA_IRQHandler+0xe2c>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d02c      	beq.n	80082ea <HAL_DMA_IRQHandler+0xdaa>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a36      	ldr	r2, [pc, #216]	; (8008370 <HAL_DMA_IRQHandler+0xe30>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d027      	beq.n	80082ea <HAL_DMA_IRQHandler+0xdaa>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a35      	ldr	r2, [pc, #212]	; (8008374 <HAL_DMA_IRQHandler+0xe34>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d022      	beq.n	80082ea <HAL_DMA_IRQHandler+0xdaa>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a33      	ldr	r2, [pc, #204]	; (8008378 <HAL_DMA_IRQHandler+0xe38>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d01d      	beq.n	80082ea <HAL_DMA_IRQHandler+0xdaa>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a32      	ldr	r2, [pc, #200]	; (800837c <HAL_DMA_IRQHandler+0xe3c>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d018      	beq.n	80082ea <HAL_DMA_IRQHandler+0xdaa>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a30      	ldr	r2, [pc, #192]	; (8008380 <HAL_DMA_IRQHandler+0xe40>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d013      	beq.n	80082ea <HAL_DMA_IRQHandler+0xdaa>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a2f      	ldr	r2, [pc, #188]	; (8008384 <HAL_DMA_IRQHandler+0xe44>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d00e      	beq.n	80082ea <HAL_DMA_IRQHandler+0xdaa>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a2d      	ldr	r2, [pc, #180]	; (8008388 <HAL_DMA_IRQHandler+0xe48>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d009      	beq.n	80082ea <HAL_DMA_IRQHandler+0xdaa>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a2c      	ldr	r2, [pc, #176]	; (800838c <HAL_DMA_IRQHandler+0xe4c>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d004      	beq.n	80082ea <HAL_DMA_IRQHandler+0xdaa>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a2a      	ldr	r2, [pc, #168]	; (8008390 <HAL_DMA_IRQHandler+0xe50>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d108      	bne.n	80082fc <HAL_DMA_IRQHandler+0xdbc>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f022 021c 	bic.w	r2, r2, #28
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	e007      	b.n	800830c <HAL_DMA_IRQHandler+0xdcc>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 020e 	bic.w	r2, r2, #14
 800830a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008310:	f003 031f 	and.w	r3, r3, #31
 8008314:	2201      	movs	r2, #1
 8008316:	409a      	lsls	r2, r3
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008336:	2b00      	cmp	r3, #0
 8008338:	d009      	beq.n	800834e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	4798      	blx	r3
 8008342:	e004      	b.n	800834e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008344:	bf00      	nop
 8008346:	e002      	b.n	800834e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008348:	bf00      	nop
 800834a:	e000      	b.n	800834e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800834c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800834e:	3728      	adds	r7, #40	; 0x28
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	40020010 	.word	0x40020010
 8008358:	40020028 	.word	0x40020028
 800835c:	40020040 	.word	0x40020040
 8008360:	40020058 	.word	0x40020058
 8008364:	40020070 	.word	0x40020070
 8008368:	40020088 	.word	0x40020088
 800836c:	400200a0 	.word	0x400200a0
 8008370:	400200b8 	.word	0x400200b8
 8008374:	40020410 	.word	0x40020410
 8008378:	40020428 	.word	0x40020428
 800837c:	40020440 	.word	0x40020440
 8008380:	40020458 	.word	0x40020458
 8008384:	40020470 	.word	0x40020470
 8008388:	40020488 	.word	0x40020488
 800838c:	400204a0 	.word	0x400204a0
 8008390:	400204b8 	.word	0x400204b8

08008394 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008394:	b480      	push	{r7}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
 80083a0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ac:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a84      	ldr	r2, [pc, #528]	; (80085c4 <DMA_SetConfig+0x230>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d072      	beq.n	800849e <DMA_SetConfig+0x10a>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a82      	ldr	r2, [pc, #520]	; (80085c8 <DMA_SetConfig+0x234>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d06d      	beq.n	800849e <DMA_SetConfig+0x10a>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a81      	ldr	r2, [pc, #516]	; (80085cc <DMA_SetConfig+0x238>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d068      	beq.n	800849e <DMA_SetConfig+0x10a>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a7f      	ldr	r2, [pc, #508]	; (80085d0 <DMA_SetConfig+0x23c>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d063      	beq.n	800849e <DMA_SetConfig+0x10a>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a7e      	ldr	r2, [pc, #504]	; (80085d4 <DMA_SetConfig+0x240>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d05e      	beq.n	800849e <DMA_SetConfig+0x10a>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a7c      	ldr	r2, [pc, #496]	; (80085d8 <DMA_SetConfig+0x244>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d059      	beq.n	800849e <DMA_SetConfig+0x10a>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a7b      	ldr	r2, [pc, #492]	; (80085dc <DMA_SetConfig+0x248>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d054      	beq.n	800849e <DMA_SetConfig+0x10a>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a79      	ldr	r2, [pc, #484]	; (80085e0 <DMA_SetConfig+0x24c>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d04f      	beq.n	800849e <DMA_SetConfig+0x10a>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a78      	ldr	r2, [pc, #480]	; (80085e4 <DMA_SetConfig+0x250>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d04a      	beq.n	800849e <DMA_SetConfig+0x10a>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a76      	ldr	r2, [pc, #472]	; (80085e8 <DMA_SetConfig+0x254>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d045      	beq.n	800849e <DMA_SetConfig+0x10a>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a75      	ldr	r2, [pc, #468]	; (80085ec <DMA_SetConfig+0x258>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d040      	beq.n	800849e <DMA_SetConfig+0x10a>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a73      	ldr	r2, [pc, #460]	; (80085f0 <DMA_SetConfig+0x25c>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d03b      	beq.n	800849e <DMA_SetConfig+0x10a>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a72      	ldr	r2, [pc, #456]	; (80085f4 <DMA_SetConfig+0x260>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d036      	beq.n	800849e <DMA_SetConfig+0x10a>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a70      	ldr	r2, [pc, #448]	; (80085f8 <DMA_SetConfig+0x264>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d031      	beq.n	800849e <DMA_SetConfig+0x10a>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a6f      	ldr	r2, [pc, #444]	; (80085fc <DMA_SetConfig+0x268>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d02c      	beq.n	800849e <DMA_SetConfig+0x10a>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a6d      	ldr	r2, [pc, #436]	; (8008600 <DMA_SetConfig+0x26c>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d027      	beq.n	800849e <DMA_SetConfig+0x10a>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a6c      	ldr	r2, [pc, #432]	; (8008604 <DMA_SetConfig+0x270>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d022      	beq.n	800849e <DMA_SetConfig+0x10a>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a6a      	ldr	r2, [pc, #424]	; (8008608 <DMA_SetConfig+0x274>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d01d      	beq.n	800849e <DMA_SetConfig+0x10a>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a69      	ldr	r2, [pc, #420]	; (800860c <DMA_SetConfig+0x278>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d018      	beq.n	800849e <DMA_SetConfig+0x10a>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a67      	ldr	r2, [pc, #412]	; (8008610 <DMA_SetConfig+0x27c>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d013      	beq.n	800849e <DMA_SetConfig+0x10a>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a66      	ldr	r2, [pc, #408]	; (8008614 <DMA_SetConfig+0x280>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d00e      	beq.n	800849e <DMA_SetConfig+0x10a>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a64      	ldr	r2, [pc, #400]	; (8008618 <DMA_SetConfig+0x284>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d009      	beq.n	800849e <DMA_SetConfig+0x10a>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a63      	ldr	r2, [pc, #396]	; (800861c <DMA_SetConfig+0x288>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d004      	beq.n	800849e <DMA_SetConfig+0x10a>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a61      	ldr	r2, [pc, #388]	; (8008620 <DMA_SetConfig+0x28c>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d101      	bne.n	80084a2 <DMA_SetConfig+0x10e>
 800849e:	2301      	movs	r3, #1
 80084a0:	e000      	b.n	80084a4 <DMA_SetConfig+0x110>
 80084a2:	2300      	movs	r3, #0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00d      	beq.n	80084c4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80084b0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d004      	beq.n	80084c4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80084c2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a3e      	ldr	r2, [pc, #248]	; (80085c4 <DMA_SetConfig+0x230>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d04a      	beq.n	8008564 <DMA_SetConfig+0x1d0>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a3d      	ldr	r2, [pc, #244]	; (80085c8 <DMA_SetConfig+0x234>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d045      	beq.n	8008564 <DMA_SetConfig+0x1d0>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a3b      	ldr	r2, [pc, #236]	; (80085cc <DMA_SetConfig+0x238>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d040      	beq.n	8008564 <DMA_SetConfig+0x1d0>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a3a      	ldr	r2, [pc, #232]	; (80085d0 <DMA_SetConfig+0x23c>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d03b      	beq.n	8008564 <DMA_SetConfig+0x1d0>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a38      	ldr	r2, [pc, #224]	; (80085d4 <DMA_SetConfig+0x240>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d036      	beq.n	8008564 <DMA_SetConfig+0x1d0>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a37      	ldr	r2, [pc, #220]	; (80085d8 <DMA_SetConfig+0x244>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d031      	beq.n	8008564 <DMA_SetConfig+0x1d0>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a35      	ldr	r2, [pc, #212]	; (80085dc <DMA_SetConfig+0x248>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d02c      	beq.n	8008564 <DMA_SetConfig+0x1d0>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a34      	ldr	r2, [pc, #208]	; (80085e0 <DMA_SetConfig+0x24c>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d027      	beq.n	8008564 <DMA_SetConfig+0x1d0>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a32      	ldr	r2, [pc, #200]	; (80085e4 <DMA_SetConfig+0x250>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d022      	beq.n	8008564 <DMA_SetConfig+0x1d0>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a31      	ldr	r2, [pc, #196]	; (80085e8 <DMA_SetConfig+0x254>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d01d      	beq.n	8008564 <DMA_SetConfig+0x1d0>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a2f      	ldr	r2, [pc, #188]	; (80085ec <DMA_SetConfig+0x258>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d018      	beq.n	8008564 <DMA_SetConfig+0x1d0>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a2e      	ldr	r2, [pc, #184]	; (80085f0 <DMA_SetConfig+0x25c>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d013      	beq.n	8008564 <DMA_SetConfig+0x1d0>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a2c      	ldr	r2, [pc, #176]	; (80085f4 <DMA_SetConfig+0x260>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d00e      	beq.n	8008564 <DMA_SetConfig+0x1d0>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a2b      	ldr	r2, [pc, #172]	; (80085f8 <DMA_SetConfig+0x264>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d009      	beq.n	8008564 <DMA_SetConfig+0x1d0>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a29      	ldr	r2, [pc, #164]	; (80085fc <DMA_SetConfig+0x268>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d004      	beq.n	8008564 <DMA_SetConfig+0x1d0>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a28      	ldr	r2, [pc, #160]	; (8008600 <DMA_SetConfig+0x26c>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d101      	bne.n	8008568 <DMA_SetConfig+0x1d4>
 8008564:	2301      	movs	r3, #1
 8008566:	e000      	b.n	800856a <DMA_SetConfig+0x1d6>
 8008568:	2300      	movs	r3, #0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d05a      	beq.n	8008624 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008572:	f003 031f 	and.w	r3, r3, #31
 8008576:	223f      	movs	r2, #63	; 0x3f
 8008578:	409a      	lsls	r2, r3
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800858c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	2b40      	cmp	r3, #64	; 0x40
 800859c:	d108      	bne.n	80085b0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80085ae:	e087      	b.n	80086c0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	60da      	str	r2, [r3, #12]
}
 80085c0:	e07e      	b.n	80086c0 <DMA_SetConfig+0x32c>
 80085c2:	bf00      	nop
 80085c4:	40020010 	.word	0x40020010
 80085c8:	40020028 	.word	0x40020028
 80085cc:	40020040 	.word	0x40020040
 80085d0:	40020058 	.word	0x40020058
 80085d4:	40020070 	.word	0x40020070
 80085d8:	40020088 	.word	0x40020088
 80085dc:	400200a0 	.word	0x400200a0
 80085e0:	400200b8 	.word	0x400200b8
 80085e4:	40020410 	.word	0x40020410
 80085e8:	40020428 	.word	0x40020428
 80085ec:	40020440 	.word	0x40020440
 80085f0:	40020458 	.word	0x40020458
 80085f4:	40020470 	.word	0x40020470
 80085f8:	40020488 	.word	0x40020488
 80085fc:	400204a0 	.word	0x400204a0
 8008600:	400204b8 	.word	0x400204b8
 8008604:	58025408 	.word	0x58025408
 8008608:	5802541c 	.word	0x5802541c
 800860c:	58025430 	.word	0x58025430
 8008610:	58025444 	.word	0x58025444
 8008614:	58025458 	.word	0x58025458
 8008618:	5802546c 	.word	0x5802546c
 800861c:	58025480 	.word	0x58025480
 8008620:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a28      	ldr	r2, [pc, #160]	; (80086cc <DMA_SetConfig+0x338>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d022      	beq.n	8008674 <DMA_SetConfig+0x2e0>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a27      	ldr	r2, [pc, #156]	; (80086d0 <DMA_SetConfig+0x33c>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d01d      	beq.n	8008674 <DMA_SetConfig+0x2e0>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a25      	ldr	r2, [pc, #148]	; (80086d4 <DMA_SetConfig+0x340>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d018      	beq.n	8008674 <DMA_SetConfig+0x2e0>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a24      	ldr	r2, [pc, #144]	; (80086d8 <DMA_SetConfig+0x344>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d013      	beq.n	8008674 <DMA_SetConfig+0x2e0>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a22      	ldr	r2, [pc, #136]	; (80086dc <DMA_SetConfig+0x348>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d00e      	beq.n	8008674 <DMA_SetConfig+0x2e0>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a21      	ldr	r2, [pc, #132]	; (80086e0 <DMA_SetConfig+0x34c>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d009      	beq.n	8008674 <DMA_SetConfig+0x2e0>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a1f      	ldr	r2, [pc, #124]	; (80086e4 <DMA_SetConfig+0x350>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d004      	beq.n	8008674 <DMA_SetConfig+0x2e0>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a1e      	ldr	r2, [pc, #120]	; (80086e8 <DMA_SetConfig+0x354>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d101      	bne.n	8008678 <DMA_SetConfig+0x2e4>
 8008674:	2301      	movs	r3, #1
 8008676:	e000      	b.n	800867a <DMA_SetConfig+0x2e6>
 8008678:	2300      	movs	r3, #0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d020      	beq.n	80086c0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008682:	f003 031f 	and.w	r3, r3, #31
 8008686:	2201      	movs	r2, #1
 8008688:	409a      	lsls	r2, r3
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	2b40      	cmp	r3, #64	; 0x40
 800869c:	d108      	bne.n	80086b0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	60da      	str	r2, [r3, #12]
}
 80086ae:	e007      	b.n	80086c0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	60da      	str	r2, [r3, #12]
}
 80086c0:	bf00      	nop
 80086c2:	371c      	adds	r7, #28
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr
 80086cc:	58025408 	.word	0x58025408
 80086d0:	5802541c 	.word	0x5802541c
 80086d4:	58025430 	.word	0x58025430
 80086d8:	58025444 	.word	0x58025444
 80086dc:	58025458 	.word	0x58025458
 80086e0:	5802546c 	.word	0x5802546c
 80086e4:	58025480 	.word	0x58025480
 80086e8:	58025494 	.word	0x58025494

080086ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a42      	ldr	r2, [pc, #264]	; (8008804 <DMA_CalcBaseAndBitshift+0x118>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d04a      	beq.n	8008794 <DMA_CalcBaseAndBitshift+0xa8>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a41      	ldr	r2, [pc, #260]	; (8008808 <DMA_CalcBaseAndBitshift+0x11c>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d045      	beq.n	8008794 <DMA_CalcBaseAndBitshift+0xa8>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a3f      	ldr	r2, [pc, #252]	; (800880c <DMA_CalcBaseAndBitshift+0x120>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d040      	beq.n	8008794 <DMA_CalcBaseAndBitshift+0xa8>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a3e      	ldr	r2, [pc, #248]	; (8008810 <DMA_CalcBaseAndBitshift+0x124>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d03b      	beq.n	8008794 <DMA_CalcBaseAndBitshift+0xa8>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a3c      	ldr	r2, [pc, #240]	; (8008814 <DMA_CalcBaseAndBitshift+0x128>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d036      	beq.n	8008794 <DMA_CalcBaseAndBitshift+0xa8>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a3b      	ldr	r2, [pc, #236]	; (8008818 <DMA_CalcBaseAndBitshift+0x12c>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d031      	beq.n	8008794 <DMA_CalcBaseAndBitshift+0xa8>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a39      	ldr	r2, [pc, #228]	; (800881c <DMA_CalcBaseAndBitshift+0x130>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d02c      	beq.n	8008794 <DMA_CalcBaseAndBitshift+0xa8>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a38      	ldr	r2, [pc, #224]	; (8008820 <DMA_CalcBaseAndBitshift+0x134>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d027      	beq.n	8008794 <DMA_CalcBaseAndBitshift+0xa8>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a36      	ldr	r2, [pc, #216]	; (8008824 <DMA_CalcBaseAndBitshift+0x138>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d022      	beq.n	8008794 <DMA_CalcBaseAndBitshift+0xa8>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a35      	ldr	r2, [pc, #212]	; (8008828 <DMA_CalcBaseAndBitshift+0x13c>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d01d      	beq.n	8008794 <DMA_CalcBaseAndBitshift+0xa8>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a33      	ldr	r2, [pc, #204]	; (800882c <DMA_CalcBaseAndBitshift+0x140>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d018      	beq.n	8008794 <DMA_CalcBaseAndBitshift+0xa8>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a32      	ldr	r2, [pc, #200]	; (8008830 <DMA_CalcBaseAndBitshift+0x144>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d013      	beq.n	8008794 <DMA_CalcBaseAndBitshift+0xa8>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a30      	ldr	r2, [pc, #192]	; (8008834 <DMA_CalcBaseAndBitshift+0x148>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d00e      	beq.n	8008794 <DMA_CalcBaseAndBitshift+0xa8>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a2f      	ldr	r2, [pc, #188]	; (8008838 <DMA_CalcBaseAndBitshift+0x14c>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d009      	beq.n	8008794 <DMA_CalcBaseAndBitshift+0xa8>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a2d      	ldr	r2, [pc, #180]	; (800883c <DMA_CalcBaseAndBitshift+0x150>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d004      	beq.n	8008794 <DMA_CalcBaseAndBitshift+0xa8>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a2c      	ldr	r2, [pc, #176]	; (8008840 <DMA_CalcBaseAndBitshift+0x154>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d101      	bne.n	8008798 <DMA_CalcBaseAndBitshift+0xac>
 8008794:	2301      	movs	r3, #1
 8008796:	e000      	b.n	800879a <DMA_CalcBaseAndBitshift+0xae>
 8008798:	2300      	movs	r3, #0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d024      	beq.n	80087e8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	3b10      	subs	r3, #16
 80087a6:	4a27      	ldr	r2, [pc, #156]	; (8008844 <DMA_CalcBaseAndBitshift+0x158>)
 80087a8:	fba2 2303 	umull	r2, r3, r2, r3
 80087ac:	091b      	lsrs	r3, r3, #4
 80087ae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f003 0307 	and.w	r3, r3, #7
 80087b6:	4a24      	ldr	r2, [pc, #144]	; (8008848 <DMA_CalcBaseAndBitshift+0x15c>)
 80087b8:	5cd3      	ldrb	r3, [r2, r3]
 80087ba:	461a      	mov	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2b03      	cmp	r3, #3
 80087c4:	d908      	bls.n	80087d8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	461a      	mov	r2, r3
 80087cc:	4b1f      	ldr	r3, [pc, #124]	; (800884c <DMA_CalcBaseAndBitshift+0x160>)
 80087ce:	4013      	ands	r3, r2
 80087d0:	1d1a      	adds	r2, r3, #4
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	659a      	str	r2, [r3, #88]	; 0x58
 80087d6:	e00d      	b.n	80087f4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	461a      	mov	r2, r3
 80087de:	4b1b      	ldr	r3, [pc, #108]	; (800884c <DMA_CalcBaseAndBitshift+0x160>)
 80087e0:	4013      	ands	r3, r2
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	6593      	str	r3, [r2, #88]	; 0x58
 80087e6:	e005      	b.n	80087f4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3714      	adds	r7, #20
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	40020010 	.word	0x40020010
 8008808:	40020028 	.word	0x40020028
 800880c:	40020040 	.word	0x40020040
 8008810:	40020058 	.word	0x40020058
 8008814:	40020070 	.word	0x40020070
 8008818:	40020088 	.word	0x40020088
 800881c:	400200a0 	.word	0x400200a0
 8008820:	400200b8 	.word	0x400200b8
 8008824:	40020410 	.word	0x40020410
 8008828:	40020428 	.word	0x40020428
 800882c:	40020440 	.word	0x40020440
 8008830:	40020458 	.word	0x40020458
 8008834:	40020470 	.word	0x40020470
 8008838:	40020488 	.word	0x40020488
 800883c:	400204a0 	.word	0x400204a0
 8008840:	400204b8 	.word	0x400204b8
 8008844:	aaaaaaab 	.word	0xaaaaaaab
 8008848:	08012808 	.word	0x08012808
 800884c:	fffffc00 	.word	0xfffffc00

08008850 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008850:	b480      	push	{r7}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d120      	bne.n	80088a6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008868:	2b03      	cmp	r3, #3
 800886a:	d858      	bhi.n	800891e <DMA_CheckFifoParam+0xce>
 800886c:	a201      	add	r2, pc, #4	; (adr r2, 8008874 <DMA_CheckFifoParam+0x24>)
 800886e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008872:	bf00      	nop
 8008874:	08008885 	.word	0x08008885
 8008878:	08008897 	.word	0x08008897
 800887c:	08008885 	.word	0x08008885
 8008880:	0800891f 	.word	0x0800891f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800888c:	2b00      	cmp	r3, #0
 800888e:	d048      	beq.n	8008922 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008894:	e045      	b.n	8008922 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800889e:	d142      	bne.n	8008926 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088a4:	e03f      	b.n	8008926 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088ae:	d123      	bne.n	80088f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b4:	2b03      	cmp	r3, #3
 80088b6:	d838      	bhi.n	800892a <DMA_CheckFifoParam+0xda>
 80088b8:	a201      	add	r2, pc, #4	; (adr r2, 80088c0 <DMA_CheckFifoParam+0x70>)
 80088ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088be:	bf00      	nop
 80088c0:	080088d1 	.word	0x080088d1
 80088c4:	080088d7 	.word	0x080088d7
 80088c8:	080088d1 	.word	0x080088d1
 80088cc:	080088e9 	.word	0x080088e9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	73fb      	strb	r3, [r7, #15]
        break;
 80088d4:	e030      	b.n	8008938 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d025      	beq.n	800892e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088e6:	e022      	b.n	800892e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80088f0:	d11f      	bne.n	8008932 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088f6:	e01c      	b.n	8008932 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d902      	bls.n	8008906 <DMA_CheckFifoParam+0xb6>
 8008900:	2b03      	cmp	r3, #3
 8008902:	d003      	beq.n	800890c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008904:	e018      	b.n	8008938 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	73fb      	strb	r3, [r7, #15]
        break;
 800890a:	e015      	b.n	8008938 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008910:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00e      	beq.n	8008936 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	73fb      	strb	r3, [r7, #15]
    break;
 800891c:	e00b      	b.n	8008936 <DMA_CheckFifoParam+0xe6>
        break;
 800891e:	bf00      	nop
 8008920:	e00a      	b.n	8008938 <DMA_CheckFifoParam+0xe8>
        break;
 8008922:	bf00      	nop
 8008924:	e008      	b.n	8008938 <DMA_CheckFifoParam+0xe8>
        break;
 8008926:	bf00      	nop
 8008928:	e006      	b.n	8008938 <DMA_CheckFifoParam+0xe8>
        break;
 800892a:	bf00      	nop
 800892c:	e004      	b.n	8008938 <DMA_CheckFifoParam+0xe8>
        break;
 800892e:	bf00      	nop
 8008930:	e002      	b.n	8008938 <DMA_CheckFifoParam+0xe8>
        break;
 8008932:	bf00      	nop
 8008934:	e000      	b.n	8008938 <DMA_CheckFifoParam+0xe8>
    break;
 8008936:	bf00      	nop
    }
  }

  return status;
 8008938:	7bfb      	ldrb	r3, [r7, #15]
}
 800893a:	4618      	mov	r0, r3
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop

08008948 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a38      	ldr	r2, [pc, #224]	; (8008a3c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d022      	beq.n	80089a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a36      	ldr	r2, [pc, #216]	; (8008a40 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d01d      	beq.n	80089a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a35      	ldr	r2, [pc, #212]	; (8008a44 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d018      	beq.n	80089a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a33      	ldr	r2, [pc, #204]	; (8008a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d013      	beq.n	80089a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a32      	ldr	r2, [pc, #200]	; (8008a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d00e      	beq.n	80089a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a30      	ldr	r2, [pc, #192]	; (8008a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d009      	beq.n	80089a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a2f      	ldr	r2, [pc, #188]	; (8008a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d004      	beq.n	80089a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a2d      	ldr	r2, [pc, #180]	; (8008a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d101      	bne.n	80089aa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80089a6:	2301      	movs	r3, #1
 80089a8:	e000      	b.n	80089ac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80089aa:	2300      	movs	r3, #0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d01a      	beq.n	80089e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	3b08      	subs	r3, #8
 80089b8:	4a28      	ldr	r2, [pc, #160]	; (8008a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80089ba:	fba2 2303 	umull	r2, r3, r2, r3
 80089be:	091b      	lsrs	r3, r3, #4
 80089c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	4b26      	ldr	r3, [pc, #152]	; (8008a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80089c6:	4413      	add	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	461a      	mov	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a24      	ldr	r2, [pc, #144]	; (8008a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80089d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f003 031f 	and.w	r3, r3, #31
 80089dc:	2201      	movs	r2, #1
 80089de:	409a      	lsls	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80089e4:	e024      	b.n	8008a30 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	3b10      	subs	r3, #16
 80089ee:	4a1e      	ldr	r2, [pc, #120]	; (8008a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80089f0:	fba2 2303 	umull	r2, r3, r2, r3
 80089f4:	091b      	lsrs	r3, r3, #4
 80089f6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	4a1c      	ldr	r2, [pc, #112]	; (8008a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d806      	bhi.n	8008a0e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	4a1b      	ldr	r2, [pc, #108]	; (8008a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d902      	bls.n	8008a0e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	3308      	adds	r3, #8
 8008a0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	4b18      	ldr	r3, [pc, #96]	; (8008a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008a12:	4413      	add	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	461a      	mov	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a16      	ldr	r2, [pc, #88]	; (8008a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008a20:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f003 031f 	and.w	r3, r3, #31
 8008a28:	2201      	movs	r2, #1
 8008a2a:	409a      	lsls	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008a30:	bf00      	nop
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	58025408 	.word	0x58025408
 8008a40:	5802541c 	.word	0x5802541c
 8008a44:	58025430 	.word	0x58025430
 8008a48:	58025444 	.word	0x58025444
 8008a4c:	58025458 	.word	0x58025458
 8008a50:	5802546c 	.word	0x5802546c
 8008a54:	58025480 	.word	0x58025480
 8008a58:	58025494 	.word	0x58025494
 8008a5c:	cccccccd 	.word	0xcccccccd
 8008a60:	16009600 	.word	0x16009600
 8008a64:	58025880 	.word	0x58025880
 8008a68:	aaaaaaab 	.word	0xaaaaaaab
 8008a6c:	400204b8 	.word	0x400204b8
 8008a70:	4002040f 	.word	0x4002040f
 8008a74:	10008200 	.word	0x10008200
 8008a78:	40020880 	.word	0x40020880

08008a7c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d04a      	beq.n	8008b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2b08      	cmp	r3, #8
 8008a96:	d847      	bhi.n	8008b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a25      	ldr	r2, [pc, #148]	; (8008b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d022      	beq.n	8008ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a24      	ldr	r2, [pc, #144]	; (8008b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d01d      	beq.n	8008ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a22      	ldr	r2, [pc, #136]	; (8008b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d018      	beq.n	8008ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a21      	ldr	r2, [pc, #132]	; (8008b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d013      	beq.n	8008ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a1f      	ldr	r2, [pc, #124]	; (8008b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d00e      	beq.n	8008ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a1e      	ldr	r2, [pc, #120]	; (8008b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d009      	beq.n	8008ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a1c      	ldr	r2, [pc, #112]	; (8008b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d004      	beq.n	8008ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a1b      	ldr	r2, [pc, #108]	; (8008b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d101      	bne.n	8008aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e000      	b.n	8008aee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008aec:	2300      	movs	r3, #0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00a      	beq.n	8008b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	4b17      	ldr	r3, [pc, #92]	; (8008b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008af6:	4413      	add	r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	461a      	mov	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a15      	ldr	r2, [pc, #84]	; (8008b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008b04:	671a      	str	r2, [r3, #112]	; 0x70
 8008b06:	e009      	b.n	8008b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	4b14      	ldr	r3, [pc, #80]	; (8008b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008b0c:	4413      	add	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	461a      	mov	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a11      	ldr	r2, [pc, #68]	; (8008b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008b1a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	2201      	movs	r2, #1
 8008b22:	409a      	lsls	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008b28:	bf00      	nop
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	58025408 	.word	0x58025408
 8008b38:	5802541c 	.word	0x5802541c
 8008b3c:	58025430 	.word	0x58025430
 8008b40:	58025444 	.word	0x58025444
 8008b44:	58025458 	.word	0x58025458
 8008b48:	5802546c 	.word	0x5802546c
 8008b4c:	58025480 	.word	0x58025480
 8008b50:	58025494 	.word	0x58025494
 8008b54:	1600963f 	.word	0x1600963f
 8008b58:	58025940 	.word	0x58025940
 8008b5c:	1000823f 	.word	0x1000823f
 8008b60:	40020940 	.word	0x40020940

08008b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b089      	sub	sp, #36	; 0x24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008b72:	4b89      	ldr	r3, [pc, #548]	; (8008d98 <HAL_GPIO_Init+0x234>)
 8008b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008b76:	e194      	b.n	8008ea2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	fa01 f303 	lsl.w	r3, r1, r3
 8008b84:	4013      	ands	r3, r2
 8008b86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f000 8186 	beq.w	8008e9c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	f003 0303 	and.w	r3, r3, #3
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d005      	beq.n	8008ba8 <HAL_GPIO_Init+0x44>
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	f003 0303 	and.w	r3, r3, #3
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d130      	bne.n	8008c0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	005b      	lsls	r3, r3, #1
 8008bb2:	2203      	movs	r2, #3
 8008bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb8:	43db      	mvns	r3, r3
 8008bba:	69ba      	ldr	r2, [r7, #24]
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	68da      	ldr	r2, [r3, #12]
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	005b      	lsls	r3, r3, #1
 8008bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bcc:	69ba      	ldr	r2, [r7, #24]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	69ba      	ldr	r2, [r7, #24]
 8008bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008bde:	2201      	movs	r2, #1
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	fa02 f303 	lsl.w	r3, r2, r3
 8008be6:	43db      	mvns	r3, r3
 8008be8:	69ba      	ldr	r2, [r7, #24]
 8008bea:	4013      	ands	r3, r2
 8008bec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	091b      	lsrs	r3, r3, #4
 8008bf4:	f003 0201 	and.w	r2, r3, #1
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8008bfe:	69ba      	ldr	r2, [r7, #24]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	69ba      	ldr	r2, [r7, #24]
 8008c08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	f003 0303 	and.w	r3, r3, #3
 8008c12:	2b03      	cmp	r3, #3
 8008c14:	d017      	beq.n	8008c46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	005b      	lsls	r3, r3, #1
 8008c20:	2203      	movs	r2, #3
 8008c22:	fa02 f303 	lsl.w	r3, r2, r3
 8008c26:	43db      	mvns	r3, r3
 8008c28:	69ba      	ldr	r2, [r7, #24]
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	689a      	ldr	r2, [r3, #8]
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	005b      	lsls	r3, r3, #1
 8008c36:	fa02 f303 	lsl.w	r3, r2, r3
 8008c3a:	69ba      	ldr	r2, [r7, #24]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	69ba      	ldr	r2, [r7, #24]
 8008c44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	f003 0303 	and.w	r3, r3, #3
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d123      	bne.n	8008c9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	08da      	lsrs	r2, r3, #3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	3208      	adds	r2, #8
 8008c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	f003 0307 	and.w	r3, r3, #7
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	220f      	movs	r2, #15
 8008c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c6e:	43db      	mvns	r3, r3
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	4013      	ands	r3, r2
 8008c74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	691a      	ldr	r2, [r3, #16]
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	f003 0307 	and.w	r3, r3, #7
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	fa02 f303 	lsl.w	r3, r2, r3
 8008c86:	69ba      	ldr	r2, [r7, #24]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	08da      	lsrs	r2, r3, #3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	3208      	adds	r2, #8
 8008c94:	69b9      	ldr	r1, [r7, #24]
 8008c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	005b      	lsls	r3, r3, #1
 8008ca4:	2203      	movs	r2, #3
 8008ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8008caa:	43db      	mvns	r3, r3
 8008cac:	69ba      	ldr	r2, [r7, #24]
 8008cae:	4013      	ands	r3, r2
 8008cb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	f003 0203 	and.w	r2, r3, #3
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	005b      	lsls	r3, r3, #1
 8008cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f000 80e0 	beq.w	8008e9c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008cdc:	4b2f      	ldr	r3, [pc, #188]	; (8008d9c <HAL_GPIO_Init+0x238>)
 8008cde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008ce2:	4a2e      	ldr	r2, [pc, #184]	; (8008d9c <HAL_GPIO_Init+0x238>)
 8008ce4:	f043 0302 	orr.w	r3, r3, #2
 8008ce8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008cec:	4b2b      	ldr	r3, [pc, #172]	; (8008d9c <HAL_GPIO_Init+0x238>)
 8008cee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008cf2:	f003 0302 	and.w	r3, r3, #2
 8008cf6:	60fb      	str	r3, [r7, #12]
 8008cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008cfa:	4a29      	ldr	r2, [pc, #164]	; (8008da0 <HAL_GPIO_Init+0x23c>)
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	089b      	lsrs	r3, r3, #2
 8008d00:	3302      	adds	r3, #2
 8008d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	f003 0303 	and.w	r3, r3, #3
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	220f      	movs	r2, #15
 8008d12:	fa02 f303 	lsl.w	r3, r2, r3
 8008d16:	43db      	mvns	r3, r3
 8008d18:	69ba      	ldr	r2, [r7, #24]
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a20      	ldr	r2, [pc, #128]	; (8008da4 <HAL_GPIO_Init+0x240>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d052      	beq.n	8008dcc <HAL_GPIO_Init+0x268>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a1f      	ldr	r2, [pc, #124]	; (8008da8 <HAL_GPIO_Init+0x244>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d031      	beq.n	8008d92 <HAL_GPIO_Init+0x22e>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a1e      	ldr	r2, [pc, #120]	; (8008dac <HAL_GPIO_Init+0x248>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d02b      	beq.n	8008d8e <HAL_GPIO_Init+0x22a>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a1d      	ldr	r2, [pc, #116]	; (8008db0 <HAL_GPIO_Init+0x24c>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d025      	beq.n	8008d8a <HAL_GPIO_Init+0x226>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a1c      	ldr	r2, [pc, #112]	; (8008db4 <HAL_GPIO_Init+0x250>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d01f      	beq.n	8008d86 <HAL_GPIO_Init+0x222>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a1b      	ldr	r2, [pc, #108]	; (8008db8 <HAL_GPIO_Init+0x254>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d019      	beq.n	8008d82 <HAL_GPIO_Init+0x21e>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a1a      	ldr	r2, [pc, #104]	; (8008dbc <HAL_GPIO_Init+0x258>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d013      	beq.n	8008d7e <HAL_GPIO_Init+0x21a>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a19      	ldr	r2, [pc, #100]	; (8008dc0 <HAL_GPIO_Init+0x25c>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d00d      	beq.n	8008d7a <HAL_GPIO_Init+0x216>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a18      	ldr	r2, [pc, #96]	; (8008dc4 <HAL_GPIO_Init+0x260>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d007      	beq.n	8008d76 <HAL_GPIO_Init+0x212>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a17      	ldr	r2, [pc, #92]	; (8008dc8 <HAL_GPIO_Init+0x264>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d101      	bne.n	8008d72 <HAL_GPIO_Init+0x20e>
 8008d6e:	2309      	movs	r3, #9
 8008d70:	e02d      	b.n	8008dce <HAL_GPIO_Init+0x26a>
 8008d72:	230a      	movs	r3, #10
 8008d74:	e02b      	b.n	8008dce <HAL_GPIO_Init+0x26a>
 8008d76:	2308      	movs	r3, #8
 8008d78:	e029      	b.n	8008dce <HAL_GPIO_Init+0x26a>
 8008d7a:	2307      	movs	r3, #7
 8008d7c:	e027      	b.n	8008dce <HAL_GPIO_Init+0x26a>
 8008d7e:	2306      	movs	r3, #6
 8008d80:	e025      	b.n	8008dce <HAL_GPIO_Init+0x26a>
 8008d82:	2305      	movs	r3, #5
 8008d84:	e023      	b.n	8008dce <HAL_GPIO_Init+0x26a>
 8008d86:	2304      	movs	r3, #4
 8008d88:	e021      	b.n	8008dce <HAL_GPIO_Init+0x26a>
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	e01f      	b.n	8008dce <HAL_GPIO_Init+0x26a>
 8008d8e:	2302      	movs	r3, #2
 8008d90:	e01d      	b.n	8008dce <HAL_GPIO_Init+0x26a>
 8008d92:	2301      	movs	r3, #1
 8008d94:	e01b      	b.n	8008dce <HAL_GPIO_Init+0x26a>
 8008d96:	bf00      	nop
 8008d98:	58000080 	.word	0x58000080
 8008d9c:	58024400 	.word	0x58024400
 8008da0:	58000400 	.word	0x58000400
 8008da4:	58020000 	.word	0x58020000
 8008da8:	58020400 	.word	0x58020400
 8008dac:	58020800 	.word	0x58020800
 8008db0:	58020c00 	.word	0x58020c00
 8008db4:	58021000 	.word	0x58021000
 8008db8:	58021400 	.word	0x58021400
 8008dbc:	58021800 	.word	0x58021800
 8008dc0:	58021c00 	.word	0x58021c00
 8008dc4:	58022000 	.word	0x58022000
 8008dc8:	58022400 	.word	0x58022400
 8008dcc:	2300      	movs	r3, #0
 8008dce:	69fa      	ldr	r2, [r7, #28]
 8008dd0:	f002 0203 	and.w	r2, r2, #3
 8008dd4:	0092      	lsls	r2, r2, #2
 8008dd6:	4093      	lsls	r3, r2
 8008dd8:	69ba      	ldr	r2, [r7, #24]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008dde:	4938      	ldr	r1, [pc, #224]	; (8008ec0 <HAL_GPIO_Init+0x35c>)
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	089b      	lsrs	r3, r3, #2
 8008de4:	3302      	adds	r3, #2
 8008de6:	69ba      	ldr	r2, [r7, #24]
 8008de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	43db      	mvns	r3, r3
 8008df8:	69ba      	ldr	r2, [r7, #24]
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008e0a:	69ba      	ldr	r2, [r7, #24]
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008e12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	43db      	mvns	r3, r3
 8008e26:	69ba      	ldr	r2, [r7, #24]
 8008e28:	4013      	ands	r3, r2
 8008e2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d003      	beq.n	8008e40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008e38:	69ba      	ldr	r2, [r7, #24]
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008e40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	43db      	mvns	r3, r3
 8008e52:	69ba      	ldr	r2, [r7, #24]
 8008e54:	4013      	ands	r3, r2
 8008e56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d003      	beq.n	8008e6c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008e64:	69ba      	ldr	r2, [r7, #24]
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	69ba      	ldr	r2, [r7, #24]
 8008e70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	43db      	mvns	r3, r3
 8008e7c:	69ba      	ldr	r2, [r7, #24]
 8008e7e:	4013      	ands	r3, r2
 8008e80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d003      	beq.n	8008e96 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008e8e:	69ba      	ldr	r2, [r7, #24]
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	69ba      	ldr	r2, [r7, #24]
 8008e9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f47f ae63 	bne.w	8008b78 <HAL_GPIO_Init+0x14>
  }
}
 8008eb2:	bf00      	nop
 8008eb4:	bf00      	nop
 8008eb6:	3724      	adds	r7, #36	; 0x24
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr
 8008ec0:	58000400 	.word	0x58000400

08008ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	807b      	strh	r3, [r7, #2]
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ed4:	787b      	ldrb	r3, [r7, #1]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008eda:	887a      	ldrh	r2, [r7, #2]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008ee0:	e003      	b.n	8008eea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008ee2:	887b      	ldrh	r3, [r7, #2]
 8008ee4:	041a      	lsls	r2, r3, #16
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	619a      	str	r2, [r3, #24]
}
 8008eea:	bf00      	nop
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b082      	sub	sp, #8
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	4603      	mov	r3, r0
 8008efe:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f04:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008f08:	88fb      	ldrh	r3, [r7, #6]
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d008      	beq.n	8008f22 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008f10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f14:	88fb      	ldrh	r3, [r7, #6]
 8008f16:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008f1a:	88fb      	ldrh	r3, [r7, #6]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7fa fe45 	bl	8003bac <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008f22:	bf00      	nop
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
	...

08008f2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008f34:	4b19      	ldr	r3, [pc, #100]	; (8008f9c <HAL_PWREx_ConfigSupply+0x70>)
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	f003 0304 	and.w	r3, r3, #4
 8008f3c:	2b04      	cmp	r3, #4
 8008f3e:	d00a      	beq.n	8008f56 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008f40:	4b16      	ldr	r3, [pc, #88]	; (8008f9c <HAL_PWREx_ConfigSupply+0x70>)
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	f003 0307 	and.w	r3, r3, #7
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d001      	beq.n	8008f52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e01f      	b.n	8008f92 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	e01d      	b.n	8008f92 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008f56:	4b11      	ldr	r3, [pc, #68]	; (8008f9c <HAL_PWREx_ConfigSupply+0x70>)
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	f023 0207 	bic.w	r2, r3, #7
 8008f5e:	490f      	ldr	r1, [pc, #60]	; (8008f9c <HAL_PWREx_ConfigSupply+0x70>)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008f66:	f7fc fc91 	bl	800588c <HAL_GetTick>
 8008f6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008f6c:	e009      	b.n	8008f82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008f6e:	f7fc fc8d 	bl	800588c <HAL_GetTick>
 8008f72:	4602      	mov	r2, r0
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	1ad3      	subs	r3, r2, r3
 8008f78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f7c:	d901      	bls.n	8008f82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e007      	b.n	8008f92 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008f82:	4b06      	ldr	r3, [pc, #24]	; (8008f9c <HAL_PWREx_ConfigSupply+0x70>)
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f8e:	d1ee      	bne.n	8008f6e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	58024800 	.word	0x58024800

08008fa0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b08c      	sub	sp, #48	; 0x30
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d102      	bne.n	8008fb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	f000 bc1c 	b.w	80097ec <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 0301 	and.w	r3, r3, #1
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f000 8087 	beq.w	80090d0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fc2:	4b9e      	ldr	r3, [pc, #632]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008fcc:	4b9b      	ldr	r3, [pc, #620]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 8008fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd4:	2b10      	cmp	r3, #16
 8008fd6:	d007      	beq.n	8008fe8 <HAL_RCC_OscConfig+0x48>
 8008fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fda:	2b18      	cmp	r3, #24
 8008fdc:	d110      	bne.n	8009000 <HAL_RCC_OscConfig+0x60>
 8008fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe0:	f003 0303 	and.w	r3, r3, #3
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d10b      	bne.n	8009000 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fe8:	4b94      	ldr	r3, [pc, #592]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d06c      	beq.n	80090ce <HAL_RCC_OscConfig+0x12e>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d168      	bne.n	80090ce <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e3f5      	b.n	80097ec <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009008:	d106      	bne.n	8009018 <HAL_RCC_OscConfig+0x78>
 800900a:	4b8c      	ldr	r3, [pc, #560]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a8b      	ldr	r2, [pc, #556]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 8009010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009014:	6013      	str	r3, [r2, #0]
 8009016:	e02e      	b.n	8009076 <HAL_RCC_OscConfig+0xd6>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10c      	bne.n	800903a <HAL_RCC_OscConfig+0x9a>
 8009020:	4b86      	ldr	r3, [pc, #536]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a85      	ldr	r2, [pc, #532]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 8009026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800902a:	6013      	str	r3, [r2, #0]
 800902c:	4b83      	ldr	r3, [pc, #524]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a82      	ldr	r2, [pc, #520]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 8009032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009036:	6013      	str	r3, [r2, #0]
 8009038:	e01d      	b.n	8009076 <HAL_RCC_OscConfig+0xd6>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009042:	d10c      	bne.n	800905e <HAL_RCC_OscConfig+0xbe>
 8009044:	4b7d      	ldr	r3, [pc, #500]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a7c      	ldr	r2, [pc, #496]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 800904a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800904e:	6013      	str	r3, [r2, #0]
 8009050:	4b7a      	ldr	r3, [pc, #488]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a79      	ldr	r2, [pc, #484]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 8009056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800905a:	6013      	str	r3, [r2, #0]
 800905c:	e00b      	b.n	8009076 <HAL_RCC_OscConfig+0xd6>
 800905e:	4b77      	ldr	r3, [pc, #476]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a76      	ldr	r2, [pc, #472]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 8009064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009068:	6013      	str	r3, [r2, #0]
 800906a:	4b74      	ldr	r3, [pc, #464]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a73      	ldr	r2, [pc, #460]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 8009070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009074:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d013      	beq.n	80090a6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800907e:	f7fc fc05 	bl	800588c <HAL_GetTick>
 8009082:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009084:	e008      	b.n	8009098 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009086:	f7fc fc01 	bl	800588c <HAL_GetTick>
 800908a:	4602      	mov	r2, r0
 800908c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	2b64      	cmp	r3, #100	; 0x64
 8009092:	d901      	bls.n	8009098 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8009094:	2303      	movs	r3, #3
 8009096:	e3a9      	b.n	80097ec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009098:	4b68      	ldr	r3, [pc, #416]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d0f0      	beq.n	8009086 <HAL_RCC_OscConfig+0xe6>
 80090a4:	e014      	b.n	80090d0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090a6:	f7fc fbf1 	bl	800588c <HAL_GetTick>
 80090aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80090ac:	e008      	b.n	80090c0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090ae:	f7fc fbed 	bl	800588c <HAL_GetTick>
 80090b2:	4602      	mov	r2, r0
 80090b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	2b64      	cmp	r3, #100	; 0x64
 80090ba:	d901      	bls.n	80090c0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80090bc:	2303      	movs	r3, #3
 80090be:	e395      	b.n	80097ec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80090c0:	4b5e      	ldr	r3, [pc, #376]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1f0      	bne.n	80090ae <HAL_RCC_OscConfig+0x10e>
 80090cc:	e000      	b.n	80090d0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090ce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 0302 	and.w	r3, r3, #2
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f000 80ca 	beq.w	8009272 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090de:	4b57      	ldr	r3, [pc, #348]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090e6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80090e8:	4b54      	ldr	r3, [pc, #336]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 80090ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ec:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80090ee:	6a3b      	ldr	r3, [r7, #32]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d007      	beq.n	8009104 <HAL_RCC_OscConfig+0x164>
 80090f4:	6a3b      	ldr	r3, [r7, #32]
 80090f6:	2b18      	cmp	r3, #24
 80090f8:	d156      	bne.n	80091a8 <HAL_RCC_OscConfig+0x208>
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	f003 0303 	and.w	r3, r3, #3
 8009100:	2b00      	cmp	r3, #0
 8009102:	d151      	bne.n	80091a8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009104:	4b4d      	ldr	r3, [pc, #308]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 0304 	and.w	r3, r3, #4
 800910c:	2b00      	cmp	r3, #0
 800910e:	d005      	beq.n	800911c <HAL_RCC_OscConfig+0x17c>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d101      	bne.n	800911c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	e367      	b.n	80097ec <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800911c:	4b47      	ldr	r3, [pc, #284]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f023 0219 	bic.w	r2, r3, #25
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	4944      	ldr	r1, [pc, #272]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 800912a:	4313      	orrs	r3, r2
 800912c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800912e:	f7fc fbad 	bl	800588c <HAL_GetTick>
 8009132:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009134:	e008      	b.n	8009148 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009136:	f7fc fba9 	bl	800588c <HAL_GetTick>
 800913a:	4602      	mov	r2, r0
 800913c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913e:	1ad3      	subs	r3, r2, r3
 8009140:	2b02      	cmp	r3, #2
 8009142:	d901      	bls.n	8009148 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8009144:	2303      	movs	r3, #3
 8009146:	e351      	b.n	80097ec <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009148:	4b3c      	ldr	r3, [pc, #240]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 0304 	and.w	r3, r3, #4
 8009150:	2b00      	cmp	r3, #0
 8009152:	d0f0      	beq.n	8009136 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009154:	f7fc fba6 	bl	80058a4 <HAL_GetREVID>
 8009158:	4603      	mov	r3, r0
 800915a:	f241 0203 	movw	r2, #4099	; 0x1003
 800915e:	4293      	cmp	r3, r2
 8009160:	d817      	bhi.n	8009192 <HAL_RCC_OscConfig+0x1f2>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	2b40      	cmp	r3, #64	; 0x40
 8009168:	d108      	bne.n	800917c <HAL_RCC_OscConfig+0x1dc>
 800916a:	4b34      	ldr	r3, [pc, #208]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009172:	4a32      	ldr	r2, [pc, #200]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 8009174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009178:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800917a:	e07a      	b.n	8009272 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800917c:	4b2f      	ldr	r3, [pc, #188]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	691b      	ldr	r3, [r3, #16]
 8009188:	031b      	lsls	r3, r3, #12
 800918a:	492c      	ldr	r1, [pc, #176]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 800918c:	4313      	orrs	r3, r2
 800918e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009190:	e06f      	b.n	8009272 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009192:	4b2a      	ldr	r3, [pc, #168]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	061b      	lsls	r3, r3, #24
 80091a0:	4926      	ldr	r1, [pc, #152]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 80091a2:	4313      	orrs	r3, r2
 80091a4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80091a6:	e064      	b.n	8009272 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d047      	beq.n	8009240 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80091b0:	4b22      	ldr	r3, [pc, #136]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f023 0219 	bic.w	r2, r3, #25
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	491f      	ldr	r1, [pc, #124]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 80091be:	4313      	orrs	r3, r2
 80091c0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091c2:	f7fc fb63 	bl	800588c <HAL_GetTick>
 80091c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80091c8:	e008      	b.n	80091dc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80091ca:	f7fc fb5f 	bl	800588c <HAL_GetTick>
 80091ce:	4602      	mov	r2, r0
 80091d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d901      	bls.n	80091dc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80091d8:	2303      	movs	r3, #3
 80091da:	e307      	b.n	80097ec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80091dc:	4b17      	ldr	r3, [pc, #92]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0304 	and.w	r3, r3, #4
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d0f0      	beq.n	80091ca <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091e8:	f7fc fb5c 	bl	80058a4 <HAL_GetREVID>
 80091ec:	4603      	mov	r3, r0
 80091ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d817      	bhi.n	8009226 <HAL_RCC_OscConfig+0x286>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	2b40      	cmp	r3, #64	; 0x40
 80091fc:	d108      	bne.n	8009210 <HAL_RCC_OscConfig+0x270>
 80091fe:	4b0f      	ldr	r3, [pc, #60]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009206:	4a0d      	ldr	r2, [pc, #52]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 8009208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800920c:	6053      	str	r3, [r2, #4]
 800920e:	e030      	b.n	8009272 <HAL_RCC_OscConfig+0x2d2>
 8009210:	4b0a      	ldr	r3, [pc, #40]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	031b      	lsls	r3, r3, #12
 800921e:	4907      	ldr	r1, [pc, #28]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 8009220:	4313      	orrs	r3, r2
 8009222:	604b      	str	r3, [r1, #4]
 8009224:	e025      	b.n	8009272 <HAL_RCC_OscConfig+0x2d2>
 8009226:	4b05      	ldr	r3, [pc, #20]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	061b      	lsls	r3, r3, #24
 8009234:	4901      	ldr	r1, [pc, #4]	; (800923c <HAL_RCC_OscConfig+0x29c>)
 8009236:	4313      	orrs	r3, r2
 8009238:	604b      	str	r3, [r1, #4]
 800923a:	e01a      	b.n	8009272 <HAL_RCC_OscConfig+0x2d2>
 800923c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009240:	4b9e      	ldr	r3, [pc, #632]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a9d      	ldr	r2, [pc, #628]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 8009246:	f023 0301 	bic.w	r3, r3, #1
 800924a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800924c:	f7fc fb1e 	bl	800588c <HAL_GetTick>
 8009250:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009252:	e008      	b.n	8009266 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009254:	f7fc fb1a 	bl	800588c <HAL_GetTick>
 8009258:	4602      	mov	r2, r0
 800925a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	2b02      	cmp	r3, #2
 8009260:	d901      	bls.n	8009266 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8009262:	2303      	movs	r3, #3
 8009264:	e2c2      	b.n	80097ec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009266:	4b95      	ldr	r3, [pc, #596]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 0304 	and.w	r3, r3, #4
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1f0      	bne.n	8009254 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f003 0310 	and.w	r3, r3, #16
 800927a:	2b00      	cmp	r3, #0
 800927c:	f000 80a9 	beq.w	80093d2 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009280:	4b8e      	ldr	r3, [pc, #568]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009288:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800928a:	4b8c      	ldr	r3, [pc, #560]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 800928c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	2b08      	cmp	r3, #8
 8009294:	d007      	beq.n	80092a6 <HAL_RCC_OscConfig+0x306>
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	2b18      	cmp	r3, #24
 800929a:	d13a      	bne.n	8009312 <HAL_RCC_OscConfig+0x372>
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	f003 0303 	and.w	r3, r3, #3
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d135      	bne.n	8009312 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80092a6:	4b85      	ldr	r3, [pc, #532]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d005      	beq.n	80092be <HAL_RCC_OscConfig+0x31e>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	69db      	ldr	r3, [r3, #28]
 80092b6:	2b80      	cmp	r3, #128	; 0x80
 80092b8:	d001      	beq.n	80092be <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	e296      	b.n	80097ec <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80092be:	f7fc faf1 	bl	80058a4 <HAL_GetREVID>
 80092c2:	4603      	mov	r3, r0
 80092c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d817      	bhi.n	80092fc <HAL_RCC_OscConfig+0x35c>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a1b      	ldr	r3, [r3, #32]
 80092d0:	2b20      	cmp	r3, #32
 80092d2:	d108      	bne.n	80092e6 <HAL_RCC_OscConfig+0x346>
 80092d4:	4b79      	ldr	r3, [pc, #484]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80092dc:	4a77      	ldr	r2, [pc, #476]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 80092de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092e2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80092e4:	e075      	b.n	80093d2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80092e6:	4b75      	ldr	r3, [pc, #468]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	069b      	lsls	r3, r3, #26
 80092f4:	4971      	ldr	r1, [pc, #452]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80092fa:	e06a      	b.n	80093d2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80092fc:	4b6f      	ldr	r3, [pc, #444]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6a1b      	ldr	r3, [r3, #32]
 8009308:	061b      	lsls	r3, r3, #24
 800930a:	496c      	ldr	r1, [pc, #432]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 800930c:	4313      	orrs	r3, r2
 800930e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009310:	e05f      	b.n	80093d2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	69db      	ldr	r3, [r3, #28]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d042      	beq.n	80093a0 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800931a:	4b68      	ldr	r3, [pc, #416]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a67      	ldr	r2, [pc, #412]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 8009320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009326:	f7fc fab1 	bl	800588c <HAL_GetTick>
 800932a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800932c:	e008      	b.n	8009340 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800932e:	f7fc faad 	bl	800588c <HAL_GetTick>
 8009332:	4602      	mov	r2, r0
 8009334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	2b02      	cmp	r3, #2
 800933a:	d901      	bls.n	8009340 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 800933c:	2303      	movs	r3, #3
 800933e:	e255      	b.n	80097ec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009340:	4b5e      	ldr	r3, [pc, #376]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009348:	2b00      	cmp	r3, #0
 800934a:	d0f0      	beq.n	800932e <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800934c:	f7fc faaa 	bl	80058a4 <HAL_GetREVID>
 8009350:	4603      	mov	r3, r0
 8009352:	f241 0203 	movw	r2, #4099	; 0x1003
 8009356:	4293      	cmp	r3, r2
 8009358:	d817      	bhi.n	800938a <HAL_RCC_OscConfig+0x3ea>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a1b      	ldr	r3, [r3, #32]
 800935e:	2b20      	cmp	r3, #32
 8009360:	d108      	bne.n	8009374 <HAL_RCC_OscConfig+0x3d4>
 8009362:	4b56      	ldr	r3, [pc, #344]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800936a:	4a54      	ldr	r2, [pc, #336]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 800936c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009370:	6053      	str	r3, [r2, #4]
 8009372:	e02e      	b.n	80093d2 <HAL_RCC_OscConfig+0x432>
 8009374:	4b51      	ldr	r3, [pc, #324]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a1b      	ldr	r3, [r3, #32]
 8009380:	069b      	lsls	r3, r3, #26
 8009382:	494e      	ldr	r1, [pc, #312]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 8009384:	4313      	orrs	r3, r2
 8009386:	604b      	str	r3, [r1, #4]
 8009388:	e023      	b.n	80093d2 <HAL_RCC_OscConfig+0x432>
 800938a:	4b4c      	ldr	r3, [pc, #304]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a1b      	ldr	r3, [r3, #32]
 8009396:	061b      	lsls	r3, r3, #24
 8009398:	4948      	ldr	r1, [pc, #288]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 800939a:	4313      	orrs	r3, r2
 800939c:	60cb      	str	r3, [r1, #12]
 800939e:	e018      	b.n	80093d2 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80093a0:	4b46      	ldr	r3, [pc, #280]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a45      	ldr	r2, [pc, #276]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 80093a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093ac:	f7fc fa6e 	bl	800588c <HAL_GetTick>
 80093b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80093b2:	e008      	b.n	80093c6 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80093b4:	f7fc fa6a 	bl	800588c <HAL_GetTick>
 80093b8:	4602      	mov	r2, r0
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	1ad3      	subs	r3, r2, r3
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d901      	bls.n	80093c6 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80093c2:	2303      	movs	r3, #3
 80093c4:	e212      	b.n	80097ec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80093c6:	4b3d      	ldr	r3, [pc, #244]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1f0      	bne.n	80093b4 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f003 0308 	and.w	r3, r3, #8
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d036      	beq.n	800944c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d019      	beq.n	800941a <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80093e6:	4b35      	ldr	r3, [pc, #212]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 80093e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093ea:	4a34      	ldr	r2, [pc, #208]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 80093ec:	f043 0301 	orr.w	r3, r3, #1
 80093f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093f2:	f7fc fa4b 	bl	800588c <HAL_GetTick>
 80093f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80093f8:	e008      	b.n	800940c <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093fa:	f7fc fa47 	bl	800588c <HAL_GetTick>
 80093fe:	4602      	mov	r2, r0
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	2b02      	cmp	r3, #2
 8009406:	d901      	bls.n	800940c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8009408:	2303      	movs	r3, #3
 800940a:	e1ef      	b.n	80097ec <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800940c:	4b2b      	ldr	r3, [pc, #172]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 800940e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009410:	f003 0302 	and.w	r3, r3, #2
 8009414:	2b00      	cmp	r3, #0
 8009416:	d0f0      	beq.n	80093fa <HAL_RCC_OscConfig+0x45a>
 8009418:	e018      	b.n	800944c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800941a:	4b28      	ldr	r3, [pc, #160]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 800941c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800941e:	4a27      	ldr	r2, [pc, #156]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 8009420:	f023 0301 	bic.w	r3, r3, #1
 8009424:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009426:	f7fc fa31 	bl	800588c <HAL_GetTick>
 800942a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800942c:	e008      	b.n	8009440 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800942e:	f7fc fa2d 	bl	800588c <HAL_GetTick>
 8009432:	4602      	mov	r2, r0
 8009434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	2b02      	cmp	r3, #2
 800943a:	d901      	bls.n	8009440 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800943c:	2303      	movs	r3, #3
 800943e:	e1d5      	b.n	80097ec <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009440:	4b1e      	ldr	r3, [pc, #120]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 8009442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009444:	f003 0302 	and.w	r3, r3, #2
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1f0      	bne.n	800942e <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f003 0320 	and.w	r3, r3, #32
 8009454:	2b00      	cmp	r3, #0
 8009456:	d039      	beq.n	80094cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d019      	beq.n	8009494 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009460:	4b16      	ldr	r3, [pc, #88]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a15      	ldr	r2, [pc, #84]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 8009466:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800946a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800946c:	f7fc fa0e 	bl	800588c <HAL_GetTick>
 8009470:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009472:	e008      	b.n	8009486 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009474:	f7fc fa0a 	bl	800588c <HAL_GetTick>
 8009478:	4602      	mov	r2, r0
 800947a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	2b02      	cmp	r3, #2
 8009480:	d901      	bls.n	8009486 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8009482:	2303      	movs	r3, #3
 8009484:	e1b2      	b.n	80097ec <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009486:	4b0d      	ldr	r3, [pc, #52]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800948e:	2b00      	cmp	r3, #0
 8009490:	d0f0      	beq.n	8009474 <HAL_RCC_OscConfig+0x4d4>
 8009492:	e01b      	b.n	80094cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009494:	4b09      	ldr	r3, [pc, #36]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a08      	ldr	r2, [pc, #32]	; (80094bc <HAL_RCC_OscConfig+0x51c>)
 800949a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800949e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80094a0:	f7fc f9f4 	bl	800588c <HAL_GetTick>
 80094a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80094a6:	e00b      	b.n	80094c0 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80094a8:	f7fc f9f0 	bl	800588c <HAL_GetTick>
 80094ac:	4602      	mov	r2, r0
 80094ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d904      	bls.n	80094c0 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80094b6:	2303      	movs	r3, #3
 80094b8:	e198      	b.n	80097ec <HAL_RCC_OscConfig+0x84c>
 80094ba:	bf00      	nop
 80094bc:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80094c0:	4ba3      	ldr	r3, [pc, #652]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1ed      	bne.n	80094a8 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 0304 	and.w	r3, r3, #4
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f000 8081 	beq.w	80095dc <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80094da:	4b9e      	ldr	r3, [pc, #632]	; (8009754 <HAL_RCC_OscConfig+0x7b4>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a9d      	ldr	r2, [pc, #628]	; (8009754 <HAL_RCC_OscConfig+0x7b4>)
 80094e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80094e6:	f7fc f9d1 	bl	800588c <HAL_GetTick>
 80094ea:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80094ec:	e008      	b.n	8009500 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80094ee:	f7fc f9cd 	bl	800588c <HAL_GetTick>
 80094f2:	4602      	mov	r2, r0
 80094f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	2b64      	cmp	r3, #100	; 0x64
 80094fa:	d901      	bls.n	8009500 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80094fc:	2303      	movs	r3, #3
 80094fe:	e175      	b.n	80097ec <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009500:	4b94      	ldr	r3, [pc, #592]	; (8009754 <HAL_RCC_OscConfig+0x7b4>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009508:	2b00      	cmp	r3, #0
 800950a:	d0f0      	beq.n	80094ee <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	2b01      	cmp	r3, #1
 8009512:	d106      	bne.n	8009522 <HAL_RCC_OscConfig+0x582>
 8009514:	4b8e      	ldr	r3, [pc, #568]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 8009516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009518:	4a8d      	ldr	r2, [pc, #564]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 800951a:	f043 0301 	orr.w	r3, r3, #1
 800951e:	6713      	str	r3, [r2, #112]	; 0x70
 8009520:	e02d      	b.n	800957e <HAL_RCC_OscConfig+0x5de>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10c      	bne.n	8009544 <HAL_RCC_OscConfig+0x5a4>
 800952a:	4b89      	ldr	r3, [pc, #548]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 800952c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800952e:	4a88      	ldr	r2, [pc, #544]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 8009530:	f023 0301 	bic.w	r3, r3, #1
 8009534:	6713      	str	r3, [r2, #112]	; 0x70
 8009536:	4b86      	ldr	r3, [pc, #536]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 8009538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800953a:	4a85      	ldr	r2, [pc, #532]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 800953c:	f023 0304 	bic.w	r3, r3, #4
 8009540:	6713      	str	r3, [r2, #112]	; 0x70
 8009542:	e01c      	b.n	800957e <HAL_RCC_OscConfig+0x5de>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	2b05      	cmp	r3, #5
 800954a:	d10c      	bne.n	8009566 <HAL_RCC_OscConfig+0x5c6>
 800954c:	4b80      	ldr	r3, [pc, #512]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 800954e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009550:	4a7f      	ldr	r2, [pc, #508]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 8009552:	f043 0304 	orr.w	r3, r3, #4
 8009556:	6713      	str	r3, [r2, #112]	; 0x70
 8009558:	4b7d      	ldr	r3, [pc, #500]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 800955a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800955c:	4a7c      	ldr	r2, [pc, #496]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 800955e:	f043 0301 	orr.w	r3, r3, #1
 8009562:	6713      	str	r3, [r2, #112]	; 0x70
 8009564:	e00b      	b.n	800957e <HAL_RCC_OscConfig+0x5de>
 8009566:	4b7a      	ldr	r3, [pc, #488]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 8009568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800956a:	4a79      	ldr	r2, [pc, #484]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 800956c:	f023 0301 	bic.w	r3, r3, #1
 8009570:	6713      	str	r3, [r2, #112]	; 0x70
 8009572:	4b77      	ldr	r3, [pc, #476]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 8009574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009576:	4a76      	ldr	r2, [pc, #472]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 8009578:	f023 0304 	bic.w	r3, r3, #4
 800957c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d015      	beq.n	80095b2 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009586:	f7fc f981 	bl	800588c <HAL_GetTick>
 800958a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800958c:	e00a      	b.n	80095a4 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800958e:	f7fc f97d 	bl	800588c <HAL_GetTick>
 8009592:	4602      	mov	r2, r0
 8009594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	f241 3288 	movw	r2, #5000	; 0x1388
 800959c:	4293      	cmp	r3, r2
 800959e:	d901      	bls.n	80095a4 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80095a0:	2303      	movs	r3, #3
 80095a2:	e123      	b.n	80097ec <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095a4:	4b6a      	ldr	r3, [pc, #424]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 80095a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095a8:	f003 0302 	and.w	r3, r3, #2
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d0ee      	beq.n	800958e <HAL_RCC_OscConfig+0x5ee>
 80095b0:	e014      	b.n	80095dc <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095b2:	f7fc f96b 	bl	800588c <HAL_GetTick>
 80095b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80095b8:	e00a      	b.n	80095d0 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80095ba:	f7fc f967 	bl	800588c <HAL_GetTick>
 80095be:	4602      	mov	r2, r0
 80095c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d901      	bls.n	80095d0 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80095cc:	2303      	movs	r3, #3
 80095ce:	e10d      	b.n	80097ec <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80095d0:	4b5f      	ldr	r3, [pc, #380]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 80095d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095d4:	f003 0302 	and.w	r3, r3, #2
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1ee      	bne.n	80095ba <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f000 8102 	beq.w	80097ea <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80095e6:	4b5a      	ldr	r3, [pc, #360]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095ee:	2b18      	cmp	r3, #24
 80095f0:	f000 80bd 	beq.w	800976e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	f040 8095 	bne.w	8009728 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095fe:	4b54      	ldr	r3, [pc, #336]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a53      	ldr	r2, [pc, #332]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 8009604:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800960a:	f7fc f93f 	bl	800588c <HAL_GetTick>
 800960e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009610:	e008      	b.n	8009624 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009612:	f7fc f93b 	bl	800588c <HAL_GetTick>
 8009616:	4602      	mov	r2, r0
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	2b02      	cmp	r3, #2
 800961e:	d901      	bls.n	8009624 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8009620:	2303      	movs	r3, #3
 8009622:	e0e3      	b.n	80097ec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009624:	4b4a      	ldr	r3, [pc, #296]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1f0      	bne.n	8009612 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009630:	4b47      	ldr	r3, [pc, #284]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 8009632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009634:	4b48      	ldr	r3, [pc, #288]	; (8009758 <HAL_RCC_OscConfig+0x7b8>)
 8009636:	4013      	ands	r3, r2
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009640:	0112      	lsls	r2, r2, #4
 8009642:	430a      	orrs	r2, r1
 8009644:	4942      	ldr	r1, [pc, #264]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 8009646:	4313      	orrs	r3, r2
 8009648:	628b      	str	r3, [r1, #40]	; 0x28
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800964e:	3b01      	subs	r3, #1
 8009650:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009658:	3b01      	subs	r3, #1
 800965a:	025b      	lsls	r3, r3, #9
 800965c:	b29b      	uxth	r3, r3
 800965e:	431a      	orrs	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009664:	3b01      	subs	r3, #1
 8009666:	041b      	lsls	r3, r3, #16
 8009668:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800966c:	431a      	orrs	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009672:	3b01      	subs	r3, #1
 8009674:	061b      	lsls	r3, r3, #24
 8009676:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800967a:	4935      	ldr	r1, [pc, #212]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 800967c:	4313      	orrs	r3, r2
 800967e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009680:	4b33      	ldr	r3, [pc, #204]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 8009682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009684:	4a32      	ldr	r2, [pc, #200]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 8009686:	f023 0301 	bic.w	r3, r3, #1
 800968a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800968c:	4b30      	ldr	r3, [pc, #192]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 800968e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009690:	4b32      	ldr	r3, [pc, #200]	; (800975c <HAL_RCC_OscConfig+0x7bc>)
 8009692:	4013      	ands	r3, r2
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009698:	00d2      	lsls	r2, r2, #3
 800969a:	492d      	ldr	r1, [pc, #180]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 800969c:	4313      	orrs	r3, r2
 800969e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80096a0:	4b2b      	ldr	r3, [pc, #172]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 80096a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a4:	f023 020c 	bic.w	r2, r3, #12
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ac:	4928      	ldr	r1, [pc, #160]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 80096ae:	4313      	orrs	r3, r2
 80096b0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80096b2:	4b27      	ldr	r3, [pc, #156]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 80096b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b6:	f023 0202 	bic.w	r2, r3, #2
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096be:	4924      	ldr	r1, [pc, #144]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 80096c0:	4313      	orrs	r3, r2
 80096c2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80096c4:	4b22      	ldr	r3, [pc, #136]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 80096c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c8:	4a21      	ldr	r2, [pc, #132]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 80096ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096d0:	4b1f      	ldr	r3, [pc, #124]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 80096d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d4:	4a1e      	ldr	r2, [pc, #120]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 80096d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80096dc:	4b1c      	ldr	r3, [pc, #112]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 80096de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e0:	4a1b      	ldr	r2, [pc, #108]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 80096e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80096e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80096e8:	4b19      	ldr	r3, [pc, #100]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 80096ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ec:	4a18      	ldr	r2, [pc, #96]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 80096ee:	f043 0301 	orr.w	r3, r3, #1
 80096f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80096f4:	4b16      	ldr	r3, [pc, #88]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a15      	ldr	r2, [pc, #84]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 80096fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009700:	f7fc f8c4 	bl	800588c <HAL_GetTick>
 8009704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009706:	e008      	b.n	800971a <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009708:	f7fc f8c0 	bl	800588c <HAL_GetTick>
 800970c:	4602      	mov	r2, r0
 800970e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	2b02      	cmp	r3, #2
 8009714:	d901      	bls.n	800971a <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8009716:	2303      	movs	r3, #3
 8009718:	e068      	b.n	80097ec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800971a:	4b0d      	ldr	r3, [pc, #52]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009722:	2b00      	cmp	r3, #0
 8009724:	d0f0      	beq.n	8009708 <HAL_RCC_OscConfig+0x768>
 8009726:	e060      	b.n	80097ea <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009728:	4b09      	ldr	r3, [pc, #36]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a08      	ldr	r2, [pc, #32]	; (8009750 <HAL_RCC_OscConfig+0x7b0>)
 800972e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009734:	f7fc f8aa 	bl	800588c <HAL_GetTick>
 8009738:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800973a:	e011      	b.n	8009760 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800973c:	f7fc f8a6 	bl	800588c <HAL_GetTick>
 8009740:	4602      	mov	r2, r0
 8009742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	2b02      	cmp	r3, #2
 8009748:	d90a      	bls.n	8009760 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800974a:	2303      	movs	r3, #3
 800974c:	e04e      	b.n	80097ec <HAL_RCC_OscConfig+0x84c>
 800974e:	bf00      	nop
 8009750:	58024400 	.word	0x58024400
 8009754:	58024800 	.word	0x58024800
 8009758:	fffffc0c 	.word	0xfffffc0c
 800975c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009760:	4b24      	ldr	r3, [pc, #144]	; (80097f4 <HAL_RCC_OscConfig+0x854>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009768:	2b00      	cmp	r3, #0
 800976a:	d1e7      	bne.n	800973c <HAL_RCC_OscConfig+0x79c>
 800976c:	e03d      	b.n	80097ea <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800976e:	4b21      	ldr	r3, [pc, #132]	; (80097f4 <HAL_RCC_OscConfig+0x854>)
 8009770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009772:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009774:	4b1f      	ldr	r3, [pc, #124]	; (80097f4 <HAL_RCC_OscConfig+0x854>)
 8009776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009778:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977e:	2b01      	cmp	r3, #1
 8009780:	d031      	beq.n	80097e6 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	f003 0203 	and.w	r2, r3, #3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800978c:	429a      	cmp	r2, r3
 800978e:	d12a      	bne.n	80097e6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	091b      	lsrs	r3, r3, #4
 8009794:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800979c:	429a      	cmp	r2, r3
 800979e:	d122      	bne.n	80097e6 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097aa:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d11a      	bne.n	80097e6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	0a5b      	lsrs	r3, r3, #9
 80097b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097bc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80097be:	429a      	cmp	r2, r3
 80097c0:	d111      	bne.n	80097e6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	0c1b      	lsrs	r3, r3, #16
 80097c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ce:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d108      	bne.n	80097e6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	0e1b      	lsrs	r3, r3, #24
 80097d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d001      	beq.n	80097ea <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e000      	b.n	80097ec <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3730      	adds	r7, #48	; 0x30
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	58024400 	.word	0x58024400

080097f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b086      	sub	sp, #24
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d101      	bne.n	800980c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e19c      	b.n	8009b46 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800980c:	4b8a      	ldr	r3, [pc, #552]	; (8009a38 <HAL_RCC_ClockConfig+0x240>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 030f 	and.w	r3, r3, #15
 8009814:	683a      	ldr	r2, [r7, #0]
 8009816:	429a      	cmp	r2, r3
 8009818:	d910      	bls.n	800983c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800981a:	4b87      	ldr	r3, [pc, #540]	; (8009a38 <HAL_RCC_ClockConfig+0x240>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f023 020f 	bic.w	r2, r3, #15
 8009822:	4985      	ldr	r1, [pc, #532]	; (8009a38 <HAL_RCC_ClockConfig+0x240>)
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	4313      	orrs	r3, r2
 8009828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800982a:	4b83      	ldr	r3, [pc, #524]	; (8009a38 <HAL_RCC_ClockConfig+0x240>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f003 030f 	and.w	r3, r3, #15
 8009832:	683a      	ldr	r2, [r7, #0]
 8009834:	429a      	cmp	r2, r3
 8009836:	d001      	beq.n	800983c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	e184      	b.n	8009b46 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 0304 	and.w	r3, r3, #4
 8009844:	2b00      	cmp	r3, #0
 8009846:	d010      	beq.n	800986a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	691a      	ldr	r2, [r3, #16]
 800984c:	4b7b      	ldr	r3, [pc, #492]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 800984e:	699b      	ldr	r3, [r3, #24]
 8009850:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009854:	429a      	cmp	r2, r3
 8009856:	d908      	bls.n	800986a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009858:	4b78      	ldr	r3, [pc, #480]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 800985a:	699b      	ldr	r3, [r3, #24]
 800985c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	4975      	ldr	r1, [pc, #468]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 8009866:	4313      	orrs	r3, r2
 8009868:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 0308 	and.w	r3, r3, #8
 8009872:	2b00      	cmp	r3, #0
 8009874:	d010      	beq.n	8009898 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	695a      	ldr	r2, [r3, #20]
 800987a:	4b70      	ldr	r3, [pc, #448]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 800987c:	69db      	ldr	r3, [r3, #28]
 800987e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009882:	429a      	cmp	r2, r3
 8009884:	d908      	bls.n	8009898 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009886:	4b6d      	ldr	r3, [pc, #436]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 8009888:	69db      	ldr	r3, [r3, #28]
 800988a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	695b      	ldr	r3, [r3, #20]
 8009892:	496a      	ldr	r1, [pc, #424]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 8009894:	4313      	orrs	r3, r2
 8009896:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f003 0310 	and.w	r3, r3, #16
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d010      	beq.n	80098c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	699a      	ldr	r2, [r3, #24]
 80098a8:	4b64      	ldr	r3, [pc, #400]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 80098aa:	69db      	ldr	r3, [r3, #28]
 80098ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d908      	bls.n	80098c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80098b4:	4b61      	ldr	r3, [pc, #388]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 80098b6:	69db      	ldr	r3, [r3, #28]
 80098b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	699b      	ldr	r3, [r3, #24]
 80098c0:	495e      	ldr	r1, [pc, #376]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 80098c2:	4313      	orrs	r3, r2
 80098c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f003 0320 	and.w	r3, r3, #32
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d010      	beq.n	80098f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	69da      	ldr	r2, [r3, #28]
 80098d6:	4b59      	ldr	r3, [pc, #356]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098de:	429a      	cmp	r2, r3
 80098e0:	d908      	bls.n	80098f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80098e2:	4b56      	ldr	r3, [pc, #344]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 80098e4:	6a1b      	ldr	r3, [r3, #32]
 80098e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	69db      	ldr	r3, [r3, #28]
 80098ee:	4953      	ldr	r1, [pc, #332]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 80098f0:	4313      	orrs	r3, r2
 80098f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f003 0302 	and.w	r3, r3, #2
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d010      	beq.n	8009922 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	68da      	ldr	r2, [r3, #12]
 8009904:	4b4d      	ldr	r3, [pc, #308]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	f003 030f 	and.w	r3, r3, #15
 800990c:	429a      	cmp	r2, r3
 800990e:	d908      	bls.n	8009922 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009910:	4b4a      	ldr	r3, [pc, #296]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	f023 020f 	bic.w	r2, r3, #15
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	4947      	ldr	r1, [pc, #284]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 800991e:	4313      	orrs	r3, r2
 8009920:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f003 0301 	and.w	r3, r3, #1
 800992a:	2b00      	cmp	r3, #0
 800992c:	d055      	beq.n	80099da <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800992e:	4b43      	ldr	r3, [pc, #268]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	4940      	ldr	r1, [pc, #256]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 800993c:	4313      	orrs	r3, r2
 800993e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	2b02      	cmp	r3, #2
 8009946:	d107      	bne.n	8009958 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009948:	4b3c      	ldr	r3, [pc, #240]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009950:	2b00      	cmp	r3, #0
 8009952:	d121      	bne.n	8009998 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e0f6      	b.n	8009b46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	2b03      	cmp	r3, #3
 800995e:	d107      	bne.n	8009970 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009960:	4b36      	ldr	r3, [pc, #216]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009968:	2b00      	cmp	r3, #0
 800996a:	d115      	bne.n	8009998 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e0ea      	b.n	8009b46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	2b01      	cmp	r3, #1
 8009976:	d107      	bne.n	8009988 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009978:	4b30      	ldr	r3, [pc, #192]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009980:	2b00      	cmp	r3, #0
 8009982:	d109      	bne.n	8009998 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e0de      	b.n	8009b46 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009988:	4b2c      	ldr	r3, [pc, #176]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 0304 	and.w	r3, r3, #4
 8009990:	2b00      	cmp	r3, #0
 8009992:	d101      	bne.n	8009998 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	e0d6      	b.n	8009b46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009998:	4b28      	ldr	r3, [pc, #160]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	f023 0207 	bic.w	r2, r3, #7
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	4925      	ldr	r1, [pc, #148]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 80099a6:	4313      	orrs	r3, r2
 80099a8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099aa:	f7fb ff6f 	bl	800588c <HAL_GetTick>
 80099ae:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099b0:	e00a      	b.n	80099c8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099b2:	f7fb ff6b 	bl	800588c <HAL_GetTick>
 80099b6:	4602      	mov	r2, r0
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	1ad3      	subs	r3, r2, r3
 80099bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d901      	bls.n	80099c8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80099c4:	2303      	movs	r3, #3
 80099c6:	e0be      	b.n	8009b46 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099c8:	4b1c      	ldr	r3, [pc, #112]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	00db      	lsls	r3, r3, #3
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d1eb      	bne.n	80099b2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f003 0302 	and.w	r3, r3, #2
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d010      	beq.n	8009a08 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	68da      	ldr	r2, [r3, #12]
 80099ea:	4b14      	ldr	r3, [pc, #80]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 80099ec:	699b      	ldr	r3, [r3, #24]
 80099ee:	f003 030f 	and.w	r3, r3, #15
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d208      	bcs.n	8009a08 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80099f6:	4b11      	ldr	r3, [pc, #68]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	f023 020f 	bic.w	r2, r3, #15
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	490e      	ldr	r1, [pc, #56]	; (8009a3c <HAL_RCC_ClockConfig+0x244>)
 8009a04:	4313      	orrs	r3, r2
 8009a06:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009a08:	4b0b      	ldr	r3, [pc, #44]	; (8009a38 <HAL_RCC_ClockConfig+0x240>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 030f 	and.w	r3, r3, #15
 8009a10:	683a      	ldr	r2, [r7, #0]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d214      	bcs.n	8009a40 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a16:	4b08      	ldr	r3, [pc, #32]	; (8009a38 <HAL_RCC_ClockConfig+0x240>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f023 020f 	bic.w	r2, r3, #15
 8009a1e:	4906      	ldr	r1, [pc, #24]	; (8009a38 <HAL_RCC_ClockConfig+0x240>)
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a26:	4b04      	ldr	r3, [pc, #16]	; (8009a38 <HAL_RCC_ClockConfig+0x240>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f003 030f 	and.w	r3, r3, #15
 8009a2e:	683a      	ldr	r2, [r7, #0]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d005      	beq.n	8009a40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	e086      	b.n	8009b46 <HAL_RCC_ClockConfig+0x34e>
 8009a38:	52002000 	.word	0x52002000
 8009a3c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f003 0304 	and.w	r3, r3, #4
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d010      	beq.n	8009a6e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	691a      	ldr	r2, [r3, #16]
 8009a50:	4b3f      	ldr	r3, [pc, #252]	; (8009b50 <HAL_RCC_ClockConfig+0x358>)
 8009a52:	699b      	ldr	r3, [r3, #24]
 8009a54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d208      	bcs.n	8009a6e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009a5c:	4b3c      	ldr	r3, [pc, #240]	; (8009b50 <HAL_RCC_ClockConfig+0x358>)
 8009a5e:	699b      	ldr	r3, [r3, #24]
 8009a60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	4939      	ldr	r1, [pc, #228]	; (8009b50 <HAL_RCC_ClockConfig+0x358>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f003 0308 	and.w	r3, r3, #8
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d010      	beq.n	8009a9c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	695a      	ldr	r2, [r3, #20]
 8009a7e:	4b34      	ldr	r3, [pc, #208]	; (8009b50 <HAL_RCC_ClockConfig+0x358>)
 8009a80:	69db      	ldr	r3, [r3, #28]
 8009a82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d208      	bcs.n	8009a9c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009a8a:	4b31      	ldr	r3, [pc, #196]	; (8009b50 <HAL_RCC_ClockConfig+0x358>)
 8009a8c:	69db      	ldr	r3, [r3, #28]
 8009a8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	695b      	ldr	r3, [r3, #20]
 8009a96:	492e      	ldr	r1, [pc, #184]	; (8009b50 <HAL_RCC_ClockConfig+0x358>)
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f003 0310 	and.w	r3, r3, #16
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d010      	beq.n	8009aca <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	699a      	ldr	r2, [r3, #24]
 8009aac:	4b28      	ldr	r3, [pc, #160]	; (8009b50 <HAL_RCC_ClockConfig+0x358>)
 8009aae:	69db      	ldr	r3, [r3, #28]
 8009ab0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d208      	bcs.n	8009aca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009ab8:	4b25      	ldr	r3, [pc, #148]	; (8009b50 <HAL_RCC_ClockConfig+0x358>)
 8009aba:	69db      	ldr	r3, [r3, #28]
 8009abc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	699b      	ldr	r3, [r3, #24]
 8009ac4:	4922      	ldr	r1, [pc, #136]	; (8009b50 <HAL_RCC_ClockConfig+0x358>)
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f003 0320 	and.w	r3, r3, #32
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d010      	beq.n	8009af8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	69da      	ldr	r2, [r3, #28]
 8009ada:	4b1d      	ldr	r3, [pc, #116]	; (8009b50 <HAL_RCC_ClockConfig+0x358>)
 8009adc:	6a1b      	ldr	r3, [r3, #32]
 8009ade:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d208      	bcs.n	8009af8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009ae6:	4b1a      	ldr	r3, [pc, #104]	; (8009b50 <HAL_RCC_ClockConfig+0x358>)
 8009ae8:	6a1b      	ldr	r3, [r3, #32]
 8009aea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	69db      	ldr	r3, [r3, #28]
 8009af2:	4917      	ldr	r1, [pc, #92]	; (8009b50 <HAL_RCC_ClockConfig+0x358>)
 8009af4:	4313      	orrs	r3, r2
 8009af6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009af8:	f000 f834 	bl	8009b64 <HAL_RCC_GetSysClockFreq>
 8009afc:	4602      	mov	r2, r0
 8009afe:	4b14      	ldr	r3, [pc, #80]	; (8009b50 <HAL_RCC_ClockConfig+0x358>)
 8009b00:	699b      	ldr	r3, [r3, #24]
 8009b02:	0a1b      	lsrs	r3, r3, #8
 8009b04:	f003 030f 	and.w	r3, r3, #15
 8009b08:	4912      	ldr	r1, [pc, #72]	; (8009b54 <HAL_RCC_ClockConfig+0x35c>)
 8009b0a:	5ccb      	ldrb	r3, [r1, r3]
 8009b0c:	f003 031f 	and.w	r3, r3, #31
 8009b10:	fa22 f303 	lsr.w	r3, r2, r3
 8009b14:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009b16:	4b0e      	ldr	r3, [pc, #56]	; (8009b50 <HAL_RCC_ClockConfig+0x358>)
 8009b18:	699b      	ldr	r3, [r3, #24]
 8009b1a:	f003 030f 	and.w	r3, r3, #15
 8009b1e:	4a0d      	ldr	r2, [pc, #52]	; (8009b54 <HAL_RCC_ClockConfig+0x35c>)
 8009b20:	5cd3      	ldrb	r3, [r2, r3]
 8009b22:	f003 031f 	and.w	r3, r3, #31
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	fa22 f303 	lsr.w	r3, r2, r3
 8009b2c:	4a0a      	ldr	r2, [pc, #40]	; (8009b58 <HAL_RCC_ClockConfig+0x360>)
 8009b2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009b30:	4a0a      	ldr	r2, [pc, #40]	; (8009b5c <HAL_RCC_ClockConfig+0x364>)
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009b36:	4b0a      	ldr	r3, [pc, #40]	; (8009b60 <HAL_RCC_ClockConfig+0x368>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fb fe5c 	bl	80057f8 <HAL_InitTick>
 8009b40:	4603      	mov	r3, r0
 8009b42:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3718      	adds	r7, #24
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	58024400 	.word	0x58024400
 8009b54:	080127f8 	.word	0x080127f8
 8009b58:	2400003c 	.word	0x2400003c
 8009b5c:	24000038 	.word	0x24000038
 8009b60:	24000040 	.word	0x24000040

08009b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b089      	sub	sp, #36	; 0x24
 8009b68:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009b6a:	4bb3      	ldr	r3, [pc, #716]	; (8009e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b72:	2b18      	cmp	r3, #24
 8009b74:	f200 8155 	bhi.w	8009e22 <HAL_RCC_GetSysClockFreq+0x2be>
 8009b78:	a201      	add	r2, pc, #4	; (adr r2, 8009b80 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b7e:	bf00      	nop
 8009b80:	08009be5 	.word	0x08009be5
 8009b84:	08009e23 	.word	0x08009e23
 8009b88:	08009e23 	.word	0x08009e23
 8009b8c:	08009e23 	.word	0x08009e23
 8009b90:	08009e23 	.word	0x08009e23
 8009b94:	08009e23 	.word	0x08009e23
 8009b98:	08009e23 	.word	0x08009e23
 8009b9c:	08009e23 	.word	0x08009e23
 8009ba0:	08009c0b 	.word	0x08009c0b
 8009ba4:	08009e23 	.word	0x08009e23
 8009ba8:	08009e23 	.word	0x08009e23
 8009bac:	08009e23 	.word	0x08009e23
 8009bb0:	08009e23 	.word	0x08009e23
 8009bb4:	08009e23 	.word	0x08009e23
 8009bb8:	08009e23 	.word	0x08009e23
 8009bbc:	08009e23 	.word	0x08009e23
 8009bc0:	08009c11 	.word	0x08009c11
 8009bc4:	08009e23 	.word	0x08009e23
 8009bc8:	08009e23 	.word	0x08009e23
 8009bcc:	08009e23 	.word	0x08009e23
 8009bd0:	08009e23 	.word	0x08009e23
 8009bd4:	08009e23 	.word	0x08009e23
 8009bd8:	08009e23 	.word	0x08009e23
 8009bdc:	08009e23 	.word	0x08009e23
 8009be0:	08009c17 	.word	0x08009c17
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009be4:	4b94      	ldr	r3, [pc, #592]	; (8009e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 0320 	and.w	r3, r3, #32
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d009      	beq.n	8009c04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009bf0:	4b91      	ldr	r3, [pc, #580]	; (8009e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	08db      	lsrs	r3, r3, #3
 8009bf6:	f003 0303 	and.w	r3, r3, #3
 8009bfa:	4a90      	ldr	r2, [pc, #576]	; (8009e3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8009c00:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009c02:	e111      	b.n	8009e28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009c04:	4b8d      	ldr	r3, [pc, #564]	; (8009e3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009c06:	61bb      	str	r3, [r7, #24]
    break;
 8009c08:	e10e      	b.n	8009e28 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009c0a:	4b8d      	ldr	r3, [pc, #564]	; (8009e40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009c0c:	61bb      	str	r3, [r7, #24]
    break;
 8009c0e:	e10b      	b.n	8009e28 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009c10:	4b8c      	ldr	r3, [pc, #560]	; (8009e44 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009c12:	61bb      	str	r3, [r7, #24]
    break;
 8009c14:	e108      	b.n	8009e28 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c16:	4b88      	ldr	r3, [pc, #544]	; (8009e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c1a:	f003 0303 	and.w	r3, r3, #3
 8009c1e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009c20:	4b85      	ldr	r3, [pc, #532]	; (8009e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c24:	091b      	lsrs	r3, r3, #4
 8009c26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c2a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009c2c:	4b82      	ldr	r3, [pc, #520]	; (8009e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c30:	f003 0301 	and.w	r3, r3, #1
 8009c34:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009c36:	4b80      	ldr	r3, [pc, #512]	; (8009e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c3a:	08db      	lsrs	r3, r3, #3
 8009c3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	fb02 f303 	mul.w	r3, r2, r3
 8009c46:	ee07 3a90 	vmov	s15, r3
 8009c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f000 80e1 	beq.w	8009e1c <HAL_RCC_GetSysClockFreq+0x2b8>
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	f000 8083 	beq.w	8009d68 <HAL_RCC_GetSysClockFreq+0x204>
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	f200 80a1 	bhi.w	8009dac <HAL_RCC_GetSysClockFreq+0x248>
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d003      	beq.n	8009c78 <HAL_RCC_GetSysClockFreq+0x114>
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d056      	beq.n	8009d24 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009c76:	e099      	b.n	8009dac <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c78:	4b6f      	ldr	r3, [pc, #444]	; (8009e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 0320 	and.w	r3, r3, #32
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d02d      	beq.n	8009ce0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c84:	4b6c      	ldr	r3, [pc, #432]	; (8009e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	08db      	lsrs	r3, r3, #3
 8009c8a:	f003 0303 	and.w	r3, r3, #3
 8009c8e:	4a6b      	ldr	r2, [pc, #428]	; (8009e3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009c90:	fa22 f303 	lsr.w	r3, r2, r3
 8009c94:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	ee07 3a90 	vmov	s15, r3
 8009c9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	ee07 3a90 	vmov	s15, r3
 8009ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cae:	4b62      	ldr	r3, [pc, #392]	; (8009e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cb6:	ee07 3a90 	vmov	s15, r3
 8009cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009cc2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009e48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009cde:	e087      	b.n	8009df0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	ee07 3a90 	vmov	s15, r3
 8009ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cea:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009e4c <HAL_RCC_GetSysClockFreq+0x2e8>
 8009cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cf2:	4b51      	ldr	r3, [pc, #324]	; (8009e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cfa:	ee07 3a90 	vmov	s15, r3
 8009cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d02:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d06:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009e48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d22:	e065      	b.n	8009df0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	ee07 3a90 	vmov	s15, r3
 8009d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009e50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d36:	4b40      	ldr	r3, [pc, #256]	; (8009e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d3e:	ee07 3a90 	vmov	s15, r3
 8009d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d46:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d4a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009e48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d66:	e043      	b.n	8009df0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	ee07 3a90 	vmov	s15, r3
 8009d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d72:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009e54 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d7a:	4b2f      	ldr	r3, [pc, #188]	; (8009e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d82:	ee07 3a90 	vmov	s15, r3
 8009d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d8e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009e48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009da6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009daa:	e021      	b.n	8009df0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	ee07 3a90 	vmov	s15, r3
 8009db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009db6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009e50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dbe:	4b1e      	ldr	r3, [pc, #120]	; (8009e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dc6:	ee07 3a90 	vmov	s15, r3
 8009dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dce:	ed97 6a02 	vldr	s12, [r7, #8]
 8009dd2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009e48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dee:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009df0:	4b11      	ldr	r3, [pc, #68]	; (8009e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df4:	0a5b      	lsrs	r3, r3, #9
 8009df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	ee07 3a90 	vmov	s15, r3
 8009e04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009e08:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e14:	ee17 3a90 	vmov	r3, s15
 8009e18:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009e1a:	e005      	b.n	8009e28 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	61bb      	str	r3, [r7, #24]
    break;
 8009e20:	e002      	b.n	8009e28 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009e22:	4b07      	ldr	r3, [pc, #28]	; (8009e40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009e24:	61bb      	str	r3, [r7, #24]
    break;
 8009e26:	bf00      	nop
  }

  return sysclockfreq;
 8009e28:	69bb      	ldr	r3, [r7, #24]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3724      	adds	r7, #36	; 0x24
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr
 8009e36:	bf00      	nop
 8009e38:	58024400 	.word	0x58024400
 8009e3c:	03d09000 	.word	0x03d09000
 8009e40:	003d0900 	.word	0x003d0900
 8009e44:	02dc6c00 	.word	0x02dc6c00
 8009e48:	46000000 	.word	0x46000000
 8009e4c:	4c742400 	.word	0x4c742400
 8009e50:	4a742400 	.word	0x4a742400
 8009e54:	4c371b00 	.word	0x4c371b00

08009e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009e5e:	f7ff fe81 	bl	8009b64 <HAL_RCC_GetSysClockFreq>
 8009e62:	4602      	mov	r2, r0
 8009e64:	4b10      	ldr	r3, [pc, #64]	; (8009ea8 <HAL_RCC_GetHCLKFreq+0x50>)
 8009e66:	699b      	ldr	r3, [r3, #24]
 8009e68:	0a1b      	lsrs	r3, r3, #8
 8009e6a:	f003 030f 	and.w	r3, r3, #15
 8009e6e:	490f      	ldr	r1, [pc, #60]	; (8009eac <HAL_RCC_GetHCLKFreq+0x54>)
 8009e70:	5ccb      	ldrb	r3, [r1, r3]
 8009e72:	f003 031f 	and.w	r3, r3, #31
 8009e76:	fa22 f303 	lsr.w	r3, r2, r3
 8009e7a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009e7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ea8 <HAL_RCC_GetHCLKFreq+0x50>)
 8009e7e:	699b      	ldr	r3, [r3, #24]
 8009e80:	f003 030f 	and.w	r3, r3, #15
 8009e84:	4a09      	ldr	r2, [pc, #36]	; (8009eac <HAL_RCC_GetHCLKFreq+0x54>)
 8009e86:	5cd3      	ldrb	r3, [r2, r3]
 8009e88:	f003 031f 	and.w	r3, r3, #31
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e92:	4a07      	ldr	r2, [pc, #28]	; (8009eb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8009e94:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009e96:	4a07      	ldr	r2, [pc, #28]	; (8009eb4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009e9c:	4b04      	ldr	r3, [pc, #16]	; (8009eb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	58024400 	.word	0x58024400
 8009eac:	080127f8 	.word	0x080127f8
 8009eb0:	2400003c 	.word	0x2400003c
 8009eb4:	24000038 	.word	0x24000038

08009eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009ebc:	f7ff ffcc 	bl	8009e58 <HAL_RCC_GetHCLKFreq>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	4b06      	ldr	r3, [pc, #24]	; (8009edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8009ec4:	69db      	ldr	r3, [r3, #28]
 8009ec6:	091b      	lsrs	r3, r3, #4
 8009ec8:	f003 0307 	and.w	r3, r3, #7
 8009ecc:	4904      	ldr	r1, [pc, #16]	; (8009ee0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009ece:	5ccb      	ldrb	r3, [r1, r3]
 8009ed0:	f003 031f 	and.w	r3, r3, #31
 8009ed4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	58024400 	.word	0x58024400
 8009ee0:	080127f8 	.word	0x080127f8

08009ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009ee8:	f7ff ffb6 	bl	8009e58 <HAL_RCC_GetHCLKFreq>
 8009eec:	4602      	mov	r2, r0
 8009eee:	4b06      	ldr	r3, [pc, #24]	; (8009f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009ef0:	69db      	ldr	r3, [r3, #28]
 8009ef2:	0a1b      	lsrs	r3, r3, #8
 8009ef4:	f003 0307 	and.w	r3, r3, #7
 8009ef8:	4904      	ldr	r1, [pc, #16]	; (8009f0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8009efa:	5ccb      	ldrb	r3, [r1, r3]
 8009efc:	f003 031f 	and.w	r3, r3, #31
 8009f00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	58024400 	.word	0x58024400
 8009f0c:	080127f8 	.word	0x080127f8

08009f10 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b086      	sub	sp, #24
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009f18:	2300      	movs	r3, #0
 8009f1a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d03f      	beq.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f34:	d02a      	beq.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009f36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f3a:	d824      	bhi.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009f3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f40:	d018      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009f42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f46:	d81e      	bhi.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d003      	beq.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f50:	d007      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009f52:	e018      	b.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f54:	4bab      	ldr	r3, [pc, #684]	; (800a204 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f58:	4aaa      	ldr	r2, [pc, #680]	; (800a204 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009f60:	e015      	b.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	3304      	adds	r3, #4
 8009f66:	2102      	movs	r1, #2
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f001 f9cf 	bl	800b30c <RCCEx_PLL2_Config>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009f72:	e00c      	b.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	3324      	adds	r3, #36	; 0x24
 8009f78:	2102      	movs	r1, #2
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f001 fa78 	bl	800b470 <RCCEx_PLL3_Config>
 8009f80:	4603      	mov	r3, r0
 8009f82:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009f84:	e003      	b.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	75fb      	strb	r3, [r7, #23]
      break;
 8009f8a:	e000      	b.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009f8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f8e:	7dfb      	ldrb	r3, [r7, #23]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d109      	bne.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009f94:	4b9b      	ldr	r3, [pc, #620]	; (800a204 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fa0:	4998      	ldr	r1, [pc, #608]	; (800a204 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	650b      	str	r3, [r1, #80]	; 0x50
 8009fa6:	e001      	b.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa8:	7dfb      	ldrb	r3, [r7, #23]
 8009faa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d03d      	beq.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fbc:	2b04      	cmp	r3, #4
 8009fbe:	d826      	bhi.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009fc0:	a201      	add	r2, pc, #4	; (adr r2, 8009fc8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc6:	bf00      	nop
 8009fc8:	08009fdd 	.word	0x08009fdd
 8009fcc:	08009feb 	.word	0x08009feb
 8009fd0:	08009ffd 	.word	0x08009ffd
 8009fd4:	0800a015 	.word	0x0800a015
 8009fd8:	0800a015 	.word	0x0800a015
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fdc:	4b89      	ldr	r3, [pc, #548]	; (800a204 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe0:	4a88      	ldr	r2, [pc, #544]	; (800a204 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fe6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009fe8:	e015      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	3304      	adds	r3, #4
 8009fee:	2100      	movs	r1, #0
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f001 f98b 	bl	800b30c <RCCEx_PLL2_Config>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ffa:	e00c      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	3324      	adds	r3, #36	; 0x24
 800a000:	2100      	movs	r1, #0
 800a002:	4618      	mov	r0, r3
 800a004:	f001 fa34 	bl	800b470 <RCCEx_PLL3_Config>
 800a008:	4603      	mov	r3, r0
 800a00a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a00c:	e003      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	75fb      	strb	r3, [r7, #23]
      break;
 800a012:	e000      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a014:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a016:	7dfb      	ldrb	r3, [r7, #23]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d109      	bne.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a01c:	4b79      	ldr	r3, [pc, #484]	; (800a204 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a01e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a020:	f023 0207 	bic.w	r2, r3, #7
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a028:	4976      	ldr	r1, [pc, #472]	; (800a204 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a02a:	4313      	orrs	r3, r2
 800a02c:	650b      	str	r3, [r1, #80]	; 0x50
 800a02e:	e001      	b.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a030:	7dfb      	ldrb	r3, [r7, #23]
 800a032:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d042      	beq.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a048:	d02b      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a04a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a04e:	d825      	bhi.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a050:	2bc0      	cmp	r3, #192	; 0xc0
 800a052:	d028      	beq.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a054:	2bc0      	cmp	r3, #192	; 0xc0
 800a056:	d821      	bhi.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a058:	2b80      	cmp	r3, #128	; 0x80
 800a05a:	d016      	beq.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800a05c:	2b80      	cmp	r3, #128	; 0x80
 800a05e:	d81d      	bhi.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a060:	2b00      	cmp	r3, #0
 800a062:	d002      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800a064:	2b40      	cmp	r3, #64	; 0x40
 800a066:	d007      	beq.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a068:	e018      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a06a:	4b66      	ldr	r3, [pc, #408]	; (800a204 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06e:	4a65      	ldr	r2, [pc, #404]	; (800a204 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a074:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a076:	e017      	b.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	3304      	adds	r3, #4
 800a07c:	2100      	movs	r1, #0
 800a07e:	4618      	mov	r0, r3
 800a080:	f001 f944 	bl	800b30c <RCCEx_PLL2_Config>
 800a084:	4603      	mov	r3, r0
 800a086:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a088:	e00e      	b.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	3324      	adds	r3, #36	; 0x24
 800a08e:	2100      	movs	r1, #0
 800a090:	4618      	mov	r0, r3
 800a092:	f001 f9ed 	bl	800b470 <RCCEx_PLL3_Config>
 800a096:	4603      	mov	r3, r0
 800a098:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a09a:	e005      	b.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a09c:	2301      	movs	r3, #1
 800a09e:	75fb      	strb	r3, [r7, #23]
      break;
 800a0a0:	e002      	b.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a0a2:	bf00      	nop
 800a0a4:	e000      	b.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a0a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0a8:	7dfb      	ldrb	r3, [r7, #23]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d109      	bne.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a0ae:	4b55      	ldr	r3, [pc, #340]	; (800a204 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a0b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0b2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ba:	4952      	ldr	r1, [pc, #328]	; (800a204 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	650b      	str	r3, [r1, #80]	; 0x50
 800a0c0:	e001      	b.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0c2:	7dfb      	ldrb	r3, [r7, #23]
 800a0c4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d049      	beq.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a0d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a0dc:	d030      	beq.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a0de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a0e2:	d82a      	bhi.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a0e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a0e8:	d02c      	beq.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800a0ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a0ee:	d824      	bhi.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a0f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0f4:	d018      	beq.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800a0f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0fa:	d81e      	bhi.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d003      	beq.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800a100:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a104:	d007      	beq.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a106:	e018      	b.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a108:	4b3e      	ldr	r3, [pc, #248]	; (800a204 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10c:	4a3d      	ldr	r2, [pc, #244]	; (800a204 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a10e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a112:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a114:	e017      	b.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	3304      	adds	r3, #4
 800a11a:	2100      	movs	r1, #0
 800a11c:	4618      	mov	r0, r3
 800a11e:	f001 f8f5 	bl	800b30c <RCCEx_PLL2_Config>
 800a122:	4603      	mov	r3, r0
 800a124:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a126:	e00e      	b.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	3324      	adds	r3, #36	; 0x24
 800a12c:	2100      	movs	r1, #0
 800a12e:	4618      	mov	r0, r3
 800a130:	f001 f99e 	bl	800b470 <RCCEx_PLL3_Config>
 800a134:	4603      	mov	r3, r0
 800a136:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a138:	e005      	b.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	75fb      	strb	r3, [r7, #23]
      break;
 800a13e:	e002      	b.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a140:	bf00      	nop
 800a142:	e000      	b.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a144:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a146:	7dfb      	ldrb	r3, [r7, #23]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d10a      	bne.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a14c:	4b2d      	ldr	r3, [pc, #180]	; (800a204 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a14e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a150:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a15a:	492a      	ldr	r1, [pc, #168]	; (800a204 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a15c:	4313      	orrs	r3, r2
 800a15e:	658b      	str	r3, [r1, #88]	; 0x58
 800a160:	e001      	b.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a162:	7dfb      	ldrb	r3, [r7, #23]
 800a164:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d04c      	beq.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a178:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a17c:	d030      	beq.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a17e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a182:	d82a      	bhi.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a184:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a188:	d02c      	beq.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800a18a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a18e:	d824      	bhi.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a190:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a194:	d018      	beq.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800a196:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a19a:	d81e      	bhi.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d003      	beq.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a1a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a1a4:	d007      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a1a6:	e018      	b.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1a8:	4b16      	ldr	r3, [pc, #88]	; (800a204 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ac:	4a15      	ldr	r2, [pc, #84]	; (800a204 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a1ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a1b4:	e017      	b.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	3304      	adds	r3, #4
 800a1ba:	2100      	movs	r1, #0
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f001 f8a5 	bl	800b30c <RCCEx_PLL2_Config>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a1c6:	e00e      	b.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	3324      	adds	r3, #36	; 0x24
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f001 f94e 	bl	800b470 <RCCEx_PLL3_Config>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a1d8:	e005      	b.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	75fb      	strb	r3, [r7, #23]
      break;
 800a1de:	e002      	b.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a1e0:	bf00      	nop
 800a1e2:	e000      	b.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a1e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1e6:	7dfb      	ldrb	r3, [r7, #23]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d10d      	bne.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a1ec:	4b05      	ldr	r3, [pc, #20]	; (800a204 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a1ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1f0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a1fa:	4902      	ldr	r1, [pc, #8]	; (800a204 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	658b      	str	r3, [r1, #88]	; 0x58
 800a200:	e004      	b.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800a202:	bf00      	nop
 800a204:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a208:	7dfb      	ldrb	r3, [r7, #23]
 800a20a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a214:	2b00      	cmp	r3, #0
 800a216:	d032      	beq.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a21c:	2b30      	cmp	r3, #48	; 0x30
 800a21e:	d01c      	beq.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a220:	2b30      	cmp	r3, #48	; 0x30
 800a222:	d817      	bhi.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a224:	2b20      	cmp	r3, #32
 800a226:	d00c      	beq.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a228:	2b20      	cmp	r3, #32
 800a22a:	d813      	bhi.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d016      	beq.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a230:	2b10      	cmp	r3, #16
 800a232:	d10f      	bne.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a234:	4baf      	ldr	r3, [pc, #700]	; (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a238:	4aae      	ldr	r2, [pc, #696]	; (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a23a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a23e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a240:	e00e      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	3304      	adds	r3, #4
 800a246:	2102      	movs	r1, #2
 800a248:	4618      	mov	r0, r3
 800a24a:	f001 f85f 	bl	800b30c <RCCEx_PLL2_Config>
 800a24e:	4603      	mov	r3, r0
 800a250:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a252:	e005      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	75fb      	strb	r3, [r7, #23]
      break;
 800a258:	e002      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a25a:	bf00      	nop
 800a25c:	e000      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a25e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a260:	7dfb      	ldrb	r3, [r7, #23]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d109      	bne.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a266:	4ba3      	ldr	r3, [pc, #652]	; (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a26a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a272:	49a0      	ldr	r1, [pc, #640]	; (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a274:	4313      	orrs	r3, r2
 800a276:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a278:	e001      	b.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a27a:	7dfb      	ldrb	r3, [r7, #23]
 800a27c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a286:	2b00      	cmp	r3, #0
 800a288:	d047      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a28e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a292:	d030      	beq.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800a294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a298:	d82a      	bhi.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a29a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a29e:	d02c      	beq.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800a2a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2a4:	d824      	bhi.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a2a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2aa:	d018      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800a2ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2b0:	d81e      	bhi.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d003      	beq.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800a2b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2ba:	d007      	beq.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800a2bc:	e018      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2be:	4b8d      	ldr	r3, [pc, #564]	; (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c2:	4a8c      	ldr	r2, [pc, #560]	; (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a2c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a2ca:	e017      	b.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	3304      	adds	r3, #4
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f001 f81a 	bl	800b30c <RCCEx_PLL2_Config>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a2dc:	e00e      	b.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	3324      	adds	r3, #36	; 0x24
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f001 f8c3 	bl	800b470 <RCCEx_PLL3_Config>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a2ee:	e005      	b.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	75fb      	strb	r3, [r7, #23]
      break;
 800a2f4:	e002      	b.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a2f6:	bf00      	nop
 800a2f8:	e000      	b.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a2fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2fc:	7dfb      	ldrb	r3, [r7, #23]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d109      	bne.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a302:	4b7c      	ldr	r3, [pc, #496]	; (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a306:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a30e:	4979      	ldr	r1, [pc, #484]	; (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a310:	4313      	orrs	r3, r2
 800a312:	650b      	str	r3, [r1, #80]	; 0x50
 800a314:	e001      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a316:	7dfb      	ldrb	r3, [r7, #23]
 800a318:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a322:	2b00      	cmp	r3, #0
 800a324:	d049      	beq.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a32a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a32e:	d02e      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800a330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a334:	d828      	bhi.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a336:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a33a:	d02a      	beq.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800a33c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a340:	d822      	bhi.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a342:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a346:	d026      	beq.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800a348:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a34c:	d81c      	bhi.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a34e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a352:	d010      	beq.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800a354:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a358:	d816      	bhi.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d01d      	beq.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800a35e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a362:	d111      	bne.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	3304      	adds	r3, #4
 800a368:	2101      	movs	r1, #1
 800a36a:	4618      	mov	r0, r3
 800a36c:	f000 ffce 	bl	800b30c <RCCEx_PLL2_Config>
 800a370:	4603      	mov	r3, r0
 800a372:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a374:	e012      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	3324      	adds	r3, #36	; 0x24
 800a37a:	2101      	movs	r1, #1
 800a37c:	4618      	mov	r0, r3
 800a37e:	f001 f877 	bl	800b470 <RCCEx_PLL3_Config>
 800a382:	4603      	mov	r3, r0
 800a384:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a386:	e009      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	75fb      	strb	r3, [r7, #23]
      break;
 800a38c:	e006      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a38e:	bf00      	nop
 800a390:	e004      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a392:	bf00      	nop
 800a394:	e002      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a396:	bf00      	nop
 800a398:	e000      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a39a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a39c:	7dfb      	ldrb	r3, [r7, #23]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d109      	bne.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a3a2:	4b54      	ldr	r3, [pc, #336]	; (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a3a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3a6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3ae:	4951      	ldr	r1, [pc, #324]	; (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	650b      	str	r3, [r1, #80]	; 0x50
 800a3b4:	e001      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3b6:	7dfb      	ldrb	r3, [r7, #23]
 800a3b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d04b      	beq.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a3cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3d0:	d02e      	beq.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800a3d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3d6:	d828      	bhi.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a3d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3dc:	d02a      	beq.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a3de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3e2:	d822      	bhi.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a3e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a3e8:	d026      	beq.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a3ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a3ee:	d81c      	bhi.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a3f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3f4:	d010      	beq.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800a3f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3fa:	d816      	bhi.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d01d      	beq.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800a400:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a404:	d111      	bne.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	3304      	adds	r3, #4
 800a40a:	2101      	movs	r1, #1
 800a40c:	4618      	mov	r0, r3
 800a40e:	f000 ff7d 	bl	800b30c <RCCEx_PLL2_Config>
 800a412:	4603      	mov	r3, r0
 800a414:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a416:	e012      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	3324      	adds	r3, #36	; 0x24
 800a41c:	2101      	movs	r1, #1
 800a41e:	4618      	mov	r0, r3
 800a420:	f001 f826 	bl	800b470 <RCCEx_PLL3_Config>
 800a424:	4603      	mov	r3, r0
 800a426:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a428:	e009      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a42a:	2301      	movs	r3, #1
 800a42c:	75fb      	strb	r3, [r7, #23]
      break;
 800a42e:	e006      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a430:	bf00      	nop
 800a432:	e004      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a434:	bf00      	nop
 800a436:	e002      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a438:	bf00      	nop
 800a43a:	e000      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a43c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10a      	bne.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a444:	4b2b      	ldr	r3, [pc, #172]	; (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a448:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a452:	4928      	ldr	r1, [pc, #160]	; (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a454:	4313      	orrs	r3, r2
 800a456:	658b      	str	r3, [r1, #88]	; 0x58
 800a458:	e001      	b.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a45a:	7dfb      	ldrb	r3, [r7, #23]
 800a45c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a466:	2b00      	cmp	r3, #0
 800a468:	d02f      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a46e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a472:	d00e      	beq.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800a474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a478:	d814      	bhi.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d015      	beq.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a47e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a482:	d10f      	bne.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a484:	4b1b      	ldr	r3, [pc, #108]	; (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a488:	4a1a      	ldr	r2, [pc, #104]	; (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a48a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a48e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a490:	e00c      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	3304      	adds	r3, #4
 800a496:	2101      	movs	r1, #1
 800a498:	4618      	mov	r0, r3
 800a49a:	f000 ff37 	bl	800b30c <RCCEx_PLL2_Config>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a4a2:	e003      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	75fb      	strb	r3, [r7, #23]
      break;
 800a4a8:	e000      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800a4aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4ac:	7dfb      	ldrb	r3, [r7, #23]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d109      	bne.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a4b2:	4b10      	ldr	r3, [pc, #64]	; (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a4b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4be:	490d      	ldr	r1, [pc, #52]	; (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	650b      	str	r3, [r1, #80]	; 0x50
 800a4c4:	e001      	b.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4c6:	7dfb      	ldrb	r3, [r7, #23]
 800a4c8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d033      	beq.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4da:	2b03      	cmp	r3, #3
 800a4dc:	d81c      	bhi.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a4de:	a201      	add	r2, pc, #4	; (adr r2, 800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800a4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e4:	0800a51f 	.word	0x0800a51f
 800a4e8:	0800a4f9 	.word	0x0800a4f9
 800a4ec:	0800a507 	.word	0x0800a507
 800a4f0:	0800a51f 	.word	0x0800a51f
 800a4f4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4f8:	4bb8      	ldr	r3, [pc, #736]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fc:	4ab7      	ldr	r2, [pc, #732]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a502:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a504:	e00c      	b.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	3304      	adds	r3, #4
 800a50a:	2102      	movs	r1, #2
 800a50c:	4618      	mov	r0, r3
 800a50e:	f000 fefd 	bl	800b30c <RCCEx_PLL2_Config>
 800a512:	4603      	mov	r3, r0
 800a514:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a516:	e003      	b.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	75fb      	strb	r3, [r7, #23]
      break;
 800a51c:	e000      	b.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a51e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a520:	7dfb      	ldrb	r3, [r7, #23]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d109      	bne.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a526:	4bad      	ldr	r3, [pc, #692]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a52a:	f023 0203 	bic.w	r2, r3, #3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a532:	49aa      	ldr	r1, [pc, #680]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a534:	4313      	orrs	r3, r2
 800a536:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a538:	e001      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a53a:	7dfb      	ldrb	r3, [r7, #23]
 800a53c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a546:	2b00      	cmp	r3, #0
 800a548:	f000 8086 	beq.w	800a658 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a54c:	4ba4      	ldr	r3, [pc, #656]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4aa3      	ldr	r2, [pc, #652]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a556:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a558:	f7fb f998 	bl	800588c <HAL_GetTick>
 800a55c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a55e:	e009      	b.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a560:	f7fb f994 	bl	800588c <HAL_GetTick>
 800a564:	4602      	mov	r2, r0
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	2b64      	cmp	r3, #100	; 0x64
 800a56c:	d902      	bls.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a56e:	2303      	movs	r3, #3
 800a570:	75fb      	strb	r3, [r7, #23]
        break;
 800a572:	e005      	b.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a574:	4b9a      	ldr	r3, [pc, #616]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d0ef      	beq.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a580:	7dfb      	ldrb	r3, [r7, #23]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d166      	bne.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a586:	4b95      	ldr	r3, [pc, #596]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a588:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a590:	4053      	eors	r3, r2
 800a592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a596:	2b00      	cmp	r3, #0
 800a598:	d013      	beq.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a59a:	4b90      	ldr	r3, [pc, #576]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a59c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a59e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5a2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a5a4:	4b8d      	ldr	r3, [pc, #564]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a5a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5a8:	4a8c      	ldr	r2, [pc, #560]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a5aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5ae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a5b0:	4b8a      	ldr	r3, [pc, #552]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a5b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5b4:	4a89      	ldr	r2, [pc, #548]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a5b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5ba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a5bc:	4a87      	ldr	r2, [pc, #540]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a5c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5cc:	d115      	bne.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5ce:	f7fb f95d 	bl	800588c <HAL_GetTick>
 800a5d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5d4:	e00b      	b.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5d6:	f7fb f959 	bl	800588c <HAL_GetTick>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	1ad3      	subs	r3, r2, r3
 800a5e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d902      	bls.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800a5e8:	2303      	movs	r3, #3
 800a5ea:	75fb      	strb	r3, [r7, #23]
            break;
 800a5ec:	e005      	b.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5ee:	4b7b      	ldr	r3, [pc, #492]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a5f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5f2:	f003 0302 	and.w	r3, r3, #2
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d0ed      	beq.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800a5fa:	7dfb      	ldrb	r3, [r7, #23]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d126      	bne.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a60a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a60e:	d10d      	bne.n	800a62c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800a610:	4b72      	ldr	r3, [pc, #456]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a612:	691b      	ldr	r3, [r3, #16]
 800a614:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a61e:	0919      	lsrs	r1, r3, #4
 800a620:	4b70      	ldr	r3, [pc, #448]	; (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800a622:	400b      	ands	r3, r1
 800a624:	496d      	ldr	r1, [pc, #436]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a626:	4313      	orrs	r3, r2
 800a628:	610b      	str	r3, [r1, #16]
 800a62a:	e005      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800a62c:	4b6b      	ldr	r3, [pc, #428]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a62e:	691b      	ldr	r3, [r3, #16]
 800a630:	4a6a      	ldr	r2, [pc, #424]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a632:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a636:	6113      	str	r3, [r2, #16]
 800a638:	4b68      	ldr	r3, [pc, #416]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a63a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a646:	4965      	ldr	r1, [pc, #404]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a648:	4313      	orrs	r3, r2
 800a64a:	670b      	str	r3, [r1, #112]	; 0x70
 800a64c:	e004      	b.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a64e:	7dfb      	ldrb	r3, [r7, #23]
 800a650:	75bb      	strb	r3, [r7, #22]
 800a652:	e001      	b.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a654:	7dfb      	ldrb	r3, [r7, #23]
 800a656:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f003 0301 	and.w	r3, r3, #1
 800a660:	2b00      	cmp	r3, #0
 800a662:	d07e      	beq.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a668:	2b28      	cmp	r3, #40	; 0x28
 800a66a:	d867      	bhi.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800a66c:	a201      	add	r2, pc, #4	; (adr r2, 800a674 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800a66e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a672:	bf00      	nop
 800a674:	0800a743 	.word	0x0800a743
 800a678:	0800a73d 	.word	0x0800a73d
 800a67c:	0800a73d 	.word	0x0800a73d
 800a680:	0800a73d 	.word	0x0800a73d
 800a684:	0800a73d 	.word	0x0800a73d
 800a688:	0800a73d 	.word	0x0800a73d
 800a68c:	0800a73d 	.word	0x0800a73d
 800a690:	0800a73d 	.word	0x0800a73d
 800a694:	0800a719 	.word	0x0800a719
 800a698:	0800a73d 	.word	0x0800a73d
 800a69c:	0800a73d 	.word	0x0800a73d
 800a6a0:	0800a73d 	.word	0x0800a73d
 800a6a4:	0800a73d 	.word	0x0800a73d
 800a6a8:	0800a73d 	.word	0x0800a73d
 800a6ac:	0800a73d 	.word	0x0800a73d
 800a6b0:	0800a73d 	.word	0x0800a73d
 800a6b4:	0800a72b 	.word	0x0800a72b
 800a6b8:	0800a73d 	.word	0x0800a73d
 800a6bc:	0800a73d 	.word	0x0800a73d
 800a6c0:	0800a73d 	.word	0x0800a73d
 800a6c4:	0800a73d 	.word	0x0800a73d
 800a6c8:	0800a73d 	.word	0x0800a73d
 800a6cc:	0800a73d 	.word	0x0800a73d
 800a6d0:	0800a73d 	.word	0x0800a73d
 800a6d4:	0800a743 	.word	0x0800a743
 800a6d8:	0800a73d 	.word	0x0800a73d
 800a6dc:	0800a73d 	.word	0x0800a73d
 800a6e0:	0800a73d 	.word	0x0800a73d
 800a6e4:	0800a73d 	.word	0x0800a73d
 800a6e8:	0800a73d 	.word	0x0800a73d
 800a6ec:	0800a73d 	.word	0x0800a73d
 800a6f0:	0800a73d 	.word	0x0800a73d
 800a6f4:	0800a743 	.word	0x0800a743
 800a6f8:	0800a73d 	.word	0x0800a73d
 800a6fc:	0800a73d 	.word	0x0800a73d
 800a700:	0800a73d 	.word	0x0800a73d
 800a704:	0800a73d 	.word	0x0800a73d
 800a708:	0800a73d 	.word	0x0800a73d
 800a70c:	0800a73d 	.word	0x0800a73d
 800a710:	0800a73d 	.word	0x0800a73d
 800a714:	0800a743 	.word	0x0800a743
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	3304      	adds	r3, #4
 800a71c:	2101      	movs	r1, #1
 800a71e:	4618      	mov	r0, r3
 800a720:	f000 fdf4 	bl	800b30c <RCCEx_PLL2_Config>
 800a724:	4603      	mov	r3, r0
 800a726:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a728:	e00c      	b.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	3324      	adds	r3, #36	; 0x24
 800a72e:	2101      	movs	r1, #1
 800a730:	4618      	mov	r0, r3
 800a732:	f000 fe9d 	bl	800b470 <RCCEx_PLL3_Config>
 800a736:	4603      	mov	r3, r0
 800a738:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a73a:	e003      	b.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a73c:	2301      	movs	r3, #1
 800a73e:	75fb      	strb	r3, [r7, #23]
      break;
 800a740:	e000      	b.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800a742:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a744:	7dfb      	ldrb	r3, [r7, #23]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d109      	bne.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a74a:	4b24      	ldr	r3, [pc, #144]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a74c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a74e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a756:	4921      	ldr	r1, [pc, #132]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a758:	4313      	orrs	r3, r2
 800a75a:	654b      	str	r3, [r1, #84]	; 0x54
 800a75c:	e001      	b.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a75e:	7dfb      	ldrb	r3, [r7, #23]
 800a760:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f003 0302 	and.w	r3, r3, #2
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d03e      	beq.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a772:	2b05      	cmp	r3, #5
 800a774:	d820      	bhi.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800a776:	a201      	add	r2, pc, #4	; (adr r2, 800a77c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800a778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a77c:	0800a7bf 	.word	0x0800a7bf
 800a780:	0800a795 	.word	0x0800a795
 800a784:	0800a7a7 	.word	0x0800a7a7
 800a788:	0800a7bf 	.word	0x0800a7bf
 800a78c:	0800a7bf 	.word	0x0800a7bf
 800a790:	0800a7bf 	.word	0x0800a7bf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	3304      	adds	r3, #4
 800a798:	2101      	movs	r1, #1
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 fdb6 	bl	800b30c <RCCEx_PLL2_Config>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a7a4:	e00c      	b.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	3324      	adds	r3, #36	; 0x24
 800a7aa:	2101      	movs	r1, #1
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f000 fe5f 	bl	800b470 <RCCEx_PLL3_Config>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a7b6:	e003      	b.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	75fb      	strb	r3, [r7, #23]
      break;
 800a7bc:	e000      	b.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800a7be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7c0:	7dfb      	ldrb	r3, [r7, #23]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d110      	bne.n	800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a7c6:	4b05      	ldr	r3, [pc, #20]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a7c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ca:	f023 0207 	bic.w	r2, r3, #7
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7d2:	4902      	ldr	r1, [pc, #8]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	654b      	str	r3, [r1, #84]	; 0x54
 800a7d8:	e008      	b.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800a7da:	bf00      	nop
 800a7dc:	58024400 	.word	0x58024400
 800a7e0:	58024800 	.word	0x58024800
 800a7e4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7e8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 0304 	and.w	r3, r3, #4
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d039      	beq.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7fe:	2b05      	cmp	r3, #5
 800a800:	d820      	bhi.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800a802:	a201      	add	r2, pc, #4	; (adr r2, 800a808 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800a804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a808:	0800a84b 	.word	0x0800a84b
 800a80c:	0800a821 	.word	0x0800a821
 800a810:	0800a833 	.word	0x0800a833
 800a814:	0800a84b 	.word	0x0800a84b
 800a818:	0800a84b 	.word	0x0800a84b
 800a81c:	0800a84b 	.word	0x0800a84b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	3304      	adds	r3, #4
 800a824:	2101      	movs	r1, #1
 800a826:	4618      	mov	r0, r3
 800a828:	f000 fd70 	bl	800b30c <RCCEx_PLL2_Config>
 800a82c:	4603      	mov	r3, r0
 800a82e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a830:	e00c      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	3324      	adds	r3, #36	; 0x24
 800a836:	2101      	movs	r1, #1
 800a838:	4618      	mov	r0, r3
 800a83a:	f000 fe19 	bl	800b470 <RCCEx_PLL3_Config>
 800a83e:	4603      	mov	r3, r0
 800a840:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a842:	e003      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a844:	2301      	movs	r3, #1
 800a846:	75fb      	strb	r3, [r7, #23]
      break;
 800a848:	e000      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800a84a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a84c:	7dfb      	ldrb	r3, [r7, #23]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d10a      	bne.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a852:	4bb7      	ldr	r3, [pc, #732]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a856:	f023 0207 	bic.w	r2, r3, #7
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a860:	49b3      	ldr	r1, [pc, #716]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a862:	4313      	orrs	r3, r2
 800a864:	658b      	str	r3, [r1, #88]	; 0x58
 800a866:	e001      	b.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a868:	7dfb      	ldrb	r3, [r7, #23]
 800a86a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f003 0320 	and.w	r3, r3, #32
 800a874:	2b00      	cmp	r3, #0
 800a876:	d04b      	beq.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a87e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a882:	d02e      	beq.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800a884:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a888:	d828      	bhi.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a88a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a88e:	d02a      	beq.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a894:	d822      	bhi.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a896:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a89a:	d026      	beq.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a89c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a8a0:	d81c      	bhi.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a8a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8a6:	d010      	beq.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800a8a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8ac:	d816      	bhi.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d01d      	beq.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a8b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8b6:	d111      	bne.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	3304      	adds	r3, #4
 800a8bc:	2100      	movs	r1, #0
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f000 fd24 	bl	800b30c <RCCEx_PLL2_Config>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a8c8:	e012      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	3324      	adds	r3, #36	; 0x24
 800a8ce:	2102      	movs	r1, #2
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f000 fdcd 	bl	800b470 <RCCEx_PLL3_Config>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a8da:	e009      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	75fb      	strb	r3, [r7, #23]
      break;
 800a8e0:	e006      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a8e2:	bf00      	nop
 800a8e4:	e004      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a8e6:	bf00      	nop
 800a8e8:	e002      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a8ea:	bf00      	nop
 800a8ec:	e000      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a8ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8f0:	7dfb      	ldrb	r3, [r7, #23]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d10a      	bne.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a8f6:	4b8e      	ldr	r3, [pc, #568]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a8f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a904:	498a      	ldr	r1, [pc, #552]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a906:	4313      	orrs	r3, r2
 800a908:	654b      	str	r3, [r1, #84]	; 0x54
 800a90a:	e001      	b.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a90c:	7dfb      	ldrb	r3, [r7, #23]
 800a90e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d04b      	beq.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a922:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a926:	d02e      	beq.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800a928:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a92c:	d828      	bhi.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a92e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a932:	d02a      	beq.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a938:	d822      	bhi.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a93a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a93e:	d026      	beq.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a940:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a944:	d81c      	bhi.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a94a:	d010      	beq.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800a94c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a950:	d816      	bhi.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a952:	2b00      	cmp	r3, #0
 800a954:	d01d      	beq.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a95a:	d111      	bne.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	3304      	adds	r3, #4
 800a960:	2100      	movs	r1, #0
 800a962:	4618      	mov	r0, r3
 800a964:	f000 fcd2 	bl	800b30c <RCCEx_PLL2_Config>
 800a968:	4603      	mov	r3, r0
 800a96a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a96c:	e012      	b.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	3324      	adds	r3, #36	; 0x24
 800a972:	2102      	movs	r1, #2
 800a974:	4618      	mov	r0, r3
 800a976:	f000 fd7b 	bl	800b470 <RCCEx_PLL3_Config>
 800a97a:	4603      	mov	r3, r0
 800a97c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a97e:	e009      	b.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	75fb      	strb	r3, [r7, #23]
      break;
 800a984:	e006      	b.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a986:	bf00      	nop
 800a988:	e004      	b.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a98a:	bf00      	nop
 800a98c:	e002      	b.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a98e:	bf00      	nop
 800a990:	e000      	b.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a992:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a994:	7dfb      	ldrb	r3, [r7, #23]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d10a      	bne.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a99a:	4b65      	ldr	r3, [pc, #404]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a99c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a99e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a9a8:	4961      	ldr	r1, [pc, #388]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	658b      	str	r3, [r1, #88]	; 0x58
 800a9ae:	e001      	b.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9b0:	7dfb      	ldrb	r3, [r7, #23]
 800a9b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d04b      	beq.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a9c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a9ca:	d02e      	beq.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800a9cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a9d0:	d828      	bhi.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a9d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9d6:	d02a      	beq.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800a9d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9dc:	d822      	bhi.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a9de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a9e2:	d026      	beq.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a9e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a9e8:	d81c      	bhi.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a9ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9ee:	d010      	beq.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800a9f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9f4:	d816      	bhi.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d01d      	beq.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a9fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9fe:	d111      	bne.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	3304      	adds	r3, #4
 800aa04:	2100      	movs	r1, #0
 800aa06:	4618      	mov	r0, r3
 800aa08:	f000 fc80 	bl	800b30c <RCCEx_PLL2_Config>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800aa10:	e012      	b.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	3324      	adds	r3, #36	; 0x24
 800aa16:	2102      	movs	r1, #2
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f000 fd29 	bl	800b470 <RCCEx_PLL3_Config>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800aa22:	e009      	b.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	75fb      	strb	r3, [r7, #23]
      break;
 800aa28:	e006      	b.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800aa2a:	bf00      	nop
 800aa2c:	e004      	b.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800aa2e:	bf00      	nop
 800aa30:	e002      	b.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800aa32:	bf00      	nop
 800aa34:	e000      	b.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800aa36:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa38:	7dfb      	ldrb	r3, [r7, #23]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10a      	bne.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800aa3e:	4b3c      	ldr	r3, [pc, #240]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aa40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aa4c:	4938      	ldr	r1, [pc, #224]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	658b      	str	r3, [r1, #88]	; 0x58
 800aa52:	e001      	b.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa54:	7dfb      	ldrb	r3, [r7, #23]
 800aa56:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f003 0308 	and.w	r3, r3, #8
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d01a      	beq.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa6e:	d10a      	bne.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	3324      	adds	r3, #36	; 0x24
 800aa74:	2102      	movs	r1, #2
 800aa76:	4618      	mov	r0, r3
 800aa78:	f000 fcfa 	bl	800b470 <RCCEx_PLL3_Config>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d001      	beq.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800aa86:	4b2a      	ldr	r3, [pc, #168]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aa88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa94:	4926      	ldr	r1, [pc, #152]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aa96:	4313      	orrs	r3, r2
 800aa98:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f003 0310 	and.w	r3, r3, #16
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d01a      	beq.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aaac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aab0:	d10a      	bne.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	3324      	adds	r3, #36	; 0x24
 800aab6:	2102      	movs	r1, #2
 800aab8:	4618      	mov	r0, r3
 800aaba:	f000 fcd9 	bl	800b470 <RCCEx_PLL3_Config>
 800aabe:	4603      	mov	r3, r0
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d001      	beq.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800aac4:	2301      	movs	r3, #1
 800aac6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aac8:	4b19      	ldr	r3, [pc, #100]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aaca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aacc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aad6:	4916      	ldr	r1, [pc, #88]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aad8:	4313      	orrs	r3, r2
 800aada:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d036      	beq.n	800ab56 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aaee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaf2:	d01f      	beq.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800aaf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaf8:	d817      	bhi.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d003      	beq.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800aafe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab02:	d009      	beq.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800ab04:	e011      	b.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	3304      	adds	r3, #4
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f000 fbfd 	bl	800b30c <RCCEx_PLL2_Config>
 800ab12:	4603      	mov	r3, r0
 800ab14:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ab16:	e00e      	b.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	3324      	adds	r3, #36	; 0x24
 800ab1c:	2102      	movs	r1, #2
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f000 fca6 	bl	800b470 <RCCEx_PLL3_Config>
 800ab24:	4603      	mov	r3, r0
 800ab26:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ab28:	e005      	b.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	75fb      	strb	r3, [r7, #23]
      break;
 800ab2e:	e002      	b.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800ab30:	58024400 	.word	0x58024400
      break;
 800ab34:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab36:	7dfb      	ldrb	r3, [r7, #23]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d10a      	bne.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ab3c:	4b93      	ldr	r3, [pc, #588]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ab4a:	4990      	ldr	r1, [pc, #576]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	658b      	str	r3, [r1, #88]	; 0x58
 800ab50:	e001      	b.n	800ab56 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab52:	7dfb      	ldrb	r3, [r7, #23]
 800ab54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d033      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab6c:	d01c      	beq.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800ab6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab72:	d816      	bhi.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800ab74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab78:	d003      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800ab7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab7e:	d007      	beq.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800ab80:	e00f      	b.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab82:	4b82      	ldr	r3, [pc, #520]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab86:	4a81      	ldr	r2, [pc, #516]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800ab8e:	e00c      	b.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	3324      	adds	r3, #36	; 0x24
 800ab94:	2101      	movs	r1, #1
 800ab96:	4618      	mov	r0, r3
 800ab98:	f000 fc6a 	bl	800b470 <RCCEx_PLL3_Config>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800aba0:	e003      	b.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	75fb      	strb	r3, [r7, #23]
      break;
 800aba6:	e000      	b.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800aba8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abaa:	7dfb      	ldrb	r3, [r7, #23]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d10a      	bne.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800abb0:	4b76      	ldr	r3, [pc, #472]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800abb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abbe:	4973      	ldr	r1, [pc, #460]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800abc0:	4313      	orrs	r3, r2
 800abc2:	654b      	str	r3, [r1, #84]	; 0x54
 800abc4:	e001      	b.n	800abca <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abc6:	7dfb      	ldrb	r3, [r7, #23]
 800abc8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d029      	beq.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d003      	beq.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800abde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abe2:	d007      	beq.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800abe4:	e00f      	b.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abe6:	4b69      	ldr	r3, [pc, #420]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800abe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abea:	4a68      	ldr	r2, [pc, #416]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800abec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abf0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800abf2:	e00b      	b.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	3304      	adds	r3, #4
 800abf8:	2102      	movs	r1, #2
 800abfa:	4618      	mov	r0, r3
 800abfc:	f000 fb86 	bl	800b30c <RCCEx_PLL2_Config>
 800ac00:	4603      	mov	r3, r0
 800ac02:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ac04:	e002      	b.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800ac06:	2301      	movs	r3, #1
 800ac08:	75fb      	strb	r3, [r7, #23]
      break;
 800ac0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac0c:	7dfb      	ldrb	r3, [r7, #23]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d109      	bne.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ac12:	4b5e      	ldr	r3, [pc, #376]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac1e:	495b      	ldr	r1, [pc, #364]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac20:	4313      	orrs	r3, r2
 800ac22:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ac24:	e001      	b.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac26:	7dfb      	ldrb	r3, [r7, #23]
 800ac28:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00a      	beq.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	3324      	adds	r3, #36	; 0x24
 800ac3a:	2102      	movs	r1, #2
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f000 fc17 	bl	800b470 <RCCEx_PLL3_Config>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d001      	beq.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d030      	beq.n	800acba <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac60:	d017      	beq.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800ac62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac66:	d811      	bhi.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800ac68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac6c:	d013      	beq.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800ac6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac72:	d80b      	bhi.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d010      	beq.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800ac78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac7c:	d106      	bne.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac7e:	4b43      	ldr	r3, [pc, #268]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac82:	4a42      	ldr	r2, [pc, #264]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800ac8a:	e007      	b.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	75fb      	strb	r3, [r7, #23]
      break;
 800ac90:	e004      	b.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800ac92:	bf00      	nop
 800ac94:	e002      	b.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800ac96:	bf00      	nop
 800ac98:	e000      	b.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800ac9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac9c:	7dfb      	ldrb	r3, [r7, #23]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d109      	bne.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aca2:	4b3a      	ldr	r3, [pc, #232]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aca6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acae:	4937      	ldr	r1, [pc, #220]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800acb0:	4313      	orrs	r3, r2
 800acb2:	654b      	str	r3, [r1, #84]	; 0x54
 800acb4:	e001      	b.n	800acba <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acb6:	7dfb      	ldrb	r3, [r7, #23]
 800acb8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d008      	beq.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800acc6:	4b31      	ldr	r3, [pc, #196]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800acc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acd2:	492e      	ldr	r1, [pc, #184]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800acd4:	4313      	orrs	r3, r2
 800acd6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d009      	beq.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ace4:	4b29      	ldr	r3, [pc, #164]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800acf2:	4926      	ldr	r1, [pc, #152]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800acf4:	4313      	orrs	r3, r2
 800acf6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d008      	beq.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ad04:	4b21      	ldr	r3, [pc, #132]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad08:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad10:	491e      	ldr	r1, [pc, #120]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad12:	4313      	orrs	r3, r2
 800ad14:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00d      	beq.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ad22:	4b1a      	ldr	r3, [pc, #104]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	4a19      	ldr	r2, [pc, #100]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad2c:	6113      	str	r3, [r2, #16]
 800ad2e:	4b17      	ldr	r3, [pc, #92]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad30:	691a      	ldr	r2, [r3, #16]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ad38:	4914      	ldr	r1, [pc, #80]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	da08      	bge.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ad46:	4b11      	ldr	r3, [pc, #68]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad52:	490e      	ldr	r1, [pc, #56]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad54:	4313      	orrs	r3, r2
 800ad56:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d009      	beq.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ad64:	4b09      	ldr	r3, [pc, #36]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad72:	4906      	ldr	r1, [pc, #24]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad74:	4313      	orrs	r3, r2
 800ad76:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800ad78:	7dbb      	ldrb	r3, [r7, #22]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d101      	bne.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	e000      	b.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3718      	adds	r7, #24
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	58024400 	.word	0x58024400

0800ad90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ad94:	f7ff f860 	bl	8009e58 <HAL_RCC_GetHCLKFreq>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	4b06      	ldr	r3, [pc, #24]	; (800adb4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ad9c:	6a1b      	ldr	r3, [r3, #32]
 800ad9e:	091b      	lsrs	r3, r3, #4
 800ada0:	f003 0307 	and.w	r3, r3, #7
 800ada4:	4904      	ldr	r1, [pc, #16]	; (800adb8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ada6:	5ccb      	ldrb	r3, [r1, r3]
 800ada8:	f003 031f 	and.w	r3, r3, #31
 800adac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	58024400 	.word	0x58024400
 800adb8:	080127f8 	.word	0x080127f8

0800adbc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b089      	sub	sp, #36	; 0x24
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adc4:	4ba1      	ldr	r3, [pc, #644]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc8:	f003 0303 	and.w	r3, r3, #3
 800adcc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800adce:	4b9f      	ldr	r3, [pc, #636]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800add0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add2:	0b1b      	lsrs	r3, r3, #12
 800add4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800add8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800adda:	4b9c      	ldr	r3, [pc, #624]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800addc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adde:	091b      	lsrs	r3, r3, #4
 800ade0:	f003 0301 	and.w	r3, r3, #1
 800ade4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ade6:	4b99      	ldr	r3, [pc, #612]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ade8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adea:	08db      	lsrs	r3, r3, #3
 800adec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	fb02 f303 	mul.w	r3, r2, r3
 800adf6:	ee07 3a90 	vmov	s15, r3
 800adfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adfe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f000 8111 	beq.w	800b02c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	2b02      	cmp	r3, #2
 800ae0e:	f000 8083 	beq.w	800af18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	f200 80a1 	bhi.w	800af5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d003      	beq.n	800ae28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d056      	beq.n	800aed4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ae26:	e099      	b.n	800af5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae28:	4b88      	ldr	r3, [pc, #544]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f003 0320 	and.w	r3, r3, #32
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d02d      	beq.n	800ae90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae34:	4b85      	ldr	r3, [pc, #532]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	08db      	lsrs	r3, r3, #3
 800ae3a:	f003 0303 	and.w	r3, r3, #3
 800ae3e:	4a84      	ldr	r2, [pc, #528]	; (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ae40:	fa22 f303 	lsr.w	r3, r2, r3
 800ae44:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	ee07 3a90 	vmov	s15, r3
 800ae4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	ee07 3a90 	vmov	s15, r3
 800ae56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae5e:	4b7b      	ldr	r3, [pc, #492]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae66:	ee07 3a90 	vmov	s15, r3
 800ae6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae72:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae8a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ae8e:	e087      	b.n	800afa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	ee07 3a90 	vmov	s15, r3
 800ae96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b058 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ae9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aea2:	4b6a      	ldr	r3, [pc, #424]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeaa:	ee07 3a90 	vmov	s15, r3
 800aeae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeb6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aeba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aece:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aed2:	e065      	b.n	800afa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	ee07 3a90 	vmov	s15, r3
 800aeda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aede:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b05c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aee6:	4b59      	ldr	r3, [pc, #356]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeee:	ee07 3a90 	vmov	s15, r3
 800aef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aef6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aefa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aefe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af16:	e043      	b.n	800afa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	ee07 3a90 	vmov	s15, r3
 800af1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b060 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800af26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af2a:	4b48      	ldr	r3, [pc, #288]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af32:	ee07 3a90 	vmov	s15, r3
 800af36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af5a:	e021      	b.n	800afa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	ee07 3a90 	vmov	s15, r3
 800af62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b05c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af6e:	4b37      	ldr	r3, [pc, #220]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af76:	ee07 3a90 	vmov	s15, r3
 800af7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af82:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800afa0:	4b2a      	ldr	r3, [pc, #168]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa4:	0a5b      	lsrs	r3, r3, #9
 800afa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afaa:	ee07 3a90 	vmov	s15, r3
 800afae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afba:	edd7 6a07 	vldr	s13, [r7, #28]
 800afbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afc6:	ee17 2a90 	vmov	r2, s15
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800afce:	4b1f      	ldr	r3, [pc, #124]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd2:	0c1b      	lsrs	r3, r3, #16
 800afd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afd8:	ee07 3a90 	vmov	s15, r3
 800afdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afe4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afe8:	edd7 6a07 	vldr	s13, [r7, #28]
 800afec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aff4:	ee17 2a90 	vmov	r2, s15
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800affc:	4b13      	ldr	r3, [pc, #76]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800affe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b000:	0e1b      	lsrs	r3, r3, #24
 800b002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b006:	ee07 3a90 	vmov	s15, r3
 800b00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b00e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b012:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b016:	edd7 6a07 	vldr	s13, [r7, #28]
 800b01a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b01e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b022:	ee17 2a90 	vmov	r2, s15
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b02a:	e008      	b.n	800b03e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2200      	movs	r2, #0
 800b030:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	609a      	str	r2, [r3, #8]
}
 800b03e:	bf00      	nop
 800b040:	3724      	adds	r7, #36	; 0x24
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr
 800b04a:	bf00      	nop
 800b04c:	58024400 	.word	0x58024400
 800b050:	03d09000 	.word	0x03d09000
 800b054:	46000000 	.word	0x46000000
 800b058:	4c742400 	.word	0x4c742400
 800b05c:	4a742400 	.word	0x4a742400
 800b060:	4c371b00 	.word	0x4c371b00

0800b064 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b064:	b480      	push	{r7}
 800b066:	b089      	sub	sp, #36	; 0x24
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b06c:	4ba1      	ldr	r3, [pc, #644]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b070:	f003 0303 	and.w	r3, r3, #3
 800b074:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b076:	4b9f      	ldr	r3, [pc, #636]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b07a:	0d1b      	lsrs	r3, r3, #20
 800b07c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b080:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b082:	4b9c      	ldr	r3, [pc, #624]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b086:	0a1b      	lsrs	r3, r3, #8
 800b088:	f003 0301 	and.w	r3, r3, #1
 800b08c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b08e:	4b99      	ldr	r3, [pc, #612]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b092:	08db      	lsrs	r3, r3, #3
 800b094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b098:	693a      	ldr	r2, [r7, #16]
 800b09a:	fb02 f303 	mul.w	r3, r2, r3
 800b09e:	ee07 3a90 	vmov	s15, r3
 800b0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	f000 8111 	beq.w	800b2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	2b02      	cmp	r3, #2
 800b0b6:	f000 8083 	beq.w	800b1c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	f200 80a1 	bhi.w	800b204 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d003      	beq.n	800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b0c8:	69bb      	ldr	r3, [r7, #24]
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	d056      	beq.n	800b17c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b0ce:	e099      	b.n	800b204 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0d0:	4b88      	ldr	r3, [pc, #544]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f003 0320 	and.w	r3, r3, #32
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d02d      	beq.n	800b138 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b0dc:	4b85      	ldr	r3, [pc, #532]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	08db      	lsrs	r3, r3, #3
 800b0e2:	f003 0303 	and.w	r3, r3, #3
 800b0e6:	4a84      	ldr	r2, [pc, #528]	; (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b0e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b0ec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	ee07 3a90 	vmov	s15, r3
 800b0f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	ee07 3a90 	vmov	s15, r3
 800b0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b106:	4b7b      	ldr	r3, [pc, #492]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b10e:	ee07 3a90 	vmov	s15, r3
 800b112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b116:	ed97 6a03 	vldr	s12, [r7, #12]
 800b11a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b11e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b12a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b132:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b136:	e087      	b.n	800b248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	ee07 3a90 	vmov	s15, r3
 800b13e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b142:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b300 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b14a:	4b6a      	ldr	r3, [pc, #424]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b14e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b152:	ee07 3a90 	vmov	s15, r3
 800b156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b15a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b15e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b16a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b16e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b172:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b176:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b17a:	e065      	b.n	800b248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	ee07 3a90 	vmov	s15, r3
 800b182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b186:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b18a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b18e:	4b59      	ldr	r3, [pc, #356]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b196:	ee07 3a90 	vmov	s15, r3
 800b19a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b19e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1be:	e043      	b.n	800b248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	ee07 3a90 	vmov	s15, r3
 800b1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b308 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b1ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1d2:	4b48      	ldr	r3, [pc, #288]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1da:	ee07 3a90 	vmov	s15, r3
 800b1de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b202:	e021      	b.n	800b248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	ee07 3a90 	vmov	s15, r3
 800b20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b20e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b216:	4b37      	ldr	r3, [pc, #220]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b21e:	ee07 3a90 	vmov	s15, r3
 800b222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b226:	ed97 6a03 	vldr	s12, [r7, #12]
 800b22a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b22e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b23a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b242:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b246:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b248:	4b2a      	ldr	r3, [pc, #168]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b24c:	0a5b      	lsrs	r3, r3, #9
 800b24e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b252:	ee07 3a90 	vmov	s15, r3
 800b256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b25a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b25e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b262:	edd7 6a07 	vldr	s13, [r7, #28]
 800b266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b26a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b26e:	ee17 2a90 	vmov	r2, s15
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b276:	4b1f      	ldr	r3, [pc, #124]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27a:	0c1b      	lsrs	r3, r3, #16
 800b27c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b280:	ee07 3a90 	vmov	s15, r3
 800b284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b288:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b28c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b290:	edd7 6a07 	vldr	s13, [r7, #28]
 800b294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b29c:	ee17 2a90 	vmov	r2, s15
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b2a4:	4b13      	ldr	r3, [pc, #76]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a8:	0e1b      	lsrs	r3, r3, #24
 800b2aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2ae:	ee07 3a90 	vmov	s15, r3
 800b2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2be:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2ca:	ee17 2a90 	vmov	r2, s15
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b2d2:	e008      	b.n	800b2e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	609a      	str	r2, [r3, #8]
}
 800b2e6:	bf00      	nop
 800b2e8:	3724      	adds	r7, #36	; 0x24
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	58024400 	.word	0x58024400
 800b2f8:	03d09000 	.word	0x03d09000
 800b2fc:	46000000 	.word	0x46000000
 800b300:	4c742400 	.word	0x4c742400
 800b304:	4a742400 	.word	0x4a742400
 800b308:	4c371b00 	.word	0x4c371b00

0800b30c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b316:	2300      	movs	r3, #0
 800b318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b31a:	4b53      	ldr	r3, [pc, #332]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b31c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b31e:	f003 0303 	and.w	r3, r3, #3
 800b322:	2b03      	cmp	r3, #3
 800b324:	d101      	bne.n	800b32a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b326:	2301      	movs	r3, #1
 800b328:	e099      	b.n	800b45e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b32a:	4b4f      	ldr	r3, [pc, #316]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4a4e      	ldr	r2, [pc, #312]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b330:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b336:	f7fa faa9 	bl	800588c <HAL_GetTick>
 800b33a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b33c:	e008      	b.n	800b350 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b33e:	f7fa faa5 	bl	800588c <HAL_GetTick>
 800b342:	4602      	mov	r2, r0
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	1ad3      	subs	r3, r2, r3
 800b348:	2b02      	cmp	r3, #2
 800b34a:	d901      	bls.n	800b350 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b34c:	2303      	movs	r3, #3
 800b34e:	e086      	b.n	800b45e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b350:	4b45      	ldr	r3, [pc, #276]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d1f0      	bne.n	800b33e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b35c:	4b42      	ldr	r3, [pc, #264]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b35e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b360:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	031b      	lsls	r3, r3, #12
 800b36a:	493f      	ldr	r1, [pc, #252]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b36c:	4313      	orrs	r3, r2
 800b36e:	628b      	str	r3, [r1, #40]	; 0x28
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	3b01      	subs	r3, #1
 800b376:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	3b01      	subs	r3, #1
 800b380:	025b      	lsls	r3, r3, #9
 800b382:	b29b      	uxth	r3, r3
 800b384:	431a      	orrs	r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	3b01      	subs	r3, #1
 800b38c:	041b      	lsls	r3, r3, #16
 800b38e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b392:	431a      	orrs	r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	691b      	ldr	r3, [r3, #16]
 800b398:	3b01      	subs	r3, #1
 800b39a:	061b      	lsls	r3, r3, #24
 800b39c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b3a0:	4931      	ldr	r1, [pc, #196]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b3a6:	4b30      	ldr	r3, [pc, #192]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	695b      	ldr	r3, [r3, #20]
 800b3b2:	492d      	ldr	r1, [pc, #180]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b3b8:	4b2b      	ldr	r3, [pc, #172]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3bc:	f023 0220 	bic.w	r2, r3, #32
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	699b      	ldr	r3, [r3, #24]
 800b3c4:	4928      	ldr	r1, [pc, #160]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b3ca:	4b27      	ldr	r3, [pc, #156]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ce:	4a26      	ldr	r2, [pc, #152]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b3d0:	f023 0310 	bic.w	r3, r3, #16
 800b3d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b3d6:	4b24      	ldr	r3, [pc, #144]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b3d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3da:	4b24      	ldr	r3, [pc, #144]	; (800b46c <RCCEx_PLL2_Config+0x160>)
 800b3dc:	4013      	ands	r3, r2
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	69d2      	ldr	r2, [r2, #28]
 800b3e2:	00d2      	lsls	r2, r2, #3
 800b3e4:	4920      	ldr	r1, [pc, #128]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b3ea:	4b1f      	ldr	r3, [pc, #124]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ee:	4a1e      	ldr	r2, [pc, #120]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b3f0:	f043 0310 	orr.w	r3, r3, #16
 800b3f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d106      	bne.n	800b40a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b3fc:	4b1a      	ldr	r3, [pc, #104]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b400:	4a19      	ldr	r2, [pc, #100]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b402:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b406:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b408:	e00f      	b.n	800b42a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d106      	bne.n	800b41e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b410:	4b15      	ldr	r3, [pc, #84]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b414:	4a14      	ldr	r2, [pc, #80]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b41a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b41c:	e005      	b.n	800b42a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b41e:	4b12      	ldr	r3, [pc, #72]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b422:	4a11      	ldr	r2, [pc, #68]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b424:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b428:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b42a:	4b0f      	ldr	r3, [pc, #60]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4a0e      	ldr	r2, [pc, #56]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b430:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b436:	f7fa fa29 	bl	800588c <HAL_GetTick>
 800b43a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b43c:	e008      	b.n	800b450 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b43e:	f7fa fa25 	bl	800588c <HAL_GetTick>
 800b442:	4602      	mov	r2, r0
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	1ad3      	subs	r3, r2, r3
 800b448:	2b02      	cmp	r3, #2
 800b44a:	d901      	bls.n	800b450 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b44c:	2303      	movs	r3, #3
 800b44e:	e006      	b.n	800b45e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b450:	4b05      	ldr	r3, [pc, #20]	; (800b468 <RCCEx_PLL2_Config+0x15c>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d0f0      	beq.n	800b43e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3710      	adds	r7, #16
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	58024400 	.word	0x58024400
 800b46c:	ffff0007 	.word	0xffff0007

0800b470 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b47a:	2300      	movs	r3, #0
 800b47c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b47e:	4b53      	ldr	r3, [pc, #332]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b482:	f003 0303 	and.w	r3, r3, #3
 800b486:	2b03      	cmp	r3, #3
 800b488:	d101      	bne.n	800b48e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b48a:	2301      	movs	r3, #1
 800b48c:	e099      	b.n	800b5c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b48e:	4b4f      	ldr	r3, [pc, #316]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a4e      	ldr	r2, [pc, #312]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b49a:	f7fa f9f7 	bl	800588c <HAL_GetTick>
 800b49e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4a0:	e008      	b.n	800b4b4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b4a2:	f7fa f9f3 	bl	800588c <HAL_GetTick>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	1ad3      	subs	r3, r2, r3
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	d901      	bls.n	800b4b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b4b0:	2303      	movs	r3, #3
 800b4b2:	e086      	b.n	800b5c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4b4:	4b45      	ldr	r3, [pc, #276]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d1f0      	bne.n	800b4a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b4c0:	4b42      	ldr	r3, [pc, #264]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	051b      	lsls	r3, r3, #20
 800b4ce:	493f      	ldr	r1, [pc, #252]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	628b      	str	r3, [r1, #40]	; 0x28
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	3b01      	subs	r3, #1
 800b4da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	689b      	ldr	r3, [r3, #8]
 800b4e2:	3b01      	subs	r3, #1
 800b4e4:	025b      	lsls	r3, r3, #9
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	431a      	orrs	r2, r3
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	68db      	ldr	r3, [r3, #12]
 800b4ee:	3b01      	subs	r3, #1
 800b4f0:	041b      	lsls	r3, r3, #16
 800b4f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b4f6:	431a      	orrs	r2, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	691b      	ldr	r3, [r3, #16]
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	061b      	lsls	r3, r3, #24
 800b500:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b504:	4931      	ldr	r1, [pc, #196]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b506:	4313      	orrs	r3, r2
 800b508:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b50a:	4b30      	ldr	r3, [pc, #192]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b50e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	695b      	ldr	r3, [r3, #20]
 800b516:	492d      	ldr	r1, [pc, #180]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b518:	4313      	orrs	r3, r2
 800b51a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b51c:	4b2b      	ldr	r3, [pc, #172]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b520:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	699b      	ldr	r3, [r3, #24]
 800b528:	4928      	ldr	r1, [pc, #160]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b52a:	4313      	orrs	r3, r2
 800b52c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b52e:	4b27      	ldr	r3, [pc, #156]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b532:	4a26      	ldr	r2, [pc, #152]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b538:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b53a:	4b24      	ldr	r3, [pc, #144]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b53c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b53e:	4b24      	ldr	r3, [pc, #144]	; (800b5d0 <RCCEx_PLL3_Config+0x160>)
 800b540:	4013      	ands	r3, r2
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	69d2      	ldr	r2, [r2, #28]
 800b546:	00d2      	lsls	r2, r2, #3
 800b548:	4920      	ldr	r1, [pc, #128]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b54a:	4313      	orrs	r3, r2
 800b54c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b54e:	4b1f      	ldr	r3, [pc, #124]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b552:	4a1e      	ldr	r2, [pc, #120]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b558:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d106      	bne.n	800b56e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b560:	4b1a      	ldr	r3, [pc, #104]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b564:	4a19      	ldr	r2, [pc, #100]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b566:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b56a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b56c:	e00f      	b.n	800b58e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	2b01      	cmp	r3, #1
 800b572:	d106      	bne.n	800b582 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b574:	4b15      	ldr	r3, [pc, #84]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b578:	4a14      	ldr	r2, [pc, #80]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b57a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b57e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b580:	e005      	b.n	800b58e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b582:	4b12      	ldr	r3, [pc, #72]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b586:	4a11      	ldr	r2, [pc, #68]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b588:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b58c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b58e:	4b0f      	ldr	r3, [pc, #60]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4a0e      	ldr	r2, [pc, #56]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b598:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b59a:	f7fa f977 	bl	800588c <HAL_GetTick>
 800b59e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5a0:	e008      	b.n	800b5b4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b5a2:	f7fa f973 	bl	800588c <HAL_GetTick>
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	1ad3      	subs	r3, r2, r3
 800b5ac:	2b02      	cmp	r3, #2
 800b5ae:	d901      	bls.n	800b5b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b5b0:	2303      	movs	r3, #3
 800b5b2:	e006      	b.n	800b5c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5b4:	4b05      	ldr	r3, [pc, #20]	; (800b5cc <RCCEx_PLL3_Config+0x15c>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d0f0      	beq.n	800b5a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	58024400 	.word	0x58024400
 800b5d0:	ffff0007 	.word	0xffff0007

0800b5d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d101      	bne.n	800b5e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e0f1      	b.n	800b7ca <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a78      	ldr	r2, [pc, #480]	; (800b7d4 <HAL_SPI_Init+0x200>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d00f      	beq.n	800b616 <HAL_SPI_Init+0x42>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a77      	ldr	r2, [pc, #476]	; (800b7d8 <HAL_SPI_Init+0x204>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d00a      	beq.n	800b616 <HAL_SPI_Init+0x42>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a75      	ldr	r2, [pc, #468]	; (800b7dc <HAL_SPI_Init+0x208>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d005      	beq.n	800b616 <HAL_SPI_Init+0x42>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	2b0f      	cmp	r3, #15
 800b610:	d901      	bls.n	800b616 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b612:	2301      	movs	r3, #1
 800b614:	e0d9      	b.n	800b7ca <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 f8e2 	bl	800b7e0 <SPI_GetPacketSize>
 800b61c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4a6c      	ldr	r2, [pc, #432]	; (800b7d4 <HAL_SPI_Init+0x200>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d00c      	beq.n	800b642 <HAL_SPI_Init+0x6e>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a6a      	ldr	r2, [pc, #424]	; (800b7d8 <HAL_SPI_Init+0x204>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d007      	beq.n	800b642 <HAL_SPI_Init+0x6e>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4a69      	ldr	r2, [pc, #420]	; (800b7dc <HAL_SPI_Init+0x208>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d002      	beq.n	800b642 <HAL_SPI_Init+0x6e>
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2b08      	cmp	r3, #8
 800b640:	d811      	bhi.n	800b666 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b646:	4a63      	ldr	r2, [pc, #396]	; (800b7d4 <HAL_SPI_Init+0x200>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d009      	beq.n	800b660 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a61      	ldr	r2, [pc, #388]	; (800b7d8 <HAL_SPI_Init+0x204>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d004      	beq.n	800b660 <HAL_SPI_Init+0x8c>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a60      	ldr	r2, [pc, #384]	; (800b7dc <HAL_SPI_Init+0x208>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d104      	bne.n	800b66a <HAL_SPI_Init+0x96>
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2b10      	cmp	r3, #16
 800b664:	d901      	bls.n	800b66a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b666:	2301      	movs	r3, #1
 800b668:	e0af      	b.n	800b7ca <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b670:	b2db      	uxtb	r3, r3
 800b672:	2b00      	cmp	r3, #0
 800b674:	d106      	bne.n	800b684 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2200      	movs	r2, #0
 800b67a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f7f8 fc82 	bl	8003f88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2202      	movs	r2, #2
 800b688:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f022 0201 	bic.w	r2, r2, #1
 800b69a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b6a6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	699b      	ldr	r3, [r3, #24]
 800b6ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b6b0:	d119      	bne.n	800b6e6 <HAL_SPI_Init+0x112>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6ba:	d103      	bne.n	800b6c4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d008      	beq.n	800b6d6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d10c      	bne.n	800b6e6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b6d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6d4:	d107      	bne.n	800b6e6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b6e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	69da      	ldr	r2, [r3, #28]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ee:	431a      	orrs	r2, r3
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	431a      	orrs	r2, r3
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6f8:	ea42 0103 	orr.w	r1, r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	68da      	ldr	r2, [r3, #12]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	430a      	orrs	r2, r1
 800b706:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b710:	431a      	orrs	r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b716:	431a      	orrs	r2, r3
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	431a      	orrs	r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	691b      	ldr	r3, [r3, #16]
 800b722:	431a      	orrs	r2, r3
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	695b      	ldr	r3, [r3, #20]
 800b728:	431a      	orrs	r2, r3
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a1b      	ldr	r3, [r3, #32]
 800b72e:	431a      	orrs	r2, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	431a      	orrs	r2, r3
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b73a:	431a      	orrs	r2, r3
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	431a      	orrs	r2, r3
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b746:	ea42 0103 	orr.w	r1, r2, r3
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	430a      	orrs	r2, r1
 800b754:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d113      	bne.n	800b786 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b770:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b784:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f022 0201 	bic.w	r2, r2, #1
 800b794:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d00a      	beq.n	800b7b8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	430a      	orrs	r2, r1
 800b7b6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b7c8:	2300      	movs	r3, #0
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3710      	adds	r7, #16
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	40013000 	.word	0x40013000
 800b7d8:	40003800 	.word	0x40003800
 800b7dc:	40003c00 	.word	0x40003c00

0800b7e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b085      	sub	sp, #20
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7ec:	095b      	lsrs	r3, r3, #5
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	68db      	ldr	r3, [r3, #12]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	3307      	adds	r3, #7
 800b7fe:	08db      	lsrs	r3, r3, #3
 800b800:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	68fa      	ldr	r2, [r7, #12]
 800b806:	fb02 f303 	mul.w	r3, r2, r3
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3714      	adds	r7, #20
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr

0800b816 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b082      	sub	sp, #8
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d101      	bne.n	800b828 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b824:	2301      	movs	r3, #1
 800b826:	e049      	b.n	800b8bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	2b00      	cmp	r3, #0
 800b832:	d106      	bne.n	800b842 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f7f9 fa41 	bl	8004cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2202      	movs	r2, #2
 800b846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681a      	ldr	r2, [r3, #0]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	3304      	adds	r3, #4
 800b852:	4619      	mov	r1, r3
 800b854:	4610      	mov	r0, r2
 800b856:	f000 fd71 	bl	800c33c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2201      	movs	r2, #1
 800b85e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2201      	movs	r2, #1
 800b866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2201      	movs	r2, #1
 800b86e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2201      	movs	r2, #1
 800b876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2201      	movs	r2, #1
 800b87e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2201      	movs	r2, #1
 800b886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2201      	movs	r2, #1
 800b88e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2201      	movs	r2, #1
 800b896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8ba:	2300      	movs	r3, #0
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b085      	sub	sp, #20
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d001      	beq.n	800b8dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e054      	b.n	800b986 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2202      	movs	r2, #2
 800b8e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	68da      	ldr	r2, [r3, #12]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f042 0201 	orr.w	r2, r2, #1
 800b8f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a26      	ldr	r2, [pc, #152]	; (800b994 <HAL_TIM_Base_Start_IT+0xd0>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d022      	beq.n	800b944 <HAL_TIM_Base_Start_IT+0x80>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b906:	d01d      	beq.n	800b944 <HAL_TIM_Base_Start_IT+0x80>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a22      	ldr	r2, [pc, #136]	; (800b998 <HAL_TIM_Base_Start_IT+0xd4>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d018      	beq.n	800b944 <HAL_TIM_Base_Start_IT+0x80>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a21      	ldr	r2, [pc, #132]	; (800b99c <HAL_TIM_Base_Start_IT+0xd8>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d013      	beq.n	800b944 <HAL_TIM_Base_Start_IT+0x80>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a1f      	ldr	r2, [pc, #124]	; (800b9a0 <HAL_TIM_Base_Start_IT+0xdc>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d00e      	beq.n	800b944 <HAL_TIM_Base_Start_IT+0x80>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a1e      	ldr	r2, [pc, #120]	; (800b9a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d009      	beq.n	800b944 <HAL_TIM_Base_Start_IT+0x80>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a1c      	ldr	r2, [pc, #112]	; (800b9a8 <HAL_TIM_Base_Start_IT+0xe4>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d004      	beq.n	800b944 <HAL_TIM_Base_Start_IT+0x80>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a1b      	ldr	r2, [pc, #108]	; (800b9ac <HAL_TIM_Base_Start_IT+0xe8>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d115      	bne.n	800b970 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	689a      	ldr	r2, [r3, #8]
 800b94a:	4b19      	ldr	r3, [pc, #100]	; (800b9b0 <HAL_TIM_Base_Start_IT+0xec>)
 800b94c:	4013      	ands	r3, r2
 800b94e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2b06      	cmp	r3, #6
 800b954:	d015      	beq.n	800b982 <HAL_TIM_Base_Start_IT+0xbe>
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b95c:	d011      	beq.n	800b982 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f042 0201 	orr.w	r2, r2, #1
 800b96c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b96e:	e008      	b.n	800b982 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	681a      	ldr	r2, [r3, #0]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f042 0201 	orr.w	r2, r2, #1
 800b97e:	601a      	str	r2, [r3, #0]
 800b980:	e000      	b.n	800b984 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b982:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	3714      	adds	r7, #20
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	40010000 	.word	0x40010000
 800b998:	40000400 	.word	0x40000400
 800b99c:	40000800 	.word	0x40000800
 800b9a0:	40000c00 	.word	0x40000c00
 800b9a4:	40010400 	.word	0x40010400
 800b9a8:	40001800 	.word	0x40001800
 800b9ac:	40014000 	.word	0x40014000
 800b9b0:	00010007 	.word	0x00010007

0800b9b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d101      	bne.n	800b9c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e049      	b.n	800ba5a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d106      	bne.n	800b9e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 f841 	bl	800ba62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2202      	movs	r2, #2
 800b9e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681a      	ldr	r2, [r3, #0]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	3304      	adds	r3, #4
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	4610      	mov	r0, r2
 800b9f4:	f000 fca2 	bl	800c33c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2201      	movs	r2, #1
 800ba04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2201      	movs	r2, #1
 800ba14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2201      	movs	r2, #1
 800ba24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2201      	movs	r2, #1
 800ba34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2201      	movs	r2, #1
 800ba44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2201      	movs	r2, #1
 800ba54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba58:	2300      	movs	r3, #0
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3708      	adds	r7, #8
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}

0800ba62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ba62:	b480      	push	{r7}
 800ba64:	b083      	sub	sp, #12
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ba6a:	bf00      	nop
 800ba6c:	370c      	adds	r7, #12
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr
	...

0800ba78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d109      	bne.n	800ba9c <HAL_TIM_PWM_Start+0x24>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	bf14      	ite	ne
 800ba94:	2301      	movne	r3, #1
 800ba96:	2300      	moveq	r3, #0
 800ba98:	b2db      	uxtb	r3, r3
 800ba9a:	e03c      	b.n	800bb16 <HAL_TIM_PWM_Start+0x9e>
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	2b04      	cmp	r3, #4
 800baa0:	d109      	bne.n	800bab6 <HAL_TIM_PWM_Start+0x3e>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800baa8:	b2db      	uxtb	r3, r3
 800baaa:	2b01      	cmp	r3, #1
 800baac:	bf14      	ite	ne
 800baae:	2301      	movne	r3, #1
 800bab0:	2300      	moveq	r3, #0
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	e02f      	b.n	800bb16 <HAL_TIM_PWM_Start+0x9e>
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	2b08      	cmp	r3, #8
 800baba:	d109      	bne.n	800bad0 <HAL_TIM_PWM_Start+0x58>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	bf14      	ite	ne
 800bac8:	2301      	movne	r3, #1
 800baca:	2300      	moveq	r3, #0
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	e022      	b.n	800bb16 <HAL_TIM_PWM_Start+0x9e>
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	2b0c      	cmp	r3, #12
 800bad4:	d109      	bne.n	800baea <HAL_TIM_PWM_Start+0x72>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800badc:	b2db      	uxtb	r3, r3
 800bade:	2b01      	cmp	r3, #1
 800bae0:	bf14      	ite	ne
 800bae2:	2301      	movne	r3, #1
 800bae4:	2300      	moveq	r3, #0
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	e015      	b.n	800bb16 <HAL_TIM_PWM_Start+0x9e>
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	2b10      	cmp	r3, #16
 800baee:	d109      	bne.n	800bb04 <HAL_TIM_PWM_Start+0x8c>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	bf14      	ite	ne
 800bafc:	2301      	movne	r3, #1
 800bafe:	2300      	moveq	r3, #0
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	e008      	b.n	800bb16 <HAL_TIM_PWM_Start+0x9e>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	bf14      	ite	ne
 800bb10:	2301      	movne	r3, #1
 800bb12:	2300      	moveq	r3, #0
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d001      	beq.n	800bb1e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	e0a1      	b.n	800bc62 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d104      	bne.n	800bb2e <HAL_TIM_PWM_Start+0xb6>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2202      	movs	r2, #2
 800bb28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb2c:	e023      	b.n	800bb76 <HAL_TIM_PWM_Start+0xfe>
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	2b04      	cmp	r3, #4
 800bb32:	d104      	bne.n	800bb3e <HAL_TIM_PWM_Start+0xc6>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2202      	movs	r2, #2
 800bb38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb3c:	e01b      	b.n	800bb76 <HAL_TIM_PWM_Start+0xfe>
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	2b08      	cmp	r3, #8
 800bb42:	d104      	bne.n	800bb4e <HAL_TIM_PWM_Start+0xd6>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2202      	movs	r2, #2
 800bb48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb4c:	e013      	b.n	800bb76 <HAL_TIM_PWM_Start+0xfe>
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	2b0c      	cmp	r3, #12
 800bb52:	d104      	bne.n	800bb5e <HAL_TIM_PWM_Start+0xe6>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2202      	movs	r2, #2
 800bb58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bb5c:	e00b      	b.n	800bb76 <HAL_TIM_PWM_Start+0xfe>
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	2b10      	cmp	r3, #16
 800bb62:	d104      	bne.n	800bb6e <HAL_TIM_PWM_Start+0xf6>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2202      	movs	r2, #2
 800bb68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb6c:	e003      	b.n	800bb76 <HAL_TIM_PWM_Start+0xfe>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2202      	movs	r2, #2
 800bb72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	6839      	ldr	r1, [r7, #0]
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f000 ffea 	bl	800cb58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4a38      	ldr	r2, [pc, #224]	; (800bc6c <HAL_TIM_PWM_Start+0x1f4>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d013      	beq.n	800bbb6 <HAL_TIM_PWM_Start+0x13e>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4a37      	ldr	r2, [pc, #220]	; (800bc70 <HAL_TIM_PWM_Start+0x1f8>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d00e      	beq.n	800bbb6 <HAL_TIM_PWM_Start+0x13e>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4a35      	ldr	r2, [pc, #212]	; (800bc74 <HAL_TIM_PWM_Start+0x1fc>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d009      	beq.n	800bbb6 <HAL_TIM_PWM_Start+0x13e>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	4a34      	ldr	r2, [pc, #208]	; (800bc78 <HAL_TIM_PWM_Start+0x200>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d004      	beq.n	800bbb6 <HAL_TIM_PWM_Start+0x13e>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a32      	ldr	r2, [pc, #200]	; (800bc7c <HAL_TIM_PWM_Start+0x204>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d101      	bne.n	800bbba <HAL_TIM_PWM_Start+0x142>
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e000      	b.n	800bbbc <HAL_TIM_PWM_Start+0x144>
 800bbba:	2300      	movs	r3, #0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d007      	beq.n	800bbd0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bbce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a25      	ldr	r2, [pc, #148]	; (800bc6c <HAL_TIM_PWM_Start+0x1f4>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d022      	beq.n	800bc20 <HAL_TIM_PWM_Start+0x1a8>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbe2:	d01d      	beq.n	800bc20 <HAL_TIM_PWM_Start+0x1a8>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4a25      	ldr	r2, [pc, #148]	; (800bc80 <HAL_TIM_PWM_Start+0x208>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d018      	beq.n	800bc20 <HAL_TIM_PWM_Start+0x1a8>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a24      	ldr	r2, [pc, #144]	; (800bc84 <HAL_TIM_PWM_Start+0x20c>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d013      	beq.n	800bc20 <HAL_TIM_PWM_Start+0x1a8>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4a22      	ldr	r2, [pc, #136]	; (800bc88 <HAL_TIM_PWM_Start+0x210>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d00e      	beq.n	800bc20 <HAL_TIM_PWM_Start+0x1a8>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a1a      	ldr	r2, [pc, #104]	; (800bc70 <HAL_TIM_PWM_Start+0x1f8>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d009      	beq.n	800bc20 <HAL_TIM_PWM_Start+0x1a8>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a1e      	ldr	r2, [pc, #120]	; (800bc8c <HAL_TIM_PWM_Start+0x214>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d004      	beq.n	800bc20 <HAL_TIM_PWM_Start+0x1a8>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a16      	ldr	r2, [pc, #88]	; (800bc74 <HAL_TIM_PWM_Start+0x1fc>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d115      	bne.n	800bc4c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	689a      	ldr	r2, [r3, #8]
 800bc26:	4b1a      	ldr	r3, [pc, #104]	; (800bc90 <HAL_TIM_PWM_Start+0x218>)
 800bc28:	4013      	ands	r3, r2
 800bc2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2b06      	cmp	r3, #6
 800bc30:	d015      	beq.n	800bc5e <HAL_TIM_PWM_Start+0x1e6>
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc38:	d011      	beq.n	800bc5e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f042 0201 	orr.w	r2, r2, #1
 800bc48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc4a:	e008      	b.n	800bc5e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f042 0201 	orr.w	r2, r2, #1
 800bc5a:	601a      	str	r2, [r3, #0]
 800bc5c:	e000      	b.n	800bc60 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	40010000 	.word	0x40010000
 800bc70:	40010400 	.word	0x40010400
 800bc74:	40014000 	.word	0x40014000
 800bc78:	40014400 	.word	0x40014400
 800bc7c:	40014800 	.word	0x40014800
 800bc80:	40000400 	.word	0x40000400
 800bc84:	40000800 	.word	0x40000800
 800bc88:	40000c00 	.word	0x40000c00
 800bc8c:	40001800 	.word	0x40001800
 800bc90:	00010007 	.word	0x00010007

0800bc94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	691b      	ldr	r3, [r3, #16]
 800bca2:	f003 0302 	and.w	r3, r3, #2
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d122      	bne.n	800bcf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	f003 0302 	and.w	r3, r3, #2
 800bcb4:	2b02      	cmp	r3, #2
 800bcb6:	d11b      	bne.n	800bcf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f06f 0202 	mvn.w	r2, #2
 800bcc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	699b      	ldr	r3, [r3, #24]
 800bcce:	f003 0303 	and.w	r3, r3, #3
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d003      	beq.n	800bcde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 fb12 	bl	800c300 <HAL_TIM_IC_CaptureCallback>
 800bcdc:	e005      	b.n	800bcea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 fb04 	bl	800c2ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 fb15 	bl	800c314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2200      	movs	r2, #0
 800bcee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	691b      	ldr	r3, [r3, #16]
 800bcf6:	f003 0304 	and.w	r3, r3, #4
 800bcfa:	2b04      	cmp	r3, #4
 800bcfc:	d122      	bne.n	800bd44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	f003 0304 	and.w	r3, r3, #4
 800bd08:	2b04      	cmp	r3, #4
 800bd0a:	d11b      	bne.n	800bd44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f06f 0204 	mvn.w	r2, #4
 800bd14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2202      	movs	r2, #2
 800bd1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	699b      	ldr	r3, [r3, #24]
 800bd22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d003      	beq.n	800bd32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 fae8 	bl	800c300 <HAL_TIM_IC_CaptureCallback>
 800bd30:	e005      	b.n	800bd3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f000 fada 	bl	800c2ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f000 faeb 	bl	800c314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2200      	movs	r2, #0
 800bd42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	691b      	ldr	r3, [r3, #16]
 800bd4a:	f003 0308 	and.w	r3, r3, #8
 800bd4e:	2b08      	cmp	r3, #8
 800bd50:	d122      	bne.n	800bd98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	f003 0308 	and.w	r3, r3, #8
 800bd5c:	2b08      	cmp	r3, #8
 800bd5e:	d11b      	bne.n	800bd98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f06f 0208 	mvn.w	r2, #8
 800bd68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2204      	movs	r2, #4
 800bd6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	69db      	ldr	r3, [r3, #28]
 800bd76:	f003 0303 	and.w	r3, r3, #3
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d003      	beq.n	800bd86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f000 fabe 	bl	800c300 <HAL_TIM_IC_CaptureCallback>
 800bd84:	e005      	b.n	800bd92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 fab0 	bl	800c2ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 fac1 	bl	800c314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2200      	movs	r2, #0
 800bd96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	691b      	ldr	r3, [r3, #16]
 800bd9e:	f003 0310 	and.w	r3, r3, #16
 800bda2:	2b10      	cmp	r3, #16
 800bda4:	d122      	bne.n	800bdec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	f003 0310 	and.w	r3, r3, #16
 800bdb0:	2b10      	cmp	r3, #16
 800bdb2:	d11b      	bne.n	800bdec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f06f 0210 	mvn.w	r2, #16
 800bdbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2208      	movs	r2, #8
 800bdc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	69db      	ldr	r3, [r3, #28]
 800bdca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d003      	beq.n	800bdda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 fa94 	bl	800c300 <HAL_TIM_IC_CaptureCallback>
 800bdd8:	e005      	b.n	800bde6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 fa86 	bl	800c2ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f000 fa97 	bl	800c314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2200      	movs	r2, #0
 800bdea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	691b      	ldr	r3, [r3, #16]
 800bdf2:	f003 0301 	and.w	r3, r3, #1
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d10e      	bne.n	800be18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	68db      	ldr	r3, [r3, #12]
 800be00:	f003 0301 	and.w	r3, r3, #1
 800be04:	2b01      	cmp	r3, #1
 800be06:	d107      	bne.n	800be18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f06f 0201 	mvn.w	r2, #1
 800be10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f7f6 ffac 	bl	8002d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	691b      	ldr	r3, [r3, #16]
 800be1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be22:	2b80      	cmp	r3, #128	; 0x80
 800be24:	d10e      	bne.n	800be44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be30:	2b80      	cmp	r3, #128	; 0x80
 800be32:	d107      	bne.n	800be44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800be3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 ffc6 	bl	800cdd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	691b      	ldr	r3, [r3, #16]
 800be4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be52:	d10e      	bne.n	800be72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	68db      	ldr	r3, [r3, #12]
 800be5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be5e:	2b80      	cmp	r3, #128	; 0x80
 800be60:	d107      	bne.n	800be72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800be6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 ffb9 	bl	800cde4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	691b      	ldr	r3, [r3, #16]
 800be78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be7c:	2b40      	cmp	r3, #64	; 0x40
 800be7e:	d10e      	bne.n	800be9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be8a:	2b40      	cmp	r3, #64	; 0x40
 800be8c:	d107      	bne.n	800be9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800be96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 fa45 	bl	800c328 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	691b      	ldr	r3, [r3, #16]
 800bea4:	f003 0320 	and.w	r3, r3, #32
 800bea8:	2b20      	cmp	r3, #32
 800beaa:	d10e      	bne.n	800beca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	68db      	ldr	r3, [r3, #12]
 800beb2:	f003 0320 	and.w	r3, r3, #32
 800beb6:	2b20      	cmp	r3, #32
 800beb8:	d107      	bne.n	800beca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f06f 0220 	mvn.w	r2, #32
 800bec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 ff79 	bl	800cdbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800beca:	bf00      	nop
 800becc:	3708      	adds	r7, #8
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
	...

0800bed4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b086      	sub	sp, #24
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bee0:	2300      	movs	r3, #0
 800bee2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800beea:	2b01      	cmp	r3, #1
 800beec:	d101      	bne.n	800bef2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800beee:	2302      	movs	r3, #2
 800bef0:	e0ff      	b.n	800c0f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2201      	movs	r2, #1
 800bef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2b14      	cmp	r3, #20
 800befe:	f200 80f0 	bhi.w	800c0e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bf02:	a201      	add	r2, pc, #4	; (adr r2, 800bf08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bf04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf08:	0800bf5d 	.word	0x0800bf5d
 800bf0c:	0800c0e3 	.word	0x0800c0e3
 800bf10:	0800c0e3 	.word	0x0800c0e3
 800bf14:	0800c0e3 	.word	0x0800c0e3
 800bf18:	0800bf9d 	.word	0x0800bf9d
 800bf1c:	0800c0e3 	.word	0x0800c0e3
 800bf20:	0800c0e3 	.word	0x0800c0e3
 800bf24:	0800c0e3 	.word	0x0800c0e3
 800bf28:	0800bfdf 	.word	0x0800bfdf
 800bf2c:	0800c0e3 	.word	0x0800c0e3
 800bf30:	0800c0e3 	.word	0x0800c0e3
 800bf34:	0800c0e3 	.word	0x0800c0e3
 800bf38:	0800c01f 	.word	0x0800c01f
 800bf3c:	0800c0e3 	.word	0x0800c0e3
 800bf40:	0800c0e3 	.word	0x0800c0e3
 800bf44:	0800c0e3 	.word	0x0800c0e3
 800bf48:	0800c061 	.word	0x0800c061
 800bf4c:	0800c0e3 	.word	0x0800c0e3
 800bf50:	0800c0e3 	.word	0x0800c0e3
 800bf54:	0800c0e3 	.word	0x0800c0e3
 800bf58:	0800c0a1 	.word	0x0800c0a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	68b9      	ldr	r1, [r7, #8]
 800bf62:	4618      	mov	r0, r3
 800bf64:	f000 fa84 	bl	800c470 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	699a      	ldr	r2, [r3, #24]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f042 0208 	orr.w	r2, r2, #8
 800bf76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	699a      	ldr	r2, [r3, #24]
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f022 0204 	bic.w	r2, r2, #4
 800bf86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	6999      	ldr	r1, [r3, #24]
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	691a      	ldr	r2, [r3, #16]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	430a      	orrs	r2, r1
 800bf98:	619a      	str	r2, [r3, #24]
      break;
 800bf9a:	e0a5      	b.n	800c0e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	68b9      	ldr	r1, [r7, #8]
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f000 faf4 	bl	800c590 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	699a      	ldr	r2, [r3, #24]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bfb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	699a      	ldr	r2, [r3, #24]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bfc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	6999      	ldr	r1, [r3, #24]
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	021a      	lsls	r2, r3, #8
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	430a      	orrs	r2, r1
 800bfda:	619a      	str	r2, [r3, #24]
      break;
 800bfdc:	e084      	b.n	800c0e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	68b9      	ldr	r1, [r7, #8]
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f000 fb5d 	bl	800c6a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	69da      	ldr	r2, [r3, #28]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f042 0208 	orr.w	r2, r2, #8
 800bff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	69da      	ldr	r2, [r3, #28]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f022 0204 	bic.w	r2, r2, #4
 800c008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	69d9      	ldr	r1, [r3, #28]
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	691a      	ldr	r2, [r3, #16]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	430a      	orrs	r2, r1
 800c01a:	61da      	str	r2, [r3, #28]
      break;
 800c01c:	e064      	b.n	800c0e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	68b9      	ldr	r1, [r7, #8]
 800c024:	4618      	mov	r0, r3
 800c026:	f000 fbc5 	bl	800c7b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	69da      	ldr	r2, [r3, #28]
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	69da      	ldr	r2, [r3, #28]
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	69d9      	ldr	r1, [r3, #28]
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	691b      	ldr	r3, [r3, #16]
 800c054:	021a      	lsls	r2, r3, #8
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	430a      	orrs	r2, r1
 800c05c:	61da      	str	r2, [r3, #28]
      break;
 800c05e:	e043      	b.n	800c0e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	68b9      	ldr	r1, [r7, #8]
 800c066:	4618      	mov	r0, r3
 800c068:	f000 fc0e 	bl	800c888 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f042 0208 	orr.w	r2, r2, #8
 800c07a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f022 0204 	bic.w	r2, r2, #4
 800c08a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	691a      	ldr	r2, [r3, #16]
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	430a      	orrs	r2, r1
 800c09c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c09e:	e023      	b.n	800c0e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	68b9      	ldr	r1, [r7, #8]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f000 fc52 	bl	800c950 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c0ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c0ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	691b      	ldr	r3, [r3, #16]
 800c0d6:	021a      	lsls	r2, r3, #8
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	430a      	orrs	r2, r1
 800c0de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c0e0:	e002      	b.n	800c0e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	75fb      	strb	r3, [r7, #23]
      break;
 800c0e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c0f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3718      	adds	r7, #24
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop

0800c0fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c106:	2300      	movs	r3, #0
 800c108:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c110:	2b01      	cmp	r3, #1
 800c112:	d101      	bne.n	800c118 <HAL_TIM_ConfigClockSource+0x1c>
 800c114:	2302      	movs	r3, #2
 800c116:	e0dc      	b.n	800c2d2 <HAL_TIM_ConfigClockSource+0x1d6>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2201      	movs	r2, #1
 800c11c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2202      	movs	r2, #2
 800c124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	689b      	ldr	r3, [r3, #8]
 800c12e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c130:	68ba      	ldr	r2, [r7, #8]
 800c132:	4b6a      	ldr	r3, [pc, #424]	; (800c2dc <HAL_TIM_ConfigClockSource+0x1e0>)
 800c134:	4013      	ands	r3, r2
 800c136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c13e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	68ba      	ldr	r2, [r7, #8]
 800c146:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4a64      	ldr	r2, [pc, #400]	; (800c2e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	f000 80a9 	beq.w	800c2a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c154:	4a62      	ldr	r2, [pc, #392]	; (800c2e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c156:	4293      	cmp	r3, r2
 800c158:	f200 80ae 	bhi.w	800c2b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c15c:	4a61      	ldr	r2, [pc, #388]	; (800c2e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	f000 80a1 	beq.w	800c2a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c164:	4a5f      	ldr	r2, [pc, #380]	; (800c2e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c166:	4293      	cmp	r3, r2
 800c168:	f200 80a6 	bhi.w	800c2b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c16c:	4a5e      	ldr	r2, [pc, #376]	; (800c2e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	f000 8099 	beq.w	800c2a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c174:	4a5c      	ldr	r2, [pc, #368]	; (800c2e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c176:	4293      	cmp	r3, r2
 800c178:	f200 809e 	bhi.w	800c2b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c17c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c180:	f000 8091 	beq.w	800c2a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c184:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c188:	f200 8096 	bhi.w	800c2b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c18c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c190:	f000 8089 	beq.w	800c2a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c198:	f200 808e 	bhi.w	800c2b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c19c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1a0:	d03e      	beq.n	800c220 <HAL_TIM_ConfigClockSource+0x124>
 800c1a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1a6:	f200 8087 	bhi.w	800c2b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1ae:	f000 8086 	beq.w	800c2be <HAL_TIM_ConfigClockSource+0x1c2>
 800c1b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1b6:	d87f      	bhi.n	800c2b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1b8:	2b70      	cmp	r3, #112	; 0x70
 800c1ba:	d01a      	beq.n	800c1f2 <HAL_TIM_ConfigClockSource+0xf6>
 800c1bc:	2b70      	cmp	r3, #112	; 0x70
 800c1be:	d87b      	bhi.n	800c2b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1c0:	2b60      	cmp	r3, #96	; 0x60
 800c1c2:	d050      	beq.n	800c266 <HAL_TIM_ConfigClockSource+0x16a>
 800c1c4:	2b60      	cmp	r3, #96	; 0x60
 800c1c6:	d877      	bhi.n	800c2b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1c8:	2b50      	cmp	r3, #80	; 0x50
 800c1ca:	d03c      	beq.n	800c246 <HAL_TIM_ConfigClockSource+0x14a>
 800c1cc:	2b50      	cmp	r3, #80	; 0x50
 800c1ce:	d873      	bhi.n	800c2b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1d0:	2b40      	cmp	r3, #64	; 0x40
 800c1d2:	d058      	beq.n	800c286 <HAL_TIM_ConfigClockSource+0x18a>
 800c1d4:	2b40      	cmp	r3, #64	; 0x40
 800c1d6:	d86f      	bhi.n	800c2b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1d8:	2b30      	cmp	r3, #48	; 0x30
 800c1da:	d064      	beq.n	800c2a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c1dc:	2b30      	cmp	r3, #48	; 0x30
 800c1de:	d86b      	bhi.n	800c2b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1e0:	2b20      	cmp	r3, #32
 800c1e2:	d060      	beq.n	800c2a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c1e4:	2b20      	cmp	r3, #32
 800c1e6:	d867      	bhi.n	800c2b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d05c      	beq.n	800c2a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c1ec:	2b10      	cmp	r3, #16
 800c1ee:	d05a      	beq.n	800c2a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c1f0:	e062      	b.n	800c2b8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6818      	ldr	r0, [r3, #0]
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	6899      	ldr	r1, [r3, #8]
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	685a      	ldr	r2, [r3, #4]
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	68db      	ldr	r3, [r3, #12]
 800c202:	f000 fc89 	bl	800cb18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	689b      	ldr	r3, [r3, #8]
 800c20c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c214:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	68ba      	ldr	r2, [r7, #8]
 800c21c:	609a      	str	r2, [r3, #8]
      break;
 800c21e:	e04f      	b.n	800c2c0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6818      	ldr	r0, [r3, #0]
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	6899      	ldr	r1, [r3, #8]
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	685a      	ldr	r2, [r3, #4]
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	f000 fc72 	bl	800cb18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	689a      	ldr	r2, [r3, #8]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c242:	609a      	str	r2, [r3, #8]
      break;
 800c244:	e03c      	b.n	800c2c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6818      	ldr	r0, [r3, #0]
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	6859      	ldr	r1, [r3, #4]
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	461a      	mov	r2, r3
 800c254:	f000 fbe2 	bl	800ca1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	2150      	movs	r1, #80	; 0x50
 800c25e:	4618      	mov	r0, r3
 800c260:	f000 fc3c 	bl	800cadc <TIM_ITRx_SetConfig>
      break;
 800c264:	e02c      	b.n	800c2c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6818      	ldr	r0, [r3, #0]
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	6859      	ldr	r1, [r3, #4]
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	461a      	mov	r2, r3
 800c274:	f000 fc01 	bl	800ca7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	2160      	movs	r1, #96	; 0x60
 800c27e:	4618      	mov	r0, r3
 800c280:	f000 fc2c 	bl	800cadc <TIM_ITRx_SetConfig>
      break;
 800c284:	e01c      	b.n	800c2c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6818      	ldr	r0, [r3, #0]
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	6859      	ldr	r1, [r3, #4]
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	68db      	ldr	r3, [r3, #12]
 800c292:	461a      	mov	r2, r3
 800c294:	f000 fbc2 	bl	800ca1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	2140      	movs	r1, #64	; 0x40
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f000 fc1c 	bl	800cadc <TIM_ITRx_SetConfig>
      break;
 800c2a4:	e00c      	b.n	800c2c0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	4610      	mov	r0, r2
 800c2b2:	f000 fc13 	bl	800cadc <TIM_ITRx_SetConfig>
      break;
 800c2b6:	e003      	b.n	800c2c0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	73fb      	strb	r3, [r7, #15]
      break;
 800c2bc:	e000      	b.n	800c2c0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c2be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3710      	adds	r7, #16
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	ffceff88 	.word	0xffceff88
 800c2e0:	00100040 	.word	0x00100040
 800c2e4:	00100030 	.word	0x00100030
 800c2e8:	00100020 	.word	0x00100020

0800c2ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c2f4:	bf00      	nop
 800c2f6:	370c      	adds	r7, #12
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c300:	b480      	push	{r7}
 800c302:	b083      	sub	sp, #12
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c308:	bf00      	nop
 800c30a:	370c      	adds	r7, #12
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c31c:	bf00      	nop
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c330:	bf00      	nop
 800c332:	370c      	adds	r7, #12
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr

0800c33c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b085      	sub	sp, #20
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	4a40      	ldr	r2, [pc, #256]	; (800c450 <TIM_Base_SetConfig+0x114>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d013      	beq.n	800c37c <TIM_Base_SetConfig+0x40>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c35a:	d00f      	beq.n	800c37c <TIM_Base_SetConfig+0x40>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	4a3d      	ldr	r2, [pc, #244]	; (800c454 <TIM_Base_SetConfig+0x118>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d00b      	beq.n	800c37c <TIM_Base_SetConfig+0x40>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	4a3c      	ldr	r2, [pc, #240]	; (800c458 <TIM_Base_SetConfig+0x11c>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d007      	beq.n	800c37c <TIM_Base_SetConfig+0x40>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	4a3b      	ldr	r2, [pc, #236]	; (800c45c <TIM_Base_SetConfig+0x120>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d003      	beq.n	800c37c <TIM_Base_SetConfig+0x40>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	4a3a      	ldr	r2, [pc, #232]	; (800c460 <TIM_Base_SetConfig+0x124>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d108      	bne.n	800c38e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	68fa      	ldr	r2, [r7, #12]
 800c38a:	4313      	orrs	r3, r2
 800c38c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	4a2f      	ldr	r2, [pc, #188]	; (800c450 <TIM_Base_SetConfig+0x114>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d01f      	beq.n	800c3d6 <TIM_Base_SetConfig+0x9a>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c39c:	d01b      	beq.n	800c3d6 <TIM_Base_SetConfig+0x9a>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	4a2c      	ldr	r2, [pc, #176]	; (800c454 <TIM_Base_SetConfig+0x118>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d017      	beq.n	800c3d6 <TIM_Base_SetConfig+0x9a>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4a2b      	ldr	r2, [pc, #172]	; (800c458 <TIM_Base_SetConfig+0x11c>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d013      	beq.n	800c3d6 <TIM_Base_SetConfig+0x9a>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	4a2a      	ldr	r2, [pc, #168]	; (800c45c <TIM_Base_SetConfig+0x120>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d00f      	beq.n	800c3d6 <TIM_Base_SetConfig+0x9a>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	4a29      	ldr	r2, [pc, #164]	; (800c460 <TIM_Base_SetConfig+0x124>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d00b      	beq.n	800c3d6 <TIM_Base_SetConfig+0x9a>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	4a28      	ldr	r2, [pc, #160]	; (800c464 <TIM_Base_SetConfig+0x128>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d007      	beq.n	800c3d6 <TIM_Base_SetConfig+0x9a>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4a27      	ldr	r2, [pc, #156]	; (800c468 <TIM_Base_SetConfig+0x12c>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d003      	beq.n	800c3d6 <TIM_Base_SetConfig+0x9a>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	4a26      	ldr	r2, [pc, #152]	; (800c46c <TIM_Base_SetConfig+0x130>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d108      	bne.n	800c3e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	68db      	ldr	r3, [r3, #12]
 800c3e2:	68fa      	ldr	r2, [r7, #12]
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	695b      	ldr	r3, [r3, #20]
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	68fa      	ldr	r2, [r7, #12]
 800c3fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	689a      	ldr	r2, [r3, #8]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	4a10      	ldr	r2, [pc, #64]	; (800c450 <TIM_Base_SetConfig+0x114>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d00f      	beq.n	800c434 <TIM_Base_SetConfig+0xf8>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	4a12      	ldr	r2, [pc, #72]	; (800c460 <TIM_Base_SetConfig+0x124>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d00b      	beq.n	800c434 <TIM_Base_SetConfig+0xf8>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	4a11      	ldr	r2, [pc, #68]	; (800c464 <TIM_Base_SetConfig+0x128>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d007      	beq.n	800c434 <TIM_Base_SetConfig+0xf8>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	4a10      	ldr	r2, [pc, #64]	; (800c468 <TIM_Base_SetConfig+0x12c>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d003      	beq.n	800c434 <TIM_Base_SetConfig+0xf8>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	4a0f      	ldr	r2, [pc, #60]	; (800c46c <TIM_Base_SetConfig+0x130>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d103      	bne.n	800c43c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	691a      	ldr	r2, [r3, #16]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2201      	movs	r2, #1
 800c440:	615a      	str	r2, [r3, #20]
}
 800c442:	bf00      	nop
 800c444:	3714      	adds	r7, #20
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr
 800c44e:	bf00      	nop
 800c450:	40010000 	.word	0x40010000
 800c454:	40000400 	.word	0x40000400
 800c458:	40000800 	.word	0x40000800
 800c45c:	40000c00 	.word	0x40000c00
 800c460:	40010400 	.word	0x40010400
 800c464:	40014000 	.word	0x40014000
 800c468:	40014400 	.word	0x40014400
 800c46c:	40014800 	.word	0x40014800

0800c470 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c470:	b480      	push	{r7}
 800c472:	b087      	sub	sp, #28
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6a1b      	ldr	r3, [r3, #32]
 800c47e:	f023 0201 	bic.w	r2, r3, #1
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6a1b      	ldr	r3, [r3, #32]
 800c48a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	699b      	ldr	r3, [r3, #24]
 800c496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c498:	68fa      	ldr	r2, [r7, #12]
 800c49a:	4b37      	ldr	r3, [pc, #220]	; (800c578 <TIM_OC1_SetConfig+0x108>)
 800c49c:	4013      	ands	r3, r2
 800c49e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f023 0303 	bic.w	r3, r3, #3
 800c4a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	68fa      	ldr	r2, [r7, #12]
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	f023 0302 	bic.w	r3, r3, #2
 800c4b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	689b      	ldr	r3, [r3, #8]
 800c4be:	697a      	ldr	r2, [r7, #20]
 800c4c0:	4313      	orrs	r3, r2
 800c4c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	4a2d      	ldr	r2, [pc, #180]	; (800c57c <TIM_OC1_SetConfig+0x10c>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d00f      	beq.n	800c4ec <TIM_OC1_SetConfig+0x7c>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	4a2c      	ldr	r2, [pc, #176]	; (800c580 <TIM_OC1_SetConfig+0x110>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d00b      	beq.n	800c4ec <TIM_OC1_SetConfig+0x7c>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	4a2b      	ldr	r2, [pc, #172]	; (800c584 <TIM_OC1_SetConfig+0x114>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d007      	beq.n	800c4ec <TIM_OC1_SetConfig+0x7c>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	4a2a      	ldr	r2, [pc, #168]	; (800c588 <TIM_OC1_SetConfig+0x118>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d003      	beq.n	800c4ec <TIM_OC1_SetConfig+0x7c>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	4a29      	ldr	r2, [pc, #164]	; (800c58c <TIM_OC1_SetConfig+0x11c>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d10c      	bne.n	800c506 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	f023 0308 	bic.w	r3, r3, #8
 800c4f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	68db      	ldr	r3, [r3, #12]
 800c4f8:	697a      	ldr	r2, [r7, #20]
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	f023 0304 	bic.w	r3, r3, #4
 800c504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	4a1c      	ldr	r2, [pc, #112]	; (800c57c <TIM_OC1_SetConfig+0x10c>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d00f      	beq.n	800c52e <TIM_OC1_SetConfig+0xbe>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	4a1b      	ldr	r2, [pc, #108]	; (800c580 <TIM_OC1_SetConfig+0x110>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d00b      	beq.n	800c52e <TIM_OC1_SetConfig+0xbe>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	4a1a      	ldr	r2, [pc, #104]	; (800c584 <TIM_OC1_SetConfig+0x114>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d007      	beq.n	800c52e <TIM_OC1_SetConfig+0xbe>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	4a19      	ldr	r2, [pc, #100]	; (800c588 <TIM_OC1_SetConfig+0x118>)
 800c522:	4293      	cmp	r3, r2
 800c524:	d003      	beq.n	800c52e <TIM_OC1_SetConfig+0xbe>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	4a18      	ldr	r2, [pc, #96]	; (800c58c <TIM_OC1_SetConfig+0x11c>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d111      	bne.n	800c552 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c53c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	695b      	ldr	r3, [r3, #20]
 800c542:	693a      	ldr	r2, [r7, #16]
 800c544:	4313      	orrs	r3, r2
 800c546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	699b      	ldr	r3, [r3, #24]
 800c54c:	693a      	ldr	r2, [r7, #16]
 800c54e:	4313      	orrs	r3, r2
 800c550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	693a      	ldr	r2, [r7, #16]
 800c556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	685a      	ldr	r2, [r3, #4]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	697a      	ldr	r2, [r7, #20]
 800c56a:	621a      	str	r2, [r3, #32]
}
 800c56c:	bf00      	nop
 800c56e:	371c      	adds	r7, #28
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr
 800c578:	fffeff8f 	.word	0xfffeff8f
 800c57c:	40010000 	.word	0x40010000
 800c580:	40010400 	.word	0x40010400
 800c584:	40014000 	.word	0x40014000
 800c588:	40014400 	.word	0x40014400
 800c58c:	40014800 	.word	0x40014800

0800c590 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c590:	b480      	push	{r7}
 800c592:	b087      	sub	sp, #28
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6a1b      	ldr	r3, [r3, #32]
 800c59e:	f023 0210 	bic.w	r2, r3, #16
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6a1b      	ldr	r3, [r3, #32]
 800c5aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	699b      	ldr	r3, [r3, #24]
 800c5b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	4b34      	ldr	r3, [pc, #208]	; (800c68c <TIM_OC2_SetConfig+0xfc>)
 800c5bc:	4013      	ands	r3, r2
 800c5be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	021b      	lsls	r3, r3, #8
 800c5ce:	68fa      	ldr	r2, [r7, #12]
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	f023 0320 	bic.w	r3, r3, #32
 800c5da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	689b      	ldr	r3, [r3, #8]
 800c5e0:	011b      	lsls	r3, r3, #4
 800c5e2:	697a      	ldr	r2, [r7, #20]
 800c5e4:	4313      	orrs	r3, r2
 800c5e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	4a29      	ldr	r2, [pc, #164]	; (800c690 <TIM_OC2_SetConfig+0x100>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d003      	beq.n	800c5f8 <TIM_OC2_SetConfig+0x68>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	4a28      	ldr	r2, [pc, #160]	; (800c694 <TIM_OC2_SetConfig+0x104>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d10d      	bne.n	800c614 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	68db      	ldr	r3, [r3, #12]
 800c604:	011b      	lsls	r3, r3, #4
 800c606:	697a      	ldr	r2, [r7, #20]
 800c608:	4313      	orrs	r3, r2
 800c60a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c612:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	4a1e      	ldr	r2, [pc, #120]	; (800c690 <TIM_OC2_SetConfig+0x100>)
 800c618:	4293      	cmp	r3, r2
 800c61a:	d00f      	beq.n	800c63c <TIM_OC2_SetConfig+0xac>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	4a1d      	ldr	r2, [pc, #116]	; (800c694 <TIM_OC2_SetConfig+0x104>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d00b      	beq.n	800c63c <TIM_OC2_SetConfig+0xac>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	4a1c      	ldr	r2, [pc, #112]	; (800c698 <TIM_OC2_SetConfig+0x108>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d007      	beq.n	800c63c <TIM_OC2_SetConfig+0xac>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4a1b      	ldr	r2, [pc, #108]	; (800c69c <TIM_OC2_SetConfig+0x10c>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d003      	beq.n	800c63c <TIM_OC2_SetConfig+0xac>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	4a1a      	ldr	r2, [pc, #104]	; (800c6a0 <TIM_OC2_SetConfig+0x110>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d113      	bne.n	800c664 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c642:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c64a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	695b      	ldr	r3, [r3, #20]
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	693a      	ldr	r2, [r7, #16]
 800c654:	4313      	orrs	r3, r2
 800c656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	699b      	ldr	r3, [r3, #24]
 800c65c:	009b      	lsls	r3, r3, #2
 800c65e:	693a      	ldr	r2, [r7, #16]
 800c660:	4313      	orrs	r3, r2
 800c662:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	693a      	ldr	r2, [r7, #16]
 800c668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	68fa      	ldr	r2, [r7, #12]
 800c66e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	685a      	ldr	r2, [r3, #4]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	697a      	ldr	r2, [r7, #20]
 800c67c:	621a      	str	r2, [r3, #32]
}
 800c67e:	bf00      	nop
 800c680:	371c      	adds	r7, #28
 800c682:	46bd      	mov	sp, r7
 800c684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c688:	4770      	bx	lr
 800c68a:	bf00      	nop
 800c68c:	feff8fff 	.word	0xfeff8fff
 800c690:	40010000 	.word	0x40010000
 800c694:	40010400 	.word	0x40010400
 800c698:	40014000 	.word	0x40014000
 800c69c:	40014400 	.word	0x40014400
 800c6a0:	40014800 	.word	0x40014800

0800c6a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b087      	sub	sp, #28
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6a1b      	ldr	r3, [r3, #32]
 800c6b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6a1b      	ldr	r3, [r3, #32]
 800c6be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	69db      	ldr	r3, [r3, #28]
 800c6ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	4b33      	ldr	r3, [pc, #204]	; (800c79c <TIM_OC3_SetConfig+0xf8>)
 800c6d0:	4013      	ands	r3, r2
 800c6d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f023 0303 	bic.w	r3, r3, #3
 800c6da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	68fa      	ldr	r2, [r7, #12]
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c6ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	689b      	ldr	r3, [r3, #8]
 800c6f2:	021b      	lsls	r3, r3, #8
 800c6f4:	697a      	ldr	r2, [r7, #20]
 800c6f6:	4313      	orrs	r3, r2
 800c6f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	4a28      	ldr	r2, [pc, #160]	; (800c7a0 <TIM_OC3_SetConfig+0xfc>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d003      	beq.n	800c70a <TIM_OC3_SetConfig+0x66>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	4a27      	ldr	r2, [pc, #156]	; (800c7a4 <TIM_OC3_SetConfig+0x100>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d10d      	bne.n	800c726 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c710:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	021b      	lsls	r3, r3, #8
 800c718:	697a      	ldr	r2, [r7, #20]
 800c71a:	4313      	orrs	r3, r2
 800c71c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	4a1d      	ldr	r2, [pc, #116]	; (800c7a0 <TIM_OC3_SetConfig+0xfc>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d00f      	beq.n	800c74e <TIM_OC3_SetConfig+0xaa>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	4a1c      	ldr	r2, [pc, #112]	; (800c7a4 <TIM_OC3_SetConfig+0x100>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d00b      	beq.n	800c74e <TIM_OC3_SetConfig+0xaa>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	4a1b      	ldr	r2, [pc, #108]	; (800c7a8 <TIM_OC3_SetConfig+0x104>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d007      	beq.n	800c74e <TIM_OC3_SetConfig+0xaa>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	4a1a      	ldr	r2, [pc, #104]	; (800c7ac <TIM_OC3_SetConfig+0x108>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d003      	beq.n	800c74e <TIM_OC3_SetConfig+0xaa>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	4a19      	ldr	r2, [pc, #100]	; (800c7b0 <TIM_OC3_SetConfig+0x10c>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d113      	bne.n	800c776 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c75c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	695b      	ldr	r3, [r3, #20]
 800c762:	011b      	lsls	r3, r3, #4
 800c764:	693a      	ldr	r2, [r7, #16]
 800c766:	4313      	orrs	r3, r2
 800c768:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	699b      	ldr	r3, [r3, #24]
 800c76e:	011b      	lsls	r3, r3, #4
 800c770:	693a      	ldr	r2, [r7, #16]
 800c772:	4313      	orrs	r3, r2
 800c774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	693a      	ldr	r2, [r7, #16]
 800c77a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	68fa      	ldr	r2, [r7, #12]
 800c780:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	685a      	ldr	r2, [r3, #4]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	697a      	ldr	r2, [r7, #20]
 800c78e:	621a      	str	r2, [r3, #32]
}
 800c790:	bf00      	nop
 800c792:	371c      	adds	r7, #28
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr
 800c79c:	fffeff8f 	.word	0xfffeff8f
 800c7a0:	40010000 	.word	0x40010000
 800c7a4:	40010400 	.word	0x40010400
 800c7a8:	40014000 	.word	0x40014000
 800c7ac:	40014400 	.word	0x40014400
 800c7b0:	40014800 	.word	0x40014800

0800c7b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b087      	sub	sp, #28
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6a1b      	ldr	r3, [r3, #32]
 800c7c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6a1b      	ldr	r3, [r3, #32]
 800c7ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	69db      	ldr	r3, [r3, #28]
 800c7da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c7dc:	68fa      	ldr	r2, [r7, #12]
 800c7de:	4b24      	ldr	r3, [pc, #144]	; (800c870 <TIM_OC4_SetConfig+0xbc>)
 800c7e0:	4013      	ands	r3, r2
 800c7e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	021b      	lsls	r3, r3, #8
 800c7f2:	68fa      	ldr	r2, [r7, #12]
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c7fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	689b      	ldr	r3, [r3, #8]
 800c804:	031b      	lsls	r3, r3, #12
 800c806:	693a      	ldr	r2, [r7, #16]
 800c808:	4313      	orrs	r3, r2
 800c80a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	4a19      	ldr	r2, [pc, #100]	; (800c874 <TIM_OC4_SetConfig+0xc0>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d00f      	beq.n	800c834 <TIM_OC4_SetConfig+0x80>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	4a18      	ldr	r2, [pc, #96]	; (800c878 <TIM_OC4_SetConfig+0xc4>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d00b      	beq.n	800c834 <TIM_OC4_SetConfig+0x80>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	4a17      	ldr	r2, [pc, #92]	; (800c87c <TIM_OC4_SetConfig+0xc8>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d007      	beq.n	800c834 <TIM_OC4_SetConfig+0x80>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	4a16      	ldr	r2, [pc, #88]	; (800c880 <TIM_OC4_SetConfig+0xcc>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d003      	beq.n	800c834 <TIM_OC4_SetConfig+0x80>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	4a15      	ldr	r2, [pc, #84]	; (800c884 <TIM_OC4_SetConfig+0xd0>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d109      	bne.n	800c848 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c83a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	695b      	ldr	r3, [r3, #20]
 800c840:	019b      	lsls	r3, r3, #6
 800c842:	697a      	ldr	r2, [r7, #20]
 800c844:	4313      	orrs	r3, r2
 800c846:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	697a      	ldr	r2, [r7, #20]
 800c84c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	68fa      	ldr	r2, [r7, #12]
 800c852:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	685a      	ldr	r2, [r3, #4]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	693a      	ldr	r2, [r7, #16]
 800c860:	621a      	str	r2, [r3, #32]
}
 800c862:	bf00      	nop
 800c864:	371c      	adds	r7, #28
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr
 800c86e:	bf00      	nop
 800c870:	feff8fff 	.word	0xfeff8fff
 800c874:	40010000 	.word	0x40010000
 800c878:	40010400 	.word	0x40010400
 800c87c:	40014000 	.word	0x40014000
 800c880:	40014400 	.word	0x40014400
 800c884:	40014800 	.word	0x40014800

0800c888 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c888:	b480      	push	{r7}
 800c88a:	b087      	sub	sp, #28
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6a1b      	ldr	r3, [r3, #32]
 800c896:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6a1b      	ldr	r3, [r3, #32]
 800c8a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c8b0:	68fa      	ldr	r2, [r7, #12]
 800c8b2:	4b21      	ldr	r3, [pc, #132]	; (800c938 <TIM_OC5_SetConfig+0xb0>)
 800c8b4:	4013      	ands	r3, r2
 800c8b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c8c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	689b      	ldr	r3, [r3, #8]
 800c8ce:	041b      	lsls	r3, r3, #16
 800c8d0:	693a      	ldr	r2, [r7, #16]
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	4a18      	ldr	r2, [pc, #96]	; (800c93c <TIM_OC5_SetConfig+0xb4>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d00f      	beq.n	800c8fe <TIM_OC5_SetConfig+0x76>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	4a17      	ldr	r2, [pc, #92]	; (800c940 <TIM_OC5_SetConfig+0xb8>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d00b      	beq.n	800c8fe <TIM_OC5_SetConfig+0x76>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	4a16      	ldr	r2, [pc, #88]	; (800c944 <TIM_OC5_SetConfig+0xbc>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d007      	beq.n	800c8fe <TIM_OC5_SetConfig+0x76>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4a15      	ldr	r2, [pc, #84]	; (800c948 <TIM_OC5_SetConfig+0xc0>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d003      	beq.n	800c8fe <TIM_OC5_SetConfig+0x76>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	4a14      	ldr	r2, [pc, #80]	; (800c94c <TIM_OC5_SetConfig+0xc4>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d109      	bne.n	800c912 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c904:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	695b      	ldr	r3, [r3, #20]
 800c90a:	021b      	lsls	r3, r3, #8
 800c90c:	697a      	ldr	r2, [r7, #20]
 800c90e:	4313      	orrs	r3, r2
 800c910:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	697a      	ldr	r2, [r7, #20]
 800c916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	68fa      	ldr	r2, [r7, #12]
 800c91c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	685a      	ldr	r2, [r3, #4]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	693a      	ldr	r2, [r7, #16]
 800c92a:	621a      	str	r2, [r3, #32]
}
 800c92c:	bf00      	nop
 800c92e:	371c      	adds	r7, #28
 800c930:	46bd      	mov	sp, r7
 800c932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c936:	4770      	bx	lr
 800c938:	fffeff8f 	.word	0xfffeff8f
 800c93c:	40010000 	.word	0x40010000
 800c940:	40010400 	.word	0x40010400
 800c944:	40014000 	.word	0x40014000
 800c948:	40014400 	.word	0x40014400
 800c94c:	40014800 	.word	0x40014800

0800c950 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c950:	b480      	push	{r7}
 800c952:	b087      	sub	sp, #28
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6a1b      	ldr	r3, [r3, #32]
 800c95e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6a1b      	ldr	r3, [r3, #32]
 800c96a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c978:	68fa      	ldr	r2, [r7, #12]
 800c97a:	4b22      	ldr	r3, [pc, #136]	; (800ca04 <TIM_OC6_SetConfig+0xb4>)
 800c97c:	4013      	ands	r3, r2
 800c97e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	021b      	lsls	r3, r3, #8
 800c986:	68fa      	ldr	r2, [r7, #12]
 800c988:	4313      	orrs	r3, r2
 800c98a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c992:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	689b      	ldr	r3, [r3, #8]
 800c998:	051b      	lsls	r3, r3, #20
 800c99a:	693a      	ldr	r2, [r7, #16]
 800c99c:	4313      	orrs	r3, r2
 800c99e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	4a19      	ldr	r2, [pc, #100]	; (800ca08 <TIM_OC6_SetConfig+0xb8>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d00f      	beq.n	800c9c8 <TIM_OC6_SetConfig+0x78>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	4a18      	ldr	r2, [pc, #96]	; (800ca0c <TIM_OC6_SetConfig+0xbc>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d00b      	beq.n	800c9c8 <TIM_OC6_SetConfig+0x78>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4a17      	ldr	r2, [pc, #92]	; (800ca10 <TIM_OC6_SetConfig+0xc0>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d007      	beq.n	800c9c8 <TIM_OC6_SetConfig+0x78>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	4a16      	ldr	r2, [pc, #88]	; (800ca14 <TIM_OC6_SetConfig+0xc4>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d003      	beq.n	800c9c8 <TIM_OC6_SetConfig+0x78>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	4a15      	ldr	r2, [pc, #84]	; (800ca18 <TIM_OC6_SetConfig+0xc8>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d109      	bne.n	800c9dc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c9ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	695b      	ldr	r3, [r3, #20]
 800c9d4:	029b      	lsls	r3, r3, #10
 800c9d6:	697a      	ldr	r2, [r7, #20]
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	697a      	ldr	r2, [r7, #20]
 800c9e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	68fa      	ldr	r2, [r7, #12]
 800c9e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	685a      	ldr	r2, [r3, #4]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	693a      	ldr	r2, [r7, #16]
 800c9f4:	621a      	str	r2, [r3, #32]
}
 800c9f6:	bf00      	nop
 800c9f8:	371c      	adds	r7, #28
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr
 800ca02:	bf00      	nop
 800ca04:	feff8fff 	.word	0xfeff8fff
 800ca08:	40010000 	.word	0x40010000
 800ca0c:	40010400 	.word	0x40010400
 800ca10:	40014000 	.word	0x40014000
 800ca14:	40014400 	.word	0x40014400
 800ca18:	40014800 	.word	0x40014800

0800ca1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b087      	sub	sp, #28
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	60f8      	str	r0, [r7, #12]
 800ca24:	60b9      	str	r1, [r7, #8]
 800ca26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	6a1b      	ldr	r3, [r3, #32]
 800ca2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	6a1b      	ldr	r3, [r3, #32]
 800ca32:	f023 0201 	bic.w	r2, r3, #1
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	699b      	ldr	r3, [r3, #24]
 800ca3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ca46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	011b      	lsls	r3, r3, #4
 800ca4c:	693a      	ldr	r2, [r7, #16]
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	f023 030a 	bic.w	r3, r3, #10
 800ca58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ca5a:	697a      	ldr	r2, [r7, #20]
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	693a      	ldr	r2, [r7, #16]
 800ca66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	697a      	ldr	r2, [r7, #20]
 800ca6c:	621a      	str	r2, [r3, #32]
}
 800ca6e:	bf00      	nop
 800ca70:	371c      	adds	r7, #28
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr

0800ca7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca7a:	b480      	push	{r7}
 800ca7c:	b087      	sub	sp, #28
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	60f8      	str	r0, [r7, #12]
 800ca82:	60b9      	str	r1, [r7, #8]
 800ca84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	6a1b      	ldr	r3, [r3, #32]
 800ca8a:	f023 0210 	bic.w	r2, r3, #16
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	699b      	ldr	r3, [r3, #24]
 800ca96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	6a1b      	ldr	r3, [r3, #32]
 800ca9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800caa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	031b      	lsls	r3, r3, #12
 800caaa:	697a      	ldr	r2, [r7, #20]
 800caac:	4313      	orrs	r3, r2
 800caae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cab6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	011b      	lsls	r3, r3, #4
 800cabc:	693a      	ldr	r2, [r7, #16]
 800cabe:	4313      	orrs	r3, r2
 800cac0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	697a      	ldr	r2, [r7, #20]
 800cac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	693a      	ldr	r2, [r7, #16]
 800cacc:	621a      	str	r2, [r3, #32]
}
 800cace:	bf00      	nop
 800cad0:	371c      	adds	r7, #28
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr
	...

0800cadc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cadc:	b480      	push	{r7}
 800cade:	b085      	sub	sp, #20
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	689b      	ldr	r3, [r3, #8]
 800caea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800caec:	68fa      	ldr	r2, [r7, #12]
 800caee:	4b09      	ldr	r3, [pc, #36]	; (800cb14 <TIM_ITRx_SetConfig+0x38>)
 800caf0:	4013      	ands	r3, r2
 800caf2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800caf4:	683a      	ldr	r2, [r7, #0]
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	4313      	orrs	r3, r2
 800cafa:	f043 0307 	orr.w	r3, r3, #7
 800cafe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	68fa      	ldr	r2, [r7, #12]
 800cb04:	609a      	str	r2, [r3, #8]
}
 800cb06:	bf00      	nop
 800cb08:	3714      	adds	r7, #20
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb10:	4770      	bx	lr
 800cb12:	bf00      	nop
 800cb14:	ffcfff8f 	.word	0xffcfff8f

0800cb18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b087      	sub	sp, #28
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	60f8      	str	r0, [r7, #12]
 800cb20:	60b9      	str	r1, [r7, #8]
 800cb22:	607a      	str	r2, [r7, #4]
 800cb24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	689b      	ldr	r3, [r3, #8]
 800cb2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cb32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	021a      	lsls	r2, r3, #8
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	431a      	orrs	r2, r3
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	4313      	orrs	r3, r2
 800cb40:	697a      	ldr	r2, [r7, #20]
 800cb42:	4313      	orrs	r3, r2
 800cb44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	697a      	ldr	r2, [r7, #20]
 800cb4a:	609a      	str	r2, [r3, #8]
}
 800cb4c:	bf00      	nop
 800cb4e:	371c      	adds	r7, #28
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b087      	sub	sp, #28
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	60f8      	str	r0, [r7, #12]
 800cb60:	60b9      	str	r1, [r7, #8]
 800cb62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	f003 031f 	and.w	r3, r3, #31
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	fa02 f303 	lsl.w	r3, r2, r3
 800cb70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	6a1a      	ldr	r2, [r3, #32]
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	43db      	mvns	r3, r3
 800cb7a:	401a      	ands	r2, r3
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	6a1a      	ldr	r2, [r3, #32]
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	f003 031f 	and.w	r3, r3, #31
 800cb8a:	6879      	ldr	r1, [r7, #4]
 800cb8c:	fa01 f303 	lsl.w	r3, r1, r3
 800cb90:	431a      	orrs	r2, r3
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	621a      	str	r2, [r3, #32]
}
 800cb96:	bf00      	nop
 800cb98:	371c      	adds	r7, #28
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr
	...

0800cba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b085      	sub	sp, #20
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d101      	bne.n	800cbbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cbb8:	2302      	movs	r3, #2
 800cbba:	e06d      	b.n	800cc98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2202      	movs	r2, #2
 800cbc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	689b      	ldr	r3, [r3, #8]
 800cbda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	4a30      	ldr	r2, [pc, #192]	; (800cca4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d004      	beq.n	800cbf0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4a2f      	ldr	r2, [pc, #188]	; (800cca8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d108      	bne.n	800cc02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cbf6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	68fa      	ldr	r2, [r7, #12]
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	68fa      	ldr	r2, [r7, #12]
 800cc10:	4313      	orrs	r3, r2
 800cc12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	68fa      	ldr	r2, [r7, #12]
 800cc1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a20      	ldr	r2, [pc, #128]	; (800cca4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d022      	beq.n	800cc6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc2e:	d01d      	beq.n	800cc6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a1d      	ldr	r2, [pc, #116]	; (800ccac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d018      	beq.n	800cc6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4a1c      	ldr	r2, [pc, #112]	; (800ccb0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d013      	beq.n	800cc6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4a1a      	ldr	r2, [pc, #104]	; (800ccb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d00e      	beq.n	800cc6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a15      	ldr	r2, [pc, #84]	; (800cca8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d009      	beq.n	800cc6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a16      	ldr	r2, [pc, #88]	; (800ccb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d004      	beq.n	800cc6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4a15      	ldr	r2, [pc, #84]	; (800ccbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d10c      	bne.n	800cc86 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	68ba      	ldr	r2, [r7, #8]
 800cc7a:	4313      	orrs	r3, r2
 800cc7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	68ba      	ldr	r2, [r7, #8]
 800cc84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2201      	movs	r2, #1
 800cc8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2200      	movs	r2, #0
 800cc92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cc96:	2300      	movs	r3, #0
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3714      	adds	r7, #20
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr
 800cca4:	40010000 	.word	0x40010000
 800cca8:	40010400 	.word	0x40010400
 800ccac:	40000400 	.word	0x40000400
 800ccb0:	40000800 	.word	0x40000800
 800ccb4:	40000c00 	.word	0x40000c00
 800ccb8:	40001800 	.word	0x40001800
 800ccbc:	40014000 	.word	0x40014000

0800ccc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b085      	sub	sp, #20
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ccca:	2300      	movs	r3, #0
 800cccc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d101      	bne.n	800ccdc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ccd8:	2302      	movs	r3, #2
 800ccda:	e065      	b.n	800cda8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2201      	movs	r2, #1
 800cce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	68db      	ldr	r3, [r3, #12]
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	689b      	ldr	r3, [r3, #8]
 800ccfc:	4313      	orrs	r3, r2
 800ccfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	685b      	ldr	r3, [r3, #4]
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4313      	orrs	r3, r2
 800cd1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	691b      	ldr	r3, [r3, #16]
 800cd26:	4313      	orrs	r3, r2
 800cd28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	695b      	ldr	r3, [r3, #20]
 800cd34:	4313      	orrs	r3, r2
 800cd36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd42:	4313      	orrs	r3, r2
 800cd44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	699b      	ldr	r3, [r3, #24]
 800cd50:	041b      	lsls	r3, r3, #16
 800cd52:	4313      	orrs	r3, r2
 800cd54:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	4a16      	ldr	r2, [pc, #88]	; (800cdb4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d004      	beq.n	800cd6a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4a14      	ldr	r2, [pc, #80]	; (800cdb8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d115      	bne.n	800cd96 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd74:	051b      	lsls	r3, r3, #20
 800cd76:	4313      	orrs	r3, r2
 800cd78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	69db      	ldr	r3, [r3, #28]
 800cd84:	4313      	orrs	r3, r2
 800cd86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	6a1b      	ldr	r3, [r3, #32]
 800cd92:	4313      	orrs	r3, r2
 800cd94:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	68fa      	ldr	r2, [r7, #12]
 800cd9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2200      	movs	r2, #0
 800cda2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cda6:	2300      	movs	r3, #0
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3714      	adds	r7, #20
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr
 800cdb4:	40010000 	.word	0x40010000
 800cdb8:	40010400 	.word	0x40010400

0800cdbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b083      	sub	sp, #12
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cdc4:	bf00      	nop
 800cdc6:	370c      	adds	r7, #12
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b083      	sub	sp, #12
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cdd8:	bf00      	nop
 800cdda:	370c      	adds	r7, #12
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr

0800cde4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cdec:	bf00      	nop
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr

0800cdf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d101      	bne.n	800ce0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce06:	2301      	movs	r3, #1
 800ce08:	e042      	b.n	800ce90 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d106      	bne.n	800ce22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2200      	movs	r2, #0
 800ce18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f7f8 fa4f 	bl	80052c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2224      	movs	r2, #36	; 0x24
 800ce26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f022 0201 	bic.w	r2, r2, #1
 800ce38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 fdee 	bl	800da1c <UART_SetConfig>
 800ce40:	4603      	mov	r3, r0
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	d101      	bne.n	800ce4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ce46:	2301      	movs	r3, #1
 800ce48:	e022      	b.n	800ce90 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d002      	beq.n	800ce58 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f001 fb42 	bl	800e4dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	685a      	ldr	r2, [r3, #4]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ce66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	689a      	ldr	r2, [r3, #8]
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ce76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	681a      	ldr	r2, [r3, #0]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f042 0201 	orr.w	r2, r2, #1
 800ce86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f001 fbc9 	bl	800e620 <UART_CheckIdleState>
 800ce8e:	4603      	mov	r3, r0
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3708      	adds	r7, #8
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}

0800ce98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b08a      	sub	sp, #40	; 0x28
 800ce9c:	af02      	add	r7, sp, #8
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	60b9      	str	r1, [r7, #8]
 800cea2:	603b      	str	r3, [r7, #0]
 800cea4:	4613      	mov	r3, r2
 800cea6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ceae:	2b20      	cmp	r3, #32
 800ceb0:	f040 8083 	bne.w	800cfba <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d002      	beq.n	800cec0 <HAL_UART_Transmit+0x28>
 800ceba:	88fb      	ldrh	r3, [r7, #6]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d101      	bne.n	800cec4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800cec0:	2301      	movs	r3, #1
 800cec2:	e07b      	b.n	800cfbc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	d101      	bne.n	800ced2 <HAL_UART_Transmit+0x3a>
 800cece:	2302      	movs	r3, #2
 800ced0:	e074      	b.n	800cfbc <HAL_UART_Transmit+0x124>
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2201      	movs	r2, #1
 800ced6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2200      	movs	r2, #0
 800cede:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2221      	movs	r2, #33	; 0x21
 800cee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ceea:	f7f8 fccf 	bl	800588c <HAL_GetTick>
 800ceee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	88fa      	ldrh	r2, [r7, #6]
 800cef4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	88fa      	ldrh	r2, [r7, #6]
 800cefc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	689b      	ldr	r3, [r3, #8]
 800cf04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf08:	d108      	bne.n	800cf1c <HAL_UART_Transmit+0x84>
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	691b      	ldr	r3, [r3, #16]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d104      	bne.n	800cf1c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800cf12:	2300      	movs	r3, #0
 800cf14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	61bb      	str	r3, [r7, #24]
 800cf1a:	e003      	b.n	800cf24 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cf20:	2300      	movs	r3, #0
 800cf22:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2200      	movs	r2, #0
 800cf28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800cf2c:	e02c      	b.n	800cf88 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	9300      	str	r3, [sp, #0]
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	2200      	movs	r2, #0
 800cf36:	2180      	movs	r1, #128	; 0x80
 800cf38:	68f8      	ldr	r0, [r7, #12]
 800cf3a:	f001 fbbc 	bl	800e6b6 <UART_WaitOnFlagUntilTimeout>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d001      	beq.n	800cf48 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800cf44:	2303      	movs	r3, #3
 800cf46:	e039      	b.n	800cfbc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800cf48:	69fb      	ldr	r3, [r7, #28]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d10b      	bne.n	800cf66 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	881b      	ldrh	r3, [r3, #0]
 800cf52:	461a      	mov	r2, r3
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cf5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800cf5e:	69bb      	ldr	r3, [r7, #24]
 800cf60:	3302      	adds	r3, #2
 800cf62:	61bb      	str	r3, [r7, #24]
 800cf64:	e007      	b.n	800cf76 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cf66:	69fb      	ldr	r3, [r7, #28]
 800cf68:	781a      	ldrb	r2, [r3, #0]
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cf70:	69fb      	ldr	r3, [r7, #28]
 800cf72:	3301      	adds	r3, #1
 800cf74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cf7c:	b29b      	uxth	r3, r3
 800cf7e:	3b01      	subs	r3, #1
 800cf80:	b29a      	uxth	r2, r3
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cf8e:	b29b      	uxth	r3, r3
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d1cc      	bne.n	800cf2e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	9300      	str	r3, [sp, #0]
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	2140      	movs	r1, #64	; 0x40
 800cf9e:	68f8      	ldr	r0, [r7, #12]
 800cfa0:	f001 fb89 	bl	800e6b6 <UART_WaitOnFlagUntilTimeout>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d001      	beq.n	800cfae <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800cfaa:	2303      	movs	r3, #3
 800cfac:	e006      	b.n	800cfbc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2220      	movs	r2, #32
 800cfb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	e000      	b.n	800cfbc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800cfba:	2302      	movs	r3, #2
  }
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3720      	adds	r7, #32
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b08a      	sub	sp, #40	; 0x28
 800cfc8:	af02      	add	r7, sp, #8
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	60b9      	str	r1, [r7, #8]
 800cfce:	603b      	str	r3, [r7, #0]
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfda:	2b20      	cmp	r3, #32
 800cfdc:	f040 80c0 	bne.w	800d160 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d002      	beq.n	800cfec <HAL_UART_Receive+0x28>
 800cfe6:	88fb      	ldrh	r3, [r7, #6]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d101      	bne.n	800cff0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800cfec:	2301      	movs	r3, #1
 800cfee:	e0b8      	b.n	800d162 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cff6:	2b01      	cmp	r3, #1
 800cff8:	d101      	bne.n	800cffe <HAL_UART_Receive+0x3a>
 800cffa:	2302      	movs	r3, #2
 800cffc:	e0b1      	b.n	800d162 <HAL_UART_Receive+0x19e>
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2201      	movs	r2, #1
 800d002:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2200      	movs	r2, #0
 800d00a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2222      	movs	r2, #34	; 0x22
 800d012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2200      	movs	r2, #0
 800d01a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d01c:	f7f8 fc36 	bl	800588c <HAL_GetTick>
 800d020:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	88fa      	ldrh	r2, [r7, #6]
 800d026:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	88fa      	ldrh	r2, [r7, #6]
 800d02e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d03a:	d10e      	bne.n	800d05a <HAL_UART_Receive+0x96>
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	691b      	ldr	r3, [r3, #16]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d105      	bne.n	800d050 <HAL_UART_Receive+0x8c>
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d04a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d04e:	e02d      	b.n	800d0ac <HAL_UART_Receive+0xe8>
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	22ff      	movs	r2, #255	; 0xff
 800d054:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d058:	e028      	b.n	800d0ac <HAL_UART_Receive+0xe8>
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	689b      	ldr	r3, [r3, #8]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d10d      	bne.n	800d07e <HAL_UART_Receive+0xba>
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	691b      	ldr	r3, [r3, #16]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d104      	bne.n	800d074 <HAL_UART_Receive+0xb0>
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	22ff      	movs	r2, #255	; 0xff
 800d06e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d072:	e01b      	b.n	800d0ac <HAL_UART_Receive+0xe8>
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	227f      	movs	r2, #127	; 0x7f
 800d078:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d07c:	e016      	b.n	800d0ac <HAL_UART_Receive+0xe8>
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	689b      	ldr	r3, [r3, #8]
 800d082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d086:	d10d      	bne.n	800d0a4 <HAL_UART_Receive+0xe0>
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	691b      	ldr	r3, [r3, #16]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d104      	bne.n	800d09a <HAL_UART_Receive+0xd6>
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	227f      	movs	r2, #127	; 0x7f
 800d094:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d098:	e008      	b.n	800d0ac <HAL_UART_Receive+0xe8>
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	223f      	movs	r2, #63	; 0x3f
 800d09e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d0a2:	e003      	b.n	800d0ac <HAL_UART_Receive+0xe8>
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d0b2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	689b      	ldr	r3, [r3, #8]
 800d0b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0bc:	d108      	bne.n	800d0d0 <HAL_UART_Receive+0x10c>
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	691b      	ldr	r3, [r3, #16]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d104      	bne.n	800d0d0 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	61bb      	str	r3, [r7, #24]
 800d0ce:	e003      	b.n	800d0d8 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d0e0:	e032      	b.n	800d148 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	9300      	str	r3, [sp, #0]
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	2120      	movs	r1, #32
 800d0ec:	68f8      	ldr	r0, [r7, #12]
 800d0ee:	f001 fae2 	bl	800e6b6 <UART_WaitOnFlagUntilTimeout>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d001      	beq.n	800d0fc <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800d0f8:	2303      	movs	r3, #3
 800d0fa:	e032      	b.n	800d162 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d10c      	bne.n	800d11c <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d108:	b29a      	uxth	r2, r3
 800d10a:	8a7b      	ldrh	r3, [r7, #18]
 800d10c:	4013      	ands	r3, r2
 800d10e:	b29a      	uxth	r2, r3
 800d110:	69bb      	ldr	r3, [r7, #24]
 800d112:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d114:	69bb      	ldr	r3, [r7, #24]
 800d116:	3302      	adds	r3, #2
 800d118:	61bb      	str	r3, [r7, #24]
 800d11a:	e00c      	b.n	800d136 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d122:	b2da      	uxtb	r2, r3
 800d124:	8a7b      	ldrh	r3, [r7, #18]
 800d126:	b2db      	uxtb	r3, r3
 800d128:	4013      	ands	r3, r2
 800d12a:	b2da      	uxtb	r2, r3
 800d12c:	69fb      	ldr	r3, [r7, #28]
 800d12e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d130:	69fb      	ldr	r3, [r7, #28]
 800d132:	3301      	adds	r3, #1
 800d134:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	3b01      	subs	r3, #1
 800d140:	b29a      	uxth	r2, r3
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d14e:	b29b      	uxth	r3, r3
 800d150:	2b00      	cmp	r3, #0
 800d152:	d1c6      	bne.n	800d0e2 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2220      	movs	r2, #32
 800d158:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d15c:	2300      	movs	r3, #0
 800d15e:	e000      	b.n	800d162 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800d160:	2302      	movs	r3, #2
  }
}
 800d162:	4618      	mov	r0, r3
 800d164:	3720      	adds	r7, #32
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
	...

0800d16c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b08a      	sub	sp, #40	; 0x28
 800d170:	af00      	add	r7, sp, #0
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	60b9      	str	r1, [r7, #8]
 800d176:	4613      	mov	r3, r2
 800d178:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d180:	2b20      	cmp	r3, #32
 800d182:	d17a      	bne.n	800d27a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d002      	beq.n	800d190 <HAL_UART_Transmit_DMA+0x24>
 800d18a:	88fb      	ldrh	r3, [r7, #6]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d101      	bne.n	800d194 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800d190:	2301      	movs	r3, #1
 800d192:	e073      	b.n	800d27c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d19a:	2b01      	cmp	r3, #1
 800d19c:	d101      	bne.n	800d1a2 <HAL_UART_Transmit_DMA+0x36>
 800d19e:	2302      	movs	r3, #2
 800d1a0:	e06c      	b.n	800d27c <HAL_UART_Transmit_DMA+0x110>
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	68ba      	ldr	r2, [r7, #8]
 800d1ae:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	88fa      	ldrh	r2, [r7, #6]
 800d1b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	88fa      	ldrh	r2, [r7, #6]
 800d1bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2221      	movs	r2, #33	; 0x21
 800d1cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d02c      	beq.n	800d232 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1dc:	4a29      	ldr	r2, [pc, #164]	; (800d284 <HAL_UART_Transmit_DMA+0x118>)
 800d1de:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1e4:	4a28      	ldr	r2, [pc, #160]	; (800d288 <HAL_UART_Transmit_DMA+0x11c>)
 800d1e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1ec:	4a27      	ldr	r2, [pc, #156]	; (800d28c <HAL_UART_Transmit_DMA+0x120>)
 800d1ee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d200:	4619      	mov	r1, r3
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	3328      	adds	r3, #40	; 0x28
 800d208:	461a      	mov	r2, r3
 800d20a:	88fb      	ldrh	r3, [r7, #6]
 800d20c:	f7f9 f9cc 	bl	80065a8 <HAL_DMA_Start_IT>
 800d210:	4603      	mov	r3, r0
 800d212:	2b00      	cmp	r3, #0
 800d214:	d00d      	beq.n	800d232 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	2210      	movs	r2, #16
 800d21a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2200      	movs	r2, #0
 800d222:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2220      	movs	r2, #32
 800d22a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800d22e:	2301      	movs	r3, #1
 800d230:	e024      	b.n	800d27c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2240      	movs	r2, #64	; 0x40
 800d238:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2200      	movs	r2, #0
 800d23e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	3308      	adds	r3, #8
 800d248:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	e853 3f00 	ldrex	r3, [r3]
 800d250:	613b      	str	r3, [r7, #16]
   return(result);
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d258:	627b      	str	r3, [r7, #36]	; 0x24
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	3308      	adds	r3, #8
 800d260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d262:	623a      	str	r2, [r7, #32]
 800d264:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d266:	69f9      	ldr	r1, [r7, #28]
 800d268:	6a3a      	ldr	r2, [r7, #32]
 800d26a:	e841 2300 	strex	r3, r2, [r1]
 800d26e:	61bb      	str	r3, [r7, #24]
   return(result);
 800d270:	69bb      	ldr	r3, [r7, #24]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d1e5      	bne.n	800d242 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800d276:	2300      	movs	r3, #0
 800d278:	e000      	b.n	800d27c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800d27a:	2302      	movs	r3, #2
  }
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3728      	adds	r7, #40	; 0x28
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}
 800d284:	0800eae9 	.word	0x0800eae9
 800d288:	0800eb7f 	.word	0x0800eb7f
 800d28c:	0800ecf5 	.word	0x0800ecf5

0800d290 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b0ba      	sub	sp, #232	; 0xe8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	69db      	ldr	r3, [r3, #28]
 800d29e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	689b      	ldr	r3, [r3, #8]
 800d2b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d2b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d2ba:	f640 030f 	movw	r3, #2063	; 0x80f
 800d2be:	4013      	ands	r3, r2
 800d2c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d2c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d11b      	bne.n	800d304 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d2cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2d0:	f003 0320 	and.w	r3, r3, #32
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d015      	beq.n	800d304 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d2d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2dc:	f003 0320 	and.w	r3, r3, #32
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d105      	bne.n	800d2f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d2e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d009      	beq.n	800d304 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	f000 835a 	beq.w	800d9ae <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	4798      	blx	r3
      }
      return;
 800d302:	e354      	b.n	800d9ae <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d304:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d308:	2b00      	cmp	r3, #0
 800d30a:	f000 811f 	beq.w	800d54c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d30e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d312:	4b8b      	ldr	r3, [pc, #556]	; (800d540 <HAL_UART_IRQHandler+0x2b0>)
 800d314:	4013      	ands	r3, r2
 800d316:	2b00      	cmp	r3, #0
 800d318:	d106      	bne.n	800d328 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d31a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d31e:	4b89      	ldr	r3, [pc, #548]	; (800d544 <HAL_UART_IRQHandler+0x2b4>)
 800d320:	4013      	ands	r3, r2
 800d322:	2b00      	cmp	r3, #0
 800d324:	f000 8112 	beq.w	800d54c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d32c:	f003 0301 	and.w	r3, r3, #1
 800d330:	2b00      	cmp	r3, #0
 800d332:	d011      	beq.n	800d358 <HAL_UART_IRQHandler+0xc8>
 800d334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d00b      	beq.n	800d358 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	2201      	movs	r2, #1
 800d346:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d34e:	f043 0201 	orr.w	r2, r3, #1
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d35c:	f003 0302 	and.w	r3, r3, #2
 800d360:	2b00      	cmp	r3, #0
 800d362:	d011      	beq.n	800d388 <HAL_UART_IRQHandler+0xf8>
 800d364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d368:	f003 0301 	and.w	r3, r3, #1
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d00b      	beq.n	800d388 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	2202      	movs	r2, #2
 800d376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d37e:	f043 0204 	orr.w	r2, r3, #4
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d38c:	f003 0304 	and.w	r3, r3, #4
 800d390:	2b00      	cmp	r3, #0
 800d392:	d011      	beq.n	800d3b8 <HAL_UART_IRQHandler+0x128>
 800d394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d398:	f003 0301 	and.w	r3, r3, #1
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d00b      	beq.n	800d3b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2204      	movs	r2, #4
 800d3a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3ae:	f043 0202 	orr.w	r2, r3, #2
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d3b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3bc:	f003 0308 	and.w	r3, r3, #8
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d017      	beq.n	800d3f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d3c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3c8:	f003 0320 	and.w	r3, r3, #32
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d105      	bne.n	800d3dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d3d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d3d4:	4b5a      	ldr	r3, [pc, #360]	; (800d540 <HAL_UART_IRQHandler+0x2b0>)
 800d3d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d00b      	beq.n	800d3f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	2208      	movs	r2, #8
 800d3e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3ea:	f043 0208 	orr.w	r2, r3, #8
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d3f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d012      	beq.n	800d426 <HAL_UART_IRQHandler+0x196>
 800d400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d404:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00c      	beq.n	800d426 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d414:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d41c:	f043 0220 	orr.w	r2, r3, #32
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	f000 82c0 	beq.w	800d9b2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d436:	f003 0320 	and.w	r3, r3, #32
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d013      	beq.n	800d466 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d43e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d442:	f003 0320 	and.w	r3, r3, #32
 800d446:	2b00      	cmp	r3, #0
 800d448:	d105      	bne.n	800d456 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d44a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d44e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d452:	2b00      	cmp	r3, #0
 800d454:	d007      	beq.n	800d466 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d003      	beq.n	800d466 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d46c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	689b      	ldr	r3, [r3, #8]
 800d476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d47a:	2b40      	cmp	r3, #64	; 0x40
 800d47c:	d005      	beq.n	800d48a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d47e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d482:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d486:	2b00      	cmp	r3, #0
 800d488:	d04f      	beq.n	800d52a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f001 fac6 	bl	800ea1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	689b      	ldr	r3, [r3, #8]
 800d496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d49a:	2b40      	cmp	r3, #64	; 0x40
 800d49c:	d141      	bne.n	800d522 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	3308      	adds	r3, #8
 800d4a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d4ac:	e853 3f00 	ldrex	r3, [r3]
 800d4b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d4b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d4b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	3308      	adds	r3, #8
 800d4c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d4ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d4ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d4d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d4da:	e841 2300 	strex	r3, r2, [r1]
 800d4de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d4e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d1d9      	bne.n	800d49e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d013      	beq.n	800d51a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4f6:	4a14      	ldr	r2, [pc, #80]	; (800d548 <HAL_UART_IRQHandler+0x2b8>)
 800d4f8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7f9 fdda 	bl	80070b8 <HAL_DMA_Abort_IT>
 800d504:	4603      	mov	r3, r0
 800d506:	2b00      	cmp	r3, #0
 800d508:	d017      	beq.n	800d53a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d50e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d514:	4610      	mov	r0, r2
 800d516:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d518:	e00f      	b.n	800d53a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f000 fa74 	bl	800da08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d520:	e00b      	b.n	800d53a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f000 fa70 	bl	800da08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d528:	e007      	b.n	800d53a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f000 fa6c 	bl	800da08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2200      	movs	r2, #0
 800d534:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d538:	e23b      	b.n	800d9b2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d53a:	bf00      	nop
    return;
 800d53c:	e239      	b.n	800d9b2 <HAL_UART_IRQHandler+0x722>
 800d53e:	bf00      	nop
 800d540:	10000001 	.word	0x10000001
 800d544:	04000120 	.word	0x04000120
 800d548:	0800ed75 	.word	0x0800ed75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d550:	2b01      	cmp	r3, #1
 800d552:	f040 81ce 	bne.w	800d8f2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d55a:	f003 0310 	and.w	r3, r3, #16
 800d55e:	2b00      	cmp	r3, #0
 800d560:	f000 81c7 	beq.w	800d8f2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d568:	f003 0310 	and.w	r3, r3, #16
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	f000 81c0 	beq.w	800d8f2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	2210      	movs	r2, #16
 800d578:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	689b      	ldr	r3, [r3, #8]
 800d580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d584:	2b40      	cmp	r3, #64	; 0x40
 800d586:	f040 813b 	bne.w	800d800 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	4a8b      	ldr	r2, [pc, #556]	; (800d7c0 <HAL_UART_IRQHandler+0x530>)
 800d592:	4293      	cmp	r3, r2
 800d594:	d059      	beq.n	800d64a <HAL_UART_IRQHandler+0x3ba>
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	4a89      	ldr	r2, [pc, #548]	; (800d7c4 <HAL_UART_IRQHandler+0x534>)
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d053      	beq.n	800d64a <HAL_UART_IRQHandler+0x3ba>
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4a87      	ldr	r2, [pc, #540]	; (800d7c8 <HAL_UART_IRQHandler+0x538>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d04d      	beq.n	800d64a <HAL_UART_IRQHandler+0x3ba>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4a85      	ldr	r2, [pc, #532]	; (800d7cc <HAL_UART_IRQHandler+0x53c>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d047      	beq.n	800d64a <HAL_UART_IRQHandler+0x3ba>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4a83      	ldr	r2, [pc, #524]	; (800d7d0 <HAL_UART_IRQHandler+0x540>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d041      	beq.n	800d64a <HAL_UART_IRQHandler+0x3ba>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4a81      	ldr	r2, [pc, #516]	; (800d7d4 <HAL_UART_IRQHandler+0x544>)
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d03b      	beq.n	800d64a <HAL_UART_IRQHandler+0x3ba>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	4a7f      	ldr	r2, [pc, #508]	; (800d7d8 <HAL_UART_IRQHandler+0x548>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d035      	beq.n	800d64a <HAL_UART_IRQHandler+0x3ba>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4a7d      	ldr	r2, [pc, #500]	; (800d7dc <HAL_UART_IRQHandler+0x54c>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d02f      	beq.n	800d64a <HAL_UART_IRQHandler+0x3ba>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	4a7b      	ldr	r2, [pc, #492]	; (800d7e0 <HAL_UART_IRQHandler+0x550>)
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d029      	beq.n	800d64a <HAL_UART_IRQHandler+0x3ba>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4a79      	ldr	r2, [pc, #484]	; (800d7e4 <HAL_UART_IRQHandler+0x554>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d023      	beq.n	800d64a <HAL_UART_IRQHandler+0x3ba>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4a77      	ldr	r2, [pc, #476]	; (800d7e8 <HAL_UART_IRQHandler+0x558>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d01d      	beq.n	800d64a <HAL_UART_IRQHandler+0x3ba>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	4a75      	ldr	r2, [pc, #468]	; (800d7ec <HAL_UART_IRQHandler+0x55c>)
 800d616:	4293      	cmp	r3, r2
 800d618:	d017      	beq.n	800d64a <HAL_UART_IRQHandler+0x3ba>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4a73      	ldr	r2, [pc, #460]	; (800d7f0 <HAL_UART_IRQHandler+0x560>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d011      	beq.n	800d64a <HAL_UART_IRQHandler+0x3ba>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4a71      	ldr	r2, [pc, #452]	; (800d7f4 <HAL_UART_IRQHandler+0x564>)
 800d62e:	4293      	cmp	r3, r2
 800d630:	d00b      	beq.n	800d64a <HAL_UART_IRQHandler+0x3ba>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	4a6f      	ldr	r2, [pc, #444]	; (800d7f8 <HAL_UART_IRQHandler+0x568>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d005      	beq.n	800d64a <HAL_UART_IRQHandler+0x3ba>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	4a6d      	ldr	r2, [pc, #436]	; (800d7fc <HAL_UART_IRQHandler+0x56c>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d105      	bne.n	800d656 <HAL_UART_IRQHandler+0x3c6>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	b29b      	uxth	r3, r3
 800d654:	e004      	b.n	800d660 <HAL_UART_IRQHandler+0x3d0>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	b29b      	uxth	r3, r3
 800d660:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d664:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d668:	2b00      	cmp	r3, #0
 800d66a:	f000 81a4 	beq.w	800d9b6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d674:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d678:	429a      	cmp	r2, r3
 800d67a:	f080 819c 	bcs.w	800d9b6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d684:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d68c:	69db      	ldr	r3, [r3, #28]
 800d68e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d692:	f000 8086 	beq.w	800d7a2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d69e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d6a2:	e853 3f00 	ldrex	r3, [r3]
 800d6a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d6aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d6ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d6b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d6c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d6c4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d6cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d6d0:	e841 2300 	strex	r3, r2, [r1]
 800d6d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d6d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d1da      	bne.n	800d696 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	3308      	adds	r3, #8
 800d6e6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d6ea:	e853 3f00 	ldrex	r3, [r3]
 800d6ee:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d6f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d6f2:	f023 0301 	bic.w	r3, r3, #1
 800d6f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	3308      	adds	r3, #8
 800d700:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d704:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d708:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d70a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d70c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d710:	e841 2300 	strex	r3, r2, [r1]
 800d714:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d716:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d1e1      	bne.n	800d6e0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	3308      	adds	r3, #8
 800d722:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d724:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d726:	e853 3f00 	ldrex	r3, [r3]
 800d72a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d72c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d72e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d732:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	3308      	adds	r3, #8
 800d73c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d740:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d742:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d744:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d746:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d748:	e841 2300 	strex	r3, r2, [r1]
 800d74c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d74e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d750:	2b00      	cmp	r3, #0
 800d752:	d1e3      	bne.n	800d71c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2220      	movs	r2, #32
 800d758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2200      	movs	r2, #0
 800d760:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d76a:	e853 3f00 	ldrex	r3, [r3]
 800d76e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d772:	f023 0310 	bic.w	r3, r3, #16
 800d776:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	461a      	mov	r2, r3
 800d780:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d784:	65bb      	str	r3, [r7, #88]	; 0x58
 800d786:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d788:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d78a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d78c:	e841 2300 	strex	r3, r2, [r1]
 800d790:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d794:	2b00      	cmp	r3, #0
 800d796:	d1e4      	bne.n	800d762 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7f9 f96d 	bl	8006a7c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d7ae:	b29b      	uxth	r3, r3
 800d7b0:	1ad3      	subs	r3, r2, r3
 800d7b2:	b29b      	uxth	r3, r3
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f7f4 f9f8 	bl	8001bac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d7bc:	e0fb      	b.n	800d9b6 <HAL_UART_IRQHandler+0x726>
 800d7be:	bf00      	nop
 800d7c0:	40020010 	.word	0x40020010
 800d7c4:	40020028 	.word	0x40020028
 800d7c8:	40020040 	.word	0x40020040
 800d7cc:	40020058 	.word	0x40020058
 800d7d0:	40020070 	.word	0x40020070
 800d7d4:	40020088 	.word	0x40020088
 800d7d8:	400200a0 	.word	0x400200a0
 800d7dc:	400200b8 	.word	0x400200b8
 800d7e0:	40020410 	.word	0x40020410
 800d7e4:	40020428 	.word	0x40020428
 800d7e8:	40020440 	.word	0x40020440
 800d7ec:	40020458 	.word	0x40020458
 800d7f0:	40020470 	.word	0x40020470
 800d7f4:	40020488 	.word	0x40020488
 800d7f8:	400204a0 	.word	0x400204a0
 800d7fc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d80c:	b29b      	uxth	r3, r3
 800d80e:	1ad3      	subs	r3, r2, r3
 800d810:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	f000 80cc 	beq.w	800d9ba <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d822:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d826:	2b00      	cmp	r3, #0
 800d828:	f000 80c7 	beq.w	800d9ba <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d834:	e853 3f00 	ldrex	r3, [r3]
 800d838:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d83a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d83c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d840:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	461a      	mov	r2, r3
 800d84a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d84e:	647b      	str	r3, [r7, #68]	; 0x44
 800d850:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d852:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d854:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d856:	e841 2300 	strex	r3, r2, [r1]
 800d85a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d1e4      	bne.n	800d82c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	3308      	adds	r3, #8
 800d868:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86c:	e853 3f00 	ldrex	r3, [r3]
 800d870:	623b      	str	r3, [r7, #32]
   return(result);
 800d872:	6a3a      	ldr	r2, [r7, #32]
 800d874:	4b54      	ldr	r3, [pc, #336]	; (800d9c8 <HAL_UART_IRQHandler+0x738>)
 800d876:	4013      	ands	r3, r2
 800d878:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	3308      	adds	r3, #8
 800d882:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d886:	633a      	str	r2, [r7, #48]	; 0x30
 800d888:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d88a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d88c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d88e:	e841 2300 	strex	r3, r2, [r1]
 800d892:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d896:	2b00      	cmp	r3, #0
 800d898:	d1e3      	bne.n	800d862 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2220      	movs	r2, #32
 800d89e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	e853 3f00 	ldrex	r3, [r3]
 800d8ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	f023 0310 	bic.w	r3, r3, #16
 800d8c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d8d0:	61fb      	str	r3, [r7, #28]
 800d8d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d4:	69b9      	ldr	r1, [r7, #24]
 800d8d6:	69fa      	ldr	r2, [r7, #28]
 800d8d8:	e841 2300 	strex	r3, r2, [r1]
 800d8dc:	617b      	str	r3, [r7, #20]
   return(result);
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d1e4      	bne.n	800d8ae <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d8e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f7f4 f95e 	bl	8001bac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d8f0:	e063      	b.n	800d9ba <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d8f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d00e      	beq.n	800d91c <HAL_UART_IRQHandler+0x68c>
 800d8fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d906:	2b00      	cmp	r3, #0
 800d908:	d008      	beq.n	800d91c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d912:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f001 fa6e 	bl	800edf6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d91a:	e051      	b.n	800d9c0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d91c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d924:	2b00      	cmp	r3, #0
 800d926:	d014      	beq.n	800d952 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d92c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d930:	2b00      	cmp	r3, #0
 800d932:	d105      	bne.n	800d940 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d938:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d008      	beq.n	800d952 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d944:	2b00      	cmp	r3, #0
 800d946:	d03a      	beq.n	800d9be <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	4798      	blx	r3
    }
    return;
 800d950:	e035      	b.n	800d9be <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d009      	beq.n	800d972 <HAL_UART_IRQHandler+0x6e2>
 800d95e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d966:	2b00      	cmp	r3, #0
 800d968:	d003      	beq.n	800d972 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f001 fa18 	bl	800eda0 <UART_EndTransmit_IT>
    return;
 800d970:	e026      	b.n	800d9c0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d976:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d009      	beq.n	800d992 <HAL_UART_IRQHandler+0x702>
 800d97e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d982:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d986:	2b00      	cmp	r3, #0
 800d988:	d003      	beq.n	800d992 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f001 fa47 	bl	800ee1e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d990:	e016      	b.n	800d9c0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d996:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d010      	beq.n	800d9c0 <HAL_UART_IRQHandler+0x730>
 800d99e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	da0c      	bge.n	800d9c0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f001 fa2f 	bl	800ee0a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d9ac:	e008      	b.n	800d9c0 <HAL_UART_IRQHandler+0x730>
      return;
 800d9ae:	bf00      	nop
 800d9b0:	e006      	b.n	800d9c0 <HAL_UART_IRQHandler+0x730>
    return;
 800d9b2:	bf00      	nop
 800d9b4:	e004      	b.n	800d9c0 <HAL_UART_IRQHandler+0x730>
      return;
 800d9b6:	bf00      	nop
 800d9b8:	e002      	b.n	800d9c0 <HAL_UART_IRQHandler+0x730>
      return;
 800d9ba:	bf00      	nop
 800d9bc:	e000      	b.n	800d9c0 <HAL_UART_IRQHandler+0x730>
    return;
 800d9be:	bf00      	nop
  }
}
 800d9c0:	37e8      	adds	r7, #232	; 0xe8
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop
 800d9c8:	effffffe 	.word	0xeffffffe

0800d9cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b083      	sub	sp, #12
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d9d4:	bf00      	nop
 800d9d6:	370c      	adds	r7, #12
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr

0800d9e0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b083      	sub	sp, #12
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d9e8:	bf00      	nop
 800d9ea:	370c      	adds	r7, #12
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f2:	4770      	bx	lr

0800d9f4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b083      	sub	sp, #12
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d9fc:	bf00      	nop
 800d9fe:	370c      	adds	r7, #12
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr

0800da08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800da08:	b480      	push	{r7}
 800da0a:	b083      	sub	sp, #12
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800da10:	bf00      	nop
 800da12:	370c      	adds	r7, #12
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800da1c:	b5b0      	push	{r4, r5, r7, lr}
 800da1e:	b08e      	sub	sp, #56	; 0x38
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800da24:	2300      	movs	r3, #0
 800da26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	689a      	ldr	r2, [r3, #8]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	691b      	ldr	r3, [r3, #16]
 800da32:	431a      	orrs	r2, r3
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	695b      	ldr	r3, [r3, #20]
 800da38:	431a      	orrs	r2, r3
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	69db      	ldr	r3, [r3, #28]
 800da3e:	4313      	orrs	r3, r2
 800da40:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	4bbf      	ldr	r3, [pc, #764]	; (800dd48 <UART_SetConfig+0x32c>)
 800da4a:	4013      	ands	r3, r2
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	6812      	ldr	r2, [r2, #0]
 800da50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800da52:	430b      	orrs	r3, r1
 800da54:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	685b      	ldr	r3, [r3, #4]
 800da5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	68da      	ldr	r2, [r3, #12]
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	430a      	orrs	r2, r1
 800da6a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	699b      	ldr	r3, [r3, #24]
 800da70:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	4ab5      	ldr	r2, [pc, #724]	; (800dd4c <UART_SetConfig+0x330>)
 800da78:	4293      	cmp	r3, r2
 800da7a:	d004      	beq.n	800da86 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6a1b      	ldr	r3, [r3, #32]
 800da80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da82:	4313      	orrs	r3, r2
 800da84:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	689a      	ldr	r2, [r3, #8]
 800da8c:	4bb0      	ldr	r3, [pc, #704]	; (800dd50 <UART_SetConfig+0x334>)
 800da8e:	4013      	ands	r3, r2
 800da90:	687a      	ldr	r2, [r7, #4]
 800da92:	6812      	ldr	r2, [r2, #0]
 800da94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800da96:	430b      	orrs	r3, r1
 800da98:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daa0:	f023 010f 	bic.w	r1, r3, #15
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	430a      	orrs	r2, r1
 800daae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4aa7      	ldr	r2, [pc, #668]	; (800dd54 <UART_SetConfig+0x338>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d176      	bne.n	800dba8 <UART_SetConfig+0x18c>
 800daba:	4ba7      	ldr	r3, [pc, #668]	; (800dd58 <UART_SetConfig+0x33c>)
 800dabc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dabe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dac2:	2b28      	cmp	r3, #40	; 0x28
 800dac4:	d86c      	bhi.n	800dba0 <UART_SetConfig+0x184>
 800dac6:	a201      	add	r2, pc, #4	; (adr r2, 800dacc <UART_SetConfig+0xb0>)
 800dac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dacc:	0800db71 	.word	0x0800db71
 800dad0:	0800dba1 	.word	0x0800dba1
 800dad4:	0800dba1 	.word	0x0800dba1
 800dad8:	0800dba1 	.word	0x0800dba1
 800dadc:	0800dba1 	.word	0x0800dba1
 800dae0:	0800dba1 	.word	0x0800dba1
 800dae4:	0800dba1 	.word	0x0800dba1
 800dae8:	0800dba1 	.word	0x0800dba1
 800daec:	0800db79 	.word	0x0800db79
 800daf0:	0800dba1 	.word	0x0800dba1
 800daf4:	0800dba1 	.word	0x0800dba1
 800daf8:	0800dba1 	.word	0x0800dba1
 800dafc:	0800dba1 	.word	0x0800dba1
 800db00:	0800dba1 	.word	0x0800dba1
 800db04:	0800dba1 	.word	0x0800dba1
 800db08:	0800dba1 	.word	0x0800dba1
 800db0c:	0800db81 	.word	0x0800db81
 800db10:	0800dba1 	.word	0x0800dba1
 800db14:	0800dba1 	.word	0x0800dba1
 800db18:	0800dba1 	.word	0x0800dba1
 800db1c:	0800dba1 	.word	0x0800dba1
 800db20:	0800dba1 	.word	0x0800dba1
 800db24:	0800dba1 	.word	0x0800dba1
 800db28:	0800dba1 	.word	0x0800dba1
 800db2c:	0800db89 	.word	0x0800db89
 800db30:	0800dba1 	.word	0x0800dba1
 800db34:	0800dba1 	.word	0x0800dba1
 800db38:	0800dba1 	.word	0x0800dba1
 800db3c:	0800dba1 	.word	0x0800dba1
 800db40:	0800dba1 	.word	0x0800dba1
 800db44:	0800dba1 	.word	0x0800dba1
 800db48:	0800dba1 	.word	0x0800dba1
 800db4c:	0800db91 	.word	0x0800db91
 800db50:	0800dba1 	.word	0x0800dba1
 800db54:	0800dba1 	.word	0x0800dba1
 800db58:	0800dba1 	.word	0x0800dba1
 800db5c:	0800dba1 	.word	0x0800dba1
 800db60:	0800dba1 	.word	0x0800dba1
 800db64:	0800dba1 	.word	0x0800dba1
 800db68:	0800dba1 	.word	0x0800dba1
 800db6c:	0800db99 	.word	0x0800db99
 800db70:	2301      	movs	r3, #1
 800db72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db76:	e222      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800db78:	2304      	movs	r3, #4
 800db7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db7e:	e21e      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800db80:	2308      	movs	r3, #8
 800db82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db86:	e21a      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800db88:	2310      	movs	r3, #16
 800db8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db8e:	e216      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800db90:	2320      	movs	r3, #32
 800db92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db96:	e212      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800db98:	2340      	movs	r3, #64	; 0x40
 800db9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db9e:	e20e      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dba0:	2380      	movs	r3, #128	; 0x80
 800dba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dba6:	e20a      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4a6b      	ldr	r2, [pc, #428]	; (800dd5c <UART_SetConfig+0x340>)
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d130      	bne.n	800dc14 <UART_SetConfig+0x1f8>
 800dbb2:	4b69      	ldr	r3, [pc, #420]	; (800dd58 <UART_SetConfig+0x33c>)
 800dbb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbb6:	f003 0307 	and.w	r3, r3, #7
 800dbba:	2b05      	cmp	r3, #5
 800dbbc:	d826      	bhi.n	800dc0c <UART_SetConfig+0x1f0>
 800dbbe:	a201      	add	r2, pc, #4	; (adr r2, 800dbc4 <UART_SetConfig+0x1a8>)
 800dbc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbc4:	0800dbdd 	.word	0x0800dbdd
 800dbc8:	0800dbe5 	.word	0x0800dbe5
 800dbcc:	0800dbed 	.word	0x0800dbed
 800dbd0:	0800dbf5 	.word	0x0800dbf5
 800dbd4:	0800dbfd 	.word	0x0800dbfd
 800dbd8:	0800dc05 	.word	0x0800dc05
 800dbdc:	2300      	movs	r3, #0
 800dbde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dbe2:	e1ec      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dbe4:	2304      	movs	r3, #4
 800dbe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dbea:	e1e8      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dbec:	2308      	movs	r3, #8
 800dbee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dbf2:	e1e4      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dbf4:	2310      	movs	r3, #16
 800dbf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dbfa:	e1e0      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dbfc:	2320      	movs	r3, #32
 800dbfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc02:	e1dc      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dc04:	2340      	movs	r3, #64	; 0x40
 800dc06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc0a:	e1d8      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dc0c:	2380      	movs	r3, #128	; 0x80
 800dc0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc12:	e1d4      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	4a51      	ldr	r2, [pc, #324]	; (800dd60 <UART_SetConfig+0x344>)
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	d130      	bne.n	800dc80 <UART_SetConfig+0x264>
 800dc1e:	4b4e      	ldr	r3, [pc, #312]	; (800dd58 <UART_SetConfig+0x33c>)
 800dc20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc22:	f003 0307 	and.w	r3, r3, #7
 800dc26:	2b05      	cmp	r3, #5
 800dc28:	d826      	bhi.n	800dc78 <UART_SetConfig+0x25c>
 800dc2a:	a201      	add	r2, pc, #4	; (adr r2, 800dc30 <UART_SetConfig+0x214>)
 800dc2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc30:	0800dc49 	.word	0x0800dc49
 800dc34:	0800dc51 	.word	0x0800dc51
 800dc38:	0800dc59 	.word	0x0800dc59
 800dc3c:	0800dc61 	.word	0x0800dc61
 800dc40:	0800dc69 	.word	0x0800dc69
 800dc44:	0800dc71 	.word	0x0800dc71
 800dc48:	2300      	movs	r3, #0
 800dc4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc4e:	e1b6      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dc50:	2304      	movs	r3, #4
 800dc52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc56:	e1b2      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dc58:	2308      	movs	r3, #8
 800dc5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc5e:	e1ae      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dc60:	2310      	movs	r3, #16
 800dc62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc66:	e1aa      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dc68:	2320      	movs	r3, #32
 800dc6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc6e:	e1a6      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dc70:	2340      	movs	r3, #64	; 0x40
 800dc72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc76:	e1a2      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dc78:	2380      	movs	r3, #128	; 0x80
 800dc7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc7e:	e19e      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a37      	ldr	r2, [pc, #220]	; (800dd64 <UART_SetConfig+0x348>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d130      	bne.n	800dcec <UART_SetConfig+0x2d0>
 800dc8a:	4b33      	ldr	r3, [pc, #204]	; (800dd58 <UART_SetConfig+0x33c>)
 800dc8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc8e:	f003 0307 	and.w	r3, r3, #7
 800dc92:	2b05      	cmp	r3, #5
 800dc94:	d826      	bhi.n	800dce4 <UART_SetConfig+0x2c8>
 800dc96:	a201      	add	r2, pc, #4	; (adr r2, 800dc9c <UART_SetConfig+0x280>)
 800dc98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc9c:	0800dcb5 	.word	0x0800dcb5
 800dca0:	0800dcbd 	.word	0x0800dcbd
 800dca4:	0800dcc5 	.word	0x0800dcc5
 800dca8:	0800dccd 	.word	0x0800dccd
 800dcac:	0800dcd5 	.word	0x0800dcd5
 800dcb0:	0800dcdd 	.word	0x0800dcdd
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dcba:	e180      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dcbc:	2304      	movs	r3, #4
 800dcbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dcc2:	e17c      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dcc4:	2308      	movs	r3, #8
 800dcc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dcca:	e178      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dccc:	2310      	movs	r3, #16
 800dcce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dcd2:	e174      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dcd4:	2320      	movs	r3, #32
 800dcd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dcda:	e170      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dcdc:	2340      	movs	r3, #64	; 0x40
 800dcde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dce2:	e16c      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dce4:	2380      	movs	r3, #128	; 0x80
 800dce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dcea:	e168      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a1d      	ldr	r2, [pc, #116]	; (800dd68 <UART_SetConfig+0x34c>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d142      	bne.n	800dd7c <UART_SetConfig+0x360>
 800dcf6:	4b18      	ldr	r3, [pc, #96]	; (800dd58 <UART_SetConfig+0x33c>)
 800dcf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcfa:	f003 0307 	and.w	r3, r3, #7
 800dcfe:	2b05      	cmp	r3, #5
 800dd00:	d838      	bhi.n	800dd74 <UART_SetConfig+0x358>
 800dd02:	a201      	add	r2, pc, #4	; (adr r2, 800dd08 <UART_SetConfig+0x2ec>)
 800dd04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd08:	0800dd21 	.word	0x0800dd21
 800dd0c:	0800dd29 	.word	0x0800dd29
 800dd10:	0800dd31 	.word	0x0800dd31
 800dd14:	0800dd39 	.word	0x0800dd39
 800dd18:	0800dd41 	.word	0x0800dd41
 800dd1c:	0800dd6d 	.word	0x0800dd6d
 800dd20:	2300      	movs	r3, #0
 800dd22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd26:	e14a      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dd28:	2304      	movs	r3, #4
 800dd2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd2e:	e146      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dd30:	2308      	movs	r3, #8
 800dd32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd36:	e142      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dd38:	2310      	movs	r3, #16
 800dd3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd3e:	e13e      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dd40:	2320      	movs	r3, #32
 800dd42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd46:	e13a      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dd48:	cfff69f3 	.word	0xcfff69f3
 800dd4c:	58000c00 	.word	0x58000c00
 800dd50:	11fff4ff 	.word	0x11fff4ff
 800dd54:	40011000 	.word	0x40011000
 800dd58:	58024400 	.word	0x58024400
 800dd5c:	40004400 	.word	0x40004400
 800dd60:	40004800 	.word	0x40004800
 800dd64:	40004c00 	.word	0x40004c00
 800dd68:	40005000 	.word	0x40005000
 800dd6c:	2340      	movs	r3, #64	; 0x40
 800dd6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd72:	e124      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dd74:	2380      	movs	r3, #128	; 0x80
 800dd76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd7a:	e120      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4acc      	ldr	r2, [pc, #816]	; (800e0b4 <UART_SetConfig+0x698>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d176      	bne.n	800de74 <UART_SetConfig+0x458>
 800dd86:	4bcc      	ldr	r3, [pc, #816]	; (800e0b8 <UART_SetConfig+0x69c>)
 800dd88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd8e:	2b28      	cmp	r3, #40	; 0x28
 800dd90:	d86c      	bhi.n	800de6c <UART_SetConfig+0x450>
 800dd92:	a201      	add	r2, pc, #4	; (adr r2, 800dd98 <UART_SetConfig+0x37c>)
 800dd94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd98:	0800de3d 	.word	0x0800de3d
 800dd9c:	0800de6d 	.word	0x0800de6d
 800dda0:	0800de6d 	.word	0x0800de6d
 800dda4:	0800de6d 	.word	0x0800de6d
 800dda8:	0800de6d 	.word	0x0800de6d
 800ddac:	0800de6d 	.word	0x0800de6d
 800ddb0:	0800de6d 	.word	0x0800de6d
 800ddb4:	0800de6d 	.word	0x0800de6d
 800ddb8:	0800de45 	.word	0x0800de45
 800ddbc:	0800de6d 	.word	0x0800de6d
 800ddc0:	0800de6d 	.word	0x0800de6d
 800ddc4:	0800de6d 	.word	0x0800de6d
 800ddc8:	0800de6d 	.word	0x0800de6d
 800ddcc:	0800de6d 	.word	0x0800de6d
 800ddd0:	0800de6d 	.word	0x0800de6d
 800ddd4:	0800de6d 	.word	0x0800de6d
 800ddd8:	0800de4d 	.word	0x0800de4d
 800dddc:	0800de6d 	.word	0x0800de6d
 800dde0:	0800de6d 	.word	0x0800de6d
 800dde4:	0800de6d 	.word	0x0800de6d
 800dde8:	0800de6d 	.word	0x0800de6d
 800ddec:	0800de6d 	.word	0x0800de6d
 800ddf0:	0800de6d 	.word	0x0800de6d
 800ddf4:	0800de6d 	.word	0x0800de6d
 800ddf8:	0800de55 	.word	0x0800de55
 800ddfc:	0800de6d 	.word	0x0800de6d
 800de00:	0800de6d 	.word	0x0800de6d
 800de04:	0800de6d 	.word	0x0800de6d
 800de08:	0800de6d 	.word	0x0800de6d
 800de0c:	0800de6d 	.word	0x0800de6d
 800de10:	0800de6d 	.word	0x0800de6d
 800de14:	0800de6d 	.word	0x0800de6d
 800de18:	0800de5d 	.word	0x0800de5d
 800de1c:	0800de6d 	.word	0x0800de6d
 800de20:	0800de6d 	.word	0x0800de6d
 800de24:	0800de6d 	.word	0x0800de6d
 800de28:	0800de6d 	.word	0x0800de6d
 800de2c:	0800de6d 	.word	0x0800de6d
 800de30:	0800de6d 	.word	0x0800de6d
 800de34:	0800de6d 	.word	0x0800de6d
 800de38:	0800de65 	.word	0x0800de65
 800de3c:	2301      	movs	r3, #1
 800de3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de42:	e0bc      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800de44:	2304      	movs	r3, #4
 800de46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de4a:	e0b8      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800de4c:	2308      	movs	r3, #8
 800de4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de52:	e0b4      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800de54:	2310      	movs	r3, #16
 800de56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de5a:	e0b0      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800de5c:	2320      	movs	r3, #32
 800de5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de62:	e0ac      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800de64:	2340      	movs	r3, #64	; 0x40
 800de66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de6a:	e0a8      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800de6c:	2380      	movs	r3, #128	; 0x80
 800de6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de72:	e0a4      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4a90      	ldr	r2, [pc, #576]	; (800e0bc <UART_SetConfig+0x6a0>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d130      	bne.n	800dee0 <UART_SetConfig+0x4c4>
 800de7e:	4b8e      	ldr	r3, [pc, #568]	; (800e0b8 <UART_SetConfig+0x69c>)
 800de80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de82:	f003 0307 	and.w	r3, r3, #7
 800de86:	2b05      	cmp	r3, #5
 800de88:	d826      	bhi.n	800ded8 <UART_SetConfig+0x4bc>
 800de8a:	a201      	add	r2, pc, #4	; (adr r2, 800de90 <UART_SetConfig+0x474>)
 800de8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de90:	0800dea9 	.word	0x0800dea9
 800de94:	0800deb1 	.word	0x0800deb1
 800de98:	0800deb9 	.word	0x0800deb9
 800de9c:	0800dec1 	.word	0x0800dec1
 800dea0:	0800dec9 	.word	0x0800dec9
 800dea4:	0800ded1 	.word	0x0800ded1
 800dea8:	2300      	movs	r3, #0
 800deaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800deae:	e086      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800deb0:	2304      	movs	r3, #4
 800deb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800deb6:	e082      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800deb8:	2308      	movs	r3, #8
 800deba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800debe:	e07e      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dec0:	2310      	movs	r3, #16
 800dec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dec6:	e07a      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dec8:	2320      	movs	r3, #32
 800deca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dece:	e076      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800ded0:	2340      	movs	r3, #64	; 0x40
 800ded2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ded6:	e072      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800ded8:	2380      	movs	r3, #128	; 0x80
 800deda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dede:	e06e      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4a76      	ldr	r2, [pc, #472]	; (800e0c0 <UART_SetConfig+0x6a4>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d130      	bne.n	800df4c <UART_SetConfig+0x530>
 800deea:	4b73      	ldr	r3, [pc, #460]	; (800e0b8 <UART_SetConfig+0x69c>)
 800deec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800deee:	f003 0307 	and.w	r3, r3, #7
 800def2:	2b05      	cmp	r3, #5
 800def4:	d826      	bhi.n	800df44 <UART_SetConfig+0x528>
 800def6:	a201      	add	r2, pc, #4	; (adr r2, 800defc <UART_SetConfig+0x4e0>)
 800def8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800defc:	0800df15 	.word	0x0800df15
 800df00:	0800df1d 	.word	0x0800df1d
 800df04:	0800df25 	.word	0x0800df25
 800df08:	0800df2d 	.word	0x0800df2d
 800df0c:	0800df35 	.word	0x0800df35
 800df10:	0800df3d 	.word	0x0800df3d
 800df14:	2300      	movs	r3, #0
 800df16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df1a:	e050      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800df1c:	2304      	movs	r3, #4
 800df1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df22:	e04c      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800df24:	2308      	movs	r3, #8
 800df26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df2a:	e048      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800df2c:	2310      	movs	r3, #16
 800df2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df32:	e044      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800df34:	2320      	movs	r3, #32
 800df36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df3a:	e040      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800df3c:	2340      	movs	r3, #64	; 0x40
 800df3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df42:	e03c      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800df44:	2380      	movs	r3, #128	; 0x80
 800df46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df4a:	e038      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4a5c      	ldr	r2, [pc, #368]	; (800e0c4 <UART_SetConfig+0x6a8>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d130      	bne.n	800dfb8 <UART_SetConfig+0x59c>
 800df56:	4b58      	ldr	r3, [pc, #352]	; (800e0b8 <UART_SetConfig+0x69c>)
 800df58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df5a:	f003 0307 	and.w	r3, r3, #7
 800df5e:	2b05      	cmp	r3, #5
 800df60:	d826      	bhi.n	800dfb0 <UART_SetConfig+0x594>
 800df62:	a201      	add	r2, pc, #4	; (adr r2, 800df68 <UART_SetConfig+0x54c>)
 800df64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df68:	0800df81 	.word	0x0800df81
 800df6c:	0800df89 	.word	0x0800df89
 800df70:	0800df91 	.word	0x0800df91
 800df74:	0800df99 	.word	0x0800df99
 800df78:	0800dfa1 	.word	0x0800dfa1
 800df7c:	0800dfa9 	.word	0x0800dfa9
 800df80:	2302      	movs	r3, #2
 800df82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df86:	e01a      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800df88:	2304      	movs	r3, #4
 800df8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df8e:	e016      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800df90:	2308      	movs	r3, #8
 800df92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df96:	e012      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800df98:	2310      	movs	r3, #16
 800df9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df9e:	e00e      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dfa0:	2320      	movs	r3, #32
 800dfa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dfa6:	e00a      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dfa8:	2340      	movs	r3, #64	; 0x40
 800dfaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dfae:	e006      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dfb0:	2380      	movs	r3, #128	; 0x80
 800dfb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dfb6:	e002      	b.n	800dfbe <UART_SetConfig+0x5a2>
 800dfb8:	2380      	movs	r3, #128	; 0x80
 800dfba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4a40      	ldr	r2, [pc, #256]	; (800e0c4 <UART_SetConfig+0x6a8>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	f040 80ef 	bne.w	800e1a8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dfca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dfce:	2b20      	cmp	r3, #32
 800dfd0:	dc46      	bgt.n	800e060 <UART_SetConfig+0x644>
 800dfd2:	2b02      	cmp	r3, #2
 800dfd4:	f2c0 8081 	blt.w	800e0da <UART_SetConfig+0x6be>
 800dfd8:	3b02      	subs	r3, #2
 800dfda:	2b1e      	cmp	r3, #30
 800dfdc:	d87d      	bhi.n	800e0da <UART_SetConfig+0x6be>
 800dfde:	a201      	add	r2, pc, #4	; (adr r2, 800dfe4 <UART_SetConfig+0x5c8>)
 800dfe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfe4:	0800e067 	.word	0x0800e067
 800dfe8:	0800e0db 	.word	0x0800e0db
 800dfec:	0800e06f 	.word	0x0800e06f
 800dff0:	0800e0db 	.word	0x0800e0db
 800dff4:	0800e0db 	.word	0x0800e0db
 800dff8:	0800e0db 	.word	0x0800e0db
 800dffc:	0800e07f 	.word	0x0800e07f
 800e000:	0800e0db 	.word	0x0800e0db
 800e004:	0800e0db 	.word	0x0800e0db
 800e008:	0800e0db 	.word	0x0800e0db
 800e00c:	0800e0db 	.word	0x0800e0db
 800e010:	0800e0db 	.word	0x0800e0db
 800e014:	0800e0db 	.word	0x0800e0db
 800e018:	0800e0db 	.word	0x0800e0db
 800e01c:	0800e08f 	.word	0x0800e08f
 800e020:	0800e0db 	.word	0x0800e0db
 800e024:	0800e0db 	.word	0x0800e0db
 800e028:	0800e0db 	.word	0x0800e0db
 800e02c:	0800e0db 	.word	0x0800e0db
 800e030:	0800e0db 	.word	0x0800e0db
 800e034:	0800e0db 	.word	0x0800e0db
 800e038:	0800e0db 	.word	0x0800e0db
 800e03c:	0800e0db 	.word	0x0800e0db
 800e040:	0800e0db 	.word	0x0800e0db
 800e044:	0800e0db 	.word	0x0800e0db
 800e048:	0800e0db 	.word	0x0800e0db
 800e04c:	0800e0db 	.word	0x0800e0db
 800e050:	0800e0db 	.word	0x0800e0db
 800e054:	0800e0db 	.word	0x0800e0db
 800e058:	0800e0db 	.word	0x0800e0db
 800e05c:	0800e0cd 	.word	0x0800e0cd
 800e060:	2b40      	cmp	r3, #64	; 0x40
 800e062:	d036      	beq.n	800e0d2 <UART_SetConfig+0x6b6>
 800e064:	e039      	b.n	800e0da <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e066:	f7fc fe93 	bl	800ad90 <HAL_RCCEx_GetD3PCLK1Freq>
 800e06a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e06c:	e03b      	b.n	800e0e6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e06e:	f107 0314 	add.w	r3, r7, #20
 800e072:	4618      	mov	r0, r3
 800e074:	f7fc fea2 	bl	800adbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e078:	69bb      	ldr	r3, [r7, #24]
 800e07a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e07c:	e033      	b.n	800e0e6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e07e:	f107 0308 	add.w	r3, r7, #8
 800e082:	4618      	mov	r0, r3
 800e084:	f7fc ffee 	bl	800b064 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e08c:	e02b      	b.n	800e0e6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e08e:	4b0a      	ldr	r3, [pc, #40]	; (800e0b8 <UART_SetConfig+0x69c>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f003 0320 	and.w	r3, r3, #32
 800e096:	2b00      	cmp	r3, #0
 800e098:	d009      	beq.n	800e0ae <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e09a:	4b07      	ldr	r3, [pc, #28]	; (800e0b8 <UART_SetConfig+0x69c>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	08db      	lsrs	r3, r3, #3
 800e0a0:	f003 0303 	and.w	r3, r3, #3
 800e0a4:	4a08      	ldr	r2, [pc, #32]	; (800e0c8 <UART_SetConfig+0x6ac>)
 800e0a6:	fa22 f303 	lsr.w	r3, r2, r3
 800e0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e0ac:	e01b      	b.n	800e0e6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800e0ae:	4b06      	ldr	r3, [pc, #24]	; (800e0c8 <UART_SetConfig+0x6ac>)
 800e0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e0b2:	e018      	b.n	800e0e6 <UART_SetConfig+0x6ca>
 800e0b4:	40011400 	.word	0x40011400
 800e0b8:	58024400 	.word	0x58024400
 800e0bc:	40007800 	.word	0x40007800
 800e0c0:	40007c00 	.word	0x40007c00
 800e0c4:	58000c00 	.word	0x58000c00
 800e0c8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e0cc:	4bc4      	ldr	r3, [pc, #784]	; (800e3e0 <UART_SetConfig+0x9c4>)
 800e0ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e0d0:	e009      	b.n	800e0e6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e0d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e0d8:	e005      	b.n	800e0e6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e0de:	2301      	movs	r3, #1
 800e0e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e0e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	f000 81da 	beq.w	800e4a2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f2:	4abc      	ldr	r2, [pc, #752]	; (800e3e4 <UART_SetConfig+0x9c8>)
 800e0f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0f8:	461a      	mov	r2, r3
 800e0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e100:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	685a      	ldr	r2, [r3, #4]
 800e106:	4613      	mov	r3, r2
 800e108:	005b      	lsls	r3, r3, #1
 800e10a:	4413      	add	r3, r2
 800e10c:	6a3a      	ldr	r2, [r7, #32]
 800e10e:	429a      	cmp	r2, r3
 800e110:	d305      	bcc.n	800e11e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e118:	6a3a      	ldr	r2, [r7, #32]
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d903      	bls.n	800e126 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800e11e:	2301      	movs	r3, #1
 800e120:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e124:	e1bd      	b.n	800e4a2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e128:	4618      	mov	r0, r3
 800e12a:	f04f 0100 	mov.w	r1, #0
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e132:	4aac      	ldr	r2, [pc, #688]	; (800e3e4 <UART_SetConfig+0x9c8>)
 800e134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e138:	b29a      	uxth	r2, r3
 800e13a:	f04f 0300 	mov.w	r3, #0
 800e13e:	f7f2 fae3 	bl	8000708 <__aeabi_uldivmod>
 800e142:	4602      	mov	r2, r0
 800e144:	460b      	mov	r3, r1
 800e146:	4610      	mov	r0, r2
 800e148:	4619      	mov	r1, r3
 800e14a:	f04f 0200 	mov.w	r2, #0
 800e14e:	f04f 0300 	mov.w	r3, #0
 800e152:	020b      	lsls	r3, r1, #8
 800e154:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e158:	0202      	lsls	r2, r0, #8
 800e15a:	6879      	ldr	r1, [r7, #4]
 800e15c:	6849      	ldr	r1, [r1, #4]
 800e15e:	0849      	lsrs	r1, r1, #1
 800e160:	4608      	mov	r0, r1
 800e162:	f04f 0100 	mov.w	r1, #0
 800e166:	1814      	adds	r4, r2, r0
 800e168:	eb43 0501 	adc.w	r5, r3, r1
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	685b      	ldr	r3, [r3, #4]
 800e170:	461a      	mov	r2, r3
 800e172:	f04f 0300 	mov.w	r3, #0
 800e176:	4620      	mov	r0, r4
 800e178:	4629      	mov	r1, r5
 800e17a:	f7f2 fac5 	bl	8000708 <__aeabi_uldivmod>
 800e17e:	4602      	mov	r2, r0
 800e180:	460b      	mov	r3, r1
 800e182:	4613      	mov	r3, r2
 800e184:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e188:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e18c:	d308      	bcc.n	800e1a0 <UART_SetConfig+0x784>
 800e18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e190:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e194:	d204      	bcs.n	800e1a0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e19c:	60da      	str	r2, [r3, #12]
 800e19e:	e180      	b.n	800e4a2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e1a6:	e17c      	b.n	800e4a2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	69db      	ldr	r3, [r3, #28]
 800e1ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1b0:	f040 80be 	bne.w	800e330 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800e1b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e1b8:	2b20      	cmp	r3, #32
 800e1ba:	dc49      	bgt.n	800e250 <UART_SetConfig+0x834>
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	db7c      	blt.n	800e2ba <UART_SetConfig+0x89e>
 800e1c0:	2b20      	cmp	r3, #32
 800e1c2:	d87a      	bhi.n	800e2ba <UART_SetConfig+0x89e>
 800e1c4:	a201      	add	r2, pc, #4	; (adr r2, 800e1cc <UART_SetConfig+0x7b0>)
 800e1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ca:	bf00      	nop
 800e1cc:	0800e257 	.word	0x0800e257
 800e1d0:	0800e25f 	.word	0x0800e25f
 800e1d4:	0800e2bb 	.word	0x0800e2bb
 800e1d8:	0800e2bb 	.word	0x0800e2bb
 800e1dc:	0800e267 	.word	0x0800e267
 800e1e0:	0800e2bb 	.word	0x0800e2bb
 800e1e4:	0800e2bb 	.word	0x0800e2bb
 800e1e8:	0800e2bb 	.word	0x0800e2bb
 800e1ec:	0800e277 	.word	0x0800e277
 800e1f0:	0800e2bb 	.word	0x0800e2bb
 800e1f4:	0800e2bb 	.word	0x0800e2bb
 800e1f8:	0800e2bb 	.word	0x0800e2bb
 800e1fc:	0800e2bb 	.word	0x0800e2bb
 800e200:	0800e2bb 	.word	0x0800e2bb
 800e204:	0800e2bb 	.word	0x0800e2bb
 800e208:	0800e2bb 	.word	0x0800e2bb
 800e20c:	0800e287 	.word	0x0800e287
 800e210:	0800e2bb 	.word	0x0800e2bb
 800e214:	0800e2bb 	.word	0x0800e2bb
 800e218:	0800e2bb 	.word	0x0800e2bb
 800e21c:	0800e2bb 	.word	0x0800e2bb
 800e220:	0800e2bb 	.word	0x0800e2bb
 800e224:	0800e2bb 	.word	0x0800e2bb
 800e228:	0800e2bb 	.word	0x0800e2bb
 800e22c:	0800e2bb 	.word	0x0800e2bb
 800e230:	0800e2bb 	.word	0x0800e2bb
 800e234:	0800e2bb 	.word	0x0800e2bb
 800e238:	0800e2bb 	.word	0x0800e2bb
 800e23c:	0800e2bb 	.word	0x0800e2bb
 800e240:	0800e2bb 	.word	0x0800e2bb
 800e244:	0800e2bb 	.word	0x0800e2bb
 800e248:	0800e2bb 	.word	0x0800e2bb
 800e24c:	0800e2ad 	.word	0x0800e2ad
 800e250:	2b40      	cmp	r3, #64	; 0x40
 800e252:	d02e      	beq.n	800e2b2 <UART_SetConfig+0x896>
 800e254:	e031      	b.n	800e2ba <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e256:	f7fb fe2f 	bl	8009eb8 <HAL_RCC_GetPCLK1Freq>
 800e25a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e25c:	e033      	b.n	800e2c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e25e:	f7fb fe41 	bl	8009ee4 <HAL_RCC_GetPCLK2Freq>
 800e262:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e264:	e02f      	b.n	800e2c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e266:	f107 0314 	add.w	r3, r7, #20
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7fc fda6 	bl	800adbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e270:	69bb      	ldr	r3, [r7, #24]
 800e272:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e274:	e027      	b.n	800e2c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e276:	f107 0308 	add.w	r3, r7, #8
 800e27a:	4618      	mov	r0, r3
 800e27c:	f7fc fef2 	bl	800b064 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e284:	e01f      	b.n	800e2c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e286:	4b58      	ldr	r3, [pc, #352]	; (800e3e8 <UART_SetConfig+0x9cc>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f003 0320 	and.w	r3, r3, #32
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d009      	beq.n	800e2a6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e292:	4b55      	ldr	r3, [pc, #340]	; (800e3e8 <UART_SetConfig+0x9cc>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	08db      	lsrs	r3, r3, #3
 800e298:	f003 0303 	and.w	r3, r3, #3
 800e29c:	4a53      	ldr	r2, [pc, #332]	; (800e3ec <UART_SetConfig+0x9d0>)
 800e29e:	fa22 f303 	lsr.w	r3, r2, r3
 800e2a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e2a4:	e00f      	b.n	800e2c6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800e2a6:	4b51      	ldr	r3, [pc, #324]	; (800e3ec <UART_SetConfig+0x9d0>)
 800e2a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e2aa:	e00c      	b.n	800e2c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e2ac:	4b4c      	ldr	r3, [pc, #304]	; (800e3e0 <UART_SetConfig+0x9c4>)
 800e2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e2b0:	e009      	b.n	800e2c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e2b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e2b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e2b8:	e005      	b.n	800e2c6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e2be:	2301      	movs	r3, #1
 800e2c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e2c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	f000 80ea 	beq.w	800e4a2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2d2:	4a44      	ldr	r2, [pc, #272]	; (800e3e4 <UART_SetConfig+0x9c8>)
 800e2d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2d8:	461a      	mov	r2, r3
 800e2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2e0:	005a      	lsls	r2, r3, #1
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	685b      	ldr	r3, [r3, #4]
 800e2e6:	085b      	lsrs	r3, r3, #1
 800e2e8:	441a      	add	r2, r3
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f6:	2b0f      	cmp	r3, #15
 800e2f8:	d916      	bls.n	800e328 <UART_SetConfig+0x90c>
 800e2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e300:	d212      	bcs.n	800e328 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e304:	b29b      	uxth	r3, r3
 800e306:	f023 030f 	bic.w	r3, r3, #15
 800e30a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e30e:	085b      	lsrs	r3, r3, #1
 800e310:	b29b      	uxth	r3, r3
 800e312:	f003 0307 	and.w	r3, r3, #7
 800e316:	b29a      	uxth	r2, r3
 800e318:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e31a:	4313      	orrs	r3, r2
 800e31c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e324:	60da      	str	r2, [r3, #12]
 800e326:	e0bc      	b.n	800e4a2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800e328:	2301      	movs	r3, #1
 800e32a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e32e:	e0b8      	b.n	800e4a2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e330:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e334:	2b20      	cmp	r3, #32
 800e336:	dc4b      	bgt.n	800e3d0 <UART_SetConfig+0x9b4>
 800e338:	2b00      	cmp	r3, #0
 800e33a:	f2c0 8087 	blt.w	800e44c <UART_SetConfig+0xa30>
 800e33e:	2b20      	cmp	r3, #32
 800e340:	f200 8084 	bhi.w	800e44c <UART_SetConfig+0xa30>
 800e344:	a201      	add	r2, pc, #4	; (adr r2, 800e34c <UART_SetConfig+0x930>)
 800e346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e34a:	bf00      	nop
 800e34c:	0800e3d7 	.word	0x0800e3d7
 800e350:	0800e3f1 	.word	0x0800e3f1
 800e354:	0800e44d 	.word	0x0800e44d
 800e358:	0800e44d 	.word	0x0800e44d
 800e35c:	0800e3f9 	.word	0x0800e3f9
 800e360:	0800e44d 	.word	0x0800e44d
 800e364:	0800e44d 	.word	0x0800e44d
 800e368:	0800e44d 	.word	0x0800e44d
 800e36c:	0800e409 	.word	0x0800e409
 800e370:	0800e44d 	.word	0x0800e44d
 800e374:	0800e44d 	.word	0x0800e44d
 800e378:	0800e44d 	.word	0x0800e44d
 800e37c:	0800e44d 	.word	0x0800e44d
 800e380:	0800e44d 	.word	0x0800e44d
 800e384:	0800e44d 	.word	0x0800e44d
 800e388:	0800e44d 	.word	0x0800e44d
 800e38c:	0800e419 	.word	0x0800e419
 800e390:	0800e44d 	.word	0x0800e44d
 800e394:	0800e44d 	.word	0x0800e44d
 800e398:	0800e44d 	.word	0x0800e44d
 800e39c:	0800e44d 	.word	0x0800e44d
 800e3a0:	0800e44d 	.word	0x0800e44d
 800e3a4:	0800e44d 	.word	0x0800e44d
 800e3a8:	0800e44d 	.word	0x0800e44d
 800e3ac:	0800e44d 	.word	0x0800e44d
 800e3b0:	0800e44d 	.word	0x0800e44d
 800e3b4:	0800e44d 	.word	0x0800e44d
 800e3b8:	0800e44d 	.word	0x0800e44d
 800e3bc:	0800e44d 	.word	0x0800e44d
 800e3c0:	0800e44d 	.word	0x0800e44d
 800e3c4:	0800e44d 	.word	0x0800e44d
 800e3c8:	0800e44d 	.word	0x0800e44d
 800e3cc:	0800e43f 	.word	0x0800e43f
 800e3d0:	2b40      	cmp	r3, #64	; 0x40
 800e3d2:	d037      	beq.n	800e444 <UART_SetConfig+0xa28>
 800e3d4:	e03a      	b.n	800e44c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e3d6:	f7fb fd6f 	bl	8009eb8 <HAL_RCC_GetPCLK1Freq>
 800e3da:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e3dc:	e03c      	b.n	800e458 <UART_SetConfig+0xa3c>
 800e3de:	bf00      	nop
 800e3e0:	003d0900 	.word	0x003d0900
 800e3e4:	08012810 	.word	0x08012810
 800e3e8:	58024400 	.word	0x58024400
 800e3ec:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e3f0:	f7fb fd78 	bl	8009ee4 <HAL_RCC_GetPCLK2Freq>
 800e3f4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e3f6:	e02f      	b.n	800e458 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3f8:	f107 0314 	add.w	r3, r7, #20
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f7fc fcdd 	bl	800adbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e402:	69bb      	ldr	r3, [r7, #24]
 800e404:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e406:	e027      	b.n	800e458 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e408:	f107 0308 	add.w	r3, r7, #8
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7fc fe29 	bl	800b064 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e416:	e01f      	b.n	800e458 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e418:	4b2c      	ldr	r3, [pc, #176]	; (800e4cc <UART_SetConfig+0xab0>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f003 0320 	and.w	r3, r3, #32
 800e420:	2b00      	cmp	r3, #0
 800e422:	d009      	beq.n	800e438 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e424:	4b29      	ldr	r3, [pc, #164]	; (800e4cc <UART_SetConfig+0xab0>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	08db      	lsrs	r3, r3, #3
 800e42a:	f003 0303 	and.w	r3, r3, #3
 800e42e:	4a28      	ldr	r2, [pc, #160]	; (800e4d0 <UART_SetConfig+0xab4>)
 800e430:	fa22 f303 	lsr.w	r3, r2, r3
 800e434:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e436:	e00f      	b.n	800e458 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800e438:	4b25      	ldr	r3, [pc, #148]	; (800e4d0 <UART_SetConfig+0xab4>)
 800e43a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e43c:	e00c      	b.n	800e458 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e43e:	4b25      	ldr	r3, [pc, #148]	; (800e4d4 <UART_SetConfig+0xab8>)
 800e440:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e442:	e009      	b.n	800e458 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e444:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e448:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e44a:	e005      	b.n	800e458 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800e44c:	2300      	movs	r3, #0
 800e44e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e450:	2301      	movs	r3, #1
 800e452:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e456:	bf00      	nop
    }

    if (pclk != 0U)
 800e458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d021      	beq.n	800e4a2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e462:	4a1d      	ldr	r2, [pc, #116]	; (800e4d8 <UART_SetConfig+0xabc>)
 800e464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e468:	461a      	mov	r2, r3
 800e46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e46c:	fbb3 f2f2 	udiv	r2, r3, r2
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	685b      	ldr	r3, [r3, #4]
 800e474:	085b      	lsrs	r3, r3, #1
 800e476:	441a      	add	r2, r3
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e480:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e484:	2b0f      	cmp	r3, #15
 800e486:	d909      	bls.n	800e49c <UART_SetConfig+0xa80>
 800e488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e48e:	d205      	bcs.n	800e49c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e492:	b29a      	uxth	r2, r3
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	60da      	str	r2, [r3, #12]
 800e49a:	e002      	b.n	800e4a2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800e49c:	2301      	movs	r3, #1
 800e49e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2201      	movs	r2, #1
 800e4ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e4be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3738      	adds	r7, #56	; 0x38
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bdb0      	pop	{r4, r5, r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	58024400 	.word	0x58024400
 800e4d0:	03d09000 	.word	0x03d09000
 800e4d4:	003d0900 	.word	0x003d0900
 800e4d8:	08012810 	.word	0x08012810

0800e4dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b083      	sub	sp, #12
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4e8:	f003 0301 	and.w	r3, r3, #1
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d00a      	beq.n	800e506 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	685b      	ldr	r3, [r3, #4]
 800e4f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	430a      	orrs	r2, r1
 800e504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e50a:	f003 0302 	and.w	r3, r3, #2
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d00a      	beq.n	800e528 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	685b      	ldr	r3, [r3, #4]
 800e518:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	430a      	orrs	r2, r1
 800e526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e52c:	f003 0304 	and.w	r3, r3, #4
 800e530:	2b00      	cmp	r3, #0
 800e532:	d00a      	beq.n	800e54a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	685b      	ldr	r3, [r3, #4]
 800e53a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	430a      	orrs	r2, r1
 800e548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e54e:	f003 0308 	and.w	r3, r3, #8
 800e552:	2b00      	cmp	r3, #0
 800e554:	d00a      	beq.n	800e56c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	685b      	ldr	r3, [r3, #4]
 800e55c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	430a      	orrs	r2, r1
 800e56a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e570:	f003 0310 	and.w	r3, r3, #16
 800e574:	2b00      	cmp	r3, #0
 800e576:	d00a      	beq.n	800e58e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	689b      	ldr	r3, [r3, #8]
 800e57e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	430a      	orrs	r2, r1
 800e58c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e592:	f003 0320 	and.w	r3, r3, #32
 800e596:	2b00      	cmp	r3, #0
 800e598:	d00a      	beq.n	800e5b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	689b      	ldr	r3, [r3, #8]
 800e5a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	430a      	orrs	r2, r1
 800e5ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d01a      	beq.n	800e5f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	430a      	orrs	r2, r1
 800e5d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e5da:	d10a      	bne.n	800e5f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	430a      	orrs	r2, r1
 800e5f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d00a      	beq.n	800e614 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	685b      	ldr	r3, [r3, #4]
 800e604:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	430a      	orrs	r2, r1
 800e612:	605a      	str	r2, [r3, #4]
  }
}
 800e614:	bf00      	nop
 800e616:	370c      	adds	r7, #12
 800e618:	46bd      	mov	sp, r7
 800e61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61e:	4770      	bx	lr

0800e620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b086      	sub	sp, #24
 800e624:	af02      	add	r7, sp, #8
 800e626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2200      	movs	r2, #0
 800e62c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e630:	f7f7 f92c 	bl	800588c <HAL_GetTick>
 800e634:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f003 0308 	and.w	r3, r3, #8
 800e640:	2b08      	cmp	r3, #8
 800e642:	d10e      	bne.n	800e662 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e644:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e648:	9300      	str	r3, [sp, #0]
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	2200      	movs	r2, #0
 800e64e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f000 f82f 	bl	800e6b6 <UART_WaitOnFlagUntilTimeout>
 800e658:	4603      	mov	r3, r0
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d001      	beq.n	800e662 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e65e:	2303      	movs	r3, #3
 800e660:	e025      	b.n	800e6ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f003 0304 	and.w	r3, r3, #4
 800e66c:	2b04      	cmp	r3, #4
 800e66e:	d10e      	bne.n	800e68e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e670:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e674:	9300      	str	r3, [sp, #0]
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	2200      	movs	r2, #0
 800e67a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 f819 	bl	800e6b6 <UART_WaitOnFlagUntilTimeout>
 800e684:	4603      	mov	r3, r0
 800e686:	2b00      	cmp	r3, #0
 800e688:	d001      	beq.n	800e68e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e68a:	2303      	movs	r3, #3
 800e68c:	e00f      	b.n	800e6ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2220      	movs	r2, #32
 800e692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2220      	movs	r2, #32
 800e69a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e6ac:	2300      	movs	r3, #0
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3710      	adds	r7, #16
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}

0800e6b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e6b6:	b580      	push	{r7, lr}
 800e6b8:	b09c      	sub	sp, #112	; 0x70
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	60f8      	str	r0, [r7, #12]
 800e6be:	60b9      	str	r1, [r7, #8]
 800e6c0:	603b      	str	r3, [r7, #0]
 800e6c2:	4613      	mov	r3, r2
 800e6c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e6c6:	e0a9      	b.n	800e81c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e6c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6ce:	f000 80a5 	beq.w	800e81c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e6d2:	f7f7 f8db 	bl	800588c <HAL_GetTick>
 800e6d6:	4602      	mov	r2, r0
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	1ad3      	subs	r3, r2, r3
 800e6dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	d302      	bcc.n	800e6e8 <UART_WaitOnFlagUntilTimeout+0x32>
 800e6e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d140      	bne.n	800e76a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6f0:	e853 3f00 	ldrex	r3, [r3]
 800e6f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e6f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e6fc:	667b      	str	r3, [r7, #100]	; 0x64
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	461a      	mov	r2, r3
 800e704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e706:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e708:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e70a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e70c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e70e:	e841 2300 	strex	r3, r2, [r1]
 800e712:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e716:	2b00      	cmp	r3, #0
 800e718:	d1e6      	bne.n	800e6e8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	3308      	adds	r3, #8
 800e720:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e724:	e853 3f00 	ldrex	r3, [r3]
 800e728:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e72c:	f023 0301 	bic.w	r3, r3, #1
 800e730:	663b      	str	r3, [r7, #96]	; 0x60
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	3308      	adds	r3, #8
 800e738:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e73a:	64ba      	str	r2, [r7, #72]	; 0x48
 800e73c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e73e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e740:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e742:	e841 2300 	strex	r3, r2, [r1]
 800e746:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d1e5      	bne.n	800e71a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2220      	movs	r2, #32
 800e752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2220      	movs	r2, #32
 800e75a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2200      	movs	r2, #0
 800e762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e766:	2303      	movs	r3, #3
 800e768:	e069      	b.n	800e83e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f003 0304 	and.w	r3, r3, #4
 800e774:	2b00      	cmp	r3, #0
 800e776:	d051      	beq.n	800e81c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	69db      	ldr	r3, [r3, #28]
 800e77e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e786:	d149      	bne.n	800e81c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e790:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79a:	e853 3f00 	ldrex	r3, [r3]
 800e79e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e7a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7b0:	637b      	str	r3, [r7, #52]	; 0x34
 800e7b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e7b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7b8:	e841 2300 	strex	r3, r2, [r1]
 800e7bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d1e6      	bne.n	800e792 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	3308      	adds	r3, #8
 800e7ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	e853 3f00 	ldrex	r3, [r3]
 800e7d2:	613b      	str	r3, [r7, #16]
   return(result);
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	f023 0301 	bic.w	r3, r3, #1
 800e7da:	66bb      	str	r3, [r7, #104]	; 0x68
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	3308      	adds	r3, #8
 800e7e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e7e4:	623a      	str	r2, [r7, #32]
 800e7e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7e8:	69f9      	ldr	r1, [r7, #28]
 800e7ea:	6a3a      	ldr	r2, [r7, #32]
 800e7ec:	e841 2300 	strex	r3, r2, [r1]
 800e7f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800e7f2:	69bb      	ldr	r3, [r7, #24]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d1e5      	bne.n	800e7c4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	2220      	movs	r2, #32
 800e7fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	2220      	movs	r2, #32
 800e804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	2220      	movs	r2, #32
 800e80c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	2200      	movs	r2, #0
 800e814:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e818:	2303      	movs	r3, #3
 800e81a:	e010      	b.n	800e83e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	69da      	ldr	r2, [r3, #28]
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	4013      	ands	r3, r2
 800e826:	68ba      	ldr	r2, [r7, #8]
 800e828:	429a      	cmp	r2, r3
 800e82a:	bf0c      	ite	eq
 800e82c:	2301      	moveq	r3, #1
 800e82e:	2300      	movne	r3, #0
 800e830:	b2db      	uxtb	r3, r3
 800e832:	461a      	mov	r2, r3
 800e834:	79fb      	ldrb	r3, [r7, #7]
 800e836:	429a      	cmp	r2, r3
 800e838:	f43f af46 	beq.w	800e6c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e83c:	2300      	movs	r3, #0
}
 800e83e:	4618      	mov	r0, r3
 800e840:	3770      	adds	r7, #112	; 0x70
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}
	...

0800e848 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b096      	sub	sp, #88	; 0x58
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	60f8      	str	r0, [r7, #12]
 800e850:	60b9      	str	r1, [r7, #8]
 800e852:	4613      	mov	r3, r2
 800e854:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	68ba      	ldr	r2, [r7, #8]
 800e85a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	88fa      	ldrh	r2, [r7, #6]
 800e860:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	2200      	movs	r2, #0
 800e868:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	2222      	movs	r2, #34	; 0x22
 800e870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d02c      	beq.n	800e8d6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e880:	4a42      	ldr	r2, [pc, #264]	; (800e98c <UART_Start_Receive_DMA+0x144>)
 800e882:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e888:	4a41      	ldr	r2, [pc, #260]	; (800e990 <UART_Start_Receive_DMA+0x148>)
 800e88a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e890:	4a40      	ldr	r2, [pc, #256]	; (800e994 <UART_Start_Receive_DMA+0x14c>)
 800e892:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e898:	2200      	movs	r2, #0
 800e89a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	3324      	adds	r3, #36	; 0x24
 800e8a6:	4619      	mov	r1, r3
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	88fb      	ldrh	r3, [r7, #6]
 800e8b0:	f7f7 fe7a 	bl	80065a8 <HAL_DMA_Start_IT>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d00d      	beq.n	800e8d6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2210      	movs	r2, #16
 800e8be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	2220      	movs	r2, #32
 800e8ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	e055      	b.n	800e982 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	2200      	movs	r2, #0
 800e8da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	691b      	ldr	r3, [r3, #16]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d018      	beq.n	800e918 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8ee:	e853 3f00 	ldrex	r3, [r3]
 800e8f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e8fa:	657b      	str	r3, [r7, #84]	; 0x54
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	461a      	mov	r2, r3
 800e902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e904:	64bb      	str	r3, [r7, #72]	; 0x48
 800e906:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e908:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e90a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e90c:	e841 2300 	strex	r3, r2, [r1]
 800e910:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e914:	2b00      	cmp	r3, #0
 800e916:	d1e6      	bne.n	800e8e6 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	3308      	adds	r3, #8
 800e91e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e922:	e853 3f00 	ldrex	r3, [r3]
 800e926:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e92a:	f043 0301 	orr.w	r3, r3, #1
 800e92e:	653b      	str	r3, [r7, #80]	; 0x50
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	3308      	adds	r3, #8
 800e936:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e938:	637a      	str	r2, [r7, #52]	; 0x34
 800e93a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e93c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e93e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e940:	e841 2300 	strex	r3, r2, [r1]
 800e944:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d1e5      	bne.n	800e918 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	3308      	adds	r3, #8
 800e952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	e853 3f00 	ldrex	r3, [r3]
 800e95a:	613b      	str	r3, [r7, #16]
   return(result);
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e962:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	3308      	adds	r3, #8
 800e96a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e96c:	623a      	str	r2, [r7, #32]
 800e96e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e970:	69f9      	ldr	r1, [r7, #28]
 800e972:	6a3a      	ldr	r2, [r7, #32]
 800e974:	e841 2300 	strex	r3, r2, [r1]
 800e978:	61bb      	str	r3, [r7, #24]
   return(result);
 800e97a:	69bb      	ldr	r3, [r7, #24]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d1e5      	bne.n	800e94c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e980:	2300      	movs	r3, #0
}
 800e982:	4618      	mov	r0, r3
 800e984:	3758      	adds	r7, #88	; 0x58
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}
 800e98a:	bf00      	nop
 800e98c:	0800eb9b 	.word	0x0800eb9b
 800e990:	0800ecbd 	.word	0x0800ecbd
 800e994:	0800ecf5 	.word	0x0800ecf5

0800e998 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e998:	b480      	push	{r7}
 800e99a:	b08f      	sub	sp, #60	; 0x3c
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9a6:	6a3b      	ldr	r3, [r7, #32]
 800e9a8:	e853 3f00 	ldrex	r3, [r3]
 800e9ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800e9ae:	69fb      	ldr	r3, [r7, #28]
 800e9b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e9b4:	637b      	str	r3, [r7, #52]	; 0x34
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e9c0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e9c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9c6:	e841 2300 	strex	r3, r2, [r1]
 800e9ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d1e6      	bne.n	800e9a0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	3308      	adds	r3, #8
 800e9d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	e853 3f00 	ldrex	r3, [r3]
 800e9e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e9e8:	633b      	str	r3, [r7, #48]	; 0x30
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	3308      	adds	r3, #8
 800e9f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9f2:	61ba      	str	r2, [r7, #24]
 800e9f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9f6:	6979      	ldr	r1, [r7, #20]
 800e9f8:	69ba      	ldr	r2, [r7, #24]
 800e9fa:	e841 2300 	strex	r3, r2, [r1]
 800e9fe:	613b      	str	r3, [r7, #16]
   return(result);
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d1e5      	bne.n	800e9d2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2220      	movs	r2, #32
 800ea0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800ea0e:	bf00      	nop
 800ea10:	373c      	adds	r7, #60	; 0x3c
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr
	...

0800ea1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b095      	sub	sp, #84	; 0x54
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea2c:	e853 3f00 	ldrex	r3, [r3]
 800ea30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ea32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ea38:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	461a      	mov	r2, r3
 800ea40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea42:	643b      	str	r3, [r7, #64]	; 0x40
 800ea44:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ea48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ea4a:	e841 2300 	strex	r3, r2, [r1]
 800ea4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ea50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d1e6      	bne.n	800ea24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	3308      	adds	r3, #8
 800ea5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea5e:	6a3b      	ldr	r3, [r7, #32]
 800ea60:	e853 3f00 	ldrex	r3, [r3]
 800ea64:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea66:	69fa      	ldr	r2, [r7, #28]
 800ea68:	4b1e      	ldr	r3, [pc, #120]	; (800eae4 <UART_EndRxTransfer+0xc8>)
 800ea6a:	4013      	ands	r3, r2
 800ea6c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	3308      	adds	r3, #8
 800ea74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea76:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ea78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea7e:	e841 2300 	strex	r3, r2, [r1]
 800ea82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ea84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d1e5      	bne.n	800ea56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea8e:	2b01      	cmp	r3, #1
 800ea90:	d118      	bne.n	800eac4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	e853 3f00 	ldrex	r3, [r3]
 800ea9e:	60bb      	str	r3, [r7, #8]
   return(result);
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	f023 0310 	bic.w	r3, r3, #16
 800eaa6:	647b      	str	r3, [r7, #68]	; 0x44
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	461a      	mov	r2, r3
 800eaae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eab0:	61bb      	str	r3, [r7, #24]
 800eab2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eab4:	6979      	ldr	r1, [r7, #20]
 800eab6:	69ba      	ldr	r2, [r7, #24]
 800eab8:	e841 2300 	strex	r3, r2, [r1]
 800eabc:	613b      	str	r3, [r7, #16]
   return(result);
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d1e6      	bne.n	800ea92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2220      	movs	r2, #32
 800eac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2200      	movs	r2, #0
 800ead0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2200      	movs	r2, #0
 800ead6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ead8:	bf00      	nop
 800eada:	3754      	adds	r7, #84	; 0x54
 800eadc:	46bd      	mov	sp, r7
 800eade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae2:	4770      	bx	lr
 800eae4:	effffffe 	.word	0xeffffffe

0800eae8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b090      	sub	sp, #64	; 0x40
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaf4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	69db      	ldr	r3, [r3, #28]
 800eafa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eafe:	d037      	beq.n	800eb70 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800eb00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb02:	2200      	movs	r2, #0
 800eb04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800eb08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	3308      	adds	r3, #8
 800eb0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb12:	e853 3f00 	ldrex	r3, [r3]
 800eb16:	623b      	str	r3, [r7, #32]
   return(result);
 800eb18:	6a3b      	ldr	r3, [r7, #32]
 800eb1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb1e:	63bb      	str	r3, [r7, #56]	; 0x38
 800eb20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	3308      	adds	r3, #8
 800eb26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb28:	633a      	str	r2, [r7, #48]	; 0x30
 800eb2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb30:	e841 2300 	strex	r3, r2, [r1]
 800eb34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d1e5      	bne.n	800eb08 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eb3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	e853 3f00 	ldrex	r3, [r3]
 800eb48:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb50:	637b      	str	r3, [r7, #52]	; 0x34
 800eb52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	461a      	mov	r2, r3
 800eb58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb5a:	61fb      	str	r3, [r7, #28]
 800eb5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb5e:	69b9      	ldr	r1, [r7, #24]
 800eb60:	69fa      	ldr	r2, [r7, #28]
 800eb62:	e841 2300 	strex	r3, r2, [r1]
 800eb66:	617b      	str	r3, [r7, #20]
   return(result);
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d1e6      	bne.n	800eb3c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eb6e:	e002      	b.n	800eb76 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800eb70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800eb72:	f7fe ff2b 	bl	800d9cc <HAL_UART_TxCpltCallback>
}
 800eb76:	bf00      	nop
 800eb78:	3740      	adds	r7, #64	; 0x40
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}

0800eb7e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eb7e:	b580      	push	{r7, lr}
 800eb80:	b084      	sub	sp, #16
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb8a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800eb8c:	68f8      	ldr	r0, [r7, #12]
 800eb8e:	f7fe ff27 	bl	800d9e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb92:	bf00      	nop
 800eb94:	3710      	adds	r7, #16
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}

0800eb9a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800eb9a:	b580      	push	{r7, lr}
 800eb9c:	b09c      	sub	sp, #112	; 0x70
 800eb9e:	af00      	add	r7, sp, #0
 800eba0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eba6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	69db      	ldr	r3, [r3, #28]
 800ebac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ebb0:	d071      	beq.n	800ec96 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ebb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ebba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebc2:	e853 3f00 	ldrex	r3, [r3]
 800ebc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ebc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ebce:	66bb      	str	r3, [r7, #104]	; 0x68
 800ebd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	461a      	mov	r2, r3
 800ebd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ebd8:	65bb      	str	r3, [r7, #88]	; 0x58
 800ebda:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ebde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ebe0:	e841 2300 	strex	r3, r2, [r1]
 800ebe4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ebe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d1e6      	bne.n	800ebba <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	3308      	adds	r3, #8
 800ebf2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf6:	e853 3f00 	ldrex	r3, [r3]
 800ebfa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ebfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebfe:	f023 0301 	bic.w	r3, r3, #1
 800ec02:	667b      	str	r3, [r7, #100]	; 0x64
 800ec04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	3308      	adds	r3, #8
 800ec0a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ec0c:	647a      	str	r2, [r7, #68]	; 0x44
 800ec0e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ec12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec14:	e841 2300 	strex	r3, r2, [r1]
 800ec18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ec1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d1e5      	bne.n	800ebec <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ec20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	3308      	adds	r3, #8
 800ec26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec2a:	e853 3f00 	ldrex	r3, [r3]
 800ec2e:	623b      	str	r3, [r7, #32]
   return(result);
 800ec30:	6a3b      	ldr	r3, [r7, #32]
 800ec32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec36:	663b      	str	r3, [r7, #96]	; 0x60
 800ec38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	3308      	adds	r3, #8
 800ec3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ec40:	633a      	str	r2, [r7, #48]	; 0x30
 800ec42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec48:	e841 2300 	strex	r3, r2, [r1]
 800ec4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ec4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d1e5      	bne.n	800ec20 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ec54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec56:	2220      	movs	r2, #32
 800ec58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec60:	2b01      	cmp	r3, #1
 800ec62:	d118      	bne.n	800ec96 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	e853 3f00 	ldrex	r3, [r3]
 800ec70:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	f023 0310 	bic.w	r3, r3, #16
 800ec78:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ec7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	461a      	mov	r2, r3
 800ec80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec82:	61fb      	str	r3, [r7, #28]
 800ec84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec86:	69b9      	ldr	r1, [r7, #24]
 800ec88:	69fa      	ldr	r2, [r7, #28]
 800ec8a:	e841 2300 	strex	r3, r2, [r1]
 800ec8e:	617b      	str	r3, [r7, #20]
   return(result);
 800ec90:	697b      	ldr	r3, [r7, #20]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d1e6      	bne.n	800ec64 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec9a:	2b01      	cmp	r3, #1
 800ec9c:	d107      	bne.n	800ecae <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ec9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eca0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eca4:	4619      	mov	r1, r3
 800eca6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eca8:	f7f2 ff80 	bl	8001bac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ecac:	e002      	b.n	800ecb4 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800ecae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ecb0:	f7f4 ff72 	bl	8003b98 <HAL_UART_RxCpltCallback>
}
 800ecb4:	bf00      	nop
 800ecb6:	3770      	adds	r7, #112	; 0x70
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}

0800ecbc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b084      	sub	sp, #16
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecc8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecce:	2b01      	cmp	r3, #1
 800ecd0:	d109      	bne.n	800ece6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ecd8:	085b      	lsrs	r3, r3, #1
 800ecda:	b29b      	uxth	r3, r3
 800ecdc:	4619      	mov	r1, r3
 800ecde:	68f8      	ldr	r0, [r7, #12]
 800ece0:	f7f2 ff64 	bl	8001bac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ece4:	e002      	b.n	800ecec <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ece6:	68f8      	ldr	r0, [r7, #12]
 800ece8:	f7fe fe84 	bl	800d9f4 <HAL_UART_RxHalfCpltCallback>
}
 800ecec:	bf00      	nop
 800ecee:	3710      	adds	r7, #16
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}

0800ecf4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b086      	sub	sp, #24
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed00:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ed02:	697b      	ldr	r3, [r7, #20]
 800ed04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed08:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed10:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	689b      	ldr	r3, [r3, #8]
 800ed18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed1c:	2b80      	cmp	r3, #128	; 0x80
 800ed1e:	d109      	bne.n	800ed34 <UART_DMAError+0x40>
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	2b21      	cmp	r3, #33	; 0x21
 800ed24:	d106      	bne.n	800ed34 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ed2e:	6978      	ldr	r0, [r7, #20]
 800ed30:	f7ff fe32 	bl	800e998 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	689b      	ldr	r3, [r3, #8]
 800ed3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed3e:	2b40      	cmp	r3, #64	; 0x40
 800ed40:	d109      	bne.n	800ed56 <UART_DMAError+0x62>
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	2b22      	cmp	r3, #34	; 0x22
 800ed46:	d106      	bne.n	800ed56 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ed50:	6978      	ldr	r0, [r7, #20]
 800ed52:	f7ff fe63 	bl	800ea1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed5c:	f043 0210 	orr.w	r2, r3, #16
 800ed60:	697b      	ldr	r3, [r7, #20]
 800ed62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ed66:	6978      	ldr	r0, [r7, #20]
 800ed68:	f7fe fe4e 	bl	800da08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed6c:	bf00      	nop
 800ed6e:	3718      	adds	r7, #24
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}

0800ed74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b084      	sub	sp, #16
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	2200      	movs	r2, #0
 800ed86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ed92:	68f8      	ldr	r0, [r7, #12]
 800ed94:	f7fe fe38 	bl	800da08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed98:	bf00      	nop
 800ed9a:	3710      	adds	r7, #16
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b088      	sub	sp, #32
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	e853 3f00 	ldrex	r3, [r3]
 800edb4:	60bb      	str	r3, [r7, #8]
   return(result);
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800edbc:	61fb      	str	r3, [r7, #28]
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	461a      	mov	r2, r3
 800edc4:	69fb      	ldr	r3, [r7, #28]
 800edc6:	61bb      	str	r3, [r7, #24]
 800edc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edca:	6979      	ldr	r1, [r7, #20]
 800edcc:	69ba      	ldr	r2, [r7, #24]
 800edce:	e841 2300 	strex	r3, r2, [r1]
 800edd2:	613b      	str	r3, [r7, #16]
   return(result);
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d1e6      	bne.n	800eda8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2220      	movs	r2, #32
 800edde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2200      	movs	r2, #0
 800ede6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f7fe fdef 	bl	800d9cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800edee:	bf00      	nop
 800edf0:	3720      	adds	r7, #32
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}

0800edf6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800edf6:	b480      	push	{r7}
 800edf8:	b083      	sub	sp, #12
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800edfe:	bf00      	nop
 800ee00:	370c      	adds	r7, #12
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr

0800ee0a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ee0a:	b480      	push	{r7}
 800ee0c:	b083      	sub	sp, #12
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ee12:	bf00      	nop
 800ee14:	370c      	adds	r7, #12
 800ee16:	46bd      	mov	sp, r7
 800ee18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1c:	4770      	bx	lr

0800ee1e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ee1e:	b480      	push	{r7}
 800ee20:	b083      	sub	sp, #12
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ee26:	bf00      	nop
 800ee28:	370c      	adds	r7, #12
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee30:	4770      	bx	lr

0800ee32 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800ee32:	b580      	push	{r7, lr}
 800ee34:	b084      	sub	sp, #16
 800ee36:	af00      	add	r7, sp, #0
 800ee38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ee40:	2b01      	cmp	r3, #1
 800ee42:	d101      	bne.n	800ee48 <HAL_UARTEx_EnableFifoMode+0x16>
 800ee44:	2302      	movs	r3, #2
 800ee46:	e02b      	b.n	800eea0 <HAL_UARTEx_EnableFifoMode+0x6e>
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2201      	movs	r2, #1
 800ee4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2224      	movs	r2, #36	; 0x24
 800ee54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	681a      	ldr	r2, [r3, #0]
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	f022 0201 	bic.w	r2, r2, #1
 800ee6e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ee76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800ee7e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	68fa      	ldr	r2, [r7, #12]
 800ee86:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f000 f91f 	bl	800f0cc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2220      	movs	r2, #32
 800ee92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	2200      	movs	r2, #0
 800ee9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ee9e:	2300      	movs	r3, #0
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	3710      	adds	r7, #16
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}

0800eea8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b085      	sub	sp, #20
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eeb6:	2b01      	cmp	r3, #1
 800eeb8:	d101      	bne.n	800eebe <HAL_UARTEx_DisableFifoMode+0x16>
 800eeba:	2302      	movs	r3, #2
 800eebc:	e027      	b.n	800ef0e <HAL_UARTEx_DisableFifoMode+0x66>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2201      	movs	r2, #1
 800eec2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2224      	movs	r2, #36	; 0x24
 800eeca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	681a      	ldr	r2, [r3, #0]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	f022 0201 	bic.w	r2, r2, #1
 800eee4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800eeec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2200      	movs	r2, #0
 800eef2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	68fa      	ldr	r2, [r7, #12]
 800eefa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2220      	movs	r2, #32
 800ef00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2200      	movs	r2, #0
 800ef08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ef0c:	2300      	movs	r3, #0
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3714      	adds	r7, #20
 800ef12:	46bd      	mov	sp, r7
 800ef14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef18:	4770      	bx	lr

0800ef1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ef1a:	b580      	push	{r7, lr}
 800ef1c:	b084      	sub	sp, #16
 800ef1e:	af00      	add	r7, sp, #0
 800ef20:	6078      	str	r0, [r7, #4]
 800ef22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef2a:	2b01      	cmp	r3, #1
 800ef2c:	d101      	bne.n	800ef32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ef2e:	2302      	movs	r3, #2
 800ef30:	e02d      	b.n	800ef8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2201      	movs	r2, #1
 800ef36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2224      	movs	r2, #36	; 0x24
 800ef3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	681a      	ldr	r2, [r3, #0]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f022 0201 	bic.w	r2, r2, #1
 800ef58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	689b      	ldr	r3, [r3, #8]
 800ef60:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	683a      	ldr	r2, [r7, #0]
 800ef6a:	430a      	orrs	r2, r1
 800ef6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f000 f8ac 	bl	800f0cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	68fa      	ldr	r2, [r7, #12]
 800ef7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2220      	movs	r2, #32
 800ef80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2200      	movs	r2, #0
 800ef88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ef8c:	2300      	movs	r3, #0
}
 800ef8e:	4618      	mov	r0, r3
 800ef90:	3710      	adds	r7, #16
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}

0800ef96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ef96:	b580      	push	{r7, lr}
 800ef98:	b084      	sub	sp, #16
 800ef9a:	af00      	add	r7, sp, #0
 800ef9c:	6078      	str	r0, [r7, #4]
 800ef9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800efa6:	2b01      	cmp	r3, #1
 800efa8:	d101      	bne.n	800efae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800efaa:	2302      	movs	r3, #2
 800efac:	e02d      	b.n	800f00a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2201      	movs	r2, #1
 800efb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2224      	movs	r2, #36	; 0x24
 800efba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	681a      	ldr	r2, [r3, #0]
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	f022 0201 	bic.w	r2, r2, #1
 800efd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	689b      	ldr	r3, [r3, #8]
 800efdc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	683a      	ldr	r2, [r7, #0]
 800efe6:	430a      	orrs	r2, r1
 800efe8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f000 f86e 	bl	800f0cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	68fa      	ldr	r2, [r7, #12]
 800eff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2220      	movs	r2, #32
 800effc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2200      	movs	r2, #0
 800f004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f008:	2300      	movs	r3, #0
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3710      	adds	r7, #16
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}

0800f012 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f012:	b580      	push	{r7, lr}
 800f014:	b08c      	sub	sp, #48	; 0x30
 800f016:	af00      	add	r7, sp, #0
 800f018:	60f8      	str	r0, [r7, #12]
 800f01a:	60b9      	str	r1, [r7, #8]
 800f01c:	4613      	mov	r3, r2
 800f01e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f026:	2b20      	cmp	r3, #32
 800f028:	d14a      	bne.n	800f0c0 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d002      	beq.n	800f036 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800f030:	88fb      	ldrh	r3, [r7, #6]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d101      	bne.n	800f03a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800f036:	2301      	movs	r3, #1
 800f038:	e043      	b.n	800f0c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f040:	2b01      	cmp	r3, #1
 800f042:	d101      	bne.n	800f048 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800f044:	2302      	movs	r3, #2
 800f046:	e03c      	b.n	800f0c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2201      	movs	r2, #1
 800f04c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	2201      	movs	r2, #1
 800f054:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800f056:	88fb      	ldrh	r3, [r7, #6]
 800f058:	461a      	mov	r2, r3
 800f05a:	68b9      	ldr	r1, [r7, #8]
 800f05c:	68f8      	ldr	r0, [r7, #12]
 800f05e:	f7ff fbf3 	bl	800e848 <UART_Start_Receive_DMA>
 800f062:	4603      	mov	r3, r0
 800f064:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800f068:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d124      	bne.n	800f0ba <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f074:	2b01      	cmp	r3, #1
 800f076:	d11d      	bne.n	800f0b4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	2210      	movs	r2, #16
 800f07e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f086:	69bb      	ldr	r3, [r7, #24]
 800f088:	e853 3f00 	ldrex	r3, [r3]
 800f08c:	617b      	str	r3, [r7, #20]
   return(result);
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	f043 0310 	orr.w	r3, r3, #16
 800f094:	62bb      	str	r3, [r7, #40]	; 0x28
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	461a      	mov	r2, r3
 800f09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f09e:	627b      	str	r3, [r7, #36]	; 0x24
 800f0a0:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0a2:	6a39      	ldr	r1, [r7, #32]
 800f0a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0a6:	e841 2300 	strex	r3, r2, [r1]
 800f0aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800f0ac:	69fb      	ldr	r3, [r7, #28]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d1e6      	bne.n	800f080 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800f0b2:	e002      	b.n	800f0ba <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800f0ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f0be:	e000      	b.n	800f0c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800f0c0:	2302      	movs	r3, #2
  }
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3730      	adds	r7, #48	; 0x30
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}
	...

0800f0cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f0cc:	b480      	push	{r7}
 800f0ce:	b085      	sub	sp, #20
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d108      	bne.n	800f0ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2201      	movs	r2, #1
 800f0e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2201      	movs	r2, #1
 800f0e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f0ec:	e031      	b.n	800f152 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f0ee:	2310      	movs	r3, #16
 800f0f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f0f2:	2310      	movs	r3, #16
 800f0f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	689b      	ldr	r3, [r3, #8]
 800f0fc:	0e5b      	lsrs	r3, r3, #25
 800f0fe:	b2db      	uxtb	r3, r3
 800f100:	f003 0307 	and.w	r3, r3, #7
 800f104:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	689b      	ldr	r3, [r3, #8]
 800f10c:	0f5b      	lsrs	r3, r3, #29
 800f10e:	b2db      	uxtb	r3, r3
 800f110:	f003 0307 	and.w	r3, r3, #7
 800f114:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f116:	7bbb      	ldrb	r3, [r7, #14]
 800f118:	7b3a      	ldrb	r2, [r7, #12]
 800f11a:	4911      	ldr	r1, [pc, #68]	; (800f160 <UARTEx_SetNbDataToProcess+0x94>)
 800f11c:	5c8a      	ldrb	r2, [r1, r2]
 800f11e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f122:	7b3a      	ldrb	r2, [r7, #12]
 800f124:	490f      	ldr	r1, [pc, #60]	; (800f164 <UARTEx_SetNbDataToProcess+0x98>)
 800f126:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f128:	fb93 f3f2 	sdiv	r3, r3, r2
 800f12c:	b29a      	uxth	r2, r3
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f134:	7bfb      	ldrb	r3, [r7, #15]
 800f136:	7b7a      	ldrb	r2, [r7, #13]
 800f138:	4909      	ldr	r1, [pc, #36]	; (800f160 <UARTEx_SetNbDataToProcess+0x94>)
 800f13a:	5c8a      	ldrb	r2, [r1, r2]
 800f13c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f140:	7b7a      	ldrb	r2, [r7, #13]
 800f142:	4908      	ldr	r1, [pc, #32]	; (800f164 <UARTEx_SetNbDataToProcess+0x98>)
 800f144:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f146:	fb93 f3f2 	sdiv	r3, r3, r2
 800f14a:	b29a      	uxth	r2, r3
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f152:	bf00      	nop
 800f154:	3714      	adds	r7, #20
 800f156:	46bd      	mov	sp, r7
 800f158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15c:	4770      	bx	lr
 800f15e:	bf00      	nop
 800f160:	08012828 	.word	0x08012828
 800f164:	08012830 	.word	0x08012830

0800f168 <sinf_poly>:
 800f168:	07cb      	lsls	r3, r1, #31
 800f16a:	d412      	bmi.n	800f192 <sinf_poly+0x2a>
 800f16c:	ee21 6b00 	vmul.f64	d6, d1, d0
 800f170:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 800f174:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800f178:	eea5 7b01 	vfma.f64	d7, d5, d1
 800f17c:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 800f180:	ee21 1b06 	vmul.f64	d1, d1, d6
 800f184:	eea5 0b06 	vfma.f64	d0, d5, d6
 800f188:	eea7 0b01 	vfma.f64	d0, d7, d1
 800f18c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f190:	4770      	bx	lr
 800f192:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 800f196:	ee21 6b01 	vmul.f64	d6, d1, d1
 800f19a:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800f19e:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800f1a2:	eea1 7b05 	vfma.f64	d7, d1, d5
 800f1a6:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800f1aa:	eea1 0b05 	vfma.f64	d0, d1, d5
 800f1ae:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 800f1b2:	ee21 1b06 	vmul.f64	d1, d1, d6
 800f1b6:	eea6 0b05 	vfma.f64	d0, d6, d5
 800f1ba:	e7e5      	b.n	800f188 <sinf_poly+0x20>
 800f1bc:	0000      	movs	r0, r0
	...

0800f1c0 <cosf>:
 800f1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1c2:	ee10 4a10 	vmov	r4, s0
 800f1c6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800f1ca:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800f1ce:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800f1d2:	d20c      	bcs.n	800f1ee <cosf+0x2e>
 800f1d4:	ee26 1b06 	vmul.f64	d1, d6, d6
 800f1d8:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800f1dc:	d378      	bcc.n	800f2d0 <cosf+0x110>
 800f1de:	eeb0 0b46 	vmov.f64	d0, d6
 800f1e2:	483f      	ldr	r0, [pc, #252]	; (800f2e0 <cosf+0x120>)
 800f1e4:	2101      	movs	r1, #1
 800f1e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f1ea:	f7ff bfbd 	b.w	800f168 <sinf_poly>
 800f1ee:	f240 422e 	movw	r2, #1070	; 0x42e
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d826      	bhi.n	800f244 <cosf+0x84>
 800f1f6:	4b3a      	ldr	r3, [pc, #232]	; (800f2e0 <cosf+0x120>)
 800f1f8:	ed93 7b08 	vldr	d7, [r3, #32]
 800f1fc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f200:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800f204:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800f208:	ee17 1a90 	vmov	r1, s15
 800f20c:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800f210:	1609      	asrs	r1, r1, #24
 800f212:	ee07 1a90 	vmov	s15, r1
 800f216:	f001 0203 	and.w	r2, r1, #3
 800f21a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800f21e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800f222:	ed92 0b00 	vldr	d0, [r2]
 800f226:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800f22a:	f011 0f02 	tst.w	r1, #2
 800f22e:	eea5 6b47 	vfms.f64	d6, d5, d7
 800f232:	f081 0101 	eor.w	r1, r1, #1
 800f236:	bf08      	it	eq
 800f238:	4618      	moveq	r0, r3
 800f23a:	ee26 1b06 	vmul.f64	d1, d6, d6
 800f23e:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f242:	e7d0      	b.n	800f1e6 <cosf+0x26>
 800f244:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800f248:	d23e      	bcs.n	800f2c8 <cosf+0x108>
 800f24a:	4b26      	ldr	r3, [pc, #152]	; (800f2e4 <cosf+0x124>)
 800f24c:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800f250:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800f254:	f3c4 0116 	ubfx	r1, r4, #0, #23
 800f258:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800f25c:	6a06      	ldr	r6, [r0, #32]
 800f25e:	6900      	ldr	r0, [r0, #16]
 800f260:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800f264:	40a9      	lsls	r1, r5
 800f266:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800f26a:	fba1 6706 	umull	r6, r7, r1, r6
 800f26e:	fb05 f301 	mul.w	r3, r5, r1
 800f272:	463a      	mov	r2, r7
 800f274:	fbe0 2301 	umlal	r2, r3, r0, r1
 800f278:	1c11      	adds	r1, r2, #0
 800f27a:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800f27e:	2000      	movs	r0, #0
 800f280:	1a10      	subs	r0, r2, r0
 800f282:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 800f286:	eb63 0101 	sbc.w	r1, r3, r1
 800f28a:	f7f1 fa0f 	bl	80006ac <__aeabi_l2d>
 800f28e:	0fb5      	lsrs	r5, r6, #30
 800f290:	4b13      	ldr	r3, [pc, #76]	; (800f2e0 <cosf+0x120>)
 800f292:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800f296:	ed9f 0b10 	vldr	d0, [pc, #64]	; 800f2d8 <cosf+0x118>
 800f29a:	ec41 0b17 	vmov	d7, r0, r1
 800f29e:	f004 0203 	and.w	r2, r4, #3
 800f2a2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800f2a6:	ee27 0b00 	vmul.f64	d0, d7, d0
 800f2aa:	ed92 7b00 	vldr	d7, [r2]
 800f2ae:	ee20 1b00 	vmul.f64	d1, d0, d0
 800f2b2:	f014 0f02 	tst.w	r4, #2
 800f2b6:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800f2ba:	f085 0101 	eor.w	r1, r5, #1
 800f2be:	bf08      	it	eq
 800f2c0:	4618      	moveq	r0, r3
 800f2c2:	ee27 0b00 	vmul.f64	d0, d7, d0
 800f2c6:	e78e      	b.n	800f1e6 <cosf+0x26>
 800f2c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f2cc:	f000 b817 	b.w	800f2fe <__math_invalidf>
 800f2d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	54442d18 	.word	0x54442d18
 800f2dc:	3c1921fb 	.word	0x3c1921fb
 800f2e0:	080138e0 	.word	0x080138e0
 800f2e4:	08013880 	.word	0x08013880

0800f2e8 <with_errnof>:
 800f2e8:	b513      	push	{r0, r1, r4, lr}
 800f2ea:	4604      	mov	r4, r0
 800f2ec:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f2f0:	f000 fdee 	bl	800fed0 <__errno>
 800f2f4:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f2f8:	6004      	str	r4, [r0, #0]
 800f2fa:	b002      	add	sp, #8
 800f2fc:	bd10      	pop	{r4, pc}

0800f2fe <__math_invalidf>:
 800f2fe:	eef0 7a40 	vmov.f32	s15, s0
 800f302:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f306:	eef4 7a67 	vcmp.f32	s15, s15
 800f30a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f30e:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800f312:	d602      	bvs.n	800f31a <__math_invalidf+0x1c>
 800f314:	2021      	movs	r0, #33	; 0x21
 800f316:	f7ff bfe7 	b.w	800f2e8 <with_errnof>
 800f31a:	4770      	bx	lr

0800f31c <checkint>:
 800f31c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f320:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800f324:	429a      	cmp	r2, r3
 800f326:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f328:	dd2b      	ble.n	800f382 <checkint+0x66>
 800f32a:	f240 4333 	movw	r3, #1075	; 0x433
 800f32e:	429a      	cmp	r2, r3
 800f330:	dc25      	bgt.n	800f37e <checkint+0x62>
 800f332:	1a9b      	subs	r3, r3, r2
 800f334:	f1a3 0620 	sub.w	r6, r3, #32
 800f338:	f04f 32ff 	mov.w	r2, #4294967295
 800f33c:	fa02 f606 	lsl.w	r6, r2, r6
 800f340:	fa02 f403 	lsl.w	r4, r2, r3
 800f344:	f1c3 0520 	rsb	r5, r3, #32
 800f348:	4334      	orrs	r4, r6
 800f34a:	fa22 f505 	lsr.w	r5, r2, r5
 800f34e:	432c      	orrs	r4, r5
 800f350:	409a      	lsls	r2, r3
 800f352:	ea20 0602 	bic.w	r6, r0, r2
 800f356:	ea21 0704 	bic.w	r7, r1, r4
 800f35a:	ea56 0207 	orrs.w	r2, r6, r7
 800f35e:	f1a3 0420 	sub.w	r4, r3, #32
 800f362:	f1c3 0220 	rsb	r2, r3, #32
 800f366:	d10c      	bne.n	800f382 <checkint+0x66>
 800f368:	40d8      	lsrs	r0, r3
 800f36a:	fa01 f302 	lsl.w	r3, r1, r2
 800f36e:	4318      	orrs	r0, r3
 800f370:	40e1      	lsrs	r1, r4
 800f372:	4308      	orrs	r0, r1
 800f374:	f000 0301 	and.w	r3, r0, #1
 800f378:	f1c3 0002 	rsb	r0, r3, #2
 800f37c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f37e:	2002      	movs	r0, #2
 800f380:	e7fc      	b.n	800f37c <checkint+0x60>
 800f382:	2000      	movs	r0, #0
 800f384:	e7fa      	b.n	800f37c <checkint+0x60>
	...

0800f388 <pow>:
 800f388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f38c:	ed2d 8b0a 	vpush	{d8-d12}
 800f390:	b09b      	sub	sp, #108	; 0x6c
 800f392:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f396:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f39a:	ed8d 1b00 	vstr	d1, [sp]
 800f39e:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800f3a2:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f3a6:	f109 30ff 	add.w	r0, r9, #4294967295
 800f3aa:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800f3ae:	4288      	cmp	r0, r1
 800f3b0:	46cc      	mov	ip, r9
 800f3b2:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800f3b6:	d806      	bhi.n	800f3c6 <pow+0x3e>
 800f3b8:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800f3bc:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800f3c0:	297f      	cmp	r1, #127	; 0x7f
 800f3c2:	f240 81ab 	bls.w	800f71c <pow+0x394>
 800f3c6:	19b1      	adds	r1, r6, r6
 800f3c8:	9104      	str	r1, [sp, #16]
 800f3ca:	eb47 0107 	adc.w	r1, r7, r7
 800f3ce:	9105      	str	r1, [sp, #20]
 800f3d0:	9904      	ldr	r1, [sp, #16]
 800f3d2:	f111 31ff 	adds.w	r1, r1, #4294967295
 800f3d6:	460a      	mov	r2, r1
 800f3d8:	9905      	ldr	r1, [sp, #20]
 800f3da:	f141 31ff 	adc.w	r1, r1, #4294967295
 800f3de:	460b      	mov	r3, r1
 800f3e0:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800f3e4:	f06f 0001 	mvn.w	r0, #1
 800f3e8:	4299      	cmp	r1, r3
 800f3ea:	bf08      	it	eq
 800f3ec:	4290      	cmpeq	r0, r2
 800f3ee:	d260      	bcs.n	800f4b2 <pow+0x12a>
 800f3f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3f4:	4313      	orrs	r3, r2
 800f3f6:	d11a      	bne.n	800f42e <pow+0xa6>
 800f3f8:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800f3fc:	1923      	adds	r3, r4, r4
 800f3fe:	930c      	str	r3, [sp, #48]	; 0x30
 800f400:	eb42 0302 	adc.w	r3, r2, r2
 800f404:	930d      	str	r3, [sp, #52]	; 0x34
 800f406:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f40a:	4bcf      	ldr	r3, [pc, #828]	; (800f748 <pow+0x3c0>)
 800f40c:	2200      	movs	r2, #0
 800f40e:	428b      	cmp	r3, r1
 800f410:	bf08      	it	eq
 800f412:	4282      	cmpeq	r2, r0
 800f414:	f080 8265 	bcs.w	800f8e2 <pow+0x55a>
 800f418:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f41c:	ed9d 6b00 	vldr	d6, [sp]
 800f420:	ee37 0b06 	vadd.f64	d0, d7, d6
 800f424:	b01b      	add	sp, #108	; 0x6c
 800f426:	ecbd 8b0a 	vpop	{d8-d12}
 800f42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f42e:	49c7      	ldr	r1, [pc, #796]	; (800f74c <pow+0x3c4>)
 800f430:	2000      	movs	r0, #0
 800f432:	428d      	cmp	r5, r1
 800f434:	bf08      	it	eq
 800f436:	4284      	cmpeq	r4, r0
 800f438:	d10b      	bne.n	800f452 <pow+0xca>
 800f43a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f43e:	19b3      	adds	r3, r6, r6
 800f440:	930e      	str	r3, [sp, #56]	; 0x38
 800f442:	eb42 0302 	adc.w	r3, r2, r2
 800f446:	930f      	str	r3, [sp, #60]	; 0x3c
 800f448:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f44c:	4bbe      	ldr	r3, [pc, #760]	; (800f748 <pow+0x3c0>)
 800f44e:	2200      	movs	r2, #0
 800f450:	e7dd      	b.n	800f40e <pow+0x86>
 800f452:	1921      	adds	r1, r4, r4
 800f454:	9106      	str	r1, [sp, #24]
 800f456:	eb45 0105 	adc.w	r1, r5, r5
 800f45a:	9107      	str	r1, [sp, #28]
 800f45c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800f460:	49bb      	ldr	r1, [pc, #748]	; (800f750 <pow+0x3c8>)
 800f462:	2000      	movs	r0, #0
 800f464:	42a1      	cmp	r1, r4
 800f466:	bf08      	it	eq
 800f468:	4298      	cmpeq	r0, r3
 800f46a:	d3d5      	bcc.n	800f418 <pow+0x90>
 800f46c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f470:	428c      	cmp	r4, r1
 800f472:	bf08      	it	eq
 800f474:	4283      	cmpeq	r3, r0
 800f476:	d1cf      	bne.n	800f418 <pow+0x90>
 800f478:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800f47c:	49b5      	ldr	r1, [pc, #724]	; (800f754 <pow+0x3cc>)
 800f47e:	2000      	movs	r0, #0
 800f480:	428c      	cmp	r4, r1
 800f482:	bf08      	it	eq
 800f484:	4283      	cmpeq	r3, r0
 800f486:	f000 822c 	beq.w	800f8e2 <pow+0x55a>
 800f48a:	49b3      	ldr	r1, [pc, #716]	; (800f758 <pow+0x3d0>)
 800f48c:	f04f 30ff 	mov.w	r0, #4294967295
 800f490:	42a1      	cmp	r1, r4
 800f492:	bf08      	it	eq
 800f494:	4298      	cmpeq	r0, r3
 800f496:	ea6f 0307 	mvn.w	r3, r7
 800f49a:	bf34      	ite	cc
 800f49c:	2201      	movcc	r2, #1
 800f49e:	2200      	movcs	r2, #0
 800f4a0:	0fdb      	lsrs	r3, r3, #31
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	f040 821a 	bne.w	800f8dc <pow+0x554>
 800f4a8:	ed9d 7b00 	vldr	d7, [sp]
 800f4ac:	ee27 0b07 	vmul.f64	d0, d7, d7
 800f4b0:	e7b8      	b.n	800f424 <pow+0x9c>
 800f4b2:	1923      	adds	r3, r4, r4
 800f4b4:	9308      	str	r3, [sp, #32]
 800f4b6:	eb45 0305 	adc.w	r3, r5, r5
 800f4ba:	9309      	str	r3, [sp, #36]	; 0x24
 800f4bc:	9b08      	ldr	r3, [sp, #32]
 800f4be:	f113 33ff 	adds.w	r3, r3, #4294967295
 800f4c2:	9310      	str	r3, [sp, #64]	; 0x40
 800f4c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4c6:	f143 33ff 	adc.w	r3, r3, #4294967295
 800f4ca:	9311      	str	r3, [sp, #68]	; 0x44
 800f4cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f4d0:	4299      	cmp	r1, r3
 800f4d2:	bf08      	it	eq
 800f4d4:	4290      	cmpeq	r0, r2
 800f4d6:	d22d      	bcs.n	800f534 <pow+0x1ac>
 800f4d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f4dc:	2c00      	cmp	r4, #0
 800f4de:	f175 0300 	sbcs.w	r3, r5, #0
 800f4e2:	ee27 0b07 	vmul.f64	d0, d7, d7
 800f4e6:	da16      	bge.n	800f516 <pow+0x18e>
 800f4e8:	4630      	mov	r0, r6
 800f4ea:	4639      	mov	r1, r7
 800f4ec:	f7ff ff16 	bl	800f31c <checkint>
 800f4f0:	2801      	cmp	r0, #1
 800f4f2:	d110      	bne.n	800f516 <pow+0x18e>
 800f4f4:	eeb1 0b40 	vneg.f64	d0, d0
 800f4f8:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800f4fc:	4323      	orrs	r3, r4
 800f4fe:	d10c      	bne.n	800f51a <pow+0x192>
 800f500:	2e00      	cmp	r6, #0
 800f502:	f177 0300 	sbcs.w	r3, r7, #0
 800f506:	da8d      	bge.n	800f424 <pow+0x9c>
 800f508:	b01b      	add	sp, #108	; 0x6c
 800f50a:	ecbd 8b0a 	vpop	{d8-d12}
 800f50e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f512:	f000 bbbd 	b.w	800fc90 <__math_divzero>
 800f516:	2000      	movs	r0, #0
 800f518:	e7ee      	b.n	800f4f8 <pow+0x170>
 800f51a:	2e00      	cmp	r6, #0
 800f51c:	f177 0300 	sbcs.w	r3, r7, #0
 800f520:	da80      	bge.n	800f424 <pow+0x9c>
 800f522:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f526:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800f52a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800f52e:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800f532:	e777      	b.n	800f424 <pow+0x9c>
 800f534:	2c00      	cmp	r4, #0
 800f536:	f175 0300 	sbcs.w	r3, r5, #0
 800f53a:	da35      	bge.n	800f5a8 <pow+0x220>
 800f53c:	4630      	mov	r0, r6
 800f53e:	4639      	mov	r1, r7
 800f540:	f7ff feec 	bl	800f31c <checkint>
 800f544:	b940      	cbnz	r0, 800f558 <pow+0x1d0>
 800f546:	ed9d 0b02 	vldr	d0, [sp, #8]
 800f54a:	b01b      	add	sp, #108	; 0x6c
 800f54c:	ecbd 8b0a 	vpop	{d8-d12}
 800f550:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f554:	f000 bbb4 	b.w	800fcc0 <__math_invalid>
 800f558:	2801      	cmp	r0, #1
 800f55a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f55e:	bf14      	ite	ne
 800f560:	2000      	movne	r0, #0
 800f562:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800f566:	461d      	mov	r5, r3
 800f568:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800f56c:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800f570:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800f574:	2a7f      	cmp	r2, #127	; 0x7f
 800f576:	d933      	bls.n	800f5e0 <pow+0x258>
 800f578:	4974      	ldr	r1, [pc, #464]	; (800f74c <pow+0x3c4>)
 800f57a:	2000      	movs	r0, #0
 800f57c:	428d      	cmp	r5, r1
 800f57e:	bf08      	it	eq
 800f580:	4284      	cmpeq	r4, r0
 800f582:	f000 81ae 	beq.w	800f8e2 <pow+0x55a>
 800f586:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d80e      	bhi.n	800f5ac <pow+0x224>
 800f58e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f592:	ed9d 7b00 	vldr	d7, [sp]
 800f596:	42a9      	cmp	r1, r5
 800f598:	bf08      	it	eq
 800f59a:	42a0      	cmpeq	r0, r4
 800f59c:	bf34      	ite	cc
 800f59e:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800f5a2:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800f5a6:	e73d      	b.n	800f424 <pow+0x9c>
 800f5a8:	2000      	movs	r0, #0
 800f5aa:	e7df      	b.n	800f56c <pow+0x1e4>
 800f5ac:	42a9      	cmp	r1, r5
 800f5ae:	bf08      	it	eq
 800f5b0:	42a0      	cmpeq	r0, r4
 800f5b2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f5b6:	bf2c      	ite	cs
 800f5b8:	2301      	movcs	r3, #1
 800f5ba:	2300      	movcc	r3, #0
 800f5bc:	4590      	cmp	r8, r2
 800f5be:	bf8c      	ite	hi
 800f5c0:	f04f 0800 	movhi.w	r8, #0
 800f5c4:	f04f 0801 	movls.w	r8, #1
 800f5c8:	4543      	cmp	r3, r8
 800f5ca:	f04f 0000 	mov.w	r0, #0
 800f5ce:	f000 80af 	beq.w	800f730 <pow+0x3a8>
 800f5d2:	b01b      	add	sp, #108	; 0x6c
 800f5d4:	ecbd 8b0a 	vpop	{d8-d12}
 800f5d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5dc:	f000 bb50 	b.w	800fc80 <__math_oflow>
 800f5e0:	f1bc 0f00 	cmp.w	ip, #0
 800f5e4:	d10e      	bne.n	800f604 <pow+0x27c>
 800f5e6:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800f740 <pow+0x3b8>
 800f5ea:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f5ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f5f2:	ec57 6b17 	vmov	r6, r7, d7
 800f5f6:	4b59      	ldr	r3, [pc, #356]	; (800f75c <pow+0x3d4>)
 800f5f8:	2100      	movs	r1, #0
 800f5fa:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800f5fe:	1874      	adds	r4, r6, r1
 800f600:	eb42 0503 	adc.w	r5, r2, r3
 800f604:	2300      	movs	r3, #0
 800f606:	18e3      	adds	r3, r4, r3
 800f608:	4b55      	ldr	r3, [pc, #340]	; (800f760 <pow+0x3d8>)
 800f60a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800f60e:	eb45 0303 	adc.w	r3, r5, r3
 800f612:	1519      	asrs	r1, r3, #20
 800f614:	ee03 1a10 	vmov	s6, r1
 800f618:	0d1e      	lsrs	r6, r3, #20
 800f61a:	2100      	movs	r1, #0
 800f61c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800f620:	0536      	lsls	r6, r6, #20
 800f622:	1a63      	subs	r3, r4, r1
 800f624:	9312      	str	r3, [sp, #72]	; 0x48
 800f626:	eb65 0306 	sbc.w	r3, r5, r6
 800f62a:	9313      	str	r3, [sp, #76]	; 0x4c
 800f62c:	4b4d      	ldr	r3, [pc, #308]	; (800f764 <pow+0x3dc>)
 800f62e:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800f632:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f636:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800f63a:	eea5 6b07 	vfma.f64	d6, d5, d7
 800f63e:	ed93 7b00 	vldr	d7, [r3]
 800f642:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800f646:	ed93 4b02 	vldr	d4, [r3, #8]
 800f64a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800f64e:	eea3 5b07 	vfma.f64	d5, d3, d7
 800f652:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800f656:	ee36 9b05 	vadd.f64	d9, d6, d5
 800f65a:	ee35 5b49 	vsub.f64	d5, d5, d9
 800f65e:	eea3 7b04 	vfma.f64	d7, d3, d4
 800f662:	ed93 4b04 	vldr	d4, [r3, #16]
 800f666:	ee35 5b06 	vadd.f64	d5, d5, d6
 800f66a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f66e:	ee26 4b04 	vmul.f64	d4, d6, d4
 800f672:	ed93 3b08 	vldr	d3, [r3, #32]
 800f676:	ee26 0b04 	vmul.f64	d0, d6, d4
 800f67a:	eeb0 8b40 	vmov.f64	d8, d0
 800f67e:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800f682:	ed93 4b06 	vldr	d4, [r3, #24]
 800f686:	ee26 ab00 	vmul.f64	d10, d6, d0
 800f68a:	ee39 1b00 	vadd.f64	d1, d9, d0
 800f68e:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800f692:	eea6 4b03 	vfma.f64	d4, d6, d3
 800f696:	ee39 9b41 	vsub.f64	d9, d9, d1
 800f69a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800f69e:	ee37 8b08 	vadd.f64	d8, d7, d8
 800f6a2:	ee39 9b00 	vadd.f64	d9, d9, d0
 800f6a6:	eea6 3b02 	vfma.f64	d3, d6, d2
 800f6aa:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800f6ae:	ee38 9b09 	vadd.f64	d9, d8, d9
 800f6b2:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800f6b6:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800f6ba:	ed9d 6b00 	vldr	d6, [sp]
 800f6be:	eea0 3b02 	vfma.f64	d3, d0, d2
 800f6c2:	eea0 4b03 	vfma.f64	d4, d0, d3
 800f6c6:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800f6ca:	ee31 7b09 	vadd.f64	d7, d1, d9
 800f6ce:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f6d2:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f6d6:	eeb0 3b46 	vmov.f64	d3, d6
 800f6da:	ee31 1b47 	vsub.f64	d1, d1, d7
 800f6de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f6e2:	ee31 9b09 	vadd.f64	d9, d1, d9
 800f6e6:	ed9d 6b00 	vldr	d6, [sp]
 800f6ea:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800f6ee:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800f6f2:	193c      	adds	r4, r7, r4
 800f6f4:	2c3e      	cmp	r4, #62	; 0x3e
 800f6f6:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800f6fa:	eea6 3b09 	vfma.f64	d3, d6, d9
 800f6fe:	d934      	bls.n	800f76a <pow+0x3e2>
 800f700:	428c      	cmp	r4, r1
 800f702:	da0d      	bge.n	800f720 <pow+0x398>
 800f704:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f708:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f70c:	ee37 0b00 	vadd.f64	d0, d7, d0
 800f710:	2800      	cmp	r0, #0
 800f712:	f43f ae87 	beq.w	800f424 <pow+0x9c>
 800f716:	eeb1 0b40 	vneg.f64	d0, d0
 800f71a:	e683      	b.n	800f424 <pow+0x9c>
 800f71c:	2000      	movs	r0, #0
 800f71e:	e771      	b.n	800f604 <pow+0x27c>
 800f720:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800f724:	d920      	bls.n	800f768 <pow+0x3e0>
 800f726:	2a00      	cmp	r2, #0
 800f728:	f173 0300 	sbcs.w	r3, r3, #0
 800f72c:	f6bf af51 	bge.w	800f5d2 <pow+0x24a>
 800f730:	b01b      	add	sp, #108	; 0x6c
 800f732:	ecbd 8b0a 	vpop	{d8-d12}
 800f736:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f73a:	f000 ba99 	b.w	800fc70 <__math_uflow>
 800f73e:	bf00      	nop
 800f740:	00000000 	.word	0x00000000
 800f744:	43300000 	.word	0x43300000
 800f748:	fff00000 	.word	0xfff00000
 800f74c:	3ff00000 	.word	0x3ff00000
 800f750:	ffe00000 	.word	0xffe00000
 800f754:	7fe00000 	.word	0x7fe00000
 800f758:	7fdfffff 	.word	0x7fdfffff
 800f75c:	fcc00000 	.word	0xfcc00000
 800f760:	c0196aab 	.word	0xc0196aab
 800f764:	08012838 	.word	0x08012838
 800f768:	460f      	mov	r7, r1
 800f76a:	4e65      	ldr	r6, [pc, #404]	; (800f900 <pow+0x578>)
 800f76c:	ed9d 4b02 	vldr	d4, [sp, #8]
 800f770:	ed96 6b02 	vldr	d6, [r6, #8]
 800f774:	ed96 7b00 	vldr	d7, [r6]
 800f778:	eeb0 5b46 	vmov.f64	d5, d6
 800f77c:	eea4 5b07 	vfma.f64	d5, d4, d7
 800f780:	ed8d 5b00 	vstr	d5, [sp]
 800f784:	ee35 6b46 	vsub.f64	d6, d5, d6
 800f788:	eeb0 5b44 	vmov.f64	d5, d4
 800f78c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f790:	ed96 7b04 	vldr	d7, [r6, #16]
 800f794:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800f798:	eea6 5b07 	vfma.f64	d5, d6, d7
 800f79c:	eeb0 7b45 	vmov.f64	d7, d5
 800f7a0:	ed96 5b06 	vldr	d5, [r6, #24]
 800f7a4:	1849      	adds	r1, r1, r1
 800f7a6:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800f7aa:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800f7ae:	eea6 7b05 	vfma.f64	d7, d6, d5
 800f7b2:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800f7b6:	ee33 3b07 	vadd.f64	d3, d3, d7
 800f7ba:	ee23 6b03 	vmul.f64	d6, d3, d3
 800f7be:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800f7c2:	ed96 5b08 	vldr	d5, [r6, #32]
 800f7c6:	ee33 7b07 	vadd.f64	d7, d3, d7
 800f7ca:	1814      	adds	r4, r2, r0
 800f7cc:	0365      	lsls	r5, r4, #13
 800f7ce:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800f7d2:	eea3 5b04 	vfma.f64	d5, d3, d4
 800f7d6:	eea6 7b05 	vfma.f64	d7, d6, d5
 800f7da:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800f7de:	ee26 6b06 	vmul.f64	d6, d6, d6
 800f7e2:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800f7e6:	2000      	movs	r0, #0
 800f7e8:	eb10 0a04 	adds.w	sl, r0, r4
 800f7ec:	eea3 5b04 	vfma.f64	d5, d3, d4
 800f7f0:	eb45 0b0c 	adc.w	fp, r5, ip
 800f7f4:	eea6 7b05 	vfma.f64	d7, d6, d5
 800f7f8:	2f00      	cmp	r7, #0
 800f7fa:	d16a      	bne.n	800f8d2 <pow+0x54a>
 800f7fc:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800f800:	4639      	mov	r1, r7
 800f802:	ea50 0301 	orrs.w	r3, r0, r1
 800f806:	f04f 0300 	mov.w	r3, #0
 800f80a:	d115      	bne.n	800f838 <pow+0x4b0>
 800f80c:	eb1a 0303 	adds.w	r3, sl, r3
 800f810:	ee0b 3a10 	vmov	s22, r3
 800f814:	4b3b      	ldr	r3, [pc, #236]	; (800f904 <pow+0x57c>)
 800f816:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800f8e8 <pow+0x560>
 800f81a:	eb4b 0303 	adc.w	r3, fp, r3
 800f81e:	ee0b 3a90 	vmov	s23, r3
 800f822:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800f826:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800f82a:	b01b      	add	sp, #108	; 0x6c
 800f82c:	ecbd 8b0a 	vpop	{d8-d12}
 800f830:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f834:	f000 ba5c 	b.w	800fcf0 <__math_check_oflow>
 800f838:	eb1a 0303 	adds.w	r3, sl, r3
 800f83c:	930a      	str	r3, [sp, #40]	; 0x28
 800f83e:	4b32      	ldr	r3, [pc, #200]	; (800f908 <pow+0x580>)
 800f840:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800f844:	eb4b 0303 	adc.w	r3, fp, r3
 800f848:	930b      	str	r3, [sp, #44]	; 0x2c
 800f84a:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800f84e:	ee27 6b05 	vmul.f64	d6, d7, d5
 800f852:	ee35 7b06 	vadd.f64	d7, d5, d6
 800f856:	eeb0 3bc7 	vabs.f64	d3, d7
 800f85a:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800f85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f862:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800f8f0 <pow+0x568>
 800f866:	d52b      	bpl.n	800f8c0 <pow+0x538>
 800f868:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f86c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f874:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800f878:	ee35 6b06 	vadd.f64	d6, d5, d6
 800f87c:	bf48      	it	mi
 800f87e:	eeb0 4b43 	vmovmi.f64	d4, d3
 800f882:	ee37 3b04 	vadd.f64	d3, d7, d4
 800f886:	ee34 5b43 	vsub.f64	d5, d4, d3
 800f88a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f88e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f892:	ee37 7b03 	vadd.f64	d7, d7, d3
 800f896:	ee37 7b44 	vsub.f64	d7, d7, d4
 800f89a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f89e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8a2:	d105      	bne.n	800f8b0 <pow+0x528>
 800f8a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f8a6:	463a      	mov	r2, r7
 800f8a8:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800f8ac:	ec43 2b17 	vmov	d7, r2, r3
 800f8b0:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800f8b4:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800f8b8:	ee26 6b00 	vmul.f64	d6, d6, d0
 800f8bc:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800f8c0:	ee27 0b00 	vmul.f64	d0, d7, d0
 800f8c4:	b01b      	add	sp, #108	; 0x6c
 800f8c6:	ecbd 8b0a 	vpop	{d8-d12}
 800f8ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8ce:	f000 ba06 	b.w	800fcde <__math_check_uflow>
 800f8d2:	ec4b ab10 	vmov	d0, sl, fp
 800f8d6:	eea7 0b00 	vfma.f64	d0, d7, d0
 800f8da:	e5a3      	b.n	800f424 <pow+0x9c>
 800f8dc:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800f8f8 <pow+0x570>
 800f8e0:	e5a0      	b.n	800f424 <pow+0x9c>
 800f8e2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f8e6:	e59d      	b.n	800f424 <pow+0x9c>
 800f8e8:	00000000 	.word	0x00000000
 800f8ec:	7f000000 	.word	0x7f000000
 800f8f0:	00000000 	.word	0x00000000
 800f8f4:	00100000 	.word	0x00100000
	...
 800f900:	080139d8 	.word	0x080139d8
 800f904:	c0f00000 	.word	0xc0f00000
 800f908:	3fe00000 	.word	0x3fe00000

0800f90c <sinf_poly>:
 800f90c:	07cb      	lsls	r3, r1, #31
 800f90e:	d412      	bmi.n	800f936 <sinf_poly+0x2a>
 800f910:	ee21 6b00 	vmul.f64	d6, d1, d0
 800f914:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 800f918:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800f91c:	eea5 7b01 	vfma.f64	d7, d5, d1
 800f920:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 800f924:	ee21 1b06 	vmul.f64	d1, d1, d6
 800f928:	eea5 0b06 	vfma.f64	d0, d5, d6
 800f92c:	eea7 0b01 	vfma.f64	d0, d7, d1
 800f930:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f934:	4770      	bx	lr
 800f936:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 800f93a:	ee21 6b01 	vmul.f64	d6, d1, d1
 800f93e:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800f942:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800f946:	eea1 7b05 	vfma.f64	d7, d1, d5
 800f94a:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800f94e:	eea1 0b05 	vfma.f64	d0, d1, d5
 800f952:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 800f956:	ee21 1b06 	vmul.f64	d1, d1, d6
 800f95a:	eea6 0b05 	vfma.f64	d0, d6, d5
 800f95e:	e7e5      	b.n	800f92c <sinf_poly+0x20>

0800f960 <sinf>:
 800f960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f962:	ee10 4a10 	vmov	r4, s0
 800f966:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800f96a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800f96e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800f972:	eef0 7a40 	vmov.f32	s15, s0
 800f976:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800f97a:	d218      	bcs.n	800f9ae <sinf+0x4e>
 800f97c:	ee26 1b06 	vmul.f64	d1, d6, d6
 800f980:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800f984:	d20a      	bcs.n	800f99c <sinf+0x3c>
 800f986:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800f98a:	d103      	bne.n	800f994 <sinf+0x34>
 800f98c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800f990:	ed8d 1a01 	vstr	s2, [sp, #4]
 800f994:	eeb0 0a67 	vmov.f32	s0, s15
 800f998:	b003      	add	sp, #12
 800f99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f99c:	483e      	ldr	r0, [pc, #248]	; (800fa98 <sinf+0x138>)
 800f99e:	eeb0 0b46 	vmov.f64	d0, d6
 800f9a2:	2100      	movs	r1, #0
 800f9a4:	b003      	add	sp, #12
 800f9a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f9aa:	f7ff bfaf 	b.w	800f90c <sinf_poly>
 800f9ae:	f240 422e 	movw	r2, #1070	; 0x42e
 800f9b2:	4293      	cmp	r3, r2
 800f9b4:	d824      	bhi.n	800fa00 <sinf+0xa0>
 800f9b6:	4b38      	ldr	r3, [pc, #224]	; (800fa98 <sinf+0x138>)
 800f9b8:	ed93 7b08 	vldr	d7, [r3, #32]
 800f9bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f9c0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800f9c4:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800f9c8:	ee17 1a90 	vmov	r1, s15
 800f9cc:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800f9d0:	1609      	asrs	r1, r1, #24
 800f9d2:	ee07 1a90 	vmov	s15, r1
 800f9d6:	f001 0203 	and.w	r2, r1, #3
 800f9da:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800f9de:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800f9e2:	ed92 0b00 	vldr	d0, [r2]
 800f9e6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800f9ea:	f011 0f02 	tst.w	r1, #2
 800f9ee:	eea5 6b47 	vfms.f64	d6, d5, d7
 800f9f2:	bf08      	it	eq
 800f9f4:	4618      	moveq	r0, r3
 800f9f6:	ee26 1b06 	vmul.f64	d1, d6, d6
 800f9fa:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f9fe:	e7d1      	b.n	800f9a4 <sinf+0x44>
 800fa00:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800fa04:	d23d      	bcs.n	800fa82 <sinf+0x122>
 800fa06:	4b25      	ldr	r3, [pc, #148]	; (800fa9c <sinf+0x13c>)
 800fa08:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800fa0c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800fa10:	f3c4 0116 	ubfx	r1, r4, #0, #23
 800fa14:	6a06      	ldr	r6, [r0, #32]
 800fa16:	6900      	ldr	r0, [r0, #16]
 800fa18:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800fa1c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800fa20:	40a9      	lsls	r1, r5
 800fa22:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800fa26:	fba1 6706 	umull	r6, r7, r1, r6
 800fa2a:	fb05 f301 	mul.w	r3, r5, r1
 800fa2e:	463a      	mov	r2, r7
 800fa30:	fbe0 2301 	umlal	r2, r3, r0, r1
 800fa34:	1c11      	adds	r1, r2, #0
 800fa36:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800fa3a:	2000      	movs	r0, #0
 800fa3c:	1a10      	subs	r0, r2, r0
 800fa3e:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 800fa42:	eb63 0101 	sbc.w	r1, r3, r1
 800fa46:	f7f0 fe31 	bl	80006ac <__aeabi_l2d>
 800fa4a:	0fb5      	lsrs	r5, r6, #30
 800fa4c:	4a12      	ldr	r2, [pc, #72]	; (800fa98 <sinf+0x138>)
 800fa4e:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 800fa52:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 800fa90 <sinf+0x130>
 800fa56:	ec41 0b17 	vmov	d7, r0, r1
 800fa5a:	f003 0103 	and.w	r1, r3, #3
 800fa5e:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800fa62:	ee27 0b00 	vmul.f64	d0, d7, d0
 800fa66:	ed91 7b00 	vldr	d7, [r1]
 800fa6a:	ee20 1b00 	vmul.f64	d1, d0, d0
 800fa6e:	f013 0f02 	tst.w	r3, #2
 800fa72:	f102 0070 	add.w	r0, r2, #112	; 0x70
 800fa76:	4629      	mov	r1, r5
 800fa78:	bf08      	it	eq
 800fa7a:	4610      	moveq	r0, r2
 800fa7c:	ee27 0b00 	vmul.f64	d0, d7, d0
 800fa80:	e790      	b.n	800f9a4 <sinf+0x44>
 800fa82:	b003      	add	sp, #12
 800fa84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fa88:	f7ff bc39 	b.w	800f2fe <__math_invalidf>
 800fa8c:	f3af 8000 	nop.w
 800fa90:	54442d18 	.word	0x54442d18
 800fa94:	3c1921fb 	.word	0x3c1921fb
 800fa98:	080138e0 	.word	0x080138e0
 800fa9c:	08013880 	.word	0x08013880

0800faa0 <atan2f>:
 800faa0:	f000 b826 	b.w	800faf0 <__ieee754_atan2f>

0800faa4 <sqrtf>:
 800faa4:	b508      	push	{r3, lr}
 800faa6:	ed2d 8b02 	vpush	{d8}
 800faaa:	eeb0 8a40 	vmov.f32	s16, s0
 800faae:	f000 f8bd 	bl	800fc2c <__ieee754_sqrtf>
 800fab2:	4b0d      	ldr	r3, [pc, #52]	; (800fae8 <sqrtf+0x44>)
 800fab4:	f993 3000 	ldrsb.w	r3, [r3]
 800fab8:	3301      	adds	r3, #1
 800faba:	d011      	beq.n	800fae0 <sqrtf+0x3c>
 800fabc:	eeb4 8a48 	vcmp.f32	s16, s16
 800fac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fac4:	d60c      	bvs.n	800fae0 <sqrtf+0x3c>
 800fac6:	eddf 8a09 	vldr	s17, [pc, #36]	; 800faec <sqrtf+0x48>
 800faca:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800face:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fad2:	d505      	bpl.n	800fae0 <sqrtf+0x3c>
 800fad4:	f000 f9fc 	bl	800fed0 <__errno>
 800fad8:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800fadc:	2321      	movs	r3, #33	; 0x21
 800fade:	6003      	str	r3, [r0, #0]
 800fae0:	ecbd 8b02 	vpop	{d8}
 800fae4:	bd08      	pop	{r3, pc}
 800fae6:	bf00      	nop
 800fae8:	24000045 	.word	0x24000045
 800faec:	00000000 	.word	0x00000000

0800faf0 <__ieee754_atan2f>:
 800faf0:	ee10 2a90 	vmov	r2, s1
 800faf4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800faf8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800fafc:	b510      	push	{r4, lr}
 800fafe:	eef0 7a40 	vmov.f32	s15, s0
 800fb02:	dc06      	bgt.n	800fb12 <__ieee754_atan2f+0x22>
 800fb04:	ee10 0a10 	vmov	r0, s0
 800fb08:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800fb0c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fb10:	dd04      	ble.n	800fb1c <__ieee754_atan2f+0x2c>
 800fb12:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800fb16:	eeb0 0a67 	vmov.f32	s0, s15
 800fb1a:	bd10      	pop	{r4, pc}
 800fb1c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800fb20:	d103      	bne.n	800fb2a <__ieee754_atan2f+0x3a>
 800fb22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb26:	f000 b8f7 	b.w	800fd18 <atanf>
 800fb2a:	1794      	asrs	r4, r2, #30
 800fb2c:	f004 0402 	and.w	r4, r4, #2
 800fb30:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800fb34:	b93b      	cbnz	r3, 800fb46 <__ieee754_atan2f+0x56>
 800fb36:	2c02      	cmp	r4, #2
 800fb38:	d05c      	beq.n	800fbf4 <__ieee754_atan2f+0x104>
 800fb3a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800fc08 <__ieee754_atan2f+0x118>
 800fb3e:	2c03      	cmp	r4, #3
 800fb40:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800fb44:	e7e7      	b.n	800fb16 <__ieee754_atan2f+0x26>
 800fb46:	b939      	cbnz	r1, 800fb58 <__ieee754_atan2f+0x68>
 800fb48:	eddf 7a30 	vldr	s15, [pc, #192]	; 800fc0c <__ieee754_atan2f+0x11c>
 800fb4c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800fc10 <__ieee754_atan2f+0x120>
 800fb50:	2800      	cmp	r0, #0
 800fb52:	fe67 7a80 	vselge.f32	s15, s15, s0
 800fb56:	e7de      	b.n	800fb16 <__ieee754_atan2f+0x26>
 800fb58:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800fb5c:	d110      	bne.n	800fb80 <__ieee754_atan2f+0x90>
 800fb5e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fb62:	f104 34ff 	add.w	r4, r4, #4294967295
 800fb66:	d107      	bne.n	800fb78 <__ieee754_atan2f+0x88>
 800fb68:	2c02      	cmp	r4, #2
 800fb6a:	d846      	bhi.n	800fbfa <__ieee754_atan2f+0x10a>
 800fb6c:	4b29      	ldr	r3, [pc, #164]	; (800fc14 <__ieee754_atan2f+0x124>)
 800fb6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fb72:	edd4 7a00 	vldr	s15, [r4]
 800fb76:	e7ce      	b.n	800fb16 <__ieee754_atan2f+0x26>
 800fb78:	2c02      	cmp	r4, #2
 800fb7a:	d841      	bhi.n	800fc00 <__ieee754_atan2f+0x110>
 800fb7c:	4b26      	ldr	r3, [pc, #152]	; (800fc18 <__ieee754_atan2f+0x128>)
 800fb7e:	e7f6      	b.n	800fb6e <__ieee754_atan2f+0x7e>
 800fb80:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fb84:	d0e0      	beq.n	800fb48 <__ieee754_atan2f+0x58>
 800fb86:	1a5b      	subs	r3, r3, r1
 800fb88:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800fb8c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800fb90:	da1a      	bge.n	800fbc8 <__ieee754_atan2f+0xd8>
 800fb92:	2a00      	cmp	r2, #0
 800fb94:	da01      	bge.n	800fb9a <__ieee754_atan2f+0xaa>
 800fb96:	313c      	adds	r1, #60	; 0x3c
 800fb98:	db19      	blt.n	800fbce <__ieee754_atan2f+0xde>
 800fb9a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800fb9e:	f000 f98f 	bl	800fec0 <fabsf>
 800fba2:	f000 f8b9 	bl	800fd18 <atanf>
 800fba6:	eef0 7a40 	vmov.f32	s15, s0
 800fbaa:	2c01      	cmp	r4, #1
 800fbac:	d012      	beq.n	800fbd4 <__ieee754_atan2f+0xe4>
 800fbae:	2c02      	cmp	r4, #2
 800fbb0:	d017      	beq.n	800fbe2 <__ieee754_atan2f+0xf2>
 800fbb2:	2c00      	cmp	r4, #0
 800fbb4:	d0af      	beq.n	800fb16 <__ieee754_atan2f+0x26>
 800fbb6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800fc1c <__ieee754_atan2f+0x12c>
 800fbba:	ee77 7a80 	vadd.f32	s15, s15, s0
 800fbbe:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800fc20 <__ieee754_atan2f+0x130>
 800fbc2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800fbc6:	e7a6      	b.n	800fb16 <__ieee754_atan2f+0x26>
 800fbc8:	eddf 7a10 	vldr	s15, [pc, #64]	; 800fc0c <__ieee754_atan2f+0x11c>
 800fbcc:	e7ed      	b.n	800fbaa <__ieee754_atan2f+0xba>
 800fbce:	eddf 7a15 	vldr	s15, [pc, #84]	; 800fc24 <__ieee754_atan2f+0x134>
 800fbd2:	e7ea      	b.n	800fbaa <__ieee754_atan2f+0xba>
 800fbd4:	ee17 3a90 	vmov	r3, s15
 800fbd8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fbdc:	ee07 3a90 	vmov	s15, r3
 800fbe0:	e799      	b.n	800fb16 <__ieee754_atan2f+0x26>
 800fbe2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800fc1c <__ieee754_atan2f+0x12c>
 800fbe6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800fbea:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800fc20 <__ieee754_atan2f+0x130>
 800fbee:	ee70 7a67 	vsub.f32	s15, s0, s15
 800fbf2:	e790      	b.n	800fb16 <__ieee754_atan2f+0x26>
 800fbf4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800fc20 <__ieee754_atan2f+0x130>
 800fbf8:	e78d      	b.n	800fb16 <__ieee754_atan2f+0x26>
 800fbfa:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800fc28 <__ieee754_atan2f+0x138>
 800fbfe:	e78a      	b.n	800fb16 <__ieee754_atan2f+0x26>
 800fc00:	eddf 7a08 	vldr	s15, [pc, #32]	; 800fc24 <__ieee754_atan2f+0x134>
 800fc04:	e787      	b.n	800fb16 <__ieee754_atan2f+0x26>
 800fc06:	bf00      	nop
 800fc08:	c0490fdb 	.word	0xc0490fdb
 800fc0c:	3fc90fdb 	.word	0x3fc90fdb
 800fc10:	bfc90fdb 	.word	0xbfc90fdb
 800fc14:	080139c0 	.word	0x080139c0
 800fc18:	080139cc 	.word	0x080139cc
 800fc1c:	33bbbd2e 	.word	0x33bbbd2e
 800fc20:	40490fdb 	.word	0x40490fdb
 800fc24:	00000000 	.word	0x00000000
 800fc28:	3f490fdb 	.word	0x3f490fdb

0800fc2c <__ieee754_sqrtf>:
 800fc2c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fc30:	4770      	bx	lr

0800fc32 <with_errno>:
 800fc32:	b513      	push	{r0, r1, r4, lr}
 800fc34:	4604      	mov	r4, r0
 800fc36:	ed8d 0b00 	vstr	d0, [sp]
 800fc3a:	f000 f949 	bl	800fed0 <__errno>
 800fc3e:	ed9d 0b00 	vldr	d0, [sp]
 800fc42:	6004      	str	r4, [r0, #0]
 800fc44:	b002      	add	sp, #8
 800fc46:	bd10      	pop	{r4, pc}

0800fc48 <xflow>:
 800fc48:	b082      	sub	sp, #8
 800fc4a:	b158      	cbz	r0, 800fc64 <xflow+0x1c>
 800fc4c:	eeb1 7b40 	vneg.f64	d7, d0
 800fc50:	ed8d 7b00 	vstr	d7, [sp]
 800fc54:	ed9d 7b00 	vldr	d7, [sp]
 800fc58:	2022      	movs	r0, #34	; 0x22
 800fc5a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800fc5e:	b002      	add	sp, #8
 800fc60:	f7ff bfe7 	b.w	800fc32 <with_errno>
 800fc64:	eeb0 7b40 	vmov.f64	d7, d0
 800fc68:	e7f2      	b.n	800fc50 <xflow+0x8>
 800fc6a:	0000      	movs	r0, r0
 800fc6c:	0000      	movs	r0, r0
	...

0800fc70 <__math_uflow>:
 800fc70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fc78 <__math_uflow+0x8>
 800fc74:	f7ff bfe8 	b.w	800fc48 <xflow>
 800fc78:	00000000 	.word	0x00000000
 800fc7c:	10000000 	.word	0x10000000

0800fc80 <__math_oflow>:
 800fc80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fc88 <__math_oflow+0x8>
 800fc84:	f7ff bfe0 	b.w	800fc48 <xflow>
 800fc88:	00000000 	.word	0x00000000
 800fc8c:	70000000 	.word	0x70000000

0800fc90 <__math_divzero>:
 800fc90:	b082      	sub	sp, #8
 800fc92:	2800      	cmp	r0, #0
 800fc94:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800fc98:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800fc9c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800fca0:	ed8d 7b00 	vstr	d7, [sp]
 800fca4:	ed9d 0b00 	vldr	d0, [sp]
 800fca8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800fcb8 <__math_divzero+0x28>
 800fcac:	2022      	movs	r0, #34	; 0x22
 800fcae:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800fcb2:	b002      	add	sp, #8
 800fcb4:	f7ff bfbd 	b.w	800fc32 <with_errno>
	...

0800fcc0 <__math_invalid>:
 800fcc0:	eeb0 7b40 	vmov.f64	d7, d0
 800fcc4:	eeb4 7b47 	vcmp.f64	d7, d7
 800fcc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fccc:	ee30 6b40 	vsub.f64	d6, d0, d0
 800fcd0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800fcd4:	d602      	bvs.n	800fcdc <__math_invalid+0x1c>
 800fcd6:	2021      	movs	r0, #33	; 0x21
 800fcd8:	f7ff bfab 	b.w	800fc32 <with_errno>
 800fcdc:	4770      	bx	lr

0800fcde <__math_check_uflow>:
 800fcde:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800fce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fce6:	d102      	bne.n	800fcee <__math_check_uflow+0x10>
 800fce8:	2022      	movs	r0, #34	; 0x22
 800fcea:	f7ff bfa2 	b.w	800fc32 <with_errno>
 800fcee:	4770      	bx	lr

0800fcf0 <__math_check_oflow>:
 800fcf0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800fd10 <__math_check_oflow+0x20>
 800fcf4:	eeb0 7bc0 	vabs.f64	d7, d0
 800fcf8:	eeb4 7b46 	vcmp.f64	d7, d6
 800fcfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd00:	dd02      	ble.n	800fd08 <__math_check_oflow+0x18>
 800fd02:	2022      	movs	r0, #34	; 0x22
 800fd04:	f7ff bf95 	b.w	800fc32 <with_errno>
 800fd08:	4770      	bx	lr
 800fd0a:	bf00      	nop
 800fd0c:	f3af 8000 	nop.w
 800fd10:	ffffffff 	.word	0xffffffff
 800fd14:	7fefffff 	.word	0x7fefffff

0800fd18 <atanf>:
 800fd18:	b538      	push	{r3, r4, r5, lr}
 800fd1a:	ee10 5a10 	vmov	r5, s0
 800fd1e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800fd22:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800fd26:	eef0 7a40 	vmov.f32	s15, s0
 800fd2a:	db0f      	blt.n	800fd4c <atanf+0x34>
 800fd2c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800fd30:	dd04      	ble.n	800fd3c <atanf+0x24>
 800fd32:	ee70 7a00 	vadd.f32	s15, s0, s0
 800fd36:	eeb0 0a67 	vmov.f32	s0, s15
 800fd3a:	bd38      	pop	{r3, r4, r5, pc}
 800fd3c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800fe74 <atanf+0x15c>
 800fd40:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800fe78 <atanf+0x160>
 800fd44:	2d00      	cmp	r5, #0
 800fd46:	fe77 7a80 	vselgt.f32	s15, s15, s0
 800fd4a:	e7f4      	b.n	800fd36 <atanf+0x1e>
 800fd4c:	4b4b      	ldr	r3, [pc, #300]	; (800fe7c <atanf+0x164>)
 800fd4e:	429c      	cmp	r4, r3
 800fd50:	dc10      	bgt.n	800fd74 <atanf+0x5c>
 800fd52:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800fd56:	da0a      	bge.n	800fd6e <atanf+0x56>
 800fd58:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800fe80 <atanf+0x168>
 800fd5c:	ee30 7a07 	vadd.f32	s14, s0, s14
 800fd60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fd64:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800fd68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd6c:	dce3      	bgt.n	800fd36 <atanf+0x1e>
 800fd6e:	f04f 33ff 	mov.w	r3, #4294967295
 800fd72:	e013      	b.n	800fd9c <atanf+0x84>
 800fd74:	f000 f8a4 	bl	800fec0 <fabsf>
 800fd78:	4b42      	ldr	r3, [pc, #264]	; (800fe84 <atanf+0x16c>)
 800fd7a:	429c      	cmp	r4, r3
 800fd7c:	dc4f      	bgt.n	800fe1e <atanf+0x106>
 800fd7e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800fd82:	429c      	cmp	r4, r3
 800fd84:	dc41      	bgt.n	800fe0a <atanf+0xf2>
 800fd86:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800fd8a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fd8e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fd92:	2300      	movs	r3, #0
 800fd94:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fd98:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fd9c:	1c5a      	adds	r2, r3, #1
 800fd9e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800fda2:	eddf 5a39 	vldr	s11, [pc, #228]	; 800fe88 <atanf+0x170>
 800fda6:	ed9f 6a39 	vldr	s12, [pc, #228]	; 800fe8c <atanf+0x174>
 800fdaa:	ed9f 5a39 	vldr	s10, [pc, #228]	; 800fe90 <atanf+0x178>
 800fdae:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800fe94 <atanf+0x17c>
 800fdb2:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800fdb6:	eea7 6a25 	vfma.f32	s12, s14, s11
 800fdba:	eddf 5a37 	vldr	s11, [pc, #220]	; 800fe98 <atanf+0x180>
 800fdbe:	eee6 5a07 	vfma.f32	s11, s12, s14
 800fdc2:	ed9f 6a36 	vldr	s12, [pc, #216]	; 800fe9c <atanf+0x184>
 800fdc6:	eea5 6a87 	vfma.f32	s12, s11, s14
 800fdca:	eddf 5a35 	vldr	s11, [pc, #212]	; 800fea0 <atanf+0x188>
 800fdce:	eee6 5a07 	vfma.f32	s11, s12, s14
 800fdd2:	ed9f 6a34 	vldr	s12, [pc, #208]	; 800fea4 <atanf+0x18c>
 800fdd6:	eea5 6a87 	vfma.f32	s12, s11, s14
 800fdda:	eddf 5a33 	vldr	s11, [pc, #204]	; 800fea8 <atanf+0x190>
 800fdde:	eee7 5a05 	vfma.f32	s11, s14, s10
 800fde2:	ed9f 5a32 	vldr	s10, [pc, #200]	; 800feac <atanf+0x194>
 800fde6:	eea5 5a87 	vfma.f32	s10, s11, s14
 800fdea:	eddf 5a31 	vldr	s11, [pc, #196]	; 800feb0 <atanf+0x198>
 800fdee:	eee5 5a07 	vfma.f32	s11, s10, s14
 800fdf2:	eea5 0a87 	vfma.f32	s0, s11, s14
 800fdf6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800fdfa:	eea6 0a26 	vfma.f32	s0, s12, s13
 800fdfe:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fe02:	d121      	bne.n	800fe48 <atanf+0x130>
 800fe04:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800fe08:	e795      	b.n	800fd36 <atanf+0x1e>
 800fe0a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fe0e:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fe12:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fe16:	2301      	movs	r3, #1
 800fe18:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fe1c:	e7be      	b.n	800fd9c <atanf+0x84>
 800fe1e:	4b25      	ldr	r3, [pc, #148]	; (800feb4 <atanf+0x19c>)
 800fe20:	429c      	cmp	r4, r3
 800fe22:	dc0b      	bgt.n	800fe3c <atanf+0x124>
 800fe24:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800fe28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fe2c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fe30:	2302      	movs	r3, #2
 800fe32:	ee70 6a67 	vsub.f32	s13, s0, s15
 800fe36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe3a:	e7af      	b.n	800fd9c <atanf+0x84>
 800fe3c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fe40:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fe44:	2303      	movs	r3, #3
 800fe46:	e7a9      	b.n	800fd9c <atanf+0x84>
 800fe48:	4a1b      	ldr	r2, [pc, #108]	; (800feb8 <atanf+0x1a0>)
 800fe4a:	491c      	ldr	r1, [pc, #112]	; (800febc <atanf+0x1a4>)
 800fe4c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fe50:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800fe54:	ed93 7a00 	vldr	s14, [r3]
 800fe58:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fe5c:	2d00      	cmp	r5, #0
 800fe5e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800fe62:	ed92 0a00 	vldr	s0, [r2]
 800fe66:	ee70 7a67 	vsub.f32	s15, s0, s15
 800fe6a:	bfb8      	it	lt
 800fe6c:	eef1 7a67 	vneglt.f32	s15, s15
 800fe70:	e761      	b.n	800fd36 <atanf+0x1e>
 800fe72:	bf00      	nop
 800fe74:	3fc90fdb 	.word	0x3fc90fdb
 800fe78:	bfc90fdb 	.word	0xbfc90fdb
 800fe7c:	3edfffff 	.word	0x3edfffff
 800fe80:	7149f2ca 	.word	0x7149f2ca
 800fe84:	3f97ffff 	.word	0x3f97ffff
 800fe88:	3c8569d7 	.word	0x3c8569d7
 800fe8c:	3d4bda59 	.word	0x3d4bda59
 800fe90:	bd15a221 	.word	0xbd15a221
 800fe94:	be4ccccd 	.word	0xbe4ccccd
 800fe98:	3d886b35 	.word	0x3d886b35
 800fe9c:	3dba2e6e 	.word	0x3dba2e6e
 800fea0:	3e124925 	.word	0x3e124925
 800fea4:	3eaaaaab 	.word	0x3eaaaaab
 800fea8:	bd6ef16b 	.word	0xbd6ef16b
 800feac:	bd9d8795 	.word	0xbd9d8795
 800feb0:	bde38e38 	.word	0xbde38e38
 800feb4:	401bffff 	.word	0x401bffff
 800feb8:	08014248 	.word	0x08014248
 800febc:	08014258 	.word	0x08014258

0800fec0 <fabsf>:
 800fec0:	ee10 3a10 	vmov	r3, s0
 800fec4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fec8:	ee00 3a10 	vmov	s0, r3
 800fecc:	4770      	bx	lr
	...

0800fed0 <__errno>:
 800fed0:	4b01      	ldr	r3, [pc, #4]	; (800fed8 <__errno+0x8>)
 800fed2:	6818      	ldr	r0, [r3, #0]
 800fed4:	4770      	bx	lr
 800fed6:	bf00      	nop
 800fed8:	24000048 	.word	0x24000048

0800fedc <__libc_init_array>:
 800fedc:	b570      	push	{r4, r5, r6, lr}
 800fede:	4d0d      	ldr	r5, [pc, #52]	; (800ff14 <__libc_init_array+0x38>)
 800fee0:	4c0d      	ldr	r4, [pc, #52]	; (800ff18 <__libc_init_array+0x3c>)
 800fee2:	1b64      	subs	r4, r4, r5
 800fee4:	10a4      	asrs	r4, r4, #2
 800fee6:	2600      	movs	r6, #0
 800fee8:	42a6      	cmp	r6, r4
 800feea:	d109      	bne.n	800ff00 <__libc_init_array+0x24>
 800feec:	4d0b      	ldr	r5, [pc, #44]	; (800ff1c <__libc_init_array+0x40>)
 800feee:	4c0c      	ldr	r4, [pc, #48]	; (800ff20 <__libc_init_array+0x44>)
 800fef0:	f002 fc60 	bl	80127b4 <_init>
 800fef4:	1b64      	subs	r4, r4, r5
 800fef6:	10a4      	asrs	r4, r4, #2
 800fef8:	2600      	movs	r6, #0
 800fefa:	42a6      	cmp	r6, r4
 800fefc:	d105      	bne.n	800ff0a <__libc_init_array+0x2e>
 800fefe:	bd70      	pop	{r4, r5, r6, pc}
 800ff00:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff04:	4798      	blx	r3
 800ff06:	3601      	adds	r6, #1
 800ff08:	e7ee      	b.n	800fee8 <__libc_init_array+0xc>
 800ff0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff0e:	4798      	blx	r3
 800ff10:	3601      	adds	r6, #1
 800ff12:	e7f2      	b.n	800fefa <__libc_init_array+0x1e>
 800ff14:	08014654 	.word	0x08014654
 800ff18:	08014654 	.word	0x08014654
 800ff1c:	08014654 	.word	0x08014654
 800ff20:	0801465c 	.word	0x0801465c

0800ff24 <memcpy>:
 800ff24:	440a      	add	r2, r1
 800ff26:	4291      	cmp	r1, r2
 800ff28:	f100 33ff 	add.w	r3, r0, #4294967295
 800ff2c:	d100      	bne.n	800ff30 <memcpy+0xc>
 800ff2e:	4770      	bx	lr
 800ff30:	b510      	push	{r4, lr}
 800ff32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff3a:	4291      	cmp	r1, r2
 800ff3c:	d1f9      	bne.n	800ff32 <memcpy+0xe>
 800ff3e:	bd10      	pop	{r4, pc}

0800ff40 <memset>:
 800ff40:	4402      	add	r2, r0
 800ff42:	4603      	mov	r3, r0
 800ff44:	4293      	cmp	r3, r2
 800ff46:	d100      	bne.n	800ff4a <memset+0xa>
 800ff48:	4770      	bx	lr
 800ff4a:	f803 1b01 	strb.w	r1, [r3], #1
 800ff4e:	e7f9      	b.n	800ff44 <memset+0x4>

0800ff50 <__cvt>:
 800ff50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff52:	ed2d 8b02 	vpush	{d8}
 800ff56:	eeb0 8b40 	vmov.f64	d8, d0
 800ff5a:	b085      	sub	sp, #20
 800ff5c:	4617      	mov	r7, r2
 800ff5e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ff60:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ff62:	ee18 2a90 	vmov	r2, s17
 800ff66:	f025 0520 	bic.w	r5, r5, #32
 800ff6a:	2a00      	cmp	r2, #0
 800ff6c:	bfb6      	itet	lt
 800ff6e:	222d      	movlt	r2, #45	; 0x2d
 800ff70:	2200      	movge	r2, #0
 800ff72:	eeb1 8b40 	vneglt.f64	d8, d0
 800ff76:	2d46      	cmp	r5, #70	; 0x46
 800ff78:	460c      	mov	r4, r1
 800ff7a:	701a      	strb	r2, [r3, #0]
 800ff7c:	d004      	beq.n	800ff88 <__cvt+0x38>
 800ff7e:	2d45      	cmp	r5, #69	; 0x45
 800ff80:	d100      	bne.n	800ff84 <__cvt+0x34>
 800ff82:	3401      	adds	r4, #1
 800ff84:	2102      	movs	r1, #2
 800ff86:	e000      	b.n	800ff8a <__cvt+0x3a>
 800ff88:	2103      	movs	r1, #3
 800ff8a:	ab03      	add	r3, sp, #12
 800ff8c:	9301      	str	r3, [sp, #4]
 800ff8e:	ab02      	add	r3, sp, #8
 800ff90:	9300      	str	r3, [sp, #0]
 800ff92:	4622      	mov	r2, r4
 800ff94:	4633      	mov	r3, r6
 800ff96:	eeb0 0b48 	vmov.f64	d0, d8
 800ff9a:	f000 fca9 	bl	80108f0 <_dtoa_r>
 800ff9e:	2d47      	cmp	r5, #71	; 0x47
 800ffa0:	d109      	bne.n	800ffb6 <__cvt+0x66>
 800ffa2:	07fb      	lsls	r3, r7, #31
 800ffa4:	d407      	bmi.n	800ffb6 <__cvt+0x66>
 800ffa6:	9b03      	ldr	r3, [sp, #12]
 800ffa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ffaa:	1a1b      	subs	r3, r3, r0
 800ffac:	6013      	str	r3, [r2, #0]
 800ffae:	b005      	add	sp, #20
 800ffb0:	ecbd 8b02 	vpop	{d8}
 800ffb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffb6:	2d46      	cmp	r5, #70	; 0x46
 800ffb8:	eb00 0204 	add.w	r2, r0, r4
 800ffbc:	d10c      	bne.n	800ffd8 <__cvt+0x88>
 800ffbe:	7803      	ldrb	r3, [r0, #0]
 800ffc0:	2b30      	cmp	r3, #48	; 0x30
 800ffc2:	d107      	bne.n	800ffd4 <__cvt+0x84>
 800ffc4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ffc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffcc:	bf1c      	itt	ne
 800ffce:	f1c4 0401 	rsbne	r4, r4, #1
 800ffd2:	6034      	strne	r4, [r6, #0]
 800ffd4:	6833      	ldr	r3, [r6, #0]
 800ffd6:	441a      	add	r2, r3
 800ffd8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ffdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffe0:	bf08      	it	eq
 800ffe2:	9203      	streq	r2, [sp, #12]
 800ffe4:	2130      	movs	r1, #48	; 0x30
 800ffe6:	9b03      	ldr	r3, [sp, #12]
 800ffe8:	4293      	cmp	r3, r2
 800ffea:	d2dc      	bcs.n	800ffa6 <__cvt+0x56>
 800ffec:	1c5c      	adds	r4, r3, #1
 800ffee:	9403      	str	r4, [sp, #12]
 800fff0:	7019      	strb	r1, [r3, #0]
 800fff2:	e7f8      	b.n	800ffe6 <__cvt+0x96>

0800fff4 <__exponent>:
 800fff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fff6:	4603      	mov	r3, r0
 800fff8:	2900      	cmp	r1, #0
 800fffa:	bfb8      	it	lt
 800fffc:	4249      	neglt	r1, r1
 800fffe:	f803 2b02 	strb.w	r2, [r3], #2
 8010002:	bfb4      	ite	lt
 8010004:	222d      	movlt	r2, #45	; 0x2d
 8010006:	222b      	movge	r2, #43	; 0x2b
 8010008:	2909      	cmp	r1, #9
 801000a:	7042      	strb	r2, [r0, #1]
 801000c:	dd2a      	ble.n	8010064 <__exponent+0x70>
 801000e:	f10d 0407 	add.w	r4, sp, #7
 8010012:	46a4      	mov	ip, r4
 8010014:	270a      	movs	r7, #10
 8010016:	46a6      	mov	lr, r4
 8010018:	460a      	mov	r2, r1
 801001a:	fb91 f6f7 	sdiv	r6, r1, r7
 801001e:	fb07 1516 	mls	r5, r7, r6, r1
 8010022:	3530      	adds	r5, #48	; 0x30
 8010024:	2a63      	cmp	r2, #99	; 0x63
 8010026:	f104 34ff 	add.w	r4, r4, #4294967295
 801002a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801002e:	4631      	mov	r1, r6
 8010030:	dcf1      	bgt.n	8010016 <__exponent+0x22>
 8010032:	3130      	adds	r1, #48	; 0x30
 8010034:	f1ae 0502 	sub.w	r5, lr, #2
 8010038:	f804 1c01 	strb.w	r1, [r4, #-1]
 801003c:	1c44      	adds	r4, r0, #1
 801003e:	4629      	mov	r1, r5
 8010040:	4561      	cmp	r1, ip
 8010042:	d30a      	bcc.n	801005a <__exponent+0x66>
 8010044:	f10d 0209 	add.w	r2, sp, #9
 8010048:	eba2 020e 	sub.w	r2, r2, lr
 801004c:	4565      	cmp	r5, ip
 801004e:	bf88      	it	hi
 8010050:	2200      	movhi	r2, #0
 8010052:	4413      	add	r3, r2
 8010054:	1a18      	subs	r0, r3, r0
 8010056:	b003      	add	sp, #12
 8010058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801005a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801005e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010062:	e7ed      	b.n	8010040 <__exponent+0x4c>
 8010064:	2330      	movs	r3, #48	; 0x30
 8010066:	3130      	adds	r1, #48	; 0x30
 8010068:	7083      	strb	r3, [r0, #2]
 801006a:	70c1      	strb	r1, [r0, #3]
 801006c:	1d03      	adds	r3, r0, #4
 801006e:	e7f1      	b.n	8010054 <__exponent+0x60>

08010070 <_printf_float>:
 8010070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010074:	b08b      	sub	sp, #44	; 0x2c
 8010076:	460c      	mov	r4, r1
 8010078:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801007c:	4616      	mov	r6, r2
 801007e:	461f      	mov	r7, r3
 8010080:	4605      	mov	r5, r0
 8010082:	f001 f9b7 	bl	80113f4 <_localeconv_r>
 8010086:	f8d0 b000 	ldr.w	fp, [r0]
 801008a:	4658      	mov	r0, fp
 801008c:	f7f0 f928 	bl	80002e0 <strlen>
 8010090:	2300      	movs	r3, #0
 8010092:	9308      	str	r3, [sp, #32]
 8010094:	f8d8 3000 	ldr.w	r3, [r8]
 8010098:	f894 9018 	ldrb.w	r9, [r4, #24]
 801009c:	6822      	ldr	r2, [r4, #0]
 801009e:	3307      	adds	r3, #7
 80100a0:	f023 0307 	bic.w	r3, r3, #7
 80100a4:	f103 0108 	add.w	r1, r3, #8
 80100a8:	f8c8 1000 	str.w	r1, [r8]
 80100ac:	4682      	mov	sl, r0
 80100ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80100b2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80100b6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8010318 <_printf_float+0x2a8>
 80100ba:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80100be:	eeb0 6bc0 	vabs.f64	d6, d0
 80100c2:	eeb4 6b47 	vcmp.f64	d6, d7
 80100c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ca:	dd24      	ble.n	8010116 <_printf_float+0xa6>
 80100cc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80100d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100d4:	d502      	bpl.n	80100dc <_printf_float+0x6c>
 80100d6:	232d      	movs	r3, #45	; 0x2d
 80100d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100dc:	4b90      	ldr	r3, [pc, #576]	; (8010320 <_printf_float+0x2b0>)
 80100de:	4891      	ldr	r0, [pc, #580]	; (8010324 <_printf_float+0x2b4>)
 80100e0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80100e4:	bf94      	ite	ls
 80100e6:	4698      	movls	r8, r3
 80100e8:	4680      	movhi	r8, r0
 80100ea:	2303      	movs	r3, #3
 80100ec:	6123      	str	r3, [r4, #16]
 80100ee:	f022 0204 	bic.w	r2, r2, #4
 80100f2:	2300      	movs	r3, #0
 80100f4:	6022      	str	r2, [r4, #0]
 80100f6:	9304      	str	r3, [sp, #16]
 80100f8:	9700      	str	r7, [sp, #0]
 80100fa:	4633      	mov	r3, r6
 80100fc:	aa09      	add	r2, sp, #36	; 0x24
 80100fe:	4621      	mov	r1, r4
 8010100:	4628      	mov	r0, r5
 8010102:	f000 f9d3 	bl	80104ac <_printf_common>
 8010106:	3001      	adds	r0, #1
 8010108:	f040 808a 	bne.w	8010220 <_printf_float+0x1b0>
 801010c:	f04f 30ff 	mov.w	r0, #4294967295
 8010110:	b00b      	add	sp, #44	; 0x2c
 8010112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010116:	eeb4 0b40 	vcmp.f64	d0, d0
 801011a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801011e:	d709      	bvc.n	8010134 <_printf_float+0xc4>
 8010120:	ee10 3a90 	vmov	r3, s1
 8010124:	2b00      	cmp	r3, #0
 8010126:	bfbc      	itt	lt
 8010128:	232d      	movlt	r3, #45	; 0x2d
 801012a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801012e:	487e      	ldr	r0, [pc, #504]	; (8010328 <_printf_float+0x2b8>)
 8010130:	4b7e      	ldr	r3, [pc, #504]	; (801032c <_printf_float+0x2bc>)
 8010132:	e7d5      	b.n	80100e0 <_printf_float+0x70>
 8010134:	6863      	ldr	r3, [r4, #4]
 8010136:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801013a:	9104      	str	r1, [sp, #16]
 801013c:	1c59      	adds	r1, r3, #1
 801013e:	d13c      	bne.n	80101ba <_printf_float+0x14a>
 8010140:	2306      	movs	r3, #6
 8010142:	6063      	str	r3, [r4, #4]
 8010144:	2300      	movs	r3, #0
 8010146:	9303      	str	r3, [sp, #12]
 8010148:	ab08      	add	r3, sp, #32
 801014a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801014e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010152:	ab07      	add	r3, sp, #28
 8010154:	6861      	ldr	r1, [r4, #4]
 8010156:	9300      	str	r3, [sp, #0]
 8010158:	6022      	str	r2, [r4, #0]
 801015a:	f10d 031b 	add.w	r3, sp, #27
 801015e:	4628      	mov	r0, r5
 8010160:	f7ff fef6 	bl	800ff50 <__cvt>
 8010164:	9b04      	ldr	r3, [sp, #16]
 8010166:	9907      	ldr	r1, [sp, #28]
 8010168:	2b47      	cmp	r3, #71	; 0x47
 801016a:	4680      	mov	r8, r0
 801016c:	d108      	bne.n	8010180 <_printf_float+0x110>
 801016e:	1cc8      	adds	r0, r1, #3
 8010170:	db02      	blt.n	8010178 <_printf_float+0x108>
 8010172:	6863      	ldr	r3, [r4, #4]
 8010174:	4299      	cmp	r1, r3
 8010176:	dd41      	ble.n	80101fc <_printf_float+0x18c>
 8010178:	f1a9 0902 	sub.w	r9, r9, #2
 801017c:	fa5f f989 	uxtb.w	r9, r9
 8010180:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010184:	d820      	bhi.n	80101c8 <_printf_float+0x158>
 8010186:	3901      	subs	r1, #1
 8010188:	464a      	mov	r2, r9
 801018a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801018e:	9107      	str	r1, [sp, #28]
 8010190:	f7ff ff30 	bl	800fff4 <__exponent>
 8010194:	9a08      	ldr	r2, [sp, #32]
 8010196:	9004      	str	r0, [sp, #16]
 8010198:	1813      	adds	r3, r2, r0
 801019a:	2a01      	cmp	r2, #1
 801019c:	6123      	str	r3, [r4, #16]
 801019e:	dc02      	bgt.n	80101a6 <_printf_float+0x136>
 80101a0:	6822      	ldr	r2, [r4, #0]
 80101a2:	07d2      	lsls	r2, r2, #31
 80101a4:	d501      	bpl.n	80101aa <_printf_float+0x13a>
 80101a6:	3301      	adds	r3, #1
 80101a8:	6123      	str	r3, [r4, #16]
 80101aa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d0a2      	beq.n	80100f8 <_printf_float+0x88>
 80101b2:	232d      	movs	r3, #45	; 0x2d
 80101b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101b8:	e79e      	b.n	80100f8 <_printf_float+0x88>
 80101ba:	9904      	ldr	r1, [sp, #16]
 80101bc:	2947      	cmp	r1, #71	; 0x47
 80101be:	d1c1      	bne.n	8010144 <_printf_float+0xd4>
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d1bf      	bne.n	8010144 <_printf_float+0xd4>
 80101c4:	2301      	movs	r3, #1
 80101c6:	e7bc      	b.n	8010142 <_printf_float+0xd2>
 80101c8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80101cc:	d118      	bne.n	8010200 <_printf_float+0x190>
 80101ce:	2900      	cmp	r1, #0
 80101d0:	6863      	ldr	r3, [r4, #4]
 80101d2:	dd0b      	ble.n	80101ec <_printf_float+0x17c>
 80101d4:	6121      	str	r1, [r4, #16]
 80101d6:	b913      	cbnz	r3, 80101de <_printf_float+0x16e>
 80101d8:	6822      	ldr	r2, [r4, #0]
 80101da:	07d0      	lsls	r0, r2, #31
 80101dc:	d502      	bpl.n	80101e4 <_printf_float+0x174>
 80101de:	3301      	adds	r3, #1
 80101e0:	440b      	add	r3, r1
 80101e2:	6123      	str	r3, [r4, #16]
 80101e4:	2300      	movs	r3, #0
 80101e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80101e8:	9304      	str	r3, [sp, #16]
 80101ea:	e7de      	b.n	80101aa <_printf_float+0x13a>
 80101ec:	b913      	cbnz	r3, 80101f4 <_printf_float+0x184>
 80101ee:	6822      	ldr	r2, [r4, #0]
 80101f0:	07d2      	lsls	r2, r2, #31
 80101f2:	d501      	bpl.n	80101f8 <_printf_float+0x188>
 80101f4:	3302      	adds	r3, #2
 80101f6:	e7f4      	b.n	80101e2 <_printf_float+0x172>
 80101f8:	2301      	movs	r3, #1
 80101fa:	e7f2      	b.n	80101e2 <_printf_float+0x172>
 80101fc:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010200:	9b08      	ldr	r3, [sp, #32]
 8010202:	4299      	cmp	r1, r3
 8010204:	db05      	blt.n	8010212 <_printf_float+0x1a2>
 8010206:	6823      	ldr	r3, [r4, #0]
 8010208:	6121      	str	r1, [r4, #16]
 801020a:	07d8      	lsls	r0, r3, #31
 801020c:	d5ea      	bpl.n	80101e4 <_printf_float+0x174>
 801020e:	1c4b      	adds	r3, r1, #1
 8010210:	e7e7      	b.n	80101e2 <_printf_float+0x172>
 8010212:	2900      	cmp	r1, #0
 8010214:	bfd4      	ite	le
 8010216:	f1c1 0202 	rsble	r2, r1, #2
 801021a:	2201      	movgt	r2, #1
 801021c:	4413      	add	r3, r2
 801021e:	e7e0      	b.n	80101e2 <_printf_float+0x172>
 8010220:	6823      	ldr	r3, [r4, #0]
 8010222:	055a      	lsls	r2, r3, #21
 8010224:	d407      	bmi.n	8010236 <_printf_float+0x1c6>
 8010226:	6923      	ldr	r3, [r4, #16]
 8010228:	4642      	mov	r2, r8
 801022a:	4631      	mov	r1, r6
 801022c:	4628      	mov	r0, r5
 801022e:	47b8      	blx	r7
 8010230:	3001      	adds	r0, #1
 8010232:	d12a      	bne.n	801028a <_printf_float+0x21a>
 8010234:	e76a      	b.n	801010c <_printf_float+0x9c>
 8010236:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801023a:	f240 80e2 	bls.w	8010402 <_printf_float+0x392>
 801023e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010242:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801024a:	d133      	bne.n	80102b4 <_printf_float+0x244>
 801024c:	4a38      	ldr	r2, [pc, #224]	; (8010330 <_printf_float+0x2c0>)
 801024e:	2301      	movs	r3, #1
 8010250:	4631      	mov	r1, r6
 8010252:	4628      	mov	r0, r5
 8010254:	47b8      	blx	r7
 8010256:	3001      	adds	r0, #1
 8010258:	f43f af58 	beq.w	801010c <_printf_float+0x9c>
 801025c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010260:	429a      	cmp	r2, r3
 8010262:	db02      	blt.n	801026a <_printf_float+0x1fa>
 8010264:	6823      	ldr	r3, [r4, #0]
 8010266:	07d8      	lsls	r0, r3, #31
 8010268:	d50f      	bpl.n	801028a <_printf_float+0x21a>
 801026a:	4653      	mov	r3, sl
 801026c:	465a      	mov	r2, fp
 801026e:	4631      	mov	r1, r6
 8010270:	4628      	mov	r0, r5
 8010272:	47b8      	blx	r7
 8010274:	3001      	adds	r0, #1
 8010276:	f43f af49 	beq.w	801010c <_printf_float+0x9c>
 801027a:	f04f 0800 	mov.w	r8, #0
 801027e:	f104 091a 	add.w	r9, r4, #26
 8010282:	9b08      	ldr	r3, [sp, #32]
 8010284:	3b01      	subs	r3, #1
 8010286:	4543      	cmp	r3, r8
 8010288:	dc09      	bgt.n	801029e <_printf_float+0x22e>
 801028a:	6823      	ldr	r3, [r4, #0]
 801028c:	079b      	lsls	r3, r3, #30
 801028e:	f100 8108 	bmi.w	80104a2 <_printf_float+0x432>
 8010292:	68e0      	ldr	r0, [r4, #12]
 8010294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010296:	4298      	cmp	r0, r3
 8010298:	bfb8      	it	lt
 801029a:	4618      	movlt	r0, r3
 801029c:	e738      	b.n	8010110 <_printf_float+0xa0>
 801029e:	2301      	movs	r3, #1
 80102a0:	464a      	mov	r2, r9
 80102a2:	4631      	mov	r1, r6
 80102a4:	4628      	mov	r0, r5
 80102a6:	47b8      	blx	r7
 80102a8:	3001      	adds	r0, #1
 80102aa:	f43f af2f 	beq.w	801010c <_printf_float+0x9c>
 80102ae:	f108 0801 	add.w	r8, r8, #1
 80102b2:	e7e6      	b.n	8010282 <_printf_float+0x212>
 80102b4:	9b07      	ldr	r3, [sp, #28]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	dc3c      	bgt.n	8010334 <_printf_float+0x2c4>
 80102ba:	4a1d      	ldr	r2, [pc, #116]	; (8010330 <_printf_float+0x2c0>)
 80102bc:	2301      	movs	r3, #1
 80102be:	4631      	mov	r1, r6
 80102c0:	4628      	mov	r0, r5
 80102c2:	47b8      	blx	r7
 80102c4:	3001      	adds	r0, #1
 80102c6:	f43f af21 	beq.w	801010c <_printf_float+0x9c>
 80102ca:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80102ce:	4313      	orrs	r3, r2
 80102d0:	d102      	bne.n	80102d8 <_printf_float+0x268>
 80102d2:	6823      	ldr	r3, [r4, #0]
 80102d4:	07d9      	lsls	r1, r3, #31
 80102d6:	d5d8      	bpl.n	801028a <_printf_float+0x21a>
 80102d8:	4653      	mov	r3, sl
 80102da:	465a      	mov	r2, fp
 80102dc:	4631      	mov	r1, r6
 80102de:	4628      	mov	r0, r5
 80102e0:	47b8      	blx	r7
 80102e2:	3001      	adds	r0, #1
 80102e4:	f43f af12 	beq.w	801010c <_printf_float+0x9c>
 80102e8:	f04f 0900 	mov.w	r9, #0
 80102ec:	f104 0a1a 	add.w	sl, r4, #26
 80102f0:	9b07      	ldr	r3, [sp, #28]
 80102f2:	425b      	negs	r3, r3
 80102f4:	454b      	cmp	r3, r9
 80102f6:	dc01      	bgt.n	80102fc <_printf_float+0x28c>
 80102f8:	9b08      	ldr	r3, [sp, #32]
 80102fa:	e795      	b.n	8010228 <_printf_float+0x1b8>
 80102fc:	2301      	movs	r3, #1
 80102fe:	4652      	mov	r2, sl
 8010300:	4631      	mov	r1, r6
 8010302:	4628      	mov	r0, r5
 8010304:	47b8      	blx	r7
 8010306:	3001      	adds	r0, #1
 8010308:	f43f af00 	beq.w	801010c <_printf_float+0x9c>
 801030c:	f109 0901 	add.w	r9, r9, #1
 8010310:	e7ee      	b.n	80102f0 <_printf_float+0x280>
 8010312:	bf00      	nop
 8010314:	f3af 8000 	nop.w
 8010318:	ffffffff 	.word	0xffffffff
 801031c:	7fefffff 	.word	0x7fefffff
 8010320:	0801426c 	.word	0x0801426c
 8010324:	08014270 	.word	0x08014270
 8010328:	08014278 	.word	0x08014278
 801032c:	08014274 	.word	0x08014274
 8010330:	0801427c 	.word	0x0801427c
 8010334:	9a08      	ldr	r2, [sp, #32]
 8010336:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010338:	429a      	cmp	r2, r3
 801033a:	bfa8      	it	ge
 801033c:	461a      	movge	r2, r3
 801033e:	2a00      	cmp	r2, #0
 8010340:	4691      	mov	r9, r2
 8010342:	dc38      	bgt.n	80103b6 <_printf_float+0x346>
 8010344:	2300      	movs	r3, #0
 8010346:	9305      	str	r3, [sp, #20]
 8010348:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801034c:	f104 021a 	add.w	r2, r4, #26
 8010350:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010352:	9905      	ldr	r1, [sp, #20]
 8010354:	9304      	str	r3, [sp, #16]
 8010356:	eba3 0309 	sub.w	r3, r3, r9
 801035a:	428b      	cmp	r3, r1
 801035c:	dc33      	bgt.n	80103c6 <_printf_float+0x356>
 801035e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010362:	429a      	cmp	r2, r3
 8010364:	db3c      	blt.n	80103e0 <_printf_float+0x370>
 8010366:	6823      	ldr	r3, [r4, #0]
 8010368:	07da      	lsls	r2, r3, #31
 801036a:	d439      	bmi.n	80103e0 <_printf_float+0x370>
 801036c:	9a08      	ldr	r2, [sp, #32]
 801036e:	9b04      	ldr	r3, [sp, #16]
 8010370:	9907      	ldr	r1, [sp, #28]
 8010372:	1ad3      	subs	r3, r2, r3
 8010374:	eba2 0901 	sub.w	r9, r2, r1
 8010378:	4599      	cmp	r9, r3
 801037a:	bfa8      	it	ge
 801037c:	4699      	movge	r9, r3
 801037e:	f1b9 0f00 	cmp.w	r9, #0
 8010382:	dc35      	bgt.n	80103f0 <_printf_float+0x380>
 8010384:	f04f 0800 	mov.w	r8, #0
 8010388:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801038c:	f104 0a1a 	add.w	sl, r4, #26
 8010390:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010394:	1a9b      	subs	r3, r3, r2
 8010396:	eba3 0309 	sub.w	r3, r3, r9
 801039a:	4543      	cmp	r3, r8
 801039c:	f77f af75 	ble.w	801028a <_printf_float+0x21a>
 80103a0:	2301      	movs	r3, #1
 80103a2:	4652      	mov	r2, sl
 80103a4:	4631      	mov	r1, r6
 80103a6:	4628      	mov	r0, r5
 80103a8:	47b8      	blx	r7
 80103aa:	3001      	adds	r0, #1
 80103ac:	f43f aeae 	beq.w	801010c <_printf_float+0x9c>
 80103b0:	f108 0801 	add.w	r8, r8, #1
 80103b4:	e7ec      	b.n	8010390 <_printf_float+0x320>
 80103b6:	4613      	mov	r3, r2
 80103b8:	4631      	mov	r1, r6
 80103ba:	4642      	mov	r2, r8
 80103bc:	4628      	mov	r0, r5
 80103be:	47b8      	blx	r7
 80103c0:	3001      	adds	r0, #1
 80103c2:	d1bf      	bne.n	8010344 <_printf_float+0x2d4>
 80103c4:	e6a2      	b.n	801010c <_printf_float+0x9c>
 80103c6:	2301      	movs	r3, #1
 80103c8:	4631      	mov	r1, r6
 80103ca:	4628      	mov	r0, r5
 80103cc:	9204      	str	r2, [sp, #16]
 80103ce:	47b8      	blx	r7
 80103d0:	3001      	adds	r0, #1
 80103d2:	f43f ae9b 	beq.w	801010c <_printf_float+0x9c>
 80103d6:	9b05      	ldr	r3, [sp, #20]
 80103d8:	9a04      	ldr	r2, [sp, #16]
 80103da:	3301      	adds	r3, #1
 80103dc:	9305      	str	r3, [sp, #20]
 80103de:	e7b7      	b.n	8010350 <_printf_float+0x2e0>
 80103e0:	4653      	mov	r3, sl
 80103e2:	465a      	mov	r2, fp
 80103e4:	4631      	mov	r1, r6
 80103e6:	4628      	mov	r0, r5
 80103e8:	47b8      	blx	r7
 80103ea:	3001      	adds	r0, #1
 80103ec:	d1be      	bne.n	801036c <_printf_float+0x2fc>
 80103ee:	e68d      	b.n	801010c <_printf_float+0x9c>
 80103f0:	9a04      	ldr	r2, [sp, #16]
 80103f2:	464b      	mov	r3, r9
 80103f4:	4442      	add	r2, r8
 80103f6:	4631      	mov	r1, r6
 80103f8:	4628      	mov	r0, r5
 80103fa:	47b8      	blx	r7
 80103fc:	3001      	adds	r0, #1
 80103fe:	d1c1      	bne.n	8010384 <_printf_float+0x314>
 8010400:	e684      	b.n	801010c <_printf_float+0x9c>
 8010402:	9a08      	ldr	r2, [sp, #32]
 8010404:	2a01      	cmp	r2, #1
 8010406:	dc01      	bgt.n	801040c <_printf_float+0x39c>
 8010408:	07db      	lsls	r3, r3, #31
 801040a:	d537      	bpl.n	801047c <_printf_float+0x40c>
 801040c:	2301      	movs	r3, #1
 801040e:	4642      	mov	r2, r8
 8010410:	4631      	mov	r1, r6
 8010412:	4628      	mov	r0, r5
 8010414:	47b8      	blx	r7
 8010416:	3001      	adds	r0, #1
 8010418:	f43f ae78 	beq.w	801010c <_printf_float+0x9c>
 801041c:	4653      	mov	r3, sl
 801041e:	465a      	mov	r2, fp
 8010420:	4631      	mov	r1, r6
 8010422:	4628      	mov	r0, r5
 8010424:	47b8      	blx	r7
 8010426:	3001      	adds	r0, #1
 8010428:	f43f ae70 	beq.w	801010c <_printf_float+0x9c>
 801042c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010430:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010438:	d01b      	beq.n	8010472 <_printf_float+0x402>
 801043a:	9b08      	ldr	r3, [sp, #32]
 801043c:	f108 0201 	add.w	r2, r8, #1
 8010440:	3b01      	subs	r3, #1
 8010442:	4631      	mov	r1, r6
 8010444:	4628      	mov	r0, r5
 8010446:	47b8      	blx	r7
 8010448:	3001      	adds	r0, #1
 801044a:	d10e      	bne.n	801046a <_printf_float+0x3fa>
 801044c:	e65e      	b.n	801010c <_printf_float+0x9c>
 801044e:	2301      	movs	r3, #1
 8010450:	464a      	mov	r2, r9
 8010452:	4631      	mov	r1, r6
 8010454:	4628      	mov	r0, r5
 8010456:	47b8      	blx	r7
 8010458:	3001      	adds	r0, #1
 801045a:	f43f ae57 	beq.w	801010c <_printf_float+0x9c>
 801045e:	f108 0801 	add.w	r8, r8, #1
 8010462:	9b08      	ldr	r3, [sp, #32]
 8010464:	3b01      	subs	r3, #1
 8010466:	4543      	cmp	r3, r8
 8010468:	dcf1      	bgt.n	801044e <_printf_float+0x3de>
 801046a:	9b04      	ldr	r3, [sp, #16]
 801046c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010470:	e6db      	b.n	801022a <_printf_float+0x1ba>
 8010472:	f04f 0800 	mov.w	r8, #0
 8010476:	f104 091a 	add.w	r9, r4, #26
 801047a:	e7f2      	b.n	8010462 <_printf_float+0x3f2>
 801047c:	2301      	movs	r3, #1
 801047e:	4642      	mov	r2, r8
 8010480:	e7df      	b.n	8010442 <_printf_float+0x3d2>
 8010482:	2301      	movs	r3, #1
 8010484:	464a      	mov	r2, r9
 8010486:	4631      	mov	r1, r6
 8010488:	4628      	mov	r0, r5
 801048a:	47b8      	blx	r7
 801048c:	3001      	adds	r0, #1
 801048e:	f43f ae3d 	beq.w	801010c <_printf_float+0x9c>
 8010492:	f108 0801 	add.w	r8, r8, #1
 8010496:	68e3      	ldr	r3, [r4, #12]
 8010498:	9909      	ldr	r1, [sp, #36]	; 0x24
 801049a:	1a5b      	subs	r3, r3, r1
 801049c:	4543      	cmp	r3, r8
 801049e:	dcf0      	bgt.n	8010482 <_printf_float+0x412>
 80104a0:	e6f7      	b.n	8010292 <_printf_float+0x222>
 80104a2:	f04f 0800 	mov.w	r8, #0
 80104a6:	f104 0919 	add.w	r9, r4, #25
 80104aa:	e7f4      	b.n	8010496 <_printf_float+0x426>

080104ac <_printf_common>:
 80104ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104b0:	4616      	mov	r6, r2
 80104b2:	4699      	mov	r9, r3
 80104b4:	688a      	ldr	r2, [r1, #8]
 80104b6:	690b      	ldr	r3, [r1, #16]
 80104b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80104bc:	4293      	cmp	r3, r2
 80104be:	bfb8      	it	lt
 80104c0:	4613      	movlt	r3, r2
 80104c2:	6033      	str	r3, [r6, #0]
 80104c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80104c8:	4607      	mov	r7, r0
 80104ca:	460c      	mov	r4, r1
 80104cc:	b10a      	cbz	r2, 80104d2 <_printf_common+0x26>
 80104ce:	3301      	adds	r3, #1
 80104d0:	6033      	str	r3, [r6, #0]
 80104d2:	6823      	ldr	r3, [r4, #0]
 80104d4:	0699      	lsls	r1, r3, #26
 80104d6:	bf42      	ittt	mi
 80104d8:	6833      	ldrmi	r3, [r6, #0]
 80104da:	3302      	addmi	r3, #2
 80104dc:	6033      	strmi	r3, [r6, #0]
 80104de:	6825      	ldr	r5, [r4, #0]
 80104e0:	f015 0506 	ands.w	r5, r5, #6
 80104e4:	d106      	bne.n	80104f4 <_printf_common+0x48>
 80104e6:	f104 0a19 	add.w	sl, r4, #25
 80104ea:	68e3      	ldr	r3, [r4, #12]
 80104ec:	6832      	ldr	r2, [r6, #0]
 80104ee:	1a9b      	subs	r3, r3, r2
 80104f0:	42ab      	cmp	r3, r5
 80104f2:	dc26      	bgt.n	8010542 <_printf_common+0x96>
 80104f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80104f8:	1e13      	subs	r3, r2, #0
 80104fa:	6822      	ldr	r2, [r4, #0]
 80104fc:	bf18      	it	ne
 80104fe:	2301      	movne	r3, #1
 8010500:	0692      	lsls	r2, r2, #26
 8010502:	d42b      	bmi.n	801055c <_printf_common+0xb0>
 8010504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010508:	4649      	mov	r1, r9
 801050a:	4638      	mov	r0, r7
 801050c:	47c0      	blx	r8
 801050e:	3001      	adds	r0, #1
 8010510:	d01e      	beq.n	8010550 <_printf_common+0xa4>
 8010512:	6823      	ldr	r3, [r4, #0]
 8010514:	68e5      	ldr	r5, [r4, #12]
 8010516:	6832      	ldr	r2, [r6, #0]
 8010518:	f003 0306 	and.w	r3, r3, #6
 801051c:	2b04      	cmp	r3, #4
 801051e:	bf08      	it	eq
 8010520:	1aad      	subeq	r5, r5, r2
 8010522:	68a3      	ldr	r3, [r4, #8]
 8010524:	6922      	ldr	r2, [r4, #16]
 8010526:	bf0c      	ite	eq
 8010528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801052c:	2500      	movne	r5, #0
 801052e:	4293      	cmp	r3, r2
 8010530:	bfc4      	itt	gt
 8010532:	1a9b      	subgt	r3, r3, r2
 8010534:	18ed      	addgt	r5, r5, r3
 8010536:	2600      	movs	r6, #0
 8010538:	341a      	adds	r4, #26
 801053a:	42b5      	cmp	r5, r6
 801053c:	d11a      	bne.n	8010574 <_printf_common+0xc8>
 801053e:	2000      	movs	r0, #0
 8010540:	e008      	b.n	8010554 <_printf_common+0xa8>
 8010542:	2301      	movs	r3, #1
 8010544:	4652      	mov	r2, sl
 8010546:	4649      	mov	r1, r9
 8010548:	4638      	mov	r0, r7
 801054a:	47c0      	blx	r8
 801054c:	3001      	adds	r0, #1
 801054e:	d103      	bne.n	8010558 <_printf_common+0xac>
 8010550:	f04f 30ff 	mov.w	r0, #4294967295
 8010554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010558:	3501      	adds	r5, #1
 801055a:	e7c6      	b.n	80104ea <_printf_common+0x3e>
 801055c:	18e1      	adds	r1, r4, r3
 801055e:	1c5a      	adds	r2, r3, #1
 8010560:	2030      	movs	r0, #48	; 0x30
 8010562:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010566:	4422      	add	r2, r4
 8010568:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801056c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010570:	3302      	adds	r3, #2
 8010572:	e7c7      	b.n	8010504 <_printf_common+0x58>
 8010574:	2301      	movs	r3, #1
 8010576:	4622      	mov	r2, r4
 8010578:	4649      	mov	r1, r9
 801057a:	4638      	mov	r0, r7
 801057c:	47c0      	blx	r8
 801057e:	3001      	adds	r0, #1
 8010580:	d0e6      	beq.n	8010550 <_printf_common+0xa4>
 8010582:	3601      	adds	r6, #1
 8010584:	e7d9      	b.n	801053a <_printf_common+0x8e>
	...

08010588 <_printf_i>:
 8010588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801058c:	460c      	mov	r4, r1
 801058e:	4691      	mov	r9, r2
 8010590:	7e27      	ldrb	r7, [r4, #24]
 8010592:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010594:	2f78      	cmp	r7, #120	; 0x78
 8010596:	4680      	mov	r8, r0
 8010598:	469a      	mov	sl, r3
 801059a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801059e:	d807      	bhi.n	80105b0 <_printf_i+0x28>
 80105a0:	2f62      	cmp	r7, #98	; 0x62
 80105a2:	d80a      	bhi.n	80105ba <_printf_i+0x32>
 80105a4:	2f00      	cmp	r7, #0
 80105a6:	f000 80d8 	beq.w	801075a <_printf_i+0x1d2>
 80105aa:	2f58      	cmp	r7, #88	; 0x58
 80105ac:	f000 80a3 	beq.w	80106f6 <_printf_i+0x16e>
 80105b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80105b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80105b8:	e03a      	b.n	8010630 <_printf_i+0xa8>
 80105ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80105be:	2b15      	cmp	r3, #21
 80105c0:	d8f6      	bhi.n	80105b0 <_printf_i+0x28>
 80105c2:	a001      	add	r0, pc, #4	; (adr r0, 80105c8 <_printf_i+0x40>)
 80105c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80105c8:	08010621 	.word	0x08010621
 80105cc:	08010635 	.word	0x08010635
 80105d0:	080105b1 	.word	0x080105b1
 80105d4:	080105b1 	.word	0x080105b1
 80105d8:	080105b1 	.word	0x080105b1
 80105dc:	080105b1 	.word	0x080105b1
 80105e0:	08010635 	.word	0x08010635
 80105e4:	080105b1 	.word	0x080105b1
 80105e8:	080105b1 	.word	0x080105b1
 80105ec:	080105b1 	.word	0x080105b1
 80105f0:	080105b1 	.word	0x080105b1
 80105f4:	08010741 	.word	0x08010741
 80105f8:	08010665 	.word	0x08010665
 80105fc:	08010723 	.word	0x08010723
 8010600:	080105b1 	.word	0x080105b1
 8010604:	080105b1 	.word	0x080105b1
 8010608:	08010763 	.word	0x08010763
 801060c:	080105b1 	.word	0x080105b1
 8010610:	08010665 	.word	0x08010665
 8010614:	080105b1 	.word	0x080105b1
 8010618:	080105b1 	.word	0x080105b1
 801061c:	0801072b 	.word	0x0801072b
 8010620:	680b      	ldr	r3, [r1, #0]
 8010622:	1d1a      	adds	r2, r3, #4
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	600a      	str	r2, [r1, #0]
 8010628:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801062c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010630:	2301      	movs	r3, #1
 8010632:	e0a3      	b.n	801077c <_printf_i+0x1f4>
 8010634:	6825      	ldr	r5, [r4, #0]
 8010636:	6808      	ldr	r0, [r1, #0]
 8010638:	062e      	lsls	r6, r5, #24
 801063a:	f100 0304 	add.w	r3, r0, #4
 801063e:	d50a      	bpl.n	8010656 <_printf_i+0xce>
 8010640:	6805      	ldr	r5, [r0, #0]
 8010642:	600b      	str	r3, [r1, #0]
 8010644:	2d00      	cmp	r5, #0
 8010646:	da03      	bge.n	8010650 <_printf_i+0xc8>
 8010648:	232d      	movs	r3, #45	; 0x2d
 801064a:	426d      	negs	r5, r5
 801064c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010650:	485e      	ldr	r0, [pc, #376]	; (80107cc <_printf_i+0x244>)
 8010652:	230a      	movs	r3, #10
 8010654:	e019      	b.n	801068a <_printf_i+0x102>
 8010656:	f015 0f40 	tst.w	r5, #64	; 0x40
 801065a:	6805      	ldr	r5, [r0, #0]
 801065c:	600b      	str	r3, [r1, #0]
 801065e:	bf18      	it	ne
 8010660:	b22d      	sxthne	r5, r5
 8010662:	e7ef      	b.n	8010644 <_printf_i+0xbc>
 8010664:	680b      	ldr	r3, [r1, #0]
 8010666:	6825      	ldr	r5, [r4, #0]
 8010668:	1d18      	adds	r0, r3, #4
 801066a:	6008      	str	r0, [r1, #0]
 801066c:	0628      	lsls	r0, r5, #24
 801066e:	d501      	bpl.n	8010674 <_printf_i+0xec>
 8010670:	681d      	ldr	r5, [r3, #0]
 8010672:	e002      	b.n	801067a <_printf_i+0xf2>
 8010674:	0669      	lsls	r1, r5, #25
 8010676:	d5fb      	bpl.n	8010670 <_printf_i+0xe8>
 8010678:	881d      	ldrh	r5, [r3, #0]
 801067a:	4854      	ldr	r0, [pc, #336]	; (80107cc <_printf_i+0x244>)
 801067c:	2f6f      	cmp	r7, #111	; 0x6f
 801067e:	bf0c      	ite	eq
 8010680:	2308      	moveq	r3, #8
 8010682:	230a      	movne	r3, #10
 8010684:	2100      	movs	r1, #0
 8010686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801068a:	6866      	ldr	r6, [r4, #4]
 801068c:	60a6      	str	r6, [r4, #8]
 801068e:	2e00      	cmp	r6, #0
 8010690:	bfa2      	ittt	ge
 8010692:	6821      	ldrge	r1, [r4, #0]
 8010694:	f021 0104 	bicge.w	r1, r1, #4
 8010698:	6021      	strge	r1, [r4, #0]
 801069a:	b90d      	cbnz	r5, 80106a0 <_printf_i+0x118>
 801069c:	2e00      	cmp	r6, #0
 801069e:	d04d      	beq.n	801073c <_printf_i+0x1b4>
 80106a0:	4616      	mov	r6, r2
 80106a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80106a6:	fb03 5711 	mls	r7, r3, r1, r5
 80106aa:	5dc7      	ldrb	r7, [r0, r7]
 80106ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80106b0:	462f      	mov	r7, r5
 80106b2:	42bb      	cmp	r3, r7
 80106b4:	460d      	mov	r5, r1
 80106b6:	d9f4      	bls.n	80106a2 <_printf_i+0x11a>
 80106b8:	2b08      	cmp	r3, #8
 80106ba:	d10b      	bne.n	80106d4 <_printf_i+0x14c>
 80106bc:	6823      	ldr	r3, [r4, #0]
 80106be:	07df      	lsls	r7, r3, #31
 80106c0:	d508      	bpl.n	80106d4 <_printf_i+0x14c>
 80106c2:	6923      	ldr	r3, [r4, #16]
 80106c4:	6861      	ldr	r1, [r4, #4]
 80106c6:	4299      	cmp	r1, r3
 80106c8:	bfde      	ittt	le
 80106ca:	2330      	movle	r3, #48	; 0x30
 80106cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80106d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80106d4:	1b92      	subs	r2, r2, r6
 80106d6:	6122      	str	r2, [r4, #16]
 80106d8:	f8cd a000 	str.w	sl, [sp]
 80106dc:	464b      	mov	r3, r9
 80106de:	aa03      	add	r2, sp, #12
 80106e0:	4621      	mov	r1, r4
 80106e2:	4640      	mov	r0, r8
 80106e4:	f7ff fee2 	bl	80104ac <_printf_common>
 80106e8:	3001      	adds	r0, #1
 80106ea:	d14c      	bne.n	8010786 <_printf_i+0x1fe>
 80106ec:	f04f 30ff 	mov.w	r0, #4294967295
 80106f0:	b004      	add	sp, #16
 80106f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106f6:	4835      	ldr	r0, [pc, #212]	; (80107cc <_printf_i+0x244>)
 80106f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80106fc:	6823      	ldr	r3, [r4, #0]
 80106fe:	680e      	ldr	r6, [r1, #0]
 8010700:	061f      	lsls	r7, r3, #24
 8010702:	f856 5b04 	ldr.w	r5, [r6], #4
 8010706:	600e      	str	r6, [r1, #0]
 8010708:	d514      	bpl.n	8010734 <_printf_i+0x1ac>
 801070a:	07d9      	lsls	r1, r3, #31
 801070c:	bf44      	itt	mi
 801070e:	f043 0320 	orrmi.w	r3, r3, #32
 8010712:	6023      	strmi	r3, [r4, #0]
 8010714:	b91d      	cbnz	r5, 801071e <_printf_i+0x196>
 8010716:	6823      	ldr	r3, [r4, #0]
 8010718:	f023 0320 	bic.w	r3, r3, #32
 801071c:	6023      	str	r3, [r4, #0]
 801071e:	2310      	movs	r3, #16
 8010720:	e7b0      	b.n	8010684 <_printf_i+0xfc>
 8010722:	6823      	ldr	r3, [r4, #0]
 8010724:	f043 0320 	orr.w	r3, r3, #32
 8010728:	6023      	str	r3, [r4, #0]
 801072a:	2378      	movs	r3, #120	; 0x78
 801072c:	4828      	ldr	r0, [pc, #160]	; (80107d0 <_printf_i+0x248>)
 801072e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010732:	e7e3      	b.n	80106fc <_printf_i+0x174>
 8010734:	065e      	lsls	r6, r3, #25
 8010736:	bf48      	it	mi
 8010738:	b2ad      	uxthmi	r5, r5
 801073a:	e7e6      	b.n	801070a <_printf_i+0x182>
 801073c:	4616      	mov	r6, r2
 801073e:	e7bb      	b.n	80106b8 <_printf_i+0x130>
 8010740:	680b      	ldr	r3, [r1, #0]
 8010742:	6826      	ldr	r6, [r4, #0]
 8010744:	6960      	ldr	r0, [r4, #20]
 8010746:	1d1d      	adds	r5, r3, #4
 8010748:	600d      	str	r5, [r1, #0]
 801074a:	0635      	lsls	r5, r6, #24
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	d501      	bpl.n	8010754 <_printf_i+0x1cc>
 8010750:	6018      	str	r0, [r3, #0]
 8010752:	e002      	b.n	801075a <_printf_i+0x1d2>
 8010754:	0671      	lsls	r1, r6, #25
 8010756:	d5fb      	bpl.n	8010750 <_printf_i+0x1c8>
 8010758:	8018      	strh	r0, [r3, #0]
 801075a:	2300      	movs	r3, #0
 801075c:	6123      	str	r3, [r4, #16]
 801075e:	4616      	mov	r6, r2
 8010760:	e7ba      	b.n	80106d8 <_printf_i+0x150>
 8010762:	680b      	ldr	r3, [r1, #0]
 8010764:	1d1a      	adds	r2, r3, #4
 8010766:	600a      	str	r2, [r1, #0]
 8010768:	681e      	ldr	r6, [r3, #0]
 801076a:	6862      	ldr	r2, [r4, #4]
 801076c:	2100      	movs	r1, #0
 801076e:	4630      	mov	r0, r6
 8010770:	f7ef fdbe 	bl	80002f0 <memchr>
 8010774:	b108      	cbz	r0, 801077a <_printf_i+0x1f2>
 8010776:	1b80      	subs	r0, r0, r6
 8010778:	6060      	str	r0, [r4, #4]
 801077a:	6863      	ldr	r3, [r4, #4]
 801077c:	6123      	str	r3, [r4, #16]
 801077e:	2300      	movs	r3, #0
 8010780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010784:	e7a8      	b.n	80106d8 <_printf_i+0x150>
 8010786:	6923      	ldr	r3, [r4, #16]
 8010788:	4632      	mov	r2, r6
 801078a:	4649      	mov	r1, r9
 801078c:	4640      	mov	r0, r8
 801078e:	47d0      	blx	sl
 8010790:	3001      	adds	r0, #1
 8010792:	d0ab      	beq.n	80106ec <_printf_i+0x164>
 8010794:	6823      	ldr	r3, [r4, #0]
 8010796:	079b      	lsls	r3, r3, #30
 8010798:	d413      	bmi.n	80107c2 <_printf_i+0x23a>
 801079a:	68e0      	ldr	r0, [r4, #12]
 801079c:	9b03      	ldr	r3, [sp, #12]
 801079e:	4298      	cmp	r0, r3
 80107a0:	bfb8      	it	lt
 80107a2:	4618      	movlt	r0, r3
 80107a4:	e7a4      	b.n	80106f0 <_printf_i+0x168>
 80107a6:	2301      	movs	r3, #1
 80107a8:	4632      	mov	r2, r6
 80107aa:	4649      	mov	r1, r9
 80107ac:	4640      	mov	r0, r8
 80107ae:	47d0      	blx	sl
 80107b0:	3001      	adds	r0, #1
 80107b2:	d09b      	beq.n	80106ec <_printf_i+0x164>
 80107b4:	3501      	adds	r5, #1
 80107b6:	68e3      	ldr	r3, [r4, #12]
 80107b8:	9903      	ldr	r1, [sp, #12]
 80107ba:	1a5b      	subs	r3, r3, r1
 80107bc:	42ab      	cmp	r3, r5
 80107be:	dcf2      	bgt.n	80107a6 <_printf_i+0x21e>
 80107c0:	e7eb      	b.n	801079a <_printf_i+0x212>
 80107c2:	2500      	movs	r5, #0
 80107c4:	f104 0619 	add.w	r6, r4, #25
 80107c8:	e7f5      	b.n	80107b6 <_printf_i+0x22e>
 80107ca:	bf00      	nop
 80107cc:	0801427e 	.word	0x0801427e
 80107d0:	0801428f 	.word	0x0801428f

080107d4 <quorem>:
 80107d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107d8:	6903      	ldr	r3, [r0, #16]
 80107da:	690c      	ldr	r4, [r1, #16]
 80107dc:	42a3      	cmp	r3, r4
 80107de:	4607      	mov	r7, r0
 80107e0:	f2c0 8081 	blt.w	80108e6 <quorem+0x112>
 80107e4:	3c01      	subs	r4, #1
 80107e6:	f101 0814 	add.w	r8, r1, #20
 80107ea:	f100 0514 	add.w	r5, r0, #20
 80107ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80107f2:	9301      	str	r3, [sp, #4]
 80107f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80107f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80107fc:	3301      	adds	r3, #1
 80107fe:	429a      	cmp	r2, r3
 8010800:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010804:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010808:	fbb2 f6f3 	udiv	r6, r2, r3
 801080c:	d331      	bcc.n	8010872 <quorem+0x9e>
 801080e:	f04f 0e00 	mov.w	lr, #0
 8010812:	4640      	mov	r0, r8
 8010814:	46ac      	mov	ip, r5
 8010816:	46f2      	mov	sl, lr
 8010818:	f850 2b04 	ldr.w	r2, [r0], #4
 801081c:	b293      	uxth	r3, r2
 801081e:	fb06 e303 	mla	r3, r6, r3, lr
 8010822:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010826:	b29b      	uxth	r3, r3
 8010828:	ebaa 0303 	sub.w	r3, sl, r3
 801082c:	0c12      	lsrs	r2, r2, #16
 801082e:	f8dc a000 	ldr.w	sl, [ip]
 8010832:	fb06 e202 	mla	r2, r6, r2, lr
 8010836:	fa13 f38a 	uxtah	r3, r3, sl
 801083a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801083e:	fa1f fa82 	uxth.w	sl, r2
 8010842:	f8dc 2000 	ldr.w	r2, [ip]
 8010846:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801084a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801084e:	b29b      	uxth	r3, r3
 8010850:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010854:	4581      	cmp	r9, r0
 8010856:	f84c 3b04 	str.w	r3, [ip], #4
 801085a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801085e:	d2db      	bcs.n	8010818 <quorem+0x44>
 8010860:	f855 300b 	ldr.w	r3, [r5, fp]
 8010864:	b92b      	cbnz	r3, 8010872 <quorem+0x9e>
 8010866:	9b01      	ldr	r3, [sp, #4]
 8010868:	3b04      	subs	r3, #4
 801086a:	429d      	cmp	r5, r3
 801086c:	461a      	mov	r2, r3
 801086e:	d32e      	bcc.n	80108ce <quorem+0xfa>
 8010870:	613c      	str	r4, [r7, #16]
 8010872:	4638      	mov	r0, r7
 8010874:	f001 f848 	bl	8011908 <__mcmp>
 8010878:	2800      	cmp	r0, #0
 801087a:	db24      	blt.n	80108c6 <quorem+0xf2>
 801087c:	3601      	adds	r6, #1
 801087e:	4628      	mov	r0, r5
 8010880:	f04f 0c00 	mov.w	ip, #0
 8010884:	f858 2b04 	ldr.w	r2, [r8], #4
 8010888:	f8d0 e000 	ldr.w	lr, [r0]
 801088c:	b293      	uxth	r3, r2
 801088e:	ebac 0303 	sub.w	r3, ip, r3
 8010892:	0c12      	lsrs	r2, r2, #16
 8010894:	fa13 f38e 	uxtah	r3, r3, lr
 8010898:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801089c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80108a0:	b29b      	uxth	r3, r3
 80108a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80108a6:	45c1      	cmp	r9, r8
 80108a8:	f840 3b04 	str.w	r3, [r0], #4
 80108ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80108b0:	d2e8      	bcs.n	8010884 <quorem+0xb0>
 80108b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80108b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80108ba:	b922      	cbnz	r2, 80108c6 <quorem+0xf2>
 80108bc:	3b04      	subs	r3, #4
 80108be:	429d      	cmp	r5, r3
 80108c0:	461a      	mov	r2, r3
 80108c2:	d30a      	bcc.n	80108da <quorem+0x106>
 80108c4:	613c      	str	r4, [r7, #16]
 80108c6:	4630      	mov	r0, r6
 80108c8:	b003      	add	sp, #12
 80108ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ce:	6812      	ldr	r2, [r2, #0]
 80108d0:	3b04      	subs	r3, #4
 80108d2:	2a00      	cmp	r2, #0
 80108d4:	d1cc      	bne.n	8010870 <quorem+0x9c>
 80108d6:	3c01      	subs	r4, #1
 80108d8:	e7c7      	b.n	801086a <quorem+0x96>
 80108da:	6812      	ldr	r2, [r2, #0]
 80108dc:	3b04      	subs	r3, #4
 80108de:	2a00      	cmp	r2, #0
 80108e0:	d1f0      	bne.n	80108c4 <quorem+0xf0>
 80108e2:	3c01      	subs	r4, #1
 80108e4:	e7eb      	b.n	80108be <quorem+0xea>
 80108e6:	2000      	movs	r0, #0
 80108e8:	e7ee      	b.n	80108c8 <quorem+0xf4>
 80108ea:	0000      	movs	r0, r0
 80108ec:	0000      	movs	r0, r0
	...

080108f0 <_dtoa_r>:
 80108f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108f4:	ec59 8b10 	vmov	r8, r9, d0
 80108f8:	b095      	sub	sp, #84	; 0x54
 80108fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80108fc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80108fe:	9107      	str	r1, [sp, #28]
 8010900:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8010904:	4606      	mov	r6, r0
 8010906:	9209      	str	r2, [sp, #36]	; 0x24
 8010908:	9310      	str	r3, [sp, #64]	; 0x40
 801090a:	b975      	cbnz	r5, 801092a <_dtoa_r+0x3a>
 801090c:	2010      	movs	r0, #16
 801090e:	f000 fd75 	bl	80113fc <malloc>
 8010912:	4602      	mov	r2, r0
 8010914:	6270      	str	r0, [r6, #36]	; 0x24
 8010916:	b920      	cbnz	r0, 8010922 <_dtoa_r+0x32>
 8010918:	4bab      	ldr	r3, [pc, #684]	; (8010bc8 <_dtoa_r+0x2d8>)
 801091a:	21ea      	movs	r1, #234	; 0xea
 801091c:	48ab      	ldr	r0, [pc, #684]	; (8010bcc <_dtoa_r+0x2dc>)
 801091e:	f001 f9bd 	bl	8011c9c <__assert_func>
 8010922:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010926:	6005      	str	r5, [r0, #0]
 8010928:	60c5      	str	r5, [r0, #12]
 801092a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801092c:	6819      	ldr	r1, [r3, #0]
 801092e:	b151      	cbz	r1, 8010946 <_dtoa_r+0x56>
 8010930:	685a      	ldr	r2, [r3, #4]
 8010932:	604a      	str	r2, [r1, #4]
 8010934:	2301      	movs	r3, #1
 8010936:	4093      	lsls	r3, r2
 8010938:	608b      	str	r3, [r1, #8]
 801093a:	4630      	mov	r0, r6
 801093c:	f000 fda6 	bl	801148c <_Bfree>
 8010940:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010942:	2200      	movs	r2, #0
 8010944:	601a      	str	r2, [r3, #0]
 8010946:	f1b9 0300 	subs.w	r3, r9, #0
 801094a:	bfbb      	ittet	lt
 801094c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010950:	9303      	strlt	r3, [sp, #12]
 8010952:	2300      	movge	r3, #0
 8010954:	2201      	movlt	r2, #1
 8010956:	bfac      	ite	ge
 8010958:	6023      	strge	r3, [r4, #0]
 801095a:	6022      	strlt	r2, [r4, #0]
 801095c:	4b9c      	ldr	r3, [pc, #624]	; (8010bd0 <_dtoa_r+0x2e0>)
 801095e:	9c03      	ldr	r4, [sp, #12]
 8010960:	43a3      	bics	r3, r4
 8010962:	d11a      	bne.n	801099a <_dtoa_r+0xaa>
 8010964:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010966:	f242 730f 	movw	r3, #9999	; 0x270f
 801096a:	6013      	str	r3, [r2, #0]
 801096c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8010970:	ea53 0308 	orrs.w	r3, r3, r8
 8010974:	f000 8512 	beq.w	801139c <_dtoa_r+0xaac>
 8010978:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801097a:	b953      	cbnz	r3, 8010992 <_dtoa_r+0xa2>
 801097c:	4b95      	ldr	r3, [pc, #596]	; (8010bd4 <_dtoa_r+0x2e4>)
 801097e:	e01f      	b.n	80109c0 <_dtoa_r+0xd0>
 8010980:	4b95      	ldr	r3, [pc, #596]	; (8010bd8 <_dtoa_r+0x2e8>)
 8010982:	9300      	str	r3, [sp, #0]
 8010984:	3308      	adds	r3, #8
 8010986:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010988:	6013      	str	r3, [r2, #0]
 801098a:	9800      	ldr	r0, [sp, #0]
 801098c:	b015      	add	sp, #84	; 0x54
 801098e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010992:	4b90      	ldr	r3, [pc, #576]	; (8010bd4 <_dtoa_r+0x2e4>)
 8010994:	9300      	str	r3, [sp, #0]
 8010996:	3303      	adds	r3, #3
 8010998:	e7f5      	b.n	8010986 <_dtoa_r+0x96>
 801099a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801099e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80109a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109a6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80109aa:	d10b      	bne.n	80109c4 <_dtoa_r+0xd4>
 80109ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80109ae:	2301      	movs	r3, #1
 80109b0:	6013      	str	r3, [r2, #0]
 80109b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	f000 84ee 	beq.w	8011396 <_dtoa_r+0xaa6>
 80109ba:	4888      	ldr	r0, [pc, #544]	; (8010bdc <_dtoa_r+0x2ec>)
 80109bc:	6018      	str	r0, [r3, #0]
 80109be:	1e43      	subs	r3, r0, #1
 80109c0:	9300      	str	r3, [sp, #0]
 80109c2:	e7e2      	b.n	801098a <_dtoa_r+0x9a>
 80109c4:	a913      	add	r1, sp, #76	; 0x4c
 80109c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80109ca:	aa12      	add	r2, sp, #72	; 0x48
 80109cc:	4630      	mov	r0, r6
 80109ce:	f001 f83f 	bl	8011a50 <__d2b>
 80109d2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80109d6:	4605      	mov	r5, r0
 80109d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80109da:	2900      	cmp	r1, #0
 80109dc:	d047      	beq.n	8010a6e <_dtoa_r+0x17e>
 80109de:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80109e0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80109e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80109e8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80109ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80109f0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80109f4:	2400      	movs	r4, #0
 80109f6:	ec43 2b16 	vmov	d6, r2, r3
 80109fa:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80109fe:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8010bb0 <_dtoa_r+0x2c0>
 8010a02:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010a06:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8010bb8 <_dtoa_r+0x2c8>
 8010a0a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010a0e:	eeb0 7b46 	vmov.f64	d7, d6
 8010a12:	ee06 1a90 	vmov	s13, r1
 8010a16:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8010a1a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8010bc0 <_dtoa_r+0x2d0>
 8010a1e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010a22:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010a26:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a2e:	ee16 ba90 	vmov	fp, s13
 8010a32:	9411      	str	r4, [sp, #68]	; 0x44
 8010a34:	d508      	bpl.n	8010a48 <_dtoa_r+0x158>
 8010a36:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010a3a:	eeb4 6b47 	vcmp.f64	d6, d7
 8010a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a42:	bf18      	it	ne
 8010a44:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8010a48:	f1bb 0f16 	cmp.w	fp, #22
 8010a4c:	d832      	bhi.n	8010ab4 <_dtoa_r+0x1c4>
 8010a4e:	4b64      	ldr	r3, [pc, #400]	; (8010be0 <_dtoa_r+0x2f0>)
 8010a50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010a54:	ed93 7b00 	vldr	d7, [r3]
 8010a58:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8010a5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a64:	d501      	bpl.n	8010a6a <_dtoa_r+0x17a>
 8010a66:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	e023      	b.n	8010ab6 <_dtoa_r+0x1c6>
 8010a6e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010a70:	4401      	add	r1, r0
 8010a72:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8010a76:	2b20      	cmp	r3, #32
 8010a78:	bfc3      	ittte	gt
 8010a7a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010a7e:	fa04 f303 	lslgt.w	r3, r4, r3
 8010a82:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8010a86:	f1c3 0320 	rsble	r3, r3, #32
 8010a8a:	bfc6      	itte	gt
 8010a8c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8010a90:	ea43 0308 	orrgt.w	r3, r3, r8
 8010a94:	fa08 f303 	lslle.w	r3, r8, r3
 8010a98:	ee07 3a90 	vmov	s15, r3
 8010a9c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010aa0:	3901      	subs	r1, #1
 8010aa2:	ed8d 7b00 	vstr	d7, [sp]
 8010aa6:	9c01      	ldr	r4, [sp, #4]
 8010aa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010aac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8010ab0:	2401      	movs	r4, #1
 8010ab2:	e7a0      	b.n	80109f6 <_dtoa_r+0x106>
 8010ab4:	2301      	movs	r3, #1
 8010ab6:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ab8:	1a43      	subs	r3, r0, r1
 8010aba:	1e5a      	subs	r2, r3, #1
 8010abc:	bf45      	ittet	mi
 8010abe:	f1c3 0301 	rsbmi	r3, r3, #1
 8010ac2:	9305      	strmi	r3, [sp, #20]
 8010ac4:	2300      	movpl	r3, #0
 8010ac6:	2300      	movmi	r3, #0
 8010ac8:	9206      	str	r2, [sp, #24]
 8010aca:	bf54      	ite	pl
 8010acc:	9305      	strpl	r3, [sp, #20]
 8010ace:	9306      	strmi	r3, [sp, #24]
 8010ad0:	f1bb 0f00 	cmp.w	fp, #0
 8010ad4:	db18      	blt.n	8010b08 <_dtoa_r+0x218>
 8010ad6:	9b06      	ldr	r3, [sp, #24]
 8010ad8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8010adc:	445b      	add	r3, fp
 8010ade:	9306      	str	r3, [sp, #24]
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	9a07      	ldr	r2, [sp, #28]
 8010ae4:	2a09      	cmp	r2, #9
 8010ae6:	d849      	bhi.n	8010b7c <_dtoa_r+0x28c>
 8010ae8:	2a05      	cmp	r2, #5
 8010aea:	bfc4      	itt	gt
 8010aec:	3a04      	subgt	r2, #4
 8010aee:	9207      	strgt	r2, [sp, #28]
 8010af0:	9a07      	ldr	r2, [sp, #28]
 8010af2:	f1a2 0202 	sub.w	r2, r2, #2
 8010af6:	bfcc      	ite	gt
 8010af8:	2400      	movgt	r4, #0
 8010afa:	2401      	movle	r4, #1
 8010afc:	2a03      	cmp	r2, #3
 8010afe:	d848      	bhi.n	8010b92 <_dtoa_r+0x2a2>
 8010b00:	e8df f002 	tbb	[pc, r2]
 8010b04:	3a2c2e0b 	.word	0x3a2c2e0b
 8010b08:	9b05      	ldr	r3, [sp, #20]
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	eba3 030b 	sub.w	r3, r3, fp
 8010b10:	9305      	str	r3, [sp, #20]
 8010b12:	920e      	str	r2, [sp, #56]	; 0x38
 8010b14:	f1cb 0300 	rsb	r3, fp, #0
 8010b18:	e7e3      	b.n	8010ae2 <_dtoa_r+0x1f2>
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	9208      	str	r2, [sp, #32]
 8010b1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b20:	2a00      	cmp	r2, #0
 8010b22:	dc39      	bgt.n	8010b98 <_dtoa_r+0x2a8>
 8010b24:	f04f 0a01 	mov.w	sl, #1
 8010b28:	46d1      	mov	r9, sl
 8010b2a:	4652      	mov	r2, sl
 8010b2c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8010b30:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8010b32:	2100      	movs	r1, #0
 8010b34:	6079      	str	r1, [r7, #4]
 8010b36:	2004      	movs	r0, #4
 8010b38:	f100 0c14 	add.w	ip, r0, #20
 8010b3c:	4594      	cmp	ip, r2
 8010b3e:	6879      	ldr	r1, [r7, #4]
 8010b40:	d92f      	bls.n	8010ba2 <_dtoa_r+0x2b2>
 8010b42:	4630      	mov	r0, r6
 8010b44:	930c      	str	r3, [sp, #48]	; 0x30
 8010b46:	f000 fc61 	bl	801140c <_Balloc>
 8010b4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b4c:	9000      	str	r0, [sp, #0]
 8010b4e:	4602      	mov	r2, r0
 8010b50:	2800      	cmp	r0, #0
 8010b52:	d149      	bne.n	8010be8 <_dtoa_r+0x2f8>
 8010b54:	4b23      	ldr	r3, [pc, #140]	; (8010be4 <_dtoa_r+0x2f4>)
 8010b56:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010b5a:	e6df      	b.n	801091c <_dtoa_r+0x2c>
 8010b5c:	2201      	movs	r2, #1
 8010b5e:	e7dd      	b.n	8010b1c <_dtoa_r+0x22c>
 8010b60:	2200      	movs	r2, #0
 8010b62:	9208      	str	r2, [sp, #32]
 8010b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b66:	eb0b 0a02 	add.w	sl, fp, r2
 8010b6a:	f10a 0901 	add.w	r9, sl, #1
 8010b6e:	464a      	mov	r2, r9
 8010b70:	2a01      	cmp	r2, #1
 8010b72:	bfb8      	it	lt
 8010b74:	2201      	movlt	r2, #1
 8010b76:	e7db      	b.n	8010b30 <_dtoa_r+0x240>
 8010b78:	2201      	movs	r2, #1
 8010b7a:	e7f2      	b.n	8010b62 <_dtoa_r+0x272>
 8010b7c:	2401      	movs	r4, #1
 8010b7e:	2200      	movs	r2, #0
 8010b80:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010b84:	f04f 3aff 	mov.w	sl, #4294967295
 8010b88:	2100      	movs	r1, #0
 8010b8a:	46d1      	mov	r9, sl
 8010b8c:	2212      	movs	r2, #18
 8010b8e:	9109      	str	r1, [sp, #36]	; 0x24
 8010b90:	e7ce      	b.n	8010b30 <_dtoa_r+0x240>
 8010b92:	2201      	movs	r2, #1
 8010b94:	9208      	str	r2, [sp, #32]
 8010b96:	e7f5      	b.n	8010b84 <_dtoa_r+0x294>
 8010b98:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8010b9c:	46d1      	mov	r9, sl
 8010b9e:	4652      	mov	r2, sl
 8010ba0:	e7c6      	b.n	8010b30 <_dtoa_r+0x240>
 8010ba2:	3101      	adds	r1, #1
 8010ba4:	6079      	str	r1, [r7, #4]
 8010ba6:	0040      	lsls	r0, r0, #1
 8010ba8:	e7c6      	b.n	8010b38 <_dtoa_r+0x248>
 8010baa:	bf00      	nop
 8010bac:	f3af 8000 	nop.w
 8010bb0:	636f4361 	.word	0x636f4361
 8010bb4:	3fd287a7 	.word	0x3fd287a7
 8010bb8:	8b60c8b3 	.word	0x8b60c8b3
 8010bbc:	3fc68a28 	.word	0x3fc68a28
 8010bc0:	509f79fb 	.word	0x509f79fb
 8010bc4:	3fd34413 	.word	0x3fd34413
 8010bc8:	080142ad 	.word	0x080142ad
 8010bcc:	080142c4 	.word	0x080142c4
 8010bd0:	7ff00000 	.word	0x7ff00000
 8010bd4:	080142a9 	.word	0x080142a9
 8010bd8:	080142a0 	.word	0x080142a0
 8010bdc:	0801427d 	.word	0x0801427d
 8010be0:	080143c0 	.word	0x080143c0
 8010be4:	08014323 	.word	0x08014323
 8010be8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8010bea:	9900      	ldr	r1, [sp, #0]
 8010bec:	6011      	str	r1, [r2, #0]
 8010bee:	f1b9 0f0e 	cmp.w	r9, #14
 8010bf2:	d872      	bhi.n	8010cda <_dtoa_r+0x3ea>
 8010bf4:	2c00      	cmp	r4, #0
 8010bf6:	d070      	beq.n	8010cda <_dtoa_r+0x3ea>
 8010bf8:	f1bb 0f00 	cmp.w	fp, #0
 8010bfc:	f340 80a6 	ble.w	8010d4c <_dtoa_r+0x45c>
 8010c00:	49ca      	ldr	r1, [pc, #808]	; (8010f2c <_dtoa_r+0x63c>)
 8010c02:	f00b 020f 	and.w	r2, fp, #15
 8010c06:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8010c0a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010c0e:	ed92 7b00 	vldr	d7, [r2]
 8010c12:	ea4f 112b 	mov.w	r1, fp, asr #4
 8010c16:	f000 808d 	beq.w	8010d34 <_dtoa_r+0x444>
 8010c1a:	4ac5      	ldr	r2, [pc, #788]	; (8010f30 <_dtoa_r+0x640>)
 8010c1c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8010c20:	ed92 6b08 	vldr	d6, [r2, #32]
 8010c24:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8010c28:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010c2c:	f001 010f 	and.w	r1, r1, #15
 8010c30:	2203      	movs	r2, #3
 8010c32:	48bf      	ldr	r0, [pc, #764]	; (8010f30 <_dtoa_r+0x640>)
 8010c34:	2900      	cmp	r1, #0
 8010c36:	d17f      	bne.n	8010d38 <_dtoa_r+0x448>
 8010c38:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010c3c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010c40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010c44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010c46:	2900      	cmp	r1, #0
 8010c48:	f000 80b2 	beq.w	8010db0 <_dtoa_r+0x4c0>
 8010c4c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010c50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010c54:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c5c:	f140 80a8 	bpl.w	8010db0 <_dtoa_r+0x4c0>
 8010c60:	f1b9 0f00 	cmp.w	r9, #0
 8010c64:	f000 80a4 	beq.w	8010db0 <_dtoa_r+0x4c0>
 8010c68:	f1ba 0f00 	cmp.w	sl, #0
 8010c6c:	dd31      	ble.n	8010cd2 <_dtoa_r+0x3e2>
 8010c6e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010c72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010c76:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010c7a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010c7e:	3201      	adds	r2, #1
 8010c80:	4650      	mov	r0, sl
 8010c82:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010c86:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010c8a:	ee07 2a90 	vmov	s15, r2
 8010c8e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010c92:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010c96:	ed8d 5b02 	vstr	d5, [sp, #8]
 8010c9a:	9c03      	ldr	r4, [sp, #12]
 8010c9c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010ca0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8010ca4:	2800      	cmp	r0, #0
 8010ca6:	f040 8086 	bne.w	8010db6 <_dtoa_r+0x4c6>
 8010caa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010cae:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010cb2:	ec42 1b17 	vmov	d7, r1, r2
 8010cb6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cbe:	f300 8272 	bgt.w	80111a6 <_dtoa_r+0x8b6>
 8010cc2:	eeb1 7b47 	vneg.f64	d7, d7
 8010cc6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cce:	f100 8267 	bmi.w	80111a0 <_dtoa_r+0x8b0>
 8010cd2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8010cd6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8010cda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010cdc:	2a00      	cmp	r2, #0
 8010cde:	f2c0 8129 	blt.w	8010f34 <_dtoa_r+0x644>
 8010ce2:	f1bb 0f0e 	cmp.w	fp, #14
 8010ce6:	f300 8125 	bgt.w	8010f34 <_dtoa_r+0x644>
 8010cea:	4b90      	ldr	r3, [pc, #576]	; (8010f2c <_dtoa_r+0x63c>)
 8010cec:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010cf0:	ed93 6b00 	vldr	d6, [r3]
 8010cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	f280 80c3 	bge.w	8010e82 <_dtoa_r+0x592>
 8010cfc:	f1b9 0f00 	cmp.w	r9, #0
 8010d00:	f300 80bf 	bgt.w	8010e82 <_dtoa_r+0x592>
 8010d04:	f040 824c 	bne.w	80111a0 <_dtoa_r+0x8b0>
 8010d08:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010d0c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010d10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d1c:	464c      	mov	r4, r9
 8010d1e:	464f      	mov	r7, r9
 8010d20:	f280 8222 	bge.w	8011168 <_dtoa_r+0x878>
 8010d24:	f8dd 8000 	ldr.w	r8, [sp]
 8010d28:	2331      	movs	r3, #49	; 0x31
 8010d2a:	f808 3b01 	strb.w	r3, [r8], #1
 8010d2e:	f10b 0b01 	add.w	fp, fp, #1
 8010d32:	e21e      	b.n	8011172 <_dtoa_r+0x882>
 8010d34:	2202      	movs	r2, #2
 8010d36:	e77c      	b.n	8010c32 <_dtoa_r+0x342>
 8010d38:	07cc      	lsls	r4, r1, #31
 8010d3a:	d504      	bpl.n	8010d46 <_dtoa_r+0x456>
 8010d3c:	ed90 6b00 	vldr	d6, [r0]
 8010d40:	3201      	adds	r2, #1
 8010d42:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010d46:	1049      	asrs	r1, r1, #1
 8010d48:	3008      	adds	r0, #8
 8010d4a:	e773      	b.n	8010c34 <_dtoa_r+0x344>
 8010d4c:	d02e      	beq.n	8010dac <_dtoa_r+0x4bc>
 8010d4e:	f1cb 0100 	rsb	r1, fp, #0
 8010d52:	4a76      	ldr	r2, [pc, #472]	; (8010f2c <_dtoa_r+0x63c>)
 8010d54:	f001 000f 	and.w	r0, r1, #15
 8010d58:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010d5c:	ed92 7b00 	vldr	d7, [r2]
 8010d60:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8010d64:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010d68:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010d6c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8010d70:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8010d74:	486e      	ldr	r0, [pc, #440]	; (8010f30 <_dtoa_r+0x640>)
 8010d76:	1109      	asrs	r1, r1, #4
 8010d78:	2400      	movs	r4, #0
 8010d7a:	2202      	movs	r2, #2
 8010d7c:	b939      	cbnz	r1, 8010d8e <_dtoa_r+0x49e>
 8010d7e:	2c00      	cmp	r4, #0
 8010d80:	f43f af60 	beq.w	8010c44 <_dtoa_r+0x354>
 8010d84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010d88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010d8c:	e75a      	b.n	8010c44 <_dtoa_r+0x354>
 8010d8e:	07cf      	lsls	r7, r1, #31
 8010d90:	d509      	bpl.n	8010da6 <_dtoa_r+0x4b6>
 8010d92:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8010d96:	ed90 7b00 	vldr	d7, [r0]
 8010d9a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010d9e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010da2:	3201      	adds	r2, #1
 8010da4:	2401      	movs	r4, #1
 8010da6:	1049      	asrs	r1, r1, #1
 8010da8:	3008      	adds	r0, #8
 8010daa:	e7e7      	b.n	8010d7c <_dtoa_r+0x48c>
 8010dac:	2202      	movs	r2, #2
 8010dae:	e749      	b.n	8010c44 <_dtoa_r+0x354>
 8010db0:	465f      	mov	r7, fp
 8010db2:	4648      	mov	r0, r9
 8010db4:	e765      	b.n	8010c82 <_dtoa_r+0x392>
 8010db6:	ec42 1b17 	vmov	d7, r1, r2
 8010dba:	4a5c      	ldr	r2, [pc, #368]	; (8010f2c <_dtoa_r+0x63c>)
 8010dbc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010dc0:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010dc4:	9a00      	ldr	r2, [sp, #0]
 8010dc6:	1814      	adds	r4, r2, r0
 8010dc8:	9a08      	ldr	r2, [sp, #32]
 8010dca:	b352      	cbz	r2, 8010e22 <_dtoa_r+0x532>
 8010dcc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010dd0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010dd4:	f8dd 8000 	ldr.w	r8, [sp]
 8010dd8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010ddc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010de0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010de4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010de8:	ee14 2a90 	vmov	r2, s9
 8010dec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010df0:	3230      	adds	r2, #48	; 0x30
 8010df2:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010df6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dfe:	f808 2b01 	strb.w	r2, [r8], #1
 8010e02:	d439      	bmi.n	8010e78 <_dtoa_r+0x588>
 8010e04:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010e08:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e10:	d472      	bmi.n	8010ef8 <_dtoa_r+0x608>
 8010e12:	45a0      	cmp	r8, r4
 8010e14:	f43f af5d 	beq.w	8010cd2 <_dtoa_r+0x3e2>
 8010e18:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010e1c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010e20:	e7e0      	b.n	8010de4 <_dtoa_r+0x4f4>
 8010e22:	f8dd 8000 	ldr.w	r8, [sp]
 8010e26:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010e2a:	4621      	mov	r1, r4
 8010e2c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010e30:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010e34:	ee14 2a90 	vmov	r2, s9
 8010e38:	3230      	adds	r2, #48	; 0x30
 8010e3a:	f808 2b01 	strb.w	r2, [r8], #1
 8010e3e:	45a0      	cmp	r8, r4
 8010e40:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010e44:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010e48:	d118      	bne.n	8010e7c <_dtoa_r+0x58c>
 8010e4a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010e4e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010e52:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e5a:	dc4d      	bgt.n	8010ef8 <_dtoa_r+0x608>
 8010e5c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010e60:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e68:	f57f af33 	bpl.w	8010cd2 <_dtoa_r+0x3e2>
 8010e6c:	4688      	mov	r8, r1
 8010e6e:	3901      	subs	r1, #1
 8010e70:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8010e74:	2b30      	cmp	r3, #48	; 0x30
 8010e76:	d0f9      	beq.n	8010e6c <_dtoa_r+0x57c>
 8010e78:	46bb      	mov	fp, r7
 8010e7a:	e02a      	b.n	8010ed2 <_dtoa_r+0x5e2>
 8010e7c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010e80:	e7d6      	b.n	8010e30 <_dtoa_r+0x540>
 8010e82:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010e86:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8010e8a:	f8dd 8000 	ldr.w	r8, [sp]
 8010e8e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010e92:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010e96:	ee15 3a10 	vmov	r3, s10
 8010e9a:	3330      	adds	r3, #48	; 0x30
 8010e9c:	f808 3b01 	strb.w	r3, [r8], #1
 8010ea0:	9b00      	ldr	r3, [sp, #0]
 8010ea2:	eba8 0303 	sub.w	r3, r8, r3
 8010ea6:	4599      	cmp	r9, r3
 8010ea8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010eac:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010eb0:	d133      	bne.n	8010f1a <_dtoa_r+0x62a>
 8010eb2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010eb6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ebe:	dc1a      	bgt.n	8010ef6 <_dtoa_r+0x606>
 8010ec0:	eeb4 7b46 	vcmp.f64	d7, d6
 8010ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec8:	d103      	bne.n	8010ed2 <_dtoa_r+0x5e2>
 8010eca:	ee15 3a10 	vmov	r3, s10
 8010ece:	07d9      	lsls	r1, r3, #31
 8010ed0:	d411      	bmi.n	8010ef6 <_dtoa_r+0x606>
 8010ed2:	4629      	mov	r1, r5
 8010ed4:	4630      	mov	r0, r6
 8010ed6:	f000 fad9 	bl	801148c <_Bfree>
 8010eda:	2300      	movs	r3, #0
 8010edc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010ede:	f888 3000 	strb.w	r3, [r8]
 8010ee2:	f10b 0301 	add.w	r3, fp, #1
 8010ee6:	6013      	str	r3, [r2, #0]
 8010ee8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	f43f ad4d 	beq.w	801098a <_dtoa_r+0x9a>
 8010ef0:	f8c3 8000 	str.w	r8, [r3]
 8010ef4:	e549      	b.n	801098a <_dtoa_r+0x9a>
 8010ef6:	465f      	mov	r7, fp
 8010ef8:	4643      	mov	r3, r8
 8010efa:	4698      	mov	r8, r3
 8010efc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f00:	2a39      	cmp	r2, #57	; 0x39
 8010f02:	d106      	bne.n	8010f12 <_dtoa_r+0x622>
 8010f04:	9a00      	ldr	r2, [sp, #0]
 8010f06:	429a      	cmp	r2, r3
 8010f08:	d1f7      	bne.n	8010efa <_dtoa_r+0x60a>
 8010f0a:	9900      	ldr	r1, [sp, #0]
 8010f0c:	2230      	movs	r2, #48	; 0x30
 8010f0e:	3701      	adds	r7, #1
 8010f10:	700a      	strb	r2, [r1, #0]
 8010f12:	781a      	ldrb	r2, [r3, #0]
 8010f14:	3201      	adds	r2, #1
 8010f16:	701a      	strb	r2, [r3, #0]
 8010f18:	e7ae      	b.n	8010e78 <_dtoa_r+0x588>
 8010f1a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010f1e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f26:	d1b2      	bne.n	8010e8e <_dtoa_r+0x59e>
 8010f28:	e7d3      	b.n	8010ed2 <_dtoa_r+0x5e2>
 8010f2a:	bf00      	nop
 8010f2c:	080143c0 	.word	0x080143c0
 8010f30:	08014398 	.word	0x08014398
 8010f34:	9908      	ldr	r1, [sp, #32]
 8010f36:	2900      	cmp	r1, #0
 8010f38:	f000 80d1 	beq.w	80110de <_dtoa_r+0x7ee>
 8010f3c:	9907      	ldr	r1, [sp, #28]
 8010f3e:	2901      	cmp	r1, #1
 8010f40:	f300 80b4 	bgt.w	80110ac <_dtoa_r+0x7bc>
 8010f44:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010f46:	2900      	cmp	r1, #0
 8010f48:	f000 80ac 	beq.w	80110a4 <_dtoa_r+0x7b4>
 8010f4c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010f50:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010f54:	461c      	mov	r4, r3
 8010f56:	930a      	str	r3, [sp, #40]	; 0x28
 8010f58:	9b05      	ldr	r3, [sp, #20]
 8010f5a:	4413      	add	r3, r2
 8010f5c:	9305      	str	r3, [sp, #20]
 8010f5e:	9b06      	ldr	r3, [sp, #24]
 8010f60:	2101      	movs	r1, #1
 8010f62:	4413      	add	r3, r2
 8010f64:	4630      	mov	r0, r6
 8010f66:	9306      	str	r3, [sp, #24]
 8010f68:	f000 fb4c 	bl	8011604 <__i2b>
 8010f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f6e:	4607      	mov	r7, r0
 8010f70:	f1b8 0f00 	cmp.w	r8, #0
 8010f74:	dd0d      	ble.n	8010f92 <_dtoa_r+0x6a2>
 8010f76:	9a06      	ldr	r2, [sp, #24]
 8010f78:	2a00      	cmp	r2, #0
 8010f7a:	dd0a      	ble.n	8010f92 <_dtoa_r+0x6a2>
 8010f7c:	4542      	cmp	r2, r8
 8010f7e:	9905      	ldr	r1, [sp, #20]
 8010f80:	bfa8      	it	ge
 8010f82:	4642      	movge	r2, r8
 8010f84:	1a89      	subs	r1, r1, r2
 8010f86:	9105      	str	r1, [sp, #20]
 8010f88:	9906      	ldr	r1, [sp, #24]
 8010f8a:	eba8 0802 	sub.w	r8, r8, r2
 8010f8e:	1a8a      	subs	r2, r1, r2
 8010f90:	9206      	str	r2, [sp, #24]
 8010f92:	b303      	cbz	r3, 8010fd6 <_dtoa_r+0x6e6>
 8010f94:	9a08      	ldr	r2, [sp, #32]
 8010f96:	2a00      	cmp	r2, #0
 8010f98:	f000 80a6 	beq.w	80110e8 <_dtoa_r+0x7f8>
 8010f9c:	2c00      	cmp	r4, #0
 8010f9e:	dd13      	ble.n	8010fc8 <_dtoa_r+0x6d8>
 8010fa0:	4639      	mov	r1, r7
 8010fa2:	4622      	mov	r2, r4
 8010fa4:	4630      	mov	r0, r6
 8010fa6:	930c      	str	r3, [sp, #48]	; 0x30
 8010fa8:	f000 fbe8 	bl	801177c <__pow5mult>
 8010fac:	462a      	mov	r2, r5
 8010fae:	4601      	mov	r1, r0
 8010fb0:	4607      	mov	r7, r0
 8010fb2:	4630      	mov	r0, r6
 8010fb4:	f000 fb3c 	bl	8011630 <__multiply>
 8010fb8:	4629      	mov	r1, r5
 8010fba:	900a      	str	r0, [sp, #40]	; 0x28
 8010fbc:	4630      	mov	r0, r6
 8010fbe:	f000 fa65 	bl	801148c <_Bfree>
 8010fc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010fc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010fc6:	4615      	mov	r5, r2
 8010fc8:	1b1a      	subs	r2, r3, r4
 8010fca:	d004      	beq.n	8010fd6 <_dtoa_r+0x6e6>
 8010fcc:	4629      	mov	r1, r5
 8010fce:	4630      	mov	r0, r6
 8010fd0:	f000 fbd4 	bl	801177c <__pow5mult>
 8010fd4:	4605      	mov	r5, r0
 8010fd6:	2101      	movs	r1, #1
 8010fd8:	4630      	mov	r0, r6
 8010fda:	f000 fb13 	bl	8011604 <__i2b>
 8010fde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	4604      	mov	r4, r0
 8010fe4:	f340 8082 	ble.w	80110ec <_dtoa_r+0x7fc>
 8010fe8:	461a      	mov	r2, r3
 8010fea:	4601      	mov	r1, r0
 8010fec:	4630      	mov	r0, r6
 8010fee:	f000 fbc5 	bl	801177c <__pow5mult>
 8010ff2:	9b07      	ldr	r3, [sp, #28]
 8010ff4:	2b01      	cmp	r3, #1
 8010ff6:	4604      	mov	r4, r0
 8010ff8:	dd7b      	ble.n	80110f2 <_dtoa_r+0x802>
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	930a      	str	r3, [sp, #40]	; 0x28
 8010ffe:	6922      	ldr	r2, [r4, #16]
 8011000:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011004:	6910      	ldr	r0, [r2, #16]
 8011006:	f000 faad 	bl	8011564 <__hi0bits>
 801100a:	f1c0 0020 	rsb	r0, r0, #32
 801100e:	9b06      	ldr	r3, [sp, #24]
 8011010:	4418      	add	r0, r3
 8011012:	f010 001f 	ands.w	r0, r0, #31
 8011016:	f000 808d 	beq.w	8011134 <_dtoa_r+0x844>
 801101a:	f1c0 0220 	rsb	r2, r0, #32
 801101e:	2a04      	cmp	r2, #4
 8011020:	f340 8086 	ble.w	8011130 <_dtoa_r+0x840>
 8011024:	f1c0 001c 	rsb	r0, r0, #28
 8011028:	9b05      	ldr	r3, [sp, #20]
 801102a:	4403      	add	r3, r0
 801102c:	9305      	str	r3, [sp, #20]
 801102e:	9b06      	ldr	r3, [sp, #24]
 8011030:	4403      	add	r3, r0
 8011032:	4480      	add	r8, r0
 8011034:	9306      	str	r3, [sp, #24]
 8011036:	9b05      	ldr	r3, [sp, #20]
 8011038:	2b00      	cmp	r3, #0
 801103a:	dd05      	ble.n	8011048 <_dtoa_r+0x758>
 801103c:	4629      	mov	r1, r5
 801103e:	461a      	mov	r2, r3
 8011040:	4630      	mov	r0, r6
 8011042:	f000 fbf5 	bl	8011830 <__lshift>
 8011046:	4605      	mov	r5, r0
 8011048:	9b06      	ldr	r3, [sp, #24]
 801104a:	2b00      	cmp	r3, #0
 801104c:	dd05      	ble.n	801105a <_dtoa_r+0x76a>
 801104e:	4621      	mov	r1, r4
 8011050:	461a      	mov	r2, r3
 8011052:	4630      	mov	r0, r6
 8011054:	f000 fbec 	bl	8011830 <__lshift>
 8011058:	4604      	mov	r4, r0
 801105a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801105c:	2b00      	cmp	r3, #0
 801105e:	d06b      	beq.n	8011138 <_dtoa_r+0x848>
 8011060:	4621      	mov	r1, r4
 8011062:	4628      	mov	r0, r5
 8011064:	f000 fc50 	bl	8011908 <__mcmp>
 8011068:	2800      	cmp	r0, #0
 801106a:	da65      	bge.n	8011138 <_dtoa_r+0x848>
 801106c:	2300      	movs	r3, #0
 801106e:	4629      	mov	r1, r5
 8011070:	220a      	movs	r2, #10
 8011072:	4630      	mov	r0, r6
 8011074:	f000 fa2c 	bl	80114d0 <__multadd>
 8011078:	9b08      	ldr	r3, [sp, #32]
 801107a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801107e:	4605      	mov	r5, r0
 8011080:	2b00      	cmp	r3, #0
 8011082:	f000 8192 	beq.w	80113aa <_dtoa_r+0xaba>
 8011086:	4639      	mov	r1, r7
 8011088:	2300      	movs	r3, #0
 801108a:	220a      	movs	r2, #10
 801108c:	4630      	mov	r0, r6
 801108e:	f000 fa1f 	bl	80114d0 <__multadd>
 8011092:	f1ba 0f00 	cmp.w	sl, #0
 8011096:	4607      	mov	r7, r0
 8011098:	f300 808e 	bgt.w	80111b8 <_dtoa_r+0x8c8>
 801109c:	9b07      	ldr	r3, [sp, #28]
 801109e:	2b02      	cmp	r3, #2
 80110a0:	dc51      	bgt.n	8011146 <_dtoa_r+0x856>
 80110a2:	e089      	b.n	80111b8 <_dtoa_r+0x8c8>
 80110a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80110a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80110aa:	e751      	b.n	8010f50 <_dtoa_r+0x660>
 80110ac:	f109 34ff 	add.w	r4, r9, #4294967295
 80110b0:	42a3      	cmp	r3, r4
 80110b2:	bfbf      	itttt	lt
 80110b4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80110b6:	1ae3      	sublt	r3, r4, r3
 80110b8:	18d2      	addlt	r2, r2, r3
 80110ba:	4613      	movlt	r3, r2
 80110bc:	bfb7      	itett	lt
 80110be:	930e      	strlt	r3, [sp, #56]	; 0x38
 80110c0:	1b1c      	subge	r4, r3, r4
 80110c2:	4623      	movlt	r3, r4
 80110c4:	2400      	movlt	r4, #0
 80110c6:	f1b9 0f00 	cmp.w	r9, #0
 80110ca:	bfb5      	itete	lt
 80110cc:	9a05      	ldrlt	r2, [sp, #20]
 80110ce:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80110d2:	eba2 0809 	sublt.w	r8, r2, r9
 80110d6:	464a      	movge	r2, r9
 80110d8:	bfb8      	it	lt
 80110da:	2200      	movlt	r2, #0
 80110dc:	e73b      	b.n	8010f56 <_dtoa_r+0x666>
 80110de:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80110e2:	9f08      	ldr	r7, [sp, #32]
 80110e4:	461c      	mov	r4, r3
 80110e6:	e743      	b.n	8010f70 <_dtoa_r+0x680>
 80110e8:	461a      	mov	r2, r3
 80110ea:	e76f      	b.n	8010fcc <_dtoa_r+0x6dc>
 80110ec:	9b07      	ldr	r3, [sp, #28]
 80110ee:	2b01      	cmp	r3, #1
 80110f0:	dc18      	bgt.n	8011124 <_dtoa_r+0x834>
 80110f2:	9b02      	ldr	r3, [sp, #8]
 80110f4:	b9b3      	cbnz	r3, 8011124 <_dtoa_r+0x834>
 80110f6:	9b03      	ldr	r3, [sp, #12]
 80110f8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80110fc:	b9a2      	cbnz	r2, 8011128 <_dtoa_r+0x838>
 80110fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011102:	0d12      	lsrs	r2, r2, #20
 8011104:	0512      	lsls	r2, r2, #20
 8011106:	b18a      	cbz	r2, 801112c <_dtoa_r+0x83c>
 8011108:	9b05      	ldr	r3, [sp, #20]
 801110a:	3301      	adds	r3, #1
 801110c:	9305      	str	r3, [sp, #20]
 801110e:	9b06      	ldr	r3, [sp, #24]
 8011110:	3301      	adds	r3, #1
 8011112:	9306      	str	r3, [sp, #24]
 8011114:	2301      	movs	r3, #1
 8011116:	930a      	str	r3, [sp, #40]	; 0x28
 8011118:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801111a:	2b00      	cmp	r3, #0
 801111c:	f47f af6f 	bne.w	8010ffe <_dtoa_r+0x70e>
 8011120:	2001      	movs	r0, #1
 8011122:	e774      	b.n	801100e <_dtoa_r+0x71e>
 8011124:	2300      	movs	r3, #0
 8011126:	e7f6      	b.n	8011116 <_dtoa_r+0x826>
 8011128:	9b02      	ldr	r3, [sp, #8]
 801112a:	e7f4      	b.n	8011116 <_dtoa_r+0x826>
 801112c:	920a      	str	r2, [sp, #40]	; 0x28
 801112e:	e7f3      	b.n	8011118 <_dtoa_r+0x828>
 8011130:	d081      	beq.n	8011036 <_dtoa_r+0x746>
 8011132:	4610      	mov	r0, r2
 8011134:	301c      	adds	r0, #28
 8011136:	e777      	b.n	8011028 <_dtoa_r+0x738>
 8011138:	f1b9 0f00 	cmp.w	r9, #0
 801113c:	dc37      	bgt.n	80111ae <_dtoa_r+0x8be>
 801113e:	9b07      	ldr	r3, [sp, #28]
 8011140:	2b02      	cmp	r3, #2
 8011142:	dd34      	ble.n	80111ae <_dtoa_r+0x8be>
 8011144:	46ca      	mov	sl, r9
 8011146:	f1ba 0f00 	cmp.w	sl, #0
 801114a:	d10d      	bne.n	8011168 <_dtoa_r+0x878>
 801114c:	4621      	mov	r1, r4
 801114e:	4653      	mov	r3, sl
 8011150:	2205      	movs	r2, #5
 8011152:	4630      	mov	r0, r6
 8011154:	f000 f9bc 	bl	80114d0 <__multadd>
 8011158:	4601      	mov	r1, r0
 801115a:	4604      	mov	r4, r0
 801115c:	4628      	mov	r0, r5
 801115e:	f000 fbd3 	bl	8011908 <__mcmp>
 8011162:	2800      	cmp	r0, #0
 8011164:	f73f adde 	bgt.w	8010d24 <_dtoa_r+0x434>
 8011168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801116a:	f8dd 8000 	ldr.w	r8, [sp]
 801116e:	ea6f 0b03 	mvn.w	fp, r3
 8011172:	f04f 0900 	mov.w	r9, #0
 8011176:	4621      	mov	r1, r4
 8011178:	4630      	mov	r0, r6
 801117a:	f000 f987 	bl	801148c <_Bfree>
 801117e:	2f00      	cmp	r7, #0
 8011180:	f43f aea7 	beq.w	8010ed2 <_dtoa_r+0x5e2>
 8011184:	f1b9 0f00 	cmp.w	r9, #0
 8011188:	d005      	beq.n	8011196 <_dtoa_r+0x8a6>
 801118a:	45b9      	cmp	r9, r7
 801118c:	d003      	beq.n	8011196 <_dtoa_r+0x8a6>
 801118e:	4649      	mov	r1, r9
 8011190:	4630      	mov	r0, r6
 8011192:	f000 f97b 	bl	801148c <_Bfree>
 8011196:	4639      	mov	r1, r7
 8011198:	4630      	mov	r0, r6
 801119a:	f000 f977 	bl	801148c <_Bfree>
 801119e:	e698      	b.n	8010ed2 <_dtoa_r+0x5e2>
 80111a0:	2400      	movs	r4, #0
 80111a2:	4627      	mov	r7, r4
 80111a4:	e7e0      	b.n	8011168 <_dtoa_r+0x878>
 80111a6:	46bb      	mov	fp, r7
 80111a8:	4604      	mov	r4, r0
 80111aa:	4607      	mov	r7, r0
 80111ac:	e5ba      	b.n	8010d24 <_dtoa_r+0x434>
 80111ae:	9b08      	ldr	r3, [sp, #32]
 80111b0:	46ca      	mov	sl, r9
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	f000 8100 	beq.w	80113b8 <_dtoa_r+0xac8>
 80111b8:	f1b8 0f00 	cmp.w	r8, #0
 80111bc:	dd05      	ble.n	80111ca <_dtoa_r+0x8da>
 80111be:	4639      	mov	r1, r7
 80111c0:	4642      	mov	r2, r8
 80111c2:	4630      	mov	r0, r6
 80111c4:	f000 fb34 	bl	8011830 <__lshift>
 80111c8:	4607      	mov	r7, r0
 80111ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d05d      	beq.n	801128c <_dtoa_r+0x99c>
 80111d0:	6879      	ldr	r1, [r7, #4]
 80111d2:	4630      	mov	r0, r6
 80111d4:	f000 f91a 	bl	801140c <_Balloc>
 80111d8:	4680      	mov	r8, r0
 80111da:	b928      	cbnz	r0, 80111e8 <_dtoa_r+0x8f8>
 80111dc:	4b82      	ldr	r3, [pc, #520]	; (80113e8 <_dtoa_r+0xaf8>)
 80111de:	4602      	mov	r2, r0
 80111e0:	f240 21ea 	movw	r1, #746	; 0x2ea
 80111e4:	f7ff bb9a 	b.w	801091c <_dtoa_r+0x2c>
 80111e8:	693a      	ldr	r2, [r7, #16]
 80111ea:	3202      	adds	r2, #2
 80111ec:	0092      	lsls	r2, r2, #2
 80111ee:	f107 010c 	add.w	r1, r7, #12
 80111f2:	300c      	adds	r0, #12
 80111f4:	f7fe fe96 	bl	800ff24 <memcpy>
 80111f8:	2201      	movs	r2, #1
 80111fa:	4641      	mov	r1, r8
 80111fc:	4630      	mov	r0, r6
 80111fe:	f000 fb17 	bl	8011830 <__lshift>
 8011202:	9b00      	ldr	r3, [sp, #0]
 8011204:	3301      	adds	r3, #1
 8011206:	9305      	str	r3, [sp, #20]
 8011208:	9b00      	ldr	r3, [sp, #0]
 801120a:	4453      	add	r3, sl
 801120c:	9309      	str	r3, [sp, #36]	; 0x24
 801120e:	9b02      	ldr	r3, [sp, #8]
 8011210:	f003 0301 	and.w	r3, r3, #1
 8011214:	46b9      	mov	r9, r7
 8011216:	9308      	str	r3, [sp, #32]
 8011218:	4607      	mov	r7, r0
 801121a:	9b05      	ldr	r3, [sp, #20]
 801121c:	4621      	mov	r1, r4
 801121e:	3b01      	subs	r3, #1
 8011220:	4628      	mov	r0, r5
 8011222:	9302      	str	r3, [sp, #8]
 8011224:	f7ff fad6 	bl	80107d4 <quorem>
 8011228:	4603      	mov	r3, r0
 801122a:	3330      	adds	r3, #48	; 0x30
 801122c:	9006      	str	r0, [sp, #24]
 801122e:	4649      	mov	r1, r9
 8011230:	4628      	mov	r0, r5
 8011232:	930a      	str	r3, [sp, #40]	; 0x28
 8011234:	f000 fb68 	bl	8011908 <__mcmp>
 8011238:	463a      	mov	r2, r7
 801123a:	4682      	mov	sl, r0
 801123c:	4621      	mov	r1, r4
 801123e:	4630      	mov	r0, r6
 8011240:	f000 fb7e 	bl	8011940 <__mdiff>
 8011244:	68c2      	ldr	r2, [r0, #12]
 8011246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011248:	4680      	mov	r8, r0
 801124a:	bb0a      	cbnz	r2, 8011290 <_dtoa_r+0x9a0>
 801124c:	4601      	mov	r1, r0
 801124e:	4628      	mov	r0, r5
 8011250:	f000 fb5a 	bl	8011908 <__mcmp>
 8011254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011256:	4602      	mov	r2, r0
 8011258:	4641      	mov	r1, r8
 801125a:	4630      	mov	r0, r6
 801125c:	920e      	str	r2, [sp, #56]	; 0x38
 801125e:	930a      	str	r3, [sp, #40]	; 0x28
 8011260:	f000 f914 	bl	801148c <_Bfree>
 8011264:	9b07      	ldr	r3, [sp, #28]
 8011266:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011268:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801126c:	ea43 0102 	orr.w	r1, r3, r2
 8011270:	9b08      	ldr	r3, [sp, #32]
 8011272:	430b      	orrs	r3, r1
 8011274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011276:	d10d      	bne.n	8011294 <_dtoa_r+0x9a4>
 8011278:	2b39      	cmp	r3, #57	; 0x39
 801127a:	d029      	beq.n	80112d0 <_dtoa_r+0x9e0>
 801127c:	f1ba 0f00 	cmp.w	sl, #0
 8011280:	dd01      	ble.n	8011286 <_dtoa_r+0x996>
 8011282:	9b06      	ldr	r3, [sp, #24]
 8011284:	3331      	adds	r3, #49	; 0x31
 8011286:	9a02      	ldr	r2, [sp, #8]
 8011288:	7013      	strb	r3, [r2, #0]
 801128a:	e774      	b.n	8011176 <_dtoa_r+0x886>
 801128c:	4638      	mov	r0, r7
 801128e:	e7b8      	b.n	8011202 <_dtoa_r+0x912>
 8011290:	2201      	movs	r2, #1
 8011292:	e7e1      	b.n	8011258 <_dtoa_r+0x968>
 8011294:	f1ba 0f00 	cmp.w	sl, #0
 8011298:	db06      	blt.n	80112a8 <_dtoa_r+0x9b8>
 801129a:	9907      	ldr	r1, [sp, #28]
 801129c:	ea41 0a0a 	orr.w	sl, r1, sl
 80112a0:	9908      	ldr	r1, [sp, #32]
 80112a2:	ea5a 0101 	orrs.w	r1, sl, r1
 80112a6:	d120      	bne.n	80112ea <_dtoa_r+0x9fa>
 80112a8:	2a00      	cmp	r2, #0
 80112aa:	ddec      	ble.n	8011286 <_dtoa_r+0x996>
 80112ac:	4629      	mov	r1, r5
 80112ae:	2201      	movs	r2, #1
 80112b0:	4630      	mov	r0, r6
 80112b2:	9305      	str	r3, [sp, #20]
 80112b4:	f000 fabc 	bl	8011830 <__lshift>
 80112b8:	4621      	mov	r1, r4
 80112ba:	4605      	mov	r5, r0
 80112bc:	f000 fb24 	bl	8011908 <__mcmp>
 80112c0:	2800      	cmp	r0, #0
 80112c2:	9b05      	ldr	r3, [sp, #20]
 80112c4:	dc02      	bgt.n	80112cc <_dtoa_r+0x9dc>
 80112c6:	d1de      	bne.n	8011286 <_dtoa_r+0x996>
 80112c8:	07da      	lsls	r2, r3, #31
 80112ca:	d5dc      	bpl.n	8011286 <_dtoa_r+0x996>
 80112cc:	2b39      	cmp	r3, #57	; 0x39
 80112ce:	d1d8      	bne.n	8011282 <_dtoa_r+0x992>
 80112d0:	9a02      	ldr	r2, [sp, #8]
 80112d2:	2339      	movs	r3, #57	; 0x39
 80112d4:	7013      	strb	r3, [r2, #0]
 80112d6:	4643      	mov	r3, r8
 80112d8:	4698      	mov	r8, r3
 80112da:	3b01      	subs	r3, #1
 80112dc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80112e0:	2a39      	cmp	r2, #57	; 0x39
 80112e2:	d051      	beq.n	8011388 <_dtoa_r+0xa98>
 80112e4:	3201      	adds	r2, #1
 80112e6:	701a      	strb	r2, [r3, #0]
 80112e8:	e745      	b.n	8011176 <_dtoa_r+0x886>
 80112ea:	2a00      	cmp	r2, #0
 80112ec:	dd03      	ble.n	80112f6 <_dtoa_r+0xa06>
 80112ee:	2b39      	cmp	r3, #57	; 0x39
 80112f0:	d0ee      	beq.n	80112d0 <_dtoa_r+0x9e0>
 80112f2:	3301      	adds	r3, #1
 80112f4:	e7c7      	b.n	8011286 <_dtoa_r+0x996>
 80112f6:	9a05      	ldr	r2, [sp, #20]
 80112f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80112fa:	f802 3c01 	strb.w	r3, [r2, #-1]
 80112fe:	428a      	cmp	r2, r1
 8011300:	d02b      	beq.n	801135a <_dtoa_r+0xa6a>
 8011302:	4629      	mov	r1, r5
 8011304:	2300      	movs	r3, #0
 8011306:	220a      	movs	r2, #10
 8011308:	4630      	mov	r0, r6
 801130a:	f000 f8e1 	bl	80114d0 <__multadd>
 801130e:	45b9      	cmp	r9, r7
 8011310:	4605      	mov	r5, r0
 8011312:	f04f 0300 	mov.w	r3, #0
 8011316:	f04f 020a 	mov.w	r2, #10
 801131a:	4649      	mov	r1, r9
 801131c:	4630      	mov	r0, r6
 801131e:	d107      	bne.n	8011330 <_dtoa_r+0xa40>
 8011320:	f000 f8d6 	bl	80114d0 <__multadd>
 8011324:	4681      	mov	r9, r0
 8011326:	4607      	mov	r7, r0
 8011328:	9b05      	ldr	r3, [sp, #20]
 801132a:	3301      	adds	r3, #1
 801132c:	9305      	str	r3, [sp, #20]
 801132e:	e774      	b.n	801121a <_dtoa_r+0x92a>
 8011330:	f000 f8ce 	bl	80114d0 <__multadd>
 8011334:	4639      	mov	r1, r7
 8011336:	4681      	mov	r9, r0
 8011338:	2300      	movs	r3, #0
 801133a:	220a      	movs	r2, #10
 801133c:	4630      	mov	r0, r6
 801133e:	f000 f8c7 	bl	80114d0 <__multadd>
 8011342:	4607      	mov	r7, r0
 8011344:	e7f0      	b.n	8011328 <_dtoa_r+0xa38>
 8011346:	f1ba 0f00 	cmp.w	sl, #0
 801134a:	9a00      	ldr	r2, [sp, #0]
 801134c:	bfcc      	ite	gt
 801134e:	46d0      	movgt	r8, sl
 8011350:	f04f 0801 	movle.w	r8, #1
 8011354:	4490      	add	r8, r2
 8011356:	f04f 0900 	mov.w	r9, #0
 801135a:	4629      	mov	r1, r5
 801135c:	2201      	movs	r2, #1
 801135e:	4630      	mov	r0, r6
 8011360:	9302      	str	r3, [sp, #8]
 8011362:	f000 fa65 	bl	8011830 <__lshift>
 8011366:	4621      	mov	r1, r4
 8011368:	4605      	mov	r5, r0
 801136a:	f000 facd 	bl	8011908 <__mcmp>
 801136e:	2800      	cmp	r0, #0
 8011370:	dcb1      	bgt.n	80112d6 <_dtoa_r+0x9e6>
 8011372:	d102      	bne.n	801137a <_dtoa_r+0xa8a>
 8011374:	9b02      	ldr	r3, [sp, #8]
 8011376:	07db      	lsls	r3, r3, #31
 8011378:	d4ad      	bmi.n	80112d6 <_dtoa_r+0x9e6>
 801137a:	4643      	mov	r3, r8
 801137c:	4698      	mov	r8, r3
 801137e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011382:	2a30      	cmp	r2, #48	; 0x30
 8011384:	d0fa      	beq.n	801137c <_dtoa_r+0xa8c>
 8011386:	e6f6      	b.n	8011176 <_dtoa_r+0x886>
 8011388:	9a00      	ldr	r2, [sp, #0]
 801138a:	429a      	cmp	r2, r3
 801138c:	d1a4      	bne.n	80112d8 <_dtoa_r+0x9e8>
 801138e:	f10b 0b01 	add.w	fp, fp, #1
 8011392:	2331      	movs	r3, #49	; 0x31
 8011394:	e778      	b.n	8011288 <_dtoa_r+0x998>
 8011396:	4b15      	ldr	r3, [pc, #84]	; (80113ec <_dtoa_r+0xafc>)
 8011398:	f7ff bb12 	b.w	80109c0 <_dtoa_r+0xd0>
 801139c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801139e:	2b00      	cmp	r3, #0
 80113a0:	f47f aaee 	bne.w	8010980 <_dtoa_r+0x90>
 80113a4:	4b12      	ldr	r3, [pc, #72]	; (80113f0 <_dtoa_r+0xb00>)
 80113a6:	f7ff bb0b 	b.w	80109c0 <_dtoa_r+0xd0>
 80113aa:	f1ba 0f00 	cmp.w	sl, #0
 80113ae:	dc03      	bgt.n	80113b8 <_dtoa_r+0xac8>
 80113b0:	9b07      	ldr	r3, [sp, #28]
 80113b2:	2b02      	cmp	r3, #2
 80113b4:	f73f aec7 	bgt.w	8011146 <_dtoa_r+0x856>
 80113b8:	f8dd 8000 	ldr.w	r8, [sp]
 80113bc:	4621      	mov	r1, r4
 80113be:	4628      	mov	r0, r5
 80113c0:	f7ff fa08 	bl	80107d4 <quorem>
 80113c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80113c8:	f808 3b01 	strb.w	r3, [r8], #1
 80113cc:	9a00      	ldr	r2, [sp, #0]
 80113ce:	eba8 0202 	sub.w	r2, r8, r2
 80113d2:	4592      	cmp	sl, r2
 80113d4:	ddb7      	ble.n	8011346 <_dtoa_r+0xa56>
 80113d6:	4629      	mov	r1, r5
 80113d8:	2300      	movs	r3, #0
 80113da:	220a      	movs	r2, #10
 80113dc:	4630      	mov	r0, r6
 80113de:	f000 f877 	bl	80114d0 <__multadd>
 80113e2:	4605      	mov	r5, r0
 80113e4:	e7ea      	b.n	80113bc <_dtoa_r+0xacc>
 80113e6:	bf00      	nop
 80113e8:	08014323 	.word	0x08014323
 80113ec:	0801427c 	.word	0x0801427c
 80113f0:	080142a0 	.word	0x080142a0

080113f4 <_localeconv_r>:
 80113f4:	4800      	ldr	r0, [pc, #0]	; (80113f8 <_localeconv_r+0x4>)
 80113f6:	4770      	bx	lr
 80113f8:	2400019c 	.word	0x2400019c

080113fc <malloc>:
 80113fc:	4b02      	ldr	r3, [pc, #8]	; (8011408 <malloc+0xc>)
 80113fe:	4601      	mov	r1, r0
 8011400:	6818      	ldr	r0, [r3, #0]
 8011402:	f000 bbe1 	b.w	8011bc8 <_malloc_r>
 8011406:	bf00      	nop
 8011408:	24000048 	.word	0x24000048

0801140c <_Balloc>:
 801140c:	b570      	push	{r4, r5, r6, lr}
 801140e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011410:	4604      	mov	r4, r0
 8011412:	460d      	mov	r5, r1
 8011414:	b976      	cbnz	r6, 8011434 <_Balloc+0x28>
 8011416:	2010      	movs	r0, #16
 8011418:	f7ff fff0 	bl	80113fc <malloc>
 801141c:	4602      	mov	r2, r0
 801141e:	6260      	str	r0, [r4, #36]	; 0x24
 8011420:	b920      	cbnz	r0, 801142c <_Balloc+0x20>
 8011422:	4b18      	ldr	r3, [pc, #96]	; (8011484 <_Balloc+0x78>)
 8011424:	4818      	ldr	r0, [pc, #96]	; (8011488 <_Balloc+0x7c>)
 8011426:	2166      	movs	r1, #102	; 0x66
 8011428:	f000 fc38 	bl	8011c9c <__assert_func>
 801142c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011430:	6006      	str	r6, [r0, #0]
 8011432:	60c6      	str	r6, [r0, #12]
 8011434:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011436:	68f3      	ldr	r3, [r6, #12]
 8011438:	b183      	cbz	r3, 801145c <_Balloc+0x50>
 801143a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801143c:	68db      	ldr	r3, [r3, #12]
 801143e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011442:	b9b8      	cbnz	r0, 8011474 <_Balloc+0x68>
 8011444:	2101      	movs	r1, #1
 8011446:	fa01 f605 	lsl.w	r6, r1, r5
 801144a:	1d72      	adds	r2, r6, #5
 801144c:	0092      	lsls	r2, r2, #2
 801144e:	4620      	mov	r0, r4
 8011450:	f000 fb5a 	bl	8011b08 <_calloc_r>
 8011454:	b160      	cbz	r0, 8011470 <_Balloc+0x64>
 8011456:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801145a:	e00e      	b.n	801147a <_Balloc+0x6e>
 801145c:	2221      	movs	r2, #33	; 0x21
 801145e:	2104      	movs	r1, #4
 8011460:	4620      	mov	r0, r4
 8011462:	f000 fb51 	bl	8011b08 <_calloc_r>
 8011466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011468:	60f0      	str	r0, [r6, #12]
 801146a:	68db      	ldr	r3, [r3, #12]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d1e4      	bne.n	801143a <_Balloc+0x2e>
 8011470:	2000      	movs	r0, #0
 8011472:	bd70      	pop	{r4, r5, r6, pc}
 8011474:	6802      	ldr	r2, [r0, #0]
 8011476:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801147a:	2300      	movs	r3, #0
 801147c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011480:	e7f7      	b.n	8011472 <_Balloc+0x66>
 8011482:	bf00      	nop
 8011484:	080142ad 	.word	0x080142ad
 8011488:	08014334 	.word	0x08014334

0801148c <_Bfree>:
 801148c:	b570      	push	{r4, r5, r6, lr}
 801148e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011490:	4605      	mov	r5, r0
 8011492:	460c      	mov	r4, r1
 8011494:	b976      	cbnz	r6, 80114b4 <_Bfree+0x28>
 8011496:	2010      	movs	r0, #16
 8011498:	f7ff ffb0 	bl	80113fc <malloc>
 801149c:	4602      	mov	r2, r0
 801149e:	6268      	str	r0, [r5, #36]	; 0x24
 80114a0:	b920      	cbnz	r0, 80114ac <_Bfree+0x20>
 80114a2:	4b09      	ldr	r3, [pc, #36]	; (80114c8 <_Bfree+0x3c>)
 80114a4:	4809      	ldr	r0, [pc, #36]	; (80114cc <_Bfree+0x40>)
 80114a6:	218a      	movs	r1, #138	; 0x8a
 80114a8:	f000 fbf8 	bl	8011c9c <__assert_func>
 80114ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80114b0:	6006      	str	r6, [r0, #0]
 80114b2:	60c6      	str	r6, [r0, #12]
 80114b4:	b13c      	cbz	r4, 80114c6 <_Bfree+0x3a>
 80114b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80114b8:	6862      	ldr	r2, [r4, #4]
 80114ba:	68db      	ldr	r3, [r3, #12]
 80114bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80114c0:	6021      	str	r1, [r4, #0]
 80114c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80114c6:	bd70      	pop	{r4, r5, r6, pc}
 80114c8:	080142ad 	.word	0x080142ad
 80114cc:	08014334 	.word	0x08014334

080114d0 <__multadd>:
 80114d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114d4:	690e      	ldr	r6, [r1, #16]
 80114d6:	4607      	mov	r7, r0
 80114d8:	4698      	mov	r8, r3
 80114da:	460c      	mov	r4, r1
 80114dc:	f101 0014 	add.w	r0, r1, #20
 80114e0:	2300      	movs	r3, #0
 80114e2:	6805      	ldr	r5, [r0, #0]
 80114e4:	b2a9      	uxth	r1, r5
 80114e6:	fb02 8101 	mla	r1, r2, r1, r8
 80114ea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80114ee:	0c2d      	lsrs	r5, r5, #16
 80114f0:	fb02 c505 	mla	r5, r2, r5, ip
 80114f4:	b289      	uxth	r1, r1
 80114f6:	3301      	adds	r3, #1
 80114f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80114fc:	429e      	cmp	r6, r3
 80114fe:	f840 1b04 	str.w	r1, [r0], #4
 8011502:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011506:	dcec      	bgt.n	80114e2 <__multadd+0x12>
 8011508:	f1b8 0f00 	cmp.w	r8, #0
 801150c:	d022      	beq.n	8011554 <__multadd+0x84>
 801150e:	68a3      	ldr	r3, [r4, #8]
 8011510:	42b3      	cmp	r3, r6
 8011512:	dc19      	bgt.n	8011548 <__multadd+0x78>
 8011514:	6861      	ldr	r1, [r4, #4]
 8011516:	4638      	mov	r0, r7
 8011518:	3101      	adds	r1, #1
 801151a:	f7ff ff77 	bl	801140c <_Balloc>
 801151e:	4605      	mov	r5, r0
 8011520:	b928      	cbnz	r0, 801152e <__multadd+0x5e>
 8011522:	4602      	mov	r2, r0
 8011524:	4b0d      	ldr	r3, [pc, #52]	; (801155c <__multadd+0x8c>)
 8011526:	480e      	ldr	r0, [pc, #56]	; (8011560 <__multadd+0x90>)
 8011528:	21b5      	movs	r1, #181	; 0xb5
 801152a:	f000 fbb7 	bl	8011c9c <__assert_func>
 801152e:	6922      	ldr	r2, [r4, #16]
 8011530:	3202      	adds	r2, #2
 8011532:	f104 010c 	add.w	r1, r4, #12
 8011536:	0092      	lsls	r2, r2, #2
 8011538:	300c      	adds	r0, #12
 801153a:	f7fe fcf3 	bl	800ff24 <memcpy>
 801153e:	4621      	mov	r1, r4
 8011540:	4638      	mov	r0, r7
 8011542:	f7ff ffa3 	bl	801148c <_Bfree>
 8011546:	462c      	mov	r4, r5
 8011548:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801154c:	3601      	adds	r6, #1
 801154e:	f8c3 8014 	str.w	r8, [r3, #20]
 8011552:	6126      	str	r6, [r4, #16]
 8011554:	4620      	mov	r0, r4
 8011556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801155a:	bf00      	nop
 801155c:	08014323 	.word	0x08014323
 8011560:	08014334 	.word	0x08014334

08011564 <__hi0bits>:
 8011564:	0c03      	lsrs	r3, r0, #16
 8011566:	041b      	lsls	r3, r3, #16
 8011568:	b9d3      	cbnz	r3, 80115a0 <__hi0bits+0x3c>
 801156a:	0400      	lsls	r0, r0, #16
 801156c:	2310      	movs	r3, #16
 801156e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011572:	bf04      	itt	eq
 8011574:	0200      	lsleq	r0, r0, #8
 8011576:	3308      	addeq	r3, #8
 8011578:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801157c:	bf04      	itt	eq
 801157e:	0100      	lsleq	r0, r0, #4
 8011580:	3304      	addeq	r3, #4
 8011582:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011586:	bf04      	itt	eq
 8011588:	0080      	lsleq	r0, r0, #2
 801158a:	3302      	addeq	r3, #2
 801158c:	2800      	cmp	r0, #0
 801158e:	db05      	blt.n	801159c <__hi0bits+0x38>
 8011590:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011594:	f103 0301 	add.w	r3, r3, #1
 8011598:	bf08      	it	eq
 801159a:	2320      	moveq	r3, #32
 801159c:	4618      	mov	r0, r3
 801159e:	4770      	bx	lr
 80115a0:	2300      	movs	r3, #0
 80115a2:	e7e4      	b.n	801156e <__hi0bits+0xa>

080115a4 <__lo0bits>:
 80115a4:	6803      	ldr	r3, [r0, #0]
 80115a6:	f013 0207 	ands.w	r2, r3, #7
 80115aa:	4601      	mov	r1, r0
 80115ac:	d00b      	beq.n	80115c6 <__lo0bits+0x22>
 80115ae:	07da      	lsls	r2, r3, #31
 80115b0:	d424      	bmi.n	80115fc <__lo0bits+0x58>
 80115b2:	0798      	lsls	r0, r3, #30
 80115b4:	bf49      	itett	mi
 80115b6:	085b      	lsrmi	r3, r3, #1
 80115b8:	089b      	lsrpl	r3, r3, #2
 80115ba:	2001      	movmi	r0, #1
 80115bc:	600b      	strmi	r3, [r1, #0]
 80115be:	bf5c      	itt	pl
 80115c0:	600b      	strpl	r3, [r1, #0]
 80115c2:	2002      	movpl	r0, #2
 80115c4:	4770      	bx	lr
 80115c6:	b298      	uxth	r0, r3
 80115c8:	b9b0      	cbnz	r0, 80115f8 <__lo0bits+0x54>
 80115ca:	0c1b      	lsrs	r3, r3, #16
 80115cc:	2010      	movs	r0, #16
 80115ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80115d2:	bf04      	itt	eq
 80115d4:	0a1b      	lsreq	r3, r3, #8
 80115d6:	3008      	addeq	r0, #8
 80115d8:	071a      	lsls	r2, r3, #28
 80115da:	bf04      	itt	eq
 80115dc:	091b      	lsreq	r3, r3, #4
 80115de:	3004      	addeq	r0, #4
 80115e0:	079a      	lsls	r2, r3, #30
 80115e2:	bf04      	itt	eq
 80115e4:	089b      	lsreq	r3, r3, #2
 80115e6:	3002      	addeq	r0, #2
 80115e8:	07da      	lsls	r2, r3, #31
 80115ea:	d403      	bmi.n	80115f4 <__lo0bits+0x50>
 80115ec:	085b      	lsrs	r3, r3, #1
 80115ee:	f100 0001 	add.w	r0, r0, #1
 80115f2:	d005      	beq.n	8011600 <__lo0bits+0x5c>
 80115f4:	600b      	str	r3, [r1, #0]
 80115f6:	4770      	bx	lr
 80115f8:	4610      	mov	r0, r2
 80115fa:	e7e8      	b.n	80115ce <__lo0bits+0x2a>
 80115fc:	2000      	movs	r0, #0
 80115fe:	4770      	bx	lr
 8011600:	2020      	movs	r0, #32
 8011602:	4770      	bx	lr

08011604 <__i2b>:
 8011604:	b510      	push	{r4, lr}
 8011606:	460c      	mov	r4, r1
 8011608:	2101      	movs	r1, #1
 801160a:	f7ff feff 	bl	801140c <_Balloc>
 801160e:	4602      	mov	r2, r0
 8011610:	b928      	cbnz	r0, 801161e <__i2b+0x1a>
 8011612:	4b05      	ldr	r3, [pc, #20]	; (8011628 <__i2b+0x24>)
 8011614:	4805      	ldr	r0, [pc, #20]	; (801162c <__i2b+0x28>)
 8011616:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801161a:	f000 fb3f 	bl	8011c9c <__assert_func>
 801161e:	2301      	movs	r3, #1
 8011620:	6144      	str	r4, [r0, #20]
 8011622:	6103      	str	r3, [r0, #16]
 8011624:	bd10      	pop	{r4, pc}
 8011626:	bf00      	nop
 8011628:	08014323 	.word	0x08014323
 801162c:	08014334 	.word	0x08014334

08011630 <__multiply>:
 8011630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011634:	4614      	mov	r4, r2
 8011636:	690a      	ldr	r2, [r1, #16]
 8011638:	6923      	ldr	r3, [r4, #16]
 801163a:	429a      	cmp	r2, r3
 801163c:	bfb8      	it	lt
 801163e:	460b      	movlt	r3, r1
 8011640:	460d      	mov	r5, r1
 8011642:	bfbc      	itt	lt
 8011644:	4625      	movlt	r5, r4
 8011646:	461c      	movlt	r4, r3
 8011648:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801164c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011650:	68ab      	ldr	r3, [r5, #8]
 8011652:	6869      	ldr	r1, [r5, #4]
 8011654:	eb0a 0709 	add.w	r7, sl, r9
 8011658:	42bb      	cmp	r3, r7
 801165a:	b085      	sub	sp, #20
 801165c:	bfb8      	it	lt
 801165e:	3101      	addlt	r1, #1
 8011660:	f7ff fed4 	bl	801140c <_Balloc>
 8011664:	b930      	cbnz	r0, 8011674 <__multiply+0x44>
 8011666:	4602      	mov	r2, r0
 8011668:	4b42      	ldr	r3, [pc, #264]	; (8011774 <__multiply+0x144>)
 801166a:	4843      	ldr	r0, [pc, #268]	; (8011778 <__multiply+0x148>)
 801166c:	f240 115d 	movw	r1, #349	; 0x15d
 8011670:	f000 fb14 	bl	8011c9c <__assert_func>
 8011674:	f100 0614 	add.w	r6, r0, #20
 8011678:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801167c:	4633      	mov	r3, r6
 801167e:	2200      	movs	r2, #0
 8011680:	4543      	cmp	r3, r8
 8011682:	d31e      	bcc.n	80116c2 <__multiply+0x92>
 8011684:	f105 0c14 	add.w	ip, r5, #20
 8011688:	f104 0314 	add.w	r3, r4, #20
 801168c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011690:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011694:	9202      	str	r2, [sp, #8]
 8011696:	ebac 0205 	sub.w	r2, ip, r5
 801169a:	3a15      	subs	r2, #21
 801169c:	f022 0203 	bic.w	r2, r2, #3
 80116a0:	3204      	adds	r2, #4
 80116a2:	f105 0115 	add.w	r1, r5, #21
 80116a6:	458c      	cmp	ip, r1
 80116a8:	bf38      	it	cc
 80116aa:	2204      	movcc	r2, #4
 80116ac:	9201      	str	r2, [sp, #4]
 80116ae:	9a02      	ldr	r2, [sp, #8]
 80116b0:	9303      	str	r3, [sp, #12]
 80116b2:	429a      	cmp	r2, r3
 80116b4:	d808      	bhi.n	80116c8 <__multiply+0x98>
 80116b6:	2f00      	cmp	r7, #0
 80116b8:	dc55      	bgt.n	8011766 <__multiply+0x136>
 80116ba:	6107      	str	r7, [r0, #16]
 80116bc:	b005      	add	sp, #20
 80116be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116c2:	f843 2b04 	str.w	r2, [r3], #4
 80116c6:	e7db      	b.n	8011680 <__multiply+0x50>
 80116c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80116cc:	f1ba 0f00 	cmp.w	sl, #0
 80116d0:	d020      	beq.n	8011714 <__multiply+0xe4>
 80116d2:	f105 0e14 	add.w	lr, r5, #20
 80116d6:	46b1      	mov	r9, r6
 80116d8:	2200      	movs	r2, #0
 80116da:	f85e 4b04 	ldr.w	r4, [lr], #4
 80116de:	f8d9 b000 	ldr.w	fp, [r9]
 80116e2:	b2a1      	uxth	r1, r4
 80116e4:	fa1f fb8b 	uxth.w	fp, fp
 80116e8:	fb0a b101 	mla	r1, sl, r1, fp
 80116ec:	4411      	add	r1, r2
 80116ee:	f8d9 2000 	ldr.w	r2, [r9]
 80116f2:	0c24      	lsrs	r4, r4, #16
 80116f4:	0c12      	lsrs	r2, r2, #16
 80116f6:	fb0a 2404 	mla	r4, sl, r4, r2
 80116fa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80116fe:	b289      	uxth	r1, r1
 8011700:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011704:	45f4      	cmp	ip, lr
 8011706:	f849 1b04 	str.w	r1, [r9], #4
 801170a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801170e:	d8e4      	bhi.n	80116da <__multiply+0xaa>
 8011710:	9901      	ldr	r1, [sp, #4]
 8011712:	5072      	str	r2, [r6, r1]
 8011714:	9a03      	ldr	r2, [sp, #12]
 8011716:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801171a:	3304      	adds	r3, #4
 801171c:	f1b9 0f00 	cmp.w	r9, #0
 8011720:	d01f      	beq.n	8011762 <__multiply+0x132>
 8011722:	6834      	ldr	r4, [r6, #0]
 8011724:	f105 0114 	add.w	r1, r5, #20
 8011728:	46b6      	mov	lr, r6
 801172a:	f04f 0a00 	mov.w	sl, #0
 801172e:	880a      	ldrh	r2, [r1, #0]
 8011730:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011734:	fb09 b202 	mla	r2, r9, r2, fp
 8011738:	4492      	add	sl, r2
 801173a:	b2a4      	uxth	r4, r4
 801173c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011740:	f84e 4b04 	str.w	r4, [lr], #4
 8011744:	f851 4b04 	ldr.w	r4, [r1], #4
 8011748:	f8be 2000 	ldrh.w	r2, [lr]
 801174c:	0c24      	lsrs	r4, r4, #16
 801174e:	fb09 2404 	mla	r4, r9, r4, r2
 8011752:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011756:	458c      	cmp	ip, r1
 8011758:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801175c:	d8e7      	bhi.n	801172e <__multiply+0xfe>
 801175e:	9a01      	ldr	r2, [sp, #4]
 8011760:	50b4      	str	r4, [r6, r2]
 8011762:	3604      	adds	r6, #4
 8011764:	e7a3      	b.n	80116ae <__multiply+0x7e>
 8011766:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801176a:	2b00      	cmp	r3, #0
 801176c:	d1a5      	bne.n	80116ba <__multiply+0x8a>
 801176e:	3f01      	subs	r7, #1
 8011770:	e7a1      	b.n	80116b6 <__multiply+0x86>
 8011772:	bf00      	nop
 8011774:	08014323 	.word	0x08014323
 8011778:	08014334 	.word	0x08014334

0801177c <__pow5mult>:
 801177c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011780:	4615      	mov	r5, r2
 8011782:	f012 0203 	ands.w	r2, r2, #3
 8011786:	4606      	mov	r6, r0
 8011788:	460f      	mov	r7, r1
 801178a:	d007      	beq.n	801179c <__pow5mult+0x20>
 801178c:	4c25      	ldr	r4, [pc, #148]	; (8011824 <__pow5mult+0xa8>)
 801178e:	3a01      	subs	r2, #1
 8011790:	2300      	movs	r3, #0
 8011792:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011796:	f7ff fe9b 	bl	80114d0 <__multadd>
 801179a:	4607      	mov	r7, r0
 801179c:	10ad      	asrs	r5, r5, #2
 801179e:	d03d      	beq.n	801181c <__pow5mult+0xa0>
 80117a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80117a2:	b97c      	cbnz	r4, 80117c4 <__pow5mult+0x48>
 80117a4:	2010      	movs	r0, #16
 80117a6:	f7ff fe29 	bl	80113fc <malloc>
 80117aa:	4602      	mov	r2, r0
 80117ac:	6270      	str	r0, [r6, #36]	; 0x24
 80117ae:	b928      	cbnz	r0, 80117bc <__pow5mult+0x40>
 80117b0:	4b1d      	ldr	r3, [pc, #116]	; (8011828 <__pow5mult+0xac>)
 80117b2:	481e      	ldr	r0, [pc, #120]	; (801182c <__pow5mult+0xb0>)
 80117b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80117b8:	f000 fa70 	bl	8011c9c <__assert_func>
 80117bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80117c0:	6004      	str	r4, [r0, #0]
 80117c2:	60c4      	str	r4, [r0, #12]
 80117c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80117c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80117cc:	b94c      	cbnz	r4, 80117e2 <__pow5mult+0x66>
 80117ce:	f240 2171 	movw	r1, #625	; 0x271
 80117d2:	4630      	mov	r0, r6
 80117d4:	f7ff ff16 	bl	8011604 <__i2b>
 80117d8:	2300      	movs	r3, #0
 80117da:	f8c8 0008 	str.w	r0, [r8, #8]
 80117de:	4604      	mov	r4, r0
 80117e0:	6003      	str	r3, [r0, #0]
 80117e2:	f04f 0900 	mov.w	r9, #0
 80117e6:	07eb      	lsls	r3, r5, #31
 80117e8:	d50a      	bpl.n	8011800 <__pow5mult+0x84>
 80117ea:	4639      	mov	r1, r7
 80117ec:	4622      	mov	r2, r4
 80117ee:	4630      	mov	r0, r6
 80117f0:	f7ff ff1e 	bl	8011630 <__multiply>
 80117f4:	4639      	mov	r1, r7
 80117f6:	4680      	mov	r8, r0
 80117f8:	4630      	mov	r0, r6
 80117fa:	f7ff fe47 	bl	801148c <_Bfree>
 80117fe:	4647      	mov	r7, r8
 8011800:	106d      	asrs	r5, r5, #1
 8011802:	d00b      	beq.n	801181c <__pow5mult+0xa0>
 8011804:	6820      	ldr	r0, [r4, #0]
 8011806:	b938      	cbnz	r0, 8011818 <__pow5mult+0x9c>
 8011808:	4622      	mov	r2, r4
 801180a:	4621      	mov	r1, r4
 801180c:	4630      	mov	r0, r6
 801180e:	f7ff ff0f 	bl	8011630 <__multiply>
 8011812:	6020      	str	r0, [r4, #0]
 8011814:	f8c0 9000 	str.w	r9, [r0]
 8011818:	4604      	mov	r4, r0
 801181a:	e7e4      	b.n	80117e6 <__pow5mult+0x6a>
 801181c:	4638      	mov	r0, r7
 801181e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011822:	bf00      	nop
 8011824:	08014488 	.word	0x08014488
 8011828:	080142ad 	.word	0x080142ad
 801182c:	08014334 	.word	0x08014334

08011830 <__lshift>:
 8011830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011834:	460c      	mov	r4, r1
 8011836:	6849      	ldr	r1, [r1, #4]
 8011838:	6923      	ldr	r3, [r4, #16]
 801183a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801183e:	68a3      	ldr	r3, [r4, #8]
 8011840:	4607      	mov	r7, r0
 8011842:	4691      	mov	r9, r2
 8011844:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011848:	f108 0601 	add.w	r6, r8, #1
 801184c:	42b3      	cmp	r3, r6
 801184e:	db0b      	blt.n	8011868 <__lshift+0x38>
 8011850:	4638      	mov	r0, r7
 8011852:	f7ff fddb 	bl	801140c <_Balloc>
 8011856:	4605      	mov	r5, r0
 8011858:	b948      	cbnz	r0, 801186e <__lshift+0x3e>
 801185a:	4602      	mov	r2, r0
 801185c:	4b28      	ldr	r3, [pc, #160]	; (8011900 <__lshift+0xd0>)
 801185e:	4829      	ldr	r0, [pc, #164]	; (8011904 <__lshift+0xd4>)
 8011860:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011864:	f000 fa1a 	bl	8011c9c <__assert_func>
 8011868:	3101      	adds	r1, #1
 801186a:	005b      	lsls	r3, r3, #1
 801186c:	e7ee      	b.n	801184c <__lshift+0x1c>
 801186e:	2300      	movs	r3, #0
 8011870:	f100 0114 	add.w	r1, r0, #20
 8011874:	f100 0210 	add.w	r2, r0, #16
 8011878:	4618      	mov	r0, r3
 801187a:	4553      	cmp	r3, sl
 801187c:	db33      	blt.n	80118e6 <__lshift+0xb6>
 801187e:	6920      	ldr	r0, [r4, #16]
 8011880:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011884:	f104 0314 	add.w	r3, r4, #20
 8011888:	f019 091f 	ands.w	r9, r9, #31
 801188c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011890:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011894:	d02b      	beq.n	80118ee <__lshift+0xbe>
 8011896:	f1c9 0e20 	rsb	lr, r9, #32
 801189a:	468a      	mov	sl, r1
 801189c:	2200      	movs	r2, #0
 801189e:	6818      	ldr	r0, [r3, #0]
 80118a0:	fa00 f009 	lsl.w	r0, r0, r9
 80118a4:	4302      	orrs	r2, r0
 80118a6:	f84a 2b04 	str.w	r2, [sl], #4
 80118aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80118ae:	459c      	cmp	ip, r3
 80118b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80118b4:	d8f3      	bhi.n	801189e <__lshift+0x6e>
 80118b6:	ebac 0304 	sub.w	r3, ip, r4
 80118ba:	3b15      	subs	r3, #21
 80118bc:	f023 0303 	bic.w	r3, r3, #3
 80118c0:	3304      	adds	r3, #4
 80118c2:	f104 0015 	add.w	r0, r4, #21
 80118c6:	4584      	cmp	ip, r0
 80118c8:	bf38      	it	cc
 80118ca:	2304      	movcc	r3, #4
 80118cc:	50ca      	str	r2, [r1, r3]
 80118ce:	b10a      	cbz	r2, 80118d4 <__lshift+0xa4>
 80118d0:	f108 0602 	add.w	r6, r8, #2
 80118d4:	3e01      	subs	r6, #1
 80118d6:	4638      	mov	r0, r7
 80118d8:	612e      	str	r6, [r5, #16]
 80118da:	4621      	mov	r1, r4
 80118dc:	f7ff fdd6 	bl	801148c <_Bfree>
 80118e0:	4628      	mov	r0, r5
 80118e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80118ea:	3301      	adds	r3, #1
 80118ec:	e7c5      	b.n	801187a <__lshift+0x4a>
 80118ee:	3904      	subs	r1, #4
 80118f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80118f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80118f8:	459c      	cmp	ip, r3
 80118fa:	d8f9      	bhi.n	80118f0 <__lshift+0xc0>
 80118fc:	e7ea      	b.n	80118d4 <__lshift+0xa4>
 80118fe:	bf00      	nop
 8011900:	08014323 	.word	0x08014323
 8011904:	08014334 	.word	0x08014334

08011908 <__mcmp>:
 8011908:	b530      	push	{r4, r5, lr}
 801190a:	6902      	ldr	r2, [r0, #16]
 801190c:	690c      	ldr	r4, [r1, #16]
 801190e:	1b12      	subs	r2, r2, r4
 8011910:	d10e      	bne.n	8011930 <__mcmp+0x28>
 8011912:	f100 0314 	add.w	r3, r0, #20
 8011916:	3114      	adds	r1, #20
 8011918:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801191c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011920:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011924:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011928:	42a5      	cmp	r5, r4
 801192a:	d003      	beq.n	8011934 <__mcmp+0x2c>
 801192c:	d305      	bcc.n	801193a <__mcmp+0x32>
 801192e:	2201      	movs	r2, #1
 8011930:	4610      	mov	r0, r2
 8011932:	bd30      	pop	{r4, r5, pc}
 8011934:	4283      	cmp	r3, r0
 8011936:	d3f3      	bcc.n	8011920 <__mcmp+0x18>
 8011938:	e7fa      	b.n	8011930 <__mcmp+0x28>
 801193a:	f04f 32ff 	mov.w	r2, #4294967295
 801193e:	e7f7      	b.n	8011930 <__mcmp+0x28>

08011940 <__mdiff>:
 8011940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011944:	460c      	mov	r4, r1
 8011946:	4606      	mov	r6, r0
 8011948:	4611      	mov	r1, r2
 801194a:	4620      	mov	r0, r4
 801194c:	4617      	mov	r7, r2
 801194e:	f7ff ffdb 	bl	8011908 <__mcmp>
 8011952:	1e05      	subs	r5, r0, #0
 8011954:	d110      	bne.n	8011978 <__mdiff+0x38>
 8011956:	4629      	mov	r1, r5
 8011958:	4630      	mov	r0, r6
 801195a:	f7ff fd57 	bl	801140c <_Balloc>
 801195e:	b930      	cbnz	r0, 801196e <__mdiff+0x2e>
 8011960:	4b39      	ldr	r3, [pc, #228]	; (8011a48 <__mdiff+0x108>)
 8011962:	4602      	mov	r2, r0
 8011964:	f240 2132 	movw	r1, #562	; 0x232
 8011968:	4838      	ldr	r0, [pc, #224]	; (8011a4c <__mdiff+0x10c>)
 801196a:	f000 f997 	bl	8011c9c <__assert_func>
 801196e:	2301      	movs	r3, #1
 8011970:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011974:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011978:	bfa4      	itt	ge
 801197a:	463b      	movge	r3, r7
 801197c:	4627      	movge	r7, r4
 801197e:	4630      	mov	r0, r6
 8011980:	6879      	ldr	r1, [r7, #4]
 8011982:	bfa6      	itte	ge
 8011984:	461c      	movge	r4, r3
 8011986:	2500      	movge	r5, #0
 8011988:	2501      	movlt	r5, #1
 801198a:	f7ff fd3f 	bl	801140c <_Balloc>
 801198e:	b920      	cbnz	r0, 801199a <__mdiff+0x5a>
 8011990:	4b2d      	ldr	r3, [pc, #180]	; (8011a48 <__mdiff+0x108>)
 8011992:	4602      	mov	r2, r0
 8011994:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011998:	e7e6      	b.n	8011968 <__mdiff+0x28>
 801199a:	693e      	ldr	r6, [r7, #16]
 801199c:	60c5      	str	r5, [r0, #12]
 801199e:	6925      	ldr	r5, [r4, #16]
 80119a0:	f107 0114 	add.w	r1, r7, #20
 80119a4:	f104 0914 	add.w	r9, r4, #20
 80119a8:	f100 0e14 	add.w	lr, r0, #20
 80119ac:	f107 0210 	add.w	r2, r7, #16
 80119b0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80119b4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80119b8:	46f2      	mov	sl, lr
 80119ba:	2700      	movs	r7, #0
 80119bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80119c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80119c4:	fa1f f883 	uxth.w	r8, r3
 80119c8:	fa17 f78b 	uxtah	r7, r7, fp
 80119cc:	0c1b      	lsrs	r3, r3, #16
 80119ce:	eba7 0808 	sub.w	r8, r7, r8
 80119d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80119d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80119da:	fa1f f888 	uxth.w	r8, r8
 80119de:	141f      	asrs	r7, r3, #16
 80119e0:	454d      	cmp	r5, r9
 80119e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80119e6:	f84a 3b04 	str.w	r3, [sl], #4
 80119ea:	d8e7      	bhi.n	80119bc <__mdiff+0x7c>
 80119ec:	1b2b      	subs	r3, r5, r4
 80119ee:	3b15      	subs	r3, #21
 80119f0:	f023 0303 	bic.w	r3, r3, #3
 80119f4:	3304      	adds	r3, #4
 80119f6:	3415      	adds	r4, #21
 80119f8:	42a5      	cmp	r5, r4
 80119fa:	bf38      	it	cc
 80119fc:	2304      	movcc	r3, #4
 80119fe:	4419      	add	r1, r3
 8011a00:	4473      	add	r3, lr
 8011a02:	469e      	mov	lr, r3
 8011a04:	460d      	mov	r5, r1
 8011a06:	4565      	cmp	r5, ip
 8011a08:	d30e      	bcc.n	8011a28 <__mdiff+0xe8>
 8011a0a:	f10c 0203 	add.w	r2, ip, #3
 8011a0e:	1a52      	subs	r2, r2, r1
 8011a10:	f022 0203 	bic.w	r2, r2, #3
 8011a14:	3903      	subs	r1, #3
 8011a16:	458c      	cmp	ip, r1
 8011a18:	bf38      	it	cc
 8011a1a:	2200      	movcc	r2, #0
 8011a1c:	441a      	add	r2, r3
 8011a1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011a22:	b17b      	cbz	r3, 8011a44 <__mdiff+0x104>
 8011a24:	6106      	str	r6, [r0, #16]
 8011a26:	e7a5      	b.n	8011974 <__mdiff+0x34>
 8011a28:	f855 8b04 	ldr.w	r8, [r5], #4
 8011a2c:	fa17 f488 	uxtah	r4, r7, r8
 8011a30:	1422      	asrs	r2, r4, #16
 8011a32:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011a36:	b2a4      	uxth	r4, r4
 8011a38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011a3c:	f84e 4b04 	str.w	r4, [lr], #4
 8011a40:	1417      	asrs	r7, r2, #16
 8011a42:	e7e0      	b.n	8011a06 <__mdiff+0xc6>
 8011a44:	3e01      	subs	r6, #1
 8011a46:	e7ea      	b.n	8011a1e <__mdiff+0xde>
 8011a48:	08014323 	.word	0x08014323
 8011a4c:	08014334 	.word	0x08014334

08011a50 <__d2b>:
 8011a50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011a54:	4689      	mov	r9, r1
 8011a56:	2101      	movs	r1, #1
 8011a58:	ec57 6b10 	vmov	r6, r7, d0
 8011a5c:	4690      	mov	r8, r2
 8011a5e:	f7ff fcd5 	bl	801140c <_Balloc>
 8011a62:	4604      	mov	r4, r0
 8011a64:	b930      	cbnz	r0, 8011a74 <__d2b+0x24>
 8011a66:	4602      	mov	r2, r0
 8011a68:	4b25      	ldr	r3, [pc, #148]	; (8011b00 <__d2b+0xb0>)
 8011a6a:	4826      	ldr	r0, [pc, #152]	; (8011b04 <__d2b+0xb4>)
 8011a6c:	f240 310a 	movw	r1, #778	; 0x30a
 8011a70:	f000 f914 	bl	8011c9c <__assert_func>
 8011a74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011a78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011a7c:	bb35      	cbnz	r5, 8011acc <__d2b+0x7c>
 8011a7e:	2e00      	cmp	r6, #0
 8011a80:	9301      	str	r3, [sp, #4]
 8011a82:	d028      	beq.n	8011ad6 <__d2b+0x86>
 8011a84:	4668      	mov	r0, sp
 8011a86:	9600      	str	r6, [sp, #0]
 8011a88:	f7ff fd8c 	bl	80115a4 <__lo0bits>
 8011a8c:	9900      	ldr	r1, [sp, #0]
 8011a8e:	b300      	cbz	r0, 8011ad2 <__d2b+0x82>
 8011a90:	9a01      	ldr	r2, [sp, #4]
 8011a92:	f1c0 0320 	rsb	r3, r0, #32
 8011a96:	fa02 f303 	lsl.w	r3, r2, r3
 8011a9a:	430b      	orrs	r3, r1
 8011a9c:	40c2      	lsrs	r2, r0
 8011a9e:	6163      	str	r3, [r4, #20]
 8011aa0:	9201      	str	r2, [sp, #4]
 8011aa2:	9b01      	ldr	r3, [sp, #4]
 8011aa4:	61a3      	str	r3, [r4, #24]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	bf14      	ite	ne
 8011aaa:	2202      	movne	r2, #2
 8011aac:	2201      	moveq	r2, #1
 8011aae:	6122      	str	r2, [r4, #16]
 8011ab0:	b1d5      	cbz	r5, 8011ae8 <__d2b+0x98>
 8011ab2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011ab6:	4405      	add	r5, r0
 8011ab8:	f8c9 5000 	str.w	r5, [r9]
 8011abc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011ac0:	f8c8 0000 	str.w	r0, [r8]
 8011ac4:	4620      	mov	r0, r4
 8011ac6:	b003      	add	sp, #12
 8011ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011acc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011ad0:	e7d5      	b.n	8011a7e <__d2b+0x2e>
 8011ad2:	6161      	str	r1, [r4, #20]
 8011ad4:	e7e5      	b.n	8011aa2 <__d2b+0x52>
 8011ad6:	a801      	add	r0, sp, #4
 8011ad8:	f7ff fd64 	bl	80115a4 <__lo0bits>
 8011adc:	9b01      	ldr	r3, [sp, #4]
 8011ade:	6163      	str	r3, [r4, #20]
 8011ae0:	2201      	movs	r2, #1
 8011ae2:	6122      	str	r2, [r4, #16]
 8011ae4:	3020      	adds	r0, #32
 8011ae6:	e7e3      	b.n	8011ab0 <__d2b+0x60>
 8011ae8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011aec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011af0:	f8c9 0000 	str.w	r0, [r9]
 8011af4:	6918      	ldr	r0, [r3, #16]
 8011af6:	f7ff fd35 	bl	8011564 <__hi0bits>
 8011afa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011afe:	e7df      	b.n	8011ac0 <__d2b+0x70>
 8011b00:	08014323 	.word	0x08014323
 8011b04:	08014334 	.word	0x08014334

08011b08 <_calloc_r>:
 8011b08:	b513      	push	{r0, r1, r4, lr}
 8011b0a:	434a      	muls	r2, r1
 8011b0c:	4611      	mov	r1, r2
 8011b0e:	9201      	str	r2, [sp, #4]
 8011b10:	f000 f85a 	bl	8011bc8 <_malloc_r>
 8011b14:	4604      	mov	r4, r0
 8011b16:	b118      	cbz	r0, 8011b20 <_calloc_r+0x18>
 8011b18:	9a01      	ldr	r2, [sp, #4]
 8011b1a:	2100      	movs	r1, #0
 8011b1c:	f7fe fa10 	bl	800ff40 <memset>
 8011b20:	4620      	mov	r0, r4
 8011b22:	b002      	add	sp, #8
 8011b24:	bd10      	pop	{r4, pc}
	...

08011b28 <_free_r>:
 8011b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011b2a:	2900      	cmp	r1, #0
 8011b2c:	d048      	beq.n	8011bc0 <_free_r+0x98>
 8011b2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b32:	9001      	str	r0, [sp, #4]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	f1a1 0404 	sub.w	r4, r1, #4
 8011b3a:	bfb8      	it	lt
 8011b3c:	18e4      	addlt	r4, r4, r3
 8011b3e:	f000 f8ef 	bl	8011d20 <__malloc_lock>
 8011b42:	4a20      	ldr	r2, [pc, #128]	; (8011bc4 <_free_r+0x9c>)
 8011b44:	9801      	ldr	r0, [sp, #4]
 8011b46:	6813      	ldr	r3, [r2, #0]
 8011b48:	4615      	mov	r5, r2
 8011b4a:	b933      	cbnz	r3, 8011b5a <_free_r+0x32>
 8011b4c:	6063      	str	r3, [r4, #4]
 8011b4e:	6014      	str	r4, [r2, #0]
 8011b50:	b003      	add	sp, #12
 8011b52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011b56:	f000 b8e9 	b.w	8011d2c <__malloc_unlock>
 8011b5a:	42a3      	cmp	r3, r4
 8011b5c:	d90b      	bls.n	8011b76 <_free_r+0x4e>
 8011b5e:	6821      	ldr	r1, [r4, #0]
 8011b60:	1862      	adds	r2, r4, r1
 8011b62:	4293      	cmp	r3, r2
 8011b64:	bf04      	itt	eq
 8011b66:	681a      	ldreq	r2, [r3, #0]
 8011b68:	685b      	ldreq	r3, [r3, #4]
 8011b6a:	6063      	str	r3, [r4, #4]
 8011b6c:	bf04      	itt	eq
 8011b6e:	1852      	addeq	r2, r2, r1
 8011b70:	6022      	streq	r2, [r4, #0]
 8011b72:	602c      	str	r4, [r5, #0]
 8011b74:	e7ec      	b.n	8011b50 <_free_r+0x28>
 8011b76:	461a      	mov	r2, r3
 8011b78:	685b      	ldr	r3, [r3, #4]
 8011b7a:	b10b      	cbz	r3, 8011b80 <_free_r+0x58>
 8011b7c:	42a3      	cmp	r3, r4
 8011b7e:	d9fa      	bls.n	8011b76 <_free_r+0x4e>
 8011b80:	6811      	ldr	r1, [r2, #0]
 8011b82:	1855      	adds	r5, r2, r1
 8011b84:	42a5      	cmp	r5, r4
 8011b86:	d10b      	bne.n	8011ba0 <_free_r+0x78>
 8011b88:	6824      	ldr	r4, [r4, #0]
 8011b8a:	4421      	add	r1, r4
 8011b8c:	1854      	adds	r4, r2, r1
 8011b8e:	42a3      	cmp	r3, r4
 8011b90:	6011      	str	r1, [r2, #0]
 8011b92:	d1dd      	bne.n	8011b50 <_free_r+0x28>
 8011b94:	681c      	ldr	r4, [r3, #0]
 8011b96:	685b      	ldr	r3, [r3, #4]
 8011b98:	6053      	str	r3, [r2, #4]
 8011b9a:	4421      	add	r1, r4
 8011b9c:	6011      	str	r1, [r2, #0]
 8011b9e:	e7d7      	b.n	8011b50 <_free_r+0x28>
 8011ba0:	d902      	bls.n	8011ba8 <_free_r+0x80>
 8011ba2:	230c      	movs	r3, #12
 8011ba4:	6003      	str	r3, [r0, #0]
 8011ba6:	e7d3      	b.n	8011b50 <_free_r+0x28>
 8011ba8:	6825      	ldr	r5, [r4, #0]
 8011baa:	1961      	adds	r1, r4, r5
 8011bac:	428b      	cmp	r3, r1
 8011bae:	bf04      	itt	eq
 8011bb0:	6819      	ldreq	r1, [r3, #0]
 8011bb2:	685b      	ldreq	r3, [r3, #4]
 8011bb4:	6063      	str	r3, [r4, #4]
 8011bb6:	bf04      	itt	eq
 8011bb8:	1949      	addeq	r1, r1, r5
 8011bba:	6021      	streq	r1, [r4, #0]
 8011bbc:	6054      	str	r4, [r2, #4]
 8011bbe:	e7c7      	b.n	8011b50 <_free_r+0x28>
 8011bc0:	b003      	add	sp, #12
 8011bc2:	bd30      	pop	{r4, r5, pc}
 8011bc4:	240007d0 	.word	0x240007d0

08011bc8 <_malloc_r>:
 8011bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bca:	1ccd      	adds	r5, r1, #3
 8011bcc:	f025 0503 	bic.w	r5, r5, #3
 8011bd0:	3508      	adds	r5, #8
 8011bd2:	2d0c      	cmp	r5, #12
 8011bd4:	bf38      	it	cc
 8011bd6:	250c      	movcc	r5, #12
 8011bd8:	2d00      	cmp	r5, #0
 8011bda:	4606      	mov	r6, r0
 8011bdc:	db01      	blt.n	8011be2 <_malloc_r+0x1a>
 8011bde:	42a9      	cmp	r1, r5
 8011be0:	d903      	bls.n	8011bea <_malloc_r+0x22>
 8011be2:	230c      	movs	r3, #12
 8011be4:	6033      	str	r3, [r6, #0]
 8011be6:	2000      	movs	r0, #0
 8011be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bea:	f000 f899 	bl	8011d20 <__malloc_lock>
 8011bee:	4921      	ldr	r1, [pc, #132]	; (8011c74 <_malloc_r+0xac>)
 8011bf0:	680a      	ldr	r2, [r1, #0]
 8011bf2:	4614      	mov	r4, r2
 8011bf4:	b99c      	cbnz	r4, 8011c1e <_malloc_r+0x56>
 8011bf6:	4f20      	ldr	r7, [pc, #128]	; (8011c78 <_malloc_r+0xb0>)
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	b923      	cbnz	r3, 8011c06 <_malloc_r+0x3e>
 8011bfc:	4621      	mov	r1, r4
 8011bfe:	4630      	mov	r0, r6
 8011c00:	f000 f83c 	bl	8011c7c <_sbrk_r>
 8011c04:	6038      	str	r0, [r7, #0]
 8011c06:	4629      	mov	r1, r5
 8011c08:	4630      	mov	r0, r6
 8011c0a:	f000 f837 	bl	8011c7c <_sbrk_r>
 8011c0e:	1c43      	adds	r3, r0, #1
 8011c10:	d123      	bne.n	8011c5a <_malloc_r+0x92>
 8011c12:	230c      	movs	r3, #12
 8011c14:	6033      	str	r3, [r6, #0]
 8011c16:	4630      	mov	r0, r6
 8011c18:	f000 f888 	bl	8011d2c <__malloc_unlock>
 8011c1c:	e7e3      	b.n	8011be6 <_malloc_r+0x1e>
 8011c1e:	6823      	ldr	r3, [r4, #0]
 8011c20:	1b5b      	subs	r3, r3, r5
 8011c22:	d417      	bmi.n	8011c54 <_malloc_r+0x8c>
 8011c24:	2b0b      	cmp	r3, #11
 8011c26:	d903      	bls.n	8011c30 <_malloc_r+0x68>
 8011c28:	6023      	str	r3, [r4, #0]
 8011c2a:	441c      	add	r4, r3
 8011c2c:	6025      	str	r5, [r4, #0]
 8011c2e:	e004      	b.n	8011c3a <_malloc_r+0x72>
 8011c30:	6863      	ldr	r3, [r4, #4]
 8011c32:	42a2      	cmp	r2, r4
 8011c34:	bf0c      	ite	eq
 8011c36:	600b      	streq	r3, [r1, #0]
 8011c38:	6053      	strne	r3, [r2, #4]
 8011c3a:	4630      	mov	r0, r6
 8011c3c:	f000 f876 	bl	8011d2c <__malloc_unlock>
 8011c40:	f104 000b 	add.w	r0, r4, #11
 8011c44:	1d23      	adds	r3, r4, #4
 8011c46:	f020 0007 	bic.w	r0, r0, #7
 8011c4a:	1ac2      	subs	r2, r0, r3
 8011c4c:	d0cc      	beq.n	8011be8 <_malloc_r+0x20>
 8011c4e:	1a1b      	subs	r3, r3, r0
 8011c50:	50a3      	str	r3, [r4, r2]
 8011c52:	e7c9      	b.n	8011be8 <_malloc_r+0x20>
 8011c54:	4622      	mov	r2, r4
 8011c56:	6864      	ldr	r4, [r4, #4]
 8011c58:	e7cc      	b.n	8011bf4 <_malloc_r+0x2c>
 8011c5a:	1cc4      	adds	r4, r0, #3
 8011c5c:	f024 0403 	bic.w	r4, r4, #3
 8011c60:	42a0      	cmp	r0, r4
 8011c62:	d0e3      	beq.n	8011c2c <_malloc_r+0x64>
 8011c64:	1a21      	subs	r1, r4, r0
 8011c66:	4630      	mov	r0, r6
 8011c68:	f000 f808 	bl	8011c7c <_sbrk_r>
 8011c6c:	3001      	adds	r0, #1
 8011c6e:	d1dd      	bne.n	8011c2c <_malloc_r+0x64>
 8011c70:	e7cf      	b.n	8011c12 <_malloc_r+0x4a>
 8011c72:	bf00      	nop
 8011c74:	240007d0 	.word	0x240007d0
 8011c78:	240007d4 	.word	0x240007d4

08011c7c <_sbrk_r>:
 8011c7c:	b538      	push	{r3, r4, r5, lr}
 8011c7e:	4d06      	ldr	r5, [pc, #24]	; (8011c98 <_sbrk_r+0x1c>)
 8011c80:	2300      	movs	r3, #0
 8011c82:	4604      	mov	r4, r0
 8011c84:	4608      	mov	r0, r1
 8011c86:	602b      	str	r3, [r5, #0]
 8011c88:	f7f2 fb64 	bl	8004354 <_sbrk>
 8011c8c:	1c43      	adds	r3, r0, #1
 8011c8e:	d102      	bne.n	8011c96 <_sbrk_r+0x1a>
 8011c90:	682b      	ldr	r3, [r5, #0]
 8011c92:	b103      	cbz	r3, 8011c96 <_sbrk_r+0x1a>
 8011c94:	6023      	str	r3, [r4, #0]
 8011c96:	bd38      	pop	{r3, r4, r5, pc}
 8011c98:	24000fd4 	.word	0x24000fd4

08011c9c <__assert_func>:
 8011c9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011c9e:	4614      	mov	r4, r2
 8011ca0:	461a      	mov	r2, r3
 8011ca2:	4b09      	ldr	r3, [pc, #36]	; (8011cc8 <__assert_func+0x2c>)
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	4605      	mov	r5, r0
 8011ca8:	68d8      	ldr	r0, [r3, #12]
 8011caa:	b14c      	cbz	r4, 8011cc0 <__assert_func+0x24>
 8011cac:	4b07      	ldr	r3, [pc, #28]	; (8011ccc <__assert_func+0x30>)
 8011cae:	9100      	str	r1, [sp, #0]
 8011cb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011cb4:	4906      	ldr	r1, [pc, #24]	; (8011cd0 <__assert_func+0x34>)
 8011cb6:	462b      	mov	r3, r5
 8011cb8:	f000 f80e 	bl	8011cd8 <fiprintf>
 8011cbc:	f000 fa64 	bl	8012188 <abort>
 8011cc0:	4b04      	ldr	r3, [pc, #16]	; (8011cd4 <__assert_func+0x38>)
 8011cc2:	461c      	mov	r4, r3
 8011cc4:	e7f3      	b.n	8011cae <__assert_func+0x12>
 8011cc6:	bf00      	nop
 8011cc8:	24000048 	.word	0x24000048
 8011ccc:	08014494 	.word	0x08014494
 8011cd0:	080144a1 	.word	0x080144a1
 8011cd4:	080144cf 	.word	0x080144cf

08011cd8 <fiprintf>:
 8011cd8:	b40e      	push	{r1, r2, r3}
 8011cda:	b503      	push	{r0, r1, lr}
 8011cdc:	4601      	mov	r1, r0
 8011cde:	ab03      	add	r3, sp, #12
 8011ce0:	4805      	ldr	r0, [pc, #20]	; (8011cf8 <fiprintf+0x20>)
 8011ce2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ce6:	6800      	ldr	r0, [r0, #0]
 8011ce8:	9301      	str	r3, [sp, #4]
 8011cea:	f000 f84f 	bl	8011d8c <_vfiprintf_r>
 8011cee:	b002      	add	sp, #8
 8011cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011cf4:	b003      	add	sp, #12
 8011cf6:	4770      	bx	lr
 8011cf8:	24000048 	.word	0x24000048

08011cfc <__ascii_mbtowc>:
 8011cfc:	b082      	sub	sp, #8
 8011cfe:	b901      	cbnz	r1, 8011d02 <__ascii_mbtowc+0x6>
 8011d00:	a901      	add	r1, sp, #4
 8011d02:	b142      	cbz	r2, 8011d16 <__ascii_mbtowc+0x1a>
 8011d04:	b14b      	cbz	r3, 8011d1a <__ascii_mbtowc+0x1e>
 8011d06:	7813      	ldrb	r3, [r2, #0]
 8011d08:	600b      	str	r3, [r1, #0]
 8011d0a:	7812      	ldrb	r2, [r2, #0]
 8011d0c:	1e10      	subs	r0, r2, #0
 8011d0e:	bf18      	it	ne
 8011d10:	2001      	movne	r0, #1
 8011d12:	b002      	add	sp, #8
 8011d14:	4770      	bx	lr
 8011d16:	4610      	mov	r0, r2
 8011d18:	e7fb      	b.n	8011d12 <__ascii_mbtowc+0x16>
 8011d1a:	f06f 0001 	mvn.w	r0, #1
 8011d1e:	e7f8      	b.n	8011d12 <__ascii_mbtowc+0x16>

08011d20 <__malloc_lock>:
 8011d20:	4801      	ldr	r0, [pc, #4]	; (8011d28 <__malloc_lock+0x8>)
 8011d22:	f000 bbf1 	b.w	8012508 <__retarget_lock_acquire_recursive>
 8011d26:	bf00      	nop
 8011d28:	24000fdc 	.word	0x24000fdc

08011d2c <__malloc_unlock>:
 8011d2c:	4801      	ldr	r0, [pc, #4]	; (8011d34 <__malloc_unlock+0x8>)
 8011d2e:	f000 bbec 	b.w	801250a <__retarget_lock_release_recursive>
 8011d32:	bf00      	nop
 8011d34:	24000fdc 	.word	0x24000fdc

08011d38 <__sfputc_r>:
 8011d38:	6893      	ldr	r3, [r2, #8]
 8011d3a:	3b01      	subs	r3, #1
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	b410      	push	{r4}
 8011d40:	6093      	str	r3, [r2, #8]
 8011d42:	da08      	bge.n	8011d56 <__sfputc_r+0x1e>
 8011d44:	6994      	ldr	r4, [r2, #24]
 8011d46:	42a3      	cmp	r3, r4
 8011d48:	db01      	blt.n	8011d4e <__sfputc_r+0x16>
 8011d4a:	290a      	cmp	r1, #10
 8011d4c:	d103      	bne.n	8011d56 <__sfputc_r+0x1e>
 8011d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d52:	f000 b94b 	b.w	8011fec <__swbuf_r>
 8011d56:	6813      	ldr	r3, [r2, #0]
 8011d58:	1c58      	adds	r0, r3, #1
 8011d5a:	6010      	str	r0, [r2, #0]
 8011d5c:	7019      	strb	r1, [r3, #0]
 8011d5e:	4608      	mov	r0, r1
 8011d60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d64:	4770      	bx	lr

08011d66 <__sfputs_r>:
 8011d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d68:	4606      	mov	r6, r0
 8011d6a:	460f      	mov	r7, r1
 8011d6c:	4614      	mov	r4, r2
 8011d6e:	18d5      	adds	r5, r2, r3
 8011d70:	42ac      	cmp	r4, r5
 8011d72:	d101      	bne.n	8011d78 <__sfputs_r+0x12>
 8011d74:	2000      	movs	r0, #0
 8011d76:	e007      	b.n	8011d88 <__sfputs_r+0x22>
 8011d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d7c:	463a      	mov	r2, r7
 8011d7e:	4630      	mov	r0, r6
 8011d80:	f7ff ffda 	bl	8011d38 <__sfputc_r>
 8011d84:	1c43      	adds	r3, r0, #1
 8011d86:	d1f3      	bne.n	8011d70 <__sfputs_r+0xa>
 8011d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011d8c <_vfiprintf_r>:
 8011d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d90:	460d      	mov	r5, r1
 8011d92:	b09d      	sub	sp, #116	; 0x74
 8011d94:	4614      	mov	r4, r2
 8011d96:	4698      	mov	r8, r3
 8011d98:	4606      	mov	r6, r0
 8011d9a:	b118      	cbz	r0, 8011da4 <_vfiprintf_r+0x18>
 8011d9c:	6983      	ldr	r3, [r0, #24]
 8011d9e:	b90b      	cbnz	r3, 8011da4 <_vfiprintf_r+0x18>
 8011da0:	f000 fb14 	bl	80123cc <__sinit>
 8011da4:	4b89      	ldr	r3, [pc, #548]	; (8011fcc <_vfiprintf_r+0x240>)
 8011da6:	429d      	cmp	r5, r3
 8011da8:	d11b      	bne.n	8011de2 <_vfiprintf_r+0x56>
 8011daa:	6875      	ldr	r5, [r6, #4]
 8011dac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011dae:	07d9      	lsls	r1, r3, #31
 8011db0:	d405      	bmi.n	8011dbe <_vfiprintf_r+0x32>
 8011db2:	89ab      	ldrh	r3, [r5, #12]
 8011db4:	059a      	lsls	r2, r3, #22
 8011db6:	d402      	bmi.n	8011dbe <_vfiprintf_r+0x32>
 8011db8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011dba:	f000 fba5 	bl	8012508 <__retarget_lock_acquire_recursive>
 8011dbe:	89ab      	ldrh	r3, [r5, #12]
 8011dc0:	071b      	lsls	r3, r3, #28
 8011dc2:	d501      	bpl.n	8011dc8 <_vfiprintf_r+0x3c>
 8011dc4:	692b      	ldr	r3, [r5, #16]
 8011dc6:	b9eb      	cbnz	r3, 8011e04 <_vfiprintf_r+0x78>
 8011dc8:	4629      	mov	r1, r5
 8011dca:	4630      	mov	r0, r6
 8011dcc:	f000 f96e 	bl	80120ac <__swsetup_r>
 8011dd0:	b1c0      	cbz	r0, 8011e04 <_vfiprintf_r+0x78>
 8011dd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011dd4:	07dc      	lsls	r4, r3, #31
 8011dd6:	d50e      	bpl.n	8011df6 <_vfiprintf_r+0x6a>
 8011dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8011ddc:	b01d      	add	sp, #116	; 0x74
 8011dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011de2:	4b7b      	ldr	r3, [pc, #492]	; (8011fd0 <_vfiprintf_r+0x244>)
 8011de4:	429d      	cmp	r5, r3
 8011de6:	d101      	bne.n	8011dec <_vfiprintf_r+0x60>
 8011de8:	68b5      	ldr	r5, [r6, #8]
 8011dea:	e7df      	b.n	8011dac <_vfiprintf_r+0x20>
 8011dec:	4b79      	ldr	r3, [pc, #484]	; (8011fd4 <_vfiprintf_r+0x248>)
 8011dee:	429d      	cmp	r5, r3
 8011df0:	bf08      	it	eq
 8011df2:	68f5      	ldreq	r5, [r6, #12]
 8011df4:	e7da      	b.n	8011dac <_vfiprintf_r+0x20>
 8011df6:	89ab      	ldrh	r3, [r5, #12]
 8011df8:	0598      	lsls	r0, r3, #22
 8011dfa:	d4ed      	bmi.n	8011dd8 <_vfiprintf_r+0x4c>
 8011dfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011dfe:	f000 fb84 	bl	801250a <__retarget_lock_release_recursive>
 8011e02:	e7e9      	b.n	8011dd8 <_vfiprintf_r+0x4c>
 8011e04:	2300      	movs	r3, #0
 8011e06:	9309      	str	r3, [sp, #36]	; 0x24
 8011e08:	2320      	movs	r3, #32
 8011e0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011e0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e12:	2330      	movs	r3, #48	; 0x30
 8011e14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011fd8 <_vfiprintf_r+0x24c>
 8011e18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011e1c:	f04f 0901 	mov.w	r9, #1
 8011e20:	4623      	mov	r3, r4
 8011e22:	469a      	mov	sl, r3
 8011e24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e28:	b10a      	cbz	r2, 8011e2e <_vfiprintf_r+0xa2>
 8011e2a:	2a25      	cmp	r2, #37	; 0x25
 8011e2c:	d1f9      	bne.n	8011e22 <_vfiprintf_r+0x96>
 8011e2e:	ebba 0b04 	subs.w	fp, sl, r4
 8011e32:	d00b      	beq.n	8011e4c <_vfiprintf_r+0xc0>
 8011e34:	465b      	mov	r3, fp
 8011e36:	4622      	mov	r2, r4
 8011e38:	4629      	mov	r1, r5
 8011e3a:	4630      	mov	r0, r6
 8011e3c:	f7ff ff93 	bl	8011d66 <__sfputs_r>
 8011e40:	3001      	adds	r0, #1
 8011e42:	f000 80aa 	beq.w	8011f9a <_vfiprintf_r+0x20e>
 8011e46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e48:	445a      	add	r2, fp
 8011e4a:	9209      	str	r2, [sp, #36]	; 0x24
 8011e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	f000 80a2 	beq.w	8011f9a <_vfiprintf_r+0x20e>
 8011e56:	2300      	movs	r3, #0
 8011e58:	f04f 32ff 	mov.w	r2, #4294967295
 8011e5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e60:	f10a 0a01 	add.w	sl, sl, #1
 8011e64:	9304      	str	r3, [sp, #16]
 8011e66:	9307      	str	r3, [sp, #28]
 8011e68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011e6c:	931a      	str	r3, [sp, #104]	; 0x68
 8011e6e:	4654      	mov	r4, sl
 8011e70:	2205      	movs	r2, #5
 8011e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e76:	4858      	ldr	r0, [pc, #352]	; (8011fd8 <_vfiprintf_r+0x24c>)
 8011e78:	f7ee fa3a 	bl	80002f0 <memchr>
 8011e7c:	9a04      	ldr	r2, [sp, #16]
 8011e7e:	b9d8      	cbnz	r0, 8011eb8 <_vfiprintf_r+0x12c>
 8011e80:	06d1      	lsls	r1, r2, #27
 8011e82:	bf44      	itt	mi
 8011e84:	2320      	movmi	r3, #32
 8011e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e8a:	0713      	lsls	r3, r2, #28
 8011e8c:	bf44      	itt	mi
 8011e8e:	232b      	movmi	r3, #43	; 0x2b
 8011e90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e94:	f89a 3000 	ldrb.w	r3, [sl]
 8011e98:	2b2a      	cmp	r3, #42	; 0x2a
 8011e9a:	d015      	beq.n	8011ec8 <_vfiprintf_r+0x13c>
 8011e9c:	9a07      	ldr	r2, [sp, #28]
 8011e9e:	4654      	mov	r4, sl
 8011ea0:	2000      	movs	r0, #0
 8011ea2:	f04f 0c0a 	mov.w	ip, #10
 8011ea6:	4621      	mov	r1, r4
 8011ea8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011eac:	3b30      	subs	r3, #48	; 0x30
 8011eae:	2b09      	cmp	r3, #9
 8011eb0:	d94e      	bls.n	8011f50 <_vfiprintf_r+0x1c4>
 8011eb2:	b1b0      	cbz	r0, 8011ee2 <_vfiprintf_r+0x156>
 8011eb4:	9207      	str	r2, [sp, #28]
 8011eb6:	e014      	b.n	8011ee2 <_vfiprintf_r+0x156>
 8011eb8:	eba0 0308 	sub.w	r3, r0, r8
 8011ebc:	fa09 f303 	lsl.w	r3, r9, r3
 8011ec0:	4313      	orrs	r3, r2
 8011ec2:	9304      	str	r3, [sp, #16]
 8011ec4:	46a2      	mov	sl, r4
 8011ec6:	e7d2      	b.n	8011e6e <_vfiprintf_r+0xe2>
 8011ec8:	9b03      	ldr	r3, [sp, #12]
 8011eca:	1d19      	adds	r1, r3, #4
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	9103      	str	r1, [sp, #12]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	bfbb      	ittet	lt
 8011ed4:	425b      	neglt	r3, r3
 8011ed6:	f042 0202 	orrlt.w	r2, r2, #2
 8011eda:	9307      	strge	r3, [sp, #28]
 8011edc:	9307      	strlt	r3, [sp, #28]
 8011ede:	bfb8      	it	lt
 8011ee0:	9204      	strlt	r2, [sp, #16]
 8011ee2:	7823      	ldrb	r3, [r4, #0]
 8011ee4:	2b2e      	cmp	r3, #46	; 0x2e
 8011ee6:	d10c      	bne.n	8011f02 <_vfiprintf_r+0x176>
 8011ee8:	7863      	ldrb	r3, [r4, #1]
 8011eea:	2b2a      	cmp	r3, #42	; 0x2a
 8011eec:	d135      	bne.n	8011f5a <_vfiprintf_r+0x1ce>
 8011eee:	9b03      	ldr	r3, [sp, #12]
 8011ef0:	1d1a      	adds	r2, r3, #4
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	9203      	str	r2, [sp, #12]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	bfb8      	it	lt
 8011efa:	f04f 33ff 	movlt.w	r3, #4294967295
 8011efe:	3402      	adds	r4, #2
 8011f00:	9305      	str	r3, [sp, #20]
 8011f02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011fe8 <_vfiprintf_r+0x25c>
 8011f06:	7821      	ldrb	r1, [r4, #0]
 8011f08:	2203      	movs	r2, #3
 8011f0a:	4650      	mov	r0, sl
 8011f0c:	f7ee f9f0 	bl	80002f0 <memchr>
 8011f10:	b140      	cbz	r0, 8011f24 <_vfiprintf_r+0x198>
 8011f12:	2340      	movs	r3, #64	; 0x40
 8011f14:	eba0 000a 	sub.w	r0, r0, sl
 8011f18:	fa03 f000 	lsl.w	r0, r3, r0
 8011f1c:	9b04      	ldr	r3, [sp, #16]
 8011f1e:	4303      	orrs	r3, r0
 8011f20:	3401      	adds	r4, #1
 8011f22:	9304      	str	r3, [sp, #16]
 8011f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f28:	482c      	ldr	r0, [pc, #176]	; (8011fdc <_vfiprintf_r+0x250>)
 8011f2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011f2e:	2206      	movs	r2, #6
 8011f30:	f7ee f9de 	bl	80002f0 <memchr>
 8011f34:	2800      	cmp	r0, #0
 8011f36:	d03f      	beq.n	8011fb8 <_vfiprintf_r+0x22c>
 8011f38:	4b29      	ldr	r3, [pc, #164]	; (8011fe0 <_vfiprintf_r+0x254>)
 8011f3a:	bb1b      	cbnz	r3, 8011f84 <_vfiprintf_r+0x1f8>
 8011f3c:	9b03      	ldr	r3, [sp, #12]
 8011f3e:	3307      	adds	r3, #7
 8011f40:	f023 0307 	bic.w	r3, r3, #7
 8011f44:	3308      	adds	r3, #8
 8011f46:	9303      	str	r3, [sp, #12]
 8011f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f4a:	443b      	add	r3, r7
 8011f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8011f4e:	e767      	b.n	8011e20 <_vfiprintf_r+0x94>
 8011f50:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f54:	460c      	mov	r4, r1
 8011f56:	2001      	movs	r0, #1
 8011f58:	e7a5      	b.n	8011ea6 <_vfiprintf_r+0x11a>
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	3401      	adds	r4, #1
 8011f5e:	9305      	str	r3, [sp, #20]
 8011f60:	4619      	mov	r1, r3
 8011f62:	f04f 0c0a 	mov.w	ip, #10
 8011f66:	4620      	mov	r0, r4
 8011f68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f6c:	3a30      	subs	r2, #48	; 0x30
 8011f6e:	2a09      	cmp	r2, #9
 8011f70:	d903      	bls.n	8011f7a <_vfiprintf_r+0x1ee>
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d0c5      	beq.n	8011f02 <_vfiprintf_r+0x176>
 8011f76:	9105      	str	r1, [sp, #20]
 8011f78:	e7c3      	b.n	8011f02 <_vfiprintf_r+0x176>
 8011f7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f7e:	4604      	mov	r4, r0
 8011f80:	2301      	movs	r3, #1
 8011f82:	e7f0      	b.n	8011f66 <_vfiprintf_r+0x1da>
 8011f84:	ab03      	add	r3, sp, #12
 8011f86:	9300      	str	r3, [sp, #0]
 8011f88:	462a      	mov	r2, r5
 8011f8a:	4b16      	ldr	r3, [pc, #88]	; (8011fe4 <_vfiprintf_r+0x258>)
 8011f8c:	a904      	add	r1, sp, #16
 8011f8e:	4630      	mov	r0, r6
 8011f90:	f7fe f86e 	bl	8010070 <_printf_float>
 8011f94:	4607      	mov	r7, r0
 8011f96:	1c78      	adds	r0, r7, #1
 8011f98:	d1d6      	bne.n	8011f48 <_vfiprintf_r+0x1bc>
 8011f9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f9c:	07d9      	lsls	r1, r3, #31
 8011f9e:	d405      	bmi.n	8011fac <_vfiprintf_r+0x220>
 8011fa0:	89ab      	ldrh	r3, [r5, #12]
 8011fa2:	059a      	lsls	r2, r3, #22
 8011fa4:	d402      	bmi.n	8011fac <_vfiprintf_r+0x220>
 8011fa6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011fa8:	f000 faaf 	bl	801250a <__retarget_lock_release_recursive>
 8011fac:	89ab      	ldrh	r3, [r5, #12]
 8011fae:	065b      	lsls	r3, r3, #25
 8011fb0:	f53f af12 	bmi.w	8011dd8 <_vfiprintf_r+0x4c>
 8011fb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011fb6:	e711      	b.n	8011ddc <_vfiprintf_r+0x50>
 8011fb8:	ab03      	add	r3, sp, #12
 8011fba:	9300      	str	r3, [sp, #0]
 8011fbc:	462a      	mov	r2, r5
 8011fbe:	4b09      	ldr	r3, [pc, #36]	; (8011fe4 <_vfiprintf_r+0x258>)
 8011fc0:	a904      	add	r1, sp, #16
 8011fc2:	4630      	mov	r0, r6
 8011fc4:	f7fe fae0 	bl	8010588 <_printf_i>
 8011fc8:	e7e4      	b.n	8011f94 <_vfiprintf_r+0x208>
 8011fca:	bf00      	nop
 8011fcc:	0801460c 	.word	0x0801460c
 8011fd0:	0801462c 	.word	0x0801462c
 8011fd4:	080145ec 	.word	0x080145ec
 8011fd8:	080144da 	.word	0x080144da
 8011fdc:	080144e4 	.word	0x080144e4
 8011fe0:	08010071 	.word	0x08010071
 8011fe4:	08011d67 	.word	0x08011d67
 8011fe8:	080144e0 	.word	0x080144e0

08011fec <__swbuf_r>:
 8011fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fee:	460e      	mov	r6, r1
 8011ff0:	4614      	mov	r4, r2
 8011ff2:	4605      	mov	r5, r0
 8011ff4:	b118      	cbz	r0, 8011ffe <__swbuf_r+0x12>
 8011ff6:	6983      	ldr	r3, [r0, #24]
 8011ff8:	b90b      	cbnz	r3, 8011ffe <__swbuf_r+0x12>
 8011ffa:	f000 f9e7 	bl	80123cc <__sinit>
 8011ffe:	4b21      	ldr	r3, [pc, #132]	; (8012084 <__swbuf_r+0x98>)
 8012000:	429c      	cmp	r4, r3
 8012002:	d12b      	bne.n	801205c <__swbuf_r+0x70>
 8012004:	686c      	ldr	r4, [r5, #4]
 8012006:	69a3      	ldr	r3, [r4, #24]
 8012008:	60a3      	str	r3, [r4, #8]
 801200a:	89a3      	ldrh	r3, [r4, #12]
 801200c:	071a      	lsls	r2, r3, #28
 801200e:	d52f      	bpl.n	8012070 <__swbuf_r+0x84>
 8012010:	6923      	ldr	r3, [r4, #16]
 8012012:	b36b      	cbz	r3, 8012070 <__swbuf_r+0x84>
 8012014:	6923      	ldr	r3, [r4, #16]
 8012016:	6820      	ldr	r0, [r4, #0]
 8012018:	1ac0      	subs	r0, r0, r3
 801201a:	6963      	ldr	r3, [r4, #20]
 801201c:	b2f6      	uxtb	r6, r6
 801201e:	4283      	cmp	r3, r0
 8012020:	4637      	mov	r7, r6
 8012022:	dc04      	bgt.n	801202e <__swbuf_r+0x42>
 8012024:	4621      	mov	r1, r4
 8012026:	4628      	mov	r0, r5
 8012028:	f000 f93c 	bl	80122a4 <_fflush_r>
 801202c:	bb30      	cbnz	r0, 801207c <__swbuf_r+0x90>
 801202e:	68a3      	ldr	r3, [r4, #8]
 8012030:	3b01      	subs	r3, #1
 8012032:	60a3      	str	r3, [r4, #8]
 8012034:	6823      	ldr	r3, [r4, #0]
 8012036:	1c5a      	adds	r2, r3, #1
 8012038:	6022      	str	r2, [r4, #0]
 801203a:	701e      	strb	r6, [r3, #0]
 801203c:	6963      	ldr	r3, [r4, #20]
 801203e:	3001      	adds	r0, #1
 8012040:	4283      	cmp	r3, r0
 8012042:	d004      	beq.n	801204e <__swbuf_r+0x62>
 8012044:	89a3      	ldrh	r3, [r4, #12]
 8012046:	07db      	lsls	r3, r3, #31
 8012048:	d506      	bpl.n	8012058 <__swbuf_r+0x6c>
 801204a:	2e0a      	cmp	r6, #10
 801204c:	d104      	bne.n	8012058 <__swbuf_r+0x6c>
 801204e:	4621      	mov	r1, r4
 8012050:	4628      	mov	r0, r5
 8012052:	f000 f927 	bl	80122a4 <_fflush_r>
 8012056:	b988      	cbnz	r0, 801207c <__swbuf_r+0x90>
 8012058:	4638      	mov	r0, r7
 801205a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801205c:	4b0a      	ldr	r3, [pc, #40]	; (8012088 <__swbuf_r+0x9c>)
 801205e:	429c      	cmp	r4, r3
 8012060:	d101      	bne.n	8012066 <__swbuf_r+0x7a>
 8012062:	68ac      	ldr	r4, [r5, #8]
 8012064:	e7cf      	b.n	8012006 <__swbuf_r+0x1a>
 8012066:	4b09      	ldr	r3, [pc, #36]	; (801208c <__swbuf_r+0xa0>)
 8012068:	429c      	cmp	r4, r3
 801206a:	bf08      	it	eq
 801206c:	68ec      	ldreq	r4, [r5, #12]
 801206e:	e7ca      	b.n	8012006 <__swbuf_r+0x1a>
 8012070:	4621      	mov	r1, r4
 8012072:	4628      	mov	r0, r5
 8012074:	f000 f81a 	bl	80120ac <__swsetup_r>
 8012078:	2800      	cmp	r0, #0
 801207a:	d0cb      	beq.n	8012014 <__swbuf_r+0x28>
 801207c:	f04f 37ff 	mov.w	r7, #4294967295
 8012080:	e7ea      	b.n	8012058 <__swbuf_r+0x6c>
 8012082:	bf00      	nop
 8012084:	0801460c 	.word	0x0801460c
 8012088:	0801462c 	.word	0x0801462c
 801208c:	080145ec 	.word	0x080145ec

08012090 <__ascii_wctomb>:
 8012090:	b149      	cbz	r1, 80120a6 <__ascii_wctomb+0x16>
 8012092:	2aff      	cmp	r2, #255	; 0xff
 8012094:	bf85      	ittet	hi
 8012096:	238a      	movhi	r3, #138	; 0x8a
 8012098:	6003      	strhi	r3, [r0, #0]
 801209a:	700a      	strbls	r2, [r1, #0]
 801209c:	f04f 30ff 	movhi.w	r0, #4294967295
 80120a0:	bf98      	it	ls
 80120a2:	2001      	movls	r0, #1
 80120a4:	4770      	bx	lr
 80120a6:	4608      	mov	r0, r1
 80120a8:	4770      	bx	lr
	...

080120ac <__swsetup_r>:
 80120ac:	4b32      	ldr	r3, [pc, #200]	; (8012178 <__swsetup_r+0xcc>)
 80120ae:	b570      	push	{r4, r5, r6, lr}
 80120b0:	681d      	ldr	r5, [r3, #0]
 80120b2:	4606      	mov	r6, r0
 80120b4:	460c      	mov	r4, r1
 80120b6:	b125      	cbz	r5, 80120c2 <__swsetup_r+0x16>
 80120b8:	69ab      	ldr	r3, [r5, #24]
 80120ba:	b913      	cbnz	r3, 80120c2 <__swsetup_r+0x16>
 80120bc:	4628      	mov	r0, r5
 80120be:	f000 f985 	bl	80123cc <__sinit>
 80120c2:	4b2e      	ldr	r3, [pc, #184]	; (801217c <__swsetup_r+0xd0>)
 80120c4:	429c      	cmp	r4, r3
 80120c6:	d10f      	bne.n	80120e8 <__swsetup_r+0x3c>
 80120c8:	686c      	ldr	r4, [r5, #4]
 80120ca:	89a3      	ldrh	r3, [r4, #12]
 80120cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80120d0:	0719      	lsls	r1, r3, #28
 80120d2:	d42c      	bmi.n	801212e <__swsetup_r+0x82>
 80120d4:	06dd      	lsls	r5, r3, #27
 80120d6:	d411      	bmi.n	80120fc <__swsetup_r+0x50>
 80120d8:	2309      	movs	r3, #9
 80120da:	6033      	str	r3, [r6, #0]
 80120dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80120e0:	81a3      	strh	r3, [r4, #12]
 80120e2:	f04f 30ff 	mov.w	r0, #4294967295
 80120e6:	e03e      	b.n	8012166 <__swsetup_r+0xba>
 80120e8:	4b25      	ldr	r3, [pc, #148]	; (8012180 <__swsetup_r+0xd4>)
 80120ea:	429c      	cmp	r4, r3
 80120ec:	d101      	bne.n	80120f2 <__swsetup_r+0x46>
 80120ee:	68ac      	ldr	r4, [r5, #8]
 80120f0:	e7eb      	b.n	80120ca <__swsetup_r+0x1e>
 80120f2:	4b24      	ldr	r3, [pc, #144]	; (8012184 <__swsetup_r+0xd8>)
 80120f4:	429c      	cmp	r4, r3
 80120f6:	bf08      	it	eq
 80120f8:	68ec      	ldreq	r4, [r5, #12]
 80120fa:	e7e6      	b.n	80120ca <__swsetup_r+0x1e>
 80120fc:	0758      	lsls	r0, r3, #29
 80120fe:	d512      	bpl.n	8012126 <__swsetup_r+0x7a>
 8012100:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012102:	b141      	cbz	r1, 8012116 <__swsetup_r+0x6a>
 8012104:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012108:	4299      	cmp	r1, r3
 801210a:	d002      	beq.n	8012112 <__swsetup_r+0x66>
 801210c:	4630      	mov	r0, r6
 801210e:	f7ff fd0b 	bl	8011b28 <_free_r>
 8012112:	2300      	movs	r3, #0
 8012114:	6363      	str	r3, [r4, #52]	; 0x34
 8012116:	89a3      	ldrh	r3, [r4, #12]
 8012118:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801211c:	81a3      	strh	r3, [r4, #12]
 801211e:	2300      	movs	r3, #0
 8012120:	6063      	str	r3, [r4, #4]
 8012122:	6923      	ldr	r3, [r4, #16]
 8012124:	6023      	str	r3, [r4, #0]
 8012126:	89a3      	ldrh	r3, [r4, #12]
 8012128:	f043 0308 	orr.w	r3, r3, #8
 801212c:	81a3      	strh	r3, [r4, #12]
 801212e:	6923      	ldr	r3, [r4, #16]
 8012130:	b94b      	cbnz	r3, 8012146 <__swsetup_r+0x9a>
 8012132:	89a3      	ldrh	r3, [r4, #12]
 8012134:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801213c:	d003      	beq.n	8012146 <__swsetup_r+0x9a>
 801213e:	4621      	mov	r1, r4
 8012140:	4630      	mov	r0, r6
 8012142:	f000 fa07 	bl	8012554 <__smakebuf_r>
 8012146:	89a0      	ldrh	r0, [r4, #12]
 8012148:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801214c:	f010 0301 	ands.w	r3, r0, #1
 8012150:	d00a      	beq.n	8012168 <__swsetup_r+0xbc>
 8012152:	2300      	movs	r3, #0
 8012154:	60a3      	str	r3, [r4, #8]
 8012156:	6963      	ldr	r3, [r4, #20]
 8012158:	425b      	negs	r3, r3
 801215a:	61a3      	str	r3, [r4, #24]
 801215c:	6923      	ldr	r3, [r4, #16]
 801215e:	b943      	cbnz	r3, 8012172 <__swsetup_r+0xc6>
 8012160:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012164:	d1ba      	bne.n	80120dc <__swsetup_r+0x30>
 8012166:	bd70      	pop	{r4, r5, r6, pc}
 8012168:	0781      	lsls	r1, r0, #30
 801216a:	bf58      	it	pl
 801216c:	6963      	ldrpl	r3, [r4, #20]
 801216e:	60a3      	str	r3, [r4, #8]
 8012170:	e7f4      	b.n	801215c <__swsetup_r+0xb0>
 8012172:	2000      	movs	r0, #0
 8012174:	e7f7      	b.n	8012166 <__swsetup_r+0xba>
 8012176:	bf00      	nop
 8012178:	24000048 	.word	0x24000048
 801217c:	0801460c 	.word	0x0801460c
 8012180:	0801462c 	.word	0x0801462c
 8012184:	080145ec 	.word	0x080145ec

08012188 <abort>:
 8012188:	b508      	push	{r3, lr}
 801218a:	2006      	movs	r0, #6
 801218c:	f000 fa4a 	bl	8012624 <raise>
 8012190:	2001      	movs	r0, #1
 8012192:	f7f2 f867 	bl	8004264 <_exit>
	...

08012198 <__sflush_r>:
 8012198:	898a      	ldrh	r2, [r1, #12]
 801219a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801219e:	4605      	mov	r5, r0
 80121a0:	0710      	lsls	r0, r2, #28
 80121a2:	460c      	mov	r4, r1
 80121a4:	d458      	bmi.n	8012258 <__sflush_r+0xc0>
 80121a6:	684b      	ldr	r3, [r1, #4]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	dc05      	bgt.n	80121b8 <__sflush_r+0x20>
 80121ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	dc02      	bgt.n	80121b8 <__sflush_r+0x20>
 80121b2:	2000      	movs	r0, #0
 80121b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80121ba:	2e00      	cmp	r6, #0
 80121bc:	d0f9      	beq.n	80121b2 <__sflush_r+0x1a>
 80121be:	2300      	movs	r3, #0
 80121c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80121c4:	682f      	ldr	r7, [r5, #0]
 80121c6:	602b      	str	r3, [r5, #0]
 80121c8:	d032      	beq.n	8012230 <__sflush_r+0x98>
 80121ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80121cc:	89a3      	ldrh	r3, [r4, #12]
 80121ce:	075a      	lsls	r2, r3, #29
 80121d0:	d505      	bpl.n	80121de <__sflush_r+0x46>
 80121d2:	6863      	ldr	r3, [r4, #4]
 80121d4:	1ac0      	subs	r0, r0, r3
 80121d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80121d8:	b10b      	cbz	r3, 80121de <__sflush_r+0x46>
 80121da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80121dc:	1ac0      	subs	r0, r0, r3
 80121de:	2300      	movs	r3, #0
 80121e0:	4602      	mov	r2, r0
 80121e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80121e4:	6a21      	ldr	r1, [r4, #32]
 80121e6:	4628      	mov	r0, r5
 80121e8:	47b0      	blx	r6
 80121ea:	1c43      	adds	r3, r0, #1
 80121ec:	89a3      	ldrh	r3, [r4, #12]
 80121ee:	d106      	bne.n	80121fe <__sflush_r+0x66>
 80121f0:	6829      	ldr	r1, [r5, #0]
 80121f2:	291d      	cmp	r1, #29
 80121f4:	d82c      	bhi.n	8012250 <__sflush_r+0xb8>
 80121f6:	4a2a      	ldr	r2, [pc, #168]	; (80122a0 <__sflush_r+0x108>)
 80121f8:	40ca      	lsrs	r2, r1
 80121fa:	07d6      	lsls	r6, r2, #31
 80121fc:	d528      	bpl.n	8012250 <__sflush_r+0xb8>
 80121fe:	2200      	movs	r2, #0
 8012200:	6062      	str	r2, [r4, #4]
 8012202:	04d9      	lsls	r1, r3, #19
 8012204:	6922      	ldr	r2, [r4, #16]
 8012206:	6022      	str	r2, [r4, #0]
 8012208:	d504      	bpl.n	8012214 <__sflush_r+0x7c>
 801220a:	1c42      	adds	r2, r0, #1
 801220c:	d101      	bne.n	8012212 <__sflush_r+0x7a>
 801220e:	682b      	ldr	r3, [r5, #0]
 8012210:	b903      	cbnz	r3, 8012214 <__sflush_r+0x7c>
 8012212:	6560      	str	r0, [r4, #84]	; 0x54
 8012214:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012216:	602f      	str	r7, [r5, #0]
 8012218:	2900      	cmp	r1, #0
 801221a:	d0ca      	beq.n	80121b2 <__sflush_r+0x1a>
 801221c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012220:	4299      	cmp	r1, r3
 8012222:	d002      	beq.n	801222a <__sflush_r+0x92>
 8012224:	4628      	mov	r0, r5
 8012226:	f7ff fc7f 	bl	8011b28 <_free_r>
 801222a:	2000      	movs	r0, #0
 801222c:	6360      	str	r0, [r4, #52]	; 0x34
 801222e:	e7c1      	b.n	80121b4 <__sflush_r+0x1c>
 8012230:	6a21      	ldr	r1, [r4, #32]
 8012232:	2301      	movs	r3, #1
 8012234:	4628      	mov	r0, r5
 8012236:	47b0      	blx	r6
 8012238:	1c41      	adds	r1, r0, #1
 801223a:	d1c7      	bne.n	80121cc <__sflush_r+0x34>
 801223c:	682b      	ldr	r3, [r5, #0]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d0c4      	beq.n	80121cc <__sflush_r+0x34>
 8012242:	2b1d      	cmp	r3, #29
 8012244:	d001      	beq.n	801224a <__sflush_r+0xb2>
 8012246:	2b16      	cmp	r3, #22
 8012248:	d101      	bne.n	801224e <__sflush_r+0xb6>
 801224a:	602f      	str	r7, [r5, #0]
 801224c:	e7b1      	b.n	80121b2 <__sflush_r+0x1a>
 801224e:	89a3      	ldrh	r3, [r4, #12]
 8012250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012254:	81a3      	strh	r3, [r4, #12]
 8012256:	e7ad      	b.n	80121b4 <__sflush_r+0x1c>
 8012258:	690f      	ldr	r7, [r1, #16]
 801225a:	2f00      	cmp	r7, #0
 801225c:	d0a9      	beq.n	80121b2 <__sflush_r+0x1a>
 801225e:	0793      	lsls	r3, r2, #30
 8012260:	680e      	ldr	r6, [r1, #0]
 8012262:	bf08      	it	eq
 8012264:	694b      	ldreq	r3, [r1, #20]
 8012266:	600f      	str	r7, [r1, #0]
 8012268:	bf18      	it	ne
 801226a:	2300      	movne	r3, #0
 801226c:	eba6 0807 	sub.w	r8, r6, r7
 8012270:	608b      	str	r3, [r1, #8]
 8012272:	f1b8 0f00 	cmp.w	r8, #0
 8012276:	dd9c      	ble.n	80121b2 <__sflush_r+0x1a>
 8012278:	6a21      	ldr	r1, [r4, #32]
 801227a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801227c:	4643      	mov	r3, r8
 801227e:	463a      	mov	r2, r7
 8012280:	4628      	mov	r0, r5
 8012282:	47b0      	blx	r6
 8012284:	2800      	cmp	r0, #0
 8012286:	dc06      	bgt.n	8012296 <__sflush_r+0xfe>
 8012288:	89a3      	ldrh	r3, [r4, #12]
 801228a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801228e:	81a3      	strh	r3, [r4, #12]
 8012290:	f04f 30ff 	mov.w	r0, #4294967295
 8012294:	e78e      	b.n	80121b4 <__sflush_r+0x1c>
 8012296:	4407      	add	r7, r0
 8012298:	eba8 0800 	sub.w	r8, r8, r0
 801229c:	e7e9      	b.n	8012272 <__sflush_r+0xda>
 801229e:	bf00      	nop
 80122a0:	20400001 	.word	0x20400001

080122a4 <_fflush_r>:
 80122a4:	b538      	push	{r3, r4, r5, lr}
 80122a6:	690b      	ldr	r3, [r1, #16]
 80122a8:	4605      	mov	r5, r0
 80122aa:	460c      	mov	r4, r1
 80122ac:	b913      	cbnz	r3, 80122b4 <_fflush_r+0x10>
 80122ae:	2500      	movs	r5, #0
 80122b0:	4628      	mov	r0, r5
 80122b2:	bd38      	pop	{r3, r4, r5, pc}
 80122b4:	b118      	cbz	r0, 80122be <_fflush_r+0x1a>
 80122b6:	6983      	ldr	r3, [r0, #24]
 80122b8:	b90b      	cbnz	r3, 80122be <_fflush_r+0x1a>
 80122ba:	f000 f887 	bl	80123cc <__sinit>
 80122be:	4b14      	ldr	r3, [pc, #80]	; (8012310 <_fflush_r+0x6c>)
 80122c0:	429c      	cmp	r4, r3
 80122c2:	d11b      	bne.n	80122fc <_fflush_r+0x58>
 80122c4:	686c      	ldr	r4, [r5, #4]
 80122c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d0ef      	beq.n	80122ae <_fflush_r+0xa>
 80122ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80122d0:	07d0      	lsls	r0, r2, #31
 80122d2:	d404      	bmi.n	80122de <_fflush_r+0x3a>
 80122d4:	0599      	lsls	r1, r3, #22
 80122d6:	d402      	bmi.n	80122de <_fflush_r+0x3a>
 80122d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80122da:	f000 f915 	bl	8012508 <__retarget_lock_acquire_recursive>
 80122de:	4628      	mov	r0, r5
 80122e0:	4621      	mov	r1, r4
 80122e2:	f7ff ff59 	bl	8012198 <__sflush_r>
 80122e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80122e8:	07da      	lsls	r2, r3, #31
 80122ea:	4605      	mov	r5, r0
 80122ec:	d4e0      	bmi.n	80122b0 <_fflush_r+0xc>
 80122ee:	89a3      	ldrh	r3, [r4, #12]
 80122f0:	059b      	lsls	r3, r3, #22
 80122f2:	d4dd      	bmi.n	80122b0 <_fflush_r+0xc>
 80122f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80122f6:	f000 f908 	bl	801250a <__retarget_lock_release_recursive>
 80122fa:	e7d9      	b.n	80122b0 <_fflush_r+0xc>
 80122fc:	4b05      	ldr	r3, [pc, #20]	; (8012314 <_fflush_r+0x70>)
 80122fe:	429c      	cmp	r4, r3
 8012300:	d101      	bne.n	8012306 <_fflush_r+0x62>
 8012302:	68ac      	ldr	r4, [r5, #8]
 8012304:	e7df      	b.n	80122c6 <_fflush_r+0x22>
 8012306:	4b04      	ldr	r3, [pc, #16]	; (8012318 <_fflush_r+0x74>)
 8012308:	429c      	cmp	r4, r3
 801230a:	bf08      	it	eq
 801230c:	68ec      	ldreq	r4, [r5, #12]
 801230e:	e7da      	b.n	80122c6 <_fflush_r+0x22>
 8012310:	0801460c 	.word	0x0801460c
 8012314:	0801462c 	.word	0x0801462c
 8012318:	080145ec 	.word	0x080145ec

0801231c <std>:
 801231c:	2300      	movs	r3, #0
 801231e:	b510      	push	{r4, lr}
 8012320:	4604      	mov	r4, r0
 8012322:	e9c0 3300 	strd	r3, r3, [r0]
 8012326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801232a:	6083      	str	r3, [r0, #8]
 801232c:	8181      	strh	r1, [r0, #12]
 801232e:	6643      	str	r3, [r0, #100]	; 0x64
 8012330:	81c2      	strh	r2, [r0, #14]
 8012332:	6183      	str	r3, [r0, #24]
 8012334:	4619      	mov	r1, r3
 8012336:	2208      	movs	r2, #8
 8012338:	305c      	adds	r0, #92	; 0x5c
 801233a:	f7fd fe01 	bl	800ff40 <memset>
 801233e:	4b05      	ldr	r3, [pc, #20]	; (8012354 <std+0x38>)
 8012340:	6263      	str	r3, [r4, #36]	; 0x24
 8012342:	4b05      	ldr	r3, [pc, #20]	; (8012358 <std+0x3c>)
 8012344:	62a3      	str	r3, [r4, #40]	; 0x28
 8012346:	4b05      	ldr	r3, [pc, #20]	; (801235c <std+0x40>)
 8012348:	62e3      	str	r3, [r4, #44]	; 0x2c
 801234a:	4b05      	ldr	r3, [pc, #20]	; (8012360 <std+0x44>)
 801234c:	6224      	str	r4, [r4, #32]
 801234e:	6323      	str	r3, [r4, #48]	; 0x30
 8012350:	bd10      	pop	{r4, pc}
 8012352:	bf00      	nop
 8012354:	0801265d 	.word	0x0801265d
 8012358:	0801267f 	.word	0x0801267f
 801235c:	080126b7 	.word	0x080126b7
 8012360:	080126db 	.word	0x080126db

08012364 <_cleanup_r>:
 8012364:	4901      	ldr	r1, [pc, #4]	; (801236c <_cleanup_r+0x8>)
 8012366:	f000 b8af 	b.w	80124c8 <_fwalk_reent>
 801236a:	bf00      	nop
 801236c:	080122a5 	.word	0x080122a5

08012370 <__sfmoreglue>:
 8012370:	b570      	push	{r4, r5, r6, lr}
 8012372:	1e4a      	subs	r2, r1, #1
 8012374:	2568      	movs	r5, #104	; 0x68
 8012376:	4355      	muls	r5, r2
 8012378:	460e      	mov	r6, r1
 801237a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801237e:	f7ff fc23 	bl	8011bc8 <_malloc_r>
 8012382:	4604      	mov	r4, r0
 8012384:	b140      	cbz	r0, 8012398 <__sfmoreglue+0x28>
 8012386:	2100      	movs	r1, #0
 8012388:	e9c0 1600 	strd	r1, r6, [r0]
 801238c:	300c      	adds	r0, #12
 801238e:	60a0      	str	r0, [r4, #8]
 8012390:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012394:	f7fd fdd4 	bl	800ff40 <memset>
 8012398:	4620      	mov	r0, r4
 801239a:	bd70      	pop	{r4, r5, r6, pc}

0801239c <__sfp_lock_acquire>:
 801239c:	4801      	ldr	r0, [pc, #4]	; (80123a4 <__sfp_lock_acquire+0x8>)
 801239e:	f000 b8b3 	b.w	8012508 <__retarget_lock_acquire_recursive>
 80123a2:	bf00      	nop
 80123a4:	24000fe0 	.word	0x24000fe0

080123a8 <__sfp_lock_release>:
 80123a8:	4801      	ldr	r0, [pc, #4]	; (80123b0 <__sfp_lock_release+0x8>)
 80123aa:	f000 b8ae 	b.w	801250a <__retarget_lock_release_recursive>
 80123ae:	bf00      	nop
 80123b0:	24000fe0 	.word	0x24000fe0

080123b4 <__sinit_lock_acquire>:
 80123b4:	4801      	ldr	r0, [pc, #4]	; (80123bc <__sinit_lock_acquire+0x8>)
 80123b6:	f000 b8a7 	b.w	8012508 <__retarget_lock_acquire_recursive>
 80123ba:	bf00      	nop
 80123bc:	24000fdb 	.word	0x24000fdb

080123c0 <__sinit_lock_release>:
 80123c0:	4801      	ldr	r0, [pc, #4]	; (80123c8 <__sinit_lock_release+0x8>)
 80123c2:	f000 b8a2 	b.w	801250a <__retarget_lock_release_recursive>
 80123c6:	bf00      	nop
 80123c8:	24000fdb 	.word	0x24000fdb

080123cc <__sinit>:
 80123cc:	b510      	push	{r4, lr}
 80123ce:	4604      	mov	r4, r0
 80123d0:	f7ff fff0 	bl	80123b4 <__sinit_lock_acquire>
 80123d4:	69a3      	ldr	r3, [r4, #24]
 80123d6:	b11b      	cbz	r3, 80123e0 <__sinit+0x14>
 80123d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123dc:	f7ff bff0 	b.w	80123c0 <__sinit_lock_release>
 80123e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80123e4:	6523      	str	r3, [r4, #80]	; 0x50
 80123e6:	4b13      	ldr	r3, [pc, #76]	; (8012434 <__sinit+0x68>)
 80123e8:	4a13      	ldr	r2, [pc, #76]	; (8012438 <__sinit+0x6c>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80123ee:	42a3      	cmp	r3, r4
 80123f0:	bf04      	itt	eq
 80123f2:	2301      	moveq	r3, #1
 80123f4:	61a3      	streq	r3, [r4, #24]
 80123f6:	4620      	mov	r0, r4
 80123f8:	f000 f820 	bl	801243c <__sfp>
 80123fc:	6060      	str	r0, [r4, #4]
 80123fe:	4620      	mov	r0, r4
 8012400:	f000 f81c 	bl	801243c <__sfp>
 8012404:	60a0      	str	r0, [r4, #8]
 8012406:	4620      	mov	r0, r4
 8012408:	f000 f818 	bl	801243c <__sfp>
 801240c:	2200      	movs	r2, #0
 801240e:	60e0      	str	r0, [r4, #12]
 8012410:	2104      	movs	r1, #4
 8012412:	6860      	ldr	r0, [r4, #4]
 8012414:	f7ff ff82 	bl	801231c <std>
 8012418:	68a0      	ldr	r0, [r4, #8]
 801241a:	2201      	movs	r2, #1
 801241c:	2109      	movs	r1, #9
 801241e:	f7ff ff7d 	bl	801231c <std>
 8012422:	68e0      	ldr	r0, [r4, #12]
 8012424:	2202      	movs	r2, #2
 8012426:	2112      	movs	r1, #18
 8012428:	f7ff ff78 	bl	801231c <std>
 801242c:	2301      	movs	r3, #1
 801242e:	61a3      	str	r3, [r4, #24]
 8012430:	e7d2      	b.n	80123d8 <__sinit+0xc>
 8012432:	bf00      	nop
 8012434:	08014268 	.word	0x08014268
 8012438:	08012365 	.word	0x08012365

0801243c <__sfp>:
 801243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801243e:	4607      	mov	r7, r0
 8012440:	f7ff ffac 	bl	801239c <__sfp_lock_acquire>
 8012444:	4b1e      	ldr	r3, [pc, #120]	; (80124c0 <__sfp+0x84>)
 8012446:	681e      	ldr	r6, [r3, #0]
 8012448:	69b3      	ldr	r3, [r6, #24]
 801244a:	b913      	cbnz	r3, 8012452 <__sfp+0x16>
 801244c:	4630      	mov	r0, r6
 801244e:	f7ff ffbd 	bl	80123cc <__sinit>
 8012452:	3648      	adds	r6, #72	; 0x48
 8012454:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012458:	3b01      	subs	r3, #1
 801245a:	d503      	bpl.n	8012464 <__sfp+0x28>
 801245c:	6833      	ldr	r3, [r6, #0]
 801245e:	b30b      	cbz	r3, 80124a4 <__sfp+0x68>
 8012460:	6836      	ldr	r6, [r6, #0]
 8012462:	e7f7      	b.n	8012454 <__sfp+0x18>
 8012464:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012468:	b9d5      	cbnz	r5, 80124a0 <__sfp+0x64>
 801246a:	4b16      	ldr	r3, [pc, #88]	; (80124c4 <__sfp+0x88>)
 801246c:	60e3      	str	r3, [r4, #12]
 801246e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012472:	6665      	str	r5, [r4, #100]	; 0x64
 8012474:	f000 f847 	bl	8012506 <__retarget_lock_init_recursive>
 8012478:	f7ff ff96 	bl	80123a8 <__sfp_lock_release>
 801247c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012480:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012484:	6025      	str	r5, [r4, #0]
 8012486:	61a5      	str	r5, [r4, #24]
 8012488:	2208      	movs	r2, #8
 801248a:	4629      	mov	r1, r5
 801248c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012490:	f7fd fd56 	bl	800ff40 <memset>
 8012494:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012498:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801249c:	4620      	mov	r0, r4
 801249e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124a0:	3468      	adds	r4, #104	; 0x68
 80124a2:	e7d9      	b.n	8012458 <__sfp+0x1c>
 80124a4:	2104      	movs	r1, #4
 80124a6:	4638      	mov	r0, r7
 80124a8:	f7ff ff62 	bl	8012370 <__sfmoreglue>
 80124ac:	4604      	mov	r4, r0
 80124ae:	6030      	str	r0, [r6, #0]
 80124b0:	2800      	cmp	r0, #0
 80124b2:	d1d5      	bne.n	8012460 <__sfp+0x24>
 80124b4:	f7ff ff78 	bl	80123a8 <__sfp_lock_release>
 80124b8:	230c      	movs	r3, #12
 80124ba:	603b      	str	r3, [r7, #0]
 80124bc:	e7ee      	b.n	801249c <__sfp+0x60>
 80124be:	bf00      	nop
 80124c0:	08014268 	.word	0x08014268
 80124c4:	ffff0001 	.word	0xffff0001

080124c8 <_fwalk_reent>:
 80124c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124cc:	4606      	mov	r6, r0
 80124ce:	4688      	mov	r8, r1
 80124d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80124d4:	2700      	movs	r7, #0
 80124d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80124da:	f1b9 0901 	subs.w	r9, r9, #1
 80124de:	d505      	bpl.n	80124ec <_fwalk_reent+0x24>
 80124e0:	6824      	ldr	r4, [r4, #0]
 80124e2:	2c00      	cmp	r4, #0
 80124e4:	d1f7      	bne.n	80124d6 <_fwalk_reent+0xe>
 80124e6:	4638      	mov	r0, r7
 80124e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124ec:	89ab      	ldrh	r3, [r5, #12]
 80124ee:	2b01      	cmp	r3, #1
 80124f0:	d907      	bls.n	8012502 <_fwalk_reent+0x3a>
 80124f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80124f6:	3301      	adds	r3, #1
 80124f8:	d003      	beq.n	8012502 <_fwalk_reent+0x3a>
 80124fa:	4629      	mov	r1, r5
 80124fc:	4630      	mov	r0, r6
 80124fe:	47c0      	blx	r8
 8012500:	4307      	orrs	r7, r0
 8012502:	3568      	adds	r5, #104	; 0x68
 8012504:	e7e9      	b.n	80124da <_fwalk_reent+0x12>

08012506 <__retarget_lock_init_recursive>:
 8012506:	4770      	bx	lr

08012508 <__retarget_lock_acquire_recursive>:
 8012508:	4770      	bx	lr

0801250a <__retarget_lock_release_recursive>:
 801250a:	4770      	bx	lr

0801250c <__swhatbuf_r>:
 801250c:	b570      	push	{r4, r5, r6, lr}
 801250e:	460e      	mov	r6, r1
 8012510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012514:	2900      	cmp	r1, #0
 8012516:	b096      	sub	sp, #88	; 0x58
 8012518:	4614      	mov	r4, r2
 801251a:	461d      	mov	r5, r3
 801251c:	da07      	bge.n	801252e <__swhatbuf_r+0x22>
 801251e:	2300      	movs	r3, #0
 8012520:	602b      	str	r3, [r5, #0]
 8012522:	89b3      	ldrh	r3, [r6, #12]
 8012524:	061a      	lsls	r2, r3, #24
 8012526:	d410      	bmi.n	801254a <__swhatbuf_r+0x3e>
 8012528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801252c:	e00e      	b.n	801254c <__swhatbuf_r+0x40>
 801252e:	466a      	mov	r2, sp
 8012530:	f000 f8fa 	bl	8012728 <_fstat_r>
 8012534:	2800      	cmp	r0, #0
 8012536:	dbf2      	blt.n	801251e <__swhatbuf_r+0x12>
 8012538:	9a01      	ldr	r2, [sp, #4]
 801253a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801253e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012542:	425a      	negs	r2, r3
 8012544:	415a      	adcs	r2, r3
 8012546:	602a      	str	r2, [r5, #0]
 8012548:	e7ee      	b.n	8012528 <__swhatbuf_r+0x1c>
 801254a:	2340      	movs	r3, #64	; 0x40
 801254c:	2000      	movs	r0, #0
 801254e:	6023      	str	r3, [r4, #0]
 8012550:	b016      	add	sp, #88	; 0x58
 8012552:	bd70      	pop	{r4, r5, r6, pc}

08012554 <__smakebuf_r>:
 8012554:	898b      	ldrh	r3, [r1, #12]
 8012556:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012558:	079d      	lsls	r5, r3, #30
 801255a:	4606      	mov	r6, r0
 801255c:	460c      	mov	r4, r1
 801255e:	d507      	bpl.n	8012570 <__smakebuf_r+0x1c>
 8012560:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012564:	6023      	str	r3, [r4, #0]
 8012566:	6123      	str	r3, [r4, #16]
 8012568:	2301      	movs	r3, #1
 801256a:	6163      	str	r3, [r4, #20]
 801256c:	b002      	add	sp, #8
 801256e:	bd70      	pop	{r4, r5, r6, pc}
 8012570:	ab01      	add	r3, sp, #4
 8012572:	466a      	mov	r2, sp
 8012574:	f7ff ffca 	bl	801250c <__swhatbuf_r>
 8012578:	9900      	ldr	r1, [sp, #0]
 801257a:	4605      	mov	r5, r0
 801257c:	4630      	mov	r0, r6
 801257e:	f7ff fb23 	bl	8011bc8 <_malloc_r>
 8012582:	b948      	cbnz	r0, 8012598 <__smakebuf_r+0x44>
 8012584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012588:	059a      	lsls	r2, r3, #22
 801258a:	d4ef      	bmi.n	801256c <__smakebuf_r+0x18>
 801258c:	f023 0303 	bic.w	r3, r3, #3
 8012590:	f043 0302 	orr.w	r3, r3, #2
 8012594:	81a3      	strh	r3, [r4, #12]
 8012596:	e7e3      	b.n	8012560 <__smakebuf_r+0xc>
 8012598:	4b0d      	ldr	r3, [pc, #52]	; (80125d0 <__smakebuf_r+0x7c>)
 801259a:	62b3      	str	r3, [r6, #40]	; 0x28
 801259c:	89a3      	ldrh	r3, [r4, #12]
 801259e:	6020      	str	r0, [r4, #0]
 80125a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125a4:	81a3      	strh	r3, [r4, #12]
 80125a6:	9b00      	ldr	r3, [sp, #0]
 80125a8:	6163      	str	r3, [r4, #20]
 80125aa:	9b01      	ldr	r3, [sp, #4]
 80125ac:	6120      	str	r0, [r4, #16]
 80125ae:	b15b      	cbz	r3, 80125c8 <__smakebuf_r+0x74>
 80125b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125b4:	4630      	mov	r0, r6
 80125b6:	f000 f8c9 	bl	801274c <_isatty_r>
 80125ba:	b128      	cbz	r0, 80125c8 <__smakebuf_r+0x74>
 80125bc:	89a3      	ldrh	r3, [r4, #12]
 80125be:	f023 0303 	bic.w	r3, r3, #3
 80125c2:	f043 0301 	orr.w	r3, r3, #1
 80125c6:	81a3      	strh	r3, [r4, #12]
 80125c8:	89a0      	ldrh	r0, [r4, #12]
 80125ca:	4305      	orrs	r5, r0
 80125cc:	81a5      	strh	r5, [r4, #12]
 80125ce:	e7cd      	b.n	801256c <__smakebuf_r+0x18>
 80125d0:	08012365 	.word	0x08012365

080125d4 <_raise_r>:
 80125d4:	291f      	cmp	r1, #31
 80125d6:	b538      	push	{r3, r4, r5, lr}
 80125d8:	4604      	mov	r4, r0
 80125da:	460d      	mov	r5, r1
 80125dc:	d904      	bls.n	80125e8 <_raise_r+0x14>
 80125de:	2316      	movs	r3, #22
 80125e0:	6003      	str	r3, [r0, #0]
 80125e2:	f04f 30ff 	mov.w	r0, #4294967295
 80125e6:	bd38      	pop	{r3, r4, r5, pc}
 80125e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80125ea:	b112      	cbz	r2, 80125f2 <_raise_r+0x1e>
 80125ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80125f0:	b94b      	cbnz	r3, 8012606 <_raise_r+0x32>
 80125f2:	4620      	mov	r0, r4
 80125f4:	f000 f830 	bl	8012658 <_getpid_r>
 80125f8:	462a      	mov	r2, r5
 80125fa:	4601      	mov	r1, r0
 80125fc:	4620      	mov	r0, r4
 80125fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012602:	f000 b817 	b.w	8012634 <_kill_r>
 8012606:	2b01      	cmp	r3, #1
 8012608:	d00a      	beq.n	8012620 <_raise_r+0x4c>
 801260a:	1c59      	adds	r1, r3, #1
 801260c:	d103      	bne.n	8012616 <_raise_r+0x42>
 801260e:	2316      	movs	r3, #22
 8012610:	6003      	str	r3, [r0, #0]
 8012612:	2001      	movs	r0, #1
 8012614:	e7e7      	b.n	80125e6 <_raise_r+0x12>
 8012616:	2400      	movs	r4, #0
 8012618:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801261c:	4628      	mov	r0, r5
 801261e:	4798      	blx	r3
 8012620:	2000      	movs	r0, #0
 8012622:	e7e0      	b.n	80125e6 <_raise_r+0x12>

08012624 <raise>:
 8012624:	4b02      	ldr	r3, [pc, #8]	; (8012630 <raise+0xc>)
 8012626:	4601      	mov	r1, r0
 8012628:	6818      	ldr	r0, [r3, #0]
 801262a:	f7ff bfd3 	b.w	80125d4 <_raise_r>
 801262e:	bf00      	nop
 8012630:	24000048 	.word	0x24000048

08012634 <_kill_r>:
 8012634:	b538      	push	{r3, r4, r5, lr}
 8012636:	4d07      	ldr	r5, [pc, #28]	; (8012654 <_kill_r+0x20>)
 8012638:	2300      	movs	r3, #0
 801263a:	4604      	mov	r4, r0
 801263c:	4608      	mov	r0, r1
 801263e:	4611      	mov	r1, r2
 8012640:	602b      	str	r3, [r5, #0]
 8012642:	f7f1 fdff 	bl	8004244 <_kill>
 8012646:	1c43      	adds	r3, r0, #1
 8012648:	d102      	bne.n	8012650 <_kill_r+0x1c>
 801264a:	682b      	ldr	r3, [r5, #0]
 801264c:	b103      	cbz	r3, 8012650 <_kill_r+0x1c>
 801264e:	6023      	str	r3, [r4, #0]
 8012650:	bd38      	pop	{r3, r4, r5, pc}
 8012652:	bf00      	nop
 8012654:	24000fd4 	.word	0x24000fd4

08012658 <_getpid_r>:
 8012658:	f7f1 bdec 	b.w	8004234 <_getpid>

0801265c <__sread>:
 801265c:	b510      	push	{r4, lr}
 801265e:	460c      	mov	r4, r1
 8012660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012664:	f000 f894 	bl	8012790 <_read_r>
 8012668:	2800      	cmp	r0, #0
 801266a:	bfab      	itete	ge
 801266c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801266e:	89a3      	ldrhlt	r3, [r4, #12]
 8012670:	181b      	addge	r3, r3, r0
 8012672:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012676:	bfac      	ite	ge
 8012678:	6563      	strge	r3, [r4, #84]	; 0x54
 801267a:	81a3      	strhlt	r3, [r4, #12]
 801267c:	bd10      	pop	{r4, pc}

0801267e <__swrite>:
 801267e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012682:	461f      	mov	r7, r3
 8012684:	898b      	ldrh	r3, [r1, #12]
 8012686:	05db      	lsls	r3, r3, #23
 8012688:	4605      	mov	r5, r0
 801268a:	460c      	mov	r4, r1
 801268c:	4616      	mov	r6, r2
 801268e:	d505      	bpl.n	801269c <__swrite+0x1e>
 8012690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012694:	2302      	movs	r3, #2
 8012696:	2200      	movs	r2, #0
 8012698:	f000 f868 	bl	801276c <_lseek_r>
 801269c:	89a3      	ldrh	r3, [r4, #12]
 801269e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80126a6:	81a3      	strh	r3, [r4, #12]
 80126a8:	4632      	mov	r2, r6
 80126aa:	463b      	mov	r3, r7
 80126ac:	4628      	mov	r0, r5
 80126ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126b2:	f000 b817 	b.w	80126e4 <_write_r>

080126b6 <__sseek>:
 80126b6:	b510      	push	{r4, lr}
 80126b8:	460c      	mov	r4, r1
 80126ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126be:	f000 f855 	bl	801276c <_lseek_r>
 80126c2:	1c43      	adds	r3, r0, #1
 80126c4:	89a3      	ldrh	r3, [r4, #12]
 80126c6:	bf15      	itete	ne
 80126c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80126ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80126ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80126d2:	81a3      	strheq	r3, [r4, #12]
 80126d4:	bf18      	it	ne
 80126d6:	81a3      	strhne	r3, [r4, #12]
 80126d8:	bd10      	pop	{r4, pc}

080126da <__sclose>:
 80126da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126de:	f000 b813 	b.w	8012708 <_close_r>
	...

080126e4 <_write_r>:
 80126e4:	b538      	push	{r3, r4, r5, lr}
 80126e6:	4d07      	ldr	r5, [pc, #28]	; (8012704 <_write_r+0x20>)
 80126e8:	4604      	mov	r4, r0
 80126ea:	4608      	mov	r0, r1
 80126ec:	4611      	mov	r1, r2
 80126ee:	2200      	movs	r2, #0
 80126f0:	602a      	str	r2, [r5, #0]
 80126f2:	461a      	mov	r2, r3
 80126f4:	f7f1 fddd 	bl	80042b2 <_write>
 80126f8:	1c43      	adds	r3, r0, #1
 80126fa:	d102      	bne.n	8012702 <_write_r+0x1e>
 80126fc:	682b      	ldr	r3, [r5, #0]
 80126fe:	b103      	cbz	r3, 8012702 <_write_r+0x1e>
 8012700:	6023      	str	r3, [r4, #0]
 8012702:	bd38      	pop	{r3, r4, r5, pc}
 8012704:	24000fd4 	.word	0x24000fd4

08012708 <_close_r>:
 8012708:	b538      	push	{r3, r4, r5, lr}
 801270a:	4d06      	ldr	r5, [pc, #24]	; (8012724 <_close_r+0x1c>)
 801270c:	2300      	movs	r3, #0
 801270e:	4604      	mov	r4, r0
 8012710:	4608      	mov	r0, r1
 8012712:	602b      	str	r3, [r5, #0]
 8012714:	f7f1 fde9 	bl	80042ea <_close>
 8012718:	1c43      	adds	r3, r0, #1
 801271a:	d102      	bne.n	8012722 <_close_r+0x1a>
 801271c:	682b      	ldr	r3, [r5, #0]
 801271e:	b103      	cbz	r3, 8012722 <_close_r+0x1a>
 8012720:	6023      	str	r3, [r4, #0]
 8012722:	bd38      	pop	{r3, r4, r5, pc}
 8012724:	24000fd4 	.word	0x24000fd4

08012728 <_fstat_r>:
 8012728:	b538      	push	{r3, r4, r5, lr}
 801272a:	4d07      	ldr	r5, [pc, #28]	; (8012748 <_fstat_r+0x20>)
 801272c:	2300      	movs	r3, #0
 801272e:	4604      	mov	r4, r0
 8012730:	4608      	mov	r0, r1
 8012732:	4611      	mov	r1, r2
 8012734:	602b      	str	r3, [r5, #0]
 8012736:	f7f1 fde4 	bl	8004302 <_fstat>
 801273a:	1c43      	adds	r3, r0, #1
 801273c:	d102      	bne.n	8012744 <_fstat_r+0x1c>
 801273e:	682b      	ldr	r3, [r5, #0]
 8012740:	b103      	cbz	r3, 8012744 <_fstat_r+0x1c>
 8012742:	6023      	str	r3, [r4, #0]
 8012744:	bd38      	pop	{r3, r4, r5, pc}
 8012746:	bf00      	nop
 8012748:	24000fd4 	.word	0x24000fd4

0801274c <_isatty_r>:
 801274c:	b538      	push	{r3, r4, r5, lr}
 801274e:	4d06      	ldr	r5, [pc, #24]	; (8012768 <_isatty_r+0x1c>)
 8012750:	2300      	movs	r3, #0
 8012752:	4604      	mov	r4, r0
 8012754:	4608      	mov	r0, r1
 8012756:	602b      	str	r3, [r5, #0]
 8012758:	f7f1 fde3 	bl	8004322 <_isatty>
 801275c:	1c43      	adds	r3, r0, #1
 801275e:	d102      	bne.n	8012766 <_isatty_r+0x1a>
 8012760:	682b      	ldr	r3, [r5, #0]
 8012762:	b103      	cbz	r3, 8012766 <_isatty_r+0x1a>
 8012764:	6023      	str	r3, [r4, #0]
 8012766:	bd38      	pop	{r3, r4, r5, pc}
 8012768:	24000fd4 	.word	0x24000fd4

0801276c <_lseek_r>:
 801276c:	b538      	push	{r3, r4, r5, lr}
 801276e:	4d07      	ldr	r5, [pc, #28]	; (801278c <_lseek_r+0x20>)
 8012770:	4604      	mov	r4, r0
 8012772:	4608      	mov	r0, r1
 8012774:	4611      	mov	r1, r2
 8012776:	2200      	movs	r2, #0
 8012778:	602a      	str	r2, [r5, #0]
 801277a:	461a      	mov	r2, r3
 801277c:	f7f1 fddc 	bl	8004338 <_lseek>
 8012780:	1c43      	adds	r3, r0, #1
 8012782:	d102      	bne.n	801278a <_lseek_r+0x1e>
 8012784:	682b      	ldr	r3, [r5, #0]
 8012786:	b103      	cbz	r3, 801278a <_lseek_r+0x1e>
 8012788:	6023      	str	r3, [r4, #0]
 801278a:	bd38      	pop	{r3, r4, r5, pc}
 801278c:	24000fd4 	.word	0x24000fd4

08012790 <_read_r>:
 8012790:	b538      	push	{r3, r4, r5, lr}
 8012792:	4d07      	ldr	r5, [pc, #28]	; (80127b0 <_read_r+0x20>)
 8012794:	4604      	mov	r4, r0
 8012796:	4608      	mov	r0, r1
 8012798:	4611      	mov	r1, r2
 801279a:	2200      	movs	r2, #0
 801279c:	602a      	str	r2, [r5, #0]
 801279e:	461a      	mov	r2, r3
 80127a0:	f7f1 fd6a 	bl	8004278 <_read>
 80127a4:	1c43      	adds	r3, r0, #1
 80127a6:	d102      	bne.n	80127ae <_read_r+0x1e>
 80127a8:	682b      	ldr	r3, [r5, #0]
 80127aa:	b103      	cbz	r3, 80127ae <_read_r+0x1e>
 80127ac:	6023      	str	r3, [r4, #0]
 80127ae:	bd38      	pop	{r3, r4, r5, pc}
 80127b0:	24000fd4 	.word	0x24000fd4

080127b4 <_init>:
 80127b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127b6:	bf00      	nop
 80127b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127ba:	bc08      	pop	{r3}
 80127bc:	469e      	mov	lr, r3
 80127be:	4770      	bx	lr

080127c0 <_fini>:
 80127c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127c2:	bf00      	nop
 80127c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127c6:	bc08      	pop	{r3}
 80127c8:	469e      	mov	lr, r3
 80127ca:	4770      	bx	lr
