
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f370  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  0800f610  0800f610  0001f610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fcac  0800fcac  0001fcac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fcb4  0800fcb4  0001fcb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fcb8  0800fcb8  0001fcb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  20000000  0800fcbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007a4  200001e8  0800fea4  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000098c  0800fea4  0002098c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023ce2  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000397c  00000000  00000000  00043ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001428  00000000  00000000  00047878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001328  00000000  00000000  00048ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038d9b  00000000  00000000  00049fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019ae9  00000000  00000000  00082d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167c5c  00000000  00000000  0009c84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002044a8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000066f0  00000000  00000000  002044fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001e8 	.word	0x200001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f5f8 	.word	0x0800f5f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001ec 	.word	0x200001ec
 80002dc:	0800f5f8 	.word	0x0800f5f8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <PIDInit>:
float q_s[5], q_g[5], theta_q[5], ang_pos[5], ang_vel[5], ang_acc[5];
float C0x = 0.705,C2x,C3x,C0y,C2y,C3y;
float T;
float t = 0.;

void PIDInit(findchessPID_t *_PID, float _Kp, float _Ki, float _Kd, float _Iminlimit, float _Imaxlimit, float _Ddbd){
 8000688:	b480      	push	{r7}
 800068a:	b089      	sub	sp, #36	; 0x24
 800068c:	af00      	add	r7, sp, #0
 800068e:	61f8      	str	r0, [r7, #28]
 8000690:	ed87 0a06 	vstr	s0, [r7, #24]
 8000694:	edc7 0a05 	vstr	s1, [r7, #20]
 8000698:	ed87 1a04 	vstr	s2, [r7, #16]
 800069c:	edc7 1a03 	vstr	s3, [r7, #12]
 80006a0:	ed87 2a02 	vstr	s4, [r7, #8]
 80006a4:	edc7 2a01 	vstr	s5, [r7, #4]
	_PID->Kp = _Kp;
 80006a8:	69fb      	ldr	r3, [r7, #28]
 80006aa:	69ba      	ldr	r2, [r7, #24]
 80006ac:	601a      	str	r2, [r3, #0]
	_PID->Ki = _Ki;
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	605a      	str	r2, [r3, #4]
	_PID->Kd = _Kd;
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	693a      	ldr	r2, [r7, #16]
 80006b8:	609a      	str	r2, [r3, #8]
	_PID->I_Err = 0;
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	f04f 0200 	mov.w	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
	_PID->D_Err = 0;
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	f04f 0200 	mov.w	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
	_PID->I_MinLimit = _Iminlimit;
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	68fa      	ldr	r2, [r7, #12]
 80006ce:	615a      	str	r2, [r3, #20]
	_PID->I_MaxLimit = _Imaxlimit;
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	619a      	str	r2, [r3, #24]
	_PID->DeadBand = _Ddbd;
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	625a      	str	r2, [r3, #36]	; 0x24
}
 80006dc:	bf00      	nop
 80006de:	3724      	adds	r7, #36	; 0x24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <PIDCalculate>:

float PIDCalculate(findchessPID_t *_PID, float _setPoint, float _inputValue){
 80006e8:	b480      	push	{r7}
 80006ea:	b087      	sub	sp, #28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80006f4:	edc7 0a01 	vstr	s1, [r7, #4]
	static float Previous_Err = 0;
	float Err = _setPoint - _inputValue;
 80006f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80006fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000700:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000704:	edc7 7a04 	vstr	s15, [r7, #16]
	if (fabs(Err) < _PID->DeadBand){
 8000708:	edd7 7a04 	vldr	s15, [r7, #16]
 800070c:	eeb0 7ae7 	vabs.f32	s14, s15
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000716:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800071a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071e:	d502      	bpl.n	8000726 <PIDCalculate+0x3e>
		return 0;
 8000720:	f04f 0300 	mov.w	r3, #0
 8000724:	e073      	b.n	800080e <PIDCalculate+0x126>
	}
	_PID->I_Err += Err;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	ed93 7a03 	vldr	s14, [r3, #12]
 800072c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	edc3 7a03 	vstr	s15, [r3, #12]
	_PID->D_Err -= Err - Previous_Err;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	ed93 7a04 	vldr	s14, [r3, #16]
 8000740:	4b37      	ldr	r3, [pc, #220]	; (8000820 <PIDCalculate+0x138>)
 8000742:	edd3 7a00 	vldr	s15, [r3]
 8000746:	edd7 6a04 	vldr	s13, [r7, #16]
 800074a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800074e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	edc3 7a04 	vstr	s15, [r3, #16]
	if (_PID->I_Err > _PID->I_MaxLimit){
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	ed93 7a03 	vldr	s14, [r3, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	edd3 7a06 	vldr	s15, [r3, #24]
 8000764:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076c:	dd04      	ble.n	8000778 <PIDCalculate+0x90>
	    _PID->I_Err = _PID->I_MaxLimit;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	699a      	ldr	r2, [r3, #24]
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	e00e      	b.n	8000796 <PIDCalculate+0xae>
	}
	else if (_PID->I_Err < _PID->I_MinLimit){
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	ed93 7a03 	vldr	s14, [r3, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	edd3 7a05 	vldr	s15, [r3, #20]
 8000784:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800078c:	d503      	bpl.n	8000796 <PIDCalculate+0xae>
	    _PID->I_Err = _PID->I_MinLimit;
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	695a      	ldr	r2, [r3, #20]
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	60da      	str	r2, [r3, #12]
	}
	float output = (_PID->Kp * Err + _PID->Ki * _PID->I_Err + _PID->Kd * _PID->D_Err);
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	ed93 7a00 	vldr	s14, [r3]
 800079c:	edd7 7a04 	vldr	s15, [r7, #16]
 80007a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	edd3 6a01 	vldr	s13, [r3, #4]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80007b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	edd3 6a02 	vldr	s13, [r3, #8]
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80007c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007cc:	edc7 7a05 	vstr	s15, [r7, #20]
	if (output > _PID->outputMaxLimit){
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	edd3 7a08 	vldr	s15, [r3, #32]
 80007d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80007da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007e2:	dd03      	ble.n	80007ec <PIDCalculate+0x104>
		output = _PID->outputMaxLimit;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	6a1b      	ldr	r3, [r3, #32]
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	e00c      	b.n	8000806 <PIDCalculate+0x11e>
	}
	else if (output < _PID->outputMinLimit){
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80007f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80007f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007fe:	d502      	bpl.n	8000806 <PIDCalculate+0x11e>
		output = _PID->outputMinLimit;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	617b      	str	r3, [r7, #20]
	}
	Previous_Err = Err;
 8000806:	4a06      	ldr	r2, [pc, #24]	; (8000820 <PIDCalculate+0x138>)
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	6013      	str	r3, [r2, #0]
	return output;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	ee07 3a90 	vmov	s15, r3
}
 8000812:	eeb0 0a67 	vmov.f32	s0, s15
 8000816:	371c      	adds	r7, #28
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	20000218 	.word	0x20000218

08000824 <IPK_findChessBot>:
/*
 * Inverse Pose Kinematic Function
 * Updated : 18 Mar 2021 16:44
 * */
void IPK_findChessBot(float X, float Y, float Z, float endEff_Yaw)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	ed2d 8b06 	vpush	{d8-d10}
 800082a:	b092      	sub	sp, #72	; 0x48
 800082c:	af00      	add	r7, sp, #0
 800082e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000832:	edc7 0a02 	vstr	s1, [r7, #8]
 8000836:	ed87 1a01 	vstr	s2, [r7, #4]
 800083a:	edc7 1a00 	vstr	s3, [r7]
	const float l1 = 0.020, l2 = 0.370, l3 = 0.315,
 800083e:	4b87      	ldr	r3, [pc, #540]	; (8000a5c <IPK_findChessBot+0x238>)
 8000840:	647b      	str	r3, [r7, #68]	; 0x44
 8000842:	4b87      	ldr	r3, [pc, #540]	; (8000a60 <IPK_findChessBot+0x23c>)
 8000844:	643b      	str	r3, [r7, #64]	; 0x40
 8000846:	4b87      	ldr	r3, [pc, #540]	; (8000a64 <IPK_findChessBot+0x240>)
 8000848:	63fb      	str	r3, [r7, #60]	; 0x3c
			h1 = 0.125, h3 = 0.065, h4 = 0.190;
 800084a:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 800084e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000850:	4b85      	ldr	r3, [pc, #532]	; (8000a68 <IPK_findChessBot+0x244>)
 8000852:	637b      	str	r3, [r7, #52]	; 0x34
 8000854:	4b85      	ldr	r3, [pc, #532]	; (8000a6c <IPK_findChessBot+0x248>)
 8000856:	633b      	str	r3, [r7, #48]	; 0x30
	float l12 = l1 + l2;
 8000858:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800085c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000864:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	float C3 = (X*X + Y*Y - l12*l12 - l3*l3) / (2 * l12 * l3);
 8000868:	edd7 7a03 	vldr	s15, [r7, #12]
 800086c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000870:	edd7 7a02 	vldr	s15, [r7, #8]
 8000874:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000878:	ee37 7a27 	vadd.f32	s14, s14, s15
 800087c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000880:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000884:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000888:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800088c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000890:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000894:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000898:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800089c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80008a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008a8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float S3 = sqrt(1 - (C3 * C3));
 80008ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80008b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80008b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80008b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008c0:	eeb0 0b47 	vmov.f64	d0, d7
 80008c4:	f00b fa80 	bl	800bdc8 <sqrt>
 80008c8:	eeb0 7b40 	vmov.f64	d7, d0
 80008cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float q3 = atan2(S3, C3);
 80008d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80008d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008dc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80008e0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80008e4:	eeb0 1b46 	vmov.f64	d1, d6
 80008e8:	eeb0 0b47 	vmov.f64	d0, d7
 80008ec:	f00b fa68 	bl	800bdc0 <atan2>
 80008f0:	eeb0 7b40 	vmov.f64	d7, d0
 80008f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008f8:	edc7 7a08 	vstr	s15, [r7, #32]

    float S1 = -l3 * sin(q3) * X + (l12 + l3*cos(q3)) * Y;
 80008fc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000900:	eef1 7a67 	vneg.f32	s15, s15
 8000904:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000908:	edd7 7a08 	vldr	s15, [r7, #32]
 800090c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000910:	eeb0 0b47 	vmov.f64	d0, d7
 8000914:	f00b fa0c 	bl	800bd30 <sin>
 8000918:	eeb0 7b40 	vmov.f64	d7, d0
 800091c:	ee28 6b07 	vmul.f64	d6, d8, d7
 8000920:	edd7 7a03 	vldr	s15, [r7, #12]
 8000924:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000928:	ee26 8b07 	vmul.f64	d8, d6, d7
 800092c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000930:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000934:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000938:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800093c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000940:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000944:	eeb0 0b47 	vmov.f64	d0, d7
 8000948:	f00b f962 	bl	800bc10 <cos>
 800094c:	eeb0 7b40 	vmov.f64	d7, d0
 8000950:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8000954:	ee39 6b07 	vadd.f64	d6, d9, d7
 8000958:	edd7 7a02 	vldr	s15, [r7, #8]
 800095c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000960:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000964:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000968:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800096c:	edc7 7a07 	vstr	s15, [r7, #28]
    float C1 = l3 * sin(q3) * Y + (l12 + l3*cos(q3)) * X;
 8000970:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000974:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000978:	edd7 7a08 	vldr	s15, [r7, #32]
 800097c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000980:	eeb0 0b47 	vmov.f64	d0, d7
 8000984:	f00b f9d4 	bl	800bd30 <sin>
 8000988:	eeb0 7b40 	vmov.f64	d7, d0
 800098c:	ee28 6b07 	vmul.f64	d6, d8, d7
 8000990:	edd7 7a02 	vldr	s15, [r7, #8]
 8000994:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000998:	ee26 8b07 	vmul.f64	d8, d6, d7
 800099c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80009a0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80009a4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80009a8:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80009ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80009b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009b4:	eeb0 0b47 	vmov.f64	d0, d7
 80009b8:	f00b f92a 	bl	800bc10 <cos>
 80009bc:	eeb0 7b40 	vmov.f64	d7, d0
 80009c0:	ee2a 7b07 	vmul.f64	d7, d10, d7
 80009c4:	ee39 6b07 	vadd.f64	d6, d9, d7
 80009c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80009cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009d0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80009d4:	ee38 7b07 	vadd.f64	d7, d8, d7
 80009d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009dc:	edc7 7a06 	vstr	s15, [r7, #24]
    float q1 = atan2(S1, C1);
 80009e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80009e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009e8:	edd7 6a06 	vldr	s13, [r7, #24]
 80009ec:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80009f0:	eeb0 1b46 	vmov.f64	d1, d6
 80009f4:	eeb0 0b47 	vmov.f64	d0, d7
 80009f8:	f00b f9e2 	bl	800bdc0 <atan2>
 80009fc:	eeb0 7b40 	vmov.f64	d7, d0
 8000a00:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a04:	edc7 7a05 	vstr	s15, [r7, #20]
    if(endEff_Yaw - q1 - q3 < -2.880 || endEff_Yaw - q1 - q3 > 2.880)
    {
        printf("Out of range for q4\n");
		return;
    }*/
	q[0] = q1;
 8000a08:	4a19      	ldr	r2, [pc, #100]	; (8000a70 <IPK_findChessBot+0x24c>)
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	6013      	str	r3, [r2, #0]
	q[1] = Z + h4 - h3 - h1;
 8000a0e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a12:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000a16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a1a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000a1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a22:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <IPK_findChessBot+0x24c>)
 8000a2c:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] = q3;
 8000a30:	4a0f      	ldr	r2, [pc, #60]	; (8000a70 <IPK_findChessBot+0x24c>)
 8000a32:	6a3b      	ldr	r3, [r7, #32]
 8000a34:	6093      	str	r3, [r2, #8]
	q[3] = endEff_Yaw - q1 - q3;
 8000a36:	ed97 7a00 	vldr	s14, [r7]
 8000a3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a42:	edd7 7a08 	vldr	s15, [r7, #32]
 8000a46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <IPK_findChessBot+0x24c>)
 8000a4c:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8000a50:	bf00      	nop
 8000a52:	3748      	adds	r7, #72	; 0x48
 8000a54:	46bd      	mov	sp, r7
 8000a56:	ecbd 8b06 	vpop	{d8-d10}
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	3ca3d70a 	.word	0x3ca3d70a
 8000a60:	3ebd70a4 	.word	0x3ebd70a4
 8000a64:	3ea147ae 	.word	0x3ea147ae
 8000a68:	3d851eb8 	.word	0x3d851eb8
 8000a6c:	3e428f5c 	.word	0x3e428f5c
 8000a70:	20000204 	.word	0x20000204
 8000a74:	00000000 	.word	0x00000000

08000a78 <StepDriveRad>:
/*
 * Stepper motor driving function (Radian input)
 * Updated : 18 Mar 2021 16:44
 * */
void StepDriveRad(char _ch, double _ang_v)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	ed87 0b00 	vstr	d0, [r7]
 8000a84:	73fb      	strb	r3, [r7, #15]
	switch(_ch)
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	2b04      	cmp	r3, #4
 8000a8c:	f200 8212 	bhi.w	8000eb4 <StepDriveRad+0x43c>
 8000a90:	a201      	add	r2, pc, #4	; (adr r2, 8000a98 <StepDriveRad+0x20>)
 8000a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a96:	bf00      	nop
 8000a98:	08000aad 	.word	0x08000aad
 8000a9c:	08000b73 	.word	0x08000b73
 8000aa0:	08000c45 	.word	0x08000c45
 8000aa4:	08000d07 	.word	0x08000d07
 8000aa8:	08000dcd 	.word	0x08000dcd
	{
		case STEPJ1:
		{
			ang_vel[0] = _ang_v;
 8000aac:	ed97 7b00 	vldr	d7, [r7]
 8000ab0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ab4:	4bd2      	ldr	r3, [pc, #840]	; (8000e00 <StepDriveRad+0x388>)
 8000ab6:	edc3 7a00 	vstr	s15, [r3]
			/* Direction of Joint1's Stepper Motor */
			if(_ang_v < 0)
 8000aba:	ed97 7b00 	vldr	d7, [r7]
 8000abe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac6:	d506      	bpl.n	8000ad6 <StepDriveRad+0x5e>
			{
				HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_SET);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ace:	48cd      	ldr	r0, [pc, #820]	; (8000e04 <StepDriveRad+0x38c>)
 8000ad0:	f005 f89a 	bl	8005c08 <HAL_GPIO_WritePin>
 8000ad4:	e005      	b.n	8000ae2 <StepDriveRad+0x6a>
			}
			else
			{
				HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000adc:	48c9      	ldr	r0, [pc, #804]	; (8000e04 <StepDriveRad+0x38c>)
 8000ade:	f005 f893 	bl	8005c08 <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Joint1's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM1->ARR is undefined value.
 8000ae2:	ed97 7b00 	vldr	d7, [r7]
 8000ae6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aee:	d107      	bne.n	8000b00 <StepDriveRad+0x88>
			{
				TIM1->CCR2 = 0;
 8000af0:	4bc5      	ldr	r3, [pc, #788]	; (8000e08 <StepDriveRad+0x390>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->ARR = 625-1;
 8000af6:	4bc4      	ldr	r3, [pc, #784]	; (8000e08 <StepDriveRad+0x390>)
 8000af8:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000afc:	62da      	str	r2, [r3, #44]	; 0x2c
			else
			{
				TIM1->ARR = round((6.283*_FCY)/(1600*((TIM1->PSC)+1)*abs(_ang_v))) - 1;
				TIM1->CCR2 = round(((TIM1->ARR)+1)/2);
			}
			break;
 8000afe:	e1d9      	b.n	8000eb4 <StepDriveRad+0x43c>
				TIM1->ARR = round((6.283*_FCY)/(1600*((TIM1->PSC)+1)*abs(_ang_v))) - 1;
 8000b00:	4bc1      	ldr	r3, [pc, #772]	; (8000e08 <StepDriveRad+0x390>)
 8000b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b04:	3301      	adds	r3, #1
 8000b06:	ed97 7b00 	vldr	d7, [r7]
 8000b0a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b0e:	ee17 2a90 	vmov	r2, s15
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	bfb8      	it	lt
 8000b16:	4252      	neglt	r2, r2
 8000b18:	fb02 f303 	mul.w	r3, r2, r3
 8000b1c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000b20:	fb02 f303 	mul.w	r3, r2, r3
 8000b24:	ee07 3a90 	vmov	s15, r3
 8000b28:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000b2c:	ed9f 5bb2 	vldr	d5, [pc, #712]	; 8000df8 <StepDriveRad+0x380>
 8000b30:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000b34:	eeb0 0b46 	vmov.f64	d0, d6
 8000b38:	f00b f8b2 	bl	800bca0 <round>
 8000b3c:	eeb0 7b40 	vmov.f64	d7, d0
 8000b40:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000b44:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000b48:	4baf      	ldr	r3, [pc, #700]	; (8000e08 <StepDriveRad+0x390>)
 8000b4a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b4e:	ee17 2a90 	vmov	r2, s15
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM1->CCR2 = round(((TIM1->ARR)+1)/2);
 8000b54:	4bac      	ldr	r3, [pc, #688]	; (8000e08 <StepDriveRad+0x390>)
 8000b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b58:	3301      	adds	r3, #1
 8000b5a:	085b      	lsrs	r3, r3, #1
 8000b5c:	ee07 3a90 	vmov	s15, r3
 8000b60:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000b64:	4ba8      	ldr	r3, [pc, #672]	; (8000e08 <StepDriveRad+0x390>)
 8000b66:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b6a:	ee17 2a90 	vmov	r2, s15
 8000b6e:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000b70:	e1a0      	b.n	8000eb4 <StepDriveRad+0x43c>
		}
		case STEPJ2:
		{
			ang_vel[1] = _ang_v;
 8000b72:	ed97 7b00 	vldr	d7, [r7]
 8000b76:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b7a:	4ba1      	ldr	r3, [pc, #644]	; (8000e00 <StepDriveRad+0x388>)
 8000b7c:	edc3 7a01 	vstr	s15, [r3, #4]
			/* Direction of Joint2's Stepper Motor */
			if(_ang_v < 0)
 8000b80:	ed97 7b00 	vldr	d7, [r7]
 8000b84:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b8c:	d506      	bpl.n	8000b9c <StepDriveRad+0x124>
			{
				HAL_GPIO_WritePin(DIR_2_GPIO_Port, DIR_2_Pin, GPIO_PIN_SET);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b94:	489d      	ldr	r0, [pc, #628]	; (8000e0c <StepDriveRad+0x394>)
 8000b96:	f005 f837 	bl	8005c08 <HAL_GPIO_WritePin>
 8000b9a:	e005      	b.n	8000ba8 <StepDriveRad+0x130>
			}
			else
			{
				HAL_GPIO_WritePin(DIR_2_GPIO_Port, DIR_2_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ba2:	489a      	ldr	r0, [pc, #616]	; (8000e0c <StepDriveRad+0x394>)
 8000ba4:	f005 f830 	bl	8005c08 <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Joint2's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM2->ARR is undefined value.
 8000ba8:	ed97 7b00 	vldr	d7, [r7]
 8000bac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb4:	d109      	bne.n	8000bca <StepDriveRad+0x152>
			{
				TIM2->CCR3 = 0;
 8000bb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bba:	2200      	movs	r2, #0
 8000bbc:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM2->ARR = 625-1;
 8000bbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bc2:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000bc6:	62da      	str	r2, [r3, #44]	; 0x2c
			else
			{
				TIM2->ARR = round((6.283*_FCY)/(1600*((TIM2->PSC)+1)*abs(_ang_v))) - 1;
				TIM2->CCR3 = round(((TIM2->ARR)+1)/2);
			}
			break;
 8000bc8:	e174      	b.n	8000eb4 <StepDriveRad+0x43c>
				TIM2->ARR = round((6.283*_FCY)/(1600*((TIM2->PSC)+1)*abs(_ang_v))) - 1;
 8000bca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	ed97 7b00 	vldr	d7, [r7]
 8000bd6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000bda:	ee17 2a90 	vmov	r2, s15
 8000bde:	2a00      	cmp	r2, #0
 8000be0:	bfb8      	it	lt
 8000be2:	4252      	neglt	r2, r2
 8000be4:	fb02 f303 	mul.w	r3, r2, r3
 8000be8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000bec:	fb02 f303 	mul.w	r3, r2, r3
 8000bf0:	ee07 3a90 	vmov	s15, r3
 8000bf4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000bf8:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 8000df8 <StepDriveRad+0x380>
 8000bfc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000c00:	eeb0 0b46 	vmov.f64	d0, d6
 8000c04:	f00b f84c 	bl	800bca0 <round>
 8000c08:	eeb0 7b40 	vmov.f64	d7, d0
 8000c0c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000c10:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000c14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c18:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c1c:	ee17 2a90 	vmov	r2, s15
 8000c20:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM2->CCR3 = round(((TIM2->ARR)+1)/2);
 8000c22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c28:	3301      	adds	r3, #1
 8000c2a:	085b      	lsrs	r3, r3, #1
 8000c2c:	ee07 3a90 	vmov	s15, r3
 8000c30:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000c34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c38:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c3c:	ee17 2a90 	vmov	r2, s15
 8000c40:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000c42:	e137      	b.n	8000eb4 <StepDriveRad+0x43c>
		}
		case STEPJ3:
		{
			ang_vel[2] = _ang_v;
 8000c44:	ed97 7b00 	vldr	d7, [r7]
 8000c48:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c4c:	4b6c      	ldr	r3, [pc, #432]	; (8000e00 <StepDriveRad+0x388>)
 8000c4e:	edc3 7a02 	vstr	s15, [r3, #8]
			/* Direction of Joint3's Stepper Motor */
			if(_ang_v < 0)
 8000c52:	ed97 7b00 	vldr	d7, [r7]
 8000c56:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c5e:	d505      	bpl.n	8000c6c <StepDriveRad+0x1f4>
			{
				HAL_GPIO_WritePin(DIR_3_GPIO_Port, DIR_3_Pin, GPIO_PIN_SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2120      	movs	r1, #32
 8000c64:	4869      	ldr	r0, [pc, #420]	; (8000e0c <StepDriveRad+0x394>)
 8000c66:	f004 ffcf 	bl	8005c08 <HAL_GPIO_WritePin>
 8000c6a:	e004      	b.n	8000c76 <StepDriveRad+0x1fe>
			}
			else
			{
				HAL_GPIO_WritePin(DIR_3_GPIO_Port, DIR_3_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2120      	movs	r1, #32
 8000c70:	4866      	ldr	r0, [pc, #408]	; (8000e0c <StepDriveRad+0x394>)
 8000c72:	f004 ffc9 	bl	8005c08 <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Joint3's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM3->ARR is undefined value.
 8000c76:	ed97 7b00 	vldr	d7, [r7]
 8000c7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c82:	d107      	bne.n	8000c94 <StepDriveRad+0x21c>
			{
				TIM3->CCR1 = 0;
 8000c84:	4b62      	ldr	r3, [pc, #392]	; (8000e10 <StepDriveRad+0x398>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	635a      	str	r2, [r3, #52]	; 0x34
				TIM3->ARR = 625-1;
 8000c8a:	4b61      	ldr	r3, [pc, #388]	; (8000e10 <StepDriveRad+0x398>)
 8000c8c:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000c90:	62da      	str	r2, [r3, #44]	; 0x2c
			else
			{
				TIM3->ARR = round((6.283*_FCY)/(1600*((TIM3->PSC)+1)*abs(_ang_v))) - 1;
				TIM3->CCR1 = round(((TIM3->ARR)+1)/2);
			}
			break;
 8000c92:	e10f      	b.n	8000eb4 <StepDriveRad+0x43c>
				TIM3->ARR = round((6.283*_FCY)/(1600*((TIM3->PSC)+1)*abs(_ang_v))) - 1;
 8000c94:	4b5e      	ldr	r3, [pc, #376]	; (8000e10 <StepDriveRad+0x398>)
 8000c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c98:	3301      	adds	r3, #1
 8000c9a:	ed97 7b00 	vldr	d7, [r7]
 8000c9e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ca2:	ee17 2a90 	vmov	r2, s15
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	bfb8      	it	lt
 8000caa:	4252      	neglt	r2, r2
 8000cac:	fb02 f303 	mul.w	r3, r2, r3
 8000cb0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000cb4:	fb02 f303 	mul.w	r3, r2, r3
 8000cb8:	ee07 3a90 	vmov	s15, r3
 8000cbc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000cc0:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8000df8 <StepDriveRad+0x380>
 8000cc4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000cc8:	eeb0 0b46 	vmov.f64	d0, d6
 8000ccc:	f00a ffe8 	bl	800bca0 <round>
 8000cd0:	eeb0 7b40 	vmov.f64	d7, d0
 8000cd4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000cd8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000cdc:	4b4c      	ldr	r3, [pc, #304]	; (8000e10 <StepDriveRad+0x398>)
 8000cde:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ce2:	ee17 2a90 	vmov	r2, s15
 8000ce6:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM3->CCR1 = round(((TIM3->ARR)+1)/2);
 8000ce8:	4b49      	ldr	r3, [pc, #292]	; (8000e10 <StepDriveRad+0x398>)
 8000cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cec:	3301      	adds	r3, #1
 8000cee:	085b      	lsrs	r3, r3, #1
 8000cf0:	ee07 3a90 	vmov	s15, r3
 8000cf4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000cf8:	4b45      	ldr	r3, [pc, #276]	; (8000e10 <StepDriveRad+0x398>)
 8000cfa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000cfe:	ee17 2a90 	vmov	r2, s15
 8000d02:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000d04:	e0d6      	b.n	8000eb4 <StepDriveRad+0x43c>
		}
		case STEPJ4:
		{
			ang_vel[3] = _ang_v;
 8000d06:	ed97 7b00 	vldr	d7, [r7]
 8000d0a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d0e:	4b3c      	ldr	r3, [pc, #240]	; (8000e00 <StepDriveRad+0x388>)
 8000d10:	edc3 7a03 	vstr	s15, [r3, #12]
			/* Direction of Joint4's Stepper Motor */
			if(_ang_v < 0)
 8000d14:	ed97 7b00 	vldr	d7, [r7]
 8000d18:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d20:	d506      	bpl.n	8000d30 <StepDriveRad+0x2b8>
			{
				HAL_GPIO_WritePin(DIR_4_GPIO_Port, DIR_4_Pin, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d28:	4838      	ldr	r0, [pc, #224]	; (8000e0c <StepDriveRad+0x394>)
 8000d2a:	f004 ff6d 	bl	8005c08 <HAL_GPIO_WritePin>
 8000d2e:	e005      	b.n	8000d3c <StepDriveRad+0x2c4>
			}
			else
			{
				HAL_GPIO_WritePin(DIR_4_GPIO_Port, DIR_4_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d36:	4835      	ldr	r0, [pc, #212]	; (8000e0c <StepDriveRad+0x394>)
 8000d38:	f004 ff66 	bl	8005c08 <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Joint4's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM4->ARR is undefined value.
 8000d3c:	ed97 7b00 	vldr	d7, [r7]
 8000d40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d48:	d107      	bne.n	8000d5a <StepDriveRad+0x2e2>
			{
				TIM4->CCR3 = 0;
 8000d4a:	4b32      	ldr	r3, [pc, #200]	; (8000e14 <StepDriveRad+0x39c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM4->ARR = 625-1;
 8000d50:	4b30      	ldr	r3, [pc, #192]	; (8000e14 <StepDriveRad+0x39c>)
 8000d52:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000d56:	62da      	str	r2, [r3, #44]	; 0x2c
			else
			{
				TIM4->ARR = round((6.283*_FCY)/(1600*((TIM4->PSC)+1)*abs(_ang_v))) - 1;
				TIM4->CCR3 = round(((TIM4->ARR)+1)/2);
			}
			break;
 8000d58:	e0ac      	b.n	8000eb4 <StepDriveRad+0x43c>
				TIM4->ARR = round((6.283*_FCY)/(1600*((TIM4->PSC)+1)*abs(_ang_v))) - 1;
 8000d5a:	4b2e      	ldr	r3, [pc, #184]	; (8000e14 <StepDriveRad+0x39c>)
 8000d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5e:	3301      	adds	r3, #1
 8000d60:	ed97 7b00 	vldr	d7, [r7]
 8000d64:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d68:	ee17 2a90 	vmov	r2, s15
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	bfb8      	it	lt
 8000d70:	4252      	neglt	r2, r2
 8000d72:	fb02 f303 	mul.w	r3, r2, r3
 8000d76:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000d7a:	fb02 f303 	mul.w	r3, r2, r3
 8000d7e:	ee07 3a90 	vmov	s15, r3
 8000d82:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d86:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8000df8 <StepDriveRad+0x380>
 8000d8a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000d8e:	eeb0 0b46 	vmov.f64	d0, d6
 8000d92:	f00a ff85 	bl	800bca0 <round>
 8000d96:	eeb0 7b40 	vmov.f64	d7, d0
 8000d9a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000da2:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <StepDriveRad+0x39c>)
 8000da4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000da8:	ee17 2a90 	vmov	r2, s15
 8000dac:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM4->CCR3 = round(((TIM4->ARR)+1)/2);
 8000dae:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <StepDriveRad+0x39c>)
 8000db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db2:	3301      	adds	r3, #1
 8000db4:	085b      	lsrs	r3, r3, #1
 8000db6:	ee07 3a90 	vmov	s15, r3
 8000dba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <StepDriveRad+0x39c>)
 8000dc0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000dc4:	ee17 2a90 	vmov	r2, s15
 8000dc8:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000dca:	e073      	b.n	8000eb4 <StepDriveRad+0x43c>
		}
		case STEPGripper:
		{
			ang_vel[4] = _ang_v;
 8000dcc:	ed97 7b00 	vldr	d7, [r7]
 8000dd0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <StepDriveRad+0x388>)
 8000dd6:	edc3 7a04 	vstr	s15, [r3, #16]
			/* Direction of Gripper's Stepper Motor */
			if(_ang_v < 0)
 8000dda:	ed97 7b00 	vldr	d7, [r7]
 8000dde:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de6:	d517      	bpl.n	8000e18 <StepDriveRad+0x3a0>
			{
				HAL_GPIO_WritePin(DIR_5_GPIO_Port, DIR_5_Pin, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dee:	4805      	ldr	r0, [pc, #20]	; (8000e04 <StepDriveRad+0x38c>)
 8000df0:	f004 ff0a 	bl	8005c08 <HAL_GPIO_WritePin>
 8000df4:	e016      	b.n	8000e24 <StepDriveRad+0x3ac>
 8000df6:	bf00      	nop
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	41d67842 	.word	0x41d67842
 8000e00:	20000258 	.word	0x20000258
 8000e04:	58021000 	.word	0x58021000
 8000e08:	40010000 	.word	0x40010000
 8000e0c:	58020400 	.word	0x58020400
 8000e10:	40000400 	.word	0x40000400
 8000e14:	40000800 	.word	0x40000800
			}
			else
			{
				HAL_GPIO_WritePin(DIR_5_GPIO_Port, DIR_5_Pin, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e1e:	482a      	ldr	r0, [pc, #168]	; (8000ec8 <StepDriveRad+0x450>)
 8000e20:	f004 fef2 	bl	8005c08 <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Gripper's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM2->ARR is undefined value.
 8000e24:	ed97 7b00 	vldr	d7, [r7]
 8000e28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e30:	d107      	bne.n	8000e42 <StepDriveRad+0x3ca>
			{
				TIM15->CCR2 = 0;
 8000e32:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <StepDriveRad+0x454>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	639a      	str	r2, [r3, #56]	; 0x38
				TIM15->ARR = 625-1;
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <StepDriveRad+0x454>)
 8000e3a:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000e3e:	62da      	str	r2, [r3, #44]	; 0x2c
			else
			{
				TIM15->ARR = round((6.283*_FCY)/(1600*((TIM15->PSC)+1)*abs(_ang_v))) - 1;
				TIM15->CCR2 = round(((TIM15->ARR)+1)/2);
			}
			break;
 8000e40:	e037      	b.n	8000eb2 <StepDriveRad+0x43a>
				TIM15->ARR = round((6.283*_FCY)/(1600*((TIM15->PSC)+1)*abs(_ang_v))) - 1;
 8000e42:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <StepDriveRad+0x454>)
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	3301      	adds	r3, #1
 8000e48:	ed97 7b00 	vldr	d7, [r7]
 8000e4c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e50:	ee17 2a90 	vmov	r2, s15
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	bfb8      	it	lt
 8000e58:	4252      	neglt	r2, r2
 8000e5a:	fb02 f303 	mul.w	r3, r2, r3
 8000e5e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000e62:	fb02 f303 	mul.w	r3, r2, r3
 8000e66:	ee07 3a90 	vmov	s15, r3
 8000e6a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e6e:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8000ec0 <StepDriveRad+0x448>
 8000e72:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e76:	eeb0 0b46 	vmov.f64	d0, d6
 8000e7a:	f00a ff11 	bl	800bca0 <round>
 8000e7e:	eeb0 7b40 	vmov.f64	d7, d0
 8000e82:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e86:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <StepDriveRad+0x454>)
 8000e8c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e90:	ee17 2a90 	vmov	r2, s15
 8000e94:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM15->CCR2 = round(((TIM15->ARR)+1)/2);
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <StepDriveRad+0x454>)
 8000e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	085b      	lsrs	r3, r3, #1
 8000e9e:	ee07 3a90 	vmov	s15, r3
 8000ea2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <StepDriveRad+0x454>)
 8000ea8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000eac:	ee17 2a90 	vmov	r2, s15
 8000eb0:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000eb2:	bf00      	nop
		{

		}
	}

}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	f3af 8000 	nop.w
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	41d67842 	.word	0x41d67842
 8000ec8:	58021000 	.word	0x58021000
 8000ecc:	40014000 	.word	0x40014000

08000ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b087      	sub	sp, #28
 8000ed4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed6:	f002 f82b 	bl	8002f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eda:	f000 f953 	bl	8001184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  SysTick->LOAD = 480000 - 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ede:	f000 fe67 	bl	8001bb0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ee2:	f000 fe1d 	bl	8001b20 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000ee6:	f000 fdcf 	bl	8001a88 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000eea:	f000 faed 	bl	80014c8 <MX_TIM2_Init>
  MX_UART4_Init();
 8000eee:	f000 fd7f 	bl	80019f0 <MX_UART4_Init>
  MX_TIM4_Init();
 8000ef2:	f000 fbd9 	bl	80016a8 <MX_TIM4_Init>
  MX_SPI3_Init();
 8000ef6:	f000 f9e3 	bl	80012c0 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000efa:	f000 fa37 	bl	800136c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000efe:	f000 fb5b 	bl	80015b8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000f02:	f000 fc49 	bl	8001798 <MX_TIM5_Init>
  MX_TIM15_Init();
 8000f06:	f000 fccf 	bl	80018a8 <MX_TIM15_Init>
  MX_TIM12_Init();
 8000f0a:	f000 fc93 	bl	8001834 <MX_TIM12_Init>
  MX_CRC_Init();
 8000f0e:	f000 f9b5 	bl	800127c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
//  uint8_t encoder_address[5] = {0xA4, 0xB4, 0xC4, 0xD4, 0x54};
//  uint16_t abs_position = 0;

  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000f12:	2201      	movs	r2, #1
 8000f14:	2101      	movs	r1, #1
 8000f16:	4881      	ldr	r0, [pc, #516]	; (800111c <main+0x24c>)
 8000f18:	f004 fe76 	bl	8005c08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2102      	movs	r1, #2
 8000f20:	487f      	ldr	r0, [pc, #508]	; (8001120 <main+0x250>)
 8000f22:	f004 fe71 	bl	8005c08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f2c:	487b      	ldr	r0, [pc, #492]	; (800111c <main+0x24c>)
 8000f2e:	f004 fe6b 	bl	8005c08 <HAL_GPIO_WritePin>


//  HAL_TIM_Base_Start_IT(&htim5);
//  HAL_TIM_Base_Start_IT(&htim12);
  PIDInit(&PID_Joint4, 1, 1, 1, -7, 7, 0);
 8000f32:	eddf 2a7c 	vldr	s5, [pc, #496]	; 8001124 <main+0x254>
 8000f36:	eeb1 2a0c 	vmov.f32	s4, #28	; 0x40e00000  7.0
 8000f3a:	eef9 1a0c 	vmov.f32	s3, #156	; 0xc0e00000 -7.0
 8000f3e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000f42:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000f46:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f4a:	4877      	ldr	r0, [pc, #476]	; (8001128 <main+0x258>)
 8000f4c:	f7ff fb9c 	bl	8000688 <PIDInit>
  TIM1->CCR2 = 0;
 8000f50:	4b76      	ldr	r3, [pc, #472]	; (800112c <main+0x25c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	639a      	str	r2, [r3, #56]	; 0x38
  TIM2->CCR3 = 0;
 8000f56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM3->CCR1 = 0;
 8000f5e:	4b74      	ldr	r3, [pc, #464]	; (8001130 <main+0x260>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR3 = 0;
 8000f64:	4b73      	ldr	r3, [pc, #460]	; (8001134 <main+0x264>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM15->CCR2 = 0;
 8000f6a:	4b73      	ldr	r3, [pc, #460]	; (8001138 <main+0x268>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000f70:	2104      	movs	r1, #4
 8000f72:	4872      	ldr	r0, [pc, #456]	; (800113c <main+0x26c>)
 8000f74:	f007 fc28 	bl	80087c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000f78:	2108      	movs	r1, #8
 8000f7a:	4871      	ldr	r0, [pc, #452]	; (8001140 <main+0x270>)
 8000f7c:	f007 fc24 	bl	80087c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f80:	2100      	movs	r1, #0
 8000f82:	4870      	ldr	r0, [pc, #448]	; (8001144 <main+0x274>)
 8000f84:	f007 fc20 	bl	80087c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000f88:	2108      	movs	r1, #8
 8000f8a:	486f      	ldr	r0, [pc, #444]	; (8001148 <main+0x278>)
 8000f8c:	f007 fc1c 	bl	80087c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000f90:	2104      	movs	r1, #4
 8000f92:	486e      	ldr	r0, [pc, #440]	; (800114c <main+0x27c>)
 8000f94:	f007 fc18 	bl	80087c8 <HAL_TIM_PWM_Start>

  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000f98:	4b6d      	ldr	r3, [pc, #436]	; (8001150 <main+0x280>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4b6c      	ldr	r3, [pc, #432]	; (8001150 <main+0x280>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f042 0220 	orr.w	r2, r2, #32
 8000fa6:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 8000fa8:	4b69      	ldr	r3, [pc, #420]	; (8001150 <main+0x280>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	4b68      	ldr	r3, [pc, #416]	; (8001150 <main+0x280>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fb6:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, 4);
 8000fb8:	2204      	movs	r2, #4
 8000fba:	4966      	ldr	r1, [pc, #408]	; (8001154 <main+0x284>)
 8000fbc:	4864      	ldr	r0, [pc, #400]	; (8001150 <main+0x280>)
 8000fbe:	f008 ff23 	bl	8009e08 <HAL_UART_Receive_IT>
//		{
//			x = abs_position;
//			printf("%u\n", abs_position);
//		}

	  if(State_Checksum_Error)
 8000fc2:	4b65      	ldr	r3, [pc, #404]	; (8001158 <main+0x288>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00b      	beq.n	8000fe2 <main+0x112>
	  {
		  State_Checksum_Error = 0;
 8000fca:	4b63      	ldr	r3, [pc, #396]	; (8001158 <main+0x288>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_CheckSumError_Address;
 8000fd0:	4b62      	ldr	r3, [pc, #392]	; (800115c <main+0x28c>)
 8000fd2:	22ee      	movs	r2, #238	; 0xee
 8000fd4:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8000fd6:	2364      	movs	r3, #100	; 0x64
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4960      	ldr	r1, [pc, #384]	; (800115c <main+0x28c>)
 8000fdc:	485c      	ldr	r0, [pc, #368]	; (8001150 <main+0x280>)
 8000fde:	f008 fe7d 	bl	8009cdc <HAL_UART_Transmit>
	  }
	  if(State_Input_Joint_State)
 8000fe2:	4b5f      	ldr	r3, [pc, #380]	; (8001160 <main+0x290>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00b      	beq.n	8001002 <main+0x132>
	  {
		  State_Input_Joint_State = 0;
 8000fea:	4b5d      	ldr	r3, [pc, #372]	; (8001160 <main+0x290>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 8000ff0:	4b5a      	ldr	r3, [pc, #360]	; (800115c <main+0x28c>)
 8000ff2:	22ad      	movs	r2, #173	; 0xad
 8000ff4:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8000ff6:	2364      	movs	r3, #100	; 0x64
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4958      	ldr	r1, [pc, #352]	; (800115c <main+0x28c>)
 8000ffc:	4854      	ldr	r0, [pc, #336]	; (8001150 <main+0x280>)
 8000ffe:	f008 fe6d 	bl	8009cdc <HAL_UART_Transmit>
	  }
	  if(State_Print_4_Joint_State)
 8001002:	4b58      	ldr	r3, [pc, #352]	; (8001164 <main+0x294>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d02a      	beq.n	8001060 <main+0x190>
	  {
		  State_Print_4_Joint_State = 0;
 800100a:	4b56      	ldr	r3, [pc, #344]	; (8001164 <main+0x294>)
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
		  printf("q1 = %.3f, q2 = %.3f, q3 = %.3f, q4 = %.3f\n", q[0],q[1],q[2],q[3]);
 8001010:	4b55      	ldr	r3, [pc, #340]	; (8001168 <main+0x298>)
 8001012:	edd3 7a00 	vldr	s15, [r3]
 8001016:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 800101a:	4b53      	ldr	r3, [pc, #332]	; (8001168 <main+0x298>)
 800101c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001020:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001024:	4b50      	ldr	r3, [pc, #320]	; (8001168 <main+0x298>)
 8001026:	edd3 6a02 	vldr	s13, [r3, #8]
 800102a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800102e:	4b4e      	ldr	r3, [pc, #312]	; (8001168 <main+0x298>)
 8001030:	edd3 5a03 	vldr	s11, [r3, #12]
 8001034:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001038:	ed8d 5b04 	vstr	d5, [sp, #16]
 800103c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001040:	ed8d 7b00 	vstr	d7, [sp]
 8001044:	ec53 2b14 	vmov	r2, r3, d4
 8001048:	4848      	ldr	r0, [pc, #288]	; (800116c <main+0x29c>)
 800104a:	f00c fabf 	bl	800d5cc <iprintf>
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 800104e:	4b43      	ldr	r3, [pc, #268]	; (800115c <main+0x28c>)
 8001050:	22ad      	movs	r2, #173	; 0xad
 8001052:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8001054:	2364      	movs	r3, #100	; 0x64
 8001056:	2201      	movs	r2, #1
 8001058:	4940      	ldr	r1, [pc, #256]	; (800115c <main+0x28c>)
 800105a:	483d      	ldr	r0, [pc, #244]	; (8001150 <main+0x280>)
 800105c:	f008 fe3e 	bl	8009cdc <HAL_UART_Transmit>
	  }
	  if(State_Activate_Gripper)
 8001060:	4b43      	ldr	r3, [pc, #268]	; (8001170 <main+0x2a0>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00b      	beq.n	8001080 <main+0x1b0>
	  {
		  State_Activate_Gripper = 0;
 8001068:	4b41      	ldr	r3, [pc, #260]	; (8001170 <main+0x2a0>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 800106e:	4b3b      	ldr	r3, [pc, #236]	; (800115c <main+0x28c>)
 8001070:	22ad      	movs	r2, #173	; 0xad
 8001072:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8001074:	2364      	movs	r3, #100	; 0x64
 8001076:	2201      	movs	r2, #1
 8001078:	4938      	ldr	r1, [pc, #224]	; (800115c <main+0x28c>)
 800107a:	4835      	ldr	r0, [pc, #212]	; (8001150 <main+0x280>)
 800107c:	f008 fe2e 	bl	8009cdc <HAL_UART_Transmit>
	  }
	  if(State_Deactivate_Gripper)
 8001080:	4b3c      	ldr	r3, [pc, #240]	; (8001174 <main+0x2a4>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d00b      	beq.n	80010a0 <main+0x1d0>
	  {
		  State_Deactivate_Gripper = 0;
 8001088:	4b3a      	ldr	r3, [pc, #232]	; (8001174 <main+0x2a4>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 800108e:	4b33      	ldr	r3, [pc, #204]	; (800115c <main+0x28c>)
 8001090:	22ad      	movs	r2, #173	; 0xad
 8001092:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8001094:	2364      	movs	r3, #100	; 0x64
 8001096:	2201      	movs	r2, #1
 8001098:	4930      	ldr	r1, [pc, #192]	; (800115c <main+0x28c>)
 800109a:	482d      	ldr	r0, [pc, #180]	; (8001150 <main+0x280>)
 800109c:	f008 fe1e 	bl	8009cdc <HAL_UART_Transmit>
	  }
	  if(State_Set_Home)
 80010a0:	4b35      	ldr	r3, [pc, #212]	; (8001178 <main+0x2a8>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d016      	beq.n	80010d6 <main+0x206>
	  {
		  State_Set_Home = 0;
 80010a8:	4b33      	ldr	r3, [pc, #204]	; (8001178 <main+0x2a8>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
		  for(register int i = 0; i < 4; i++){
 80010ae:	2400      	movs	r4, #0
 80010b0:	e006      	b.n	80010c0 <main+0x1f0>
		      q[i] = 0;
 80010b2:	4a2d      	ldr	r2, [pc, #180]	; (8001168 <main+0x298>)
 80010b4:	00a3      	lsls	r3, r4, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
		  for(register int i = 0; i < 4; i++){
 80010be:	3401      	adds	r4, #1
 80010c0:	2c03      	cmp	r4, #3
 80010c2:	ddf6      	ble.n	80010b2 <main+0x1e2>
		    }
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 80010c4:	4b25      	ldr	r3, [pc, #148]	; (800115c <main+0x28c>)
 80010c6:	22ad      	movs	r2, #173	; 0xad
 80010c8:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 80010ca:	2364      	movs	r3, #100	; 0x64
 80010cc:	2201      	movs	r2, #1
 80010ce:	4923      	ldr	r1, [pc, #140]	; (800115c <main+0x28c>)
 80010d0:	481f      	ldr	r0, [pc, #124]	; (8001150 <main+0x280>)
 80010d2:	f008 fe03 	bl	8009cdc <HAL_UART_Transmit>
	  }
	  if(State_PID_Control_Timer)
 80010d6:	4b29      	ldr	r3, [pc, #164]	; (800117c <main+0x2ac>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00b      	beq.n	80010f6 <main+0x226>
	  {
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <main+0x28c>)
 80010e0:	22ad      	movs	r2, #173	; 0xad
 80010e2:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 80010e4:	2364      	movs	r3, #100	; 0x64
 80010e6:	2201      	movs	r2, #1
 80010e8:	491c      	ldr	r1, [pc, #112]	; (800115c <main+0x28c>)
 80010ea:	4819      	ldr	r0, [pc, #100]	; (8001150 <main+0x280>)
 80010ec:	f008 fdf6 	bl	8009cdc <HAL_UART_Transmit>
		  State_PID_Control_Timer = 0;
 80010f0:	4b22      	ldr	r3, [pc, #136]	; (800117c <main+0x2ac>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
	  }
	  if(State_Casade_Control_Timer)
 80010f6:	4b22      	ldr	r3, [pc, #136]	; (8001180 <main+0x2b0>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f43f af61 	beq.w	8000fc2 <main+0xf2>
	  {
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 8001100:	4b16      	ldr	r3, [pc, #88]	; (800115c <main+0x28c>)
 8001102:	22ad      	movs	r2, #173	; 0xad
 8001104:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8001106:	2364      	movs	r3, #100	; 0x64
 8001108:	2201      	movs	r2, #1
 800110a:	4914      	ldr	r1, [pc, #80]	; (800115c <main+0x28c>)
 800110c:	4810      	ldr	r0, [pc, #64]	; (8001150 <main+0x280>)
 800110e:	f008 fde5 	bl	8009cdc <HAL_UART_Transmit>
		  State_Casade_Control_Timer = 0;
 8001112:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <main+0x2b0>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
	  if(State_Checksum_Error)
 8001118:	e753      	b.n	8000fc2 <main+0xf2>
 800111a:	bf00      	nop
 800111c:	58020400 	.word	0x58020400
 8001120:	58021000 	.word	0x58021000
 8001124:	00000000 	.word	0x00000000
 8001128:	20000608 	.word	0x20000608
 800112c:	40010000 	.word	0x40010000
 8001130:	40000400 	.word	0x40000400
 8001134:	40000800 	.word	0x40000800
 8001138:	40014000 	.word	0x40014000
 800113c:	20000744 	.word	0x20000744
 8001140:	20000858 	.word	0x20000858
 8001144:	2000063c 	.word	0x2000063c
 8001148:	20000310 	.word	0x20000310
 800114c:	2000048c 	.word	0x2000048c
 8001150:	200003e8 	.word	0x200003e8
 8001154:	20000974 	.word	0x20000974
 8001158:	200008f4 	.word	0x200008f4
 800115c:	2000073c 	.word	0x2000073c
 8001160:	20000634 	.word	0x20000634
 8001164:	2000073e 	.word	0x2000073e
 8001168:	20000204 	.word	0x20000204
 800116c:	0800f610 	.word	0x0800f610
 8001170:	20000970 	.word	0x20000970
 8001174:	200004fc 	.word	0x200004fc
 8001178:	2000073d 	.word	0x2000073d
 800117c:	20000738 	.word	0x20000738
 8001180:	20000854 	.word	0x20000854

08001184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b09c      	sub	sp, #112	; 0x70
 8001188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118e:	224c      	movs	r2, #76	; 0x4c
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f00b fdd0 	bl	800cd38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2220      	movs	r2, #32
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f00b fdca 	bl	800cd38 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011a4:	2002      	movs	r0, #2
 80011a6:	f004 fd63 	bl	8005c70 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011aa:	2300      	movs	r3, #0
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	4b31      	ldr	r3, [pc, #196]	; (8001274 <SystemClock_Config+0xf0>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	4a30      	ldr	r2, [pc, #192]	; (8001274 <SystemClock_Config+0xf0>)
 80011b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011b8:	6193      	str	r3, [r2, #24]
 80011ba:	4b2e      	ldr	r3, [pc, #184]	; (8001274 <SystemClock_Config+0xf0>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <SystemClock_Config+0xf4>)
 80011c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c8:	4a2b      	ldr	r2, [pc, #172]	; (8001278 <SystemClock_Config+0xf4>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80011d0:	4b29      	ldr	r3, [pc, #164]	; (8001278 <SystemClock_Config+0xf4>)
 80011d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011dc:	bf00      	nop
 80011de:	4b25      	ldr	r3, [pc, #148]	; (8001274 <SystemClock_Config+0xf0>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011ea:	d1f8      	bne.n	80011de <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ec:	2302      	movs	r3, #2
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011f0:	2301      	movs	r3, #1
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f4:	2340      	movs	r3, #64	; 0x40
 80011f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f8:	2302      	movs	r3, #2
 80011fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011fc:	2300      	movs	r3, #0
 80011fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001200:	2304      	movs	r3, #4
 8001202:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001204:	233c      	movs	r3, #60	; 0x3c
 8001206:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001208:	2302      	movs	r3, #2
 800120a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800120c:	2306      	movs	r3, #6
 800120e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001210:	2302      	movs	r3, #2
 8001212:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001214:	230c      	movs	r3, #12
 8001216:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001218:	2300      	movs	r3, #0
 800121a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001224:	4618      	mov	r0, r3
 8001226:	f004 fd5d 	bl	8005ce4 <HAL_RCC_OscConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001230:	f001 f892 	bl	8002358 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001234:	233f      	movs	r3, #63	; 0x3f
 8001236:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001238:	2303      	movs	r3, #3
 800123a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001240:	2308      	movs	r3, #8
 8001242:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001244:	2340      	movs	r3, #64	; 0x40
 8001246:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001248:	2340      	movs	r3, #64	; 0x40
 800124a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800124c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001250:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001252:	2340      	movs	r3, #64	; 0x40
 8001254:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2104      	movs	r1, #4
 800125a:	4618      	mov	r0, r3
 800125c:	f005 f952 	bl	8006504 <HAL_RCC_ClockConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001266:	f001 f877 	bl	8002358 <Error_Handler>
  }
}
 800126a:	bf00      	nop
 800126c:	3770      	adds	r7, #112	; 0x70
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	58024800 	.word	0x58024800
 8001278:	58000400 	.word	0x58000400

0800127c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001280:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <MX_CRC_Init+0x3c>)
 8001282:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <MX_CRC_Init+0x40>)
 8001284:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_CRC_Init+0x3c>)
 8001288:	2200      	movs	r2, #0
 800128a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <MX_CRC_Init+0x3c>)
 800128e:	2200      	movs	r2, #0
 8001290:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_CRC_Init+0x3c>)
 8001294:	2200      	movs	r2, #0
 8001296:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <MX_CRC_Init+0x3c>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_CRC_Init+0x3c>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80012a4:	4804      	ldr	r0, [pc, #16]	; (80012b8 <MX_CRC_Init+0x3c>)
 80012a6:	f001 fff1 	bl	800328c <HAL_CRC_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80012b0:	f001 f852 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200004d8 	.word	0x200004d8
 80012bc:	58024c00 	.word	0x58024c00

080012c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80012c4:	4b27      	ldr	r3, [pc, #156]	; (8001364 <MX_SPI3_Init+0xa4>)
 80012c6:	4a28      	ldr	r2, [pc, #160]	; (8001368 <MX_SPI3_Init+0xa8>)
 80012c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012ca:	4b26      	ldr	r3, [pc, #152]	; (8001364 <MX_SPI3_Init+0xa4>)
 80012cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012d2:	4b24      	ldr	r3, [pc, #144]	; (8001364 <MX_SPI3_Init+0xa4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80012d8:	4b22      	ldr	r3, [pc, #136]	; (8001364 <MX_SPI3_Init+0xa4>)
 80012da:	2203      	movs	r2, #3
 80012dc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012de:	4b21      	ldr	r3, [pc, #132]	; (8001364 <MX_SPI3_Init+0xa4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012e4:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <MX_SPI3_Init+0xa4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012ea:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <MX_SPI3_Init+0xa4>)
 80012ec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012f0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <MX_SPI3_Init+0xa4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <MX_SPI3_Init+0xa4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012fe:	4b19      	ldr	r3, [pc, #100]	; (8001364 <MX_SPI3_Init+0xa4>)
 8001300:	2200      	movs	r2, #0
 8001302:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_SPI3_Init+0xa4>)
 8001306:	2200      	movs	r2, #0
 8001308:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <MX_SPI3_Init+0xa4>)
 800130c:	2200      	movs	r2, #0
 800130e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_SPI3_Init+0xa4>)
 8001312:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001316:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <MX_SPI3_Init+0xa4>)
 800131a:	2200      	movs	r2, #0
 800131c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_SPI3_Init+0xa4>)
 8001320:	2200      	movs	r2, #0
 8001322:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_SPI3_Init+0xa4>)
 8001326:	2200      	movs	r2, #0
 8001328:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <MX_SPI3_Init+0xa4>)
 800132c:	2200      	movs	r2, #0
 800132e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_SPI3_Init+0xa4>)
 8001332:	2200      	movs	r2, #0
 8001334:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <MX_SPI3_Init+0xa4>)
 8001338:	2200      	movs	r2, #0
 800133a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_SPI3_Init+0xa4>)
 800133e:	2200      	movs	r2, #0
 8001340:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <MX_SPI3_Init+0xa4>)
 8001344:	2200      	movs	r2, #0
 8001346:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_SPI3_Init+0xa4>)
 800134a:	2200      	movs	r2, #0
 800134c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_SPI3_Init+0xa4>)
 8001350:	f006 ffc6 	bl	80082e0 <HAL_SPI_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 800135a:	f000 fffd 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000688 	.word	0x20000688
 8001368:	40003c00 	.word	0x40003c00

0800136c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b09a      	sub	sp, #104	; 0x68
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001372:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001380:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800138c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
 800139c:	615a      	str	r2, [r3, #20]
 800139e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	222c      	movs	r2, #44	; 0x2c
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f00b fcc6 	bl	800cd38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013ac:	4b44      	ldr	r3, [pc, #272]	; (80014c0 <MX_TIM1_Init+0x154>)
 80013ae:	4a45      	ldr	r2, [pc, #276]	; (80014c4 <MX_TIM1_Init+0x158>)
 80013b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 80013b2:	4b43      	ldr	r3, [pc, #268]	; (80014c0 <MX_TIM1_Init+0x154>)
 80013b4:	22ef      	movs	r2, #239	; 0xef
 80013b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b41      	ldr	r3, [pc, #260]	; (80014c0 <MX_TIM1_Init+0x154>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625-1;
 80013be:	4b40      	ldr	r3, [pc, #256]	; (80014c0 <MX_TIM1_Init+0x154>)
 80013c0:	f44f 721c 	mov.w	r2, #624	; 0x270
 80013c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c6:	4b3e      	ldr	r3, [pc, #248]	; (80014c0 <MX_TIM1_Init+0x154>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013cc:	4b3c      	ldr	r3, [pc, #240]	; (80014c0 <MX_TIM1_Init+0x154>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d2:	4b3b      	ldr	r3, [pc, #236]	; (80014c0 <MX_TIM1_Init+0x154>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013d8:	4839      	ldr	r0, [pc, #228]	; (80014c0 <MX_TIM1_Init+0x154>)
 80013da:	f007 f89e 	bl	800851a <HAL_TIM_Base_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80013e4:	f000 ffb8 	bl	8002358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ec:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013f2:	4619      	mov	r1, r3
 80013f4:	4832      	ldr	r0, [pc, #200]	; (80014c0 <MX_TIM1_Init+0x154>)
 80013f6:	f007 fdb5 	bl	8008f64 <HAL_TIM_ConfigClockSource>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001400:	f000 ffaa 	bl	8002358 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001404:	482e      	ldr	r0, [pc, #184]	; (80014c0 <MX_TIM1_Init+0x154>)
 8001406:	f007 f97e 	bl	8008706 <HAL_TIM_PWM_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001410:	f000 ffa2 	bl	8002358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001414:	2300      	movs	r3, #0
 8001416:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001418:	2300      	movs	r3, #0
 800141a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001420:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001424:	4619      	mov	r1, r3
 8001426:	4826      	ldr	r0, [pc, #152]	; (80014c0 <MX_TIM1_Init+0x154>)
 8001428:	f008 fae4 	bl	80099f4 <HAL_TIMEx_MasterConfigSynchronization>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001432:	f000 ff91 	bl	8002358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001436:	2360      	movs	r3, #96	; 0x60
 8001438:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800143a:	f240 1339 	movw	r3, #313	; 0x139
 800143e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001440:	2300      	movs	r3, #0
 8001442:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001444:	2300      	movs	r3, #0
 8001446:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001454:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001458:	2204      	movs	r2, #4
 800145a:	4619      	mov	r1, r3
 800145c:	4818      	ldr	r0, [pc, #96]	; (80014c0 <MX_TIM1_Init+0x154>)
 800145e:	f007 fc71 	bl	8008d44 <HAL_TIM_PWM_ConfigChannel>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001468:	f000 ff76 	bl	8002358 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001484:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800148e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	4619      	mov	r1, r3
 80014a0:	4807      	ldr	r0, [pc, #28]	; (80014c0 <MX_TIM1_Init+0x154>)
 80014a2:	f008 fb2f 	bl	8009b04 <HAL_TIMEx_ConfigBreakDeadTime>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80014ac:	f000 ff54 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014b0:	4803      	ldr	r0, [pc, #12]	; (80014c0 <MX_TIM1_Init+0x154>)
 80014b2:	f001 f8c5 	bl	8002640 <HAL_TIM_MspPostInit>

}
 80014b6:	bf00      	nop
 80014b8:	3768      	adds	r7, #104	; 0x68
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000744 	.word	0x20000744
 80014c4:	40010000 	.word	0x40010000

080014c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08e      	sub	sp, #56	; 0x38
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e8:	463b      	mov	r3, r7
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]
 80014f6:	615a      	str	r2, [r3, #20]
 80014f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014fa:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <MX_TIM2_Init+0xec>)
 80014fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001500:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8001502:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <MX_TIM2_Init+0xec>)
 8001504:	22ef      	movs	r2, #239	; 0xef
 8001506:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001508:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <MX_TIM2_Init+0xec>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625-1;
 800150e:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <MX_TIM2_Init+0xec>)
 8001510:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001514:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001516:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <MX_TIM2_Init+0xec>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151c:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <MX_TIM2_Init+0xec>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001522:	4824      	ldr	r0, [pc, #144]	; (80015b4 <MX_TIM2_Init+0xec>)
 8001524:	f006 fff9 	bl	800851a <HAL_TIM_Base_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800152e:	f000 ff13 	bl	8002358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001538:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800153c:	4619      	mov	r1, r3
 800153e:	481d      	ldr	r0, [pc, #116]	; (80015b4 <MX_TIM2_Init+0xec>)
 8001540:	f007 fd10 	bl	8008f64 <HAL_TIM_ConfigClockSource>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800154a:	f000 ff05 	bl	8002358 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800154e:	4819      	ldr	r0, [pc, #100]	; (80015b4 <MX_TIM2_Init+0xec>)
 8001550:	f007 f8d9 	bl	8008706 <HAL_TIM_PWM_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800155a:	f000 fefd 	bl	8002358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	4619      	mov	r1, r3
 800156c:	4811      	ldr	r0, [pc, #68]	; (80015b4 <MX_TIM2_Init+0xec>)
 800156e:	f008 fa41 	bl	80099f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001578:	f000 feee 	bl	8002358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800157c:	2360      	movs	r3, #96	; 0x60
 800157e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8001580:	f240 1339 	movw	r3, #313	; 0x139
 8001584:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800158e:	463b      	mov	r3, r7
 8001590:	2208      	movs	r2, #8
 8001592:	4619      	mov	r1, r3
 8001594:	4807      	ldr	r0, [pc, #28]	; (80015b4 <MX_TIM2_Init+0xec>)
 8001596:	f007 fbd5 	bl	8008d44 <HAL_TIM_PWM_ConfigChannel>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80015a0:	f000 feda 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015a4:	4803      	ldr	r0, [pc, #12]	; (80015b4 <MX_TIM2_Init+0xec>)
 80015a6:	f001 f84b 	bl	8002640 <HAL_TIM_MspPostInit>

}
 80015aa:	bf00      	nop
 80015ac:	3738      	adds	r7, #56	; 0x38
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000858 	.word	0x20000858

080015b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08e      	sub	sp, #56	; 0x38
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015cc:	f107 031c 	add.w	r3, r7, #28
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d8:	463b      	mov	r3, r7
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]
 80015e6:	615a      	str	r2, [r3, #20]
 80015e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015ea:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <MX_TIM3_Init+0xe8>)
 80015ec:	4a2d      	ldr	r2, [pc, #180]	; (80016a4 <MX_TIM3_Init+0xec>)
 80015ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 80015f0:	4b2b      	ldr	r3, [pc, #172]	; (80016a0 <MX_TIM3_Init+0xe8>)
 80015f2:	22ef      	movs	r2, #239	; 0xef
 80015f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f6:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <MX_TIM3_Init+0xe8>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 625-1;
 80015fc:	4b28      	ldr	r3, [pc, #160]	; (80016a0 <MX_TIM3_Init+0xe8>)
 80015fe:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001602:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001604:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <MX_TIM3_Init+0xe8>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160a:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <MX_TIM3_Init+0xe8>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001610:	4823      	ldr	r0, [pc, #140]	; (80016a0 <MX_TIM3_Init+0xe8>)
 8001612:	f006 ff82 	bl	800851a <HAL_TIM_Base_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800161c:	f000 fe9c 	bl	8002358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800162a:	4619      	mov	r1, r3
 800162c:	481c      	ldr	r0, [pc, #112]	; (80016a0 <MX_TIM3_Init+0xe8>)
 800162e:	f007 fc99 	bl	8008f64 <HAL_TIM_ConfigClockSource>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001638:	f000 fe8e 	bl	8002358 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800163c:	4818      	ldr	r0, [pc, #96]	; (80016a0 <MX_TIM3_Init+0xe8>)
 800163e:	f007 f862 	bl	8008706 <HAL_TIM_PWM_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001648:	f000 fe86 	bl	8002358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	4619      	mov	r1, r3
 800165a:	4811      	ldr	r0, [pc, #68]	; (80016a0 <MX_TIM3_Init+0xe8>)
 800165c:	f008 f9ca 	bl	80099f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001666:	f000 fe77 	bl	8002358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166a:	2360      	movs	r3, #96	; 0x60
 800166c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 800166e:	f240 1339 	movw	r3, #313	; 0x139
 8001672:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800167c:	463b      	mov	r3, r7
 800167e:	2200      	movs	r2, #0
 8001680:	4619      	mov	r1, r3
 8001682:	4807      	ldr	r0, [pc, #28]	; (80016a0 <MX_TIM3_Init+0xe8>)
 8001684:	f007 fb5e 	bl	8008d44 <HAL_TIM_PWM_ConfigChannel>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800168e:	f000 fe63 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001692:	4803      	ldr	r0, [pc, #12]	; (80016a0 <MX_TIM3_Init+0xe8>)
 8001694:	f000 ffd4 	bl	8002640 <HAL_TIM_MspPostInit>

}
 8001698:	bf00      	nop
 800169a:	3738      	adds	r7, #56	; 0x38
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	2000063c 	.word	0x2000063c
 80016a4:	40000400 	.word	0x40000400

080016a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08e      	sub	sp, #56	; 0x38
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c8:	463b      	mov	r3, r7
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]
 80016d6:	615a      	str	r2, [r3, #20]
 80016d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016da:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <MX_TIM4_Init+0xe8>)
 80016dc:	4a2d      	ldr	r2, [pc, #180]	; (8001794 <MX_TIM4_Init+0xec>)
 80016de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 80016e0:	4b2b      	ldr	r3, [pc, #172]	; (8001790 <MX_TIM4_Init+0xe8>)
 80016e2:	22ef      	movs	r2, #239	; 0xef
 80016e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e6:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <MX_TIM4_Init+0xe8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 625-1;
 80016ec:	4b28      	ldr	r3, [pc, #160]	; (8001790 <MX_TIM4_Init+0xe8>)
 80016ee:	f44f 721c 	mov.w	r2, #624	; 0x270
 80016f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f4:	4b26      	ldr	r3, [pc, #152]	; (8001790 <MX_TIM4_Init+0xe8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016fa:	4b25      	ldr	r3, [pc, #148]	; (8001790 <MX_TIM4_Init+0xe8>)
 80016fc:	2280      	movs	r2, #128	; 0x80
 80016fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001700:	4823      	ldr	r0, [pc, #140]	; (8001790 <MX_TIM4_Init+0xe8>)
 8001702:	f006 ff0a 	bl	800851a <HAL_TIM_Base_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800170c:	f000 fe24 	bl	8002358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001716:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800171a:	4619      	mov	r1, r3
 800171c:	481c      	ldr	r0, [pc, #112]	; (8001790 <MX_TIM4_Init+0xe8>)
 800171e:	f007 fc21 	bl	8008f64 <HAL_TIM_ConfigClockSource>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001728:	f000 fe16 	bl	8002358 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800172c:	4818      	ldr	r0, [pc, #96]	; (8001790 <MX_TIM4_Init+0xe8>)
 800172e:	f006 ffea 	bl	8008706 <HAL_TIM_PWM_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001738:	f000 fe0e 	bl	8002358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	4619      	mov	r1, r3
 800174a:	4811      	ldr	r0, [pc, #68]	; (8001790 <MX_TIM4_Init+0xe8>)
 800174c:	f008 f952 	bl	80099f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001756:	f000 fdff 	bl	8002358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800175a:	2360      	movs	r3, #96	; 0x60
 800175c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 800175e:	f240 1339 	movw	r3, #313	; 0x139
 8001762:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800176c:	463b      	mov	r3, r7
 800176e:	2208      	movs	r2, #8
 8001770:	4619      	mov	r1, r3
 8001772:	4807      	ldr	r0, [pc, #28]	; (8001790 <MX_TIM4_Init+0xe8>)
 8001774:	f007 fae6 	bl	8008d44 <HAL_TIM_PWM_ConfigChannel>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800177e:	f000 fdeb 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001782:	4803      	ldr	r0, [pc, #12]	; (8001790 <MX_TIM4_Init+0xe8>)
 8001784:	f000 ff5c 	bl	8002640 <HAL_TIM_MspPostInit>

}
 8001788:	bf00      	nop
 800178a:	3738      	adds	r7, #56	; 0x38
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000310 	.word	0x20000310
 8001794:	40000800 	.word	0x40000800

08001798 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179e:	f107 0310 	add.w	r3, r7, #16
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80017b6:	4b1d      	ldr	r3, [pc, #116]	; (800182c <MX_TIM5_Init+0x94>)
 80017b8:	4a1d      	ldr	r2, [pc, #116]	; (8001830 <MX_TIM5_Init+0x98>)
 80017ba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240-1;
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <MX_TIM5_Init+0x94>)
 80017be:	22ef      	movs	r2, #239	; 0xef
 80017c0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c2:	4b1a      	ldr	r3, [pc, #104]	; (800182c <MX_TIM5_Init+0x94>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500-1;
 80017c8:	4b18      	ldr	r3, [pc, #96]	; (800182c <MX_TIM5_Init+0x94>)
 80017ca:	f240 12f3 	movw	r2, #499	; 0x1f3
 80017ce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d0:	4b16      	ldr	r3, [pc, #88]	; (800182c <MX_TIM5_Init+0x94>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <MX_TIM5_Init+0x94>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017dc:	4813      	ldr	r0, [pc, #76]	; (800182c <MX_TIM5_Init+0x94>)
 80017de:	f006 fe9c 	bl	800851a <HAL_TIM_Base_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80017e8:	f000 fdb6 	bl	8002358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	4619      	mov	r1, r3
 80017f8:	480c      	ldr	r0, [pc, #48]	; (800182c <MX_TIM5_Init+0x94>)
 80017fa:	f007 fbb3 	bl	8008f64 <HAL_TIM_ConfigClockSource>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001804:	f000 fda8 	bl	8002358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001808:	2300      	movs	r3, #0
 800180a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	4619      	mov	r1, r3
 8001814:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_TIM5_Init+0x94>)
 8001816:	f008 f8ed 	bl	80099f4 <HAL_TIMEx_MasterConfigSynchronization>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001820:	f000 fd9a 	bl	8002358 <Error_Handler>
  /* USER CODE BEGIN TIM5_Init 2 */
//  HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
//    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE END TIM5_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200005bc 	.word	0x200005bc
 8001830:	40000c00 	.word	0x40000c00

08001834 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183a:	463b      	mov	r3, r7
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001846:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <MX_TIM12_Init+0x6c>)
 8001848:	4a16      	ldr	r2, [pc, #88]	; (80018a4 <MX_TIM12_Init+0x70>)
 800184a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 240-1;
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <MX_TIM12_Init+0x6c>)
 800184e:	22ef      	movs	r2, #239	; 0xef
 8001850:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001852:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <MX_TIM12_Init+0x6c>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 500-1;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <MX_TIM12_Init+0x6c>)
 800185a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800185e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <MX_TIM12_Init+0x6c>)
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <MX_TIM12_Init+0x6c>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800186c:	480c      	ldr	r0, [pc, #48]	; (80018a0 <MX_TIM12_Init+0x6c>)
 800186e:	f006 fe54 	bl	800851a <HAL_TIM_Base_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8001878:	f000 fd6e 	bl	8002358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001880:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001882:	463b      	mov	r3, r7
 8001884:	4619      	mov	r1, r3
 8001886:	4806      	ldr	r0, [pc, #24]	; (80018a0 <MX_TIM12_Init+0x6c>)
 8001888:	f007 fb6c 	bl	8008f64 <HAL_TIM_ConfigClockSource>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8001892:	f000 fd61 	bl	8002358 <Error_Handler>
  /* USER CODE BEGIN TIM12_Init 2 */
//  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
//    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE END TIM12_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200008a4 	.word	0x200008a4
 80018a4:	40001800 	.word	0x40001800

080018a8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b09a      	sub	sp, #104	; 0x68
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
 80018d8:	615a      	str	r2, [r3, #20]
 80018da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	222c      	movs	r2, #44	; 0x2c
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f00b fa28 	bl	800cd38 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80018e8:	4b3f      	ldr	r3, [pc, #252]	; (80019e8 <MX_TIM15_Init+0x140>)
 80018ea:	4a40      	ldr	r2, [pc, #256]	; (80019ec <MX_TIM15_Init+0x144>)
 80018ec:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 80018ee:	4b3e      	ldr	r3, [pc, #248]	; (80019e8 <MX_TIM15_Init+0x140>)
 80018f0:	22ef      	movs	r2, #239	; 0xef
 80018f2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f4:	4b3c      	ldr	r3, [pc, #240]	; (80019e8 <MX_TIM15_Init+0x140>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 625-1;
 80018fa:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <MX_TIM15_Init+0x140>)
 80018fc:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001900:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001902:	4b39      	ldr	r3, [pc, #228]	; (80019e8 <MX_TIM15_Init+0x140>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001908:	4b37      	ldr	r3, [pc, #220]	; (80019e8 <MX_TIM15_Init+0x140>)
 800190a:	2200      	movs	r2, #0
 800190c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190e:	4b36      	ldr	r3, [pc, #216]	; (80019e8 <MX_TIM15_Init+0x140>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001914:	4834      	ldr	r0, [pc, #208]	; (80019e8 <MX_TIM15_Init+0x140>)
 8001916:	f006 fe00 	bl	800851a <HAL_TIM_Base_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001920:	f000 fd1a 	bl	8002358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001928:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800192a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800192e:	4619      	mov	r1, r3
 8001930:	482d      	ldr	r0, [pc, #180]	; (80019e8 <MX_TIM15_Init+0x140>)
 8001932:	f007 fb17 	bl	8008f64 <HAL_TIM_ConfigClockSource>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800193c:	f000 fd0c 	bl	8002358 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001940:	4829      	ldr	r0, [pc, #164]	; (80019e8 <MX_TIM15_Init+0x140>)
 8001942:	f006 fee0 	bl	8008706 <HAL_TIM_PWM_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800194c:	f000 fd04 	bl	8002358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001950:	2300      	movs	r3, #0
 8001952:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001958:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800195c:	4619      	mov	r1, r3
 800195e:	4822      	ldr	r0, [pc, #136]	; (80019e8 <MX_TIM15_Init+0x140>)
 8001960:	f008 f848 	bl	80099f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800196a:	f000 fcf5 	bl	8002358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800196e:	2360      	movs	r3, #96	; 0x60
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8001972:	f240 1339 	movw	r3, #313	; 0x139
 8001976:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001978:	2300      	movs	r3, #0
 800197a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800197c:	2300      	movs	r3, #0
 800197e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001984:	2300      	movs	r3, #0
 8001986:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001988:	2300      	movs	r3, #0
 800198a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800198c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001990:	2204      	movs	r2, #4
 8001992:	4619      	mov	r1, r3
 8001994:	4814      	ldr	r0, [pc, #80]	; (80019e8 <MX_TIM15_Init+0x140>)
 8001996:	f007 f9d5 	bl	8008d44 <HAL_TIM_PWM_ConfigChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 80019a0:	f000 fcda 	bl	8002358 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	4619      	mov	r1, r3
 80019ca:	4807      	ldr	r0, [pc, #28]	; (80019e8 <MX_TIM15_Init+0x140>)
 80019cc:	f008 f89a 	bl	8009b04 <HAL_TIMEx_ConfigBreakDeadTime>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 80019d6:	f000 fcbf 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80019da:	4803      	ldr	r0, [pc, #12]	; (80019e8 <MX_TIM15_Init+0x140>)
 80019dc:	f000 fe30 	bl	8002640 <HAL_TIM_MspPostInit>

}
 80019e0:	bf00      	nop
 80019e2:	3768      	adds	r7, #104	; 0x68
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	2000048c 	.word	0x2000048c
 80019ec:	40014000 	.word	0x40014000

080019f0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019f4:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <MX_UART4_Init+0x90>)
 80019f6:	4a23      	ldr	r2, [pc, #140]	; (8001a84 <MX_UART4_Init+0x94>)
 80019f8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80019fa:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <MX_UART4_Init+0x90>)
 80019fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a00:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a02:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <MX_UART4_Init+0x90>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a08:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <MX_UART4_Init+0x90>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <MX_UART4_Init+0x90>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a14:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <MX_UART4_Init+0x90>)
 8001a16:	220c      	movs	r2, #12
 8001a18:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1a:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <MX_UART4_Init+0x90>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <MX_UART4_Init+0x90>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a26:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <MX_UART4_Init+0x90>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <MX_UART4_Init+0x90>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <MX_UART4_Init+0x90>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a38:	4811      	ldr	r0, [pc, #68]	; (8001a80 <MX_UART4_Init+0x90>)
 8001a3a:	f008 f8ff 	bl	8009c3c <HAL_UART_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001a44:	f000 fc88 	bl	8002358 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a48:	2100      	movs	r1, #0
 8001a4a:	480d      	ldr	r0, [pc, #52]	; (8001a80 <MX_UART4_Init+0x90>)
 8001a4c:	f00a f813 	bl	800ba76 <HAL_UARTEx_SetTxFifoThreshold>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001a56:	f000 fc7f 	bl	8002358 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4808      	ldr	r0, [pc, #32]	; (8001a80 <MX_UART4_Init+0x90>)
 8001a5e:	f00a f848 	bl	800baf2 <HAL_UARTEx_SetRxFifoThreshold>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001a68:	f000 fc76 	bl	8002358 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <MX_UART4_Init+0x90>)
 8001a6e:	f009 ffc9 	bl	800ba04 <HAL_UARTEx_DisableFifoMode>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001a78:	f000 fc6e 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200007c4 	.word	0x200007c4
 8001a84:	40004c00 	.word	0x40004c00

08001a88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <MX_USART3_UART_Init+0x90>)
 8001a8e:	4a23      	ldr	r2, [pc, #140]	; (8001b1c <MX_USART3_UART_Init+0x94>)
 8001a90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a92:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <MX_USART3_UART_Init+0x90>)
 8001a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9a:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <MX_USART3_UART_Init+0x90>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001aa0:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <MX_USART3_UART_Init+0x90>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <MX_USART3_UART_Init+0x90>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001aac:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <MX_USART3_UART_Init+0x90>)
 8001aae:	220c      	movs	r2, #12
 8001ab0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab2:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <MX_USART3_UART_Init+0x90>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <MX_USART3_UART_Init+0x90>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001abe:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <MX_USART3_UART_Init+0x90>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <MX_USART3_UART_Init+0x90>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aca:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <MX_USART3_UART_Init+0x90>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ad0:	4811      	ldr	r0, [pc, #68]	; (8001b18 <MX_USART3_UART_Init+0x90>)
 8001ad2:	f008 f8b3 	bl	8009c3c <HAL_UART_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001adc:	f000 fc3c 	bl	8002358 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	480d      	ldr	r0, [pc, #52]	; (8001b18 <MX_USART3_UART_Init+0x90>)
 8001ae4:	f009 ffc7 	bl	800ba76 <HAL_UARTEx_SetTxFifoThreshold>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001aee:	f000 fc33 	bl	8002358 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001af2:	2100      	movs	r1, #0
 8001af4:	4808      	ldr	r0, [pc, #32]	; (8001b18 <MX_USART3_UART_Init+0x90>)
 8001af6:	f009 fffc 	bl	800baf2 <HAL_UARTEx_SetRxFifoThreshold>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001b00:	f000 fc2a 	bl	8002358 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001b04:	4804      	ldr	r0, [pc, #16]	; (8001b18 <MX_USART3_UART_Init+0x90>)
 8001b06:	f009 ff7d 	bl	800ba04 <HAL_UARTEx_DisableFifoMode>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001b10:	f000 fc22 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	200003e8 	.word	0x200003e8
 8001b1c:	40004800 	.word	0x40004800

08001b20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b26:	4b21      	ldr	r3, [pc, #132]	; (8001bac <MX_DMA_Init+0x8c>)
 8001b28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b2c:	4a1f      	ldr	r2, [pc, #124]	; (8001bac <MX_DMA_Init+0x8c>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b36:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <MX_DMA_Init+0x8c>)
 8001b38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b44:	4b19      	ldr	r3, [pc, #100]	; (8001bac <MX_DMA_Init+0x8c>)
 8001b46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b4a:	4a18      	ldr	r2, [pc, #96]	; (8001bac <MX_DMA_Init+0x8c>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b54:	4b15      	ldr	r3, [pc, #84]	; (8001bac <MX_DMA_Init+0x8c>)
 8001b56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	200c      	movs	r0, #12
 8001b68:	f001 fb5b 	bl	8003222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b6c:	200c      	movs	r0, #12
 8001b6e:	f001 fb72 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	200d      	movs	r0, #13
 8001b78:	f001 fb53 	bl	8003222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001b7c:	200d      	movs	r0, #13
 8001b7e:	f001 fb6a 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	2038      	movs	r0, #56	; 0x38
 8001b88:	f001 fb4b 	bl	8003222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b8c:	2038      	movs	r0, #56	; 0x38
 8001b8e:	f001 fb62 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	2039      	movs	r0, #57	; 0x39
 8001b98:	f001 fb43 	bl	8003222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001b9c:	2039      	movs	r0, #57	; 0x39
 8001b9e:	f001 fb5a 	bl	8003256 <HAL_NVIC_EnableIRQ>

}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	58024400 	.word	0x58024400

08001bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bc6:	4b8c      	ldr	r3, [pc, #560]	; (8001df8 <MX_GPIO_Init+0x248>)
 8001bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bcc:	4a8a      	ldr	r2, [pc, #552]	; (8001df8 <MX_GPIO_Init+0x248>)
 8001bce:	f043 0310 	orr.w	r3, r3, #16
 8001bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd6:	4b88      	ldr	r3, [pc, #544]	; (8001df8 <MX_GPIO_Init+0x248>)
 8001bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bdc:	f003 0310 	and.w	r3, r3, #16
 8001be0:	61bb      	str	r3, [r7, #24]
 8001be2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be4:	4b84      	ldr	r3, [pc, #528]	; (8001df8 <MX_GPIO_Init+0x248>)
 8001be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bea:	4a83      	ldr	r2, [pc, #524]	; (8001df8 <MX_GPIO_Init+0x248>)
 8001bec:	f043 0304 	orr.w	r3, r3, #4
 8001bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bf4:	4b80      	ldr	r3, [pc, #512]	; (8001df8 <MX_GPIO_Init+0x248>)
 8001bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c02:	4b7d      	ldr	r3, [pc, #500]	; (8001df8 <MX_GPIO_Init+0x248>)
 8001c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c08:	4a7b      	ldr	r2, [pc, #492]	; (8001df8 <MX_GPIO_Init+0x248>)
 8001c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c12:	4b79      	ldr	r3, [pc, #484]	; (8001df8 <MX_GPIO_Init+0x248>)
 8001c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c20:	4b75      	ldr	r3, [pc, #468]	; (8001df8 <MX_GPIO_Init+0x248>)
 8001c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c26:	4a74      	ldr	r2, [pc, #464]	; (8001df8 <MX_GPIO_Init+0x248>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c30:	4b71      	ldr	r3, [pc, #452]	; (8001df8 <MX_GPIO_Init+0x248>)
 8001c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3e:	4b6e      	ldr	r3, [pc, #440]	; (8001df8 <MX_GPIO_Init+0x248>)
 8001c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c44:	4a6c      	ldr	r2, [pc, #432]	; (8001df8 <MX_GPIO_Init+0x248>)
 8001c46:	f043 0302 	orr.w	r3, r3, #2
 8001c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c4e:	4b6a      	ldr	r3, [pc, #424]	; (8001df8 <MX_GPIO_Init+0x248>)
 8001c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5c:	4b66      	ldr	r3, [pc, #408]	; (8001df8 <MX_GPIO_Init+0x248>)
 8001c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c62:	4a65      	ldr	r2, [pc, #404]	; (8001df8 <MX_GPIO_Init+0x248>)
 8001c64:	f043 0308 	orr.w	r3, r3, #8
 8001c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c6c:	4b62      	ldr	r3, [pc, #392]	; (8001df8 <MX_GPIO_Init+0x248>)
 8001c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c7a:	4b5f      	ldr	r3, [pc, #380]	; (8001df8 <MX_GPIO_Init+0x248>)
 8001c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c80:	4a5d      	ldr	r2, [pc, #372]	; (8001df8 <MX_GPIO_Init+0x248>)
 8001c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c8a:	4b5b      	ldr	r3, [pc, #364]	; (8001df8 <MX_GPIO_Init+0x248>)
 8001c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f644 2121 	movw	r1, #18977	; 0x4a21
 8001c9e:	4857      	ldr	r0, [pc, #348]	; (8001dfc <MX_GPIO_Init+0x24c>)
 8001ca0:	f003 ffb2 	bl	8005c08 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f24c 0102 	movw	r1, #49154	; 0xc002
 8001caa:	4855      	ldr	r0, [pc, #340]	; (8001e00 <MX_GPIO_Init+0x250>)
 8001cac:	f003 ffac 	bl	8005c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cb6:	4853      	ldr	r0, [pc, #332]	; (8001e04 <MX_GPIO_Init+0x254>)
 8001cb8:	f003 ffa6 	bl	8005c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cc2:	4851      	ldr	r0, [pc, #324]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001cc4:	f003 ffa0 	bl	8005c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cce:	484f      	ldr	r0, [pc, #316]	; (8001e0c <MX_GPIO_Init+0x25c>)
 8001cd0:	f003 ff9a 	bl	8005c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8001cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cda:	4b4d      	ldr	r3, [pc, #308]	; (8001e10 <MX_GPIO_Init+0x260>)
 8001cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8001ce2:	f107 031c 	add.w	r3, r7, #28
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4847      	ldr	r0, [pc, #284]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001cea:	f003 fddd 	bl	80058a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001cee:	f644 2321 	movw	r3, #18977	; 0x4a21
 8001cf2:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d00:	f107 031c 	add.w	r3, r7, #28
 8001d04:	4619      	mov	r1, r3
 8001d06:	483d      	ldr	r0, [pc, #244]	; (8001dfc <MX_GPIO_Init+0x24c>)
 8001d08:	f003 fdce 	bl	80058a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 8001d0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d12:	4b3f      	ldr	r3, [pc, #252]	; (8001e10 <MX_GPIO_Init+0x260>)
 8001d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d1a:	f107 031c 	add.w	r3, r7, #28
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4837      	ldr	r0, [pc, #220]	; (8001e00 <MX_GPIO_Init+0x250>)
 8001d22:	f003 fdc1 	bl	80058a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8001d26:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d38:	f107 031c 	add.w	r3, r7, #28
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4830      	ldr	r0, [pc, #192]	; (8001e00 <MX_GPIO_Init+0x250>)
 8001d40:	f003 fdb2 	bl	80058a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001d56:	f107 031c 	add.w	r3, r7, #28
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4829      	ldr	r0, [pc, #164]	; (8001e04 <MX_GPIO_Init+0x254>)
 8001d5e:	f003 fda3 	bl	80058a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001d62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001d74:	f107 031c 	add.w	r3, r7, #28
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4823      	ldr	r0, [pc, #140]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001d7c:	f003 fd94 	bl	80058a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART4_DE_Pin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8001d80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d86:	2301      	movs	r3, #1
 8001d88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 8001d92:	f107 031c 	add.w	r3, r7, #28
 8001d96:	4619      	mov	r1, r3
 8001d98:	481c      	ldr	r0, [pc, #112]	; (8001e0c <MX_GPIO_Init+0x25c>)
 8001d9a:	f003 fd85 	bl	80058a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 8001d9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001da4:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <MX_GPIO_Init+0x260>)
 8001da6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8001dac:	f107 031c 	add.w	r3, r7, #28
 8001db0:	4619      	mov	r1, r3
 8001db2:	4818      	ldr	r0, [pc, #96]	; (8001e14 <MX_GPIO_Init+0x264>)
 8001db4:	f003 fd78 	bl	80058a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8001db8:	23c0      	movs	r3, #192	; 0xc0
 8001dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <MX_GPIO_Init+0x260>)
 8001dbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc4:	f107 031c 	add.w	r3, r7, #28
 8001dc8:	4619      	mov	r1, r3
 8001dca:	480c      	ldr	r0, [pc, #48]	; (8001dfc <MX_GPIO_Init+0x24c>)
 8001dcc:	f003 fd6c 	bl	80058a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2103      	movs	r1, #3
 8001dd4:	2017      	movs	r0, #23
 8001dd6:	f001 fa24 	bl	8003222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001dda:	2017      	movs	r0, #23
 8001ddc:	f001 fa3b 	bl	8003256 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2103      	movs	r1, #3
 8001de4:	2028      	movs	r0, #40	; 0x28
 8001de6:	f001 fa1c 	bl	8003222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dea:	2028      	movs	r0, #40	; 0x28
 8001dec:	f001 fa33 	bl	8003256 <HAL_NVIC_EnableIRQ>

}
 8001df0:	bf00      	nop
 8001df2:	3730      	adds	r7, #48	; 0x30
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	58024400 	.word	0x58024400
 8001dfc:	58020400 	.word	0x58020400
 8001e00:	58021000 	.word	0x58021000
 8001e04:	58020c00 	.word	0x58020c00
 8001e08:	58020800 	.word	0x58020800
 8001e0c:	58020000 	.word	0x58020000
 8001e10:	11110000 	.word	0x11110000
 8001e14:	58021800 	.word	0x58021800

08001e18 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001e20:	1d39      	adds	r1, r7, #4
 8001e22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e26:	2201      	movs	r2, #1
 8001e28:	4803      	ldr	r0, [pc, #12]	; (8001e38 <__io_putchar+0x20>)
 8001e2a:	f007 ff57 	bl	8009cdc <HAL_UART_Transmit>

return ch;
 8001e2e:	687b      	ldr	r3, [r7, #4]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	200003e8 	.word	0x200003e8

08001e3c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b087      	sub	sp, #28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a5a      	ldr	r2, [pc, #360]	; (8001fb0 <HAL_UART_RxCpltCallback+0x174>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	f040 80ad 	bne.w	8001fa8 <HAL_UART_RxCpltCallback+0x16c>
	{
		UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ReceivedData_Address;
 8001e4e:	4b59      	ldr	r3, [pc, #356]	; (8001fb4 <HAL_UART_RxCpltCallback+0x178>)
 8001e50:	22ac      	movs	r2, #172	; 0xac
 8001e52:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8001e54:	2364      	movs	r3, #100	; 0x64
 8001e56:	2201      	movs	r2, #1
 8001e58:	4956      	ldr	r1, [pc, #344]	; (8001fb4 <HAL_UART_RxCpltCallback+0x178>)
 8001e5a:	4855      	ldr	r0, [pc, #340]	; (8001fb0 <HAL_UART_RxCpltCallback+0x174>)
 8001e5c:	f007 ff3e 	bl	8009cdc <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2101      	movs	r1, #1
 8001e64:	4854      	ldr	r0, [pc, #336]	; (8001fb8 <HAL_UART_RxCpltCallback+0x17c>)
 8001e66:	f003 fecf 	bl	8005c08 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	2102      	movs	r1, #2
 8001e6e:	4853      	ldr	r0, [pc, #332]	; (8001fbc <HAL_UART_RxCpltCallback+0x180>)
 8001e70:	f003 feca 	bl	8005c08 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001e74:	2200      	movs	r2, #0
 8001e76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e7a:	484f      	ldr	r0, [pc, #316]	; (8001fb8 <HAL_UART_RxCpltCallback+0x17c>)
 8001e7c:	f003 fec4 	bl	8005c08 <HAL_GPIO_WritePin>
		volatile uint8_t num_mode = UART3_RXBUFFER[0] & 0x0F;
 8001e80:	4b4f      	ldr	r3, [pc, #316]	; (8001fc0 <HAL_UART_RxCpltCallback+0x184>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	75fb      	strb	r3, [r7, #23]
		volatile int received_checksum = UART3_RXBUFFER[3];
 8001e8c:	4b4c      	ldr	r3, [pc, #304]	; (8001fc0 <HAL_UART_RxCpltCallback+0x184>)
 8001e8e:	78db      	ldrb	r3, [r3, #3]
 8001e90:	613b      	str	r3, [r7, #16]
		volatile int calculate_checksum = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
		for(register int i = 0; i < 3; i++)
 8001e96:	2400      	movs	r4, #0
 8001e98:	e006      	b.n	8001ea8 <HAL_UART_RxCpltCallback+0x6c>
		{
			calculate_checksum += UART3_RXBUFFER[i];
 8001e9a:	4b49      	ldr	r3, [pc, #292]	; (8001fc0 <HAL_UART_RxCpltCallback+0x184>)
 8001e9c:	5d1b      	ldrb	r3, [r3, r4]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
		for(register int i = 0; i < 3; i++)
 8001ea6:	3401      	adds	r4, #1
 8001ea8:	2c02      	cmp	r4, #2
 8001eaa:	ddf6      	ble.n	8001e9a <HAL_UART_RxCpltCallback+0x5e>
		}
		calculate_checksum = ~calculate_checksum;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	60fb      	str	r3, [r7, #12]
		calculate_checksum = calculate_checksum & 0xFF;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	60fb      	str	r3, [r7, #12]
		if (received_checksum == calculate_checksum)
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d15b      	bne.n	8001f78 <HAL_UART_RxCpltCallback+0x13c>
		{
			switch(num_mode)
 8001ec0:	7dfb      	ldrb	r3, [r7, #23]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	2b0e      	cmp	r3, #14
 8001ec8:	d844      	bhi.n	8001f54 <HAL_UART_RxCpltCallback+0x118>
 8001eca:	a201      	add	r2, pc, #4	; (adr r2, 8001ed0 <HAL_UART_RxCpltCallback+0x94>)
 8001ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed0:	08001f55 	.word	0x08001f55
 8001ed4:	08001f55 	.word	0x08001f55
 8001ed8:	08001f55 	.word	0x08001f55
 8001edc:	08001f55 	.word	0x08001f55
 8001ee0:	08001f55 	.word	0x08001f55
 8001ee4:	08001f0d 	.word	0x08001f0d
 8001ee8:	08001f15 	.word	0x08001f15
 8001eec:	08001f1d 	.word	0x08001f1d
 8001ef0:	08001f25 	.word	0x08001f25
 8001ef4:	08001f2d 	.word	0x08001f2d
 8001ef8:	08001f35 	.word	0x08001f35
 8001efc:	08001f3d 	.word	0x08001f3d
 8001f00:	08001f45 	.word	0x08001f45
 8001f04:	08001f4d 	.word	0x08001f4d
 8001f08:	08001f55 	.word	0x08001f55
			{
				case 6:		// q1 Mode
				{
					State_Input_Joint_State = 1;
 8001f0c:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <HAL_UART_RxCpltCallback+0x188>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	701a      	strb	r2, [r3, #0]
					break;
 8001f12:	e020      	b.n	8001f56 <HAL_UART_RxCpltCallback+0x11a>
				}
				case 7:		// q2 Mode
				{
					State_Input_Joint_State = 1;
 8001f14:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <HAL_UART_RxCpltCallback+0x188>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
					break;
 8001f1a:	e01c      	b.n	8001f56 <HAL_UART_RxCpltCallback+0x11a>
				}
				case 8:		// q3 Mode
				{
					State_Input_Joint_State = 1;
 8001f1c:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <HAL_UART_RxCpltCallback+0x188>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	701a      	strb	r2, [r3, #0]
					break;
 8001f22:	e018      	b.n	8001f56 <HAL_UART_RxCpltCallback+0x11a>
				}
				case 9:		// q4 Mode
				{
					State_Input_Joint_State = 1;
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_UART_RxCpltCallback+0x188>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	701a      	strb	r2, [r3, #0]
					break;
 8001f2a:	e014      	b.n	8001f56 <HAL_UART_RxCpltCallback+0x11a>
				}
				case 10:	// Set Home Mode
				{
					State_Set_Home = 1;
 8001f2c:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <HAL_UART_RxCpltCallback+0x18c>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	701a      	strb	r2, [r3, #0]
					break;
 8001f32:	e010      	b.n	8001f56 <HAL_UART_RxCpltCallback+0x11a>
				{
					break;
				}
				case 11:	// Request 4 Joint State Mode
				{
					State_Print_4_Joint_State = 1;
 8001f34:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <HAL_UART_RxCpltCallback+0x190>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	701a      	strb	r2, [r3, #0]
					break;
 8001f3a:	e00c      	b.n	8001f56 <HAL_UART_RxCpltCallback+0x11a>
				}
				case 12:	// Request Gripper State Mode
				{
					State_Print_Gripper_State = 1;
 8001f3c:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <HAL_UART_RxCpltCallback+0x194>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
					break;
 8001f42:	e008      	b.n	8001f56 <HAL_UART_RxCpltCallback+0x11a>
				}
				case 13:	// Activate Gripper Mode
				{
					State_Activate_Gripper = 1;
 8001f44:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <HAL_UART_RxCpltCallback+0x198>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
					break;
 8001f4a:	e004      	b.n	8001f56 <HAL_UART_RxCpltCallback+0x11a>
				}
				case 14:	// Deactivate Gripper Mode
				{
					State_Deactivate_Gripper = 1;
 8001f4c:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <HAL_UART_RxCpltCallback+0x19c>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
					break;
 8001f52:	e000      	b.n	8001f56 <HAL_UART_RxCpltCallback+0x11a>
				{
					break;
				}
				default:
				{
					break;
 8001f54:	bf00      	nop
				}
			}
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001f56:	2201      	movs	r2, #1
 8001f58:	2101      	movs	r1, #1
 8001f5a:	4817      	ldr	r0, [pc, #92]	; (8001fb8 <HAL_UART_RxCpltCallback+0x17c>)
 8001f5c:	f003 fe54 	bl	8005c08 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2102      	movs	r1, #2
 8001f64:	4815      	ldr	r0, [pc, #84]	; (8001fbc <HAL_UART_RxCpltCallback+0x180>)
 8001f66:	f003 fe4f 	bl	8005c08 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f70:	4811      	ldr	r0, [pc, #68]	; (8001fb8 <HAL_UART_RxCpltCallback+0x17c>)
 8001f72:	f003 fe49 	bl	8005c08 <HAL_GPIO_WritePin>
 8001f76:	e012      	b.n	8001f9e <HAL_UART_RxCpltCallback+0x162>
		}
		else
		{
			  State_Checksum_Error = 1;
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <HAL_UART_RxCpltCallback+0x1a0>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2101      	movs	r1, #1
 8001f82:	480d      	ldr	r0, [pc, #52]	; (8001fb8 <HAL_UART_RxCpltCallback+0x17c>)
 8001f84:	f003 fe40 	bl	8005c08 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2102      	movs	r1, #2
 8001f8c:	480b      	ldr	r0, [pc, #44]	; (8001fbc <HAL_UART_RxCpltCallback+0x180>)
 8001f8e:	f003 fe3b 	bl	8005c08 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f98:	4807      	ldr	r0, [pc, #28]	; (8001fb8 <HAL_UART_RxCpltCallback+0x17c>)
 8001f9a:	f003 fe35 	bl	8005c08 <HAL_GPIO_WritePin>
		}
		HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, BUFFSIZE);
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	4907      	ldr	r1, [pc, #28]	; (8001fc0 <HAL_UART_RxCpltCallback+0x184>)
 8001fa2:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <HAL_UART_RxCpltCallback+0x174>)
 8001fa4:	f007 ff30 	bl	8009e08 <HAL_UART_Receive_IT>
	}
}
 8001fa8:	bf00      	nop
 8001faa:	371c      	adds	r7, #28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd90      	pop	{r4, r7, pc}
 8001fb0:	200003e8 	.word	0x200003e8
 8001fb4:	2000073c 	.word	0x2000073c
 8001fb8:	58020400 	.word	0x58020400
 8001fbc:	58021000 	.word	0x58021000
 8001fc0:	20000974 	.word	0x20000974
 8001fc4:	20000634 	.word	0x20000634
 8001fc8:	2000073d 	.word	0x2000073d
 8001fcc:	2000073e 	.word	0x2000073e
 8001fd0:	20000254 	.word	0x20000254
 8001fd4:	20000970 	.word	0x20000970
 8001fd8:	200004fc 	.word	0x200004fc
 8001fdc:	200008f4 	.word	0x200008f4

08001fe0 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LM1_Pin || GPIO_Pin == LM2_Pin || GPIO_Pin == LM3_Pin || GPIO_Pin == LM4_Pin || GPIO_Pin == LM5_Pin)
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002004:	d00d      	beq.n	8002022 <HAL_GPIO_EXTI_Callback+0x2e>
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800200c:	d009      	beq.n	8002022 <HAL_GPIO_EXTI_Callback+0x2e>
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	2b80      	cmp	r3, #128	; 0x80
 8002012:	d006      	beq.n	8002022 <HAL_GPIO_EXTI_Callback+0x2e>
 8002014:	88fb      	ldrh	r3, [r7, #6]
 8002016:	2b40      	cmp	r3, #64	; 0x40
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_EXTI_Callback+0x2e>
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002020:	d12b      	bne.n	800207a <HAL_GPIO_EXTI_Callback+0x86>
	{
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	2101      	movs	r1, #1
 8002026:	4824      	ldr	r0, [pc, #144]	; (80020b8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002028:	f003 fdee 	bl	8005c08 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800202c:	2200      	movs	r2, #0
 800202e:	2102      	movs	r1, #2
 8002030:	4822      	ldr	r0, [pc, #136]	; (80020bc <HAL_GPIO_EXTI_Callback+0xc8>)
 8002032:	f003 fde9 	bl	8005c08 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002036:	2201      	movs	r2, #1
 8002038:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800203c:	481e      	ldr	r0, [pc, #120]	; (80020b8 <HAL_GPIO_EXTI_Callback+0xc4>)
 800203e:	f003 fde3 	bl	8005c08 <HAL_GPIO_WritePin>

		  HAL_TIM_Base_Stop_IT(&htim5);
 8002042:	481f      	ldr	r0, [pc, #124]	; (80020c0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002044:	f006 fb30 	bl	80086a8 <HAL_TIM_Base_Stop_IT>
		  HAL_TIM_Base_Stop_IT(&htim12);
 8002048:	481e      	ldr	r0, [pc, #120]	; (80020c4 <HAL_GPIO_EXTI_Callback+0xd0>)
 800204a:	f006 fb2d 	bl	80086a8 <HAL_TIM_Base_Stop_IT>

		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800204e:	2104      	movs	r1, #4
 8002050:	481d      	ldr	r0, [pc, #116]	; (80020c8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002052:	f006 fcc1 	bl	80089d8 <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002056:	2108      	movs	r1, #8
 8002058:	481c      	ldr	r0, [pc, #112]	; (80020cc <HAL_GPIO_EXTI_Callback+0xd8>)
 800205a:	f006 fcbd 	bl	80089d8 <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800205e:	2100      	movs	r1, #0
 8002060:	481b      	ldr	r0, [pc, #108]	; (80020d0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002062:	f006 fcb9 	bl	80089d8 <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8002066:	2108      	movs	r1, #8
 8002068:	481a      	ldr	r0, [pc, #104]	; (80020d4 <HAL_GPIO_EXTI_Callback+0xe0>)
 800206a:	f006 fcb5 	bl	80089d8 <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 800206e:	2104      	movs	r1, #4
 8002070:	4819      	ldr	r0, [pc, #100]	; (80020d8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002072:	f006 fcb1 	bl	80089d8 <HAL_TIM_PWM_Stop>
		  Error_Handler();
 8002076:	f000 f96f 	bl	8002358 <Error_Handler>

	}
	if(GPIO_Pin == Blue_Button_Pin)
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002080:	d115      	bne.n	80020ae <HAL_GPIO_EXTI_Callback+0xba>
	  {
		UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ReceivedData_Address;
 8002082:	4b16      	ldr	r3, [pc, #88]	; (80020dc <HAL_GPIO_EXTI_Callback+0xe8>)
 8002084:	22ac      	movs	r2, #172	; 0xac
 8002086:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8002088:	2364      	movs	r3, #100	; 0x64
 800208a:	2201      	movs	r2, #1
 800208c:	4913      	ldr	r1, [pc, #76]	; (80020dc <HAL_GPIO_EXTI_Callback+0xe8>)
 800208e:	4814      	ldr	r0, [pc, #80]	; (80020e0 <HAL_GPIO_EXTI_Callback+0xec>)
 8002090:	f007 fe24 	bl	8009cdc <HAL_UART_Transmit>
		T += 3;
 8002094:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800209e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <HAL_GPIO_EXTI_Callback+0xf0>)
 80020a4:	edc3 7a00 	vstr	s15, [r3]
		HAL_TIM_Base_Start_IT(&htim12);
 80020a8:	4806      	ldr	r0, [pc, #24]	; (80020c4 <HAL_GPIO_EXTI_Callback+0xd0>)
 80020aa:	f006 fa8d 	bl	80085c8 <HAL_TIM_Base_Start_IT>
	  }
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	58020400 	.word	0x58020400
 80020bc:	58021000 	.word	0x58021000
 80020c0:	200005bc 	.word	0x200005bc
 80020c4:	200008a4 	.word	0x200008a4
 80020c8:	20000744 	.word	0x20000744
 80020cc:	20000858 	.word	0x20000858
 80020d0:	2000063c 	.word	0x2000063c
 80020d4:	20000310 	.word	0x20000310
 80020d8:	2000048c 	.word	0x2000048c
 80020dc:	2000073c 	.word	0x2000073c
 80020e0:	200003e8 	.word	0x200003e8
 80020e4:	20000638 	.word	0x20000638

080020e8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM5)
  {

  }
  /* Timer12 Interrupt for Trajectory Generation.*/
  if (htim->Instance == TIM12)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a83      	ldr	r2, [pc, #524]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	f040 8100 	bne.w	80022fc <HAL_TIM_PeriodElapsedCallback+0x214>
  {
	    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80020fc:	2201      	movs	r2, #1
 80020fe:	2102      	movs	r1, #2
 8002100:	4881      	ldr	r0, [pc, #516]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002102:	f003 fd81 	bl	8005c08 <HAL_GPIO_WritePin>
	    float t_2 = t*t;
 8002106:	4b81      	ldr	r3, [pc, #516]	; (800230c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002108:	ed93 7a00 	vldr	s14, [r3]
 800210c:	4b7f      	ldr	r3, [pc, #508]	; (800230c <HAL_TIM_PeriodElapsedCallback+0x224>)
 800210e:	edd3 7a00 	vldr	s15, [r3]
 8002112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002116:	edc7 7a05 	vstr	s15, [r7, #20]
	    float t_3 = t_2 * t;
 800211a:	4b7c      	ldr	r3, [pc, #496]	; (800230c <HAL_TIM_PeriodElapsedCallback+0x224>)
 800211c:	edd3 7a00 	vldr	s15, [r3]
 8002120:	ed97 7a05 	vldr	s14, [r7, #20]
 8002124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002128:	edc7 7a04 	vstr	s15, [r7, #16]
	    float Goal_position_x = C0x + (C2x*t_2) - (C3x*t_3);
 800212c:	4b78      	ldr	r3, [pc, #480]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800212e:	ed93 7a00 	vldr	s14, [r3]
 8002132:	edd7 7a05 	vldr	s15, [r7, #20]
 8002136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800213a:	4b76      	ldr	r3, [pc, #472]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800213c:	edd3 7a00 	vldr	s15, [r3]
 8002140:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002144:	4b74      	ldr	r3, [pc, #464]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002146:	edd3 6a00 	vldr	s13, [r3]
 800214a:	edd7 7a04 	vldr	s15, [r7, #16]
 800214e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002156:	edc7 7a03 	vstr	s15, [r7, #12]
	    float Goal_position_y = C0y + (C2y*t_2) - (C3y*t_3);
 800215a:	4b70      	ldr	r3, [pc, #448]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x234>)
 800215c:	ed93 7a00 	vldr	s14, [r3]
 8002160:	edd7 7a05 	vldr	s15, [r7, #20]
 8002164:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002168:	4b6d      	ldr	r3, [pc, #436]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800216a:	edd3 7a00 	vldr	s15, [r3]
 800216e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002172:	4b6c      	ldr	r3, [pc, #432]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002174:	edd3 6a00 	vldr	s13, [r3]
 8002178:	edd7 7a04 	vldr	s15, [r7, #16]
 800217c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002184:	edc7 7a02 	vstr	s15, [r7, #8]
//	    float Goal_velocity_x = (2*C2x*t) - (3 * C3x*t_2);
//	    float Goal_velocity_y = (2*C2y*t) - (3 * C3y*t_2);

	    // Inverse Pose Kinematics
	    IPK_findChessBot(Goal_position_x, Goal_position_y, 0, 0);
 8002188:	eddf 1a67 	vldr	s3, [pc, #412]	; 8002328 <HAL_TIM_PeriodElapsedCallback+0x240>
 800218c:	ed9f 1a66 	vldr	s2, [pc, #408]	; 8002328 <HAL_TIM_PeriodElapsedCallback+0x240>
 8002190:	edd7 0a02 	vldr	s1, [r7, #8]
 8002194:	ed97 0a03 	vldr	s0, [r7, #12]
 8002198:	f7fe fb44 	bl	8000824 <IPK_findChessBot>

	    StepDriveRad(1, PIDCalculate(&PID_Joint1, q[0], q_s[0]));
 800219c:	4b63      	ldr	r3, [pc, #396]	; (800232c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800219e:	edd3 7a00 	vldr	s15, [r3]
 80021a2:	4b63      	ldr	r3, [pc, #396]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80021a4:	ed93 7a00 	vldr	s14, [r3]
 80021a8:	eef0 0a47 	vmov.f32	s1, s14
 80021ac:	eeb0 0a67 	vmov.f32	s0, s15
 80021b0:	4860      	ldr	r0, [pc, #384]	; (8002334 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80021b2:	f7fe fa99 	bl	80006e8 <PIDCalculate>
 80021b6:	eef0 7a40 	vmov.f32	s15, s0
 80021ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021be:	eeb0 0b47 	vmov.f64	d0, d7
 80021c2:	2001      	movs	r0, #1
 80021c4:	f7fe fc58 	bl	8000a78 <StepDriveRad>
	    q_s[0] = q_s[0] + theta_q[0];
 80021c8:	4b59      	ldr	r3, [pc, #356]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80021ca:	ed93 7a00 	vldr	s14, [r3]
 80021ce:	4b5a      	ldr	r3, [pc, #360]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80021d0:	edd3 7a00 	vldr	s15, [r3]
 80021d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d8:	4b55      	ldr	r3, [pc, #340]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80021da:	edc3 7a00 	vstr	s15, [r3]
	    StepDriveRad(2, PIDCalculate(&PID_Joint2, q[1], q_s[1]));
 80021de:	4b53      	ldr	r3, [pc, #332]	; (800232c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80021e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80021e4:	4b52      	ldr	r3, [pc, #328]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80021e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80021ea:	eef0 0a47 	vmov.f32	s1, s14
 80021ee:	eeb0 0a67 	vmov.f32	s0, s15
 80021f2:	4852      	ldr	r0, [pc, #328]	; (800233c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80021f4:	f7fe fa78 	bl	80006e8 <PIDCalculate>
 80021f8:	eef0 7a40 	vmov.f32	s15, s0
 80021fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002200:	eeb0 0b47 	vmov.f64	d0, d7
 8002204:	2002      	movs	r0, #2
 8002206:	f7fe fc37 	bl	8000a78 <StepDriveRad>
	    q_s[1] = q_s[1] + theta_q[1];
 800220a:	4b49      	ldr	r3, [pc, #292]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800220c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002210:	4b49      	ldr	r3, [pc, #292]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002212:	edd3 7a01 	vldr	s15, [r3, #4]
 8002216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800221a:	4b45      	ldr	r3, [pc, #276]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800221c:	edc3 7a01 	vstr	s15, [r3, #4]
	    StepDriveRad(3, PIDCalculate(&PID_Joint3, q[2], q_s[2]));
 8002220:	4b42      	ldr	r3, [pc, #264]	; (800232c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002222:	edd3 7a02 	vldr	s15, [r3, #8]
 8002226:	4b42      	ldr	r3, [pc, #264]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002228:	ed93 7a02 	vldr	s14, [r3, #8]
 800222c:	eef0 0a47 	vmov.f32	s1, s14
 8002230:	eeb0 0a67 	vmov.f32	s0, s15
 8002234:	4842      	ldr	r0, [pc, #264]	; (8002340 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002236:	f7fe fa57 	bl	80006e8 <PIDCalculate>
 800223a:	eef0 7a40 	vmov.f32	s15, s0
 800223e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002242:	eeb0 0b47 	vmov.f64	d0, d7
 8002246:	2003      	movs	r0, #3
 8002248:	f7fe fc16 	bl	8000a78 <StepDriveRad>
	    q_s[2] = q_s[2] + theta_q[2];
 800224c:	4b38      	ldr	r3, [pc, #224]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800224e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002252:	4b39      	ldr	r3, [pc, #228]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002254:	edd3 7a02 	vldr	s15, [r3, #8]
 8002258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800225c:	4b34      	ldr	r3, [pc, #208]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800225e:	edc3 7a02 	vstr	s15, [r3, #8]
	    StepDriveRad(4, PIDCalculate(&PID_Joint4, q[3], q_s[3]));
 8002262:	4b32      	ldr	r3, [pc, #200]	; (800232c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002264:	edd3 7a03 	vldr	s15, [r3, #12]
 8002268:	4b31      	ldr	r3, [pc, #196]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800226a:	ed93 7a03 	vldr	s14, [r3, #12]
 800226e:	eef0 0a47 	vmov.f32	s1, s14
 8002272:	eeb0 0a67 	vmov.f32	s0, s15
 8002276:	4833      	ldr	r0, [pc, #204]	; (8002344 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002278:	f7fe fa36 	bl	80006e8 <PIDCalculate>
 800227c:	eef0 7a40 	vmov.f32	s15, s0
 8002280:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002284:	eeb0 0b47 	vmov.f64	d0, d7
 8002288:	2004      	movs	r0, #4
 800228a:	f7fe fbf5 	bl	8000a78 <StepDriveRad>
	    q_s[3] = q_s[3] + theta_q[3];
 800228e:	4b28      	ldr	r3, [pc, #160]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002290:	ed93 7a03 	vldr	s14, [r3, #12]
 8002294:	4b28      	ldr	r3, [pc, #160]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002296:	edd3 7a03 	vldr	s15, [r3, #12]
 800229a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229e:	4b24      	ldr	r3, [pc, #144]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80022a0:	edc3 7a03 	vstr	s15, [r3, #12]

	    if (t < T)
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_TIM_PeriodElapsedCallback+0x224>)
 80022a6:	ed93 7a00 	vldr	s14, [r3]
 80022aa:	4b27      	ldr	r3, [pc, #156]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80022ac:	edd3 7a00 	vldr	s15, [r3]
 80022b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b8:	d50b      	bpl.n	80022d2 <HAL_TIM_PeriodElapsedCallback+0x1ea>
	    {
	        t = t + sample_time;
 80022ba:	4b14      	ldr	r3, [pc, #80]	; (800230c <HAL_TIM_PeriodElapsedCallback+0x224>)
 80022bc:	ed93 7a00 	vldr	s14, [r3]
 80022c0:	4b22      	ldr	r3, [pc, #136]	; (800234c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80022c2:	edd3 7a00 	vldr	s15, [r3]
 80022c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <HAL_TIM_PeriodElapsedCallback+0x224>)
 80022cc:	edc3 7a00 	vstr	s15, [r3]
	    	HAL_TIM_Base_Stop_IT(&htim12);
	    	State_Casade_Control_Timer = 1;
	        // Stop Control Loop
	    }
  }
}
 80022d0:	e014      	b.n	80022fc <HAL_TIM_PeriodElapsedCallback+0x214>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80022d2:	2200      	movs	r2, #0
 80022d4:	2102      	movs	r1, #2
 80022d6:	480c      	ldr	r0, [pc, #48]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80022d8:	f003 fc96 	bl	8005c08 <HAL_GPIO_WritePin>
	    	t = T;
 80022dc:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0a      	ldr	r2, [pc, #40]	; (800230c <HAL_TIM_PeriodElapsedCallback+0x224>)
 80022e2:	6013      	str	r3, [r2, #0]
	    	C0x = Goal_position_x;
 80022e4:	4a0b      	ldr	r2, [pc, #44]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6013      	str	r3, [r2, #0]
	    	C0y = Goal_position_y;
 80022ea:	4a0d      	ldr	r2, [pc, #52]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	6013      	str	r3, [r2, #0]
	    	HAL_TIM_Base_Stop_IT(&htim12);
 80022f0:	4817      	ldr	r0, [pc, #92]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80022f2:	f006 f9d9 	bl	80086a8 <HAL_TIM_Base_Stop_IT>
	    	State_Casade_Control_Timer = 1;
 80022f6:	4b17      	ldr	r3, [pc, #92]	; (8002354 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	701a      	strb	r2, [r3, #0]
}
 80022fc:	bf00      	nop
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40001800 	.word	0x40001800
 8002308:	58021000 	.word	0x58021000
 800230c:	20000214 	.word	0x20000214
 8002310:	20000794 	.word	0x20000794
 8002314:	20000004 	.word	0x20000004
 8002318:	20000790 	.word	0x20000790
 800231c:	20000500 	.word	0x20000500
 8002320:	200008f0 	.word	0x200008f0
 8002324:	20000740 	.word	0x20000740
 8002328:	00000000 	.word	0x00000000
 800232c:	20000204 	.word	0x20000204
 8002330:	20000710 	.word	0x20000710
 8002334:	200002e4 	.word	0x200002e4
 8002338:	20000724 	.word	0x20000724
 800233c:	20000798 	.word	0x20000798
 8002340:	20000228 	.word	0x20000228
 8002344:	20000608 	.word	0x20000608
 8002348:	20000638 	.word	0x20000638
 800234c:	20000000 	.word	0x20000000
 8002350:	200008a4 	.word	0x200008a4
 8002354:	20000854 	.word	0x20000854

08002358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800235c:	2200      	movs	r2, #0
 800235e:	2101      	movs	r1, #1
 8002360:	4808      	ldr	r0, [pc, #32]	; (8002384 <Error_Handler+0x2c>)
 8002362:	f003 fc51 	bl	8005c08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002366:	2200      	movs	r2, #0
 8002368:	2102      	movs	r1, #2
 800236a:	4807      	ldr	r0, [pc, #28]	; (8002388 <Error_Handler+0x30>)
 800236c:	f003 fc4c 	bl	8005c08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002370:	2201      	movs	r2, #1
 8002372:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002376:	4803      	ldr	r0, [pc, #12]	; (8002384 <Error_Handler+0x2c>)
 8002378:	f003 fc46 	bl	8005c08 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800237c:	b672      	cpsid	i
}
 800237e:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002380:	e7fe      	b.n	8002380 <Error_Handler+0x28>
 8002382:	bf00      	nop
 8002384:	58020400 	.word	0x58020400
 8002388:	58021000 	.word	0x58021000

0800238c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <HAL_MspInit+0x30>)
 8002394:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002398:	4a08      	ldr	r2, [pc, #32]	; (80023bc <HAL_MspInit+0x30>)
 800239a:	f043 0302 	orr.w	r3, r3, #2
 800239e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_MspInit+0x30>)
 80023a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	58024400 	.word	0x58024400

080023c0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a0b      	ldr	r2, [pc, #44]	; (80023fc <HAL_CRC_MspInit+0x3c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d10e      	bne.n	80023f0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80023d2:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_CRC_MspInit+0x40>)
 80023d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d8:	4a09      	ldr	r2, [pc, #36]	; (8002400 <HAL_CRC_MspInit+0x40>)
 80023da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80023de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <HAL_CRC_MspInit+0x40>)
 80023e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	58024c00 	.word	0x58024c00
 8002400:	58024400 	.word	0x58024400

08002404 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b0b8      	sub	sp, #224	; 0xe0
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	22bc      	movs	r2, #188	; 0xbc
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f00a fc87 	bl	800cd38 <memset>
  if(hspi->Instance==SPI3)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a25      	ldr	r2, [pc, #148]	; (80024c4 <HAL_SPI_MspInit+0xc0>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d142      	bne.n	80024ba <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002438:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800243a:	2300      	movs	r3, #0
 800243c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800243e:	f107 0310 	add.w	r3, r7, #16
 8002442:	4618      	mov	r0, r3
 8002444:	f004 fbea 	bl	8006c1c <HAL_RCCEx_PeriphCLKConfig>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800244e:	f7ff ff83 	bl	8002358 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002452:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <HAL_SPI_MspInit+0xc4>)
 8002454:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002458:	4a1b      	ldr	r2, [pc, #108]	; (80024c8 <HAL_SPI_MspInit+0xc4>)
 800245a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800245e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002462:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_SPI_MspInit+0xc4>)
 8002464:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002470:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <HAL_SPI_MspInit+0xc4>)
 8002472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002476:	4a14      	ldr	r2, [pc, #80]	; (80024c8 <HAL_SPI_MspInit+0xc4>)
 8002478:	f043 0304 	orr.w	r3, r3, #4
 800247c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002480:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <HAL_SPI_MspInit+0xc4>)
 8002482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800248e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002492:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002496:	2302      	movs	r3, #2
 8002498:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024a8:	2306      	movs	r3, #6
 80024aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024b2:	4619      	mov	r1, r3
 80024b4:	4805      	ldr	r0, [pc, #20]	; (80024cc <HAL_SPI_MspInit+0xc8>)
 80024b6:	f003 f9f7 	bl	80058a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80024ba:	bf00      	nop
 80024bc:	37e0      	adds	r7, #224	; 0xe0
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40003c00 	.word	0x40003c00
 80024c8:	58024400 	.word	0x58024400
 80024cc:	58020800 	.word	0x58020800

080024d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08a      	sub	sp, #40	; 0x28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a51      	ldr	r2, [pc, #324]	; (8002624 <HAL_TIM_Base_MspInit+0x154>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d10f      	bne.n	8002502 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024e2:	4b51      	ldr	r3, [pc, #324]	; (8002628 <HAL_TIM_Base_MspInit+0x158>)
 80024e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024e8:	4a4f      	ldr	r2, [pc, #316]	; (8002628 <HAL_TIM_Base_MspInit+0x158>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024f2:	4b4d      	ldr	r3, [pc, #308]	; (8002628 <HAL_TIM_Base_MspInit+0x158>)
 80024f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002500:	e08c      	b.n	800261c <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM2)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250a:	d10f      	bne.n	800252c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800250c:	4b46      	ldr	r3, [pc, #280]	; (8002628 <HAL_TIM_Base_MspInit+0x158>)
 800250e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002512:	4a45      	ldr	r2, [pc, #276]	; (8002628 <HAL_TIM_Base_MspInit+0x158>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800251c:	4b42      	ldr	r3, [pc, #264]	; (8002628 <HAL_TIM_Base_MspInit+0x158>)
 800251e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	623b      	str	r3, [r7, #32]
 8002528:	6a3b      	ldr	r3, [r7, #32]
}
 800252a:	e077      	b.n	800261c <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM3)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a3e      	ldr	r2, [pc, #248]	; (800262c <HAL_TIM_Base_MspInit+0x15c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d10f      	bne.n	8002556 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002536:	4b3c      	ldr	r3, [pc, #240]	; (8002628 <HAL_TIM_Base_MspInit+0x158>)
 8002538:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800253c:	4a3a      	ldr	r2, [pc, #232]	; (8002628 <HAL_TIM_Base_MspInit+0x158>)
 800253e:	f043 0302 	orr.w	r3, r3, #2
 8002542:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002546:	4b38      	ldr	r3, [pc, #224]	; (8002628 <HAL_TIM_Base_MspInit+0x158>)
 8002548:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	69fb      	ldr	r3, [r7, #28]
}
 8002554:	e062      	b.n	800261c <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM4)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a35      	ldr	r2, [pc, #212]	; (8002630 <HAL_TIM_Base_MspInit+0x160>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d10f      	bne.n	8002580 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002560:	4b31      	ldr	r3, [pc, #196]	; (8002628 <HAL_TIM_Base_MspInit+0x158>)
 8002562:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002566:	4a30      	ldr	r2, [pc, #192]	; (8002628 <HAL_TIM_Base_MspInit+0x158>)
 8002568:	f043 0304 	orr.w	r3, r3, #4
 800256c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002570:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <HAL_TIM_Base_MspInit+0x158>)
 8002572:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	61bb      	str	r3, [r7, #24]
 800257c:	69bb      	ldr	r3, [r7, #24]
}
 800257e:	e04d      	b.n	800261c <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM5)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a2b      	ldr	r2, [pc, #172]	; (8002634 <HAL_TIM_Base_MspInit+0x164>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d117      	bne.n	80025ba <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800258a:	4b27      	ldr	r3, [pc, #156]	; (8002628 <HAL_TIM_Base_MspInit+0x158>)
 800258c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002590:	4a25      	ldr	r2, [pc, #148]	; (8002628 <HAL_TIM_Base_MspInit+0x158>)
 8002592:	f043 0308 	orr.w	r3, r3, #8
 8002596:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800259a:	4b23      	ldr	r3, [pc, #140]	; (8002628 <HAL_TIM_Base_MspInit+0x158>)
 800259c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80025a8:	2200      	movs	r2, #0
 80025aa:	2100      	movs	r1, #0
 80025ac:	2032      	movs	r0, #50	; 0x32
 80025ae:	f000 fe38 	bl	8003222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80025b2:	2032      	movs	r0, #50	; 0x32
 80025b4:	f000 fe4f 	bl	8003256 <HAL_NVIC_EnableIRQ>
}
 80025b8:	e030      	b.n	800261c <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM12)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1e      	ldr	r2, [pc, #120]	; (8002638 <HAL_TIM_Base_MspInit+0x168>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d117      	bne.n	80025f4 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80025c4:	4b18      	ldr	r3, [pc, #96]	; (8002628 <HAL_TIM_Base_MspInit+0x158>)
 80025c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025ca:	4a17      	ldr	r2, [pc, #92]	; (8002628 <HAL_TIM_Base_MspInit+0x158>)
 80025cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025d4:	4b14      	ldr	r3, [pc, #80]	; (8002628 <HAL_TIM_Base_MspInit+0x158>)
 80025d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80025e2:	2200      	movs	r2, #0
 80025e4:	2100      	movs	r1, #0
 80025e6:	202b      	movs	r0, #43	; 0x2b
 80025e8:	f000 fe1b 	bl	8003222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80025ec:	202b      	movs	r0, #43	; 0x2b
 80025ee:	f000 fe32 	bl	8003256 <HAL_NVIC_EnableIRQ>
}
 80025f2:	e013      	b.n	800261c <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM15)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a10      	ldr	r2, [pc, #64]	; (800263c <HAL_TIM_Base_MspInit+0x16c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d10e      	bne.n	800261c <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80025fe:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <HAL_TIM_Base_MspInit+0x158>)
 8002600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002604:	4a08      	ldr	r2, [pc, #32]	; (8002628 <HAL_TIM_Base_MspInit+0x158>)
 8002606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <HAL_TIM_Base_MspInit+0x158>)
 8002610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	68fb      	ldr	r3, [r7, #12]
}
 800261c:	bf00      	nop
 800261e:	3728      	adds	r7, #40	; 0x28
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40010000 	.word	0x40010000
 8002628:	58024400 	.word	0x58024400
 800262c:	40000400 	.word	0x40000400
 8002630:	40000800 	.word	0x40000800
 8002634:	40000c00 	.word	0x40000c00
 8002638:	40001800 	.word	0x40001800
 800263c:	40014000 	.word	0x40014000

08002640 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08c      	sub	sp, #48	; 0x30
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 031c 	add.w	r3, r7, #28
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a5e      	ldr	r2, [pc, #376]	; (80027d8 <HAL_TIM_MspPostInit+0x198>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d120      	bne.n	80026a4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002662:	4b5e      	ldr	r3, [pc, #376]	; (80027dc <HAL_TIM_MspPostInit+0x19c>)
 8002664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002668:	4a5c      	ldr	r2, [pc, #368]	; (80027dc <HAL_TIM_MspPostInit+0x19c>)
 800266a:	f043 0310 	orr.w	r3, r3, #16
 800266e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002672:	4b5a      	ldr	r3, [pc, #360]	; (80027dc <HAL_TIM_MspPostInit+0x19c>)
 8002674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8002680:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002686:	2302      	movs	r3, #2
 8002688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268e:	2300      	movs	r3, #0
 8002690:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002692:	2301      	movs	r3, #1
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8002696:	f107 031c 	add.w	r3, r7, #28
 800269a:	4619      	mov	r1, r3
 800269c:	4850      	ldr	r0, [pc, #320]	; (80027e0 <HAL_TIM_MspPostInit+0x1a0>)
 800269e:	f003 f903 	bl	80058a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80026a2:	e094      	b.n	80027ce <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ac:	d120      	bne.n	80026f0 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ae:	4b4b      	ldr	r3, [pc, #300]	; (80027dc <HAL_TIM_MspPostInit+0x19c>)
 80026b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b4:	4a49      	ldr	r2, [pc, #292]	; (80027dc <HAL_TIM_MspPostInit+0x19c>)
 80026b6:	f043 0302 	orr.w	r3, r3, #2
 80026ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026be:	4b47      	ldr	r3, [pc, #284]	; (80027dc <HAL_TIM_MspPostInit+0x19c>)
 80026c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 80026cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026da:	2300      	movs	r3, #0
 80026dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026de:	2301      	movs	r3, #1
 80026e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 80026e2:	f107 031c 	add.w	r3, r7, #28
 80026e6:	4619      	mov	r1, r3
 80026e8:	483e      	ldr	r0, [pc, #248]	; (80027e4 <HAL_TIM_MspPostInit+0x1a4>)
 80026ea:	f003 f8dd 	bl	80058a8 <HAL_GPIO_Init>
}
 80026ee:	e06e      	b.n	80027ce <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a3c      	ldr	r2, [pc, #240]	; (80027e8 <HAL_TIM_MspPostInit+0x1a8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d11f      	bne.n	800273a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fa:	4b38      	ldr	r3, [pc, #224]	; (80027dc <HAL_TIM_MspPostInit+0x19c>)
 80026fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002700:	4a36      	ldr	r2, [pc, #216]	; (80027dc <HAL_TIM_MspPostInit+0x19c>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800270a:	4b34      	ldr	r3, [pc, #208]	; (80027dc <HAL_TIM_MspPostInit+0x19c>)
 800270c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8002718:	2340      	movs	r3, #64	; 0x40
 800271a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	2302      	movs	r3, #2
 800271e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002724:	2300      	movs	r3, #0
 8002726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002728:	2302      	movs	r3, #2
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 800272c:	f107 031c 	add.w	r3, r7, #28
 8002730:	4619      	mov	r1, r3
 8002732:	482e      	ldr	r0, [pc, #184]	; (80027ec <HAL_TIM_MspPostInit+0x1ac>)
 8002734:	f003 f8b8 	bl	80058a8 <HAL_GPIO_Init>
}
 8002738:	e049      	b.n	80027ce <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a2c      	ldr	r2, [pc, #176]	; (80027f0 <HAL_TIM_MspPostInit+0x1b0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d120      	bne.n	8002786 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002744:	4b25      	ldr	r3, [pc, #148]	; (80027dc <HAL_TIM_MspPostInit+0x19c>)
 8002746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800274a:	4a24      	ldr	r2, [pc, #144]	; (80027dc <HAL_TIM_MspPostInit+0x19c>)
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002754:	4b21      	ldr	r3, [pc, #132]	; (80027dc <HAL_TIM_MspPostInit+0x19c>)
 8002756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8002762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002768:	2302      	movs	r3, #2
 800276a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002770:	2300      	movs	r3, #0
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002774:	2302      	movs	r3, #2
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8002778:	f107 031c 	add.w	r3, r7, #28
 800277c:	4619      	mov	r1, r3
 800277e:	4819      	ldr	r0, [pc, #100]	; (80027e4 <HAL_TIM_MspPostInit+0x1a4>)
 8002780:	f003 f892 	bl	80058a8 <HAL_GPIO_Init>
}
 8002784:	e023      	b.n	80027ce <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a1a      	ldr	r2, [pc, #104]	; (80027f4 <HAL_TIM_MspPostInit+0x1b4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d11e      	bne.n	80027ce <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002790:	4b12      	ldr	r3, [pc, #72]	; (80027dc <HAL_TIM_MspPostInit+0x19c>)
 8002792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002796:	4a11      	ldr	r2, [pc, #68]	; (80027dc <HAL_TIM_MspPostInit+0x19c>)
 8002798:	f043 0310 	orr.w	r3, r3, #16
 800279c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027a0:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <HAL_TIM_MspPostInit+0x19c>)
 80027a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 80027ae:	2340      	movs	r3, #64	; 0x40
 80027b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b2:	2302      	movs	r3, #2
 80027b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ba:	2300      	movs	r3, #0
 80027bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80027be:	2304      	movs	r3, #4
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 80027c2:	f107 031c 	add.w	r3, r7, #28
 80027c6:	4619      	mov	r1, r3
 80027c8:	4805      	ldr	r0, [pc, #20]	; (80027e0 <HAL_TIM_MspPostInit+0x1a0>)
 80027ca:	f003 f86d 	bl	80058a8 <HAL_GPIO_Init>
}
 80027ce:	bf00      	nop
 80027d0:	3730      	adds	r7, #48	; 0x30
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40010000 	.word	0x40010000
 80027dc:	58024400 	.word	0x58024400
 80027e0:	58021000 	.word	0x58021000
 80027e4:	58020400 	.word	0x58020400
 80027e8:	40000400 	.word	0x40000400
 80027ec:	58020000 	.word	0x58020000
 80027f0:	40000800 	.word	0x40000800
 80027f4:	40014000 	.word	0x40014000

080027f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b0ba      	sub	sp, #232	; 0xe8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002800:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002810:	f107 0318 	add.w	r3, r7, #24
 8002814:	22bc      	movs	r2, #188	; 0xbc
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f00a fa8d 	bl	800cd38 <memset>
  if(huart->Instance==UART4)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4aad      	ldr	r2, [pc, #692]	; (8002ad8 <HAL_UART_MspInit+0x2e0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	f040 80a5 	bne.w	8002974 <HAL_UART_MspInit+0x17c>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800282a:	2302      	movs	r3, #2
 800282c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800282e:	2300      	movs	r3, #0
 8002830:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002834:	f107 0318 	add.w	r3, r7, #24
 8002838:	4618      	mov	r0, r3
 800283a:	f004 f9ef 	bl	8006c1c <HAL_RCCEx_PeriphCLKConfig>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002844:	f7ff fd88 	bl	8002358 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002848:	4ba4      	ldr	r3, [pc, #656]	; (8002adc <HAL_UART_MspInit+0x2e4>)
 800284a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800284e:	4aa3      	ldr	r2, [pc, #652]	; (8002adc <HAL_UART_MspInit+0x2e4>)
 8002850:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002854:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002858:	4ba0      	ldr	r3, [pc, #640]	; (8002adc <HAL_UART_MspInit+0x2e4>)
 800285a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800285e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002866:	4b9d      	ldr	r3, [pc, #628]	; (8002adc <HAL_UART_MspInit+0x2e4>)
 8002868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800286c:	4a9b      	ldr	r2, [pc, #620]	; (8002adc <HAL_UART_MspInit+0x2e4>)
 800286e:	f043 0308 	orr.w	r3, r3, #8
 8002872:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002876:	4b99      	ldr	r3, [pc, #612]	; (8002adc <HAL_UART_MspInit+0x2e4>)
 8002878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002884:	2303      	movs	r3, #3
 8002886:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288a:	2302      	movs	r3, #2
 800288c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002896:	2300      	movs	r3, #0
 8002898:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800289c:	2308      	movs	r3, #8
 800289e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028a6:	4619      	mov	r1, r3
 80028a8:	488d      	ldr	r0, [pc, #564]	; (8002ae0 <HAL_UART_MspInit+0x2e8>)
 80028aa:	f002 fffd 	bl	80058a8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Stream0;
 80028ae:	4b8d      	ldr	r3, [pc, #564]	; (8002ae4 <HAL_UART_MspInit+0x2ec>)
 80028b0:	4a8d      	ldr	r2, [pc, #564]	; (8002ae8 <HAL_UART_MspInit+0x2f0>)
 80028b2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80028b4:	4b8b      	ldr	r3, [pc, #556]	; (8002ae4 <HAL_UART_MspInit+0x2ec>)
 80028b6:	223f      	movs	r2, #63	; 0x3f
 80028b8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028ba:	4b8a      	ldr	r3, [pc, #552]	; (8002ae4 <HAL_UART_MspInit+0x2ec>)
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c0:	4b88      	ldr	r3, [pc, #544]	; (8002ae4 <HAL_UART_MspInit+0x2ec>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028c6:	4b87      	ldr	r3, [pc, #540]	; (8002ae4 <HAL_UART_MspInit+0x2ec>)
 80028c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028cc:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028ce:	4b85      	ldr	r3, [pc, #532]	; (8002ae4 <HAL_UART_MspInit+0x2ec>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028d4:	4b83      	ldr	r3, [pc, #524]	; (8002ae4 <HAL_UART_MspInit+0x2ec>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80028da:	4b82      	ldr	r3, [pc, #520]	; (8002ae4 <HAL_UART_MspInit+0x2ec>)
 80028dc:	2200      	movs	r2, #0
 80028de:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028e0:	4b80      	ldr	r3, [pc, #512]	; (8002ae4 <HAL_UART_MspInit+0x2ec>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028e6:	4b7f      	ldr	r3, [pc, #508]	; (8002ae4 <HAL_UART_MspInit+0x2ec>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80028ec:	487d      	ldr	r0, [pc, #500]	; (8002ae4 <HAL_UART_MspInit+0x2ec>)
 80028ee:	f000 fdb7 	bl	8003460 <HAL_DMA_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 80028f8:	f7ff fd2e 	bl	8002358 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a79      	ldr	r2, [pc, #484]	; (8002ae4 <HAL_UART_MspInit+0x2ec>)
 8002900:	67da      	str	r2, [r3, #124]	; 0x7c
 8002902:	4a78      	ldr	r2, [pc, #480]	; (8002ae4 <HAL_UART_MspInit+0x2ec>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Stream1;
 8002908:	4b78      	ldr	r3, [pc, #480]	; (8002aec <HAL_UART_MspInit+0x2f4>)
 800290a:	4a79      	ldr	r2, [pc, #484]	; (8002af0 <HAL_UART_MspInit+0x2f8>)
 800290c:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 800290e:	4b77      	ldr	r3, [pc, #476]	; (8002aec <HAL_UART_MspInit+0x2f4>)
 8002910:	2240      	movs	r2, #64	; 0x40
 8002912:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002914:	4b75      	ldr	r3, [pc, #468]	; (8002aec <HAL_UART_MspInit+0x2f4>)
 8002916:	2240      	movs	r2, #64	; 0x40
 8002918:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800291a:	4b74      	ldr	r3, [pc, #464]	; (8002aec <HAL_UART_MspInit+0x2f4>)
 800291c:	2200      	movs	r2, #0
 800291e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002920:	4b72      	ldr	r3, [pc, #456]	; (8002aec <HAL_UART_MspInit+0x2f4>)
 8002922:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002926:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002928:	4b70      	ldr	r3, [pc, #448]	; (8002aec <HAL_UART_MspInit+0x2f4>)
 800292a:	2200      	movs	r2, #0
 800292c:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800292e:	4b6f      	ldr	r3, [pc, #444]	; (8002aec <HAL_UART_MspInit+0x2f4>)
 8002930:	2200      	movs	r2, #0
 8002932:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002934:	4b6d      	ldr	r3, [pc, #436]	; (8002aec <HAL_UART_MspInit+0x2f4>)
 8002936:	2200      	movs	r2, #0
 8002938:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800293a:	4b6c      	ldr	r3, [pc, #432]	; (8002aec <HAL_UART_MspInit+0x2f4>)
 800293c:	2200      	movs	r2, #0
 800293e:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002940:	4b6a      	ldr	r3, [pc, #424]	; (8002aec <HAL_UART_MspInit+0x2f4>)
 8002942:	2200      	movs	r2, #0
 8002944:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002946:	4869      	ldr	r0, [pc, #420]	; (8002aec <HAL_UART_MspInit+0x2f4>)
 8002948:	f000 fd8a 	bl	8003460 <HAL_DMA_Init>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8002952:	f7ff fd01 	bl	8002358 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a64      	ldr	r2, [pc, #400]	; (8002aec <HAL_UART_MspInit+0x2f4>)
 800295a:	679a      	str	r2, [r3, #120]	; 0x78
 800295c:	4a63      	ldr	r2, [pc, #396]	; (8002aec <HAL_UART_MspInit+0x2f4>)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002962:	2200      	movs	r2, #0
 8002964:	2100      	movs	r1, #0
 8002966:	2034      	movs	r0, #52	; 0x34
 8002968:	f000 fc5b 	bl	8003222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800296c:	2034      	movs	r0, #52	; 0x34
 800296e:	f000 fc72 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002972:	e0ac      	b.n	8002ace <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a5e      	ldr	r2, [pc, #376]	; (8002af4 <HAL_UART_MspInit+0x2fc>)
 800297a:	4293      	cmp	r3, r2
 800297c:	f040 80a7 	bne.w	8002ace <HAL_UART_MspInit+0x2d6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002980:	2302      	movs	r3, #2
 8002982:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002984:	2300      	movs	r3, #0
 8002986:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800298a:	f107 0318 	add.w	r3, r7, #24
 800298e:	4618      	mov	r0, r3
 8002990:	f004 f944 	bl	8006c1c <HAL_RCCEx_PeriphCLKConfig>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 800299a:	f7ff fcdd 	bl	8002358 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800299e:	4b4f      	ldr	r3, [pc, #316]	; (8002adc <HAL_UART_MspInit+0x2e4>)
 80029a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029a4:	4a4d      	ldr	r2, [pc, #308]	; (8002adc <HAL_UART_MspInit+0x2e4>)
 80029a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029ae:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_UART_MspInit+0x2e4>)
 80029b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029bc:	4b47      	ldr	r3, [pc, #284]	; (8002adc <HAL_UART_MspInit+0x2e4>)
 80029be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c2:	4a46      	ldr	r2, [pc, #280]	; (8002adc <HAL_UART_MspInit+0x2e4>)
 80029c4:	f043 0308 	orr.w	r3, r3, #8
 80029c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029cc:	4b43      	ldr	r3, [pc, #268]	; (8002adc <HAL_UART_MspInit+0x2e4>)
 80029ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e2:	2302      	movs	r3, #2
 80029e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029f4:	2307      	movs	r3, #7
 80029f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029fe:	4619      	mov	r1, r3
 8002a00:	4837      	ldr	r0, [pc, #220]	; (8002ae0 <HAL_UART_MspInit+0x2e8>)
 8002a02:	f002 ff51 	bl	80058a8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002a06:	4b3c      	ldr	r3, [pc, #240]	; (8002af8 <HAL_UART_MspInit+0x300>)
 8002a08:	4a3c      	ldr	r2, [pc, #240]	; (8002afc <HAL_UART_MspInit+0x304>)
 8002a0a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002a0c:	4b3a      	ldr	r3, [pc, #232]	; (8002af8 <HAL_UART_MspInit+0x300>)
 8002a0e:	222d      	movs	r2, #45	; 0x2d
 8002a10:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a12:	4b39      	ldr	r3, [pc, #228]	; (8002af8 <HAL_UART_MspInit+0x300>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a18:	4b37      	ldr	r3, [pc, #220]	; (8002af8 <HAL_UART_MspInit+0x300>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a1e:	4b36      	ldr	r3, [pc, #216]	; (8002af8 <HAL_UART_MspInit+0x300>)
 8002a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a24:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a26:	4b34      	ldr	r3, [pc, #208]	; (8002af8 <HAL_UART_MspInit+0x300>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a2c:	4b32      	ldr	r3, [pc, #200]	; (8002af8 <HAL_UART_MspInit+0x300>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002a32:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <HAL_UART_MspInit+0x300>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002a38:	4b2f      	ldr	r3, [pc, #188]	; (8002af8 <HAL_UART_MspInit+0x300>)
 8002a3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a3e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a40:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <HAL_UART_MspInit+0x300>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002a46:	482c      	ldr	r0, [pc, #176]	; (8002af8 <HAL_UART_MspInit+0x300>)
 8002a48:	f000 fd0a 	bl	8003460 <HAL_DMA_Init>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8002a52:	f7ff fc81 	bl	8002358 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a27      	ldr	r2, [pc, #156]	; (8002af8 <HAL_UART_MspInit+0x300>)
 8002a5a:	67da      	str	r2, [r3, #124]	; 0x7c
 8002a5c:	4a26      	ldr	r2, [pc, #152]	; (8002af8 <HAL_UART_MspInit+0x300>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8002a62:	4b27      	ldr	r3, [pc, #156]	; (8002b00 <HAL_UART_MspInit+0x308>)
 8002a64:	4a27      	ldr	r2, [pc, #156]	; (8002b04 <HAL_UART_MspInit+0x30c>)
 8002a66:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002a68:	4b25      	ldr	r3, [pc, #148]	; (8002b00 <HAL_UART_MspInit+0x308>)
 8002a6a:	222e      	movs	r2, #46	; 0x2e
 8002a6c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a6e:	4b24      	ldr	r3, [pc, #144]	; (8002b00 <HAL_UART_MspInit+0x308>)
 8002a70:	2240      	movs	r2, #64	; 0x40
 8002a72:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a74:	4b22      	ldr	r3, [pc, #136]	; (8002b00 <HAL_UART_MspInit+0x308>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a7a:	4b21      	ldr	r3, [pc, #132]	; (8002b00 <HAL_UART_MspInit+0x308>)
 8002a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a80:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a82:	4b1f      	ldr	r3, [pc, #124]	; (8002b00 <HAL_UART_MspInit+0x308>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a88:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <HAL_UART_MspInit+0x308>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002a8e:	4b1c      	ldr	r3, [pc, #112]	; (8002b00 <HAL_UART_MspInit+0x308>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002a94:	4b1a      	ldr	r3, [pc, #104]	; (8002b00 <HAL_UART_MspInit+0x308>)
 8002a96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a9a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a9c:	4b18      	ldr	r3, [pc, #96]	; (8002b00 <HAL_UART_MspInit+0x308>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002aa2:	4817      	ldr	r0, [pc, #92]	; (8002b00 <HAL_UART_MspInit+0x308>)
 8002aa4:	f000 fcdc 	bl	8003460 <HAL_DMA_Init>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_UART_MspInit+0x2ba>
      Error_Handler();
 8002aae:	f7ff fc53 	bl	8002358 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <HAL_UART_MspInit+0x308>)
 8002ab6:	679a      	str	r2, [r3, #120]	; 0x78
 8002ab8:	4a11      	ldr	r2, [pc, #68]	; (8002b00 <HAL_UART_MspInit+0x308>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	2027      	movs	r0, #39	; 0x27
 8002ac4:	f000 fbad 	bl	8003222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ac8:	2027      	movs	r0, #39	; 0x27
 8002aca:	f000 fbc4 	bl	8003256 <HAL_NVIC_EnableIRQ>
}
 8002ace:	bf00      	nop
 8002ad0:	37e8      	adds	r7, #232	; 0xe8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40004c00 	.word	0x40004c00
 8002adc:	58024400 	.word	0x58024400
 8002ae0:	58020c00 	.word	0x58020c00
 8002ae4:	2000026c 	.word	0x2000026c
 8002ae8:	40020410 	.word	0x40020410
 8002aec:	200008f8 	.word	0x200008f8
 8002af0:	40020428 	.word	0x40020428
 8002af4:	40004800 	.word	0x40004800
 8002af8:	2000035c 	.word	0x2000035c
 8002afc:	40020028 	.word	0x40020028
 8002b00:	20000544 	.word	0x20000544
 8002b04:	40020040 	.word	0x40020040

08002b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b0c:	e7fe      	b.n	8002b0c <NMI_Handler+0x4>

08002b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b12:	e7fe      	b.n	8002b12 <HardFault_Handler+0x4>

08002b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b18:	e7fe      	b.n	8002b18 <MemManage_Handler+0x4>

08002b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b1e:	e7fe      	b.n	8002b1e <BusFault_Handler+0x4>

08002b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b24:	e7fe      	b.n	8002b24 <UsageFault_Handler+0x4>

08002b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b54:	f000 fa5e 	bl	8003014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002b60:	4802      	ldr	r0, [pc, #8]	; (8002b6c <DMA1_Stream1_IRQHandler+0x10>)
 8002b62:	f001 fd3b 	bl	80045dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	2000035c 	.word	0x2000035c

08002b70 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002b74:	4802      	ldr	r0, [pc, #8]	; (8002b80 <DMA1_Stream2_IRQHandler+0x10>)
 8002b76:	f001 fd31 	bl	80045dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000544 	.word	0x20000544

08002b84 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002b88:	2040      	movs	r0, #64	; 0x40
 8002b8a:	f003 f856 	bl	8005c3a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002b8e:	2080      	movs	r0, #128	; 0x80
 8002b90:	f003 f853 	bl	8005c3a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b9c:	4802      	ldr	r0, [pc, #8]	; (8002ba8 <USART3_IRQHandler+0x10>)
 8002b9e:	f007 f979 	bl	8009e94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	200003e8 	.word	0x200003e8

08002bac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002bb0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002bb4:	f003 f841 	bl	8005c3a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002bb8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002bbc:	f003 f83d 	bl	8005c3a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002bc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002bc4:	f003 f839 	bl	8005c3a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002bc8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002bcc:	f003 f835 	bl	8005c3a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bd0:	bf00      	nop
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002bd8:	4802      	ldr	r0, [pc, #8]	; (8002be4 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002bda:	f005 ff93 	bl	8008b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	200008a4 	.word	0x200008a4

08002be8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002bec:	4802      	ldr	r0, [pc, #8]	; (8002bf8 <TIM5_IRQHandler+0x10>)
 8002bee:	f005 ff89 	bl	8008b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200005bc 	.word	0x200005bc

08002bfc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002c00:	4802      	ldr	r0, [pc, #8]	; (8002c0c <UART4_IRQHandler+0x10>)
 8002c02:	f007 f947 	bl	8009e94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200007c4 	.word	0x200007c4

08002c10 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002c14:	4802      	ldr	r0, [pc, #8]	; (8002c20 <DMA2_Stream0_IRQHandler+0x10>)
 8002c16:	f001 fce1 	bl	80045dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	2000026c 	.word	0x2000026c

08002c24 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002c28:	4802      	ldr	r0, [pc, #8]	; (8002c34 <DMA2_Stream1_IRQHandler+0x10>)
 8002c2a:	f001 fcd7 	bl	80045dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	200008f8 	.word	0x200008f8

08002c38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
	return 1;
 8002c3c:	2301      	movs	r3, #1
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <_kill>:

int _kill(int pid, int sig)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c52:	f00a f847 	bl	800cce4 <__errno>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2216      	movs	r2, #22
 8002c5a:	601a      	str	r2, [r3, #0]
	return -1;
 8002c5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <_exit>:

void _exit (int status)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c70:	f04f 31ff 	mov.w	r1, #4294967295
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff ffe7 	bl	8002c48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c7a:	e7fe      	b.n	8002c7a <_exit+0x12>

08002c7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	e00a      	b.n	8002ca4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c8e:	f3af 8000 	nop.w
 8002c92:	4601      	mov	r1, r0
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	60ba      	str	r2, [r7, #8]
 8002c9a:	b2ca      	uxtb	r2, r1
 8002c9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	dbf0      	blt.n	8002c8e <_read+0x12>
	}

return len;
 8002cac:	687b      	ldr	r3, [r7, #4]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b086      	sub	sp, #24
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	e009      	b.n	8002cdc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	60ba      	str	r2, [r7, #8]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff f8a1 	bl	8001e18 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	dbf1      	blt.n	8002cc8 <_write+0x12>
	}
	return len;
 8002ce4:	687b      	ldr	r3, [r7, #4]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <_close>:

int _close(int file)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
	return -1;
 8002cf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d16:	605a      	str	r2, [r3, #4]
	return 0;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <_isatty>:

int _isatty(int file)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
	return 1;
 8002d2e:	2301      	movs	r3, #1
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
	return 0;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d60:	4a14      	ldr	r2, [pc, #80]	; (8002db4 <_sbrk+0x5c>)
 8002d62:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <_sbrk+0x60>)
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d6c:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <_sbrk+0x64>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d102      	bne.n	8002d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d74:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <_sbrk+0x64>)
 8002d76:	4a12      	ldr	r2, [pc, #72]	; (8002dc0 <_sbrk+0x68>)
 8002d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d7a:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <_sbrk+0x64>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d207      	bcs.n	8002d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d88:	f009 ffac 	bl	800cce4 <__errno>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	220c      	movs	r2, #12
 8002d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d92:	f04f 33ff 	mov.w	r3, #4294967295
 8002d96:	e009      	b.n	8002dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d98:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <_sbrk+0x64>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d9e:	4b07      	ldr	r3, [pc, #28]	; (8002dbc <_sbrk+0x64>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	4a05      	ldr	r2, [pc, #20]	; (8002dbc <_sbrk+0x64>)
 8002da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002daa:	68fb      	ldr	r3, [r7, #12]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20020000 	.word	0x20020000
 8002db8:	00000400 	.word	0x00000400
 8002dbc:	2000021c 	.word	0x2000021c
 8002dc0:	20000990 	.word	0x20000990

08002dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002dc8:	4b39      	ldr	r3, [pc, #228]	; (8002eb0 <SystemInit+0xec>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dce:	4a38      	ldr	r2, [pc, #224]	; (8002eb0 <SystemInit+0xec>)
 8002dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002dd8:	4b36      	ldr	r3, [pc, #216]	; (8002eb4 <SystemInit+0xf0>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	2b06      	cmp	r3, #6
 8002de2:	d807      	bhi.n	8002df4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002de4:	4b33      	ldr	r3, [pc, #204]	; (8002eb4 <SystemInit+0xf0>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f023 030f 	bic.w	r3, r3, #15
 8002dec:	4a31      	ldr	r2, [pc, #196]	; (8002eb4 <SystemInit+0xf0>)
 8002dee:	f043 0307 	orr.w	r3, r3, #7
 8002df2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002df4:	4b30      	ldr	r3, [pc, #192]	; (8002eb8 <SystemInit+0xf4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a2f      	ldr	r2, [pc, #188]	; (8002eb8 <SystemInit+0xf4>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e00:	4b2d      	ldr	r3, [pc, #180]	; (8002eb8 <SystemInit+0xf4>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002e06:	4b2c      	ldr	r3, [pc, #176]	; (8002eb8 <SystemInit+0xf4>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	492b      	ldr	r1, [pc, #172]	; (8002eb8 <SystemInit+0xf4>)
 8002e0c:	4b2b      	ldr	r3, [pc, #172]	; (8002ebc <SystemInit+0xf8>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e12:	4b28      	ldr	r3, [pc, #160]	; (8002eb4 <SystemInit+0xf0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d007      	beq.n	8002e2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e1e:	4b25      	ldr	r3, [pc, #148]	; (8002eb4 <SystemInit+0xf0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 030f 	bic.w	r3, r3, #15
 8002e26:	4a23      	ldr	r2, [pc, #140]	; (8002eb4 <SystemInit+0xf0>)
 8002e28:	f043 0307 	orr.w	r3, r3, #7
 8002e2c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002e2e:	4b22      	ldr	r3, [pc, #136]	; (8002eb8 <SystemInit+0xf4>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002e34:	4b20      	ldr	r3, [pc, #128]	; (8002eb8 <SystemInit+0xf4>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002e3a:	4b1f      	ldr	r3, [pc, #124]	; (8002eb8 <SystemInit+0xf4>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002e40:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <SystemInit+0xf4>)
 8002e42:	4a1f      	ldr	r2, [pc, #124]	; (8002ec0 <SystemInit+0xfc>)
 8002e44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002e46:	4b1c      	ldr	r3, [pc, #112]	; (8002eb8 <SystemInit+0xf4>)
 8002e48:	4a1e      	ldr	r2, [pc, #120]	; (8002ec4 <SystemInit+0x100>)
 8002e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002e4c:	4b1a      	ldr	r3, [pc, #104]	; (8002eb8 <SystemInit+0xf4>)
 8002e4e:	4a1e      	ldr	r2, [pc, #120]	; (8002ec8 <SystemInit+0x104>)
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002e52:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <SystemInit+0xf4>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002e58:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <SystemInit+0xf4>)
 8002e5a:	4a1b      	ldr	r2, [pc, #108]	; (8002ec8 <SystemInit+0x104>)
 8002e5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002e5e:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <SystemInit+0xf4>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002e64:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <SystemInit+0xf4>)
 8002e66:	4a18      	ldr	r2, [pc, #96]	; (8002ec8 <SystemInit+0x104>)
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002e6a:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <SystemInit+0xf4>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e70:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <SystemInit+0xf4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a10      	ldr	r2, [pc, #64]	; (8002eb8 <SystemInit+0xf4>)
 8002e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e7c:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <SystemInit+0xf4>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <SystemInit+0x108>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <SystemInit+0x10c>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e8e:	d202      	bcs.n	8002e96 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002e90:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <SystemInit+0x110>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <SystemInit+0x114>)
 8002e98:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002e9c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e9e:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <SystemInit+0xec>)
 8002ea0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ea4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002ea6:	bf00      	nop
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00
 8002eb4:	52002000 	.word	0x52002000
 8002eb8:	58024400 	.word	0x58024400
 8002ebc:	eaf6ed7f 	.word	0xeaf6ed7f
 8002ec0:	02020200 	.word	0x02020200
 8002ec4:	01ff0000 	.word	0x01ff0000
 8002ec8:	01010280 	.word	0x01010280
 8002ecc:	5c001000 	.word	0x5c001000
 8002ed0:	ffff0000 	.word	0xffff0000
 8002ed4:	51008108 	.word	0x51008108
 8002ed8:	52004000 	.word	0x52004000

08002edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ee0:	f7ff ff70 	bl	8002dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ee4:	480c      	ldr	r0, [pc, #48]	; (8002f18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ee6:	490d      	ldr	r1, [pc, #52]	; (8002f1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ee8:	4a0d      	ldr	r2, [pc, #52]	; (8002f20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eec:	e002      	b.n	8002ef4 <LoopCopyDataInit>

08002eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ef2:	3304      	adds	r3, #4

08002ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ef8:	d3f9      	bcc.n	8002eee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002efa:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002efc:	4c0a      	ldr	r4, [pc, #40]	; (8002f28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f00:	e001      	b.n	8002f06 <LoopFillZerobss>

08002f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f04:	3204      	adds	r2, #4

08002f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f08:	d3fb      	bcc.n	8002f02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f0a:	f009 fef1 	bl	800ccf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f0e:	f7fd ffdf 	bl	8000ed0 <main>
  bx  lr
 8002f12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f1c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002f20:	0800fcbc 	.word	0x0800fcbc
  ldr r2, =_sbss
 8002f24:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002f28:	2000098c 	.word	0x2000098c

08002f2c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f2c:	e7fe      	b.n	8002f2c <ADC3_IRQHandler>
	...

08002f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f36:	2003      	movs	r0, #3
 8002f38:	f000 f968 	bl	800320c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f3c:	f003 fc98 	bl	8006870 <HAL_RCC_GetSysClockFreq>
 8002f40:	4602      	mov	r2, r0
 8002f42:	4b15      	ldr	r3, [pc, #84]	; (8002f98 <HAL_Init+0x68>)
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	0a1b      	lsrs	r3, r3, #8
 8002f48:	f003 030f 	and.w	r3, r3, #15
 8002f4c:	4913      	ldr	r1, [pc, #76]	; (8002f9c <HAL_Init+0x6c>)
 8002f4e:	5ccb      	ldrb	r3, [r1, r3]
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
 8002f58:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f5a:	4b0f      	ldr	r3, [pc, #60]	; (8002f98 <HAL_Init+0x68>)
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	4a0e      	ldr	r2, [pc, #56]	; (8002f9c <HAL_Init+0x6c>)
 8002f64:	5cd3      	ldrb	r3, [r2, r3]
 8002f66:	f003 031f 	and.w	r3, r3, #31
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f70:	4a0b      	ldr	r2, [pc, #44]	; (8002fa0 <HAL_Init+0x70>)
 8002f72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f74:	4a0b      	ldr	r2, [pc, #44]	; (8002fa4 <HAL_Init+0x74>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f000 f814 	bl	8002fa8 <HAL_InitTick>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e002      	b.n	8002f90 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f8a:	f7ff f9ff 	bl	800238c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	58024400 	.word	0x58024400
 8002f9c:	0800f63c 	.word	0x0800f63c
 8002fa0:	2000000c 	.word	0x2000000c
 8002fa4:	20000008 	.word	0x20000008

08002fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002fb0:	4b15      	ldr	r3, [pc, #84]	; (8003008 <HAL_InitTick+0x60>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e021      	b.n	8003000 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002fbc:	4b13      	ldr	r3, [pc, #76]	; (800300c <HAL_InitTick+0x64>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	4b11      	ldr	r3, [pc, #68]	; (8003008 <HAL_InitTick+0x60>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 f94d 	bl	8003272 <HAL_SYSTICK_Config>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e00e      	b.n	8003000 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b0f      	cmp	r3, #15
 8002fe6:	d80a      	bhi.n	8002ffe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fe8:	2200      	movs	r2, #0
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff0:	f000 f917 	bl	8003222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ff4:	4a06      	ldr	r2, [pc, #24]	; (8003010 <HAL_InitTick+0x68>)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	e000      	b.n	8003000 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
}
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20000014 	.word	0x20000014
 800300c:	20000008 	.word	0x20000008
 8003010:	20000010 	.word	0x20000010

08003014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003018:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_IncTick+0x20>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_IncTick+0x24>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4413      	add	r3, r2
 8003024:	4a04      	ldr	r2, [pc, #16]	; (8003038 <HAL_IncTick+0x24>)
 8003026:	6013      	str	r3, [r2, #0]
}
 8003028:	bf00      	nop
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	20000014 	.word	0x20000014
 8003038:	20000978 	.word	0x20000978

0800303c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return uwTick;
 8003040:	4b03      	ldr	r3, [pc, #12]	; (8003050 <HAL_GetTick+0x14>)
 8003042:	681b      	ldr	r3, [r3, #0]
}
 8003044:	4618      	mov	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	20000978 	.word	0x20000978

08003054 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003058:	4b03      	ldr	r3, [pc, #12]	; (8003068 <HAL_GetREVID+0x14>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	0c1b      	lsrs	r3, r3, #16
}
 800305e:	4618      	mov	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	5c001000 	.word	0x5c001000

0800306c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <__NVIC_SetPriorityGrouping+0x40>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003088:	4013      	ands	r3, r2
 800308a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003094:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <__NVIC_SetPriorityGrouping+0x44>)
 8003096:	4313      	orrs	r3, r2
 8003098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800309a:	4a04      	ldr	r2, [pc, #16]	; (80030ac <__NVIC_SetPriorityGrouping+0x40>)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	60d3      	str	r3, [r2, #12]
}
 80030a0:	bf00      	nop
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	e000ed00 	.word	0xe000ed00
 80030b0:	05fa0000 	.word	0x05fa0000

080030b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030b8:	4b04      	ldr	r3, [pc, #16]	; (80030cc <__NVIC_GetPriorityGrouping+0x18>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	0a1b      	lsrs	r3, r3, #8
 80030be:	f003 0307 	and.w	r3, r3, #7
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	db0b      	blt.n	80030fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	f003 021f 	and.w	r2, r3, #31
 80030e8:	4907      	ldr	r1, [pc, #28]	; (8003108 <__NVIC_EnableIRQ+0x38>)
 80030ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	2001      	movs	r0, #1
 80030f2:	fa00 f202 	lsl.w	r2, r0, r2
 80030f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	e000e100 	.word	0xe000e100

0800310c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	6039      	str	r1, [r7, #0]
 8003116:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003118:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800311c:	2b00      	cmp	r3, #0
 800311e:	db0a      	blt.n	8003136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	b2da      	uxtb	r2, r3
 8003124:	490c      	ldr	r1, [pc, #48]	; (8003158 <__NVIC_SetPriority+0x4c>)
 8003126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800312a:	0112      	lsls	r2, r2, #4
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	440b      	add	r3, r1
 8003130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003134:	e00a      	b.n	800314c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	b2da      	uxtb	r2, r3
 800313a:	4908      	ldr	r1, [pc, #32]	; (800315c <__NVIC_SetPriority+0x50>)
 800313c:	88fb      	ldrh	r3, [r7, #6]
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	3b04      	subs	r3, #4
 8003144:	0112      	lsls	r2, r2, #4
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	440b      	add	r3, r1
 800314a:	761a      	strb	r2, [r3, #24]
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	e000e100 	.word	0xe000e100
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003160:	b480      	push	{r7}
 8003162:	b089      	sub	sp, #36	; 0x24
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f1c3 0307 	rsb	r3, r3, #7
 800317a:	2b04      	cmp	r3, #4
 800317c:	bf28      	it	cs
 800317e:	2304      	movcs	r3, #4
 8003180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	3304      	adds	r3, #4
 8003186:	2b06      	cmp	r3, #6
 8003188:	d902      	bls.n	8003190 <NVIC_EncodePriority+0x30>
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3b03      	subs	r3, #3
 800318e:	e000      	b.n	8003192 <NVIC_EncodePriority+0x32>
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003194:	f04f 32ff 	mov.w	r2, #4294967295
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43da      	mvns	r2, r3
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	401a      	ands	r2, r3
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031a8:	f04f 31ff 	mov.w	r1, #4294967295
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	fa01 f303 	lsl.w	r3, r1, r3
 80031b2:	43d9      	mvns	r1, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b8:	4313      	orrs	r3, r2
         );
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3724      	adds	r7, #36	; 0x24
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031d8:	d301      	bcc.n	80031de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031da:	2301      	movs	r3, #1
 80031dc:	e00f      	b.n	80031fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031de:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <SysTick_Config+0x40>)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031e6:	210f      	movs	r1, #15
 80031e8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ec:	f7ff ff8e 	bl	800310c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031f0:	4b05      	ldr	r3, [pc, #20]	; (8003208 <SysTick_Config+0x40>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031f6:	4b04      	ldr	r3, [pc, #16]	; (8003208 <SysTick_Config+0x40>)
 80031f8:	2207      	movs	r2, #7
 80031fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	e000e010 	.word	0xe000e010

0800320c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff ff29 	bl	800306c <__NVIC_SetPriorityGrouping>
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b086      	sub	sp, #24
 8003226:	af00      	add	r7, sp, #0
 8003228:	4603      	mov	r3, r0
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	607a      	str	r2, [r7, #4]
 800322e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003230:	f7ff ff40 	bl	80030b4 <__NVIC_GetPriorityGrouping>
 8003234:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68b9      	ldr	r1, [r7, #8]
 800323a:	6978      	ldr	r0, [r7, #20]
 800323c:	f7ff ff90 	bl	8003160 <NVIC_EncodePriority>
 8003240:	4602      	mov	r2, r0
 8003242:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff5f 	bl	800310c <__NVIC_SetPriority>
}
 800324e:	bf00      	nop
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	4603      	mov	r3, r0
 800325e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003260:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff ff33 	bl	80030d0 <__NVIC_EnableIRQ>
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff ffa4 	bl	80031c8 <SysTick_Config>
 8003280:	4603      	mov	r3, r0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e054      	b.n	8003348 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	7f5b      	ldrb	r3, [r3, #29]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d105      	bne.n	80032b4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff f886 	bl	80023c0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	791b      	ldrb	r3, [r3, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10c      	bne.n	80032dc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a22      	ldr	r2, [pc, #136]	; (8003350 <HAL_CRC_Init+0xc4>)
 80032c8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0218 	bic.w	r2, r2, #24
 80032d8:	609a      	str	r2, [r3, #8]
 80032da:	e00c      	b.n	80032f6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6899      	ldr	r1, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	461a      	mov	r2, r3
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f834 	bl	8003354 <HAL_CRCEx_Polynomial_Set>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e028      	b.n	8003348 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	795b      	ldrb	r3, [r3, #5]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d105      	bne.n	800330a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f04f 32ff 	mov.w	r2, #4294967295
 8003306:	611a      	str	r2, [r3, #16]
 8003308:	e004      	b.n	8003314 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6912      	ldr	r2, [r2, #16]
 8003312:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699a      	ldr	r2, [r3, #24]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	04c11db7 	.word	0x04c11db7

08003354 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003364:	231f      	movs	r3, #31
 8003366:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003368:	bf00      	nop
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1e5a      	subs	r2, r3, #1
 800336e:	613a      	str	r2, [r7, #16]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d009      	beq.n	8003388 <HAL_CRCEx_Polynomial_Set+0x34>
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f003 031f 	and.w	r3, r3, #31
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	fa22 f303 	lsr.w	r3, r2, r3
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f0      	beq.n	800336a <HAL_CRCEx_Polynomial_Set+0x16>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b18      	cmp	r3, #24
 800338c:	d846      	bhi.n	800341c <HAL_CRCEx_Polynomial_Set+0xc8>
 800338e:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003394:	08003423 	.word	0x08003423
 8003398:	0800341d 	.word	0x0800341d
 800339c:	0800341d 	.word	0x0800341d
 80033a0:	0800341d 	.word	0x0800341d
 80033a4:	0800341d 	.word	0x0800341d
 80033a8:	0800341d 	.word	0x0800341d
 80033ac:	0800341d 	.word	0x0800341d
 80033b0:	0800341d 	.word	0x0800341d
 80033b4:	08003411 	.word	0x08003411
 80033b8:	0800341d 	.word	0x0800341d
 80033bc:	0800341d 	.word	0x0800341d
 80033c0:	0800341d 	.word	0x0800341d
 80033c4:	0800341d 	.word	0x0800341d
 80033c8:	0800341d 	.word	0x0800341d
 80033cc:	0800341d 	.word	0x0800341d
 80033d0:	0800341d 	.word	0x0800341d
 80033d4:	08003405 	.word	0x08003405
 80033d8:	0800341d 	.word	0x0800341d
 80033dc:	0800341d 	.word	0x0800341d
 80033e0:	0800341d 	.word	0x0800341d
 80033e4:	0800341d 	.word	0x0800341d
 80033e8:	0800341d 	.word	0x0800341d
 80033ec:	0800341d 	.word	0x0800341d
 80033f0:	0800341d 	.word	0x0800341d
 80033f4:	080033f9 	.word	0x080033f9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	2b06      	cmp	r3, #6
 80033fc:	d913      	bls.n	8003426 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003402:	e010      	b.n	8003426 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	2b07      	cmp	r3, #7
 8003408:	d90f      	bls.n	800342a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800340e:	e00c      	b.n	800342a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	2b0f      	cmp	r3, #15
 8003414:	d90b      	bls.n	800342e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800341a:	e008      	b.n	800342e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	75fb      	strb	r3, [r7, #23]
      break;
 8003420:	e006      	b.n	8003430 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003422:	bf00      	nop
 8003424:	e004      	b.n	8003430 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003426:	bf00      	nop
 8003428:	e002      	b.n	8003430 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800342a:	bf00      	nop
 800342c:	e000      	b.n	8003430 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800342e:	bf00      	nop
  }
  if (status == HAL_OK)
 8003430:	7dfb      	ldrb	r3, [r7, #23]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10d      	bne.n	8003452 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f023 0118 	bic.w	r1, r3, #24
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	430a      	orrs	r2, r1
 8003450:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003452:	7dfb      	ldrb	r3, [r7, #23]
}
 8003454:	4618      	mov	r0, r3
 8003456:	371c      	adds	r7, #28
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003468:	f7ff fde8 	bl	800303c <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e316      	b.n	8003aa6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a66      	ldr	r2, [pc, #408]	; (8003618 <HAL_DMA_Init+0x1b8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d04a      	beq.n	8003518 <HAL_DMA_Init+0xb8>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a65      	ldr	r2, [pc, #404]	; (800361c <HAL_DMA_Init+0x1bc>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d045      	beq.n	8003518 <HAL_DMA_Init+0xb8>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a63      	ldr	r2, [pc, #396]	; (8003620 <HAL_DMA_Init+0x1c0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d040      	beq.n	8003518 <HAL_DMA_Init+0xb8>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a62      	ldr	r2, [pc, #392]	; (8003624 <HAL_DMA_Init+0x1c4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d03b      	beq.n	8003518 <HAL_DMA_Init+0xb8>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a60      	ldr	r2, [pc, #384]	; (8003628 <HAL_DMA_Init+0x1c8>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d036      	beq.n	8003518 <HAL_DMA_Init+0xb8>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a5f      	ldr	r2, [pc, #380]	; (800362c <HAL_DMA_Init+0x1cc>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d031      	beq.n	8003518 <HAL_DMA_Init+0xb8>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a5d      	ldr	r2, [pc, #372]	; (8003630 <HAL_DMA_Init+0x1d0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d02c      	beq.n	8003518 <HAL_DMA_Init+0xb8>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a5c      	ldr	r2, [pc, #368]	; (8003634 <HAL_DMA_Init+0x1d4>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d027      	beq.n	8003518 <HAL_DMA_Init+0xb8>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a5a      	ldr	r2, [pc, #360]	; (8003638 <HAL_DMA_Init+0x1d8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d022      	beq.n	8003518 <HAL_DMA_Init+0xb8>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a59      	ldr	r2, [pc, #356]	; (800363c <HAL_DMA_Init+0x1dc>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d01d      	beq.n	8003518 <HAL_DMA_Init+0xb8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a57      	ldr	r2, [pc, #348]	; (8003640 <HAL_DMA_Init+0x1e0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d018      	beq.n	8003518 <HAL_DMA_Init+0xb8>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a56      	ldr	r2, [pc, #344]	; (8003644 <HAL_DMA_Init+0x1e4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d013      	beq.n	8003518 <HAL_DMA_Init+0xb8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a54      	ldr	r2, [pc, #336]	; (8003648 <HAL_DMA_Init+0x1e8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00e      	beq.n	8003518 <HAL_DMA_Init+0xb8>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a53      	ldr	r2, [pc, #332]	; (800364c <HAL_DMA_Init+0x1ec>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d009      	beq.n	8003518 <HAL_DMA_Init+0xb8>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a51      	ldr	r2, [pc, #324]	; (8003650 <HAL_DMA_Init+0x1f0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d004      	beq.n	8003518 <HAL_DMA_Init+0xb8>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a50      	ldr	r2, [pc, #320]	; (8003654 <HAL_DMA_Init+0x1f4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d101      	bne.n	800351c <HAL_DMA_Init+0xbc>
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <HAL_DMA_Init+0xbe>
 800351c:	2300      	movs	r3, #0
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 813b 	beq.w	800379a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a37      	ldr	r2, [pc, #220]	; (8003618 <HAL_DMA_Init+0x1b8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d04a      	beq.n	80035d4 <HAL_DMA_Init+0x174>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a36      	ldr	r2, [pc, #216]	; (800361c <HAL_DMA_Init+0x1bc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d045      	beq.n	80035d4 <HAL_DMA_Init+0x174>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a34      	ldr	r2, [pc, #208]	; (8003620 <HAL_DMA_Init+0x1c0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d040      	beq.n	80035d4 <HAL_DMA_Init+0x174>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a33      	ldr	r2, [pc, #204]	; (8003624 <HAL_DMA_Init+0x1c4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d03b      	beq.n	80035d4 <HAL_DMA_Init+0x174>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a31      	ldr	r2, [pc, #196]	; (8003628 <HAL_DMA_Init+0x1c8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d036      	beq.n	80035d4 <HAL_DMA_Init+0x174>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a30      	ldr	r2, [pc, #192]	; (800362c <HAL_DMA_Init+0x1cc>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d031      	beq.n	80035d4 <HAL_DMA_Init+0x174>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a2e      	ldr	r2, [pc, #184]	; (8003630 <HAL_DMA_Init+0x1d0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d02c      	beq.n	80035d4 <HAL_DMA_Init+0x174>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a2d      	ldr	r2, [pc, #180]	; (8003634 <HAL_DMA_Init+0x1d4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d027      	beq.n	80035d4 <HAL_DMA_Init+0x174>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a2b      	ldr	r2, [pc, #172]	; (8003638 <HAL_DMA_Init+0x1d8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d022      	beq.n	80035d4 <HAL_DMA_Init+0x174>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a2a      	ldr	r2, [pc, #168]	; (800363c <HAL_DMA_Init+0x1dc>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d01d      	beq.n	80035d4 <HAL_DMA_Init+0x174>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a28      	ldr	r2, [pc, #160]	; (8003640 <HAL_DMA_Init+0x1e0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d018      	beq.n	80035d4 <HAL_DMA_Init+0x174>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a27      	ldr	r2, [pc, #156]	; (8003644 <HAL_DMA_Init+0x1e4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d013      	beq.n	80035d4 <HAL_DMA_Init+0x174>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a25      	ldr	r2, [pc, #148]	; (8003648 <HAL_DMA_Init+0x1e8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00e      	beq.n	80035d4 <HAL_DMA_Init+0x174>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a24      	ldr	r2, [pc, #144]	; (800364c <HAL_DMA_Init+0x1ec>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d009      	beq.n	80035d4 <HAL_DMA_Init+0x174>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a22      	ldr	r2, [pc, #136]	; (8003650 <HAL_DMA_Init+0x1f0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d004      	beq.n	80035d4 <HAL_DMA_Init+0x174>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a21      	ldr	r2, [pc, #132]	; (8003654 <HAL_DMA_Init+0x1f4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d108      	bne.n	80035e6 <HAL_DMA_Init+0x186>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0201 	bic.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	e007      	b.n	80035f6 <HAL_DMA_Init+0x196>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0201 	bic.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80035f6:	e02f      	b.n	8003658 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035f8:	f7ff fd20 	bl	800303c <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b05      	cmp	r3, #5
 8003604:	d928      	bls.n	8003658 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2203      	movs	r2, #3
 8003610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e246      	b.n	8003aa6 <HAL_DMA_Init+0x646>
 8003618:	40020010 	.word	0x40020010
 800361c:	40020028 	.word	0x40020028
 8003620:	40020040 	.word	0x40020040
 8003624:	40020058 	.word	0x40020058
 8003628:	40020070 	.word	0x40020070
 800362c:	40020088 	.word	0x40020088
 8003630:	400200a0 	.word	0x400200a0
 8003634:	400200b8 	.word	0x400200b8
 8003638:	40020410 	.word	0x40020410
 800363c:	40020428 	.word	0x40020428
 8003640:	40020440 	.word	0x40020440
 8003644:	40020458 	.word	0x40020458
 8003648:	40020470 	.word	0x40020470
 800364c:	40020488 	.word	0x40020488
 8003650:	400204a0 	.word	0x400204a0
 8003654:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1c8      	bne.n	80035f8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4b83      	ldr	r3, [pc, #524]	; (8003880 <HAL_DMA_Init+0x420>)
 8003672:	4013      	ands	r3, r2
 8003674:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800367e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800368a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003696:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d107      	bne.n	80036bc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b4:	4313      	orrs	r3, r2
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80036bc:	4b71      	ldr	r3, [pc, #452]	; (8003884 <HAL_DMA_Init+0x424>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4b71      	ldr	r3, [pc, #452]	; (8003888 <HAL_DMA_Init+0x428>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036c8:	d328      	bcc.n	800371c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b28      	cmp	r3, #40	; 0x28
 80036d0:	d903      	bls.n	80036da <HAL_DMA_Init+0x27a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b2e      	cmp	r3, #46	; 0x2e
 80036d8:	d917      	bls.n	800370a <HAL_DMA_Init+0x2aa>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b3e      	cmp	r3, #62	; 0x3e
 80036e0:	d903      	bls.n	80036ea <HAL_DMA_Init+0x28a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b42      	cmp	r3, #66	; 0x42
 80036e8:	d90f      	bls.n	800370a <HAL_DMA_Init+0x2aa>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b46      	cmp	r3, #70	; 0x46
 80036f0:	d903      	bls.n	80036fa <HAL_DMA_Init+0x29a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b48      	cmp	r3, #72	; 0x48
 80036f8:	d907      	bls.n	800370a <HAL_DMA_Init+0x2aa>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b4e      	cmp	r3, #78	; 0x4e
 8003700:	d905      	bls.n	800370e <HAL_DMA_Init+0x2ae>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b52      	cmp	r3, #82	; 0x52
 8003708:	d801      	bhi.n	800370e <HAL_DMA_Init+0x2ae>
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <HAL_DMA_Init+0x2b0>
 800370e:	2300      	movs	r3, #0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800371a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f023 0307 	bic.w	r3, r3, #7
 8003732:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	2b04      	cmp	r3, #4
 8003744:	d117      	bne.n	8003776 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00e      	beq.n	8003776 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f001 ff1b 	bl	8005594 <DMA_CheckFifoParam>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2240      	movs	r2, #64	; 0x40
 8003768:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e197      	b.n	8003aa6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f001 fe56 	bl	8005430 <DMA_CalcBaseAndBitshift>
 8003784:	4603      	mov	r3, r0
 8003786:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378c:	f003 031f 	and.w	r3, r3, #31
 8003790:	223f      	movs	r2, #63	; 0x3f
 8003792:	409a      	lsls	r2, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	e0cd      	b.n	8003936 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a3b      	ldr	r2, [pc, #236]	; (800388c <HAL_DMA_Init+0x42c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d022      	beq.n	80037ea <HAL_DMA_Init+0x38a>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a39      	ldr	r2, [pc, #228]	; (8003890 <HAL_DMA_Init+0x430>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d01d      	beq.n	80037ea <HAL_DMA_Init+0x38a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a38      	ldr	r2, [pc, #224]	; (8003894 <HAL_DMA_Init+0x434>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d018      	beq.n	80037ea <HAL_DMA_Init+0x38a>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a36      	ldr	r2, [pc, #216]	; (8003898 <HAL_DMA_Init+0x438>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d013      	beq.n	80037ea <HAL_DMA_Init+0x38a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a35      	ldr	r2, [pc, #212]	; (800389c <HAL_DMA_Init+0x43c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00e      	beq.n	80037ea <HAL_DMA_Init+0x38a>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a33      	ldr	r2, [pc, #204]	; (80038a0 <HAL_DMA_Init+0x440>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d009      	beq.n	80037ea <HAL_DMA_Init+0x38a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a32      	ldr	r2, [pc, #200]	; (80038a4 <HAL_DMA_Init+0x444>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d004      	beq.n	80037ea <HAL_DMA_Init+0x38a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a30      	ldr	r2, [pc, #192]	; (80038a8 <HAL_DMA_Init+0x448>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d101      	bne.n	80037ee <HAL_DMA_Init+0x38e>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <HAL_DMA_Init+0x390>
 80037ee:	2300      	movs	r3, #0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 8097 	beq.w	8003924 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a24      	ldr	r2, [pc, #144]	; (800388c <HAL_DMA_Init+0x42c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d021      	beq.n	8003844 <HAL_DMA_Init+0x3e4>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a22      	ldr	r2, [pc, #136]	; (8003890 <HAL_DMA_Init+0x430>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d01c      	beq.n	8003844 <HAL_DMA_Init+0x3e4>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a21      	ldr	r2, [pc, #132]	; (8003894 <HAL_DMA_Init+0x434>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d017      	beq.n	8003844 <HAL_DMA_Init+0x3e4>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1f      	ldr	r2, [pc, #124]	; (8003898 <HAL_DMA_Init+0x438>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d012      	beq.n	8003844 <HAL_DMA_Init+0x3e4>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a1e      	ldr	r2, [pc, #120]	; (800389c <HAL_DMA_Init+0x43c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d00d      	beq.n	8003844 <HAL_DMA_Init+0x3e4>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a1c      	ldr	r2, [pc, #112]	; (80038a0 <HAL_DMA_Init+0x440>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d008      	beq.n	8003844 <HAL_DMA_Init+0x3e4>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a1b      	ldr	r2, [pc, #108]	; (80038a4 <HAL_DMA_Init+0x444>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d003      	beq.n	8003844 <HAL_DMA_Init+0x3e4>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a19      	ldr	r2, [pc, #100]	; (80038a8 <HAL_DMA_Init+0x448>)
 8003842:	4293      	cmp	r3, r2
 8003844:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2202      	movs	r2, #2
 8003852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4b12      	ldr	r3, [pc, #72]	; (80038ac <HAL_DMA_Init+0x44c>)
 8003862:	4013      	ands	r3, r2
 8003864:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b40      	cmp	r3, #64	; 0x40
 800386c:	d020      	beq.n	80038b0 <HAL_DMA_Init+0x450>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b80      	cmp	r3, #128	; 0x80
 8003874:	d102      	bne.n	800387c <HAL_DMA_Init+0x41c>
 8003876:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800387a:	e01a      	b.n	80038b2 <HAL_DMA_Init+0x452>
 800387c:	2300      	movs	r3, #0
 800387e:	e018      	b.n	80038b2 <HAL_DMA_Init+0x452>
 8003880:	fe10803f 	.word	0xfe10803f
 8003884:	5c001000 	.word	0x5c001000
 8003888:	ffff0000 	.word	0xffff0000
 800388c:	58025408 	.word	0x58025408
 8003890:	5802541c 	.word	0x5802541c
 8003894:	58025430 	.word	0x58025430
 8003898:	58025444 	.word	0x58025444
 800389c:	58025458 	.word	0x58025458
 80038a0:	5802546c 	.word	0x5802546c
 80038a4:	58025480 	.word	0x58025480
 80038a8:	58025494 	.word	0x58025494
 80038ac:	fffe000f 	.word	0xfffe000f
 80038b0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	68d2      	ldr	r2, [r2, #12]
 80038b6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80038b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80038c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80038c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80038d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80038d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80038e0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	461a      	mov	r2, r3
 80038f6:	4b6e      	ldr	r3, [pc, #440]	; (8003ab0 <HAL_DMA_Init+0x650>)
 80038f8:	4413      	add	r3, r2
 80038fa:	4a6e      	ldr	r2, [pc, #440]	; (8003ab4 <HAL_DMA_Init+0x654>)
 80038fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003900:	091b      	lsrs	r3, r3, #4
 8003902:	009a      	lsls	r2, r3, #2
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f001 fd91 	bl	8005430 <DMA_CalcBaseAndBitshift>
 800390e:	4603      	mov	r3, r0
 8003910:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003916:	f003 031f 	and.w	r3, r3, #31
 800391a:	2201      	movs	r2, #1
 800391c:	409a      	lsls	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	e008      	b.n	8003936 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2240      	movs	r2, #64	; 0x40
 8003928:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2203      	movs	r2, #3
 800392e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e0b7      	b.n	8003aa6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a5f      	ldr	r2, [pc, #380]	; (8003ab8 <HAL_DMA_Init+0x658>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d072      	beq.n	8003a26 <HAL_DMA_Init+0x5c6>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a5d      	ldr	r2, [pc, #372]	; (8003abc <HAL_DMA_Init+0x65c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d06d      	beq.n	8003a26 <HAL_DMA_Init+0x5c6>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a5c      	ldr	r2, [pc, #368]	; (8003ac0 <HAL_DMA_Init+0x660>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d068      	beq.n	8003a26 <HAL_DMA_Init+0x5c6>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a5a      	ldr	r2, [pc, #360]	; (8003ac4 <HAL_DMA_Init+0x664>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d063      	beq.n	8003a26 <HAL_DMA_Init+0x5c6>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a59      	ldr	r2, [pc, #356]	; (8003ac8 <HAL_DMA_Init+0x668>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d05e      	beq.n	8003a26 <HAL_DMA_Init+0x5c6>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a57      	ldr	r2, [pc, #348]	; (8003acc <HAL_DMA_Init+0x66c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d059      	beq.n	8003a26 <HAL_DMA_Init+0x5c6>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a56      	ldr	r2, [pc, #344]	; (8003ad0 <HAL_DMA_Init+0x670>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d054      	beq.n	8003a26 <HAL_DMA_Init+0x5c6>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a54      	ldr	r2, [pc, #336]	; (8003ad4 <HAL_DMA_Init+0x674>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d04f      	beq.n	8003a26 <HAL_DMA_Init+0x5c6>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a53      	ldr	r2, [pc, #332]	; (8003ad8 <HAL_DMA_Init+0x678>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d04a      	beq.n	8003a26 <HAL_DMA_Init+0x5c6>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a51      	ldr	r2, [pc, #324]	; (8003adc <HAL_DMA_Init+0x67c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d045      	beq.n	8003a26 <HAL_DMA_Init+0x5c6>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a50      	ldr	r2, [pc, #320]	; (8003ae0 <HAL_DMA_Init+0x680>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d040      	beq.n	8003a26 <HAL_DMA_Init+0x5c6>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a4e      	ldr	r2, [pc, #312]	; (8003ae4 <HAL_DMA_Init+0x684>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d03b      	beq.n	8003a26 <HAL_DMA_Init+0x5c6>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a4d      	ldr	r2, [pc, #308]	; (8003ae8 <HAL_DMA_Init+0x688>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d036      	beq.n	8003a26 <HAL_DMA_Init+0x5c6>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a4b      	ldr	r2, [pc, #300]	; (8003aec <HAL_DMA_Init+0x68c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d031      	beq.n	8003a26 <HAL_DMA_Init+0x5c6>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a4a      	ldr	r2, [pc, #296]	; (8003af0 <HAL_DMA_Init+0x690>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d02c      	beq.n	8003a26 <HAL_DMA_Init+0x5c6>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a48      	ldr	r2, [pc, #288]	; (8003af4 <HAL_DMA_Init+0x694>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d027      	beq.n	8003a26 <HAL_DMA_Init+0x5c6>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a47      	ldr	r2, [pc, #284]	; (8003af8 <HAL_DMA_Init+0x698>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d022      	beq.n	8003a26 <HAL_DMA_Init+0x5c6>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a45      	ldr	r2, [pc, #276]	; (8003afc <HAL_DMA_Init+0x69c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d01d      	beq.n	8003a26 <HAL_DMA_Init+0x5c6>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a44      	ldr	r2, [pc, #272]	; (8003b00 <HAL_DMA_Init+0x6a0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d018      	beq.n	8003a26 <HAL_DMA_Init+0x5c6>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a42      	ldr	r2, [pc, #264]	; (8003b04 <HAL_DMA_Init+0x6a4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d013      	beq.n	8003a26 <HAL_DMA_Init+0x5c6>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a41      	ldr	r2, [pc, #260]	; (8003b08 <HAL_DMA_Init+0x6a8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00e      	beq.n	8003a26 <HAL_DMA_Init+0x5c6>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a3f      	ldr	r2, [pc, #252]	; (8003b0c <HAL_DMA_Init+0x6ac>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d009      	beq.n	8003a26 <HAL_DMA_Init+0x5c6>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a3e      	ldr	r2, [pc, #248]	; (8003b10 <HAL_DMA_Init+0x6b0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d004      	beq.n	8003a26 <HAL_DMA_Init+0x5c6>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a3c      	ldr	r2, [pc, #240]	; (8003b14 <HAL_DMA_Init+0x6b4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d101      	bne.n	8003a2a <HAL_DMA_Init+0x5ca>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <HAL_DMA_Init+0x5cc>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d032      	beq.n	8003a96 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f001 fe2b 	bl	800568c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b80      	cmp	r3, #128	; 0x80
 8003a3c:	d102      	bne.n	8003a44 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a58:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d010      	beq.n	8003a84 <HAL_DMA_Init+0x624>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d80c      	bhi.n	8003a84 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f001 fea8 	bl	80057c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a80:	605a      	str	r2, [r3, #4]
 8003a82:	e008      	b.n	8003a96 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	a7fdabf8 	.word	0xa7fdabf8
 8003ab4:	cccccccd 	.word	0xcccccccd
 8003ab8:	40020010 	.word	0x40020010
 8003abc:	40020028 	.word	0x40020028
 8003ac0:	40020040 	.word	0x40020040
 8003ac4:	40020058 	.word	0x40020058
 8003ac8:	40020070 	.word	0x40020070
 8003acc:	40020088 	.word	0x40020088
 8003ad0:	400200a0 	.word	0x400200a0
 8003ad4:	400200b8 	.word	0x400200b8
 8003ad8:	40020410 	.word	0x40020410
 8003adc:	40020428 	.word	0x40020428
 8003ae0:	40020440 	.word	0x40020440
 8003ae4:	40020458 	.word	0x40020458
 8003ae8:	40020470 	.word	0x40020470
 8003aec:	40020488 	.word	0x40020488
 8003af0:	400204a0 	.word	0x400204a0
 8003af4:	400204b8 	.word	0x400204b8
 8003af8:	58025408 	.word	0x58025408
 8003afc:	5802541c 	.word	0x5802541c
 8003b00:	58025430 	.word	0x58025430
 8003b04:	58025444 	.word	0x58025444
 8003b08:	58025458 	.word	0x58025458
 8003b0c:	5802546c 	.word	0x5802546c
 8003b10:	58025480 	.word	0x58025480
 8003b14:	58025494 	.word	0x58025494

08003b18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003b20:	f7ff fa8c 	bl	800303c <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e2dc      	b.n	80040ea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d008      	beq.n	8003b4e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2280      	movs	r2, #128	; 0x80
 8003b40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e2cd      	b.n	80040ea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a76      	ldr	r2, [pc, #472]	; (8003d2c <HAL_DMA_Abort+0x214>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d04a      	beq.n	8003bee <HAL_DMA_Abort+0xd6>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a74      	ldr	r2, [pc, #464]	; (8003d30 <HAL_DMA_Abort+0x218>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d045      	beq.n	8003bee <HAL_DMA_Abort+0xd6>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a73      	ldr	r2, [pc, #460]	; (8003d34 <HAL_DMA_Abort+0x21c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d040      	beq.n	8003bee <HAL_DMA_Abort+0xd6>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a71      	ldr	r2, [pc, #452]	; (8003d38 <HAL_DMA_Abort+0x220>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d03b      	beq.n	8003bee <HAL_DMA_Abort+0xd6>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a70      	ldr	r2, [pc, #448]	; (8003d3c <HAL_DMA_Abort+0x224>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d036      	beq.n	8003bee <HAL_DMA_Abort+0xd6>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a6e      	ldr	r2, [pc, #440]	; (8003d40 <HAL_DMA_Abort+0x228>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d031      	beq.n	8003bee <HAL_DMA_Abort+0xd6>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a6d      	ldr	r2, [pc, #436]	; (8003d44 <HAL_DMA_Abort+0x22c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d02c      	beq.n	8003bee <HAL_DMA_Abort+0xd6>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a6b      	ldr	r2, [pc, #428]	; (8003d48 <HAL_DMA_Abort+0x230>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d027      	beq.n	8003bee <HAL_DMA_Abort+0xd6>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a6a      	ldr	r2, [pc, #424]	; (8003d4c <HAL_DMA_Abort+0x234>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d022      	beq.n	8003bee <HAL_DMA_Abort+0xd6>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a68      	ldr	r2, [pc, #416]	; (8003d50 <HAL_DMA_Abort+0x238>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d01d      	beq.n	8003bee <HAL_DMA_Abort+0xd6>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a67      	ldr	r2, [pc, #412]	; (8003d54 <HAL_DMA_Abort+0x23c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d018      	beq.n	8003bee <HAL_DMA_Abort+0xd6>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a65      	ldr	r2, [pc, #404]	; (8003d58 <HAL_DMA_Abort+0x240>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d013      	beq.n	8003bee <HAL_DMA_Abort+0xd6>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a64      	ldr	r2, [pc, #400]	; (8003d5c <HAL_DMA_Abort+0x244>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00e      	beq.n	8003bee <HAL_DMA_Abort+0xd6>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a62      	ldr	r2, [pc, #392]	; (8003d60 <HAL_DMA_Abort+0x248>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d009      	beq.n	8003bee <HAL_DMA_Abort+0xd6>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a61      	ldr	r2, [pc, #388]	; (8003d64 <HAL_DMA_Abort+0x24c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d004      	beq.n	8003bee <HAL_DMA_Abort+0xd6>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a5f      	ldr	r2, [pc, #380]	; (8003d68 <HAL_DMA_Abort+0x250>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d101      	bne.n	8003bf2 <HAL_DMA_Abort+0xda>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <HAL_DMA_Abort+0xdc>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d013      	beq.n	8003c20 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 021e 	bic.w	r2, r2, #30
 8003c06:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695a      	ldr	r2, [r3, #20]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c16:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	e00a      	b.n	8003c36 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 020e 	bic.w	r2, r2, #14
 8003c2e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a3c      	ldr	r2, [pc, #240]	; (8003d2c <HAL_DMA_Abort+0x214>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d072      	beq.n	8003d26 <HAL_DMA_Abort+0x20e>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a3a      	ldr	r2, [pc, #232]	; (8003d30 <HAL_DMA_Abort+0x218>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d06d      	beq.n	8003d26 <HAL_DMA_Abort+0x20e>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a39      	ldr	r2, [pc, #228]	; (8003d34 <HAL_DMA_Abort+0x21c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d068      	beq.n	8003d26 <HAL_DMA_Abort+0x20e>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a37      	ldr	r2, [pc, #220]	; (8003d38 <HAL_DMA_Abort+0x220>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d063      	beq.n	8003d26 <HAL_DMA_Abort+0x20e>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a36      	ldr	r2, [pc, #216]	; (8003d3c <HAL_DMA_Abort+0x224>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d05e      	beq.n	8003d26 <HAL_DMA_Abort+0x20e>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a34      	ldr	r2, [pc, #208]	; (8003d40 <HAL_DMA_Abort+0x228>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d059      	beq.n	8003d26 <HAL_DMA_Abort+0x20e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a33      	ldr	r2, [pc, #204]	; (8003d44 <HAL_DMA_Abort+0x22c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d054      	beq.n	8003d26 <HAL_DMA_Abort+0x20e>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a31      	ldr	r2, [pc, #196]	; (8003d48 <HAL_DMA_Abort+0x230>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d04f      	beq.n	8003d26 <HAL_DMA_Abort+0x20e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a30      	ldr	r2, [pc, #192]	; (8003d4c <HAL_DMA_Abort+0x234>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d04a      	beq.n	8003d26 <HAL_DMA_Abort+0x20e>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a2e      	ldr	r2, [pc, #184]	; (8003d50 <HAL_DMA_Abort+0x238>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d045      	beq.n	8003d26 <HAL_DMA_Abort+0x20e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a2d      	ldr	r2, [pc, #180]	; (8003d54 <HAL_DMA_Abort+0x23c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d040      	beq.n	8003d26 <HAL_DMA_Abort+0x20e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a2b      	ldr	r2, [pc, #172]	; (8003d58 <HAL_DMA_Abort+0x240>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d03b      	beq.n	8003d26 <HAL_DMA_Abort+0x20e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a2a      	ldr	r2, [pc, #168]	; (8003d5c <HAL_DMA_Abort+0x244>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d036      	beq.n	8003d26 <HAL_DMA_Abort+0x20e>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a28      	ldr	r2, [pc, #160]	; (8003d60 <HAL_DMA_Abort+0x248>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d031      	beq.n	8003d26 <HAL_DMA_Abort+0x20e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a27      	ldr	r2, [pc, #156]	; (8003d64 <HAL_DMA_Abort+0x24c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d02c      	beq.n	8003d26 <HAL_DMA_Abort+0x20e>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a25      	ldr	r2, [pc, #148]	; (8003d68 <HAL_DMA_Abort+0x250>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d027      	beq.n	8003d26 <HAL_DMA_Abort+0x20e>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a24      	ldr	r2, [pc, #144]	; (8003d6c <HAL_DMA_Abort+0x254>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d022      	beq.n	8003d26 <HAL_DMA_Abort+0x20e>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a22      	ldr	r2, [pc, #136]	; (8003d70 <HAL_DMA_Abort+0x258>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d01d      	beq.n	8003d26 <HAL_DMA_Abort+0x20e>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a21      	ldr	r2, [pc, #132]	; (8003d74 <HAL_DMA_Abort+0x25c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d018      	beq.n	8003d26 <HAL_DMA_Abort+0x20e>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a1f      	ldr	r2, [pc, #124]	; (8003d78 <HAL_DMA_Abort+0x260>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d013      	beq.n	8003d26 <HAL_DMA_Abort+0x20e>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1e      	ldr	r2, [pc, #120]	; (8003d7c <HAL_DMA_Abort+0x264>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00e      	beq.n	8003d26 <HAL_DMA_Abort+0x20e>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a1c      	ldr	r2, [pc, #112]	; (8003d80 <HAL_DMA_Abort+0x268>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d009      	beq.n	8003d26 <HAL_DMA_Abort+0x20e>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a1b      	ldr	r2, [pc, #108]	; (8003d84 <HAL_DMA_Abort+0x26c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d004      	beq.n	8003d26 <HAL_DMA_Abort+0x20e>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a19      	ldr	r2, [pc, #100]	; (8003d88 <HAL_DMA_Abort+0x270>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d132      	bne.n	8003d8c <HAL_DMA_Abort+0x274>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e031      	b.n	8003d8e <HAL_DMA_Abort+0x276>
 8003d2a:	bf00      	nop
 8003d2c:	40020010 	.word	0x40020010
 8003d30:	40020028 	.word	0x40020028
 8003d34:	40020040 	.word	0x40020040
 8003d38:	40020058 	.word	0x40020058
 8003d3c:	40020070 	.word	0x40020070
 8003d40:	40020088 	.word	0x40020088
 8003d44:	400200a0 	.word	0x400200a0
 8003d48:	400200b8 	.word	0x400200b8
 8003d4c:	40020410 	.word	0x40020410
 8003d50:	40020428 	.word	0x40020428
 8003d54:	40020440 	.word	0x40020440
 8003d58:	40020458 	.word	0x40020458
 8003d5c:	40020470 	.word	0x40020470
 8003d60:	40020488 	.word	0x40020488
 8003d64:	400204a0 	.word	0x400204a0
 8003d68:	400204b8 	.word	0x400204b8
 8003d6c:	58025408 	.word	0x58025408
 8003d70:	5802541c 	.word	0x5802541c
 8003d74:	58025430 	.word	0x58025430
 8003d78:	58025444 	.word	0x58025444
 8003d7c:	58025458 	.word	0x58025458
 8003d80:	5802546c 	.word	0x5802546c
 8003d84:	58025480 	.word	0x58025480
 8003d88:	58025494 	.word	0x58025494
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003da0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a6d      	ldr	r2, [pc, #436]	; (8003f5c <HAL_DMA_Abort+0x444>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d04a      	beq.n	8003e42 <HAL_DMA_Abort+0x32a>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a6b      	ldr	r2, [pc, #428]	; (8003f60 <HAL_DMA_Abort+0x448>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d045      	beq.n	8003e42 <HAL_DMA_Abort+0x32a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a6a      	ldr	r2, [pc, #424]	; (8003f64 <HAL_DMA_Abort+0x44c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d040      	beq.n	8003e42 <HAL_DMA_Abort+0x32a>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a68      	ldr	r2, [pc, #416]	; (8003f68 <HAL_DMA_Abort+0x450>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d03b      	beq.n	8003e42 <HAL_DMA_Abort+0x32a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a67      	ldr	r2, [pc, #412]	; (8003f6c <HAL_DMA_Abort+0x454>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d036      	beq.n	8003e42 <HAL_DMA_Abort+0x32a>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a65      	ldr	r2, [pc, #404]	; (8003f70 <HAL_DMA_Abort+0x458>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d031      	beq.n	8003e42 <HAL_DMA_Abort+0x32a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a64      	ldr	r2, [pc, #400]	; (8003f74 <HAL_DMA_Abort+0x45c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d02c      	beq.n	8003e42 <HAL_DMA_Abort+0x32a>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a62      	ldr	r2, [pc, #392]	; (8003f78 <HAL_DMA_Abort+0x460>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d027      	beq.n	8003e42 <HAL_DMA_Abort+0x32a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a61      	ldr	r2, [pc, #388]	; (8003f7c <HAL_DMA_Abort+0x464>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d022      	beq.n	8003e42 <HAL_DMA_Abort+0x32a>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a5f      	ldr	r2, [pc, #380]	; (8003f80 <HAL_DMA_Abort+0x468>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d01d      	beq.n	8003e42 <HAL_DMA_Abort+0x32a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a5e      	ldr	r2, [pc, #376]	; (8003f84 <HAL_DMA_Abort+0x46c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d018      	beq.n	8003e42 <HAL_DMA_Abort+0x32a>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a5c      	ldr	r2, [pc, #368]	; (8003f88 <HAL_DMA_Abort+0x470>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d013      	beq.n	8003e42 <HAL_DMA_Abort+0x32a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a5b      	ldr	r2, [pc, #364]	; (8003f8c <HAL_DMA_Abort+0x474>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d00e      	beq.n	8003e42 <HAL_DMA_Abort+0x32a>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a59      	ldr	r2, [pc, #356]	; (8003f90 <HAL_DMA_Abort+0x478>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d009      	beq.n	8003e42 <HAL_DMA_Abort+0x32a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a58      	ldr	r2, [pc, #352]	; (8003f94 <HAL_DMA_Abort+0x47c>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d004      	beq.n	8003e42 <HAL_DMA_Abort+0x32a>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a56      	ldr	r2, [pc, #344]	; (8003f98 <HAL_DMA_Abort+0x480>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d108      	bne.n	8003e54 <HAL_DMA_Abort+0x33c>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	e007      	b.n	8003e64 <HAL_DMA_Abort+0x34c>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0201 	bic.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003e64:	e013      	b.n	8003e8e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e66:	f7ff f8e9 	bl	800303c <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b05      	cmp	r3, #5
 8003e72:	d90c      	bls.n	8003e8e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2203      	movs	r2, #3
 8003e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e12d      	b.n	80040ea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1e5      	bne.n	8003e66 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a2f      	ldr	r2, [pc, #188]	; (8003f5c <HAL_DMA_Abort+0x444>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d04a      	beq.n	8003f3a <HAL_DMA_Abort+0x422>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a2d      	ldr	r2, [pc, #180]	; (8003f60 <HAL_DMA_Abort+0x448>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d045      	beq.n	8003f3a <HAL_DMA_Abort+0x422>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a2c      	ldr	r2, [pc, #176]	; (8003f64 <HAL_DMA_Abort+0x44c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d040      	beq.n	8003f3a <HAL_DMA_Abort+0x422>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a2a      	ldr	r2, [pc, #168]	; (8003f68 <HAL_DMA_Abort+0x450>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d03b      	beq.n	8003f3a <HAL_DMA_Abort+0x422>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a29      	ldr	r2, [pc, #164]	; (8003f6c <HAL_DMA_Abort+0x454>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d036      	beq.n	8003f3a <HAL_DMA_Abort+0x422>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a27      	ldr	r2, [pc, #156]	; (8003f70 <HAL_DMA_Abort+0x458>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d031      	beq.n	8003f3a <HAL_DMA_Abort+0x422>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a26      	ldr	r2, [pc, #152]	; (8003f74 <HAL_DMA_Abort+0x45c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d02c      	beq.n	8003f3a <HAL_DMA_Abort+0x422>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a24      	ldr	r2, [pc, #144]	; (8003f78 <HAL_DMA_Abort+0x460>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d027      	beq.n	8003f3a <HAL_DMA_Abort+0x422>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a23      	ldr	r2, [pc, #140]	; (8003f7c <HAL_DMA_Abort+0x464>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d022      	beq.n	8003f3a <HAL_DMA_Abort+0x422>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a21      	ldr	r2, [pc, #132]	; (8003f80 <HAL_DMA_Abort+0x468>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01d      	beq.n	8003f3a <HAL_DMA_Abort+0x422>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a20      	ldr	r2, [pc, #128]	; (8003f84 <HAL_DMA_Abort+0x46c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d018      	beq.n	8003f3a <HAL_DMA_Abort+0x422>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a1e      	ldr	r2, [pc, #120]	; (8003f88 <HAL_DMA_Abort+0x470>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <HAL_DMA_Abort+0x422>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1d      	ldr	r2, [pc, #116]	; (8003f8c <HAL_DMA_Abort+0x474>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00e      	beq.n	8003f3a <HAL_DMA_Abort+0x422>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a1b      	ldr	r2, [pc, #108]	; (8003f90 <HAL_DMA_Abort+0x478>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d009      	beq.n	8003f3a <HAL_DMA_Abort+0x422>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a1a      	ldr	r2, [pc, #104]	; (8003f94 <HAL_DMA_Abort+0x47c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d004      	beq.n	8003f3a <HAL_DMA_Abort+0x422>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a18      	ldr	r2, [pc, #96]	; (8003f98 <HAL_DMA_Abort+0x480>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d101      	bne.n	8003f3e <HAL_DMA_Abort+0x426>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <HAL_DMA_Abort+0x428>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d02b      	beq.n	8003f9c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f48:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4e:	f003 031f 	and.w	r3, r3, #31
 8003f52:	223f      	movs	r2, #63	; 0x3f
 8003f54:	409a      	lsls	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	609a      	str	r2, [r3, #8]
 8003f5a:	e02a      	b.n	8003fb2 <HAL_DMA_Abort+0x49a>
 8003f5c:	40020010 	.word	0x40020010
 8003f60:	40020028 	.word	0x40020028
 8003f64:	40020040 	.word	0x40020040
 8003f68:	40020058 	.word	0x40020058
 8003f6c:	40020070 	.word	0x40020070
 8003f70:	40020088 	.word	0x40020088
 8003f74:	400200a0 	.word	0x400200a0
 8003f78:	400200b8 	.word	0x400200b8
 8003f7c:	40020410 	.word	0x40020410
 8003f80:	40020428 	.word	0x40020428
 8003f84:	40020440 	.word	0x40020440
 8003f88:	40020458 	.word	0x40020458
 8003f8c:	40020470 	.word	0x40020470
 8003f90:	40020488 	.word	0x40020488
 8003f94:	400204a0 	.word	0x400204a0
 8003f98:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa6:	f003 031f 	and.w	r3, r3, #31
 8003faa:	2201      	movs	r2, #1
 8003fac:	409a      	lsls	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a4f      	ldr	r2, [pc, #316]	; (80040f4 <HAL_DMA_Abort+0x5dc>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d072      	beq.n	80040a2 <HAL_DMA_Abort+0x58a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a4d      	ldr	r2, [pc, #308]	; (80040f8 <HAL_DMA_Abort+0x5e0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d06d      	beq.n	80040a2 <HAL_DMA_Abort+0x58a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a4c      	ldr	r2, [pc, #304]	; (80040fc <HAL_DMA_Abort+0x5e4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d068      	beq.n	80040a2 <HAL_DMA_Abort+0x58a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a4a      	ldr	r2, [pc, #296]	; (8004100 <HAL_DMA_Abort+0x5e8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d063      	beq.n	80040a2 <HAL_DMA_Abort+0x58a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a49      	ldr	r2, [pc, #292]	; (8004104 <HAL_DMA_Abort+0x5ec>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d05e      	beq.n	80040a2 <HAL_DMA_Abort+0x58a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a47      	ldr	r2, [pc, #284]	; (8004108 <HAL_DMA_Abort+0x5f0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d059      	beq.n	80040a2 <HAL_DMA_Abort+0x58a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a46      	ldr	r2, [pc, #280]	; (800410c <HAL_DMA_Abort+0x5f4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d054      	beq.n	80040a2 <HAL_DMA_Abort+0x58a>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a44      	ldr	r2, [pc, #272]	; (8004110 <HAL_DMA_Abort+0x5f8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d04f      	beq.n	80040a2 <HAL_DMA_Abort+0x58a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a43      	ldr	r2, [pc, #268]	; (8004114 <HAL_DMA_Abort+0x5fc>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d04a      	beq.n	80040a2 <HAL_DMA_Abort+0x58a>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a41      	ldr	r2, [pc, #260]	; (8004118 <HAL_DMA_Abort+0x600>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d045      	beq.n	80040a2 <HAL_DMA_Abort+0x58a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a40      	ldr	r2, [pc, #256]	; (800411c <HAL_DMA_Abort+0x604>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d040      	beq.n	80040a2 <HAL_DMA_Abort+0x58a>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a3e      	ldr	r2, [pc, #248]	; (8004120 <HAL_DMA_Abort+0x608>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d03b      	beq.n	80040a2 <HAL_DMA_Abort+0x58a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a3d      	ldr	r2, [pc, #244]	; (8004124 <HAL_DMA_Abort+0x60c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d036      	beq.n	80040a2 <HAL_DMA_Abort+0x58a>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a3b      	ldr	r2, [pc, #236]	; (8004128 <HAL_DMA_Abort+0x610>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d031      	beq.n	80040a2 <HAL_DMA_Abort+0x58a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a3a      	ldr	r2, [pc, #232]	; (800412c <HAL_DMA_Abort+0x614>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d02c      	beq.n	80040a2 <HAL_DMA_Abort+0x58a>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a38      	ldr	r2, [pc, #224]	; (8004130 <HAL_DMA_Abort+0x618>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d027      	beq.n	80040a2 <HAL_DMA_Abort+0x58a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a37      	ldr	r2, [pc, #220]	; (8004134 <HAL_DMA_Abort+0x61c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d022      	beq.n	80040a2 <HAL_DMA_Abort+0x58a>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a35      	ldr	r2, [pc, #212]	; (8004138 <HAL_DMA_Abort+0x620>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d01d      	beq.n	80040a2 <HAL_DMA_Abort+0x58a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a34      	ldr	r2, [pc, #208]	; (800413c <HAL_DMA_Abort+0x624>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d018      	beq.n	80040a2 <HAL_DMA_Abort+0x58a>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a32      	ldr	r2, [pc, #200]	; (8004140 <HAL_DMA_Abort+0x628>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d013      	beq.n	80040a2 <HAL_DMA_Abort+0x58a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a31      	ldr	r2, [pc, #196]	; (8004144 <HAL_DMA_Abort+0x62c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00e      	beq.n	80040a2 <HAL_DMA_Abort+0x58a>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a2f      	ldr	r2, [pc, #188]	; (8004148 <HAL_DMA_Abort+0x630>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d009      	beq.n	80040a2 <HAL_DMA_Abort+0x58a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a2e      	ldr	r2, [pc, #184]	; (800414c <HAL_DMA_Abort+0x634>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d004      	beq.n	80040a2 <HAL_DMA_Abort+0x58a>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a2c      	ldr	r2, [pc, #176]	; (8004150 <HAL_DMA_Abort+0x638>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d101      	bne.n	80040a6 <HAL_DMA_Abort+0x58e>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <HAL_DMA_Abort+0x590>
 80040a6:	2300      	movs	r3, #0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d015      	beq.n	80040d8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040b4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00c      	beq.n	80040d8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040cc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040d6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40020010 	.word	0x40020010
 80040f8:	40020028 	.word	0x40020028
 80040fc:	40020040 	.word	0x40020040
 8004100:	40020058 	.word	0x40020058
 8004104:	40020070 	.word	0x40020070
 8004108:	40020088 	.word	0x40020088
 800410c:	400200a0 	.word	0x400200a0
 8004110:	400200b8 	.word	0x400200b8
 8004114:	40020410 	.word	0x40020410
 8004118:	40020428 	.word	0x40020428
 800411c:	40020440 	.word	0x40020440
 8004120:	40020458 	.word	0x40020458
 8004124:	40020470 	.word	0x40020470
 8004128:	40020488 	.word	0x40020488
 800412c:	400204a0 	.word	0x400204a0
 8004130:	400204b8 	.word	0x400204b8
 8004134:	58025408 	.word	0x58025408
 8004138:	5802541c 	.word	0x5802541c
 800413c:	58025430 	.word	0x58025430
 8004140:	58025444 	.word	0x58025444
 8004144:	58025458 	.word	0x58025458
 8004148:	5802546c 	.word	0x5802546c
 800414c:	58025480 	.word	0x58025480
 8004150:	58025494 	.word	0x58025494

08004154 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e205      	b.n	8004572 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d004      	beq.n	800417c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2280      	movs	r2, #128	; 0x80
 8004176:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e1fa      	b.n	8004572 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a8c      	ldr	r2, [pc, #560]	; (80043b4 <HAL_DMA_Abort_IT+0x260>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d04a      	beq.n	800421c <HAL_DMA_Abort_IT+0xc8>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a8b      	ldr	r2, [pc, #556]	; (80043b8 <HAL_DMA_Abort_IT+0x264>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d045      	beq.n	800421c <HAL_DMA_Abort_IT+0xc8>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a89      	ldr	r2, [pc, #548]	; (80043bc <HAL_DMA_Abort_IT+0x268>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d040      	beq.n	800421c <HAL_DMA_Abort_IT+0xc8>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a88      	ldr	r2, [pc, #544]	; (80043c0 <HAL_DMA_Abort_IT+0x26c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d03b      	beq.n	800421c <HAL_DMA_Abort_IT+0xc8>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a86      	ldr	r2, [pc, #536]	; (80043c4 <HAL_DMA_Abort_IT+0x270>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d036      	beq.n	800421c <HAL_DMA_Abort_IT+0xc8>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a85      	ldr	r2, [pc, #532]	; (80043c8 <HAL_DMA_Abort_IT+0x274>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d031      	beq.n	800421c <HAL_DMA_Abort_IT+0xc8>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a83      	ldr	r2, [pc, #524]	; (80043cc <HAL_DMA_Abort_IT+0x278>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d02c      	beq.n	800421c <HAL_DMA_Abort_IT+0xc8>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a82      	ldr	r2, [pc, #520]	; (80043d0 <HAL_DMA_Abort_IT+0x27c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d027      	beq.n	800421c <HAL_DMA_Abort_IT+0xc8>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a80      	ldr	r2, [pc, #512]	; (80043d4 <HAL_DMA_Abort_IT+0x280>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d022      	beq.n	800421c <HAL_DMA_Abort_IT+0xc8>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a7f      	ldr	r2, [pc, #508]	; (80043d8 <HAL_DMA_Abort_IT+0x284>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d01d      	beq.n	800421c <HAL_DMA_Abort_IT+0xc8>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a7d      	ldr	r2, [pc, #500]	; (80043dc <HAL_DMA_Abort_IT+0x288>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d018      	beq.n	800421c <HAL_DMA_Abort_IT+0xc8>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a7c      	ldr	r2, [pc, #496]	; (80043e0 <HAL_DMA_Abort_IT+0x28c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d013      	beq.n	800421c <HAL_DMA_Abort_IT+0xc8>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a7a      	ldr	r2, [pc, #488]	; (80043e4 <HAL_DMA_Abort_IT+0x290>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00e      	beq.n	800421c <HAL_DMA_Abort_IT+0xc8>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a79      	ldr	r2, [pc, #484]	; (80043e8 <HAL_DMA_Abort_IT+0x294>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d009      	beq.n	800421c <HAL_DMA_Abort_IT+0xc8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a77      	ldr	r2, [pc, #476]	; (80043ec <HAL_DMA_Abort_IT+0x298>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d004      	beq.n	800421c <HAL_DMA_Abort_IT+0xc8>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a76      	ldr	r2, [pc, #472]	; (80043f0 <HAL_DMA_Abort_IT+0x29c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d101      	bne.n	8004220 <HAL_DMA_Abort_IT+0xcc>
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <HAL_DMA_Abort_IT+0xce>
 8004220:	2300      	movs	r3, #0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d065      	beq.n	80042f2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2204      	movs	r2, #4
 800422a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a60      	ldr	r2, [pc, #384]	; (80043b4 <HAL_DMA_Abort_IT+0x260>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d04a      	beq.n	80042ce <HAL_DMA_Abort_IT+0x17a>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a5e      	ldr	r2, [pc, #376]	; (80043b8 <HAL_DMA_Abort_IT+0x264>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d045      	beq.n	80042ce <HAL_DMA_Abort_IT+0x17a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a5d      	ldr	r2, [pc, #372]	; (80043bc <HAL_DMA_Abort_IT+0x268>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d040      	beq.n	80042ce <HAL_DMA_Abort_IT+0x17a>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a5b      	ldr	r2, [pc, #364]	; (80043c0 <HAL_DMA_Abort_IT+0x26c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d03b      	beq.n	80042ce <HAL_DMA_Abort_IT+0x17a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a5a      	ldr	r2, [pc, #360]	; (80043c4 <HAL_DMA_Abort_IT+0x270>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d036      	beq.n	80042ce <HAL_DMA_Abort_IT+0x17a>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a58      	ldr	r2, [pc, #352]	; (80043c8 <HAL_DMA_Abort_IT+0x274>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d031      	beq.n	80042ce <HAL_DMA_Abort_IT+0x17a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a57      	ldr	r2, [pc, #348]	; (80043cc <HAL_DMA_Abort_IT+0x278>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d02c      	beq.n	80042ce <HAL_DMA_Abort_IT+0x17a>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a55      	ldr	r2, [pc, #340]	; (80043d0 <HAL_DMA_Abort_IT+0x27c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d027      	beq.n	80042ce <HAL_DMA_Abort_IT+0x17a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a54      	ldr	r2, [pc, #336]	; (80043d4 <HAL_DMA_Abort_IT+0x280>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d022      	beq.n	80042ce <HAL_DMA_Abort_IT+0x17a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a52      	ldr	r2, [pc, #328]	; (80043d8 <HAL_DMA_Abort_IT+0x284>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d01d      	beq.n	80042ce <HAL_DMA_Abort_IT+0x17a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a51      	ldr	r2, [pc, #324]	; (80043dc <HAL_DMA_Abort_IT+0x288>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d018      	beq.n	80042ce <HAL_DMA_Abort_IT+0x17a>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a4f      	ldr	r2, [pc, #316]	; (80043e0 <HAL_DMA_Abort_IT+0x28c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d013      	beq.n	80042ce <HAL_DMA_Abort_IT+0x17a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a4e      	ldr	r2, [pc, #312]	; (80043e4 <HAL_DMA_Abort_IT+0x290>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d00e      	beq.n	80042ce <HAL_DMA_Abort_IT+0x17a>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a4c      	ldr	r2, [pc, #304]	; (80043e8 <HAL_DMA_Abort_IT+0x294>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d009      	beq.n	80042ce <HAL_DMA_Abort_IT+0x17a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a4b      	ldr	r2, [pc, #300]	; (80043ec <HAL_DMA_Abort_IT+0x298>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d004      	beq.n	80042ce <HAL_DMA_Abort_IT+0x17a>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a49      	ldr	r2, [pc, #292]	; (80043f0 <HAL_DMA_Abort_IT+0x29c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d108      	bne.n	80042e0 <HAL_DMA_Abort_IT+0x18c>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0201 	bic.w	r2, r2, #1
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	e147      	b.n	8004570 <HAL_DMA_Abort_IT+0x41c>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0201 	bic.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	e13e      	b.n	8004570 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 020e 	bic.w	r2, r2, #14
 8004300:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a2b      	ldr	r2, [pc, #172]	; (80043b4 <HAL_DMA_Abort_IT+0x260>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d04a      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x24e>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a29      	ldr	r2, [pc, #164]	; (80043b8 <HAL_DMA_Abort_IT+0x264>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d045      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x24e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a28      	ldr	r2, [pc, #160]	; (80043bc <HAL_DMA_Abort_IT+0x268>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d040      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x24e>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a26      	ldr	r2, [pc, #152]	; (80043c0 <HAL_DMA_Abort_IT+0x26c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d03b      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x24e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a25      	ldr	r2, [pc, #148]	; (80043c4 <HAL_DMA_Abort_IT+0x270>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d036      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x24e>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a23      	ldr	r2, [pc, #140]	; (80043c8 <HAL_DMA_Abort_IT+0x274>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d031      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x24e>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a22      	ldr	r2, [pc, #136]	; (80043cc <HAL_DMA_Abort_IT+0x278>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d02c      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x24e>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a20      	ldr	r2, [pc, #128]	; (80043d0 <HAL_DMA_Abort_IT+0x27c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d027      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x24e>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1f      	ldr	r2, [pc, #124]	; (80043d4 <HAL_DMA_Abort_IT+0x280>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d022      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x24e>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a1d      	ldr	r2, [pc, #116]	; (80043d8 <HAL_DMA_Abort_IT+0x284>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d01d      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x24e>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1c      	ldr	r2, [pc, #112]	; (80043dc <HAL_DMA_Abort_IT+0x288>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d018      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x24e>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1a      	ldr	r2, [pc, #104]	; (80043e0 <HAL_DMA_Abort_IT+0x28c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x24e>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a19      	ldr	r2, [pc, #100]	; (80043e4 <HAL_DMA_Abort_IT+0x290>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d00e      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x24e>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a17      	ldr	r2, [pc, #92]	; (80043e8 <HAL_DMA_Abort_IT+0x294>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d009      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x24e>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a16      	ldr	r2, [pc, #88]	; (80043ec <HAL_DMA_Abort_IT+0x298>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d004      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x24e>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a14      	ldr	r2, [pc, #80]	; (80043f0 <HAL_DMA_Abort_IT+0x29c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d128      	bne.n	80043f4 <HAL_DMA_Abort_IT+0x2a0>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0201 	bic.w	r2, r2, #1
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	e027      	b.n	8004404 <HAL_DMA_Abort_IT+0x2b0>
 80043b4:	40020010 	.word	0x40020010
 80043b8:	40020028 	.word	0x40020028
 80043bc:	40020040 	.word	0x40020040
 80043c0:	40020058 	.word	0x40020058
 80043c4:	40020070 	.word	0x40020070
 80043c8:	40020088 	.word	0x40020088
 80043cc:	400200a0 	.word	0x400200a0
 80043d0:	400200b8 	.word	0x400200b8
 80043d4:	40020410 	.word	0x40020410
 80043d8:	40020428 	.word	0x40020428
 80043dc:	40020440 	.word	0x40020440
 80043e0:	40020458 	.word	0x40020458
 80043e4:	40020470 	.word	0x40020470
 80043e8:	40020488 	.word	0x40020488
 80043ec:	400204a0 	.word	0x400204a0
 80043f0:	400204b8 	.word	0x400204b8
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0201 	bic.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a5c      	ldr	r2, [pc, #368]	; (800457c <HAL_DMA_Abort_IT+0x428>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d072      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x3a0>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a5b      	ldr	r2, [pc, #364]	; (8004580 <HAL_DMA_Abort_IT+0x42c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d06d      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x3a0>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a59      	ldr	r2, [pc, #356]	; (8004584 <HAL_DMA_Abort_IT+0x430>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d068      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x3a0>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a58      	ldr	r2, [pc, #352]	; (8004588 <HAL_DMA_Abort_IT+0x434>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d063      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x3a0>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a56      	ldr	r2, [pc, #344]	; (800458c <HAL_DMA_Abort_IT+0x438>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d05e      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x3a0>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a55      	ldr	r2, [pc, #340]	; (8004590 <HAL_DMA_Abort_IT+0x43c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d059      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x3a0>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a53      	ldr	r2, [pc, #332]	; (8004594 <HAL_DMA_Abort_IT+0x440>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d054      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x3a0>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a52      	ldr	r2, [pc, #328]	; (8004598 <HAL_DMA_Abort_IT+0x444>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d04f      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x3a0>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a50      	ldr	r2, [pc, #320]	; (800459c <HAL_DMA_Abort_IT+0x448>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d04a      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x3a0>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a4f      	ldr	r2, [pc, #316]	; (80045a0 <HAL_DMA_Abort_IT+0x44c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d045      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x3a0>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a4d      	ldr	r2, [pc, #308]	; (80045a4 <HAL_DMA_Abort_IT+0x450>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d040      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x3a0>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a4c      	ldr	r2, [pc, #304]	; (80045a8 <HAL_DMA_Abort_IT+0x454>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d03b      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x3a0>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a4a      	ldr	r2, [pc, #296]	; (80045ac <HAL_DMA_Abort_IT+0x458>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d036      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x3a0>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a49      	ldr	r2, [pc, #292]	; (80045b0 <HAL_DMA_Abort_IT+0x45c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d031      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x3a0>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a47      	ldr	r2, [pc, #284]	; (80045b4 <HAL_DMA_Abort_IT+0x460>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d02c      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x3a0>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a46      	ldr	r2, [pc, #280]	; (80045b8 <HAL_DMA_Abort_IT+0x464>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d027      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x3a0>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a44      	ldr	r2, [pc, #272]	; (80045bc <HAL_DMA_Abort_IT+0x468>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d022      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x3a0>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a43      	ldr	r2, [pc, #268]	; (80045c0 <HAL_DMA_Abort_IT+0x46c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d01d      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x3a0>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a41      	ldr	r2, [pc, #260]	; (80045c4 <HAL_DMA_Abort_IT+0x470>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d018      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x3a0>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a40      	ldr	r2, [pc, #256]	; (80045c8 <HAL_DMA_Abort_IT+0x474>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d013      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x3a0>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a3e      	ldr	r2, [pc, #248]	; (80045cc <HAL_DMA_Abort_IT+0x478>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00e      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x3a0>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a3d      	ldr	r2, [pc, #244]	; (80045d0 <HAL_DMA_Abort_IT+0x47c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d009      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x3a0>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a3b      	ldr	r2, [pc, #236]	; (80045d4 <HAL_DMA_Abort_IT+0x480>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d004      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x3a0>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a3a      	ldr	r2, [pc, #232]	; (80045d8 <HAL_DMA_Abort_IT+0x484>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d101      	bne.n	80044f8 <HAL_DMA_Abort_IT+0x3a4>
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <HAL_DMA_Abort_IT+0x3a6>
 80044f8:	2300      	movs	r3, #0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d028      	beq.n	8004550 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004508:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800450c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004512:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004518:	f003 031f 	and.w	r3, r3, #31
 800451c:	2201      	movs	r2, #1
 800451e:	409a      	lsls	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800452c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00c      	beq.n	8004550 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004544:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800454e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	40020010 	.word	0x40020010
 8004580:	40020028 	.word	0x40020028
 8004584:	40020040 	.word	0x40020040
 8004588:	40020058 	.word	0x40020058
 800458c:	40020070 	.word	0x40020070
 8004590:	40020088 	.word	0x40020088
 8004594:	400200a0 	.word	0x400200a0
 8004598:	400200b8 	.word	0x400200b8
 800459c:	40020410 	.word	0x40020410
 80045a0:	40020428 	.word	0x40020428
 80045a4:	40020440 	.word	0x40020440
 80045a8:	40020458 	.word	0x40020458
 80045ac:	40020470 	.word	0x40020470
 80045b0:	40020488 	.word	0x40020488
 80045b4:	400204a0 	.word	0x400204a0
 80045b8:	400204b8 	.word	0x400204b8
 80045bc:	58025408 	.word	0x58025408
 80045c0:	5802541c 	.word	0x5802541c
 80045c4:	58025430 	.word	0x58025430
 80045c8:	58025444 	.word	0x58025444
 80045cc:	58025458 	.word	0x58025458
 80045d0:	5802546c 	.word	0x5802546c
 80045d4:	58025480 	.word	0x58025480
 80045d8:	58025494 	.word	0x58025494

080045dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08a      	sub	sp, #40	; 0x28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045e8:	4b67      	ldr	r3, [pc, #412]	; (8004788 <HAL_DMA_IRQHandler+0x1ac>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a67      	ldr	r2, [pc, #412]	; (800478c <HAL_DMA_IRQHandler+0x1b0>)
 80045ee:	fba2 2303 	umull	r2, r3, r2, r3
 80045f2:	0a9b      	lsrs	r3, r3, #10
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004600:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a5f      	ldr	r2, [pc, #380]	; (8004790 <HAL_DMA_IRQHandler+0x1b4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d04a      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a5d      	ldr	r2, [pc, #372]	; (8004794 <HAL_DMA_IRQHandler+0x1b8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d045      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a5c      	ldr	r2, [pc, #368]	; (8004798 <HAL_DMA_IRQHandler+0x1bc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d040      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a5a      	ldr	r2, [pc, #360]	; (800479c <HAL_DMA_IRQHandler+0x1c0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d03b      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a59      	ldr	r2, [pc, #356]	; (80047a0 <HAL_DMA_IRQHandler+0x1c4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d036      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a57      	ldr	r2, [pc, #348]	; (80047a4 <HAL_DMA_IRQHandler+0x1c8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d031      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a56      	ldr	r2, [pc, #344]	; (80047a8 <HAL_DMA_IRQHandler+0x1cc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d02c      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a54      	ldr	r2, [pc, #336]	; (80047ac <HAL_DMA_IRQHandler+0x1d0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d027      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a53      	ldr	r2, [pc, #332]	; (80047b0 <HAL_DMA_IRQHandler+0x1d4>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d022      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a51      	ldr	r2, [pc, #324]	; (80047b4 <HAL_DMA_IRQHandler+0x1d8>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d01d      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a50      	ldr	r2, [pc, #320]	; (80047b8 <HAL_DMA_IRQHandler+0x1dc>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d018      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a4e      	ldr	r2, [pc, #312]	; (80047bc <HAL_DMA_IRQHandler+0x1e0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d013      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a4d      	ldr	r2, [pc, #308]	; (80047c0 <HAL_DMA_IRQHandler+0x1e4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00e      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a4b      	ldr	r2, [pc, #300]	; (80047c4 <HAL_DMA_IRQHandler+0x1e8>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d009      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a4a      	ldr	r2, [pc, #296]	; (80047c8 <HAL_DMA_IRQHandler+0x1ec>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d004      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a48      	ldr	r2, [pc, #288]	; (80047cc <HAL_DMA_IRQHandler+0x1f0>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d101      	bne.n	80046b2 <HAL_DMA_IRQHandler+0xd6>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <HAL_DMA_IRQHandler+0xd8>
 80046b2:	2300      	movs	r3, #0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 842b 	beq.w	8004f10 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	2208      	movs	r2, #8
 80046c4:	409a      	lsls	r2, r3
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	4013      	ands	r3, r2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 80a2 	beq.w	8004814 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a2e      	ldr	r2, [pc, #184]	; (8004790 <HAL_DMA_IRQHandler+0x1b4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d04a      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a2d      	ldr	r2, [pc, #180]	; (8004794 <HAL_DMA_IRQHandler+0x1b8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d045      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a2b      	ldr	r2, [pc, #172]	; (8004798 <HAL_DMA_IRQHandler+0x1bc>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d040      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a2a      	ldr	r2, [pc, #168]	; (800479c <HAL_DMA_IRQHandler+0x1c0>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d03b      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a28      	ldr	r2, [pc, #160]	; (80047a0 <HAL_DMA_IRQHandler+0x1c4>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d036      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a27      	ldr	r2, [pc, #156]	; (80047a4 <HAL_DMA_IRQHandler+0x1c8>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d031      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a25      	ldr	r2, [pc, #148]	; (80047a8 <HAL_DMA_IRQHandler+0x1cc>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d02c      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a24      	ldr	r2, [pc, #144]	; (80047ac <HAL_DMA_IRQHandler+0x1d0>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d027      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a22      	ldr	r2, [pc, #136]	; (80047b0 <HAL_DMA_IRQHandler+0x1d4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d022      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a21      	ldr	r2, [pc, #132]	; (80047b4 <HAL_DMA_IRQHandler+0x1d8>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d01d      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a1f      	ldr	r2, [pc, #124]	; (80047b8 <HAL_DMA_IRQHandler+0x1dc>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d018      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a1e      	ldr	r2, [pc, #120]	; (80047bc <HAL_DMA_IRQHandler+0x1e0>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d013      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a1c      	ldr	r2, [pc, #112]	; (80047c0 <HAL_DMA_IRQHandler+0x1e4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d00e      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a1b      	ldr	r2, [pc, #108]	; (80047c4 <HAL_DMA_IRQHandler+0x1e8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d009      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a19      	ldr	r2, [pc, #100]	; (80047c8 <HAL_DMA_IRQHandler+0x1ec>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d004      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a18      	ldr	r2, [pc, #96]	; (80047cc <HAL_DMA_IRQHandler+0x1f0>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d12f      	bne.n	80047d0 <HAL_DMA_IRQHandler+0x1f4>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b00      	cmp	r3, #0
 800477c:	bf14      	ite	ne
 800477e:	2301      	movne	r3, #1
 8004780:	2300      	moveq	r3, #0
 8004782:	b2db      	uxtb	r3, r3
 8004784:	e02e      	b.n	80047e4 <HAL_DMA_IRQHandler+0x208>
 8004786:	bf00      	nop
 8004788:	20000008 	.word	0x20000008
 800478c:	1b4e81b5 	.word	0x1b4e81b5
 8004790:	40020010 	.word	0x40020010
 8004794:	40020028 	.word	0x40020028
 8004798:	40020040 	.word	0x40020040
 800479c:	40020058 	.word	0x40020058
 80047a0:	40020070 	.word	0x40020070
 80047a4:	40020088 	.word	0x40020088
 80047a8:	400200a0 	.word	0x400200a0
 80047ac:	400200b8 	.word	0x400200b8
 80047b0:	40020410 	.word	0x40020410
 80047b4:	40020428 	.word	0x40020428
 80047b8:	40020440 	.word	0x40020440
 80047bc:	40020458 	.word	0x40020458
 80047c0:	40020470 	.word	0x40020470
 80047c4:	40020488 	.word	0x40020488
 80047c8:	400204a0 	.word	0x400204a0
 80047cc:	400204b8 	.word	0x400204b8
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	bf14      	ite	ne
 80047de:	2301      	movne	r3, #1
 80047e0:	2300      	moveq	r3, #0
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d015      	beq.n	8004814 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0204 	bic.w	r2, r2, #4
 80047f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047fc:	f003 031f 	and.w	r3, r3, #31
 8004800:	2208      	movs	r2, #8
 8004802:	409a      	lsls	r2, r3
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480c:	f043 0201 	orr.w	r2, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	fa22 f303 	lsr.w	r3, r2, r3
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d06e      	beq.n	8004908 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a69      	ldr	r2, [pc, #420]	; (80049d4 <HAL_DMA_IRQHandler+0x3f8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d04a      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a67      	ldr	r2, [pc, #412]	; (80049d8 <HAL_DMA_IRQHandler+0x3fc>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d045      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a66      	ldr	r2, [pc, #408]	; (80049dc <HAL_DMA_IRQHandler+0x400>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d040      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a64      	ldr	r2, [pc, #400]	; (80049e0 <HAL_DMA_IRQHandler+0x404>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d03b      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a63      	ldr	r2, [pc, #396]	; (80049e4 <HAL_DMA_IRQHandler+0x408>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d036      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a61      	ldr	r2, [pc, #388]	; (80049e8 <HAL_DMA_IRQHandler+0x40c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d031      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a60      	ldr	r2, [pc, #384]	; (80049ec <HAL_DMA_IRQHandler+0x410>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d02c      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a5e      	ldr	r2, [pc, #376]	; (80049f0 <HAL_DMA_IRQHandler+0x414>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d027      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a5d      	ldr	r2, [pc, #372]	; (80049f4 <HAL_DMA_IRQHandler+0x418>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d022      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a5b      	ldr	r2, [pc, #364]	; (80049f8 <HAL_DMA_IRQHandler+0x41c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d01d      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a5a      	ldr	r2, [pc, #360]	; (80049fc <HAL_DMA_IRQHandler+0x420>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d018      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a58      	ldr	r2, [pc, #352]	; (8004a00 <HAL_DMA_IRQHandler+0x424>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d013      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a57      	ldr	r2, [pc, #348]	; (8004a04 <HAL_DMA_IRQHandler+0x428>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00e      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a55      	ldr	r2, [pc, #340]	; (8004a08 <HAL_DMA_IRQHandler+0x42c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d009      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a54      	ldr	r2, [pc, #336]	; (8004a0c <HAL_DMA_IRQHandler+0x430>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d004      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a52      	ldr	r2, [pc, #328]	; (8004a10 <HAL_DMA_IRQHandler+0x434>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d10a      	bne.n	80048e0 <HAL_DMA_IRQHandler+0x304>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	bf14      	ite	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	2300      	moveq	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	e003      	b.n	80048e8 <HAL_DMA_IRQHandler+0x30c>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2300      	movs	r3, #0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00d      	beq.n	8004908 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f0:	f003 031f 	and.w	r3, r3, #31
 80048f4:	2201      	movs	r2, #1
 80048f6:	409a      	lsls	r2, r3
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004900:	f043 0202 	orr.w	r2, r3, #2
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490c:	f003 031f 	and.w	r3, r3, #31
 8004910:	2204      	movs	r2, #4
 8004912:	409a      	lsls	r2, r3
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	4013      	ands	r3, r2
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 808f 	beq.w	8004a3c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a2c      	ldr	r2, [pc, #176]	; (80049d4 <HAL_DMA_IRQHandler+0x3f8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d04a      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a2a      	ldr	r2, [pc, #168]	; (80049d8 <HAL_DMA_IRQHandler+0x3fc>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d045      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a29      	ldr	r2, [pc, #164]	; (80049dc <HAL_DMA_IRQHandler+0x400>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d040      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a27      	ldr	r2, [pc, #156]	; (80049e0 <HAL_DMA_IRQHandler+0x404>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d03b      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a26      	ldr	r2, [pc, #152]	; (80049e4 <HAL_DMA_IRQHandler+0x408>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d036      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a24      	ldr	r2, [pc, #144]	; (80049e8 <HAL_DMA_IRQHandler+0x40c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d031      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a23      	ldr	r2, [pc, #140]	; (80049ec <HAL_DMA_IRQHandler+0x410>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d02c      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a21      	ldr	r2, [pc, #132]	; (80049f0 <HAL_DMA_IRQHandler+0x414>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d027      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a20      	ldr	r2, [pc, #128]	; (80049f4 <HAL_DMA_IRQHandler+0x418>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d022      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a1e      	ldr	r2, [pc, #120]	; (80049f8 <HAL_DMA_IRQHandler+0x41c>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d01d      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a1d      	ldr	r2, [pc, #116]	; (80049fc <HAL_DMA_IRQHandler+0x420>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d018      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1b      	ldr	r2, [pc, #108]	; (8004a00 <HAL_DMA_IRQHandler+0x424>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a1a      	ldr	r2, [pc, #104]	; (8004a04 <HAL_DMA_IRQHandler+0x428>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00e      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a18      	ldr	r2, [pc, #96]	; (8004a08 <HAL_DMA_IRQHandler+0x42c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d009      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a17      	ldr	r2, [pc, #92]	; (8004a0c <HAL_DMA_IRQHandler+0x430>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d004      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a15      	ldr	r2, [pc, #84]	; (8004a10 <HAL_DMA_IRQHandler+0x434>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d12a      	bne.n	8004a14 <HAL_DMA_IRQHandler+0x438>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	bf14      	ite	ne
 80049cc:	2301      	movne	r3, #1
 80049ce:	2300      	moveq	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	e023      	b.n	8004a1c <HAL_DMA_IRQHandler+0x440>
 80049d4:	40020010 	.word	0x40020010
 80049d8:	40020028 	.word	0x40020028
 80049dc:	40020040 	.word	0x40020040
 80049e0:	40020058 	.word	0x40020058
 80049e4:	40020070 	.word	0x40020070
 80049e8:	40020088 	.word	0x40020088
 80049ec:	400200a0 	.word	0x400200a0
 80049f0:	400200b8 	.word	0x400200b8
 80049f4:	40020410 	.word	0x40020410
 80049f8:	40020428 	.word	0x40020428
 80049fc:	40020440 	.word	0x40020440
 8004a00:	40020458 	.word	0x40020458
 8004a04:	40020470 	.word	0x40020470
 8004a08:	40020488 	.word	0x40020488
 8004a0c:	400204a0 	.word	0x400204a0
 8004a10:	400204b8 	.word	0x400204b8
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00d      	beq.n	8004a3c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a24:	f003 031f 	and.w	r3, r3, #31
 8004a28:	2204      	movs	r2, #4
 8004a2a:	409a      	lsls	r2, r3
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a34:	f043 0204 	orr.w	r2, r3, #4
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a40:	f003 031f 	and.w	r3, r3, #31
 8004a44:	2210      	movs	r2, #16
 8004a46:	409a      	lsls	r2, r3
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 80a6 	beq.w	8004b9e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a85      	ldr	r2, [pc, #532]	; (8004c6c <HAL_DMA_IRQHandler+0x690>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d04a      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a83      	ldr	r2, [pc, #524]	; (8004c70 <HAL_DMA_IRQHandler+0x694>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d045      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a82      	ldr	r2, [pc, #520]	; (8004c74 <HAL_DMA_IRQHandler+0x698>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d040      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a80      	ldr	r2, [pc, #512]	; (8004c78 <HAL_DMA_IRQHandler+0x69c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d03b      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a7f      	ldr	r2, [pc, #508]	; (8004c7c <HAL_DMA_IRQHandler+0x6a0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d036      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a7d      	ldr	r2, [pc, #500]	; (8004c80 <HAL_DMA_IRQHandler+0x6a4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d031      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a7c      	ldr	r2, [pc, #496]	; (8004c84 <HAL_DMA_IRQHandler+0x6a8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d02c      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a7a      	ldr	r2, [pc, #488]	; (8004c88 <HAL_DMA_IRQHandler+0x6ac>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d027      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a79      	ldr	r2, [pc, #484]	; (8004c8c <HAL_DMA_IRQHandler+0x6b0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d022      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a77      	ldr	r2, [pc, #476]	; (8004c90 <HAL_DMA_IRQHandler+0x6b4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d01d      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a76      	ldr	r2, [pc, #472]	; (8004c94 <HAL_DMA_IRQHandler+0x6b8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d018      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a74      	ldr	r2, [pc, #464]	; (8004c98 <HAL_DMA_IRQHandler+0x6bc>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d013      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a73      	ldr	r2, [pc, #460]	; (8004c9c <HAL_DMA_IRQHandler+0x6c0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00e      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a71      	ldr	r2, [pc, #452]	; (8004ca0 <HAL_DMA_IRQHandler+0x6c4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d009      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a70      	ldr	r2, [pc, #448]	; (8004ca4 <HAL_DMA_IRQHandler+0x6c8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d004      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a6e      	ldr	r2, [pc, #440]	; (8004ca8 <HAL_DMA_IRQHandler+0x6cc>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d10a      	bne.n	8004b08 <HAL_DMA_IRQHandler+0x52c>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bf14      	ite	ne
 8004b00:	2301      	movne	r3, #1
 8004b02:	2300      	moveq	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	e009      	b.n	8004b1c <HAL_DMA_IRQHandler+0x540>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	bf14      	ite	ne
 8004b16:	2301      	movne	r3, #1
 8004b18:	2300      	moveq	r3, #0
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d03e      	beq.n	8004b9e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b24:	f003 031f 	and.w	r3, r3, #31
 8004b28:	2210      	movs	r2, #16
 8004b2a:	409a      	lsls	r2, r3
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d018      	beq.n	8004b70 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d108      	bne.n	8004b5e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d024      	beq.n	8004b9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	4798      	blx	r3
 8004b5c:	e01f      	b.n	8004b9e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d01b      	beq.n	8004b9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	4798      	blx	r3
 8004b6e:	e016      	b.n	8004b9e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d107      	bne.n	8004b8e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0208 	bic.w	r2, r2, #8
 8004b8c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba2:	f003 031f 	and.w	r3, r3, #31
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	409a      	lsls	r2, r3
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	4013      	ands	r3, r2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 8110 	beq.w	8004dd4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a2c      	ldr	r2, [pc, #176]	; (8004c6c <HAL_DMA_IRQHandler+0x690>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d04a      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a2b      	ldr	r2, [pc, #172]	; (8004c70 <HAL_DMA_IRQHandler+0x694>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d045      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a29      	ldr	r2, [pc, #164]	; (8004c74 <HAL_DMA_IRQHandler+0x698>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d040      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a28      	ldr	r2, [pc, #160]	; (8004c78 <HAL_DMA_IRQHandler+0x69c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d03b      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a26      	ldr	r2, [pc, #152]	; (8004c7c <HAL_DMA_IRQHandler+0x6a0>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d036      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a25      	ldr	r2, [pc, #148]	; (8004c80 <HAL_DMA_IRQHandler+0x6a4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d031      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a23      	ldr	r2, [pc, #140]	; (8004c84 <HAL_DMA_IRQHandler+0x6a8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d02c      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a22      	ldr	r2, [pc, #136]	; (8004c88 <HAL_DMA_IRQHandler+0x6ac>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d027      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a20      	ldr	r2, [pc, #128]	; (8004c8c <HAL_DMA_IRQHandler+0x6b0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d022      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a1f      	ldr	r2, [pc, #124]	; (8004c90 <HAL_DMA_IRQHandler+0x6b4>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d01d      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a1d      	ldr	r2, [pc, #116]	; (8004c94 <HAL_DMA_IRQHandler+0x6b8>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d018      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a1c      	ldr	r2, [pc, #112]	; (8004c98 <HAL_DMA_IRQHandler+0x6bc>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d013      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a1a      	ldr	r2, [pc, #104]	; (8004c9c <HAL_DMA_IRQHandler+0x6c0>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d00e      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a19      	ldr	r2, [pc, #100]	; (8004ca0 <HAL_DMA_IRQHandler+0x6c4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d009      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a17      	ldr	r2, [pc, #92]	; (8004ca4 <HAL_DMA_IRQHandler+0x6c8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d004      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a16      	ldr	r2, [pc, #88]	; (8004ca8 <HAL_DMA_IRQHandler+0x6cc>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d12b      	bne.n	8004cac <HAL_DMA_IRQHandler+0x6d0>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0310 	and.w	r3, r3, #16
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	bf14      	ite	ne
 8004c62:	2301      	movne	r3, #1
 8004c64:	2300      	moveq	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	e02a      	b.n	8004cc0 <HAL_DMA_IRQHandler+0x6e4>
 8004c6a:	bf00      	nop
 8004c6c:	40020010 	.word	0x40020010
 8004c70:	40020028 	.word	0x40020028
 8004c74:	40020040 	.word	0x40020040
 8004c78:	40020058 	.word	0x40020058
 8004c7c:	40020070 	.word	0x40020070
 8004c80:	40020088 	.word	0x40020088
 8004c84:	400200a0 	.word	0x400200a0
 8004c88:	400200b8 	.word	0x400200b8
 8004c8c:	40020410 	.word	0x40020410
 8004c90:	40020428 	.word	0x40020428
 8004c94:	40020440 	.word	0x40020440
 8004c98:	40020458 	.word	0x40020458
 8004c9c:	40020470 	.word	0x40020470
 8004ca0:	40020488 	.word	0x40020488
 8004ca4:	400204a0 	.word	0x400204a0
 8004ca8:	400204b8 	.word	0x400204b8
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	bf14      	ite	ne
 8004cba:	2301      	movne	r3, #1
 8004cbc:	2300      	moveq	r3, #0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 8087 	beq.w	8004dd4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cca:	f003 031f 	and.w	r3, r3, #31
 8004cce:	2220      	movs	r2, #32
 8004cd0:	409a      	lsls	r2, r3
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d139      	bne.n	8004d56 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0216 	bic.w	r2, r2, #22
 8004cf0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695a      	ldr	r2, [r3, #20]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d00:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d103      	bne.n	8004d12 <HAL_DMA_IRQHandler+0x736>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d007      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0208 	bic.w	r2, r2, #8
 8004d20:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d26:	f003 031f 	and.w	r3, r3, #31
 8004d2a:	223f      	movs	r2, #63	; 0x3f
 8004d2c:	409a      	lsls	r2, r3
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 834a 	beq.w	80053e0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	4798      	blx	r3
          }
          return;
 8004d54:	e344      	b.n	80053e0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d018      	beq.n	8004d96 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d108      	bne.n	8004d84 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d02c      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	4798      	blx	r3
 8004d82:	e027      	b.n	8004dd4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d023      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	4798      	blx	r3
 8004d94:	e01e      	b.n	8004dd4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10f      	bne.n	8004dc4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0210 	bic.w	r2, r2, #16
 8004db2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 8306 	beq.w	80053ea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 8088 	beq.w	8004efc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2204      	movs	r2, #4
 8004df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a7a      	ldr	r2, [pc, #488]	; (8004fe4 <HAL_DMA_IRQHandler+0xa08>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d04a      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a79      	ldr	r2, [pc, #484]	; (8004fe8 <HAL_DMA_IRQHandler+0xa0c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d045      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a77      	ldr	r2, [pc, #476]	; (8004fec <HAL_DMA_IRQHandler+0xa10>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d040      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a76      	ldr	r2, [pc, #472]	; (8004ff0 <HAL_DMA_IRQHandler+0xa14>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d03b      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a74      	ldr	r2, [pc, #464]	; (8004ff4 <HAL_DMA_IRQHandler+0xa18>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d036      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a73      	ldr	r2, [pc, #460]	; (8004ff8 <HAL_DMA_IRQHandler+0xa1c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d031      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a71      	ldr	r2, [pc, #452]	; (8004ffc <HAL_DMA_IRQHandler+0xa20>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d02c      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a70      	ldr	r2, [pc, #448]	; (8005000 <HAL_DMA_IRQHandler+0xa24>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d027      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a6e      	ldr	r2, [pc, #440]	; (8005004 <HAL_DMA_IRQHandler+0xa28>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d022      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a6d      	ldr	r2, [pc, #436]	; (8005008 <HAL_DMA_IRQHandler+0xa2c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d01d      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a6b      	ldr	r2, [pc, #428]	; (800500c <HAL_DMA_IRQHandler+0xa30>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d018      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a6a      	ldr	r2, [pc, #424]	; (8005010 <HAL_DMA_IRQHandler+0xa34>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d013      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a68      	ldr	r2, [pc, #416]	; (8005014 <HAL_DMA_IRQHandler+0xa38>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00e      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a67      	ldr	r2, [pc, #412]	; (8005018 <HAL_DMA_IRQHandler+0xa3c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d009      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a65      	ldr	r2, [pc, #404]	; (800501c <HAL_DMA_IRQHandler+0xa40>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d004      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a64      	ldr	r2, [pc, #400]	; (8005020 <HAL_DMA_IRQHandler+0xa44>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d108      	bne.n	8004ea6 <HAL_DMA_IRQHandler+0x8ca>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0201 	bic.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	e007      	b.n	8004eb6 <HAL_DMA_IRQHandler+0x8da>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0201 	bic.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d307      	bcc.n	8004ed2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1f2      	bne.n	8004eb6 <HAL_DMA_IRQHandler+0x8da>
 8004ed0:	e000      	b.n	8004ed4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004ed2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d004      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2203      	movs	r2, #3
 8004eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004ef2:	e003      	b.n	8004efc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 8272 	beq.w	80053ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	4798      	blx	r3
 8004f0e:	e26c      	b.n	80053ea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a43      	ldr	r2, [pc, #268]	; (8005024 <HAL_DMA_IRQHandler+0xa48>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d022      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x984>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a42      	ldr	r2, [pc, #264]	; (8005028 <HAL_DMA_IRQHandler+0xa4c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d01d      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x984>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a40      	ldr	r2, [pc, #256]	; (800502c <HAL_DMA_IRQHandler+0xa50>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d018      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x984>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a3f      	ldr	r2, [pc, #252]	; (8005030 <HAL_DMA_IRQHandler+0xa54>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d013      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x984>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a3d      	ldr	r2, [pc, #244]	; (8005034 <HAL_DMA_IRQHandler+0xa58>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00e      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x984>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a3c      	ldr	r2, [pc, #240]	; (8005038 <HAL_DMA_IRQHandler+0xa5c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d009      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x984>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a3a      	ldr	r2, [pc, #232]	; (800503c <HAL_DMA_IRQHandler+0xa60>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d004      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x984>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a39      	ldr	r2, [pc, #228]	; (8005040 <HAL_DMA_IRQHandler+0xa64>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d101      	bne.n	8004f64 <HAL_DMA_IRQHandler+0x988>
 8004f60:	2301      	movs	r3, #1
 8004f62:	e000      	b.n	8004f66 <HAL_DMA_IRQHandler+0x98a>
 8004f64:	2300      	movs	r3, #0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 823f 	beq.w	80053ea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f78:	f003 031f 	and.w	r3, r3, #31
 8004f7c:	2204      	movs	r2, #4
 8004f7e:	409a      	lsls	r2, r3
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	4013      	ands	r3, r2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 80cd 	beq.w	8005124 <HAL_DMA_IRQHandler+0xb48>
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 80c7 	beq.w	8005124 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9a:	f003 031f 	and.w	r3, r3, #31
 8004f9e:	2204      	movs	r2, #4
 8004fa0:	409a      	lsls	r2, r3
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d049      	beq.n	8005044 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 8210 	beq.w	80053e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fcc:	e20a      	b.n	80053e4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 8206 	beq.w	80053e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fe0:	e200      	b.n	80053e4 <HAL_DMA_IRQHandler+0xe08>
 8004fe2:	bf00      	nop
 8004fe4:	40020010 	.word	0x40020010
 8004fe8:	40020028 	.word	0x40020028
 8004fec:	40020040 	.word	0x40020040
 8004ff0:	40020058 	.word	0x40020058
 8004ff4:	40020070 	.word	0x40020070
 8004ff8:	40020088 	.word	0x40020088
 8004ffc:	400200a0 	.word	0x400200a0
 8005000:	400200b8 	.word	0x400200b8
 8005004:	40020410 	.word	0x40020410
 8005008:	40020428 	.word	0x40020428
 800500c:	40020440 	.word	0x40020440
 8005010:	40020458 	.word	0x40020458
 8005014:	40020470 	.word	0x40020470
 8005018:	40020488 	.word	0x40020488
 800501c:	400204a0 	.word	0x400204a0
 8005020:	400204b8 	.word	0x400204b8
 8005024:	58025408 	.word	0x58025408
 8005028:	5802541c 	.word	0x5802541c
 800502c:	58025430 	.word	0x58025430
 8005030:	58025444 	.word	0x58025444
 8005034:	58025458 	.word	0x58025458
 8005038:	5802546c 	.word	0x5802546c
 800503c:	58025480 	.word	0x58025480
 8005040:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	2b00      	cmp	r3, #0
 800504c:	d160      	bne.n	8005110 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a8c      	ldr	r2, [pc, #560]	; (8005284 <HAL_DMA_IRQHandler+0xca8>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d04a      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a8a      	ldr	r2, [pc, #552]	; (8005288 <HAL_DMA_IRQHandler+0xcac>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d045      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a89      	ldr	r2, [pc, #548]	; (800528c <HAL_DMA_IRQHandler+0xcb0>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d040      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a87      	ldr	r2, [pc, #540]	; (8005290 <HAL_DMA_IRQHandler+0xcb4>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d03b      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a86      	ldr	r2, [pc, #536]	; (8005294 <HAL_DMA_IRQHandler+0xcb8>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d036      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a84      	ldr	r2, [pc, #528]	; (8005298 <HAL_DMA_IRQHandler+0xcbc>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d031      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a83      	ldr	r2, [pc, #524]	; (800529c <HAL_DMA_IRQHandler+0xcc0>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d02c      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a81      	ldr	r2, [pc, #516]	; (80052a0 <HAL_DMA_IRQHandler+0xcc4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d027      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a80      	ldr	r2, [pc, #512]	; (80052a4 <HAL_DMA_IRQHandler+0xcc8>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d022      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a7e      	ldr	r2, [pc, #504]	; (80052a8 <HAL_DMA_IRQHandler+0xccc>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d01d      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a7d      	ldr	r2, [pc, #500]	; (80052ac <HAL_DMA_IRQHandler+0xcd0>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d018      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a7b      	ldr	r2, [pc, #492]	; (80052b0 <HAL_DMA_IRQHandler+0xcd4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d013      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a7a      	ldr	r2, [pc, #488]	; (80052b4 <HAL_DMA_IRQHandler+0xcd8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d00e      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a78      	ldr	r2, [pc, #480]	; (80052b8 <HAL_DMA_IRQHandler+0xcdc>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d009      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a77      	ldr	r2, [pc, #476]	; (80052bc <HAL_DMA_IRQHandler+0xce0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d004      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a75      	ldr	r2, [pc, #468]	; (80052c0 <HAL_DMA_IRQHandler+0xce4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d108      	bne.n	8005100 <HAL_DMA_IRQHandler+0xb24>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 0208 	bic.w	r2, r2, #8
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e007      	b.n	8005110 <HAL_DMA_IRQHandler+0xb34>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0204 	bic.w	r2, r2, #4
 800510e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 8165 	beq.w	80053e4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005122:	e15f      	b.n	80053e4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005128:	f003 031f 	and.w	r3, r3, #31
 800512c:	2202      	movs	r2, #2
 800512e:	409a      	lsls	r2, r3
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	4013      	ands	r3, r2
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 80c5 	beq.w	80052c4 <HAL_DMA_IRQHandler+0xce8>
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 80bf 	beq.w	80052c4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800514a:	f003 031f 	and.w	r3, r3, #31
 800514e:	2202      	movs	r2, #2
 8005150:	409a      	lsls	r2, r3
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d018      	beq.n	8005192 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d109      	bne.n	800517e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 813a 	beq.w	80053e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800517c:	e134      	b.n	80053e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 8130 	beq.w	80053e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005190:	e12a      	b.n	80053e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b00      	cmp	r3, #0
 800519a:	d168      	bne.n	800526e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a38      	ldr	r2, [pc, #224]	; (8005284 <HAL_DMA_IRQHandler+0xca8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d04a      	beq.n	800523c <HAL_DMA_IRQHandler+0xc60>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a37      	ldr	r2, [pc, #220]	; (8005288 <HAL_DMA_IRQHandler+0xcac>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d045      	beq.n	800523c <HAL_DMA_IRQHandler+0xc60>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a35      	ldr	r2, [pc, #212]	; (800528c <HAL_DMA_IRQHandler+0xcb0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d040      	beq.n	800523c <HAL_DMA_IRQHandler+0xc60>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a34      	ldr	r2, [pc, #208]	; (8005290 <HAL_DMA_IRQHandler+0xcb4>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d03b      	beq.n	800523c <HAL_DMA_IRQHandler+0xc60>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a32      	ldr	r2, [pc, #200]	; (8005294 <HAL_DMA_IRQHandler+0xcb8>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d036      	beq.n	800523c <HAL_DMA_IRQHandler+0xc60>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a31      	ldr	r2, [pc, #196]	; (8005298 <HAL_DMA_IRQHandler+0xcbc>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d031      	beq.n	800523c <HAL_DMA_IRQHandler+0xc60>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a2f      	ldr	r2, [pc, #188]	; (800529c <HAL_DMA_IRQHandler+0xcc0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d02c      	beq.n	800523c <HAL_DMA_IRQHandler+0xc60>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a2e      	ldr	r2, [pc, #184]	; (80052a0 <HAL_DMA_IRQHandler+0xcc4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d027      	beq.n	800523c <HAL_DMA_IRQHandler+0xc60>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a2c      	ldr	r2, [pc, #176]	; (80052a4 <HAL_DMA_IRQHandler+0xcc8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d022      	beq.n	800523c <HAL_DMA_IRQHandler+0xc60>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a2b      	ldr	r2, [pc, #172]	; (80052a8 <HAL_DMA_IRQHandler+0xccc>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d01d      	beq.n	800523c <HAL_DMA_IRQHandler+0xc60>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a29      	ldr	r2, [pc, #164]	; (80052ac <HAL_DMA_IRQHandler+0xcd0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d018      	beq.n	800523c <HAL_DMA_IRQHandler+0xc60>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a28      	ldr	r2, [pc, #160]	; (80052b0 <HAL_DMA_IRQHandler+0xcd4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d013      	beq.n	800523c <HAL_DMA_IRQHandler+0xc60>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a26      	ldr	r2, [pc, #152]	; (80052b4 <HAL_DMA_IRQHandler+0xcd8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d00e      	beq.n	800523c <HAL_DMA_IRQHandler+0xc60>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a25      	ldr	r2, [pc, #148]	; (80052b8 <HAL_DMA_IRQHandler+0xcdc>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d009      	beq.n	800523c <HAL_DMA_IRQHandler+0xc60>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a23      	ldr	r2, [pc, #140]	; (80052bc <HAL_DMA_IRQHandler+0xce0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d004      	beq.n	800523c <HAL_DMA_IRQHandler+0xc60>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a22      	ldr	r2, [pc, #136]	; (80052c0 <HAL_DMA_IRQHandler+0xce4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d108      	bne.n	800524e <HAL_DMA_IRQHandler+0xc72>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0214 	bic.w	r2, r2, #20
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	e007      	b.n	800525e <HAL_DMA_IRQHandler+0xc82>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 020a 	bic.w	r2, r2, #10
 800525c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 80b8 	beq.w	80053e8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005280:	e0b2      	b.n	80053e8 <HAL_DMA_IRQHandler+0xe0c>
 8005282:	bf00      	nop
 8005284:	40020010 	.word	0x40020010
 8005288:	40020028 	.word	0x40020028
 800528c:	40020040 	.word	0x40020040
 8005290:	40020058 	.word	0x40020058
 8005294:	40020070 	.word	0x40020070
 8005298:	40020088 	.word	0x40020088
 800529c:	400200a0 	.word	0x400200a0
 80052a0:	400200b8 	.word	0x400200b8
 80052a4:	40020410 	.word	0x40020410
 80052a8:	40020428 	.word	0x40020428
 80052ac:	40020440 	.word	0x40020440
 80052b0:	40020458 	.word	0x40020458
 80052b4:	40020470 	.word	0x40020470
 80052b8:	40020488 	.word	0x40020488
 80052bc:	400204a0 	.word	0x400204a0
 80052c0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c8:	f003 031f 	and.w	r3, r3, #31
 80052cc:	2208      	movs	r2, #8
 80052ce:	409a      	lsls	r2, r3
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	4013      	ands	r3, r2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 8088 	beq.w	80053ea <HAL_DMA_IRQHandler+0xe0e>
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 8082 	beq.w	80053ea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a41      	ldr	r2, [pc, #260]	; (80053f0 <HAL_DMA_IRQHandler+0xe14>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d04a      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a3f      	ldr	r2, [pc, #252]	; (80053f4 <HAL_DMA_IRQHandler+0xe18>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d045      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a3e      	ldr	r2, [pc, #248]	; (80053f8 <HAL_DMA_IRQHandler+0xe1c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d040      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a3c      	ldr	r2, [pc, #240]	; (80053fc <HAL_DMA_IRQHandler+0xe20>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d03b      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a3b      	ldr	r2, [pc, #236]	; (8005400 <HAL_DMA_IRQHandler+0xe24>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d036      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a39      	ldr	r2, [pc, #228]	; (8005404 <HAL_DMA_IRQHandler+0xe28>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d031      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a38      	ldr	r2, [pc, #224]	; (8005408 <HAL_DMA_IRQHandler+0xe2c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d02c      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a36      	ldr	r2, [pc, #216]	; (800540c <HAL_DMA_IRQHandler+0xe30>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d027      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a35      	ldr	r2, [pc, #212]	; (8005410 <HAL_DMA_IRQHandler+0xe34>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d022      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a33      	ldr	r2, [pc, #204]	; (8005414 <HAL_DMA_IRQHandler+0xe38>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d01d      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a32      	ldr	r2, [pc, #200]	; (8005418 <HAL_DMA_IRQHandler+0xe3c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d018      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a30      	ldr	r2, [pc, #192]	; (800541c <HAL_DMA_IRQHandler+0xe40>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d013      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a2f      	ldr	r2, [pc, #188]	; (8005420 <HAL_DMA_IRQHandler+0xe44>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00e      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a2d      	ldr	r2, [pc, #180]	; (8005424 <HAL_DMA_IRQHandler+0xe48>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d009      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a2c      	ldr	r2, [pc, #176]	; (8005428 <HAL_DMA_IRQHandler+0xe4c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d004      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a2a      	ldr	r2, [pc, #168]	; (800542c <HAL_DMA_IRQHandler+0xe50>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d108      	bne.n	8005398 <HAL_DMA_IRQHandler+0xdbc>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 021c 	bic.w	r2, r2, #28
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	e007      	b.n	80053a8 <HAL_DMA_IRQHandler+0xdcc>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 020e 	bic.w	r2, r2, #14
 80053a6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ac:	f003 031f 	and.w	r3, r3, #31
 80053b0:	2201      	movs	r2, #1
 80053b2:	409a      	lsls	r2, r3
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	4798      	blx	r3
 80053de:	e004      	b.n	80053ea <HAL_DMA_IRQHandler+0xe0e>
          return;
 80053e0:	bf00      	nop
 80053e2:	e002      	b.n	80053ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053e4:	bf00      	nop
 80053e6:	e000      	b.n	80053ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053e8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80053ea:	3728      	adds	r7, #40	; 0x28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	40020010 	.word	0x40020010
 80053f4:	40020028 	.word	0x40020028
 80053f8:	40020040 	.word	0x40020040
 80053fc:	40020058 	.word	0x40020058
 8005400:	40020070 	.word	0x40020070
 8005404:	40020088 	.word	0x40020088
 8005408:	400200a0 	.word	0x400200a0
 800540c:	400200b8 	.word	0x400200b8
 8005410:	40020410 	.word	0x40020410
 8005414:	40020428 	.word	0x40020428
 8005418:	40020440 	.word	0x40020440
 800541c:	40020458 	.word	0x40020458
 8005420:	40020470 	.word	0x40020470
 8005424:	40020488 	.word	0x40020488
 8005428:	400204a0 	.word	0x400204a0
 800542c:	400204b8 	.word	0x400204b8

08005430 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a42      	ldr	r2, [pc, #264]	; (8005548 <DMA_CalcBaseAndBitshift+0x118>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d04a      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a41      	ldr	r2, [pc, #260]	; (800554c <DMA_CalcBaseAndBitshift+0x11c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d045      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a3f      	ldr	r2, [pc, #252]	; (8005550 <DMA_CalcBaseAndBitshift+0x120>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d040      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a3e      	ldr	r2, [pc, #248]	; (8005554 <DMA_CalcBaseAndBitshift+0x124>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d03b      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a3c      	ldr	r2, [pc, #240]	; (8005558 <DMA_CalcBaseAndBitshift+0x128>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d036      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a3b      	ldr	r2, [pc, #236]	; (800555c <DMA_CalcBaseAndBitshift+0x12c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d031      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a39      	ldr	r2, [pc, #228]	; (8005560 <DMA_CalcBaseAndBitshift+0x130>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d02c      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a38      	ldr	r2, [pc, #224]	; (8005564 <DMA_CalcBaseAndBitshift+0x134>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d027      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a36      	ldr	r2, [pc, #216]	; (8005568 <DMA_CalcBaseAndBitshift+0x138>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d022      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a35      	ldr	r2, [pc, #212]	; (800556c <DMA_CalcBaseAndBitshift+0x13c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d01d      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a33      	ldr	r2, [pc, #204]	; (8005570 <DMA_CalcBaseAndBitshift+0x140>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d018      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a32      	ldr	r2, [pc, #200]	; (8005574 <DMA_CalcBaseAndBitshift+0x144>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d013      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a30      	ldr	r2, [pc, #192]	; (8005578 <DMA_CalcBaseAndBitshift+0x148>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00e      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a2f      	ldr	r2, [pc, #188]	; (800557c <DMA_CalcBaseAndBitshift+0x14c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d009      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a2d      	ldr	r2, [pc, #180]	; (8005580 <DMA_CalcBaseAndBitshift+0x150>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d004      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a2c      	ldr	r2, [pc, #176]	; (8005584 <DMA_CalcBaseAndBitshift+0x154>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d101      	bne.n	80054dc <DMA_CalcBaseAndBitshift+0xac>
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <DMA_CalcBaseAndBitshift+0xae>
 80054dc:	2300      	movs	r3, #0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d024      	beq.n	800552c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	3b10      	subs	r3, #16
 80054ea:	4a27      	ldr	r2, [pc, #156]	; (8005588 <DMA_CalcBaseAndBitshift+0x158>)
 80054ec:	fba2 2303 	umull	r2, r3, r2, r3
 80054f0:	091b      	lsrs	r3, r3, #4
 80054f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	4a24      	ldr	r2, [pc, #144]	; (800558c <DMA_CalcBaseAndBitshift+0x15c>)
 80054fc:	5cd3      	ldrb	r3, [r2, r3]
 80054fe:	461a      	mov	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2b03      	cmp	r3, #3
 8005508:	d908      	bls.n	800551c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	4b1f      	ldr	r3, [pc, #124]	; (8005590 <DMA_CalcBaseAndBitshift+0x160>)
 8005512:	4013      	ands	r3, r2
 8005514:	1d1a      	adds	r2, r3, #4
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	659a      	str	r2, [r3, #88]	; 0x58
 800551a:	e00d      	b.n	8005538 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
 8005522:	4b1b      	ldr	r3, [pc, #108]	; (8005590 <DMA_CalcBaseAndBitshift+0x160>)
 8005524:	4013      	ands	r3, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6593      	str	r3, [r2, #88]	; 0x58
 800552a:	e005      	b.n	8005538 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800553c:	4618      	mov	r0, r3
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	40020010 	.word	0x40020010
 800554c:	40020028 	.word	0x40020028
 8005550:	40020040 	.word	0x40020040
 8005554:	40020058 	.word	0x40020058
 8005558:	40020070 	.word	0x40020070
 800555c:	40020088 	.word	0x40020088
 8005560:	400200a0 	.word	0x400200a0
 8005564:	400200b8 	.word	0x400200b8
 8005568:	40020410 	.word	0x40020410
 800556c:	40020428 	.word	0x40020428
 8005570:	40020440 	.word	0x40020440
 8005574:	40020458 	.word	0x40020458
 8005578:	40020470 	.word	0x40020470
 800557c:	40020488 	.word	0x40020488
 8005580:	400204a0 	.word	0x400204a0
 8005584:	400204b8 	.word	0x400204b8
 8005588:	aaaaaaab 	.word	0xaaaaaaab
 800558c:	0800f64c 	.word	0x0800f64c
 8005590:	fffffc00 	.word	0xfffffc00

08005594 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800559c:	2300      	movs	r3, #0
 800559e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d120      	bne.n	80055ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ac:	2b03      	cmp	r3, #3
 80055ae:	d858      	bhi.n	8005662 <DMA_CheckFifoParam+0xce>
 80055b0:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <DMA_CheckFifoParam+0x24>)
 80055b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b6:	bf00      	nop
 80055b8:	080055c9 	.word	0x080055c9
 80055bc:	080055db 	.word	0x080055db
 80055c0:	080055c9 	.word	0x080055c9
 80055c4:	08005663 	.word	0x08005663
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d048      	beq.n	8005666 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055d8:	e045      	b.n	8005666 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055e2:	d142      	bne.n	800566a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055e8:	e03f      	b.n	800566a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f2:	d123      	bne.n	800563c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	d838      	bhi.n	800566e <DMA_CheckFifoParam+0xda>
 80055fc:	a201      	add	r2, pc, #4	; (adr r2, 8005604 <DMA_CheckFifoParam+0x70>)
 80055fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005602:	bf00      	nop
 8005604:	08005615 	.word	0x08005615
 8005608:	0800561b 	.word	0x0800561b
 800560c:	08005615 	.word	0x08005615
 8005610:	0800562d 	.word	0x0800562d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	73fb      	strb	r3, [r7, #15]
        break;
 8005618:	e030      	b.n	800567c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d025      	beq.n	8005672 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800562a:	e022      	b.n	8005672 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005634:	d11f      	bne.n	8005676 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800563a:	e01c      	b.n	8005676 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005640:	2b02      	cmp	r3, #2
 8005642:	d902      	bls.n	800564a <DMA_CheckFifoParam+0xb6>
 8005644:	2b03      	cmp	r3, #3
 8005646:	d003      	beq.n	8005650 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005648:	e018      	b.n	800567c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	73fb      	strb	r3, [r7, #15]
        break;
 800564e:	e015      	b.n	800567c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00e      	beq.n	800567a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	73fb      	strb	r3, [r7, #15]
    break;
 8005660:	e00b      	b.n	800567a <DMA_CheckFifoParam+0xe6>
        break;
 8005662:	bf00      	nop
 8005664:	e00a      	b.n	800567c <DMA_CheckFifoParam+0xe8>
        break;
 8005666:	bf00      	nop
 8005668:	e008      	b.n	800567c <DMA_CheckFifoParam+0xe8>
        break;
 800566a:	bf00      	nop
 800566c:	e006      	b.n	800567c <DMA_CheckFifoParam+0xe8>
        break;
 800566e:	bf00      	nop
 8005670:	e004      	b.n	800567c <DMA_CheckFifoParam+0xe8>
        break;
 8005672:	bf00      	nop
 8005674:	e002      	b.n	800567c <DMA_CheckFifoParam+0xe8>
        break;
 8005676:	bf00      	nop
 8005678:	e000      	b.n	800567c <DMA_CheckFifoParam+0xe8>
    break;
 800567a:	bf00      	nop
    }
  }

  return status;
 800567c:	7bfb      	ldrb	r3, [r7, #15]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop

0800568c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a38      	ldr	r2, [pc, #224]	; (8005780 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d022      	beq.n	80056ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a36      	ldr	r2, [pc, #216]	; (8005784 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d01d      	beq.n	80056ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a35      	ldr	r2, [pc, #212]	; (8005788 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d018      	beq.n	80056ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a33      	ldr	r2, [pc, #204]	; (800578c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d013      	beq.n	80056ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a32      	ldr	r2, [pc, #200]	; (8005790 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00e      	beq.n	80056ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a30      	ldr	r2, [pc, #192]	; (8005794 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d009      	beq.n	80056ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a2f      	ldr	r2, [pc, #188]	; (8005798 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d004      	beq.n	80056ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a2d      	ldr	r2, [pc, #180]	; (800579c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d101      	bne.n	80056ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80056ea:	2301      	movs	r3, #1
 80056ec:	e000      	b.n	80056f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80056ee:	2300      	movs	r3, #0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d01a      	beq.n	800572a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	3b08      	subs	r3, #8
 80056fc:	4a28      	ldr	r2, [pc, #160]	; (80057a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80056fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005702:	091b      	lsrs	r3, r3, #4
 8005704:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	4b26      	ldr	r3, [pc, #152]	; (80057a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800570a:	4413      	add	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	461a      	mov	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a24      	ldr	r2, [pc, #144]	; (80057a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005718:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f003 031f 	and.w	r3, r3, #31
 8005720:	2201      	movs	r2, #1
 8005722:	409a      	lsls	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005728:	e024      	b.n	8005774 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	b2db      	uxtb	r3, r3
 8005730:	3b10      	subs	r3, #16
 8005732:	4a1e      	ldr	r2, [pc, #120]	; (80057ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005734:	fba2 2303 	umull	r2, r3, r2, r3
 8005738:	091b      	lsrs	r3, r3, #4
 800573a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4a1c      	ldr	r2, [pc, #112]	; (80057b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d806      	bhi.n	8005752 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	4a1b      	ldr	r2, [pc, #108]	; (80057b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d902      	bls.n	8005752 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3308      	adds	r3, #8
 8005750:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4b18      	ldr	r3, [pc, #96]	; (80057b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	461a      	mov	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a16      	ldr	r2, [pc, #88]	; (80057bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005764:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f003 031f 	and.w	r3, r3, #31
 800576c:	2201      	movs	r2, #1
 800576e:	409a      	lsls	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005774:	bf00      	nop
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	58025408 	.word	0x58025408
 8005784:	5802541c 	.word	0x5802541c
 8005788:	58025430 	.word	0x58025430
 800578c:	58025444 	.word	0x58025444
 8005790:	58025458 	.word	0x58025458
 8005794:	5802546c 	.word	0x5802546c
 8005798:	58025480 	.word	0x58025480
 800579c:	58025494 	.word	0x58025494
 80057a0:	cccccccd 	.word	0xcccccccd
 80057a4:	16009600 	.word	0x16009600
 80057a8:	58025880 	.word	0x58025880
 80057ac:	aaaaaaab 	.word	0xaaaaaaab
 80057b0:	400204b8 	.word	0x400204b8
 80057b4:	4002040f 	.word	0x4002040f
 80057b8:	10008200 	.word	0x10008200
 80057bc:	40020880 	.word	0x40020880

080057c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d04a      	beq.n	800586c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d847      	bhi.n	800586c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a25      	ldr	r2, [pc, #148]	; (8005878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d022      	beq.n	800582c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a24      	ldr	r2, [pc, #144]	; (800587c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d01d      	beq.n	800582c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a22      	ldr	r2, [pc, #136]	; (8005880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d018      	beq.n	800582c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a21      	ldr	r2, [pc, #132]	; (8005884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d013      	beq.n	800582c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a1f      	ldr	r2, [pc, #124]	; (8005888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d00e      	beq.n	800582c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a1e      	ldr	r2, [pc, #120]	; (800588c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d009      	beq.n	800582c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a1c      	ldr	r2, [pc, #112]	; (8005890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d004      	beq.n	800582c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a1b      	ldr	r2, [pc, #108]	; (8005894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d101      	bne.n	8005830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800582c:	2301      	movs	r3, #1
 800582e:	e000      	b.n	8005832 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005830:	2300      	movs	r3, #0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4b17      	ldr	r3, [pc, #92]	; (8005898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800583a:	4413      	add	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	461a      	mov	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a15      	ldr	r2, [pc, #84]	; (800589c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005848:	671a      	str	r2, [r3, #112]	; 0x70
 800584a:	e009      	b.n	8005860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	4b14      	ldr	r3, [pc, #80]	; (80058a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005850:	4413      	add	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	461a      	mov	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a11      	ldr	r2, [pc, #68]	; (80058a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800585e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3b01      	subs	r3, #1
 8005864:	2201      	movs	r2, #1
 8005866:	409a      	lsls	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800586c:	bf00      	nop
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	58025408 	.word	0x58025408
 800587c:	5802541c 	.word	0x5802541c
 8005880:	58025430 	.word	0x58025430
 8005884:	58025444 	.word	0x58025444
 8005888:	58025458 	.word	0x58025458
 800588c:	5802546c 	.word	0x5802546c
 8005890:	58025480 	.word	0x58025480
 8005894:	58025494 	.word	0x58025494
 8005898:	1600963f 	.word	0x1600963f
 800589c:	58025940 	.word	0x58025940
 80058a0:	1000823f 	.word	0x1000823f
 80058a4:	40020940 	.word	0x40020940

080058a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b089      	sub	sp, #36	; 0x24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80058b6:	4b89      	ldr	r3, [pc, #548]	; (8005adc <HAL_GPIO_Init+0x234>)
 80058b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058ba:	e194      	b.n	8005be6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	2101      	movs	r1, #1
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	fa01 f303 	lsl.w	r3, r1, r3
 80058c8:	4013      	ands	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 8186 	beq.w	8005be0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d00b      	beq.n	80058f4 <HAL_GPIO_Init+0x4c>
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d007      	beq.n	80058f4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80058e8:	2b11      	cmp	r3, #17
 80058ea:	d003      	beq.n	80058f4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	2b12      	cmp	r3, #18
 80058f2:	d130      	bne.n	8005956 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	2203      	movs	r2, #3
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	43db      	mvns	r3, r3
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	4013      	ands	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	fa02 f303 	lsl.w	r3, r2, r3
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	4313      	orrs	r3, r2
 800591c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800592a:	2201      	movs	r2, #1
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	fa02 f303 	lsl.w	r3, r2, r3
 8005932:	43db      	mvns	r3, r3
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	4013      	ands	r3, r2
 8005938:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	091b      	lsrs	r3, r3, #4
 8005940:	f003 0201 	and.w	r2, r3, #1
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	4313      	orrs	r3, r2
 800594e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	005b      	lsls	r3, r3, #1
 8005960:	2203      	movs	r2, #3
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	43db      	mvns	r3, r3
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	4013      	ands	r3, r2
 800596c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	689a      	ldr	r2, [r3, #8]
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	fa02 f303 	lsl.w	r3, r2, r3
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	4313      	orrs	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b02      	cmp	r3, #2
 800598c:	d003      	beq.n	8005996 <HAL_GPIO_Init+0xee>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2b12      	cmp	r3, #18
 8005994:	d123      	bne.n	80059de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	08da      	lsrs	r2, r3, #3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	3208      	adds	r2, #8
 800599e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	220f      	movs	r2, #15
 80059ae:	fa02 f303 	lsl.w	r3, r2, r3
 80059b2:	43db      	mvns	r3, r3
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	4013      	ands	r3, r2
 80059b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	691a      	ldr	r2, [r3, #16]
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	f003 0307 	and.w	r3, r3, #7
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	08da      	lsrs	r2, r3, #3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3208      	adds	r2, #8
 80059d8:	69b9      	ldr	r1, [r7, #24]
 80059da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	2203      	movs	r2, #3
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	43db      	mvns	r3, r3
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	4013      	ands	r3, r2
 80059f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f003 0203 	and.w	r2, r3, #3
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	fa02 f303 	lsl.w	r3, r2, r3
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 80e0 	beq.w	8005be0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a20:	4b2f      	ldr	r3, [pc, #188]	; (8005ae0 <HAL_GPIO_Init+0x238>)
 8005a22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a26:	4a2e      	ldr	r2, [pc, #184]	; (8005ae0 <HAL_GPIO_Init+0x238>)
 8005a28:	f043 0302 	orr.w	r3, r3, #2
 8005a2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005a30:	4b2b      	ldr	r3, [pc, #172]	; (8005ae0 <HAL_GPIO_Init+0x238>)
 8005a32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a3e:	4a29      	ldr	r2, [pc, #164]	; (8005ae4 <HAL_GPIO_Init+0x23c>)
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	089b      	lsrs	r3, r3, #2
 8005a44:	3302      	adds	r3, #2
 8005a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	220f      	movs	r2, #15
 8005a56:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5a:	43db      	mvns	r3, r3
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a20      	ldr	r2, [pc, #128]	; (8005ae8 <HAL_GPIO_Init+0x240>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d052      	beq.n	8005b10 <HAL_GPIO_Init+0x268>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a1f      	ldr	r2, [pc, #124]	; (8005aec <HAL_GPIO_Init+0x244>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d031      	beq.n	8005ad6 <HAL_GPIO_Init+0x22e>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a1e      	ldr	r2, [pc, #120]	; (8005af0 <HAL_GPIO_Init+0x248>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d02b      	beq.n	8005ad2 <HAL_GPIO_Init+0x22a>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a1d      	ldr	r2, [pc, #116]	; (8005af4 <HAL_GPIO_Init+0x24c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d025      	beq.n	8005ace <HAL_GPIO_Init+0x226>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a1c      	ldr	r2, [pc, #112]	; (8005af8 <HAL_GPIO_Init+0x250>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d01f      	beq.n	8005aca <HAL_GPIO_Init+0x222>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a1b      	ldr	r2, [pc, #108]	; (8005afc <HAL_GPIO_Init+0x254>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d019      	beq.n	8005ac6 <HAL_GPIO_Init+0x21e>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a1a      	ldr	r2, [pc, #104]	; (8005b00 <HAL_GPIO_Init+0x258>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d013      	beq.n	8005ac2 <HAL_GPIO_Init+0x21a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a19      	ldr	r2, [pc, #100]	; (8005b04 <HAL_GPIO_Init+0x25c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d00d      	beq.n	8005abe <HAL_GPIO_Init+0x216>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a18      	ldr	r2, [pc, #96]	; (8005b08 <HAL_GPIO_Init+0x260>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d007      	beq.n	8005aba <HAL_GPIO_Init+0x212>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a17      	ldr	r2, [pc, #92]	; (8005b0c <HAL_GPIO_Init+0x264>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d101      	bne.n	8005ab6 <HAL_GPIO_Init+0x20e>
 8005ab2:	2309      	movs	r3, #9
 8005ab4:	e02d      	b.n	8005b12 <HAL_GPIO_Init+0x26a>
 8005ab6:	230a      	movs	r3, #10
 8005ab8:	e02b      	b.n	8005b12 <HAL_GPIO_Init+0x26a>
 8005aba:	2308      	movs	r3, #8
 8005abc:	e029      	b.n	8005b12 <HAL_GPIO_Init+0x26a>
 8005abe:	2307      	movs	r3, #7
 8005ac0:	e027      	b.n	8005b12 <HAL_GPIO_Init+0x26a>
 8005ac2:	2306      	movs	r3, #6
 8005ac4:	e025      	b.n	8005b12 <HAL_GPIO_Init+0x26a>
 8005ac6:	2305      	movs	r3, #5
 8005ac8:	e023      	b.n	8005b12 <HAL_GPIO_Init+0x26a>
 8005aca:	2304      	movs	r3, #4
 8005acc:	e021      	b.n	8005b12 <HAL_GPIO_Init+0x26a>
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e01f      	b.n	8005b12 <HAL_GPIO_Init+0x26a>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e01d      	b.n	8005b12 <HAL_GPIO_Init+0x26a>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e01b      	b.n	8005b12 <HAL_GPIO_Init+0x26a>
 8005ada:	bf00      	nop
 8005adc:	58000080 	.word	0x58000080
 8005ae0:	58024400 	.word	0x58024400
 8005ae4:	58000400 	.word	0x58000400
 8005ae8:	58020000 	.word	0x58020000
 8005aec:	58020400 	.word	0x58020400
 8005af0:	58020800 	.word	0x58020800
 8005af4:	58020c00 	.word	0x58020c00
 8005af8:	58021000 	.word	0x58021000
 8005afc:	58021400 	.word	0x58021400
 8005b00:	58021800 	.word	0x58021800
 8005b04:	58021c00 	.word	0x58021c00
 8005b08:	58022000 	.word	0x58022000
 8005b0c:	58022400 	.word	0x58022400
 8005b10:	2300      	movs	r3, #0
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	f002 0203 	and.w	r2, r2, #3
 8005b18:	0092      	lsls	r2, r2, #2
 8005b1a:	4093      	lsls	r3, r2
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b22:	4938      	ldr	r1, [pc, #224]	; (8005c04 <HAL_GPIO_Init+0x35c>)
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	089b      	lsrs	r3, r3, #2
 8005b28:	3302      	adds	r3, #2
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	43db      	mvns	r3, r3
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	4013      	ands	r3, r2
 8005b68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	43db      	mvns	r3, r3
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	4013      	ands	r3, r2
 8005b94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005baa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005bd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	3301      	adds	r3, #1
 8005be4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f47f ae63 	bne.w	80058bc <HAL_GPIO_Init+0x14>
  }
}
 8005bf6:	bf00      	nop
 8005bf8:	bf00      	nop
 8005bfa:	3724      	adds	r7, #36	; 0x24
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	58000400 	.word	0x58000400

08005c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	807b      	strh	r3, [r7, #2]
 8005c14:	4613      	mov	r3, r2
 8005c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c18:	787b      	ldrb	r3, [r7, #1]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c1e:	887a      	ldrh	r2, [r7, #2]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005c24:	e003      	b.n	8005c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005c26:	887b      	ldrh	r3, [r7, #2]
 8005c28:	041a      	lsls	r2, r3, #16
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	619a      	str	r2, [r3, #24]
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	4603      	mov	r3, r0
 8005c42:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c4c:	88fb      	ldrh	r3, [r7, #6]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d008      	beq.n	8005c66 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c58:	88fb      	ldrh	r3, [r7, #6]
 8005c5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c5e:	88fb      	ldrh	r3, [r7, #6]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fc f9c7 	bl	8001ff4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005c66:	bf00      	nop
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
	...

08005c70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005c78:	4b19      	ldr	r3, [pc, #100]	; (8005ce0 <HAL_PWREx_ConfigSupply+0x70>)
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d00a      	beq.n	8005c9a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005c84:	4b16      	ldr	r3, [pc, #88]	; (8005ce0 <HAL_PWREx_ConfigSupply+0x70>)
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d001      	beq.n	8005c96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e01f      	b.n	8005cd6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	e01d      	b.n	8005cd6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005c9a:	4b11      	ldr	r3, [pc, #68]	; (8005ce0 <HAL_PWREx_ConfigSupply+0x70>)
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f023 0207 	bic.w	r2, r3, #7
 8005ca2:	490f      	ldr	r1, [pc, #60]	; (8005ce0 <HAL_PWREx_ConfigSupply+0x70>)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005caa:	f7fd f9c7 	bl	800303c <HAL_GetTick>
 8005cae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cb0:	e009      	b.n	8005cc6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005cb2:	f7fd f9c3 	bl	800303c <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cc0:	d901      	bls.n	8005cc6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e007      	b.n	8005cd6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cc6:	4b06      	ldr	r3, [pc, #24]	; (8005ce0 <HAL_PWREx_ConfigSupply+0x70>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd2:	d1ee      	bne.n	8005cb2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	58024800 	.word	0x58024800

08005ce4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b08c      	sub	sp, #48	; 0x30
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e3ff      	b.n	80064f6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 8087 	beq.w	8005e12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d04:	4b99      	ldr	r3, [pc, #612]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d0e:	4b97      	ldr	r3, [pc, #604]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d12:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d16:	2b10      	cmp	r3, #16
 8005d18:	d007      	beq.n	8005d2a <HAL_RCC_OscConfig+0x46>
 8005d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1c:	2b18      	cmp	r3, #24
 8005d1e:	d110      	bne.n	8005d42 <HAL_RCC_OscConfig+0x5e>
 8005d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d10b      	bne.n	8005d42 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d2a:	4b90      	ldr	r3, [pc, #576]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d06c      	beq.n	8005e10 <HAL_RCC_OscConfig+0x12c>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d168      	bne.n	8005e10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e3d9      	b.n	80064f6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d4a:	d106      	bne.n	8005d5a <HAL_RCC_OscConfig+0x76>
 8005d4c:	4b87      	ldr	r3, [pc, #540]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a86      	ldr	r2, [pc, #536]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d56:	6013      	str	r3, [r2, #0]
 8005d58:	e02e      	b.n	8005db8 <HAL_RCC_OscConfig+0xd4>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10c      	bne.n	8005d7c <HAL_RCC_OscConfig+0x98>
 8005d62:	4b82      	ldr	r3, [pc, #520]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a81      	ldr	r2, [pc, #516]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	4b7f      	ldr	r3, [pc, #508]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a7e      	ldr	r2, [pc, #504]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	e01d      	b.n	8005db8 <HAL_RCC_OscConfig+0xd4>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d84:	d10c      	bne.n	8005da0 <HAL_RCC_OscConfig+0xbc>
 8005d86:	4b79      	ldr	r3, [pc, #484]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a78      	ldr	r2, [pc, #480]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	4b76      	ldr	r3, [pc, #472]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a75      	ldr	r2, [pc, #468]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d9c:	6013      	str	r3, [r2, #0]
 8005d9e:	e00b      	b.n	8005db8 <HAL_RCC_OscConfig+0xd4>
 8005da0:	4b72      	ldr	r3, [pc, #456]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a71      	ldr	r2, [pc, #452]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	4b6f      	ldr	r3, [pc, #444]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a6e      	ldr	r2, [pc, #440]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d013      	beq.n	8005de8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc0:	f7fd f93c 	bl	800303c <HAL_GetTick>
 8005dc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dc8:	f7fd f938 	bl	800303c <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b64      	cmp	r3, #100	; 0x64
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e38d      	b.n	80064f6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005dda:	4b64      	ldr	r3, [pc, #400]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f0      	beq.n	8005dc8 <HAL_RCC_OscConfig+0xe4>
 8005de6:	e014      	b.n	8005e12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de8:	f7fd f928 	bl	800303c <HAL_GetTick>
 8005dec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005df0:	f7fd f924 	bl	800303c <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b64      	cmp	r3, #100	; 0x64
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e379      	b.n	80064f6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e02:	4b5a      	ldr	r3, [pc, #360]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f0      	bne.n	8005df0 <HAL_RCC_OscConfig+0x10c>
 8005e0e:	e000      	b.n	8005e12 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 80ae 	beq.w	8005f7c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e20:	4b52      	ldr	r3, [pc, #328]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e28:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e2a:	4b50      	ldr	r3, [pc, #320]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d007      	beq.n	8005e46 <HAL_RCC_OscConfig+0x162>
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	2b18      	cmp	r3, #24
 8005e3a:	d13a      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x1ce>
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d135      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e46:	4b49      	ldr	r3, [pc, #292]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0304 	and.w	r3, r3, #4
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d005      	beq.n	8005e5e <HAL_RCC_OscConfig+0x17a>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e34b      	b.n	80064f6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e5e:	f7fd f8f9 	bl	8003054 <HAL_GetREVID>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f241 0203 	movw	r2, #4099	; 0x1003
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d817      	bhi.n	8005e9c <HAL_RCC_OscConfig+0x1b8>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	2b40      	cmp	r3, #64	; 0x40
 8005e72:	d108      	bne.n	8005e86 <HAL_RCC_OscConfig+0x1a2>
 8005e74:	4b3d      	ldr	r3, [pc, #244]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005e7c:	4a3b      	ldr	r2, [pc, #236]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e82:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e84:	e07a      	b.n	8005f7c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e86:	4b39      	ldr	r3, [pc, #228]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	031b      	lsls	r3, r3, #12
 8005e94:	4935      	ldr	r1, [pc, #212]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e9a:	e06f      	b.n	8005f7c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e9c:	4b33      	ldr	r3, [pc, #204]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	061b      	lsls	r3, r3, #24
 8005eaa:	4930      	ldr	r1, [pc, #192]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005eb0:	e064      	b.n	8005f7c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d045      	beq.n	8005f46 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005eba:	4b2c      	ldr	r3, [pc, #176]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f023 0219 	bic.w	r2, r3, #25
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	4929      	ldr	r1, [pc, #164]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ecc:	f7fd f8b6 	bl	800303c <HAL_GetTick>
 8005ed0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ed2:	e008      	b.n	8005ee6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ed4:	f7fd f8b2 	bl	800303c <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e307      	b.n	80064f6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ee6:	4b21      	ldr	r3, [pc, #132]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0304 	and.w	r3, r3, #4
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0f0      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ef2:	f7fd f8af 	bl	8003054 <HAL_GetREVID>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	f241 0203 	movw	r2, #4099	; 0x1003
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d817      	bhi.n	8005f30 <HAL_RCC_OscConfig+0x24c>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	2b40      	cmp	r3, #64	; 0x40
 8005f06:	d108      	bne.n	8005f1a <HAL_RCC_OscConfig+0x236>
 8005f08:	4b18      	ldr	r3, [pc, #96]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f10:	4a16      	ldr	r2, [pc, #88]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f16:	6053      	str	r3, [r2, #4]
 8005f18:	e030      	b.n	8005f7c <HAL_RCC_OscConfig+0x298>
 8005f1a:	4b14      	ldr	r3, [pc, #80]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	031b      	lsls	r3, r3, #12
 8005f28:	4910      	ldr	r1, [pc, #64]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	604b      	str	r3, [r1, #4]
 8005f2e:	e025      	b.n	8005f7c <HAL_RCC_OscConfig+0x298>
 8005f30:	4b0e      	ldr	r3, [pc, #56]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	061b      	lsls	r3, r3, #24
 8005f3e:	490b      	ldr	r1, [pc, #44]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	604b      	str	r3, [r1, #4]
 8005f44:	e01a      	b.n	8005f7c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f46:	4b09      	ldr	r3, [pc, #36]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a08      	ldr	r2, [pc, #32]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005f4c:	f023 0301 	bic.w	r3, r3, #1
 8005f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f52:	f7fd f873 	bl	800303c <HAL_GetTick>
 8005f56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f58:	e00a      	b.n	8005f70 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f5a:	f7fd f86f 	bl	800303c <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d903      	bls.n	8005f70 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e2c4      	b.n	80064f6 <HAL_RCC_OscConfig+0x812>
 8005f6c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f70:	4ba4      	ldr	r3, [pc, #656]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1ee      	bne.n	8005f5a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0310 	and.w	r3, r3, #16
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 80a9 	beq.w	80060dc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f8a:	4b9e      	ldr	r3, [pc, #632]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f92:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f94:	4b9b      	ldr	r3, [pc, #620]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 8005f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f98:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d007      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x2cc>
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	2b18      	cmp	r3, #24
 8005fa4:	d13a      	bne.n	800601c <HAL_RCC_OscConfig+0x338>
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f003 0303 	and.w	r3, r3, #3
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d135      	bne.n	800601c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fb0:	4b94      	ldr	r3, [pc, #592]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d005      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x2e4>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	2b80      	cmp	r3, #128	; 0x80
 8005fc2:	d001      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e296      	b.n	80064f6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fc8:	f7fd f844 	bl	8003054 <HAL_GetREVID>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	f241 0203 	movw	r2, #4099	; 0x1003
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d817      	bhi.n	8006006 <HAL_RCC_OscConfig+0x322>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	d108      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x30c>
 8005fde:	4b89      	ldr	r3, [pc, #548]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005fe6:	4a87      	ldr	r2, [pc, #540]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 8005fe8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fec:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fee:	e075      	b.n	80060dc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ff0:	4b84      	ldr	r3, [pc, #528]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	069b      	lsls	r3, r3, #26
 8005ffe:	4981      	ldr	r1, [pc, #516]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 8006000:	4313      	orrs	r3, r2
 8006002:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006004:	e06a      	b.n	80060dc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006006:	4b7f      	ldr	r3, [pc, #508]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	061b      	lsls	r3, r3, #24
 8006014:	497b      	ldr	r1, [pc, #492]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 8006016:	4313      	orrs	r3, r2
 8006018:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800601a:	e05f      	b.n	80060dc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d042      	beq.n	80060aa <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006024:	4b77      	ldr	r3, [pc, #476]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a76      	ldr	r2, [pc, #472]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 800602a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800602e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006030:	f7fd f804 	bl	800303c <HAL_GetTick>
 8006034:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006038:	f7fd f800 	bl	800303c <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e255      	b.n	80064f6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800604a:	4b6e      	ldr	r3, [pc, #440]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0f0      	beq.n	8006038 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006056:	f7fc fffd 	bl	8003054 <HAL_GetREVID>
 800605a:	4603      	mov	r3, r0
 800605c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006060:	4293      	cmp	r3, r2
 8006062:	d817      	bhi.n	8006094 <HAL_RCC_OscConfig+0x3b0>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	2b20      	cmp	r3, #32
 800606a:	d108      	bne.n	800607e <HAL_RCC_OscConfig+0x39a>
 800606c:	4b65      	ldr	r3, [pc, #404]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006074:	4a63      	ldr	r2, [pc, #396]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 8006076:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800607a:	6053      	str	r3, [r2, #4]
 800607c:	e02e      	b.n	80060dc <HAL_RCC_OscConfig+0x3f8>
 800607e:	4b61      	ldr	r3, [pc, #388]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	069b      	lsls	r3, r3, #26
 800608c:	495d      	ldr	r1, [pc, #372]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 800608e:	4313      	orrs	r3, r2
 8006090:	604b      	str	r3, [r1, #4]
 8006092:	e023      	b.n	80060dc <HAL_RCC_OscConfig+0x3f8>
 8006094:	4b5b      	ldr	r3, [pc, #364]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	061b      	lsls	r3, r3, #24
 80060a2:	4958      	ldr	r1, [pc, #352]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60cb      	str	r3, [r1, #12]
 80060a8:	e018      	b.n	80060dc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80060aa:	4b56      	ldr	r3, [pc, #344]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a55      	ldr	r2, [pc, #340]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 80060b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b6:	f7fc ffc1 	bl	800303c <HAL_GetTick>
 80060ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060bc:	e008      	b.n	80060d0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80060be:	f7fc ffbd 	bl	800303c <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d901      	bls.n	80060d0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e212      	b.n	80064f6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060d0:	4b4c      	ldr	r3, [pc, #304]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1f0      	bne.n	80060be <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0308 	and.w	r3, r3, #8
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d036      	beq.n	8006156 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d019      	beq.n	8006124 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060f0:	4b44      	ldr	r3, [pc, #272]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 80060f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f4:	4a43      	ldr	r2, [pc, #268]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 80060f6:	f043 0301 	orr.w	r3, r3, #1
 80060fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060fc:	f7fc ff9e 	bl	800303c <HAL_GetTick>
 8006100:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006104:	f7fc ff9a 	bl	800303c <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e1ef      	b.n	80064f6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006116:	4b3b      	ldr	r3, [pc, #236]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 8006118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0f0      	beq.n	8006104 <HAL_RCC_OscConfig+0x420>
 8006122:	e018      	b.n	8006156 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006124:	4b37      	ldr	r3, [pc, #220]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 8006126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006128:	4a36      	ldr	r2, [pc, #216]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 800612a:	f023 0301 	bic.w	r3, r3, #1
 800612e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006130:	f7fc ff84 	bl	800303c <HAL_GetTick>
 8006134:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006136:	e008      	b.n	800614a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006138:	f7fc ff80 	bl	800303c <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	2b02      	cmp	r3, #2
 8006144:	d901      	bls.n	800614a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e1d5      	b.n	80064f6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800614a:	4b2e      	ldr	r3, [pc, #184]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 800614c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1f0      	bne.n	8006138 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b00      	cmp	r3, #0
 8006160:	d036      	beq.n	80061d0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d019      	beq.n	800619e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800616a:	4b26      	ldr	r3, [pc, #152]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a25      	ldr	r2, [pc, #148]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 8006170:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006174:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006176:	f7fc ff61 	bl	800303c <HAL_GetTick>
 800617a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800617c:	e008      	b.n	8006190 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800617e:	f7fc ff5d 	bl	800303c <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	2b02      	cmp	r3, #2
 800618a:	d901      	bls.n	8006190 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e1b2      	b.n	80064f6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006190:	4b1c      	ldr	r3, [pc, #112]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0f0      	beq.n	800617e <HAL_RCC_OscConfig+0x49a>
 800619c:	e018      	b.n	80061d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800619e:	4b19      	ldr	r3, [pc, #100]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a18      	ldr	r2, [pc, #96]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 80061a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061aa:	f7fc ff47 	bl	800303c <HAL_GetTick>
 80061ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061b0:	e008      	b.n	80061c4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80061b2:	f7fc ff43 	bl	800303c <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d901      	bls.n	80061c4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e198      	b.n	80064f6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061c4:	4b0f      	ldr	r3, [pc, #60]	; (8006204 <HAL_RCC_OscConfig+0x520>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1f0      	bne.n	80061b2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 8085 	beq.w	80062e8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061de:	4b0a      	ldr	r3, [pc, #40]	; (8006208 <HAL_RCC_OscConfig+0x524>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a09      	ldr	r2, [pc, #36]	; (8006208 <HAL_RCC_OscConfig+0x524>)
 80061e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061ea:	f7fc ff27 	bl	800303c <HAL_GetTick>
 80061ee:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061f0:	e00c      	b.n	800620c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80061f2:	f7fc ff23 	bl	800303c <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	2b64      	cmp	r3, #100	; 0x64
 80061fe:	d905      	bls.n	800620c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e178      	b.n	80064f6 <HAL_RCC_OscConfig+0x812>
 8006204:	58024400 	.word	0x58024400
 8006208:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800620c:	4b96      	ldr	r3, [pc, #600]	; (8006468 <HAL_RCC_OscConfig+0x784>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0ec      	beq.n	80061f2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d106      	bne.n	800622e <HAL_RCC_OscConfig+0x54a>
 8006220:	4b92      	ldr	r3, [pc, #584]	; (800646c <HAL_RCC_OscConfig+0x788>)
 8006222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006224:	4a91      	ldr	r2, [pc, #580]	; (800646c <HAL_RCC_OscConfig+0x788>)
 8006226:	f043 0301 	orr.w	r3, r3, #1
 800622a:	6713      	str	r3, [r2, #112]	; 0x70
 800622c:	e02d      	b.n	800628a <HAL_RCC_OscConfig+0x5a6>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10c      	bne.n	8006250 <HAL_RCC_OscConfig+0x56c>
 8006236:	4b8d      	ldr	r3, [pc, #564]	; (800646c <HAL_RCC_OscConfig+0x788>)
 8006238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623a:	4a8c      	ldr	r2, [pc, #560]	; (800646c <HAL_RCC_OscConfig+0x788>)
 800623c:	f023 0301 	bic.w	r3, r3, #1
 8006240:	6713      	str	r3, [r2, #112]	; 0x70
 8006242:	4b8a      	ldr	r3, [pc, #552]	; (800646c <HAL_RCC_OscConfig+0x788>)
 8006244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006246:	4a89      	ldr	r2, [pc, #548]	; (800646c <HAL_RCC_OscConfig+0x788>)
 8006248:	f023 0304 	bic.w	r3, r3, #4
 800624c:	6713      	str	r3, [r2, #112]	; 0x70
 800624e:	e01c      	b.n	800628a <HAL_RCC_OscConfig+0x5a6>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	2b05      	cmp	r3, #5
 8006256:	d10c      	bne.n	8006272 <HAL_RCC_OscConfig+0x58e>
 8006258:	4b84      	ldr	r3, [pc, #528]	; (800646c <HAL_RCC_OscConfig+0x788>)
 800625a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625c:	4a83      	ldr	r2, [pc, #524]	; (800646c <HAL_RCC_OscConfig+0x788>)
 800625e:	f043 0304 	orr.w	r3, r3, #4
 8006262:	6713      	str	r3, [r2, #112]	; 0x70
 8006264:	4b81      	ldr	r3, [pc, #516]	; (800646c <HAL_RCC_OscConfig+0x788>)
 8006266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006268:	4a80      	ldr	r2, [pc, #512]	; (800646c <HAL_RCC_OscConfig+0x788>)
 800626a:	f043 0301 	orr.w	r3, r3, #1
 800626e:	6713      	str	r3, [r2, #112]	; 0x70
 8006270:	e00b      	b.n	800628a <HAL_RCC_OscConfig+0x5a6>
 8006272:	4b7e      	ldr	r3, [pc, #504]	; (800646c <HAL_RCC_OscConfig+0x788>)
 8006274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006276:	4a7d      	ldr	r2, [pc, #500]	; (800646c <HAL_RCC_OscConfig+0x788>)
 8006278:	f023 0301 	bic.w	r3, r3, #1
 800627c:	6713      	str	r3, [r2, #112]	; 0x70
 800627e:	4b7b      	ldr	r3, [pc, #492]	; (800646c <HAL_RCC_OscConfig+0x788>)
 8006280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006282:	4a7a      	ldr	r2, [pc, #488]	; (800646c <HAL_RCC_OscConfig+0x788>)
 8006284:	f023 0304 	bic.w	r3, r3, #4
 8006288:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d015      	beq.n	80062be <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006292:	f7fc fed3 	bl	800303c <HAL_GetTick>
 8006296:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006298:	e00a      	b.n	80062b0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800629a:	f7fc fecf 	bl	800303c <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d901      	bls.n	80062b0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e122      	b.n	80064f6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062b0:	4b6e      	ldr	r3, [pc, #440]	; (800646c <HAL_RCC_OscConfig+0x788>)
 80062b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d0ee      	beq.n	800629a <HAL_RCC_OscConfig+0x5b6>
 80062bc:	e014      	b.n	80062e8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062be:	f7fc febd 	bl	800303c <HAL_GetTick>
 80062c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062c4:	e00a      	b.n	80062dc <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062c6:	f7fc feb9 	bl	800303c <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d901      	bls.n	80062dc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e10c      	b.n	80064f6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062dc:	4b63      	ldr	r3, [pc, #396]	; (800646c <HAL_RCC_OscConfig+0x788>)
 80062de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1ee      	bne.n	80062c6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 8101 	beq.w	80064f4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80062f2:	4b5e      	ldr	r3, [pc, #376]	; (800646c <HAL_RCC_OscConfig+0x788>)
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062fa:	2b18      	cmp	r3, #24
 80062fc:	f000 80bc 	beq.w	8006478 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	2b02      	cmp	r3, #2
 8006306:	f040 8095 	bne.w	8006434 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800630a:	4b58      	ldr	r3, [pc, #352]	; (800646c <HAL_RCC_OscConfig+0x788>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a57      	ldr	r2, [pc, #348]	; (800646c <HAL_RCC_OscConfig+0x788>)
 8006310:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006316:	f7fc fe91 	bl	800303c <HAL_GetTick>
 800631a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800631c:	e008      	b.n	8006330 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800631e:	f7fc fe8d 	bl	800303c <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d901      	bls.n	8006330 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e0e2      	b.n	80064f6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006330:	4b4e      	ldr	r3, [pc, #312]	; (800646c <HAL_RCC_OscConfig+0x788>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1f0      	bne.n	800631e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800633c:	4b4b      	ldr	r3, [pc, #300]	; (800646c <HAL_RCC_OscConfig+0x788>)
 800633e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006340:	4b4b      	ldr	r3, [pc, #300]	; (8006470 <HAL_RCC_OscConfig+0x78c>)
 8006342:	4013      	ands	r3, r2
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800634c:	0112      	lsls	r2, r2, #4
 800634e:	430a      	orrs	r2, r1
 8006350:	4946      	ldr	r1, [pc, #280]	; (800646c <HAL_RCC_OscConfig+0x788>)
 8006352:	4313      	orrs	r3, r2
 8006354:	628b      	str	r3, [r1, #40]	; 0x28
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635a:	3b01      	subs	r3, #1
 800635c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006364:	3b01      	subs	r3, #1
 8006366:	025b      	lsls	r3, r3, #9
 8006368:	b29b      	uxth	r3, r3
 800636a:	431a      	orrs	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006370:	3b01      	subs	r3, #1
 8006372:	041b      	lsls	r3, r3, #16
 8006374:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006378:	431a      	orrs	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637e:	3b01      	subs	r3, #1
 8006380:	061b      	lsls	r3, r3, #24
 8006382:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006386:	4939      	ldr	r1, [pc, #228]	; (800646c <HAL_RCC_OscConfig+0x788>)
 8006388:	4313      	orrs	r3, r2
 800638a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800638c:	4b37      	ldr	r3, [pc, #220]	; (800646c <HAL_RCC_OscConfig+0x788>)
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	4a36      	ldr	r2, [pc, #216]	; (800646c <HAL_RCC_OscConfig+0x788>)
 8006392:	f023 0301 	bic.w	r3, r3, #1
 8006396:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006398:	4b34      	ldr	r3, [pc, #208]	; (800646c <HAL_RCC_OscConfig+0x788>)
 800639a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800639c:	4b35      	ldr	r3, [pc, #212]	; (8006474 <HAL_RCC_OscConfig+0x790>)
 800639e:	4013      	ands	r3, r2
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80063a4:	00d2      	lsls	r2, r2, #3
 80063a6:	4931      	ldr	r1, [pc, #196]	; (800646c <HAL_RCC_OscConfig+0x788>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80063ac:	4b2f      	ldr	r3, [pc, #188]	; (800646c <HAL_RCC_OscConfig+0x788>)
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	f023 020c 	bic.w	r2, r3, #12
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b8:	492c      	ldr	r1, [pc, #176]	; (800646c <HAL_RCC_OscConfig+0x788>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80063be:	4b2b      	ldr	r3, [pc, #172]	; (800646c <HAL_RCC_OscConfig+0x788>)
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	f023 0202 	bic.w	r2, r3, #2
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ca:	4928      	ldr	r1, [pc, #160]	; (800646c <HAL_RCC_OscConfig+0x788>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80063d0:	4b26      	ldr	r3, [pc, #152]	; (800646c <HAL_RCC_OscConfig+0x788>)
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	4a25      	ldr	r2, [pc, #148]	; (800646c <HAL_RCC_OscConfig+0x788>)
 80063d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063dc:	4b23      	ldr	r3, [pc, #140]	; (800646c <HAL_RCC_OscConfig+0x788>)
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	4a22      	ldr	r2, [pc, #136]	; (800646c <HAL_RCC_OscConfig+0x788>)
 80063e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80063e8:	4b20      	ldr	r3, [pc, #128]	; (800646c <HAL_RCC_OscConfig+0x788>)
 80063ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ec:	4a1f      	ldr	r2, [pc, #124]	; (800646c <HAL_RCC_OscConfig+0x788>)
 80063ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80063f4:	4b1d      	ldr	r3, [pc, #116]	; (800646c <HAL_RCC_OscConfig+0x788>)
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	4a1c      	ldr	r2, [pc, #112]	; (800646c <HAL_RCC_OscConfig+0x788>)
 80063fa:	f043 0301 	orr.w	r3, r3, #1
 80063fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006400:	4b1a      	ldr	r3, [pc, #104]	; (800646c <HAL_RCC_OscConfig+0x788>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a19      	ldr	r2, [pc, #100]	; (800646c <HAL_RCC_OscConfig+0x788>)
 8006406:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800640a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800640c:	f7fc fe16 	bl	800303c <HAL_GetTick>
 8006410:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006412:	e008      	b.n	8006426 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006414:	f7fc fe12 	bl	800303c <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e067      	b.n	80064f6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006426:	4b11      	ldr	r3, [pc, #68]	; (800646c <HAL_RCC_OscConfig+0x788>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0f0      	beq.n	8006414 <HAL_RCC_OscConfig+0x730>
 8006432:	e05f      	b.n	80064f4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006434:	4b0d      	ldr	r3, [pc, #52]	; (800646c <HAL_RCC_OscConfig+0x788>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a0c      	ldr	r2, [pc, #48]	; (800646c <HAL_RCC_OscConfig+0x788>)
 800643a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800643e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006440:	f7fc fdfc 	bl	800303c <HAL_GetTick>
 8006444:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006446:	e008      	b.n	800645a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006448:	f7fc fdf8 	bl	800303c <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b02      	cmp	r3, #2
 8006454:	d901      	bls.n	800645a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e04d      	b.n	80064f6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800645a:	4b04      	ldr	r3, [pc, #16]	; (800646c <HAL_RCC_OscConfig+0x788>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1f0      	bne.n	8006448 <HAL_RCC_OscConfig+0x764>
 8006466:	e045      	b.n	80064f4 <HAL_RCC_OscConfig+0x810>
 8006468:	58024800 	.word	0x58024800
 800646c:	58024400 	.word	0x58024400
 8006470:	fffffc0c 	.word	0xfffffc0c
 8006474:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006478:	4b21      	ldr	r3, [pc, #132]	; (8006500 <HAL_RCC_OscConfig+0x81c>)
 800647a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800647e:	4b20      	ldr	r3, [pc, #128]	; (8006500 <HAL_RCC_OscConfig+0x81c>)
 8006480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006482:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	2b01      	cmp	r3, #1
 800648a:	d031      	beq.n	80064f0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	f003 0203 	and.w	r2, r3, #3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006496:	429a      	cmp	r2, r3
 8006498:	d12a      	bne.n	80064f0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	091b      	lsrs	r3, r3, #4
 800649e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d122      	bne.n	80064f0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d11a      	bne.n	80064f0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	0a5b      	lsrs	r3, r3, #9
 80064be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d111      	bne.n	80064f0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	0c1b      	lsrs	r3, r3, #16
 80064d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064da:	429a      	cmp	r2, r3
 80064dc:	d108      	bne.n	80064f0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	0e1b      	lsrs	r3, r3, #24
 80064e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ea:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d001      	beq.n	80064f4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e000      	b.n	80064f6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3730      	adds	r7, #48	; 0x30
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	58024400 	.word	0x58024400

08006504 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e19c      	b.n	8006852 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006518:	4b8a      	ldr	r3, [pc, #552]	; (8006744 <HAL_RCC_ClockConfig+0x240>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 030f 	and.w	r3, r3, #15
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d910      	bls.n	8006548 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006526:	4b87      	ldr	r3, [pc, #540]	; (8006744 <HAL_RCC_ClockConfig+0x240>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f023 020f 	bic.w	r2, r3, #15
 800652e:	4985      	ldr	r1, [pc, #532]	; (8006744 <HAL_RCC_ClockConfig+0x240>)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	4313      	orrs	r3, r2
 8006534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006536:	4b83      	ldr	r3, [pc, #524]	; (8006744 <HAL_RCC_ClockConfig+0x240>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 030f 	and.w	r3, r3, #15
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	429a      	cmp	r2, r3
 8006542:	d001      	beq.n	8006548 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e184      	b.n	8006852 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0304 	and.w	r3, r3, #4
 8006550:	2b00      	cmp	r3, #0
 8006552:	d010      	beq.n	8006576 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	691a      	ldr	r2, [r3, #16]
 8006558:	4b7b      	ldr	r3, [pc, #492]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006560:	429a      	cmp	r2, r3
 8006562:	d908      	bls.n	8006576 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006564:	4b78      	ldr	r3, [pc, #480]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	4975      	ldr	r1, [pc, #468]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 8006572:	4313      	orrs	r3, r2
 8006574:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0308 	and.w	r3, r3, #8
 800657e:	2b00      	cmp	r3, #0
 8006580:	d010      	beq.n	80065a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	695a      	ldr	r2, [r3, #20]
 8006586:	4b70      	ldr	r3, [pc, #448]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800658e:	429a      	cmp	r2, r3
 8006590:	d908      	bls.n	80065a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006592:	4b6d      	ldr	r3, [pc, #436]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	496a      	ldr	r1, [pc, #424]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0310 	and.w	r3, r3, #16
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d010      	beq.n	80065d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	699a      	ldr	r2, [r3, #24]
 80065b4:	4b64      	ldr	r3, [pc, #400]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 80065b6:	69db      	ldr	r3, [r3, #28]
 80065b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065bc:	429a      	cmp	r2, r3
 80065be:	d908      	bls.n	80065d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065c0:	4b61      	ldr	r3, [pc, #388]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	495e      	ldr	r1, [pc, #376]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0320 	and.w	r3, r3, #32
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d010      	beq.n	8006600 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69da      	ldr	r2, [r3, #28]
 80065e2:	4b59      	ldr	r3, [pc, #356]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d908      	bls.n	8006600 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80065ee:	4b56      	ldr	r3, [pc, #344]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	4953      	ldr	r1, [pc, #332]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	2b00      	cmp	r3, #0
 800660a:	d010      	beq.n	800662e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68da      	ldr	r2, [r3, #12]
 8006610:	4b4d      	ldr	r3, [pc, #308]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	f003 030f 	and.w	r3, r3, #15
 8006618:	429a      	cmp	r2, r3
 800661a:	d908      	bls.n	800662e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800661c:	4b4a      	ldr	r3, [pc, #296]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	f023 020f 	bic.w	r2, r3, #15
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	4947      	ldr	r1, [pc, #284]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 800662a:	4313      	orrs	r3, r2
 800662c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d055      	beq.n	80066e6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800663a:	4b43      	ldr	r3, [pc, #268]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	4940      	ldr	r1, [pc, #256]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 8006648:	4313      	orrs	r3, r2
 800664a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	2b02      	cmp	r3, #2
 8006652:	d107      	bne.n	8006664 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006654:	4b3c      	ldr	r3, [pc, #240]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d121      	bne.n	80066a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e0f6      	b.n	8006852 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	2b03      	cmp	r3, #3
 800666a:	d107      	bne.n	800667c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800666c:	4b36      	ldr	r3, [pc, #216]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d115      	bne.n	80066a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e0ea      	b.n	8006852 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d107      	bne.n	8006694 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006684:	4b30      	ldr	r3, [pc, #192]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800668c:	2b00      	cmp	r3, #0
 800668e:	d109      	bne.n	80066a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e0de      	b.n	8006852 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006694:	4b2c      	ldr	r3, [pc, #176]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0304 	and.w	r3, r3, #4
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e0d6      	b.n	8006852 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066a4:	4b28      	ldr	r3, [pc, #160]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	f023 0207 	bic.w	r2, r3, #7
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	4925      	ldr	r1, [pc, #148]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b6:	f7fc fcc1 	bl	800303c <HAL_GetTick>
 80066ba:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066bc:	e00a      	b.n	80066d4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066be:	f7fc fcbd 	bl	800303c <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d901      	bls.n	80066d4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e0be      	b.n	8006852 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066d4:	4b1c      	ldr	r3, [pc, #112]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d1eb      	bne.n	80066be <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d010      	beq.n	8006714 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68da      	ldr	r2, [r3, #12]
 80066f6:	4b14      	ldr	r3, [pc, #80]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	f003 030f 	and.w	r3, r3, #15
 80066fe:	429a      	cmp	r2, r3
 8006700:	d208      	bcs.n	8006714 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006702:	4b11      	ldr	r3, [pc, #68]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	f023 020f 	bic.w	r2, r3, #15
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	490e      	ldr	r1, [pc, #56]	; (8006748 <HAL_RCC_ClockConfig+0x244>)
 8006710:	4313      	orrs	r3, r2
 8006712:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006714:	4b0b      	ldr	r3, [pc, #44]	; (8006744 <HAL_RCC_ClockConfig+0x240>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 030f 	and.w	r3, r3, #15
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	429a      	cmp	r2, r3
 8006720:	d214      	bcs.n	800674c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006722:	4b08      	ldr	r3, [pc, #32]	; (8006744 <HAL_RCC_ClockConfig+0x240>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f023 020f 	bic.w	r2, r3, #15
 800672a:	4906      	ldr	r1, [pc, #24]	; (8006744 <HAL_RCC_ClockConfig+0x240>)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	4313      	orrs	r3, r2
 8006730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006732:	4b04      	ldr	r3, [pc, #16]	; (8006744 <HAL_RCC_ClockConfig+0x240>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 030f 	and.w	r3, r3, #15
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	429a      	cmp	r2, r3
 800673e:	d005      	beq.n	800674c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e086      	b.n	8006852 <HAL_RCC_ClockConfig+0x34e>
 8006744:	52002000 	.word	0x52002000
 8006748:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0304 	and.w	r3, r3, #4
 8006754:	2b00      	cmp	r3, #0
 8006756:	d010      	beq.n	800677a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	4b3f      	ldr	r3, [pc, #252]	; (800685c <HAL_RCC_ClockConfig+0x358>)
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006764:	429a      	cmp	r2, r3
 8006766:	d208      	bcs.n	800677a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006768:	4b3c      	ldr	r3, [pc, #240]	; (800685c <HAL_RCC_ClockConfig+0x358>)
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	4939      	ldr	r1, [pc, #228]	; (800685c <HAL_RCC_ClockConfig+0x358>)
 8006776:	4313      	orrs	r3, r2
 8006778:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0308 	and.w	r3, r3, #8
 8006782:	2b00      	cmp	r3, #0
 8006784:	d010      	beq.n	80067a8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	695a      	ldr	r2, [r3, #20]
 800678a:	4b34      	ldr	r3, [pc, #208]	; (800685c <HAL_RCC_ClockConfig+0x358>)
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006792:	429a      	cmp	r2, r3
 8006794:	d208      	bcs.n	80067a8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006796:	4b31      	ldr	r3, [pc, #196]	; (800685c <HAL_RCC_ClockConfig+0x358>)
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	492e      	ldr	r1, [pc, #184]	; (800685c <HAL_RCC_ClockConfig+0x358>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0310 	and.w	r3, r3, #16
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d010      	beq.n	80067d6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	699a      	ldr	r2, [r3, #24]
 80067b8:	4b28      	ldr	r3, [pc, #160]	; (800685c <HAL_RCC_ClockConfig+0x358>)
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d208      	bcs.n	80067d6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067c4:	4b25      	ldr	r3, [pc, #148]	; (800685c <HAL_RCC_ClockConfig+0x358>)
 80067c6:	69db      	ldr	r3, [r3, #28]
 80067c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	4922      	ldr	r1, [pc, #136]	; (800685c <HAL_RCC_ClockConfig+0x358>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0320 	and.w	r3, r3, #32
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d010      	beq.n	8006804 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	69da      	ldr	r2, [r3, #28]
 80067e6:	4b1d      	ldr	r3, [pc, #116]	; (800685c <HAL_RCC_ClockConfig+0x358>)
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d208      	bcs.n	8006804 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80067f2:	4b1a      	ldr	r3, [pc, #104]	; (800685c <HAL_RCC_ClockConfig+0x358>)
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	4917      	ldr	r1, [pc, #92]	; (800685c <HAL_RCC_ClockConfig+0x358>)
 8006800:	4313      	orrs	r3, r2
 8006802:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006804:	f000 f834 	bl	8006870 <HAL_RCC_GetSysClockFreq>
 8006808:	4602      	mov	r2, r0
 800680a:	4b14      	ldr	r3, [pc, #80]	; (800685c <HAL_RCC_ClockConfig+0x358>)
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	0a1b      	lsrs	r3, r3, #8
 8006810:	f003 030f 	and.w	r3, r3, #15
 8006814:	4912      	ldr	r1, [pc, #72]	; (8006860 <HAL_RCC_ClockConfig+0x35c>)
 8006816:	5ccb      	ldrb	r3, [r1, r3]
 8006818:	f003 031f 	and.w	r3, r3, #31
 800681c:	fa22 f303 	lsr.w	r3, r2, r3
 8006820:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006822:	4b0e      	ldr	r3, [pc, #56]	; (800685c <HAL_RCC_ClockConfig+0x358>)
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	f003 030f 	and.w	r3, r3, #15
 800682a:	4a0d      	ldr	r2, [pc, #52]	; (8006860 <HAL_RCC_ClockConfig+0x35c>)
 800682c:	5cd3      	ldrb	r3, [r2, r3]
 800682e:	f003 031f 	and.w	r3, r3, #31
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	fa22 f303 	lsr.w	r3, r2, r3
 8006838:	4a0a      	ldr	r2, [pc, #40]	; (8006864 <HAL_RCC_ClockConfig+0x360>)
 800683a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800683c:	4a0a      	ldr	r2, [pc, #40]	; (8006868 <HAL_RCC_ClockConfig+0x364>)
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006842:	4b0a      	ldr	r3, [pc, #40]	; (800686c <HAL_RCC_ClockConfig+0x368>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4618      	mov	r0, r3
 8006848:	f7fc fbae 	bl	8002fa8 <HAL_InitTick>
 800684c:	4603      	mov	r3, r0
 800684e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006850:	7bfb      	ldrb	r3, [r7, #15]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3718      	adds	r7, #24
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	58024400 	.word	0x58024400
 8006860:	0800f63c 	.word	0x0800f63c
 8006864:	2000000c 	.word	0x2000000c
 8006868:	20000008 	.word	0x20000008
 800686c:	20000010 	.word	0x20000010

08006870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006870:	b480      	push	{r7}
 8006872:	b089      	sub	sp, #36	; 0x24
 8006874:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006876:	4bb3      	ldr	r3, [pc, #716]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800687e:	2b18      	cmp	r3, #24
 8006880:	f200 8155 	bhi.w	8006b2e <HAL_RCC_GetSysClockFreq+0x2be>
 8006884:	a201      	add	r2, pc, #4	; (adr r2, 800688c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688a:	bf00      	nop
 800688c:	080068f1 	.word	0x080068f1
 8006890:	08006b2f 	.word	0x08006b2f
 8006894:	08006b2f 	.word	0x08006b2f
 8006898:	08006b2f 	.word	0x08006b2f
 800689c:	08006b2f 	.word	0x08006b2f
 80068a0:	08006b2f 	.word	0x08006b2f
 80068a4:	08006b2f 	.word	0x08006b2f
 80068a8:	08006b2f 	.word	0x08006b2f
 80068ac:	08006917 	.word	0x08006917
 80068b0:	08006b2f 	.word	0x08006b2f
 80068b4:	08006b2f 	.word	0x08006b2f
 80068b8:	08006b2f 	.word	0x08006b2f
 80068bc:	08006b2f 	.word	0x08006b2f
 80068c0:	08006b2f 	.word	0x08006b2f
 80068c4:	08006b2f 	.word	0x08006b2f
 80068c8:	08006b2f 	.word	0x08006b2f
 80068cc:	0800691d 	.word	0x0800691d
 80068d0:	08006b2f 	.word	0x08006b2f
 80068d4:	08006b2f 	.word	0x08006b2f
 80068d8:	08006b2f 	.word	0x08006b2f
 80068dc:	08006b2f 	.word	0x08006b2f
 80068e0:	08006b2f 	.word	0x08006b2f
 80068e4:	08006b2f 	.word	0x08006b2f
 80068e8:	08006b2f 	.word	0x08006b2f
 80068ec:	08006923 	.word	0x08006923
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068f0:	4b94      	ldr	r3, [pc, #592]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0320 	and.w	r3, r3, #32
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d009      	beq.n	8006910 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068fc:	4b91      	ldr	r3, [pc, #580]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	08db      	lsrs	r3, r3, #3
 8006902:	f003 0303 	and.w	r3, r3, #3
 8006906:	4a90      	ldr	r2, [pc, #576]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006908:	fa22 f303 	lsr.w	r3, r2, r3
 800690c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800690e:	e111      	b.n	8006b34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006910:	4b8d      	ldr	r3, [pc, #564]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006912:	61bb      	str	r3, [r7, #24]
    break;
 8006914:	e10e      	b.n	8006b34 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006916:	4b8d      	ldr	r3, [pc, #564]	; (8006b4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006918:	61bb      	str	r3, [r7, #24]
    break;
 800691a:	e10b      	b.n	8006b34 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800691c:	4b8c      	ldr	r3, [pc, #560]	; (8006b50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800691e:	61bb      	str	r3, [r7, #24]
    break;
 8006920:	e108      	b.n	8006b34 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006922:	4b88      	ldr	r3, [pc, #544]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006926:	f003 0303 	and.w	r3, r3, #3
 800692a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800692c:	4b85      	ldr	r3, [pc, #532]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800692e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006930:	091b      	lsrs	r3, r3, #4
 8006932:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006936:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006938:	4b82      	ldr	r3, [pc, #520]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006942:	4b80      	ldr	r3, [pc, #512]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006946:	08db      	lsrs	r3, r3, #3
 8006948:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	fb02 f303 	mul.w	r3, r2, r3
 8006952:	ee07 3a90 	vmov	s15, r3
 8006956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 80e1 	beq.w	8006b28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2b02      	cmp	r3, #2
 800696a:	f000 8083 	beq.w	8006a74 <HAL_RCC_GetSysClockFreq+0x204>
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	2b02      	cmp	r3, #2
 8006972:	f200 80a1 	bhi.w	8006ab8 <HAL_RCC_GetSysClockFreq+0x248>
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d003      	beq.n	8006984 <HAL_RCC_GetSysClockFreq+0x114>
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d056      	beq.n	8006a30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006982:	e099      	b.n	8006ab8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006984:	4b6f      	ldr	r3, [pc, #444]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0320 	and.w	r3, r3, #32
 800698c:	2b00      	cmp	r3, #0
 800698e:	d02d      	beq.n	80069ec <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006990:	4b6c      	ldr	r3, [pc, #432]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	08db      	lsrs	r3, r3, #3
 8006996:	f003 0303 	and.w	r3, r3, #3
 800699a:	4a6b      	ldr	r2, [pc, #428]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800699c:	fa22 f303 	lsr.w	r3, r2, r3
 80069a0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	ee07 3a90 	vmov	s15, r3
 80069a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	ee07 3a90 	vmov	s15, r3
 80069b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ba:	4b62      	ldr	r3, [pc, #392]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069c2:	ee07 3a90 	vmov	s15, r3
 80069c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80069ce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80069ea:	e087      	b.n	8006afc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	ee07 3a90 	vmov	s15, r3
 80069f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006b58 <HAL_RCC_GetSysClockFreq+0x2e8>
 80069fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069fe:	4b51      	ldr	r3, [pc, #324]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a06:	ee07 3a90 	vmov	s15, r3
 8006a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a12:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a2e:	e065      	b.n	8006afc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	ee07 3a90 	vmov	s15, r3
 8006a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a3a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006b5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a42:	4b40      	ldr	r3, [pc, #256]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a4a:	ee07 3a90 	vmov	s15, r3
 8006a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a52:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a56:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a72:	e043      	b.n	8006afc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	ee07 3a90 	vmov	s15, r3
 8006a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a7e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006b60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a86:	4b2f      	ldr	r3, [pc, #188]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a8e:	ee07 3a90 	vmov	s15, r3
 8006a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a96:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a9a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ab6:	e021      	b.n	8006afc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	ee07 3a90 	vmov	s15, r3
 8006abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ac2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006b5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aca:	4b1e      	ldr	r3, [pc, #120]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad2:	ee07 3a90 	vmov	s15, r3
 8006ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ada:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ade:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006afa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006afc:	4b11      	ldr	r3, [pc, #68]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b00:	0a5b      	lsrs	r3, r3, #9
 8006b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b06:	3301      	adds	r3, #1
 8006b08:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	ee07 3a90 	vmov	s15, r3
 8006b10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b14:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b20:	ee17 3a90 	vmov	r3, s15
 8006b24:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006b26:	e005      	b.n	8006b34 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	61bb      	str	r3, [r7, #24]
    break;
 8006b2c:	e002      	b.n	8006b34 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006b2e:	4b07      	ldr	r3, [pc, #28]	; (8006b4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b30:	61bb      	str	r3, [r7, #24]
    break;
 8006b32:	bf00      	nop
  }

  return sysclockfreq;
 8006b34:	69bb      	ldr	r3, [r7, #24]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3724      	adds	r7, #36	; 0x24
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	58024400 	.word	0x58024400
 8006b48:	03d09000 	.word	0x03d09000
 8006b4c:	003d0900 	.word	0x003d0900
 8006b50:	02dc6c00 	.word	0x02dc6c00
 8006b54:	46000000 	.word	0x46000000
 8006b58:	4c742400 	.word	0x4c742400
 8006b5c:	4a742400 	.word	0x4a742400
 8006b60:	4c371b00 	.word	0x4c371b00

08006b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006b6a:	f7ff fe81 	bl	8006870 <HAL_RCC_GetSysClockFreq>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	4b10      	ldr	r3, [pc, #64]	; (8006bb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	0a1b      	lsrs	r3, r3, #8
 8006b76:	f003 030f 	and.w	r3, r3, #15
 8006b7a:	490f      	ldr	r1, [pc, #60]	; (8006bb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006b7c:	5ccb      	ldrb	r3, [r1, r3]
 8006b7e:	f003 031f 	and.w	r3, r3, #31
 8006b82:	fa22 f303 	lsr.w	r3, r2, r3
 8006b86:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b88:	4b0a      	ldr	r3, [pc, #40]	; (8006bb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	f003 030f 	and.w	r3, r3, #15
 8006b90:	4a09      	ldr	r2, [pc, #36]	; (8006bb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006b92:	5cd3      	ldrb	r3, [r2, r3]
 8006b94:	f003 031f 	and.w	r3, r3, #31
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b9e:	4a07      	ldr	r2, [pc, #28]	; (8006bbc <HAL_RCC_GetHCLKFreq+0x58>)
 8006ba0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ba2:	4a07      	ldr	r2, [pc, #28]	; (8006bc0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006ba8:	4b04      	ldr	r3, [pc, #16]	; (8006bbc <HAL_RCC_GetHCLKFreq+0x58>)
 8006baa:	681b      	ldr	r3, [r3, #0]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	58024400 	.word	0x58024400
 8006bb8:	0800f63c 	.word	0x0800f63c
 8006bbc:	2000000c 	.word	0x2000000c
 8006bc0:	20000008 	.word	0x20000008

08006bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006bc8:	f7ff ffcc 	bl	8006b64 <HAL_RCC_GetHCLKFreq>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	091b      	lsrs	r3, r3, #4
 8006bd4:	f003 0307 	and.w	r3, r3, #7
 8006bd8:	4904      	ldr	r1, [pc, #16]	; (8006bec <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bda:	5ccb      	ldrb	r3, [r1, r3]
 8006bdc:	f003 031f 	and.w	r3, r3, #31
 8006be0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	58024400 	.word	0x58024400
 8006bec:	0800f63c 	.word	0x0800f63c

08006bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006bf4:	f7ff ffb6 	bl	8006b64 <HAL_RCC_GetHCLKFreq>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	4b06      	ldr	r3, [pc, #24]	; (8006c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	0a1b      	lsrs	r3, r3, #8
 8006c00:	f003 0307 	and.w	r3, r3, #7
 8006c04:	4904      	ldr	r1, [pc, #16]	; (8006c18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c06:	5ccb      	ldrb	r3, [r1, r3]
 8006c08:	f003 031f 	and.w	r3, r3, #31
 8006c0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	58024400 	.word	0x58024400
 8006c18:	0800f63c 	.word	0x0800f63c

08006c1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c24:	2300      	movs	r3, #0
 8006c26:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c28:	2300      	movs	r3, #0
 8006c2a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d03f      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c40:	d02a      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006c42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c46:	d824      	bhi.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006c48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c4c:	d018      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006c4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c52:	d81e      	bhi.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c5c:	d007      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006c5e:	e018      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c60:	4bab      	ldr	r3, [pc, #684]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c64:	4aaa      	ldr	r2, [pc, #680]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c6c:	e015      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	3304      	adds	r3, #4
 8006c72:	2102      	movs	r1, #2
 8006c74:	4618      	mov	r0, r3
 8006c76:	f001 f9cf 	bl	8008018 <RCCEx_PLL2_Config>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c7e:	e00c      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3324      	adds	r3, #36	; 0x24
 8006c84:	2102      	movs	r1, #2
 8006c86:	4618      	mov	r0, r3
 8006c88:	f001 fa78 	bl	800817c <RCCEx_PLL3_Config>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c90:	e003      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	75fb      	strb	r3, [r7, #23]
      break;
 8006c96:	e000      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006c98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c9a:	7dfb      	ldrb	r3, [r7, #23]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d109      	bne.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ca0:	4b9b      	ldr	r3, [pc, #620]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cac:	4998      	ldr	r1, [pc, #608]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	650b      	str	r3, [r1, #80]	; 0x50
 8006cb2:	e001      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb4:	7dfb      	ldrb	r3, [r7, #23]
 8006cb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d03d      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc8:	2b04      	cmp	r3, #4
 8006cca:	d826      	bhi.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006ccc:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd2:	bf00      	nop
 8006cd4:	08006ce9 	.word	0x08006ce9
 8006cd8:	08006cf7 	.word	0x08006cf7
 8006cdc:	08006d09 	.word	0x08006d09
 8006ce0:	08006d21 	.word	0x08006d21
 8006ce4:	08006d21 	.word	0x08006d21
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ce8:	4b89      	ldr	r3, [pc, #548]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cec:	4a88      	ldr	r2, [pc, #544]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006cf4:	e015      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f001 f98b 	bl	8008018 <RCCEx_PLL2_Config>
 8006d02:	4603      	mov	r3, r0
 8006d04:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d06:	e00c      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	3324      	adds	r3, #36	; 0x24
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f001 fa34 	bl	800817c <RCCEx_PLL3_Config>
 8006d14:	4603      	mov	r3, r0
 8006d16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d18:	e003      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d1e:	e000      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006d20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d22:	7dfb      	ldrb	r3, [r7, #23]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d109      	bne.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d28:	4b79      	ldr	r3, [pc, #484]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d2c:	f023 0207 	bic.w	r2, r3, #7
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d34:	4976      	ldr	r1, [pc, #472]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	650b      	str	r3, [r1, #80]	; 0x50
 8006d3a:	e001      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d3c:	7dfb      	ldrb	r3, [r7, #23]
 8006d3e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d042      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d54:	d02b      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d5a:	d825      	bhi.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006d5c:	2bc0      	cmp	r3, #192	; 0xc0
 8006d5e:	d028      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006d60:	2bc0      	cmp	r3, #192	; 0xc0
 8006d62:	d821      	bhi.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006d64:	2b80      	cmp	r3, #128	; 0x80
 8006d66:	d016      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006d68:	2b80      	cmp	r3, #128	; 0x80
 8006d6a:	d81d      	bhi.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d002      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006d70:	2b40      	cmp	r3, #64	; 0x40
 8006d72:	d007      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006d74:	e018      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d76:	4b66      	ldr	r3, [pc, #408]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7a:	4a65      	ldr	r2, [pc, #404]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006d82:	e017      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3304      	adds	r3, #4
 8006d88:	2100      	movs	r1, #0
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f001 f944 	bl	8008018 <RCCEx_PLL2_Config>
 8006d90:	4603      	mov	r3, r0
 8006d92:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006d94:	e00e      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	3324      	adds	r3, #36	; 0x24
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f001 f9ed 	bl	800817c <RCCEx_PLL3_Config>
 8006da2:	4603      	mov	r3, r0
 8006da4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006da6:	e005      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	75fb      	strb	r3, [r7, #23]
      break;
 8006dac:	e002      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006dae:	bf00      	nop
 8006db0:	e000      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006db2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006db4:	7dfb      	ldrb	r3, [r7, #23]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d109      	bne.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006dba:	4b55      	ldr	r3, [pc, #340]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dbe:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc6:	4952      	ldr	r1, [pc, #328]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	650b      	str	r3, [r1, #80]	; 0x50
 8006dcc:	e001      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dce:	7dfb      	ldrb	r3, [r7, #23]
 8006dd0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d049      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006de4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006de8:	d030      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006dea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006dee:	d82a      	bhi.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006df0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006df4:	d02c      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006df6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006dfa:	d824      	bhi.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e00:	d018      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e06:	d81e      	bhi.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006e0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e10:	d007      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006e12:	e018      	b.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e14:	4b3e      	ldr	r3, [pc, #248]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e18:	4a3d      	ldr	r2, [pc, #244]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e20:	e017      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	3304      	adds	r3, #4
 8006e26:	2100      	movs	r1, #0
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f001 f8f5 	bl	8008018 <RCCEx_PLL2_Config>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006e32:	e00e      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	3324      	adds	r3, #36	; 0x24
 8006e38:	2100      	movs	r1, #0
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f001 f99e 	bl	800817c <RCCEx_PLL3_Config>
 8006e40:	4603      	mov	r3, r0
 8006e42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e44:	e005      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	75fb      	strb	r3, [r7, #23]
      break;
 8006e4a:	e002      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006e4c:	bf00      	nop
 8006e4e:	e000      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006e50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e52:	7dfb      	ldrb	r3, [r7, #23]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10a      	bne.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006e58:	4b2d      	ldr	r3, [pc, #180]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e5c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e66:	492a      	ldr	r1, [pc, #168]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	658b      	str	r3, [r1, #88]	; 0x58
 8006e6c:	e001      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
 8006e70:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d04c      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e88:	d030      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006e8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e8e:	d82a      	bhi.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006e90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e94:	d02c      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006e96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e9a:	d824      	bhi.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006e9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ea0:	d018      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006ea2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ea6:	d81e      	bhi.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006eb0:	d007      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006eb2:	e018      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eb4:	4b16      	ldr	r3, [pc, #88]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	4a15      	ldr	r2, [pc, #84]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ebe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ec0:	e017      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f001 f8a5 	bl	8008018 <RCCEx_PLL2_Config>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006ed2:	e00e      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	3324      	adds	r3, #36	; 0x24
 8006ed8:	2100      	movs	r1, #0
 8006eda:	4618      	mov	r0, r3
 8006edc:	f001 f94e 	bl	800817c <RCCEx_PLL3_Config>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ee4:	e005      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8006eea:	e002      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006eec:	bf00      	nop
 8006eee:	e000      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ef2:	7dfb      	ldrb	r3, [r7, #23]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10d      	bne.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006ef8:	4b05      	ldr	r3, [pc, #20]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006efc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f06:	4902      	ldr	r1, [pc, #8]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	658b      	str	r3, [r1, #88]	; 0x58
 8006f0c:	e004      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006f0e:	bf00      	nop
 8006f10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f14:	7dfb      	ldrb	r3, [r7, #23]
 8006f16:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d032      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f28:	2b30      	cmp	r3, #48	; 0x30
 8006f2a:	d01c      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006f2c:	2b30      	cmp	r3, #48	; 0x30
 8006f2e:	d817      	bhi.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006f30:	2b20      	cmp	r3, #32
 8006f32:	d00c      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006f34:	2b20      	cmp	r3, #32
 8006f36:	d813      	bhi.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d016      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006f3c:	2b10      	cmp	r3, #16
 8006f3e:	d10f      	bne.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f40:	4baf      	ldr	r3, [pc, #700]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f44:	4aae      	ldr	r2, [pc, #696]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006f4c:	e00e      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3304      	adds	r3, #4
 8006f52:	2102      	movs	r1, #2
 8006f54:	4618      	mov	r0, r3
 8006f56:	f001 f85f 	bl	8008018 <RCCEx_PLL2_Config>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006f5e:	e005      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	75fb      	strb	r3, [r7, #23]
      break;
 8006f64:	e002      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006f66:	bf00      	nop
 8006f68:	e000      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006f6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f6c:	7dfb      	ldrb	r3, [r7, #23]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d109      	bne.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006f72:	4ba3      	ldr	r3, [pc, #652]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f76:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f7e:	49a0      	ldr	r1, [pc, #640]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f80:	4313      	orrs	r3, r2
 8006f82:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f84:	e001      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f86:	7dfb      	ldrb	r3, [r7, #23]
 8006f88:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d047      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f9e:	d030      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fa4:	d82a      	bhi.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006fa6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006faa:	d02c      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006fac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fb0:	d824      	bhi.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fb6:	d018      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fbc:	d81e      	bhi.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc6:	d007      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006fc8:	e018      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fca:	4b8d      	ldr	r3, [pc, #564]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fce:	4a8c      	ldr	r2, [pc, #560]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006fd6:	e017      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	3304      	adds	r3, #4
 8006fdc:	2100      	movs	r1, #0
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f001 f81a 	bl	8008018 <RCCEx_PLL2_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006fe8:	e00e      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3324      	adds	r3, #36	; 0x24
 8006fee:	2100      	movs	r1, #0
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f001 f8c3 	bl	800817c <RCCEx_PLL3_Config>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006ffa:	e005      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8007000:	e002      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007002:	bf00      	nop
 8007004:	e000      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007006:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007008:	7dfb      	ldrb	r3, [r7, #23]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d109      	bne.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800700e:	4b7c      	ldr	r3, [pc, #496]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007012:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800701a:	4979      	ldr	r1, [pc, #484]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800701c:	4313      	orrs	r3, r2
 800701e:	650b      	str	r3, [r1, #80]	; 0x50
 8007020:	e001      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007022:	7dfb      	ldrb	r3, [r7, #23]
 8007024:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d049      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007036:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800703a:	d02e      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800703c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007040:	d828      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007042:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007046:	d02a      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007048:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800704c:	d822      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800704e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007052:	d026      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007054:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007058:	d81c      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800705a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800705e:	d010      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007060:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007064:	d816      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d01d      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800706a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800706e:	d111      	bne.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	3304      	adds	r3, #4
 8007074:	2101      	movs	r1, #1
 8007076:	4618      	mov	r0, r3
 8007078:	f000 ffce 	bl	8008018 <RCCEx_PLL2_Config>
 800707c:	4603      	mov	r3, r0
 800707e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007080:	e012      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	3324      	adds	r3, #36	; 0x24
 8007086:	2101      	movs	r1, #1
 8007088:	4618      	mov	r0, r3
 800708a:	f001 f877 	bl	800817c <RCCEx_PLL3_Config>
 800708e:	4603      	mov	r3, r0
 8007090:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007092:	e009      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	75fb      	strb	r3, [r7, #23]
      break;
 8007098:	e006      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800709a:	bf00      	nop
 800709c:	e004      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800709e:	bf00      	nop
 80070a0:	e002      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80070a2:	bf00      	nop
 80070a4:	e000      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80070a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070a8:	7dfb      	ldrb	r3, [r7, #23]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d109      	bne.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80070ae:	4b54      	ldr	r3, [pc, #336]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ba:	4951      	ldr	r1, [pc, #324]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	650b      	str	r3, [r1, #80]	; 0x50
 80070c0:	e001      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c2:	7dfb      	ldrb	r3, [r7, #23]
 80070c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d04b      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070dc:	d02e      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x520>
 80070de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070e2:	d828      	bhi.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80070e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e8:	d02a      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80070ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ee:	d822      	bhi.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80070f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070f4:	d026      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80070f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070fa:	d81c      	bhi.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80070fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007100:	d010      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007106:	d816      	bhi.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007108:	2b00      	cmp	r3, #0
 800710a:	d01d      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800710c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007110:	d111      	bne.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	3304      	adds	r3, #4
 8007116:	2101      	movs	r1, #1
 8007118:	4618      	mov	r0, r3
 800711a:	f000 ff7d 	bl	8008018 <RCCEx_PLL2_Config>
 800711e:	4603      	mov	r3, r0
 8007120:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007122:	e012      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3324      	adds	r3, #36	; 0x24
 8007128:	2101      	movs	r1, #1
 800712a:	4618      	mov	r0, r3
 800712c:	f001 f826 	bl	800817c <RCCEx_PLL3_Config>
 8007130:	4603      	mov	r3, r0
 8007132:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007134:	e009      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	75fb      	strb	r3, [r7, #23]
      break;
 800713a:	e006      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800713c:	bf00      	nop
 800713e:	e004      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007140:	bf00      	nop
 8007142:	e002      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007144:	bf00      	nop
 8007146:	e000      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800714a:	7dfb      	ldrb	r3, [r7, #23]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10a      	bne.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007150:	4b2b      	ldr	r3, [pc, #172]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007154:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800715e:	4928      	ldr	r1, [pc, #160]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007160:	4313      	orrs	r3, r2
 8007162:	658b      	str	r3, [r1, #88]	; 0x58
 8007164:	e001      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007166:	7dfb      	ldrb	r3, [r7, #23]
 8007168:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d02f      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800717a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800717e:	d00e      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007184:	d814      	bhi.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007186:	2b00      	cmp	r3, #0
 8007188:	d015      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800718a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800718e:	d10f      	bne.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007190:	4b1b      	ldr	r3, [pc, #108]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007194:	4a1a      	ldr	r2, [pc, #104]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800719a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800719c:	e00c      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3304      	adds	r3, #4
 80071a2:	2101      	movs	r1, #1
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 ff37 	bl	8008018 <RCCEx_PLL2_Config>
 80071aa:	4603      	mov	r3, r0
 80071ac:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80071ae:	e003      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	75fb      	strb	r3, [r7, #23]
      break;
 80071b4:	e000      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80071b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071b8:	7dfb      	ldrb	r3, [r7, #23]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d109      	bne.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071be:	4b10      	ldr	r3, [pc, #64]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80071c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071ca:	490d      	ldr	r1, [pc, #52]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80071cc:	4313      	orrs	r3, r2
 80071ce:	650b      	str	r3, [r1, #80]	; 0x50
 80071d0:	e001      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
 80071d4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d033      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	d81c      	bhi.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80071ea:	a201      	add	r2, pc, #4	; (adr r2, 80071f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80071ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f0:	0800722b 	.word	0x0800722b
 80071f4:	08007205 	.word	0x08007205
 80071f8:	08007213 	.word	0x08007213
 80071fc:	0800722b 	.word	0x0800722b
 8007200:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007204:	4bb8      	ldr	r3, [pc, #736]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007208:	4ab7      	ldr	r2, [pc, #732]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800720a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800720e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007210:	e00c      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3304      	adds	r3, #4
 8007216:	2102      	movs	r1, #2
 8007218:	4618      	mov	r0, r3
 800721a:	f000 fefd 	bl	8008018 <RCCEx_PLL2_Config>
 800721e:	4603      	mov	r3, r0
 8007220:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007222:	e003      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	75fb      	strb	r3, [r7, #23]
      break;
 8007228:	e000      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800722a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800722c:	7dfb      	ldrb	r3, [r7, #23]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d109      	bne.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007232:	4bad      	ldr	r3, [pc, #692]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007236:	f023 0203 	bic.w	r2, r3, #3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723e:	49aa      	ldr	r1, [pc, #680]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007240:	4313      	orrs	r3, r2
 8007242:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007244:	e001      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007246:	7dfb      	ldrb	r3, [r7, #23]
 8007248:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 8086 	beq.w	8007364 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007258:	4ba4      	ldr	r3, [pc, #656]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4aa3      	ldr	r2, [pc, #652]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800725e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007262:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007264:	f7fb feea 	bl	800303c <HAL_GetTick>
 8007268:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800726a:	e009      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800726c:	f7fb fee6 	bl	800303c <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b64      	cmp	r3, #100	; 0x64
 8007278:	d902      	bls.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	75fb      	strb	r3, [r7, #23]
        break;
 800727e:	e005      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007280:	4b9a      	ldr	r3, [pc, #616]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0ef      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800728c:	7dfb      	ldrb	r3, [r7, #23]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d166      	bne.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007292:	4b95      	ldr	r3, [pc, #596]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007294:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800729c:	4053      	eors	r3, r2
 800729e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d013      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072a6:	4b90      	ldr	r3, [pc, #576]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80072a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ae:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80072b0:	4b8d      	ldr	r3, [pc, #564]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80072b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b4:	4a8c      	ldr	r2, [pc, #560]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80072b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072ba:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072bc:	4b8a      	ldr	r3, [pc, #552]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80072be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c0:	4a89      	ldr	r2, [pc, #548]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80072c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072c6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80072c8:	4a87      	ldr	r2, [pc, #540]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072d8:	d115      	bne.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072da:	f7fb feaf 	bl	800303c <HAL_GetTick>
 80072de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072e0:	e00b      	b.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072e2:	f7fb feab 	bl	800303c <HAL_GetTick>
 80072e6:	4602      	mov	r2, r0
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d902      	bls.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	75fb      	strb	r3, [r7, #23]
            break;
 80072f8:	e005      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072fa:	4b7b      	ldr	r3, [pc, #492]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80072fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fe:	f003 0302 	and.w	r3, r3, #2
 8007302:	2b00      	cmp	r3, #0
 8007304:	d0ed      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007306:	7dfb      	ldrb	r3, [r7, #23]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d126      	bne.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800731a:	d10d      	bne.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800731c:	4b72      	ldr	r3, [pc, #456]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800732a:	0919      	lsrs	r1, r3, #4
 800732c:	4b70      	ldr	r3, [pc, #448]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800732e:	400b      	ands	r3, r1
 8007330:	496d      	ldr	r1, [pc, #436]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007332:	4313      	orrs	r3, r2
 8007334:	610b      	str	r3, [r1, #16]
 8007336:	e005      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007338:	4b6b      	ldr	r3, [pc, #428]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	4a6a      	ldr	r2, [pc, #424]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800733e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007342:	6113      	str	r3, [r2, #16]
 8007344:	4b68      	ldr	r3, [pc, #416]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007346:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800734e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007352:	4965      	ldr	r1, [pc, #404]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007354:	4313      	orrs	r3, r2
 8007356:	670b      	str	r3, [r1, #112]	; 0x70
 8007358:	e004      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800735a:	7dfb      	ldrb	r3, [r7, #23]
 800735c:	75bb      	strb	r3, [r7, #22]
 800735e:	e001      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007360:	7dfb      	ldrb	r3, [r7, #23]
 8007362:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b00      	cmp	r3, #0
 800736e:	d07e      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007374:	2b28      	cmp	r3, #40	; 0x28
 8007376:	d867      	bhi.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007378:	a201      	add	r2, pc, #4	; (adr r2, 8007380 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800737a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737e:	bf00      	nop
 8007380:	0800744f 	.word	0x0800744f
 8007384:	08007449 	.word	0x08007449
 8007388:	08007449 	.word	0x08007449
 800738c:	08007449 	.word	0x08007449
 8007390:	08007449 	.word	0x08007449
 8007394:	08007449 	.word	0x08007449
 8007398:	08007449 	.word	0x08007449
 800739c:	08007449 	.word	0x08007449
 80073a0:	08007425 	.word	0x08007425
 80073a4:	08007449 	.word	0x08007449
 80073a8:	08007449 	.word	0x08007449
 80073ac:	08007449 	.word	0x08007449
 80073b0:	08007449 	.word	0x08007449
 80073b4:	08007449 	.word	0x08007449
 80073b8:	08007449 	.word	0x08007449
 80073bc:	08007449 	.word	0x08007449
 80073c0:	08007437 	.word	0x08007437
 80073c4:	08007449 	.word	0x08007449
 80073c8:	08007449 	.word	0x08007449
 80073cc:	08007449 	.word	0x08007449
 80073d0:	08007449 	.word	0x08007449
 80073d4:	08007449 	.word	0x08007449
 80073d8:	08007449 	.word	0x08007449
 80073dc:	08007449 	.word	0x08007449
 80073e0:	0800744f 	.word	0x0800744f
 80073e4:	08007449 	.word	0x08007449
 80073e8:	08007449 	.word	0x08007449
 80073ec:	08007449 	.word	0x08007449
 80073f0:	08007449 	.word	0x08007449
 80073f4:	08007449 	.word	0x08007449
 80073f8:	08007449 	.word	0x08007449
 80073fc:	08007449 	.word	0x08007449
 8007400:	0800744f 	.word	0x0800744f
 8007404:	08007449 	.word	0x08007449
 8007408:	08007449 	.word	0x08007449
 800740c:	08007449 	.word	0x08007449
 8007410:	08007449 	.word	0x08007449
 8007414:	08007449 	.word	0x08007449
 8007418:	08007449 	.word	0x08007449
 800741c:	08007449 	.word	0x08007449
 8007420:	0800744f 	.word	0x0800744f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	3304      	adds	r3, #4
 8007428:	2101      	movs	r1, #1
 800742a:	4618      	mov	r0, r3
 800742c:	f000 fdf4 	bl	8008018 <RCCEx_PLL2_Config>
 8007430:	4603      	mov	r3, r0
 8007432:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007434:	e00c      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	3324      	adds	r3, #36	; 0x24
 800743a:	2101      	movs	r1, #1
 800743c:	4618      	mov	r0, r3
 800743e:	f000 fe9d 	bl	800817c <RCCEx_PLL3_Config>
 8007442:	4603      	mov	r3, r0
 8007444:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007446:	e003      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	75fb      	strb	r3, [r7, #23]
      break;
 800744c:	e000      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800744e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007450:	7dfb      	ldrb	r3, [r7, #23]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d109      	bne.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007456:	4b24      	ldr	r3, [pc, #144]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800745a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007462:	4921      	ldr	r1, [pc, #132]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007464:	4313      	orrs	r3, r2
 8007466:	654b      	str	r3, [r1, #84]	; 0x54
 8007468:	e001      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800746a:	7dfb      	ldrb	r3, [r7, #23]
 800746c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b00      	cmp	r3, #0
 8007478:	d03e      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800747e:	2b05      	cmp	r3, #5
 8007480:	d820      	bhi.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007482:	a201      	add	r2, pc, #4	; (adr r2, 8007488 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007488:	080074cb 	.word	0x080074cb
 800748c:	080074a1 	.word	0x080074a1
 8007490:	080074b3 	.word	0x080074b3
 8007494:	080074cb 	.word	0x080074cb
 8007498:	080074cb 	.word	0x080074cb
 800749c:	080074cb 	.word	0x080074cb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	3304      	adds	r3, #4
 80074a4:	2101      	movs	r1, #1
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fdb6 	bl	8008018 <RCCEx_PLL2_Config>
 80074ac:	4603      	mov	r3, r0
 80074ae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80074b0:	e00c      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	3324      	adds	r3, #36	; 0x24
 80074b6:	2101      	movs	r1, #1
 80074b8:	4618      	mov	r0, r3
 80074ba:	f000 fe5f 	bl	800817c <RCCEx_PLL3_Config>
 80074be:	4603      	mov	r3, r0
 80074c0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80074c2:	e003      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	75fb      	strb	r3, [r7, #23]
      break;
 80074c8:	e000      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80074ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074cc:	7dfb      	ldrb	r3, [r7, #23]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d110      	bne.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80074d2:	4b05      	ldr	r3, [pc, #20]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d6:	f023 0207 	bic.w	r2, r3, #7
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074de:	4902      	ldr	r1, [pc, #8]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	654b      	str	r3, [r1, #84]	; 0x54
 80074e4:	e008      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80074e6:	bf00      	nop
 80074e8:	58024400 	.word	0x58024400
 80074ec:	58024800 	.word	0x58024800
 80074f0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f4:	7dfb      	ldrb	r3, [r7, #23]
 80074f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0304 	and.w	r3, r3, #4
 8007500:	2b00      	cmp	r3, #0
 8007502:	d039      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800750a:	2b05      	cmp	r3, #5
 800750c:	d820      	bhi.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800750e:	a201      	add	r2, pc, #4	; (adr r2, 8007514 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007514:	08007557 	.word	0x08007557
 8007518:	0800752d 	.word	0x0800752d
 800751c:	0800753f 	.word	0x0800753f
 8007520:	08007557 	.word	0x08007557
 8007524:	08007557 	.word	0x08007557
 8007528:	08007557 	.word	0x08007557
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	3304      	adds	r3, #4
 8007530:	2101      	movs	r1, #1
 8007532:	4618      	mov	r0, r3
 8007534:	f000 fd70 	bl	8008018 <RCCEx_PLL2_Config>
 8007538:	4603      	mov	r3, r0
 800753a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800753c:	e00c      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	3324      	adds	r3, #36	; 0x24
 8007542:	2101      	movs	r1, #1
 8007544:	4618      	mov	r0, r3
 8007546:	f000 fe19 	bl	800817c <RCCEx_PLL3_Config>
 800754a:	4603      	mov	r3, r0
 800754c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800754e:	e003      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	75fb      	strb	r3, [r7, #23]
      break;
 8007554:	e000      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007556:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007558:	7dfb      	ldrb	r3, [r7, #23]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10a      	bne.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800755e:	4bb7      	ldr	r3, [pc, #732]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007562:	f023 0207 	bic.w	r2, r3, #7
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800756c:	49b3      	ldr	r1, [pc, #716]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800756e:	4313      	orrs	r3, r2
 8007570:	658b      	str	r3, [r1, #88]	; 0x58
 8007572:	e001      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007574:	7dfb      	ldrb	r3, [r7, #23]
 8007576:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0320 	and.w	r3, r3, #32
 8007580:	2b00      	cmp	r3, #0
 8007582:	d04b      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800758a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800758e:	d02e      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007590:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007594:	d828      	bhi.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800759a:	d02a      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800759c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075a0:	d822      	bhi.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80075a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075a6:	d026      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80075a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075ac:	d81c      	bhi.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80075ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075b2:	d010      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80075b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075b8:	d816      	bhi.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d01d      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80075be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075c2:	d111      	bne.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3304      	adds	r3, #4
 80075c8:	2100      	movs	r1, #0
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 fd24 	bl	8008018 <RCCEx_PLL2_Config>
 80075d0:	4603      	mov	r3, r0
 80075d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80075d4:	e012      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	3324      	adds	r3, #36	; 0x24
 80075da:	2102      	movs	r1, #2
 80075dc:	4618      	mov	r0, r3
 80075de:	f000 fdcd 	bl	800817c <RCCEx_PLL3_Config>
 80075e2:	4603      	mov	r3, r0
 80075e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80075e6:	e009      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	75fb      	strb	r3, [r7, #23]
      break;
 80075ec:	e006      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80075ee:	bf00      	nop
 80075f0:	e004      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80075f2:	bf00      	nop
 80075f4:	e002      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80075f6:	bf00      	nop
 80075f8:	e000      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80075fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10a      	bne.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007602:	4b8e      	ldr	r3, [pc, #568]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007606:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007610:	498a      	ldr	r1, [pc, #552]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007612:	4313      	orrs	r3, r2
 8007614:	654b      	str	r3, [r1, #84]	; 0x54
 8007616:	e001      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007618:	7dfb      	ldrb	r3, [r7, #23]
 800761a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007624:	2b00      	cmp	r3, #0
 8007626:	d04b      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800762e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007632:	d02e      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007634:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007638:	d828      	bhi.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800763a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800763e:	d02a      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007644:	d822      	bhi.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007646:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800764a:	d026      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800764c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007650:	d81c      	bhi.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007656:	d010      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800765c:	d816      	bhi.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800765e:	2b00      	cmp	r3, #0
 8007660:	d01d      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007666:	d111      	bne.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3304      	adds	r3, #4
 800766c:	2100      	movs	r1, #0
 800766e:	4618      	mov	r0, r3
 8007670:	f000 fcd2 	bl	8008018 <RCCEx_PLL2_Config>
 8007674:	4603      	mov	r3, r0
 8007676:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007678:	e012      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	3324      	adds	r3, #36	; 0x24
 800767e:	2102      	movs	r1, #2
 8007680:	4618      	mov	r0, r3
 8007682:	f000 fd7b 	bl	800817c <RCCEx_PLL3_Config>
 8007686:	4603      	mov	r3, r0
 8007688:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800768a:	e009      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	75fb      	strb	r3, [r7, #23]
      break;
 8007690:	e006      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007692:	bf00      	nop
 8007694:	e004      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007696:	bf00      	nop
 8007698:	e002      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800769a:	bf00      	nop
 800769c:	e000      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800769e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076a0:	7dfb      	ldrb	r3, [r7, #23]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10a      	bne.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076a6:	4b65      	ldr	r3, [pc, #404]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80076a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076b4:	4961      	ldr	r1, [pc, #388]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	658b      	str	r3, [r1, #88]	; 0x58
 80076ba:	e001      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076bc:	7dfb      	ldrb	r3, [r7, #23]
 80076be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d04b      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80076d6:	d02e      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80076d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80076dc:	d828      	bhi.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80076de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076e2:	d02a      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80076e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076e8:	d822      	bhi.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80076ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80076ee:	d026      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80076f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80076f4:	d81c      	bhi.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80076f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076fa:	d010      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80076fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007700:	d816      	bhi.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007702:	2b00      	cmp	r3, #0
 8007704:	d01d      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800770a:	d111      	bne.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	3304      	adds	r3, #4
 8007710:	2100      	movs	r1, #0
 8007712:	4618      	mov	r0, r3
 8007714:	f000 fc80 	bl	8008018 <RCCEx_PLL2_Config>
 8007718:	4603      	mov	r3, r0
 800771a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800771c:	e012      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	3324      	adds	r3, #36	; 0x24
 8007722:	2102      	movs	r1, #2
 8007724:	4618      	mov	r0, r3
 8007726:	f000 fd29 	bl	800817c <RCCEx_PLL3_Config>
 800772a:	4603      	mov	r3, r0
 800772c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800772e:	e009      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	75fb      	strb	r3, [r7, #23]
      break;
 8007734:	e006      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007736:	bf00      	nop
 8007738:	e004      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800773a:	bf00      	nop
 800773c:	e002      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800773e:	bf00      	nop
 8007740:	e000      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007742:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007744:	7dfb      	ldrb	r3, [r7, #23]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10a      	bne.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800774a:	4b3c      	ldr	r3, [pc, #240]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800774c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800774e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007758:	4938      	ldr	r1, [pc, #224]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800775a:	4313      	orrs	r3, r2
 800775c:	658b      	str	r3, [r1, #88]	; 0x58
 800775e:	e001      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007760:	7dfb      	ldrb	r3, [r7, #23]
 8007762:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0308 	and.w	r3, r3, #8
 800776c:	2b00      	cmp	r3, #0
 800776e:	d01a      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800777a:	d10a      	bne.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	3324      	adds	r3, #36	; 0x24
 8007780:	2102      	movs	r1, #2
 8007782:	4618      	mov	r0, r3
 8007784:	f000 fcfa 	bl	800817c <RCCEx_PLL3_Config>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007792:	4b2a      	ldr	r3, [pc, #168]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007796:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077a0:	4926      	ldr	r1, [pc, #152]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0310 	and.w	r3, r3, #16
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d01a      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077bc:	d10a      	bne.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	3324      	adds	r3, #36	; 0x24
 80077c2:	2102      	movs	r1, #2
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 fcd9 	bl	800817c <RCCEx_PLL3_Config>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80077d4:	4b19      	ldr	r3, [pc, #100]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80077d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077e2:	4916      	ldr	r1, [pc, #88]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80077e4:	4313      	orrs	r3, r2
 80077e6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d036      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80077fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077fe:	d01f      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007804:	d817      	bhi.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800780a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800780e:	d009      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007810:	e011      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	3304      	adds	r3, #4
 8007816:	2100      	movs	r1, #0
 8007818:	4618      	mov	r0, r3
 800781a:	f000 fbfd 	bl	8008018 <RCCEx_PLL2_Config>
 800781e:	4603      	mov	r3, r0
 8007820:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007822:	e00e      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	3324      	adds	r3, #36	; 0x24
 8007828:	2102      	movs	r1, #2
 800782a:	4618      	mov	r0, r3
 800782c:	f000 fca6 	bl	800817c <RCCEx_PLL3_Config>
 8007830:	4603      	mov	r3, r0
 8007832:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007834:	e005      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	75fb      	strb	r3, [r7, #23]
      break;
 800783a:	e002      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800783c:	58024400 	.word	0x58024400
      break;
 8007840:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007842:	7dfb      	ldrb	r3, [r7, #23]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10a      	bne.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007848:	4b93      	ldr	r3, [pc, #588]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800784a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800784c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007856:	4990      	ldr	r1, [pc, #576]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007858:	4313      	orrs	r3, r2
 800785a:	658b      	str	r3, [r1, #88]	; 0x58
 800785c:	e001      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800785e:	7dfb      	ldrb	r3, [r7, #23]
 8007860:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d033      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007874:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007878:	d01c      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800787a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800787e:	d816      	bhi.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007880:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007884:	d003      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007886:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800788a:	d007      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800788c:	e00f      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800788e:	4b82      	ldr	r3, [pc, #520]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007892:	4a81      	ldr	r2, [pc, #516]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007898:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800789a:	e00c      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	3324      	adds	r3, #36	; 0x24
 80078a0:	2101      	movs	r1, #1
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 fc6a 	bl	800817c <RCCEx_PLL3_Config>
 80078a8:	4603      	mov	r3, r0
 80078aa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80078ac:	e003      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	75fb      	strb	r3, [r7, #23]
      break;
 80078b2:	e000      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80078b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078b6:	7dfb      	ldrb	r3, [r7, #23]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d10a      	bne.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80078bc:	4b76      	ldr	r3, [pc, #472]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ca:	4973      	ldr	r1, [pc, #460]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078cc:	4313      	orrs	r3, r2
 80078ce:	654b      	str	r3, [r1, #84]	; 0x54
 80078d0:	e001      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d2:	7dfb      	ldrb	r3, [r7, #23]
 80078d4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d029      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d003      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80078ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ee:	d007      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80078f0:	e00f      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078f2:	4b69      	ldr	r3, [pc, #420]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f6:	4a68      	ldr	r2, [pc, #416]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80078fe:	e00b      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3304      	adds	r3, #4
 8007904:	2102      	movs	r1, #2
 8007906:	4618      	mov	r0, r3
 8007908:	f000 fb86 	bl	8008018 <RCCEx_PLL2_Config>
 800790c:	4603      	mov	r3, r0
 800790e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007910:	e002      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	75fb      	strb	r3, [r7, #23]
      break;
 8007916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007918:	7dfb      	ldrb	r3, [r7, #23]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d109      	bne.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800791e:	4b5e      	ldr	r3, [pc, #376]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007922:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800792a:	495b      	ldr	r1, [pc, #364]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800792c:	4313      	orrs	r3, r2
 800792e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007930:	e001      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007932:	7dfb      	ldrb	r3, [r7, #23]
 8007934:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00a      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	3324      	adds	r3, #36	; 0x24
 8007946:	2102      	movs	r1, #2
 8007948:	4618      	mov	r0, r3
 800794a:	f000 fc17 	bl	800817c <RCCEx_PLL3_Config>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d001      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d030      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007968:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800796c:	d017      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800796e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007972:	d811      	bhi.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007978:	d013      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800797a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800797e:	d80b      	bhi.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007980:	2b00      	cmp	r3, #0
 8007982:	d010      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007988:	d106      	bne.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800798a:	4b43      	ldr	r3, [pc, #268]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800798c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798e:	4a42      	ldr	r2, [pc, #264]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007994:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007996:	e007      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	75fb      	strb	r3, [r7, #23]
      break;
 800799c:	e004      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800799e:	bf00      	nop
 80079a0:	e002      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80079a2:	bf00      	nop
 80079a4:	e000      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80079a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079a8:	7dfb      	ldrb	r3, [r7, #23]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d109      	bne.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80079ae:	4b3a      	ldr	r3, [pc, #232]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ba:	4937      	ldr	r1, [pc, #220]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	654b      	str	r3, [r1, #84]	; 0x54
 80079c0:	e001      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079c2:	7dfb      	ldrb	r3, [r7, #23]
 80079c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d008      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80079d2:	4b31      	ldr	r3, [pc, #196]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079de:	492e      	ldr	r1, [pc, #184]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079e0:	4313      	orrs	r3, r2
 80079e2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d009      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80079f0:	4b29      	ldr	r3, [pc, #164]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80079fe:	4926      	ldr	r1, [pc, #152]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a00:	4313      	orrs	r3, r2
 8007a02:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d008      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a10:	4b21      	ldr	r3, [pc, #132]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a14:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a1c:	491e      	ldr	r1, [pc, #120]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00d      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a2e:	4b1a      	ldr	r3, [pc, #104]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	4a19      	ldr	r2, [pc, #100]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a38:	6113      	str	r3, [r2, #16]
 8007a3a:	4b17      	ldr	r3, [pc, #92]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a3c:	691a      	ldr	r2, [r3, #16]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007a44:	4914      	ldr	r1, [pc, #80]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	da08      	bge.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007a52:	4b11      	ldr	r3, [pc, #68]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a5e:	490e      	ldr	r1, [pc, #56]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d009      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007a70:	4b09      	ldr	r3, [pc, #36]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a7e:	4906      	ldr	r1, [pc, #24]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a80:	4313      	orrs	r3, r2
 8007a82:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007a84:	7dbb      	ldrb	r3, [r7, #22]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	e000      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3718      	adds	r7, #24
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	58024400 	.word	0x58024400

08007a9c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007aa0:	f7ff f860 	bl	8006b64 <HAL_RCC_GetHCLKFreq>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	4b06      	ldr	r3, [pc, #24]	; (8007ac0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	091b      	lsrs	r3, r3, #4
 8007aac:	f003 0307 	and.w	r3, r3, #7
 8007ab0:	4904      	ldr	r1, [pc, #16]	; (8007ac4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007ab2:	5ccb      	ldrb	r3, [r1, r3]
 8007ab4:	f003 031f 	and.w	r3, r3, #31
 8007ab8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	58024400 	.word	0x58024400
 8007ac4:	0800f63c 	.word	0x0800f63c

08007ac8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b089      	sub	sp, #36	; 0x24
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ad0:	4ba1      	ldr	r3, [pc, #644]	; (8007d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad4:	f003 0303 	and.w	r3, r3, #3
 8007ad8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007ada:	4b9f      	ldr	r3, [pc, #636]	; (8007d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ade:	0b1b      	lsrs	r3, r3, #12
 8007ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ae4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007ae6:	4b9c      	ldr	r3, [pc, #624]	; (8007d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aea:	091b      	lsrs	r3, r3, #4
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007af2:	4b99      	ldr	r3, [pc, #612]	; (8007d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af6:	08db      	lsrs	r3, r3, #3
 8007af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	fb02 f303 	mul.w	r3, r2, r3
 8007b02:	ee07 3a90 	vmov	s15, r3
 8007b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 8111 	beq.w	8007d38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	f000 8083 	beq.w	8007c24 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	f200 80a1 	bhi.w	8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d003      	beq.n	8007b34 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d056      	beq.n	8007be0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007b32:	e099      	b.n	8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b34:	4b88      	ldr	r3, [pc, #544]	; (8007d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0320 	and.w	r3, r3, #32
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d02d      	beq.n	8007b9c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b40:	4b85      	ldr	r3, [pc, #532]	; (8007d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	08db      	lsrs	r3, r3, #3
 8007b46:	f003 0303 	and.w	r3, r3, #3
 8007b4a:	4a84      	ldr	r2, [pc, #528]	; (8007d5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b50:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	ee07 3a90 	vmov	s15, r3
 8007b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	ee07 3a90 	vmov	s15, r3
 8007b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b6a:	4b7b      	ldr	r3, [pc, #492]	; (8007d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b72:	ee07 3a90 	vmov	s15, r3
 8007b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b96:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007b9a:	e087      	b.n	8007cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	ee07 3a90 	vmov	s15, r3
 8007ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ba6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bae:	4b6a      	ldr	r3, [pc, #424]	; (8007d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb6:	ee07 3a90 	vmov	s15, r3
 8007bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bc2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bde:	e065      	b.n	8007cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	ee07 3a90 	vmov	s15, r3
 8007be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007d68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bf2:	4b59      	ldr	r3, [pc, #356]	; (8007d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bfa:	ee07 3a90 	vmov	s15, r3
 8007bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c22:	e043      	b.n	8007cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	ee07 3a90 	vmov	s15, r3
 8007c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007d6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c36:	4b48      	ldr	r3, [pc, #288]	; (8007d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c3e:	ee07 3a90 	vmov	s15, r3
 8007c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c66:	e021      	b.n	8007cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	ee07 3a90 	vmov	s15, r3
 8007c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007d68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c7a:	4b37      	ldr	r3, [pc, #220]	; (8007d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c82:	ee07 3a90 	vmov	s15, r3
 8007c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ca6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007caa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007cac:	4b2a      	ldr	r3, [pc, #168]	; (8007d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb0:	0a5b      	lsrs	r3, r3, #9
 8007cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cb6:	ee07 3a90 	vmov	s15, r3
 8007cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cd2:	ee17 2a90 	vmov	r2, s15
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007cda:	4b1f      	ldr	r3, [pc, #124]	; (8007d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cde:	0c1b      	lsrs	r3, r3, #16
 8007ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ce4:	ee07 3a90 	vmov	s15, r3
 8007ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d00:	ee17 2a90 	vmov	r2, s15
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007d08:	4b13      	ldr	r3, [pc, #76]	; (8007d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0c:	0e1b      	lsrs	r3, r3, #24
 8007d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d12:	ee07 3a90 	vmov	s15, r3
 8007d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d22:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d2e:	ee17 2a90 	vmov	r2, s15
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007d36:	e008      	b.n	8007d4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	609a      	str	r2, [r3, #8]
}
 8007d4a:	bf00      	nop
 8007d4c:	3724      	adds	r7, #36	; 0x24
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	58024400 	.word	0x58024400
 8007d5c:	03d09000 	.word	0x03d09000
 8007d60:	46000000 	.word	0x46000000
 8007d64:	4c742400 	.word	0x4c742400
 8007d68:	4a742400 	.word	0x4a742400
 8007d6c:	4c371b00 	.word	0x4c371b00

08007d70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b089      	sub	sp, #36	; 0x24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d78:	4ba1      	ldr	r3, [pc, #644]	; (8008000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7c:	f003 0303 	and.w	r3, r3, #3
 8007d80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007d82:	4b9f      	ldr	r3, [pc, #636]	; (8008000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d86:	0d1b      	lsrs	r3, r3, #20
 8007d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007d8e:	4b9c      	ldr	r3, [pc, #624]	; (8008000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d92:	0a1b      	lsrs	r3, r3, #8
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007d9a:	4b99      	ldr	r3, [pc, #612]	; (8008000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d9e:	08db      	lsrs	r3, r3, #3
 8007da0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	fb02 f303 	mul.w	r3, r2, r3
 8007daa:	ee07 3a90 	vmov	s15, r3
 8007dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 8111 	beq.w	8007fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	f000 8083 	beq.w	8007ecc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	f200 80a1 	bhi.w	8007f10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d003      	beq.n	8007ddc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d056      	beq.n	8007e88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007dda:	e099      	b.n	8007f10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ddc:	4b88      	ldr	r3, [pc, #544]	; (8008000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0320 	and.w	r3, r3, #32
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d02d      	beq.n	8007e44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007de8:	4b85      	ldr	r3, [pc, #532]	; (8008000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	08db      	lsrs	r3, r3, #3
 8007dee:	f003 0303 	and.w	r3, r3, #3
 8007df2:	4a84      	ldr	r2, [pc, #528]	; (8008004 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007df4:	fa22 f303 	lsr.w	r3, r2, r3
 8007df8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	ee07 3a90 	vmov	s15, r3
 8007e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	ee07 3a90 	vmov	s15, r3
 8007e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e12:	4b7b      	ldr	r3, [pc, #492]	; (8008000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e1a:	ee07 3a90 	vmov	s15, r3
 8007e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e3e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e42:	e087      	b.n	8007f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	ee07 3a90 	vmov	s15, r3
 8007e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800800c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e56:	4b6a      	ldr	r3, [pc, #424]	; (8008000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e5e:	ee07 3a90 	vmov	s15, r3
 8007e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e66:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e86:	e065      	b.n	8007f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	ee07 3a90 	vmov	s15, r3
 8007e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008010 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e9a:	4b59      	ldr	r3, [pc, #356]	; (8008000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ea2:	ee07 3a90 	vmov	s15, r3
 8007ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ec6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007eca:	e043      	b.n	8007f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	ee07 3a90 	vmov	s15, r3
 8007ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008014 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ede:	4b48      	ldr	r3, [pc, #288]	; (8008000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ee6:	ee07 3a90 	vmov	s15, r3
 8007eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eee:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ef2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f0e:	e021      	b.n	8007f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	ee07 3a90 	vmov	s15, r3
 8007f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008010 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f22:	4b37      	ldr	r3, [pc, #220]	; (8008000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f2a:	ee07 3a90 	vmov	s15, r3
 8007f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007f54:	4b2a      	ldr	r3, [pc, #168]	; (8008000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f58:	0a5b      	lsrs	r3, r3, #9
 8007f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f5e:	ee07 3a90 	vmov	s15, r3
 8007f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f7a:	ee17 2a90 	vmov	r2, s15
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007f82:	4b1f      	ldr	r3, [pc, #124]	; (8008000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f86:	0c1b      	lsrs	r3, r3, #16
 8007f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f8c:	ee07 3a90 	vmov	s15, r3
 8007f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fa8:	ee17 2a90 	vmov	r2, s15
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007fb0:	4b13      	ldr	r3, [pc, #76]	; (8008000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb4:	0e1b      	lsrs	r3, r3, #24
 8007fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fba:	ee07 3a90 	vmov	s15, r3
 8007fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fca:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fd6:	ee17 2a90 	vmov	r2, s15
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007fde:	e008      	b.n	8007ff2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	609a      	str	r2, [r3, #8]
}
 8007ff2:	bf00      	nop
 8007ff4:	3724      	adds	r7, #36	; 0x24
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	58024400 	.word	0x58024400
 8008004:	03d09000 	.word	0x03d09000
 8008008:	46000000 	.word	0x46000000
 800800c:	4c742400 	.word	0x4c742400
 8008010:	4a742400 	.word	0x4a742400
 8008014:	4c371b00 	.word	0x4c371b00

08008018 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008026:	4b53      	ldr	r3, [pc, #332]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 8008028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802a:	f003 0303 	and.w	r3, r3, #3
 800802e:	2b03      	cmp	r3, #3
 8008030:	d101      	bne.n	8008036 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e099      	b.n	800816a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008036:	4b4f      	ldr	r3, [pc, #316]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a4e      	ldr	r2, [pc, #312]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 800803c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008040:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008042:	f7fa fffb 	bl	800303c <HAL_GetTick>
 8008046:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008048:	e008      	b.n	800805c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800804a:	f7fa fff7 	bl	800303c <HAL_GetTick>
 800804e:	4602      	mov	r2, r0
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	2b02      	cmp	r3, #2
 8008056:	d901      	bls.n	800805c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008058:	2303      	movs	r3, #3
 800805a:	e086      	b.n	800816a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800805c:	4b45      	ldr	r3, [pc, #276]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1f0      	bne.n	800804a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008068:	4b42      	ldr	r3, [pc, #264]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 800806a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	031b      	lsls	r3, r3, #12
 8008076:	493f      	ldr	r1, [pc, #252]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 8008078:	4313      	orrs	r3, r2
 800807a:	628b      	str	r3, [r1, #40]	; 0x28
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	3b01      	subs	r3, #1
 8008082:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	3b01      	subs	r3, #1
 800808c:	025b      	lsls	r3, r3, #9
 800808e:	b29b      	uxth	r3, r3
 8008090:	431a      	orrs	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	3b01      	subs	r3, #1
 8008098:	041b      	lsls	r3, r3, #16
 800809a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800809e:	431a      	orrs	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	3b01      	subs	r3, #1
 80080a6:	061b      	lsls	r3, r3, #24
 80080a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80080ac:	4931      	ldr	r1, [pc, #196]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 80080ae:	4313      	orrs	r3, r2
 80080b0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80080b2:	4b30      	ldr	r3, [pc, #192]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 80080b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	492d      	ldr	r1, [pc, #180]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 80080c0:	4313      	orrs	r3, r2
 80080c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80080c4:	4b2b      	ldr	r3, [pc, #172]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 80080c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c8:	f023 0220 	bic.w	r2, r3, #32
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	4928      	ldr	r1, [pc, #160]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 80080d2:	4313      	orrs	r3, r2
 80080d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80080d6:	4b27      	ldr	r3, [pc, #156]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 80080d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080da:	4a26      	ldr	r2, [pc, #152]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 80080dc:	f023 0310 	bic.w	r3, r3, #16
 80080e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80080e2:	4b24      	ldr	r3, [pc, #144]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 80080e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080e6:	4b24      	ldr	r3, [pc, #144]	; (8008178 <RCCEx_PLL2_Config+0x160>)
 80080e8:	4013      	ands	r3, r2
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	69d2      	ldr	r2, [r2, #28]
 80080ee:	00d2      	lsls	r2, r2, #3
 80080f0:	4920      	ldr	r1, [pc, #128]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 80080f2:	4313      	orrs	r3, r2
 80080f4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80080f6:	4b1f      	ldr	r3, [pc, #124]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 80080f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fa:	4a1e      	ldr	r2, [pc, #120]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 80080fc:	f043 0310 	orr.w	r3, r3, #16
 8008100:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d106      	bne.n	8008116 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008108:	4b1a      	ldr	r3, [pc, #104]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 800810a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810c:	4a19      	ldr	r2, [pc, #100]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 800810e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008112:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008114:	e00f      	b.n	8008136 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d106      	bne.n	800812a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800811c:	4b15      	ldr	r3, [pc, #84]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 800811e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008120:	4a14      	ldr	r2, [pc, #80]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 8008122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008126:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008128:	e005      	b.n	8008136 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800812a:	4b12      	ldr	r3, [pc, #72]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 800812c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812e:	4a11      	ldr	r2, [pc, #68]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 8008130:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008134:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008136:	4b0f      	ldr	r3, [pc, #60]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a0e      	ldr	r2, [pc, #56]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 800813c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008140:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008142:	f7fa ff7b 	bl	800303c <HAL_GetTick>
 8008146:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008148:	e008      	b.n	800815c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800814a:	f7fa ff77 	bl	800303c <HAL_GetTick>
 800814e:	4602      	mov	r2, r0
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	2b02      	cmp	r3, #2
 8008156:	d901      	bls.n	800815c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e006      	b.n	800816a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800815c:	4b05      	ldr	r3, [pc, #20]	; (8008174 <RCCEx_PLL2_Config+0x15c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d0f0      	beq.n	800814a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008168:	7bfb      	ldrb	r3, [r7, #15]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	58024400 	.word	0x58024400
 8008178:	ffff0007 	.word	0xffff0007

0800817c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800818a:	4b53      	ldr	r3, [pc, #332]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 800818c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818e:	f003 0303 	and.w	r3, r3, #3
 8008192:	2b03      	cmp	r3, #3
 8008194:	d101      	bne.n	800819a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e099      	b.n	80082ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800819a:	4b4f      	ldr	r3, [pc, #316]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a4e      	ldr	r2, [pc, #312]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 80081a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081a6:	f7fa ff49 	bl	800303c <HAL_GetTick>
 80081aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80081ac:	e008      	b.n	80081c0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80081ae:	f7fa ff45 	bl	800303c <HAL_GetTick>
 80081b2:	4602      	mov	r2, r0
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d901      	bls.n	80081c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	e086      	b.n	80082ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80081c0:	4b45      	ldr	r3, [pc, #276]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1f0      	bne.n	80081ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80081cc:	4b42      	ldr	r3, [pc, #264]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 80081ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	051b      	lsls	r3, r3, #20
 80081da:	493f      	ldr	r1, [pc, #252]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 80081dc:	4313      	orrs	r3, r2
 80081de:	628b      	str	r3, [r1, #40]	; 0x28
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	3b01      	subs	r3, #1
 80081e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	025b      	lsls	r3, r3, #9
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	431a      	orrs	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	3b01      	subs	r3, #1
 80081fc:	041b      	lsls	r3, r3, #16
 80081fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008202:	431a      	orrs	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	3b01      	subs	r3, #1
 800820a:	061b      	lsls	r3, r3, #24
 800820c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008210:	4931      	ldr	r1, [pc, #196]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 8008212:	4313      	orrs	r3, r2
 8008214:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008216:	4b30      	ldr	r3, [pc, #192]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 8008218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	492d      	ldr	r1, [pc, #180]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 8008224:	4313      	orrs	r3, r2
 8008226:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008228:	4b2b      	ldr	r3, [pc, #172]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 800822a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	4928      	ldr	r1, [pc, #160]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 8008236:	4313      	orrs	r3, r2
 8008238:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800823a:	4b27      	ldr	r3, [pc, #156]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 800823c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823e:	4a26      	ldr	r2, [pc, #152]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 8008240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008244:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008246:	4b24      	ldr	r3, [pc, #144]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 8008248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800824a:	4b24      	ldr	r3, [pc, #144]	; (80082dc <RCCEx_PLL3_Config+0x160>)
 800824c:	4013      	ands	r3, r2
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	69d2      	ldr	r2, [r2, #28]
 8008252:	00d2      	lsls	r2, r2, #3
 8008254:	4920      	ldr	r1, [pc, #128]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 8008256:	4313      	orrs	r3, r2
 8008258:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800825a:	4b1f      	ldr	r3, [pc, #124]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 800825c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825e:	4a1e      	ldr	r2, [pc, #120]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 8008260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008264:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d106      	bne.n	800827a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800826c:	4b1a      	ldr	r3, [pc, #104]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 800826e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008270:	4a19      	ldr	r2, [pc, #100]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 8008272:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008276:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008278:	e00f      	b.n	800829a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d106      	bne.n	800828e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008280:	4b15      	ldr	r3, [pc, #84]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 8008282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008284:	4a14      	ldr	r2, [pc, #80]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 8008286:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800828a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800828c:	e005      	b.n	800829a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800828e:	4b12      	ldr	r3, [pc, #72]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 8008290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008292:	4a11      	ldr	r2, [pc, #68]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 8008294:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008298:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800829a:	4b0f      	ldr	r3, [pc, #60]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a0e      	ldr	r2, [pc, #56]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 80082a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082a6:	f7fa fec9 	bl	800303c <HAL_GetTick>
 80082aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80082ac:	e008      	b.n	80082c0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80082ae:	f7fa fec5 	bl	800303c <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d901      	bls.n	80082c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80082bc:	2303      	movs	r3, #3
 80082be:	e006      	b.n	80082ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80082c0:	4b05      	ldr	r3, [pc, #20]	; (80082d8 <RCCEx_PLL3_Config+0x15c>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d0f0      	beq.n	80082ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	58024400 	.word	0x58024400
 80082dc:	ffff0007 	.word	0xffff0007

080082e0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 80082e8:	2300      	movs	r3, #0
 80082ea:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e0eb      	b.n	80084ce <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a75      	ldr	r2, [pc, #468]	; (80084d8 <HAL_SPI_Init+0x1f8>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d00f      	beq.n	8008326 <HAL_SPI_Init+0x46>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a74      	ldr	r2, [pc, #464]	; (80084dc <HAL_SPI_Init+0x1fc>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d00a      	beq.n	8008326 <HAL_SPI_Init+0x46>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a72      	ldr	r2, [pc, #456]	; (80084e0 <HAL_SPI_Init+0x200>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d005      	beq.n	8008326 <HAL_SPI_Init+0x46>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	2b0f      	cmp	r3, #15
 8008320:	d901      	bls.n	8008326 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e0d3      	b.n	80084ce <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f8dc 	bl	80084e4 <SPI_GetPacketSize>
 800832c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a69      	ldr	r2, [pc, #420]	; (80084d8 <HAL_SPI_Init+0x1f8>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d00c      	beq.n	8008352 <HAL_SPI_Init+0x72>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a67      	ldr	r2, [pc, #412]	; (80084dc <HAL_SPI_Init+0x1fc>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d007      	beq.n	8008352 <HAL_SPI_Init+0x72>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a66      	ldr	r2, [pc, #408]	; (80084e0 <HAL_SPI_Init+0x200>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d002      	beq.n	8008352 <HAL_SPI_Init+0x72>
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	2b08      	cmp	r3, #8
 8008350:	d811      	bhi.n	8008376 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008356:	4a60      	ldr	r2, [pc, #384]	; (80084d8 <HAL_SPI_Init+0x1f8>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d009      	beq.n	8008370 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a5e      	ldr	r2, [pc, #376]	; (80084dc <HAL_SPI_Init+0x1fc>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d004      	beq.n	8008370 <HAL_SPI_Init+0x90>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a5d      	ldr	r2, [pc, #372]	; (80084e0 <HAL_SPI_Init+0x200>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d104      	bne.n	800837a <HAL_SPI_Init+0x9a>
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	2b10      	cmp	r3, #16
 8008374:	d901      	bls.n	800837a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e0a9      	b.n	80084ce <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b00      	cmp	r3, #0
 8008384:	d106      	bne.n	8008394 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f7fa f838 	bl	8002404 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2202      	movs	r2, #2
 8008398:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f022 0201 	bic.w	r2, r2, #1
 80083aa:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083b4:	d119      	bne.n	80083ea <HAL_SPI_Init+0x10a>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083be:	d103      	bne.n	80083c8 <HAL_SPI_Init+0xe8>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d008      	beq.n	80083da <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10c      	bne.n	80083ea <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083d8:	d107      	bne.n	80083ea <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80083e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	69da      	ldr	r2, [r3, #28]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f2:	431a      	orrs	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	431a      	orrs	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083fc:	ea42 0103 	orr.w	r1, r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	68da      	ldr	r2, [r3, #12]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	430a      	orrs	r2, r1
 800840a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008414:	431a      	orrs	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841a:	431a      	orrs	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	431a      	orrs	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	431a      	orrs	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	695b      	ldr	r3, [r3, #20]
 800842c:	431a      	orrs	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	431a      	orrs	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	431a      	orrs	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800843e:	431a      	orrs	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	431a      	orrs	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800844a:	ea42 0103 	orr.w	r1, r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d113      	bne.n	800848a <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008474:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008488:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 0201 	bic.w	r2, r2, #1
 8008498:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00a      	beq.n	80084bc <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	430a      	orrs	r2, r1
 80084ba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	40013000 	.word	0x40013000
 80084dc:	40003800 	.word	0x40003800
 80084e0:	40003c00 	.word	0x40003c00

080084e4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f0:	095b      	lsrs	r3, r3, #5
 80084f2:	3301      	adds	r3, #1
 80084f4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	3301      	adds	r3, #1
 80084fc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	3307      	adds	r3, #7
 8008502:	08db      	lsrs	r3, r3, #3
 8008504:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	fb02 f303 	mul.w	r3, r2, r3
}
 800850e:	4618      	mov	r0, r3
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b082      	sub	sp, #8
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d101      	bne.n	800852c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e049      	b.n	80085c0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008532:	b2db      	uxtb	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	d106      	bne.n	8008546 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7f9 ffc5 	bl	80024d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2202      	movs	r2, #2
 800854a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	3304      	adds	r3, #4
 8008556:	4619      	mov	r1, r3
 8008558:	4610      	mov	r0, r2
 800855a:	f000 fe1f 	bl	800919c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d001      	beq.n	80085e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e04f      	b.n	8008680 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68da      	ldr	r2, [r3, #12]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f042 0201 	orr.w	r2, r2, #1
 80085f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a23      	ldr	r2, [pc, #140]	; (800868c <HAL_TIM_Base_Start_IT+0xc4>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d01d      	beq.n	800863e <HAL_TIM_Base_Start_IT+0x76>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800860a:	d018      	beq.n	800863e <HAL_TIM_Base_Start_IT+0x76>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a1f      	ldr	r2, [pc, #124]	; (8008690 <HAL_TIM_Base_Start_IT+0xc8>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d013      	beq.n	800863e <HAL_TIM_Base_Start_IT+0x76>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a1e      	ldr	r2, [pc, #120]	; (8008694 <HAL_TIM_Base_Start_IT+0xcc>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d00e      	beq.n	800863e <HAL_TIM_Base_Start_IT+0x76>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a1c      	ldr	r2, [pc, #112]	; (8008698 <HAL_TIM_Base_Start_IT+0xd0>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d009      	beq.n	800863e <HAL_TIM_Base_Start_IT+0x76>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a1b      	ldr	r2, [pc, #108]	; (800869c <HAL_TIM_Base_Start_IT+0xd4>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d004      	beq.n	800863e <HAL_TIM_Base_Start_IT+0x76>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a19      	ldr	r2, [pc, #100]	; (80086a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d115      	bne.n	800866a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	689a      	ldr	r2, [r3, #8]
 8008644:	4b17      	ldr	r3, [pc, #92]	; (80086a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008646:	4013      	ands	r3, r2
 8008648:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2b06      	cmp	r3, #6
 800864e:	d015      	beq.n	800867c <HAL_TIM_Base_Start_IT+0xb4>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008656:	d011      	beq.n	800867c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f042 0201 	orr.w	r2, r2, #1
 8008666:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008668:	e008      	b.n	800867c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f042 0201 	orr.w	r2, r2, #1
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	e000      	b.n	800867e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800867c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr
 800868c:	40010000 	.word	0x40010000
 8008690:	40000400 	.word	0x40000400
 8008694:	40000800 	.word	0x40000800
 8008698:	40000c00 	.word	0x40000c00
 800869c:	40010400 	.word	0x40010400
 80086a0:	40001800 	.word	0x40001800
 80086a4:	00010007 	.word	0x00010007

080086a8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68da      	ldr	r2, [r3, #12]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f022 0201 	bic.w	r2, r2, #1
 80086be:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	6a1a      	ldr	r2, [r3, #32]
 80086c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80086ca:	4013      	ands	r3, r2
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10f      	bne.n	80086f0 <HAL_TIM_Base_Stop_IT+0x48>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6a1a      	ldr	r2, [r3, #32]
 80086d6:	f240 4344 	movw	r3, #1092	; 0x444
 80086da:	4013      	ands	r3, r2
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d107      	bne.n	80086f0 <HAL_TIM_Base_Stop_IT+0x48>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f022 0201 	bic.w	r2, r2, #1
 80086ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	370c      	adds	r7, #12
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e049      	b.n	80087ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b00      	cmp	r3, #0
 8008722:	d106      	bne.n	8008732 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f841 	bl	80087b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2202      	movs	r2, #2
 8008736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	3304      	adds	r3, #4
 8008742:	4619      	mov	r1, r3
 8008744:	4610      	mov	r0, r2
 8008746:	f000 fd29 	bl	800919c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2201      	movs	r2, #1
 800879e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d109      	bne.n	80087ec <HAL_TIM_PWM_Start+0x24>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	bf14      	ite	ne
 80087e4:	2301      	movne	r3, #1
 80087e6:	2300      	moveq	r3, #0
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	e03c      	b.n	8008866 <HAL_TIM_PWM_Start+0x9e>
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	2b04      	cmp	r3, #4
 80087f0:	d109      	bne.n	8008806 <HAL_TIM_PWM_Start+0x3e>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	bf14      	ite	ne
 80087fe:	2301      	movne	r3, #1
 8008800:	2300      	moveq	r3, #0
 8008802:	b2db      	uxtb	r3, r3
 8008804:	e02f      	b.n	8008866 <HAL_TIM_PWM_Start+0x9e>
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	2b08      	cmp	r3, #8
 800880a:	d109      	bne.n	8008820 <HAL_TIM_PWM_Start+0x58>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b01      	cmp	r3, #1
 8008816:	bf14      	ite	ne
 8008818:	2301      	movne	r3, #1
 800881a:	2300      	moveq	r3, #0
 800881c:	b2db      	uxtb	r3, r3
 800881e:	e022      	b.n	8008866 <HAL_TIM_PWM_Start+0x9e>
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	2b0c      	cmp	r3, #12
 8008824:	d109      	bne.n	800883a <HAL_TIM_PWM_Start+0x72>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800882c:	b2db      	uxtb	r3, r3
 800882e:	2b01      	cmp	r3, #1
 8008830:	bf14      	ite	ne
 8008832:	2301      	movne	r3, #1
 8008834:	2300      	moveq	r3, #0
 8008836:	b2db      	uxtb	r3, r3
 8008838:	e015      	b.n	8008866 <HAL_TIM_PWM_Start+0x9e>
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	2b10      	cmp	r3, #16
 800883e:	d109      	bne.n	8008854 <HAL_TIM_PWM_Start+0x8c>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008846:	b2db      	uxtb	r3, r3
 8008848:	2b01      	cmp	r3, #1
 800884a:	bf14      	ite	ne
 800884c:	2301      	movne	r3, #1
 800884e:	2300      	moveq	r3, #0
 8008850:	b2db      	uxtb	r3, r3
 8008852:	e008      	b.n	8008866 <HAL_TIM_PWM_Start+0x9e>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800885a:	b2db      	uxtb	r3, r3
 800885c:	2b01      	cmp	r3, #1
 800885e:	bf14      	ite	ne
 8008860:	2301      	movne	r3, #1
 8008862:	2300      	moveq	r3, #0
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d001      	beq.n	800886e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e09c      	b.n	80089a8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d104      	bne.n	800887e <HAL_TIM_PWM_Start+0xb6>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2202      	movs	r2, #2
 8008878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800887c:	e023      	b.n	80088c6 <HAL_TIM_PWM_Start+0xfe>
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	2b04      	cmp	r3, #4
 8008882:	d104      	bne.n	800888e <HAL_TIM_PWM_Start+0xc6>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2202      	movs	r2, #2
 8008888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800888c:	e01b      	b.n	80088c6 <HAL_TIM_PWM_Start+0xfe>
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	2b08      	cmp	r3, #8
 8008892:	d104      	bne.n	800889e <HAL_TIM_PWM_Start+0xd6>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2202      	movs	r2, #2
 8008898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800889c:	e013      	b.n	80088c6 <HAL_TIM_PWM_Start+0xfe>
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	2b0c      	cmp	r3, #12
 80088a2:	d104      	bne.n	80088ae <HAL_TIM_PWM_Start+0xe6>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2202      	movs	r2, #2
 80088a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088ac:	e00b      	b.n	80088c6 <HAL_TIM_PWM_Start+0xfe>
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	2b10      	cmp	r3, #16
 80088b2:	d104      	bne.n	80088be <HAL_TIM_PWM_Start+0xf6>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2202      	movs	r2, #2
 80088b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088bc:	e003      	b.n	80088c6 <HAL_TIM_PWM_Start+0xfe>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2202      	movs	r2, #2
 80088c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2201      	movs	r2, #1
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f001 f86a 	bl	80099a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a35      	ldr	r2, [pc, #212]	; (80089b0 <HAL_TIM_PWM_Start+0x1e8>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d013      	beq.n	8008906 <HAL_TIM_PWM_Start+0x13e>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a34      	ldr	r2, [pc, #208]	; (80089b4 <HAL_TIM_PWM_Start+0x1ec>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d00e      	beq.n	8008906 <HAL_TIM_PWM_Start+0x13e>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a32      	ldr	r2, [pc, #200]	; (80089b8 <HAL_TIM_PWM_Start+0x1f0>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d009      	beq.n	8008906 <HAL_TIM_PWM_Start+0x13e>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a31      	ldr	r2, [pc, #196]	; (80089bc <HAL_TIM_PWM_Start+0x1f4>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d004      	beq.n	8008906 <HAL_TIM_PWM_Start+0x13e>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a2f      	ldr	r2, [pc, #188]	; (80089c0 <HAL_TIM_PWM_Start+0x1f8>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d101      	bne.n	800890a <HAL_TIM_PWM_Start+0x142>
 8008906:	2301      	movs	r3, #1
 8008908:	e000      	b.n	800890c <HAL_TIM_PWM_Start+0x144>
 800890a:	2300      	movs	r3, #0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d007      	beq.n	8008920 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800891e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a22      	ldr	r2, [pc, #136]	; (80089b0 <HAL_TIM_PWM_Start+0x1e8>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d01d      	beq.n	8008966 <HAL_TIM_PWM_Start+0x19e>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008932:	d018      	beq.n	8008966 <HAL_TIM_PWM_Start+0x19e>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a22      	ldr	r2, [pc, #136]	; (80089c4 <HAL_TIM_PWM_Start+0x1fc>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d013      	beq.n	8008966 <HAL_TIM_PWM_Start+0x19e>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a21      	ldr	r2, [pc, #132]	; (80089c8 <HAL_TIM_PWM_Start+0x200>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d00e      	beq.n	8008966 <HAL_TIM_PWM_Start+0x19e>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a1f      	ldr	r2, [pc, #124]	; (80089cc <HAL_TIM_PWM_Start+0x204>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d009      	beq.n	8008966 <HAL_TIM_PWM_Start+0x19e>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a17      	ldr	r2, [pc, #92]	; (80089b4 <HAL_TIM_PWM_Start+0x1ec>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d004      	beq.n	8008966 <HAL_TIM_PWM_Start+0x19e>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a1b      	ldr	r2, [pc, #108]	; (80089d0 <HAL_TIM_PWM_Start+0x208>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d115      	bne.n	8008992 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	689a      	ldr	r2, [r3, #8]
 800896c:	4b19      	ldr	r3, [pc, #100]	; (80089d4 <HAL_TIM_PWM_Start+0x20c>)
 800896e:	4013      	ands	r3, r2
 8008970:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2b06      	cmp	r3, #6
 8008976:	d015      	beq.n	80089a4 <HAL_TIM_PWM_Start+0x1dc>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800897e:	d011      	beq.n	80089a4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f042 0201 	orr.w	r2, r2, #1
 800898e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008990:	e008      	b.n	80089a4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f042 0201 	orr.w	r2, r2, #1
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	e000      	b.n	80089a6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	40010000 	.word	0x40010000
 80089b4:	40010400 	.word	0x40010400
 80089b8:	40014000 	.word	0x40014000
 80089bc:	40014400 	.word	0x40014400
 80089c0:	40014800 	.word	0x40014800
 80089c4:	40000400 	.word	0x40000400
 80089c8:	40000800 	.word	0x40000800
 80089cc:	40000c00 	.word	0x40000c00
 80089d0:	40001800 	.word	0x40001800
 80089d4:	00010007 	.word	0x00010007

080089d8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2200      	movs	r2, #0
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f000 ffdc 	bl	80099a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a3e      	ldr	r2, [pc, #248]	; (8008af0 <HAL_TIM_PWM_Stop+0x118>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d013      	beq.n	8008a22 <HAL_TIM_PWM_Stop+0x4a>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a3d      	ldr	r2, [pc, #244]	; (8008af4 <HAL_TIM_PWM_Stop+0x11c>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d00e      	beq.n	8008a22 <HAL_TIM_PWM_Stop+0x4a>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a3b      	ldr	r2, [pc, #236]	; (8008af8 <HAL_TIM_PWM_Stop+0x120>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d009      	beq.n	8008a22 <HAL_TIM_PWM_Stop+0x4a>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a3a      	ldr	r2, [pc, #232]	; (8008afc <HAL_TIM_PWM_Stop+0x124>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d004      	beq.n	8008a22 <HAL_TIM_PWM_Stop+0x4a>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a38      	ldr	r2, [pc, #224]	; (8008b00 <HAL_TIM_PWM_Stop+0x128>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d101      	bne.n	8008a26 <HAL_TIM_PWM_Stop+0x4e>
 8008a22:	2301      	movs	r3, #1
 8008a24:	e000      	b.n	8008a28 <HAL_TIM_PWM_Stop+0x50>
 8008a26:	2300      	movs	r3, #0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d017      	beq.n	8008a5c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6a1a      	ldr	r2, [r3, #32]
 8008a32:	f241 1311 	movw	r3, #4369	; 0x1111
 8008a36:	4013      	ands	r3, r2
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10f      	bne.n	8008a5c <HAL_TIM_PWM_Stop+0x84>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6a1a      	ldr	r2, [r3, #32]
 8008a42:	f240 4344 	movw	r3, #1092	; 0x444
 8008a46:	4013      	ands	r3, r2
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d107      	bne.n	8008a5c <HAL_TIM_PWM_Stop+0x84>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a5a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6a1a      	ldr	r2, [r3, #32]
 8008a62:	f241 1311 	movw	r3, #4369	; 0x1111
 8008a66:	4013      	ands	r3, r2
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10f      	bne.n	8008a8c <HAL_TIM_PWM_Stop+0xb4>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	6a1a      	ldr	r2, [r3, #32]
 8008a72:	f240 4344 	movw	r3, #1092	; 0x444
 8008a76:	4013      	ands	r3, r2
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d107      	bne.n	8008a8c <HAL_TIM_PWM_Stop+0xb4>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f022 0201 	bic.w	r2, r2, #1
 8008a8a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d104      	bne.n	8008a9c <HAL_TIM_PWM_Stop+0xc4>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a9a:	e023      	b.n	8008ae4 <HAL_TIM_PWM_Stop+0x10c>
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	2b04      	cmp	r3, #4
 8008aa0:	d104      	bne.n	8008aac <HAL_TIM_PWM_Stop+0xd4>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008aaa:	e01b      	b.n	8008ae4 <HAL_TIM_PWM_Stop+0x10c>
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	2b08      	cmp	r3, #8
 8008ab0:	d104      	bne.n	8008abc <HAL_TIM_PWM_Stop+0xe4>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008aba:	e013      	b.n	8008ae4 <HAL_TIM_PWM_Stop+0x10c>
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	2b0c      	cmp	r3, #12
 8008ac0:	d104      	bne.n	8008acc <HAL_TIM_PWM_Stop+0xf4>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008aca:	e00b      	b.n	8008ae4 <HAL_TIM_PWM_Stop+0x10c>
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	2b10      	cmp	r3, #16
 8008ad0:	d104      	bne.n	8008adc <HAL_TIM_PWM_Stop+0x104>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ada:	e003      	b.n	8008ae4 <HAL_TIM_PWM_Stop+0x10c>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	40010000 	.word	0x40010000
 8008af4:	40010400 	.word	0x40010400
 8008af8:	40014000 	.word	0x40014000
 8008afc:	40014400 	.word	0x40014400
 8008b00:	40014800 	.word	0x40014800

08008b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	f003 0302 	and.w	r3, r3, #2
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d122      	bne.n	8008b60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	f003 0302 	and.w	r3, r3, #2
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d11b      	bne.n	8008b60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f06f 0202 	mvn.w	r2, #2
 8008b30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2201      	movs	r2, #1
 8008b36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	f003 0303 	and.w	r3, r3, #3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d003      	beq.n	8008b4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fb0a 	bl	8009160 <HAL_TIM_IC_CaptureCallback>
 8008b4c:	e005      	b.n	8008b5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fafc 	bl	800914c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 fb0d 	bl	8009174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	f003 0304 	and.w	r3, r3, #4
 8008b6a:	2b04      	cmp	r3, #4
 8008b6c:	d122      	bne.n	8008bb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	f003 0304 	and.w	r3, r3, #4
 8008b78:	2b04      	cmp	r3, #4
 8008b7a:	d11b      	bne.n	8008bb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f06f 0204 	mvn.w	r2, #4
 8008b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2202      	movs	r2, #2
 8008b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d003      	beq.n	8008ba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fae0 	bl	8009160 <HAL_TIM_IC_CaptureCallback>
 8008ba0:	e005      	b.n	8008bae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fad2 	bl	800914c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fae3 	bl	8009174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	f003 0308 	and.w	r3, r3, #8
 8008bbe:	2b08      	cmp	r3, #8
 8008bc0:	d122      	bne.n	8008c08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	f003 0308 	and.w	r3, r3, #8
 8008bcc:	2b08      	cmp	r3, #8
 8008bce:	d11b      	bne.n	8008c08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f06f 0208 	mvn.w	r2, #8
 8008bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2204      	movs	r2, #4
 8008bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	69db      	ldr	r3, [r3, #28]
 8008be6:	f003 0303 	and.w	r3, r3, #3
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d003      	beq.n	8008bf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fab6 	bl	8009160 <HAL_TIM_IC_CaptureCallback>
 8008bf4:	e005      	b.n	8008c02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 faa8 	bl	800914c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fab9 	bl	8009174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	f003 0310 	and.w	r3, r3, #16
 8008c12:	2b10      	cmp	r3, #16
 8008c14:	d122      	bne.n	8008c5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	f003 0310 	and.w	r3, r3, #16
 8008c20:	2b10      	cmp	r3, #16
 8008c22:	d11b      	bne.n	8008c5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f06f 0210 	mvn.w	r2, #16
 8008c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2208      	movs	r2, #8
 8008c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	69db      	ldr	r3, [r3, #28]
 8008c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d003      	beq.n	8008c4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fa8c 	bl	8009160 <HAL_TIM_IC_CaptureCallback>
 8008c48:	e005      	b.n	8008c56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fa7e 	bl	800914c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fa8f 	bl	8009174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	f003 0301 	and.w	r3, r3, #1
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d10e      	bne.n	8008c88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	f003 0301 	and.w	r3, r3, #1
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d107      	bne.n	8008c88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f06f 0201 	mvn.w	r2, #1
 8008c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7f9 fa30 	bl	80020e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c92:	2b80      	cmp	r3, #128	; 0x80
 8008c94:	d10e      	bne.n	8008cb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca0:	2b80      	cmp	r3, #128	; 0x80
 8008ca2:	d107      	bne.n	8008cb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 ffb0 	bl	8009c14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cc2:	d10e      	bne.n	8008ce2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cce:	2b80      	cmp	r3, #128	; 0x80
 8008cd0:	d107      	bne.n	8008ce2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 ffa3 	bl	8009c28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cec:	2b40      	cmp	r3, #64	; 0x40
 8008cee:	d10e      	bne.n	8008d0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cfa:	2b40      	cmp	r3, #64	; 0x40
 8008cfc:	d107      	bne.n	8008d0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fa3d 	bl	8009188 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	f003 0320 	and.w	r3, r3, #32
 8008d18:	2b20      	cmp	r3, #32
 8008d1a:	d10e      	bne.n	8008d3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	f003 0320 	and.w	r3, r3, #32
 8008d26:	2b20      	cmp	r3, #32
 8008d28:	d107      	bne.n	8008d3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f06f 0220 	mvn.w	r2, #32
 8008d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 ff63 	bl	8009c00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d3a:	bf00      	nop
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
	...

08008d44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d101      	bne.n	8008d5e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	e0fd      	b.n	8008f5a <HAL_TIM_PWM_ConfigChannel+0x216>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2b14      	cmp	r3, #20
 8008d6a:	f200 80f0 	bhi.w	8008f4e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008d6e:	a201      	add	r2, pc, #4	; (adr r2, 8008d74 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d74:	08008dc9 	.word	0x08008dc9
 8008d78:	08008f4f 	.word	0x08008f4f
 8008d7c:	08008f4f 	.word	0x08008f4f
 8008d80:	08008f4f 	.word	0x08008f4f
 8008d84:	08008e09 	.word	0x08008e09
 8008d88:	08008f4f 	.word	0x08008f4f
 8008d8c:	08008f4f 	.word	0x08008f4f
 8008d90:	08008f4f 	.word	0x08008f4f
 8008d94:	08008e4b 	.word	0x08008e4b
 8008d98:	08008f4f 	.word	0x08008f4f
 8008d9c:	08008f4f 	.word	0x08008f4f
 8008da0:	08008f4f 	.word	0x08008f4f
 8008da4:	08008e8b 	.word	0x08008e8b
 8008da8:	08008f4f 	.word	0x08008f4f
 8008dac:	08008f4f 	.word	0x08008f4f
 8008db0:	08008f4f 	.word	0x08008f4f
 8008db4:	08008ecd 	.word	0x08008ecd
 8008db8:	08008f4f 	.word	0x08008f4f
 8008dbc:	08008f4f 	.word	0x08008f4f
 8008dc0:	08008f4f 	.word	0x08008f4f
 8008dc4:	08008f0d 	.word	0x08008f0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68b9      	ldr	r1, [r7, #8]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f000 fa7e 	bl	80092d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	699a      	ldr	r2, [r3, #24]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f042 0208 	orr.w	r2, r2, #8
 8008de2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	699a      	ldr	r2, [r3, #24]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f022 0204 	bic.w	r2, r2, #4
 8008df2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	6999      	ldr	r1, [r3, #24]
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	691a      	ldr	r2, [r3, #16]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	430a      	orrs	r2, r1
 8008e04:	619a      	str	r2, [r3, #24]
      break;
 8008e06:	e0a3      	b.n	8008f50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68b9      	ldr	r1, [r7, #8]
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f000 faee 	bl	80093f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	699a      	ldr	r2, [r3, #24]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	699a      	ldr	r2, [r3, #24]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	6999      	ldr	r1, [r3, #24]
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	021a      	lsls	r2, r3, #8
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	430a      	orrs	r2, r1
 8008e46:	619a      	str	r2, [r3, #24]
      break;
 8008e48:	e082      	b.n	8008f50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68b9      	ldr	r1, [r7, #8]
 8008e50:	4618      	mov	r0, r3
 8008e52:	f000 fb57 	bl	8009504 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	69da      	ldr	r2, [r3, #28]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f042 0208 	orr.w	r2, r2, #8
 8008e64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	69da      	ldr	r2, [r3, #28]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f022 0204 	bic.w	r2, r2, #4
 8008e74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	69d9      	ldr	r1, [r3, #28]
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	691a      	ldr	r2, [r3, #16]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	430a      	orrs	r2, r1
 8008e86:	61da      	str	r2, [r3, #28]
      break;
 8008e88:	e062      	b.n	8008f50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68b9      	ldr	r1, [r7, #8]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 fbbd 	bl	8009610 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	69da      	ldr	r2, [r3, #28]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	69da      	ldr	r2, [r3, #28]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	69d9      	ldr	r1, [r3, #28]
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	021a      	lsls	r2, r3, #8
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	430a      	orrs	r2, r1
 8008ec8:	61da      	str	r2, [r3, #28]
      break;
 8008eca:	e041      	b.n	8008f50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68b9      	ldr	r1, [r7, #8]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f000 fc04 	bl	80096e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f042 0208 	orr.w	r2, r2, #8
 8008ee6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f022 0204 	bic.w	r2, r2, #4
 8008ef6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	691a      	ldr	r2, [r3, #16]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	430a      	orrs	r2, r1
 8008f08:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008f0a:	e021      	b.n	8008f50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68b9      	ldr	r1, [r7, #8]
 8008f12:	4618      	mov	r0, r3
 8008f14:	f000 fc46 	bl	80097a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	021a      	lsls	r2, r3, #8
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	430a      	orrs	r2, r1
 8008f4a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008f4c:	e000      	b.n	8008f50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008f4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop

08008f64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d101      	bne.n	8008f7c <HAL_TIM_ConfigClockSource+0x18>
 8008f78:	2302      	movs	r3, #2
 8008f7a:	e0db      	b.n	8009134 <HAL_TIM_ConfigClockSource+0x1d0>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2202      	movs	r2, #2
 8008f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	4b69      	ldr	r3, [pc, #420]	; (800913c <HAL_TIM_ConfigClockSource+0x1d8>)
 8008f98:	4013      	ands	r3, r2
 8008f9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fa2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a63      	ldr	r2, [pc, #396]	; (8009140 <HAL_TIM_ConfigClockSource+0x1dc>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	f000 80a9 	beq.w	800910a <HAL_TIM_ConfigClockSource+0x1a6>
 8008fb8:	4a61      	ldr	r2, [pc, #388]	; (8009140 <HAL_TIM_ConfigClockSource+0x1dc>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	f200 80ae 	bhi.w	800911c <HAL_TIM_ConfigClockSource+0x1b8>
 8008fc0:	4a60      	ldr	r2, [pc, #384]	; (8009144 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	f000 80a1 	beq.w	800910a <HAL_TIM_ConfigClockSource+0x1a6>
 8008fc8:	4a5e      	ldr	r2, [pc, #376]	; (8009144 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	f200 80a6 	bhi.w	800911c <HAL_TIM_ConfigClockSource+0x1b8>
 8008fd0:	4a5d      	ldr	r2, [pc, #372]	; (8009148 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	f000 8099 	beq.w	800910a <HAL_TIM_ConfigClockSource+0x1a6>
 8008fd8:	4a5b      	ldr	r2, [pc, #364]	; (8009148 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	f200 809e 	bhi.w	800911c <HAL_TIM_ConfigClockSource+0x1b8>
 8008fe0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008fe4:	f000 8091 	beq.w	800910a <HAL_TIM_ConfigClockSource+0x1a6>
 8008fe8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008fec:	f200 8096 	bhi.w	800911c <HAL_TIM_ConfigClockSource+0x1b8>
 8008ff0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ff4:	f000 8089 	beq.w	800910a <HAL_TIM_ConfigClockSource+0x1a6>
 8008ff8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ffc:	f200 808e 	bhi.w	800911c <HAL_TIM_ConfigClockSource+0x1b8>
 8009000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009004:	d03e      	beq.n	8009084 <HAL_TIM_ConfigClockSource+0x120>
 8009006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800900a:	f200 8087 	bhi.w	800911c <HAL_TIM_ConfigClockSource+0x1b8>
 800900e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009012:	f000 8085 	beq.w	8009120 <HAL_TIM_ConfigClockSource+0x1bc>
 8009016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800901a:	d87f      	bhi.n	800911c <HAL_TIM_ConfigClockSource+0x1b8>
 800901c:	2b70      	cmp	r3, #112	; 0x70
 800901e:	d01a      	beq.n	8009056 <HAL_TIM_ConfigClockSource+0xf2>
 8009020:	2b70      	cmp	r3, #112	; 0x70
 8009022:	d87b      	bhi.n	800911c <HAL_TIM_ConfigClockSource+0x1b8>
 8009024:	2b60      	cmp	r3, #96	; 0x60
 8009026:	d050      	beq.n	80090ca <HAL_TIM_ConfigClockSource+0x166>
 8009028:	2b60      	cmp	r3, #96	; 0x60
 800902a:	d877      	bhi.n	800911c <HAL_TIM_ConfigClockSource+0x1b8>
 800902c:	2b50      	cmp	r3, #80	; 0x50
 800902e:	d03c      	beq.n	80090aa <HAL_TIM_ConfigClockSource+0x146>
 8009030:	2b50      	cmp	r3, #80	; 0x50
 8009032:	d873      	bhi.n	800911c <HAL_TIM_ConfigClockSource+0x1b8>
 8009034:	2b40      	cmp	r3, #64	; 0x40
 8009036:	d058      	beq.n	80090ea <HAL_TIM_ConfigClockSource+0x186>
 8009038:	2b40      	cmp	r3, #64	; 0x40
 800903a:	d86f      	bhi.n	800911c <HAL_TIM_ConfigClockSource+0x1b8>
 800903c:	2b30      	cmp	r3, #48	; 0x30
 800903e:	d064      	beq.n	800910a <HAL_TIM_ConfigClockSource+0x1a6>
 8009040:	2b30      	cmp	r3, #48	; 0x30
 8009042:	d86b      	bhi.n	800911c <HAL_TIM_ConfigClockSource+0x1b8>
 8009044:	2b20      	cmp	r3, #32
 8009046:	d060      	beq.n	800910a <HAL_TIM_ConfigClockSource+0x1a6>
 8009048:	2b20      	cmp	r3, #32
 800904a:	d867      	bhi.n	800911c <HAL_TIM_ConfigClockSource+0x1b8>
 800904c:	2b00      	cmp	r3, #0
 800904e:	d05c      	beq.n	800910a <HAL_TIM_ConfigClockSource+0x1a6>
 8009050:	2b10      	cmp	r3, #16
 8009052:	d05a      	beq.n	800910a <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009054:	e062      	b.n	800911c <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6818      	ldr	r0, [r3, #0]
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	6899      	ldr	r1, [r3, #8]
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	685a      	ldr	r2, [r3, #4]
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	f000 fc7f 	bl	8009968 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009078:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	609a      	str	r2, [r3, #8]
      break;
 8009082:	e04e      	b.n	8009122 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6818      	ldr	r0, [r3, #0]
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	6899      	ldr	r1, [r3, #8]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	685a      	ldr	r2, [r3, #4]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	f000 fc68 	bl	8009968 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	689a      	ldr	r2, [r3, #8]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090a6:	609a      	str	r2, [r3, #8]
      break;
 80090a8:	e03b      	b.n	8009122 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6818      	ldr	r0, [r3, #0]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	6859      	ldr	r1, [r3, #4]
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	461a      	mov	r2, r3
 80090b8:	f000 fbd8 	bl	800986c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2150      	movs	r1, #80	; 0x50
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 fc32 	bl	800992c <TIM_ITRx_SetConfig>
      break;
 80090c8:	e02b      	b.n	8009122 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6818      	ldr	r0, [r3, #0]
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	6859      	ldr	r1, [r3, #4]
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	461a      	mov	r2, r3
 80090d8:	f000 fbf7 	bl	80098ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2160      	movs	r1, #96	; 0x60
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 fc22 	bl	800992c <TIM_ITRx_SetConfig>
      break;
 80090e8:	e01b      	b.n	8009122 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6818      	ldr	r0, [r3, #0]
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	6859      	ldr	r1, [r3, #4]
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	461a      	mov	r2, r3
 80090f8:	f000 fbb8 	bl	800986c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2140      	movs	r1, #64	; 0x40
 8009102:	4618      	mov	r0, r3
 8009104:	f000 fc12 	bl	800992c <TIM_ITRx_SetConfig>
      break;
 8009108:	e00b      	b.n	8009122 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4619      	mov	r1, r3
 8009114:	4610      	mov	r0, r2
 8009116:	f000 fc09 	bl	800992c <TIM_ITRx_SetConfig>
        break;
 800911a:	e002      	b.n	8009122 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800911c:	bf00      	nop
 800911e:	e000      	b.n	8009122 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8009120:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2201      	movs	r2, #1
 8009126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	ffceff88 	.word	0xffceff88
 8009140:	00100040 	.word	0x00100040
 8009144:	00100030 	.word	0x00100030
 8009148:	00100020 	.word	0x00100020

0800914c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009168:	bf00      	nop
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800917c:	bf00      	nop
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800919c:	b480      	push	{r7}
 800919e:	b085      	sub	sp, #20
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a40      	ldr	r2, [pc, #256]	; (80092b0 <TIM_Base_SetConfig+0x114>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d013      	beq.n	80091dc <TIM_Base_SetConfig+0x40>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ba:	d00f      	beq.n	80091dc <TIM_Base_SetConfig+0x40>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a3d      	ldr	r2, [pc, #244]	; (80092b4 <TIM_Base_SetConfig+0x118>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d00b      	beq.n	80091dc <TIM_Base_SetConfig+0x40>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a3c      	ldr	r2, [pc, #240]	; (80092b8 <TIM_Base_SetConfig+0x11c>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d007      	beq.n	80091dc <TIM_Base_SetConfig+0x40>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a3b      	ldr	r2, [pc, #236]	; (80092bc <TIM_Base_SetConfig+0x120>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d003      	beq.n	80091dc <TIM_Base_SetConfig+0x40>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a3a      	ldr	r2, [pc, #232]	; (80092c0 <TIM_Base_SetConfig+0x124>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d108      	bne.n	80091ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a2f      	ldr	r2, [pc, #188]	; (80092b0 <TIM_Base_SetConfig+0x114>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d01f      	beq.n	8009236 <TIM_Base_SetConfig+0x9a>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091fc:	d01b      	beq.n	8009236 <TIM_Base_SetConfig+0x9a>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a2c      	ldr	r2, [pc, #176]	; (80092b4 <TIM_Base_SetConfig+0x118>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d017      	beq.n	8009236 <TIM_Base_SetConfig+0x9a>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a2b      	ldr	r2, [pc, #172]	; (80092b8 <TIM_Base_SetConfig+0x11c>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d013      	beq.n	8009236 <TIM_Base_SetConfig+0x9a>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a2a      	ldr	r2, [pc, #168]	; (80092bc <TIM_Base_SetConfig+0x120>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d00f      	beq.n	8009236 <TIM_Base_SetConfig+0x9a>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a29      	ldr	r2, [pc, #164]	; (80092c0 <TIM_Base_SetConfig+0x124>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d00b      	beq.n	8009236 <TIM_Base_SetConfig+0x9a>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a28      	ldr	r2, [pc, #160]	; (80092c4 <TIM_Base_SetConfig+0x128>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d007      	beq.n	8009236 <TIM_Base_SetConfig+0x9a>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a27      	ldr	r2, [pc, #156]	; (80092c8 <TIM_Base_SetConfig+0x12c>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d003      	beq.n	8009236 <TIM_Base_SetConfig+0x9a>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a26      	ldr	r2, [pc, #152]	; (80092cc <TIM_Base_SetConfig+0x130>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d108      	bne.n	8009248 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800923c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	4313      	orrs	r3, r2
 8009246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	695b      	ldr	r3, [r3, #20]
 8009252:	4313      	orrs	r3, r2
 8009254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	689a      	ldr	r2, [r3, #8]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a10      	ldr	r2, [pc, #64]	; (80092b0 <TIM_Base_SetConfig+0x114>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d00f      	beq.n	8009294 <TIM_Base_SetConfig+0xf8>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a12      	ldr	r2, [pc, #72]	; (80092c0 <TIM_Base_SetConfig+0x124>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d00b      	beq.n	8009294 <TIM_Base_SetConfig+0xf8>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a11      	ldr	r2, [pc, #68]	; (80092c4 <TIM_Base_SetConfig+0x128>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d007      	beq.n	8009294 <TIM_Base_SetConfig+0xf8>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a10      	ldr	r2, [pc, #64]	; (80092c8 <TIM_Base_SetConfig+0x12c>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d003      	beq.n	8009294 <TIM_Base_SetConfig+0xf8>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a0f      	ldr	r2, [pc, #60]	; (80092cc <TIM_Base_SetConfig+0x130>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d103      	bne.n	800929c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	691a      	ldr	r2, [r3, #16]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	615a      	str	r2, [r3, #20]
}
 80092a2:	bf00      	nop
 80092a4:	3714      	adds	r7, #20
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	40010000 	.word	0x40010000
 80092b4:	40000400 	.word	0x40000400
 80092b8:	40000800 	.word	0x40000800
 80092bc:	40000c00 	.word	0x40000c00
 80092c0:	40010400 	.word	0x40010400
 80092c4:	40014000 	.word	0x40014000
 80092c8:	40014400 	.word	0x40014400
 80092cc:	40014800 	.word	0x40014800

080092d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b087      	sub	sp, #28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	f023 0201 	bic.w	r2, r3, #1
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a1b      	ldr	r3, [r3, #32]
 80092ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	4b37      	ldr	r3, [pc, #220]	; (80093d8 <TIM_OC1_SetConfig+0x108>)
 80092fc:	4013      	ands	r3, r2
 80092fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f023 0303 	bic.w	r3, r3, #3
 8009306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	4313      	orrs	r3, r2
 8009310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f023 0302 	bic.w	r3, r3, #2
 8009318:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	697a      	ldr	r2, [r7, #20]
 8009320:	4313      	orrs	r3, r2
 8009322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a2d      	ldr	r2, [pc, #180]	; (80093dc <TIM_OC1_SetConfig+0x10c>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d00f      	beq.n	800934c <TIM_OC1_SetConfig+0x7c>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a2c      	ldr	r2, [pc, #176]	; (80093e0 <TIM_OC1_SetConfig+0x110>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d00b      	beq.n	800934c <TIM_OC1_SetConfig+0x7c>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a2b      	ldr	r2, [pc, #172]	; (80093e4 <TIM_OC1_SetConfig+0x114>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d007      	beq.n	800934c <TIM_OC1_SetConfig+0x7c>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a2a      	ldr	r2, [pc, #168]	; (80093e8 <TIM_OC1_SetConfig+0x118>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d003      	beq.n	800934c <TIM_OC1_SetConfig+0x7c>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a29      	ldr	r2, [pc, #164]	; (80093ec <TIM_OC1_SetConfig+0x11c>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d10c      	bne.n	8009366 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	f023 0308 	bic.w	r3, r3, #8
 8009352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	697a      	ldr	r2, [r7, #20]
 800935a:	4313      	orrs	r3, r2
 800935c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	f023 0304 	bic.w	r3, r3, #4
 8009364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a1c      	ldr	r2, [pc, #112]	; (80093dc <TIM_OC1_SetConfig+0x10c>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d00f      	beq.n	800938e <TIM_OC1_SetConfig+0xbe>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a1b      	ldr	r2, [pc, #108]	; (80093e0 <TIM_OC1_SetConfig+0x110>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d00b      	beq.n	800938e <TIM_OC1_SetConfig+0xbe>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a1a      	ldr	r2, [pc, #104]	; (80093e4 <TIM_OC1_SetConfig+0x114>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d007      	beq.n	800938e <TIM_OC1_SetConfig+0xbe>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a19      	ldr	r2, [pc, #100]	; (80093e8 <TIM_OC1_SetConfig+0x118>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d003      	beq.n	800938e <TIM_OC1_SetConfig+0xbe>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a18      	ldr	r2, [pc, #96]	; (80093ec <TIM_OC1_SetConfig+0x11c>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d111      	bne.n	80093b2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800939c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	693a      	ldr	r2, [r7, #16]
 80093a4:	4313      	orrs	r3, r2
 80093a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	699b      	ldr	r3, [r3, #24]
 80093ac:	693a      	ldr	r2, [r7, #16]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	693a      	ldr	r2, [r7, #16]
 80093b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	685a      	ldr	r2, [r3, #4]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	697a      	ldr	r2, [r7, #20]
 80093ca:	621a      	str	r2, [r3, #32]
}
 80093cc:	bf00      	nop
 80093ce:	371c      	adds	r7, #28
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr
 80093d8:	fffeff8f 	.word	0xfffeff8f
 80093dc:	40010000 	.word	0x40010000
 80093e0:	40010400 	.word	0x40010400
 80093e4:	40014000 	.word	0x40014000
 80093e8:	40014400 	.word	0x40014400
 80093ec:	40014800 	.word	0x40014800

080093f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b087      	sub	sp, #28
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	f023 0210 	bic.w	r2, r3, #16
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a1b      	ldr	r3, [r3, #32]
 800940a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	699b      	ldr	r3, [r3, #24]
 8009416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	4b34      	ldr	r3, [pc, #208]	; (80094ec <TIM_OC2_SetConfig+0xfc>)
 800941c:	4013      	ands	r3, r2
 800941e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	021b      	lsls	r3, r3, #8
 800942e:	68fa      	ldr	r2, [r7, #12]
 8009430:	4313      	orrs	r3, r2
 8009432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	f023 0320 	bic.w	r3, r3, #32
 800943a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	011b      	lsls	r3, r3, #4
 8009442:	697a      	ldr	r2, [r7, #20]
 8009444:	4313      	orrs	r3, r2
 8009446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a29      	ldr	r2, [pc, #164]	; (80094f0 <TIM_OC2_SetConfig+0x100>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d003      	beq.n	8009458 <TIM_OC2_SetConfig+0x68>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a28      	ldr	r2, [pc, #160]	; (80094f4 <TIM_OC2_SetConfig+0x104>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d10d      	bne.n	8009474 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800945e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	011b      	lsls	r3, r3, #4
 8009466:	697a      	ldr	r2, [r7, #20]
 8009468:	4313      	orrs	r3, r2
 800946a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009472:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a1e      	ldr	r2, [pc, #120]	; (80094f0 <TIM_OC2_SetConfig+0x100>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d00f      	beq.n	800949c <TIM_OC2_SetConfig+0xac>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a1d      	ldr	r2, [pc, #116]	; (80094f4 <TIM_OC2_SetConfig+0x104>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d00b      	beq.n	800949c <TIM_OC2_SetConfig+0xac>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a1c      	ldr	r2, [pc, #112]	; (80094f8 <TIM_OC2_SetConfig+0x108>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d007      	beq.n	800949c <TIM_OC2_SetConfig+0xac>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a1b      	ldr	r2, [pc, #108]	; (80094fc <TIM_OC2_SetConfig+0x10c>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d003      	beq.n	800949c <TIM_OC2_SetConfig+0xac>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a1a      	ldr	r2, [pc, #104]	; (8009500 <TIM_OC2_SetConfig+0x110>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d113      	bne.n	80094c4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	693a      	ldr	r2, [r7, #16]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	699b      	ldr	r3, [r3, #24]
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	693a      	ldr	r2, [r7, #16]
 80094c0:	4313      	orrs	r3, r2
 80094c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	685a      	ldr	r2, [r3, #4]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	621a      	str	r2, [r3, #32]
}
 80094de:	bf00      	nop
 80094e0:	371c      	adds	r7, #28
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	feff8fff 	.word	0xfeff8fff
 80094f0:	40010000 	.word	0x40010000
 80094f4:	40010400 	.word	0x40010400
 80094f8:	40014000 	.word	0x40014000
 80094fc:	40014400 	.word	0x40014400
 8009500:	40014800 	.word	0x40014800

08009504 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009504:	b480      	push	{r7}
 8009506:	b087      	sub	sp, #28
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a1b      	ldr	r3, [r3, #32]
 8009512:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a1b      	ldr	r3, [r3, #32]
 800951e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	69db      	ldr	r3, [r3, #28]
 800952a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f023 0303 	bic.w	r3, r3, #3
 800953a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	4313      	orrs	r3, r2
 8009544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800954c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	021b      	lsls	r3, r3, #8
 8009554:	697a      	ldr	r2, [r7, #20]
 8009556:	4313      	orrs	r3, r2
 8009558:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a27      	ldr	r2, [pc, #156]	; (80095fc <TIM_OC3_SetConfig+0xf8>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d003      	beq.n	800956a <TIM_OC3_SetConfig+0x66>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a26      	ldr	r2, [pc, #152]	; (8009600 <TIM_OC3_SetConfig+0xfc>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d10d      	bne.n	8009586 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	021b      	lsls	r3, r3, #8
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	4313      	orrs	r3, r2
 800957c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a1c      	ldr	r2, [pc, #112]	; (80095fc <TIM_OC3_SetConfig+0xf8>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d00f      	beq.n	80095ae <TIM_OC3_SetConfig+0xaa>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a1b      	ldr	r2, [pc, #108]	; (8009600 <TIM_OC3_SetConfig+0xfc>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d00b      	beq.n	80095ae <TIM_OC3_SetConfig+0xaa>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4a1a      	ldr	r2, [pc, #104]	; (8009604 <TIM_OC3_SetConfig+0x100>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d007      	beq.n	80095ae <TIM_OC3_SetConfig+0xaa>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4a19      	ldr	r2, [pc, #100]	; (8009608 <TIM_OC3_SetConfig+0x104>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d003      	beq.n	80095ae <TIM_OC3_SetConfig+0xaa>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	4a18      	ldr	r2, [pc, #96]	; (800960c <TIM_OC3_SetConfig+0x108>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d113      	bne.n	80095d6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	695b      	ldr	r3, [r3, #20]
 80095c2:	011b      	lsls	r3, r3, #4
 80095c4:	693a      	ldr	r2, [r7, #16]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	011b      	lsls	r3, r3, #4
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	693a      	ldr	r2, [r7, #16]
 80095da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	697a      	ldr	r2, [r7, #20]
 80095ee:	621a      	str	r2, [r3, #32]
}
 80095f0:	bf00      	nop
 80095f2:	371c      	adds	r7, #28
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr
 80095fc:	40010000 	.word	0x40010000
 8009600:	40010400 	.word	0x40010400
 8009604:	40014000 	.word	0x40014000
 8009608:	40014400 	.word	0x40014400
 800960c:	40014800 	.word	0x40014800

08009610 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009610:	b480      	push	{r7}
 8009612:	b087      	sub	sp, #28
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a1b      	ldr	r3, [r3, #32]
 800962a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	69db      	ldr	r3, [r3, #28]
 8009636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800963e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	021b      	lsls	r3, r3, #8
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	4313      	orrs	r3, r2
 8009652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800965a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	031b      	lsls	r3, r3, #12
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	4313      	orrs	r3, r2
 8009666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a18      	ldr	r2, [pc, #96]	; (80096cc <TIM_OC4_SetConfig+0xbc>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d00f      	beq.n	8009690 <TIM_OC4_SetConfig+0x80>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a17      	ldr	r2, [pc, #92]	; (80096d0 <TIM_OC4_SetConfig+0xc0>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d00b      	beq.n	8009690 <TIM_OC4_SetConfig+0x80>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a16      	ldr	r2, [pc, #88]	; (80096d4 <TIM_OC4_SetConfig+0xc4>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d007      	beq.n	8009690 <TIM_OC4_SetConfig+0x80>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a15      	ldr	r2, [pc, #84]	; (80096d8 <TIM_OC4_SetConfig+0xc8>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d003      	beq.n	8009690 <TIM_OC4_SetConfig+0x80>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a14      	ldr	r2, [pc, #80]	; (80096dc <TIM_OC4_SetConfig+0xcc>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d109      	bne.n	80096a4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009696:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	695b      	ldr	r3, [r3, #20]
 800969c:	019b      	lsls	r3, r3, #6
 800969e:	697a      	ldr	r2, [r7, #20]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	697a      	ldr	r2, [r7, #20]
 80096a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	685a      	ldr	r2, [r3, #4]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	693a      	ldr	r2, [r7, #16]
 80096bc:	621a      	str	r2, [r3, #32]
}
 80096be:	bf00      	nop
 80096c0:	371c      	adds	r7, #28
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	40010000 	.word	0x40010000
 80096d0:	40010400 	.word	0x40010400
 80096d4:	40014000 	.word	0x40014000
 80096d8:	40014400 	.word	0x40014400
 80096dc:	40014800 	.word	0x40014800

080096e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b087      	sub	sp, #28
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a1b      	ldr	r3, [r3, #32]
 80096ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a1b      	ldr	r3, [r3, #32]
 80096fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800970e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	4313      	orrs	r3, r2
 8009718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009720:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	041b      	lsls	r3, r3, #16
 8009728:	693a      	ldr	r2, [r7, #16]
 800972a:	4313      	orrs	r3, r2
 800972c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a17      	ldr	r2, [pc, #92]	; (8009790 <TIM_OC5_SetConfig+0xb0>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d00f      	beq.n	8009756 <TIM_OC5_SetConfig+0x76>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a16      	ldr	r2, [pc, #88]	; (8009794 <TIM_OC5_SetConfig+0xb4>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d00b      	beq.n	8009756 <TIM_OC5_SetConfig+0x76>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a15      	ldr	r2, [pc, #84]	; (8009798 <TIM_OC5_SetConfig+0xb8>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d007      	beq.n	8009756 <TIM_OC5_SetConfig+0x76>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a14      	ldr	r2, [pc, #80]	; (800979c <TIM_OC5_SetConfig+0xbc>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d003      	beq.n	8009756 <TIM_OC5_SetConfig+0x76>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4a13      	ldr	r2, [pc, #76]	; (80097a0 <TIM_OC5_SetConfig+0xc0>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d109      	bne.n	800976a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800975c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	021b      	lsls	r3, r3, #8
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	4313      	orrs	r3, r2
 8009768:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	697a      	ldr	r2, [r7, #20]
 800976e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	685a      	ldr	r2, [r3, #4]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	621a      	str	r2, [r3, #32]
}
 8009784:	bf00      	nop
 8009786:	371c      	adds	r7, #28
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr
 8009790:	40010000 	.word	0x40010000
 8009794:	40010400 	.word	0x40010400
 8009798:	40014000 	.word	0x40014000
 800979c:	40014400 	.word	0x40014400
 80097a0:	40014800 	.word	0x40014800

080097a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b087      	sub	sp, #28
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a1b      	ldr	r3, [r3, #32]
 80097b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6a1b      	ldr	r3, [r3, #32]
 80097be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	021b      	lsls	r3, r3, #8
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	4313      	orrs	r3, r2
 80097de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80097e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	051b      	lsls	r3, r3, #20
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a18      	ldr	r2, [pc, #96]	; (8009858 <TIM_OC6_SetConfig+0xb4>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d00f      	beq.n	800981c <TIM_OC6_SetConfig+0x78>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a17      	ldr	r2, [pc, #92]	; (800985c <TIM_OC6_SetConfig+0xb8>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d00b      	beq.n	800981c <TIM_OC6_SetConfig+0x78>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a16      	ldr	r2, [pc, #88]	; (8009860 <TIM_OC6_SetConfig+0xbc>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d007      	beq.n	800981c <TIM_OC6_SetConfig+0x78>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a15      	ldr	r2, [pc, #84]	; (8009864 <TIM_OC6_SetConfig+0xc0>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d003      	beq.n	800981c <TIM_OC6_SetConfig+0x78>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a14      	ldr	r2, [pc, #80]	; (8009868 <TIM_OC6_SetConfig+0xc4>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d109      	bne.n	8009830 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009822:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	029b      	lsls	r3, r3, #10
 800982a:	697a      	ldr	r2, [r7, #20]
 800982c:	4313      	orrs	r3, r2
 800982e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	697a      	ldr	r2, [r7, #20]
 8009834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	685a      	ldr	r2, [r3, #4]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	693a      	ldr	r2, [r7, #16]
 8009848:	621a      	str	r2, [r3, #32]
}
 800984a:	bf00      	nop
 800984c:	371c      	adds	r7, #28
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	40010000 	.word	0x40010000
 800985c:	40010400 	.word	0x40010400
 8009860:	40014000 	.word	0x40014000
 8009864:	40014400 	.word	0x40014400
 8009868:	40014800 	.word	0x40014800

0800986c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800986c:	b480      	push	{r7}
 800986e:	b087      	sub	sp, #28
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6a1b      	ldr	r3, [r3, #32]
 800987c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6a1b      	ldr	r3, [r3, #32]
 8009882:	f023 0201 	bic.w	r2, r3, #1
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	699b      	ldr	r3, [r3, #24]
 800988e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	011b      	lsls	r3, r3, #4
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	4313      	orrs	r3, r2
 80098a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	f023 030a 	bic.w	r3, r3, #10
 80098a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	693a      	ldr	r2, [r7, #16]
 80098b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	697a      	ldr	r2, [r7, #20]
 80098bc:	621a      	str	r2, [r3, #32]
}
 80098be:	bf00      	nop
 80098c0:	371c      	adds	r7, #28
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098ca:	b480      	push	{r7}
 80098cc:	b087      	sub	sp, #28
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	60f8      	str	r0, [r7, #12]
 80098d2:	60b9      	str	r1, [r7, #8]
 80098d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	f023 0210 	bic.w	r2, r3, #16
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	699b      	ldr	r3, [r3, #24]
 80098e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6a1b      	ldr	r3, [r3, #32]
 80098ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	031b      	lsls	r3, r3, #12
 80098fa:	697a      	ldr	r2, [r7, #20]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009906:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	011b      	lsls	r3, r3, #4
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	4313      	orrs	r3, r2
 8009910:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	693a      	ldr	r2, [r7, #16]
 800991c:	621a      	str	r2, [r3, #32]
}
 800991e:	bf00      	nop
 8009920:	371c      	adds	r7, #28
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr
	...

0800992c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800992c:	b480      	push	{r7}
 800992e:	b085      	sub	sp, #20
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800993c:	68fa      	ldr	r2, [r7, #12]
 800993e:	4b09      	ldr	r3, [pc, #36]	; (8009964 <TIM_ITRx_SetConfig+0x38>)
 8009940:	4013      	ands	r3, r2
 8009942:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009944:	683a      	ldr	r2, [r7, #0]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	4313      	orrs	r3, r2
 800994a:	f043 0307 	orr.w	r3, r3, #7
 800994e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	609a      	str	r2, [r3, #8]
}
 8009956:	bf00      	nop
 8009958:	3714      	adds	r7, #20
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	ffcfff8f 	.word	0xffcfff8f

08009968 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009968:	b480      	push	{r7}
 800996a:	b087      	sub	sp, #28
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
 8009974:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009982:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	021a      	lsls	r2, r3, #8
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	431a      	orrs	r2, r3
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	4313      	orrs	r3, r2
 8009990:	697a      	ldr	r2, [r7, #20]
 8009992:	4313      	orrs	r3, r2
 8009994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	697a      	ldr	r2, [r7, #20]
 800999a:	609a      	str	r2, [r3, #8]
}
 800999c:	bf00      	nop
 800999e:	371c      	adds	r7, #28
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b087      	sub	sp, #28
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	f003 031f 	and.w	r3, r3, #31
 80099ba:	2201      	movs	r2, #1
 80099bc:	fa02 f303 	lsl.w	r3, r2, r3
 80099c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6a1a      	ldr	r2, [r3, #32]
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	43db      	mvns	r3, r3
 80099ca:	401a      	ands	r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6a1a      	ldr	r2, [r3, #32]
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	f003 031f 	and.w	r3, r3, #31
 80099da:	6879      	ldr	r1, [r7, #4]
 80099dc:	fa01 f303 	lsl.w	r3, r1, r3
 80099e0:	431a      	orrs	r2, r3
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	621a      	str	r2, [r3, #32]
}
 80099e6:	bf00      	nop
 80099e8:	371c      	adds	r7, #28
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
	...

080099f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d101      	bne.n	8009a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a08:	2302      	movs	r3, #2
 8009a0a:	e068      	b.n	8009ade <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2202      	movs	r2, #2
 8009a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a2e      	ldr	r2, [pc, #184]	; (8009aec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d004      	beq.n	8009a40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a2d      	ldr	r2, [pc, #180]	; (8009af0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d108      	bne.n	8009a52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009a46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68fa      	ldr	r2, [r7, #12]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a1e      	ldr	r2, [pc, #120]	; (8009aec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d01d      	beq.n	8009ab2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a7e:	d018      	beq.n	8009ab2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a1b      	ldr	r2, [pc, #108]	; (8009af4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d013      	beq.n	8009ab2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a1a      	ldr	r2, [pc, #104]	; (8009af8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d00e      	beq.n	8009ab2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a18      	ldr	r2, [pc, #96]	; (8009afc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d009      	beq.n	8009ab2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a13      	ldr	r2, [pc, #76]	; (8009af0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d004      	beq.n	8009ab2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a14      	ldr	r2, [pc, #80]	; (8009b00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d10c      	bne.n	8009acc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ab8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	68ba      	ldr	r2, [r7, #8]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68ba      	ldr	r2, [r7, #8]
 8009aca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3714      	adds	r7, #20
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	40010000 	.word	0x40010000
 8009af0:	40010400 	.word	0x40010400
 8009af4:	40000400 	.word	0x40000400
 8009af8:	40000800 	.word	0x40000800
 8009afc:	40000c00 	.word	0x40000c00
 8009b00:	40001800 	.word	0x40001800

08009b04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d101      	bne.n	8009b20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	e065      	b.n	8009bec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	4313      	orrs	r3, r2
 8009b42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	695b      	ldr	r3, [r3, #20]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b86:	4313      	orrs	r3, r2
 8009b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	699b      	ldr	r3, [r3, #24]
 8009b94:	041b      	lsls	r3, r3, #16
 8009b96:	4313      	orrs	r3, r2
 8009b98:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a16      	ldr	r2, [pc, #88]	; (8009bf8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d004      	beq.n	8009bae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a14      	ldr	r2, [pc, #80]	; (8009bfc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d115      	bne.n	8009bda <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb8:	051b      	lsls	r3, r3, #20
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	69db      	ldr	r3, [r3, #28]
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	6a1b      	ldr	r3, [r3, #32]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3714      	adds	r7, #20
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr
 8009bf8:	40010000 	.word	0x40010000
 8009bfc:	40010400 	.word	0x40010400

08009c00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b083      	sub	sp, #12
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c08:	bf00      	nop
 8009c0a:	370c      	adds	r7, #12
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c1c:	bf00      	nop
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009c30:	bf00      	nop
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d101      	bne.n	8009c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e042      	b.n	8009cd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d106      	bne.n	8009c66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f7f8 fdc9 	bl	80027f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2224      	movs	r2, #36	; 0x24
 8009c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f022 0201 	bic.w	r2, r2, #1
 8009c7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 fbd8 	bl	800a434 <UART_SetConfig>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d101      	bne.n	8009c8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e022      	b.n	8009cd4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d002      	beq.n	8009c9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f001 f92c 	bl	800aef4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	685a      	ldr	r2, [r3, #4]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009caa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	689a      	ldr	r2, [r3, #8]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009cba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f042 0201 	orr.w	r2, r2, #1
 8009cca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f001 f9b3 	bl	800b038 <UART_CheckIdleState>
 8009cd2:	4603      	mov	r3, r0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b08a      	sub	sp, #40	; 0x28
 8009ce0:	af02      	add	r7, sp, #8
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	603b      	str	r3, [r7, #0]
 8009ce8:	4613      	mov	r3, r2
 8009cea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cf2:	2b20      	cmp	r3, #32
 8009cf4:	f040 8083 	bne.w	8009dfe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d002      	beq.n	8009d04 <HAL_UART_Transmit+0x28>
 8009cfe:	88fb      	ldrh	r3, [r7, #6]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d101      	bne.n	8009d08 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	e07b      	b.n	8009e00 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d101      	bne.n	8009d16 <HAL_UART_Transmit+0x3a>
 8009d12:	2302      	movs	r3, #2
 8009d14:	e074      	b.n	8009e00 <HAL_UART_Transmit+0x124>
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2201      	movs	r2, #1
 8009d1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2221      	movs	r2, #33	; 0x21
 8009d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009d2e:	f7f9 f985 	bl	800303c <HAL_GetTick>
 8009d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	88fa      	ldrh	r2, [r7, #6]
 8009d38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	88fa      	ldrh	r2, [r7, #6]
 8009d40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d4c:	d108      	bne.n	8009d60 <HAL_UART_Transmit+0x84>
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d104      	bne.n	8009d60 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009d56:	2300      	movs	r3, #0
 8009d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	61bb      	str	r3, [r7, #24]
 8009d5e:	e003      	b.n	8009d68 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d64:	2300      	movs	r3, #0
 8009d66:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009d70:	e02c      	b.n	8009dcc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	9300      	str	r3, [sp, #0]
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	2180      	movs	r1, #128	; 0x80
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f001 f9a6 	bl	800b0ce <UART_WaitOnFlagUntilTimeout>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d001      	beq.n	8009d8c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009d88:	2303      	movs	r3, #3
 8009d8a:	e039      	b.n	8009e00 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d10b      	bne.n	8009daa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	881b      	ldrh	r3, [r3, #0]
 8009d96:	461a      	mov	r2, r3
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009da0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	3302      	adds	r3, #2
 8009da6:	61bb      	str	r3, [r7, #24]
 8009da8:	e007      	b.n	8009dba <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	781a      	ldrb	r2, [r3, #0]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	3301      	adds	r3, #1
 8009db8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	3b01      	subs	r3, #1
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1cc      	bne.n	8009d72 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	9300      	str	r3, [sp, #0]
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	2200      	movs	r2, #0
 8009de0:	2140      	movs	r1, #64	; 0x40
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	f001 f973 	bl	800b0ce <UART_WaitOnFlagUntilTimeout>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d001      	beq.n	8009df2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009dee:	2303      	movs	r3, #3
 8009df0:	e006      	b.n	8009e00 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2220      	movs	r2, #32
 8009df6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	e000      	b.n	8009e00 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009dfe:	2302      	movs	r3, #2
  }
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3720      	adds	r7, #32
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	4613      	mov	r3, r2
 8009e14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e1c:	2b20      	cmp	r3, #32
 8009e1e:	d131      	bne.n	8009e84 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d002      	beq.n	8009e2c <HAL_UART_Receive_IT+0x24>
 8009e26:	88fb      	ldrh	r3, [r7, #6]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d101      	bne.n	8009e30 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e02a      	b.n	8009e86 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d101      	bne.n	8009e3e <HAL_UART_Receive_IT+0x36>
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	e023      	b.n	8009e86 <HAL_UART_Receive_IT+0x7e>
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a0f      	ldr	r2, [pc, #60]	; (8009e90 <HAL_UART_Receive_IT+0x88>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d00e      	beq.n	8009e74 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d007      	beq.n	8009e74 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009e72:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009e74:	88fb      	ldrh	r3, [r7, #6]
 8009e76:	461a      	mov	r2, r3
 8009e78:	68b9      	ldr	r1, [r7, #8]
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f001 f9a8 	bl	800b1d0 <UART_Start_Receive_IT>
 8009e80:	4603      	mov	r3, r0
 8009e82:	e000      	b.n	8009e86 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009e84:	2302      	movs	r3, #2
  }
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	58000c00 	.word	0x58000c00

08009e94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b088      	sub	sp, #32
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	69db      	ldr	r3, [r3, #28]
 8009ea2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009eb4:	69fa      	ldr	r2, [r7, #28]
 8009eb6:	f640 030f 	movw	r3, #2063	; 0x80f
 8009eba:	4013      	ands	r3, r2
 8009ebc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d118      	bne.n	8009ef6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	f003 0320 	and.w	r3, r3, #32
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d013      	beq.n	8009ef6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	f003 0320 	and.w	r3, r3, #32
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d104      	bne.n	8009ee2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d009      	beq.n	8009ef6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	f000 8282 	beq.w	800a3f0 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	4798      	blx	r3
      }
      return;
 8009ef4:	e27c      	b.n	800a3f0 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f000 80ef 	beq.w	800a0dc <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009efe:	697a      	ldr	r2, [r7, #20]
 8009f00:	4b73      	ldr	r3, [pc, #460]	; (800a0d0 <HAL_UART_IRQHandler+0x23c>)
 8009f02:	4013      	ands	r3, r2
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d105      	bne.n	8009f14 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009f08:	69ba      	ldr	r2, [r7, #24]
 8009f0a:	4b72      	ldr	r3, [pc, #456]	; (800a0d4 <HAL_UART_IRQHandler+0x240>)
 8009f0c:	4013      	ands	r3, r2
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f000 80e4 	beq.w	800a0dc <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	f003 0301 	and.w	r3, r3, #1
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d010      	beq.n	8009f40 <HAL_UART_IRQHandler+0xac>
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00b      	beq.n	8009f40 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f36:	f043 0201 	orr.w	r2, r3, #1
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	f003 0302 	and.w	r3, r3, #2
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d010      	beq.n	8009f6c <HAL_UART_IRQHandler+0xd8>
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	f003 0301 	and.w	r3, r3, #1
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d00b      	beq.n	8009f6c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2202      	movs	r2, #2
 8009f5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f62:	f043 0204 	orr.w	r2, r3, #4
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	f003 0304 	and.w	r3, r3, #4
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d010      	beq.n	8009f98 <HAL_UART_IRQHandler+0x104>
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	f003 0301 	and.w	r3, r3, #1
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d00b      	beq.n	8009f98 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2204      	movs	r2, #4
 8009f86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f8e:	f043 0202 	orr.w	r2, r3, #2
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	f003 0308 	and.w	r3, r3, #8
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d015      	beq.n	8009fce <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	f003 0320 	and.w	r3, r3, #32
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d104      	bne.n	8009fb6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009fac:	697a      	ldr	r2, [r7, #20]
 8009fae:	4b48      	ldr	r3, [pc, #288]	; (800a0d0 <HAL_UART_IRQHandler+0x23c>)
 8009fb0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00b      	beq.n	8009fce <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2208      	movs	r2, #8
 8009fbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fc4:	f043 0208 	orr.w	r2, r3, #8
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d011      	beq.n	8009ffc <HAL_UART_IRQHandler+0x168>
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00c      	beq.n	8009ffc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009fea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ff2:	f043 0220 	orr.w	r2, r3, #32
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a002:	2b00      	cmp	r3, #0
 800a004:	f000 81f6 	beq.w	800a3f4 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	f003 0320 	and.w	r3, r3, #32
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d011      	beq.n	800a036 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	f003 0320 	and.w	r3, r3, #32
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d104      	bne.n	800a026 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a022:	2b00      	cmp	r3, #0
 800a024:	d007      	beq.n	800a036 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d003      	beq.n	800a036 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a03c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a048:	2b40      	cmp	r3, #64	; 0x40
 800a04a:	d004      	beq.n	800a056 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a052:	2b00      	cmp	r3, #0
 800a054:	d031      	beq.n	800a0ba <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f001 f978 	bl	800b34c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a066:	2b40      	cmp	r3, #64	; 0x40
 800a068:	d123      	bne.n	800a0b2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	689a      	ldr	r2, [r3, #8]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a078:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d013      	beq.n	800a0aa <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a086:	4a14      	ldr	r2, [pc, #80]	; (800a0d8 <HAL_UART_IRQHandler+0x244>)
 800a088:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fa f860 	bl	8004154 <HAL_DMA_Abort_IT>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d017      	beq.n	800a0ca <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a09e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a0a4:	4610      	mov	r0, r2
 800a0a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0a8:	e00f      	b.n	800a0ca <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f9ac 	bl	800a408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0b0:	e00b      	b.n	800a0ca <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f9a8 	bl	800a408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0b8:	e007      	b.n	800a0ca <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f9a4 	bl	800a408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a0c8:	e194      	b.n	800a3f4 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0ca:	bf00      	nop
    return;
 800a0cc:	e192      	b.n	800a3f4 <HAL_UART_IRQHandler+0x560>
 800a0ce:	bf00      	nop
 800a0d0:	10000001 	.word	0x10000001
 800a0d4:	04000120 	.word	0x04000120
 800a0d8:	0800b3b1 	.word	0x0800b3b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	f040 810f 	bne.w	800a304 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	f003 0310 	and.w	r3, r3, #16
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f000 8109 	beq.w	800a304 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	f003 0310 	and.w	r3, r3, #16
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f000 8103 	beq.w	800a304 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2210      	movs	r2, #16
 800a104:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a110:	2b40      	cmp	r3, #64	; 0x40
 800a112:	f040 80bb 	bne.w	800a28c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a96      	ldr	r2, [pc, #600]	; (800a378 <HAL_UART_IRQHandler+0x4e4>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d059      	beq.n	800a1d6 <HAL_UART_IRQHandler+0x342>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a94      	ldr	r2, [pc, #592]	; (800a37c <HAL_UART_IRQHandler+0x4e8>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d053      	beq.n	800a1d6 <HAL_UART_IRQHandler+0x342>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a92      	ldr	r2, [pc, #584]	; (800a380 <HAL_UART_IRQHandler+0x4ec>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d04d      	beq.n	800a1d6 <HAL_UART_IRQHandler+0x342>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a90      	ldr	r2, [pc, #576]	; (800a384 <HAL_UART_IRQHandler+0x4f0>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d047      	beq.n	800a1d6 <HAL_UART_IRQHandler+0x342>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a8e      	ldr	r2, [pc, #568]	; (800a388 <HAL_UART_IRQHandler+0x4f4>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d041      	beq.n	800a1d6 <HAL_UART_IRQHandler+0x342>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a8c      	ldr	r2, [pc, #560]	; (800a38c <HAL_UART_IRQHandler+0x4f8>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d03b      	beq.n	800a1d6 <HAL_UART_IRQHandler+0x342>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a8a      	ldr	r2, [pc, #552]	; (800a390 <HAL_UART_IRQHandler+0x4fc>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d035      	beq.n	800a1d6 <HAL_UART_IRQHandler+0x342>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a88      	ldr	r2, [pc, #544]	; (800a394 <HAL_UART_IRQHandler+0x500>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d02f      	beq.n	800a1d6 <HAL_UART_IRQHandler+0x342>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a86      	ldr	r2, [pc, #536]	; (800a398 <HAL_UART_IRQHandler+0x504>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d029      	beq.n	800a1d6 <HAL_UART_IRQHandler+0x342>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a84      	ldr	r2, [pc, #528]	; (800a39c <HAL_UART_IRQHandler+0x508>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d023      	beq.n	800a1d6 <HAL_UART_IRQHandler+0x342>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a82      	ldr	r2, [pc, #520]	; (800a3a0 <HAL_UART_IRQHandler+0x50c>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d01d      	beq.n	800a1d6 <HAL_UART_IRQHandler+0x342>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a80      	ldr	r2, [pc, #512]	; (800a3a4 <HAL_UART_IRQHandler+0x510>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d017      	beq.n	800a1d6 <HAL_UART_IRQHandler+0x342>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a7e      	ldr	r2, [pc, #504]	; (800a3a8 <HAL_UART_IRQHandler+0x514>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d011      	beq.n	800a1d6 <HAL_UART_IRQHandler+0x342>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a7c      	ldr	r2, [pc, #496]	; (800a3ac <HAL_UART_IRQHandler+0x518>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d00b      	beq.n	800a1d6 <HAL_UART_IRQHandler+0x342>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a7a      	ldr	r2, [pc, #488]	; (800a3b0 <HAL_UART_IRQHandler+0x51c>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d005      	beq.n	800a1d6 <HAL_UART_IRQHandler+0x342>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a78      	ldr	r2, [pc, #480]	; (800a3b4 <HAL_UART_IRQHandler+0x520>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d105      	bne.n	800a1e2 <HAL_UART_IRQHandler+0x34e>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	e004      	b.n	800a1ec <HAL_UART_IRQHandler+0x358>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800a1ee:	893b      	ldrh	r3, [r7, #8]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f000 8101 	beq.w	800a3f8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a1fc:	893a      	ldrh	r2, [r7, #8]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	f080 80fa 	bcs.w	800a3f8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	893a      	ldrh	r2, [r7, #8]
 800a208:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a210:	69db      	ldr	r3, [r3, #28]
 800a212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a216:	d02b      	beq.n	800a270 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a226:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	689a      	ldr	r2, [r3, #8]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f022 0201 	bic.w	r2, r2, #1
 800a236:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	689a      	ldr	r2, [r3, #8]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a246:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2220      	movs	r2, #32
 800a24c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f022 0210 	bic.w	r2, r2, #16
 800a264:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7f9 fc54 	bl	8003b18 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	b29b      	uxth	r3, r3
 800a282:	4619      	mov	r1, r3
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f8c9 	bl	800a41c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a28a:	e0b5      	b.n	800a3f8 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a298:	b29b      	uxth	r3, r3
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	f000 80a8 	beq.w	800a3fc <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800a2ac:	897b      	ldrh	r3, [r7, #10]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	f000 80a4 	beq.w	800a3fc <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a2c2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	6899      	ldr	r1, [r3, #8]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	4b3a      	ldr	r3, [pc, #232]	; (800a3b8 <HAL_UART_IRQHandler+0x524>)
 800a2d0:	400b      	ands	r3, r1
 800a2d2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2220      	movs	r2, #32
 800a2d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f022 0210 	bic.w	r2, r2, #16
 800a2f6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a2f8:	897b      	ldrh	r3, [r7, #10]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 f88d 	bl	800a41c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a302:	e07b      	b.n	800a3fc <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00d      	beq.n	800a32a <HAL_UART_IRQHandler+0x496>
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a314:	2b00      	cmp	r3, #0
 800a316:	d008      	beq.n	800a32a <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a320:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f001 fb50 	bl	800b9c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a328:	e06b      	b.n	800a402 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a32a:	69fb      	ldr	r3, [r7, #28]
 800a32c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a330:	2b00      	cmp	r3, #0
 800a332:	d012      	beq.n	800a35a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d104      	bne.n	800a348 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a344:	2b00      	cmp	r3, #0
 800a346:	d008      	beq.n	800a35a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d057      	beq.n	800a400 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	4798      	blx	r3
    }
    return;
 800a358:	e052      	b.n	800a400 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a360:	2b00      	cmp	r3, #0
 800a362:	d02b      	beq.n	800a3bc <HAL_UART_IRQHandler+0x528>
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d026      	beq.n	800a3bc <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f001 f834 	bl	800b3dc <UART_EndTransmit_IT>
    return;
 800a374:	e045      	b.n	800a402 <HAL_UART_IRQHandler+0x56e>
 800a376:	bf00      	nop
 800a378:	40020010 	.word	0x40020010
 800a37c:	40020028 	.word	0x40020028
 800a380:	40020040 	.word	0x40020040
 800a384:	40020058 	.word	0x40020058
 800a388:	40020070 	.word	0x40020070
 800a38c:	40020088 	.word	0x40020088
 800a390:	400200a0 	.word	0x400200a0
 800a394:	400200b8 	.word	0x400200b8
 800a398:	40020410 	.word	0x40020410
 800a39c:	40020428 	.word	0x40020428
 800a3a0:	40020440 	.word	0x40020440
 800a3a4:	40020458 	.word	0x40020458
 800a3a8:	40020470 	.word	0x40020470
 800a3ac:	40020488 	.word	0x40020488
 800a3b0:	400204a0 	.word	0x400204a0
 800a3b4:	400204b8 	.word	0x400204b8
 800a3b8:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d008      	beq.n	800a3d8 <HAL_UART_IRQHandler+0x544>
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d003      	beq.n	800a3d8 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f001 fb0d 	bl	800b9f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a3d6:	e014      	b.n	800a402 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00f      	beq.n	800a402 <HAL_UART_IRQHandler+0x56e>
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	da0c      	bge.n	800a402 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f001 faf7 	bl	800b9dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a3ee:	e008      	b.n	800a402 <HAL_UART_IRQHandler+0x56e>
      return;
 800a3f0:	bf00      	nop
 800a3f2:	e006      	b.n	800a402 <HAL_UART_IRQHandler+0x56e>
    return;
 800a3f4:	bf00      	nop
 800a3f6:	e004      	b.n	800a402 <HAL_UART_IRQHandler+0x56e>
      return;
 800a3f8:	bf00      	nop
 800a3fa:	e002      	b.n	800a402 <HAL_UART_IRQHandler+0x56e>
      return;
 800a3fc:	bf00      	nop
 800a3fe:	e000      	b.n	800a402 <HAL_UART_IRQHandler+0x56e>
    return;
 800a400:	bf00      	nop
  }
}
 800a402:	3720      	adds	r7, #32
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a410:	bf00      	nop
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	460b      	mov	r3, r1
 800a426:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a428:	bf00      	nop
 800a42a:	370c      	adds	r7, #12
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a434:	b5b0      	push	{r4, r5, r7, lr}
 800a436:	b08e      	sub	sp, #56	; 0x38
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a43c:	2300      	movs	r3, #0
 800a43e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	689a      	ldr	r2, [r3, #8]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	431a      	orrs	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	695b      	ldr	r3, [r3, #20]
 800a450:	431a      	orrs	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	69db      	ldr	r3, [r3, #28]
 800a456:	4313      	orrs	r3, r2
 800a458:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	4bbf      	ldr	r3, [pc, #764]	; (800a760 <UART_SetConfig+0x32c>)
 800a462:	4013      	ands	r3, r2
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	6812      	ldr	r2, [r2, #0]
 800a468:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a46a:	430b      	orrs	r3, r1
 800a46c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	68da      	ldr	r2, [r3, #12]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	430a      	orrs	r2, r1
 800a482:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	699b      	ldr	r3, [r3, #24]
 800a488:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4ab5      	ldr	r2, [pc, #724]	; (800a764 <UART_SetConfig+0x330>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d004      	beq.n	800a49e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6a1b      	ldr	r3, [r3, #32]
 800a498:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a49a:	4313      	orrs	r3, r2
 800a49c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	689a      	ldr	r2, [r3, #8]
 800a4a4:	4bb0      	ldr	r3, [pc, #704]	; (800a768 <UART_SetConfig+0x334>)
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	6812      	ldr	r2, [r2, #0]
 800a4ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a4ae:	430b      	orrs	r3, r1
 800a4b0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b8:	f023 010f 	bic.w	r1, r3, #15
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	430a      	orrs	r2, r1
 800a4c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4aa7      	ldr	r2, [pc, #668]	; (800a76c <UART_SetConfig+0x338>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d176      	bne.n	800a5c0 <UART_SetConfig+0x18c>
 800a4d2:	4ba7      	ldr	r3, [pc, #668]	; (800a770 <UART_SetConfig+0x33c>)
 800a4d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4da:	2b28      	cmp	r3, #40	; 0x28
 800a4dc:	d86c      	bhi.n	800a5b8 <UART_SetConfig+0x184>
 800a4de:	a201      	add	r2, pc, #4	; (adr r2, 800a4e4 <UART_SetConfig+0xb0>)
 800a4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e4:	0800a589 	.word	0x0800a589
 800a4e8:	0800a5b9 	.word	0x0800a5b9
 800a4ec:	0800a5b9 	.word	0x0800a5b9
 800a4f0:	0800a5b9 	.word	0x0800a5b9
 800a4f4:	0800a5b9 	.word	0x0800a5b9
 800a4f8:	0800a5b9 	.word	0x0800a5b9
 800a4fc:	0800a5b9 	.word	0x0800a5b9
 800a500:	0800a5b9 	.word	0x0800a5b9
 800a504:	0800a591 	.word	0x0800a591
 800a508:	0800a5b9 	.word	0x0800a5b9
 800a50c:	0800a5b9 	.word	0x0800a5b9
 800a510:	0800a5b9 	.word	0x0800a5b9
 800a514:	0800a5b9 	.word	0x0800a5b9
 800a518:	0800a5b9 	.word	0x0800a5b9
 800a51c:	0800a5b9 	.word	0x0800a5b9
 800a520:	0800a5b9 	.word	0x0800a5b9
 800a524:	0800a599 	.word	0x0800a599
 800a528:	0800a5b9 	.word	0x0800a5b9
 800a52c:	0800a5b9 	.word	0x0800a5b9
 800a530:	0800a5b9 	.word	0x0800a5b9
 800a534:	0800a5b9 	.word	0x0800a5b9
 800a538:	0800a5b9 	.word	0x0800a5b9
 800a53c:	0800a5b9 	.word	0x0800a5b9
 800a540:	0800a5b9 	.word	0x0800a5b9
 800a544:	0800a5a1 	.word	0x0800a5a1
 800a548:	0800a5b9 	.word	0x0800a5b9
 800a54c:	0800a5b9 	.word	0x0800a5b9
 800a550:	0800a5b9 	.word	0x0800a5b9
 800a554:	0800a5b9 	.word	0x0800a5b9
 800a558:	0800a5b9 	.word	0x0800a5b9
 800a55c:	0800a5b9 	.word	0x0800a5b9
 800a560:	0800a5b9 	.word	0x0800a5b9
 800a564:	0800a5a9 	.word	0x0800a5a9
 800a568:	0800a5b9 	.word	0x0800a5b9
 800a56c:	0800a5b9 	.word	0x0800a5b9
 800a570:	0800a5b9 	.word	0x0800a5b9
 800a574:	0800a5b9 	.word	0x0800a5b9
 800a578:	0800a5b9 	.word	0x0800a5b9
 800a57c:	0800a5b9 	.word	0x0800a5b9
 800a580:	0800a5b9 	.word	0x0800a5b9
 800a584:	0800a5b1 	.word	0x0800a5b1
 800a588:	2301      	movs	r3, #1
 800a58a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a58e:	e222      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a590:	2304      	movs	r3, #4
 800a592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a596:	e21e      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a598:	2308      	movs	r3, #8
 800a59a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a59e:	e21a      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a5a0:	2310      	movs	r3, #16
 800a5a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5a6:	e216      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a5a8:	2320      	movs	r3, #32
 800a5aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ae:	e212      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a5b0:	2340      	movs	r3, #64	; 0x40
 800a5b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5b6:	e20e      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a5b8:	2380      	movs	r3, #128	; 0x80
 800a5ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5be:	e20a      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a6b      	ldr	r2, [pc, #428]	; (800a774 <UART_SetConfig+0x340>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d130      	bne.n	800a62c <UART_SetConfig+0x1f8>
 800a5ca:	4b69      	ldr	r3, [pc, #420]	; (800a770 <UART_SetConfig+0x33c>)
 800a5cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ce:	f003 0307 	and.w	r3, r3, #7
 800a5d2:	2b05      	cmp	r3, #5
 800a5d4:	d826      	bhi.n	800a624 <UART_SetConfig+0x1f0>
 800a5d6:	a201      	add	r2, pc, #4	; (adr r2, 800a5dc <UART_SetConfig+0x1a8>)
 800a5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5dc:	0800a5f5 	.word	0x0800a5f5
 800a5e0:	0800a5fd 	.word	0x0800a5fd
 800a5e4:	0800a605 	.word	0x0800a605
 800a5e8:	0800a60d 	.word	0x0800a60d
 800a5ec:	0800a615 	.word	0x0800a615
 800a5f0:	0800a61d 	.word	0x0800a61d
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5fa:	e1ec      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a5fc:	2304      	movs	r3, #4
 800a5fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a602:	e1e8      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a604:	2308      	movs	r3, #8
 800a606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a60a:	e1e4      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a60c:	2310      	movs	r3, #16
 800a60e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a612:	e1e0      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a614:	2320      	movs	r3, #32
 800a616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a61a:	e1dc      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a61c:	2340      	movs	r3, #64	; 0x40
 800a61e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a622:	e1d8      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a624:	2380      	movs	r3, #128	; 0x80
 800a626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a62a:	e1d4      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a51      	ldr	r2, [pc, #324]	; (800a778 <UART_SetConfig+0x344>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d130      	bne.n	800a698 <UART_SetConfig+0x264>
 800a636:	4b4e      	ldr	r3, [pc, #312]	; (800a770 <UART_SetConfig+0x33c>)
 800a638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a63a:	f003 0307 	and.w	r3, r3, #7
 800a63e:	2b05      	cmp	r3, #5
 800a640:	d826      	bhi.n	800a690 <UART_SetConfig+0x25c>
 800a642:	a201      	add	r2, pc, #4	; (adr r2, 800a648 <UART_SetConfig+0x214>)
 800a644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a648:	0800a661 	.word	0x0800a661
 800a64c:	0800a669 	.word	0x0800a669
 800a650:	0800a671 	.word	0x0800a671
 800a654:	0800a679 	.word	0x0800a679
 800a658:	0800a681 	.word	0x0800a681
 800a65c:	0800a689 	.word	0x0800a689
 800a660:	2300      	movs	r3, #0
 800a662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a666:	e1b6      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a668:	2304      	movs	r3, #4
 800a66a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a66e:	e1b2      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a670:	2308      	movs	r3, #8
 800a672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a676:	e1ae      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a678:	2310      	movs	r3, #16
 800a67a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a67e:	e1aa      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a680:	2320      	movs	r3, #32
 800a682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a686:	e1a6      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a688:	2340      	movs	r3, #64	; 0x40
 800a68a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a68e:	e1a2      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a690:	2380      	movs	r3, #128	; 0x80
 800a692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a696:	e19e      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a37      	ldr	r2, [pc, #220]	; (800a77c <UART_SetConfig+0x348>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d130      	bne.n	800a704 <UART_SetConfig+0x2d0>
 800a6a2:	4b33      	ldr	r3, [pc, #204]	; (800a770 <UART_SetConfig+0x33c>)
 800a6a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6a6:	f003 0307 	and.w	r3, r3, #7
 800a6aa:	2b05      	cmp	r3, #5
 800a6ac:	d826      	bhi.n	800a6fc <UART_SetConfig+0x2c8>
 800a6ae:	a201      	add	r2, pc, #4	; (adr r2, 800a6b4 <UART_SetConfig+0x280>)
 800a6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b4:	0800a6cd 	.word	0x0800a6cd
 800a6b8:	0800a6d5 	.word	0x0800a6d5
 800a6bc:	0800a6dd 	.word	0x0800a6dd
 800a6c0:	0800a6e5 	.word	0x0800a6e5
 800a6c4:	0800a6ed 	.word	0x0800a6ed
 800a6c8:	0800a6f5 	.word	0x0800a6f5
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6d2:	e180      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a6d4:	2304      	movs	r3, #4
 800a6d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6da:	e17c      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a6dc:	2308      	movs	r3, #8
 800a6de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6e2:	e178      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a6e4:	2310      	movs	r3, #16
 800a6e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ea:	e174      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a6ec:	2320      	movs	r3, #32
 800a6ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6f2:	e170      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a6f4:	2340      	movs	r3, #64	; 0x40
 800a6f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6fa:	e16c      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a6fc:	2380      	movs	r3, #128	; 0x80
 800a6fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a702:	e168      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a1d      	ldr	r2, [pc, #116]	; (800a780 <UART_SetConfig+0x34c>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d142      	bne.n	800a794 <UART_SetConfig+0x360>
 800a70e:	4b18      	ldr	r3, [pc, #96]	; (800a770 <UART_SetConfig+0x33c>)
 800a710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a712:	f003 0307 	and.w	r3, r3, #7
 800a716:	2b05      	cmp	r3, #5
 800a718:	d838      	bhi.n	800a78c <UART_SetConfig+0x358>
 800a71a:	a201      	add	r2, pc, #4	; (adr r2, 800a720 <UART_SetConfig+0x2ec>)
 800a71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a720:	0800a739 	.word	0x0800a739
 800a724:	0800a741 	.word	0x0800a741
 800a728:	0800a749 	.word	0x0800a749
 800a72c:	0800a751 	.word	0x0800a751
 800a730:	0800a759 	.word	0x0800a759
 800a734:	0800a785 	.word	0x0800a785
 800a738:	2300      	movs	r3, #0
 800a73a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a73e:	e14a      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a740:	2304      	movs	r3, #4
 800a742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a746:	e146      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a748:	2308      	movs	r3, #8
 800a74a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a74e:	e142      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a750:	2310      	movs	r3, #16
 800a752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a756:	e13e      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a758:	2320      	movs	r3, #32
 800a75a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a75e:	e13a      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a760:	cfff69f3 	.word	0xcfff69f3
 800a764:	58000c00 	.word	0x58000c00
 800a768:	11fff4ff 	.word	0x11fff4ff
 800a76c:	40011000 	.word	0x40011000
 800a770:	58024400 	.word	0x58024400
 800a774:	40004400 	.word	0x40004400
 800a778:	40004800 	.word	0x40004800
 800a77c:	40004c00 	.word	0x40004c00
 800a780:	40005000 	.word	0x40005000
 800a784:	2340      	movs	r3, #64	; 0x40
 800a786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a78a:	e124      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a78c:	2380      	movs	r3, #128	; 0x80
 800a78e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a792:	e120      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4acc      	ldr	r2, [pc, #816]	; (800aacc <UART_SetConfig+0x698>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d176      	bne.n	800a88c <UART_SetConfig+0x458>
 800a79e:	4bcc      	ldr	r3, [pc, #816]	; (800aad0 <UART_SetConfig+0x69c>)
 800a7a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7a6:	2b28      	cmp	r3, #40	; 0x28
 800a7a8:	d86c      	bhi.n	800a884 <UART_SetConfig+0x450>
 800a7aa:	a201      	add	r2, pc, #4	; (adr r2, 800a7b0 <UART_SetConfig+0x37c>)
 800a7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b0:	0800a855 	.word	0x0800a855
 800a7b4:	0800a885 	.word	0x0800a885
 800a7b8:	0800a885 	.word	0x0800a885
 800a7bc:	0800a885 	.word	0x0800a885
 800a7c0:	0800a885 	.word	0x0800a885
 800a7c4:	0800a885 	.word	0x0800a885
 800a7c8:	0800a885 	.word	0x0800a885
 800a7cc:	0800a885 	.word	0x0800a885
 800a7d0:	0800a85d 	.word	0x0800a85d
 800a7d4:	0800a885 	.word	0x0800a885
 800a7d8:	0800a885 	.word	0x0800a885
 800a7dc:	0800a885 	.word	0x0800a885
 800a7e0:	0800a885 	.word	0x0800a885
 800a7e4:	0800a885 	.word	0x0800a885
 800a7e8:	0800a885 	.word	0x0800a885
 800a7ec:	0800a885 	.word	0x0800a885
 800a7f0:	0800a865 	.word	0x0800a865
 800a7f4:	0800a885 	.word	0x0800a885
 800a7f8:	0800a885 	.word	0x0800a885
 800a7fc:	0800a885 	.word	0x0800a885
 800a800:	0800a885 	.word	0x0800a885
 800a804:	0800a885 	.word	0x0800a885
 800a808:	0800a885 	.word	0x0800a885
 800a80c:	0800a885 	.word	0x0800a885
 800a810:	0800a86d 	.word	0x0800a86d
 800a814:	0800a885 	.word	0x0800a885
 800a818:	0800a885 	.word	0x0800a885
 800a81c:	0800a885 	.word	0x0800a885
 800a820:	0800a885 	.word	0x0800a885
 800a824:	0800a885 	.word	0x0800a885
 800a828:	0800a885 	.word	0x0800a885
 800a82c:	0800a885 	.word	0x0800a885
 800a830:	0800a875 	.word	0x0800a875
 800a834:	0800a885 	.word	0x0800a885
 800a838:	0800a885 	.word	0x0800a885
 800a83c:	0800a885 	.word	0x0800a885
 800a840:	0800a885 	.word	0x0800a885
 800a844:	0800a885 	.word	0x0800a885
 800a848:	0800a885 	.word	0x0800a885
 800a84c:	0800a885 	.word	0x0800a885
 800a850:	0800a87d 	.word	0x0800a87d
 800a854:	2301      	movs	r3, #1
 800a856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a85a:	e0bc      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a85c:	2304      	movs	r3, #4
 800a85e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a862:	e0b8      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a864:	2308      	movs	r3, #8
 800a866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a86a:	e0b4      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a86c:	2310      	movs	r3, #16
 800a86e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a872:	e0b0      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a874:	2320      	movs	r3, #32
 800a876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a87a:	e0ac      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a87c:	2340      	movs	r3, #64	; 0x40
 800a87e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a882:	e0a8      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a884:	2380      	movs	r3, #128	; 0x80
 800a886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a88a:	e0a4      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a90      	ldr	r2, [pc, #576]	; (800aad4 <UART_SetConfig+0x6a0>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d130      	bne.n	800a8f8 <UART_SetConfig+0x4c4>
 800a896:	4b8e      	ldr	r3, [pc, #568]	; (800aad0 <UART_SetConfig+0x69c>)
 800a898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a89a:	f003 0307 	and.w	r3, r3, #7
 800a89e:	2b05      	cmp	r3, #5
 800a8a0:	d826      	bhi.n	800a8f0 <UART_SetConfig+0x4bc>
 800a8a2:	a201      	add	r2, pc, #4	; (adr r2, 800a8a8 <UART_SetConfig+0x474>)
 800a8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a8:	0800a8c1 	.word	0x0800a8c1
 800a8ac:	0800a8c9 	.word	0x0800a8c9
 800a8b0:	0800a8d1 	.word	0x0800a8d1
 800a8b4:	0800a8d9 	.word	0x0800a8d9
 800a8b8:	0800a8e1 	.word	0x0800a8e1
 800a8bc:	0800a8e9 	.word	0x0800a8e9
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8c6:	e086      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a8c8:	2304      	movs	r3, #4
 800a8ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ce:	e082      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a8d0:	2308      	movs	r3, #8
 800a8d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8d6:	e07e      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a8d8:	2310      	movs	r3, #16
 800a8da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8de:	e07a      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a8e0:	2320      	movs	r3, #32
 800a8e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8e6:	e076      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a8e8:	2340      	movs	r3, #64	; 0x40
 800a8ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ee:	e072      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a8f0:	2380      	movs	r3, #128	; 0x80
 800a8f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8f6:	e06e      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a76      	ldr	r2, [pc, #472]	; (800aad8 <UART_SetConfig+0x6a4>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d130      	bne.n	800a964 <UART_SetConfig+0x530>
 800a902:	4b73      	ldr	r3, [pc, #460]	; (800aad0 <UART_SetConfig+0x69c>)
 800a904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a906:	f003 0307 	and.w	r3, r3, #7
 800a90a:	2b05      	cmp	r3, #5
 800a90c:	d826      	bhi.n	800a95c <UART_SetConfig+0x528>
 800a90e:	a201      	add	r2, pc, #4	; (adr r2, 800a914 <UART_SetConfig+0x4e0>)
 800a910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a914:	0800a92d 	.word	0x0800a92d
 800a918:	0800a935 	.word	0x0800a935
 800a91c:	0800a93d 	.word	0x0800a93d
 800a920:	0800a945 	.word	0x0800a945
 800a924:	0800a94d 	.word	0x0800a94d
 800a928:	0800a955 	.word	0x0800a955
 800a92c:	2300      	movs	r3, #0
 800a92e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a932:	e050      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a934:	2304      	movs	r3, #4
 800a936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a93a:	e04c      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a93c:	2308      	movs	r3, #8
 800a93e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a942:	e048      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a944:	2310      	movs	r3, #16
 800a946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a94a:	e044      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a94c:	2320      	movs	r3, #32
 800a94e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a952:	e040      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a954:	2340      	movs	r3, #64	; 0x40
 800a956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a95a:	e03c      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a95c:	2380      	movs	r3, #128	; 0x80
 800a95e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a962:	e038      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a5c      	ldr	r2, [pc, #368]	; (800aadc <UART_SetConfig+0x6a8>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d130      	bne.n	800a9d0 <UART_SetConfig+0x59c>
 800a96e:	4b58      	ldr	r3, [pc, #352]	; (800aad0 <UART_SetConfig+0x69c>)
 800a970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a972:	f003 0307 	and.w	r3, r3, #7
 800a976:	2b05      	cmp	r3, #5
 800a978:	d826      	bhi.n	800a9c8 <UART_SetConfig+0x594>
 800a97a:	a201      	add	r2, pc, #4	; (adr r2, 800a980 <UART_SetConfig+0x54c>)
 800a97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a980:	0800a999 	.word	0x0800a999
 800a984:	0800a9a1 	.word	0x0800a9a1
 800a988:	0800a9a9 	.word	0x0800a9a9
 800a98c:	0800a9b1 	.word	0x0800a9b1
 800a990:	0800a9b9 	.word	0x0800a9b9
 800a994:	0800a9c1 	.word	0x0800a9c1
 800a998:	2302      	movs	r3, #2
 800a99a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a99e:	e01a      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a9a0:	2304      	movs	r3, #4
 800a9a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9a6:	e016      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a9a8:	2308      	movs	r3, #8
 800a9aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9ae:	e012      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a9b0:	2310      	movs	r3, #16
 800a9b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9b6:	e00e      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a9b8:	2320      	movs	r3, #32
 800a9ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9be:	e00a      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a9c0:	2340      	movs	r3, #64	; 0x40
 800a9c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9c6:	e006      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a9c8:	2380      	movs	r3, #128	; 0x80
 800a9ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9ce:	e002      	b.n	800a9d6 <UART_SetConfig+0x5a2>
 800a9d0:	2380      	movs	r3, #128	; 0x80
 800a9d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a40      	ldr	r2, [pc, #256]	; (800aadc <UART_SetConfig+0x6a8>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	f040 80ef 	bne.w	800abc0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a9e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a9e6:	2b20      	cmp	r3, #32
 800a9e8:	dc46      	bgt.n	800aa78 <UART_SetConfig+0x644>
 800a9ea:	2b02      	cmp	r3, #2
 800a9ec:	f2c0 8081 	blt.w	800aaf2 <UART_SetConfig+0x6be>
 800a9f0:	3b02      	subs	r3, #2
 800a9f2:	2b1e      	cmp	r3, #30
 800a9f4:	d87d      	bhi.n	800aaf2 <UART_SetConfig+0x6be>
 800a9f6:	a201      	add	r2, pc, #4	; (adr r2, 800a9fc <UART_SetConfig+0x5c8>)
 800a9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fc:	0800aa7f 	.word	0x0800aa7f
 800aa00:	0800aaf3 	.word	0x0800aaf3
 800aa04:	0800aa87 	.word	0x0800aa87
 800aa08:	0800aaf3 	.word	0x0800aaf3
 800aa0c:	0800aaf3 	.word	0x0800aaf3
 800aa10:	0800aaf3 	.word	0x0800aaf3
 800aa14:	0800aa97 	.word	0x0800aa97
 800aa18:	0800aaf3 	.word	0x0800aaf3
 800aa1c:	0800aaf3 	.word	0x0800aaf3
 800aa20:	0800aaf3 	.word	0x0800aaf3
 800aa24:	0800aaf3 	.word	0x0800aaf3
 800aa28:	0800aaf3 	.word	0x0800aaf3
 800aa2c:	0800aaf3 	.word	0x0800aaf3
 800aa30:	0800aaf3 	.word	0x0800aaf3
 800aa34:	0800aaa7 	.word	0x0800aaa7
 800aa38:	0800aaf3 	.word	0x0800aaf3
 800aa3c:	0800aaf3 	.word	0x0800aaf3
 800aa40:	0800aaf3 	.word	0x0800aaf3
 800aa44:	0800aaf3 	.word	0x0800aaf3
 800aa48:	0800aaf3 	.word	0x0800aaf3
 800aa4c:	0800aaf3 	.word	0x0800aaf3
 800aa50:	0800aaf3 	.word	0x0800aaf3
 800aa54:	0800aaf3 	.word	0x0800aaf3
 800aa58:	0800aaf3 	.word	0x0800aaf3
 800aa5c:	0800aaf3 	.word	0x0800aaf3
 800aa60:	0800aaf3 	.word	0x0800aaf3
 800aa64:	0800aaf3 	.word	0x0800aaf3
 800aa68:	0800aaf3 	.word	0x0800aaf3
 800aa6c:	0800aaf3 	.word	0x0800aaf3
 800aa70:	0800aaf3 	.word	0x0800aaf3
 800aa74:	0800aae5 	.word	0x0800aae5
 800aa78:	2b40      	cmp	r3, #64	; 0x40
 800aa7a:	d036      	beq.n	800aaea <UART_SetConfig+0x6b6>
 800aa7c:	e039      	b.n	800aaf2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aa7e:	f7fd f80d 	bl	8007a9c <HAL_RCCEx_GetD3PCLK1Freq>
 800aa82:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aa84:	e03b      	b.n	800aafe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa86:	f107 0314 	add.w	r3, r7, #20
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7fd f81c 	bl	8007ac8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa94:	e033      	b.n	800aafe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa96:	f107 0308 	add.w	r3, r7, #8
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7fd f968 	bl	8007d70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aaa4:	e02b      	b.n	800aafe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aaa6:	4b0a      	ldr	r3, [pc, #40]	; (800aad0 <UART_SetConfig+0x69c>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f003 0320 	and.w	r3, r3, #32
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d009      	beq.n	800aac6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aab2:	4b07      	ldr	r3, [pc, #28]	; (800aad0 <UART_SetConfig+0x69c>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	08db      	lsrs	r3, r3, #3
 800aab8:	f003 0303 	and.w	r3, r3, #3
 800aabc:	4a08      	ldr	r2, [pc, #32]	; (800aae0 <UART_SetConfig+0x6ac>)
 800aabe:	fa22 f303 	lsr.w	r3, r2, r3
 800aac2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aac4:	e01b      	b.n	800aafe <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800aac6:	4b06      	ldr	r3, [pc, #24]	; (800aae0 <UART_SetConfig+0x6ac>)
 800aac8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aaca:	e018      	b.n	800aafe <UART_SetConfig+0x6ca>
 800aacc:	40011400 	.word	0x40011400
 800aad0:	58024400 	.word	0x58024400
 800aad4:	40007800 	.word	0x40007800
 800aad8:	40007c00 	.word	0x40007c00
 800aadc:	58000c00 	.word	0x58000c00
 800aae0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aae4:	4bc4      	ldr	r3, [pc, #784]	; (800adf8 <UART_SetConfig+0x9c4>)
 800aae6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aae8:	e009      	b.n	800aafe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aaee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aaf0:	e005      	b.n	800aafe <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aafc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f000 81da 	beq.w	800aeba <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0a:	4abc      	ldr	r2, [pc, #752]	; (800adfc <UART_SetConfig+0x9c8>)
 800ab0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab10:	461a      	mov	r2, r3
 800ab12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab14:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab18:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	685a      	ldr	r2, [r3, #4]
 800ab1e:	4613      	mov	r3, r2
 800ab20:	005b      	lsls	r3, r3, #1
 800ab22:	4413      	add	r3, r2
 800ab24:	6a3a      	ldr	r2, [r7, #32]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d305      	bcc.n	800ab36 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab30:	6a3a      	ldr	r2, [r7, #32]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d903      	bls.n	800ab3e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800ab36:	2301      	movs	r3, #1
 800ab38:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ab3c:	e1bd      	b.n	800aeba <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab40:	4618      	mov	r0, r3
 800ab42:	f04f 0100 	mov.w	r1, #0
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab4a:	4aac      	ldr	r2, [pc, #688]	; (800adfc <UART_SetConfig+0x9c8>)
 800ab4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab50:	b29a      	uxth	r2, r3
 800ab52:	f04f 0300 	mov.w	r3, #0
 800ab56:	f7f5 fc1b 	bl	8000390 <__aeabi_uldivmod>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	4610      	mov	r0, r2
 800ab60:	4619      	mov	r1, r3
 800ab62:	f04f 0200 	mov.w	r2, #0
 800ab66:	f04f 0300 	mov.w	r3, #0
 800ab6a:	020b      	lsls	r3, r1, #8
 800ab6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab70:	0202      	lsls	r2, r0, #8
 800ab72:	6879      	ldr	r1, [r7, #4]
 800ab74:	6849      	ldr	r1, [r1, #4]
 800ab76:	0849      	lsrs	r1, r1, #1
 800ab78:	4608      	mov	r0, r1
 800ab7a:	f04f 0100 	mov.w	r1, #0
 800ab7e:	1814      	adds	r4, r2, r0
 800ab80:	eb43 0501 	adc.w	r5, r3, r1
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	461a      	mov	r2, r3
 800ab8a:	f04f 0300 	mov.w	r3, #0
 800ab8e:	4620      	mov	r0, r4
 800ab90:	4629      	mov	r1, r5
 800ab92:	f7f5 fbfd 	bl	8000390 <__aeabi_uldivmod>
 800ab96:	4602      	mov	r2, r0
 800ab98:	460b      	mov	r3, r1
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ab9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aba4:	d308      	bcc.n	800abb8 <UART_SetConfig+0x784>
 800aba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abac:	d204      	bcs.n	800abb8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abb4:	60da      	str	r2, [r3, #12]
 800abb6:	e180      	b.n	800aeba <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800abb8:	2301      	movs	r3, #1
 800abba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800abbe:	e17c      	b.n	800aeba <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	69db      	ldr	r3, [r3, #28]
 800abc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abc8:	f040 80bf 	bne.w	800ad4a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800abcc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800abd0:	2b20      	cmp	r3, #32
 800abd2:	dc49      	bgt.n	800ac68 <UART_SetConfig+0x834>
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	db7c      	blt.n	800acd2 <UART_SetConfig+0x89e>
 800abd8:	2b20      	cmp	r3, #32
 800abda:	d87a      	bhi.n	800acd2 <UART_SetConfig+0x89e>
 800abdc:	a201      	add	r2, pc, #4	; (adr r2, 800abe4 <UART_SetConfig+0x7b0>)
 800abde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe2:	bf00      	nop
 800abe4:	0800ac6f 	.word	0x0800ac6f
 800abe8:	0800ac77 	.word	0x0800ac77
 800abec:	0800acd3 	.word	0x0800acd3
 800abf0:	0800acd3 	.word	0x0800acd3
 800abf4:	0800ac7f 	.word	0x0800ac7f
 800abf8:	0800acd3 	.word	0x0800acd3
 800abfc:	0800acd3 	.word	0x0800acd3
 800ac00:	0800acd3 	.word	0x0800acd3
 800ac04:	0800ac8f 	.word	0x0800ac8f
 800ac08:	0800acd3 	.word	0x0800acd3
 800ac0c:	0800acd3 	.word	0x0800acd3
 800ac10:	0800acd3 	.word	0x0800acd3
 800ac14:	0800acd3 	.word	0x0800acd3
 800ac18:	0800acd3 	.word	0x0800acd3
 800ac1c:	0800acd3 	.word	0x0800acd3
 800ac20:	0800acd3 	.word	0x0800acd3
 800ac24:	0800ac9f 	.word	0x0800ac9f
 800ac28:	0800acd3 	.word	0x0800acd3
 800ac2c:	0800acd3 	.word	0x0800acd3
 800ac30:	0800acd3 	.word	0x0800acd3
 800ac34:	0800acd3 	.word	0x0800acd3
 800ac38:	0800acd3 	.word	0x0800acd3
 800ac3c:	0800acd3 	.word	0x0800acd3
 800ac40:	0800acd3 	.word	0x0800acd3
 800ac44:	0800acd3 	.word	0x0800acd3
 800ac48:	0800acd3 	.word	0x0800acd3
 800ac4c:	0800acd3 	.word	0x0800acd3
 800ac50:	0800acd3 	.word	0x0800acd3
 800ac54:	0800acd3 	.word	0x0800acd3
 800ac58:	0800acd3 	.word	0x0800acd3
 800ac5c:	0800acd3 	.word	0x0800acd3
 800ac60:	0800acd3 	.word	0x0800acd3
 800ac64:	0800acc5 	.word	0x0800acc5
 800ac68:	2b40      	cmp	r3, #64	; 0x40
 800ac6a:	d02e      	beq.n	800acca <UART_SetConfig+0x896>
 800ac6c:	e031      	b.n	800acd2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac6e:	f7fb ffa9 	bl	8006bc4 <HAL_RCC_GetPCLK1Freq>
 800ac72:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ac74:	e033      	b.n	800acde <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac76:	f7fb ffbb 	bl	8006bf0 <HAL_RCC_GetPCLK2Freq>
 800ac7a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ac7c:	e02f      	b.n	800acde <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac7e:	f107 0314 	add.w	r3, r7, #20
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7fc ff20 	bl	8007ac8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac8c:	e027      	b.n	800acde <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac8e:	f107 0308 	add.w	r3, r7, #8
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7fd f86c 	bl	8007d70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac9c:	e01f      	b.n	800acde <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac9e:	4b58      	ldr	r3, [pc, #352]	; (800ae00 <UART_SetConfig+0x9cc>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f003 0320 	and.w	r3, r3, #32
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d009      	beq.n	800acbe <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800acaa:	4b55      	ldr	r3, [pc, #340]	; (800ae00 <UART_SetConfig+0x9cc>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	08db      	lsrs	r3, r3, #3
 800acb0:	f003 0303 	and.w	r3, r3, #3
 800acb4:	4a53      	ldr	r2, [pc, #332]	; (800ae04 <UART_SetConfig+0x9d0>)
 800acb6:	fa22 f303 	lsr.w	r3, r2, r3
 800acba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800acbc:	e00f      	b.n	800acde <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800acbe:	4b51      	ldr	r3, [pc, #324]	; (800ae04 <UART_SetConfig+0x9d0>)
 800acc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acc2:	e00c      	b.n	800acde <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800acc4:	4b4c      	ldr	r3, [pc, #304]	; (800adf8 <UART_SetConfig+0x9c4>)
 800acc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acc8:	e009      	b.n	800acde <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acd0:	e005      	b.n	800acde <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800acd2:	2300      	movs	r3, #0
 800acd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800acdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800acde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f000 80ea 	beq.w	800aeba <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acea:	4a44      	ldr	r2, [pc, #272]	; (800adfc <UART_SetConfig+0x9c8>)
 800acec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acf0:	461a      	mov	r2, r3
 800acf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf4:	fbb3 f3f2 	udiv	r3, r3, r2
 800acf8:	005a      	lsls	r2, r3, #1
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	085b      	lsrs	r3, r3, #1
 800ad00:	441a      	add	r2, r3
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad10:	2b0f      	cmp	r3, #15
 800ad12:	d916      	bls.n	800ad42 <UART_SetConfig+0x90e>
 800ad14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad1a:	d212      	bcs.n	800ad42 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	f023 030f 	bic.w	r3, r3, #15
 800ad24:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad28:	085b      	lsrs	r3, r3, #1
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	f003 0307 	and.w	r3, r3, #7
 800ad30:	b29a      	uxth	r2, r3
 800ad32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ad34:	4313      	orrs	r3, r2
 800ad36:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ad3e:	60da      	str	r2, [r3, #12]
 800ad40:	e0bb      	b.n	800aeba <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
 800ad44:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ad48:	e0b7      	b.n	800aeba <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ad4e:	2b20      	cmp	r3, #32
 800ad50:	dc4a      	bgt.n	800ade8 <UART_SetConfig+0x9b4>
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	f2c0 8086 	blt.w	800ae64 <UART_SetConfig+0xa30>
 800ad58:	2b20      	cmp	r3, #32
 800ad5a:	f200 8083 	bhi.w	800ae64 <UART_SetConfig+0xa30>
 800ad5e:	a201      	add	r2, pc, #4	; (adr r2, 800ad64 <UART_SetConfig+0x930>)
 800ad60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad64:	0800adef 	.word	0x0800adef
 800ad68:	0800ae09 	.word	0x0800ae09
 800ad6c:	0800ae65 	.word	0x0800ae65
 800ad70:	0800ae65 	.word	0x0800ae65
 800ad74:	0800ae11 	.word	0x0800ae11
 800ad78:	0800ae65 	.word	0x0800ae65
 800ad7c:	0800ae65 	.word	0x0800ae65
 800ad80:	0800ae65 	.word	0x0800ae65
 800ad84:	0800ae21 	.word	0x0800ae21
 800ad88:	0800ae65 	.word	0x0800ae65
 800ad8c:	0800ae65 	.word	0x0800ae65
 800ad90:	0800ae65 	.word	0x0800ae65
 800ad94:	0800ae65 	.word	0x0800ae65
 800ad98:	0800ae65 	.word	0x0800ae65
 800ad9c:	0800ae65 	.word	0x0800ae65
 800ada0:	0800ae65 	.word	0x0800ae65
 800ada4:	0800ae31 	.word	0x0800ae31
 800ada8:	0800ae65 	.word	0x0800ae65
 800adac:	0800ae65 	.word	0x0800ae65
 800adb0:	0800ae65 	.word	0x0800ae65
 800adb4:	0800ae65 	.word	0x0800ae65
 800adb8:	0800ae65 	.word	0x0800ae65
 800adbc:	0800ae65 	.word	0x0800ae65
 800adc0:	0800ae65 	.word	0x0800ae65
 800adc4:	0800ae65 	.word	0x0800ae65
 800adc8:	0800ae65 	.word	0x0800ae65
 800adcc:	0800ae65 	.word	0x0800ae65
 800add0:	0800ae65 	.word	0x0800ae65
 800add4:	0800ae65 	.word	0x0800ae65
 800add8:	0800ae65 	.word	0x0800ae65
 800addc:	0800ae65 	.word	0x0800ae65
 800ade0:	0800ae65 	.word	0x0800ae65
 800ade4:	0800ae57 	.word	0x0800ae57
 800ade8:	2b40      	cmp	r3, #64	; 0x40
 800adea:	d037      	beq.n	800ae5c <UART_SetConfig+0xa28>
 800adec:	e03a      	b.n	800ae64 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adee:	f7fb fee9 	bl	8006bc4 <HAL_RCC_GetPCLK1Freq>
 800adf2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800adf4:	e03c      	b.n	800ae70 <UART_SetConfig+0xa3c>
 800adf6:	bf00      	nop
 800adf8:	003d0900 	.word	0x003d0900
 800adfc:	0800f654 	.word	0x0800f654
 800ae00:	58024400 	.word	0x58024400
 800ae04:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae08:	f7fb fef2 	bl	8006bf0 <HAL_RCC_GetPCLK2Freq>
 800ae0c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ae0e:	e02f      	b.n	800ae70 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae10:	f107 0314 	add.w	r3, r7, #20
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7fc fe57 	bl	8007ac8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae1e:	e027      	b.n	800ae70 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae20:	f107 0308 	add.w	r3, r7, #8
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7fc ffa3 	bl	8007d70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae2e:	e01f      	b.n	800ae70 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae30:	4b2c      	ldr	r3, [pc, #176]	; (800aee4 <UART_SetConfig+0xab0>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f003 0320 	and.w	r3, r3, #32
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d009      	beq.n	800ae50 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae3c:	4b29      	ldr	r3, [pc, #164]	; (800aee4 <UART_SetConfig+0xab0>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	08db      	lsrs	r3, r3, #3
 800ae42:	f003 0303 	and.w	r3, r3, #3
 800ae46:	4a28      	ldr	r2, [pc, #160]	; (800aee8 <UART_SetConfig+0xab4>)
 800ae48:	fa22 f303 	lsr.w	r3, r2, r3
 800ae4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae4e:	e00f      	b.n	800ae70 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800ae50:	4b25      	ldr	r3, [pc, #148]	; (800aee8 <UART_SetConfig+0xab4>)
 800ae52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae54:	e00c      	b.n	800ae70 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae56:	4b25      	ldr	r3, [pc, #148]	; (800aeec <UART_SetConfig+0xab8>)
 800ae58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae5a:	e009      	b.n	800ae70 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae62:	e005      	b.n	800ae70 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800ae64:	2300      	movs	r3, #0
 800ae66:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ae6e:	bf00      	nop
    }

    if (pclk != 0U)
 800ae70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d021      	beq.n	800aeba <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7a:	4a1d      	ldr	r2, [pc, #116]	; (800aef0 <UART_SetConfig+0xabc>)
 800ae7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae80:	461a      	mov	r2, r3
 800ae82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae84:	fbb3 f2f2 	udiv	r2, r3, r2
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	085b      	lsrs	r3, r3, #1
 800ae8e:	441a      	add	r2, r3
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9e:	2b0f      	cmp	r3, #15
 800aea0:	d908      	bls.n	800aeb4 <UART_SetConfig+0xa80>
 800aea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aea8:	d204      	bcs.n	800aeb4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aeb0:	60da      	str	r2, [r3, #12]
 800aeb2:	e002      	b.n	800aeba <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2201      	movs	r2, #1
 800aebe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2201      	movs	r2, #1
 800aec6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2200      	movs	r2, #0
 800aece:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800aed6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3738      	adds	r7, #56	; 0x38
 800aede:	46bd      	mov	sp, r7
 800aee0:	bdb0      	pop	{r4, r5, r7, pc}
 800aee2:	bf00      	nop
 800aee4:	58024400 	.word	0x58024400
 800aee8:	03d09000 	.word	0x03d09000
 800aeec:	003d0900 	.word	0x003d0900
 800aef0:	0800f654 	.word	0x0800f654

0800aef4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af00:	f003 0301 	and.w	r3, r3, #1
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00a      	beq.n	800af1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	430a      	orrs	r2, r1
 800af1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af22:	f003 0302 	and.w	r3, r3, #2
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00a      	beq.n	800af40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	430a      	orrs	r2, r1
 800af3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af44:	f003 0304 	and.w	r3, r3, #4
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00a      	beq.n	800af62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	430a      	orrs	r2, r1
 800af60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af66:	f003 0308 	and.w	r3, r3, #8
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00a      	beq.n	800af84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	430a      	orrs	r2, r1
 800af82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af88:	f003 0310 	and.w	r3, r3, #16
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00a      	beq.n	800afa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	430a      	orrs	r2, r1
 800afa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afaa:	f003 0320 	and.w	r3, r3, #32
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00a      	beq.n	800afc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	430a      	orrs	r2, r1
 800afc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d01a      	beq.n	800b00a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	430a      	orrs	r2, r1
 800afe8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aff2:	d10a      	bne.n	800b00a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	430a      	orrs	r2, r1
 800b008:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b00e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b012:	2b00      	cmp	r3, #0
 800b014:	d00a      	beq.n	800b02c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	430a      	orrs	r2, r1
 800b02a:	605a      	str	r2, [r3, #4]
  }
}
 800b02c:	bf00      	nop
 800b02e:	370c      	adds	r7, #12
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b086      	sub	sp, #24
 800b03c:	af02      	add	r7, sp, #8
 800b03e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b048:	f7f7 fff8 	bl	800303c <HAL_GetTick>
 800b04c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f003 0308 	and.w	r3, r3, #8
 800b058:	2b08      	cmp	r3, #8
 800b05a:	d10e      	bne.n	800b07a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b05c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b060:	9300      	str	r3, [sp, #0]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2200      	movs	r2, #0
 800b066:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f82f 	bl	800b0ce <UART_WaitOnFlagUntilTimeout>
 800b070:	4603      	mov	r3, r0
 800b072:	2b00      	cmp	r3, #0
 800b074:	d001      	beq.n	800b07a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b076:	2303      	movs	r3, #3
 800b078:	e025      	b.n	800b0c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f003 0304 	and.w	r3, r3, #4
 800b084:	2b04      	cmp	r3, #4
 800b086:	d10e      	bne.n	800b0a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b088:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2200      	movs	r2, #0
 800b092:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 f819 	bl	800b0ce <UART_WaitOnFlagUntilTimeout>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d001      	beq.n	800b0a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0a2:	2303      	movs	r3, #3
 800b0a4:	e00f      	b.n	800b0c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2220      	movs	r2, #32
 800b0aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2220      	movs	r2, #32
 800b0b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b084      	sub	sp, #16
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	60f8      	str	r0, [r7, #12]
 800b0d6:	60b9      	str	r1, [r7, #8]
 800b0d8:	603b      	str	r3, [r7, #0]
 800b0da:	4613      	mov	r3, r2
 800b0dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0de:	e062      	b.n	800b1a6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e6:	d05e      	beq.n	800b1a6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0e8:	f7f7 ffa8 	bl	800303c <HAL_GetTick>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	69ba      	ldr	r2, [r7, #24]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d302      	bcc.n	800b0fe <UART_WaitOnFlagUntilTimeout+0x30>
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d11d      	bne.n	800b13a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b10c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	689a      	ldr	r2, [r3, #8]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f022 0201 	bic.w	r2, r2, #1
 800b11c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2220      	movs	r2, #32
 800b122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2220      	movs	r2, #32
 800b12a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2200      	movs	r2, #0
 800b132:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b136:	2303      	movs	r3, #3
 800b138:	e045      	b.n	800b1c6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f003 0304 	and.w	r3, r3, #4
 800b144:	2b00      	cmp	r3, #0
 800b146:	d02e      	beq.n	800b1a6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	69db      	ldr	r3, [r3, #28]
 800b14e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b156:	d126      	bne.n	800b1a6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b160:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	681a      	ldr	r2, [r3, #0]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b170:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	689a      	ldr	r2, [r3, #8]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f022 0201 	bic.w	r2, r2, #1
 800b180:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2220      	movs	r2, #32
 800b186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2220      	movs	r2, #32
 800b18e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2220      	movs	r2, #32
 800b196:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2200      	movs	r2, #0
 800b19e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b1a2:	2303      	movs	r3, #3
 800b1a4:	e00f      	b.n	800b1c6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	69da      	ldr	r2, [r3, #28]
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	4013      	ands	r3, r2
 800b1b0:	68ba      	ldr	r2, [r7, #8]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	bf0c      	ite	eq
 800b1b6:	2301      	moveq	r3, #1
 800b1b8:	2300      	movne	r3, #0
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	461a      	mov	r2, r3
 800b1be:	79fb      	ldrb	r3, [r7, #7]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d08d      	beq.n	800b0e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
	...

0800b1d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b085      	sub	sp, #20
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	4613      	mov	r3, r2
 800b1dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	68ba      	ldr	r2, [r7, #8]
 800b1e2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	88fa      	ldrh	r2, [r7, #6]
 800b1e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	88fa      	ldrh	r2, [r7, #6]
 800b1f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b202:	d10e      	bne.n	800b222 <UART_Start_Receive_IT+0x52>
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d105      	bne.n	800b218 <UART_Start_Receive_IT+0x48>
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b212:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b216:	e02d      	b.n	800b274 <UART_Start_Receive_IT+0xa4>
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	22ff      	movs	r2, #255	; 0xff
 800b21c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b220:	e028      	b.n	800b274 <UART_Start_Receive_IT+0xa4>
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d10d      	bne.n	800b246 <UART_Start_Receive_IT+0x76>
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d104      	bne.n	800b23c <UART_Start_Receive_IT+0x6c>
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	22ff      	movs	r2, #255	; 0xff
 800b236:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b23a:	e01b      	b.n	800b274 <UART_Start_Receive_IT+0xa4>
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	227f      	movs	r2, #127	; 0x7f
 800b240:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b244:	e016      	b.n	800b274 <UART_Start_Receive_IT+0xa4>
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b24e:	d10d      	bne.n	800b26c <UART_Start_Receive_IT+0x9c>
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	691b      	ldr	r3, [r3, #16]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d104      	bne.n	800b262 <UART_Start_Receive_IT+0x92>
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	227f      	movs	r2, #127	; 0x7f
 800b25c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b260:	e008      	b.n	800b274 <UART_Start_Receive_IT+0xa4>
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	223f      	movs	r2, #63	; 0x3f
 800b266:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b26a:	e003      	b.n	800b274 <UART_Start_Receive_IT+0xa4>
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2200      	movs	r2, #0
 800b270:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2200      	movs	r2, #0
 800b278:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2222      	movs	r2, #34	; 0x22
 800b280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	689a      	ldr	r2, [r3, #8]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f042 0201 	orr.w	r2, r2, #1
 800b292:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b29c:	d12a      	bne.n	800b2f4 <UART_Start_Receive_IT+0x124>
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b2a4:	88fa      	ldrh	r2, [r7, #6]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d324      	bcc.n	800b2f4 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2b2:	d107      	bne.n	800b2c4 <UART_Start_Receive_IT+0xf4>
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	691b      	ldr	r3, [r3, #16]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d103      	bne.n	800b2c4 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	4a1f      	ldr	r2, [pc, #124]	; (800b33c <UART_Start_Receive_IT+0x16c>)
 800b2c0:	671a      	str	r2, [r3, #112]	; 0x70
 800b2c2:	e002      	b.n	800b2ca <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	4a1e      	ldr	r2, [pc, #120]	; (800b340 <UART_Start_Receive_IT+0x170>)
 800b2c8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b2e0:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	689a      	ldr	r2, [r3, #8]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b2f0:	609a      	str	r2, [r3, #8]
 800b2f2:	e01b      	b.n	800b32c <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2fc:	d107      	bne.n	800b30e <UART_Start_Receive_IT+0x13e>
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	691b      	ldr	r3, [r3, #16]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d103      	bne.n	800b30e <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	4a0e      	ldr	r2, [pc, #56]	; (800b344 <UART_Start_Receive_IT+0x174>)
 800b30a:	671a      	str	r2, [r3, #112]	; 0x70
 800b30c:	e002      	b.n	800b314 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	4a0d      	ldr	r2, [pc, #52]	; (800b348 <UART_Start_Receive_IT+0x178>)
 800b312:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2200      	movs	r2, #0
 800b318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800b32a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3714      	adds	r7, #20
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	0800b7c5 	.word	0x0800b7c5
 800b340:	0800b5c1 	.word	0x0800b5c1
 800b344:	0800b4e9 	.word	0x0800b4e9
 800b348:	0800b411 	.word	0x0800b411

0800b34c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	681a      	ldr	r2, [r3, #0]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b362:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	6899      	ldr	r1, [r3, #8]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	4b0f      	ldr	r3, [pc, #60]	; (800b3ac <UART_EndRxTransfer+0x60>)
 800b370:	400b      	ands	r3, r1
 800b372:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d107      	bne.n	800b38c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f022 0210 	bic.w	r2, r2, #16
 800b38a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2220      	movs	r2, #32
 800b390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2200      	movs	r2, #0
 800b398:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2200      	movs	r2, #0
 800b39e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b3a0:	bf00      	nop
 800b3a2:	370c      	adds	r7, #12
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr
 800b3ac:	effffffe 	.word	0xeffffffe

0800b3b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f7ff f81a 	bl	800a408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3d4:	bf00      	nop
 800b3d6:	3710      	adds	r7, #16
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3f2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2220      	movs	r2, #32
 800b3f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f7f6 fdec 	bl	8001fe0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b408:	bf00      	nop
 800b40a:	3708      	adds	r7, #8
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b41e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b426:	2b22      	cmp	r3, #34	; 0x22
 800b428:	d152      	bne.n	800b4d0 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b430:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b432:	89bb      	ldrh	r3, [r7, #12]
 800b434:	b2d9      	uxtb	r1, r3
 800b436:	89fb      	ldrh	r3, [r7, #14]
 800b438:	b2da      	uxtb	r2, r3
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b43e:	400a      	ands	r2, r1
 800b440:	b2d2      	uxtb	r2, r2
 800b442:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b448:	1c5a      	adds	r2, r3, #1
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b454:	b29b      	uxth	r3, r3
 800b456:	3b01      	subs	r3, #1
 800b458:	b29a      	uxth	r2, r3
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b466:	b29b      	uxth	r3, r3
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d139      	bne.n	800b4e0 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b47a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	689a      	ldr	r2, [r3, #8]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f022 0201 	bic.w	r2, r2, #1
 800b48a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2220      	movs	r2, #32
 800b490:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d10f      	bne.n	800b4c2 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f022 0210 	bic.w	r2, r2, #16
 800b4b0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f7fe ffae 	bl	800a41c <HAL_UARTEx_RxEventCallback>
 800b4c0:	e002      	b.n	800b4c8 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f7f6 fcba 	bl	8001e3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b4ce:	e007      	b.n	800b4e0 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	699a      	ldr	r2, [r3, #24]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f042 0208 	orr.w	r2, r2, #8
 800b4de:	619a      	str	r2, [r3, #24]
}
 800b4e0:	bf00      	nop
 800b4e2:	3710      	adds	r7, #16
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b4f6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4fe:	2b22      	cmp	r3, #34	; 0x22
 800b500:	d152      	bne.n	800b5a8 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b508:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b50e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b510:	89ba      	ldrh	r2, [r7, #12]
 800b512:	89fb      	ldrh	r3, [r7, #14]
 800b514:	4013      	ands	r3, r2
 800b516:	b29a      	uxth	r2, r3
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b520:	1c9a      	adds	r2, r3, #2
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	3b01      	subs	r3, #1
 800b530:	b29a      	uxth	r2, r3
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b53e:	b29b      	uxth	r3, r3
 800b540:	2b00      	cmp	r3, #0
 800b542:	d139      	bne.n	800b5b8 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b552:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	689a      	ldr	r2, [r3, #8]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f022 0201 	bic.w	r2, r2, #1
 800b562:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2220      	movs	r2, #32
 800b568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b576:	2b01      	cmp	r3, #1
 800b578:	d10f      	bne.n	800b59a <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f022 0210 	bic.w	r2, r2, #16
 800b588:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b590:	4619      	mov	r1, r3
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f7fe ff42 	bl	800a41c <HAL_UARTEx_RxEventCallback>
 800b598:	e002      	b.n	800b5a0 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f7f6 fc4e 	bl	8001e3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b5a6:	e007      	b.n	800b5b8 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	699a      	ldr	r2, [r3, #24]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f042 0208 	orr.w	r2, r2, #8
 800b5b6:	619a      	str	r2, [r3, #24]
}
 800b5b8:	bf00      	nop
 800b5ba:	3710      	adds	r7, #16
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b088      	sub	sp, #32
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b5ce:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	69db      	ldr	r3, [r3, #28]
 800b5d6:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5ee:	2b22      	cmp	r3, #34	; 0x22
 800b5f0:	f040 80d8 	bne.w	800b7a4 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b5fa:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b5fc:	e0a8      	b.n	800b750 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b604:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b606:	89bb      	ldrh	r3, [r7, #12]
 800b608:	b2d9      	uxtb	r1, r3
 800b60a:	8b7b      	ldrh	r3, [r7, #26]
 800b60c:	b2da      	uxtb	r2, r3
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b612:	400a      	ands	r2, r1
 800b614:	b2d2      	uxtb	r2, r2
 800b616:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b61c:	1c5a      	adds	r2, r3, #1
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b628:	b29b      	uxth	r3, r3
 800b62a:	3b01      	subs	r3, #1
 800b62c:	b29a      	uxth	r2, r3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	69db      	ldr	r3, [r3, #28]
 800b63a:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	f003 0307 	and.w	r3, r3, #7
 800b642:	2b00      	cmp	r3, #0
 800b644:	d04d      	beq.n	800b6e2 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	f003 0301 	and.w	r3, r3, #1
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d010      	beq.n	800b672 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b656:	2b00      	cmp	r3, #0
 800b658:	d00b      	beq.n	800b672 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2201      	movs	r2, #1
 800b660:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b668:	f043 0201 	orr.w	r2, r3, #1
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	f003 0302 	and.w	r3, r3, #2
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d010      	beq.n	800b69e <UART_RxISR_8BIT_FIFOEN+0xde>
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	f003 0301 	and.w	r3, r3, #1
 800b682:	2b00      	cmp	r3, #0
 800b684:	d00b      	beq.n	800b69e <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2202      	movs	r2, #2
 800b68c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b694:	f043 0204 	orr.w	r2, r3, #4
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	f003 0304 	and.w	r3, r3, #4
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d010      	beq.n	800b6ca <UART_RxISR_8BIT_FIFOEN+0x10a>
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	f003 0301 	and.w	r3, r3, #1
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d00b      	beq.n	800b6ca <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2204      	movs	r2, #4
 800b6b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6c0:	f043 0202 	orr.w	r2, r3, #2
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d006      	beq.n	800b6e2 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f7fe fe97 	bl	800a408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b6e8:	b29b      	uxth	r3, r3
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d130      	bne.n	800b750 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b6fc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	6899      	ldr	r1, [r3, #8]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	4b2c      	ldr	r3, [pc, #176]	; (800b7bc <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800b70a:	400b      	ands	r3, r1
 800b70c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2220      	movs	r2, #32
 800b712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b720:	2b01      	cmp	r3, #1
 800b722:	d10f      	bne.n	800b744 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f022 0210 	bic.w	r2, r2, #16
 800b732:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b73a:	4619      	mov	r1, r3
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f7fe fe6d 	bl	800a41c <HAL_UARTEx_RxEventCallback>
 800b742:	e002      	b.n	800b74a <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f7f6 fb79 	bl	8001e3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2200      	movs	r2, #0
 800b74e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b750:	89fb      	ldrh	r3, [r7, #14]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d005      	beq.n	800b762 <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800b756:	69fb      	ldr	r3, [r7, #28]
 800b758:	f003 0320 	and.w	r3, r3, #32
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	f47f af4e 	bne.w	800b5fe <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b768:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b76a:	897b      	ldrh	r3, [r7, #10]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d021      	beq.n	800b7b4 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b776:	897a      	ldrh	r2, [r7, #10]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d21b      	bcs.n	800b7b4 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	689a      	ldr	r2, [r3, #8]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800b78a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4a0c      	ldr	r2, [pc, #48]	; (800b7c0 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800b790:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f042 0220 	orr.w	r2, r2, #32
 800b7a0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b7a2:	e007      	b.n	800b7b4 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	699a      	ldr	r2, [r3, #24]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f042 0208 	orr.w	r2, r2, #8
 800b7b2:	619a      	str	r2, [r3, #24]
}
 800b7b4:	bf00      	nop
 800b7b6:	3720      	adds	r7, #32
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	effffffe 	.word	0xeffffffe
 800b7c0:	0800b411 	.word	0x0800b411

0800b7c4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b08a      	sub	sp, #40	; 0x28
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b7d2:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	69db      	ldr	r3, [r3, #28]
 800b7da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7f2:	2b22      	cmp	r3, #34	; 0x22
 800b7f4:	f040 80d8 	bne.w	800b9a8 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b7fe:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b800:	e0a8      	b.n	800b954 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b808:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b80e:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800b810:	8aba      	ldrh	r2, [r7, #20]
 800b812:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b814:	4013      	ands	r3, r2
 800b816:	b29a      	uxth	r2, r3
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b820:	1c9a      	adds	r2, r3, #2
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	3b01      	subs	r3, #1
 800b830:	b29a      	uxth	r2, r3
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	69db      	ldr	r3, [r3, #28]
 800b83e:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b842:	f003 0307 	and.w	r3, r3, #7
 800b846:	2b00      	cmp	r3, #0
 800b848:	d04d      	beq.n	800b8e6 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84c:	f003 0301 	and.w	r3, r3, #1
 800b850:	2b00      	cmp	r3, #0
 800b852:	d010      	beq.n	800b876 <UART_RxISR_16BIT_FIFOEN+0xb2>
 800b854:	69fb      	ldr	r3, [r7, #28]
 800b856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00b      	beq.n	800b876 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2201      	movs	r2, #1
 800b864:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b86c:	f043 0201 	orr.w	r2, r3, #1
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b878:	f003 0302 	and.w	r3, r3, #2
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d010      	beq.n	800b8a2 <UART_RxISR_16BIT_FIFOEN+0xde>
 800b880:	69bb      	ldr	r3, [r7, #24]
 800b882:	f003 0301 	and.w	r3, r3, #1
 800b886:	2b00      	cmp	r3, #0
 800b888:	d00b      	beq.n	800b8a2 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2202      	movs	r2, #2
 800b890:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b898:	f043 0204 	orr.w	r2, r3, #4
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a4:	f003 0304 	and.w	r3, r3, #4
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d010      	beq.n	800b8ce <UART_RxISR_16BIT_FIFOEN+0x10a>
 800b8ac:	69bb      	ldr	r3, [r7, #24]
 800b8ae:	f003 0301 	and.w	r3, r3, #1
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00b      	beq.n	800b8ce <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2204      	movs	r2, #4
 800b8bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8c4:	f043 0202 	orr.w	r2, r3, #2
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d006      	beq.n	800b8e6 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f7fe fd95 	bl	800a408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d130      	bne.n	800b954 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b900:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	6899      	ldr	r1, [r3, #8]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	4b2c      	ldr	r3, [pc, #176]	; (800b9c0 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800b90e:	400b      	ands	r3, r1
 800b910:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2220      	movs	r2, #32
 800b916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b924:	2b01      	cmp	r3, #1
 800b926:	d10f      	bne.n	800b948 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f022 0210 	bic.w	r2, r2, #16
 800b936:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b93e:	4619      	mov	r1, r3
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f7fe fd6b 	bl	800a41c <HAL_UARTEx_RxEventCallback>
 800b946:	e002      	b.n	800b94e <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f7f6 fa77 	bl	8001e3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2200      	movs	r2, #0
 800b952:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b954:	8afb      	ldrh	r3, [r7, #22]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d005      	beq.n	800b966 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800b95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95c:	f003 0320 	and.w	r3, r3, #32
 800b960:	2b00      	cmp	r3, #0
 800b962:	f47f af4e 	bne.w	800b802 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b96c:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b96e:	89fb      	ldrh	r3, [r7, #14]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d021      	beq.n	800b9b8 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b97a:	89fa      	ldrh	r2, [r7, #14]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d21b      	bcs.n	800b9b8 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	689a      	ldr	r2, [r3, #8]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800b98e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	4a0c      	ldr	r2, [pc, #48]	; (800b9c4 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800b994:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f042 0220 	orr.w	r2, r2, #32
 800b9a4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b9a6:	e007      	b.n	800b9b8 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	699a      	ldr	r2, [r3, #24]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f042 0208 	orr.w	r2, r2, #8
 800b9b6:	619a      	str	r2, [r3, #24]
}
 800b9b8:	bf00      	nop
 800b9ba:	3728      	adds	r7, #40	; 0x28
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	effffffe 	.word	0xeffffffe
 800b9c4:	0800b4e9 	.word	0x0800b4e9

0800b9c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b9e4:	bf00      	nop
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b9f8:	bf00      	nop
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b085      	sub	sp, #20
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d101      	bne.n	800ba1a <HAL_UARTEx_DisableFifoMode+0x16>
 800ba16:	2302      	movs	r3, #2
 800ba18:	e027      	b.n	800ba6a <HAL_UARTEx_DisableFifoMode+0x66>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2224      	movs	r2, #36	; 0x24
 800ba26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	681a      	ldr	r2, [r3, #0]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f022 0201 	bic.w	r2, r2, #1
 800ba40:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ba48:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	68fa      	ldr	r2, [r7, #12]
 800ba56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2220      	movs	r2, #32
 800ba5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2200      	movs	r2, #0
 800ba64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3714      	adds	r7, #20
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr

0800ba76 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b084      	sub	sp, #16
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
 800ba7e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d101      	bne.n	800ba8e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ba8a:	2302      	movs	r3, #2
 800ba8c:	e02d      	b.n	800baea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2201      	movs	r2, #1
 800ba92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2224      	movs	r2, #36	; 0x24
 800ba9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f022 0201 	bic.w	r2, r2, #1
 800bab4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	689b      	ldr	r3, [r3, #8]
 800babc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	683a      	ldr	r2, [r7, #0]
 800bac6:	430a      	orrs	r2, r1
 800bac8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 f850 	bl	800bb70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2220      	movs	r2, #32
 800badc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2200      	movs	r2, #0
 800bae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bae8:	2300      	movs	r3, #0
}
 800baea:	4618      	mov	r0, r3
 800baec:	3710      	adds	r7, #16
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}

0800baf2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b084      	sub	sp, #16
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
 800bafa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d101      	bne.n	800bb0a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb06:	2302      	movs	r3, #2
 800bb08:	e02d      	b.n	800bb66 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2224      	movs	r2, #36	; 0x24
 800bb16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	681a      	ldr	r2, [r3, #0]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f022 0201 	bic.w	r2, r2, #1
 800bb30:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	683a      	ldr	r2, [r7, #0]
 800bb42:	430a      	orrs	r2, r1
 800bb44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f000 f812 	bl	800bb70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2220      	movs	r2, #32
 800bb58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bb64:	2300      	movs	r3, #0
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3710      	adds	r7, #16
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
	...

0800bb70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b085      	sub	sp, #20
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d108      	bne.n	800bb92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb90:	e031      	b.n	800bbf6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb92:	2310      	movs	r3, #16
 800bb94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb96:	2310      	movs	r3, #16
 800bb98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	0e5b      	lsrs	r3, r3, #25
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	f003 0307 	and.w	r3, r3, #7
 800bba8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	689b      	ldr	r3, [r3, #8]
 800bbb0:	0f5b      	lsrs	r3, r3, #29
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	f003 0307 	and.w	r3, r3, #7
 800bbb8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bbba:	7bbb      	ldrb	r3, [r7, #14]
 800bbbc:	7b3a      	ldrb	r2, [r7, #12]
 800bbbe:	4911      	ldr	r1, [pc, #68]	; (800bc04 <UARTEx_SetNbDataToProcess+0x94>)
 800bbc0:	5c8a      	ldrb	r2, [r1, r2]
 800bbc2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bbc6:	7b3a      	ldrb	r2, [r7, #12]
 800bbc8:	490f      	ldr	r1, [pc, #60]	; (800bc08 <UARTEx_SetNbDataToProcess+0x98>)
 800bbca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bbcc:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbd0:	b29a      	uxth	r2, r3
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bbd8:	7bfb      	ldrb	r3, [r7, #15]
 800bbda:	7b7a      	ldrb	r2, [r7, #13]
 800bbdc:	4909      	ldr	r1, [pc, #36]	; (800bc04 <UARTEx_SetNbDataToProcess+0x94>)
 800bbde:	5c8a      	ldrb	r2, [r1, r2]
 800bbe0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bbe4:	7b7a      	ldrb	r2, [r7, #13]
 800bbe6:	4908      	ldr	r1, [pc, #32]	; (800bc08 <UARTEx_SetNbDataToProcess+0x98>)
 800bbe8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bbea:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbee:	b29a      	uxth	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bbf6:	bf00      	nop
 800bbf8:	3714      	adds	r7, #20
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr
 800bc02:	bf00      	nop
 800bc04:	0800f66c 	.word	0x0800f66c
 800bc08:	0800f674 	.word	0x0800f674
 800bc0c:	00000000 	.word	0x00000000

0800bc10 <cos>:
 800bc10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc12:	eeb0 7b40 	vmov.f64	d7, d0
 800bc16:	ee17 3a90 	vmov	r3, s15
 800bc1a:	4a1f      	ldr	r2, [pc, #124]	; (800bc98 <cos+0x88>)
 800bc1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc20:	4293      	cmp	r3, r2
 800bc22:	dc04      	bgt.n	800bc2e <cos+0x1e>
 800bc24:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800bc90 <cos+0x80>
 800bc28:	f000 fb0e 	bl	800c248 <__kernel_cos>
 800bc2c:	e004      	b.n	800bc38 <cos+0x28>
 800bc2e:	4a1b      	ldr	r2, [pc, #108]	; (800bc9c <cos+0x8c>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	dd04      	ble.n	800bc3e <cos+0x2e>
 800bc34:	ee30 0b40 	vsub.f64	d0, d0, d0
 800bc38:	b005      	add	sp, #20
 800bc3a:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc3e:	4668      	mov	r0, sp
 800bc40:	f000 f9be 	bl	800bfc0 <__ieee754_rem_pio2>
 800bc44:	f000 0003 	and.w	r0, r0, #3
 800bc48:	2801      	cmp	r0, #1
 800bc4a:	d007      	beq.n	800bc5c <cos+0x4c>
 800bc4c:	2802      	cmp	r0, #2
 800bc4e:	d00e      	beq.n	800bc6e <cos+0x5e>
 800bc50:	b9a0      	cbnz	r0, 800bc7c <cos+0x6c>
 800bc52:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bc56:	ed9d 0b00 	vldr	d0, [sp]
 800bc5a:	e7e5      	b.n	800bc28 <cos+0x18>
 800bc5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bc60:	ed9d 0b00 	vldr	d0, [sp]
 800bc64:	f000 fddc 	bl	800c820 <__kernel_sin>
 800bc68:	eeb1 0b40 	vneg.f64	d0, d0
 800bc6c:	e7e4      	b.n	800bc38 <cos+0x28>
 800bc6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bc72:	ed9d 0b00 	vldr	d0, [sp]
 800bc76:	f000 fae7 	bl	800c248 <__kernel_cos>
 800bc7a:	e7f5      	b.n	800bc68 <cos+0x58>
 800bc7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bc80:	ed9d 0b00 	vldr	d0, [sp]
 800bc84:	2001      	movs	r0, #1
 800bc86:	f000 fdcb 	bl	800c820 <__kernel_sin>
 800bc8a:	e7d5      	b.n	800bc38 <cos+0x28>
 800bc8c:	f3af 8000 	nop.w
	...
 800bc98:	3fe921fb 	.word	0x3fe921fb
 800bc9c:	7fefffff 	.word	0x7fefffff

0800bca0 <round>:
 800bca0:	ee10 1a90 	vmov	r1, s1
 800bca4:	f3c1 500a 	ubfx	r0, r1, #20, #11
 800bca8:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 800bcac:	2a13      	cmp	r2, #19
 800bcae:	b510      	push	{r4, lr}
 800bcb0:	ee10 3a10 	vmov	r3, s0
 800bcb4:	dc19      	bgt.n	800bcea <round+0x4a>
 800bcb6:	2a00      	cmp	r2, #0
 800bcb8:	da09      	bge.n	800bcce <round+0x2e>
 800bcba:	3201      	adds	r2, #1
 800bcbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800bcc0:	d103      	bne.n	800bcca <round+0x2a>
 800bcc2:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800bcc6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800bcca:	2000      	movs	r0, #0
 800bccc:	e027      	b.n	800bd1e <round+0x7e>
 800bcce:	4816      	ldr	r0, [pc, #88]	; (800bd28 <round+0x88>)
 800bcd0:	4110      	asrs	r0, r2
 800bcd2:	ea01 0400 	and.w	r4, r1, r0
 800bcd6:	4323      	orrs	r3, r4
 800bcd8:	d00e      	beq.n	800bcf8 <round+0x58>
 800bcda:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bcde:	fa43 f202 	asr.w	r2, r3, r2
 800bce2:	4411      	add	r1, r2
 800bce4:	ea21 0100 	bic.w	r1, r1, r0
 800bce8:	e7ef      	b.n	800bcca <round+0x2a>
 800bcea:	2a33      	cmp	r2, #51	; 0x33
 800bcec:	dd05      	ble.n	800bcfa <round+0x5a>
 800bcee:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800bcf2:	d101      	bne.n	800bcf8 <round+0x58>
 800bcf4:	ee30 0b00 	vadd.f64	d0, d0, d0
 800bcf8:	bd10      	pop	{r4, pc}
 800bcfa:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 800bcfe:	f04f 30ff 	mov.w	r0, #4294967295
 800bd02:	fa20 f404 	lsr.w	r4, r0, r4
 800bd06:	4223      	tst	r3, r4
 800bd08:	d0f6      	beq.n	800bcf8 <round+0x58>
 800bd0a:	2001      	movs	r0, #1
 800bd0c:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 800bd10:	fa00 f202 	lsl.w	r2, r0, r2
 800bd14:	189b      	adds	r3, r3, r2
 800bd16:	bf28      	it	cs
 800bd18:	1809      	addcs	r1, r1, r0
 800bd1a:	ea23 0004 	bic.w	r0, r3, r4
 800bd1e:	460b      	mov	r3, r1
 800bd20:	4602      	mov	r2, r0
 800bd22:	ec43 2b10 	vmov	d0, r2, r3
 800bd26:	e7e7      	b.n	800bcf8 <round+0x58>
 800bd28:	000fffff 	.word	0x000fffff
 800bd2c:	00000000 	.word	0x00000000

0800bd30 <sin>:
 800bd30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd32:	eeb0 7b40 	vmov.f64	d7, d0
 800bd36:	ee17 3a90 	vmov	r3, s15
 800bd3a:	4a1f      	ldr	r2, [pc, #124]	; (800bdb8 <sin+0x88>)
 800bd3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd40:	4293      	cmp	r3, r2
 800bd42:	dc05      	bgt.n	800bd50 <sin+0x20>
 800bd44:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800bdb0 <sin+0x80>
 800bd48:	2000      	movs	r0, #0
 800bd4a:	f000 fd69 	bl	800c820 <__kernel_sin>
 800bd4e:	e004      	b.n	800bd5a <sin+0x2a>
 800bd50:	4a1a      	ldr	r2, [pc, #104]	; (800bdbc <sin+0x8c>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	dd04      	ble.n	800bd60 <sin+0x30>
 800bd56:	ee30 0b40 	vsub.f64	d0, d0, d0
 800bd5a:	b005      	add	sp, #20
 800bd5c:	f85d fb04 	ldr.w	pc, [sp], #4
 800bd60:	4668      	mov	r0, sp
 800bd62:	f000 f92d 	bl	800bfc0 <__ieee754_rem_pio2>
 800bd66:	f000 0003 	and.w	r0, r0, #3
 800bd6a:	2801      	cmp	r0, #1
 800bd6c:	d008      	beq.n	800bd80 <sin+0x50>
 800bd6e:	2802      	cmp	r0, #2
 800bd70:	d00d      	beq.n	800bd8e <sin+0x5e>
 800bd72:	b9b0      	cbnz	r0, 800bda2 <sin+0x72>
 800bd74:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bd78:	ed9d 0b00 	vldr	d0, [sp]
 800bd7c:	2001      	movs	r0, #1
 800bd7e:	e7e4      	b.n	800bd4a <sin+0x1a>
 800bd80:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bd84:	ed9d 0b00 	vldr	d0, [sp]
 800bd88:	f000 fa5e 	bl	800c248 <__kernel_cos>
 800bd8c:	e7e5      	b.n	800bd5a <sin+0x2a>
 800bd8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bd92:	ed9d 0b00 	vldr	d0, [sp]
 800bd96:	2001      	movs	r0, #1
 800bd98:	f000 fd42 	bl	800c820 <__kernel_sin>
 800bd9c:	eeb1 0b40 	vneg.f64	d0, d0
 800bda0:	e7db      	b.n	800bd5a <sin+0x2a>
 800bda2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bda6:	ed9d 0b00 	vldr	d0, [sp]
 800bdaa:	f000 fa4d 	bl	800c248 <__kernel_cos>
 800bdae:	e7f5      	b.n	800bd9c <sin+0x6c>
	...
 800bdb8:	3fe921fb 	.word	0x3fe921fb
 800bdbc:	7fefffff 	.word	0x7fefffff

0800bdc0 <atan2>:
 800bdc0:	f000 b82e 	b.w	800be20 <__ieee754_atan2>
 800bdc4:	0000      	movs	r0, r0
	...

0800bdc8 <sqrt>:
 800bdc8:	b508      	push	{r3, lr}
 800bdca:	ed2d 8b04 	vpush	{d8-d9}
 800bdce:	eeb0 8b40 	vmov.f64	d8, d0
 800bdd2:	f000 fa35 	bl	800c240 <__ieee754_sqrt>
 800bdd6:	4b10      	ldr	r3, [pc, #64]	; (800be18 <sqrt+0x50>)
 800bdd8:	f993 3000 	ldrsb.w	r3, [r3]
 800bddc:	3301      	adds	r3, #1
 800bdde:	d011      	beq.n	800be04 <sqrt+0x3c>
 800bde0:	eeb4 8b48 	vcmp.f64	d8, d8
 800bde4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bde8:	d60c      	bvs.n	800be04 <sqrt+0x3c>
 800bdea:	ed9f 9b09 	vldr	d9, [pc, #36]	; 800be10 <sqrt+0x48>
 800bdee:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800bdf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdf6:	d505      	bpl.n	800be04 <sqrt+0x3c>
 800bdf8:	f000 ff74 	bl	800cce4 <__errno>
 800bdfc:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800be00:	2321      	movs	r3, #33	; 0x21
 800be02:	6003      	str	r3, [r0, #0]
 800be04:	ecbd 8b04 	vpop	{d8-d9}
 800be08:	bd08      	pop	{r3, pc}
 800be0a:	bf00      	nop
 800be0c:	f3af 8000 	nop.w
	...
 800be18:	20000015 	.word	0x20000015
 800be1c:	00000000 	.word	0x00000000

0800be20 <__ieee754_atan2>:
 800be20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be22:	ee11 6a10 	vmov	r6, s2
 800be26:	ee11 0a90 	vmov	r0, s3
 800be2a:	4273      	negs	r3, r6
 800be2c:	4f60      	ldr	r7, [pc, #384]	; (800bfb0 <__ieee754_atan2+0x190>)
 800be2e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800be32:	4333      	orrs	r3, r6
 800be34:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800be38:	42bb      	cmp	r3, r7
 800be3a:	ed8d 0b00 	vstr	d0, [sp]
 800be3e:	d80b      	bhi.n	800be58 <__ieee754_atan2+0x38>
 800be40:	e9dd c500 	ldrd	ip, r5, [sp]
 800be44:	f1cc 0100 	rsb	r1, ip, #0
 800be48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800be4c:	ea41 010c 	orr.w	r1, r1, ip
 800be50:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 800be54:	42b9      	cmp	r1, r7
 800be56:	d906      	bls.n	800be66 <__ieee754_atan2+0x46>
 800be58:	ed9d 7b00 	vldr	d7, [sp]
 800be5c:	ee37 7b01 	vadd.f64	d7, d7, d1
 800be60:	ed8d 7b00 	vstr	d7, [sp]
 800be64:	e054      	b.n	800bf10 <__ieee754_atan2+0xf0>
 800be66:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 800be6a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800be6e:	4331      	orrs	r1, r6
 800be70:	d104      	bne.n	800be7c <__ieee754_atan2+0x5c>
 800be72:	b003      	add	sp, #12
 800be74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800be78:	f000 bd2a 	b.w	800c8d0 <atan>
 800be7c:	1784      	asrs	r4, r0, #30
 800be7e:	f004 0402 	and.w	r4, r4, #2
 800be82:	ea53 010c 	orrs.w	r1, r3, ip
 800be86:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 800be8a:	d109      	bne.n	800bea0 <__ieee754_atan2+0x80>
 800be8c:	2c02      	cmp	r4, #2
 800be8e:	d069      	beq.n	800bf64 <__ieee754_atan2+0x144>
 800be90:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800bf78 <__ieee754_atan2+0x158>
 800be94:	ed9d 6b00 	vldr	d6, [sp]
 800be98:	2c03      	cmp	r4, #3
 800be9a:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800be9e:	e7df      	b.n	800be60 <__ieee754_atan2+0x40>
 800bea0:	ea52 0106 	orrs.w	r1, r2, r6
 800bea4:	d107      	bne.n	800beb6 <__ieee754_atan2+0x96>
 800bea6:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800bf80 <__ieee754_atan2+0x160>
 800beaa:	ed9f 7b37 	vldr	d7, [pc, #220]	; 800bf88 <__ieee754_atan2+0x168>
 800beae:	2d00      	cmp	r5, #0
 800beb0:	fe26 7b07 	vselge.f64	d7, d6, d7
 800beb4:	e7d4      	b.n	800be60 <__ieee754_atan2+0x40>
 800beb6:	42ba      	cmp	r2, r7
 800beb8:	d10f      	bne.n	800beda <__ieee754_atan2+0xba>
 800beba:	4293      	cmp	r3, r2
 800bebc:	f104 34ff 	add.w	r4, r4, #4294967295
 800bec0:	d107      	bne.n	800bed2 <__ieee754_atan2+0xb2>
 800bec2:	2c02      	cmp	r4, #2
 800bec4:	d851      	bhi.n	800bf6a <__ieee754_atan2+0x14a>
 800bec6:	4b3b      	ldr	r3, [pc, #236]	; (800bfb4 <__ieee754_atan2+0x194>)
 800bec8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800becc:	ed94 7b00 	vldr	d7, [r4]
 800bed0:	e7c6      	b.n	800be60 <__ieee754_atan2+0x40>
 800bed2:	2c02      	cmp	r4, #2
 800bed4:	d84c      	bhi.n	800bf70 <__ieee754_atan2+0x150>
 800bed6:	4b38      	ldr	r3, [pc, #224]	; (800bfb8 <__ieee754_atan2+0x198>)
 800bed8:	e7f6      	b.n	800bec8 <__ieee754_atan2+0xa8>
 800beda:	42bb      	cmp	r3, r7
 800bedc:	d0e3      	beq.n	800bea6 <__ieee754_atan2+0x86>
 800bede:	1a9b      	subs	r3, r3, r2
 800bee0:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bee4:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bee8:	da16      	bge.n	800bf18 <__ieee754_atan2+0xf8>
 800beea:	2800      	cmp	r0, #0
 800beec:	da01      	bge.n	800bef2 <__ieee754_atan2+0xd2>
 800beee:	323c      	adds	r2, #60	; 0x3c
 800bef0:	db17      	blt.n	800bf22 <__ieee754_atan2+0x102>
 800bef2:	ed9d 7b00 	vldr	d7, [sp]
 800bef6:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800befa:	f000 fde3 	bl	800cac4 <fabs>
 800befe:	f000 fce7 	bl	800c8d0 <atan>
 800bf02:	ed8d 0b00 	vstr	d0, [sp]
 800bf06:	2c01      	cmp	r4, #1
 800bf08:	d00e      	beq.n	800bf28 <__ieee754_atan2+0x108>
 800bf0a:	2c02      	cmp	r4, #2
 800bf0c:	d014      	beq.n	800bf38 <__ieee754_atan2+0x118>
 800bf0e:	b9f4      	cbnz	r4, 800bf4e <__ieee754_atan2+0x12e>
 800bf10:	ed9d 0b00 	vldr	d0, [sp]
 800bf14:	b003      	add	sp, #12
 800bf16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf18:	ed9f 7b19 	vldr	d7, [pc, #100]	; 800bf80 <__ieee754_atan2+0x160>
 800bf1c:	ed8d 7b00 	vstr	d7, [sp]
 800bf20:	e7f1      	b.n	800bf06 <__ieee754_atan2+0xe6>
 800bf22:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 800bf90 <__ieee754_atan2+0x170>
 800bf26:	e7f9      	b.n	800bf1c <__ieee754_atan2+0xfc>
 800bf28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf2c:	9901      	ldr	r1, [sp, #4]
 800bf2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf32:	e9cd 2300 	strd	r2, r3, [sp]
 800bf36:	e7eb      	b.n	800bf10 <__ieee754_atan2+0xf0>
 800bf38:	ed9d 6b00 	vldr	d6, [sp]
 800bf3c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800bf98 <__ieee754_atan2+0x178>
 800bf40:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bf44:	ed9f 6b16 	vldr	d6, [pc, #88]	; 800bfa0 <__ieee754_atan2+0x180>
 800bf48:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bf4c:	e788      	b.n	800be60 <__ieee754_atan2+0x40>
 800bf4e:	ed9d 6b00 	vldr	d6, [sp]
 800bf52:	ed9f 7b11 	vldr	d7, [pc, #68]	; 800bf98 <__ieee754_atan2+0x178>
 800bf56:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bf5a:	ed9f 6b11 	vldr	d6, [pc, #68]	; 800bfa0 <__ieee754_atan2+0x180>
 800bf5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bf62:	e77d      	b.n	800be60 <__ieee754_atan2+0x40>
 800bf64:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800bfa0 <__ieee754_atan2+0x180>
 800bf68:	e77a      	b.n	800be60 <__ieee754_atan2+0x40>
 800bf6a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800bfa8 <__ieee754_atan2+0x188>
 800bf6e:	e777      	b.n	800be60 <__ieee754_atan2+0x40>
 800bf70:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800bf90 <__ieee754_atan2+0x170>
 800bf74:	e774      	b.n	800be60 <__ieee754_atan2+0x40>
 800bf76:	bf00      	nop
 800bf78:	54442d18 	.word	0x54442d18
 800bf7c:	c00921fb 	.word	0xc00921fb
 800bf80:	54442d18 	.word	0x54442d18
 800bf84:	3ff921fb 	.word	0x3ff921fb
 800bf88:	54442d18 	.word	0x54442d18
 800bf8c:	bff921fb 	.word	0xbff921fb
	...
 800bf98:	33145c07 	.word	0x33145c07
 800bf9c:	3ca1a626 	.word	0x3ca1a626
 800bfa0:	54442d18 	.word	0x54442d18
 800bfa4:	400921fb 	.word	0x400921fb
 800bfa8:	54442d18 	.word	0x54442d18
 800bfac:	3fe921fb 	.word	0x3fe921fb
 800bfb0:	7ff00000 	.word	0x7ff00000
 800bfb4:	0800f680 	.word	0x0800f680
 800bfb8:	0800f698 	.word	0x0800f698
 800bfbc:	00000000 	.word	0x00000000

0800bfc0 <__ieee754_rem_pio2>:
 800bfc0:	b570      	push	{r4, r5, r6, lr}
 800bfc2:	eeb0 7b40 	vmov.f64	d7, d0
 800bfc6:	ee17 5a90 	vmov	r5, s15
 800bfca:	4b97      	ldr	r3, [pc, #604]	; (800c228 <__ieee754_rem_pio2+0x268>)
 800bfcc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bfd0:	429e      	cmp	r6, r3
 800bfd2:	b088      	sub	sp, #32
 800bfd4:	4604      	mov	r4, r0
 800bfd6:	dc07      	bgt.n	800bfe8 <__ieee754_rem_pio2+0x28>
 800bfd8:	2200      	movs	r2, #0
 800bfda:	2300      	movs	r3, #0
 800bfdc:	ed84 0b00 	vstr	d0, [r4]
 800bfe0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bfe4:	2000      	movs	r0, #0
 800bfe6:	e01b      	b.n	800c020 <__ieee754_rem_pio2+0x60>
 800bfe8:	4b90      	ldr	r3, [pc, #576]	; (800c22c <__ieee754_rem_pio2+0x26c>)
 800bfea:	429e      	cmp	r6, r3
 800bfec:	dc3b      	bgt.n	800c066 <__ieee754_rem_pio2+0xa6>
 800bfee:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800bff2:	2d00      	cmp	r5, #0
 800bff4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800c1e8 <__ieee754_rem_pio2+0x228>
 800bff8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800bffc:	dd19      	ble.n	800c032 <__ieee754_rem_pio2+0x72>
 800bffe:	ee30 7b46 	vsub.f64	d7, d0, d6
 800c002:	429e      	cmp	r6, r3
 800c004:	d00e      	beq.n	800c024 <__ieee754_rem_pio2+0x64>
 800c006:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800c1f0 <__ieee754_rem_pio2+0x230>
 800c00a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800c00e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c012:	ed84 5b00 	vstr	d5, [r4]
 800c016:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c01a:	ed84 7b02 	vstr	d7, [r4, #8]
 800c01e:	2001      	movs	r0, #1
 800c020:	b008      	add	sp, #32
 800c022:	bd70      	pop	{r4, r5, r6, pc}
 800c024:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800c1f8 <__ieee754_rem_pio2+0x238>
 800c028:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c02c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800c200 <__ieee754_rem_pio2+0x240>
 800c030:	e7eb      	b.n	800c00a <__ieee754_rem_pio2+0x4a>
 800c032:	429e      	cmp	r6, r3
 800c034:	ee30 7b06 	vadd.f64	d7, d0, d6
 800c038:	d00e      	beq.n	800c058 <__ieee754_rem_pio2+0x98>
 800c03a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800c1f0 <__ieee754_rem_pio2+0x230>
 800c03e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800c042:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c046:	ed84 5b00 	vstr	d5, [r4]
 800c04a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c04e:	f04f 30ff 	mov.w	r0, #4294967295
 800c052:	ed84 7b02 	vstr	d7, [r4, #8]
 800c056:	e7e3      	b.n	800c020 <__ieee754_rem_pio2+0x60>
 800c058:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800c1f8 <__ieee754_rem_pio2+0x238>
 800c05c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c060:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800c200 <__ieee754_rem_pio2+0x240>
 800c064:	e7eb      	b.n	800c03e <__ieee754_rem_pio2+0x7e>
 800c066:	4b72      	ldr	r3, [pc, #456]	; (800c230 <__ieee754_rem_pio2+0x270>)
 800c068:	429e      	cmp	r6, r3
 800c06a:	dc6e      	bgt.n	800c14a <__ieee754_rem_pio2+0x18a>
 800c06c:	f000 fd2a 	bl	800cac4 <fabs>
 800c070:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c074:	ed9f 6b64 	vldr	d6, [pc, #400]	; 800c208 <__ieee754_rem_pio2+0x248>
 800c078:	eea0 7b06 	vfma.f64	d7, d0, d6
 800c07c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c080:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c084:	ee17 0a90 	vmov	r0, s15
 800c088:	eeb1 4b45 	vneg.f64	d4, d5
 800c08c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800c1e8 <__ieee754_rem_pio2+0x228>
 800c090:	eea5 0b47 	vfms.f64	d0, d5, d7
 800c094:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800c1f0 <__ieee754_rem_pio2+0x230>
 800c098:	281f      	cmp	r0, #31
 800c09a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c09e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c0a2:	dc08      	bgt.n	800c0b6 <__ieee754_rem_pio2+0xf6>
 800c0a4:	4b63      	ldr	r3, [pc, #396]	; (800c234 <__ieee754_rem_pio2+0x274>)
 800c0a6:	1e42      	subs	r2, r0, #1
 800c0a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ac:	42b3      	cmp	r3, r6
 800c0ae:	d002      	beq.n	800c0b6 <__ieee754_rem_pio2+0xf6>
 800c0b0:	ed84 6b00 	vstr	d6, [r4]
 800c0b4:	e024      	b.n	800c100 <__ieee754_rem_pio2+0x140>
 800c0b6:	ee16 3a90 	vmov	r3, s13
 800c0ba:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c0be:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800c0c2:	2b10      	cmp	r3, #16
 800c0c4:	ea4f 5226 	mov.w	r2, r6, asr #20
 800c0c8:	ddf2      	ble.n	800c0b0 <__ieee754_rem_pio2+0xf0>
 800c0ca:	eeb0 6b40 	vmov.f64	d6, d0
 800c0ce:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800c1f8 <__ieee754_rem_pio2+0x238>
 800c0d2:	eea4 6b03 	vfma.f64	d6, d4, d3
 800c0d6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800c0da:	eea4 7b03 	vfma.f64	d7, d4, d3
 800c0de:	ed9f 3b48 	vldr	d3, [pc, #288]	; 800c200 <__ieee754_rem_pio2+0x240>
 800c0e2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800c0e6:	ee36 3b47 	vsub.f64	d3, d6, d7
 800c0ea:	ee13 3a90 	vmov	r3, s7
 800c0ee:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c0f2:	1ad3      	subs	r3, r2, r3
 800c0f4:	2b31      	cmp	r3, #49	; 0x31
 800c0f6:	dc17      	bgt.n	800c128 <__ieee754_rem_pio2+0x168>
 800c0f8:	eeb0 0b46 	vmov.f64	d0, d6
 800c0fc:	ed84 3b00 	vstr	d3, [r4]
 800c100:	ed94 6b00 	vldr	d6, [r4]
 800c104:	2d00      	cmp	r5, #0
 800c106:	ee30 0b46 	vsub.f64	d0, d0, d6
 800c10a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800c10e:	ed84 7b02 	vstr	d7, [r4, #8]
 800c112:	da85      	bge.n	800c020 <__ieee754_rem_pio2+0x60>
 800c114:	eeb1 6b46 	vneg.f64	d6, d6
 800c118:	ed84 6b00 	vstr	d6, [r4]
 800c11c:	eeb1 7b47 	vneg.f64	d7, d7
 800c120:	4240      	negs	r0, r0
 800c122:	ed84 7b02 	vstr	d7, [r4, #8]
 800c126:	e77b      	b.n	800c020 <__ieee754_rem_pio2+0x60>
 800c128:	ed9f 3b39 	vldr	d3, [pc, #228]	; 800c210 <__ieee754_rem_pio2+0x250>
 800c12c:	eeb0 0b46 	vmov.f64	d0, d6
 800c130:	eea4 0b03 	vfma.f64	d0, d4, d3
 800c134:	ee36 7b40 	vsub.f64	d7, d6, d0
 800c138:	ed9f 6b37 	vldr	d6, [pc, #220]	; 800c218 <__ieee754_rem_pio2+0x258>
 800c13c:	eea4 7b03 	vfma.f64	d7, d4, d3
 800c140:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800c144:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c148:	e7b2      	b.n	800c0b0 <__ieee754_rem_pio2+0xf0>
 800c14a:	4b3b      	ldr	r3, [pc, #236]	; (800c238 <__ieee754_rem_pio2+0x278>)
 800c14c:	429e      	cmp	r6, r3
 800c14e:	dd06      	ble.n	800c15e <__ieee754_rem_pio2+0x19e>
 800c150:	ee30 7b40 	vsub.f64	d7, d0, d0
 800c154:	ed80 7b02 	vstr	d7, [r0, #8]
 800c158:	ed80 7b00 	vstr	d7, [r0]
 800c15c:	e742      	b.n	800bfe4 <__ieee754_rem_pio2+0x24>
 800c15e:	1532      	asrs	r2, r6, #20
 800c160:	ee10 0a10 	vmov	r0, s0
 800c164:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800c168:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800c16c:	ec41 0b17 	vmov	d7, r0, r1
 800c170:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c174:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800c220 <__ieee754_rem_pio2+0x260>
 800c178:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c17c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c180:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c184:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c188:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c18c:	a902      	add	r1, sp, #8
 800c18e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c192:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c196:	ed8d 6b04 	vstr	d6, [sp, #16]
 800c19a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c19e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c1a2:	2603      	movs	r6, #3
 800c1a4:	4608      	mov	r0, r1
 800c1a6:	ed91 7b04 	vldr	d7, [r1, #16]
 800c1aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1b2:	4633      	mov	r3, r6
 800c1b4:	f1a1 0108 	sub.w	r1, r1, #8
 800c1b8:	f106 36ff 	add.w	r6, r6, #4294967295
 800c1bc:	d0f3      	beq.n	800c1a6 <__ieee754_rem_pio2+0x1e6>
 800c1be:	491f      	ldr	r1, [pc, #124]	; (800c23c <__ieee754_rem_pio2+0x27c>)
 800c1c0:	9101      	str	r1, [sp, #4]
 800c1c2:	2102      	movs	r1, #2
 800c1c4:	9100      	str	r1, [sp, #0]
 800c1c6:	4621      	mov	r1, r4
 800c1c8:	f000 f8aa 	bl	800c320 <__kernel_rem_pio2>
 800c1cc:	2d00      	cmp	r5, #0
 800c1ce:	f6bf af27 	bge.w	800c020 <__ieee754_rem_pio2+0x60>
 800c1d2:	ed94 7b00 	vldr	d7, [r4]
 800c1d6:	eeb1 7b47 	vneg.f64	d7, d7
 800c1da:	ed84 7b00 	vstr	d7, [r4]
 800c1de:	ed94 7b02 	vldr	d7, [r4, #8]
 800c1e2:	e79b      	b.n	800c11c <__ieee754_rem_pio2+0x15c>
 800c1e4:	f3af 8000 	nop.w
 800c1e8:	54400000 	.word	0x54400000
 800c1ec:	3ff921fb 	.word	0x3ff921fb
 800c1f0:	1a626331 	.word	0x1a626331
 800c1f4:	3dd0b461 	.word	0x3dd0b461
 800c1f8:	1a600000 	.word	0x1a600000
 800c1fc:	3dd0b461 	.word	0x3dd0b461
 800c200:	2e037073 	.word	0x2e037073
 800c204:	3ba3198a 	.word	0x3ba3198a
 800c208:	6dc9c883 	.word	0x6dc9c883
 800c20c:	3fe45f30 	.word	0x3fe45f30
 800c210:	2e000000 	.word	0x2e000000
 800c214:	3ba3198a 	.word	0x3ba3198a
 800c218:	252049c1 	.word	0x252049c1
 800c21c:	397b839a 	.word	0x397b839a
 800c220:	00000000 	.word	0x00000000
 800c224:	41700000 	.word	0x41700000
 800c228:	3fe921fb 	.word	0x3fe921fb
 800c22c:	4002d97b 	.word	0x4002d97b
 800c230:	413921fb 	.word	0x413921fb
 800c234:	0800f6b0 	.word	0x0800f6b0
 800c238:	7fefffff 	.word	0x7fefffff
 800c23c:	0800f730 	.word	0x0800f730

0800c240 <__ieee754_sqrt>:
 800c240:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800c244:	4770      	bx	lr
	...

0800c248 <__kernel_cos>:
 800c248:	ee10 1a90 	vmov	r1, s1
 800c24c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800c250:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c254:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800c258:	da05      	bge.n	800c266 <__kernel_cos+0x1e>
 800c25a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800c25e:	ee17 3a90 	vmov	r3, s15
 800c262:	2b00      	cmp	r3, #0
 800c264:	d03d      	beq.n	800c2e2 <__kernel_cos+0x9a>
 800c266:	ee20 3b00 	vmul.f64	d3, d0, d0
 800c26a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800c2e8 <__kernel_cos+0xa0>
 800c26e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800c2f0 <__kernel_cos+0xa8>
 800c272:	eea3 6b07 	vfma.f64	d6, d3, d7
 800c276:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c2f8 <__kernel_cos+0xb0>
 800c27a:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c27e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800c300 <__kernel_cos+0xb8>
 800c282:	eea7 6b03 	vfma.f64	d6, d7, d3
 800c286:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c308 <__kernel_cos+0xc0>
 800c28a:	4b23      	ldr	r3, [pc, #140]	; (800c318 <__kernel_cos+0xd0>)
 800c28c:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c290:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800c310 <__kernel_cos+0xc8>
 800c294:	4299      	cmp	r1, r3
 800c296:	eea7 6b03 	vfma.f64	d6, d7, d3
 800c29a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c29e:	ee26 5b03 	vmul.f64	d5, d6, d3
 800c2a2:	ee23 7b07 	vmul.f64	d7, d3, d7
 800c2a6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800c2aa:	eea3 6b05 	vfma.f64	d6, d3, d5
 800c2ae:	dc04      	bgt.n	800c2ba <__kernel_cos+0x72>
 800c2b0:	ee37 6b46 	vsub.f64	d6, d7, d6
 800c2b4:	ee34 0b46 	vsub.f64	d0, d4, d6
 800c2b8:	4770      	bx	lr
 800c2ba:	4b18      	ldr	r3, [pc, #96]	; (800c31c <__kernel_cos+0xd4>)
 800c2bc:	4299      	cmp	r1, r3
 800c2be:	dc0d      	bgt.n	800c2dc <__kernel_cos+0x94>
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800c2c6:	ec43 2b15 	vmov	d5, r2, r3
 800c2ca:	ee34 0b45 	vsub.f64	d0, d4, d5
 800c2ce:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c2d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c2d6:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c2da:	4770      	bx	lr
 800c2dc:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800c2e0:	e7f3      	b.n	800c2ca <__kernel_cos+0x82>
 800c2e2:	eeb0 0b44 	vmov.f64	d0, d4
 800c2e6:	4770      	bx	lr
 800c2e8:	be8838d4 	.word	0xbe8838d4
 800c2ec:	bda8fae9 	.word	0xbda8fae9
 800c2f0:	bdb4b1c4 	.word	0xbdb4b1c4
 800c2f4:	3e21ee9e 	.word	0x3e21ee9e
 800c2f8:	809c52ad 	.word	0x809c52ad
 800c2fc:	be927e4f 	.word	0xbe927e4f
 800c300:	19cb1590 	.word	0x19cb1590
 800c304:	3efa01a0 	.word	0x3efa01a0
 800c308:	16c15177 	.word	0x16c15177
 800c30c:	bf56c16c 	.word	0xbf56c16c
 800c310:	5555554c 	.word	0x5555554c
 800c314:	3fa55555 	.word	0x3fa55555
 800c318:	3fd33332 	.word	0x3fd33332
 800c31c:	3fe90000 	.word	0x3fe90000

0800c320 <__kernel_rem_pio2>:
 800c320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c324:	ed2d 8b06 	vpush	{d8-d10}
 800c328:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800c32c:	469b      	mov	fp, r3
 800c32e:	460f      	mov	r7, r1
 800c330:	4bcf      	ldr	r3, [pc, #828]	; (800c670 <__kernel_rem_pio2+0x350>)
 800c332:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800c334:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 800c338:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800c33c:	9000      	str	r0, [sp, #0]
 800c33e:	f112 0f14 	cmn.w	r2, #20
 800c342:	bfa8      	it	ge
 800c344:	2318      	movge	r3, #24
 800c346:	f10b 31ff 	add.w	r1, fp, #4294967295
 800c34a:	bfb8      	it	lt
 800c34c:	2300      	movlt	r3, #0
 800c34e:	f06f 0417 	mvn.w	r4, #23
 800c352:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800c658 <__kernel_rem_pio2+0x338>
 800c356:	bfa4      	itt	ge
 800c358:	f1a2 0a03 	subge.w	sl, r2, #3
 800c35c:	fb9a f3f3 	sdivge	r3, sl, r3
 800c360:	fb03 4404 	mla	r4, r3, r4, r4
 800c364:	1a5d      	subs	r5, r3, r1
 800c366:	4414      	add	r4, r2
 800c368:	eb09 0601 	add.w	r6, r9, r1
 800c36c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 800c370:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800c374:	2200      	movs	r2, #0
 800c376:	42b2      	cmp	r2, r6
 800c378:	dd12      	ble.n	800c3a0 <__kernel_rem_pio2+0x80>
 800c37a:	aa18      	add	r2, sp, #96	; 0x60
 800c37c:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800c380:	460e      	mov	r6, r1
 800c382:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800c386:	f1cb 0a01 	rsb	sl, fp, #1
 800c38a:	eb0a 0006 	add.w	r0, sl, r6
 800c38e:	4581      	cmp	r9, r0
 800c390:	db25      	blt.n	800c3de <__kernel_rem_pio2+0xbe>
 800c392:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 800c658 <__kernel_rem_pio2+0x338>
 800c396:	f8dd e000 	ldr.w	lr, [sp]
 800c39a:	4615      	mov	r5, r2
 800c39c:	2000      	movs	r0, #0
 800c39e:	e015      	b.n	800c3cc <__kernel_rem_pio2+0xac>
 800c3a0:	42d5      	cmn	r5, r2
 800c3a2:	d409      	bmi.n	800c3b8 <__kernel_rem_pio2+0x98>
 800c3a4:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 800c3a8:	ee07 0a90 	vmov	s15, r0
 800c3ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c3b0:	eca8 7b02 	vstmia	r8!, {d7}
 800c3b4:	3201      	adds	r2, #1
 800c3b6:	e7de      	b.n	800c376 <__kernel_rem_pio2+0x56>
 800c3b8:	eeb0 7b46 	vmov.f64	d7, d6
 800c3bc:	e7f8      	b.n	800c3b0 <__kernel_rem_pio2+0x90>
 800c3be:	ecbe 5b02 	vldmia	lr!, {d5}
 800c3c2:	ed95 6b00 	vldr	d6, [r5]
 800c3c6:	3001      	adds	r0, #1
 800c3c8:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c3cc:	4288      	cmp	r0, r1
 800c3ce:	f1a5 0508 	sub.w	r5, r5, #8
 800c3d2:	ddf4      	ble.n	800c3be <__kernel_rem_pio2+0x9e>
 800c3d4:	eca8 7b02 	vstmia	r8!, {d7}
 800c3d8:	3208      	adds	r2, #8
 800c3da:	3601      	adds	r6, #1
 800c3dc:	e7d5      	b.n	800c38a <__kernel_rem_pio2+0x6a>
 800c3de:	aa04      	add	r2, sp, #16
 800c3e0:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 800c660 <__kernel_rem_pio2+0x340>
 800c3e4:	ed9f aba0 	vldr	d10, [pc, #640]	; 800c668 <__kernel_rem_pio2+0x348>
 800c3e8:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800c3ec:	9201      	str	r2, [sp, #4]
 800c3ee:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800c3f2:	464e      	mov	r6, r9
 800c3f4:	ab90      	add	r3, sp, #576	; 0x240
 800c3f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c3fa:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800c3fe:	ab04      	add	r3, sp, #16
 800c400:	4618      	mov	r0, r3
 800c402:	4632      	mov	r2, r6
 800c404:	2a00      	cmp	r2, #0
 800c406:	dc4e      	bgt.n	800c4a6 <__kernel_rem_pio2+0x186>
 800c408:	4620      	mov	r0, r4
 800c40a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800c40e:	f000 fbd7 	bl	800cbc0 <scalbn>
 800c412:	eeb0 8b40 	vmov.f64	d8, d0
 800c416:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800c41a:	ee28 0b00 	vmul.f64	d0, d8, d0
 800c41e:	f000 fb5b 	bl	800cad8 <floor>
 800c422:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800c426:	eea0 8b47 	vfms.f64	d8, d0, d7
 800c42a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800c42e:	2c00      	cmp	r4, #0
 800c430:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800c434:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800c438:	ee38 8b40 	vsub.f64	d8, d8, d0
 800c43c:	ee17 8a90 	vmov	r8, s15
 800c440:	dd46      	ble.n	800c4d0 <__kernel_rem_pio2+0x1b0>
 800c442:	1e70      	subs	r0, r6, #1
 800c444:	aa04      	add	r2, sp, #16
 800c446:	f1c4 0c18 	rsb	ip, r4, #24
 800c44a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800c44e:	fa45 f20c 	asr.w	r2, r5, ip
 800c452:	4490      	add	r8, r2
 800c454:	fa02 f20c 	lsl.w	r2, r2, ip
 800c458:	1aad      	subs	r5, r5, r2
 800c45a:	aa04      	add	r2, sp, #16
 800c45c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800c460:	f1c4 0217 	rsb	r2, r4, #23
 800c464:	4115      	asrs	r5, r2
 800c466:	2d00      	cmp	r5, #0
 800c468:	dd41      	ble.n	800c4ee <__kernel_rem_pio2+0x1ce>
 800c46a:	f04f 0c00 	mov.w	ip, #0
 800c46e:	f108 0801 	add.w	r8, r8, #1
 800c472:	4660      	mov	r0, ip
 800c474:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800c478:	4566      	cmp	r6, ip
 800c47a:	dc69      	bgt.n	800c550 <__kernel_rem_pio2+0x230>
 800c47c:	2c00      	cmp	r4, #0
 800c47e:	dd03      	ble.n	800c488 <__kernel_rem_pio2+0x168>
 800c480:	2c01      	cmp	r4, #1
 800c482:	d076      	beq.n	800c572 <__kernel_rem_pio2+0x252>
 800c484:	2c02      	cmp	r4, #2
 800c486:	d07f      	beq.n	800c588 <__kernel_rem_pio2+0x268>
 800c488:	2d02      	cmp	r5, #2
 800c48a:	d130      	bne.n	800c4ee <__kernel_rem_pio2+0x1ce>
 800c48c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c490:	ee30 8b48 	vsub.f64	d8, d0, d8
 800c494:	b358      	cbz	r0, 800c4ee <__kernel_rem_pio2+0x1ce>
 800c496:	4620      	mov	r0, r4
 800c498:	9102      	str	r1, [sp, #8]
 800c49a:	f000 fb91 	bl	800cbc0 <scalbn>
 800c49e:	9902      	ldr	r1, [sp, #8]
 800c4a0:	ee38 8b40 	vsub.f64	d8, d8, d0
 800c4a4:	e023      	b.n	800c4ee <__kernel_rem_pio2+0x1ce>
 800c4a6:	ee20 7b09 	vmul.f64	d7, d0, d9
 800c4aa:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c4ae:	3a01      	subs	r2, #1
 800c4b0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800c4b4:	ad68      	add	r5, sp, #416	; 0x1a0
 800c4b6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800c4ba:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c4be:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800c4c2:	eca0 0a01 	vstmia	r0!, {s0}
 800c4c6:	ed95 0b00 	vldr	d0, [r5]
 800c4ca:	ee37 0b00 	vadd.f64	d0, d7, d0
 800c4ce:	e799      	b.n	800c404 <__kernel_rem_pio2+0xe4>
 800c4d0:	d105      	bne.n	800c4de <__kernel_rem_pio2+0x1be>
 800c4d2:	1e72      	subs	r2, r6, #1
 800c4d4:	a804      	add	r0, sp, #16
 800c4d6:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800c4da:	15ed      	asrs	r5, r5, #23
 800c4dc:	e7c3      	b.n	800c466 <__kernel_rem_pio2+0x146>
 800c4de:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c4e2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ea:	da2f      	bge.n	800c54c <__kernel_rem_pio2+0x22c>
 800c4ec:	2500      	movs	r5, #0
 800c4ee:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4f6:	f040 8087 	bne.w	800c608 <__kernel_rem_pio2+0x2e8>
 800c4fa:	1e73      	subs	r3, r6, #1
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f04f 0c00 	mov.w	ip, #0
 800c502:	4548      	cmp	r0, r9
 800c504:	da47      	bge.n	800c596 <__kernel_rem_pio2+0x276>
 800c506:	f1bc 0f00 	cmp.w	ip, #0
 800c50a:	d070      	beq.n	800c5ee <__kernel_rem_pio2+0x2ce>
 800c50c:	aa04      	add	r2, sp, #16
 800c50e:	3c18      	subs	r4, #24
 800c510:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c514:	2a00      	cmp	r2, #0
 800c516:	d075      	beq.n	800c604 <__kernel_rem_pio2+0x2e4>
 800c518:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c51c:	4620      	mov	r0, r4
 800c51e:	9300      	str	r3, [sp, #0]
 800c520:	f000 fb4e 	bl	800cbc0 <scalbn>
 800c524:	9b00      	ldr	r3, [sp, #0]
 800c526:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800c660 <__kernel_rem_pio2+0x340>
 800c52a:	461a      	mov	r2, r3
 800c52c:	2a00      	cmp	r2, #0
 800c52e:	f280 80ac 	bge.w	800c68a <__kernel_rem_pio2+0x36a>
 800c532:	4619      	mov	r1, r3
 800c534:	2000      	movs	r0, #0
 800c536:	2900      	cmp	r1, #0
 800c538:	f2c0 80cd 	blt.w	800c6d6 <__kernel_rem_pio2+0x3b6>
 800c53c:	aa68      	add	r2, sp, #416	; 0x1a0
 800c53e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 800c542:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800c658 <__kernel_rem_pio2+0x338>
 800c546:	4e4b      	ldr	r6, [pc, #300]	; (800c674 <__kernel_rem_pio2+0x354>)
 800c548:	2200      	movs	r2, #0
 800c54a:	e0b8      	b.n	800c6be <__kernel_rem_pio2+0x39e>
 800c54c:	2502      	movs	r5, #2
 800c54e:	e78c      	b.n	800c46a <__kernel_rem_pio2+0x14a>
 800c550:	681a      	ldr	r2, [r3, #0]
 800c552:	b948      	cbnz	r0, 800c568 <__kernel_rem_pio2+0x248>
 800c554:	b11a      	cbz	r2, 800c55e <__kernel_rem_pio2+0x23e>
 800c556:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800c55a:	601a      	str	r2, [r3, #0]
 800c55c:	2201      	movs	r2, #1
 800c55e:	f10c 0c01 	add.w	ip, ip, #1
 800c562:	3304      	adds	r3, #4
 800c564:	4610      	mov	r0, r2
 800c566:	e787      	b.n	800c478 <__kernel_rem_pio2+0x158>
 800c568:	ebae 0202 	sub.w	r2, lr, r2
 800c56c:	601a      	str	r2, [r3, #0]
 800c56e:	4602      	mov	r2, r0
 800c570:	e7f5      	b.n	800c55e <__kernel_rem_pio2+0x23e>
 800c572:	1e72      	subs	r2, r6, #1
 800c574:	ab04      	add	r3, sp, #16
 800c576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c57a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c57e:	f10d 0c10 	add.w	ip, sp, #16
 800c582:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800c586:	e77f      	b.n	800c488 <__kernel_rem_pio2+0x168>
 800c588:	1e72      	subs	r2, r6, #1
 800c58a:	ab04      	add	r3, sp, #16
 800c58c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c590:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c594:	e7f3      	b.n	800c57e <__kernel_rem_pio2+0x25e>
 800c596:	aa04      	add	r2, sp, #16
 800c598:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800c59c:	3801      	subs	r0, #1
 800c59e:	ea4c 0c02 	orr.w	ip, ip, r2
 800c5a2:	e7ae      	b.n	800c502 <__kernel_rem_pio2+0x1e2>
 800c5a4:	3001      	adds	r0, #1
 800c5a6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c5aa:	2a00      	cmp	r2, #0
 800c5ac:	d0fa      	beq.n	800c5a4 <__kernel_rem_pio2+0x284>
 800c5ae:	eb06 020b 	add.w	r2, r6, fp
 800c5b2:	ad18      	add	r5, sp, #96	; 0x60
 800c5b4:	1c73      	adds	r3, r6, #1
 800c5b6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800c5ba:	4406      	add	r6, r0
 800c5bc:	429e      	cmp	r6, r3
 800c5be:	f6ff af19 	blt.w	800c3f4 <__kernel_rem_pio2+0xd4>
 800c5c2:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800c5c6:	9d00      	ldr	r5, [sp, #0]
 800c5c8:	ee07 0a90 	vmov	s15, r0
 800c5cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c5d0:	2000      	movs	r0, #0
 800c5d2:	eca2 7b02 	vstmia	r2!, {d7}
 800c5d6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c658 <__kernel_rem_pio2+0x338>
 800c5da:	4694      	mov	ip, r2
 800c5dc:	4288      	cmp	r0, r1
 800c5de:	dd09      	ble.n	800c5f4 <__kernel_rem_pio2+0x2d4>
 800c5e0:	a868      	add	r0, sp, #416	; 0x1a0
 800c5e2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800c5e6:	ed80 7b00 	vstr	d7, [r0]
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	e7e6      	b.n	800c5bc <__kernel_rem_pio2+0x29c>
 800c5ee:	9b01      	ldr	r3, [sp, #4]
 800c5f0:	2001      	movs	r0, #1
 800c5f2:	e7d8      	b.n	800c5a6 <__kernel_rem_pio2+0x286>
 800c5f4:	ecb5 5b02 	vldmia	r5!, {d5}
 800c5f8:	ed3c 6b02 	vldmdb	ip!, {d6}
 800c5fc:	3001      	adds	r0, #1
 800c5fe:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c602:	e7eb      	b.n	800c5dc <__kernel_rem_pio2+0x2bc>
 800c604:	3b01      	subs	r3, #1
 800c606:	e781      	b.n	800c50c <__kernel_rem_pio2+0x1ec>
 800c608:	4260      	negs	r0, r4
 800c60a:	eeb0 0b48 	vmov.f64	d0, d8
 800c60e:	f000 fad7 	bl	800cbc0 <scalbn>
 800c612:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800c668 <__kernel_rem_pio2+0x348>
 800c616:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800c61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c61e:	db2b      	blt.n	800c678 <__kernel_rem_pio2+0x358>
 800c620:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800c660 <__kernel_rem_pio2+0x340>
 800c624:	ee20 7b07 	vmul.f64	d7, d0, d7
 800c628:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c62c:	aa04      	add	r2, sp, #16
 800c62e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800c632:	eea5 0b46 	vfms.f64	d0, d5, d6
 800c636:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c63a:	a904      	add	r1, sp, #16
 800c63c:	ee10 3a10 	vmov	r3, s0
 800c640:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c644:	ee17 2a10 	vmov	r2, s14
 800c648:	1c73      	adds	r3, r6, #1
 800c64a:	3418      	adds	r4, #24
 800c64c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c650:	e762      	b.n	800c518 <__kernel_rem_pio2+0x1f8>
 800c652:	bf00      	nop
 800c654:	f3af 8000 	nop.w
	...
 800c664:	3e700000 	.word	0x3e700000
 800c668:	00000000 	.word	0x00000000
 800c66c:	41700000 	.word	0x41700000
 800c670:	0800f878 	.word	0x0800f878
 800c674:	0800f838 	.word	0x0800f838
 800c678:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c67c:	aa04      	add	r2, sp, #16
 800c67e:	ee10 3a10 	vmov	r3, s0
 800c682:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c686:	4633      	mov	r3, r6
 800c688:	e746      	b.n	800c518 <__kernel_rem_pio2+0x1f8>
 800c68a:	a804      	add	r0, sp, #16
 800c68c:	a968      	add	r1, sp, #416	; 0x1a0
 800c68e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800c692:	9000      	str	r0, [sp, #0]
 800c694:	ee07 0a90 	vmov	s15, r0
 800c698:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c69c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c6a0:	3a01      	subs	r2, #1
 800c6a2:	ee27 7b00 	vmul.f64	d7, d7, d0
 800c6a6:	ee20 0b06 	vmul.f64	d0, d0, d6
 800c6aa:	ed81 7b00 	vstr	d7, [r1]
 800c6ae:	e73d      	b.n	800c52c <__kernel_rem_pio2+0x20c>
 800c6b0:	ecb6 5b02 	vldmia	r6!, {d5}
 800c6b4:	ecb4 6b02 	vldmia	r4!, {d6}
 800c6b8:	3201      	adds	r2, #1
 800c6ba:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c6be:	454a      	cmp	r2, r9
 800c6c0:	dc01      	bgt.n	800c6c6 <__kernel_rem_pio2+0x3a6>
 800c6c2:	4290      	cmp	r0, r2
 800c6c4:	daf4      	bge.n	800c6b0 <__kernel_rem_pio2+0x390>
 800c6c6:	aa40      	add	r2, sp, #256	; 0x100
 800c6c8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c6cc:	ed82 7b00 	vstr	d7, [r2]
 800c6d0:	3901      	subs	r1, #1
 800c6d2:	3001      	adds	r0, #1
 800c6d4:	e72f      	b.n	800c536 <__kernel_rem_pio2+0x216>
 800c6d6:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800c6d8:	2a02      	cmp	r2, #2
 800c6da:	dc0a      	bgt.n	800c6f2 <__kernel_rem_pio2+0x3d2>
 800c6dc:	2a00      	cmp	r2, #0
 800c6de:	dc5a      	bgt.n	800c796 <__kernel_rem_pio2+0x476>
 800c6e0:	d039      	beq.n	800c756 <__kernel_rem_pio2+0x436>
 800c6e2:	f008 0007 	and.w	r0, r8, #7
 800c6e6:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800c6ea:	ecbd 8b06 	vpop	{d8-d10}
 800c6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6f2:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800c6f4:	2a03      	cmp	r2, #3
 800c6f6:	d1f4      	bne.n	800c6e2 <__kernel_rem_pio2+0x3c2>
 800c6f8:	aa40      	add	r2, sp, #256	; 0x100
 800c6fa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c6fe:	4611      	mov	r1, r2
 800c700:	4618      	mov	r0, r3
 800c702:	2800      	cmp	r0, #0
 800c704:	f1a1 0108 	sub.w	r1, r1, #8
 800c708:	dc52      	bgt.n	800c7b0 <__kernel_rem_pio2+0x490>
 800c70a:	4619      	mov	r1, r3
 800c70c:	2901      	cmp	r1, #1
 800c70e:	f1a2 0208 	sub.w	r2, r2, #8
 800c712:	dc5d      	bgt.n	800c7d0 <__kernel_rem_pio2+0x4b0>
 800c714:	ed9f 7b40 	vldr	d7, [pc, #256]	; 800c818 <__kernel_rem_pio2+0x4f8>
 800c718:	2b01      	cmp	r3, #1
 800c71a:	dc69      	bgt.n	800c7f0 <__kernel_rem_pio2+0x4d0>
 800c71c:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 800c720:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 800c724:	2d00      	cmp	r5, #0
 800c726:	d16c      	bne.n	800c802 <__kernel_rem_pio2+0x4e2>
 800c728:	ed87 5b00 	vstr	d5, [r7]
 800c72c:	ed87 6b02 	vstr	d6, [r7, #8]
 800c730:	ed87 7b04 	vstr	d7, [r7, #16]
 800c734:	e7d5      	b.n	800c6e2 <__kernel_rem_pio2+0x3c2>
 800c736:	aa40      	add	r2, sp, #256	; 0x100
 800c738:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c73c:	ed92 6b00 	vldr	d6, [r2]
 800c740:	3b01      	subs	r3, #1
 800c742:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c746:	2b00      	cmp	r3, #0
 800c748:	daf5      	bge.n	800c736 <__kernel_rem_pio2+0x416>
 800c74a:	b10d      	cbz	r5, 800c750 <__kernel_rem_pio2+0x430>
 800c74c:	eeb1 7b47 	vneg.f64	d7, d7
 800c750:	ed87 7b00 	vstr	d7, [r7]
 800c754:	e7c5      	b.n	800c6e2 <__kernel_rem_pio2+0x3c2>
 800c756:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800c818 <__kernel_rem_pio2+0x4f8>
 800c75a:	e7f4      	b.n	800c746 <__kernel_rem_pio2+0x426>
 800c75c:	a940      	add	r1, sp, #256	; 0x100
 800c75e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c762:	ed91 7b00 	vldr	d7, [r1]
 800c766:	3a01      	subs	r2, #1
 800c768:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c76c:	2a00      	cmp	r2, #0
 800c76e:	daf5      	bge.n	800c75c <__kernel_rem_pio2+0x43c>
 800c770:	b1ad      	cbz	r5, 800c79e <__kernel_rem_pio2+0x47e>
 800c772:	eeb1 7b46 	vneg.f64	d7, d6
 800c776:	ed87 7b00 	vstr	d7, [r7]
 800c77a:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 800c77e:	a942      	add	r1, sp, #264	; 0x108
 800c780:	2201      	movs	r2, #1
 800c782:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c786:	4293      	cmp	r3, r2
 800c788:	da0c      	bge.n	800c7a4 <__kernel_rem_pio2+0x484>
 800c78a:	b10d      	cbz	r5, 800c790 <__kernel_rem_pio2+0x470>
 800c78c:	eeb1 7b47 	vneg.f64	d7, d7
 800c790:	ed87 7b02 	vstr	d7, [r7, #8]
 800c794:	e7a5      	b.n	800c6e2 <__kernel_rem_pio2+0x3c2>
 800c796:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800c818 <__kernel_rem_pio2+0x4f8>
 800c79a:	461a      	mov	r2, r3
 800c79c:	e7e6      	b.n	800c76c <__kernel_rem_pio2+0x44c>
 800c79e:	eeb0 7b46 	vmov.f64	d7, d6
 800c7a2:	e7e8      	b.n	800c776 <__kernel_rem_pio2+0x456>
 800c7a4:	ecb1 6b02 	vldmia	r1!, {d6}
 800c7a8:	3201      	adds	r2, #1
 800c7aa:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c7ae:	e7ea      	b.n	800c786 <__kernel_rem_pio2+0x466>
 800c7b0:	ed91 7b00 	vldr	d7, [r1]
 800c7b4:	ed91 5b02 	vldr	d5, [r1, #8]
 800c7b8:	3801      	subs	r0, #1
 800c7ba:	ee37 6b05 	vadd.f64	d6, d7, d5
 800c7be:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c7c2:	ed81 6b00 	vstr	d6, [r1]
 800c7c6:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c7ca:	ed81 7b02 	vstr	d7, [r1, #8]
 800c7ce:	e798      	b.n	800c702 <__kernel_rem_pio2+0x3e2>
 800c7d0:	ed92 7b00 	vldr	d7, [r2]
 800c7d4:	ed92 5b02 	vldr	d5, [r2, #8]
 800c7d8:	3901      	subs	r1, #1
 800c7da:	ee37 6b05 	vadd.f64	d6, d7, d5
 800c7de:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c7e2:	ed82 6b00 	vstr	d6, [r2]
 800c7e6:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c7ea:	ed82 7b02 	vstr	d7, [r2, #8]
 800c7ee:	e78d      	b.n	800c70c <__kernel_rem_pio2+0x3ec>
 800c7f0:	aa40      	add	r2, sp, #256	; 0x100
 800c7f2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c7f6:	ed92 6b00 	vldr	d6, [r2]
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c800:	e78a      	b.n	800c718 <__kernel_rem_pio2+0x3f8>
 800c802:	eeb1 5b45 	vneg.f64	d5, d5
 800c806:	eeb1 6b46 	vneg.f64	d6, d6
 800c80a:	ed87 5b00 	vstr	d5, [r7]
 800c80e:	eeb1 7b47 	vneg.f64	d7, d7
 800c812:	ed87 6b02 	vstr	d6, [r7, #8]
 800c816:	e78b      	b.n	800c730 <__kernel_rem_pio2+0x410>
	...

0800c820 <__kernel_sin>:
 800c820:	ee10 3a90 	vmov	r3, s1
 800c824:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c828:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c82c:	da04      	bge.n	800c838 <__kernel_sin+0x18>
 800c82e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800c832:	ee17 3a90 	vmov	r3, s15
 800c836:	b35b      	cbz	r3, 800c890 <__kernel_sin+0x70>
 800c838:	ee20 6b00 	vmul.f64	d6, d0, d0
 800c83c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800c840:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800c898 <__kernel_sin+0x78>
 800c844:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800c8a0 <__kernel_sin+0x80>
 800c848:	eea6 4b07 	vfma.f64	d4, d6, d7
 800c84c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800c8a8 <__kernel_sin+0x88>
 800c850:	eea4 7b06 	vfma.f64	d7, d4, d6
 800c854:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800c8b0 <__kernel_sin+0x90>
 800c858:	eea7 4b06 	vfma.f64	d4, d7, d6
 800c85c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800c8b8 <__kernel_sin+0x98>
 800c860:	eea4 7b06 	vfma.f64	d7, d4, d6
 800c864:	b930      	cbnz	r0, 800c874 <__kernel_sin+0x54>
 800c866:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800c8c0 <__kernel_sin+0xa0>
 800c86a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800c86e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800c872:	4770      	bx	lr
 800c874:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800c878:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800c87c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800c880:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800c884:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800c8c8 <__kernel_sin+0xa8>
 800c888:	eea5 1b07 	vfma.f64	d1, d5, d7
 800c88c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	f3af 8000 	nop.w
 800c898:	5acfd57c 	.word	0x5acfd57c
 800c89c:	3de5d93a 	.word	0x3de5d93a
 800c8a0:	8a2b9ceb 	.word	0x8a2b9ceb
 800c8a4:	be5ae5e6 	.word	0xbe5ae5e6
 800c8a8:	57b1fe7d 	.word	0x57b1fe7d
 800c8ac:	3ec71de3 	.word	0x3ec71de3
 800c8b0:	19c161d5 	.word	0x19c161d5
 800c8b4:	bf2a01a0 	.word	0xbf2a01a0
 800c8b8:	1110f8a6 	.word	0x1110f8a6
 800c8bc:	3f811111 	.word	0x3f811111
 800c8c0:	55555549 	.word	0x55555549
 800c8c4:	bfc55555 	.word	0xbfc55555
 800c8c8:	55555549 	.word	0x55555549
 800c8cc:	3fc55555 	.word	0x3fc55555

0800c8d0 <atan>:
 800c8d0:	b538      	push	{r3, r4, r5, lr}
 800c8d2:	eeb0 7b40 	vmov.f64	d7, d0
 800c8d6:	ee17 5a90 	vmov	r5, s15
 800c8da:	4b73      	ldr	r3, [pc, #460]	; (800caa8 <atan+0x1d8>)
 800c8dc:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800c8e0:	429c      	cmp	r4, r3
 800c8e2:	dd13      	ble.n	800c90c <atan+0x3c>
 800c8e4:	4b71      	ldr	r3, [pc, #452]	; (800caac <atan+0x1dc>)
 800c8e6:	429c      	cmp	r4, r3
 800c8e8:	dc03      	bgt.n	800c8f2 <atan+0x22>
 800c8ea:	d107      	bne.n	800c8fc <atan+0x2c>
 800c8ec:	ee10 3a10 	vmov	r3, s0
 800c8f0:	b123      	cbz	r3, 800c8fc <atan+0x2c>
 800c8f2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c8f6:	eeb0 0b47 	vmov.f64	d0, d7
 800c8fa:	bd38      	pop	{r3, r4, r5, pc}
 800c8fc:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800ca38 <atan+0x168>
 800c900:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800ca40 <atan+0x170>
 800c904:	2d00      	cmp	r5, #0
 800c906:	fe36 7b07 	vselgt.f64	d7, d6, d7
 800c90a:	e7f4      	b.n	800c8f6 <atan+0x26>
 800c90c:	4b68      	ldr	r3, [pc, #416]	; (800cab0 <atan+0x1e0>)
 800c90e:	429c      	cmp	r4, r3
 800c910:	dc11      	bgt.n	800c936 <atan+0x66>
 800c912:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c916:	429c      	cmp	r4, r3
 800c918:	dc0a      	bgt.n	800c930 <atan+0x60>
 800c91a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800c91e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800ca48 <atan+0x178>
 800c922:	ee30 6b06 	vadd.f64	d6, d0, d6
 800c926:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c92e:	dce2      	bgt.n	800c8f6 <atan+0x26>
 800c930:	f04f 33ff 	mov.w	r3, #4294967295
 800c934:	e013      	b.n	800c95e <atan+0x8e>
 800c936:	f000 f8c5 	bl	800cac4 <fabs>
 800c93a:	4b5e      	ldr	r3, [pc, #376]	; (800cab4 <atan+0x1e4>)
 800c93c:	429c      	cmp	r4, r3
 800c93e:	dc4f      	bgt.n	800c9e0 <atan+0x110>
 800c940:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c944:	429c      	cmp	r4, r3
 800c946:	dc41      	bgt.n	800c9cc <atan+0xfc>
 800c948:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800c94c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800c950:	2300      	movs	r3, #0
 800c952:	eea0 6b07 	vfma.f64	d6, d0, d7
 800c956:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c95a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800c95e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800ca50 <atan+0x180>
 800c962:	ee27 4b07 	vmul.f64	d4, d7, d7
 800c966:	ee24 5b04 	vmul.f64	d5, d4, d4
 800c96a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800ca58 <atan+0x188>
 800c96e:	eea5 3b06 	vfma.f64	d3, d5, d6
 800c972:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800ca60 <atan+0x190>
 800c976:	eea3 6b05 	vfma.f64	d6, d3, d5
 800c97a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800ca68 <atan+0x198>
 800c97e:	eea6 3b05 	vfma.f64	d3, d6, d5
 800c982:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800ca70 <atan+0x1a0>
 800c986:	eea3 6b05 	vfma.f64	d6, d3, d5
 800c98a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800ca78 <atan+0x1a8>
 800c98e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800ca80 <atan+0x1b0>
 800c992:	eea6 3b05 	vfma.f64	d3, d6, d5
 800c996:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800ca88 <atan+0x1b8>
 800c99a:	eea5 2b06 	vfma.f64	d2, d5, d6
 800c99e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800ca90 <atan+0x1c0>
 800c9a2:	eea2 6b05 	vfma.f64	d6, d2, d5
 800c9a6:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800ca98 <atan+0x1c8>
 800c9aa:	eea6 2b05 	vfma.f64	d2, d6, d5
 800c9ae:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800caa0 <atan+0x1d0>
 800c9b2:	1c5a      	adds	r2, r3, #1
 800c9b4:	eea2 6b05 	vfma.f64	d6, d2, d5
 800c9b8:	ee26 6b05 	vmul.f64	d6, d6, d5
 800c9bc:	eea3 6b04 	vfma.f64	d6, d3, d4
 800c9c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c9c4:	d121      	bne.n	800ca0a <atan+0x13a>
 800c9c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c9ca:	e794      	b.n	800c8f6 <atan+0x26>
 800c9cc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c9d6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c9da:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800c9de:	e7be      	b.n	800c95e <atan+0x8e>
 800c9e0:	4b35      	ldr	r3, [pc, #212]	; (800cab8 <atan+0x1e8>)
 800c9e2:	429c      	cmp	r4, r3
 800c9e4:	da0b      	bge.n	800c9fe <atan+0x12e>
 800c9e6:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800c9ea:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c9ee:	ee30 5b47 	vsub.f64	d5, d0, d7
 800c9f2:	eea0 6b07 	vfma.f64	d6, d0, d7
 800c9f6:	2302      	movs	r3, #2
 800c9f8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800c9fc:	e7af      	b.n	800c95e <atan+0x8e>
 800c9fe:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800ca02:	2303      	movs	r3, #3
 800ca04:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800ca08:	e7a9      	b.n	800c95e <atan+0x8e>
 800ca0a:	4a2c      	ldr	r2, [pc, #176]	; (800cabc <atan+0x1ec>)
 800ca0c:	492c      	ldr	r1, [pc, #176]	; (800cac0 <atan+0x1f0>)
 800ca0e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ca12:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800ca16:	ed93 5b00 	vldr	d5, [r3]
 800ca1a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ca1e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ca22:	ed92 6b00 	vldr	d6, [r2]
 800ca26:	2d00      	cmp	r5, #0
 800ca28:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ca2c:	bfb8      	it	lt
 800ca2e:	eeb1 7b47 	vneglt.f64	d7, d7
 800ca32:	e760      	b.n	800c8f6 <atan+0x26>
 800ca34:	f3af 8000 	nop.w
 800ca38:	54442d18 	.word	0x54442d18
 800ca3c:	3ff921fb 	.word	0x3ff921fb
 800ca40:	54442d18 	.word	0x54442d18
 800ca44:	bff921fb 	.word	0xbff921fb
 800ca48:	8800759c 	.word	0x8800759c
 800ca4c:	7e37e43c 	.word	0x7e37e43c
 800ca50:	e322da11 	.word	0xe322da11
 800ca54:	3f90ad3a 	.word	0x3f90ad3a
 800ca58:	24760deb 	.word	0x24760deb
 800ca5c:	3fa97b4b 	.word	0x3fa97b4b
 800ca60:	a0d03d51 	.word	0xa0d03d51
 800ca64:	3fb10d66 	.word	0x3fb10d66
 800ca68:	c54c206e 	.word	0xc54c206e
 800ca6c:	3fb745cd 	.word	0x3fb745cd
 800ca70:	920083ff 	.word	0x920083ff
 800ca74:	3fc24924 	.word	0x3fc24924
 800ca78:	5555550d 	.word	0x5555550d
 800ca7c:	3fd55555 	.word	0x3fd55555
 800ca80:	52defd9a 	.word	0x52defd9a
 800ca84:	bfadde2d 	.word	0xbfadde2d
 800ca88:	2c6a6c2f 	.word	0x2c6a6c2f
 800ca8c:	bfa2b444 	.word	0xbfa2b444
 800ca90:	af749a6d 	.word	0xaf749a6d
 800ca94:	bfb3b0f2 	.word	0xbfb3b0f2
 800ca98:	fe231671 	.word	0xfe231671
 800ca9c:	bfbc71c6 	.word	0xbfbc71c6
 800caa0:	9998ebc4 	.word	0x9998ebc4
 800caa4:	bfc99999 	.word	0xbfc99999
 800caa8:	440fffff 	.word	0x440fffff
 800caac:	7ff00000 	.word	0x7ff00000
 800cab0:	3fdbffff 	.word	0x3fdbffff
 800cab4:	3ff2ffff 	.word	0x3ff2ffff
 800cab8:	40038000 	.word	0x40038000
 800cabc:	0800f888 	.word	0x0800f888
 800cac0:	0800f8a8 	.word	0x0800f8a8

0800cac4 <fabs>:
 800cac4:	ec51 0b10 	vmov	r0, r1, d0
 800cac8:	ee10 2a10 	vmov	r2, s0
 800cacc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cad0:	ec43 2b10 	vmov	d0, r2, r3
 800cad4:	4770      	bx	lr
	...

0800cad8 <floor>:
 800cad8:	ee10 1a90 	vmov	r1, s1
 800cadc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cae0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800cae4:	2b13      	cmp	r3, #19
 800cae6:	b530      	push	{r4, r5, lr}
 800cae8:	ee10 0a10 	vmov	r0, s0
 800caec:	ee10 5a10 	vmov	r5, s0
 800caf0:	dc31      	bgt.n	800cb56 <floor+0x7e>
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	da15      	bge.n	800cb22 <floor+0x4a>
 800caf6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800cbb0 <floor+0xd8>
 800cafa:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cafe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cb02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb06:	dd07      	ble.n	800cb18 <floor+0x40>
 800cb08:	2900      	cmp	r1, #0
 800cb0a:	da4e      	bge.n	800cbaa <floor+0xd2>
 800cb0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cb10:	4318      	orrs	r0, r3
 800cb12:	d001      	beq.n	800cb18 <floor+0x40>
 800cb14:	4928      	ldr	r1, [pc, #160]	; (800cbb8 <floor+0xe0>)
 800cb16:	2000      	movs	r0, #0
 800cb18:	460b      	mov	r3, r1
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	ec43 2b10 	vmov	d0, r2, r3
 800cb20:	e020      	b.n	800cb64 <floor+0x8c>
 800cb22:	4a26      	ldr	r2, [pc, #152]	; (800cbbc <floor+0xe4>)
 800cb24:	411a      	asrs	r2, r3
 800cb26:	ea01 0402 	and.w	r4, r1, r2
 800cb2a:	4304      	orrs	r4, r0
 800cb2c:	d01a      	beq.n	800cb64 <floor+0x8c>
 800cb2e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800cbb0 <floor+0xd8>
 800cb32:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cb36:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cb3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb3e:	ddeb      	ble.n	800cb18 <floor+0x40>
 800cb40:	2900      	cmp	r1, #0
 800cb42:	bfbe      	ittt	lt
 800cb44:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800cb48:	fa40 f303 	asrlt.w	r3, r0, r3
 800cb4c:	18c9      	addlt	r1, r1, r3
 800cb4e:	ea21 0102 	bic.w	r1, r1, r2
 800cb52:	2000      	movs	r0, #0
 800cb54:	e7e0      	b.n	800cb18 <floor+0x40>
 800cb56:	2b33      	cmp	r3, #51	; 0x33
 800cb58:	dd05      	ble.n	800cb66 <floor+0x8e>
 800cb5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb5e:	d101      	bne.n	800cb64 <floor+0x8c>
 800cb60:	ee30 0b00 	vadd.f64	d0, d0, d0
 800cb64:	bd30      	pop	{r4, r5, pc}
 800cb66:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800cb6a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb6e:	40e2      	lsrs	r2, r4
 800cb70:	4202      	tst	r2, r0
 800cb72:	d0f7      	beq.n	800cb64 <floor+0x8c>
 800cb74:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800cbb0 <floor+0xd8>
 800cb78:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cb7c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cb80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb84:	ddc8      	ble.n	800cb18 <floor+0x40>
 800cb86:	2900      	cmp	r1, #0
 800cb88:	da02      	bge.n	800cb90 <floor+0xb8>
 800cb8a:	2b14      	cmp	r3, #20
 800cb8c:	d103      	bne.n	800cb96 <floor+0xbe>
 800cb8e:	3101      	adds	r1, #1
 800cb90:	ea20 0002 	bic.w	r0, r0, r2
 800cb94:	e7c0      	b.n	800cb18 <floor+0x40>
 800cb96:	2401      	movs	r4, #1
 800cb98:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cb9c:	fa04 f303 	lsl.w	r3, r4, r3
 800cba0:	4418      	add	r0, r3
 800cba2:	42a8      	cmp	r0, r5
 800cba4:	bf38      	it	cc
 800cba6:	1909      	addcc	r1, r1, r4
 800cba8:	e7f2      	b.n	800cb90 <floor+0xb8>
 800cbaa:	2000      	movs	r0, #0
 800cbac:	4601      	mov	r1, r0
 800cbae:	e7b3      	b.n	800cb18 <floor+0x40>
 800cbb0:	8800759c 	.word	0x8800759c
 800cbb4:	7e37e43c 	.word	0x7e37e43c
 800cbb8:	bff00000 	.word	0xbff00000
 800cbbc:	000fffff 	.word	0x000fffff

0800cbc0 <scalbn>:
 800cbc0:	b082      	sub	sp, #8
 800cbc2:	ed8d 0b00 	vstr	d0, [sp]
 800cbc6:	9b01      	ldr	r3, [sp, #4]
 800cbc8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800cbcc:	b9a2      	cbnz	r2, 800cbf8 <scalbn+0x38>
 800cbce:	9a00      	ldr	r2, [sp, #0]
 800cbd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	d03a      	beq.n	800cc4e <scalbn+0x8e>
 800cbd8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800ccb0 <scalbn+0xf0>
 800cbdc:	4b40      	ldr	r3, [pc, #256]	; (800cce0 <scalbn+0x120>)
 800cbde:	ee20 7b07 	vmul.f64	d7, d0, d7
 800cbe2:	4298      	cmp	r0, r3
 800cbe4:	ed8d 7b00 	vstr	d7, [sp]
 800cbe8:	da11      	bge.n	800cc0e <scalbn+0x4e>
 800cbea:	ed9f 7b33 	vldr	d7, [pc, #204]	; 800ccb8 <scalbn+0xf8>
 800cbee:	ed9d 6b00 	vldr	d6, [sp]
 800cbf2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cbf6:	e007      	b.n	800cc08 <scalbn+0x48>
 800cbf8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cbfc:	428a      	cmp	r2, r1
 800cbfe:	d10a      	bne.n	800cc16 <scalbn+0x56>
 800cc00:	ed9d 7b00 	vldr	d7, [sp]
 800cc04:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cc08:	ed8d 7b00 	vstr	d7, [sp]
 800cc0c:	e01f      	b.n	800cc4e <scalbn+0x8e>
 800cc0e:	9b01      	ldr	r3, [sp, #4]
 800cc10:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800cc14:	3a36      	subs	r2, #54	; 0x36
 800cc16:	4402      	add	r2, r0
 800cc18:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cc1c:	428a      	cmp	r2, r1
 800cc1e:	dd0a      	ble.n	800cc36 <scalbn+0x76>
 800cc20:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800ccc0 <scalbn+0x100>
 800cc24:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800ccc8 <scalbn+0x108>
 800cc28:	eeb0 6b47 	vmov.f64	d6, d7
 800cc2c:	9b01      	ldr	r3, [sp, #4]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	fe27 7b05 	vselge.f64	d7, d7, d5
 800cc34:	e7dd      	b.n	800cbf2 <scalbn+0x32>
 800cc36:	2a00      	cmp	r2, #0
 800cc38:	dd0d      	ble.n	800cc56 <scalbn+0x96>
 800cc3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cc42:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cc46:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cc4a:	e9cd 0100 	strd	r0, r1, [sp]
 800cc4e:	ed9d 0b00 	vldr	d0, [sp]
 800cc52:	b002      	add	sp, #8
 800cc54:	4770      	bx	lr
 800cc56:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cc5a:	da18      	bge.n	800cc8e <scalbn+0xce>
 800cc5c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cc60:	4298      	cmp	r0, r3
 800cc62:	9b01      	ldr	r3, [sp, #4]
 800cc64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc68:	dd09      	ble.n	800cc7e <scalbn+0xbe>
 800cc6a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800ccc0 <scalbn+0x100>
 800cc6e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 800ccc8 <scalbn+0x108>
 800cc72:	eeb0 6b47 	vmov.f64	d6, d7
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800cc7c:	e7b9      	b.n	800cbf2 <scalbn+0x32>
 800cc7e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800ccb8 <scalbn+0xf8>
 800cc82:	ed9f 5b13 	vldr	d5, [pc, #76]	; 800ccd0 <scalbn+0x110>
 800cc86:	eeb0 6b47 	vmov.f64	d6, d7
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	e7f4      	b.n	800cc78 <scalbn+0xb8>
 800cc8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cc96:	3236      	adds	r2, #54	; 0x36
 800cc98:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cc9c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cca0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800ccd8 <scalbn+0x118>
 800cca4:	ec41 0b17 	vmov	d7, r0, r1
 800cca8:	e7a3      	b.n	800cbf2 <scalbn+0x32>
 800ccaa:	bf00      	nop
 800ccac:	f3af 8000 	nop.w
 800ccb0:	00000000 	.word	0x00000000
 800ccb4:	43500000 	.word	0x43500000
 800ccb8:	c2f8f359 	.word	0xc2f8f359
 800ccbc:	01a56e1f 	.word	0x01a56e1f
 800ccc0:	8800759c 	.word	0x8800759c
 800ccc4:	7e37e43c 	.word	0x7e37e43c
 800ccc8:	8800759c 	.word	0x8800759c
 800cccc:	fe37e43c 	.word	0xfe37e43c
 800ccd0:	c2f8f359 	.word	0xc2f8f359
 800ccd4:	81a56e1f 	.word	0x81a56e1f
 800ccd8:	00000000 	.word	0x00000000
 800ccdc:	3c900000 	.word	0x3c900000
 800cce0:	ffff3cb0 	.word	0xffff3cb0

0800cce4 <__errno>:
 800cce4:	4b01      	ldr	r3, [pc, #4]	; (800ccec <__errno+0x8>)
 800cce6:	6818      	ldr	r0, [r3, #0]
 800cce8:	4770      	bx	lr
 800ccea:	bf00      	nop
 800ccec:	20000018 	.word	0x20000018

0800ccf0 <__libc_init_array>:
 800ccf0:	b570      	push	{r4, r5, r6, lr}
 800ccf2:	4d0d      	ldr	r5, [pc, #52]	; (800cd28 <__libc_init_array+0x38>)
 800ccf4:	4c0d      	ldr	r4, [pc, #52]	; (800cd2c <__libc_init_array+0x3c>)
 800ccf6:	1b64      	subs	r4, r4, r5
 800ccf8:	10a4      	asrs	r4, r4, #2
 800ccfa:	2600      	movs	r6, #0
 800ccfc:	42a6      	cmp	r6, r4
 800ccfe:	d109      	bne.n	800cd14 <__libc_init_array+0x24>
 800cd00:	4d0b      	ldr	r5, [pc, #44]	; (800cd30 <__libc_init_array+0x40>)
 800cd02:	4c0c      	ldr	r4, [pc, #48]	; (800cd34 <__libc_init_array+0x44>)
 800cd04:	f002 fc78 	bl	800f5f8 <_init>
 800cd08:	1b64      	subs	r4, r4, r5
 800cd0a:	10a4      	asrs	r4, r4, #2
 800cd0c:	2600      	movs	r6, #0
 800cd0e:	42a6      	cmp	r6, r4
 800cd10:	d105      	bne.n	800cd1e <__libc_init_array+0x2e>
 800cd12:	bd70      	pop	{r4, r5, r6, pc}
 800cd14:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd18:	4798      	blx	r3
 800cd1a:	3601      	adds	r6, #1
 800cd1c:	e7ee      	b.n	800ccfc <__libc_init_array+0xc>
 800cd1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd22:	4798      	blx	r3
 800cd24:	3601      	adds	r6, #1
 800cd26:	e7f2      	b.n	800cd0e <__libc_init_array+0x1e>
 800cd28:	0800fcb4 	.word	0x0800fcb4
 800cd2c:	0800fcb4 	.word	0x0800fcb4
 800cd30:	0800fcb4 	.word	0x0800fcb4
 800cd34:	0800fcb8 	.word	0x0800fcb8

0800cd38 <memset>:
 800cd38:	4402      	add	r2, r0
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d100      	bne.n	800cd42 <memset+0xa>
 800cd40:	4770      	bx	lr
 800cd42:	f803 1b01 	strb.w	r1, [r3], #1
 800cd46:	e7f9      	b.n	800cd3c <memset+0x4>

0800cd48 <__cvt>:
 800cd48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd4a:	ed2d 8b02 	vpush	{d8}
 800cd4e:	eeb0 8b40 	vmov.f64	d8, d0
 800cd52:	b085      	sub	sp, #20
 800cd54:	4617      	mov	r7, r2
 800cd56:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800cd58:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cd5a:	ee18 2a90 	vmov	r2, s17
 800cd5e:	f025 0520 	bic.w	r5, r5, #32
 800cd62:	2a00      	cmp	r2, #0
 800cd64:	bfb6      	itet	lt
 800cd66:	222d      	movlt	r2, #45	; 0x2d
 800cd68:	2200      	movge	r2, #0
 800cd6a:	eeb1 8b40 	vneglt.f64	d8, d0
 800cd6e:	2d46      	cmp	r5, #70	; 0x46
 800cd70:	460c      	mov	r4, r1
 800cd72:	701a      	strb	r2, [r3, #0]
 800cd74:	d004      	beq.n	800cd80 <__cvt+0x38>
 800cd76:	2d45      	cmp	r5, #69	; 0x45
 800cd78:	d100      	bne.n	800cd7c <__cvt+0x34>
 800cd7a:	3401      	adds	r4, #1
 800cd7c:	2102      	movs	r1, #2
 800cd7e:	e000      	b.n	800cd82 <__cvt+0x3a>
 800cd80:	2103      	movs	r1, #3
 800cd82:	ab03      	add	r3, sp, #12
 800cd84:	9301      	str	r3, [sp, #4]
 800cd86:	ab02      	add	r3, sp, #8
 800cd88:	9300      	str	r3, [sp, #0]
 800cd8a:	4622      	mov	r2, r4
 800cd8c:	4633      	mov	r3, r6
 800cd8e:	eeb0 0b48 	vmov.f64	d0, d8
 800cd92:	f000 fcc1 	bl	800d718 <_dtoa_r>
 800cd96:	2d47      	cmp	r5, #71	; 0x47
 800cd98:	d109      	bne.n	800cdae <__cvt+0x66>
 800cd9a:	07fb      	lsls	r3, r7, #31
 800cd9c:	d407      	bmi.n	800cdae <__cvt+0x66>
 800cd9e:	9b03      	ldr	r3, [sp, #12]
 800cda0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cda2:	1a1b      	subs	r3, r3, r0
 800cda4:	6013      	str	r3, [r2, #0]
 800cda6:	b005      	add	sp, #20
 800cda8:	ecbd 8b02 	vpop	{d8}
 800cdac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdae:	2d46      	cmp	r5, #70	; 0x46
 800cdb0:	eb00 0204 	add.w	r2, r0, r4
 800cdb4:	d10c      	bne.n	800cdd0 <__cvt+0x88>
 800cdb6:	7803      	ldrb	r3, [r0, #0]
 800cdb8:	2b30      	cmp	r3, #48	; 0x30
 800cdba:	d107      	bne.n	800cdcc <__cvt+0x84>
 800cdbc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cdc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdc4:	bf1c      	itt	ne
 800cdc6:	f1c4 0401 	rsbne	r4, r4, #1
 800cdca:	6034      	strne	r4, [r6, #0]
 800cdcc:	6833      	ldr	r3, [r6, #0]
 800cdce:	441a      	add	r2, r3
 800cdd0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cdd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdd8:	bf08      	it	eq
 800cdda:	9203      	streq	r2, [sp, #12]
 800cddc:	2130      	movs	r1, #48	; 0x30
 800cdde:	9b03      	ldr	r3, [sp, #12]
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d2dc      	bcs.n	800cd9e <__cvt+0x56>
 800cde4:	1c5c      	adds	r4, r3, #1
 800cde6:	9403      	str	r4, [sp, #12]
 800cde8:	7019      	strb	r1, [r3, #0]
 800cdea:	e7f8      	b.n	800cdde <__cvt+0x96>

0800cdec <__exponent>:
 800cdec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdee:	4603      	mov	r3, r0
 800cdf0:	2900      	cmp	r1, #0
 800cdf2:	bfb8      	it	lt
 800cdf4:	4249      	neglt	r1, r1
 800cdf6:	f803 2b02 	strb.w	r2, [r3], #2
 800cdfa:	bfb4      	ite	lt
 800cdfc:	222d      	movlt	r2, #45	; 0x2d
 800cdfe:	222b      	movge	r2, #43	; 0x2b
 800ce00:	2909      	cmp	r1, #9
 800ce02:	7042      	strb	r2, [r0, #1]
 800ce04:	dd2a      	ble.n	800ce5c <__exponent+0x70>
 800ce06:	f10d 0407 	add.w	r4, sp, #7
 800ce0a:	46a4      	mov	ip, r4
 800ce0c:	270a      	movs	r7, #10
 800ce0e:	46a6      	mov	lr, r4
 800ce10:	460a      	mov	r2, r1
 800ce12:	fb91 f6f7 	sdiv	r6, r1, r7
 800ce16:	fb07 1516 	mls	r5, r7, r6, r1
 800ce1a:	3530      	adds	r5, #48	; 0x30
 800ce1c:	2a63      	cmp	r2, #99	; 0x63
 800ce1e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ce22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ce26:	4631      	mov	r1, r6
 800ce28:	dcf1      	bgt.n	800ce0e <__exponent+0x22>
 800ce2a:	3130      	adds	r1, #48	; 0x30
 800ce2c:	f1ae 0502 	sub.w	r5, lr, #2
 800ce30:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ce34:	1c44      	adds	r4, r0, #1
 800ce36:	4629      	mov	r1, r5
 800ce38:	4561      	cmp	r1, ip
 800ce3a:	d30a      	bcc.n	800ce52 <__exponent+0x66>
 800ce3c:	f10d 0209 	add.w	r2, sp, #9
 800ce40:	eba2 020e 	sub.w	r2, r2, lr
 800ce44:	4565      	cmp	r5, ip
 800ce46:	bf88      	it	hi
 800ce48:	2200      	movhi	r2, #0
 800ce4a:	4413      	add	r3, r2
 800ce4c:	1a18      	subs	r0, r3, r0
 800ce4e:	b003      	add	sp, #12
 800ce50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce56:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ce5a:	e7ed      	b.n	800ce38 <__exponent+0x4c>
 800ce5c:	2330      	movs	r3, #48	; 0x30
 800ce5e:	3130      	adds	r1, #48	; 0x30
 800ce60:	7083      	strb	r3, [r0, #2]
 800ce62:	70c1      	strb	r1, [r0, #3]
 800ce64:	1d03      	adds	r3, r0, #4
 800ce66:	e7f1      	b.n	800ce4c <__exponent+0x60>

0800ce68 <_printf_float>:
 800ce68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce6c:	b08b      	sub	sp, #44	; 0x2c
 800ce6e:	460c      	mov	r4, r1
 800ce70:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ce74:	4616      	mov	r6, r2
 800ce76:	461f      	mov	r7, r3
 800ce78:	4605      	mov	r5, r0
 800ce7a:	f001 fac5 	bl	800e408 <_localeconv_r>
 800ce7e:	f8d0 b000 	ldr.w	fp, [r0]
 800ce82:	4658      	mov	r0, fp
 800ce84:	f7f3 fa2c 	bl	80002e0 <strlen>
 800ce88:	2300      	movs	r3, #0
 800ce8a:	9308      	str	r3, [sp, #32]
 800ce8c:	f8d8 3000 	ldr.w	r3, [r8]
 800ce90:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ce94:	6822      	ldr	r2, [r4, #0]
 800ce96:	3307      	adds	r3, #7
 800ce98:	f023 0307 	bic.w	r3, r3, #7
 800ce9c:	f103 0108 	add.w	r1, r3, #8
 800cea0:	f8c8 1000 	str.w	r1, [r8]
 800cea4:	4682      	mov	sl, r0
 800cea6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ceaa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800ceae:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800d110 <_printf_float+0x2a8>
 800ceb2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800ceb6:	eeb0 6bc0 	vabs.f64	d6, d0
 800ceba:	eeb4 6b47 	vcmp.f64	d6, d7
 800cebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cec2:	dd24      	ble.n	800cf0e <_printf_float+0xa6>
 800cec4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cecc:	d502      	bpl.n	800ced4 <_printf_float+0x6c>
 800cece:	232d      	movs	r3, #45	; 0x2d
 800ced0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ced4:	4b90      	ldr	r3, [pc, #576]	; (800d118 <_printf_float+0x2b0>)
 800ced6:	4891      	ldr	r0, [pc, #580]	; (800d11c <_printf_float+0x2b4>)
 800ced8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cedc:	bf94      	ite	ls
 800cede:	4698      	movls	r8, r3
 800cee0:	4680      	movhi	r8, r0
 800cee2:	2303      	movs	r3, #3
 800cee4:	6123      	str	r3, [r4, #16]
 800cee6:	f022 0204 	bic.w	r2, r2, #4
 800ceea:	2300      	movs	r3, #0
 800ceec:	6022      	str	r2, [r4, #0]
 800ceee:	9304      	str	r3, [sp, #16]
 800cef0:	9700      	str	r7, [sp, #0]
 800cef2:	4633      	mov	r3, r6
 800cef4:	aa09      	add	r2, sp, #36	; 0x24
 800cef6:	4621      	mov	r1, r4
 800cef8:	4628      	mov	r0, r5
 800cefa:	f000 f9d3 	bl	800d2a4 <_printf_common>
 800cefe:	3001      	adds	r0, #1
 800cf00:	f040 808a 	bne.w	800d018 <_printf_float+0x1b0>
 800cf04:	f04f 30ff 	mov.w	r0, #4294967295
 800cf08:	b00b      	add	sp, #44	; 0x2c
 800cf0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf0e:	eeb4 0b40 	vcmp.f64	d0, d0
 800cf12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf16:	d709      	bvc.n	800cf2c <_printf_float+0xc4>
 800cf18:	ee10 3a90 	vmov	r3, s1
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	bfbc      	itt	lt
 800cf20:	232d      	movlt	r3, #45	; 0x2d
 800cf22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cf26:	487e      	ldr	r0, [pc, #504]	; (800d120 <_printf_float+0x2b8>)
 800cf28:	4b7e      	ldr	r3, [pc, #504]	; (800d124 <_printf_float+0x2bc>)
 800cf2a:	e7d5      	b.n	800ced8 <_printf_float+0x70>
 800cf2c:	6863      	ldr	r3, [r4, #4]
 800cf2e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800cf32:	9104      	str	r1, [sp, #16]
 800cf34:	1c59      	adds	r1, r3, #1
 800cf36:	d13c      	bne.n	800cfb2 <_printf_float+0x14a>
 800cf38:	2306      	movs	r3, #6
 800cf3a:	6063      	str	r3, [r4, #4]
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	9303      	str	r3, [sp, #12]
 800cf40:	ab08      	add	r3, sp, #32
 800cf42:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800cf46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cf4a:	ab07      	add	r3, sp, #28
 800cf4c:	6861      	ldr	r1, [r4, #4]
 800cf4e:	9300      	str	r3, [sp, #0]
 800cf50:	6022      	str	r2, [r4, #0]
 800cf52:	f10d 031b 	add.w	r3, sp, #27
 800cf56:	4628      	mov	r0, r5
 800cf58:	f7ff fef6 	bl	800cd48 <__cvt>
 800cf5c:	9b04      	ldr	r3, [sp, #16]
 800cf5e:	9907      	ldr	r1, [sp, #28]
 800cf60:	2b47      	cmp	r3, #71	; 0x47
 800cf62:	4680      	mov	r8, r0
 800cf64:	d108      	bne.n	800cf78 <_printf_float+0x110>
 800cf66:	1cc8      	adds	r0, r1, #3
 800cf68:	db02      	blt.n	800cf70 <_printf_float+0x108>
 800cf6a:	6863      	ldr	r3, [r4, #4]
 800cf6c:	4299      	cmp	r1, r3
 800cf6e:	dd41      	ble.n	800cff4 <_printf_float+0x18c>
 800cf70:	f1a9 0902 	sub.w	r9, r9, #2
 800cf74:	fa5f f989 	uxtb.w	r9, r9
 800cf78:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cf7c:	d820      	bhi.n	800cfc0 <_printf_float+0x158>
 800cf7e:	3901      	subs	r1, #1
 800cf80:	464a      	mov	r2, r9
 800cf82:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cf86:	9107      	str	r1, [sp, #28]
 800cf88:	f7ff ff30 	bl	800cdec <__exponent>
 800cf8c:	9a08      	ldr	r2, [sp, #32]
 800cf8e:	9004      	str	r0, [sp, #16]
 800cf90:	1813      	adds	r3, r2, r0
 800cf92:	2a01      	cmp	r2, #1
 800cf94:	6123      	str	r3, [r4, #16]
 800cf96:	dc02      	bgt.n	800cf9e <_printf_float+0x136>
 800cf98:	6822      	ldr	r2, [r4, #0]
 800cf9a:	07d2      	lsls	r2, r2, #31
 800cf9c:	d501      	bpl.n	800cfa2 <_printf_float+0x13a>
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	6123      	str	r3, [r4, #16]
 800cfa2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d0a2      	beq.n	800cef0 <_printf_float+0x88>
 800cfaa:	232d      	movs	r3, #45	; 0x2d
 800cfac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfb0:	e79e      	b.n	800cef0 <_printf_float+0x88>
 800cfb2:	9904      	ldr	r1, [sp, #16]
 800cfb4:	2947      	cmp	r1, #71	; 0x47
 800cfb6:	d1c1      	bne.n	800cf3c <_printf_float+0xd4>
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d1bf      	bne.n	800cf3c <_printf_float+0xd4>
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e7bc      	b.n	800cf3a <_printf_float+0xd2>
 800cfc0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cfc4:	d118      	bne.n	800cff8 <_printf_float+0x190>
 800cfc6:	2900      	cmp	r1, #0
 800cfc8:	6863      	ldr	r3, [r4, #4]
 800cfca:	dd0b      	ble.n	800cfe4 <_printf_float+0x17c>
 800cfcc:	6121      	str	r1, [r4, #16]
 800cfce:	b913      	cbnz	r3, 800cfd6 <_printf_float+0x16e>
 800cfd0:	6822      	ldr	r2, [r4, #0]
 800cfd2:	07d0      	lsls	r0, r2, #31
 800cfd4:	d502      	bpl.n	800cfdc <_printf_float+0x174>
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	440b      	add	r3, r1
 800cfda:	6123      	str	r3, [r4, #16]
 800cfdc:	2300      	movs	r3, #0
 800cfde:	65a1      	str	r1, [r4, #88]	; 0x58
 800cfe0:	9304      	str	r3, [sp, #16]
 800cfe2:	e7de      	b.n	800cfa2 <_printf_float+0x13a>
 800cfe4:	b913      	cbnz	r3, 800cfec <_printf_float+0x184>
 800cfe6:	6822      	ldr	r2, [r4, #0]
 800cfe8:	07d2      	lsls	r2, r2, #31
 800cfea:	d501      	bpl.n	800cff0 <_printf_float+0x188>
 800cfec:	3302      	adds	r3, #2
 800cfee:	e7f4      	b.n	800cfda <_printf_float+0x172>
 800cff0:	2301      	movs	r3, #1
 800cff2:	e7f2      	b.n	800cfda <_printf_float+0x172>
 800cff4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cff8:	9b08      	ldr	r3, [sp, #32]
 800cffa:	4299      	cmp	r1, r3
 800cffc:	db05      	blt.n	800d00a <_printf_float+0x1a2>
 800cffe:	6823      	ldr	r3, [r4, #0]
 800d000:	6121      	str	r1, [r4, #16]
 800d002:	07d8      	lsls	r0, r3, #31
 800d004:	d5ea      	bpl.n	800cfdc <_printf_float+0x174>
 800d006:	1c4b      	adds	r3, r1, #1
 800d008:	e7e7      	b.n	800cfda <_printf_float+0x172>
 800d00a:	2900      	cmp	r1, #0
 800d00c:	bfd4      	ite	le
 800d00e:	f1c1 0202 	rsble	r2, r1, #2
 800d012:	2201      	movgt	r2, #1
 800d014:	4413      	add	r3, r2
 800d016:	e7e0      	b.n	800cfda <_printf_float+0x172>
 800d018:	6823      	ldr	r3, [r4, #0]
 800d01a:	055a      	lsls	r2, r3, #21
 800d01c:	d407      	bmi.n	800d02e <_printf_float+0x1c6>
 800d01e:	6923      	ldr	r3, [r4, #16]
 800d020:	4642      	mov	r2, r8
 800d022:	4631      	mov	r1, r6
 800d024:	4628      	mov	r0, r5
 800d026:	47b8      	blx	r7
 800d028:	3001      	adds	r0, #1
 800d02a:	d12a      	bne.n	800d082 <_printf_float+0x21a>
 800d02c:	e76a      	b.n	800cf04 <_printf_float+0x9c>
 800d02e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d032:	f240 80e2 	bls.w	800d1fa <_printf_float+0x392>
 800d036:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d03a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d042:	d133      	bne.n	800d0ac <_printf_float+0x244>
 800d044:	4a38      	ldr	r2, [pc, #224]	; (800d128 <_printf_float+0x2c0>)
 800d046:	2301      	movs	r3, #1
 800d048:	4631      	mov	r1, r6
 800d04a:	4628      	mov	r0, r5
 800d04c:	47b8      	blx	r7
 800d04e:	3001      	adds	r0, #1
 800d050:	f43f af58 	beq.w	800cf04 <_printf_float+0x9c>
 800d054:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d058:	429a      	cmp	r2, r3
 800d05a:	db02      	blt.n	800d062 <_printf_float+0x1fa>
 800d05c:	6823      	ldr	r3, [r4, #0]
 800d05e:	07d8      	lsls	r0, r3, #31
 800d060:	d50f      	bpl.n	800d082 <_printf_float+0x21a>
 800d062:	4653      	mov	r3, sl
 800d064:	465a      	mov	r2, fp
 800d066:	4631      	mov	r1, r6
 800d068:	4628      	mov	r0, r5
 800d06a:	47b8      	blx	r7
 800d06c:	3001      	adds	r0, #1
 800d06e:	f43f af49 	beq.w	800cf04 <_printf_float+0x9c>
 800d072:	f04f 0800 	mov.w	r8, #0
 800d076:	f104 091a 	add.w	r9, r4, #26
 800d07a:	9b08      	ldr	r3, [sp, #32]
 800d07c:	3b01      	subs	r3, #1
 800d07e:	4543      	cmp	r3, r8
 800d080:	dc09      	bgt.n	800d096 <_printf_float+0x22e>
 800d082:	6823      	ldr	r3, [r4, #0]
 800d084:	079b      	lsls	r3, r3, #30
 800d086:	f100 8108 	bmi.w	800d29a <_printf_float+0x432>
 800d08a:	68e0      	ldr	r0, [r4, #12]
 800d08c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d08e:	4298      	cmp	r0, r3
 800d090:	bfb8      	it	lt
 800d092:	4618      	movlt	r0, r3
 800d094:	e738      	b.n	800cf08 <_printf_float+0xa0>
 800d096:	2301      	movs	r3, #1
 800d098:	464a      	mov	r2, r9
 800d09a:	4631      	mov	r1, r6
 800d09c:	4628      	mov	r0, r5
 800d09e:	47b8      	blx	r7
 800d0a0:	3001      	adds	r0, #1
 800d0a2:	f43f af2f 	beq.w	800cf04 <_printf_float+0x9c>
 800d0a6:	f108 0801 	add.w	r8, r8, #1
 800d0aa:	e7e6      	b.n	800d07a <_printf_float+0x212>
 800d0ac:	9b07      	ldr	r3, [sp, #28]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	dc3c      	bgt.n	800d12c <_printf_float+0x2c4>
 800d0b2:	4a1d      	ldr	r2, [pc, #116]	; (800d128 <_printf_float+0x2c0>)
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	4631      	mov	r1, r6
 800d0b8:	4628      	mov	r0, r5
 800d0ba:	47b8      	blx	r7
 800d0bc:	3001      	adds	r0, #1
 800d0be:	f43f af21 	beq.w	800cf04 <_printf_float+0x9c>
 800d0c2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	d102      	bne.n	800d0d0 <_printf_float+0x268>
 800d0ca:	6823      	ldr	r3, [r4, #0]
 800d0cc:	07d9      	lsls	r1, r3, #31
 800d0ce:	d5d8      	bpl.n	800d082 <_printf_float+0x21a>
 800d0d0:	4653      	mov	r3, sl
 800d0d2:	465a      	mov	r2, fp
 800d0d4:	4631      	mov	r1, r6
 800d0d6:	4628      	mov	r0, r5
 800d0d8:	47b8      	blx	r7
 800d0da:	3001      	adds	r0, #1
 800d0dc:	f43f af12 	beq.w	800cf04 <_printf_float+0x9c>
 800d0e0:	f04f 0900 	mov.w	r9, #0
 800d0e4:	f104 0a1a 	add.w	sl, r4, #26
 800d0e8:	9b07      	ldr	r3, [sp, #28]
 800d0ea:	425b      	negs	r3, r3
 800d0ec:	454b      	cmp	r3, r9
 800d0ee:	dc01      	bgt.n	800d0f4 <_printf_float+0x28c>
 800d0f0:	9b08      	ldr	r3, [sp, #32]
 800d0f2:	e795      	b.n	800d020 <_printf_float+0x1b8>
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	4652      	mov	r2, sl
 800d0f8:	4631      	mov	r1, r6
 800d0fa:	4628      	mov	r0, r5
 800d0fc:	47b8      	blx	r7
 800d0fe:	3001      	adds	r0, #1
 800d100:	f43f af00 	beq.w	800cf04 <_printf_float+0x9c>
 800d104:	f109 0901 	add.w	r9, r9, #1
 800d108:	e7ee      	b.n	800d0e8 <_printf_float+0x280>
 800d10a:	bf00      	nop
 800d10c:	f3af 8000 	nop.w
 800d110:	ffffffff 	.word	0xffffffff
 800d114:	7fefffff 	.word	0x7fefffff
 800d118:	0800f8cc 	.word	0x0800f8cc
 800d11c:	0800f8d0 	.word	0x0800f8d0
 800d120:	0800f8d8 	.word	0x0800f8d8
 800d124:	0800f8d4 	.word	0x0800f8d4
 800d128:	0800f8dc 	.word	0x0800f8dc
 800d12c:	9a08      	ldr	r2, [sp, #32]
 800d12e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d130:	429a      	cmp	r2, r3
 800d132:	bfa8      	it	ge
 800d134:	461a      	movge	r2, r3
 800d136:	2a00      	cmp	r2, #0
 800d138:	4691      	mov	r9, r2
 800d13a:	dc38      	bgt.n	800d1ae <_printf_float+0x346>
 800d13c:	2300      	movs	r3, #0
 800d13e:	9305      	str	r3, [sp, #20]
 800d140:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d144:	f104 021a 	add.w	r2, r4, #26
 800d148:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d14a:	9905      	ldr	r1, [sp, #20]
 800d14c:	9304      	str	r3, [sp, #16]
 800d14e:	eba3 0309 	sub.w	r3, r3, r9
 800d152:	428b      	cmp	r3, r1
 800d154:	dc33      	bgt.n	800d1be <_printf_float+0x356>
 800d156:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	db3c      	blt.n	800d1d8 <_printf_float+0x370>
 800d15e:	6823      	ldr	r3, [r4, #0]
 800d160:	07da      	lsls	r2, r3, #31
 800d162:	d439      	bmi.n	800d1d8 <_printf_float+0x370>
 800d164:	9a08      	ldr	r2, [sp, #32]
 800d166:	9b04      	ldr	r3, [sp, #16]
 800d168:	9907      	ldr	r1, [sp, #28]
 800d16a:	1ad3      	subs	r3, r2, r3
 800d16c:	eba2 0901 	sub.w	r9, r2, r1
 800d170:	4599      	cmp	r9, r3
 800d172:	bfa8      	it	ge
 800d174:	4699      	movge	r9, r3
 800d176:	f1b9 0f00 	cmp.w	r9, #0
 800d17a:	dc35      	bgt.n	800d1e8 <_printf_float+0x380>
 800d17c:	f04f 0800 	mov.w	r8, #0
 800d180:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d184:	f104 0a1a 	add.w	sl, r4, #26
 800d188:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d18c:	1a9b      	subs	r3, r3, r2
 800d18e:	eba3 0309 	sub.w	r3, r3, r9
 800d192:	4543      	cmp	r3, r8
 800d194:	f77f af75 	ble.w	800d082 <_printf_float+0x21a>
 800d198:	2301      	movs	r3, #1
 800d19a:	4652      	mov	r2, sl
 800d19c:	4631      	mov	r1, r6
 800d19e:	4628      	mov	r0, r5
 800d1a0:	47b8      	blx	r7
 800d1a2:	3001      	adds	r0, #1
 800d1a4:	f43f aeae 	beq.w	800cf04 <_printf_float+0x9c>
 800d1a8:	f108 0801 	add.w	r8, r8, #1
 800d1ac:	e7ec      	b.n	800d188 <_printf_float+0x320>
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	4631      	mov	r1, r6
 800d1b2:	4642      	mov	r2, r8
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	47b8      	blx	r7
 800d1b8:	3001      	adds	r0, #1
 800d1ba:	d1bf      	bne.n	800d13c <_printf_float+0x2d4>
 800d1bc:	e6a2      	b.n	800cf04 <_printf_float+0x9c>
 800d1be:	2301      	movs	r3, #1
 800d1c0:	4631      	mov	r1, r6
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	9204      	str	r2, [sp, #16]
 800d1c6:	47b8      	blx	r7
 800d1c8:	3001      	adds	r0, #1
 800d1ca:	f43f ae9b 	beq.w	800cf04 <_printf_float+0x9c>
 800d1ce:	9b05      	ldr	r3, [sp, #20]
 800d1d0:	9a04      	ldr	r2, [sp, #16]
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	9305      	str	r3, [sp, #20]
 800d1d6:	e7b7      	b.n	800d148 <_printf_float+0x2e0>
 800d1d8:	4653      	mov	r3, sl
 800d1da:	465a      	mov	r2, fp
 800d1dc:	4631      	mov	r1, r6
 800d1de:	4628      	mov	r0, r5
 800d1e0:	47b8      	blx	r7
 800d1e2:	3001      	adds	r0, #1
 800d1e4:	d1be      	bne.n	800d164 <_printf_float+0x2fc>
 800d1e6:	e68d      	b.n	800cf04 <_printf_float+0x9c>
 800d1e8:	9a04      	ldr	r2, [sp, #16]
 800d1ea:	464b      	mov	r3, r9
 800d1ec:	4442      	add	r2, r8
 800d1ee:	4631      	mov	r1, r6
 800d1f0:	4628      	mov	r0, r5
 800d1f2:	47b8      	blx	r7
 800d1f4:	3001      	adds	r0, #1
 800d1f6:	d1c1      	bne.n	800d17c <_printf_float+0x314>
 800d1f8:	e684      	b.n	800cf04 <_printf_float+0x9c>
 800d1fa:	9a08      	ldr	r2, [sp, #32]
 800d1fc:	2a01      	cmp	r2, #1
 800d1fe:	dc01      	bgt.n	800d204 <_printf_float+0x39c>
 800d200:	07db      	lsls	r3, r3, #31
 800d202:	d537      	bpl.n	800d274 <_printf_float+0x40c>
 800d204:	2301      	movs	r3, #1
 800d206:	4642      	mov	r2, r8
 800d208:	4631      	mov	r1, r6
 800d20a:	4628      	mov	r0, r5
 800d20c:	47b8      	blx	r7
 800d20e:	3001      	adds	r0, #1
 800d210:	f43f ae78 	beq.w	800cf04 <_printf_float+0x9c>
 800d214:	4653      	mov	r3, sl
 800d216:	465a      	mov	r2, fp
 800d218:	4631      	mov	r1, r6
 800d21a:	4628      	mov	r0, r5
 800d21c:	47b8      	blx	r7
 800d21e:	3001      	adds	r0, #1
 800d220:	f43f ae70 	beq.w	800cf04 <_printf_float+0x9c>
 800d224:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d228:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d230:	d01b      	beq.n	800d26a <_printf_float+0x402>
 800d232:	9b08      	ldr	r3, [sp, #32]
 800d234:	f108 0201 	add.w	r2, r8, #1
 800d238:	3b01      	subs	r3, #1
 800d23a:	4631      	mov	r1, r6
 800d23c:	4628      	mov	r0, r5
 800d23e:	47b8      	blx	r7
 800d240:	3001      	adds	r0, #1
 800d242:	d10e      	bne.n	800d262 <_printf_float+0x3fa>
 800d244:	e65e      	b.n	800cf04 <_printf_float+0x9c>
 800d246:	2301      	movs	r3, #1
 800d248:	464a      	mov	r2, r9
 800d24a:	4631      	mov	r1, r6
 800d24c:	4628      	mov	r0, r5
 800d24e:	47b8      	blx	r7
 800d250:	3001      	adds	r0, #1
 800d252:	f43f ae57 	beq.w	800cf04 <_printf_float+0x9c>
 800d256:	f108 0801 	add.w	r8, r8, #1
 800d25a:	9b08      	ldr	r3, [sp, #32]
 800d25c:	3b01      	subs	r3, #1
 800d25e:	4543      	cmp	r3, r8
 800d260:	dcf1      	bgt.n	800d246 <_printf_float+0x3de>
 800d262:	9b04      	ldr	r3, [sp, #16]
 800d264:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d268:	e6db      	b.n	800d022 <_printf_float+0x1ba>
 800d26a:	f04f 0800 	mov.w	r8, #0
 800d26e:	f104 091a 	add.w	r9, r4, #26
 800d272:	e7f2      	b.n	800d25a <_printf_float+0x3f2>
 800d274:	2301      	movs	r3, #1
 800d276:	4642      	mov	r2, r8
 800d278:	e7df      	b.n	800d23a <_printf_float+0x3d2>
 800d27a:	2301      	movs	r3, #1
 800d27c:	464a      	mov	r2, r9
 800d27e:	4631      	mov	r1, r6
 800d280:	4628      	mov	r0, r5
 800d282:	47b8      	blx	r7
 800d284:	3001      	adds	r0, #1
 800d286:	f43f ae3d 	beq.w	800cf04 <_printf_float+0x9c>
 800d28a:	f108 0801 	add.w	r8, r8, #1
 800d28e:	68e3      	ldr	r3, [r4, #12]
 800d290:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d292:	1a5b      	subs	r3, r3, r1
 800d294:	4543      	cmp	r3, r8
 800d296:	dcf0      	bgt.n	800d27a <_printf_float+0x412>
 800d298:	e6f7      	b.n	800d08a <_printf_float+0x222>
 800d29a:	f04f 0800 	mov.w	r8, #0
 800d29e:	f104 0919 	add.w	r9, r4, #25
 800d2a2:	e7f4      	b.n	800d28e <_printf_float+0x426>

0800d2a4 <_printf_common>:
 800d2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2a8:	4616      	mov	r6, r2
 800d2aa:	4699      	mov	r9, r3
 800d2ac:	688a      	ldr	r2, [r1, #8]
 800d2ae:	690b      	ldr	r3, [r1, #16]
 800d2b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	bfb8      	it	lt
 800d2b8:	4613      	movlt	r3, r2
 800d2ba:	6033      	str	r3, [r6, #0]
 800d2bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d2c0:	4607      	mov	r7, r0
 800d2c2:	460c      	mov	r4, r1
 800d2c4:	b10a      	cbz	r2, 800d2ca <_printf_common+0x26>
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	6033      	str	r3, [r6, #0]
 800d2ca:	6823      	ldr	r3, [r4, #0]
 800d2cc:	0699      	lsls	r1, r3, #26
 800d2ce:	bf42      	ittt	mi
 800d2d0:	6833      	ldrmi	r3, [r6, #0]
 800d2d2:	3302      	addmi	r3, #2
 800d2d4:	6033      	strmi	r3, [r6, #0]
 800d2d6:	6825      	ldr	r5, [r4, #0]
 800d2d8:	f015 0506 	ands.w	r5, r5, #6
 800d2dc:	d106      	bne.n	800d2ec <_printf_common+0x48>
 800d2de:	f104 0a19 	add.w	sl, r4, #25
 800d2e2:	68e3      	ldr	r3, [r4, #12]
 800d2e4:	6832      	ldr	r2, [r6, #0]
 800d2e6:	1a9b      	subs	r3, r3, r2
 800d2e8:	42ab      	cmp	r3, r5
 800d2ea:	dc26      	bgt.n	800d33a <_printf_common+0x96>
 800d2ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d2f0:	1e13      	subs	r3, r2, #0
 800d2f2:	6822      	ldr	r2, [r4, #0]
 800d2f4:	bf18      	it	ne
 800d2f6:	2301      	movne	r3, #1
 800d2f8:	0692      	lsls	r2, r2, #26
 800d2fa:	d42b      	bmi.n	800d354 <_printf_common+0xb0>
 800d2fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d300:	4649      	mov	r1, r9
 800d302:	4638      	mov	r0, r7
 800d304:	47c0      	blx	r8
 800d306:	3001      	adds	r0, #1
 800d308:	d01e      	beq.n	800d348 <_printf_common+0xa4>
 800d30a:	6823      	ldr	r3, [r4, #0]
 800d30c:	68e5      	ldr	r5, [r4, #12]
 800d30e:	6832      	ldr	r2, [r6, #0]
 800d310:	f003 0306 	and.w	r3, r3, #6
 800d314:	2b04      	cmp	r3, #4
 800d316:	bf08      	it	eq
 800d318:	1aad      	subeq	r5, r5, r2
 800d31a:	68a3      	ldr	r3, [r4, #8]
 800d31c:	6922      	ldr	r2, [r4, #16]
 800d31e:	bf0c      	ite	eq
 800d320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d324:	2500      	movne	r5, #0
 800d326:	4293      	cmp	r3, r2
 800d328:	bfc4      	itt	gt
 800d32a:	1a9b      	subgt	r3, r3, r2
 800d32c:	18ed      	addgt	r5, r5, r3
 800d32e:	2600      	movs	r6, #0
 800d330:	341a      	adds	r4, #26
 800d332:	42b5      	cmp	r5, r6
 800d334:	d11a      	bne.n	800d36c <_printf_common+0xc8>
 800d336:	2000      	movs	r0, #0
 800d338:	e008      	b.n	800d34c <_printf_common+0xa8>
 800d33a:	2301      	movs	r3, #1
 800d33c:	4652      	mov	r2, sl
 800d33e:	4649      	mov	r1, r9
 800d340:	4638      	mov	r0, r7
 800d342:	47c0      	blx	r8
 800d344:	3001      	adds	r0, #1
 800d346:	d103      	bne.n	800d350 <_printf_common+0xac>
 800d348:	f04f 30ff 	mov.w	r0, #4294967295
 800d34c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d350:	3501      	adds	r5, #1
 800d352:	e7c6      	b.n	800d2e2 <_printf_common+0x3e>
 800d354:	18e1      	adds	r1, r4, r3
 800d356:	1c5a      	adds	r2, r3, #1
 800d358:	2030      	movs	r0, #48	; 0x30
 800d35a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d35e:	4422      	add	r2, r4
 800d360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d368:	3302      	adds	r3, #2
 800d36a:	e7c7      	b.n	800d2fc <_printf_common+0x58>
 800d36c:	2301      	movs	r3, #1
 800d36e:	4622      	mov	r2, r4
 800d370:	4649      	mov	r1, r9
 800d372:	4638      	mov	r0, r7
 800d374:	47c0      	blx	r8
 800d376:	3001      	adds	r0, #1
 800d378:	d0e6      	beq.n	800d348 <_printf_common+0xa4>
 800d37a:	3601      	adds	r6, #1
 800d37c:	e7d9      	b.n	800d332 <_printf_common+0x8e>
	...

0800d380 <_printf_i>:
 800d380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d384:	460c      	mov	r4, r1
 800d386:	4691      	mov	r9, r2
 800d388:	7e27      	ldrb	r7, [r4, #24]
 800d38a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d38c:	2f78      	cmp	r7, #120	; 0x78
 800d38e:	4680      	mov	r8, r0
 800d390:	469a      	mov	sl, r3
 800d392:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d396:	d807      	bhi.n	800d3a8 <_printf_i+0x28>
 800d398:	2f62      	cmp	r7, #98	; 0x62
 800d39a:	d80a      	bhi.n	800d3b2 <_printf_i+0x32>
 800d39c:	2f00      	cmp	r7, #0
 800d39e:	f000 80d8 	beq.w	800d552 <_printf_i+0x1d2>
 800d3a2:	2f58      	cmp	r7, #88	; 0x58
 800d3a4:	f000 80a3 	beq.w	800d4ee <_printf_i+0x16e>
 800d3a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d3ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d3b0:	e03a      	b.n	800d428 <_printf_i+0xa8>
 800d3b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d3b6:	2b15      	cmp	r3, #21
 800d3b8:	d8f6      	bhi.n	800d3a8 <_printf_i+0x28>
 800d3ba:	a001      	add	r0, pc, #4	; (adr r0, 800d3c0 <_printf_i+0x40>)
 800d3bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d3c0:	0800d419 	.word	0x0800d419
 800d3c4:	0800d42d 	.word	0x0800d42d
 800d3c8:	0800d3a9 	.word	0x0800d3a9
 800d3cc:	0800d3a9 	.word	0x0800d3a9
 800d3d0:	0800d3a9 	.word	0x0800d3a9
 800d3d4:	0800d3a9 	.word	0x0800d3a9
 800d3d8:	0800d42d 	.word	0x0800d42d
 800d3dc:	0800d3a9 	.word	0x0800d3a9
 800d3e0:	0800d3a9 	.word	0x0800d3a9
 800d3e4:	0800d3a9 	.word	0x0800d3a9
 800d3e8:	0800d3a9 	.word	0x0800d3a9
 800d3ec:	0800d539 	.word	0x0800d539
 800d3f0:	0800d45d 	.word	0x0800d45d
 800d3f4:	0800d51b 	.word	0x0800d51b
 800d3f8:	0800d3a9 	.word	0x0800d3a9
 800d3fc:	0800d3a9 	.word	0x0800d3a9
 800d400:	0800d55b 	.word	0x0800d55b
 800d404:	0800d3a9 	.word	0x0800d3a9
 800d408:	0800d45d 	.word	0x0800d45d
 800d40c:	0800d3a9 	.word	0x0800d3a9
 800d410:	0800d3a9 	.word	0x0800d3a9
 800d414:	0800d523 	.word	0x0800d523
 800d418:	680b      	ldr	r3, [r1, #0]
 800d41a:	1d1a      	adds	r2, r3, #4
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	600a      	str	r2, [r1, #0]
 800d420:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d428:	2301      	movs	r3, #1
 800d42a:	e0a3      	b.n	800d574 <_printf_i+0x1f4>
 800d42c:	6825      	ldr	r5, [r4, #0]
 800d42e:	6808      	ldr	r0, [r1, #0]
 800d430:	062e      	lsls	r6, r5, #24
 800d432:	f100 0304 	add.w	r3, r0, #4
 800d436:	d50a      	bpl.n	800d44e <_printf_i+0xce>
 800d438:	6805      	ldr	r5, [r0, #0]
 800d43a:	600b      	str	r3, [r1, #0]
 800d43c:	2d00      	cmp	r5, #0
 800d43e:	da03      	bge.n	800d448 <_printf_i+0xc8>
 800d440:	232d      	movs	r3, #45	; 0x2d
 800d442:	426d      	negs	r5, r5
 800d444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d448:	485e      	ldr	r0, [pc, #376]	; (800d5c4 <_printf_i+0x244>)
 800d44a:	230a      	movs	r3, #10
 800d44c:	e019      	b.n	800d482 <_printf_i+0x102>
 800d44e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d452:	6805      	ldr	r5, [r0, #0]
 800d454:	600b      	str	r3, [r1, #0]
 800d456:	bf18      	it	ne
 800d458:	b22d      	sxthne	r5, r5
 800d45a:	e7ef      	b.n	800d43c <_printf_i+0xbc>
 800d45c:	680b      	ldr	r3, [r1, #0]
 800d45e:	6825      	ldr	r5, [r4, #0]
 800d460:	1d18      	adds	r0, r3, #4
 800d462:	6008      	str	r0, [r1, #0]
 800d464:	0628      	lsls	r0, r5, #24
 800d466:	d501      	bpl.n	800d46c <_printf_i+0xec>
 800d468:	681d      	ldr	r5, [r3, #0]
 800d46a:	e002      	b.n	800d472 <_printf_i+0xf2>
 800d46c:	0669      	lsls	r1, r5, #25
 800d46e:	d5fb      	bpl.n	800d468 <_printf_i+0xe8>
 800d470:	881d      	ldrh	r5, [r3, #0]
 800d472:	4854      	ldr	r0, [pc, #336]	; (800d5c4 <_printf_i+0x244>)
 800d474:	2f6f      	cmp	r7, #111	; 0x6f
 800d476:	bf0c      	ite	eq
 800d478:	2308      	moveq	r3, #8
 800d47a:	230a      	movne	r3, #10
 800d47c:	2100      	movs	r1, #0
 800d47e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d482:	6866      	ldr	r6, [r4, #4]
 800d484:	60a6      	str	r6, [r4, #8]
 800d486:	2e00      	cmp	r6, #0
 800d488:	bfa2      	ittt	ge
 800d48a:	6821      	ldrge	r1, [r4, #0]
 800d48c:	f021 0104 	bicge.w	r1, r1, #4
 800d490:	6021      	strge	r1, [r4, #0]
 800d492:	b90d      	cbnz	r5, 800d498 <_printf_i+0x118>
 800d494:	2e00      	cmp	r6, #0
 800d496:	d04d      	beq.n	800d534 <_printf_i+0x1b4>
 800d498:	4616      	mov	r6, r2
 800d49a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d49e:	fb03 5711 	mls	r7, r3, r1, r5
 800d4a2:	5dc7      	ldrb	r7, [r0, r7]
 800d4a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d4a8:	462f      	mov	r7, r5
 800d4aa:	42bb      	cmp	r3, r7
 800d4ac:	460d      	mov	r5, r1
 800d4ae:	d9f4      	bls.n	800d49a <_printf_i+0x11a>
 800d4b0:	2b08      	cmp	r3, #8
 800d4b2:	d10b      	bne.n	800d4cc <_printf_i+0x14c>
 800d4b4:	6823      	ldr	r3, [r4, #0]
 800d4b6:	07df      	lsls	r7, r3, #31
 800d4b8:	d508      	bpl.n	800d4cc <_printf_i+0x14c>
 800d4ba:	6923      	ldr	r3, [r4, #16]
 800d4bc:	6861      	ldr	r1, [r4, #4]
 800d4be:	4299      	cmp	r1, r3
 800d4c0:	bfde      	ittt	le
 800d4c2:	2330      	movle	r3, #48	; 0x30
 800d4c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d4c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d4cc:	1b92      	subs	r2, r2, r6
 800d4ce:	6122      	str	r2, [r4, #16]
 800d4d0:	f8cd a000 	str.w	sl, [sp]
 800d4d4:	464b      	mov	r3, r9
 800d4d6:	aa03      	add	r2, sp, #12
 800d4d8:	4621      	mov	r1, r4
 800d4da:	4640      	mov	r0, r8
 800d4dc:	f7ff fee2 	bl	800d2a4 <_printf_common>
 800d4e0:	3001      	adds	r0, #1
 800d4e2:	d14c      	bne.n	800d57e <_printf_i+0x1fe>
 800d4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e8:	b004      	add	sp, #16
 800d4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4ee:	4835      	ldr	r0, [pc, #212]	; (800d5c4 <_printf_i+0x244>)
 800d4f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d4f4:	6823      	ldr	r3, [r4, #0]
 800d4f6:	680e      	ldr	r6, [r1, #0]
 800d4f8:	061f      	lsls	r7, r3, #24
 800d4fa:	f856 5b04 	ldr.w	r5, [r6], #4
 800d4fe:	600e      	str	r6, [r1, #0]
 800d500:	d514      	bpl.n	800d52c <_printf_i+0x1ac>
 800d502:	07d9      	lsls	r1, r3, #31
 800d504:	bf44      	itt	mi
 800d506:	f043 0320 	orrmi.w	r3, r3, #32
 800d50a:	6023      	strmi	r3, [r4, #0]
 800d50c:	b91d      	cbnz	r5, 800d516 <_printf_i+0x196>
 800d50e:	6823      	ldr	r3, [r4, #0]
 800d510:	f023 0320 	bic.w	r3, r3, #32
 800d514:	6023      	str	r3, [r4, #0]
 800d516:	2310      	movs	r3, #16
 800d518:	e7b0      	b.n	800d47c <_printf_i+0xfc>
 800d51a:	6823      	ldr	r3, [r4, #0]
 800d51c:	f043 0320 	orr.w	r3, r3, #32
 800d520:	6023      	str	r3, [r4, #0]
 800d522:	2378      	movs	r3, #120	; 0x78
 800d524:	4828      	ldr	r0, [pc, #160]	; (800d5c8 <_printf_i+0x248>)
 800d526:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d52a:	e7e3      	b.n	800d4f4 <_printf_i+0x174>
 800d52c:	065e      	lsls	r6, r3, #25
 800d52e:	bf48      	it	mi
 800d530:	b2ad      	uxthmi	r5, r5
 800d532:	e7e6      	b.n	800d502 <_printf_i+0x182>
 800d534:	4616      	mov	r6, r2
 800d536:	e7bb      	b.n	800d4b0 <_printf_i+0x130>
 800d538:	680b      	ldr	r3, [r1, #0]
 800d53a:	6826      	ldr	r6, [r4, #0]
 800d53c:	6960      	ldr	r0, [r4, #20]
 800d53e:	1d1d      	adds	r5, r3, #4
 800d540:	600d      	str	r5, [r1, #0]
 800d542:	0635      	lsls	r5, r6, #24
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	d501      	bpl.n	800d54c <_printf_i+0x1cc>
 800d548:	6018      	str	r0, [r3, #0]
 800d54a:	e002      	b.n	800d552 <_printf_i+0x1d2>
 800d54c:	0671      	lsls	r1, r6, #25
 800d54e:	d5fb      	bpl.n	800d548 <_printf_i+0x1c8>
 800d550:	8018      	strh	r0, [r3, #0]
 800d552:	2300      	movs	r3, #0
 800d554:	6123      	str	r3, [r4, #16]
 800d556:	4616      	mov	r6, r2
 800d558:	e7ba      	b.n	800d4d0 <_printf_i+0x150>
 800d55a:	680b      	ldr	r3, [r1, #0]
 800d55c:	1d1a      	adds	r2, r3, #4
 800d55e:	600a      	str	r2, [r1, #0]
 800d560:	681e      	ldr	r6, [r3, #0]
 800d562:	6862      	ldr	r2, [r4, #4]
 800d564:	2100      	movs	r1, #0
 800d566:	4630      	mov	r0, r6
 800d568:	f7f2 fec2 	bl	80002f0 <memchr>
 800d56c:	b108      	cbz	r0, 800d572 <_printf_i+0x1f2>
 800d56e:	1b80      	subs	r0, r0, r6
 800d570:	6060      	str	r0, [r4, #4]
 800d572:	6863      	ldr	r3, [r4, #4]
 800d574:	6123      	str	r3, [r4, #16]
 800d576:	2300      	movs	r3, #0
 800d578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d57c:	e7a8      	b.n	800d4d0 <_printf_i+0x150>
 800d57e:	6923      	ldr	r3, [r4, #16]
 800d580:	4632      	mov	r2, r6
 800d582:	4649      	mov	r1, r9
 800d584:	4640      	mov	r0, r8
 800d586:	47d0      	blx	sl
 800d588:	3001      	adds	r0, #1
 800d58a:	d0ab      	beq.n	800d4e4 <_printf_i+0x164>
 800d58c:	6823      	ldr	r3, [r4, #0]
 800d58e:	079b      	lsls	r3, r3, #30
 800d590:	d413      	bmi.n	800d5ba <_printf_i+0x23a>
 800d592:	68e0      	ldr	r0, [r4, #12]
 800d594:	9b03      	ldr	r3, [sp, #12]
 800d596:	4298      	cmp	r0, r3
 800d598:	bfb8      	it	lt
 800d59a:	4618      	movlt	r0, r3
 800d59c:	e7a4      	b.n	800d4e8 <_printf_i+0x168>
 800d59e:	2301      	movs	r3, #1
 800d5a0:	4632      	mov	r2, r6
 800d5a2:	4649      	mov	r1, r9
 800d5a4:	4640      	mov	r0, r8
 800d5a6:	47d0      	blx	sl
 800d5a8:	3001      	adds	r0, #1
 800d5aa:	d09b      	beq.n	800d4e4 <_printf_i+0x164>
 800d5ac:	3501      	adds	r5, #1
 800d5ae:	68e3      	ldr	r3, [r4, #12]
 800d5b0:	9903      	ldr	r1, [sp, #12]
 800d5b2:	1a5b      	subs	r3, r3, r1
 800d5b4:	42ab      	cmp	r3, r5
 800d5b6:	dcf2      	bgt.n	800d59e <_printf_i+0x21e>
 800d5b8:	e7eb      	b.n	800d592 <_printf_i+0x212>
 800d5ba:	2500      	movs	r5, #0
 800d5bc:	f104 0619 	add.w	r6, r4, #25
 800d5c0:	e7f5      	b.n	800d5ae <_printf_i+0x22e>
 800d5c2:	bf00      	nop
 800d5c4:	0800f8de 	.word	0x0800f8de
 800d5c8:	0800f8ef 	.word	0x0800f8ef

0800d5cc <iprintf>:
 800d5cc:	b40f      	push	{r0, r1, r2, r3}
 800d5ce:	4b0a      	ldr	r3, [pc, #40]	; (800d5f8 <iprintf+0x2c>)
 800d5d0:	b513      	push	{r0, r1, r4, lr}
 800d5d2:	681c      	ldr	r4, [r3, #0]
 800d5d4:	b124      	cbz	r4, 800d5e0 <iprintf+0x14>
 800d5d6:	69a3      	ldr	r3, [r4, #24]
 800d5d8:	b913      	cbnz	r3, 800d5e0 <iprintf+0x14>
 800d5da:	4620      	mov	r0, r4
 800d5dc:	f000 fe76 	bl	800e2cc <__sinit>
 800d5e0:	ab05      	add	r3, sp, #20
 800d5e2:	9a04      	ldr	r2, [sp, #16]
 800d5e4:	68a1      	ldr	r1, [r4, #8]
 800d5e6:	9301      	str	r3, [sp, #4]
 800d5e8:	4620      	mov	r0, r4
 800d5ea:	f001 fb8d 	bl	800ed08 <_vfiprintf_r>
 800d5ee:	b002      	add	sp, #8
 800d5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5f4:	b004      	add	sp, #16
 800d5f6:	4770      	bx	lr
 800d5f8:	20000018 	.word	0x20000018

0800d5fc <quorem>:
 800d5fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d600:	6903      	ldr	r3, [r0, #16]
 800d602:	690c      	ldr	r4, [r1, #16]
 800d604:	42a3      	cmp	r3, r4
 800d606:	4607      	mov	r7, r0
 800d608:	f2c0 8081 	blt.w	800d70e <quorem+0x112>
 800d60c:	3c01      	subs	r4, #1
 800d60e:	f101 0814 	add.w	r8, r1, #20
 800d612:	f100 0514 	add.w	r5, r0, #20
 800d616:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d61a:	9301      	str	r3, [sp, #4]
 800d61c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d620:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d624:	3301      	adds	r3, #1
 800d626:	429a      	cmp	r2, r3
 800d628:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d62c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d630:	fbb2 f6f3 	udiv	r6, r2, r3
 800d634:	d331      	bcc.n	800d69a <quorem+0x9e>
 800d636:	f04f 0e00 	mov.w	lr, #0
 800d63a:	4640      	mov	r0, r8
 800d63c:	46ac      	mov	ip, r5
 800d63e:	46f2      	mov	sl, lr
 800d640:	f850 2b04 	ldr.w	r2, [r0], #4
 800d644:	b293      	uxth	r3, r2
 800d646:	fb06 e303 	mla	r3, r6, r3, lr
 800d64a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d64e:	b29b      	uxth	r3, r3
 800d650:	ebaa 0303 	sub.w	r3, sl, r3
 800d654:	0c12      	lsrs	r2, r2, #16
 800d656:	f8dc a000 	ldr.w	sl, [ip]
 800d65a:	fb06 e202 	mla	r2, r6, r2, lr
 800d65e:	fa13 f38a 	uxtah	r3, r3, sl
 800d662:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d666:	fa1f fa82 	uxth.w	sl, r2
 800d66a:	f8dc 2000 	ldr.w	r2, [ip]
 800d66e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d672:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d676:	b29b      	uxth	r3, r3
 800d678:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d67c:	4581      	cmp	r9, r0
 800d67e:	f84c 3b04 	str.w	r3, [ip], #4
 800d682:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d686:	d2db      	bcs.n	800d640 <quorem+0x44>
 800d688:	f855 300b 	ldr.w	r3, [r5, fp]
 800d68c:	b92b      	cbnz	r3, 800d69a <quorem+0x9e>
 800d68e:	9b01      	ldr	r3, [sp, #4]
 800d690:	3b04      	subs	r3, #4
 800d692:	429d      	cmp	r5, r3
 800d694:	461a      	mov	r2, r3
 800d696:	d32e      	bcc.n	800d6f6 <quorem+0xfa>
 800d698:	613c      	str	r4, [r7, #16]
 800d69a:	4638      	mov	r0, r7
 800d69c:	f001 f950 	bl	800e940 <__mcmp>
 800d6a0:	2800      	cmp	r0, #0
 800d6a2:	db24      	blt.n	800d6ee <quorem+0xf2>
 800d6a4:	3601      	adds	r6, #1
 800d6a6:	4628      	mov	r0, r5
 800d6a8:	f04f 0c00 	mov.w	ip, #0
 800d6ac:	f858 2b04 	ldr.w	r2, [r8], #4
 800d6b0:	f8d0 e000 	ldr.w	lr, [r0]
 800d6b4:	b293      	uxth	r3, r2
 800d6b6:	ebac 0303 	sub.w	r3, ip, r3
 800d6ba:	0c12      	lsrs	r2, r2, #16
 800d6bc:	fa13 f38e 	uxtah	r3, r3, lr
 800d6c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d6c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6ce:	45c1      	cmp	r9, r8
 800d6d0:	f840 3b04 	str.w	r3, [r0], #4
 800d6d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d6d8:	d2e8      	bcs.n	800d6ac <quorem+0xb0>
 800d6da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d6de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d6e2:	b922      	cbnz	r2, 800d6ee <quorem+0xf2>
 800d6e4:	3b04      	subs	r3, #4
 800d6e6:	429d      	cmp	r5, r3
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	d30a      	bcc.n	800d702 <quorem+0x106>
 800d6ec:	613c      	str	r4, [r7, #16]
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	b003      	add	sp, #12
 800d6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6f6:	6812      	ldr	r2, [r2, #0]
 800d6f8:	3b04      	subs	r3, #4
 800d6fa:	2a00      	cmp	r2, #0
 800d6fc:	d1cc      	bne.n	800d698 <quorem+0x9c>
 800d6fe:	3c01      	subs	r4, #1
 800d700:	e7c7      	b.n	800d692 <quorem+0x96>
 800d702:	6812      	ldr	r2, [r2, #0]
 800d704:	3b04      	subs	r3, #4
 800d706:	2a00      	cmp	r2, #0
 800d708:	d1f0      	bne.n	800d6ec <quorem+0xf0>
 800d70a:	3c01      	subs	r4, #1
 800d70c:	e7eb      	b.n	800d6e6 <quorem+0xea>
 800d70e:	2000      	movs	r0, #0
 800d710:	e7ee      	b.n	800d6f0 <quorem+0xf4>
 800d712:	0000      	movs	r0, r0
 800d714:	0000      	movs	r0, r0
	...

0800d718 <_dtoa_r>:
 800d718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d71c:	ec59 8b10 	vmov	r8, r9, d0
 800d720:	b095      	sub	sp, #84	; 0x54
 800d722:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d724:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800d726:	9107      	str	r1, [sp, #28]
 800d728:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d72c:	4606      	mov	r6, r0
 800d72e:	9209      	str	r2, [sp, #36]	; 0x24
 800d730:	9310      	str	r3, [sp, #64]	; 0x40
 800d732:	b975      	cbnz	r5, 800d752 <_dtoa_r+0x3a>
 800d734:	2010      	movs	r0, #16
 800d736:	f000 fe6f 	bl	800e418 <malloc>
 800d73a:	4602      	mov	r2, r0
 800d73c:	6270      	str	r0, [r6, #36]	; 0x24
 800d73e:	b920      	cbnz	r0, 800d74a <_dtoa_r+0x32>
 800d740:	4bab      	ldr	r3, [pc, #684]	; (800d9f0 <_dtoa_r+0x2d8>)
 800d742:	21ea      	movs	r1, #234	; 0xea
 800d744:	48ab      	ldr	r0, [pc, #684]	; (800d9f4 <_dtoa_r+0x2dc>)
 800d746:	f001 fd35 	bl	800f1b4 <__assert_func>
 800d74a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d74e:	6005      	str	r5, [r0, #0]
 800d750:	60c5      	str	r5, [r0, #12]
 800d752:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d754:	6819      	ldr	r1, [r3, #0]
 800d756:	b151      	cbz	r1, 800d76e <_dtoa_r+0x56>
 800d758:	685a      	ldr	r2, [r3, #4]
 800d75a:	604a      	str	r2, [r1, #4]
 800d75c:	2301      	movs	r3, #1
 800d75e:	4093      	lsls	r3, r2
 800d760:	608b      	str	r3, [r1, #8]
 800d762:	4630      	mov	r0, r6
 800d764:	f000 feae 	bl	800e4c4 <_Bfree>
 800d768:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d76a:	2200      	movs	r2, #0
 800d76c:	601a      	str	r2, [r3, #0]
 800d76e:	f1b9 0300 	subs.w	r3, r9, #0
 800d772:	bfbb      	ittet	lt
 800d774:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d778:	9303      	strlt	r3, [sp, #12]
 800d77a:	2300      	movge	r3, #0
 800d77c:	2201      	movlt	r2, #1
 800d77e:	bfac      	ite	ge
 800d780:	6023      	strge	r3, [r4, #0]
 800d782:	6022      	strlt	r2, [r4, #0]
 800d784:	4b9c      	ldr	r3, [pc, #624]	; (800d9f8 <_dtoa_r+0x2e0>)
 800d786:	9c03      	ldr	r4, [sp, #12]
 800d788:	43a3      	bics	r3, r4
 800d78a:	d11a      	bne.n	800d7c2 <_dtoa_r+0xaa>
 800d78c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d78e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d792:	6013      	str	r3, [r2, #0]
 800d794:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d798:	ea53 0308 	orrs.w	r3, r3, r8
 800d79c:	f000 8512 	beq.w	800e1c4 <_dtoa_r+0xaac>
 800d7a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d7a2:	b953      	cbnz	r3, 800d7ba <_dtoa_r+0xa2>
 800d7a4:	4b95      	ldr	r3, [pc, #596]	; (800d9fc <_dtoa_r+0x2e4>)
 800d7a6:	e01f      	b.n	800d7e8 <_dtoa_r+0xd0>
 800d7a8:	4b95      	ldr	r3, [pc, #596]	; (800da00 <_dtoa_r+0x2e8>)
 800d7aa:	9300      	str	r3, [sp, #0]
 800d7ac:	3308      	adds	r3, #8
 800d7ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d7b0:	6013      	str	r3, [r2, #0]
 800d7b2:	9800      	ldr	r0, [sp, #0]
 800d7b4:	b015      	add	sp, #84	; 0x54
 800d7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ba:	4b90      	ldr	r3, [pc, #576]	; (800d9fc <_dtoa_r+0x2e4>)
 800d7bc:	9300      	str	r3, [sp, #0]
 800d7be:	3303      	adds	r3, #3
 800d7c0:	e7f5      	b.n	800d7ae <_dtoa_r+0x96>
 800d7c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d7c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ce:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d7d2:	d10b      	bne.n	800d7ec <_dtoa_r+0xd4>
 800d7d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	6013      	str	r3, [r2, #0]
 800d7da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	f000 84ee 	beq.w	800e1be <_dtoa_r+0xaa6>
 800d7e2:	4888      	ldr	r0, [pc, #544]	; (800da04 <_dtoa_r+0x2ec>)
 800d7e4:	6018      	str	r0, [r3, #0]
 800d7e6:	1e43      	subs	r3, r0, #1
 800d7e8:	9300      	str	r3, [sp, #0]
 800d7ea:	e7e2      	b.n	800d7b2 <_dtoa_r+0x9a>
 800d7ec:	a913      	add	r1, sp, #76	; 0x4c
 800d7ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d7f2:	aa12      	add	r2, sp, #72	; 0x48
 800d7f4:	4630      	mov	r0, r6
 800d7f6:	f001 f947 	bl	800ea88 <__d2b>
 800d7fa:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800d7fe:	4605      	mov	r5, r0
 800d800:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d802:	2900      	cmp	r1, #0
 800d804:	d047      	beq.n	800d896 <_dtoa_r+0x17e>
 800d806:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d808:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d80c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d810:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800d814:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d818:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d81c:	2400      	movs	r4, #0
 800d81e:	ec43 2b16 	vmov	d6, r2, r3
 800d822:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d826:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800d9d8 <_dtoa_r+0x2c0>
 800d82a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d82e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800d9e0 <_dtoa_r+0x2c8>
 800d832:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d836:	eeb0 7b46 	vmov.f64	d7, d6
 800d83a:	ee06 1a90 	vmov	s13, r1
 800d83e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800d842:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800d9e8 <_dtoa_r+0x2d0>
 800d846:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d84a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d84e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d856:	ee16 ba90 	vmov	fp, s13
 800d85a:	9411      	str	r4, [sp, #68]	; 0x44
 800d85c:	d508      	bpl.n	800d870 <_dtoa_r+0x158>
 800d85e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d862:	eeb4 6b47 	vcmp.f64	d6, d7
 800d866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d86a:	bf18      	it	ne
 800d86c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d870:	f1bb 0f16 	cmp.w	fp, #22
 800d874:	d832      	bhi.n	800d8dc <_dtoa_r+0x1c4>
 800d876:	4b64      	ldr	r3, [pc, #400]	; (800da08 <_dtoa_r+0x2f0>)
 800d878:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d87c:	ed93 7b00 	vldr	d7, [r3]
 800d880:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d884:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d88c:	d501      	bpl.n	800d892 <_dtoa_r+0x17a>
 800d88e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d892:	2300      	movs	r3, #0
 800d894:	e023      	b.n	800d8de <_dtoa_r+0x1c6>
 800d896:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d898:	4401      	add	r1, r0
 800d89a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800d89e:	2b20      	cmp	r3, #32
 800d8a0:	bfc3      	ittte	gt
 800d8a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d8a6:	fa04 f303 	lslgt.w	r3, r4, r3
 800d8aa:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800d8ae:	f1c3 0320 	rsble	r3, r3, #32
 800d8b2:	bfc6      	itte	gt
 800d8b4:	fa28 f804 	lsrgt.w	r8, r8, r4
 800d8b8:	ea43 0308 	orrgt.w	r3, r3, r8
 800d8bc:	fa08 f303 	lslle.w	r3, r8, r3
 800d8c0:	ee07 3a90 	vmov	s15, r3
 800d8c4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d8c8:	3901      	subs	r1, #1
 800d8ca:	ed8d 7b00 	vstr	d7, [sp]
 800d8ce:	9c01      	ldr	r4, [sp, #4]
 800d8d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8d4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800d8d8:	2401      	movs	r4, #1
 800d8da:	e7a0      	b.n	800d81e <_dtoa_r+0x106>
 800d8dc:	2301      	movs	r3, #1
 800d8de:	930f      	str	r3, [sp, #60]	; 0x3c
 800d8e0:	1a43      	subs	r3, r0, r1
 800d8e2:	1e5a      	subs	r2, r3, #1
 800d8e4:	bf45      	ittet	mi
 800d8e6:	f1c3 0301 	rsbmi	r3, r3, #1
 800d8ea:	9305      	strmi	r3, [sp, #20]
 800d8ec:	2300      	movpl	r3, #0
 800d8ee:	2300      	movmi	r3, #0
 800d8f0:	9206      	str	r2, [sp, #24]
 800d8f2:	bf54      	ite	pl
 800d8f4:	9305      	strpl	r3, [sp, #20]
 800d8f6:	9306      	strmi	r3, [sp, #24]
 800d8f8:	f1bb 0f00 	cmp.w	fp, #0
 800d8fc:	db18      	blt.n	800d930 <_dtoa_r+0x218>
 800d8fe:	9b06      	ldr	r3, [sp, #24]
 800d900:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800d904:	445b      	add	r3, fp
 800d906:	9306      	str	r3, [sp, #24]
 800d908:	2300      	movs	r3, #0
 800d90a:	9a07      	ldr	r2, [sp, #28]
 800d90c:	2a09      	cmp	r2, #9
 800d90e:	d849      	bhi.n	800d9a4 <_dtoa_r+0x28c>
 800d910:	2a05      	cmp	r2, #5
 800d912:	bfc4      	itt	gt
 800d914:	3a04      	subgt	r2, #4
 800d916:	9207      	strgt	r2, [sp, #28]
 800d918:	9a07      	ldr	r2, [sp, #28]
 800d91a:	f1a2 0202 	sub.w	r2, r2, #2
 800d91e:	bfcc      	ite	gt
 800d920:	2400      	movgt	r4, #0
 800d922:	2401      	movle	r4, #1
 800d924:	2a03      	cmp	r2, #3
 800d926:	d848      	bhi.n	800d9ba <_dtoa_r+0x2a2>
 800d928:	e8df f002 	tbb	[pc, r2]
 800d92c:	3a2c2e0b 	.word	0x3a2c2e0b
 800d930:	9b05      	ldr	r3, [sp, #20]
 800d932:	2200      	movs	r2, #0
 800d934:	eba3 030b 	sub.w	r3, r3, fp
 800d938:	9305      	str	r3, [sp, #20]
 800d93a:	920e      	str	r2, [sp, #56]	; 0x38
 800d93c:	f1cb 0300 	rsb	r3, fp, #0
 800d940:	e7e3      	b.n	800d90a <_dtoa_r+0x1f2>
 800d942:	2200      	movs	r2, #0
 800d944:	9208      	str	r2, [sp, #32]
 800d946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d948:	2a00      	cmp	r2, #0
 800d94a:	dc39      	bgt.n	800d9c0 <_dtoa_r+0x2a8>
 800d94c:	f04f 0a01 	mov.w	sl, #1
 800d950:	46d1      	mov	r9, sl
 800d952:	4652      	mov	r2, sl
 800d954:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d958:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800d95a:	2100      	movs	r1, #0
 800d95c:	6079      	str	r1, [r7, #4]
 800d95e:	2004      	movs	r0, #4
 800d960:	f100 0c14 	add.w	ip, r0, #20
 800d964:	4594      	cmp	ip, r2
 800d966:	6879      	ldr	r1, [r7, #4]
 800d968:	d92f      	bls.n	800d9ca <_dtoa_r+0x2b2>
 800d96a:	4630      	mov	r0, r6
 800d96c:	930c      	str	r3, [sp, #48]	; 0x30
 800d96e:	f000 fd69 	bl	800e444 <_Balloc>
 800d972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d974:	9000      	str	r0, [sp, #0]
 800d976:	4602      	mov	r2, r0
 800d978:	2800      	cmp	r0, #0
 800d97a:	d149      	bne.n	800da10 <_dtoa_r+0x2f8>
 800d97c:	4b23      	ldr	r3, [pc, #140]	; (800da0c <_dtoa_r+0x2f4>)
 800d97e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d982:	e6df      	b.n	800d744 <_dtoa_r+0x2c>
 800d984:	2201      	movs	r2, #1
 800d986:	e7dd      	b.n	800d944 <_dtoa_r+0x22c>
 800d988:	2200      	movs	r2, #0
 800d98a:	9208      	str	r2, [sp, #32]
 800d98c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d98e:	eb0b 0a02 	add.w	sl, fp, r2
 800d992:	f10a 0901 	add.w	r9, sl, #1
 800d996:	464a      	mov	r2, r9
 800d998:	2a01      	cmp	r2, #1
 800d99a:	bfb8      	it	lt
 800d99c:	2201      	movlt	r2, #1
 800d99e:	e7db      	b.n	800d958 <_dtoa_r+0x240>
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	e7f2      	b.n	800d98a <_dtoa_r+0x272>
 800d9a4:	2401      	movs	r4, #1
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d9ac:	f04f 3aff 	mov.w	sl, #4294967295
 800d9b0:	2100      	movs	r1, #0
 800d9b2:	46d1      	mov	r9, sl
 800d9b4:	2212      	movs	r2, #18
 800d9b6:	9109      	str	r1, [sp, #36]	; 0x24
 800d9b8:	e7ce      	b.n	800d958 <_dtoa_r+0x240>
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	9208      	str	r2, [sp, #32]
 800d9be:	e7f5      	b.n	800d9ac <_dtoa_r+0x294>
 800d9c0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d9c4:	46d1      	mov	r9, sl
 800d9c6:	4652      	mov	r2, sl
 800d9c8:	e7c6      	b.n	800d958 <_dtoa_r+0x240>
 800d9ca:	3101      	adds	r1, #1
 800d9cc:	6079      	str	r1, [r7, #4]
 800d9ce:	0040      	lsls	r0, r0, #1
 800d9d0:	e7c6      	b.n	800d960 <_dtoa_r+0x248>
 800d9d2:	bf00      	nop
 800d9d4:	f3af 8000 	nop.w
 800d9d8:	636f4361 	.word	0x636f4361
 800d9dc:	3fd287a7 	.word	0x3fd287a7
 800d9e0:	8b60c8b3 	.word	0x8b60c8b3
 800d9e4:	3fc68a28 	.word	0x3fc68a28
 800d9e8:	509f79fb 	.word	0x509f79fb
 800d9ec:	3fd34413 	.word	0x3fd34413
 800d9f0:	0800f90d 	.word	0x0800f90d
 800d9f4:	0800f924 	.word	0x0800f924
 800d9f8:	7ff00000 	.word	0x7ff00000
 800d9fc:	0800f909 	.word	0x0800f909
 800da00:	0800f900 	.word	0x0800f900
 800da04:	0800f8dd 	.word	0x0800f8dd
 800da08:	0800fa80 	.word	0x0800fa80
 800da0c:	0800f983 	.word	0x0800f983
 800da10:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800da12:	9900      	ldr	r1, [sp, #0]
 800da14:	6011      	str	r1, [r2, #0]
 800da16:	f1b9 0f0e 	cmp.w	r9, #14
 800da1a:	d872      	bhi.n	800db02 <_dtoa_r+0x3ea>
 800da1c:	2c00      	cmp	r4, #0
 800da1e:	d070      	beq.n	800db02 <_dtoa_r+0x3ea>
 800da20:	f1bb 0f00 	cmp.w	fp, #0
 800da24:	f340 80a6 	ble.w	800db74 <_dtoa_r+0x45c>
 800da28:	49ca      	ldr	r1, [pc, #808]	; (800dd54 <_dtoa_r+0x63c>)
 800da2a:	f00b 020f 	and.w	r2, fp, #15
 800da2e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800da32:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800da36:	ed92 7b00 	vldr	d7, [r2]
 800da3a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800da3e:	f000 808d 	beq.w	800db5c <_dtoa_r+0x444>
 800da42:	4ac5      	ldr	r2, [pc, #788]	; (800dd58 <_dtoa_r+0x640>)
 800da44:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800da48:	ed92 6b08 	vldr	d6, [r2, #32]
 800da4c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800da50:	ed8d 6b02 	vstr	d6, [sp, #8]
 800da54:	f001 010f 	and.w	r1, r1, #15
 800da58:	2203      	movs	r2, #3
 800da5a:	48bf      	ldr	r0, [pc, #764]	; (800dd58 <_dtoa_r+0x640>)
 800da5c:	2900      	cmp	r1, #0
 800da5e:	d17f      	bne.n	800db60 <_dtoa_r+0x448>
 800da60:	ed9d 6b02 	vldr	d6, [sp, #8]
 800da64:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800da68:	ed8d 7b02 	vstr	d7, [sp, #8]
 800da6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800da6e:	2900      	cmp	r1, #0
 800da70:	f000 80b2 	beq.w	800dbd8 <_dtoa_r+0x4c0>
 800da74:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800da78:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da7c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800da80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da84:	f140 80a8 	bpl.w	800dbd8 <_dtoa_r+0x4c0>
 800da88:	f1b9 0f00 	cmp.w	r9, #0
 800da8c:	f000 80a4 	beq.w	800dbd8 <_dtoa_r+0x4c0>
 800da90:	f1ba 0f00 	cmp.w	sl, #0
 800da94:	dd31      	ble.n	800dafa <_dtoa_r+0x3e2>
 800da96:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800da9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800da9e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800daa2:	f10b 37ff 	add.w	r7, fp, #4294967295
 800daa6:	3201      	adds	r2, #1
 800daa8:	4650      	mov	r0, sl
 800daaa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800daae:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800dab2:	ee07 2a90 	vmov	s15, r2
 800dab6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800daba:	eea7 5b06 	vfma.f64	d5, d7, d6
 800dabe:	ed8d 5b02 	vstr	d5, [sp, #8]
 800dac2:	9c03      	ldr	r4, [sp, #12]
 800dac4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800dac8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800dacc:	2800      	cmp	r0, #0
 800dace:	f040 8086 	bne.w	800dbde <_dtoa_r+0x4c6>
 800dad2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800dad6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800dada:	ec42 1b17 	vmov	d7, r1, r2
 800dade:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae6:	f300 8272 	bgt.w	800dfce <_dtoa_r+0x8b6>
 800daea:	eeb1 7b47 	vneg.f64	d7, d7
 800daee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800daf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daf6:	f100 8267 	bmi.w	800dfc8 <_dtoa_r+0x8b0>
 800dafa:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800dafe:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800db02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800db04:	2a00      	cmp	r2, #0
 800db06:	f2c0 8129 	blt.w	800dd5c <_dtoa_r+0x644>
 800db0a:	f1bb 0f0e 	cmp.w	fp, #14
 800db0e:	f300 8125 	bgt.w	800dd5c <_dtoa_r+0x644>
 800db12:	4b90      	ldr	r3, [pc, #576]	; (800dd54 <_dtoa_r+0x63c>)
 800db14:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800db18:	ed93 6b00 	vldr	d6, [r3]
 800db1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db1e:	2b00      	cmp	r3, #0
 800db20:	f280 80c3 	bge.w	800dcaa <_dtoa_r+0x592>
 800db24:	f1b9 0f00 	cmp.w	r9, #0
 800db28:	f300 80bf 	bgt.w	800dcaa <_dtoa_r+0x592>
 800db2c:	f040 824c 	bne.w	800dfc8 <_dtoa_r+0x8b0>
 800db30:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800db34:	ee26 6b07 	vmul.f64	d6, d6, d7
 800db38:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800db40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db44:	464c      	mov	r4, r9
 800db46:	464f      	mov	r7, r9
 800db48:	f280 8222 	bge.w	800df90 <_dtoa_r+0x878>
 800db4c:	f8dd 8000 	ldr.w	r8, [sp]
 800db50:	2331      	movs	r3, #49	; 0x31
 800db52:	f808 3b01 	strb.w	r3, [r8], #1
 800db56:	f10b 0b01 	add.w	fp, fp, #1
 800db5a:	e21e      	b.n	800df9a <_dtoa_r+0x882>
 800db5c:	2202      	movs	r2, #2
 800db5e:	e77c      	b.n	800da5a <_dtoa_r+0x342>
 800db60:	07cc      	lsls	r4, r1, #31
 800db62:	d504      	bpl.n	800db6e <_dtoa_r+0x456>
 800db64:	ed90 6b00 	vldr	d6, [r0]
 800db68:	3201      	adds	r2, #1
 800db6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800db6e:	1049      	asrs	r1, r1, #1
 800db70:	3008      	adds	r0, #8
 800db72:	e773      	b.n	800da5c <_dtoa_r+0x344>
 800db74:	d02e      	beq.n	800dbd4 <_dtoa_r+0x4bc>
 800db76:	f1cb 0100 	rsb	r1, fp, #0
 800db7a:	4a76      	ldr	r2, [pc, #472]	; (800dd54 <_dtoa_r+0x63c>)
 800db7c:	f001 000f 	and.w	r0, r1, #15
 800db80:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800db84:	ed92 7b00 	vldr	d7, [r2]
 800db88:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800db8c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800db90:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800db94:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800db98:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800db9c:	486e      	ldr	r0, [pc, #440]	; (800dd58 <_dtoa_r+0x640>)
 800db9e:	1109      	asrs	r1, r1, #4
 800dba0:	2400      	movs	r4, #0
 800dba2:	2202      	movs	r2, #2
 800dba4:	b939      	cbnz	r1, 800dbb6 <_dtoa_r+0x49e>
 800dba6:	2c00      	cmp	r4, #0
 800dba8:	f43f af60 	beq.w	800da6c <_dtoa_r+0x354>
 800dbac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dbb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbb4:	e75a      	b.n	800da6c <_dtoa_r+0x354>
 800dbb6:	07cf      	lsls	r7, r1, #31
 800dbb8:	d509      	bpl.n	800dbce <_dtoa_r+0x4b6>
 800dbba:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800dbbe:	ed90 7b00 	vldr	d7, [r0]
 800dbc2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dbc6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800dbca:	3201      	adds	r2, #1
 800dbcc:	2401      	movs	r4, #1
 800dbce:	1049      	asrs	r1, r1, #1
 800dbd0:	3008      	adds	r0, #8
 800dbd2:	e7e7      	b.n	800dba4 <_dtoa_r+0x48c>
 800dbd4:	2202      	movs	r2, #2
 800dbd6:	e749      	b.n	800da6c <_dtoa_r+0x354>
 800dbd8:	465f      	mov	r7, fp
 800dbda:	4648      	mov	r0, r9
 800dbdc:	e765      	b.n	800daaa <_dtoa_r+0x392>
 800dbde:	ec42 1b17 	vmov	d7, r1, r2
 800dbe2:	4a5c      	ldr	r2, [pc, #368]	; (800dd54 <_dtoa_r+0x63c>)
 800dbe4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800dbe8:	ed12 4b02 	vldr	d4, [r2, #-8]
 800dbec:	9a00      	ldr	r2, [sp, #0]
 800dbee:	1814      	adds	r4, r2, r0
 800dbf0:	9a08      	ldr	r2, [sp, #32]
 800dbf2:	b352      	cbz	r2, 800dc4a <_dtoa_r+0x532>
 800dbf4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800dbf8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800dbfc:	f8dd 8000 	ldr.w	r8, [sp]
 800dc00:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800dc04:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800dc08:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dc0c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800dc10:	ee14 2a90 	vmov	r2, s9
 800dc14:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800dc18:	3230      	adds	r2, #48	; 0x30
 800dc1a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dc1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc26:	f808 2b01 	strb.w	r2, [r8], #1
 800dc2a:	d439      	bmi.n	800dca0 <_dtoa_r+0x588>
 800dc2c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800dc30:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800dc34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc38:	d472      	bmi.n	800dd20 <_dtoa_r+0x608>
 800dc3a:	45a0      	cmp	r8, r4
 800dc3c:	f43f af5d 	beq.w	800dafa <_dtoa_r+0x3e2>
 800dc40:	ee27 7b03 	vmul.f64	d7, d7, d3
 800dc44:	ee26 6b03 	vmul.f64	d6, d6, d3
 800dc48:	e7e0      	b.n	800dc0c <_dtoa_r+0x4f4>
 800dc4a:	f8dd 8000 	ldr.w	r8, [sp]
 800dc4e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dc52:	4621      	mov	r1, r4
 800dc54:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800dc58:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800dc5c:	ee14 2a90 	vmov	r2, s9
 800dc60:	3230      	adds	r2, #48	; 0x30
 800dc62:	f808 2b01 	strb.w	r2, [r8], #1
 800dc66:	45a0      	cmp	r8, r4
 800dc68:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800dc6c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dc70:	d118      	bne.n	800dca4 <_dtoa_r+0x58c>
 800dc72:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800dc76:	ee37 4b05 	vadd.f64	d4, d7, d5
 800dc7a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800dc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc82:	dc4d      	bgt.n	800dd20 <_dtoa_r+0x608>
 800dc84:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dc88:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dc8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc90:	f57f af33 	bpl.w	800dafa <_dtoa_r+0x3e2>
 800dc94:	4688      	mov	r8, r1
 800dc96:	3901      	subs	r1, #1
 800dc98:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800dc9c:	2b30      	cmp	r3, #48	; 0x30
 800dc9e:	d0f9      	beq.n	800dc94 <_dtoa_r+0x57c>
 800dca0:	46bb      	mov	fp, r7
 800dca2:	e02a      	b.n	800dcfa <_dtoa_r+0x5e2>
 800dca4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800dca8:	e7d6      	b.n	800dc58 <_dtoa_r+0x540>
 800dcaa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dcae:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800dcb2:	f8dd 8000 	ldr.w	r8, [sp]
 800dcb6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800dcba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800dcbe:	ee15 3a10 	vmov	r3, s10
 800dcc2:	3330      	adds	r3, #48	; 0x30
 800dcc4:	f808 3b01 	strb.w	r3, [r8], #1
 800dcc8:	9b00      	ldr	r3, [sp, #0]
 800dcca:	eba8 0303 	sub.w	r3, r8, r3
 800dcce:	4599      	cmp	r9, r3
 800dcd0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800dcd4:	eea3 7b46 	vfms.f64	d7, d3, d6
 800dcd8:	d133      	bne.n	800dd42 <_dtoa_r+0x62a>
 800dcda:	ee37 7b07 	vadd.f64	d7, d7, d7
 800dcde:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dce6:	dc1a      	bgt.n	800dd1e <_dtoa_r+0x606>
 800dce8:	eeb4 7b46 	vcmp.f64	d7, d6
 800dcec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcf0:	d103      	bne.n	800dcfa <_dtoa_r+0x5e2>
 800dcf2:	ee15 3a10 	vmov	r3, s10
 800dcf6:	07d9      	lsls	r1, r3, #31
 800dcf8:	d411      	bmi.n	800dd1e <_dtoa_r+0x606>
 800dcfa:	4629      	mov	r1, r5
 800dcfc:	4630      	mov	r0, r6
 800dcfe:	f000 fbe1 	bl	800e4c4 <_Bfree>
 800dd02:	2300      	movs	r3, #0
 800dd04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dd06:	f888 3000 	strb.w	r3, [r8]
 800dd0a:	f10b 0301 	add.w	r3, fp, #1
 800dd0e:	6013      	str	r3, [r2, #0]
 800dd10:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	f43f ad4d 	beq.w	800d7b2 <_dtoa_r+0x9a>
 800dd18:	f8c3 8000 	str.w	r8, [r3]
 800dd1c:	e549      	b.n	800d7b2 <_dtoa_r+0x9a>
 800dd1e:	465f      	mov	r7, fp
 800dd20:	4643      	mov	r3, r8
 800dd22:	4698      	mov	r8, r3
 800dd24:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd28:	2a39      	cmp	r2, #57	; 0x39
 800dd2a:	d106      	bne.n	800dd3a <_dtoa_r+0x622>
 800dd2c:	9a00      	ldr	r2, [sp, #0]
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	d1f7      	bne.n	800dd22 <_dtoa_r+0x60a>
 800dd32:	9900      	ldr	r1, [sp, #0]
 800dd34:	2230      	movs	r2, #48	; 0x30
 800dd36:	3701      	adds	r7, #1
 800dd38:	700a      	strb	r2, [r1, #0]
 800dd3a:	781a      	ldrb	r2, [r3, #0]
 800dd3c:	3201      	adds	r2, #1
 800dd3e:	701a      	strb	r2, [r3, #0]
 800dd40:	e7ae      	b.n	800dca0 <_dtoa_r+0x588>
 800dd42:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dd46:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dd4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd4e:	d1b2      	bne.n	800dcb6 <_dtoa_r+0x59e>
 800dd50:	e7d3      	b.n	800dcfa <_dtoa_r+0x5e2>
 800dd52:	bf00      	nop
 800dd54:	0800fa80 	.word	0x0800fa80
 800dd58:	0800fa58 	.word	0x0800fa58
 800dd5c:	9908      	ldr	r1, [sp, #32]
 800dd5e:	2900      	cmp	r1, #0
 800dd60:	f000 80d1 	beq.w	800df06 <_dtoa_r+0x7ee>
 800dd64:	9907      	ldr	r1, [sp, #28]
 800dd66:	2901      	cmp	r1, #1
 800dd68:	f300 80b4 	bgt.w	800ded4 <_dtoa_r+0x7bc>
 800dd6c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dd6e:	2900      	cmp	r1, #0
 800dd70:	f000 80ac 	beq.w	800decc <_dtoa_r+0x7b4>
 800dd74:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dd78:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800dd7c:	461c      	mov	r4, r3
 800dd7e:	930a      	str	r3, [sp, #40]	; 0x28
 800dd80:	9b05      	ldr	r3, [sp, #20]
 800dd82:	4413      	add	r3, r2
 800dd84:	9305      	str	r3, [sp, #20]
 800dd86:	9b06      	ldr	r3, [sp, #24]
 800dd88:	2101      	movs	r1, #1
 800dd8a:	4413      	add	r3, r2
 800dd8c:	4630      	mov	r0, r6
 800dd8e:	9306      	str	r3, [sp, #24]
 800dd90:	f000 fc54 	bl	800e63c <__i2b>
 800dd94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd96:	4607      	mov	r7, r0
 800dd98:	f1b8 0f00 	cmp.w	r8, #0
 800dd9c:	dd0d      	ble.n	800ddba <_dtoa_r+0x6a2>
 800dd9e:	9a06      	ldr	r2, [sp, #24]
 800dda0:	2a00      	cmp	r2, #0
 800dda2:	dd0a      	ble.n	800ddba <_dtoa_r+0x6a2>
 800dda4:	4542      	cmp	r2, r8
 800dda6:	9905      	ldr	r1, [sp, #20]
 800dda8:	bfa8      	it	ge
 800ddaa:	4642      	movge	r2, r8
 800ddac:	1a89      	subs	r1, r1, r2
 800ddae:	9105      	str	r1, [sp, #20]
 800ddb0:	9906      	ldr	r1, [sp, #24]
 800ddb2:	eba8 0802 	sub.w	r8, r8, r2
 800ddb6:	1a8a      	subs	r2, r1, r2
 800ddb8:	9206      	str	r2, [sp, #24]
 800ddba:	b303      	cbz	r3, 800ddfe <_dtoa_r+0x6e6>
 800ddbc:	9a08      	ldr	r2, [sp, #32]
 800ddbe:	2a00      	cmp	r2, #0
 800ddc0:	f000 80a6 	beq.w	800df10 <_dtoa_r+0x7f8>
 800ddc4:	2c00      	cmp	r4, #0
 800ddc6:	dd13      	ble.n	800ddf0 <_dtoa_r+0x6d8>
 800ddc8:	4639      	mov	r1, r7
 800ddca:	4622      	mov	r2, r4
 800ddcc:	4630      	mov	r0, r6
 800ddce:	930c      	str	r3, [sp, #48]	; 0x30
 800ddd0:	f000 fcf0 	bl	800e7b4 <__pow5mult>
 800ddd4:	462a      	mov	r2, r5
 800ddd6:	4601      	mov	r1, r0
 800ddd8:	4607      	mov	r7, r0
 800ddda:	4630      	mov	r0, r6
 800dddc:	f000 fc44 	bl	800e668 <__multiply>
 800dde0:	4629      	mov	r1, r5
 800dde2:	900a      	str	r0, [sp, #40]	; 0x28
 800dde4:	4630      	mov	r0, r6
 800dde6:	f000 fb6d 	bl	800e4c4 <_Bfree>
 800ddea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ddec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddee:	4615      	mov	r5, r2
 800ddf0:	1b1a      	subs	r2, r3, r4
 800ddf2:	d004      	beq.n	800ddfe <_dtoa_r+0x6e6>
 800ddf4:	4629      	mov	r1, r5
 800ddf6:	4630      	mov	r0, r6
 800ddf8:	f000 fcdc 	bl	800e7b4 <__pow5mult>
 800ddfc:	4605      	mov	r5, r0
 800ddfe:	2101      	movs	r1, #1
 800de00:	4630      	mov	r0, r6
 800de02:	f000 fc1b 	bl	800e63c <__i2b>
 800de06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de08:	2b00      	cmp	r3, #0
 800de0a:	4604      	mov	r4, r0
 800de0c:	f340 8082 	ble.w	800df14 <_dtoa_r+0x7fc>
 800de10:	461a      	mov	r2, r3
 800de12:	4601      	mov	r1, r0
 800de14:	4630      	mov	r0, r6
 800de16:	f000 fccd 	bl	800e7b4 <__pow5mult>
 800de1a:	9b07      	ldr	r3, [sp, #28]
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	4604      	mov	r4, r0
 800de20:	dd7b      	ble.n	800df1a <_dtoa_r+0x802>
 800de22:	2300      	movs	r3, #0
 800de24:	930a      	str	r3, [sp, #40]	; 0x28
 800de26:	6922      	ldr	r2, [r4, #16]
 800de28:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800de2c:	6910      	ldr	r0, [r2, #16]
 800de2e:	f000 fbb5 	bl	800e59c <__hi0bits>
 800de32:	f1c0 0020 	rsb	r0, r0, #32
 800de36:	9b06      	ldr	r3, [sp, #24]
 800de38:	4418      	add	r0, r3
 800de3a:	f010 001f 	ands.w	r0, r0, #31
 800de3e:	f000 808d 	beq.w	800df5c <_dtoa_r+0x844>
 800de42:	f1c0 0220 	rsb	r2, r0, #32
 800de46:	2a04      	cmp	r2, #4
 800de48:	f340 8086 	ble.w	800df58 <_dtoa_r+0x840>
 800de4c:	f1c0 001c 	rsb	r0, r0, #28
 800de50:	9b05      	ldr	r3, [sp, #20]
 800de52:	4403      	add	r3, r0
 800de54:	9305      	str	r3, [sp, #20]
 800de56:	9b06      	ldr	r3, [sp, #24]
 800de58:	4403      	add	r3, r0
 800de5a:	4480      	add	r8, r0
 800de5c:	9306      	str	r3, [sp, #24]
 800de5e:	9b05      	ldr	r3, [sp, #20]
 800de60:	2b00      	cmp	r3, #0
 800de62:	dd05      	ble.n	800de70 <_dtoa_r+0x758>
 800de64:	4629      	mov	r1, r5
 800de66:	461a      	mov	r2, r3
 800de68:	4630      	mov	r0, r6
 800de6a:	f000 fcfd 	bl	800e868 <__lshift>
 800de6e:	4605      	mov	r5, r0
 800de70:	9b06      	ldr	r3, [sp, #24]
 800de72:	2b00      	cmp	r3, #0
 800de74:	dd05      	ble.n	800de82 <_dtoa_r+0x76a>
 800de76:	4621      	mov	r1, r4
 800de78:	461a      	mov	r2, r3
 800de7a:	4630      	mov	r0, r6
 800de7c:	f000 fcf4 	bl	800e868 <__lshift>
 800de80:	4604      	mov	r4, r0
 800de82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de84:	2b00      	cmp	r3, #0
 800de86:	d06b      	beq.n	800df60 <_dtoa_r+0x848>
 800de88:	4621      	mov	r1, r4
 800de8a:	4628      	mov	r0, r5
 800de8c:	f000 fd58 	bl	800e940 <__mcmp>
 800de90:	2800      	cmp	r0, #0
 800de92:	da65      	bge.n	800df60 <_dtoa_r+0x848>
 800de94:	2300      	movs	r3, #0
 800de96:	4629      	mov	r1, r5
 800de98:	220a      	movs	r2, #10
 800de9a:	4630      	mov	r0, r6
 800de9c:	f000 fb34 	bl	800e508 <__multadd>
 800dea0:	9b08      	ldr	r3, [sp, #32]
 800dea2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dea6:	4605      	mov	r5, r0
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	f000 8192 	beq.w	800e1d2 <_dtoa_r+0xaba>
 800deae:	4639      	mov	r1, r7
 800deb0:	2300      	movs	r3, #0
 800deb2:	220a      	movs	r2, #10
 800deb4:	4630      	mov	r0, r6
 800deb6:	f000 fb27 	bl	800e508 <__multadd>
 800deba:	f1ba 0f00 	cmp.w	sl, #0
 800debe:	4607      	mov	r7, r0
 800dec0:	f300 808e 	bgt.w	800dfe0 <_dtoa_r+0x8c8>
 800dec4:	9b07      	ldr	r3, [sp, #28]
 800dec6:	2b02      	cmp	r3, #2
 800dec8:	dc51      	bgt.n	800df6e <_dtoa_r+0x856>
 800deca:	e089      	b.n	800dfe0 <_dtoa_r+0x8c8>
 800decc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dece:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ded2:	e751      	b.n	800dd78 <_dtoa_r+0x660>
 800ded4:	f109 34ff 	add.w	r4, r9, #4294967295
 800ded8:	42a3      	cmp	r3, r4
 800deda:	bfbf      	itttt	lt
 800dedc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800dede:	1ae3      	sublt	r3, r4, r3
 800dee0:	18d2      	addlt	r2, r2, r3
 800dee2:	4613      	movlt	r3, r2
 800dee4:	bfb7      	itett	lt
 800dee6:	930e      	strlt	r3, [sp, #56]	; 0x38
 800dee8:	1b1c      	subge	r4, r3, r4
 800deea:	4623      	movlt	r3, r4
 800deec:	2400      	movlt	r4, #0
 800deee:	f1b9 0f00 	cmp.w	r9, #0
 800def2:	bfb5      	itete	lt
 800def4:	9a05      	ldrlt	r2, [sp, #20]
 800def6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800defa:	eba2 0809 	sublt.w	r8, r2, r9
 800defe:	464a      	movge	r2, r9
 800df00:	bfb8      	it	lt
 800df02:	2200      	movlt	r2, #0
 800df04:	e73b      	b.n	800dd7e <_dtoa_r+0x666>
 800df06:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800df0a:	9f08      	ldr	r7, [sp, #32]
 800df0c:	461c      	mov	r4, r3
 800df0e:	e743      	b.n	800dd98 <_dtoa_r+0x680>
 800df10:	461a      	mov	r2, r3
 800df12:	e76f      	b.n	800ddf4 <_dtoa_r+0x6dc>
 800df14:	9b07      	ldr	r3, [sp, #28]
 800df16:	2b01      	cmp	r3, #1
 800df18:	dc18      	bgt.n	800df4c <_dtoa_r+0x834>
 800df1a:	9b02      	ldr	r3, [sp, #8]
 800df1c:	b9b3      	cbnz	r3, 800df4c <_dtoa_r+0x834>
 800df1e:	9b03      	ldr	r3, [sp, #12]
 800df20:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800df24:	b9a2      	cbnz	r2, 800df50 <_dtoa_r+0x838>
 800df26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800df2a:	0d12      	lsrs	r2, r2, #20
 800df2c:	0512      	lsls	r2, r2, #20
 800df2e:	b18a      	cbz	r2, 800df54 <_dtoa_r+0x83c>
 800df30:	9b05      	ldr	r3, [sp, #20]
 800df32:	3301      	adds	r3, #1
 800df34:	9305      	str	r3, [sp, #20]
 800df36:	9b06      	ldr	r3, [sp, #24]
 800df38:	3301      	adds	r3, #1
 800df3a:	9306      	str	r3, [sp, #24]
 800df3c:	2301      	movs	r3, #1
 800df3e:	930a      	str	r3, [sp, #40]	; 0x28
 800df40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df42:	2b00      	cmp	r3, #0
 800df44:	f47f af6f 	bne.w	800de26 <_dtoa_r+0x70e>
 800df48:	2001      	movs	r0, #1
 800df4a:	e774      	b.n	800de36 <_dtoa_r+0x71e>
 800df4c:	2300      	movs	r3, #0
 800df4e:	e7f6      	b.n	800df3e <_dtoa_r+0x826>
 800df50:	9b02      	ldr	r3, [sp, #8]
 800df52:	e7f4      	b.n	800df3e <_dtoa_r+0x826>
 800df54:	920a      	str	r2, [sp, #40]	; 0x28
 800df56:	e7f3      	b.n	800df40 <_dtoa_r+0x828>
 800df58:	d081      	beq.n	800de5e <_dtoa_r+0x746>
 800df5a:	4610      	mov	r0, r2
 800df5c:	301c      	adds	r0, #28
 800df5e:	e777      	b.n	800de50 <_dtoa_r+0x738>
 800df60:	f1b9 0f00 	cmp.w	r9, #0
 800df64:	dc37      	bgt.n	800dfd6 <_dtoa_r+0x8be>
 800df66:	9b07      	ldr	r3, [sp, #28]
 800df68:	2b02      	cmp	r3, #2
 800df6a:	dd34      	ble.n	800dfd6 <_dtoa_r+0x8be>
 800df6c:	46ca      	mov	sl, r9
 800df6e:	f1ba 0f00 	cmp.w	sl, #0
 800df72:	d10d      	bne.n	800df90 <_dtoa_r+0x878>
 800df74:	4621      	mov	r1, r4
 800df76:	4653      	mov	r3, sl
 800df78:	2205      	movs	r2, #5
 800df7a:	4630      	mov	r0, r6
 800df7c:	f000 fac4 	bl	800e508 <__multadd>
 800df80:	4601      	mov	r1, r0
 800df82:	4604      	mov	r4, r0
 800df84:	4628      	mov	r0, r5
 800df86:	f000 fcdb 	bl	800e940 <__mcmp>
 800df8a:	2800      	cmp	r0, #0
 800df8c:	f73f adde 	bgt.w	800db4c <_dtoa_r+0x434>
 800df90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df92:	f8dd 8000 	ldr.w	r8, [sp]
 800df96:	ea6f 0b03 	mvn.w	fp, r3
 800df9a:	f04f 0900 	mov.w	r9, #0
 800df9e:	4621      	mov	r1, r4
 800dfa0:	4630      	mov	r0, r6
 800dfa2:	f000 fa8f 	bl	800e4c4 <_Bfree>
 800dfa6:	2f00      	cmp	r7, #0
 800dfa8:	f43f aea7 	beq.w	800dcfa <_dtoa_r+0x5e2>
 800dfac:	f1b9 0f00 	cmp.w	r9, #0
 800dfb0:	d005      	beq.n	800dfbe <_dtoa_r+0x8a6>
 800dfb2:	45b9      	cmp	r9, r7
 800dfb4:	d003      	beq.n	800dfbe <_dtoa_r+0x8a6>
 800dfb6:	4649      	mov	r1, r9
 800dfb8:	4630      	mov	r0, r6
 800dfba:	f000 fa83 	bl	800e4c4 <_Bfree>
 800dfbe:	4639      	mov	r1, r7
 800dfc0:	4630      	mov	r0, r6
 800dfc2:	f000 fa7f 	bl	800e4c4 <_Bfree>
 800dfc6:	e698      	b.n	800dcfa <_dtoa_r+0x5e2>
 800dfc8:	2400      	movs	r4, #0
 800dfca:	4627      	mov	r7, r4
 800dfcc:	e7e0      	b.n	800df90 <_dtoa_r+0x878>
 800dfce:	46bb      	mov	fp, r7
 800dfd0:	4604      	mov	r4, r0
 800dfd2:	4607      	mov	r7, r0
 800dfd4:	e5ba      	b.n	800db4c <_dtoa_r+0x434>
 800dfd6:	9b08      	ldr	r3, [sp, #32]
 800dfd8:	46ca      	mov	sl, r9
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	f000 8100 	beq.w	800e1e0 <_dtoa_r+0xac8>
 800dfe0:	f1b8 0f00 	cmp.w	r8, #0
 800dfe4:	dd05      	ble.n	800dff2 <_dtoa_r+0x8da>
 800dfe6:	4639      	mov	r1, r7
 800dfe8:	4642      	mov	r2, r8
 800dfea:	4630      	mov	r0, r6
 800dfec:	f000 fc3c 	bl	800e868 <__lshift>
 800dff0:	4607      	mov	r7, r0
 800dff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d05d      	beq.n	800e0b4 <_dtoa_r+0x99c>
 800dff8:	6879      	ldr	r1, [r7, #4]
 800dffa:	4630      	mov	r0, r6
 800dffc:	f000 fa22 	bl	800e444 <_Balloc>
 800e000:	4680      	mov	r8, r0
 800e002:	b928      	cbnz	r0, 800e010 <_dtoa_r+0x8f8>
 800e004:	4b82      	ldr	r3, [pc, #520]	; (800e210 <_dtoa_r+0xaf8>)
 800e006:	4602      	mov	r2, r0
 800e008:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e00c:	f7ff bb9a 	b.w	800d744 <_dtoa_r+0x2c>
 800e010:	693a      	ldr	r2, [r7, #16]
 800e012:	3202      	adds	r2, #2
 800e014:	0092      	lsls	r2, r2, #2
 800e016:	f107 010c 	add.w	r1, r7, #12
 800e01a:	300c      	adds	r0, #12
 800e01c:	f000 fa04 	bl	800e428 <memcpy>
 800e020:	2201      	movs	r2, #1
 800e022:	4641      	mov	r1, r8
 800e024:	4630      	mov	r0, r6
 800e026:	f000 fc1f 	bl	800e868 <__lshift>
 800e02a:	9b00      	ldr	r3, [sp, #0]
 800e02c:	3301      	adds	r3, #1
 800e02e:	9305      	str	r3, [sp, #20]
 800e030:	9b00      	ldr	r3, [sp, #0]
 800e032:	4453      	add	r3, sl
 800e034:	9309      	str	r3, [sp, #36]	; 0x24
 800e036:	9b02      	ldr	r3, [sp, #8]
 800e038:	f003 0301 	and.w	r3, r3, #1
 800e03c:	46b9      	mov	r9, r7
 800e03e:	9308      	str	r3, [sp, #32]
 800e040:	4607      	mov	r7, r0
 800e042:	9b05      	ldr	r3, [sp, #20]
 800e044:	4621      	mov	r1, r4
 800e046:	3b01      	subs	r3, #1
 800e048:	4628      	mov	r0, r5
 800e04a:	9302      	str	r3, [sp, #8]
 800e04c:	f7ff fad6 	bl	800d5fc <quorem>
 800e050:	4603      	mov	r3, r0
 800e052:	3330      	adds	r3, #48	; 0x30
 800e054:	9006      	str	r0, [sp, #24]
 800e056:	4649      	mov	r1, r9
 800e058:	4628      	mov	r0, r5
 800e05a:	930a      	str	r3, [sp, #40]	; 0x28
 800e05c:	f000 fc70 	bl	800e940 <__mcmp>
 800e060:	463a      	mov	r2, r7
 800e062:	4682      	mov	sl, r0
 800e064:	4621      	mov	r1, r4
 800e066:	4630      	mov	r0, r6
 800e068:	f000 fc86 	bl	800e978 <__mdiff>
 800e06c:	68c2      	ldr	r2, [r0, #12]
 800e06e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e070:	4680      	mov	r8, r0
 800e072:	bb0a      	cbnz	r2, 800e0b8 <_dtoa_r+0x9a0>
 800e074:	4601      	mov	r1, r0
 800e076:	4628      	mov	r0, r5
 800e078:	f000 fc62 	bl	800e940 <__mcmp>
 800e07c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e07e:	4602      	mov	r2, r0
 800e080:	4641      	mov	r1, r8
 800e082:	4630      	mov	r0, r6
 800e084:	920e      	str	r2, [sp, #56]	; 0x38
 800e086:	930a      	str	r3, [sp, #40]	; 0x28
 800e088:	f000 fa1c 	bl	800e4c4 <_Bfree>
 800e08c:	9b07      	ldr	r3, [sp, #28]
 800e08e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e090:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e094:	ea43 0102 	orr.w	r1, r3, r2
 800e098:	9b08      	ldr	r3, [sp, #32]
 800e09a:	430b      	orrs	r3, r1
 800e09c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e09e:	d10d      	bne.n	800e0bc <_dtoa_r+0x9a4>
 800e0a0:	2b39      	cmp	r3, #57	; 0x39
 800e0a2:	d029      	beq.n	800e0f8 <_dtoa_r+0x9e0>
 800e0a4:	f1ba 0f00 	cmp.w	sl, #0
 800e0a8:	dd01      	ble.n	800e0ae <_dtoa_r+0x996>
 800e0aa:	9b06      	ldr	r3, [sp, #24]
 800e0ac:	3331      	adds	r3, #49	; 0x31
 800e0ae:	9a02      	ldr	r2, [sp, #8]
 800e0b0:	7013      	strb	r3, [r2, #0]
 800e0b2:	e774      	b.n	800df9e <_dtoa_r+0x886>
 800e0b4:	4638      	mov	r0, r7
 800e0b6:	e7b8      	b.n	800e02a <_dtoa_r+0x912>
 800e0b8:	2201      	movs	r2, #1
 800e0ba:	e7e1      	b.n	800e080 <_dtoa_r+0x968>
 800e0bc:	f1ba 0f00 	cmp.w	sl, #0
 800e0c0:	db06      	blt.n	800e0d0 <_dtoa_r+0x9b8>
 800e0c2:	9907      	ldr	r1, [sp, #28]
 800e0c4:	ea41 0a0a 	orr.w	sl, r1, sl
 800e0c8:	9908      	ldr	r1, [sp, #32]
 800e0ca:	ea5a 0101 	orrs.w	r1, sl, r1
 800e0ce:	d120      	bne.n	800e112 <_dtoa_r+0x9fa>
 800e0d0:	2a00      	cmp	r2, #0
 800e0d2:	ddec      	ble.n	800e0ae <_dtoa_r+0x996>
 800e0d4:	4629      	mov	r1, r5
 800e0d6:	2201      	movs	r2, #1
 800e0d8:	4630      	mov	r0, r6
 800e0da:	9305      	str	r3, [sp, #20]
 800e0dc:	f000 fbc4 	bl	800e868 <__lshift>
 800e0e0:	4621      	mov	r1, r4
 800e0e2:	4605      	mov	r5, r0
 800e0e4:	f000 fc2c 	bl	800e940 <__mcmp>
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	9b05      	ldr	r3, [sp, #20]
 800e0ec:	dc02      	bgt.n	800e0f4 <_dtoa_r+0x9dc>
 800e0ee:	d1de      	bne.n	800e0ae <_dtoa_r+0x996>
 800e0f0:	07da      	lsls	r2, r3, #31
 800e0f2:	d5dc      	bpl.n	800e0ae <_dtoa_r+0x996>
 800e0f4:	2b39      	cmp	r3, #57	; 0x39
 800e0f6:	d1d8      	bne.n	800e0aa <_dtoa_r+0x992>
 800e0f8:	9a02      	ldr	r2, [sp, #8]
 800e0fa:	2339      	movs	r3, #57	; 0x39
 800e0fc:	7013      	strb	r3, [r2, #0]
 800e0fe:	4643      	mov	r3, r8
 800e100:	4698      	mov	r8, r3
 800e102:	3b01      	subs	r3, #1
 800e104:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800e108:	2a39      	cmp	r2, #57	; 0x39
 800e10a:	d051      	beq.n	800e1b0 <_dtoa_r+0xa98>
 800e10c:	3201      	adds	r2, #1
 800e10e:	701a      	strb	r2, [r3, #0]
 800e110:	e745      	b.n	800df9e <_dtoa_r+0x886>
 800e112:	2a00      	cmp	r2, #0
 800e114:	dd03      	ble.n	800e11e <_dtoa_r+0xa06>
 800e116:	2b39      	cmp	r3, #57	; 0x39
 800e118:	d0ee      	beq.n	800e0f8 <_dtoa_r+0x9e0>
 800e11a:	3301      	adds	r3, #1
 800e11c:	e7c7      	b.n	800e0ae <_dtoa_r+0x996>
 800e11e:	9a05      	ldr	r2, [sp, #20]
 800e120:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e122:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e126:	428a      	cmp	r2, r1
 800e128:	d02b      	beq.n	800e182 <_dtoa_r+0xa6a>
 800e12a:	4629      	mov	r1, r5
 800e12c:	2300      	movs	r3, #0
 800e12e:	220a      	movs	r2, #10
 800e130:	4630      	mov	r0, r6
 800e132:	f000 f9e9 	bl	800e508 <__multadd>
 800e136:	45b9      	cmp	r9, r7
 800e138:	4605      	mov	r5, r0
 800e13a:	f04f 0300 	mov.w	r3, #0
 800e13e:	f04f 020a 	mov.w	r2, #10
 800e142:	4649      	mov	r1, r9
 800e144:	4630      	mov	r0, r6
 800e146:	d107      	bne.n	800e158 <_dtoa_r+0xa40>
 800e148:	f000 f9de 	bl	800e508 <__multadd>
 800e14c:	4681      	mov	r9, r0
 800e14e:	4607      	mov	r7, r0
 800e150:	9b05      	ldr	r3, [sp, #20]
 800e152:	3301      	adds	r3, #1
 800e154:	9305      	str	r3, [sp, #20]
 800e156:	e774      	b.n	800e042 <_dtoa_r+0x92a>
 800e158:	f000 f9d6 	bl	800e508 <__multadd>
 800e15c:	4639      	mov	r1, r7
 800e15e:	4681      	mov	r9, r0
 800e160:	2300      	movs	r3, #0
 800e162:	220a      	movs	r2, #10
 800e164:	4630      	mov	r0, r6
 800e166:	f000 f9cf 	bl	800e508 <__multadd>
 800e16a:	4607      	mov	r7, r0
 800e16c:	e7f0      	b.n	800e150 <_dtoa_r+0xa38>
 800e16e:	f1ba 0f00 	cmp.w	sl, #0
 800e172:	9a00      	ldr	r2, [sp, #0]
 800e174:	bfcc      	ite	gt
 800e176:	46d0      	movgt	r8, sl
 800e178:	f04f 0801 	movle.w	r8, #1
 800e17c:	4490      	add	r8, r2
 800e17e:	f04f 0900 	mov.w	r9, #0
 800e182:	4629      	mov	r1, r5
 800e184:	2201      	movs	r2, #1
 800e186:	4630      	mov	r0, r6
 800e188:	9302      	str	r3, [sp, #8]
 800e18a:	f000 fb6d 	bl	800e868 <__lshift>
 800e18e:	4621      	mov	r1, r4
 800e190:	4605      	mov	r5, r0
 800e192:	f000 fbd5 	bl	800e940 <__mcmp>
 800e196:	2800      	cmp	r0, #0
 800e198:	dcb1      	bgt.n	800e0fe <_dtoa_r+0x9e6>
 800e19a:	d102      	bne.n	800e1a2 <_dtoa_r+0xa8a>
 800e19c:	9b02      	ldr	r3, [sp, #8]
 800e19e:	07db      	lsls	r3, r3, #31
 800e1a0:	d4ad      	bmi.n	800e0fe <_dtoa_r+0x9e6>
 800e1a2:	4643      	mov	r3, r8
 800e1a4:	4698      	mov	r8, r3
 800e1a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e1aa:	2a30      	cmp	r2, #48	; 0x30
 800e1ac:	d0fa      	beq.n	800e1a4 <_dtoa_r+0xa8c>
 800e1ae:	e6f6      	b.n	800df9e <_dtoa_r+0x886>
 800e1b0:	9a00      	ldr	r2, [sp, #0]
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	d1a4      	bne.n	800e100 <_dtoa_r+0x9e8>
 800e1b6:	f10b 0b01 	add.w	fp, fp, #1
 800e1ba:	2331      	movs	r3, #49	; 0x31
 800e1bc:	e778      	b.n	800e0b0 <_dtoa_r+0x998>
 800e1be:	4b15      	ldr	r3, [pc, #84]	; (800e214 <_dtoa_r+0xafc>)
 800e1c0:	f7ff bb12 	b.w	800d7e8 <_dtoa_r+0xd0>
 800e1c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	f47f aaee 	bne.w	800d7a8 <_dtoa_r+0x90>
 800e1cc:	4b12      	ldr	r3, [pc, #72]	; (800e218 <_dtoa_r+0xb00>)
 800e1ce:	f7ff bb0b 	b.w	800d7e8 <_dtoa_r+0xd0>
 800e1d2:	f1ba 0f00 	cmp.w	sl, #0
 800e1d6:	dc03      	bgt.n	800e1e0 <_dtoa_r+0xac8>
 800e1d8:	9b07      	ldr	r3, [sp, #28]
 800e1da:	2b02      	cmp	r3, #2
 800e1dc:	f73f aec7 	bgt.w	800df6e <_dtoa_r+0x856>
 800e1e0:	f8dd 8000 	ldr.w	r8, [sp]
 800e1e4:	4621      	mov	r1, r4
 800e1e6:	4628      	mov	r0, r5
 800e1e8:	f7ff fa08 	bl	800d5fc <quorem>
 800e1ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e1f0:	f808 3b01 	strb.w	r3, [r8], #1
 800e1f4:	9a00      	ldr	r2, [sp, #0]
 800e1f6:	eba8 0202 	sub.w	r2, r8, r2
 800e1fa:	4592      	cmp	sl, r2
 800e1fc:	ddb7      	ble.n	800e16e <_dtoa_r+0xa56>
 800e1fe:	4629      	mov	r1, r5
 800e200:	2300      	movs	r3, #0
 800e202:	220a      	movs	r2, #10
 800e204:	4630      	mov	r0, r6
 800e206:	f000 f97f 	bl	800e508 <__multadd>
 800e20a:	4605      	mov	r5, r0
 800e20c:	e7ea      	b.n	800e1e4 <_dtoa_r+0xacc>
 800e20e:	bf00      	nop
 800e210:	0800f983 	.word	0x0800f983
 800e214:	0800f8dc 	.word	0x0800f8dc
 800e218:	0800f900 	.word	0x0800f900

0800e21c <std>:
 800e21c:	2300      	movs	r3, #0
 800e21e:	b510      	push	{r4, lr}
 800e220:	4604      	mov	r4, r0
 800e222:	e9c0 3300 	strd	r3, r3, [r0]
 800e226:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e22a:	6083      	str	r3, [r0, #8]
 800e22c:	8181      	strh	r1, [r0, #12]
 800e22e:	6643      	str	r3, [r0, #100]	; 0x64
 800e230:	81c2      	strh	r2, [r0, #14]
 800e232:	6183      	str	r3, [r0, #24]
 800e234:	4619      	mov	r1, r3
 800e236:	2208      	movs	r2, #8
 800e238:	305c      	adds	r0, #92	; 0x5c
 800e23a:	f7fe fd7d 	bl	800cd38 <memset>
 800e23e:	4b05      	ldr	r3, [pc, #20]	; (800e254 <std+0x38>)
 800e240:	6263      	str	r3, [r4, #36]	; 0x24
 800e242:	4b05      	ldr	r3, [pc, #20]	; (800e258 <std+0x3c>)
 800e244:	62a3      	str	r3, [r4, #40]	; 0x28
 800e246:	4b05      	ldr	r3, [pc, #20]	; (800e25c <std+0x40>)
 800e248:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e24a:	4b05      	ldr	r3, [pc, #20]	; (800e260 <std+0x44>)
 800e24c:	6224      	str	r4, [r4, #32]
 800e24e:	6323      	str	r3, [r4, #48]	; 0x30
 800e250:	bd10      	pop	{r4, pc}
 800e252:	bf00      	nop
 800e254:	0800ef89 	.word	0x0800ef89
 800e258:	0800efab 	.word	0x0800efab
 800e25c:	0800efe3 	.word	0x0800efe3
 800e260:	0800f007 	.word	0x0800f007

0800e264 <_cleanup_r>:
 800e264:	4901      	ldr	r1, [pc, #4]	; (800e26c <_cleanup_r+0x8>)
 800e266:	f000 b8af 	b.w	800e3c8 <_fwalk_reent>
 800e26a:	bf00      	nop
 800e26c:	0800f31d 	.word	0x0800f31d

0800e270 <__sfmoreglue>:
 800e270:	b570      	push	{r4, r5, r6, lr}
 800e272:	1e4a      	subs	r2, r1, #1
 800e274:	2568      	movs	r5, #104	; 0x68
 800e276:	4355      	muls	r5, r2
 800e278:	460e      	mov	r6, r1
 800e27a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e27e:	f000 fcbf 	bl	800ec00 <_malloc_r>
 800e282:	4604      	mov	r4, r0
 800e284:	b140      	cbz	r0, 800e298 <__sfmoreglue+0x28>
 800e286:	2100      	movs	r1, #0
 800e288:	e9c0 1600 	strd	r1, r6, [r0]
 800e28c:	300c      	adds	r0, #12
 800e28e:	60a0      	str	r0, [r4, #8]
 800e290:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e294:	f7fe fd50 	bl	800cd38 <memset>
 800e298:	4620      	mov	r0, r4
 800e29a:	bd70      	pop	{r4, r5, r6, pc}

0800e29c <__sfp_lock_acquire>:
 800e29c:	4801      	ldr	r0, [pc, #4]	; (800e2a4 <__sfp_lock_acquire+0x8>)
 800e29e:	f000 b8b8 	b.w	800e412 <__retarget_lock_acquire_recursive>
 800e2a2:	bf00      	nop
 800e2a4:	20000984 	.word	0x20000984

0800e2a8 <__sfp_lock_release>:
 800e2a8:	4801      	ldr	r0, [pc, #4]	; (800e2b0 <__sfp_lock_release+0x8>)
 800e2aa:	f000 b8b3 	b.w	800e414 <__retarget_lock_release_recursive>
 800e2ae:	bf00      	nop
 800e2b0:	20000984 	.word	0x20000984

0800e2b4 <__sinit_lock_acquire>:
 800e2b4:	4801      	ldr	r0, [pc, #4]	; (800e2bc <__sinit_lock_acquire+0x8>)
 800e2b6:	f000 b8ac 	b.w	800e412 <__retarget_lock_acquire_recursive>
 800e2ba:	bf00      	nop
 800e2bc:	2000097f 	.word	0x2000097f

0800e2c0 <__sinit_lock_release>:
 800e2c0:	4801      	ldr	r0, [pc, #4]	; (800e2c8 <__sinit_lock_release+0x8>)
 800e2c2:	f000 b8a7 	b.w	800e414 <__retarget_lock_release_recursive>
 800e2c6:	bf00      	nop
 800e2c8:	2000097f 	.word	0x2000097f

0800e2cc <__sinit>:
 800e2cc:	b510      	push	{r4, lr}
 800e2ce:	4604      	mov	r4, r0
 800e2d0:	f7ff fff0 	bl	800e2b4 <__sinit_lock_acquire>
 800e2d4:	69a3      	ldr	r3, [r4, #24]
 800e2d6:	b11b      	cbz	r3, 800e2e0 <__sinit+0x14>
 800e2d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2dc:	f7ff bff0 	b.w	800e2c0 <__sinit_lock_release>
 800e2e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e2e4:	6523      	str	r3, [r4, #80]	; 0x50
 800e2e6:	4b13      	ldr	r3, [pc, #76]	; (800e334 <__sinit+0x68>)
 800e2e8:	4a13      	ldr	r2, [pc, #76]	; (800e338 <__sinit+0x6c>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	62a2      	str	r2, [r4, #40]	; 0x28
 800e2ee:	42a3      	cmp	r3, r4
 800e2f0:	bf04      	itt	eq
 800e2f2:	2301      	moveq	r3, #1
 800e2f4:	61a3      	streq	r3, [r4, #24]
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	f000 f820 	bl	800e33c <__sfp>
 800e2fc:	6060      	str	r0, [r4, #4]
 800e2fe:	4620      	mov	r0, r4
 800e300:	f000 f81c 	bl	800e33c <__sfp>
 800e304:	60a0      	str	r0, [r4, #8]
 800e306:	4620      	mov	r0, r4
 800e308:	f000 f818 	bl	800e33c <__sfp>
 800e30c:	2200      	movs	r2, #0
 800e30e:	60e0      	str	r0, [r4, #12]
 800e310:	2104      	movs	r1, #4
 800e312:	6860      	ldr	r0, [r4, #4]
 800e314:	f7ff ff82 	bl	800e21c <std>
 800e318:	68a0      	ldr	r0, [r4, #8]
 800e31a:	2201      	movs	r2, #1
 800e31c:	2109      	movs	r1, #9
 800e31e:	f7ff ff7d 	bl	800e21c <std>
 800e322:	68e0      	ldr	r0, [r4, #12]
 800e324:	2202      	movs	r2, #2
 800e326:	2112      	movs	r1, #18
 800e328:	f7ff ff78 	bl	800e21c <std>
 800e32c:	2301      	movs	r3, #1
 800e32e:	61a3      	str	r3, [r4, #24]
 800e330:	e7d2      	b.n	800e2d8 <__sinit+0xc>
 800e332:	bf00      	nop
 800e334:	0800f8c8 	.word	0x0800f8c8
 800e338:	0800e265 	.word	0x0800e265

0800e33c <__sfp>:
 800e33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e33e:	4607      	mov	r7, r0
 800e340:	f7ff ffac 	bl	800e29c <__sfp_lock_acquire>
 800e344:	4b1e      	ldr	r3, [pc, #120]	; (800e3c0 <__sfp+0x84>)
 800e346:	681e      	ldr	r6, [r3, #0]
 800e348:	69b3      	ldr	r3, [r6, #24]
 800e34a:	b913      	cbnz	r3, 800e352 <__sfp+0x16>
 800e34c:	4630      	mov	r0, r6
 800e34e:	f7ff ffbd 	bl	800e2cc <__sinit>
 800e352:	3648      	adds	r6, #72	; 0x48
 800e354:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e358:	3b01      	subs	r3, #1
 800e35a:	d503      	bpl.n	800e364 <__sfp+0x28>
 800e35c:	6833      	ldr	r3, [r6, #0]
 800e35e:	b30b      	cbz	r3, 800e3a4 <__sfp+0x68>
 800e360:	6836      	ldr	r6, [r6, #0]
 800e362:	e7f7      	b.n	800e354 <__sfp+0x18>
 800e364:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e368:	b9d5      	cbnz	r5, 800e3a0 <__sfp+0x64>
 800e36a:	4b16      	ldr	r3, [pc, #88]	; (800e3c4 <__sfp+0x88>)
 800e36c:	60e3      	str	r3, [r4, #12]
 800e36e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e372:	6665      	str	r5, [r4, #100]	; 0x64
 800e374:	f000 f84c 	bl	800e410 <__retarget_lock_init_recursive>
 800e378:	f7ff ff96 	bl	800e2a8 <__sfp_lock_release>
 800e37c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e380:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e384:	6025      	str	r5, [r4, #0]
 800e386:	61a5      	str	r5, [r4, #24]
 800e388:	2208      	movs	r2, #8
 800e38a:	4629      	mov	r1, r5
 800e38c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e390:	f7fe fcd2 	bl	800cd38 <memset>
 800e394:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e398:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e39c:	4620      	mov	r0, r4
 800e39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3a0:	3468      	adds	r4, #104	; 0x68
 800e3a2:	e7d9      	b.n	800e358 <__sfp+0x1c>
 800e3a4:	2104      	movs	r1, #4
 800e3a6:	4638      	mov	r0, r7
 800e3a8:	f7ff ff62 	bl	800e270 <__sfmoreglue>
 800e3ac:	4604      	mov	r4, r0
 800e3ae:	6030      	str	r0, [r6, #0]
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	d1d5      	bne.n	800e360 <__sfp+0x24>
 800e3b4:	f7ff ff78 	bl	800e2a8 <__sfp_lock_release>
 800e3b8:	230c      	movs	r3, #12
 800e3ba:	603b      	str	r3, [r7, #0]
 800e3bc:	e7ee      	b.n	800e39c <__sfp+0x60>
 800e3be:	bf00      	nop
 800e3c0:	0800f8c8 	.word	0x0800f8c8
 800e3c4:	ffff0001 	.word	0xffff0001

0800e3c8 <_fwalk_reent>:
 800e3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3cc:	4606      	mov	r6, r0
 800e3ce:	4688      	mov	r8, r1
 800e3d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e3d4:	2700      	movs	r7, #0
 800e3d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e3da:	f1b9 0901 	subs.w	r9, r9, #1
 800e3de:	d505      	bpl.n	800e3ec <_fwalk_reent+0x24>
 800e3e0:	6824      	ldr	r4, [r4, #0]
 800e3e2:	2c00      	cmp	r4, #0
 800e3e4:	d1f7      	bne.n	800e3d6 <_fwalk_reent+0xe>
 800e3e6:	4638      	mov	r0, r7
 800e3e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3ec:	89ab      	ldrh	r3, [r5, #12]
 800e3ee:	2b01      	cmp	r3, #1
 800e3f0:	d907      	bls.n	800e402 <_fwalk_reent+0x3a>
 800e3f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e3f6:	3301      	adds	r3, #1
 800e3f8:	d003      	beq.n	800e402 <_fwalk_reent+0x3a>
 800e3fa:	4629      	mov	r1, r5
 800e3fc:	4630      	mov	r0, r6
 800e3fe:	47c0      	blx	r8
 800e400:	4307      	orrs	r7, r0
 800e402:	3568      	adds	r5, #104	; 0x68
 800e404:	e7e9      	b.n	800e3da <_fwalk_reent+0x12>
	...

0800e408 <_localeconv_r>:
 800e408:	4800      	ldr	r0, [pc, #0]	; (800e40c <_localeconv_r+0x4>)
 800e40a:	4770      	bx	lr
 800e40c:	2000016c 	.word	0x2000016c

0800e410 <__retarget_lock_init_recursive>:
 800e410:	4770      	bx	lr

0800e412 <__retarget_lock_acquire_recursive>:
 800e412:	4770      	bx	lr

0800e414 <__retarget_lock_release_recursive>:
 800e414:	4770      	bx	lr
	...

0800e418 <malloc>:
 800e418:	4b02      	ldr	r3, [pc, #8]	; (800e424 <malloc+0xc>)
 800e41a:	4601      	mov	r1, r0
 800e41c:	6818      	ldr	r0, [r3, #0]
 800e41e:	f000 bbef 	b.w	800ec00 <_malloc_r>
 800e422:	bf00      	nop
 800e424:	20000018 	.word	0x20000018

0800e428 <memcpy>:
 800e428:	440a      	add	r2, r1
 800e42a:	4291      	cmp	r1, r2
 800e42c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e430:	d100      	bne.n	800e434 <memcpy+0xc>
 800e432:	4770      	bx	lr
 800e434:	b510      	push	{r4, lr}
 800e436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e43a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e43e:	4291      	cmp	r1, r2
 800e440:	d1f9      	bne.n	800e436 <memcpy+0xe>
 800e442:	bd10      	pop	{r4, pc}

0800e444 <_Balloc>:
 800e444:	b570      	push	{r4, r5, r6, lr}
 800e446:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e448:	4604      	mov	r4, r0
 800e44a:	460d      	mov	r5, r1
 800e44c:	b976      	cbnz	r6, 800e46c <_Balloc+0x28>
 800e44e:	2010      	movs	r0, #16
 800e450:	f7ff ffe2 	bl	800e418 <malloc>
 800e454:	4602      	mov	r2, r0
 800e456:	6260      	str	r0, [r4, #36]	; 0x24
 800e458:	b920      	cbnz	r0, 800e464 <_Balloc+0x20>
 800e45a:	4b18      	ldr	r3, [pc, #96]	; (800e4bc <_Balloc+0x78>)
 800e45c:	4818      	ldr	r0, [pc, #96]	; (800e4c0 <_Balloc+0x7c>)
 800e45e:	2166      	movs	r1, #102	; 0x66
 800e460:	f000 fea8 	bl	800f1b4 <__assert_func>
 800e464:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e468:	6006      	str	r6, [r0, #0]
 800e46a:	60c6      	str	r6, [r0, #12]
 800e46c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e46e:	68f3      	ldr	r3, [r6, #12]
 800e470:	b183      	cbz	r3, 800e494 <_Balloc+0x50>
 800e472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e474:	68db      	ldr	r3, [r3, #12]
 800e476:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e47a:	b9b8      	cbnz	r0, 800e4ac <_Balloc+0x68>
 800e47c:	2101      	movs	r1, #1
 800e47e:	fa01 f605 	lsl.w	r6, r1, r5
 800e482:	1d72      	adds	r2, r6, #5
 800e484:	0092      	lsls	r2, r2, #2
 800e486:	4620      	mov	r0, r4
 800e488:	f000 fb5a 	bl	800eb40 <_calloc_r>
 800e48c:	b160      	cbz	r0, 800e4a8 <_Balloc+0x64>
 800e48e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e492:	e00e      	b.n	800e4b2 <_Balloc+0x6e>
 800e494:	2221      	movs	r2, #33	; 0x21
 800e496:	2104      	movs	r1, #4
 800e498:	4620      	mov	r0, r4
 800e49a:	f000 fb51 	bl	800eb40 <_calloc_r>
 800e49e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4a0:	60f0      	str	r0, [r6, #12]
 800e4a2:	68db      	ldr	r3, [r3, #12]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d1e4      	bne.n	800e472 <_Balloc+0x2e>
 800e4a8:	2000      	movs	r0, #0
 800e4aa:	bd70      	pop	{r4, r5, r6, pc}
 800e4ac:	6802      	ldr	r2, [r0, #0]
 800e4ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e4b8:	e7f7      	b.n	800e4aa <_Balloc+0x66>
 800e4ba:	bf00      	nop
 800e4bc:	0800f90d 	.word	0x0800f90d
 800e4c0:	0800f9f4 	.word	0x0800f9f4

0800e4c4 <_Bfree>:
 800e4c4:	b570      	push	{r4, r5, r6, lr}
 800e4c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e4c8:	4605      	mov	r5, r0
 800e4ca:	460c      	mov	r4, r1
 800e4cc:	b976      	cbnz	r6, 800e4ec <_Bfree+0x28>
 800e4ce:	2010      	movs	r0, #16
 800e4d0:	f7ff ffa2 	bl	800e418 <malloc>
 800e4d4:	4602      	mov	r2, r0
 800e4d6:	6268      	str	r0, [r5, #36]	; 0x24
 800e4d8:	b920      	cbnz	r0, 800e4e4 <_Bfree+0x20>
 800e4da:	4b09      	ldr	r3, [pc, #36]	; (800e500 <_Bfree+0x3c>)
 800e4dc:	4809      	ldr	r0, [pc, #36]	; (800e504 <_Bfree+0x40>)
 800e4de:	218a      	movs	r1, #138	; 0x8a
 800e4e0:	f000 fe68 	bl	800f1b4 <__assert_func>
 800e4e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4e8:	6006      	str	r6, [r0, #0]
 800e4ea:	60c6      	str	r6, [r0, #12]
 800e4ec:	b13c      	cbz	r4, 800e4fe <_Bfree+0x3a>
 800e4ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e4f0:	6862      	ldr	r2, [r4, #4]
 800e4f2:	68db      	ldr	r3, [r3, #12]
 800e4f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e4f8:	6021      	str	r1, [r4, #0]
 800e4fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e4fe:	bd70      	pop	{r4, r5, r6, pc}
 800e500:	0800f90d 	.word	0x0800f90d
 800e504:	0800f9f4 	.word	0x0800f9f4

0800e508 <__multadd>:
 800e508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e50c:	690e      	ldr	r6, [r1, #16]
 800e50e:	4607      	mov	r7, r0
 800e510:	4698      	mov	r8, r3
 800e512:	460c      	mov	r4, r1
 800e514:	f101 0014 	add.w	r0, r1, #20
 800e518:	2300      	movs	r3, #0
 800e51a:	6805      	ldr	r5, [r0, #0]
 800e51c:	b2a9      	uxth	r1, r5
 800e51e:	fb02 8101 	mla	r1, r2, r1, r8
 800e522:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e526:	0c2d      	lsrs	r5, r5, #16
 800e528:	fb02 c505 	mla	r5, r2, r5, ip
 800e52c:	b289      	uxth	r1, r1
 800e52e:	3301      	adds	r3, #1
 800e530:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e534:	429e      	cmp	r6, r3
 800e536:	f840 1b04 	str.w	r1, [r0], #4
 800e53a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e53e:	dcec      	bgt.n	800e51a <__multadd+0x12>
 800e540:	f1b8 0f00 	cmp.w	r8, #0
 800e544:	d022      	beq.n	800e58c <__multadd+0x84>
 800e546:	68a3      	ldr	r3, [r4, #8]
 800e548:	42b3      	cmp	r3, r6
 800e54a:	dc19      	bgt.n	800e580 <__multadd+0x78>
 800e54c:	6861      	ldr	r1, [r4, #4]
 800e54e:	4638      	mov	r0, r7
 800e550:	3101      	adds	r1, #1
 800e552:	f7ff ff77 	bl	800e444 <_Balloc>
 800e556:	4605      	mov	r5, r0
 800e558:	b928      	cbnz	r0, 800e566 <__multadd+0x5e>
 800e55a:	4602      	mov	r2, r0
 800e55c:	4b0d      	ldr	r3, [pc, #52]	; (800e594 <__multadd+0x8c>)
 800e55e:	480e      	ldr	r0, [pc, #56]	; (800e598 <__multadd+0x90>)
 800e560:	21b5      	movs	r1, #181	; 0xb5
 800e562:	f000 fe27 	bl	800f1b4 <__assert_func>
 800e566:	6922      	ldr	r2, [r4, #16]
 800e568:	3202      	adds	r2, #2
 800e56a:	f104 010c 	add.w	r1, r4, #12
 800e56e:	0092      	lsls	r2, r2, #2
 800e570:	300c      	adds	r0, #12
 800e572:	f7ff ff59 	bl	800e428 <memcpy>
 800e576:	4621      	mov	r1, r4
 800e578:	4638      	mov	r0, r7
 800e57a:	f7ff ffa3 	bl	800e4c4 <_Bfree>
 800e57e:	462c      	mov	r4, r5
 800e580:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e584:	3601      	adds	r6, #1
 800e586:	f8c3 8014 	str.w	r8, [r3, #20]
 800e58a:	6126      	str	r6, [r4, #16]
 800e58c:	4620      	mov	r0, r4
 800e58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e592:	bf00      	nop
 800e594:	0800f983 	.word	0x0800f983
 800e598:	0800f9f4 	.word	0x0800f9f4

0800e59c <__hi0bits>:
 800e59c:	0c03      	lsrs	r3, r0, #16
 800e59e:	041b      	lsls	r3, r3, #16
 800e5a0:	b9d3      	cbnz	r3, 800e5d8 <__hi0bits+0x3c>
 800e5a2:	0400      	lsls	r0, r0, #16
 800e5a4:	2310      	movs	r3, #16
 800e5a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e5aa:	bf04      	itt	eq
 800e5ac:	0200      	lsleq	r0, r0, #8
 800e5ae:	3308      	addeq	r3, #8
 800e5b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e5b4:	bf04      	itt	eq
 800e5b6:	0100      	lsleq	r0, r0, #4
 800e5b8:	3304      	addeq	r3, #4
 800e5ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e5be:	bf04      	itt	eq
 800e5c0:	0080      	lsleq	r0, r0, #2
 800e5c2:	3302      	addeq	r3, #2
 800e5c4:	2800      	cmp	r0, #0
 800e5c6:	db05      	blt.n	800e5d4 <__hi0bits+0x38>
 800e5c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e5cc:	f103 0301 	add.w	r3, r3, #1
 800e5d0:	bf08      	it	eq
 800e5d2:	2320      	moveq	r3, #32
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	4770      	bx	lr
 800e5d8:	2300      	movs	r3, #0
 800e5da:	e7e4      	b.n	800e5a6 <__hi0bits+0xa>

0800e5dc <__lo0bits>:
 800e5dc:	6803      	ldr	r3, [r0, #0]
 800e5de:	f013 0207 	ands.w	r2, r3, #7
 800e5e2:	4601      	mov	r1, r0
 800e5e4:	d00b      	beq.n	800e5fe <__lo0bits+0x22>
 800e5e6:	07da      	lsls	r2, r3, #31
 800e5e8:	d424      	bmi.n	800e634 <__lo0bits+0x58>
 800e5ea:	0798      	lsls	r0, r3, #30
 800e5ec:	bf49      	itett	mi
 800e5ee:	085b      	lsrmi	r3, r3, #1
 800e5f0:	089b      	lsrpl	r3, r3, #2
 800e5f2:	2001      	movmi	r0, #1
 800e5f4:	600b      	strmi	r3, [r1, #0]
 800e5f6:	bf5c      	itt	pl
 800e5f8:	600b      	strpl	r3, [r1, #0]
 800e5fa:	2002      	movpl	r0, #2
 800e5fc:	4770      	bx	lr
 800e5fe:	b298      	uxth	r0, r3
 800e600:	b9b0      	cbnz	r0, 800e630 <__lo0bits+0x54>
 800e602:	0c1b      	lsrs	r3, r3, #16
 800e604:	2010      	movs	r0, #16
 800e606:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e60a:	bf04      	itt	eq
 800e60c:	0a1b      	lsreq	r3, r3, #8
 800e60e:	3008      	addeq	r0, #8
 800e610:	071a      	lsls	r2, r3, #28
 800e612:	bf04      	itt	eq
 800e614:	091b      	lsreq	r3, r3, #4
 800e616:	3004      	addeq	r0, #4
 800e618:	079a      	lsls	r2, r3, #30
 800e61a:	bf04      	itt	eq
 800e61c:	089b      	lsreq	r3, r3, #2
 800e61e:	3002      	addeq	r0, #2
 800e620:	07da      	lsls	r2, r3, #31
 800e622:	d403      	bmi.n	800e62c <__lo0bits+0x50>
 800e624:	085b      	lsrs	r3, r3, #1
 800e626:	f100 0001 	add.w	r0, r0, #1
 800e62a:	d005      	beq.n	800e638 <__lo0bits+0x5c>
 800e62c:	600b      	str	r3, [r1, #0]
 800e62e:	4770      	bx	lr
 800e630:	4610      	mov	r0, r2
 800e632:	e7e8      	b.n	800e606 <__lo0bits+0x2a>
 800e634:	2000      	movs	r0, #0
 800e636:	4770      	bx	lr
 800e638:	2020      	movs	r0, #32
 800e63a:	4770      	bx	lr

0800e63c <__i2b>:
 800e63c:	b510      	push	{r4, lr}
 800e63e:	460c      	mov	r4, r1
 800e640:	2101      	movs	r1, #1
 800e642:	f7ff feff 	bl	800e444 <_Balloc>
 800e646:	4602      	mov	r2, r0
 800e648:	b928      	cbnz	r0, 800e656 <__i2b+0x1a>
 800e64a:	4b05      	ldr	r3, [pc, #20]	; (800e660 <__i2b+0x24>)
 800e64c:	4805      	ldr	r0, [pc, #20]	; (800e664 <__i2b+0x28>)
 800e64e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e652:	f000 fdaf 	bl	800f1b4 <__assert_func>
 800e656:	2301      	movs	r3, #1
 800e658:	6144      	str	r4, [r0, #20]
 800e65a:	6103      	str	r3, [r0, #16]
 800e65c:	bd10      	pop	{r4, pc}
 800e65e:	bf00      	nop
 800e660:	0800f983 	.word	0x0800f983
 800e664:	0800f9f4 	.word	0x0800f9f4

0800e668 <__multiply>:
 800e668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e66c:	4614      	mov	r4, r2
 800e66e:	690a      	ldr	r2, [r1, #16]
 800e670:	6923      	ldr	r3, [r4, #16]
 800e672:	429a      	cmp	r2, r3
 800e674:	bfb8      	it	lt
 800e676:	460b      	movlt	r3, r1
 800e678:	460d      	mov	r5, r1
 800e67a:	bfbc      	itt	lt
 800e67c:	4625      	movlt	r5, r4
 800e67e:	461c      	movlt	r4, r3
 800e680:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e684:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e688:	68ab      	ldr	r3, [r5, #8]
 800e68a:	6869      	ldr	r1, [r5, #4]
 800e68c:	eb0a 0709 	add.w	r7, sl, r9
 800e690:	42bb      	cmp	r3, r7
 800e692:	b085      	sub	sp, #20
 800e694:	bfb8      	it	lt
 800e696:	3101      	addlt	r1, #1
 800e698:	f7ff fed4 	bl	800e444 <_Balloc>
 800e69c:	b930      	cbnz	r0, 800e6ac <__multiply+0x44>
 800e69e:	4602      	mov	r2, r0
 800e6a0:	4b42      	ldr	r3, [pc, #264]	; (800e7ac <__multiply+0x144>)
 800e6a2:	4843      	ldr	r0, [pc, #268]	; (800e7b0 <__multiply+0x148>)
 800e6a4:	f240 115d 	movw	r1, #349	; 0x15d
 800e6a8:	f000 fd84 	bl	800f1b4 <__assert_func>
 800e6ac:	f100 0614 	add.w	r6, r0, #20
 800e6b0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e6b4:	4633      	mov	r3, r6
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	4543      	cmp	r3, r8
 800e6ba:	d31e      	bcc.n	800e6fa <__multiply+0x92>
 800e6bc:	f105 0c14 	add.w	ip, r5, #20
 800e6c0:	f104 0314 	add.w	r3, r4, #20
 800e6c4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e6c8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e6cc:	9202      	str	r2, [sp, #8]
 800e6ce:	ebac 0205 	sub.w	r2, ip, r5
 800e6d2:	3a15      	subs	r2, #21
 800e6d4:	f022 0203 	bic.w	r2, r2, #3
 800e6d8:	3204      	adds	r2, #4
 800e6da:	f105 0115 	add.w	r1, r5, #21
 800e6de:	458c      	cmp	ip, r1
 800e6e0:	bf38      	it	cc
 800e6e2:	2204      	movcc	r2, #4
 800e6e4:	9201      	str	r2, [sp, #4]
 800e6e6:	9a02      	ldr	r2, [sp, #8]
 800e6e8:	9303      	str	r3, [sp, #12]
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d808      	bhi.n	800e700 <__multiply+0x98>
 800e6ee:	2f00      	cmp	r7, #0
 800e6f0:	dc55      	bgt.n	800e79e <__multiply+0x136>
 800e6f2:	6107      	str	r7, [r0, #16]
 800e6f4:	b005      	add	sp, #20
 800e6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6fa:	f843 2b04 	str.w	r2, [r3], #4
 800e6fe:	e7db      	b.n	800e6b8 <__multiply+0x50>
 800e700:	f8b3 a000 	ldrh.w	sl, [r3]
 800e704:	f1ba 0f00 	cmp.w	sl, #0
 800e708:	d020      	beq.n	800e74c <__multiply+0xe4>
 800e70a:	f105 0e14 	add.w	lr, r5, #20
 800e70e:	46b1      	mov	r9, r6
 800e710:	2200      	movs	r2, #0
 800e712:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e716:	f8d9 b000 	ldr.w	fp, [r9]
 800e71a:	b2a1      	uxth	r1, r4
 800e71c:	fa1f fb8b 	uxth.w	fp, fp
 800e720:	fb0a b101 	mla	r1, sl, r1, fp
 800e724:	4411      	add	r1, r2
 800e726:	f8d9 2000 	ldr.w	r2, [r9]
 800e72a:	0c24      	lsrs	r4, r4, #16
 800e72c:	0c12      	lsrs	r2, r2, #16
 800e72e:	fb0a 2404 	mla	r4, sl, r4, r2
 800e732:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e736:	b289      	uxth	r1, r1
 800e738:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e73c:	45f4      	cmp	ip, lr
 800e73e:	f849 1b04 	str.w	r1, [r9], #4
 800e742:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e746:	d8e4      	bhi.n	800e712 <__multiply+0xaa>
 800e748:	9901      	ldr	r1, [sp, #4]
 800e74a:	5072      	str	r2, [r6, r1]
 800e74c:	9a03      	ldr	r2, [sp, #12]
 800e74e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e752:	3304      	adds	r3, #4
 800e754:	f1b9 0f00 	cmp.w	r9, #0
 800e758:	d01f      	beq.n	800e79a <__multiply+0x132>
 800e75a:	6834      	ldr	r4, [r6, #0]
 800e75c:	f105 0114 	add.w	r1, r5, #20
 800e760:	46b6      	mov	lr, r6
 800e762:	f04f 0a00 	mov.w	sl, #0
 800e766:	880a      	ldrh	r2, [r1, #0]
 800e768:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e76c:	fb09 b202 	mla	r2, r9, r2, fp
 800e770:	4492      	add	sl, r2
 800e772:	b2a4      	uxth	r4, r4
 800e774:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e778:	f84e 4b04 	str.w	r4, [lr], #4
 800e77c:	f851 4b04 	ldr.w	r4, [r1], #4
 800e780:	f8be 2000 	ldrh.w	r2, [lr]
 800e784:	0c24      	lsrs	r4, r4, #16
 800e786:	fb09 2404 	mla	r4, r9, r4, r2
 800e78a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e78e:	458c      	cmp	ip, r1
 800e790:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e794:	d8e7      	bhi.n	800e766 <__multiply+0xfe>
 800e796:	9a01      	ldr	r2, [sp, #4]
 800e798:	50b4      	str	r4, [r6, r2]
 800e79a:	3604      	adds	r6, #4
 800e79c:	e7a3      	b.n	800e6e6 <__multiply+0x7e>
 800e79e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d1a5      	bne.n	800e6f2 <__multiply+0x8a>
 800e7a6:	3f01      	subs	r7, #1
 800e7a8:	e7a1      	b.n	800e6ee <__multiply+0x86>
 800e7aa:	bf00      	nop
 800e7ac:	0800f983 	.word	0x0800f983
 800e7b0:	0800f9f4 	.word	0x0800f9f4

0800e7b4 <__pow5mult>:
 800e7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7b8:	4615      	mov	r5, r2
 800e7ba:	f012 0203 	ands.w	r2, r2, #3
 800e7be:	4606      	mov	r6, r0
 800e7c0:	460f      	mov	r7, r1
 800e7c2:	d007      	beq.n	800e7d4 <__pow5mult+0x20>
 800e7c4:	4c25      	ldr	r4, [pc, #148]	; (800e85c <__pow5mult+0xa8>)
 800e7c6:	3a01      	subs	r2, #1
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e7ce:	f7ff fe9b 	bl	800e508 <__multadd>
 800e7d2:	4607      	mov	r7, r0
 800e7d4:	10ad      	asrs	r5, r5, #2
 800e7d6:	d03d      	beq.n	800e854 <__pow5mult+0xa0>
 800e7d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e7da:	b97c      	cbnz	r4, 800e7fc <__pow5mult+0x48>
 800e7dc:	2010      	movs	r0, #16
 800e7de:	f7ff fe1b 	bl	800e418 <malloc>
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	6270      	str	r0, [r6, #36]	; 0x24
 800e7e6:	b928      	cbnz	r0, 800e7f4 <__pow5mult+0x40>
 800e7e8:	4b1d      	ldr	r3, [pc, #116]	; (800e860 <__pow5mult+0xac>)
 800e7ea:	481e      	ldr	r0, [pc, #120]	; (800e864 <__pow5mult+0xb0>)
 800e7ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e7f0:	f000 fce0 	bl	800f1b4 <__assert_func>
 800e7f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e7f8:	6004      	str	r4, [r0, #0]
 800e7fa:	60c4      	str	r4, [r0, #12]
 800e7fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e800:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e804:	b94c      	cbnz	r4, 800e81a <__pow5mult+0x66>
 800e806:	f240 2171 	movw	r1, #625	; 0x271
 800e80a:	4630      	mov	r0, r6
 800e80c:	f7ff ff16 	bl	800e63c <__i2b>
 800e810:	2300      	movs	r3, #0
 800e812:	f8c8 0008 	str.w	r0, [r8, #8]
 800e816:	4604      	mov	r4, r0
 800e818:	6003      	str	r3, [r0, #0]
 800e81a:	f04f 0900 	mov.w	r9, #0
 800e81e:	07eb      	lsls	r3, r5, #31
 800e820:	d50a      	bpl.n	800e838 <__pow5mult+0x84>
 800e822:	4639      	mov	r1, r7
 800e824:	4622      	mov	r2, r4
 800e826:	4630      	mov	r0, r6
 800e828:	f7ff ff1e 	bl	800e668 <__multiply>
 800e82c:	4639      	mov	r1, r7
 800e82e:	4680      	mov	r8, r0
 800e830:	4630      	mov	r0, r6
 800e832:	f7ff fe47 	bl	800e4c4 <_Bfree>
 800e836:	4647      	mov	r7, r8
 800e838:	106d      	asrs	r5, r5, #1
 800e83a:	d00b      	beq.n	800e854 <__pow5mult+0xa0>
 800e83c:	6820      	ldr	r0, [r4, #0]
 800e83e:	b938      	cbnz	r0, 800e850 <__pow5mult+0x9c>
 800e840:	4622      	mov	r2, r4
 800e842:	4621      	mov	r1, r4
 800e844:	4630      	mov	r0, r6
 800e846:	f7ff ff0f 	bl	800e668 <__multiply>
 800e84a:	6020      	str	r0, [r4, #0]
 800e84c:	f8c0 9000 	str.w	r9, [r0]
 800e850:	4604      	mov	r4, r0
 800e852:	e7e4      	b.n	800e81e <__pow5mult+0x6a>
 800e854:	4638      	mov	r0, r7
 800e856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e85a:	bf00      	nop
 800e85c:	0800fb48 	.word	0x0800fb48
 800e860:	0800f90d 	.word	0x0800f90d
 800e864:	0800f9f4 	.word	0x0800f9f4

0800e868 <__lshift>:
 800e868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e86c:	460c      	mov	r4, r1
 800e86e:	6849      	ldr	r1, [r1, #4]
 800e870:	6923      	ldr	r3, [r4, #16]
 800e872:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e876:	68a3      	ldr	r3, [r4, #8]
 800e878:	4607      	mov	r7, r0
 800e87a:	4691      	mov	r9, r2
 800e87c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e880:	f108 0601 	add.w	r6, r8, #1
 800e884:	42b3      	cmp	r3, r6
 800e886:	db0b      	blt.n	800e8a0 <__lshift+0x38>
 800e888:	4638      	mov	r0, r7
 800e88a:	f7ff fddb 	bl	800e444 <_Balloc>
 800e88e:	4605      	mov	r5, r0
 800e890:	b948      	cbnz	r0, 800e8a6 <__lshift+0x3e>
 800e892:	4602      	mov	r2, r0
 800e894:	4b28      	ldr	r3, [pc, #160]	; (800e938 <__lshift+0xd0>)
 800e896:	4829      	ldr	r0, [pc, #164]	; (800e93c <__lshift+0xd4>)
 800e898:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e89c:	f000 fc8a 	bl	800f1b4 <__assert_func>
 800e8a0:	3101      	adds	r1, #1
 800e8a2:	005b      	lsls	r3, r3, #1
 800e8a4:	e7ee      	b.n	800e884 <__lshift+0x1c>
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	f100 0114 	add.w	r1, r0, #20
 800e8ac:	f100 0210 	add.w	r2, r0, #16
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	4553      	cmp	r3, sl
 800e8b4:	db33      	blt.n	800e91e <__lshift+0xb6>
 800e8b6:	6920      	ldr	r0, [r4, #16]
 800e8b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e8bc:	f104 0314 	add.w	r3, r4, #20
 800e8c0:	f019 091f 	ands.w	r9, r9, #31
 800e8c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e8c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e8cc:	d02b      	beq.n	800e926 <__lshift+0xbe>
 800e8ce:	f1c9 0e20 	rsb	lr, r9, #32
 800e8d2:	468a      	mov	sl, r1
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	6818      	ldr	r0, [r3, #0]
 800e8d8:	fa00 f009 	lsl.w	r0, r0, r9
 800e8dc:	4302      	orrs	r2, r0
 800e8de:	f84a 2b04 	str.w	r2, [sl], #4
 800e8e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8e6:	459c      	cmp	ip, r3
 800e8e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800e8ec:	d8f3      	bhi.n	800e8d6 <__lshift+0x6e>
 800e8ee:	ebac 0304 	sub.w	r3, ip, r4
 800e8f2:	3b15      	subs	r3, #21
 800e8f4:	f023 0303 	bic.w	r3, r3, #3
 800e8f8:	3304      	adds	r3, #4
 800e8fa:	f104 0015 	add.w	r0, r4, #21
 800e8fe:	4584      	cmp	ip, r0
 800e900:	bf38      	it	cc
 800e902:	2304      	movcc	r3, #4
 800e904:	50ca      	str	r2, [r1, r3]
 800e906:	b10a      	cbz	r2, 800e90c <__lshift+0xa4>
 800e908:	f108 0602 	add.w	r6, r8, #2
 800e90c:	3e01      	subs	r6, #1
 800e90e:	4638      	mov	r0, r7
 800e910:	612e      	str	r6, [r5, #16]
 800e912:	4621      	mov	r1, r4
 800e914:	f7ff fdd6 	bl	800e4c4 <_Bfree>
 800e918:	4628      	mov	r0, r5
 800e91a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e91e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e922:	3301      	adds	r3, #1
 800e924:	e7c5      	b.n	800e8b2 <__lshift+0x4a>
 800e926:	3904      	subs	r1, #4
 800e928:	f853 2b04 	ldr.w	r2, [r3], #4
 800e92c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e930:	459c      	cmp	ip, r3
 800e932:	d8f9      	bhi.n	800e928 <__lshift+0xc0>
 800e934:	e7ea      	b.n	800e90c <__lshift+0xa4>
 800e936:	bf00      	nop
 800e938:	0800f983 	.word	0x0800f983
 800e93c:	0800f9f4 	.word	0x0800f9f4

0800e940 <__mcmp>:
 800e940:	b530      	push	{r4, r5, lr}
 800e942:	6902      	ldr	r2, [r0, #16]
 800e944:	690c      	ldr	r4, [r1, #16]
 800e946:	1b12      	subs	r2, r2, r4
 800e948:	d10e      	bne.n	800e968 <__mcmp+0x28>
 800e94a:	f100 0314 	add.w	r3, r0, #20
 800e94e:	3114      	adds	r1, #20
 800e950:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e954:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e958:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e95c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e960:	42a5      	cmp	r5, r4
 800e962:	d003      	beq.n	800e96c <__mcmp+0x2c>
 800e964:	d305      	bcc.n	800e972 <__mcmp+0x32>
 800e966:	2201      	movs	r2, #1
 800e968:	4610      	mov	r0, r2
 800e96a:	bd30      	pop	{r4, r5, pc}
 800e96c:	4283      	cmp	r3, r0
 800e96e:	d3f3      	bcc.n	800e958 <__mcmp+0x18>
 800e970:	e7fa      	b.n	800e968 <__mcmp+0x28>
 800e972:	f04f 32ff 	mov.w	r2, #4294967295
 800e976:	e7f7      	b.n	800e968 <__mcmp+0x28>

0800e978 <__mdiff>:
 800e978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e97c:	460c      	mov	r4, r1
 800e97e:	4606      	mov	r6, r0
 800e980:	4611      	mov	r1, r2
 800e982:	4620      	mov	r0, r4
 800e984:	4617      	mov	r7, r2
 800e986:	f7ff ffdb 	bl	800e940 <__mcmp>
 800e98a:	1e05      	subs	r5, r0, #0
 800e98c:	d110      	bne.n	800e9b0 <__mdiff+0x38>
 800e98e:	4629      	mov	r1, r5
 800e990:	4630      	mov	r0, r6
 800e992:	f7ff fd57 	bl	800e444 <_Balloc>
 800e996:	b930      	cbnz	r0, 800e9a6 <__mdiff+0x2e>
 800e998:	4b39      	ldr	r3, [pc, #228]	; (800ea80 <__mdiff+0x108>)
 800e99a:	4602      	mov	r2, r0
 800e99c:	f240 2132 	movw	r1, #562	; 0x232
 800e9a0:	4838      	ldr	r0, [pc, #224]	; (800ea84 <__mdiff+0x10c>)
 800e9a2:	f000 fc07 	bl	800f1b4 <__assert_func>
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e9ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9b0:	bfa4      	itt	ge
 800e9b2:	463b      	movge	r3, r7
 800e9b4:	4627      	movge	r7, r4
 800e9b6:	4630      	mov	r0, r6
 800e9b8:	6879      	ldr	r1, [r7, #4]
 800e9ba:	bfa6      	itte	ge
 800e9bc:	461c      	movge	r4, r3
 800e9be:	2500      	movge	r5, #0
 800e9c0:	2501      	movlt	r5, #1
 800e9c2:	f7ff fd3f 	bl	800e444 <_Balloc>
 800e9c6:	b920      	cbnz	r0, 800e9d2 <__mdiff+0x5a>
 800e9c8:	4b2d      	ldr	r3, [pc, #180]	; (800ea80 <__mdiff+0x108>)
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e9d0:	e7e6      	b.n	800e9a0 <__mdiff+0x28>
 800e9d2:	693e      	ldr	r6, [r7, #16]
 800e9d4:	60c5      	str	r5, [r0, #12]
 800e9d6:	6925      	ldr	r5, [r4, #16]
 800e9d8:	f107 0114 	add.w	r1, r7, #20
 800e9dc:	f104 0914 	add.w	r9, r4, #20
 800e9e0:	f100 0e14 	add.w	lr, r0, #20
 800e9e4:	f107 0210 	add.w	r2, r7, #16
 800e9e8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e9ec:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e9f0:	46f2      	mov	sl, lr
 800e9f2:	2700      	movs	r7, #0
 800e9f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800e9f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e9fc:	fa1f f883 	uxth.w	r8, r3
 800ea00:	fa17 f78b 	uxtah	r7, r7, fp
 800ea04:	0c1b      	lsrs	r3, r3, #16
 800ea06:	eba7 0808 	sub.w	r8, r7, r8
 800ea0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ea0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ea12:	fa1f f888 	uxth.w	r8, r8
 800ea16:	141f      	asrs	r7, r3, #16
 800ea18:	454d      	cmp	r5, r9
 800ea1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ea1e:	f84a 3b04 	str.w	r3, [sl], #4
 800ea22:	d8e7      	bhi.n	800e9f4 <__mdiff+0x7c>
 800ea24:	1b2b      	subs	r3, r5, r4
 800ea26:	3b15      	subs	r3, #21
 800ea28:	f023 0303 	bic.w	r3, r3, #3
 800ea2c:	3304      	adds	r3, #4
 800ea2e:	3415      	adds	r4, #21
 800ea30:	42a5      	cmp	r5, r4
 800ea32:	bf38      	it	cc
 800ea34:	2304      	movcc	r3, #4
 800ea36:	4419      	add	r1, r3
 800ea38:	4473      	add	r3, lr
 800ea3a:	469e      	mov	lr, r3
 800ea3c:	460d      	mov	r5, r1
 800ea3e:	4565      	cmp	r5, ip
 800ea40:	d30e      	bcc.n	800ea60 <__mdiff+0xe8>
 800ea42:	f10c 0203 	add.w	r2, ip, #3
 800ea46:	1a52      	subs	r2, r2, r1
 800ea48:	f022 0203 	bic.w	r2, r2, #3
 800ea4c:	3903      	subs	r1, #3
 800ea4e:	458c      	cmp	ip, r1
 800ea50:	bf38      	it	cc
 800ea52:	2200      	movcc	r2, #0
 800ea54:	441a      	add	r2, r3
 800ea56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ea5a:	b17b      	cbz	r3, 800ea7c <__mdiff+0x104>
 800ea5c:	6106      	str	r6, [r0, #16]
 800ea5e:	e7a5      	b.n	800e9ac <__mdiff+0x34>
 800ea60:	f855 8b04 	ldr.w	r8, [r5], #4
 800ea64:	fa17 f488 	uxtah	r4, r7, r8
 800ea68:	1422      	asrs	r2, r4, #16
 800ea6a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ea6e:	b2a4      	uxth	r4, r4
 800ea70:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ea74:	f84e 4b04 	str.w	r4, [lr], #4
 800ea78:	1417      	asrs	r7, r2, #16
 800ea7a:	e7e0      	b.n	800ea3e <__mdiff+0xc6>
 800ea7c:	3e01      	subs	r6, #1
 800ea7e:	e7ea      	b.n	800ea56 <__mdiff+0xde>
 800ea80:	0800f983 	.word	0x0800f983
 800ea84:	0800f9f4 	.word	0x0800f9f4

0800ea88 <__d2b>:
 800ea88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea8c:	4689      	mov	r9, r1
 800ea8e:	2101      	movs	r1, #1
 800ea90:	ec57 6b10 	vmov	r6, r7, d0
 800ea94:	4690      	mov	r8, r2
 800ea96:	f7ff fcd5 	bl	800e444 <_Balloc>
 800ea9a:	4604      	mov	r4, r0
 800ea9c:	b930      	cbnz	r0, 800eaac <__d2b+0x24>
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	4b25      	ldr	r3, [pc, #148]	; (800eb38 <__d2b+0xb0>)
 800eaa2:	4826      	ldr	r0, [pc, #152]	; (800eb3c <__d2b+0xb4>)
 800eaa4:	f240 310a 	movw	r1, #778	; 0x30a
 800eaa8:	f000 fb84 	bl	800f1b4 <__assert_func>
 800eaac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800eab0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eab4:	bb35      	cbnz	r5, 800eb04 <__d2b+0x7c>
 800eab6:	2e00      	cmp	r6, #0
 800eab8:	9301      	str	r3, [sp, #4]
 800eaba:	d028      	beq.n	800eb0e <__d2b+0x86>
 800eabc:	4668      	mov	r0, sp
 800eabe:	9600      	str	r6, [sp, #0]
 800eac0:	f7ff fd8c 	bl	800e5dc <__lo0bits>
 800eac4:	9900      	ldr	r1, [sp, #0]
 800eac6:	b300      	cbz	r0, 800eb0a <__d2b+0x82>
 800eac8:	9a01      	ldr	r2, [sp, #4]
 800eaca:	f1c0 0320 	rsb	r3, r0, #32
 800eace:	fa02 f303 	lsl.w	r3, r2, r3
 800ead2:	430b      	orrs	r3, r1
 800ead4:	40c2      	lsrs	r2, r0
 800ead6:	6163      	str	r3, [r4, #20]
 800ead8:	9201      	str	r2, [sp, #4]
 800eada:	9b01      	ldr	r3, [sp, #4]
 800eadc:	61a3      	str	r3, [r4, #24]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	bf14      	ite	ne
 800eae2:	2202      	movne	r2, #2
 800eae4:	2201      	moveq	r2, #1
 800eae6:	6122      	str	r2, [r4, #16]
 800eae8:	b1d5      	cbz	r5, 800eb20 <__d2b+0x98>
 800eaea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eaee:	4405      	add	r5, r0
 800eaf0:	f8c9 5000 	str.w	r5, [r9]
 800eaf4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eaf8:	f8c8 0000 	str.w	r0, [r8]
 800eafc:	4620      	mov	r0, r4
 800eafe:	b003      	add	sp, #12
 800eb00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eb08:	e7d5      	b.n	800eab6 <__d2b+0x2e>
 800eb0a:	6161      	str	r1, [r4, #20]
 800eb0c:	e7e5      	b.n	800eada <__d2b+0x52>
 800eb0e:	a801      	add	r0, sp, #4
 800eb10:	f7ff fd64 	bl	800e5dc <__lo0bits>
 800eb14:	9b01      	ldr	r3, [sp, #4]
 800eb16:	6163      	str	r3, [r4, #20]
 800eb18:	2201      	movs	r2, #1
 800eb1a:	6122      	str	r2, [r4, #16]
 800eb1c:	3020      	adds	r0, #32
 800eb1e:	e7e3      	b.n	800eae8 <__d2b+0x60>
 800eb20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eb24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eb28:	f8c9 0000 	str.w	r0, [r9]
 800eb2c:	6918      	ldr	r0, [r3, #16]
 800eb2e:	f7ff fd35 	bl	800e59c <__hi0bits>
 800eb32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eb36:	e7df      	b.n	800eaf8 <__d2b+0x70>
 800eb38:	0800f983 	.word	0x0800f983
 800eb3c:	0800f9f4 	.word	0x0800f9f4

0800eb40 <_calloc_r>:
 800eb40:	b513      	push	{r0, r1, r4, lr}
 800eb42:	434a      	muls	r2, r1
 800eb44:	4611      	mov	r1, r2
 800eb46:	9201      	str	r2, [sp, #4]
 800eb48:	f000 f85a 	bl	800ec00 <_malloc_r>
 800eb4c:	4604      	mov	r4, r0
 800eb4e:	b118      	cbz	r0, 800eb58 <_calloc_r+0x18>
 800eb50:	9a01      	ldr	r2, [sp, #4]
 800eb52:	2100      	movs	r1, #0
 800eb54:	f7fe f8f0 	bl	800cd38 <memset>
 800eb58:	4620      	mov	r0, r4
 800eb5a:	b002      	add	sp, #8
 800eb5c:	bd10      	pop	{r4, pc}
	...

0800eb60 <_free_r>:
 800eb60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb62:	2900      	cmp	r1, #0
 800eb64:	d048      	beq.n	800ebf8 <_free_r+0x98>
 800eb66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb6a:	9001      	str	r0, [sp, #4]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	f1a1 0404 	sub.w	r4, r1, #4
 800eb72:	bfb8      	it	lt
 800eb74:	18e4      	addlt	r4, r4, r3
 800eb76:	f000 fca7 	bl	800f4c8 <__malloc_lock>
 800eb7a:	4a20      	ldr	r2, [pc, #128]	; (800ebfc <_free_r+0x9c>)
 800eb7c:	9801      	ldr	r0, [sp, #4]
 800eb7e:	6813      	ldr	r3, [r2, #0]
 800eb80:	4615      	mov	r5, r2
 800eb82:	b933      	cbnz	r3, 800eb92 <_free_r+0x32>
 800eb84:	6063      	str	r3, [r4, #4]
 800eb86:	6014      	str	r4, [r2, #0]
 800eb88:	b003      	add	sp, #12
 800eb8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb8e:	f000 bca1 	b.w	800f4d4 <__malloc_unlock>
 800eb92:	42a3      	cmp	r3, r4
 800eb94:	d90b      	bls.n	800ebae <_free_r+0x4e>
 800eb96:	6821      	ldr	r1, [r4, #0]
 800eb98:	1862      	adds	r2, r4, r1
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	bf04      	itt	eq
 800eb9e:	681a      	ldreq	r2, [r3, #0]
 800eba0:	685b      	ldreq	r3, [r3, #4]
 800eba2:	6063      	str	r3, [r4, #4]
 800eba4:	bf04      	itt	eq
 800eba6:	1852      	addeq	r2, r2, r1
 800eba8:	6022      	streq	r2, [r4, #0]
 800ebaa:	602c      	str	r4, [r5, #0]
 800ebac:	e7ec      	b.n	800eb88 <_free_r+0x28>
 800ebae:	461a      	mov	r2, r3
 800ebb0:	685b      	ldr	r3, [r3, #4]
 800ebb2:	b10b      	cbz	r3, 800ebb8 <_free_r+0x58>
 800ebb4:	42a3      	cmp	r3, r4
 800ebb6:	d9fa      	bls.n	800ebae <_free_r+0x4e>
 800ebb8:	6811      	ldr	r1, [r2, #0]
 800ebba:	1855      	adds	r5, r2, r1
 800ebbc:	42a5      	cmp	r5, r4
 800ebbe:	d10b      	bne.n	800ebd8 <_free_r+0x78>
 800ebc0:	6824      	ldr	r4, [r4, #0]
 800ebc2:	4421      	add	r1, r4
 800ebc4:	1854      	adds	r4, r2, r1
 800ebc6:	42a3      	cmp	r3, r4
 800ebc8:	6011      	str	r1, [r2, #0]
 800ebca:	d1dd      	bne.n	800eb88 <_free_r+0x28>
 800ebcc:	681c      	ldr	r4, [r3, #0]
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	6053      	str	r3, [r2, #4]
 800ebd2:	4421      	add	r1, r4
 800ebd4:	6011      	str	r1, [r2, #0]
 800ebd6:	e7d7      	b.n	800eb88 <_free_r+0x28>
 800ebd8:	d902      	bls.n	800ebe0 <_free_r+0x80>
 800ebda:	230c      	movs	r3, #12
 800ebdc:	6003      	str	r3, [r0, #0]
 800ebde:	e7d3      	b.n	800eb88 <_free_r+0x28>
 800ebe0:	6825      	ldr	r5, [r4, #0]
 800ebe2:	1961      	adds	r1, r4, r5
 800ebe4:	428b      	cmp	r3, r1
 800ebe6:	bf04      	itt	eq
 800ebe8:	6819      	ldreq	r1, [r3, #0]
 800ebea:	685b      	ldreq	r3, [r3, #4]
 800ebec:	6063      	str	r3, [r4, #4]
 800ebee:	bf04      	itt	eq
 800ebf0:	1949      	addeq	r1, r1, r5
 800ebf2:	6021      	streq	r1, [r4, #0]
 800ebf4:	6054      	str	r4, [r2, #4]
 800ebf6:	e7c7      	b.n	800eb88 <_free_r+0x28>
 800ebf8:	b003      	add	sp, #12
 800ebfa:	bd30      	pop	{r4, r5, pc}
 800ebfc:	20000220 	.word	0x20000220

0800ec00 <_malloc_r>:
 800ec00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec02:	1ccd      	adds	r5, r1, #3
 800ec04:	f025 0503 	bic.w	r5, r5, #3
 800ec08:	3508      	adds	r5, #8
 800ec0a:	2d0c      	cmp	r5, #12
 800ec0c:	bf38      	it	cc
 800ec0e:	250c      	movcc	r5, #12
 800ec10:	2d00      	cmp	r5, #0
 800ec12:	4606      	mov	r6, r0
 800ec14:	db01      	blt.n	800ec1a <_malloc_r+0x1a>
 800ec16:	42a9      	cmp	r1, r5
 800ec18:	d903      	bls.n	800ec22 <_malloc_r+0x22>
 800ec1a:	230c      	movs	r3, #12
 800ec1c:	6033      	str	r3, [r6, #0]
 800ec1e:	2000      	movs	r0, #0
 800ec20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec22:	f000 fc51 	bl	800f4c8 <__malloc_lock>
 800ec26:	4921      	ldr	r1, [pc, #132]	; (800ecac <_malloc_r+0xac>)
 800ec28:	680a      	ldr	r2, [r1, #0]
 800ec2a:	4614      	mov	r4, r2
 800ec2c:	b99c      	cbnz	r4, 800ec56 <_malloc_r+0x56>
 800ec2e:	4f20      	ldr	r7, [pc, #128]	; (800ecb0 <_malloc_r+0xb0>)
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	b923      	cbnz	r3, 800ec3e <_malloc_r+0x3e>
 800ec34:	4621      	mov	r1, r4
 800ec36:	4630      	mov	r0, r6
 800ec38:	f000 f996 	bl	800ef68 <_sbrk_r>
 800ec3c:	6038      	str	r0, [r7, #0]
 800ec3e:	4629      	mov	r1, r5
 800ec40:	4630      	mov	r0, r6
 800ec42:	f000 f991 	bl	800ef68 <_sbrk_r>
 800ec46:	1c43      	adds	r3, r0, #1
 800ec48:	d123      	bne.n	800ec92 <_malloc_r+0x92>
 800ec4a:	230c      	movs	r3, #12
 800ec4c:	6033      	str	r3, [r6, #0]
 800ec4e:	4630      	mov	r0, r6
 800ec50:	f000 fc40 	bl	800f4d4 <__malloc_unlock>
 800ec54:	e7e3      	b.n	800ec1e <_malloc_r+0x1e>
 800ec56:	6823      	ldr	r3, [r4, #0]
 800ec58:	1b5b      	subs	r3, r3, r5
 800ec5a:	d417      	bmi.n	800ec8c <_malloc_r+0x8c>
 800ec5c:	2b0b      	cmp	r3, #11
 800ec5e:	d903      	bls.n	800ec68 <_malloc_r+0x68>
 800ec60:	6023      	str	r3, [r4, #0]
 800ec62:	441c      	add	r4, r3
 800ec64:	6025      	str	r5, [r4, #0]
 800ec66:	e004      	b.n	800ec72 <_malloc_r+0x72>
 800ec68:	6863      	ldr	r3, [r4, #4]
 800ec6a:	42a2      	cmp	r2, r4
 800ec6c:	bf0c      	ite	eq
 800ec6e:	600b      	streq	r3, [r1, #0]
 800ec70:	6053      	strne	r3, [r2, #4]
 800ec72:	4630      	mov	r0, r6
 800ec74:	f000 fc2e 	bl	800f4d4 <__malloc_unlock>
 800ec78:	f104 000b 	add.w	r0, r4, #11
 800ec7c:	1d23      	adds	r3, r4, #4
 800ec7e:	f020 0007 	bic.w	r0, r0, #7
 800ec82:	1ac2      	subs	r2, r0, r3
 800ec84:	d0cc      	beq.n	800ec20 <_malloc_r+0x20>
 800ec86:	1a1b      	subs	r3, r3, r0
 800ec88:	50a3      	str	r3, [r4, r2]
 800ec8a:	e7c9      	b.n	800ec20 <_malloc_r+0x20>
 800ec8c:	4622      	mov	r2, r4
 800ec8e:	6864      	ldr	r4, [r4, #4]
 800ec90:	e7cc      	b.n	800ec2c <_malloc_r+0x2c>
 800ec92:	1cc4      	adds	r4, r0, #3
 800ec94:	f024 0403 	bic.w	r4, r4, #3
 800ec98:	42a0      	cmp	r0, r4
 800ec9a:	d0e3      	beq.n	800ec64 <_malloc_r+0x64>
 800ec9c:	1a21      	subs	r1, r4, r0
 800ec9e:	4630      	mov	r0, r6
 800eca0:	f000 f962 	bl	800ef68 <_sbrk_r>
 800eca4:	3001      	adds	r0, #1
 800eca6:	d1dd      	bne.n	800ec64 <_malloc_r+0x64>
 800eca8:	e7cf      	b.n	800ec4a <_malloc_r+0x4a>
 800ecaa:	bf00      	nop
 800ecac:	20000220 	.word	0x20000220
 800ecb0:	20000224 	.word	0x20000224

0800ecb4 <__sfputc_r>:
 800ecb4:	6893      	ldr	r3, [r2, #8]
 800ecb6:	3b01      	subs	r3, #1
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	b410      	push	{r4}
 800ecbc:	6093      	str	r3, [r2, #8]
 800ecbe:	da08      	bge.n	800ecd2 <__sfputc_r+0x1e>
 800ecc0:	6994      	ldr	r4, [r2, #24]
 800ecc2:	42a3      	cmp	r3, r4
 800ecc4:	db01      	blt.n	800ecca <__sfputc_r+0x16>
 800ecc6:	290a      	cmp	r1, #10
 800ecc8:	d103      	bne.n	800ecd2 <__sfputc_r+0x1e>
 800ecca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecce:	f000 b99f 	b.w	800f010 <__swbuf_r>
 800ecd2:	6813      	ldr	r3, [r2, #0]
 800ecd4:	1c58      	adds	r0, r3, #1
 800ecd6:	6010      	str	r0, [r2, #0]
 800ecd8:	7019      	strb	r1, [r3, #0]
 800ecda:	4608      	mov	r0, r1
 800ecdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ece0:	4770      	bx	lr

0800ece2 <__sfputs_r>:
 800ece2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ece4:	4606      	mov	r6, r0
 800ece6:	460f      	mov	r7, r1
 800ece8:	4614      	mov	r4, r2
 800ecea:	18d5      	adds	r5, r2, r3
 800ecec:	42ac      	cmp	r4, r5
 800ecee:	d101      	bne.n	800ecf4 <__sfputs_r+0x12>
 800ecf0:	2000      	movs	r0, #0
 800ecf2:	e007      	b.n	800ed04 <__sfputs_r+0x22>
 800ecf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecf8:	463a      	mov	r2, r7
 800ecfa:	4630      	mov	r0, r6
 800ecfc:	f7ff ffda 	bl	800ecb4 <__sfputc_r>
 800ed00:	1c43      	adds	r3, r0, #1
 800ed02:	d1f3      	bne.n	800ecec <__sfputs_r+0xa>
 800ed04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed08 <_vfiprintf_r>:
 800ed08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed0c:	460d      	mov	r5, r1
 800ed0e:	b09d      	sub	sp, #116	; 0x74
 800ed10:	4614      	mov	r4, r2
 800ed12:	4698      	mov	r8, r3
 800ed14:	4606      	mov	r6, r0
 800ed16:	b118      	cbz	r0, 800ed20 <_vfiprintf_r+0x18>
 800ed18:	6983      	ldr	r3, [r0, #24]
 800ed1a:	b90b      	cbnz	r3, 800ed20 <_vfiprintf_r+0x18>
 800ed1c:	f7ff fad6 	bl	800e2cc <__sinit>
 800ed20:	4b89      	ldr	r3, [pc, #548]	; (800ef48 <_vfiprintf_r+0x240>)
 800ed22:	429d      	cmp	r5, r3
 800ed24:	d11b      	bne.n	800ed5e <_vfiprintf_r+0x56>
 800ed26:	6875      	ldr	r5, [r6, #4]
 800ed28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed2a:	07d9      	lsls	r1, r3, #31
 800ed2c:	d405      	bmi.n	800ed3a <_vfiprintf_r+0x32>
 800ed2e:	89ab      	ldrh	r3, [r5, #12]
 800ed30:	059a      	lsls	r2, r3, #22
 800ed32:	d402      	bmi.n	800ed3a <_vfiprintf_r+0x32>
 800ed34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed36:	f7ff fb6c 	bl	800e412 <__retarget_lock_acquire_recursive>
 800ed3a:	89ab      	ldrh	r3, [r5, #12]
 800ed3c:	071b      	lsls	r3, r3, #28
 800ed3e:	d501      	bpl.n	800ed44 <_vfiprintf_r+0x3c>
 800ed40:	692b      	ldr	r3, [r5, #16]
 800ed42:	b9eb      	cbnz	r3, 800ed80 <_vfiprintf_r+0x78>
 800ed44:	4629      	mov	r1, r5
 800ed46:	4630      	mov	r0, r6
 800ed48:	f000 f9c6 	bl	800f0d8 <__swsetup_r>
 800ed4c:	b1c0      	cbz	r0, 800ed80 <_vfiprintf_r+0x78>
 800ed4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed50:	07dc      	lsls	r4, r3, #31
 800ed52:	d50e      	bpl.n	800ed72 <_vfiprintf_r+0x6a>
 800ed54:	f04f 30ff 	mov.w	r0, #4294967295
 800ed58:	b01d      	add	sp, #116	; 0x74
 800ed5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed5e:	4b7b      	ldr	r3, [pc, #492]	; (800ef4c <_vfiprintf_r+0x244>)
 800ed60:	429d      	cmp	r5, r3
 800ed62:	d101      	bne.n	800ed68 <_vfiprintf_r+0x60>
 800ed64:	68b5      	ldr	r5, [r6, #8]
 800ed66:	e7df      	b.n	800ed28 <_vfiprintf_r+0x20>
 800ed68:	4b79      	ldr	r3, [pc, #484]	; (800ef50 <_vfiprintf_r+0x248>)
 800ed6a:	429d      	cmp	r5, r3
 800ed6c:	bf08      	it	eq
 800ed6e:	68f5      	ldreq	r5, [r6, #12]
 800ed70:	e7da      	b.n	800ed28 <_vfiprintf_r+0x20>
 800ed72:	89ab      	ldrh	r3, [r5, #12]
 800ed74:	0598      	lsls	r0, r3, #22
 800ed76:	d4ed      	bmi.n	800ed54 <_vfiprintf_r+0x4c>
 800ed78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed7a:	f7ff fb4b 	bl	800e414 <__retarget_lock_release_recursive>
 800ed7e:	e7e9      	b.n	800ed54 <_vfiprintf_r+0x4c>
 800ed80:	2300      	movs	r3, #0
 800ed82:	9309      	str	r3, [sp, #36]	; 0x24
 800ed84:	2320      	movs	r3, #32
 800ed86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed8e:	2330      	movs	r3, #48	; 0x30
 800ed90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ef54 <_vfiprintf_r+0x24c>
 800ed94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed98:	f04f 0901 	mov.w	r9, #1
 800ed9c:	4623      	mov	r3, r4
 800ed9e:	469a      	mov	sl, r3
 800eda0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eda4:	b10a      	cbz	r2, 800edaa <_vfiprintf_r+0xa2>
 800eda6:	2a25      	cmp	r2, #37	; 0x25
 800eda8:	d1f9      	bne.n	800ed9e <_vfiprintf_r+0x96>
 800edaa:	ebba 0b04 	subs.w	fp, sl, r4
 800edae:	d00b      	beq.n	800edc8 <_vfiprintf_r+0xc0>
 800edb0:	465b      	mov	r3, fp
 800edb2:	4622      	mov	r2, r4
 800edb4:	4629      	mov	r1, r5
 800edb6:	4630      	mov	r0, r6
 800edb8:	f7ff ff93 	bl	800ece2 <__sfputs_r>
 800edbc:	3001      	adds	r0, #1
 800edbe:	f000 80aa 	beq.w	800ef16 <_vfiprintf_r+0x20e>
 800edc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edc4:	445a      	add	r2, fp
 800edc6:	9209      	str	r2, [sp, #36]	; 0x24
 800edc8:	f89a 3000 	ldrb.w	r3, [sl]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	f000 80a2 	beq.w	800ef16 <_vfiprintf_r+0x20e>
 800edd2:	2300      	movs	r3, #0
 800edd4:	f04f 32ff 	mov.w	r2, #4294967295
 800edd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eddc:	f10a 0a01 	add.w	sl, sl, #1
 800ede0:	9304      	str	r3, [sp, #16]
 800ede2:	9307      	str	r3, [sp, #28]
 800ede4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ede8:	931a      	str	r3, [sp, #104]	; 0x68
 800edea:	4654      	mov	r4, sl
 800edec:	2205      	movs	r2, #5
 800edee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edf2:	4858      	ldr	r0, [pc, #352]	; (800ef54 <_vfiprintf_r+0x24c>)
 800edf4:	f7f1 fa7c 	bl	80002f0 <memchr>
 800edf8:	9a04      	ldr	r2, [sp, #16]
 800edfa:	b9d8      	cbnz	r0, 800ee34 <_vfiprintf_r+0x12c>
 800edfc:	06d1      	lsls	r1, r2, #27
 800edfe:	bf44      	itt	mi
 800ee00:	2320      	movmi	r3, #32
 800ee02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee06:	0713      	lsls	r3, r2, #28
 800ee08:	bf44      	itt	mi
 800ee0a:	232b      	movmi	r3, #43	; 0x2b
 800ee0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee10:	f89a 3000 	ldrb.w	r3, [sl]
 800ee14:	2b2a      	cmp	r3, #42	; 0x2a
 800ee16:	d015      	beq.n	800ee44 <_vfiprintf_r+0x13c>
 800ee18:	9a07      	ldr	r2, [sp, #28]
 800ee1a:	4654      	mov	r4, sl
 800ee1c:	2000      	movs	r0, #0
 800ee1e:	f04f 0c0a 	mov.w	ip, #10
 800ee22:	4621      	mov	r1, r4
 800ee24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee28:	3b30      	subs	r3, #48	; 0x30
 800ee2a:	2b09      	cmp	r3, #9
 800ee2c:	d94e      	bls.n	800eecc <_vfiprintf_r+0x1c4>
 800ee2e:	b1b0      	cbz	r0, 800ee5e <_vfiprintf_r+0x156>
 800ee30:	9207      	str	r2, [sp, #28]
 800ee32:	e014      	b.n	800ee5e <_vfiprintf_r+0x156>
 800ee34:	eba0 0308 	sub.w	r3, r0, r8
 800ee38:	fa09 f303 	lsl.w	r3, r9, r3
 800ee3c:	4313      	orrs	r3, r2
 800ee3e:	9304      	str	r3, [sp, #16]
 800ee40:	46a2      	mov	sl, r4
 800ee42:	e7d2      	b.n	800edea <_vfiprintf_r+0xe2>
 800ee44:	9b03      	ldr	r3, [sp, #12]
 800ee46:	1d19      	adds	r1, r3, #4
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	9103      	str	r1, [sp, #12]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	bfbb      	ittet	lt
 800ee50:	425b      	neglt	r3, r3
 800ee52:	f042 0202 	orrlt.w	r2, r2, #2
 800ee56:	9307      	strge	r3, [sp, #28]
 800ee58:	9307      	strlt	r3, [sp, #28]
 800ee5a:	bfb8      	it	lt
 800ee5c:	9204      	strlt	r2, [sp, #16]
 800ee5e:	7823      	ldrb	r3, [r4, #0]
 800ee60:	2b2e      	cmp	r3, #46	; 0x2e
 800ee62:	d10c      	bne.n	800ee7e <_vfiprintf_r+0x176>
 800ee64:	7863      	ldrb	r3, [r4, #1]
 800ee66:	2b2a      	cmp	r3, #42	; 0x2a
 800ee68:	d135      	bne.n	800eed6 <_vfiprintf_r+0x1ce>
 800ee6a:	9b03      	ldr	r3, [sp, #12]
 800ee6c:	1d1a      	adds	r2, r3, #4
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	9203      	str	r2, [sp, #12]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	bfb8      	it	lt
 800ee76:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee7a:	3402      	adds	r4, #2
 800ee7c:	9305      	str	r3, [sp, #20]
 800ee7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ef64 <_vfiprintf_r+0x25c>
 800ee82:	7821      	ldrb	r1, [r4, #0]
 800ee84:	2203      	movs	r2, #3
 800ee86:	4650      	mov	r0, sl
 800ee88:	f7f1 fa32 	bl	80002f0 <memchr>
 800ee8c:	b140      	cbz	r0, 800eea0 <_vfiprintf_r+0x198>
 800ee8e:	2340      	movs	r3, #64	; 0x40
 800ee90:	eba0 000a 	sub.w	r0, r0, sl
 800ee94:	fa03 f000 	lsl.w	r0, r3, r0
 800ee98:	9b04      	ldr	r3, [sp, #16]
 800ee9a:	4303      	orrs	r3, r0
 800ee9c:	3401      	adds	r4, #1
 800ee9e:	9304      	str	r3, [sp, #16]
 800eea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eea4:	482c      	ldr	r0, [pc, #176]	; (800ef58 <_vfiprintf_r+0x250>)
 800eea6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eeaa:	2206      	movs	r2, #6
 800eeac:	f7f1 fa20 	bl	80002f0 <memchr>
 800eeb0:	2800      	cmp	r0, #0
 800eeb2:	d03f      	beq.n	800ef34 <_vfiprintf_r+0x22c>
 800eeb4:	4b29      	ldr	r3, [pc, #164]	; (800ef5c <_vfiprintf_r+0x254>)
 800eeb6:	bb1b      	cbnz	r3, 800ef00 <_vfiprintf_r+0x1f8>
 800eeb8:	9b03      	ldr	r3, [sp, #12]
 800eeba:	3307      	adds	r3, #7
 800eebc:	f023 0307 	bic.w	r3, r3, #7
 800eec0:	3308      	adds	r3, #8
 800eec2:	9303      	str	r3, [sp, #12]
 800eec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eec6:	443b      	add	r3, r7
 800eec8:	9309      	str	r3, [sp, #36]	; 0x24
 800eeca:	e767      	b.n	800ed9c <_vfiprintf_r+0x94>
 800eecc:	fb0c 3202 	mla	r2, ip, r2, r3
 800eed0:	460c      	mov	r4, r1
 800eed2:	2001      	movs	r0, #1
 800eed4:	e7a5      	b.n	800ee22 <_vfiprintf_r+0x11a>
 800eed6:	2300      	movs	r3, #0
 800eed8:	3401      	adds	r4, #1
 800eeda:	9305      	str	r3, [sp, #20]
 800eedc:	4619      	mov	r1, r3
 800eede:	f04f 0c0a 	mov.w	ip, #10
 800eee2:	4620      	mov	r0, r4
 800eee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eee8:	3a30      	subs	r2, #48	; 0x30
 800eeea:	2a09      	cmp	r2, #9
 800eeec:	d903      	bls.n	800eef6 <_vfiprintf_r+0x1ee>
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d0c5      	beq.n	800ee7e <_vfiprintf_r+0x176>
 800eef2:	9105      	str	r1, [sp, #20]
 800eef4:	e7c3      	b.n	800ee7e <_vfiprintf_r+0x176>
 800eef6:	fb0c 2101 	mla	r1, ip, r1, r2
 800eefa:	4604      	mov	r4, r0
 800eefc:	2301      	movs	r3, #1
 800eefe:	e7f0      	b.n	800eee2 <_vfiprintf_r+0x1da>
 800ef00:	ab03      	add	r3, sp, #12
 800ef02:	9300      	str	r3, [sp, #0]
 800ef04:	462a      	mov	r2, r5
 800ef06:	4b16      	ldr	r3, [pc, #88]	; (800ef60 <_vfiprintf_r+0x258>)
 800ef08:	a904      	add	r1, sp, #16
 800ef0a:	4630      	mov	r0, r6
 800ef0c:	f7fd ffac 	bl	800ce68 <_printf_float>
 800ef10:	4607      	mov	r7, r0
 800ef12:	1c78      	adds	r0, r7, #1
 800ef14:	d1d6      	bne.n	800eec4 <_vfiprintf_r+0x1bc>
 800ef16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef18:	07d9      	lsls	r1, r3, #31
 800ef1a:	d405      	bmi.n	800ef28 <_vfiprintf_r+0x220>
 800ef1c:	89ab      	ldrh	r3, [r5, #12]
 800ef1e:	059a      	lsls	r2, r3, #22
 800ef20:	d402      	bmi.n	800ef28 <_vfiprintf_r+0x220>
 800ef22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef24:	f7ff fa76 	bl	800e414 <__retarget_lock_release_recursive>
 800ef28:	89ab      	ldrh	r3, [r5, #12]
 800ef2a:	065b      	lsls	r3, r3, #25
 800ef2c:	f53f af12 	bmi.w	800ed54 <_vfiprintf_r+0x4c>
 800ef30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef32:	e711      	b.n	800ed58 <_vfiprintf_r+0x50>
 800ef34:	ab03      	add	r3, sp, #12
 800ef36:	9300      	str	r3, [sp, #0]
 800ef38:	462a      	mov	r2, r5
 800ef3a:	4b09      	ldr	r3, [pc, #36]	; (800ef60 <_vfiprintf_r+0x258>)
 800ef3c:	a904      	add	r1, sp, #16
 800ef3e:	4630      	mov	r0, r6
 800ef40:	f7fe fa1e 	bl	800d380 <_printf_i>
 800ef44:	e7e4      	b.n	800ef10 <_vfiprintf_r+0x208>
 800ef46:	bf00      	nop
 800ef48:	0800f9b4 	.word	0x0800f9b4
 800ef4c:	0800f9d4 	.word	0x0800f9d4
 800ef50:	0800f994 	.word	0x0800f994
 800ef54:	0800fb54 	.word	0x0800fb54
 800ef58:	0800fb5e 	.word	0x0800fb5e
 800ef5c:	0800ce69 	.word	0x0800ce69
 800ef60:	0800ece3 	.word	0x0800ece3
 800ef64:	0800fb5a 	.word	0x0800fb5a

0800ef68 <_sbrk_r>:
 800ef68:	b538      	push	{r3, r4, r5, lr}
 800ef6a:	4d06      	ldr	r5, [pc, #24]	; (800ef84 <_sbrk_r+0x1c>)
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	4604      	mov	r4, r0
 800ef70:	4608      	mov	r0, r1
 800ef72:	602b      	str	r3, [r5, #0]
 800ef74:	f7f3 fef0 	bl	8002d58 <_sbrk>
 800ef78:	1c43      	adds	r3, r0, #1
 800ef7a:	d102      	bne.n	800ef82 <_sbrk_r+0x1a>
 800ef7c:	682b      	ldr	r3, [r5, #0]
 800ef7e:	b103      	cbz	r3, 800ef82 <_sbrk_r+0x1a>
 800ef80:	6023      	str	r3, [r4, #0]
 800ef82:	bd38      	pop	{r3, r4, r5, pc}
 800ef84:	20000988 	.word	0x20000988

0800ef88 <__sread>:
 800ef88:	b510      	push	{r4, lr}
 800ef8a:	460c      	mov	r4, r1
 800ef8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef90:	f000 faa6 	bl	800f4e0 <_read_r>
 800ef94:	2800      	cmp	r0, #0
 800ef96:	bfab      	itete	ge
 800ef98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ef9a:	89a3      	ldrhlt	r3, [r4, #12]
 800ef9c:	181b      	addge	r3, r3, r0
 800ef9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800efa2:	bfac      	ite	ge
 800efa4:	6563      	strge	r3, [r4, #84]	; 0x54
 800efa6:	81a3      	strhlt	r3, [r4, #12]
 800efa8:	bd10      	pop	{r4, pc}

0800efaa <__swrite>:
 800efaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efae:	461f      	mov	r7, r3
 800efb0:	898b      	ldrh	r3, [r1, #12]
 800efb2:	05db      	lsls	r3, r3, #23
 800efb4:	4605      	mov	r5, r0
 800efb6:	460c      	mov	r4, r1
 800efb8:	4616      	mov	r6, r2
 800efba:	d505      	bpl.n	800efc8 <__swrite+0x1e>
 800efbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efc0:	2302      	movs	r3, #2
 800efc2:	2200      	movs	r2, #0
 800efc4:	f000 f9f8 	bl	800f3b8 <_lseek_r>
 800efc8:	89a3      	ldrh	r3, [r4, #12]
 800efca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800efd2:	81a3      	strh	r3, [r4, #12]
 800efd4:	4632      	mov	r2, r6
 800efd6:	463b      	mov	r3, r7
 800efd8:	4628      	mov	r0, r5
 800efda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efde:	f000 b869 	b.w	800f0b4 <_write_r>

0800efe2 <__sseek>:
 800efe2:	b510      	push	{r4, lr}
 800efe4:	460c      	mov	r4, r1
 800efe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efea:	f000 f9e5 	bl	800f3b8 <_lseek_r>
 800efee:	1c43      	adds	r3, r0, #1
 800eff0:	89a3      	ldrh	r3, [r4, #12]
 800eff2:	bf15      	itete	ne
 800eff4:	6560      	strne	r0, [r4, #84]	; 0x54
 800eff6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800effa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800effe:	81a3      	strheq	r3, [r4, #12]
 800f000:	bf18      	it	ne
 800f002:	81a3      	strhne	r3, [r4, #12]
 800f004:	bd10      	pop	{r4, pc}

0800f006 <__sclose>:
 800f006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f00a:	f000 b8f1 	b.w	800f1f0 <_close_r>
	...

0800f010 <__swbuf_r>:
 800f010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f012:	460e      	mov	r6, r1
 800f014:	4614      	mov	r4, r2
 800f016:	4605      	mov	r5, r0
 800f018:	b118      	cbz	r0, 800f022 <__swbuf_r+0x12>
 800f01a:	6983      	ldr	r3, [r0, #24]
 800f01c:	b90b      	cbnz	r3, 800f022 <__swbuf_r+0x12>
 800f01e:	f7ff f955 	bl	800e2cc <__sinit>
 800f022:	4b21      	ldr	r3, [pc, #132]	; (800f0a8 <__swbuf_r+0x98>)
 800f024:	429c      	cmp	r4, r3
 800f026:	d12b      	bne.n	800f080 <__swbuf_r+0x70>
 800f028:	686c      	ldr	r4, [r5, #4]
 800f02a:	69a3      	ldr	r3, [r4, #24]
 800f02c:	60a3      	str	r3, [r4, #8]
 800f02e:	89a3      	ldrh	r3, [r4, #12]
 800f030:	071a      	lsls	r2, r3, #28
 800f032:	d52f      	bpl.n	800f094 <__swbuf_r+0x84>
 800f034:	6923      	ldr	r3, [r4, #16]
 800f036:	b36b      	cbz	r3, 800f094 <__swbuf_r+0x84>
 800f038:	6923      	ldr	r3, [r4, #16]
 800f03a:	6820      	ldr	r0, [r4, #0]
 800f03c:	1ac0      	subs	r0, r0, r3
 800f03e:	6963      	ldr	r3, [r4, #20]
 800f040:	b2f6      	uxtb	r6, r6
 800f042:	4283      	cmp	r3, r0
 800f044:	4637      	mov	r7, r6
 800f046:	dc04      	bgt.n	800f052 <__swbuf_r+0x42>
 800f048:	4621      	mov	r1, r4
 800f04a:	4628      	mov	r0, r5
 800f04c:	f000 f966 	bl	800f31c <_fflush_r>
 800f050:	bb30      	cbnz	r0, 800f0a0 <__swbuf_r+0x90>
 800f052:	68a3      	ldr	r3, [r4, #8]
 800f054:	3b01      	subs	r3, #1
 800f056:	60a3      	str	r3, [r4, #8]
 800f058:	6823      	ldr	r3, [r4, #0]
 800f05a:	1c5a      	adds	r2, r3, #1
 800f05c:	6022      	str	r2, [r4, #0]
 800f05e:	701e      	strb	r6, [r3, #0]
 800f060:	6963      	ldr	r3, [r4, #20]
 800f062:	3001      	adds	r0, #1
 800f064:	4283      	cmp	r3, r0
 800f066:	d004      	beq.n	800f072 <__swbuf_r+0x62>
 800f068:	89a3      	ldrh	r3, [r4, #12]
 800f06a:	07db      	lsls	r3, r3, #31
 800f06c:	d506      	bpl.n	800f07c <__swbuf_r+0x6c>
 800f06e:	2e0a      	cmp	r6, #10
 800f070:	d104      	bne.n	800f07c <__swbuf_r+0x6c>
 800f072:	4621      	mov	r1, r4
 800f074:	4628      	mov	r0, r5
 800f076:	f000 f951 	bl	800f31c <_fflush_r>
 800f07a:	b988      	cbnz	r0, 800f0a0 <__swbuf_r+0x90>
 800f07c:	4638      	mov	r0, r7
 800f07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f080:	4b0a      	ldr	r3, [pc, #40]	; (800f0ac <__swbuf_r+0x9c>)
 800f082:	429c      	cmp	r4, r3
 800f084:	d101      	bne.n	800f08a <__swbuf_r+0x7a>
 800f086:	68ac      	ldr	r4, [r5, #8]
 800f088:	e7cf      	b.n	800f02a <__swbuf_r+0x1a>
 800f08a:	4b09      	ldr	r3, [pc, #36]	; (800f0b0 <__swbuf_r+0xa0>)
 800f08c:	429c      	cmp	r4, r3
 800f08e:	bf08      	it	eq
 800f090:	68ec      	ldreq	r4, [r5, #12]
 800f092:	e7ca      	b.n	800f02a <__swbuf_r+0x1a>
 800f094:	4621      	mov	r1, r4
 800f096:	4628      	mov	r0, r5
 800f098:	f000 f81e 	bl	800f0d8 <__swsetup_r>
 800f09c:	2800      	cmp	r0, #0
 800f09e:	d0cb      	beq.n	800f038 <__swbuf_r+0x28>
 800f0a0:	f04f 37ff 	mov.w	r7, #4294967295
 800f0a4:	e7ea      	b.n	800f07c <__swbuf_r+0x6c>
 800f0a6:	bf00      	nop
 800f0a8:	0800f9b4 	.word	0x0800f9b4
 800f0ac:	0800f9d4 	.word	0x0800f9d4
 800f0b0:	0800f994 	.word	0x0800f994

0800f0b4 <_write_r>:
 800f0b4:	b538      	push	{r3, r4, r5, lr}
 800f0b6:	4d07      	ldr	r5, [pc, #28]	; (800f0d4 <_write_r+0x20>)
 800f0b8:	4604      	mov	r4, r0
 800f0ba:	4608      	mov	r0, r1
 800f0bc:	4611      	mov	r1, r2
 800f0be:	2200      	movs	r2, #0
 800f0c0:	602a      	str	r2, [r5, #0]
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	f7f3 fdf7 	bl	8002cb6 <_write>
 800f0c8:	1c43      	adds	r3, r0, #1
 800f0ca:	d102      	bne.n	800f0d2 <_write_r+0x1e>
 800f0cc:	682b      	ldr	r3, [r5, #0]
 800f0ce:	b103      	cbz	r3, 800f0d2 <_write_r+0x1e>
 800f0d0:	6023      	str	r3, [r4, #0]
 800f0d2:	bd38      	pop	{r3, r4, r5, pc}
 800f0d4:	20000988 	.word	0x20000988

0800f0d8 <__swsetup_r>:
 800f0d8:	4b32      	ldr	r3, [pc, #200]	; (800f1a4 <__swsetup_r+0xcc>)
 800f0da:	b570      	push	{r4, r5, r6, lr}
 800f0dc:	681d      	ldr	r5, [r3, #0]
 800f0de:	4606      	mov	r6, r0
 800f0e0:	460c      	mov	r4, r1
 800f0e2:	b125      	cbz	r5, 800f0ee <__swsetup_r+0x16>
 800f0e4:	69ab      	ldr	r3, [r5, #24]
 800f0e6:	b913      	cbnz	r3, 800f0ee <__swsetup_r+0x16>
 800f0e8:	4628      	mov	r0, r5
 800f0ea:	f7ff f8ef 	bl	800e2cc <__sinit>
 800f0ee:	4b2e      	ldr	r3, [pc, #184]	; (800f1a8 <__swsetup_r+0xd0>)
 800f0f0:	429c      	cmp	r4, r3
 800f0f2:	d10f      	bne.n	800f114 <__swsetup_r+0x3c>
 800f0f4:	686c      	ldr	r4, [r5, #4]
 800f0f6:	89a3      	ldrh	r3, [r4, #12]
 800f0f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0fc:	0719      	lsls	r1, r3, #28
 800f0fe:	d42c      	bmi.n	800f15a <__swsetup_r+0x82>
 800f100:	06dd      	lsls	r5, r3, #27
 800f102:	d411      	bmi.n	800f128 <__swsetup_r+0x50>
 800f104:	2309      	movs	r3, #9
 800f106:	6033      	str	r3, [r6, #0]
 800f108:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f10c:	81a3      	strh	r3, [r4, #12]
 800f10e:	f04f 30ff 	mov.w	r0, #4294967295
 800f112:	e03e      	b.n	800f192 <__swsetup_r+0xba>
 800f114:	4b25      	ldr	r3, [pc, #148]	; (800f1ac <__swsetup_r+0xd4>)
 800f116:	429c      	cmp	r4, r3
 800f118:	d101      	bne.n	800f11e <__swsetup_r+0x46>
 800f11a:	68ac      	ldr	r4, [r5, #8]
 800f11c:	e7eb      	b.n	800f0f6 <__swsetup_r+0x1e>
 800f11e:	4b24      	ldr	r3, [pc, #144]	; (800f1b0 <__swsetup_r+0xd8>)
 800f120:	429c      	cmp	r4, r3
 800f122:	bf08      	it	eq
 800f124:	68ec      	ldreq	r4, [r5, #12]
 800f126:	e7e6      	b.n	800f0f6 <__swsetup_r+0x1e>
 800f128:	0758      	lsls	r0, r3, #29
 800f12a:	d512      	bpl.n	800f152 <__swsetup_r+0x7a>
 800f12c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f12e:	b141      	cbz	r1, 800f142 <__swsetup_r+0x6a>
 800f130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f134:	4299      	cmp	r1, r3
 800f136:	d002      	beq.n	800f13e <__swsetup_r+0x66>
 800f138:	4630      	mov	r0, r6
 800f13a:	f7ff fd11 	bl	800eb60 <_free_r>
 800f13e:	2300      	movs	r3, #0
 800f140:	6363      	str	r3, [r4, #52]	; 0x34
 800f142:	89a3      	ldrh	r3, [r4, #12]
 800f144:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f148:	81a3      	strh	r3, [r4, #12]
 800f14a:	2300      	movs	r3, #0
 800f14c:	6063      	str	r3, [r4, #4]
 800f14e:	6923      	ldr	r3, [r4, #16]
 800f150:	6023      	str	r3, [r4, #0]
 800f152:	89a3      	ldrh	r3, [r4, #12]
 800f154:	f043 0308 	orr.w	r3, r3, #8
 800f158:	81a3      	strh	r3, [r4, #12]
 800f15a:	6923      	ldr	r3, [r4, #16]
 800f15c:	b94b      	cbnz	r3, 800f172 <__swsetup_r+0x9a>
 800f15e:	89a3      	ldrh	r3, [r4, #12]
 800f160:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f168:	d003      	beq.n	800f172 <__swsetup_r+0x9a>
 800f16a:	4621      	mov	r1, r4
 800f16c:	4630      	mov	r0, r6
 800f16e:	f000 f959 	bl	800f424 <__smakebuf_r>
 800f172:	89a0      	ldrh	r0, [r4, #12]
 800f174:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f178:	f010 0301 	ands.w	r3, r0, #1
 800f17c:	d00a      	beq.n	800f194 <__swsetup_r+0xbc>
 800f17e:	2300      	movs	r3, #0
 800f180:	60a3      	str	r3, [r4, #8]
 800f182:	6963      	ldr	r3, [r4, #20]
 800f184:	425b      	negs	r3, r3
 800f186:	61a3      	str	r3, [r4, #24]
 800f188:	6923      	ldr	r3, [r4, #16]
 800f18a:	b943      	cbnz	r3, 800f19e <__swsetup_r+0xc6>
 800f18c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f190:	d1ba      	bne.n	800f108 <__swsetup_r+0x30>
 800f192:	bd70      	pop	{r4, r5, r6, pc}
 800f194:	0781      	lsls	r1, r0, #30
 800f196:	bf58      	it	pl
 800f198:	6963      	ldrpl	r3, [r4, #20]
 800f19a:	60a3      	str	r3, [r4, #8]
 800f19c:	e7f4      	b.n	800f188 <__swsetup_r+0xb0>
 800f19e:	2000      	movs	r0, #0
 800f1a0:	e7f7      	b.n	800f192 <__swsetup_r+0xba>
 800f1a2:	bf00      	nop
 800f1a4:	20000018 	.word	0x20000018
 800f1a8:	0800f9b4 	.word	0x0800f9b4
 800f1ac:	0800f9d4 	.word	0x0800f9d4
 800f1b0:	0800f994 	.word	0x0800f994

0800f1b4 <__assert_func>:
 800f1b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f1b6:	4614      	mov	r4, r2
 800f1b8:	461a      	mov	r2, r3
 800f1ba:	4b09      	ldr	r3, [pc, #36]	; (800f1e0 <__assert_func+0x2c>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	4605      	mov	r5, r0
 800f1c0:	68d8      	ldr	r0, [r3, #12]
 800f1c2:	b14c      	cbz	r4, 800f1d8 <__assert_func+0x24>
 800f1c4:	4b07      	ldr	r3, [pc, #28]	; (800f1e4 <__assert_func+0x30>)
 800f1c6:	9100      	str	r1, [sp, #0]
 800f1c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f1cc:	4906      	ldr	r1, [pc, #24]	; (800f1e8 <__assert_func+0x34>)
 800f1ce:	462b      	mov	r3, r5
 800f1d0:	f000 f8e0 	bl	800f394 <fiprintf>
 800f1d4:	f000 f9a3 	bl	800f51e <abort>
 800f1d8:	4b04      	ldr	r3, [pc, #16]	; (800f1ec <__assert_func+0x38>)
 800f1da:	461c      	mov	r4, r3
 800f1dc:	e7f3      	b.n	800f1c6 <__assert_func+0x12>
 800f1de:	bf00      	nop
 800f1e0:	20000018 	.word	0x20000018
 800f1e4:	0800fb65 	.word	0x0800fb65
 800f1e8:	0800fb72 	.word	0x0800fb72
 800f1ec:	0800fba0 	.word	0x0800fba0

0800f1f0 <_close_r>:
 800f1f0:	b538      	push	{r3, r4, r5, lr}
 800f1f2:	4d06      	ldr	r5, [pc, #24]	; (800f20c <_close_r+0x1c>)
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	4604      	mov	r4, r0
 800f1f8:	4608      	mov	r0, r1
 800f1fa:	602b      	str	r3, [r5, #0]
 800f1fc:	f7f3 fd77 	bl	8002cee <_close>
 800f200:	1c43      	adds	r3, r0, #1
 800f202:	d102      	bne.n	800f20a <_close_r+0x1a>
 800f204:	682b      	ldr	r3, [r5, #0]
 800f206:	b103      	cbz	r3, 800f20a <_close_r+0x1a>
 800f208:	6023      	str	r3, [r4, #0]
 800f20a:	bd38      	pop	{r3, r4, r5, pc}
 800f20c:	20000988 	.word	0x20000988

0800f210 <__sflush_r>:
 800f210:	898a      	ldrh	r2, [r1, #12]
 800f212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f216:	4605      	mov	r5, r0
 800f218:	0710      	lsls	r0, r2, #28
 800f21a:	460c      	mov	r4, r1
 800f21c:	d458      	bmi.n	800f2d0 <__sflush_r+0xc0>
 800f21e:	684b      	ldr	r3, [r1, #4]
 800f220:	2b00      	cmp	r3, #0
 800f222:	dc05      	bgt.n	800f230 <__sflush_r+0x20>
 800f224:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f226:	2b00      	cmp	r3, #0
 800f228:	dc02      	bgt.n	800f230 <__sflush_r+0x20>
 800f22a:	2000      	movs	r0, #0
 800f22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f232:	2e00      	cmp	r6, #0
 800f234:	d0f9      	beq.n	800f22a <__sflush_r+0x1a>
 800f236:	2300      	movs	r3, #0
 800f238:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f23c:	682f      	ldr	r7, [r5, #0]
 800f23e:	602b      	str	r3, [r5, #0]
 800f240:	d032      	beq.n	800f2a8 <__sflush_r+0x98>
 800f242:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f244:	89a3      	ldrh	r3, [r4, #12]
 800f246:	075a      	lsls	r2, r3, #29
 800f248:	d505      	bpl.n	800f256 <__sflush_r+0x46>
 800f24a:	6863      	ldr	r3, [r4, #4]
 800f24c:	1ac0      	subs	r0, r0, r3
 800f24e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f250:	b10b      	cbz	r3, 800f256 <__sflush_r+0x46>
 800f252:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f254:	1ac0      	subs	r0, r0, r3
 800f256:	2300      	movs	r3, #0
 800f258:	4602      	mov	r2, r0
 800f25a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f25c:	6a21      	ldr	r1, [r4, #32]
 800f25e:	4628      	mov	r0, r5
 800f260:	47b0      	blx	r6
 800f262:	1c43      	adds	r3, r0, #1
 800f264:	89a3      	ldrh	r3, [r4, #12]
 800f266:	d106      	bne.n	800f276 <__sflush_r+0x66>
 800f268:	6829      	ldr	r1, [r5, #0]
 800f26a:	291d      	cmp	r1, #29
 800f26c:	d82c      	bhi.n	800f2c8 <__sflush_r+0xb8>
 800f26e:	4a2a      	ldr	r2, [pc, #168]	; (800f318 <__sflush_r+0x108>)
 800f270:	40ca      	lsrs	r2, r1
 800f272:	07d6      	lsls	r6, r2, #31
 800f274:	d528      	bpl.n	800f2c8 <__sflush_r+0xb8>
 800f276:	2200      	movs	r2, #0
 800f278:	6062      	str	r2, [r4, #4]
 800f27a:	04d9      	lsls	r1, r3, #19
 800f27c:	6922      	ldr	r2, [r4, #16]
 800f27e:	6022      	str	r2, [r4, #0]
 800f280:	d504      	bpl.n	800f28c <__sflush_r+0x7c>
 800f282:	1c42      	adds	r2, r0, #1
 800f284:	d101      	bne.n	800f28a <__sflush_r+0x7a>
 800f286:	682b      	ldr	r3, [r5, #0]
 800f288:	b903      	cbnz	r3, 800f28c <__sflush_r+0x7c>
 800f28a:	6560      	str	r0, [r4, #84]	; 0x54
 800f28c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f28e:	602f      	str	r7, [r5, #0]
 800f290:	2900      	cmp	r1, #0
 800f292:	d0ca      	beq.n	800f22a <__sflush_r+0x1a>
 800f294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f298:	4299      	cmp	r1, r3
 800f29a:	d002      	beq.n	800f2a2 <__sflush_r+0x92>
 800f29c:	4628      	mov	r0, r5
 800f29e:	f7ff fc5f 	bl	800eb60 <_free_r>
 800f2a2:	2000      	movs	r0, #0
 800f2a4:	6360      	str	r0, [r4, #52]	; 0x34
 800f2a6:	e7c1      	b.n	800f22c <__sflush_r+0x1c>
 800f2a8:	6a21      	ldr	r1, [r4, #32]
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	4628      	mov	r0, r5
 800f2ae:	47b0      	blx	r6
 800f2b0:	1c41      	adds	r1, r0, #1
 800f2b2:	d1c7      	bne.n	800f244 <__sflush_r+0x34>
 800f2b4:	682b      	ldr	r3, [r5, #0]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d0c4      	beq.n	800f244 <__sflush_r+0x34>
 800f2ba:	2b1d      	cmp	r3, #29
 800f2bc:	d001      	beq.n	800f2c2 <__sflush_r+0xb2>
 800f2be:	2b16      	cmp	r3, #22
 800f2c0:	d101      	bne.n	800f2c6 <__sflush_r+0xb6>
 800f2c2:	602f      	str	r7, [r5, #0]
 800f2c4:	e7b1      	b.n	800f22a <__sflush_r+0x1a>
 800f2c6:	89a3      	ldrh	r3, [r4, #12]
 800f2c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2cc:	81a3      	strh	r3, [r4, #12]
 800f2ce:	e7ad      	b.n	800f22c <__sflush_r+0x1c>
 800f2d0:	690f      	ldr	r7, [r1, #16]
 800f2d2:	2f00      	cmp	r7, #0
 800f2d4:	d0a9      	beq.n	800f22a <__sflush_r+0x1a>
 800f2d6:	0793      	lsls	r3, r2, #30
 800f2d8:	680e      	ldr	r6, [r1, #0]
 800f2da:	bf08      	it	eq
 800f2dc:	694b      	ldreq	r3, [r1, #20]
 800f2de:	600f      	str	r7, [r1, #0]
 800f2e0:	bf18      	it	ne
 800f2e2:	2300      	movne	r3, #0
 800f2e4:	eba6 0807 	sub.w	r8, r6, r7
 800f2e8:	608b      	str	r3, [r1, #8]
 800f2ea:	f1b8 0f00 	cmp.w	r8, #0
 800f2ee:	dd9c      	ble.n	800f22a <__sflush_r+0x1a>
 800f2f0:	6a21      	ldr	r1, [r4, #32]
 800f2f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f2f4:	4643      	mov	r3, r8
 800f2f6:	463a      	mov	r2, r7
 800f2f8:	4628      	mov	r0, r5
 800f2fa:	47b0      	blx	r6
 800f2fc:	2800      	cmp	r0, #0
 800f2fe:	dc06      	bgt.n	800f30e <__sflush_r+0xfe>
 800f300:	89a3      	ldrh	r3, [r4, #12]
 800f302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f306:	81a3      	strh	r3, [r4, #12]
 800f308:	f04f 30ff 	mov.w	r0, #4294967295
 800f30c:	e78e      	b.n	800f22c <__sflush_r+0x1c>
 800f30e:	4407      	add	r7, r0
 800f310:	eba8 0800 	sub.w	r8, r8, r0
 800f314:	e7e9      	b.n	800f2ea <__sflush_r+0xda>
 800f316:	bf00      	nop
 800f318:	20400001 	.word	0x20400001

0800f31c <_fflush_r>:
 800f31c:	b538      	push	{r3, r4, r5, lr}
 800f31e:	690b      	ldr	r3, [r1, #16]
 800f320:	4605      	mov	r5, r0
 800f322:	460c      	mov	r4, r1
 800f324:	b913      	cbnz	r3, 800f32c <_fflush_r+0x10>
 800f326:	2500      	movs	r5, #0
 800f328:	4628      	mov	r0, r5
 800f32a:	bd38      	pop	{r3, r4, r5, pc}
 800f32c:	b118      	cbz	r0, 800f336 <_fflush_r+0x1a>
 800f32e:	6983      	ldr	r3, [r0, #24]
 800f330:	b90b      	cbnz	r3, 800f336 <_fflush_r+0x1a>
 800f332:	f7fe ffcb 	bl	800e2cc <__sinit>
 800f336:	4b14      	ldr	r3, [pc, #80]	; (800f388 <_fflush_r+0x6c>)
 800f338:	429c      	cmp	r4, r3
 800f33a:	d11b      	bne.n	800f374 <_fflush_r+0x58>
 800f33c:	686c      	ldr	r4, [r5, #4]
 800f33e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d0ef      	beq.n	800f326 <_fflush_r+0xa>
 800f346:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f348:	07d0      	lsls	r0, r2, #31
 800f34a:	d404      	bmi.n	800f356 <_fflush_r+0x3a>
 800f34c:	0599      	lsls	r1, r3, #22
 800f34e:	d402      	bmi.n	800f356 <_fflush_r+0x3a>
 800f350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f352:	f7ff f85e 	bl	800e412 <__retarget_lock_acquire_recursive>
 800f356:	4628      	mov	r0, r5
 800f358:	4621      	mov	r1, r4
 800f35a:	f7ff ff59 	bl	800f210 <__sflush_r>
 800f35e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f360:	07da      	lsls	r2, r3, #31
 800f362:	4605      	mov	r5, r0
 800f364:	d4e0      	bmi.n	800f328 <_fflush_r+0xc>
 800f366:	89a3      	ldrh	r3, [r4, #12]
 800f368:	059b      	lsls	r3, r3, #22
 800f36a:	d4dd      	bmi.n	800f328 <_fflush_r+0xc>
 800f36c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f36e:	f7ff f851 	bl	800e414 <__retarget_lock_release_recursive>
 800f372:	e7d9      	b.n	800f328 <_fflush_r+0xc>
 800f374:	4b05      	ldr	r3, [pc, #20]	; (800f38c <_fflush_r+0x70>)
 800f376:	429c      	cmp	r4, r3
 800f378:	d101      	bne.n	800f37e <_fflush_r+0x62>
 800f37a:	68ac      	ldr	r4, [r5, #8]
 800f37c:	e7df      	b.n	800f33e <_fflush_r+0x22>
 800f37e:	4b04      	ldr	r3, [pc, #16]	; (800f390 <_fflush_r+0x74>)
 800f380:	429c      	cmp	r4, r3
 800f382:	bf08      	it	eq
 800f384:	68ec      	ldreq	r4, [r5, #12]
 800f386:	e7da      	b.n	800f33e <_fflush_r+0x22>
 800f388:	0800f9b4 	.word	0x0800f9b4
 800f38c:	0800f9d4 	.word	0x0800f9d4
 800f390:	0800f994 	.word	0x0800f994

0800f394 <fiprintf>:
 800f394:	b40e      	push	{r1, r2, r3}
 800f396:	b503      	push	{r0, r1, lr}
 800f398:	4601      	mov	r1, r0
 800f39a:	ab03      	add	r3, sp, #12
 800f39c:	4805      	ldr	r0, [pc, #20]	; (800f3b4 <fiprintf+0x20>)
 800f39e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3a2:	6800      	ldr	r0, [r0, #0]
 800f3a4:	9301      	str	r3, [sp, #4]
 800f3a6:	f7ff fcaf 	bl	800ed08 <_vfiprintf_r>
 800f3aa:	b002      	add	sp, #8
 800f3ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3b0:	b003      	add	sp, #12
 800f3b2:	4770      	bx	lr
 800f3b4:	20000018 	.word	0x20000018

0800f3b8 <_lseek_r>:
 800f3b8:	b538      	push	{r3, r4, r5, lr}
 800f3ba:	4d07      	ldr	r5, [pc, #28]	; (800f3d8 <_lseek_r+0x20>)
 800f3bc:	4604      	mov	r4, r0
 800f3be:	4608      	mov	r0, r1
 800f3c0:	4611      	mov	r1, r2
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	602a      	str	r2, [r5, #0]
 800f3c6:	461a      	mov	r2, r3
 800f3c8:	f7f3 fcb8 	bl	8002d3c <_lseek>
 800f3cc:	1c43      	adds	r3, r0, #1
 800f3ce:	d102      	bne.n	800f3d6 <_lseek_r+0x1e>
 800f3d0:	682b      	ldr	r3, [r5, #0]
 800f3d2:	b103      	cbz	r3, 800f3d6 <_lseek_r+0x1e>
 800f3d4:	6023      	str	r3, [r4, #0]
 800f3d6:	bd38      	pop	{r3, r4, r5, pc}
 800f3d8:	20000988 	.word	0x20000988

0800f3dc <__swhatbuf_r>:
 800f3dc:	b570      	push	{r4, r5, r6, lr}
 800f3de:	460e      	mov	r6, r1
 800f3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3e4:	2900      	cmp	r1, #0
 800f3e6:	b096      	sub	sp, #88	; 0x58
 800f3e8:	4614      	mov	r4, r2
 800f3ea:	461d      	mov	r5, r3
 800f3ec:	da07      	bge.n	800f3fe <__swhatbuf_r+0x22>
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	602b      	str	r3, [r5, #0]
 800f3f2:	89b3      	ldrh	r3, [r6, #12]
 800f3f4:	061a      	lsls	r2, r3, #24
 800f3f6:	d410      	bmi.n	800f41a <__swhatbuf_r+0x3e>
 800f3f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3fc:	e00e      	b.n	800f41c <__swhatbuf_r+0x40>
 800f3fe:	466a      	mov	r2, sp
 800f400:	f000 f894 	bl	800f52c <_fstat_r>
 800f404:	2800      	cmp	r0, #0
 800f406:	dbf2      	blt.n	800f3ee <__swhatbuf_r+0x12>
 800f408:	9a01      	ldr	r2, [sp, #4]
 800f40a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f40e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f412:	425a      	negs	r2, r3
 800f414:	415a      	adcs	r2, r3
 800f416:	602a      	str	r2, [r5, #0]
 800f418:	e7ee      	b.n	800f3f8 <__swhatbuf_r+0x1c>
 800f41a:	2340      	movs	r3, #64	; 0x40
 800f41c:	2000      	movs	r0, #0
 800f41e:	6023      	str	r3, [r4, #0]
 800f420:	b016      	add	sp, #88	; 0x58
 800f422:	bd70      	pop	{r4, r5, r6, pc}

0800f424 <__smakebuf_r>:
 800f424:	898b      	ldrh	r3, [r1, #12]
 800f426:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f428:	079d      	lsls	r5, r3, #30
 800f42a:	4606      	mov	r6, r0
 800f42c:	460c      	mov	r4, r1
 800f42e:	d507      	bpl.n	800f440 <__smakebuf_r+0x1c>
 800f430:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f434:	6023      	str	r3, [r4, #0]
 800f436:	6123      	str	r3, [r4, #16]
 800f438:	2301      	movs	r3, #1
 800f43a:	6163      	str	r3, [r4, #20]
 800f43c:	b002      	add	sp, #8
 800f43e:	bd70      	pop	{r4, r5, r6, pc}
 800f440:	ab01      	add	r3, sp, #4
 800f442:	466a      	mov	r2, sp
 800f444:	f7ff ffca 	bl	800f3dc <__swhatbuf_r>
 800f448:	9900      	ldr	r1, [sp, #0]
 800f44a:	4605      	mov	r5, r0
 800f44c:	4630      	mov	r0, r6
 800f44e:	f7ff fbd7 	bl	800ec00 <_malloc_r>
 800f452:	b948      	cbnz	r0, 800f468 <__smakebuf_r+0x44>
 800f454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f458:	059a      	lsls	r2, r3, #22
 800f45a:	d4ef      	bmi.n	800f43c <__smakebuf_r+0x18>
 800f45c:	f023 0303 	bic.w	r3, r3, #3
 800f460:	f043 0302 	orr.w	r3, r3, #2
 800f464:	81a3      	strh	r3, [r4, #12]
 800f466:	e7e3      	b.n	800f430 <__smakebuf_r+0xc>
 800f468:	4b0d      	ldr	r3, [pc, #52]	; (800f4a0 <__smakebuf_r+0x7c>)
 800f46a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f46c:	89a3      	ldrh	r3, [r4, #12]
 800f46e:	6020      	str	r0, [r4, #0]
 800f470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f474:	81a3      	strh	r3, [r4, #12]
 800f476:	9b00      	ldr	r3, [sp, #0]
 800f478:	6163      	str	r3, [r4, #20]
 800f47a:	9b01      	ldr	r3, [sp, #4]
 800f47c:	6120      	str	r0, [r4, #16]
 800f47e:	b15b      	cbz	r3, 800f498 <__smakebuf_r+0x74>
 800f480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f484:	4630      	mov	r0, r6
 800f486:	f000 f863 	bl	800f550 <_isatty_r>
 800f48a:	b128      	cbz	r0, 800f498 <__smakebuf_r+0x74>
 800f48c:	89a3      	ldrh	r3, [r4, #12]
 800f48e:	f023 0303 	bic.w	r3, r3, #3
 800f492:	f043 0301 	orr.w	r3, r3, #1
 800f496:	81a3      	strh	r3, [r4, #12]
 800f498:	89a0      	ldrh	r0, [r4, #12]
 800f49a:	4305      	orrs	r5, r0
 800f49c:	81a5      	strh	r5, [r4, #12]
 800f49e:	e7cd      	b.n	800f43c <__smakebuf_r+0x18>
 800f4a0:	0800e265 	.word	0x0800e265

0800f4a4 <__ascii_mbtowc>:
 800f4a4:	b082      	sub	sp, #8
 800f4a6:	b901      	cbnz	r1, 800f4aa <__ascii_mbtowc+0x6>
 800f4a8:	a901      	add	r1, sp, #4
 800f4aa:	b142      	cbz	r2, 800f4be <__ascii_mbtowc+0x1a>
 800f4ac:	b14b      	cbz	r3, 800f4c2 <__ascii_mbtowc+0x1e>
 800f4ae:	7813      	ldrb	r3, [r2, #0]
 800f4b0:	600b      	str	r3, [r1, #0]
 800f4b2:	7812      	ldrb	r2, [r2, #0]
 800f4b4:	1e10      	subs	r0, r2, #0
 800f4b6:	bf18      	it	ne
 800f4b8:	2001      	movne	r0, #1
 800f4ba:	b002      	add	sp, #8
 800f4bc:	4770      	bx	lr
 800f4be:	4610      	mov	r0, r2
 800f4c0:	e7fb      	b.n	800f4ba <__ascii_mbtowc+0x16>
 800f4c2:	f06f 0001 	mvn.w	r0, #1
 800f4c6:	e7f8      	b.n	800f4ba <__ascii_mbtowc+0x16>

0800f4c8 <__malloc_lock>:
 800f4c8:	4801      	ldr	r0, [pc, #4]	; (800f4d0 <__malloc_lock+0x8>)
 800f4ca:	f7fe bfa2 	b.w	800e412 <__retarget_lock_acquire_recursive>
 800f4ce:	bf00      	nop
 800f4d0:	20000980 	.word	0x20000980

0800f4d4 <__malloc_unlock>:
 800f4d4:	4801      	ldr	r0, [pc, #4]	; (800f4dc <__malloc_unlock+0x8>)
 800f4d6:	f7fe bf9d 	b.w	800e414 <__retarget_lock_release_recursive>
 800f4da:	bf00      	nop
 800f4dc:	20000980 	.word	0x20000980

0800f4e0 <_read_r>:
 800f4e0:	b538      	push	{r3, r4, r5, lr}
 800f4e2:	4d07      	ldr	r5, [pc, #28]	; (800f500 <_read_r+0x20>)
 800f4e4:	4604      	mov	r4, r0
 800f4e6:	4608      	mov	r0, r1
 800f4e8:	4611      	mov	r1, r2
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	602a      	str	r2, [r5, #0]
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	f7f3 fbc4 	bl	8002c7c <_read>
 800f4f4:	1c43      	adds	r3, r0, #1
 800f4f6:	d102      	bne.n	800f4fe <_read_r+0x1e>
 800f4f8:	682b      	ldr	r3, [r5, #0]
 800f4fa:	b103      	cbz	r3, 800f4fe <_read_r+0x1e>
 800f4fc:	6023      	str	r3, [r4, #0]
 800f4fe:	bd38      	pop	{r3, r4, r5, pc}
 800f500:	20000988 	.word	0x20000988

0800f504 <__ascii_wctomb>:
 800f504:	b149      	cbz	r1, 800f51a <__ascii_wctomb+0x16>
 800f506:	2aff      	cmp	r2, #255	; 0xff
 800f508:	bf85      	ittet	hi
 800f50a:	238a      	movhi	r3, #138	; 0x8a
 800f50c:	6003      	strhi	r3, [r0, #0]
 800f50e:	700a      	strbls	r2, [r1, #0]
 800f510:	f04f 30ff 	movhi.w	r0, #4294967295
 800f514:	bf98      	it	ls
 800f516:	2001      	movls	r0, #1
 800f518:	4770      	bx	lr
 800f51a:	4608      	mov	r0, r1
 800f51c:	4770      	bx	lr

0800f51e <abort>:
 800f51e:	b508      	push	{r3, lr}
 800f520:	2006      	movs	r0, #6
 800f522:	f000 f84d 	bl	800f5c0 <raise>
 800f526:	2001      	movs	r0, #1
 800f528:	f7f3 fb9e 	bl	8002c68 <_exit>

0800f52c <_fstat_r>:
 800f52c:	b538      	push	{r3, r4, r5, lr}
 800f52e:	4d07      	ldr	r5, [pc, #28]	; (800f54c <_fstat_r+0x20>)
 800f530:	2300      	movs	r3, #0
 800f532:	4604      	mov	r4, r0
 800f534:	4608      	mov	r0, r1
 800f536:	4611      	mov	r1, r2
 800f538:	602b      	str	r3, [r5, #0]
 800f53a:	f7f3 fbe4 	bl	8002d06 <_fstat>
 800f53e:	1c43      	adds	r3, r0, #1
 800f540:	d102      	bne.n	800f548 <_fstat_r+0x1c>
 800f542:	682b      	ldr	r3, [r5, #0]
 800f544:	b103      	cbz	r3, 800f548 <_fstat_r+0x1c>
 800f546:	6023      	str	r3, [r4, #0]
 800f548:	bd38      	pop	{r3, r4, r5, pc}
 800f54a:	bf00      	nop
 800f54c:	20000988 	.word	0x20000988

0800f550 <_isatty_r>:
 800f550:	b538      	push	{r3, r4, r5, lr}
 800f552:	4d06      	ldr	r5, [pc, #24]	; (800f56c <_isatty_r+0x1c>)
 800f554:	2300      	movs	r3, #0
 800f556:	4604      	mov	r4, r0
 800f558:	4608      	mov	r0, r1
 800f55a:	602b      	str	r3, [r5, #0]
 800f55c:	f7f3 fbe3 	bl	8002d26 <_isatty>
 800f560:	1c43      	adds	r3, r0, #1
 800f562:	d102      	bne.n	800f56a <_isatty_r+0x1a>
 800f564:	682b      	ldr	r3, [r5, #0]
 800f566:	b103      	cbz	r3, 800f56a <_isatty_r+0x1a>
 800f568:	6023      	str	r3, [r4, #0]
 800f56a:	bd38      	pop	{r3, r4, r5, pc}
 800f56c:	20000988 	.word	0x20000988

0800f570 <_raise_r>:
 800f570:	291f      	cmp	r1, #31
 800f572:	b538      	push	{r3, r4, r5, lr}
 800f574:	4604      	mov	r4, r0
 800f576:	460d      	mov	r5, r1
 800f578:	d904      	bls.n	800f584 <_raise_r+0x14>
 800f57a:	2316      	movs	r3, #22
 800f57c:	6003      	str	r3, [r0, #0]
 800f57e:	f04f 30ff 	mov.w	r0, #4294967295
 800f582:	bd38      	pop	{r3, r4, r5, pc}
 800f584:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f586:	b112      	cbz	r2, 800f58e <_raise_r+0x1e>
 800f588:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f58c:	b94b      	cbnz	r3, 800f5a2 <_raise_r+0x32>
 800f58e:	4620      	mov	r0, r4
 800f590:	f000 f830 	bl	800f5f4 <_getpid_r>
 800f594:	462a      	mov	r2, r5
 800f596:	4601      	mov	r1, r0
 800f598:	4620      	mov	r0, r4
 800f59a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f59e:	f000 b817 	b.w	800f5d0 <_kill_r>
 800f5a2:	2b01      	cmp	r3, #1
 800f5a4:	d00a      	beq.n	800f5bc <_raise_r+0x4c>
 800f5a6:	1c59      	adds	r1, r3, #1
 800f5a8:	d103      	bne.n	800f5b2 <_raise_r+0x42>
 800f5aa:	2316      	movs	r3, #22
 800f5ac:	6003      	str	r3, [r0, #0]
 800f5ae:	2001      	movs	r0, #1
 800f5b0:	e7e7      	b.n	800f582 <_raise_r+0x12>
 800f5b2:	2400      	movs	r4, #0
 800f5b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f5b8:	4628      	mov	r0, r5
 800f5ba:	4798      	blx	r3
 800f5bc:	2000      	movs	r0, #0
 800f5be:	e7e0      	b.n	800f582 <_raise_r+0x12>

0800f5c0 <raise>:
 800f5c0:	4b02      	ldr	r3, [pc, #8]	; (800f5cc <raise+0xc>)
 800f5c2:	4601      	mov	r1, r0
 800f5c4:	6818      	ldr	r0, [r3, #0]
 800f5c6:	f7ff bfd3 	b.w	800f570 <_raise_r>
 800f5ca:	bf00      	nop
 800f5cc:	20000018 	.word	0x20000018

0800f5d0 <_kill_r>:
 800f5d0:	b538      	push	{r3, r4, r5, lr}
 800f5d2:	4d07      	ldr	r5, [pc, #28]	; (800f5f0 <_kill_r+0x20>)
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	4604      	mov	r4, r0
 800f5d8:	4608      	mov	r0, r1
 800f5da:	4611      	mov	r1, r2
 800f5dc:	602b      	str	r3, [r5, #0]
 800f5de:	f7f3 fb33 	bl	8002c48 <_kill>
 800f5e2:	1c43      	adds	r3, r0, #1
 800f5e4:	d102      	bne.n	800f5ec <_kill_r+0x1c>
 800f5e6:	682b      	ldr	r3, [r5, #0]
 800f5e8:	b103      	cbz	r3, 800f5ec <_kill_r+0x1c>
 800f5ea:	6023      	str	r3, [r4, #0]
 800f5ec:	bd38      	pop	{r3, r4, r5, pc}
 800f5ee:	bf00      	nop
 800f5f0:	20000988 	.word	0x20000988

0800f5f4 <_getpid_r>:
 800f5f4:	f7f3 bb20 	b.w	8002c38 <_getpid>

0800f5f8 <_init>:
 800f5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5fa:	bf00      	nop
 800f5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5fe:	bc08      	pop	{r3}
 800f600:	469e      	mov	lr, r3
 800f602:	4770      	bx	lr

0800f604 <_fini>:
 800f604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f606:	bf00      	nop
 800f608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f60a:	bc08      	pop	{r3}
 800f60c:	469e      	mov	lr, r3
 800f60e:	4770      	bx	lr
